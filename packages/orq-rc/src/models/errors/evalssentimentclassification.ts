/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { OrqError } from "./orqerror.js";

/**
 * Internal server error
 */
export type EvalsSentimentClassificationEvalsResponseBodyData = {
  message: string;
};

/**
 * Internal server error
 */
export class EvalsSentimentClassificationEvalsResponseBody extends OrqError {
  /** The original data that was passed to this error instance. */
  data$: EvalsSentimentClassificationEvalsResponseBodyData;

  constructor(
    err: EvalsSentimentClassificationEvalsResponseBodyData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;

    this.name = "EvalsSentimentClassificationEvalsResponseBody";
  }
}

/**
 * Evaluator not found
 */
export type EvalsSentimentClassificationResponseBodyData = {
  message: string;
};

/**
 * Evaluator not found
 */
export class EvalsSentimentClassificationResponseBody extends OrqError {
  /** The original data that was passed to this error instance. */
  data$: EvalsSentimentClassificationResponseBodyData;

  constructor(
    err: EvalsSentimentClassificationResponseBodyData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;

    this.name = "EvalsSentimentClassificationResponseBody";
  }
}

/** @internal */
export const EvalsSentimentClassificationEvalsResponseBody$inboundSchema:
  z.ZodType<
    EvalsSentimentClassificationEvalsResponseBody,
    z.ZodTypeDef,
    unknown
  > = z.object({
    message: z.string(),
    request$: z.instanceof(Request),
    response$: z.instanceof(Response),
    body$: z.string(),
  })
    .transform((v) => {
      return new EvalsSentimentClassificationEvalsResponseBody(v, {
        request: v.request$,
        response: v.response$,
        body: v.body$,
      });
    });

/** @internal */
export type EvalsSentimentClassificationEvalsResponseBody$Outbound = {
  message: string;
};

/** @internal */
export const EvalsSentimentClassificationEvalsResponseBody$outboundSchema:
  z.ZodType<
    EvalsSentimentClassificationEvalsResponseBody$Outbound,
    z.ZodTypeDef,
    EvalsSentimentClassificationEvalsResponseBody
  > = z.instanceof(EvalsSentimentClassificationEvalsResponseBody)
    .transform(v => v.data$)
    .pipe(z.object({
      message: z.string(),
    }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EvalsSentimentClassificationEvalsResponseBody$ {
  /** @deprecated use `EvalsSentimentClassificationEvalsResponseBody$inboundSchema` instead. */
  export const inboundSchema =
    EvalsSentimentClassificationEvalsResponseBody$inboundSchema;
  /** @deprecated use `EvalsSentimentClassificationEvalsResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    EvalsSentimentClassificationEvalsResponseBody$outboundSchema;
  /** @deprecated use `EvalsSentimentClassificationEvalsResponseBody$Outbound` instead. */
  export type Outbound = EvalsSentimentClassificationEvalsResponseBody$Outbound;
}

/** @internal */
export const EvalsSentimentClassificationResponseBody$inboundSchema: z.ZodType<
  EvalsSentimentClassificationResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  message: z.string(),
  request$: z.instanceof(Request),
  response$: z.instanceof(Response),
  body$: z.string(),
})
  .transform((v) => {
    return new EvalsSentimentClassificationResponseBody(v, {
      request: v.request$,
      response: v.response$,
      body: v.body$,
    });
  });

/** @internal */
export type EvalsSentimentClassificationResponseBody$Outbound = {
  message: string;
};

/** @internal */
export const EvalsSentimentClassificationResponseBody$outboundSchema: z.ZodType<
  EvalsSentimentClassificationResponseBody$Outbound,
  z.ZodTypeDef,
  EvalsSentimentClassificationResponseBody
> = z.instanceof(EvalsSentimentClassificationResponseBody)
  .transform(v => v.data$)
  .pipe(z.object({
    message: z.string(),
  }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EvalsSentimentClassificationResponseBody$ {
  /** @deprecated use `EvalsSentimentClassificationResponseBody$inboundSchema` instead. */
  export const inboundSchema =
    EvalsSentimentClassificationResponseBody$inboundSchema;
  /** @deprecated use `EvalsSentimentClassificationResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    EvalsSentimentClassificationResponseBody$outboundSchema;
  /** @deprecated use `EvalsSentimentClassificationResponseBody$Outbound` instead. */
  export type Outbound = EvalsSentimentClassificationResponseBody$Outbound;
}
