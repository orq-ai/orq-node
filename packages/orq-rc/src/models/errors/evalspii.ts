/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { OrqError } from "./orqerror.js";

/**
 * Internal server error
 */
export type EvalsPiiEvalsResponseBodyData = {
  message: string;
};

/**
 * Internal server error
 */
export class EvalsPiiEvalsResponseBody extends OrqError {
  /** The original data that was passed to this error instance. */
  data$: EvalsPiiEvalsResponseBodyData;

  constructor(
    err: EvalsPiiEvalsResponseBodyData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = err.message || `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;

    this.name = "EvalsPiiEvalsResponseBody";
  }
}

/**
 * Evaluator not found
 */
export type EvalsPiiResponseBodyData = {
  message: string;
};

/**
 * Evaluator not found
 */
export class EvalsPiiResponseBody extends OrqError {
  /** The original data that was passed to this error instance. */
  data$: EvalsPiiResponseBodyData;

  constructor(
    err: EvalsPiiResponseBodyData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = err.message || `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;

    this.name = "EvalsPiiResponseBody";
  }
}

/** @internal */
export const EvalsPiiEvalsResponseBody$inboundSchema: z.ZodType<
  EvalsPiiEvalsResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  message: z.string(),
  request$: z.instanceof(Request),
  response$: z.instanceof(Response),
  body$: z.string(),
})
  .transform((v) => {
    return new EvalsPiiEvalsResponseBody(v, {
      request: v.request$,
      response: v.response$,
      body: v.body$,
    });
  });

/** @internal */
export type EvalsPiiEvalsResponseBody$Outbound = {
  message: string;
};

/** @internal */
export const EvalsPiiEvalsResponseBody$outboundSchema: z.ZodType<
  EvalsPiiEvalsResponseBody$Outbound,
  z.ZodTypeDef,
  EvalsPiiEvalsResponseBody
> = z.instanceof(EvalsPiiEvalsResponseBody)
  .transform(v => v.data$)
  .pipe(z.object({
    message: z.string(),
  }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EvalsPiiEvalsResponseBody$ {
  /** @deprecated use `EvalsPiiEvalsResponseBody$inboundSchema` instead. */
  export const inboundSchema = EvalsPiiEvalsResponseBody$inboundSchema;
  /** @deprecated use `EvalsPiiEvalsResponseBody$outboundSchema` instead. */
  export const outboundSchema = EvalsPiiEvalsResponseBody$outboundSchema;
  /** @deprecated use `EvalsPiiEvalsResponseBody$Outbound` instead. */
  export type Outbound = EvalsPiiEvalsResponseBody$Outbound;
}

/** @internal */
export const EvalsPiiResponseBody$inboundSchema: z.ZodType<
  EvalsPiiResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  message: z.string(),
  request$: z.instanceof(Request),
  response$: z.instanceof(Response),
  body$: z.string(),
})
  .transform((v) => {
    return new EvalsPiiResponseBody(v, {
      request: v.request$,
      response: v.response$,
      body: v.body$,
    });
  });

/** @internal */
export type EvalsPiiResponseBody$Outbound = {
  message: string;
};

/** @internal */
export const EvalsPiiResponseBody$outboundSchema: z.ZodType<
  EvalsPiiResponseBody$Outbound,
  z.ZodTypeDef,
  EvalsPiiResponseBody
> = z.instanceof(EvalsPiiResponseBody)
  .transform(v => v.data$)
  .pipe(z.object({
    message: z.string(),
  }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EvalsPiiResponseBody$ {
  /** @deprecated use `EvalsPiiResponseBody$inboundSchema` instead. */
  export const inboundSchema = EvalsPiiResponseBody$inboundSchema;
  /** @deprecated use `EvalsPiiResponseBody$outboundSchema` instead. */
  export const outboundSchema = EvalsPiiResponseBody$outboundSchema;
  /** @deprecated use `EvalsPiiResponseBody$Outbound` instead. */
  export type Outbound = EvalsPiiResponseBody$Outbound;
}
