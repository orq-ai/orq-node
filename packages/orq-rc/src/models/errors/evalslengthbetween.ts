/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { OrqError } from "./orqerror.js";

/**
 * Internal server error
 */
export type EvalsLengthBetweenEvalsResponseBodyData = {
  message: string;
};

/**
 * Internal server error
 */
export class EvalsLengthBetweenEvalsResponseBody extends OrqError {
  /** The original data that was passed to this error instance. */
  data$: EvalsLengthBetweenEvalsResponseBodyData;

  constructor(
    err: EvalsLengthBetweenEvalsResponseBodyData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = err.message || `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;

    this.name = "EvalsLengthBetweenEvalsResponseBody";
  }
}

/**
 * Evaluator not found
 */
export type EvalsLengthBetweenResponseBodyData = {
  message: string;
};

/**
 * Evaluator not found
 */
export class EvalsLengthBetweenResponseBody extends OrqError {
  /** The original data that was passed to this error instance. */
  data$: EvalsLengthBetweenResponseBodyData;

  constructor(
    err: EvalsLengthBetweenResponseBodyData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = err.message || `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;

    this.name = "EvalsLengthBetweenResponseBody";
  }
}

/** @internal */
export const EvalsLengthBetweenEvalsResponseBody$inboundSchema: z.ZodType<
  EvalsLengthBetweenEvalsResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  message: z.string(),
  request$: z.instanceof(Request),
  response$: z.instanceof(Response),
  body$: z.string(),
})
  .transform((v) => {
    return new EvalsLengthBetweenEvalsResponseBody(v, {
      request: v.request$,
      response: v.response$,
      body: v.body$,
    });
  });

/** @internal */
export type EvalsLengthBetweenEvalsResponseBody$Outbound = {
  message: string;
};

/** @internal */
export const EvalsLengthBetweenEvalsResponseBody$outboundSchema: z.ZodType<
  EvalsLengthBetweenEvalsResponseBody$Outbound,
  z.ZodTypeDef,
  EvalsLengthBetweenEvalsResponseBody
> = z.instanceof(EvalsLengthBetweenEvalsResponseBody)
  .transform(v => v.data$)
  .pipe(z.object({
    message: z.string(),
  }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EvalsLengthBetweenEvalsResponseBody$ {
  /** @deprecated use `EvalsLengthBetweenEvalsResponseBody$inboundSchema` instead. */
  export const inboundSchema =
    EvalsLengthBetweenEvalsResponseBody$inboundSchema;
  /** @deprecated use `EvalsLengthBetweenEvalsResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    EvalsLengthBetweenEvalsResponseBody$outboundSchema;
  /** @deprecated use `EvalsLengthBetweenEvalsResponseBody$Outbound` instead. */
  export type Outbound = EvalsLengthBetweenEvalsResponseBody$Outbound;
}

/** @internal */
export const EvalsLengthBetweenResponseBody$inboundSchema: z.ZodType<
  EvalsLengthBetweenResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  message: z.string(),
  request$: z.instanceof(Request),
  response$: z.instanceof(Response),
  body$: z.string(),
})
  .transform((v) => {
    return new EvalsLengthBetweenResponseBody(v, {
      request: v.request$,
      response: v.response$,
      body: v.body$,
    });
  });

/** @internal */
export type EvalsLengthBetweenResponseBody$Outbound = {
  message: string;
};

/** @internal */
export const EvalsLengthBetweenResponseBody$outboundSchema: z.ZodType<
  EvalsLengthBetweenResponseBody$Outbound,
  z.ZodTypeDef,
  EvalsLengthBetweenResponseBody
> = z.instanceof(EvalsLengthBetweenResponseBody)
  .transform(v => v.data$)
  .pipe(z.object({
    message: z.string(),
  }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EvalsLengthBetweenResponseBody$ {
  /** @deprecated use `EvalsLengthBetweenResponseBody$inboundSchema` instead. */
  export const inboundSchema = EvalsLengthBetweenResponseBody$inboundSchema;
  /** @deprecated use `EvalsLengthBetweenResponseBody$outboundSchema` instead. */
  export const outboundSchema = EvalsLengthBetweenResponseBody$outboundSchema;
  /** @deprecated use `EvalsLengthBetweenResponseBody$Outbound` instead. */
  export type Outbound = EvalsLengthBetweenResponseBody$Outbound;
}
