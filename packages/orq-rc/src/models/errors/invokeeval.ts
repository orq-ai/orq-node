/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { OrqError } from "./orqerror.js";

/**
 * Error running the evaluator
 */
export type InvokeEvalEvalsResponseBodyData = {
  message: string;
};

/**
 * Error running the evaluator
 */
export class InvokeEvalEvalsResponseBody extends OrqError {
  /** The original data that was passed to this error instance. */
  data$: InvokeEvalEvalsResponseBodyData;

  constructor(
    err: InvokeEvalEvalsResponseBodyData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = err.message || `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;

    this.name = "InvokeEvalEvalsResponseBody";
  }
}

/**
 * Workspace ID is not found on the request
 */
export type InvokeEvalResponseBodyData = {
  message: string;
};

/**
 * Workspace ID is not found on the request
 */
export class InvokeEvalResponseBody extends OrqError {
  /** The original data that was passed to this error instance. */
  data$: InvokeEvalResponseBodyData;

  constructor(
    err: InvokeEvalResponseBodyData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = err.message || `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;

    this.name = "InvokeEvalResponseBody";
  }
}

/** @internal */
export const InvokeEvalEvalsResponseBody$inboundSchema: z.ZodType<
  InvokeEvalEvalsResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  message: z.string(),
  request$: z.instanceof(Request),
  response$: z.instanceof(Response),
  body$: z.string(),
})
  .transform((v) => {
    return new InvokeEvalEvalsResponseBody(v, {
      request: v.request$,
      response: v.response$,
      body: v.body$,
    });
  });

/** @internal */
export type InvokeEvalEvalsResponseBody$Outbound = {
  message: string;
};

/** @internal */
export const InvokeEvalEvalsResponseBody$outboundSchema: z.ZodType<
  InvokeEvalEvalsResponseBody$Outbound,
  z.ZodTypeDef,
  InvokeEvalEvalsResponseBody
> = z.instanceof(InvokeEvalEvalsResponseBody)
  .transform(v => v.data$)
  .pipe(z.object({
    message: z.string(),
  }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InvokeEvalEvalsResponseBody$ {
  /** @deprecated use `InvokeEvalEvalsResponseBody$inboundSchema` instead. */
  export const inboundSchema = InvokeEvalEvalsResponseBody$inboundSchema;
  /** @deprecated use `InvokeEvalEvalsResponseBody$outboundSchema` instead. */
  export const outboundSchema = InvokeEvalEvalsResponseBody$outboundSchema;
  /** @deprecated use `InvokeEvalEvalsResponseBody$Outbound` instead. */
  export type Outbound = InvokeEvalEvalsResponseBody$Outbound;
}

/** @internal */
export const InvokeEvalResponseBody$inboundSchema: z.ZodType<
  InvokeEvalResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  message: z.string(),
  request$: z.instanceof(Request),
  response$: z.instanceof(Response),
  body$: z.string(),
})
  .transform((v) => {
    return new InvokeEvalResponseBody(v, {
      request: v.request$,
      response: v.response$,
      body: v.body$,
    });
  });

/** @internal */
export type InvokeEvalResponseBody$Outbound = {
  message: string;
};

/** @internal */
export const InvokeEvalResponseBody$outboundSchema: z.ZodType<
  InvokeEvalResponseBody$Outbound,
  z.ZodTypeDef,
  InvokeEvalResponseBody
> = z.instanceof(InvokeEvalResponseBody)
  .transform(v => v.data$)
  .pipe(z.object({
    message: z.string(),
  }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InvokeEvalResponseBody$ {
  /** @deprecated use `InvokeEvalResponseBody$inboundSchema` instead. */
  export const inboundSchema = InvokeEvalResponseBody$inboundSchema;
  /** @deprecated use `InvokeEvalResponseBody$outboundSchema` instead. */
  export const outboundSchema = InvokeEvalResponseBody$outboundSchema;
  /** @deprecated use `InvokeEvalResponseBody$Outbound` instead. */
  export type Outbound = InvokeEvalResponseBody$Outbound;
}
