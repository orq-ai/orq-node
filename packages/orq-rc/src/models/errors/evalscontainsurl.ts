/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";

/**
 * Internal server error
 */
export type EvalsContainsUrlEvalsResponseBodyData = {
  message: string;
};

/**
 * Internal server error
 */
export class EvalsContainsUrlEvalsResponseBody extends Error {
  /** The original data that was passed to this error instance. */
  data$: EvalsContainsUrlEvalsResponseBodyData;

  constructor(err: EvalsContainsUrlEvalsResponseBodyData) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message);
    this.data$ = err;

    this.name = "EvalsContainsUrlEvalsResponseBody";
  }
}

/**
 * Evaluator not found
 */
export type EvalsContainsUrlResponseBodyData = {
  message: string;
};

/**
 * Evaluator not found
 */
export class EvalsContainsUrlResponseBody extends Error {
  /** The original data that was passed to this error instance. */
  data$: EvalsContainsUrlResponseBodyData;

  constructor(err: EvalsContainsUrlResponseBodyData) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message);
    this.data$ = err;

    this.name = "EvalsContainsUrlResponseBody";
  }
}

/** @internal */
export const EvalsContainsUrlEvalsResponseBody$inboundSchema: z.ZodType<
  EvalsContainsUrlEvalsResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  message: z.string(),
})
  .transform((v) => {
    return new EvalsContainsUrlEvalsResponseBody(v);
  });

/** @internal */
export type EvalsContainsUrlEvalsResponseBody$Outbound = {
  message: string;
};

/** @internal */
export const EvalsContainsUrlEvalsResponseBody$outboundSchema: z.ZodType<
  EvalsContainsUrlEvalsResponseBody$Outbound,
  z.ZodTypeDef,
  EvalsContainsUrlEvalsResponseBody
> = z.instanceof(EvalsContainsUrlEvalsResponseBody)
  .transform(v => v.data$)
  .pipe(z.object({
    message: z.string(),
  }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EvalsContainsUrlEvalsResponseBody$ {
  /** @deprecated use `EvalsContainsUrlEvalsResponseBody$inboundSchema` instead. */
  export const inboundSchema = EvalsContainsUrlEvalsResponseBody$inboundSchema;
  /** @deprecated use `EvalsContainsUrlEvalsResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    EvalsContainsUrlEvalsResponseBody$outboundSchema;
  /** @deprecated use `EvalsContainsUrlEvalsResponseBody$Outbound` instead. */
  export type Outbound = EvalsContainsUrlEvalsResponseBody$Outbound;
}

/** @internal */
export const EvalsContainsUrlResponseBody$inboundSchema: z.ZodType<
  EvalsContainsUrlResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  message: z.string(),
})
  .transform((v) => {
    return new EvalsContainsUrlResponseBody(v);
  });

/** @internal */
export type EvalsContainsUrlResponseBody$Outbound = {
  message: string;
};

/** @internal */
export const EvalsContainsUrlResponseBody$outboundSchema: z.ZodType<
  EvalsContainsUrlResponseBody$Outbound,
  z.ZodTypeDef,
  EvalsContainsUrlResponseBody
> = z.instanceof(EvalsContainsUrlResponseBody)
  .transform(v => v.data$)
  .pipe(z.object({
    message: z.string(),
  }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EvalsContainsUrlResponseBody$ {
  /** @deprecated use `EvalsContainsUrlResponseBody$inboundSchema` instead. */
  export const inboundSchema = EvalsContainsUrlResponseBody$inboundSchema;
  /** @deprecated use `EvalsContainsUrlResponseBody$outboundSchema` instead. */
  export const outboundSchema = EvalsContainsUrlResponseBody$outboundSchema;
  /** @deprecated use `EvalsContainsUrlResponseBody$Outbound` instead. */
  export type Outbound = EvalsContainsUrlResponseBody$Outbound;
}
