/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { OrqError } from "./orqerror.js";

/**
 * Internal server error
 */
export type EvalsBertScoreEvalsResponseBodyData = {
  message: string;
};

/**
 * Internal server error
 */
export class EvalsBertScoreEvalsResponseBody extends OrqError {
  /** The original data that was passed to this error instance. */
  data$: EvalsBertScoreEvalsResponseBodyData;

  constructor(
    err: EvalsBertScoreEvalsResponseBodyData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;

    this.name = "EvalsBertScoreEvalsResponseBody";
  }
}

/**
 * Evaluator not found
 */
export type EvalsBertScoreResponseBodyData = {
  message: string;
};

/**
 * Evaluator not found
 */
export class EvalsBertScoreResponseBody extends OrqError {
  /** The original data that was passed to this error instance. */
  data$: EvalsBertScoreResponseBodyData;

  constructor(
    err: EvalsBertScoreResponseBodyData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;

    this.name = "EvalsBertScoreResponseBody";
  }
}

/** @internal */
export const EvalsBertScoreEvalsResponseBody$inboundSchema: z.ZodType<
  EvalsBertScoreEvalsResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  message: z.string(),
  request$: z.instanceof(Request),
  response$: z.instanceof(Response),
  body$: z.string(),
})
  .transform((v) => {
    return new EvalsBertScoreEvalsResponseBody(v, {
      request: v.request$,
      response: v.response$,
      body: v.body$,
    });
  });

/** @internal */
export type EvalsBertScoreEvalsResponseBody$Outbound = {
  message: string;
};

/** @internal */
export const EvalsBertScoreEvalsResponseBody$outboundSchema: z.ZodType<
  EvalsBertScoreEvalsResponseBody$Outbound,
  z.ZodTypeDef,
  EvalsBertScoreEvalsResponseBody
> = z.instanceof(EvalsBertScoreEvalsResponseBody)
  .transform(v => v.data$)
  .pipe(z.object({
    message: z.string(),
  }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EvalsBertScoreEvalsResponseBody$ {
  /** @deprecated use `EvalsBertScoreEvalsResponseBody$inboundSchema` instead. */
  export const inboundSchema = EvalsBertScoreEvalsResponseBody$inboundSchema;
  /** @deprecated use `EvalsBertScoreEvalsResponseBody$outboundSchema` instead. */
  export const outboundSchema = EvalsBertScoreEvalsResponseBody$outboundSchema;
  /** @deprecated use `EvalsBertScoreEvalsResponseBody$Outbound` instead. */
  export type Outbound = EvalsBertScoreEvalsResponseBody$Outbound;
}

/** @internal */
export const EvalsBertScoreResponseBody$inboundSchema: z.ZodType<
  EvalsBertScoreResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  message: z.string(),
  request$: z.instanceof(Request),
  response$: z.instanceof(Response),
  body$: z.string(),
})
  .transform((v) => {
    return new EvalsBertScoreResponseBody(v, {
      request: v.request$,
      response: v.response$,
      body: v.body$,
    });
  });

/** @internal */
export type EvalsBertScoreResponseBody$Outbound = {
  message: string;
};

/** @internal */
export const EvalsBertScoreResponseBody$outboundSchema: z.ZodType<
  EvalsBertScoreResponseBody$Outbound,
  z.ZodTypeDef,
  EvalsBertScoreResponseBody
> = z.instanceof(EvalsBertScoreResponseBody)
  .transform(v => v.data$)
  .pipe(z.object({
    message: z.string(),
  }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EvalsBertScoreResponseBody$ {
  /** @deprecated use `EvalsBertScoreResponseBody$inboundSchema` instead. */
  export const inboundSchema = EvalsBertScoreResponseBody$inboundSchema;
  /** @deprecated use `EvalsBertScoreResponseBody$outboundSchema` instead. */
  export const outboundSchema = EvalsBertScoreResponseBody$outboundSchema;
  /** @deprecated use `EvalsBertScoreResponseBody$Outbound` instead. */
  export type Outbound = EvalsBertScoreResponseBody$Outbound;
}
