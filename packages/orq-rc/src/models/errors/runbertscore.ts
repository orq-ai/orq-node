/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";

/**
 * Internal server error
 */
export type RunBertScoreEvalsResponseBodyData = {
  message: string;
};

/**
 * Internal server error
 */
export class RunBertScoreEvalsResponseBody extends Error {
  /** The original data that was passed to this error instance. */
  data$: RunBertScoreEvalsResponseBodyData;

  constructor(err: RunBertScoreEvalsResponseBodyData) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message);
    this.data$ = err;

    this.name = "RunBertScoreEvalsResponseBody";
  }
}

/**
 * Evaluator not found
 */
export type RunBertScoreResponseBodyData = {
  message: string;
};

/**
 * Evaluator not found
 */
export class RunBertScoreResponseBody extends Error {
  /** The original data that was passed to this error instance. */
  data$: RunBertScoreResponseBodyData;

  constructor(err: RunBertScoreResponseBodyData) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message);
    this.data$ = err;

    this.name = "RunBertScoreResponseBody";
  }
}

/** @internal */
export const RunBertScoreEvalsResponseBody$inboundSchema: z.ZodType<
  RunBertScoreEvalsResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  message: z.string(),
})
  .transform((v) => {
    return new RunBertScoreEvalsResponseBody(v);
  });

/** @internal */
export type RunBertScoreEvalsResponseBody$Outbound = {
  message: string;
};

/** @internal */
export const RunBertScoreEvalsResponseBody$outboundSchema: z.ZodType<
  RunBertScoreEvalsResponseBody$Outbound,
  z.ZodTypeDef,
  RunBertScoreEvalsResponseBody
> = z.instanceof(RunBertScoreEvalsResponseBody)
  .transform(v => v.data$)
  .pipe(z.object({
    message: z.string(),
  }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RunBertScoreEvalsResponseBody$ {
  /** @deprecated use `RunBertScoreEvalsResponseBody$inboundSchema` instead. */
  export const inboundSchema = RunBertScoreEvalsResponseBody$inboundSchema;
  /** @deprecated use `RunBertScoreEvalsResponseBody$outboundSchema` instead. */
  export const outboundSchema = RunBertScoreEvalsResponseBody$outboundSchema;
  /** @deprecated use `RunBertScoreEvalsResponseBody$Outbound` instead. */
  export type Outbound = RunBertScoreEvalsResponseBody$Outbound;
}

/** @internal */
export const RunBertScoreResponseBody$inboundSchema: z.ZodType<
  RunBertScoreResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  message: z.string(),
})
  .transform((v) => {
    return new RunBertScoreResponseBody(v);
  });

/** @internal */
export type RunBertScoreResponseBody$Outbound = {
  message: string;
};

/** @internal */
export const RunBertScoreResponseBody$outboundSchema: z.ZodType<
  RunBertScoreResponseBody$Outbound,
  z.ZodTypeDef,
  RunBertScoreResponseBody
> = z.instanceof(RunBertScoreResponseBody)
  .transform(v => v.data$)
  .pipe(z.object({
    message: z.string(),
  }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RunBertScoreResponseBody$ {
  /** @deprecated use `RunBertScoreResponseBody$inboundSchema` instead. */
  export const inboundSchema = RunBertScoreResponseBody$inboundSchema;
  /** @deprecated use `RunBertScoreResponseBody$outboundSchema` instead. */
  export const outboundSchema = RunBertScoreResponseBody$outboundSchema;
  /** @deprecated use `RunBertScoreResponseBody$Outbound` instead. */
  export type Outbound = RunBertScoreResponseBody$Outbound;
}
