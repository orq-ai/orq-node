/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";

/**
 * Internal server error
 */
export type EvalsValidJsonEvalsResponseBodyData = {
  message: string;
};

/**
 * Internal server error
 */
export class EvalsValidJsonEvalsResponseBody extends Error {
  /** The original data that was passed to this error instance. */
  data$: EvalsValidJsonEvalsResponseBodyData;

  constructor(err: EvalsValidJsonEvalsResponseBodyData) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message);
    this.data$ = err;

    this.name = "EvalsValidJsonEvalsResponseBody";
  }
}

/**
 * Evaluator not found
 */
export type EvalsValidJsonResponseBodyData = {
  message: string;
};

/**
 * Evaluator not found
 */
export class EvalsValidJsonResponseBody extends Error {
  /** The original data that was passed to this error instance. */
  data$: EvalsValidJsonResponseBodyData;

  constructor(err: EvalsValidJsonResponseBodyData) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message);
    this.data$ = err;

    this.name = "EvalsValidJsonResponseBody";
  }
}

/** @internal */
export const EvalsValidJsonEvalsResponseBody$inboundSchema: z.ZodType<
  EvalsValidJsonEvalsResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  message: z.string(),
})
  .transform((v) => {
    return new EvalsValidJsonEvalsResponseBody(v);
  });

/** @internal */
export type EvalsValidJsonEvalsResponseBody$Outbound = {
  message: string;
};

/** @internal */
export const EvalsValidJsonEvalsResponseBody$outboundSchema: z.ZodType<
  EvalsValidJsonEvalsResponseBody$Outbound,
  z.ZodTypeDef,
  EvalsValidJsonEvalsResponseBody
> = z.instanceof(EvalsValidJsonEvalsResponseBody)
  .transform(v => v.data$)
  .pipe(z.object({
    message: z.string(),
  }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EvalsValidJsonEvalsResponseBody$ {
  /** @deprecated use `EvalsValidJsonEvalsResponseBody$inboundSchema` instead. */
  export const inboundSchema = EvalsValidJsonEvalsResponseBody$inboundSchema;
  /** @deprecated use `EvalsValidJsonEvalsResponseBody$outboundSchema` instead. */
  export const outboundSchema = EvalsValidJsonEvalsResponseBody$outboundSchema;
  /** @deprecated use `EvalsValidJsonEvalsResponseBody$Outbound` instead. */
  export type Outbound = EvalsValidJsonEvalsResponseBody$Outbound;
}

/** @internal */
export const EvalsValidJsonResponseBody$inboundSchema: z.ZodType<
  EvalsValidJsonResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  message: z.string(),
})
  .transform((v) => {
    return new EvalsValidJsonResponseBody(v);
  });

/** @internal */
export type EvalsValidJsonResponseBody$Outbound = {
  message: string;
};

/** @internal */
export const EvalsValidJsonResponseBody$outboundSchema: z.ZodType<
  EvalsValidJsonResponseBody$Outbound,
  z.ZodTypeDef,
  EvalsValidJsonResponseBody
> = z.instanceof(EvalsValidJsonResponseBody)
  .transform(v => v.data$)
  .pipe(z.object({
    message: z.string(),
  }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EvalsValidJsonResponseBody$ {
  /** @deprecated use `EvalsValidJsonResponseBody$inboundSchema` instead. */
  export const inboundSchema = EvalsValidJsonResponseBody$inboundSchema;
  /** @deprecated use `EvalsValidJsonResponseBody$outboundSchema` instead. */
  export const outboundSchema = EvalsValidJsonResponseBody$outboundSchema;
  /** @deprecated use `EvalsValidJsonResponseBody$Outbound` instead. */
  export type Outbound = EvalsValidJsonResponseBody$Outbound;
}
