/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { OrqError } from "./orqerror.js";

/**
 * Internal server error
 */
export type EvalsBotDetectionEvalsResponseBodyData = {
  message: string;
};

/**
 * Internal server error
 */
export class EvalsBotDetectionEvalsResponseBody extends OrqError {
  /** The original data that was passed to this error instance. */
  data$: EvalsBotDetectionEvalsResponseBodyData;

  constructor(
    err: EvalsBotDetectionEvalsResponseBodyData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = err.message || `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;

    this.name = "EvalsBotDetectionEvalsResponseBody";
  }
}

/**
 * Evaluator not found
 */
export type EvalsBotDetectionResponseBodyData = {
  message: string;
};

/**
 * Evaluator not found
 */
export class EvalsBotDetectionResponseBody extends OrqError {
  /** The original data that was passed to this error instance. */
  data$: EvalsBotDetectionResponseBodyData;

  constructor(
    err: EvalsBotDetectionResponseBodyData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = err.message || `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;

    this.name = "EvalsBotDetectionResponseBody";
  }
}

/** @internal */
export const EvalsBotDetectionEvalsResponseBody$inboundSchema: z.ZodType<
  EvalsBotDetectionEvalsResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  message: z.string(),
  request$: z.instanceof(Request),
  response$: z.instanceof(Response),
  body$: z.string(),
})
  .transform((v) => {
    return new EvalsBotDetectionEvalsResponseBody(v, {
      request: v.request$,
      response: v.response$,
      body: v.body$,
    });
  });

/** @internal */
export type EvalsBotDetectionEvalsResponseBody$Outbound = {
  message: string;
};

/** @internal */
export const EvalsBotDetectionEvalsResponseBody$outboundSchema: z.ZodType<
  EvalsBotDetectionEvalsResponseBody$Outbound,
  z.ZodTypeDef,
  EvalsBotDetectionEvalsResponseBody
> = z.instanceof(EvalsBotDetectionEvalsResponseBody)
  .transform(v => v.data$)
  .pipe(z.object({
    message: z.string(),
  }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EvalsBotDetectionEvalsResponseBody$ {
  /** @deprecated use `EvalsBotDetectionEvalsResponseBody$inboundSchema` instead. */
  export const inboundSchema = EvalsBotDetectionEvalsResponseBody$inboundSchema;
  /** @deprecated use `EvalsBotDetectionEvalsResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    EvalsBotDetectionEvalsResponseBody$outboundSchema;
  /** @deprecated use `EvalsBotDetectionEvalsResponseBody$Outbound` instead. */
  export type Outbound = EvalsBotDetectionEvalsResponseBody$Outbound;
}

/** @internal */
export const EvalsBotDetectionResponseBody$inboundSchema: z.ZodType<
  EvalsBotDetectionResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  message: z.string(),
  request$: z.instanceof(Request),
  response$: z.instanceof(Response),
  body$: z.string(),
})
  .transform((v) => {
    return new EvalsBotDetectionResponseBody(v, {
      request: v.request$,
      response: v.response$,
      body: v.body$,
    });
  });

/** @internal */
export type EvalsBotDetectionResponseBody$Outbound = {
  message: string;
};

/** @internal */
export const EvalsBotDetectionResponseBody$outboundSchema: z.ZodType<
  EvalsBotDetectionResponseBody$Outbound,
  z.ZodTypeDef,
  EvalsBotDetectionResponseBody
> = z.instanceof(EvalsBotDetectionResponseBody)
  .transform(v => v.data$)
  .pipe(z.object({
    message: z.string(),
  }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EvalsBotDetectionResponseBody$ {
  /** @deprecated use `EvalsBotDetectionResponseBody$inboundSchema` instead. */
  export const inboundSchema = EvalsBotDetectionResponseBody$inboundSchema;
  /** @deprecated use `EvalsBotDetectionResponseBody$outboundSchema` instead. */
  export const outboundSchema = EvalsBotDetectionResponseBody$outboundSchema;
  /** @deprecated use `EvalsBotDetectionResponseBody$Outbound` instead. */
  export type Outbound = EvalsBotDetectionResponseBody$Outbound;
}
