/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { OrqError } from "./orqerror.js";

/**
 * Internal server error
 */
export type EvalsRagasCoherenceEvalsResponseBodyData = {
  message: string;
};

/**
 * Internal server error
 */
export class EvalsRagasCoherenceEvalsResponseBody extends OrqError {
  /** The original data that was passed to this error instance. */
  data$: EvalsRagasCoherenceEvalsResponseBodyData;

  constructor(
    err: EvalsRagasCoherenceEvalsResponseBodyData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = err.message || `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;

    this.name = "EvalsRagasCoherenceEvalsResponseBody";
  }
}

/**
 * Evaluator not found
 */
export type EvalsRagasCoherenceResponseBodyData = {
  message: string;
};

/**
 * Evaluator not found
 */
export class EvalsRagasCoherenceResponseBody extends OrqError {
  /** The original data that was passed to this error instance. */
  data$: EvalsRagasCoherenceResponseBodyData;

  constructor(
    err: EvalsRagasCoherenceResponseBodyData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = err.message || `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;

    this.name = "EvalsRagasCoherenceResponseBody";
  }
}

/** @internal */
export const EvalsRagasCoherenceEvalsResponseBody$inboundSchema: z.ZodType<
  EvalsRagasCoherenceEvalsResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  message: z.string(),
  request$: z.instanceof(Request),
  response$: z.instanceof(Response),
  body$: z.string(),
})
  .transform((v) => {
    return new EvalsRagasCoherenceEvalsResponseBody(v, {
      request: v.request$,
      response: v.response$,
      body: v.body$,
    });
  });

/** @internal */
export type EvalsRagasCoherenceEvalsResponseBody$Outbound = {
  message: string;
};

/** @internal */
export const EvalsRagasCoherenceEvalsResponseBody$outboundSchema: z.ZodType<
  EvalsRagasCoherenceEvalsResponseBody$Outbound,
  z.ZodTypeDef,
  EvalsRagasCoherenceEvalsResponseBody
> = z.instanceof(EvalsRagasCoherenceEvalsResponseBody)
  .transform(v => v.data$)
  .pipe(z.object({
    message: z.string(),
  }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EvalsRagasCoherenceEvalsResponseBody$ {
  /** @deprecated use `EvalsRagasCoherenceEvalsResponseBody$inboundSchema` instead. */
  export const inboundSchema =
    EvalsRagasCoherenceEvalsResponseBody$inboundSchema;
  /** @deprecated use `EvalsRagasCoherenceEvalsResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    EvalsRagasCoherenceEvalsResponseBody$outboundSchema;
  /** @deprecated use `EvalsRagasCoherenceEvalsResponseBody$Outbound` instead. */
  export type Outbound = EvalsRagasCoherenceEvalsResponseBody$Outbound;
}

/** @internal */
export const EvalsRagasCoherenceResponseBody$inboundSchema: z.ZodType<
  EvalsRagasCoherenceResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  message: z.string(),
  request$: z.instanceof(Request),
  response$: z.instanceof(Response),
  body$: z.string(),
})
  .transform((v) => {
    return new EvalsRagasCoherenceResponseBody(v, {
      request: v.request$,
      response: v.response$,
      body: v.body$,
    });
  });

/** @internal */
export type EvalsRagasCoherenceResponseBody$Outbound = {
  message: string;
};

/** @internal */
export const EvalsRagasCoherenceResponseBody$outboundSchema: z.ZodType<
  EvalsRagasCoherenceResponseBody$Outbound,
  z.ZodTypeDef,
  EvalsRagasCoherenceResponseBody
> = z.instanceof(EvalsRagasCoherenceResponseBody)
  .transform(v => v.data$)
  .pipe(z.object({
    message: z.string(),
  }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EvalsRagasCoherenceResponseBody$ {
  /** @deprecated use `EvalsRagasCoherenceResponseBody$inboundSchema` instead. */
  export const inboundSchema = EvalsRagasCoherenceResponseBody$inboundSchema;
  /** @deprecated use `EvalsRagasCoherenceResponseBody$outboundSchema` instead. */
  export const outboundSchema = EvalsRagasCoherenceResponseBody$outboundSchema;
  /** @deprecated use `EvalsRagasCoherenceResponseBody$Outbound` instead. */
  export type Outbound = EvalsRagasCoherenceResponseBody$Outbound;
}
