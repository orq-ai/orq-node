/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { OrqError } from "./orqerror.js";

/**
 * Internal server error
 */
export type EvalsRagasCorrectnessEvalsResponseBodyData = {
  message: string;
};

/**
 * Internal server error
 */
export class EvalsRagasCorrectnessEvalsResponseBody extends OrqError {
  /** The original data that was passed to this error instance. */
  data$: EvalsRagasCorrectnessEvalsResponseBodyData;

  constructor(
    err: EvalsRagasCorrectnessEvalsResponseBodyData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;

    this.name = "EvalsRagasCorrectnessEvalsResponseBody";
  }
}

/**
 * Evaluator not found
 */
export type EvalsRagasCorrectnessResponseBodyData = {
  message: string;
};

/**
 * Evaluator not found
 */
export class EvalsRagasCorrectnessResponseBody extends OrqError {
  /** The original data that was passed to this error instance. */
  data$: EvalsRagasCorrectnessResponseBodyData;

  constructor(
    err: EvalsRagasCorrectnessResponseBodyData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;

    this.name = "EvalsRagasCorrectnessResponseBody";
  }
}

/** @internal */
export const EvalsRagasCorrectnessEvalsResponseBody$inboundSchema: z.ZodType<
  EvalsRagasCorrectnessEvalsResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  message: z.string(),
  request$: z.instanceof(Request),
  response$: z.instanceof(Response),
  body$: z.string(),
})
  .transform((v) => {
    return new EvalsRagasCorrectnessEvalsResponseBody(v, {
      request: v.request$,
      response: v.response$,
      body: v.body$,
    });
  });

/** @internal */
export type EvalsRagasCorrectnessEvalsResponseBody$Outbound = {
  message: string;
};

/** @internal */
export const EvalsRagasCorrectnessEvalsResponseBody$outboundSchema: z.ZodType<
  EvalsRagasCorrectnessEvalsResponseBody$Outbound,
  z.ZodTypeDef,
  EvalsRagasCorrectnessEvalsResponseBody
> = z.instanceof(EvalsRagasCorrectnessEvalsResponseBody)
  .transform(v => v.data$)
  .pipe(z.object({
    message: z.string(),
  }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EvalsRagasCorrectnessEvalsResponseBody$ {
  /** @deprecated use `EvalsRagasCorrectnessEvalsResponseBody$inboundSchema` instead. */
  export const inboundSchema =
    EvalsRagasCorrectnessEvalsResponseBody$inboundSchema;
  /** @deprecated use `EvalsRagasCorrectnessEvalsResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    EvalsRagasCorrectnessEvalsResponseBody$outboundSchema;
  /** @deprecated use `EvalsRagasCorrectnessEvalsResponseBody$Outbound` instead. */
  export type Outbound = EvalsRagasCorrectnessEvalsResponseBody$Outbound;
}

/** @internal */
export const EvalsRagasCorrectnessResponseBody$inboundSchema: z.ZodType<
  EvalsRagasCorrectnessResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  message: z.string(),
  request$: z.instanceof(Request),
  response$: z.instanceof(Response),
  body$: z.string(),
})
  .transform((v) => {
    return new EvalsRagasCorrectnessResponseBody(v, {
      request: v.request$,
      response: v.response$,
      body: v.body$,
    });
  });

/** @internal */
export type EvalsRagasCorrectnessResponseBody$Outbound = {
  message: string;
};

/** @internal */
export const EvalsRagasCorrectnessResponseBody$outboundSchema: z.ZodType<
  EvalsRagasCorrectnessResponseBody$Outbound,
  z.ZodTypeDef,
  EvalsRagasCorrectnessResponseBody
> = z.instanceof(EvalsRagasCorrectnessResponseBody)
  .transform(v => v.data$)
  .pipe(z.object({
    message: z.string(),
  }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EvalsRagasCorrectnessResponseBody$ {
  /** @deprecated use `EvalsRagasCorrectnessResponseBody$inboundSchema` instead. */
  export const inboundSchema = EvalsRagasCorrectnessResponseBody$inboundSchema;
  /** @deprecated use `EvalsRagasCorrectnessResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    EvalsRagasCorrectnessResponseBody$outboundSchema;
  /** @deprecated use `EvalsRagasCorrectnessResponseBody$Outbound` instead. */
  export type Outbound = EvalsRagasCorrectnessResponseBody$Outbound;
}
