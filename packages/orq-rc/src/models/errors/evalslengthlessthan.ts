/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";

/**
 * Internal server error
 */
export type EvalsLengthLessThanEvalsResponseBodyData = {
  message: string;
};

/**
 * Internal server error
 */
export class EvalsLengthLessThanEvalsResponseBody extends Error {
  /** The original data that was passed to this error instance. */
  data$: EvalsLengthLessThanEvalsResponseBodyData;

  constructor(err: EvalsLengthLessThanEvalsResponseBodyData) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message);
    this.data$ = err;

    this.name = "EvalsLengthLessThanEvalsResponseBody";
  }
}

/**
 * Evaluator not found
 */
export type EvalsLengthLessThanResponseBodyData = {
  message: string;
};

/**
 * Evaluator not found
 */
export class EvalsLengthLessThanResponseBody extends Error {
  /** The original data that was passed to this error instance. */
  data$: EvalsLengthLessThanResponseBodyData;

  constructor(err: EvalsLengthLessThanResponseBodyData) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message);
    this.data$ = err;

    this.name = "EvalsLengthLessThanResponseBody";
  }
}

/** @internal */
export const EvalsLengthLessThanEvalsResponseBody$inboundSchema: z.ZodType<
  EvalsLengthLessThanEvalsResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  message: z.string(),
})
  .transform((v) => {
    return new EvalsLengthLessThanEvalsResponseBody(v);
  });

/** @internal */
export type EvalsLengthLessThanEvalsResponseBody$Outbound = {
  message: string;
};

/** @internal */
export const EvalsLengthLessThanEvalsResponseBody$outboundSchema: z.ZodType<
  EvalsLengthLessThanEvalsResponseBody$Outbound,
  z.ZodTypeDef,
  EvalsLengthLessThanEvalsResponseBody
> = z.instanceof(EvalsLengthLessThanEvalsResponseBody)
  .transform(v => v.data$)
  .pipe(z.object({
    message: z.string(),
  }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EvalsLengthLessThanEvalsResponseBody$ {
  /** @deprecated use `EvalsLengthLessThanEvalsResponseBody$inboundSchema` instead. */
  export const inboundSchema =
    EvalsLengthLessThanEvalsResponseBody$inboundSchema;
  /** @deprecated use `EvalsLengthLessThanEvalsResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    EvalsLengthLessThanEvalsResponseBody$outboundSchema;
  /** @deprecated use `EvalsLengthLessThanEvalsResponseBody$Outbound` instead. */
  export type Outbound = EvalsLengthLessThanEvalsResponseBody$Outbound;
}

/** @internal */
export const EvalsLengthLessThanResponseBody$inboundSchema: z.ZodType<
  EvalsLengthLessThanResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  message: z.string(),
})
  .transform((v) => {
    return new EvalsLengthLessThanResponseBody(v);
  });

/** @internal */
export type EvalsLengthLessThanResponseBody$Outbound = {
  message: string;
};

/** @internal */
export const EvalsLengthLessThanResponseBody$outboundSchema: z.ZodType<
  EvalsLengthLessThanResponseBody$Outbound,
  z.ZodTypeDef,
  EvalsLengthLessThanResponseBody
> = z.instanceof(EvalsLengthLessThanResponseBody)
  .transform(v => v.data$)
  .pipe(z.object({
    message: z.string(),
  }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EvalsLengthLessThanResponseBody$ {
  /** @deprecated use `EvalsLengthLessThanResponseBody$inboundSchema` instead. */
  export const inboundSchema = EvalsLengthLessThanResponseBody$inboundSchema;
  /** @deprecated use `EvalsLengthLessThanResponseBody$outboundSchema` instead. */
  export const outboundSchema = EvalsLengthLessThanResponseBody$outboundSchema;
  /** @deprecated use `EvalsLengthLessThanResponseBody$Outbound` instead. */
  export type Outbound = EvalsLengthLessThanResponseBody$Outbound;
}
