/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { OrqError } from "./orqerror.js";

/**
 * Internal server error
 */
export type EvalsContainsEmailEvalsResponseBodyData = {
  message: string;
};

/**
 * Internal server error
 */
export class EvalsContainsEmailEvalsResponseBody extends OrqError {
  /** The original data that was passed to this error instance. */
  data$: EvalsContainsEmailEvalsResponseBodyData;

  constructor(
    err: EvalsContainsEmailEvalsResponseBodyData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = err.message || `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;

    this.name = "EvalsContainsEmailEvalsResponseBody";
  }
}

/**
 * Evaluator not found
 */
export type EvalsContainsEmailResponseBodyData = {
  message: string;
};

/**
 * Evaluator not found
 */
export class EvalsContainsEmailResponseBody extends OrqError {
  /** The original data that was passed to this error instance. */
  data$: EvalsContainsEmailResponseBodyData;

  constructor(
    err: EvalsContainsEmailResponseBodyData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = err.message || `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;

    this.name = "EvalsContainsEmailResponseBody";
  }
}

/** @internal */
export const EvalsContainsEmailEvalsResponseBody$inboundSchema: z.ZodType<
  EvalsContainsEmailEvalsResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  message: z.string(),
  request$: z.instanceof(Request),
  response$: z.instanceof(Response),
  body$: z.string(),
})
  .transform((v) => {
    return new EvalsContainsEmailEvalsResponseBody(v, {
      request: v.request$,
      response: v.response$,
      body: v.body$,
    });
  });

/** @internal */
export type EvalsContainsEmailEvalsResponseBody$Outbound = {
  message: string;
};

/** @internal */
export const EvalsContainsEmailEvalsResponseBody$outboundSchema: z.ZodType<
  EvalsContainsEmailEvalsResponseBody$Outbound,
  z.ZodTypeDef,
  EvalsContainsEmailEvalsResponseBody
> = z.instanceof(EvalsContainsEmailEvalsResponseBody)
  .transform(v => v.data$)
  .pipe(z.object({
    message: z.string(),
  }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EvalsContainsEmailEvalsResponseBody$ {
  /** @deprecated use `EvalsContainsEmailEvalsResponseBody$inboundSchema` instead. */
  export const inboundSchema =
    EvalsContainsEmailEvalsResponseBody$inboundSchema;
  /** @deprecated use `EvalsContainsEmailEvalsResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    EvalsContainsEmailEvalsResponseBody$outboundSchema;
  /** @deprecated use `EvalsContainsEmailEvalsResponseBody$Outbound` instead. */
  export type Outbound = EvalsContainsEmailEvalsResponseBody$Outbound;
}

/** @internal */
export const EvalsContainsEmailResponseBody$inboundSchema: z.ZodType<
  EvalsContainsEmailResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  message: z.string(),
  request$: z.instanceof(Request),
  response$: z.instanceof(Response),
  body$: z.string(),
})
  .transform((v) => {
    return new EvalsContainsEmailResponseBody(v, {
      request: v.request$,
      response: v.response$,
      body: v.body$,
    });
  });

/** @internal */
export type EvalsContainsEmailResponseBody$Outbound = {
  message: string;
};

/** @internal */
export const EvalsContainsEmailResponseBody$outboundSchema: z.ZodType<
  EvalsContainsEmailResponseBody$Outbound,
  z.ZodTypeDef,
  EvalsContainsEmailResponseBody
> = z.instanceof(EvalsContainsEmailResponseBody)
  .transform(v => v.data$)
  .pipe(z.object({
    message: z.string(),
  }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EvalsContainsEmailResponseBody$ {
  /** @deprecated use `EvalsContainsEmailResponseBody$inboundSchema` instead. */
  export const inboundSchema = EvalsContainsEmailResponseBody$inboundSchema;
  /** @deprecated use `EvalsContainsEmailResponseBody$outboundSchema` instead. */
  export const outboundSchema = EvalsContainsEmailResponseBody$outboundSchema;
  /** @deprecated use `EvalsContainsEmailResponseBody$Outbound` instead. */
  export type Outbound = EvalsContainsEmailResponseBody$Outbound;
}
