/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type GetOneFileUploadUrlRequest = {
  /**
   * The unique identifier of the knowledge base
   */
  knowledgeId: string;
  fileName: string;
  contentType: string;
  datasourceId: string;
};

/**
 * Expected upload request model
 */
export type GetOneFileUploadUrlResponseBody = {
  objectName: string;
  postPolicy?: any | undefined;
};

/** @internal */
export const GetOneFileUploadUrlRequest$inboundSchema: z.ZodType<
  GetOneFileUploadUrlRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  knowledge_id: z.string(),
  fileName: z.string(),
  contentType: z.string(),
  datasourceId: z.string(),
}).transform((v) => {
  return remap$(v, {
    "knowledge_id": "knowledgeId",
  });
});

/** @internal */
export type GetOneFileUploadUrlRequest$Outbound = {
  knowledge_id: string;
  fileName: string;
  contentType: string;
  datasourceId: string;
};

/** @internal */
export const GetOneFileUploadUrlRequest$outboundSchema: z.ZodType<
  GetOneFileUploadUrlRequest$Outbound,
  z.ZodTypeDef,
  GetOneFileUploadUrlRequest
> = z.object({
  knowledgeId: z.string(),
  fileName: z.string(),
  contentType: z.string(),
  datasourceId: z.string(),
}).transform((v) => {
  return remap$(v, {
    knowledgeId: "knowledge_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetOneFileUploadUrlRequest$ {
  /** @deprecated use `GetOneFileUploadUrlRequest$inboundSchema` instead. */
  export const inboundSchema = GetOneFileUploadUrlRequest$inboundSchema;
  /** @deprecated use `GetOneFileUploadUrlRequest$outboundSchema` instead. */
  export const outboundSchema = GetOneFileUploadUrlRequest$outboundSchema;
  /** @deprecated use `GetOneFileUploadUrlRequest$Outbound` instead. */
  export type Outbound = GetOneFileUploadUrlRequest$Outbound;
}

export function getOneFileUploadUrlRequestToJSON(
  getOneFileUploadUrlRequest: GetOneFileUploadUrlRequest,
): string {
  return JSON.stringify(
    GetOneFileUploadUrlRequest$outboundSchema.parse(getOneFileUploadUrlRequest),
  );
}

export function getOneFileUploadUrlRequestFromJSON(
  jsonString: string,
): SafeParseResult<GetOneFileUploadUrlRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetOneFileUploadUrlRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetOneFileUploadUrlRequest' from JSON`,
  );
}

/** @internal */
export const GetOneFileUploadUrlResponseBody$inboundSchema: z.ZodType<
  GetOneFileUploadUrlResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  objectName: z.string(),
  postPolicy: z.any().optional(),
});

/** @internal */
export type GetOneFileUploadUrlResponseBody$Outbound = {
  objectName: string;
  postPolicy?: any | undefined;
};

/** @internal */
export const GetOneFileUploadUrlResponseBody$outboundSchema: z.ZodType<
  GetOneFileUploadUrlResponseBody$Outbound,
  z.ZodTypeDef,
  GetOneFileUploadUrlResponseBody
> = z.object({
  objectName: z.string(),
  postPolicy: z.any().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetOneFileUploadUrlResponseBody$ {
  /** @deprecated use `GetOneFileUploadUrlResponseBody$inboundSchema` instead. */
  export const inboundSchema = GetOneFileUploadUrlResponseBody$inboundSchema;
  /** @deprecated use `GetOneFileUploadUrlResponseBody$outboundSchema` instead. */
  export const outboundSchema = GetOneFileUploadUrlResponseBody$outboundSchema;
  /** @deprecated use `GetOneFileUploadUrlResponseBody$Outbound` instead. */
  export type Outbound = GetOneFileUploadUrlResponseBody$Outbound;
}

export function getOneFileUploadUrlResponseBodyToJSON(
  getOneFileUploadUrlResponseBody: GetOneFileUploadUrlResponseBody,
): string {
  return JSON.stringify(
    GetOneFileUploadUrlResponseBody$outboundSchema.parse(
      getOneFileUploadUrlResponseBody,
    ),
  );
}

export function getOneFileUploadUrlResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<GetOneFileUploadUrlResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetOneFileUploadUrlResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetOneFileUploadUrlResponseBody' from JSON`,
  );
}
