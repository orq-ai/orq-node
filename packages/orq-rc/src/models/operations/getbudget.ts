/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type GetBudgetRequest = {
  id: string;
};

/**
 * Budget entity type
 */
export const GetBudgetType = {
  ApiKey: "api_key",
  Contact: "contact",
  Workspace: "workspace",
} as const;
/**
 * Budget entity type
 */
export type GetBudgetType = ClosedEnum<typeof GetBudgetType>;

/**
 * Budget period type
 */
export const GetBudgetPeriod = {
  Daily: "daily",
  Weekly: "weekly",
  Monthly: "monthly",
  Yearly: "yearly",
} as const;
/**
 * Budget period type
 */
export type GetBudgetPeriod = ClosedEnum<typeof GetBudgetPeriod>;

/**
 * Budget configuration
 */
export type GetBudgetBudget = {
  /**
   * Budget period type
   */
  period: GetBudgetPeriod;
  /**
   * Budget amount in USD for the specified period
   */
  amount: number;
};

export type GetBudgetConsumption = {
  /**
   * Current period consumption in USD
   */
  currentAmount: number;
  /**
   * Remaining budget (amount - current_amount)
   */
  remainingAmount: number;
  /**
   * When the current period started
   */
  periodStart: string | null;
  /**
   * When the current period will reset
   */
  periodEnd: string | null;
};

/**
 * Budget configuration details
 */
export type GetBudgetResponseBody = {
  /**
   * Unique ULID for the budget configuration
   */
  id: string;
  /**
   * Budget entity type
   */
  type: GetBudgetType;
  /**
   * Contact external identifier (present when type is "contact")
   */
  contactId?: string | undefined;
  /**
   * API Key identifier (present when type is "api_key")
   */
  apiKeyId?: string | undefined;
  /**
   * Budget configuration
   */
  budget: GetBudgetBudget;
  /**
   * Whether this budget configuration is currently active
   */
  isActive: boolean;
  consumption?: GetBudgetConsumption | undefined;
  /**
   * The date and time the resource was created
   */
  created?: Date | undefined;
  /**
   * The date and time the resource was last updated
   */
  updated?: Date | undefined;
};

/** @internal */
export const GetBudgetRequest$inboundSchema: z.ZodType<
  GetBudgetRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
});

/** @internal */
export type GetBudgetRequest$Outbound = {
  id: string;
};

/** @internal */
export const GetBudgetRequest$outboundSchema: z.ZodType<
  GetBudgetRequest$Outbound,
  z.ZodTypeDef,
  GetBudgetRequest
> = z.object({
  id: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetBudgetRequest$ {
  /** @deprecated use `GetBudgetRequest$inboundSchema` instead. */
  export const inboundSchema = GetBudgetRequest$inboundSchema;
  /** @deprecated use `GetBudgetRequest$outboundSchema` instead. */
  export const outboundSchema = GetBudgetRequest$outboundSchema;
  /** @deprecated use `GetBudgetRequest$Outbound` instead. */
  export type Outbound = GetBudgetRequest$Outbound;
}

export function getBudgetRequestToJSON(
  getBudgetRequest: GetBudgetRequest,
): string {
  return JSON.stringify(
    GetBudgetRequest$outboundSchema.parse(getBudgetRequest),
  );
}

export function getBudgetRequestFromJSON(
  jsonString: string,
): SafeParseResult<GetBudgetRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetBudgetRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetBudgetRequest' from JSON`,
  );
}

/** @internal */
export const GetBudgetType$inboundSchema: z.ZodNativeEnum<
  typeof GetBudgetType
> = z.nativeEnum(GetBudgetType);

/** @internal */
export const GetBudgetType$outboundSchema: z.ZodNativeEnum<
  typeof GetBudgetType
> = GetBudgetType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetBudgetType$ {
  /** @deprecated use `GetBudgetType$inboundSchema` instead. */
  export const inboundSchema = GetBudgetType$inboundSchema;
  /** @deprecated use `GetBudgetType$outboundSchema` instead. */
  export const outboundSchema = GetBudgetType$outboundSchema;
}

/** @internal */
export const GetBudgetPeriod$inboundSchema: z.ZodNativeEnum<
  typeof GetBudgetPeriod
> = z.nativeEnum(GetBudgetPeriod);

/** @internal */
export const GetBudgetPeriod$outboundSchema: z.ZodNativeEnum<
  typeof GetBudgetPeriod
> = GetBudgetPeriod$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetBudgetPeriod$ {
  /** @deprecated use `GetBudgetPeriod$inboundSchema` instead. */
  export const inboundSchema = GetBudgetPeriod$inboundSchema;
  /** @deprecated use `GetBudgetPeriod$outboundSchema` instead. */
  export const outboundSchema = GetBudgetPeriod$outboundSchema;
}

/** @internal */
export const GetBudgetBudget$inboundSchema: z.ZodType<
  GetBudgetBudget,
  z.ZodTypeDef,
  unknown
> = z.object({
  period: GetBudgetPeriod$inboundSchema,
  amount: z.number(),
});

/** @internal */
export type GetBudgetBudget$Outbound = {
  period: string;
  amount: number;
};

/** @internal */
export const GetBudgetBudget$outboundSchema: z.ZodType<
  GetBudgetBudget$Outbound,
  z.ZodTypeDef,
  GetBudgetBudget
> = z.object({
  period: GetBudgetPeriod$outboundSchema,
  amount: z.number(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetBudgetBudget$ {
  /** @deprecated use `GetBudgetBudget$inboundSchema` instead. */
  export const inboundSchema = GetBudgetBudget$inboundSchema;
  /** @deprecated use `GetBudgetBudget$outboundSchema` instead. */
  export const outboundSchema = GetBudgetBudget$outboundSchema;
  /** @deprecated use `GetBudgetBudget$Outbound` instead. */
  export type Outbound = GetBudgetBudget$Outbound;
}

export function getBudgetBudgetToJSON(
  getBudgetBudget: GetBudgetBudget,
): string {
  return JSON.stringify(GetBudgetBudget$outboundSchema.parse(getBudgetBudget));
}

export function getBudgetBudgetFromJSON(
  jsonString: string,
): SafeParseResult<GetBudgetBudget, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetBudgetBudget$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetBudgetBudget' from JSON`,
  );
}

/** @internal */
export const GetBudgetConsumption$inboundSchema: z.ZodType<
  GetBudgetConsumption,
  z.ZodTypeDef,
  unknown
> = z.object({
  current_amount: z.number(),
  remaining_amount: z.number(),
  period_start: z.nullable(z.string()),
  period_end: z.nullable(z.string()),
}).transform((v) => {
  return remap$(v, {
    "current_amount": "currentAmount",
    "remaining_amount": "remainingAmount",
    "period_start": "periodStart",
    "period_end": "periodEnd",
  });
});

/** @internal */
export type GetBudgetConsumption$Outbound = {
  current_amount: number;
  remaining_amount: number;
  period_start: string | null;
  period_end: string | null;
};

/** @internal */
export const GetBudgetConsumption$outboundSchema: z.ZodType<
  GetBudgetConsumption$Outbound,
  z.ZodTypeDef,
  GetBudgetConsumption
> = z.object({
  currentAmount: z.number(),
  remainingAmount: z.number(),
  periodStart: z.nullable(z.string()),
  periodEnd: z.nullable(z.string()),
}).transform((v) => {
  return remap$(v, {
    currentAmount: "current_amount",
    remainingAmount: "remaining_amount",
    periodStart: "period_start",
    periodEnd: "period_end",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetBudgetConsumption$ {
  /** @deprecated use `GetBudgetConsumption$inboundSchema` instead. */
  export const inboundSchema = GetBudgetConsumption$inboundSchema;
  /** @deprecated use `GetBudgetConsumption$outboundSchema` instead. */
  export const outboundSchema = GetBudgetConsumption$outboundSchema;
  /** @deprecated use `GetBudgetConsumption$Outbound` instead. */
  export type Outbound = GetBudgetConsumption$Outbound;
}

export function getBudgetConsumptionToJSON(
  getBudgetConsumption: GetBudgetConsumption,
): string {
  return JSON.stringify(
    GetBudgetConsumption$outboundSchema.parse(getBudgetConsumption),
  );
}

export function getBudgetConsumptionFromJSON(
  jsonString: string,
): SafeParseResult<GetBudgetConsumption, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetBudgetConsumption$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetBudgetConsumption' from JSON`,
  );
}

/** @internal */
export const GetBudgetResponseBody$inboundSchema: z.ZodType<
  GetBudgetResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  _id: z.string(),
  type: GetBudgetType$inboundSchema,
  contact_id: z.string().optional(),
  api_key_id: z.string().optional(),
  budget: z.lazy(() => GetBudgetBudget$inboundSchema),
  is_active: z.boolean(),
  consumption: z.lazy(() => GetBudgetConsumption$inboundSchema).optional(),
  created: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
  updated: z.string().datetime({ offset: true }).default(
    "2025-09-03T06:59:32.668Z",
  ).transform(v => new Date(v)),
}).transform((v) => {
  return remap$(v, {
    "_id": "id",
    "contact_id": "contactId",
    "api_key_id": "apiKeyId",
    "is_active": "isActive",
  });
});

/** @internal */
export type GetBudgetResponseBody$Outbound = {
  _id: string;
  type: string;
  contact_id?: string | undefined;
  api_key_id?: string | undefined;
  budget: GetBudgetBudget$Outbound;
  is_active: boolean;
  consumption?: GetBudgetConsumption$Outbound | undefined;
  created?: string | undefined;
  updated: string;
};

/** @internal */
export const GetBudgetResponseBody$outboundSchema: z.ZodType<
  GetBudgetResponseBody$Outbound,
  z.ZodTypeDef,
  GetBudgetResponseBody
> = z.object({
  id: z.string(),
  type: GetBudgetType$outboundSchema,
  contactId: z.string().optional(),
  apiKeyId: z.string().optional(),
  budget: z.lazy(() => GetBudgetBudget$outboundSchema),
  isActive: z.boolean(),
  consumption: z.lazy(() => GetBudgetConsumption$outboundSchema).optional(),
  created: z.date().transform(v => v.toISOString()).optional(),
  updated: z.date().default(() => new Date("2025-09-03T06:59:32.668Z"))
    .transform(v => v.toISOString()),
}).transform((v) => {
  return remap$(v, {
    id: "_id",
    contactId: "contact_id",
    apiKeyId: "api_key_id",
    isActive: "is_active",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetBudgetResponseBody$ {
  /** @deprecated use `GetBudgetResponseBody$inboundSchema` instead. */
  export const inboundSchema = GetBudgetResponseBody$inboundSchema;
  /** @deprecated use `GetBudgetResponseBody$outboundSchema` instead. */
  export const outboundSchema = GetBudgetResponseBody$outboundSchema;
  /** @deprecated use `GetBudgetResponseBody$Outbound` instead. */
  export type Outbound = GetBudgetResponseBody$Outbound;
}

export function getBudgetResponseBodyToJSON(
  getBudgetResponseBody: GetBudgetResponseBody,
): string {
  return JSON.stringify(
    GetBudgetResponseBody$outboundSchema.parse(getBudgetResponseBody),
  );
}

export function getBudgetResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<GetBudgetResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetBudgetResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetBudgetResponseBody' from JSON`,
  );
}
