/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type FindOnePromptSnippetGlobals = {
  contactId?: string | undefined;
};

export type FindOnePromptSnippetRequest = {
  /**
   * Prompt ID
   */
  id: string;
};

export const FindOnePromptSnippetOwner2 = {
  Vendor: "vendor",
} as const;
export type FindOnePromptSnippetOwner2 = ClosedEnum<
  typeof FindOnePromptSnippetOwner2
>;

export type FindOnePromptSnippetOwner = string | FindOnePromptSnippetOwner2;

/**
 * The type of the model
 */
export const FindOnePromptSnippetModelType = {
  Chat: "chat",
  Completion: "completion",
  Embedding: "embedding",
  Vision: "vision",
  Image: "image",
  Tts: "tts",
  Stt: "stt",
  Rerank: "rerank",
  Moderations: "moderations",
} as const;
/**
 * The type of the model
 */
export type FindOnePromptSnippetModelType = ClosedEnum<
  typeof FindOnePromptSnippetModelType
>;

/**
 * Only supported on `image` models.
 */
export const FindOnePromptSnippetFormat = {
  Url: "url",
  B64Json: "b64_json",
  Text: "text",
  JsonObject: "json_object",
} as const;
/**
 * Only supported on `image` models.
 */
export type FindOnePromptSnippetFormat = ClosedEnum<
  typeof FindOnePromptSnippetFormat
>;

/**
 * Only supported on `image` models.
 */
export const FindOnePromptSnippetQuality = {
  Standard: "standard",
  Hd: "hd",
} as const;
/**
 * Only supported on `image` models.
 */
export type FindOnePromptSnippetQuality = ClosedEnum<
  typeof FindOnePromptSnippetQuality
>;

export const FindOnePromptSnippetResponseFormatPromptSnippetsType = {
  JsonObject: "json_object",
} as const;
export type FindOnePromptSnippetResponseFormatPromptSnippetsType = ClosedEnum<
  typeof FindOnePromptSnippetResponseFormatPromptSnippetsType
>;

export type FindOnePromptSnippetResponseFormat2 = {
  type: FindOnePromptSnippetResponseFormatPromptSnippetsType;
};

export const FindOnePromptSnippetResponseFormatType = {
  JsonSchema: "json_schema",
} as const;
export type FindOnePromptSnippetResponseFormatType = ClosedEnum<
  typeof FindOnePromptSnippetResponseFormatType
>;

export type FindOnePromptSnippetResponseFormatJsonSchema = {
  name: string;
  strict: boolean;
  schema: { [k: string]: any };
};

export type FindOnePromptSnippetResponseFormat1 = {
  type: FindOnePromptSnippetResponseFormatType;
  jsonSchema: FindOnePromptSnippetResponseFormatJsonSchema;
};

/**
 * An object specifying the format that the model must output.
 *
 * @remarks
 *
 *  Setting to `{ "type": "json_schema", "json_schema": {...} }` enables Structured Outputs which ensures the model will match your supplied JSON schema
 *
 *  Setting to `{ "type": "json_object" }` enables JSON mode, which ensures the message the model generates is valid JSON.
 *
 * Important: when using JSON mode, you must also instruct the model to produce JSON yourself via a system or user message. Without this, the model may generate an unending stream of whitespace until the generation reaches the token limit, resulting in a long-running and seemingly "stuck" request. Also note that the message content may be partially cut off if finish_reason="length", which indicates the generation exceeded max_tokens or the conversation exceeded the max context length.
 */
export type FindOnePromptSnippetResponseFormat =
  | FindOnePromptSnippetResponseFormat2
  | FindOnePromptSnippetResponseFormat1;

/**
 * The version of photoReal to use. Must be v1 or v2. Only available for `leonardoai` provider
 */
export const FindOnePromptSnippetPhotoRealVersion = {
  V1: "v1",
  V2: "v2",
} as const;
/**
 * The version of photoReal to use. Must be v1 or v2. Only available for `leonardoai` provider
 */
export type FindOnePromptSnippetPhotoRealVersion = ClosedEnum<
  typeof FindOnePromptSnippetPhotoRealVersion
>;

/**
 * The format to return the embeddings
 */
export const FindOnePromptSnippetEncodingFormat = {
  Float: "float",
  Base64: "base64",
} as const;
/**
 * The format to return the embeddings
 */
export type FindOnePromptSnippetEncodingFormat = ClosedEnum<
  typeof FindOnePromptSnippetEncodingFormat
>;

/**
 * Constrains effort on reasoning for reasoning models. Reducing reasoning effort can result in faster responses and fewer tokens used on reasoning in a response.
 */
export const FindOnePromptSnippetReasoningEffort = {
  Low: "low",
  Medium: "medium",
  High: "high",
} as const;
/**
 * Constrains effort on reasoning for reasoning models. Reducing reasoning effort can result in faster responses and fewer tokens used on reasoning in a response.
 */
export type FindOnePromptSnippetReasoningEffort = ClosedEnum<
  typeof FindOnePromptSnippetReasoningEffort
>;

/**
 * Model Parameters: Not all parameters apply to every model
 */
export type FindOnePromptSnippetModelParameters = {
  /**
   * Only supported on `chat` and `completion` models.
   */
  temperature?: number | undefined;
  /**
   * Only supported on `chat` and `completion` models.
   */
  maxTokens?: number | undefined;
  /**
   * Only supported on `chat` and `completion` models.
   */
  topK?: number | undefined;
  /**
   * Only supported on `chat` and `completion` models.
   */
  topP?: number | undefined;
  /**
   * Only supported on `chat` and `completion` models.
   */
  frequencyPenalty?: number | undefined;
  /**
   * Only supported on `chat` and `completion` models.
   */
  presencePenalty?: number | undefined;
  /**
   * Only supported on `image` models.
   */
  numImages?: number | undefined;
  /**
   * Best effort deterministic seed for the model. Currently only OpenAI models support these
   */
  seed?: number | undefined;
  /**
   * Only supported on `image` models.
   */
  format?: FindOnePromptSnippetFormat | undefined;
  /**
   * Only supported on `image` models.
   */
  dimensions?: string | undefined;
  /**
   * Only supported on `image` models.
   */
  quality?: FindOnePromptSnippetQuality | undefined;
  /**
   * Only supported on `image` models.
   */
  style?: string | undefined;
  /**
   * An object specifying the format that the model must output.
   *
   * @remarks
   *
   *  Setting to `{ "type": "json_schema", "json_schema": {...} }` enables Structured Outputs which ensures the model will match your supplied JSON schema
   *
   *  Setting to `{ "type": "json_object" }` enables JSON mode, which ensures the message the model generates is valid JSON.
   *
   * Important: when using JSON mode, you must also instruct the model to produce JSON yourself via a system or user message. Without this, the model may generate an unending stream of whitespace until the generation reaches the token limit, resulting in a long-running and seemingly "stuck" request. Also note that the message content may be partially cut off if finish_reason="length", which indicates the generation exceeded max_tokens or the conversation exceeded the max context length.
   */
  responseFormat?:
    | FindOnePromptSnippetResponseFormat2
    | FindOnePromptSnippetResponseFormat1
    | null
    | undefined;
  /**
   * The version of photoReal to use. Must be v1 or v2. Only available for `leonardoai` provider
   */
  photoRealVersion?: FindOnePromptSnippetPhotoRealVersion | undefined;
  /**
   * The format to return the embeddings
   */
  encodingFormat?: FindOnePromptSnippetEncodingFormat | undefined;
  /**
   * Constrains effort on reasoning for reasoning models. Reducing reasoning effort can result in faster responses and fewer tokens used on reasoning in a response.
   */
  reasoningEffort?: FindOnePromptSnippetReasoningEffort | undefined;
};

export const FindOnePromptSnippetProvider = {
  Cohere: "cohere",
  Openai: "openai",
  Anthropic: "anthropic",
  Huggingface: "huggingface",
  Replicate: "replicate",
  Google: "google",
  GoogleAi: "google-ai",
  Azure: "azure",
  Aws: "aws",
  Anyscale: "anyscale",
  Perplexity: "perplexity",
  Groq: "groq",
  Fal: "fal",
  Leonardoai: "leonardoai",
  Nvidia: "nvidia",
  Jina: "jina",
  Togetherai: "togetherai",
  Elevenlabs: "elevenlabs",
} as const;
export type FindOnePromptSnippetProvider = ClosedEnum<
  typeof FindOnePromptSnippetProvider
>;

/**
 * The role of the prompt message
 */
export const FindOnePromptSnippetRole = {
  System: "system",
  Assistant: "assistant",
  User: "user",
  Exception: "exception",
  Tool: "tool",
  Prompt: "prompt",
  Correction: "correction",
  ExpectedOutput: "expected_output",
} as const;
/**
 * The role of the prompt message
 */
export type FindOnePromptSnippetRole = ClosedEnum<
  typeof FindOnePromptSnippetRole
>;

export const FindOnePromptSnippet2PromptSnippetsType = {
  ImageUrl: "image_url",
} as const;
export type FindOnePromptSnippet2PromptSnippetsType = ClosedEnum<
  typeof FindOnePromptSnippet2PromptSnippetsType
>;

export type FindOnePromptSnippet2ImageUrl = {
  /**
   * The orq.ai id of the image
   */
  id?: string | undefined;
  /**
   * Either a URL of the image or the base64 encoded data URI.
   */
  url: string;
  /**
   * Specifies the detail level of the image. Currently only supported with OpenAI models
   */
  detail?: string | undefined;
};

/**
 * The image part of the prompt message. Only supported with vision models.
 */
export type FindOnePromptSnippet22 = {
  type: FindOnePromptSnippet2PromptSnippetsType;
  imageUrl: FindOnePromptSnippet2ImageUrl;
};

export const FindOnePromptSnippet2Type = {
  Text: "text",
} as const;
export type FindOnePromptSnippet2Type = ClosedEnum<
  typeof FindOnePromptSnippet2Type
>;

/**
 * Text content part of a prompt message
 */
export type FindOnePromptSnippet21 = {
  type: FindOnePromptSnippet2Type;
  text: string;
};

export type FindOnePromptSnippetContent2 =
  | FindOnePromptSnippet21
  | FindOnePromptSnippet22;

/**
 * The contents of the user message. Either the text content of the message or an array of content parts with a defined type, each can be of type `text` or `image_url` when passing in images. You can pass multiple images by adding multiple `image_url` content parts.
 */
export type FindOnePromptSnippetContent =
  | string
  | Array<FindOnePromptSnippet21 | FindOnePromptSnippet22>;

export const FindOnePromptSnippetPromptSnippetsType = {
  Function: "function",
} as const;
export type FindOnePromptSnippetPromptSnippetsType = ClosedEnum<
  typeof FindOnePromptSnippetPromptSnippetsType
>;

export type FindOnePromptSnippetFunction = {
  name: string;
  /**
   * JSON string arguments for the functions
   */
  arguments: string;
};

export type FindOnePromptSnippetToolCalls = {
  id?: string | undefined;
  index?: number | undefined;
  type: FindOnePromptSnippetPromptSnippetsType;
  function: FindOnePromptSnippetFunction;
};

export type FindOnePromptSnippetMessages = {
  /**
   * The role of the prompt message
   */
  role: FindOnePromptSnippetRole;
  /**
   * The contents of the user message. Either the text content of the message or an array of content parts with a defined type, each can be of type `text` or `image_url` when passing in images. You can pass multiple images by adding multiple `image_url` content parts.
   */
  content: string | Array<FindOnePromptSnippet21 | FindOnePromptSnippet22>;
  toolCalls?: Array<FindOnePromptSnippetToolCalls> | undefined;
};

/**
 * A list of messages compatible with the openAI schema
 */
export type FindOnePromptSnippetPromptConfig = {
  stream?: boolean | undefined;
  model?: string | undefined;
  /**
   * The id of the resource
   */
  modelDbId?: string | undefined;
  /**
   * The type of the model
   */
  modelType?: FindOnePromptSnippetModelType | undefined;
  /**
   * Model Parameters: Not all parameters apply to every model
   */
  modelParameters?: FindOnePromptSnippetModelParameters | undefined;
  provider?: FindOnePromptSnippetProvider | undefined;
  /**
   * The id of the resource
   */
  integrationId?: string | null | undefined;
  version?: string | undefined;
  messages: Array<FindOnePromptSnippetMessages>;
};

export const FindOnePromptSnippetUseCases = {
  Agents: "Agents",
  AgentsSimulations: "Agents simulations",
  APIInteraction: "API interaction",
  AutonomousAgents: "Autonomous Agents",
  Chatbots: "Chatbots",
  Classification: "Classification",
  CodeUnderstanding: "Code understanding",
  CodeWriting: "Code writing",
  DocumentsQA: "Documents QA",
  Conversation: "Conversation",
  Extraction: "Extraction",
  MultiModal: "Multi-modal",
  SelfChecking: "Self-checking",
  Sql: "SQL",
  Summarization: "Summarization",
  Tagging: "Tagging",
} as const;
export type FindOnePromptSnippetUseCases = ClosedEnum<
  typeof FindOnePromptSnippetUseCases
>;

/**
 * The language that the prompt is written in. Use this field to categorize the prompt for your own purpose
 */
export const FindOnePromptSnippetLanguage = {
  Chinese: "Chinese",
  Dutch: "Dutch",
  English: "English",
  French: "French",
  German: "German",
  Russian: "Russian",
  Spanish: "Spanish",
} as const;
/**
 * The language that the prompt is written in. Use this field to categorize the prompt for your own purpose
 */
export type FindOnePromptSnippetLanguage = ClosedEnum<
  typeof FindOnePromptSnippetLanguage
>;

export type FindOnePromptSnippetMetadata = {
  /**
   * A list of use cases that the prompt is meant to be used for. Use this field to categorize the prompt for your own purpose
   */
  useCases?: Array<FindOnePromptSnippetUseCases> | undefined;
  /**
   * The language that the prompt is written in. Use this field to categorize the prompt for your own purpose
   */
  language?: FindOnePromptSnippetLanguage | undefined;
};

export const FindOnePromptSnippetType = {
  Snippet: "snippet",
} as const;
export type FindOnePromptSnippetType = ClosedEnum<
  typeof FindOnePromptSnippetType
>;

/**
 * The type of the model
 */
export const FindOnePromptSnippetPromptSnippetsModelType = {
  Chat: "chat",
  Completion: "completion",
  Embedding: "embedding",
  Vision: "vision",
  Image: "image",
  Tts: "tts",
  Stt: "stt",
  Rerank: "rerank",
  Moderations: "moderations",
} as const;
/**
 * The type of the model
 */
export type FindOnePromptSnippetPromptSnippetsModelType = ClosedEnum<
  typeof FindOnePromptSnippetPromptSnippetsModelType
>;

/**
 * Only supported on `image` models.
 */
export const FindOnePromptSnippetPromptSnippetsFormat = {
  Url: "url",
  B64Json: "b64_json",
  Text: "text",
  JsonObject: "json_object",
} as const;
/**
 * Only supported on `image` models.
 */
export type FindOnePromptSnippetPromptSnippetsFormat = ClosedEnum<
  typeof FindOnePromptSnippetPromptSnippetsFormat
>;

/**
 * Only supported on `image` models.
 */
export const FindOnePromptSnippetPromptSnippetsQuality = {
  Standard: "standard",
  Hd: "hd",
} as const;
/**
 * Only supported on `image` models.
 */
export type FindOnePromptSnippetPromptSnippetsQuality = ClosedEnum<
  typeof FindOnePromptSnippetPromptSnippetsQuality
>;

export const FindOnePromptSnippetResponseFormatPromptSnippetsResponse200Type = {
  JsonObject: "json_object",
} as const;
export type FindOnePromptSnippetResponseFormatPromptSnippetsResponse200Type =
  ClosedEnum<
    typeof FindOnePromptSnippetResponseFormatPromptSnippetsResponse200Type
  >;

export type FindOnePromptSnippetResponseFormatPromptSnippets2 = {
  type: FindOnePromptSnippetResponseFormatPromptSnippetsResponse200Type;
};

export const FindOnePromptSnippetResponseFormatPromptSnippetsResponseType = {
  JsonSchema: "json_schema",
} as const;
export type FindOnePromptSnippetResponseFormatPromptSnippetsResponseType =
  ClosedEnum<
    typeof FindOnePromptSnippetResponseFormatPromptSnippetsResponseType
  >;

export type FindOnePromptSnippetResponseFormatPromptSnippetsJsonSchema = {
  name: string;
  strict: boolean;
  schema: { [k: string]: any };
};

export type FindOnePromptSnippetResponseFormatPromptSnippets1 = {
  type: FindOnePromptSnippetResponseFormatPromptSnippetsResponseType;
  jsonSchema: FindOnePromptSnippetResponseFormatPromptSnippetsJsonSchema;
};

/**
 * An object specifying the format that the model must output.
 *
 * @remarks
 *
 *  Setting to `{ "type": "json_schema", "json_schema": {...} }` enables Structured Outputs which ensures the model will match your supplied JSON schema
 *
 *  Setting to `{ "type": "json_object" }` enables JSON mode, which ensures the message the model generates is valid JSON.
 *
 * Important: when using JSON mode, you must also instruct the model to produce JSON yourself via a system or user message. Without this, the model may generate an unending stream of whitespace until the generation reaches the token limit, resulting in a long-running and seemingly "stuck" request. Also note that the message content may be partially cut off if finish_reason="length", which indicates the generation exceeded max_tokens or the conversation exceeded the max context length.
 */
export type FindOnePromptSnippetPromptSnippetsResponseFormat =
  | FindOnePromptSnippetResponseFormatPromptSnippets2
  | FindOnePromptSnippetResponseFormatPromptSnippets1;

/**
 * The version of photoReal to use. Must be v1 or v2. Only available for `leonardoai` provider
 */
export const FindOnePromptSnippetPromptSnippetsPhotoRealVersion = {
  V1: "v1",
  V2: "v2",
} as const;
/**
 * The version of photoReal to use. Must be v1 or v2. Only available for `leonardoai` provider
 */
export type FindOnePromptSnippetPromptSnippetsPhotoRealVersion = ClosedEnum<
  typeof FindOnePromptSnippetPromptSnippetsPhotoRealVersion
>;

/**
 * The format to return the embeddings
 */
export const FindOnePromptSnippetPromptSnippetsEncodingFormat = {
  Float: "float",
  Base64: "base64",
} as const;
/**
 * The format to return the embeddings
 */
export type FindOnePromptSnippetPromptSnippetsEncodingFormat = ClosedEnum<
  typeof FindOnePromptSnippetPromptSnippetsEncodingFormat
>;

/**
 * Constrains effort on reasoning for reasoning models. Reducing reasoning effort can result in faster responses and fewer tokens used on reasoning in a response.
 */
export const FindOnePromptSnippetPromptSnippetsReasoningEffort = {
  Low: "low",
  Medium: "medium",
  High: "high",
} as const;
/**
 * Constrains effort on reasoning for reasoning models. Reducing reasoning effort can result in faster responses and fewer tokens used on reasoning in a response.
 */
export type FindOnePromptSnippetPromptSnippetsReasoningEffort = ClosedEnum<
  typeof FindOnePromptSnippetPromptSnippetsReasoningEffort
>;

/**
 * Model Parameters: Not all parameters apply to every model
 */
export type FindOnePromptSnippetPromptSnippetsModelParameters = {
  /**
   * Only supported on `chat` and `completion` models.
   */
  temperature?: number | undefined;
  /**
   * Only supported on `chat` and `completion` models.
   */
  maxTokens?: number | undefined;
  /**
   * Only supported on `chat` and `completion` models.
   */
  topK?: number | undefined;
  /**
   * Only supported on `chat` and `completion` models.
   */
  topP?: number | undefined;
  /**
   * Only supported on `chat` and `completion` models.
   */
  frequencyPenalty?: number | undefined;
  /**
   * Only supported on `chat` and `completion` models.
   */
  presencePenalty?: number | undefined;
  /**
   * Only supported on `image` models.
   */
  numImages?: number | undefined;
  /**
   * Best effort deterministic seed for the model. Currently only OpenAI models support these
   */
  seed?: number | undefined;
  /**
   * Only supported on `image` models.
   */
  format?: FindOnePromptSnippetPromptSnippetsFormat | undefined;
  /**
   * Only supported on `image` models.
   */
  dimensions?: string | undefined;
  /**
   * Only supported on `image` models.
   */
  quality?: FindOnePromptSnippetPromptSnippetsQuality | undefined;
  /**
   * Only supported on `image` models.
   */
  style?: string | undefined;
  /**
   * An object specifying the format that the model must output.
   *
   * @remarks
   *
   *  Setting to `{ "type": "json_schema", "json_schema": {...} }` enables Structured Outputs which ensures the model will match your supplied JSON schema
   *
   *  Setting to `{ "type": "json_object" }` enables JSON mode, which ensures the message the model generates is valid JSON.
   *
   * Important: when using JSON mode, you must also instruct the model to produce JSON yourself via a system or user message. Without this, the model may generate an unending stream of whitespace until the generation reaches the token limit, resulting in a long-running and seemingly "stuck" request. Also note that the message content may be partially cut off if finish_reason="length", which indicates the generation exceeded max_tokens or the conversation exceeded the max context length.
   */
  responseFormat?:
    | FindOnePromptSnippetResponseFormatPromptSnippets2
    | FindOnePromptSnippetResponseFormatPromptSnippets1
    | null
    | undefined;
  /**
   * The version of photoReal to use. Must be v1 or v2. Only available for `leonardoai` provider
   */
  photoRealVersion?:
    | FindOnePromptSnippetPromptSnippetsPhotoRealVersion
    | undefined;
  /**
   * The format to return the embeddings
   */
  encodingFormat?: FindOnePromptSnippetPromptSnippetsEncodingFormat | undefined;
  /**
   * Constrains effort on reasoning for reasoning models. Reducing reasoning effort can result in faster responses and fewer tokens used on reasoning in a response.
   */
  reasoningEffort?:
    | FindOnePromptSnippetPromptSnippetsReasoningEffort
    | undefined;
};

export const FindOnePromptSnippetPromptSnippetsProvider = {
  Cohere: "cohere",
  Openai: "openai",
  Anthropic: "anthropic",
  Huggingface: "huggingface",
  Replicate: "replicate",
  Google: "google",
  GoogleAi: "google-ai",
  Azure: "azure",
  Aws: "aws",
  Anyscale: "anyscale",
  Perplexity: "perplexity",
  Groq: "groq",
  Fal: "fal",
  Leonardoai: "leonardoai",
  Nvidia: "nvidia",
  Jina: "jina",
  Togetherai: "togetherai",
  Elevenlabs: "elevenlabs",
} as const;
export type FindOnePromptSnippetPromptSnippetsProvider = ClosedEnum<
  typeof FindOnePromptSnippetPromptSnippetsProvider
>;

/**
 * The role of the prompt message
 */
export const FindOnePromptSnippetPromptSnippetsRole = {
  System: "system",
  Assistant: "assistant",
  User: "user",
  Exception: "exception",
  Tool: "tool",
  Prompt: "prompt",
  Correction: "correction",
  ExpectedOutput: "expected_output",
} as const;
/**
 * The role of the prompt message
 */
export type FindOnePromptSnippetPromptSnippetsRole = ClosedEnum<
  typeof FindOnePromptSnippetPromptSnippetsRole
>;

export const FindOnePromptSnippet2PromptSnippetsResponse200Type = {
  ImageUrl: "image_url",
} as const;
export type FindOnePromptSnippet2PromptSnippetsResponse200Type = ClosedEnum<
  typeof FindOnePromptSnippet2PromptSnippetsResponse200Type
>;

export type FindOnePromptSnippet2PromptSnippetsImageUrl = {
  /**
   * The orq.ai id of the image
   */
  id?: string | undefined;
  /**
   * Either a URL of the image or the base64 encoded data URI.
   */
  url: string;
  /**
   * Specifies the detail level of the image. Currently only supported with OpenAI models
   */
  detail?: string | undefined;
};

/**
 * The image part of the prompt message. Only supported with vision models.
 */
export type FindOnePromptSnippet2PromptSnippets2 = {
  type: FindOnePromptSnippet2PromptSnippetsResponse200Type;
  imageUrl: FindOnePromptSnippet2PromptSnippetsImageUrl;
};

export const FindOnePromptSnippet2PromptSnippetsResponseType = {
  Text: "text",
} as const;
export type FindOnePromptSnippet2PromptSnippetsResponseType = ClosedEnum<
  typeof FindOnePromptSnippet2PromptSnippetsResponseType
>;

/**
 * Text content part of a prompt message
 */
export type FindOnePromptSnippet2PromptSnippets1 = {
  type: FindOnePromptSnippet2PromptSnippetsResponseType;
  text: string;
};

export type FindOnePromptSnippetContentPromptSnippets2 =
  | FindOnePromptSnippet2PromptSnippets1
  | FindOnePromptSnippet2PromptSnippets2;

/**
 * The contents of the user message. Either the text content of the message or an array of content parts with a defined type, each can be of type `text` or `image_url` when passing in images. You can pass multiple images by adding multiple `image_url` content parts.
 */
export type FindOnePromptSnippetPromptSnippetsContent =
  | string
  | Array<
    FindOnePromptSnippet2PromptSnippets1 | FindOnePromptSnippet2PromptSnippets2
  >;

export const FindOnePromptSnippetPromptSnippetsResponseType = {
  Function: "function",
} as const;
export type FindOnePromptSnippetPromptSnippetsResponseType = ClosedEnum<
  typeof FindOnePromptSnippetPromptSnippetsResponseType
>;

export type FindOnePromptSnippetPromptSnippetsFunction = {
  name: string;
  /**
   * JSON string arguments for the functions
   */
  arguments: string;
};

export type FindOnePromptSnippetPromptSnippetsToolCalls = {
  id?: string | undefined;
  index?: number | undefined;
  type: FindOnePromptSnippetPromptSnippetsResponseType;
  function: FindOnePromptSnippetPromptSnippetsFunction;
};

export type FindOnePromptSnippetPromptSnippetsMessages = {
  /**
   * The role of the prompt message
   */
  role: FindOnePromptSnippetPromptSnippetsRole;
  /**
   * The contents of the user message. Either the text content of the message or an array of content parts with a defined type, each can be of type `text` or `image_url` when passing in images. You can pass multiple images by adding multiple `image_url` content parts.
   */
  content:
    | string
    | Array<
      | FindOnePromptSnippet2PromptSnippets1
      | FindOnePromptSnippet2PromptSnippets2
    >;
  toolCalls?: Array<FindOnePromptSnippetPromptSnippetsToolCalls> | undefined;
};

/**
 * A list of messages compatible with the openAI schema
 */
export type FindOnePromptSnippetPromptSnippetsPromptConfig = {
  stream?: boolean | undefined;
  model?: string | undefined;
  /**
   * The id of the resource
   */
  modelDbId?: string | undefined;
  /**
   * The type of the model
   */
  modelType?: FindOnePromptSnippetPromptSnippetsModelType | undefined;
  /**
   * Model Parameters: Not all parameters apply to every model
   */
  modelParameters?:
    | FindOnePromptSnippetPromptSnippetsModelParameters
    | undefined;
  provider?: FindOnePromptSnippetPromptSnippetsProvider | undefined;
  /**
   * The id of the resource
   */
  integrationId?: string | null | undefined;
  version?: string | undefined;
  messages: Array<FindOnePromptSnippetPromptSnippetsMessages>;
};

export const FindOnePromptSnippetPromptSnippetsUseCases = {
  Agents: "Agents",
  AgentsSimulations: "Agents simulations",
  APIInteraction: "API interaction",
  AutonomousAgents: "Autonomous Agents",
  Chatbots: "Chatbots",
  Classification: "Classification",
  CodeUnderstanding: "Code understanding",
  CodeWriting: "Code writing",
  DocumentsQA: "Documents QA",
  Conversation: "Conversation",
  Extraction: "Extraction",
  MultiModal: "Multi-modal",
  SelfChecking: "Self-checking",
  Sql: "SQL",
  Summarization: "Summarization",
  Tagging: "Tagging",
} as const;
export type FindOnePromptSnippetPromptSnippetsUseCases = ClosedEnum<
  typeof FindOnePromptSnippetPromptSnippetsUseCases
>;

/**
 * The language that the prompt is written in. Use this field to categorize the prompt for your own purpose
 */
export const FindOnePromptSnippetPromptSnippetsLanguage = {
  Chinese: "Chinese",
  Dutch: "Dutch",
  English: "English",
  French: "French",
  German: "German",
  Russian: "Russian",
  Spanish: "Spanish",
} as const;
/**
 * The language that the prompt is written in. Use this field to categorize the prompt for your own purpose
 */
export type FindOnePromptSnippetPromptSnippetsLanguage = ClosedEnum<
  typeof FindOnePromptSnippetPromptSnippetsLanguage
>;

export type FindOnePromptSnippetPromptSnippetsMetadata = {
  /**
   * A list of use cases that the prompt is meant to be used for. Use this field to categorize the prompt for your own purpose
   */
  useCases?: Array<FindOnePromptSnippetPromptSnippetsUseCases> | undefined;
  /**
   * The language that the prompt is written in. Use this field to categorize the prompt for your own purpose
   */
  language?: FindOnePromptSnippetPromptSnippetsLanguage | undefined;
};

/**
 * Prompt version model returned from the API
 */
export type FindOnePromptSnippetVersions = {
  id: string;
  /**
   * The prompt snippet’s name, meant to be displayable in the UI.
   */
  displayName: string;
  /**
   * The prompt snippet’s description, meant to be displayable in the UI. Use this field to optionally store a long form explanation of the prompt for your own purpose
   */
  description?: string | null | undefined;
  /**
   * A list of messages compatible with the openAI schema
   */
  promptConfig: FindOnePromptSnippetPromptSnippetsPromptConfig;
  metadata: FindOnePromptSnippetPromptSnippetsMetadata;
  createdById: string;
  updatedById: string;
  timestamp: string;
};

/**
 * Prompt snippet model returned from the API
 */
export type FindOnePromptSnippetResponseBody = {
  id: string;
  owner: string | FindOnePromptSnippetOwner2;
  domainId: string;
  key: string;
  /**
   * The prompt snippet’s name, meant to be displayable in the UI.
   */
  displayName: string;
  /**
   * The prompt snippet’s description, meant to be displayable in the UI. Use this field to optionally store a long form explanation of the prompt for your own purpose
   */
  description?: string | null | undefined;
  /**
   * A list of messages compatible with the openAI schema
   */
  promptConfig: FindOnePromptSnippetPromptConfig;
  metadata: FindOnePromptSnippetMetadata;
  createdById: string;
  updatedById: string;
  /**
   * The date and time the resource was created
   */
  created?: Date | undefined;
  /**
   * The date and time the resource was last updated
   */
  updated?: Date | undefined;
  type: FindOnePromptSnippetType;
  versions: Array<FindOnePromptSnippetVersions>;
};

/** @internal */
export const FindOnePromptSnippetGlobals$inboundSchema: z.ZodType<
  FindOnePromptSnippetGlobals,
  z.ZodTypeDef,
  unknown
> = z.object({
  contactId: z.string().optional(),
});

/** @internal */
export type FindOnePromptSnippetGlobals$Outbound = {
  contactId?: string | undefined;
};

/** @internal */
export const FindOnePromptSnippetGlobals$outboundSchema: z.ZodType<
  FindOnePromptSnippetGlobals$Outbound,
  z.ZodTypeDef,
  FindOnePromptSnippetGlobals
> = z.object({
  contactId: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FindOnePromptSnippetGlobals$ {
  /** @deprecated use `FindOnePromptSnippetGlobals$inboundSchema` instead. */
  export const inboundSchema = FindOnePromptSnippetGlobals$inboundSchema;
  /** @deprecated use `FindOnePromptSnippetGlobals$outboundSchema` instead. */
  export const outboundSchema = FindOnePromptSnippetGlobals$outboundSchema;
  /** @deprecated use `FindOnePromptSnippetGlobals$Outbound` instead. */
  export type Outbound = FindOnePromptSnippetGlobals$Outbound;
}

export function findOnePromptSnippetGlobalsToJSON(
  findOnePromptSnippetGlobals: FindOnePromptSnippetGlobals,
): string {
  return JSON.stringify(
    FindOnePromptSnippetGlobals$outboundSchema.parse(
      findOnePromptSnippetGlobals,
    ),
  );
}

export function findOnePromptSnippetGlobalsFromJSON(
  jsonString: string,
): SafeParseResult<FindOnePromptSnippetGlobals, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => FindOnePromptSnippetGlobals$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'FindOnePromptSnippetGlobals' from JSON`,
  );
}

/** @internal */
export const FindOnePromptSnippetRequest$inboundSchema: z.ZodType<
  FindOnePromptSnippetRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
});

/** @internal */
export type FindOnePromptSnippetRequest$Outbound = {
  id: string;
};

/** @internal */
export const FindOnePromptSnippetRequest$outboundSchema: z.ZodType<
  FindOnePromptSnippetRequest$Outbound,
  z.ZodTypeDef,
  FindOnePromptSnippetRequest
> = z.object({
  id: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FindOnePromptSnippetRequest$ {
  /** @deprecated use `FindOnePromptSnippetRequest$inboundSchema` instead. */
  export const inboundSchema = FindOnePromptSnippetRequest$inboundSchema;
  /** @deprecated use `FindOnePromptSnippetRequest$outboundSchema` instead. */
  export const outboundSchema = FindOnePromptSnippetRequest$outboundSchema;
  /** @deprecated use `FindOnePromptSnippetRequest$Outbound` instead. */
  export type Outbound = FindOnePromptSnippetRequest$Outbound;
}

export function findOnePromptSnippetRequestToJSON(
  findOnePromptSnippetRequest: FindOnePromptSnippetRequest,
): string {
  return JSON.stringify(
    FindOnePromptSnippetRequest$outboundSchema.parse(
      findOnePromptSnippetRequest,
    ),
  );
}

export function findOnePromptSnippetRequestFromJSON(
  jsonString: string,
): SafeParseResult<FindOnePromptSnippetRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => FindOnePromptSnippetRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'FindOnePromptSnippetRequest' from JSON`,
  );
}

/** @internal */
export const FindOnePromptSnippetOwner2$inboundSchema: z.ZodNativeEnum<
  typeof FindOnePromptSnippetOwner2
> = z.nativeEnum(FindOnePromptSnippetOwner2);

/** @internal */
export const FindOnePromptSnippetOwner2$outboundSchema: z.ZodNativeEnum<
  typeof FindOnePromptSnippetOwner2
> = FindOnePromptSnippetOwner2$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FindOnePromptSnippetOwner2$ {
  /** @deprecated use `FindOnePromptSnippetOwner2$inboundSchema` instead. */
  export const inboundSchema = FindOnePromptSnippetOwner2$inboundSchema;
  /** @deprecated use `FindOnePromptSnippetOwner2$outboundSchema` instead. */
  export const outboundSchema = FindOnePromptSnippetOwner2$outboundSchema;
}

/** @internal */
export const FindOnePromptSnippetOwner$inboundSchema: z.ZodType<
  FindOnePromptSnippetOwner,
  z.ZodTypeDef,
  unknown
> = z.union([z.string(), FindOnePromptSnippetOwner2$inboundSchema]);

/** @internal */
export type FindOnePromptSnippetOwner$Outbound = string | string;

/** @internal */
export const FindOnePromptSnippetOwner$outboundSchema: z.ZodType<
  FindOnePromptSnippetOwner$Outbound,
  z.ZodTypeDef,
  FindOnePromptSnippetOwner
> = z.union([z.string(), FindOnePromptSnippetOwner2$outboundSchema]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FindOnePromptSnippetOwner$ {
  /** @deprecated use `FindOnePromptSnippetOwner$inboundSchema` instead. */
  export const inboundSchema = FindOnePromptSnippetOwner$inboundSchema;
  /** @deprecated use `FindOnePromptSnippetOwner$outboundSchema` instead. */
  export const outboundSchema = FindOnePromptSnippetOwner$outboundSchema;
  /** @deprecated use `FindOnePromptSnippetOwner$Outbound` instead. */
  export type Outbound = FindOnePromptSnippetOwner$Outbound;
}

export function findOnePromptSnippetOwnerToJSON(
  findOnePromptSnippetOwner: FindOnePromptSnippetOwner,
): string {
  return JSON.stringify(
    FindOnePromptSnippetOwner$outboundSchema.parse(findOnePromptSnippetOwner),
  );
}

export function findOnePromptSnippetOwnerFromJSON(
  jsonString: string,
): SafeParseResult<FindOnePromptSnippetOwner, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => FindOnePromptSnippetOwner$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'FindOnePromptSnippetOwner' from JSON`,
  );
}

/** @internal */
export const FindOnePromptSnippetModelType$inboundSchema: z.ZodNativeEnum<
  typeof FindOnePromptSnippetModelType
> = z.nativeEnum(FindOnePromptSnippetModelType);

/** @internal */
export const FindOnePromptSnippetModelType$outboundSchema: z.ZodNativeEnum<
  typeof FindOnePromptSnippetModelType
> = FindOnePromptSnippetModelType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FindOnePromptSnippetModelType$ {
  /** @deprecated use `FindOnePromptSnippetModelType$inboundSchema` instead. */
  export const inboundSchema = FindOnePromptSnippetModelType$inboundSchema;
  /** @deprecated use `FindOnePromptSnippetModelType$outboundSchema` instead. */
  export const outboundSchema = FindOnePromptSnippetModelType$outboundSchema;
}

/** @internal */
export const FindOnePromptSnippetFormat$inboundSchema: z.ZodNativeEnum<
  typeof FindOnePromptSnippetFormat
> = z.nativeEnum(FindOnePromptSnippetFormat);

/** @internal */
export const FindOnePromptSnippetFormat$outboundSchema: z.ZodNativeEnum<
  typeof FindOnePromptSnippetFormat
> = FindOnePromptSnippetFormat$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FindOnePromptSnippetFormat$ {
  /** @deprecated use `FindOnePromptSnippetFormat$inboundSchema` instead. */
  export const inboundSchema = FindOnePromptSnippetFormat$inboundSchema;
  /** @deprecated use `FindOnePromptSnippetFormat$outboundSchema` instead. */
  export const outboundSchema = FindOnePromptSnippetFormat$outboundSchema;
}

/** @internal */
export const FindOnePromptSnippetQuality$inboundSchema: z.ZodNativeEnum<
  typeof FindOnePromptSnippetQuality
> = z.nativeEnum(FindOnePromptSnippetQuality);

/** @internal */
export const FindOnePromptSnippetQuality$outboundSchema: z.ZodNativeEnum<
  typeof FindOnePromptSnippetQuality
> = FindOnePromptSnippetQuality$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FindOnePromptSnippetQuality$ {
  /** @deprecated use `FindOnePromptSnippetQuality$inboundSchema` instead. */
  export const inboundSchema = FindOnePromptSnippetQuality$inboundSchema;
  /** @deprecated use `FindOnePromptSnippetQuality$outboundSchema` instead. */
  export const outboundSchema = FindOnePromptSnippetQuality$outboundSchema;
}

/** @internal */
export const FindOnePromptSnippetResponseFormatPromptSnippetsType$inboundSchema:
  z.ZodNativeEnum<typeof FindOnePromptSnippetResponseFormatPromptSnippetsType> =
    z.nativeEnum(FindOnePromptSnippetResponseFormatPromptSnippetsType);

/** @internal */
export const FindOnePromptSnippetResponseFormatPromptSnippetsType$outboundSchema:
  z.ZodNativeEnum<typeof FindOnePromptSnippetResponseFormatPromptSnippetsType> =
    FindOnePromptSnippetResponseFormatPromptSnippetsType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FindOnePromptSnippetResponseFormatPromptSnippetsType$ {
  /** @deprecated use `FindOnePromptSnippetResponseFormatPromptSnippetsType$inboundSchema` instead. */
  export const inboundSchema =
    FindOnePromptSnippetResponseFormatPromptSnippetsType$inboundSchema;
  /** @deprecated use `FindOnePromptSnippetResponseFormatPromptSnippetsType$outboundSchema` instead. */
  export const outboundSchema =
    FindOnePromptSnippetResponseFormatPromptSnippetsType$outboundSchema;
}

/** @internal */
export const FindOnePromptSnippetResponseFormat2$inboundSchema: z.ZodType<
  FindOnePromptSnippetResponseFormat2,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: FindOnePromptSnippetResponseFormatPromptSnippetsType$inboundSchema,
});

/** @internal */
export type FindOnePromptSnippetResponseFormat2$Outbound = {
  type: string;
};

/** @internal */
export const FindOnePromptSnippetResponseFormat2$outboundSchema: z.ZodType<
  FindOnePromptSnippetResponseFormat2$Outbound,
  z.ZodTypeDef,
  FindOnePromptSnippetResponseFormat2
> = z.object({
  type: FindOnePromptSnippetResponseFormatPromptSnippetsType$outboundSchema,
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FindOnePromptSnippetResponseFormat2$ {
  /** @deprecated use `FindOnePromptSnippetResponseFormat2$inboundSchema` instead. */
  export const inboundSchema =
    FindOnePromptSnippetResponseFormat2$inboundSchema;
  /** @deprecated use `FindOnePromptSnippetResponseFormat2$outboundSchema` instead. */
  export const outboundSchema =
    FindOnePromptSnippetResponseFormat2$outboundSchema;
  /** @deprecated use `FindOnePromptSnippetResponseFormat2$Outbound` instead. */
  export type Outbound = FindOnePromptSnippetResponseFormat2$Outbound;
}

export function findOnePromptSnippetResponseFormat2ToJSON(
  findOnePromptSnippetResponseFormat2: FindOnePromptSnippetResponseFormat2,
): string {
  return JSON.stringify(
    FindOnePromptSnippetResponseFormat2$outboundSchema.parse(
      findOnePromptSnippetResponseFormat2,
    ),
  );
}

export function findOnePromptSnippetResponseFormat2FromJSON(
  jsonString: string,
): SafeParseResult<FindOnePromptSnippetResponseFormat2, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      FindOnePromptSnippetResponseFormat2$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'FindOnePromptSnippetResponseFormat2' from JSON`,
  );
}

/** @internal */
export const FindOnePromptSnippetResponseFormatType$inboundSchema:
  z.ZodNativeEnum<typeof FindOnePromptSnippetResponseFormatType> = z.nativeEnum(
    FindOnePromptSnippetResponseFormatType,
  );

/** @internal */
export const FindOnePromptSnippetResponseFormatType$outboundSchema:
  z.ZodNativeEnum<typeof FindOnePromptSnippetResponseFormatType> =
    FindOnePromptSnippetResponseFormatType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FindOnePromptSnippetResponseFormatType$ {
  /** @deprecated use `FindOnePromptSnippetResponseFormatType$inboundSchema` instead. */
  export const inboundSchema =
    FindOnePromptSnippetResponseFormatType$inboundSchema;
  /** @deprecated use `FindOnePromptSnippetResponseFormatType$outboundSchema` instead. */
  export const outboundSchema =
    FindOnePromptSnippetResponseFormatType$outboundSchema;
}

/** @internal */
export const FindOnePromptSnippetResponseFormatJsonSchema$inboundSchema:
  z.ZodType<
    FindOnePromptSnippetResponseFormatJsonSchema,
    z.ZodTypeDef,
    unknown
  > = z.object({
    name: z.string(),
    strict: z.boolean(),
    schema: z.record(z.any()),
  });

/** @internal */
export type FindOnePromptSnippetResponseFormatJsonSchema$Outbound = {
  name: string;
  strict: boolean;
  schema: { [k: string]: any };
};

/** @internal */
export const FindOnePromptSnippetResponseFormatJsonSchema$outboundSchema:
  z.ZodType<
    FindOnePromptSnippetResponseFormatJsonSchema$Outbound,
    z.ZodTypeDef,
    FindOnePromptSnippetResponseFormatJsonSchema
  > = z.object({
    name: z.string(),
    strict: z.boolean(),
    schema: z.record(z.any()),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FindOnePromptSnippetResponseFormatJsonSchema$ {
  /** @deprecated use `FindOnePromptSnippetResponseFormatJsonSchema$inboundSchema` instead. */
  export const inboundSchema =
    FindOnePromptSnippetResponseFormatJsonSchema$inboundSchema;
  /** @deprecated use `FindOnePromptSnippetResponseFormatJsonSchema$outboundSchema` instead. */
  export const outboundSchema =
    FindOnePromptSnippetResponseFormatJsonSchema$outboundSchema;
  /** @deprecated use `FindOnePromptSnippetResponseFormatJsonSchema$Outbound` instead. */
  export type Outbound = FindOnePromptSnippetResponseFormatJsonSchema$Outbound;
}

export function findOnePromptSnippetResponseFormatJsonSchemaToJSON(
  findOnePromptSnippetResponseFormatJsonSchema:
    FindOnePromptSnippetResponseFormatJsonSchema,
): string {
  return JSON.stringify(
    FindOnePromptSnippetResponseFormatJsonSchema$outboundSchema.parse(
      findOnePromptSnippetResponseFormatJsonSchema,
    ),
  );
}

export function findOnePromptSnippetResponseFormatJsonSchemaFromJSON(
  jsonString: string,
): SafeParseResult<
  FindOnePromptSnippetResponseFormatJsonSchema,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      FindOnePromptSnippetResponseFormatJsonSchema$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'FindOnePromptSnippetResponseFormatJsonSchema' from JSON`,
  );
}

/** @internal */
export const FindOnePromptSnippetResponseFormat1$inboundSchema: z.ZodType<
  FindOnePromptSnippetResponseFormat1,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: FindOnePromptSnippetResponseFormatType$inboundSchema,
  json_schema: z.lazy(() =>
    FindOnePromptSnippetResponseFormatJsonSchema$inboundSchema
  ),
}).transform((v) => {
  return remap$(v, {
    "json_schema": "jsonSchema",
  });
});

/** @internal */
export type FindOnePromptSnippetResponseFormat1$Outbound = {
  type: string;
  json_schema: FindOnePromptSnippetResponseFormatJsonSchema$Outbound;
};

/** @internal */
export const FindOnePromptSnippetResponseFormat1$outboundSchema: z.ZodType<
  FindOnePromptSnippetResponseFormat1$Outbound,
  z.ZodTypeDef,
  FindOnePromptSnippetResponseFormat1
> = z.object({
  type: FindOnePromptSnippetResponseFormatType$outboundSchema,
  jsonSchema: z.lazy(() =>
    FindOnePromptSnippetResponseFormatJsonSchema$outboundSchema
  ),
}).transform((v) => {
  return remap$(v, {
    jsonSchema: "json_schema",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FindOnePromptSnippetResponseFormat1$ {
  /** @deprecated use `FindOnePromptSnippetResponseFormat1$inboundSchema` instead. */
  export const inboundSchema =
    FindOnePromptSnippetResponseFormat1$inboundSchema;
  /** @deprecated use `FindOnePromptSnippetResponseFormat1$outboundSchema` instead. */
  export const outboundSchema =
    FindOnePromptSnippetResponseFormat1$outboundSchema;
  /** @deprecated use `FindOnePromptSnippetResponseFormat1$Outbound` instead. */
  export type Outbound = FindOnePromptSnippetResponseFormat1$Outbound;
}

export function findOnePromptSnippetResponseFormat1ToJSON(
  findOnePromptSnippetResponseFormat1: FindOnePromptSnippetResponseFormat1,
): string {
  return JSON.stringify(
    FindOnePromptSnippetResponseFormat1$outboundSchema.parse(
      findOnePromptSnippetResponseFormat1,
    ),
  );
}

export function findOnePromptSnippetResponseFormat1FromJSON(
  jsonString: string,
): SafeParseResult<FindOnePromptSnippetResponseFormat1, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      FindOnePromptSnippetResponseFormat1$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'FindOnePromptSnippetResponseFormat1' from JSON`,
  );
}

/** @internal */
export const FindOnePromptSnippetResponseFormat$inboundSchema: z.ZodType<
  FindOnePromptSnippetResponseFormat,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => FindOnePromptSnippetResponseFormat2$inboundSchema),
  z.lazy(() => FindOnePromptSnippetResponseFormat1$inboundSchema),
]);

/** @internal */
export type FindOnePromptSnippetResponseFormat$Outbound =
  | FindOnePromptSnippetResponseFormat2$Outbound
  | FindOnePromptSnippetResponseFormat1$Outbound;

/** @internal */
export const FindOnePromptSnippetResponseFormat$outboundSchema: z.ZodType<
  FindOnePromptSnippetResponseFormat$Outbound,
  z.ZodTypeDef,
  FindOnePromptSnippetResponseFormat
> = z.union([
  z.lazy(() => FindOnePromptSnippetResponseFormat2$outboundSchema),
  z.lazy(() => FindOnePromptSnippetResponseFormat1$outboundSchema),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FindOnePromptSnippetResponseFormat$ {
  /** @deprecated use `FindOnePromptSnippetResponseFormat$inboundSchema` instead. */
  export const inboundSchema = FindOnePromptSnippetResponseFormat$inboundSchema;
  /** @deprecated use `FindOnePromptSnippetResponseFormat$outboundSchema` instead. */
  export const outboundSchema =
    FindOnePromptSnippetResponseFormat$outboundSchema;
  /** @deprecated use `FindOnePromptSnippetResponseFormat$Outbound` instead. */
  export type Outbound = FindOnePromptSnippetResponseFormat$Outbound;
}

export function findOnePromptSnippetResponseFormatToJSON(
  findOnePromptSnippetResponseFormat: FindOnePromptSnippetResponseFormat,
): string {
  return JSON.stringify(
    FindOnePromptSnippetResponseFormat$outboundSchema.parse(
      findOnePromptSnippetResponseFormat,
    ),
  );
}

export function findOnePromptSnippetResponseFormatFromJSON(
  jsonString: string,
): SafeParseResult<FindOnePromptSnippetResponseFormat, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      FindOnePromptSnippetResponseFormat$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'FindOnePromptSnippetResponseFormat' from JSON`,
  );
}

/** @internal */
export const FindOnePromptSnippetPhotoRealVersion$inboundSchema:
  z.ZodNativeEnum<typeof FindOnePromptSnippetPhotoRealVersion> = z.nativeEnum(
    FindOnePromptSnippetPhotoRealVersion,
  );

/** @internal */
export const FindOnePromptSnippetPhotoRealVersion$outboundSchema:
  z.ZodNativeEnum<typeof FindOnePromptSnippetPhotoRealVersion> =
    FindOnePromptSnippetPhotoRealVersion$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FindOnePromptSnippetPhotoRealVersion$ {
  /** @deprecated use `FindOnePromptSnippetPhotoRealVersion$inboundSchema` instead. */
  export const inboundSchema =
    FindOnePromptSnippetPhotoRealVersion$inboundSchema;
  /** @deprecated use `FindOnePromptSnippetPhotoRealVersion$outboundSchema` instead. */
  export const outboundSchema =
    FindOnePromptSnippetPhotoRealVersion$outboundSchema;
}

/** @internal */
export const FindOnePromptSnippetEncodingFormat$inboundSchema: z.ZodNativeEnum<
  typeof FindOnePromptSnippetEncodingFormat
> = z.nativeEnum(FindOnePromptSnippetEncodingFormat);

/** @internal */
export const FindOnePromptSnippetEncodingFormat$outboundSchema: z.ZodNativeEnum<
  typeof FindOnePromptSnippetEncodingFormat
> = FindOnePromptSnippetEncodingFormat$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FindOnePromptSnippetEncodingFormat$ {
  /** @deprecated use `FindOnePromptSnippetEncodingFormat$inboundSchema` instead. */
  export const inboundSchema = FindOnePromptSnippetEncodingFormat$inboundSchema;
  /** @deprecated use `FindOnePromptSnippetEncodingFormat$outboundSchema` instead. */
  export const outboundSchema =
    FindOnePromptSnippetEncodingFormat$outboundSchema;
}

/** @internal */
export const FindOnePromptSnippetReasoningEffort$inboundSchema: z.ZodNativeEnum<
  typeof FindOnePromptSnippetReasoningEffort
> = z.nativeEnum(FindOnePromptSnippetReasoningEffort);

/** @internal */
export const FindOnePromptSnippetReasoningEffort$outboundSchema:
  z.ZodNativeEnum<typeof FindOnePromptSnippetReasoningEffort> =
    FindOnePromptSnippetReasoningEffort$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FindOnePromptSnippetReasoningEffort$ {
  /** @deprecated use `FindOnePromptSnippetReasoningEffort$inboundSchema` instead. */
  export const inboundSchema =
    FindOnePromptSnippetReasoningEffort$inboundSchema;
  /** @deprecated use `FindOnePromptSnippetReasoningEffort$outboundSchema` instead. */
  export const outboundSchema =
    FindOnePromptSnippetReasoningEffort$outboundSchema;
}

/** @internal */
export const FindOnePromptSnippetModelParameters$inboundSchema: z.ZodType<
  FindOnePromptSnippetModelParameters,
  z.ZodTypeDef,
  unknown
> = z.object({
  temperature: z.number().optional(),
  maxTokens: z.number().optional(),
  topK: z.number().optional(),
  topP: z.number().optional(),
  frequencyPenalty: z.number().optional(),
  presencePenalty: z.number().optional(),
  numImages: z.number().optional(),
  seed: z.number().optional(),
  format: FindOnePromptSnippetFormat$inboundSchema.optional(),
  dimensions: z.string().optional(),
  quality: FindOnePromptSnippetQuality$inboundSchema.optional(),
  style: z.string().optional(),
  responseFormat: z.nullable(
    z.union([
      z.lazy(() => FindOnePromptSnippetResponseFormat2$inboundSchema),
      z.lazy(() => FindOnePromptSnippetResponseFormat1$inboundSchema),
    ]),
  ).optional(),
  photoRealVersion: FindOnePromptSnippetPhotoRealVersion$inboundSchema
    .optional(),
  encoding_format: FindOnePromptSnippetEncodingFormat$inboundSchema.optional(),
  reasoningEffort: FindOnePromptSnippetReasoningEffort$inboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    "encoding_format": "encodingFormat",
  });
});

/** @internal */
export type FindOnePromptSnippetModelParameters$Outbound = {
  temperature?: number | undefined;
  maxTokens?: number | undefined;
  topK?: number | undefined;
  topP?: number | undefined;
  frequencyPenalty?: number | undefined;
  presencePenalty?: number | undefined;
  numImages?: number | undefined;
  seed?: number | undefined;
  format?: string | undefined;
  dimensions?: string | undefined;
  quality?: string | undefined;
  style?: string | undefined;
  responseFormat?:
    | FindOnePromptSnippetResponseFormat2$Outbound
    | FindOnePromptSnippetResponseFormat1$Outbound
    | null
    | undefined;
  photoRealVersion?: string | undefined;
  encoding_format?: string | undefined;
  reasoningEffort?: string | undefined;
};

/** @internal */
export const FindOnePromptSnippetModelParameters$outboundSchema: z.ZodType<
  FindOnePromptSnippetModelParameters$Outbound,
  z.ZodTypeDef,
  FindOnePromptSnippetModelParameters
> = z.object({
  temperature: z.number().optional(),
  maxTokens: z.number().optional(),
  topK: z.number().optional(),
  topP: z.number().optional(),
  frequencyPenalty: z.number().optional(),
  presencePenalty: z.number().optional(),
  numImages: z.number().optional(),
  seed: z.number().optional(),
  format: FindOnePromptSnippetFormat$outboundSchema.optional(),
  dimensions: z.string().optional(),
  quality: FindOnePromptSnippetQuality$outboundSchema.optional(),
  style: z.string().optional(),
  responseFormat: z.nullable(
    z.union([
      z.lazy(() => FindOnePromptSnippetResponseFormat2$outboundSchema),
      z.lazy(() => FindOnePromptSnippetResponseFormat1$outboundSchema),
    ]),
  ).optional(),
  photoRealVersion: FindOnePromptSnippetPhotoRealVersion$outboundSchema
    .optional(),
  encodingFormat: FindOnePromptSnippetEncodingFormat$outboundSchema.optional(),
  reasoningEffort: FindOnePromptSnippetReasoningEffort$outboundSchema
    .optional(),
}).transform((v) => {
  return remap$(v, {
    encodingFormat: "encoding_format",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FindOnePromptSnippetModelParameters$ {
  /** @deprecated use `FindOnePromptSnippetModelParameters$inboundSchema` instead. */
  export const inboundSchema =
    FindOnePromptSnippetModelParameters$inboundSchema;
  /** @deprecated use `FindOnePromptSnippetModelParameters$outboundSchema` instead. */
  export const outboundSchema =
    FindOnePromptSnippetModelParameters$outboundSchema;
  /** @deprecated use `FindOnePromptSnippetModelParameters$Outbound` instead. */
  export type Outbound = FindOnePromptSnippetModelParameters$Outbound;
}

export function findOnePromptSnippetModelParametersToJSON(
  findOnePromptSnippetModelParameters: FindOnePromptSnippetModelParameters,
): string {
  return JSON.stringify(
    FindOnePromptSnippetModelParameters$outboundSchema.parse(
      findOnePromptSnippetModelParameters,
    ),
  );
}

export function findOnePromptSnippetModelParametersFromJSON(
  jsonString: string,
): SafeParseResult<FindOnePromptSnippetModelParameters, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      FindOnePromptSnippetModelParameters$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'FindOnePromptSnippetModelParameters' from JSON`,
  );
}

/** @internal */
export const FindOnePromptSnippetProvider$inboundSchema: z.ZodNativeEnum<
  typeof FindOnePromptSnippetProvider
> = z.nativeEnum(FindOnePromptSnippetProvider);

/** @internal */
export const FindOnePromptSnippetProvider$outboundSchema: z.ZodNativeEnum<
  typeof FindOnePromptSnippetProvider
> = FindOnePromptSnippetProvider$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FindOnePromptSnippetProvider$ {
  /** @deprecated use `FindOnePromptSnippetProvider$inboundSchema` instead. */
  export const inboundSchema = FindOnePromptSnippetProvider$inboundSchema;
  /** @deprecated use `FindOnePromptSnippetProvider$outboundSchema` instead. */
  export const outboundSchema = FindOnePromptSnippetProvider$outboundSchema;
}

/** @internal */
export const FindOnePromptSnippetRole$inboundSchema: z.ZodNativeEnum<
  typeof FindOnePromptSnippetRole
> = z.nativeEnum(FindOnePromptSnippetRole);

/** @internal */
export const FindOnePromptSnippetRole$outboundSchema: z.ZodNativeEnum<
  typeof FindOnePromptSnippetRole
> = FindOnePromptSnippetRole$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FindOnePromptSnippetRole$ {
  /** @deprecated use `FindOnePromptSnippetRole$inboundSchema` instead. */
  export const inboundSchema = FindOnePromptSnippetRole$inboundSchema;
  /** @deprecated use `FindOnePromptSnippetRole$outboundSchema` instead. */
  export const outboundSchema = FindOnePromptSnippetRole$outboundSchema;
}

/** @internal */
export const FindOnePromptSnippet2PromptSnippetsType$inboundSchema:
  z.ZodNativeEnum<typeof FindOnePromptSnippet2PromptSnippetsType> = z
    .nativeEnum(FindOnePromptSnippet2PromptSnippetsType);

/** @internal */
export const FindOnePromptSnippet2PromptSnippetsType$outboundSchema:
  z.ZodNativeEnum<typeof FindOnePromptSnippet2PromptSnippetsType> =
    FindOnePromptSnippet2PromptSnippetsType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FindOnePromptSnippet2PromptSnippetsType$ {
  /** @deprecated use `FindOnePromptSnippet2PromptSnippetsType$inboundSchema` instead. */
  export const inboundSchema =
    FindOnePromptSnippet2PromptSnippetsType$inboundSchema;
  /** @deprecated use `FindOnePromptSnippet2PromptSnippetsType$outboundSchema` instead. */
  export const outboundSchema =
    FindOnePromptSnippet2PromptSnippetsType$outboundSchema;
}

/** @internal */
export const FindOnePromptSnippet2ImageUrl$inboundSchema: z.ZodType<
  FindOnePromptSnippet2ImageUrl,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string().optional(),
  url: z.string(),
  detail: z.string().optional(),
});

/** @internal */
export type FindOnePromptSnippet2ImageUrl$Outbound = {
  id?: string | undefined;
  url: string;
  detail?: string | undefined;
};

/** @internal */
export const FindOnePromptSnippet2ImageUrl$outboundSchema: z.ZodType<
  FindOnePromptSnippet2ImageUrl$Outbound,
  z.ZodTypeDef,
  FindOnePromptSnippet2ImageUrl
> = z.object({
  id: z.string().optional(),
  url: z.string(),
  detail: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FindOnePromptSnippet2ImageUrl$ {
  /** @deprecated use `FindOnePromptSnippet2ImageUrl$inboundSchema` instead. */
  export const inboundSchema = FindOnePromptSnippet2ImageUrl$inboundSchema;
  /** @deprecated use `FindOnePromptSnippet2ImageUrl$outboundSchema` instead. */
  export const outboundSchema = FindOnePromptSnippet2ImageUrl$outboundSchema;
  /** @deprecated use `FindOnePromptSnippet2ImageUrl$Outbound` instead. */
  export type Outbound = FindOnePromptSnippet2ImageUrl$Outbound;
}

export function findOnePromptSnippet2ImageUrlToJSON(
  findOnePromptSnippet2ImageUrl: FindOnePromptSnippet2ImageUrl,
): string {
  return JSON.stringify(
    FindOnePromptSnippet2ImageUrl$outboundSchema.parse(
      findOnePromptSnippet2ImageUrl,
    ),
  );
}

export function findOnePromptSnippet2ImageUrlFromJSON(
  jsonString: string,
): SafeParseResult<FindOnePromptSnippet2ImageUrl, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => FindOnePromptSnippet2ImageUrl$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'FindOnePromptSnippet2ImageUrl' from JSON`,
  );
}

/** @internal */
export const FindOnePromptSnippet22$inboundSchema: z.ZodType<
  FindOnePromptSnippet22,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: FindOnePromptSnippet2PromptSnippetsType$inboundSchema,
  image_url: z.lazy(() => FindOnePromptSnippet2ImageUrl$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "image_url": "imageUrl",
  });
});

/** @internal */
export type FindOnePromptSnippet22$Outbound = {
  type: string;
  image_url: FindOnePromptSnippet2ImageUrl$Outbound;
};

/** @internal */
export const FindOnePromptSnippet22$outboundSchema: z.ZodType<
  FindOnePromptSnippet22$Outbound,
  z.ZodTypeDef,
  FindOnePromptSnippet22
> = z.object({
  type: FindOnePromptSnippet2PromptSnippetsType$outboundSchema,
  imageUrl: z.lazy(() => FindOnePromptSnippet2ImageUrl$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    imageUrl: "image_url",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FindOnePromptSnippet22$ {
  /** @deprecated use `FindOnePromptSnippet22$inboundSchema` instead. */
  export const inboundSchema = FindOnePromptSnippet22$inboundSchema;
  /** @deprecated use `FindOnePromptSnippet22$outboundSchema` instead. */
  export const outboundSchema = FindOnePromptSnippet22$outboundSchema;
  /** @deprecated use `FindOnePromptSnippet22$Outbound` instead. */
  export type Outbound = FindOnePromptSnippet22$Outbound;
}

export function findOnePromptSnippet22ToJSON(
  findOnePromptSnippet22: FindOnePromptSnippet22,
): string {
  return JSON.stringify(
    FindOnePromptSnippet22$outboundSchema.parse(findOnePromptSnippet22),
  );
}

export function findOnePromptSnippet22FromJSON(
  jsonString: string,
): SafeParseResult<FindOnePromptSnippet22, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => FindOnePromptSnippet22$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'FindOnePromptSnippet22' from JSON`,
  );
}

/** @internal */
export const FindOnePromptSnippet2Type$inboundSchema: z.ZodNativeEnum<
  typeof FindOnePromptSnippet2Type
> = z.nativeEnum(FindOnePromptSnippet2Type);

/** @internal */
export const FindOnePromptSnippet2Type$outboundSchema: z.ZodNativeEnum<
  typeof FindOnePromptSnippet2Type
> = FindOnePromptSnippet2Type$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FindOnePromptSnippet2Type$ {
  /** @deprecated use `FindOnePromptSnippet2Type$inboundSchema` instead. */
  export const inboundSchema = FindOnePromptSnippet2Type$inboundSchema;
  /** @deprecated use `FindOnePromptSnippet2Type$outboundSchema` instead. */
  export const outboundSchema = FindOnePromptSnippet2Type$outboundSchema;
}

/** @internal */
export const FindOnePromptSnippet21$inboundSchema: z.ZodType<
  FindOnePromptSnippet21,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: FindOnePromptSnippet2Type$inboundSchema,
  text: z.string(),
});

/** @internal */
export type FindOnePromptSnippet21$Outbound = {
  type: string;
  text: string;
};

/** @internal */
export const FindOnePromptSnippet21$outboundSchema: z.ZodType<
  FindOnePromptSnippet21$Outbound,
  z.ZodTypeDef,
  FindOnePromptSnippet21
> = z.object({
  type: FindOnePromptSnippet2Type$outboundSchema,
  text: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FindOnePromptSnippet21$ {
  /** @deprecated use `FindOnePromptSnippet21$inboundSchema` instead. */
  export const inboundSchema = FindOnePromptSnippet21$inboundSchema;
  /** @deprecated use `FindOnePromptSnippet21$outboundSchema` instead. */
  export const outboundSchema = FindOnePromptSnippet21$outboundSchema;
  /** @deprecated use `FindOnePromptSnippet21$Outbound` instead. */
  export type Outbound = FindOnePromptSnippet21$Outbound;
}

export function findOnePromptSnippet21ToJSON(
  findOnePromptSnippet21: FindOnePromptSnippet21,
): string {
  return JSON.stringify(
    FindOnePromptSnippet21$outboundSchema.parse(findOnePromptSnippet21),
  );
}

export function findOnePromptSnippet21FromJSON(
  jsonString: string,
): SafeParseResult<FindOnePromptSnippet21, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => FindOnePromptSnippet21$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'FindOnePromptSnippet21' from JSON`,
  );
}

/** @internal */
export const FindOnePromptSnippetContent2$inboundSchema: z.ZodType<
  FindOnePromptSnippetContent2,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => FindOnePromptSnippet21$inboundSchema),
  z.lazy(() => FindOnePromptSnippet22$inboundSchema),
]);

/** @internal */
export type FindOnePromptSnippetContent2$Outbound =
  | FindOnePromptSnippet21$Outbound
  | FindOnePromptSnippet22$Outbound;

/** @internal */
export const FindOnePromptSnippetContent2$outboundSchema: z.ZodType<
  FindOnePromptSnippetContent2$Outbound,
  z.ZodTypeDef,
  FindOnePromptSnippetContent2
> = z.union([
  z.lazy(() => FindOnePromptSnippet21$outboundSchema),
  z.lazy(() => FindOnePromptSnippet22$outboundSchema),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FindOnePromptSnippetContent2$ {
  /** @deprecated use `FindOnePromptSnippetContent2$inboundSchema` instead. */
  export const inboundSchema = FindOnePromptSnippetContent2$inboundSchema;
  /** @deprecated use `FindOnePromptSnippetContent2$outboundSchema` instead. */
  export const outboundSchema = FindOnePromptSnippetContent2$outboundSchema;
  /** @deprecated use `FindOnePromptSnippetContent2$Outbound` instead. */
  export type Outbound = FindOnePromptSnippetContent2$Outbound;
}

export function findOnePromptSnippetContent2ToJSON(
  findOnePromptSnippetContent2: FindOnePromptSnippetContent2,
): string {
  return JSON.stringify(
    FindOnePromptSnippetContent2$outboundSchema.parse(
      findOnePromptSnippetContent2,
    ),
  );
}

export function findOnePromptSnippetContent2FromJSON(
  jsonString: string,
): SafeParseResult<FindOnePromptSnippetContent2, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => FindOnePromptSnippetContent2$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'FindOnePromptSnippetContent2' from JSON`,
  );
}

/** @internal */
export const FindOnePromptSnippetContent$inboundSchema: z.ZodType<
  FindOnePromptSnippetContent,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.string(),
  z.array(z.union([
    z.lazy(() => FindOnePromptSnippet21$inboundSchema),
    z.lazy(() => FindOnePromptSnippet22$inboundSchema),
  ])),
]);

/** @internal */
export type FindOnePromptSnippetContent$Outbound =
  | string
  | Array<FindOnePromptSnippet21$Outbound | FindOnePromptSnippet22$Outbound>;

/** @internal */
export const FindOnePromptSnippetContent$outboundSchema: z.ZodType<
  FindOnePromptSnippetContent$Outbound,
  z.ZodTypeDef,
  FindOnePromptSnippetContent
> = z.union([
  z.string(),
  z.array(z.union([
    z.lazy(() => FindOnePromptSnippet21$outboundSchema),
    z.lazy(() => FindOnePromptSnippet22$outboundSchema),
  ])),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FindOnePromptSnippetContent$ {
  /** @deprecated use `FindOnePromptSnippetContent$inboundSchema` instead. */
  export const inboundSchema = FindOnePromptSnippetContent$inboundSchema;
  /** @deprecated use `FindOnePromptSnippetContent$outboundSchema` instead. */
  export const outboundSchema = FindOnePromptSnippetContent$outboundSchema;
  /** @deprecated use `FindOnePromptSnippetContent$Outbound` instead. */
  export type Outbound = FindOnePromptSnippetContent$Outbound;
}

export function findOnePromptSnippetContentToJSON(
  findOnePromptSnippetContent: FindOnePromptSnippetContent,
): string {
  return JSON.stringify(
    FindOnePromptSnippetContent$outboundSchema.parse(
      findOnePromptSnippetContent,
    ),
  );
}

export function findOnePromptSnippetContentFromJSON(
  jsonString: string,
): SafeParseResult<FindOnePromptSnippetContent, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => FindOnePromptSnippetContent$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'FindOnePromptSnippetContent' from JSON`,
  );
}

/** @internal */
export const FindOnePromptSnippetPromptSnippetsType$inboundSchema:
  z.ZodNativeEnum<typeof FindOnePromptSnippetPromptSnippetsType> = z.nativeEnum(
    FindOnePromptSnippetPromptSnippetsType,
  );

/** @internal */
export const FindOnePromptSnippetPromptSnippetsType$outboundSchema:
  z.ZodNativeEnum<typeof FindOnePromptSnippetPromptSnippetsType> =
    FindOnePromptSnippetPromptSnippetsType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FindOnePromptSnippetPromptSnippetsType$ {
  /** @deprecated use `FindOnePromptSnippetPromptSnippetsType$inboundSchema` instead. */
  export const inboundSchema =
    FindOnePromptSnippetPromptSnippetsType$inboundSchema;
  /** @deprecated use `FindOnePromptSnippetPromptSnippetsType$outboundSchema` instead. */
  export const outboundSchema =
    FindOnePromptSnippetPromptSnippetsType$outboundSchema;
}

/** @internal */
export const FindOnePromptSnippetFunction$inboundSchema: z.ZodType<
  FindOnePromptSnippetFunction,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.string(),
  arguments: z.string(),
});

/** @internal */
export type FindOnePromptSnippetFunction$Outbound = {
  name: string;
  arguments: string;
};

/** @internal */
export const FindOnePromptSnippetFunction$outboundSchema: z.ZodType<
  FindOnePromptSnippetFunction$Outbound,
  z.ZodTypeDef,
  FindOnePromptSnippetFunction
> = z.object({
  name: z.string(),
  arguments: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FindOnePromptSnippetFunction$ {
  /** @deprecated use `FindOnePromptSnippetFunction$inboundSchema` instead. */
  export const inboundSchema = FindOnePromptSnippetFunction$inboundSchema;
  /** @deprecated use `FindOnePromptSnippetFunction$outboundSchema` instead. */
  export const outboundSchema = FindOnePromptSnippetFunction$outboundSchema;
  /** @deprecated use `FindOnePromptSnippetFunction$Outbound` instead. */
  export type Outbound = FindOnePromptSnippetFunction$Outbound;
}

export function findOnePromptSnippetFunctionToJSON(
  findOnePromptSnippetFunction: FindOnePromptSnippetFunction,
): string {
  return JSON.stringify(
    FindOnePromptSnippetFunction$outboundSchema.parse(
      findOnePromptSnippetFunction,
    ),
  );
}

export function findOnePromptSnippetFunctionFromJSON(
  jsonString: string,
): SafeParseResult<FindOnePromptSnippetFunction, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => FindOnePromptSnippetFunction$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'FindOnePromptSnippetFunction' from JSON`,
  );
}

/** @internal */
export const FindOnePromptSnippetToolCalls$inboundSchema: z.ZodType<
  FindOnePromptSnippetToolCalls,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string().optional(),
  index: z.number().optional(),
  type: FindOnePromptSnippetPromptSnippetsType$inboundSchema,
  function: z.lazy(() => FindOnePromptSnippetFunction$inboundSchema),
});

/** @internal */
export type FindOnePromptSnippetToolCalls$Outbound = {
  id?: string | undefined;
  index?: number | undefined;
  type: string;
  function: FindOnePromptSnippetFunction$Outbound;
};

/** @internal */
export const FindOnePromptSnippetToolCalls$outboundSchema: z.ZodType<
  FindOnePromptSnippetToolCalls$Outbound,
  z.ZodTypeDef,
  FindOnePromptSnippetToolCalls
> = z.object({
  id: z.string().optional(),
  index: z.number().optional(),
  type: FindOnePromptSnippetPromptSnippetsType$outboundSchema,
  function: z.lazy(() => FindOnePromptSnippetFunction$outboundSchema),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FindOnePromptSnippetToolCalls$ {
  /** @deprecated use `FindOnePromptSnippetToolCalls$inboundSchema` instead. */
  export const inboundSchema = FindOnePromptSnippetToolCalls$inboundSchema;
  /** @deprecated use `FindOnePromptSnippetToolCalls$outboundSchema` instead. */
  export const outboundSchema = FindOnePromptSnippetToolCalls$outboundSchema;
  /** @deprecated use `FindOnePromptSnippetToolCalls$Outbound` instead. */
  export type Outbound = FindOnePromptSnippetToolCalls$Outbound;
}

export function findOnePromptSnippetToolCallsToJSON(
  findOnePromptSnippetToolCalls: FindOnePromptSnippetToolCalls,
): string {
  return JSON.stringify(
    FindOnePromptSnippetToolCalls$outboundSchema.parse(
      findOnePromptSnippetToolCalls,
    ),
  );
}

export function findOnePromptSnippetToolCallsFromJSON(
  jsonString: string,
): SafeParseResult<FindOnePromptSnippetToolCalls, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => FindOnePromptSnippetToolCalls$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'FindOnePromptSnippetToolCalls' from JSON`,
  );
}

/** @internal */
export const FindOnePromptSnippetMessages$inboundSchema: z.ZodType<
  FindOnePromptSnippetMessages,
  z.ZodTypeDef,
  unknown
> = z.object({
  role: FindOnePromptSnippetRole$inboundSchema,
  content: z.union([
    z.string(),
    z.array(z.union([
      z.lazy(() => FindOnePromptSnippet21$inboundSchema),
      z.lazy(() => FindOnePromptSnippet22$inboundSchema),
    ])),
  ]),
  tool_calls: z.array(z.lazy(() => FindOnePromptSnippetToolCalls$inboundSchema))
    .optional(),
}).transform((v) => {
  return remap$(v, {
    "tool_calls": "toolCalls",
  });
});

/** @internal */
export type FindOnePromptSnippetMessages$Outbound = {
  role: string;
  content:
    | string
    | Array<FindOnePromptSnippet21$Outbound | FindOnePromptSnippet22$Outbound>;
  tool_calls?: Array<FindOnePromptSnippetToolCalls$Outbound> | undefined;
};

/** @internal */
export const FindOnePromptSnippetMessages$outboundSchema: z.ZodType<
  FindOnePromptSnippetMessages$Outbound,
  z.ZodTypeDef,
  FindOnePromptSnippetMessages
> = z.object({
  role: FindOnePromptSnippetRole$outboundSchema,
  content: z.union([
    z.string(),
    z.array(z.union([
      z.lazy(() => FindOnePromptSnippet21$outboundSchema),
      z.lazy(() => FindOnePromptSnippet22$outboundSchema),
    ])),
  ]),
  toolCalls: z.array(z.lazy(() => FindOnePromptSnippetToolCalls$outboundSchema))
    .optional(),
}).transform((v) => {
  return remap$(v, {
    toolCalls: "tool_calls",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FindOnePromptSnippetMessages$ {
  /** @deprecated use `FindOnePromptSnippetMessages$inboundSchema` instead. */
  export const inboundSchema = FindOnePromptSnippetMessages$inboundSchema;
  /** @deprecated use `FindOnePromptSnippetMessages$outboundSchema` instead. */
  export const outboundSchema = FindOnePromptSnippetMessages$outboundSchema;
  /** @deprecated use `FindOnePromptSnippetMessages$Outbound` instead. */
  export type Outbound = FindOnePromptSnippetMessages$Outbound;
}

export function findOnePromptSnippetMessagesToJSON(
  findOnePromptSnippetMessages: FindOnePromptSnippetMessages,
): string {
  return JSON.stringify(
    FindOnePromptSnippetMessages$outboundSchema.parse(
      findOnePromptSnippetMessages,
    ),
  );
}

export function findOnePromptSnippetMessagesFromJSON(
  jsonString: string,
): SafeParseResult<FindOnePromptSnippetMessages, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => FindOnePromptSnippetMessages$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'FindOnePromptSnippetMessages' from JSON`,
  );
}

/** @internal */
export const FindOnePromptSnippetPromptConfig$inboundSchema: z.ZodType<
  FindOnePromptSnippetPromptConfig,
  z.ZodTypeDef,
  unknown
> = z.object({
  stream: z.boolean().optional(),
  model: z.string().optional(),
  model_db_id: z.string().optional(),
  model_type: FindOnePromptSnippetModelType$inboundSchema.optional(),
  model_parameters: z.lazy(() =>
    FindOnePromptSnippetModelParameters$inboundSchema
  ).optional(),
  provider: FindOnePromptSnippetProvider$inboundSchema.optional(),
  integration_id: z.nullable(z.string()).optional(),
  version: z.string().optional(),
  messages: z.array(z.lazy(() => FindOnePromptSnippetMessages$inboundSchema)),
}).transform((v) => {
  return remap$(v, {
    "model_db_id": "modelDbId",
    "model_type": "modelType",
    "model_parameters": "modelParameters",
    "integration_id": "integrationId",
  });
});

/** @internal */
export type FindOnePromptSnippetPromptConfig$Outbound = {
  stream?: boolean | undefined;
  model?: string | undefined;
  model_db_id?: string | undefined;
  model_type?: string | undefined;
  model_parameters?: FindOnePromptSnippetModelParameters$Outbound | undefined;
  provider?: string | undefined;
  integration_id?: string | null | undefined;
  version?: string | undefined;
  messages: Array<FindOnePromptSnippetMessages$Outbound>;
};

/** @internal */
export const FindOnePromptSnippetPromptConfig$outboundSchema: z.ZodType<
  FindOnePromptSnippetPromptConfig$Outbound,
  z.ZodTypeDef,
  FindOnePromptSnippetPromptConfig
> = z.object({
  stream: z.boolean().optional(),
  model: z.string().optional(),
  modelDbId: z.string().optional(),
  modelType: FindOnePromptSnippetModelType$outboundSchema.optional(),
  modelParameters: z.lazy(() =>
    FindOnePromptSnippetModelParameters$outboundSchema
  ).optional(),
  provider: FindOnePromptSnippetProvider$outboundSchema.optional(),
  integrationId: z.nullable(z.string()).optional(),
  version: z.string().optional(),
  messages: z.array(z.lazy(() => FindOnePromptSnippetMessages$outboundSchema)),
}).transform((v) => {
  return remap$(v, {
    modelDbId: "model_db_id",
    modelType: "model_type",
    modelParameters: "model_parameters",
    integrationId: "integration_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FindOnePromptSnippetPromptConfig$ {
  /** @deprecated use `FindOnePromptSnippetPromptConfig$inboundSchema` instead. */
  export const inboundSchema = FindOnePromptSnippetPromptConfig$inboundSchema;
  /** @deprecated use `FindOnePromptSnippetPromptConfig$outboundSchema` instead. */
  export const outboundSchema = FindOnePromptSnippetPromptConfig$outboundSchema;
  /** @deprecated use `FindOnePromptSnippetPromptConfig$Outbound` instead. */
  export type Outbound = FindOnePromptSnippetPromptConfig$Outbound;
}

export function findOnePromptSnippetPromptConfigToJSON(
  findOnePromptSnippetPromptConfig: FindOnePromptSnippetPromptConfig,
): string {
  return JSON.stringify(
    FindOnePromptSnippetPromptConfig$outboundSchema.parse(
      findOnePromptSnippetPromptConfig,
    ),
  );
}

export function findOnePromptSnippetPromptConfigFromJSON(
  jsonString: string,
): SafeParseResult<FindOnePromptSnippetPromptConfig, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => FindOnePromptSnippetPromptConfig$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'FindOnePromptSnippetPromptConfig' from JSON`,
  );
}

/** @internal */
export const FindOnePromptSnippetUseCases$inboundSchema: z.ZodNativeEnum<
  typeof FindOnePromptSnippetUseCases
> = z.nativeEnum(FindOnePromptSnippetUseCases);

/** @internal */
export const FindOnePromptSnippetUseCases$outboundSchema: z.ZodNativeEnum<
  typeof FindOnePromptSnippetUseCases
> = FindOnePromptSnippetUseCases$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FindOnePromptSnippetUseCases$ {
  /** @deprecated use `FindOnePromptSnippetUseCases$inboundSchema` instead. */
  export const inboundSchema = FindOnePromptSnippetUseCases$inboundSchema;
  /** @deprecated use `FindOnePromptSnippetUseCases$outboundSchema` instead. */
  export const outboundSchema = FindOnePromptSnippetUseCases$outboundSchema;
}

/** @internal */
export const FindOnePromptSnippetLanguage$inboundSchema: z.ZodNativeEnum<
  typeof FindOnePromptSnippetLanguage
> = z.nativeEnum(FindOnePromptSnippetLanguage);

/** @internal */
export const FindOnePromptSnippetLanguage$outboundSchema: z.ZodNativeEnum<
  typeof FindOnePromptSnippetLanguage
> = FindOnePromptSnippetLanguage$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FindOnePromptSnippetLanguage$ {
  /** @deprecated use `FindOnePromptSnippetLanguage$inboundSchema` instead. */
  export const inboundSchema = FindOnePromptSnippetLanguage$inboundSchema;
  /** @deprecated use `FindOnePromptSnippetLanguage$outboundSchema` instead. */
  export const outboundSchema = FindOnePromptSnippetLanguage$outboundSchema;
}

/** @internal */
export const FindOnePromptSnippetMetadata$inboundSchema: z.ZodType<
  FindOnePromptSnippetMetadata,
  z.ZodTypeDef,
  unknown
> = z.object({
  use_cases: z.array(FindOnePromptSnippetUseCases$inboundSchema).optional(),
  language: FindOnePromptSnippetLanguage$inboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    "use_cases": "useCases",
  });
});

/** @internal */
export type FindOnePromptSnippetMetadata$Outbound = {
  use_cases?: Array<string> | undefined;
  language?: string | undefined;
};

/** @internal */
export const FindOnePromptSnippetMetadata$outboundSchema: z.ZodType<
  FindOnePromptSnippetMetadata$Outbound,
  z.ZodTypeDef,
  FindOnePromptSnippetMetadata
> = z.object({
  useCases: z.array(FindOnePromptSnippetUseCases$outboundSchema).optional(),
  language: FindOnePromptSnippetLanguage$outboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    useCases: "use_cases",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FindOnePromptSnippetMetadata$ {
  /** @deprecated use `FindOnePromptSnippetMetadata$inboundSchema` instead. */
  export const inboundSchema = FindOnePromptSnippetMetadata$inboundSchema;
  /** @deprecated use `FindOnePromptSnippetMetadata$outboundSchema` instead. */
  export const outboundSchema = FindOnePromptSnippetMetadata$outboundSchema;
  /** @deprecated use `FindOnePromptSnippetMetadata$Outbound` instead. */
  export type Outbound = FindOnePromptSnippetMetadata$Outbound;
}

export function findOnePromptSnippetMetadataToJSON(
  findOnePromptSnippetMetadata: FindOnePromptSnippetMetadata,
): string {
  return JSON.stringify(
    FindOnePromptSnippetMetadata$outboundSchema.parse(
      findOnePromptSnippetMetadata,
    ),
  );
}

export function findOnePromptSnippetMetadataFromJSON(
  jsonString: string,
): SafeParseResult<FindOnePromptSnippetMetadata, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => FindOnePromptSnippetMetadata$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'FindOnePromptSnippetMetadata' from JSON`,
  );
}

/** @internal */
export const FindOnePromptSnippetType$inboundSchema: z.ZodNativeEnum<
  typeof FindOnePromptSnippetType
> = z.nativeEnum(FindOnePromptSnippetType);

/** @internal */
export const FindOnePromptSnippetType$outboundSchema: z.ZodNativeEnum<
  typeof FindOnePromptSnippetType
> = FindOnePromptSnippetType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FindOnePromptSnippetType$ {
  /** @deprecated use `FindOnePromptSnippetType$inboundSchema` instead. */
  export const inboundSchema = FindOnePromptSnippetType$inboundSchema;
  /** @deprecated use `FindOnePromptSnippetType$outboundSchema` instead. */
  export const outboundSchema = FindOnePromptSnippetType$outboundSchema;
}

/** @internal */
export const FindOnePromptSnippetPromptSnippetsModelType$inboundSchema:
  z.ZodNativeEnum<typeof FindOnePromptSnippetPromptSnippetsModelType> = z
    .nativeEnum(FindOnePromptSnippetPromptSnippetsModelType);

/** @internal */
export const FindOnePromptSnippetPromptSnippetsModelType$outboundSchema:
  z.ZodNativeEnum<typeof FindOnePromptSnippetPromptSnippetsModelType> =
    FindOnePromptSnippetPromptSnippetsModelType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FindOnePromptSnippetPromptSnippetsModelType$ {
  /** @deprecated use `FindOnePromptSnippetPromptSnippetsModelType$inboundSchema` instead. */
  export const inboundSchema =
    FindOnePromptSnippetPromptSnippetsModelType$inboundSchema;
  /** @deprecated use `FindOnePromptSnippetPromptSnippetsModelType$outboundSchema` instead. */
  export const outboundSchema =
    FindOnePromptSnippetPromptSnippetsModelType$outboundSchema;
}

/** @internal */
export const FindOnePromptSnippetPromptSnippetsFormat$inboundSchema:
  z.ZodNativeEnum<typeof FindOnePromptSnippetPromptSnippetsFormat> = z
    .nativeEnum(FindOnePromptSnippetPromptSnippetsFormat);

/** @internal */
export const FindOnePromptSnippetPromptSnippetsFormat$outboundSchema:
  z.ZodNativeEnum<typeof FindOnePromptSnippetPromptSnippetsFormat> =
    FindOnePromptSnippetPromptSnippetsFormat$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FindOnePromptSnippetPromptSnippetsFormat$ {
  /** @deprecated use `FindOnePromptSnippetPromptSnippetsFormat$inboundSchema` instead. */
  export const inboundSchema =
    FindOnePromptSnippetPromptSnippetsFormat$inboundSchema;
  /** @deprecated use `FindOnePromptSnippetPromptSnippetsFormat$outboundSchema` instead. */
  export const outboundSchema =
    FindOnePromptSnippetPromptSnippetsFormat$outboundSchema;
}

/** @internal */
export const FindOnePromptSnippetPromptSnippetsQuality$inboundSchema:
  z.ZodNativeEnum<typeof FindOnePromptSnippetPromptSnippetsQuality> = z
    .nativeEnum(FindOnePromptSnippetPromptSnippetsQuality);

/** @internal */
export const FindOnePromptSnippetPromptSnippetsQuality$outboundSchema:
  z.ZodNativeEnum<typeof FindOnePromptSnippetPromptSnippetsQuality> =
    FindOnePromptSnippetPromptSnippetsQuality$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FindOnePromptSnippetPromptSnippetsQuality$ {
  /** @deprecated use `FindOnePromptSnippetPromptSnippetsQuality$inboundSchema` instead. */
  export const inboundSchema =
    FindOnePromptSnippetPromptSnippetsQuality$inboundSchema;
  /** @deprecated use `FindOnePromptSnippetPromptSnippetsQuality$outboundSchema` instead. */
  export const outboundSchema =
    FindOnePromptSnippetPromptSnippetsQuality$outboundSchema;
}

/** @internal */
export const FindOnePromptSnippetResponseFormatPromptSnippetsResponse200Type$inboundSchema:
  z.ZodNativeEnum<
    typeof FindOnePromptSnippetResponseFormatPromptSnippetsResponse200Type
  > = z.nativeEnum(
    FindOnePromptSnippetResponseFormatPromptSnippetsResponse200Type,
  );

/** @internal */
export const FindOnePromptSnippetResponseFormatPromptSnippetsResponse200Type$outboundSchema:
  z.ZodNativeEnum<
    typeof FindOnePromptSnippetResponseFormatPromptSnippetsResponse200Type
  > =
    FindOnePromptSnippetResponseFormatPromptSnippetsResponse200Type$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FindOnePromptSnippetResponseFormatPromptSnippetsResponse200Type$ {
  /** @deprecated use `FindOnePromptSnippetResponseFormatPromptSnippetsResponse200Type$inboundSchema` instead. */
  export const inboundSchema =
    FindOnePromptSnippetResponseFormatPromptSnippetsResponse200Type$inboundSchema;
  /** @deprecated use `FindOnePromptSnippetResponseFormatPromptSnippetsResponse200Type$outboundSchema` instead. */
  export const outboundSchema =
    FindOnePromptSnippetResponseFormatPromptSnippetsResponse200Type$outboundSchema;
}

/** @internal */
export const FindOnePromptSnippetResponseFormatPromptSnippets2$inboundSchema:
  z.ZodType<
    FindOnePromptSnippetResponseFormatPromptSnippets2,
    z.ZodTypeDef,
    unknown
  > = z.object({
    type:
      FindOnePromptSnippetResponseFormatPromptSnippetsResponse200Type$inboundSchema,
  });

/** @internal */
export type FindOnePromptSnippetResponseFormatPromptSnippets2$Outbound = {
  type: string;
};

/** @internal */
export const FindOnePromptSnippetResponseFormatPromptSnippets2$outboundSchema:
  z.ZodType<
    FindOnePromptSnippetResponseFormatPromptSnippets2$Outbound,
    z.ZodTypeDef,
    FindOnePromptSnippetResponseFormatPromptSnippets2
  > = z.object({
    type:
      FindOnePromptSnippetResponseFormatPromptSnippetsResponse200Type$outboundSchema,
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FindOnePromptSnippetResponseFormatPromptSnippets2$ {
  /** @deprecated use `FindOnePromptSnippetResponseFormatPromptSnippets2$inboundSchema` instead. */
  export const inboundSchema =
    FindOnePromptSnippetResponseFormatPromptSnippets2$inboundSchema;
  /** @deprecated use `FindOnePromptSnippetResponseFormatPromptSnippets2$outboundSchema` instead. */
  export const outboundSchema =
    FindOnePromptSnippetResponseFormatPromptSnippets2$outboundSchema;
  /** @deprecated use `FindOnePromptSnippetResponseFormatPromptSnippets2$Outbound` instead. */
  export type Outbound =
    FindOnePromptSnippetResponseFormatPromptSnippets2$Outbound;
}

export function findOnePromptSnippetResponseFormatPromptSnippets2ToJSON(
  findOnePromptSnippetResponseFormatPromptSnippets2:
    FindOnePromptSnippetResponseFormatPromptSnippets2,
): string {
  return JSON.stringify(
    FindOnePromptSnippetResponseFormatPromptSnippets2$outboundSchema.parse(
      findOnePromptSnippetResponseFormatPromptSnippets2,
    ),
  );
}

export function findOnePromptSnippetResponseFormatPromptSnippets2FromJSON(
  jsonString: string,
): SafeParseResult<
  FindOnePromptSnippetResponseFormatPromptSnippets2,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      FindOnePromptSnippetResponseFormatPromptSnippets2$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'FindOnePromptSnippetResponseFormatPromptSnippets2' from JSON`,
  );
}

/** @internal */
export const FindOnePromptSnippetResponseFormatPromptSnippetsResponseType$inboundSchema:
  z.ZodNativeEnum<
    typeof FindOnePromptSnippetResponseFormatPromptSnippetsResponseType
  > = z.nativeEnum(
    FindOnePromptSnippetResponseFormatPromptSnippetsResponseType,
  );

/** @internal */
export const FindOnePromptSnippetResponseFormatPromptSnippetsResponseType$outboundSchema:
  z.ZodNativeEnum<
    typeof FindOnePromptSnippetResponseFormatPromptSnippetsResponseType
  > =
    FindOnePromptSnippetResponseFormatPromptSnippetsResponseType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FindOnePromptSnippetResponseFormatPromptSnippetsResponseType$ {
  /** @deprecated use `FindOnePromptSnippetResponseFormatPromptSnippetsResponseType$inboundSchema` instead. */
  export const inboundSchema =
    FindOnePromptSnippetResponseFormatPromptSnippetsResponseType$inboundSchema;
  /** @deprecated use `FindOnePromptSnippetResponseFormatPromptSnippetsResponseType$outboundSchema` instead. */
  export const outboundSchema =
    FindOnePromptSnippetResponseFormatPromptSnippetsResponseType$outboundSchema;
}

/** @internal */
export const FindOnePromptSnippetResponseFormatPromptSnippetsJsonSchema$inboundSchema:
  z.ZodType<
    FindOnePromptSnippetResponseFormatPromptSnippetsJsonSchema,
    z.ZodTypeDef,
    unknown
  > = z.object({
    name: z.string(),
    strict: z.boolean(),
    schema: z.record(z.any()),
  });

/** @internal */
export type FindOnePromptSnippetResponseFormatPromptSnippetsJsonSchema$Outbound =
  {
    name: string;
    strict: boolean;
    schema: { [k: string]: any };
  };

/** @internal */
export const FindOnePromptSnippetResponseFormatPromptSnippetsJsonSchema$outboundSchema:
  z.ZodType<
    FindOnePromptSnippetResponseFormatPromptSnippetsJsonSchema$Outbound,
    z.ZodTypeDef,
    FindOnePromptSnippetResponseFormatPromptSnippetsJsonSchema
  > = z.object({
    name: z.string(),
    strict: z.boolean(),
    schema: z.record(z.any()),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FindOnePromptSnippetResponseFormatPromptSnippetsJsonSchema$ {
  /** @deprecated use `FindOnePromptSnippetResponseFormatPromptSnippetsJsonSchema$inboundSchema` instead. */
  export const inboundSchema =
    FindOnePromptSnippetResponseFormatPromptSnippetsJsonSchema$inboundSchema;
  /** @deprecated use `FindOnePromptSnippetResponseFormatPromptSnippetsJsonSchema$outboundSchema` instead. */
  export const outboundSchema =
    FindOnePromptSnippetResponseFormatPromptSnippetsJsonSchema$outboundSchema;
  /** @deprecated use `FindOnePromptSnippetResponseFormatPromptSnippetsJsonSchema$Outbound` instead. */
  export type Outbound =
    FindOnePromptSnippetResponseFormatPromptSnippetsJsonSchema$Outbound;
}

export function findOnePromptSnippetResponseFormatPromptSnippetsJsonSchemaToJSON(
  findOnePromptSnippetResponseFormatPromptSnippetsJsonSchema:
    FindOnePromptSnippetResponseFormatPromptSnippetsJsonSchema,
): string {
  return JSON.stringify(
    FindOnePromptSnippetResponseFormatPromptSnippetsJsonSchema$outboundSchema
      .parse(findOnePromptSnippetResponseFormatPromptSnippetsJsonSchema),
  );
}

export function findOnePromptSnippetResponseFormatPromptSnippetsJsonSchemaFromJSON(
  jsonString: string,
): SafeParseResult<
  FindOnePromptSnippetResponseFormatPromptSnippetsJsonSchema,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      FindOnePromptSnippetResponseFormatPromptSnippetsJsonSchema$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'FindOnePromptSnippetResponseFormatPromptSnippetsJsonSchema' from JSON`,
  );
}

/** @internal */
export const FindOnePromptSnippetResponseFormatPromptSnippets1$inboundSchema:
  z.ZodType<
    FindOnePromptSnippetResponseFormatPromptSnippets1,
    z.ZodTypeDef,
    unknown
  > = z.object({
    type:
      FindOnePromptSnippetResponseFormatPromptSnippetsResponseType$inboundSchema,
    json_schema: z.lazy(() =>
      FindOnePromptSnippetResponseFormatPromptSnippetsJsonSchema$inboundSchema
    ),
  }).transform((v) => {
    return remap$(v, {
      "json_schema": "jsonSchema",
    });
  });

/** @internal */
export type FindOnePromptSnippetResponseFormatPromptSnippets1$Outbound = {
  type: string;
  json_schema:
    FindOnePromptSnippetResponseFormatPromptSnippetsJsonSchema$Outbound;
};

/** @internal */
export const FindOnePromptSnippetResponseFormatPromptSnippets1$outboundSchema:
  z.ZodType<
    FindOnePromptSnippetResponseFormatPromptSnippets1$Outbound,
    z.ZodTypeDef,
    FindOnePromptSnippetResponseFormatPromptSnippets1
  > = z.object({
    type:
      FindOnePromptSnippetResponseFormatPromptSnippetsResponseType$outboundSchema,
    jsonSchema: z.lazy(() =>
      FindOnePromptSnippetResponseFormatPromptSnippetsJsonSchema$outboundSchema
    ),
  }).transform((v) => {
    return remap$(v, {
      jsonSchema: "json_schema",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FindOnePromptSnippetResponseFormatPromptSnippets1$ {
  /** @deprecated use `FindOnePromptSnippetResponseFormatPromptSnippets1$inboundSchema` instead. */
  export const inboundSchema =
    FindOnePromptSnippetResponseFormatPromptSnippets1$inboundSchema;
  /** @deprecated use `FindOnePromptSnippetResponseFormatPromptSnippets1$outboundSchema` instead. */
  export const outboundSchema =
    FindOnePromptSnippetResponseFormatPromptSnippets1$outboundSchema;
  /** @deprecated use `FindOnePromptSnippetResponseFormatPromptSnippets1$Outbound` instead. */
  export type Outbound =
    FindOnePromptSnippetResponseFormatPromptSnippets1$Outbound;
}

export function findOnePromptSnippetResponseFormatPromptSnippets1ToJSON(
  findOnePromptSnippetResponseFormatPromptSnippets1:
    FindOnePromptSnippetResponseFormatPromptSnippets1,
): string {
  return JSON.stringify(
    FindOnePromptSnippetResponseFormatPromptSnippets1$outboundSchema.parse(
      findOnePromptSnippetResponseFormatPromptSnippets1,
    ),
  );
}

export function findOnePromptSnippetResponseFormatPromptSnippets1FromJSON(
  jsonString: string,
): SafeParseResult<
  FindOnePromptSnippetResponseFormatPromptSnippets1,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      FindOnePromptSnippetResponseFormatPromptSnippets1$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'FindOnePromptSnippetResponseFormatPromptSnippets1' from JSON`,
  );
}

/** @internal */
export const FindOnePromptSnippetPromptSnippetsResponseFormat$inboundSchema:
  z.ZodType<
    FindOnePromptSnippetPromptSnippetsResponseFormat,
    z.ZodTypeDef,
    unknown
  > = z.union([
    z.lazy(() =>
      FindOnePromptSnippetResponseFormatPromptSnippets2$inboundSchema
    ),
    z.lazy(() =>
      FindOnePromptSnippetResponseFormatPromptSnippets1$inboundSchema
    ),
  ]);

/** @internal */
export type FindOnePromptSnippetPromptSnippetsResponseFormat$Outbound =
  | FindOnePromptSnippetResponseFormatPromptSnippets2$Outbound
  | FindOnePromptSnippetResponseFormatPromptSnippets1$Outbound;

/** @internal */
export const FindOnePromptSnippetPromptSnippetsResponseFormat$outboundSchema:
  z.ZodType<
    FindOnePromptSnippetPromptSnippetsResponseFormat$Outbound,
    z.ZodTypeDef,
    FindOnePromptSnippetPromptSnippetsResponseFormat
  > = z.union([
    z.lazy(() =>
      FindOnePromptSnippetResponseFormatPromptSnippets2$outboundSchema
    ),
    z.lazy(() =>
      FindOnePromptSnippetResponseFormatPromptSnippets1$outboundSchema
    ),
  ]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FindOnePromptSnippetPromptSnippetsResponseFormat$ {
  /** @deprecated use `FindOnePromptSnippetPromptSnippetsResponseFormat$inboundSchema` instead. */
  export const inboundSchema =
    FindOnePromptSnippetPromptSnippetsResponseFormat$inboundSchema;
  /** @deprecated use `FindOnePromptSnippetPromptSnippetsResponseFormat$outboundSchema` instead. */
  export const outboundSchema =
    FindOnePromptSnippetPromptSnippetsResponseFormat$outboundSchema;
  /** @deprecated use `FindOnePromptSnippetPromptSnippetsResponseFormat$Outbound` instead. */
  export type Outbound =
    FindOnePromptSnippetPromptSnippetsResponseFormat$Outbound;
}

export function findOnePromptSnippetPromptSnippetsResponseFormatToJSON(
  findOnePromptSnippetPromptSnippetsResponseFormat:
    FindOnePromptSnippetPromptSnippetsResponseFormat,
): string {
  return JSON.stringify(
    FindOnePromptSnippetPromptSnippetsResponseFormat$outboundSchema.parse(
      findOnePromptSnippetPromptSnippetsResponseFormat,
    ),
  );
}

export function findOnePromptSnippetPromptSnippetsResponseFormatFromJSON(
  jsonString: string,
): SafeParseResult<
  FindOnePromptSnippetPromptSnippetsResponseFormat,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      FindOnePromptSnippetPromptSnippetsResponseFormat$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'FindOnePromptSnippetPromptSnippetsResponseFormat' from JSON`,
  );
}

/** @internal */
export const FindOnePromptSnippetPromptSnippetsPhotoRealVersion$inboundSchema:
  z.ZodNativeEnum<typeof FindOnePromptSnippetPromptSnippetsPhotoRealVersion> = z
    .nativeEnum(FindOnePromptSnippetPromptSnippetsPhotoRealVersion);

/** @internal */
export const FindOnePromptSnippetPromptSnippetsPhotoRealVersion$outboundSchema:
  z.ZodNativeEnum<typeof FindOnePromptSnippetPromptSnippetsPhotoRealVersion> =
    FindOnePromptSnippetPromptSnippetsPhotoRealVersion$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FindOnePromptSnippetPromptSnippetsPhotoRealVersion$ {
  /** @deprecated use `FindOnePromptSnippetPromptSnippetsPhotoRealVersion$inboundSchema` instead. */
  export const inboundSchema =
    FindOnePromptSnippetPromptSnippetsPhotoRealVersion$inboundSchema;
  /** @deprecated use `FindOnePromptSnippetPromptSnippetsPhotoRealVersion$outboundSchema` instead. */
  export const outboundSchema =
    FindOnePromptSnippetPromptSnippetsPhotoRealVersion$outboundSchema;
}

/** @internal */
export const FindOnePromptSnippetPromptSnippetsEncodingFormat$inboundSchema:
  z.ZodNativeEnum<typeof FindOnePromptSnippetPromptSnippetsEncodingFormat> = z
    .nativeEnum(FindOnePromptSnippetPromptSnippetsEncodingFormat);

/** @internal */
export const FindOnePromptSnippetPromptSnippetsEncodingFormat$outboundSchema:
  z.ZodNativeEnum<typeof FindOnePromptSnippetPromptSnippetsEncodingFormat> =
    FindOnePromptSnippetPromptSnippetsEncodingFormat$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FindOnePromptSnippetPromptSnippetsEncodingFormat$ {
  /** @deprecated use `FindOnePromptSnippetPromptSnippetsEncodingFormat$inboundSchema` instead. */
  export const inboundSchema =
    FindOnePromptSnippetPromptSnippetsEncodingFormat$inboundSchema;
  /** @deprecated use `FindOnePromptSnippetPromptSnippetsEncodingFormat$outboundSchema` instead. */
  export const outboundSchema =
    FindOnePromptSnippetPromptSnippetsEncodingFormat$outboundSchema;
}

/** @internal */
export const FindOnePromptSnippetPromptSnippetsReasoningEffort$inboundSchema:
  z.ZodNativeEnum<typeof FindOnePromptSnippetPromptSnippetsReasoningEffort> = z
    .nativeEnum(FindOnePromptSnippetPromptSnippetsReasoningEffort);

/** @internal */
export const FindOnePromptSnippetPromptSnippetsReasoningEffort$outboundSchema:
  z.ZodNativeEnum<typeof FindOnePromptSnippetPromptSnippetsReasoningEffort> =
    FindOnePromptSnippetPromptSnippetsReasoningEffort$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FindOnePromptSnippetPromptSnippetsReasoningEffort$ {
  /** @deprecated use `FindOnePromptSnippetPromptSnippetsReasoningEffort$inboundSchema` instead. */
  export const inboundSchema =
    FindOnePromptSnippetPromptSnippetsReasoningEffort$inboundSchema;
  /** @deprecated use `FindOnePromptSnippetPromptSnippetsReasoningEffort$outboundSchema` instead. */
  export const outboundSchema =
    FindOnePromptSnippetPromptSnippetsReasoningEffort$outboundSchema;
}

/** @internal */
export const FindOnePromptSnippetPromptSnippetsModelParameters$inboundSchema:
  z.ZodType<
    FindOnePromptSnippetPromptSnippetsModelParameters,
    z.ZodTypeDef,
    unknown
  > = z.object({
    temperature: z.number().optional(),
    maxTokens: z.number().optional(),
    topK: z.number().optional(),
    topP: z.number().optional(),
    frequencyPenalty: z.number().optional(),
    presencePenalty: z.number().optional(),
    numImages: z.number().optional(),
    seed: z.number().optional(),
    format: FindOnePromptSnippetPromptSnippetsFormat$inboundSchema.optional(),
    dimensions: z.string().optional(),
    quality: FindOnePromptSnippetPromptSnippetsQuality$inboundSchema.optional(),
    style: z.string().optional(),
    responseFormat: z.nullable(
      z.union([
        z.lazy(() =>
          FindOnePromptSnippetResponseFormatPromptSnippets2$inboundSchema
        ),
        z.lazy(() =>
          FindOnePromptSnippetResponseFormatPromptSnippets1$inboundSchema
        ),
      ]),
    ).optional(),
    photoRealVersion:
      FindOnePromptSnippetPromptSnippetsPhotoRealVersion$inboundSchema
        .optional(),
    encoding_format:
      FindOnePromptSnippetPromptSnippetsEncodingFormat$inboundSchema.optional(),
    reasoningEffort:
      FindOnePromptSnippetPromptSnippetsReasoningEffort$inboundSchema
        .optional(),
  }).transform((v) => {
    return remap$(v, {
      "encoding_format": "encodingFormat",
    });
  });

/** @internal */
export type FindOnePromptSnippetPromptSnippetsModelParameters$Outbound = {
  temperature?: number | undefined;
  maxTokens?: number | undefined;
  topK?: number | undefined;
  topP?: number | undefined;
  frequencyPenalty?: number | undefined;
  presencePenalty?: number | undefined;
  numImages?: number | undefined;
  seed?: number | undefined;
  format?: string | undefined;
  dimensions?: string | undefined;
  quality?: string | undefined;
  style?: string | undefined;
  responseFormat?:
    | FindOnePromptSnippetResponseFormatPromptSnippets2$Outbound
    | FindOnePromptSnippetResponseFormatPromptSnippets1$Outbound
    | null
    | undefined;
  photoRealVersion?: string | undefined;
  encoding_format?: string | undefined;
  reasoningEffort?: string | undefined;
};

/** @internal */
export const FindOnePromptSnippetPromptSnippetsModelParameters$outboundSchema:
  z.ZodType<
    FindOnePromptSnippetPromptSnippetsModelParameters$Outbound,
    z.ZodTypeDef,
    FindOnePromptSnippetPromptSnippetsModelParameters
  > = z.object({
    temperature: z.number().optional(),
    maxTokens: z.number().optional(),
    topK: z.number().optional(),
    topP: z.number().optional(),
    frequencyPenalty: z.number().optional(),
    presencePenalty: z.number().optional(),
    numImages: z.number().optional(),
    seed: z.number().optional(),
    format: FindOnePromptSnippetPromptSnippetsFormat$outboundSchema.optional(),
    dimensions: z.string().optional(),
    quality: FindOnePromptSnippetPromptSnippetsQuality$outboundSchema
      .optional(),
    style: z.string().optional(),
    responseFormat: z.nullable(
      z.union([
        z.lazy(() =>
          FindOnePromptSnippetResponseFormatPromptSnippets2$outboundSchema
        ),
        z.lazy(() =>
          FindOnePromptSnippetResponseFormatPromptSnippets1$outboundSchema
        ),
      ]),
    ).optional(),
    photoRealVersion:
      FindOnePromptSnippetPromptSnippetsPhotoRealVersion$outboundSchema
        .optional(),
    encodingFormat:
      FindOnePromptSnippetPromptSnippetsEncodingFormat$outboundSchema
        .optional(),
    reasoningEffort:
      FindOnePromptSnippetPromptSnippetsReasoningEffort$outboundSchema
        .optional(),
  }).transform((v) => {
    return remap$(v, {
      encodingFormat: "encoding_format",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FindOnePromptSnippetPromptSnippetsModelParameters$ {
  /** @deprecated use `FindOnePromptSnippetPromptSnippetsModelParameters$inboundSchema` instead. */
  export const inboundSchema =
    FindOnePromptSnippetPromptSnippetsModelParameters$inboundSchema;
  /** @deprecated use `FindOnePromptSnippetPromptSnippetsModelParameters$outboundSchema` instead. */
  export const outboundSchema =
    FindOnePromptSnippetPromptSnippetsModelParameters$outboundSchema;
  /** @deprecated use `FindOnePromptSnippetPromptSnippetsModelParameters$Outbound` instead. */
  export type Outbound =
    FindOnePromptSnippetPromptSnippetsModelParameters$Outbound;
}

export function findOnePromptSnippetPromptSnippetsModelParametersToJSON(
  findOnePromptSnippetPromptSnippetsModelParameters:
    FindOnePromptSnippetPromptSnippetsModelParameters,
): string {
  return JSON.stringify(
    FindOnePromptSnippetPromptSnippetsModelParameters$outboundSchema.parse(
      findOnePromptSnippetPromptSnippetsModelParameters,
    ),
  );
}

export function findOnePromptSnippetPromptSnippetsModelParametersFromJSON(
  jsonString: string,
): SafeParseResult<
  FindOnePromptSnippetPromptSnippetsModelParameters,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      FindOnePromptSnippetPromptSnippetsModelParameters$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'FindOnePromptSnippetPromptSnippetsModelParameters' from JSON`,
  );
}

/** @internal */
export const FindOnePromptSnippetPromptSnippetsProvider$inboundSchema:
  z.ZodNativeEnum<typeof FindOnePromptSnippetPromptSnippetsProvider> = z
    .nativeEnum(FindOnePromptSnippetPromptSnippetsProvider);

/** @internal */
export const FindOnePromptSnippetPromptSnippetsProvider$outboundSchema:
  z.ZodNativeEnum<typeof FindOnePromptSnippetPromptSnippetsProvider> =
    FindOnePromptSnippetPromptSnippetsProvider$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FindOnePromptSnippetPromptSnippetsProvider$ {
  /** @deprecated use `FindOnePromptSnippetPromptSnippetsProvider$inboundSchema` instead. */
  export const inboundSchema =
    FindOnePromptSnippetPromptSnippetsProvider$inboundSchema;
  /** @deprecated use `FindOnePromptSnippetPromptSnippetsProvider$outboundSchema` instead. */
  export const outboundSchema =
    FindOnePromptSnippetPromptSnippetsProvider$outboundSchema;
}

/** @internal */
export const FindOnePromptSnippetPromptSnippetsRole$inboundSchema:
  z.ZodNativeEnum<typeof FindOnePromptSnippetPromptSnippetsRole> = z.nativeEnum(
    FindOnePromptSnippetPromptSnippetsRole,
  );

/** @internal */
export const FindOnePromptSnippetPromptSnippetsRole$outboundSchema:
  z.ZodNativeEnum<typeof FindOnePromptSnippetPromptSnippetsRole> =
    FindOnePromptSnippetPromptSnippetsRole$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FindOnePromptSnippetPromptSnippetsRole$ {
  /** @deprecated use `FindOnePromptSnippetPromptSnippetsRole$inboundSchema` instead. */
  export const inboundSchema =
    FindOnePromptSnippetPromptSnippetsRole$inboundSchema;
  /** @deprecated use `FindOnePromptSnippetPromptSnippetsRole$outboundSchema` instead. */
  export const outboundSchema =
    FindOnePromptSnippetPromptSnippetsRole$outboundSchema;
}

/** @internal */
export const FindOnePromptSnippet2PromptSnippetsResponse200Type$inboundSchema:
  z.ZodNativeEnum<typeof FindOnePromptSnippet2PromptSnippetsResponse200Type> = z
    .nativeEnum(FindOnePromptSnippet2PromptSnippetsResponse200Type);

/** @internal */
export const FindOnePromptSnippet2PromptSnippetsResponse200Type$outboundSchema:
  z.ZodNativeEnum<typeof FindOnePromptSnippet2PromptSnippetsResponse200Type> =
    FindOnePromptSnippet2PromptSnippetsResponse200Type$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FindOnePromptSnippet2PromptSnippetsResponse200Type$ {
  /** @deprecated use `FindOnePromptSnippet2PromptSnippetsResponse200Type$inboundSchema` instead. */
  export const inboundSchema =
    FindOnePromptSnippet2PromptSnippetsResponse200Type$inboundSchema;
  /** @deprecated use `FindOnePromptSnippet2PromptSnippetsResponse200Type$outboundSchema` instead. */
  export const outboundSchema =
    FindOnePromptSnippet2PromptSnippetsResponse200Type$outboundSchema;
}

/** @internal */
export const FindOnePromptSnippet2PromptSnippetsImageUrl$inboundSchema:
  z.ZodType<
    FindOnePromptSnippet2PromptSnippetsImageUrl,
    z.ZodTypeDef,
    unknown
  > = z.object({
    id: z.string().optional(),
    url: z.string(),
    detail: z.string().optional(),
  });

/** @internal */
export type FindOnePromptSnippet2PromptSnippetsImageUrl$Outbound = {
  id?: string | undefined;
  url: string;
  detail?: string | undefined;
};

/** @internal */
export const FindOnePromptSnippet2PromptSnippetsImageUrl$outboundSchema:
  z.ZodType<
    FindOnePromptSnippet2PromptSnippetsImageUrl$Outbound,
    z.ZodTypeDef,
    FindOnePromptSnippet2PromptSnippetsImageUrl
  > = z.object({
    id: z.string().optional(),
    url: z.string(),
    detail: z.string().optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FindOnePromptSnippet2PromptSnippetsImageUrl$ {
  /** @deprecated use `FindOnePromptSnippet2PromptSnippetsImageUrl$inboundSchema` instead. */
  export const inboundSchema =
    FindOnePromptSnippet2PromptSnippetsImageUrl$inboundSchema;
  /** @deprecated use `FindOnePromptSnippet2PromptSnippetsImageUrl$outboundSchema` instead. */
  export const outboundSchema =
    FindOnePromptSnippet2PromptSnippetsImageUrl$outboundSchema;
  /** @deprecated use `FindOnePromptSnippet2PromptSnippetsImageUrl$Outbound` instead. */
  export type Outbound = FindOnePromptSnippet2PromptSnippetsImageUrl$Outbound;
}

export function findOnePromptSnippet2PromptSnippetsImageUrlToJSON(
  findOnePromptSnippet2PromptSnippetsImageUrl:
    FindOnePromptSnippet2PromptSnippetsImageUrl,
): string {
  return JSON.stringify(
    FindOnePromptSnippet2PromptSnippetsImageUrl$outboundSchema.parse(
      findOnePromptSnippet2PromptSnippetsImageUrl,
    ),
  );
}

export function findOnePromptSnippet2PromptSnippetsImageUrlFromJSON(
  jsonString: string,
): SafeParseResult<
  FindOnePromptSnippet2PromptSnippetsImageUrl,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      FindOnePromptSnippet2PromptSnippetsImageUrl$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'FindOnePromptSnippet2PromptSnippetsImageUrl' from JSON`,
  );
}

/** @internal */
export const FindOnePromptSnippet2PromptSnippets2$inboundSchema: z.ZodType<
  FindOnePromptSnippet2PromptSnippets2,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: FindOnePromptSnippet2PromptSnippetsResponse200Type$inboundSchema,
  image_url: z.lazy(() =>
    FindOnePromptSnippet2PromptSnippetsImageUrl$inboundSchema
  ),
}).transform((v) => {
  return remap$(v, {
    "image_url": "imageUrl",
  });
});

/** @internal */
export type FindOnePromptSnippet2PromptSnippets2$Outbound = {
  type: string;
  image_url: FindOnePromptSnippet2PromptSnippetsImageUrl$Outbound;
};

/** @internal */
export const FindOnePromptSnippet2PromptSnippets2$outboundSchema: z.ZodType<
  FindOnePromptSnippet2PromptSnippets2$Outbound,
  z.ZodTypeDef,
  FindOnePromptSnippet2PromptSnippets2
> = z.object({
  type: FindOnePromptSnippet2PromptSnippetsResponse200Type$outboundSchema,
  imageUrl: z.lazy(() =>
    FindOnePromptSnippet2PromptSnippetsImageUrl$outboundSchema
  ),
}).transform((v) => {
  return remap$(v, {
    imageUrl: "image_url",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FindOnePromptSnippet2PromptSnippets2$ {
  /** @deprecated use `FindOnePromptSnippet2PromptSnippets2$inboundSchema` instead. */
  export const inboundSchema =
    FindOnePromptSnippet2PromptSnippets2$inboundSchema;
  /** @deprecated use `FindOnePromptSnippet2PromptSnippets2$outboundSchema` instead. */
  export const outboundSchema =
    FindOnePromptSnippet2PromptSnippets2$outboundSchema;
  /** @deprecated use `FindOnePromptSnippet2PromptSnippets2$Outbound` instead. */
  export type Outbound = FindOnePromptSnippet2PromptSnippets2$Outbound;
}

export function findOnePromptSnippet2PromptSnippets2ToJSON(
  findOnePromptSnippet2PromptSnippets2: FindOnePromptSnippet2PromptSnippets2,
): string {
  return JSON.stringify(
    FindOnePromptSnippet2PromptSnippets2$outboundSchema.parse(
      findOnePromptSnippet2PromptSnippets2,
    ),
  );
}

export function findOnePromptSnippet2PromptSnippets2FromJSON(
  jsonString: string,
): SafeParseResult<FindOnePromptSnippet2PromptSnippets2, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      FindOnePromptSnippet2PromptSnippets2$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'FindOnePromptSnippet2PromptSnippets2' from JSON`,
  );
}

/** @internal */
export const FindOnePromptSnippet2PromptSnippetsResponseType$inboundSchema:
  z.ZodNativeEnum<typeof FindOnePromptSnippet2PromptSnippetsResponseType> = z
    .nativeEnum(FindOnePromptSnippet2PromptSnippetsResponseType);

/** @internal */
export const FindOnePromptSnippet2PromptSnippetsResponseType$outboundSchema:
  z.ZodNativeEnum<typeof FindOnePromptSnippet2PromptSnippetsResponseType> =
    FindOnePromptSnippet2PromptSnippetsResponseType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FindOnePromptSnippet2PromptSnippetsResponseType$ {
  /** @deprecated use `FindOnePromptSnippet2PromptSnippetsResponseType$inboundSchema` instead. */
  export const inboundSchema =
    FindOnePromptSnippet2PromptSnippetsResponseType$inboundSchema;
  /** @deprecated use `FindOnePromptSnippet2PromptSnippetsResponseType$outboundSchema` instead. */
  export const outboundSchema =
    FindOnePromptSnippet2PromptSnippetsResponseType$outboundSchema;
}

/** @internal */
export const FindOnePromptSnippet2PromptSnippets1$inboundSchema: z.ZodType<
  FindOnePromptSnippet2PromptSnippets1,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: FindOnePromptSnippet2PromptSnippetsResponseType$inboundSchema,
  text: z.string(),
});

/** @internal */
export type FindOnePromptSnippet2PromptSnippets1$Outbound = {
  type: string;
  text: string;
};

/** @internal */
export const FindOnePromptSnippet2PromptSnippets1$outboundSchema: z.ZodType<
  FindOnePromptSnippet2PromptSnippets1$Outbound,
  z.ZodTypeDef,
  FindOnePromptSnippet2PromptSnippets1
> = z.object({
  type: FindOnePromptSnippet2PromptSnippetsResponseType$outboundSchema,
  text: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FindOnePromptSnippet2PromptSnippets1$ {
  /** @deprecated use `FindOnePromptSnippet2PromptSnippets1$inboundSchema` instead. */
  export const inboundSchema =
    FindOnePromptSnippet2PromptSnippets1$inboundSchema;
  /** @deprecated use `FindOnePromptSnippet2PromptSnippets1$outboundSchema` instead. */
  export const outboundSchema =
    FindOnePromptSnippet2PromptSnippets1$outboundSchema;
  /** @deprecated use `FindOnePromptSnippet2PromptSnippets1$Outbound` instead. */
  export type Outbound = FindOnePromptSnippet2PromptSnippets1$Outbound;
}

export function findOnePromptSnippet2PromptSnippets1ToJSON(
  findOnePromptSnippet2PromptSnippets1: FindOnePromptSnippet2PromptSnippets1,
): string {
  return JSON.stringify(
    FindOnePromptSnippet2PromptSnippets1$outboundSchema.parse(
      findOnePromptSnippet2PromptSnippets1,
    ),
  );
}

export function findOnePromptSnippet2PromptSnippets1FromJSON(
  jsonString: string,
): SafeParseResult<FindOnePromptSnippet2PromptSnippets1, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      FindOnePromptSnippet2PromptSnippets1$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'FindOnePromptSnippet2PromptSnippets1' from JSON`,
  );
}

/** @internal */
export const FindOnePromptSnippetContentPromptSnippets2$inboundSchema:
  z.ZodType<FindOnePromptSnippetContentPromptSnippets2, z.ZodTypeDef, unknown> =
    z.union([
      z.lazy(() => FindOnePromptSnippet2PromptSnippets1$inboundSchema),
      z.lazy(() => FindOnePromptSnippet2PromptSnippets2$inboundSchema),
    ]);

/** @internal */
export type FindOnePromptSnippetContentPromptSnippets2$Outbound =
  | FindOnePromptSnippet2PromptSnippets1$Outbound
  | FindOnePromptSnippet2PromptSnippets2$Outbound;

/** @internal */
export const FindOnePromptSnippetContentPromptSnippets2$outboundSchema:
  z.ZodType<
    FindOnePromptSnippetContentPromptSnippets2$Outbound,
    z.ZodTypeDef,
    FindOnePromptSnippetContentPromptSnippets2
  > = z.union([
    z.lazy(() => FindOnePromptSnippet2PromptSnippets1$outboundSchema),
    z.lazy(() => FindOnePromptSnippet2PromptSnippets2$outboundSchema),
  ]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FindOnePromptSnippetContentPromptSnippets2$ {
  /** @deprecated use `FindOnePromptSnippetContentPromptSnippets2$inboundSchema` instead. */
  export const inboundSchema =
    FindOnePromptSnippetContentPromptSnippets2$inboundSchema;
  /** @deprecated use `FindOnePromptSnippetContentPromptSnippets2$outboundSchema` instead. */
  export const outboundSchema =
    FindOnePromptSnippetContentPromptSnippets2$outboundSchema;
  /** @deprecated use `FindOnePromptSnippetContentPromptSnippets2$Outbound` instead. */
  export type Outbound = FindOnePromptSnippetContentPromptSnippets2$Outbound;
}

export function findOnePromptSnippetContentPromptSnippets2ToJSON(
  findOnePromptSnippetContentPromptSnippets2:
    FindOnePromptSnippetContentPromptSnippets2,
): string {
  return JSON.stringify(
    FindOnePromptSnippetContentPromptSnippets2$outboundSchema.parse(
      findOnePromptSnippetContentPromptSnippets2,
    ),
  );
}

export function findOnePromptSnippetContentPromptSnippets2FromJSON(
  jsonString: string,
): SafeParseResult<
  FindOnePromptSnippetContentPromptSnippets2,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      FindOnePromptSnippetContentPromptSnippets2$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'FindOnePromptSnippetContentPromptSnippets2' from JSON`,
  );
}

/** @internal */
export const FindOnePromptSnippetPromptSnippetsContent$inboundSchema: z.ZodType<
  FindOnePromptSnippetPromptSnippetsContent,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.string(),
  z.array(z.union([
    z.lazy(() => FindOnePromptSnippet2PromptSnippets1$inboundSchema),
    z.lazy(() => FindOnePromptSnippet2PromptSnippets2$inboundSchema),
  ])),
]);

/** @internal */
export type FindOnePromptSnippetPromptSnippetsContent$Outbound =
  | string
  | Array<
    | FindOnePromptSnippet2PromptSnippets1$Outbound
    | FindOnePromptSnippet2PromptSnippets2$Outbound
  >;

/** @internal */
export const FindOnePromptSnippetPromptSnippetsContent$outboundSchema:
  z.ZodType<
    FindOnePromptSnippetPromptSnippetsContent$Outbound,
    z.ZodTypeDef,
    FindOnePromptSnippetPromptSnippetsContent
  > = z.union([
    z.string(),
    z.array(z.union([
      z.lazy(() => FindOnePromptSnippet2PromptSnippets1$outboundSchema),
      z.lazy(() => FindOnePromptSnippet2PromptSnippets2$outboundSchema),
    ])),
  ]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FindOnePromptSnippetPromptSnippetsContent$ {
  /** @deprecated use `FindOnePromptSnippetPromptSnippetsContent$inboundSchema` instead. */
  export const inboundSchema =
    FindOnePromptSnippetPromptSnippetsContent$inboundSchema;
  /** @deprecated use `FindOnePromptSnippetPromptSnippetsContent$outboundSchema` instead. */
  export const outboundSchema =
    FindOnePromptSnippetPromptSnippetsContent$outboundSchema;
  /** @deprecated use `FindOnePromptSnippetPromptSnippetsContent$Outbound` instead. */
  export type Outbound = FindOnePromptSnippetPromptSnippetsContent$Outbound;
}

export function findOnePromptSnippetPromptSnippetsContentToJSON(
  findOnePromptSnippetPromptSnippetsContent:
    FindOnePromptSnippetPromptSnippetsContent,
): string {
  return JSON.stringify(
    FindOnePromptSnippetPromptSnippetsContent$outboundSchema.parse(
      findOnePromptSnippetPromptSnippetsContent,
    ),
  );
}

export function findOnePromptSnippetPromptSnippetsContentFromJSON(
  jsonString: string,
): SafeParseResult<
  FindOnePromptSnippetPromptSnippetsContent,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      FindOnePromptSnippetPromptSnippetsContent$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'FindOnePromptSnippetPromptSnippetsContent' from JSON`,
  );
}

/** @internal */
export const FindOnePromptSnippetPromptSnippetsResponseType$inboundSchema:
  z.ZodNativeEnum<typeof FindOnePromptSnippetPromptSnippetsResponseType> = z
    .nativeEnum(FindOnePromptSnippetPromptSnippetsResponseType);

/** @internal */
export const FindOnePromptSnippetPromptSnippetsResponseType$outboundSchema:
  z.ZodNativeEnum<typeof FindOnePromptSnippetPromptSnippetsResponseType> =
    FindOnePromptSnippetPromptSnippetsResponseType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FindOnePromptSnippetPromptSnippetsResponseType$ {
  /** @deprecated use `FindOnePromptSnippetPromptSnippetsResponseType$inboundSchema` instead. */
  export const inboundSchema =
    FindOnePromptSnippetPromptSnippetsResponseType$inboundSchema;
  /** @deprecated use `FindOnePromptSnippetPromptSnippetsResponseType$outboundSchema` instead. */
  export const outboundSchema =
    FindOnePromptSnippetPromptSnippetsResponseType$outboundSchema;
}

/** @internal */
export const FindOnePromptSnippetPromptSnippetsFunction$inboundSchema:
  z.ZodType<FindOnePromptSnippetPromptSnippetsFunction, z.ZodTypeDef, unknown> =
    z.object({
      name: z.string(),
      arguments: z.string(),
    });

/** @internal */
export type FindOnePromptSnippetPromptSnippetsFunction$Outbound = {
  name: string;
  arguments: string;
};

/** @internal */
export const FindOnePromptSnippetPromptSnippetsFunction$outboundSchema:
  z.ZodType<
    FindOnePromptSnippetPromptSnippetsFunction$Outbound,
    z.ZodTypeDef,
    FindOnePromptSnippetPromptSnippetsFunction
  > = z.object({
    name: z.string(),
    arguments: z.string(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FindOnePromptSnippetPromptSnippetsFunction$ {
  /** @deprecated use `FindOnePromptSnippetPromptSnippetsFunction$inboundSchema` instead. */
  export const inboundSchema =
    FindOnePromptSnippetPromptSnippetsFunction$inboundSchema;
  /** @deprecated use `FindOnePromptSnippetPromptSnippetsFunction$outboundSchema` instead. */
  export const outboundSchema =
    FindOnePromptSnippetPromptSnippetsFunction$outboundSchema;
  /** @deprecated use `FindOnePromptSnippetPromptSnippetsFunction$Outbound` instead. */
  export type Outbound = FindOnePromptSnippetPromptSnippetsFunction$Outbound;
}

export function findOnePromptSnippetPromptSnippetsFunctionToJSON(
  findOnePromptSnippetPromptSnippetsFunction:
    FindOnePromptSnippetPromptSnippetsFunction,
): string {
  return JSON.stringify(
    FindOnePromptSnippetPromptSnippetsFunction$outboundSchema.parse(
      findOnePromptSnippetPromptSnippetsFunction,
    ),
  );
}

export function findOnePromptSnippetPromptSnippetsFunctionFromJSON(
  jsonString: string,
): SafeParseResult<
  FindOnePromptSnippetPromptSnippetsFunction,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      FindOnePromptSnippetPromptSnippetsFunction$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'FindOnePromptSnippetPromptSnippetsFunction' from JSON`,
  );
}

/** @internal */
export const FindOnePromptSnippetPromptSnippetsToolCalls$inboundSchema:
  z.ZodType<
    FindOnePromptSnippetPromptSnippetsToolCalls,
    z.ZodTypeDef,
    unknown
  > = z.object({
    id: z.string().optional(),
    index: z.number().optional(),
    type: FindOnePromptSnippetPromptSnippetsResponseType$inboundSchema,
    function: z.lazy(() =>
      FindOnePromptSnippetPromptSnippetsFunction$inboundSchema
    ),
  });

/** @internal */
export type FindOnePromptSnippetPromptSnippetsToolCalls$Outbound = {
  id?: string | undefined;
  index?: number | undefined;
  type: string;
  function: FindOnePromptSnippetPromptSnippetsFunction$Outbound;
};

/** @internal */
export const FindOnePromptSnippetPromptSnippetsToolCalls$outboundSchema:
  z.ZodType<
    FindOnePromptSnippetPromptSnippetsToolCalls$Outbound,
    z.ZodTypeDef,
    FindOnePromptSnippetPromptSnippetsToolCalls
  > = z.object({
    id: z.string().optional(),
    index: z.number().optional(),
    type: FindOnePromptSnippetPromptSnippetsResponseType$outboundSchema,
    function: z.lazy(() =>
      FindOnePromptSnippetPromptSnippetsFunction$outboundSchema
    ),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FindOnePromptSnippetPromptSnippetsToolCalls$ {
  /** @deprecated use `FindOnePromptSnippetPromptSnippetsToolCalls$inboundSchema` instead. */
  export const inboundSchema =
    FindOnePromptSnippetPromptSnippetsToolCalls$inboundSchema;
  /** @deprecated use `FindOnePromptSnippetPromptSnippetsToolCalls$outboundSchema` instead. */
  export const outboundSchema =
    FindOnePromptSnippetPromptSnippetsToolCalls$outboundSchema;
  /** @deprecated use `FindOnePromptSnippetPromptSnippetsToolCalls$Outbound` instead. */
  export type Outbound = FindOnePromptSnippetPromptSnippetsToolCalls$Outbound;
}

export function findOnePromptSnippetPromptSnippetsToolCallsToJSON(
  findOnePromptSnippetPromptSnippetsToolCalls:
    FindOnePromptSnippetPromptSnippetsToolCalls,
): string {
  return JSON.stringify(
    FindOnePromptSnippetPromptSnippetsToolCalls$outboundSchema.parse(
      findOnePromptSnippetPromptSnippetsToolCalls,
    ),
  );
}

export function findOnePromptSnippetPromptSnippetsToolCallsFromJSON(
  jsonString: string,
): SafeParseResult<
  FindOnePromptSnippetPromptSnippetsToolCalls,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      FindOnePromptSnippetPromptSnippetsToolCalls$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'FindOnePromptSnippetPromptSnippetsToolCalls' from JSON`,
  );
}

/** @internal */
export const FindOnePromptSnippetPromptSnippetsMessages$inboundSchema:
  z.ZodType<FindOnePromptSnippetPromptSnippetsMessages, z.ZodTypeDef, unknown> =
    z.object({
      role: FindOnePromptSnippetPromptSnippetsRole$inboundSchema,
      content: z.union([
        z.string(),
        z.array(z.union([
          z.lazy(() => FindOnePromptSnippet2PromptSnippets1$inboundSchema),
          z.lazy(() => FindOnePromptSnippet2PromptSnippets2$inboundSchema),
        ])),
      ]),
      tool_calls: z.array(
        z.lazy(() => FindOnePromptSnippetPromptSnippetsToolCalls$inboundSchema),
      ).optional(),
    }).transform((v) => {
      return remap$(v, {
        "tool_calls": "toolCalls",
      });
    });

/** @internal */
export type FindOnePromptSnippetPromptSnippetsMessages$Outbound = {
  role: string;
  content:
    | string
    | Array<
      | FindOnePromptSnippet2PromptSnippets1$Outbound
      | FindOnePromptSnippet2PromptSnippets2$Outbound
    >;
  tool_calls?:
    | Array<FindOnePromptSnippetPromptSnippetsToolCalls$Outbound>
    | undefined;
};

/** @internal */
export const FindOnePromptSnippetPromptSnippetsMessages$outboundSchema:
  z.ZodType<
    FindOnePromptSnippetPromptSnippetsMessages$Outbound,
    z.ZodTypeDef,
    FindOnePromptSnippetPromptSnippetsMessages
  > = z.object({
    role: FindOnePromptSnippetPromptSnippetsRole$outboundSchema,
    content: z.union([
      z.string(),
      z.array(z.union([
        z.lazy(() => FindOnePromptSnippet2PromptSnippets1$outboundSchema),
        z.lazy(() => FindOnePromptSnippet2PromptSnippets2$outboundSchema),
      ])),
    ]),
    toolCalls: z.array(
      z.lazy(() => FindOnePromptSnippetPromptSnippetsToolCalls$outboundSchema),
    ).optional(),
  }).transform((v) => {
    return remap$(v, {
      toolCalls: "tool_calls",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FindOnePromptSnippetPromptSnippetsMessages$ {
  /** @deprecated use `FindOnePromptSnippetPromptSnippetsMessages$inboundSchema` instead. */
  export const inboundSchema =
    FindOnePromptSnippetPromptSnippetsMessages$inboundSchema;
  /** @deprecated use `FindOnePromptSnippetPromptSnippetsMessages$outboundSchema` instead. */
  export const outboundSchema =
    FindOnePromptSnippetPromptSnippetsMessages$outboundSchema;
  /** @deprecated use `FindOnePromptSnippetPromptSnippetsMessages$Outbound` instead. */
  export type Outbound = FindOnePromptSnippetPromptSnippetsMessages$Outbound;
}

export function findOnePromptSnippetPromptSnippetsMessagesToJSON(
  findOnePromptSnippetPromptSnippetsMessages:
    FindOnePromptSnippetPromptSnippetsMessages,
): string {
  return JSON.stringify(
    FindOnePromptSnippetPromptSnippetsMessages$outboundSchema.parse(
      findOnePromptSnippetPromptSnippetsMessages,
    ),
  );
}

export function findOnePromptSnippetPromptSnippetsMessagesFromJSON(
  jsonString: string,
): SafeParseResult<
  FindOnePromptSnippetPromptSnippetsMessages,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      FindOnePromptSnippetPromptSnippetsMessages$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'FindOnePromptSnippetPromptSnippetsMessages' from JSON`,
  );
}

/** @internal */
export const FindOnePromptSnippetPromptSnippetsPromptConfig$inboundSchema:
  z.ZodType<
    FindOnePromptSnippetPromptSnippetsPromptConfig,
    z.ZodTypeDef,
    unknown
  > = z.object({
    stream: z.boolean().optional(),
    model: z.string().optional(),
    model_db_id: z.string().optional(),
    model_type: FindOnePromptSnippetPromptSnippetsModelType$inboundSchema
      .optional(),
    model_parameters: z.lazy(() =>
      FindOnePromptSnippetPromptSnippetsModelParameters$inboundSchema
    ).optional(),
    provider: FindOnePromptSnippetPromptSnippetsProvider$inboundSchema
      .optional(),
    integration_id: z.nullable(z.string()).optional(),
    version: z.string().optional(),
    messages: z.array(
      z.lazy(() => FindOnePromptSnippetPromptSnippetsMessages$inboundSchema),
    ),
  }).transform((v) => {
    return remap$(v, {
      "model_db_id": "modelDbId",
      "model_type": "modelType",
      "model_parameters": "modelParameters",
      "integration_id": "integrationId",
    });
  });

/** @internal */
export type FindOnePromptSnippetPromptSnippetsPromptConfig$Outbound = {
  stream?: boolean | undefined;
  model?: string | undefined;
  model_db_id?: string | undefined;
  model_type?: string | undefined;
  model_parameters?:
    | FindOnePromptSnippetPromptSnippetsModelParameters$Outbound
    | undefined;
  provider?: string | undefined;
  integration_id?: string | null | undefined;
  version?: string | undefined;
  messages: Array<FindOnePromptSnippetPromptSnippetsMessages$Outbound>;
};

/** @internal */
export const FindOnePromptSnippetPromptSnippetsPromptConfig$outboundSchema:
  z.ZodType<
    FindOnePromptSnippetPromptSnippetsPromptConfig$Outbound,
    z.ZodTypeDef,
    FindOnePromptSnippetPromptSnippetsPromptConfig
  > = z.object({
    stream: z.boolean().optional(),
    model: z.string().optional(),
    modelDbId: z.string().optional(),
    modelType: FindOnePromptSnippetPromptSnippetsModelType$outboundSchema
      .optional(),
    modelParameters: z.lazy(() =>
      FindOnePromptSnippetPromptSnippetsModelParameters$outboundSchema
    ).optional(),
    provider: FindOnePromptSnippetPromptSnippetsProvider$outboundSchema
      .optional(),
    integrationId: z.nullable(z.string()).optional(),
    version: z.string().optional(),
    messages: z.array(
      z.lazy(() => FindOnePromptSnippetPromptSnippetsMessages$outboundSchema),
    ),
  }).transform((v) => {
    return remap$(v, {
      modelDbId: "model_db_id",
      modelType: "model_type",
      modelParameters: "model_parameters",
      integrationId: "integration_id",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FindOnePromptSnippetPromptSnippetsPromptConfig$ {
  /** @deprecated use `FindOnePromptSnippetPromptSnippetsPromptConfig$inboundSchema` instead. */
  export const inboundSchema =
    FindOnePromptSnippetPromptSnippetsPromptConfig$inboundSchema;
  /** @deprecated use `FindOnePromptSnippetPromptSnippetsPromptConfig$outboundSchema` instead. */
  export const outboundSchema =
    FindOnePromptSnippetPromptSnippetsPromptConfig$outboundSchema;
  /** @deprecated use `FindOnePromptSnippetPromptSnippetsPromptConfig$Outbound` instead. */
  export type Outbound =
    FindOnePromptSnippetPromptSnippetsPromptConfig$Outbound;
}

export function findOnePromptSnippetPromptSnippetsPromptConfigToJSON(
  findOnePromptSnippetPromptSnippetsPromptConfig:
    FindOnePromptSnippetPromptSnippetsPromptConfig,
): string {
  return JSON.stringify(
    FindOnePromptSnippetPromptSnippetsPromptConfig$outboundSchema.parse(
      findOnePromptSnippetPromptSnippetsPromptConfig,
    ),
  );
}

export function findOnePromptSnippetPromptSnippetsPromptConfigFromJSON(
  jsonString: string,
): SafeParseResult<
  FindOnePromptSnippetPromptSnippetsPromptConfig,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      FindOnePromptSnippetPromptSnippetsPromptConfig$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'FindOnePromptSnippetPromptSnippetsPromptConfig' from JSON`,
  );
}

/** @internal */
export const FindOnePromptSnippetPromptSnippetsUseCases$inboundSchema:
  z.ZodNativeEnum<typeof FindOnePromptSnippetPromptSnippetsUseCases> = z
    .nativeEnum(FindOnePromptSnippetPromptSnippetsUseCases);

/** @internal */
export const FindOnePromptSnippetPromptSnippetsUseCases$outboundSchema:
  z.ZodNativeEnum<typeof FindOnePromptSnippetPromptSnippetsUseCases> =
    FindOnePromptSnippetPromptSnippetsUseCases$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FindOnePromptSnippetPromptSnippetsUseCases$ {
  /** @deprecated use `FindOnePromptSnippetPromptSnippetsUseCases$inboundSchema` instead. */
  export const inboundSchema =
    FindOnePromptSnippetPromptSnippetsUseCases$inboundSchema;
  /** @deprecated use `FindOnePromptSnippetPromptSnippetsUseCases$outboundSchema` instead. */
  export const outboundSchema =
    FindOnePromptSnippetPromptSnippetsUseCases$outboundSchema;
}

/** @internal */
export const FindOnePromptSnippetPromptSnippetsLanguage$inboundSchema:
  z.ZodNativeEnum<typeof FindOnePromptSnippetPromptSnippetsLanguage> = z
    .nativeEnum(FindOnePromptSnippetPromptSnippetsLanguage);

/** @internal */
export const FindOnePromptSnippetPromptSnippetsLanguage$outboundSchema:
  z.ZodNativeEnum<typeof FindOnePromptSnippetPromptSnippetsLanguage> =
    FindOnePromptSnippetPromptSnippetsLanguage$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FindOnePromptSnippetPromptSnippetsLanguage$ {
  /** @deprecated use `FindOnePromptSnippetPromptSnippetsLanguage$inboundSchema` instead. */
  export const inboundSchema =
    FindOnePromptSnippetPromptSnippetsLanguage$inboundSchema;
  /** @deprecated use `FindOnePromptSnippetPromptSnippetsLanguage$outboundSchema` instead. */
  export const outboundSchema =
    FindOnePromptSnippetPromptSnippetsLanguage$outboundSchema;
}

/** @internal */
export const FindOnePromptSnippetPromptSnippetsMetadata$inboundSchema:
  z.ZodType<FindOnePromptSnippetPromptSnippetsMetadata, z.ZodTypeDef, unknown> =
    z.object({
      use_cases: z.array(
        FindOnePromptSnippetPromptSnippetsUseCases$inboundSchema,
      ).optional(),
      language: FindOnePromptSnippetPromptSnippetsLanguage$inboundSchema
        .optional(),
    }).transform((v) => {
      return remap$(v, {
        "use_cases": "useCases",
      });
    });

/** @internal */
export type FindOnePromptSnippetPromptSnippetsMetadata$Outbound = {
  use_cases?: Array<string> | undefined;
  language?: string | undefined;
};

/** @internal */
export const FindOnePromptSnippetPromptSnippetsMetadata$outboundSchema:
  z.ZodType<
    FindOnePromptSnippetPromptSnippetsMetadata$Outbound,
    z.ZodTypeDef,
    FindOnePromptSnippetPromptSnippetsMetadata
  > = z.object({
    useCases: z.array(FindOnePromptSnippetPromptSnippetsUseCases$outboundSchema)
      .optional(),
    language: FindOnePromptSnippetPromptSnippetsLanguage$outboundSchema
      .optional(),
  }).transform((v) => {
    return remap$(v, {
      useCases: "use_cases",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FindOnePromptSnippetPromptSnippetsMetadata$ {
  /** @deprecated use `FindOnePromptSnippetPromptSnippetsMetadata$inboundSchema` instead. */
  export const inboundSchema =
    FindOnePromptSnippetPromptSnippetsMetadata$inboundSchema;
  /** @deprecated use `FindOnePromptSnippetPromptSnippetsMetadata$outboundSchema` instead. */
  export const outboundSchema =
    FindOnePromptSnippetPromptSnippetsMetadata$outboundSchema;
  /** @deprecated use `FindOnePromptSnippetPromptSnippetsMetadata$Outbound` instead. */
  export type Outbound = FindOnePromptSnippetPromptSnippetsMetadata$Outbound;
}

export function findOnePromptSnippetPromptSnippetsMetadataToJSON(
  findOnePromptSnippetPromptSnippetsMetadata:
    FindOnePromptSnippetPromptSnippetsMetadata,
): string {
  return JSON.stringify(
    FindOnePromptSnippetPromptSnippetsMetadata$outboundSchema.parse(
      findOnePromptSnippetPromptSnippetsMetadata,
    ),
  );
}

export function findOnePromptSnippetPromptSnippetsMetadataFromJSON(
  jsonString: string,
): SafeParseResult<
  FindOnePromptSnippetPromptSnippetsMetadata,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      FindOnePromptSnippetPromptSnippetsMetadata$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'FindOnePromptSnippetPromptSnippetsMetadata' from JSON`,
  );
}

/** @internal */
export const FindOnePromptSnippetVersions$inboundSchema: z.ZodType<
  FindOnePromptSnippetVersions,
  z.ZodTypeDef,
  unknown
> = z.object({
  _id: z.string(),
  display_name: z.string(),
  description: z.nullable(z.string()).optional(),
  prompt_config: z.lazy(() =>
    FindOnePromptSnippetPromptSnippetsPromptConfig$inboundSchema
  ),
  metadata: z.lazy(() =>
    FindOnePromptSnippetPromptSnippetsMetadata$inboundSchema
  ),
  created_by_id: z.string(),
  updated_by_id: z.string(),
  timestamp: z.string(),
}).transform((v) => {
  return remap$(v, {
    "_id": "id",
    "display_name": "displayName",
    "prompt_config": "promptConfig",
    "created_by_id": "createdById",
    "updated_by_id": "updatedById",
  });
});

/** @internal */
export type FindOnePromptSnippetVersions$Outbound = {
  _id: string;
  display_name: string;
  description?: string | null | undefined;
  prompt_config: FindOnePromptSnippetPromptSnippetsPromptConfig$Outbound;
  metadata: FindOnePromptSnippetPromptSnippetsMetadata$Outbound;
  created_by_id: string;
  updated_by_id: string;
  timestamp: string;
};

/** @internal */
export const FindOnePromptSnippetVersions$outboundSchema: z.ZodType<
  FindOnePromptSnippetVersions$Outbound,
  z.ZodTypeDef,
  FindOnePromptSnippetVersions
> = z.object({
  id: z.string(),
  displayName: z.string(),
  description: z.nullable(z.string()).optional(),
  promptConfig: z.lazy(() =>
    FindOnePromptSnippetPromptSnippetsPromptConfig$outboundSchema
  ),
  metadata: z.lazy(() =>
    FindOnePromptSnippetPromptSnippetsMetadata$outboundSchema
  ),
  createdById: z.string(),
  updatedById: z.string(),
  timestamp: z.string(),
}).transform((v) => {
  return remap$(v, {
    id: "_id",
    displayName: "display_name",
    promptConfig: "prompt_config",
    createdById: "created_by_id",
    updatedById: "updated_by_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FindOnePromptSnippetVersions$ {
  /** @deprecated use `FindOnePromptSnippetVersions$inboundSchema` instead. */
  export const inboundSchema = FindOnePromptSnippetVersions$inboundSchema;
  /** @deprecated use `FindOnePromptSnippetVersions$outboundSchema` instead. */
  export const outboundSchema = FindOnePromptSnippetVersions$outboundSchema;
  /** @deprecated use `FindOnePromptSnippetVersions$Outbound` instead. */
  export type Outbound = FindOnePromptSnippetVersions$Outbound;
}

export function findOnePromptSnippetVersionsToJSON(
  findOnePromptSnippetVersions: FindOnePromptSnippetVersions,
): string {
  return JSON.stringify(
    FindOnePromptSnippetVersions$outboundSchema.parse(
      findOnePromptSnippetVersions,
    ),
  );
}

export function findOnePromptSnippetVersionsFromJSON(
  jsonString: string,
): SafeParseResult<FindOnePromptSnippetVersions, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => FindOnePromptSnippetVersions$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'FindOnePromptSnippetVersions' from JSON`,
  );
}

/** @internal */
export const FindOnePromptSnippetResponseBody$inboundSchema: z.ZodType<
  FindOnePromptSnippetResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  _id: z.string(),
  owner: z.union([z.string(), FindOnePromptSnippetOwner2$inboundSchema]),
  domain_id: z.string(),
  key: z.string(),
  display_name: z.string(),
  description: z.nullable(z.string()).optional(),
  prompt_config: z.lazy(() => FindOnePromptSnippetPromptConfig$inboundSchema),
  metadata: z.lazy(() => FindOnePromptSnippetMetadata$inboundSchema),
  created_by_id: z.string(),
  updated_by_id: z.string(),
  created: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
  updated: z.string().datetime({ offset: true }).default(
    "2025-02-05T12:50:57.727Z",
  ).transform(v => new Date(v)),
  type: FindOnePromptSnippetType$inboundSchema,
  versions: z.array(z.lazy(() => FindOnePromptSnippetVersions$inboundSchema)),
}).transform((v) => {
  return remap$(v, {
    "_id": "id",
    "domain_id": "domainId",
    "display_name": "displayName",
    "prompt_config": "promptConfig",
    "created_by_id": "createdById",
    "updated_by_id": "updatedById",
  });
});

/** @internal */
export type FindOnePromptSnippetResponseBody$Outbound = {
  _id: string;
  owner: string | string;
  domain_id: string;
  key: string;
  display_name: string;
  description?: string | null | undefined;
  prompt_config: FindOnePromptSnippetPromptConfig$Outbound;
  metadata: FindOnePromptSnippetMetadata$Outbound;
  created_by_id: string;
  updated_by_id: string;
  created?: string | undefined;
  updated: string;
  type: string;
  versions: Array<FindOnePromptSnippetVersions$Outbound>;
};

/** @internal */
export const FindOnePromptSnippetResponseBody$outboundSchema: z.ZodType<
  FindOnePromptSnippetResponseBody$Outbound,
  z.ZodTypeDef,
  FindOnePromptSnippetResponseBody
> = z.object({
  id: z.string(),
  owner: z.union([z.string(), FindOnePromptSnippetOwner2$outboundSchema]),
  domainId: z.string(),
  key: z.string(),
  displayName: z.string(),
  description: z.nullable(z.string()).optional(),
  promptConfig: z.lazy(() => FindOnePromptSnippetPromptConfig$outboundSchema),
  metadata: z.lazy(() => FindOnePromptSnippetMetadata$outboundSchema),
  createdById: z.string(),
  updatedById: z.string(),
  created: z.date().transform(v => v.toISOString()).optional(),
  updated: z.date().default(() => new Date("2025-02-05T12:50:57.727Z"))
    .transform(v => v.toISOString()),
  type: FindOnePromptSnippetType$outboundSchema,
  versions: z.array(z.lazy(() => FindOnePromptSnippetVersions$outboundSchema)),
}).transform((v) => {
  return remap$(v, {
    id: "_id",
    domainId: "domain_id",
    displayName: "display_name",
    promptConfig: "prompt_config",
    createdById: "created_by_id",
    updatedById: "updated_by_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FindOnePromptSnippetResponseBody$ {
  /** @deprecated use `FindOnePromptSnippetResponseBody$inboundSchema` instead. */
  export const inboundSchema = FindOnePromptSnippetResponseBody$inboundSchema;
  /** @deprecated use `FindOnePromptSnippetResponseBody$outboundSchema` instead. */
  export const outboundSchema = FindOnePromptSnippetResponseBody$outboundSchema;
  /** @deprecated use `FindOnePromptSnippetResponseBody$Outbound` instead. */
  export type Outbound = FindOnePromptSnippetResponseBody$Outbound;
}

export function findOnePromptSnippetResponseBodyToJSON(
  findOnePromptSnippetResponseBody: FindOnePromptSnippetResponseBody,
): string {
  return JSON.stringify(
    FindOnePromptSnippetResponseBody$outboundSchema.parse(
      findOnePromptSnippetResponseBody,
    ),
  );
}

export function findOnePromptSnippetResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<FindOnePromptSnippetResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => FindOnePromptSnippetResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'FindOnePromptSnippetResponseBody' from JSON`,
  );
}
