/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type DeleteDatapointRequest = {
  datasetId: string;
  datapointId: string;
};

/** @internal */
export const DeleteDatapointRequest$inboundSchema: z.ZodType<
  DeleteDatapointRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  dataset_id: z.string(),
  datapoint_id: z.string(),
}).transform((v) => {
  return remap$(v, {
    "dataset_id": "datasetId",
    "datapoint_id": "datapointId",
  });
});

/** @internal */
export type DeleteDatapointRequest$Outbound = {
  dataset_id: string;
  datapoint_id: string;
};

/** @internal */
export const DeleteDatapointRequest$outboundSchema: z.ZodType<
  DeleteDatapointRequest$Outbound,
  z.ZodTypeDef,
  DeleteDatapointRequest
> = z.object({
  datasetId: z.string(),
  datapointId: z.string(),
}).transform((v) => {
  return remap$(v, {
    datasetId: "dataset_id",
    datapointId: "datapoint_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeleteDatapointRequest$ {
  /** @deprecated use `DeleteDatapointRequest$inboundSchema` instead. */
  export const inboundSchema = DeleteDatapointRequest$inboundSchema;
  /** @deprecated use `DeleteDatapointRequest$outboundSchema` instead. */
  export const outboundSchema = DeleteDatapointRequest$outboundSchema;
  /** @deprecated use `DeleteDatapointRequest$Outbound` instead. */
  export type Outbound = DeleteDatapointRequest$Outbound;
}

export function deleteDatapointRequestToJSON(
  deleteDatapointRequest: DeleteDatapointRequest,
): string {
  return JSON.stringify(
    DeleteDatapointRequest$outboundSchema.parse(deleteDatapointRequest),
  );
}

export function deleteDatapointRequestFromJSON(
  jsonString: string,
): SafeParseResult<DeleteDatapointRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DeleteDatapointRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DeleteDatapointRequest' from JSON`,
  );
}
