/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * The status of the tool. `Live` is the latest version of the tool. `Draft` is a version that is not yet published. `Pending` is a version that is pending approval. `Published` is a version that was live and has been replaced by a new version.
 */
export const UpdateToolRequestBodyToolsRequestStatus = {
  Live: "live",
  Draft: "draft",
  Pending: "pending",
  Published: "published",
} as const;
/**
 * The status of the tool. `Live` is the latest version of the tool. `Draft` is a version that is not yet published. `Pending` is a version that is pending approval. `Published` is a version that was live and has been replaced by a new version.
 */
export type UpdateToolRequestBodyToolsRequestStatus = ClosedEnum<
  typeof UpdateToolRequestBodyToolsRequestStatus
>;

export const UpdateToolRequestBodyToolsRequestType = {
  OrqHttp: "orq_http",
} as const;
export type UpdateToolRequestBodyToolsRequestType = ClosedEnum<
  typeof UpdateToolRequestBodyToolsRequestType
>;

/**
 * The HTTP method to use.
 */
export const RequestBodyMethod = {
  Get: "GET",
  Post: "POST",
  Put: "PUT",
  Delete: "DELETE",
} as const;
/**
 * The HTTP method to use.
 */
export type RequestBodyMethod = ClosedEnum<typeof RequestBodyMethod>;

/**
 * The blueprint for the HTTP request. The `arguments` field will be used to replace the placeholders in the `url`, `headers`, `body`, and `arguments` fields.
 */
export type RequestBodyBlueprint = {
  /**
   * The URL to send the request to.
   */
  url: string;
  /**
   * The HTTP method to use.
   */
  method: RequestBodyMethod;
  /**
   * The headers to send with the request.
   */
  headers?: { [k: string]: string } | undefined;
  /**
   * The body to send with the request.
   */
  body?: { [k: string]: any } | undefined;
};

/**
 * The type of the argument.
 */
export const UpdateToolRequestBodyToolsRequest3Type = {
  String: "string",
  Number: "number",
  Boolean: "boolean",
} as const;
/**
 * The type of the argument.
 */
export type UpdateToolRequestBodyToolsRequest3Type = ClosedEnum<
  typeof UpdateToolRequestBodyToolsRequest3Type
>;

/**
 * The default value of the argument.
 */
export type RequestBodyDefaultValue = string | number | boolean;

export type RequestBodyArguments = {
  /**
   * The type of the argument.
   */
  type: UpdateToolRequestBodyToolsRequest3Type;
  /**
   * A description of the argument.
   */
  description: string;
  /**
   * Whether to send the argument to the model. If set to false, the argument will not be sent to the model and needs to be provided by the user or it will be left blank.
   */
  sendToModel?: boolean | undefined;
  /**
   * The default value of the argument.
   */
  defaultValue?: string | number | boolean | undefined;
};

export type RequestBodyHttp = {
  /**
   * The blueprint for the HTTP request. The `arguments` field will be used to replace the placeholders in the `url`, `headers`, `body`, and `arguments` fields.
   */
  blueprint: RequestBodyBlueprint;
  /**
   * The arguments to send with the request. The keys will be used to replace the placeholders in the `blueprint` field.
   */
  arguments?: { [k: string]: RequestBodyArguments } | undefined;
};

export type UpdateToolRequestBody3 = {
  /**
   * The path where the entity is stored in the project structure. The first element of the path always represents the project name. Any subsequent path element after the project will be created as a folder in the project if it does not exists.
   */
  path?: string | undefined;
  /**
   * A description of the tool, used by the model to choose when and how to call the tool. We do recommend using the `description` field as accurate as possible to give enough context to the model to make the right decision.
   */
  description?: string | undefined;
  /**
   * The status of the tool. `Live` is the latest version of the tool. `Draft` is a version that is not yet published. `Pending` is a version that is pending approval. `Published` is a version that was live and has been replaced by a new version.
   */
  status: UpdateToolRequestBodyToolsRequestStatus;
  versionHash: string;
  type: UpdateToolRequestBodyToolsRequestType;
  http?: RequestBodyHttp | undefined;
};

/**
 * The status of the tool. `Live` is the latest version of the tool. `Draft` is a version that is not yet published. `Pending` is a version that is pending approval. `Published` is a version that was live and has been replaced by a new version.
 */
export const UpdateToolRequestBodyToolsStatus = {
  Live: "live",
  Draft: "draft",
  Pending: "pending",
  Published: "published",
} as const;
/**
 * The status of the tool. `Live` is the latest version of the tool. `Draft` is a version that is not yet published. `Pending` is a version that is pending approval. `Published` is a version that was live and has been replaced by a new version.
 */
export type UpdateToolRequestBodyToolsStatus = ClosedEnum<
  typeof UpdateToolRequestBodyToolsStatus
>;

export const UpdateToolRequestBodyToolsType = {
  JsonSchema: "json_schema",
} as const;
export type UpdateToolRequestBodyToolsType = ClosedEnum<
  typeof UpdateToolRequestBodyToolsType
>;

export type UpdateToolRequestBodyJsonSchema = {
  /**
   * The name of the response format. Must be a-z, A-Z, 0-9, or contain underscores and dashes, with a maximum length of 64.
   */
  name: string;
  /**
   * A description of what the response format is for. This will be shown to the user.
   */
  description?: string | undefined;
  /**
   * The schema for the response format, described as a JSON Schema object. See the [JSON Schema reference](https://json-schema.org/understanding-json-schema/) for documentation about the format.
   */
  schema: { [k: string]: any };
  /**
   * Whether to enable strict schema adherence when generating the output. If set to true, the model will always follow the exact schema defined in the `schema` field. Only a subset of JSON Schema is supported when `strict` is `true`. Only compatible with `OpenAI` models.
   */
  strict?: boolean | null | undefined;
};

export type UpdateToolRequestBody2 = {
  /**
   * The path where the entity is stored in the project structure. The first element of the path always represents the project name. Any subsequent path element after the project will be created as a folder in the project if it does not exists.
   */
  path?: string | undefined;
  /**
   * A description of the tool, used by the model to choose when and how to call the tool. We do recommend using the `description` field as accurate as possible to give enough context to the model to make the right decision.
   */
  description?: string | undefined;
  /**
   * The status of the tool. `Live` is the latest version of the tool. `Draft` is a version that is not yet published. `Pending` is a version that is pending approval. `Published` is a version that was live and has been replaced by a new version.
   */
  status: UpdateToolRequestBodyToolsStatus;
  versionHash: string;
  type: UpdateToolRequestBodyToolsType;
  jsonSchema?: UpdateToolRequestBodyJsonSchema | undefined;
};

/**
 * The status of the tool. `Live` is the latest version of the tool. `Draft` is a version that is not yet published. `Pending` is a version that is pending approval. `Published` is a version that was live and has been replaced by a new version.
 */
export const UpdateToolRequestBodyStatus = {
  Live: "live",
  Draft: "draft",
  Pending: "pending",
  Published: "published",
} as const;
/**
 * The status of the tool. `Live` is the latest version of the tool. `Draft` is a version that is not yet published. `Pending` is a version that is pending approval. `Published` is a version that was live and has been replaced by a new version.
 */
export type UpdateToolRequestBodyStatus = ClosedEnum<
  typeof UpdateToolRequestBodyStatus
>;

export const UpdateToolRequestBodyType = {
  Function: "function",
} as const;
export type UpdateToolRequestBodyType = ClosedEnum<
  typeof UpdateToolRequestBodyType
>;

export type UpdateToolRequestBodyFunction = {
  /**
   * The name of the function to be called. Must be a-z, A-Z, 0-9, or contain underscores and dashes, with a maximum length of 64.
   */
  name: string;
  /**
   * A description of what the function does, used by the model to choose when and how to call the function.
   */
  description?: string | undefined;
  /**
   * Whether to enable strict schema adherence when generating the function call. If set to true, the model will follow the exact schema defined in the `parameters` field. Only a subset of JSON Schema is supported when `strict` is `true`. Currently only compatible with `OpenAI` models.
   */
  strict?: boolean | undefined;
  /**
   * The parameters the functions accepts, described as a JSON Schema object. See the `OpenAI` [guide](https://platform.openai.com/docs/guides/function-calling) for examples, and the [JSON Schema reference](https://json-schema.org/understanding-json-schema/) for documentation about the format.
   */
  parameters?: { [k: string]: any } | undefined;
};

export type UpdateToolRequestBody1 = {
  /**
   * The path where the entity is stored in the project structure. The first element of the path always represents the project name. Any subsequent path element after the project will be created as a folder in the project if it does not exists.
   */
  path?: string | undefined;
  /**
   * A description of the tool, used by the model to choose when and how to call the tool. We do recommend using the `description` field as accurate as possible to give enough context to the model to make the right decision.
   */
  description?: string | undefined;
  /**
   * The status of the tool. `Live` is the latest version of the tool. `Draft` is a version that is not yet published. `Pending` is a version that is pending approval. `Published` is a version that was live and has been replaced by a new version.
   */
  status: UpdateToolRequestBodyStatus;
  versionHash: string;
  type: UpdateToolRequestBodyType;
  function?: UpdateToolRequestBodyFunction | undefined;
};

/**
 * The tool to update
 */
export type UpdateToolRequestBody =
  | UpdateToolRequestBody1
  | UpdateToolRequestBody2
  | UpdateToolRequestBody3;

export type UpdateToolRequest = {
  toolKey: string;
  /**
   * The tool to update
   */
  requestBody?:
    | UpdateToolRequestBody1
    | UpdateToolRequestBody2
    | UpdateToolRequestBody3
    | undefined;
};

/**
 * The status of the tool. `Live` is the latest version of the tool. `Draft` is a version that is not yet published. `Pending` is a version that is pending approval. `Published` is a version that was live and has been replaced by a new version.
 */
export const UpdateToolResponseBodyToolsResponseStatus = {
  Live: "live",
  Draft: "draft",
  Pending: "pending",
  Published: "published",
} as const;
/**
 * The status of the tool. `Live` is the latest version of the tool. `Draft` is a version that is not yet published. `Pending` is a version that is pending approval. `Published` is a version that was live and has been replaced by a new version.
 */
export type UpdateToolResponseBodyToolsResponseStatus = ClosedEnum<
  typeof UpdateToolResponseBodyToolsResponseStatus
>;

export const UpdateToolResponseBodyToolsResponseType = {
  OrqHttp: "orq_http",
} as const;
export type UpdateToolResponseBodyToolsResponseType = ClosedEnum<
  typeof UpdateToolResponseBodyToolsResponseType
>;

/**
 * The HTTP method to use.
 */
export const UpdateToolResponseBodyMethod = {
  Get: "GET",
  Post: "POST",
  Put: "PUT",
  Delete: "DELETE",
} as const;
/**
 * The HTTP method to use.
 */
export type UpdateToolResponseBodyMethod = ClosedEnum<
  typeof UpdateToolResponseBodyMethod
>;

/**
 * The blueprint for the HTTP request. The `arguments` field will be used to replace the placeholders in the `url`, `headers`, `body`, and `arguments` fields.
 */
export type UpdateToolResponseBodyBlueprint = {
  /**
   * The URL to send the request to.
   */
  url: string;
  /**
   * The HTTP method to use.
   */
  method: UpdateToolResponseBodyMethod;
  /**
   * The headers to send with the request.
   */
  headers?: { [k: string]: string } | undefined;
  /**
   * The body to send with the request.
   */
  body?: { [k: string]: any } | undefined;
};

/**
 * The type of the argument.
 */
export const UpdateToolResponseBodyToolsResponse200Type = {
  String: "string",
  Number: "number",
  Boolean: "boolean",
} as const;
/**
 * The type of the argument.
 */
export type UpdateToolResponseBodyToolsResponse200Type = ClosedEnum<
  typeof UpdateToolResponseBodyToolsResponse200Type
>;

/**
 * The default value of the argument.
 */
export type UpdateToolResponseBodyDefaultValue = string | number | boolean;

export type UpdateToolResponseBodyArguments = {
  /**
   * The type of the argument.
   */
  type: UpdateToolResponseBodyToolsResponse200Type;
  /**
   * A description of the argument.
   */
  description: string;
  /**
   * Whether to send the argument to the model. If set to false, the argument will not be sent to the model and needs to be provided by the user or it will be left blank.
   */
  sendToModel?: boolean | undefined;
  /**
   * The default value of the argument.
   */
  defaultValue?: string | number | boolean | undefined;
};

export type UpdateToolResponseBodyHttp = {
  /**
   * The blueprint for the HTTP request. The `arguments` field will be used to replace the placeholders in the `url`, `headers`, `body`, and `arguments` fields.
   */
  blueprint: UpdateToolResponseBodyBlueprint;
  /**
   * The arguments to send with the request. The keys will be used to replace the placeholders in the `blueprint` field.
   */
  arguments?: { [k: string]: UpdateToolResponseBodyArguments } | undefined;
};

export type UpdateToolResponseBody3 = {
  id?: string | undefined;
  /**
   * The path where the entity is stored in the project structure. The first element of the path always represents the project name. Any subsequent path element after the project will be created as a folder in the project if it does not exists.
   */
  path: string;
  /**
   * Unique key of the tool as it will be displayed in the UI
   */
  key: string;
  /**
   * A description of the tool, used by the model to choose when and how to call the tool. We do recommend using the `description` field as accurate as possible to give enough context to the model to make the right decision.
   */
  description: string;
  /**
   * The id of the user that created the tool
   */
  createdById?: string | undefined;
  /**
   * The id of the user that last updated the tool
   */
  updatedById?: string | undefined;
  projectId: string;
  workspaceId: string;
  created: string;
  updated: string;
  /**
   * The status of the tool. `Live` is the latest version of the tool. `Draft` is a version that is not yet published. `Pending` is a version that is pending approval. `Published` is a version that was live and has been replaced by a new version.
   */
  status: UpdateToolResponseBodyToolsResponseStatus;
  versionHash: string;
  type: UpdateToolResponseBodyToolsResponseType;
  http: UpdateToolResponseBodyHttp;
};

/**
 * The status of the tool. `Live` is the latest version of the tool. `Draft` is a version that is not yet published. `Pending` is a version that is pending approval. `Published` is a version that was live and has been replaced by a new version.
 */
export const UpdateToolResponseBodyToolsStatus = {
  Live: "live",
  Draft: "draft",
  Pending: "pending",
  Published: "published",
} as const;
/**
 * The status of the tool. `Live` is the latest version of the tool. `Draft` is a version that is not yet published. `Pending` is a version that is pending approval. `Published` is a version that was live and has been replaced by a new version.
 */
export type UpdateToolResponseBodyToolsStatus = ClosedEnum<
  typeof UpdateToolResponseBodyToolsStatus
>;

export const UpdateToolResponseBodyToolsType = {
  JsonSchema: "json_schema",
} as const;
export type UpdateToolResponseBodyToolsType = ClosedEnum<
  typeof UpdateToolResponseBodyToolsType
>;

export type UpdateToolResponseBodyJsonSchema = {
  /**
   * The name of the response format. Must be a-z, A-Z, 0-9, or contain underscores and dashes, with a maximum length of 64.
   */
  name: string;
  /**
   * A description of what the response format is for. This will be shown to the user.
   */
  description?: string | undefined;
  /**
   * The schema for the response format, described as a JSON Schema object. See the [JSON Schema reference](https://json-schema.org/understanding-json-schema/) for documentation about the format.
   */
  schema: { [k: string]: any };
  /**
   * Whether to enable strict schema adherence when generating the output. If set to true, the model will always follow the exact schema defined in the `schema` field. Only a subset of JSON Schema is supported when `strict` is `true`. Only compatible with `OpenAI` models.
   */
  strict?: boolean | null | undefined;
};

export type UpdateToolResponseBody2 = {
  id?: string | undefined;
  /**
   * The path where the entity is stored in the project structure. The first element of the path always represents the project name. Any subsequent path element after the project will be created as a folder in the project if it does not exists.
   */
  path: string;
  /**
   * Unique key of the tool as it will be displayed in the UI
   */
  key: string;
  /**
   * A description of the tool, used by the model to choose when and how to call the tool. We do recommend using the `description` field as accurate as possible to give enough context to the model to make the right decision.
   */
  description: string;
  /**
   * The id of the user that created the tool
   */
  createdById?: string | undefined;
  /**
   * The id of the user that last updated the tool
   */
  updatedById?: string | undefined;
  projectId: string;
  workspaceId: string;
  created: string;
  updated: string;
  /**
   * The status of the tool. `Live` is the latest version of the tool. `Draft` is a version that is not yet published. `Pending` is a version that is pending approval. `Published` is a version that was live and has been replaced by a new version.
   */
  status: UpdateToolResponseBodyToolsStatus;
  versionHash: string;
  type: UpdateToolResponseBodyToolsType;
  jsonSchema: UpdateToolResponseBodyJsonSchema;
};

/**
 * The status of the tool. `Live` is the latest version of the tool. `Draft` is a version that is not yet published. `Pending` is a version that is pending approval. `Published` is a version that was live and has been replaced by a new version.
 */
export const UpdateToolResponseBodyStatus = {
  Live: "live",
  Draft: "draft",
  Pending: "pending",
  Published: "published",
} as const;
/**
 * The status of the tool. `Live` is the latest version of the tool. `Draft` is a version that is not yet published. `Pending` is a version that is pending approval. `Published` is a version that was live and has been replaced by a new version.
 */
export type UpdateToolResponseBodyStatus = ClosedEnum<
  typeof UpdateToolResponseBodyStatus
>;

export const UpdateToolResponseBodyType = {
  Function: "function",
} as const;
export type UpdateToolResponseBodyType = ClosedEnum<
  typeof UpdateToolResponseBodyType
>;

export type UpdateToolResponseBodyFunction = {
  /**
   * The name of the function to be called. Must be a-z, A-Z, 0-9, or contain underscores and dashes, with a maximum length of 64.
   */
  name: string;
  /**
   * A description of what the function does, used by the model to choose when and how to call the function.
   */
  description?: string | undefined;
  /**
   * Whether to enable strict schema adherence when generating the function call. If set to true, the model will follow the exact schema defined in the `parameters` field. Only a subset of JSON Schema is supported when `strict` is `true`. Currently only compatible with `OpenAI` models.
   */
  strict?: boolean | undefined;
  /**
   * The parameters the functions accepts, described as a JSON Schema object. See the `OpenAI` [guide](https://platform.openai.com/docs/guides/function-calling) for examples, and the [JSON Schema reference](https://json-schema.org/understanding-json-schema/) for documentation about the format.
   */
  parameters?: { [k: string]: any } | undefined;
};

export type UpdateToolResponseBody1 = {
  id?: string | undefined;
  /**
   * The path where the entity is stored in the project structure. The first element of the path always represents the project name. Any subsequent path element after the project will be created as a folder in the project if it does not exists.
   */
  path: string;
  /**
   * Unique key of the tool as it will be displayed in the UI
   */
  key: string;
  /**
   * A description of the tool, used by the model to choose when and how to call the tool. We do recommend using the `description` field as accurate as possible to give enough context to the model to make the right decision.
   */
  description: string;
  /**
   * The id of the user that created the tool
   */
  createdById?: string | undefined;
  /**
   * The id of the user that last updated the tool
   */
  updatedById?: string | undefined;
  projectId: string;
  workspaceId: string;
  created: string;
  updated: string;
  /**
   * The status of the tool. `Live` is the latest version of the tool. `Draft` is a version that is not yet published. `Pending` is a version that is pending approval. `Published` is a version that was live and has been replaced by a new version.
   */
  status: UpdateToolResponseBodyStatus;
  versionHash: string;
  type: UpdateToolResponseBodyType;
  function: UpdateToolResponseBodyFunction;
};

/**
 * Successfully created the tool.
 */
export type UpdateToolResponseBody =
  | UpdateToolResponseBody1
  | UpdateToolResponseBody2
  | UpdateToolResponseBody3;

/** @internal */
export const UpdateToolRequestBodyToolsRequestStatus$inboundSchema:
  z.ZodNativeEnum<typeof UpdateToolRequestBodyToolsRequestStatus> = z
    .nativeEnum(UpdateToolRequestBodyToolsRequestStatus);

/** @internal */
export const UpdateToolRequestBodyToolsRequestStatus$outboundSchema:
  z.ZodNativeEnum<typeof UpdateToolRequestBodyToolsRequestStatus> =
    UpdateToolRequestBodyToolsRequestStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateToolRequestBodyToolsRequestStatus$ {
  /** @deprecated use `UpdateToolRequestBodyToolsRequestStatus$inboundSchema` instead. */
  export const inboundSchema =
    UpdateToolRequestBodyToolsRequestStatus$inboundSchema;
  /** @deprecated use `UpdateToolRequestBodyToolsRequestStatus$outboundSchema` instead. */
  export const outboundSchema =
    UpdateToolRequestBodyToolsRequestStatus$outboundSchema;
}

/** @internal */
export const UpdateToolRequestBodyToolsRequestType$inboundSchema:
  z.ZodNativeEnum<typeof UpdateToolRequestBodyToolsRequestType> = z.nativeEnum(
    UpdateToolRequestBodyToolsRequestType,
  );

/** @internal */
export const UpdateToolRequestBodyToolsRequestType$outboundSchema:
  z.ZodNativeEnum<typeof UpdateToolRequestBodyToolsRequestType> =
    UpdateToolRequestBodyToolsRequestType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateToolRequestBodyToolsRequestType$ {
  /** @deprecated use `UpdateToolRequestBodyToolsRequestType$inboundSchema` instead. */
  export const inboundSchema =
    UpdateToolRequestBodyToolsRequestType$inboundSchema;
  /** @deprecated use `UpdateToolRequestBodyToolsRequestType$outboundSchema` instead. */
  export const outboundSchema =
    UpdateToolRequestBodyToolsRequestType$outboundSchema;
}

/** @internal */
export const RequestBodyMethod$inboundSchema: z.ZodNativeEnum<
  typeof RequestBodyMethod
> = z.nativeEnum(RequestBodyMethod);

/** @internal */
export const RequestBodyMethod$outboundSchema: z.ZodNativeEnum<
  typeof RequestBodyMethod
> = RequestBodyMethod$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RequestBodyMethod$ {
  /** @deprecated use `RequestBodyMethod$inboundSchema` instead. */
  export const inboundSchema = RequestBodyMethod$inboundSchema;
  /** @deprecated use `RequestBodyMethod$outboundSchema` instead. */
  export const outboundSchema = RequestBodyMethod$outboundSchema;
}

/** @internal */
export const RequestBodyBlueprint$inboundSchema: z.ZodType<
  RequestBodyBlueprint,
  z.ZodTypeDef,
  unknown
> = z.object({
  url: z.string(),
  method: RequestBodyMethod$inboundSchema,
  headers: z.record(z.string()).optional(),
  body: z.record(z.any()).optional(),
});

/** @internal */
export type RequestBodyBlueprint$Outbound = {
  url: string;
  method: string;
  headers?: { [k: string]: string } | undefined;
  body?: { [k: string]: any } | undefined;
};

/** @internal */
export const RequestBodyBlueprint$outboundSchema: z.ZodType<
  RequestBodyBlueprint$Outbound,
  z.ZodTypeDef,
  RequestBodyBlueprint
> = z.object({
  url: z.string(),
  method: RequestBodyMethod$outboundSchema,
  headers: z.record(z.string()).optional(),
  body: z.record(z.any()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RequestBodyBlueprint$ {
  /** @deprecated use `RequestBodyBlueprint$inboundSchema` instead. */
  export const inboundSchema = RequestBodyBlueprint$inboundSchema;
  /** @deprecated use `RequestBodyBlueprint$outboundSchema` instead. */
  export const outboundSchema = RequestBodyBlueprint$outboundSchema;
  /** @deprecated use `RequestBodyBlueprint$Outbound` instead. */
  export type Outbound = RequestBodyBlueprint$Outbound;
}

export function requestBodyBlueprintToJSON(
  requestBodyBlueprint: RequestBodyBlueprint,
): string {
  return JSON.stringify(
    RequestBodyBlueprint$outboundSchema.parse(requestBodyBlueprint),
  );
}

export function requestBodyBlueprintFromJSON(
  jsonString: string,
): SafeParseResult<RequestBodyBlueprint, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => RequestBodyBlueprint$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RequestBodyBlueprint' from JSON`,
  );
}

/** @internal */
export const UpdateToolRequestBodyToolsRequest3Type$inboundSchema:
  z.ZodNativeEnum<typeof UpdateToolRequestBodyToolsRequest3Type> = z.nativeEnum(
    UpdateToolRequestBodyToolsRequest3Type,
  );

/** @internal */
export const UpdateToolRequestBodyToolsRequest3Type$outboundSchema:
  z.ZodNativeEnum<typeof UpdateToolRequestBodyToolsRequest3Type> =
    UpdateToolRequestBodyToolsRequest3Type$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateToolRequestBodyToolsRequest3Type$ {
  /** @deprecated use `UpdateToolRequestBodyToolsRequest3Type$inboundSchema` instead. */
  export const inboundSchema =
    UpdateToolRequestBodyToolsRequest3Type$inboundSchema;
  /** @deprecated use `UpdateToolRequestBodyToolsRequest3Type$outboundSchema` instead. */
  export const outboundSchema =
    UpdateToolRequestBodyToolsRequest3Type$outboundSchema;
}

/** @internal */
export const RequestBodyDefaultValue$inboundSchema: z.ZodType<
  RequestBodyDefaultValue,
  z.ZodTypeDef,
  unknown
> = z.union([z.string(), z.number(), z.boolean()]);

/** @internal */
export type RequestBodyDefaultValue$Outbound = string | number | boolean;

/** @internal */
export const RequestBodyDefaultValue$outboundSchema: z.ZodType<
  RequestBodyDefaultValue$Outbound,
  z.ZodTypeDef,
  RequestBodyDefaultValue
> = z.union([z.string(), z.number(), z.boolean()]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RequestBodyDefaultValue$ {
  /** @deprecated use `RequestBodyDefaultValue$inboundSchema` instead. */
  export const inboundSchema = RequestBodyDefaultValue$inboundSchema;
  /** @deprecated use `RequestBodyDefaultValue$outboundSchema` instead. */
  export const outboundSchema = RequestBodyDefaultValue$outboundSchema;
  /** @deprecated use `RequestBodyDefaultValue$Outbound` instead. */
  export type Outbound = RequestBodyDefaultValue$Outbound;
}

export function requestBodyDefaultValueToJSON(
  requestBodyDefaultValue: RequestBodyDefaultValue,
): string {
  return JSON.stringify(
    RequestBodyDefaultValue$outboundSchema.parse(requestBodyDefaultValue),
  );
}

export function requestBodyDefaultValueFromJSON(
  jsonString: string,
): SafeParseResult<RequestBodyDefaultValue, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => RequestBodyDefaultValue$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RequestBodyDefaultValue' from JSON`,
  );
}

/** @internal */
export const RequestBodyArguments$inboundSchema: z.ZodType<
  RequestBodyArguments,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: UpdateToolRequestBodyToolsRequest3Type$inboundSchema,
  description: z.string(),
  send_to_model: z.boolean().default(true),
  default_value: z.union([z.string(), z.number(), z.boolean()]).optional(),
}).transform((v) => {
  return remap$(v, {
    "send_to_model": "sendToModel",
    "default_value": "defaultValue",
  });
});

/** @internal */
export type RequestBodyArguments$Outbound = {
  type: string;
  description: string;
  send_to_model: boolean;
  default_value?: string | number | boolean | undefined;
};

/** @internal */
export const RequestBodyArguments$outboundSchema: z.ZodType<
  RequestBodyArguments$Outbound,
  z.ZodTypeDef,
  RequestBodyArguments
> = z.object({
  type: UpdateToolRequestBodyToolsRequest3Type$outboundSchema,
  description: z.string(),
  sendToModel: z.boolean().default(true),
  defaultValue: z.union([z.string(), z.number(), z.boolean()]).optional(),
}).transform((v) => {
  return remap$(v, {
    sendToModel: "send_to_model",
    defaultValue: "default_value",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RequestBodyArguments$ {
  /** @deprecated use `RequestBodyArguments$inboundSchema` instead. */
  export const inboundSchema = RequestBodyArguments$inboundSchema;
  /** @deprecated use `RequestBodyArguments$outboundSchema` instead. */
  export const outboundSchema = RequestBodyArguments$outboundSchema;
  /** @deprecated use `RequestBodyArguments$Outbound` instead. */
  export type Outbound = RequestBodyArguments$Outbound;
}

export function requestBodyArgumentsToJSON(
  requestBodyArguments: RequestBodyArguments,
): string {
  return JSON.stringify(
    RequestBodyArguments$outboundSchema.parse(requestBodyArguments),
  );
}

export function requestBodyArgumentsFromJSON(
  jsonString: string,
): SafeParseResult<RequestBodyArguments, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => RequestBodyArguments$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RequestBodyArguments' from JSON`,
  );
}

/** @internal */
export const RequestBodyHttp$inboundSchema: z.ZodType<
  RequestBodyHttp,
  z.ZodTypeDef,
  unknown
> = z.object({
  blueprint: z.lazy(() => RequestBodyBlueprint$inboundSchema),
  arguments: z.record(z.lazy(() => RequestBodyArguments$inboundSchema))
    .optional(),
});

/** @internal */
export type RequestBodyHttp$Outbound = {
  blueprint: RequestBodyBlueprint$Outbound;
  arguments?: { [k: string]: RequestBodyArguments$Outbound } | undefined;
};

/** @internal */
export const RequestBodyHttp$outboundSchema: z.ZodType<
  RequestBodyHttp$Outbound,
  z.ZodTypeDef,
  RequestBodyHttp
> = z.object({
  blueprint: z.lazy(() => RequestBodyBlueprint$outboundSchema),
  arguments: z.record(z.lazy(() => RequestBodyArguments$outboundSchema))
    .optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RequestBodyHttp$ {
  /** @deprecated use `RequestBodyHttp$inboundSchema` instead. */
  export const inboundSchema = RequestBodyHttp$inboundSchema;
  /** @deprecated use `RequestBodyHttp$outboundSchema` instead. */
  export const outboundSchema = RequestBodyHttp$outboundSchema;
  /** @deprecated use `RequestBodyHttp$Outbound` instead. */
  export type Outbound = RequestBodyHttp$Outbound;
}

export function requestBodyHttpToJSON(
  requestBodyHttp: RequestBodyHttp,
): string {
  return JSON.stringify(RequestBodyHttp$outboundSchema.parse(requestBodyHttp));
}

export function requestBodyHttpFromJSON(
  jsonString: string,
): SafeParseResult<RequestBodyHttp, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => RequestBodyHttp$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RequestBodyHttp' from JSON`,
  );
}

/** @internal */
export const UpdateToolRequestBody3$inboundSchema: z.ZodType<
  UpdateToolRequestBody3,
  z.ZodTypeDef,
  unknown
> = z.object({
  path: z.string().optional(),
  description: z.string().optional(),
  status: UpdateToolRequestBodyToolsRequestStatus$inboundSchema,
  version_hash: z.string(),
  type: UpdateToolRequestBodyToolsRequestType$inboundSchema,
  http: z.lazy(() => RequestBodyHttp$inboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    "version_hash": "versionHash",
  });
});

/** @internal */
export type UpdateToolRequestBody3$Outbound = {
  path?: string | undefined;
  description?: string | undefined;
  status: string;
  version_hash: string;
  type: string;
  http?: RequestBodyHttp$Outbound | undefined;
};

/** @internal */
export const UpdateToolRequestBody3$outboundSchema: z.ZodType<
  UpdateToolRequestBody3$Outbound,
  z.ZodTypeDef,
  UpdateToolRequestBody3
> = z.object({
  path: z.string().optional(),
  description: z.string().optional(),
  status: UpdateToolRequestBodyToolsRequestStatus$outboundSchema,
  versionHash: z.string(),
  type: UpdateToolRequestBodyToolsRequestType$outboundSchema,
  http: z.lazy(() => RequestBodyHttp$outboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    versionHash: "version_hash",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateToolRequestBody3$ {
  /** @deprecated use `UpdateToolRequestBody3$inboundSchema` instead. */
  export const inboundSchema = UpdateToolRequestBody3$inboundSchema;
  /** @deprecated use `UpdateToolRequestBody3$outboundSchema` instead. */
  export const outboundSchema = UpdateToolRequestBody3$outboundSchema;
  /** @deprecated use `UpdateToolRequestBody3$Outbound` instead. */
  export type Outbound = UpdateToolRequestBody3$Outbound;
}

export function updateToolRequestBody3ToJSON(
  updateToolRequestBody3: UpdateToolRequestBody3,
): string {
  return JSON.stringify(
    UpdateToolRequestBody3$outboundSchema.parse(updateToolRequestBody3),
  );
}

export function updateToolRequestBody3FromJSON(
  jsonString: string,
): SafeParseResult<UpdateToolRequestBody3, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateToolRequestBody3$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateToolRequestBody3' from JSON`,
  );
}

/** @internal */
export const UpdateToolRequestBodyToolsStatus$inboundSchema: z.ZodNativeEnum<
  typeof UpdateToolRequestBodyToolsStatus
> = z.nativeEnum(UpdateToolRequestBodyToolsStatus);

/** @internal */
export const UpdateToolRequestBodyToolsStatus$outboundSchema: z.ZodNativeEnum<
  typeof UpdateToolRequestBodyToolsStatus
> = UpdateToolRequestBodyToolsStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateToolRequestBodyToolsStatus$ {
  /** @deprecated use `UpdateToolRequestBodyToolsStatus$inboundSchema` instead. */
  export const inboundSchema = UpdateToolRequestBodyToolsStatus$inboundSchema;
  /** @deprecated use `UpdateToolRequestBodyToolsStatus$outboundSchema` instead. */
  export const outboundSchema = UpdateToolRequestBodyToolsStatus$outboundSchema;
}

/** @internal */
export const UpdateToolRequestBodyToolsType$inboundSchema: z.ZodNativeEnum<
  typeof UpdateToolRequestBodyToolsType
> = z.nativeEnum(UpdateToolRequestBodyToolsType);

/** @internal */
export const UpdateToolRequestBodyToolsType$outboundSchema: z.ZodNativeEnum<
  typeof UpdateToolRequestBodyToolsType
> = UpdateToolRequestBodyToolsType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateToolRequestBodyToolsType$ {
  /** @deprecated use `UpdateToolRequestBodyToolsType$inboundSchema` instead. */
  export const inboundSchema = UpdateToolRequestBodyToolsType$inboundSchema;
  /** @deprecated use `UpdateToolRequestBodyToolsType$outboundSchema` instead. */
  export const outboundSchema = UpdateToolRequestBodyToolsType$outboundSchema;
}

/** @internal */
export const UpdateToolRequestBodyJsonSchema$inboundSchema: z.ZodType<
  UpdateToolRequestBodyJsonSchema,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.string(),
  description: z.string().optional(),
  schema: z.record(z.any()),
  strict: z.nullable(z.boolean().default(false)),
});

/** @internal */
export type UpdateToolRequestBodyJsonSchema$Outbound = {
  name: string;
  description?: string | undefined;
  schema: { [k: string]: any };
  strict: boolean | null;
};

/** @internal */
export const UpdateToolRequestBodyJsonSchema$outboundSchema: z.ZodType<
  UpdateToolRequestBodyJsonSchema$Outbound,
  z.ZodTypeDef,
  UpdateToolRequestBodyJsonSchema
> = z.object({
  name: z.string(),
  description: z.string().optional(),
  schema: z.record(z.any()),
  strict: z.nullable(z.boolean().default(false)),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateToolRequestBodyJsonSchema$ {
  /** @deprecated use `UpdateToolRequestBodyJsonSchema$inboundSchema` instead. */
  export const inboundSchema = UpdateToolRequestBodyJsonSchema$inboundSchema;
  /** @deprecated use `UpdateToolRequestBodyJsonSchema$outboundSchema` instead. */
  export const outboundSchema = UpdateToolRequestBodyJsonSchema$outboundSchema;
  /** @deprecated use `UpdateToolRequestBodyJsonSchema$Outbound` instead. */
  export type Outbound = UpdateToolRequestBodyJsonSchema$Outbound;
}

export function updateToolRequestBodyJsonSchemaToJSON(
  updateToolRequestBodyJsonSchema: UpdateToolRequestBodyJsonSchema,
): string {
  return JSON.stringify(
    UpdateToolRequestBodyJsonSchema$outboundSchema.parse(
      updateToolRequestBodyJsonSchema,
    ),
  );
}

export function updateToolRequestBodyJsonSchemaFromJSON(
  jsonString: string,
): SafeParseResult<UpdateToolRequestBodyJsonSchema, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateToolRequestBodyJsonSchema$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateToolRequestBodyJsonSchema' from JSON`,
  );
}

/** @internal */
export const UpdateToolRequestBody2$inboundSchema: z.ZodType<
  UpdateToolRequestBody2,
  z.ZodTypeDef,
  unknown
> = z.object({
  path: z.string().optional(),
  description: z.string().optional(),
  status: UpdateToolRequestBodyToolsStatus$inboundSchema,
  version_hash: z.string(),
  type: UpdateToolRequestBodyToolsType$inboundSchema,
  json_schema: z.lazy(() => UpdateToolRequestBodyJsonSchema$inboundSchema)
    .optional(),
}).transform((v) => {
  return remap$(v, {
    "version_hash": "versionHash",
    "json_schema": "jsonSchema",
  });
});

/** @internal */
export type UpdateToolRequestBody2$Outbound = {
  path?: string | undefined;
  description?: string | undefined;
  status: string;
  version_hash: string;
  type: string;
  json_schema?: UpdateToolRequestBodyJsonSchema$Outbound | undefined;
};

/** @internal */
export const UpdateToolRequestBody2$outboundSchema: z.ZodType<
  UpdateToolRequestBody2$Outbound,
  z.ZodTypeDef,
  UpdateToolRequestBody2
> = z.object({
  path: z.string().optional(),
  description: z.string().optional(),
  status: UpdateToolRequestBodyToolsStatus$outboundSchema,
  versionHash: z.string(),
  type: UpdateToolRequestBodyToolsType$outboundSchema,
  jsonSchema: z.lazy(() => UpdateToolRequestBodyJsonSchema$outboundSchema)
    .optional(),
}).transform((v) => {
  return remap$(v, {
    versionHash: "version_hash",
    jsonSchema: "json_schema",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateToolRequestBody2$ {
  /** @deprecated use `UpdateToolRequestBody2$inboundSchema` instead. */
  export const inboundSchema = UpdateToolRequestBody2$inboundSchema;
  /** @deprecated use `UpdateToolRequestBody2$outboundSchema` instead. */
  export const outboundSchema = UpdateToolRequestBody2$outboundSchema;
  /** @deprecated use `UpdateToolRequestBody2$Outbound` instead. */
  export type Outbound = UpdateToolRequestBody2$Outbound;
}

export function updateToolRequestBody2ToJSON(
  updateToolRequestBody2: UpdateToolRequestBody2,
): string {
  return JSON.stringify(
    UpdateToolRequestBody2$outboundSchema.parse(updateToolRequestBody2),
  );
}

export function updateToolRequestBody2FromJSON(
  jsonString: string,
): SafeParseResult<UpdateToolRequestBody2, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateToolRequestBody2$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateToolRequestBody2' from JSON`,
  );
}

/** @internal */
export const UpdateToolRequestBodyStatus$inboundSchema: z.ZodNativeEnum<
  typeof UpdateToolRequestBodyStatus
> = z.nativeEnum(UpdateToolRequestBodyStatus);

/** @internal */
export const UpdateToolRequestBodyStatus$outboundSchema: z.ZodNativeEnum<
  typeof UpdateToolRequestBodyStatus
> = UpdateToolRequestBodyStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateToolRequestBodyStatus$ {
  /** @deprecated use `UpdateToolRequestBodyStatus$inboundSchema` instead. */
  export const inboundSchema = UpdateToolRequestBodyStatus$inboundSchema;
  /** @deprecated use `UpdateToolRequestBodyStatus$outboundSchema` instead. */
  export const outboundSchema = UpdateToolRequestBodyStatus$outboundSchema;
}

/** @internal */
export const UpdateToolRequestBodyType$inboundSchema: z.ZodNativeEnum<
  typeof UpdateToolRequestBodyType
> = z.nativeEnum(UpdateToolRequestBodyType);

/** @internal */
export const UpdateToolRequestBodyType$outboundSchema: z.ZodNativeEnum<
  typeof UpdateToolRequestBodyType
> = UpdateToolRequestBodyType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateToolRequestBodyType$ {
  /** @deprecated use `UpdateToolRequestBodyType$inboundSchema` instead. */
  export const inboundSchema = UpdateToolRequestBodyType$inboundSchema;
  /** @deprecated use `UpdateToolRequestBodyType$outboundSchema` instead. */
  export const outboundSchema = UpdateToolRequestBodyType$outboundSchema;
}

/** @internal */
export const UpdateToolRequestBodyFunction$inboundSchema: z.ZodType<
  UpdateToolRequestBodyFunction,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.string(),
  description: z.string().optional(),
  strict: z.boolean().optional(),
  parameters: z.record(z.any()).optional(),
});

/** @internal */
export type UpdateToolRequestBodyFunction$Outbound = {
  name: string;
  description?: string | undefined;
  strict?: boolean | undefined;
  parameters?: { [k: string]: any } | undefined;
};

/** @internal */
export const UpdateToolRequestBodyFunction$outboundSchema: z.ZodType<
  UpdateToolRequestBodyFunction$Outbound,
  z.ZodTypeDef,
  UpdateToolRequestBodyFunction
> = z.object({
  name: z.string(),
  description: z.string().optional(),
  strict: z.boolean().optional(),
  parameters: z.record(z.any()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateToolRequestBodyFunction$ {
  /** @deprecated use `UpdateToolRequestBodyFunction$inboundSchema` instead. */
  export const inboundSchema = UpdateToolRequestBodyFunction$inboundSchema;
  /** @deprecated use `UpdateToolRequestBodyFunction$outboundSchema` instead. */
  export const outboundSchema = UpdateToolRequestBodyFunction$outboundSchema;
  /** @deprecated use `UpdateToolRequestBodyFunction$Outbound` instead. */
  export type Outbound = UpdateToolRequestBodyFunction$Outbound;
}

export function updateToolRequestBodyFunctionToJSON(
  updateToolRequestBodyFunction: UpdateToolRequestBodyFunction,
): string {
  return JSON.stringify(
    UpdateToolRequestBodyFunction$outboundSchema.parse(
      updateToolRequestBodyFunction,
    ),
  );
}

export function updateToolRequestBodyFunctionFromJSON(
  jsonString: string,
): SafeParseResult<UpdateToolRequestBodyFunction, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateToolRequestBodyFunction$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateToolRequestBodyFunction' from JSON`,
  );
}

/** @internal */
export const UpdateToolRequestBody1$inboundSchema: z.ZodType<
  UpdateToolRequestBody1,
  z.ZodTypeDef,
  unknown
> = z.object({
  path: z.string().optional(),
  description: z.string().optional(),
  status: UpdateToolRequestBodyStatus$inboundSchema,
  version_hash: z.string(),
  type: UpdateToolRequestBodyType$inboundSchema,
  function: z.lazy(() => UpdateToolRequestBodyFunction$inboundSchema)
    .optional(),
}).transform((v) => {
  return remap$(v, {
    "version_hash": "versionHash",
  });
});

/** @internal */
export type UpdateToolRequestBody1$Outbound = {
  path?: string | undefined;
  description?: string | undefined;
  status: string;
  version_hash: string;
  type: string;
  function?: UpdateToolRequestBodyFunction$Outbound | undefined;
};

/** @internal */
export const UpdateToolRequestBody1$outboundSchema: z.ZodType<
  UpdateToolRequestBody1$Outbound,
  z.ZodTypeDef,
  UpdateToolRequestBody1
> = z.object({
  path: z.string().optional(),
  description: z.string().optional(),
  status: UpdateToolRequestBodyStatus$outboundSchema,
  versionHash: z.string(),
  type: UpdateToolRequestBodyType$outboundSchema,
  function: z.lazy(() => UpdateToolRequestBodyFunction$outboundSchema)
    .optional(),
}).transform((v) => {
  return remap$(v, {
    versionHash: "version_hash",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateToolRequestBody1$ {
  /** @deprecated use `UpdateToolRequestBody1$inboundSchema` instead. */
  export const inboundSchema = UpdateToolRequestBody1$inboundSchema;
  /** @deprecated use `UpdateToolRequestBody1$outboundSchema` instead. */
  export const outboundSchema = UpdateToolRequestBody1$outboundSchema;
  /** @deprecated use `UpdateToolRequestBody1$Outbound` instead. */
  export type Outbound = UpdateToolRequestBody1$Outbound;
}

export function updateToolRequestBody1ToJSON(
  updateToolRequestBody1: UpdateToolRequestBody1,
): string {
  return JSON.stringify(
    UpdateToolRequestBody1$outboundSchema.parse(updateToolRequestBody1),
  );
}

export function updateToolRequestBody1FromJSON(
  jsonString: string,
): SafeParseResult<UpdateToolRequestBody1, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateToolRequestBody1$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateToolRequestBody1' from JSON`,
  );
}

/** @internal */
export const UpdateToolRequestBody$inboundSchema: z.ZodType<
  UpdateToolRequestBody,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => UpdateToolRequestBody1$inboundSchema),
  z.lazy(() => UpdateToolRequestBody2$inboundSchema),
  z.lazy(() => UpdateToolRequestBody3$inboundSchema),
]);

/** @internal */
export type UpdateToolRequestBody$Outbound =
  | UpdateToolRequestBody1$Outbound
  | UpdateToolRequestBody2$Outbound
  | UpdateToolRequestBody3$Outbound;

/** @internal */
export const UpdateToolRequestBody$outboundSchema: z.ZodType<
  UpdateToolRequestBody$Outbound,
  z.ZodTypeDef,
  UpdateToolRequestBody
> = z.union([
  z.lazy(() => UpdateToolRequestBody1$outboundSchema),
  z.lazy(() => UpdateToolRequestBody2$outboundSchema),
  z.lazy(() => UpdateToolRequestBody3$outboundSchema),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateToolRequestBody$ {
  /** @deprecated use `UpdateToolRequestBody$inboundSchema` instead. */
  export const inboundSchema = UpdateToolRequestBody$inboundSchema;
  /** @deprecated use `UpdateToolRequestBody$outboundSchema` instead. */
  export const outboundSchema = UpdateToolRequestBody$outboundSchema;
  /** @deprecated use `UpdateToolRequestBody$Outbound` instead. */
  export type Outbound = UpdateToolRequestBody$Outbound;
}

export function updateToolRequestBodyToJSON(
  updateToolRequestBody: UpdateToolRequestBody,
): string {
  return JSON.stringify(
    UpdateToolRequestBody$outboundSchema.parse(updateToolRequestBody),
  );
}

export function updateToolRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<UpdateToolRequestBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateToolRequestBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateToolRequestBody' from JSON`,
  );
}

/** @internal */
export const UpdateToolRequest$inboundSchema: z.ZodType<
  UpdateToolRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  tool_key: z.string(),
  RequestBody: z.union([
    z.lazy(() => UpdateToolRequestBody1$inboundSchema),
    z.lazy(() => UpdateToolRequestBody2$inboundSchema),
    z.lazy(() => UpdateToolRequestBody3$inboundSchema),
  ]).optional(),
}).transform((v) => {
  return remap$(v, {
    "tool_key": "toolKey",
    "RequestBody": "requestBody",
  });
});

/** @internal */
export type UpdateToolRequest$Outbound = {
  tool_key: string;
  RequestBody?:
    | UpdateToolRequestBody1$Outbound
    | UpdateToolRequestBody2$Outbound
    | UpdateToolRequestBody3$Outbound
    | undefined;
};

/** @internal */
export const UpdateToolRequest$outboundSchema: z.ZodType<
  UpdateToolRequest$Outbound,
  z.ZodTypeDef,
  UpdateToolRequest
> = z.object({
  toolKey: z.string(),
  requestBody: z.union([
    z.lazy(() => UpdateToolRequestBody1$outboundSchema),
    z.lazy(() => UpdateToolRequestBody2$outboundSchema),
    z.lazy(() => UpdateToolRequestBody3$outboundSchema),
  ]).optional(),
}).transform((v) => {
  return remap$(v, {
    toolKey: "tool_key",
    requestBody: "RequestBody",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateToolRequest$ {
  /** @deprecated use `UpdateToolRequest$inboundSchema` instead. */
  export const inboundSchema = UpdateToolRequest$inboundSchema;
  /** @deprecated use `UpdateToolRequest$outboundSchema` instead. */
  export const outboundSchema = UpdateToolRequest$outboundSchema;
  /** @deprecated use `UpdateToolRequest$Outbound` instead. */
  export type Outbound = UpdateToolRequest$Outbound;
}

export function updateToolRequestToJSON(
  updateToolRequest: UpdateToolRequest,
): string {
  return JSON.stringify(
    UpdateToolRequest$outboundSchema.parse(updateToolRequest),
  );
}

export function updateToolRequestFromJSON(
  jsonString: string,
): SafeParseResult<UpdateToolRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateToolRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateToolRequest' from JSON`,
  );
}

/** @internal */
export const UpdateToolResponseBodyToolsResponseStatus$inboundSchema:
  z.ZodNativeEnum<typeof UpdateToolResponseBodyToolsResponseStatus> = z
    .nativeEnum(UpdateToolResponseBodyToolsResponseStatus);

/** @internal */
export const UpdateToolResponseBodyToolsResponseStatus$outboundSchema:
  z.ZodNativeEnum<typeof UpdateToolResponseBodyToolsResponseStatus> =
    UpdateToolResponseBodyToolsResponseStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateToolResponseBodyToolsResponseStatus$ {
  /** @deprecated use `UpdateToolResponseBodyToolsResponseStatus$inboundSchema` instead. */
  export const inboundSchema =
    UpdateToolResponseBodyToolsResponseStatus$inboundSchema;
  /** @deprecated use `UpdateToolResponseBodyToolsResponseStatus$outboundSchema` instead. */
  export const outboundSchema =
    UpdateToolResponseBodyToolsResponseStatus$outboundSchema;
}

/** @internal */
export const UpdateToolResponseBodyToolsResponseType$inboundSchema:
  z.ZodNativeEnum<typeof UpdateToolResponseBodyToolsResponseType> = z
    .nativeEnum(UpdateToolResponseBodyToolsResponseType);

/** @internal */
export const UpdateToolResponseBodyToolsResponseType$outboundSchema:
  z.ZodNativeEnum<typeof UpdateToolResponseBodyToolsResponseType> =
    UpdateToolResponseBodyToolsResponseType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateToolResponseBodyToolsResponseType$ {
  /** @deprecated use `UpdateToolResponseBodyToolsResponseType$inboundSchema` instead. */
  export const inboundSchema =
    UpdateToolResponseBodyToolsResponseType$inboundSchema;
  /** @deprecated use `UpdateToolResponseBodyToolsResponseType$outboundSchema` instead. */
  export const outboundSchema =
    UpdateToolResponseBodyToolsResponseType$outboundSchema;
}

/** @internal */
export const UpdateToolResponseBodyMethod$inboundSchema: z.ZodNativeEnum<
  typeof UpdateToolResponseBodyMethod
> = z.nativeEnum(UpdateToolResponseBodyMethod);

/** @internal */
export const UpdateToolResponseBodyMethod$outboundSchema: z.ZodNativeEnum<
  typeof UpdateToolResponseBodyMethod
> = UpdateToolResponseBodyMethod$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateToolResponseBodyMethod$ {
  /** @deprecated use `UpdateToolResponseBodyMethod$inboundSchema` instead. */
  export const inboundSchema = UpdateToolResponseBodyMethod$inboundSchema;
  /** @deprecated use `UpdateToolResponseBodyMethod$outboundSchema` instead. */
  export const outboundSchema = UpdateToolResponseBodyMethod$outboundSchema;
}

/** @internal */
export const UpdateToolResponseBodyBlueprint$inboundSchema: z.ZodType<
  UpdateToolResponseBodyBlueprint,
  z.ZodTypeDef,
  unknown
> = z.object({
  url: z.string(),
  method: UpdateToolResponseBodyMethod$inboundSchema,
  headers: z.record(z.string()).optional(),
  body: z.record(z.any()).optional(),
});

/** @internal */
export type UpdateToolResponseBodyBlueprint$Outbound = {
  url: string;
  method: string;
  headers?: { [k: string]: string } | undefined;
  body?: { [k: string]: any } | undefined;
};

/** @internal */
export const UpdateToolResponseBodyBlueprint$outboundSchema: z.ZodType<
  UpdateToolResponseBodyBlueprint$Outbound,
  z.ZodTypeDef,
  UpdateToolResponseBodyBlueprint
> = z.object({
  url: z.string(),
  method: UpdateToolResponseBodyMethod$outboundSchema,
  headers: z.record(z.string()).optional(),
  body: z.record(z.any()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateToolResponseBodyBlueprint$ {
  /** @deprecated use `UpdateToolResponseBodyBlueprint$inboundSchema` instead. */
  export const inboundSchema = UpdateToolResponseBodyBlueprint$inboundSchema;
  /** @deprecated use `UpdateToolResponseBodyBlueprint$outboundSchema` instead. */
  export const outboundSchema = UpdateToolResponseBodyBlueprint$outboundSchema;
  /** @deprecated use `UpdateToolResponseBodyBlueprint$Outbound` instead. */
  export type Outbound = UpdateToolResponseBodyBlueprint$Outbound;
}

export function updateToolResponseBodyBlueprintToJSON(
  updateToolResponseBodyBlueprint: UpdateToolResponseBodyBlueprint,
): string {
  return JSON.stringify(
    UpdateToolResponseBodyBlueprint$outboundSchema.parse(
      updateToolResponseBodyBlueprint,
    ),
  );
}

export function updateToolResponseBodyBlueprintFromJSON(
  jsonString: string,
): SafeParseResult<UpdateToolResponseBodyBlueprint, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateToolResponseBodyBlueprint$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateToolResponseBodyBlueprint' from JSON`,
  );
}

/** @internal */
export const UpdateToolResponseBodyToolsResponse200Type$inboundSchema:
  z.ZodNativeEnum<typeof UpdateToolResponseBodyToolsResponse200Type> = z
    .nativeEnum(UpdateToolResponseBodyToolsResponse200Type);

/** @internal */
export const UpdateToolResponseBodyToolsResponse200Type$outboundSchema:
  z.ZodNativeEnum<typeof UpdateToolResponseBodyToolsResponse200Type> =
    UpdateToolResponseBodyToolsResponse200Type$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateToolResponseBodyToolsResponse200Type$ {
  /** @deprecated use `UpdateToolResponseBodyToolsResponse200Type$inboundSchema` instead. */
  export const inboundSchema =
    UpdateToolResponseBodyToolsResponse200Type$inboundSchema;
  /** @deprecated use `UpdateToolResponseBodyToolsResponse200Type$outboundSchema` instead. */
  export const outboundSchema =
    UpdateToolResponseBodyToolsResponse200Type$outboundSchema;
}

/** @internal */
export const UpdateToolResponseBodyDefaultValue$inboundSchema: z.ZodType<
  UpdateToolResponseBodyDefaultValue,
  z.ZodTypeDef,
  unknown
> = z.union([z.string(), z.number(), z.boolean()]);

/** @internal */
export type UpdateToolResponseBodyDefaultValue$Outbound =
  | string
  | number
  | boolean;

/** @internal */
export const UpdateToolResponseBodyDefaultValue$outboundSchema: z.ZodType<
  UpdateToolResponseBodyDefaultValue$Outbound,
  z.ZodTypeDef,
  UpdateToolResponseBodyDefaultValue
> = z.union([z.string(), z.number(), z.boolean()]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateToolResponseBodyDefaultValue$ {
  /** @deprecated use `UpdateToolResponseBodyDefaultValue$inboundSchema` instead. */
  export const inboundSchema = UpdateToolResponseBodyDefaultValue$inboundSchema;
  /** @deprecated use `UpdateToolResponseBodyDefaultValue$outboundSchema` instead. */
  export const outboundSchema =
    UpdateToolResponseBodyDefaultValue$outboundSchema;
  /** @deprecated use `UpdateToolResponseBodyDefaultValue$Outbound` instead. */
  export type Outbound = UpdateToolResponseBodyDefaultValue$Outbound;
}

export function updateToolResponseBodyDefaultValueToJSON(
  updateToolResponseBodyDefaultValue: UpdateToolResponseBodyDefaultValue,
): string {
  return JSON.stringify(
    UpdateToolResponseBodyDefaultValue$outboundSchema.parse(
      updateToolResponseBodyDefaultValue,
    ),
  );
}

export function updateToolResponseBodyDefaultValueFromJSON(
  jsonString: string,
): SafeParseResult<UpdateToolResponseBodyDefaultValue, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      UpdateToolResponseBodyDefaultValue$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateToolResponseBodyDefaultValue' from JSON`,
  );
}

/** @internal */
export const UpdateToolResponseBodyArguments$inboundSchema: z.ZodType<
  UpdateToolResponseBodyArguments,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: UpdateToolResponseBodyToolsResponse200Type$inboundSchema,
  description: z.string(),
  send_to_model: z.boolean().default(true),
  default_value: z.union([z.string(), z.number(), z.boolean()]).optional(),
}).transform((v) => {
  return remap$(v, {
    "send_to_model": "sendToModel",
    "default_value": "defaultValue",
  });
});

/** @internal */
export type UpdateToolResponseBodyArguments$Outbound = {
  type: string;
  description: string;
  send_to_model: boolean;
  default_value?: string | number | boolean | undefined;
};

/** @internal */
export const UpdateToolResponseBodyArguments$outboundSchema: z.ZodType<
  UpdateToolResponseBodyArguments$Outbound,
  z.ZodTypeDef,
  UpdateToolResponseBodyArguments
> = z.object({
  type: UpdateToolResponseBodyToolsResponse200Type$outboundSchema,
  description: z.string(),
  sendToModel: z.boolean().default(true),
  defaultValue: z.union([z.string(), z.number(), z.boolean()]).optional(),
}).transform((v) => {
  return remap$(v, {
    sendToModel: "send_to_model",
    defaultValue: "default_value",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateToolResponseBodyArguments$ {
  /** @deprecated use `UpdateToolResponseBodyArguments$inboundSchema` instead. */
  export const inboundSchema = UpdateToolResponseBodyArguments$inboundSchema;
  /** @deprecated use `UpdateToolResponseBodyArguments$outboundSchema` instead. */
  export const outboundSchema = UpdateToolResponseBodyArguments$outboundSchema;
  /** @deprecated use `UpdateToolResponseBodyArguments$Outbound` instead. */
  export type Outbound = UpdateToolResponseBodyArguments$Outbound;
}

export function updateToolResponseBodyArgumentsToJSON(
  updateToolResponseBodyArguments: UpdateToolResponseBodyArguments,
): string {
  return JSON.stringify(
    UpdateToolResponseBodyArguments$outboundSchema.parse(
      updateToolResponseBodyArguments,
    ),
  );
}

export function updateToolResponseBodyArgumentsFromJSON(
  jsonString: string,
): SafeParseResult<UpdateToolResponseBodyArguments, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateToolResponseBodyArguments$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateToolResponseBodyArguments' from JSON`,
  );
}

/** @internal */
export const UpdateToolResponseBodyHttp$inboundSchema: z.ZodType<
  UpdateToolResponseBodyHttp,
  z.ZodTypeDef,
  unknown
> = z.object({
  blueprint: z.lazy(() => UpdateToolResponseBodyBlueprint$inboundSchema),
  arguments: z.record(
    z.lazy(() => UpdateToolResponseBodyArguments$inboundSchema),
  ).optional(),
});

/** @internal */
export type UpdateToolResponseBodyHttp$Outbound = {
  blueprint: UpdateToolResponseBodyBlueprint$Outbound;
  arguments?:
    | { [k: string]: UpdateToolResponseBodyArguments$Outbound }
    | undefined;
};

/** @internal */
export const UpdateToolResponseBodyHttp$outboundSchema: z.ZodType<
  UpdateToolResponseBodyHttp$Outbound,
  z.ZodTypeDef,
  UpdateToolResponseBodyHttp
> = z.object({
  blueprint: z.lazy(() => UpdateToolResponseBodyBlueprint$outboundSchema),
  arguments: z.record(
    z.lazy(() => UpdateToolResponseBodyArguments$outboundSchema),
  ).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateToolResponseBodyHttp$ {
  /** @deprecated use `UpdateToolResponseBodyHttp$inboundSchema` instead. */
  export const inboundSchema = UpdateToolResponseBodyHttp$inboundSchema;
  /** @deprecated use `UpdateToolResponseBodyHttp$outboundSchema` instead. */
  export const outboundSchema = UpdateToolResponseBodyHttp$outboundSchema;
  /** @deprecated use `UpdateToolResponseBodyHttp$Outbound` instead. */
  export type Outbound = UpdateToolResponseBodyHttp$Outbound;
}

export function updateToolResponseBodyHttpToJSON(
  updateToolResponseBodyHttp: UpdateToolResponseBodyHttp,
): string {
  return JSON.stringify(
    UpdateToolResponseBodyHttp$outboundSchema.parse(updateToolResponseBodyHttp),
  );
}

export function updateToolResponseBodyHttpFromJSON(
  jsonString: string,
): SafeParseResult<UpdateToolResponseBodyHttp, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateToolResponseBodyHttp$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateToolResponseBodyHttp' from JSON`,
  );
}

/** @internal */
export const UpdateToolResponseBody3$inboundSchema: z.ZodType<
  UpdateToolResponseBody3,
  z.ZodTypeDef,
  unknown
> = z.object({
  _id: z.string().default("tool_01JRYR4D3QJ1ESF5C2Q0C3YPJ5"),
  path: z.string(),
  key: z.string(),
  description: z.string(),
  created_by_id: z.string().optional(),
  updated_by_id: z.string().optional(),
  project_id: z.string(),
  workspace_id: z.string(),
  created: z.string(),
  updated: z.string(),
  status: UpdateToolResponseBodyToolsResponseStatus$inboundSchema,
  version_hash: z.string(),
  type: UpdateToolResponseBodyToolsResponseType$inboundSchema,
  http: z.lazy(() => UpdateToolResponseBodyHttp$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "_id": "id",
    "created_by_id": "createdById",
    "updated_by_id": "updatedById",
    "project_id": "projectId",
    "workspace_id": "workspaceId",
    "version_hash": "versionHash",
  });
});

/** @internal */
export type UpdateToolResponseBody3$Outbound = {
  _id: string;
  path: string;
  key: string;
  description: string;
  created_by_id?: string | undefined;
  updated_by_id?: string | undefined;
  project_id: string;
  workspace_id: string;
  created: string;
  updated: string;
  status: string;
  version_hash: string;
  type: string;
  http: UpdateToolResponseBodyHttp$Outbound;
};

/** @internal */
export const UpdateToolResponseBody3$outboundSchema: z.ZodType<
  UpdateToolResponseBody3$Outbound,
  z.ZodTypeDef,
  UpdateToolResponseBody3
> = z.object({
  id: z.string().default("tool_01JRYR4D3QJ1ESF5C2Q0C3YPJ5"),
  path: z.string(),
  key: z.string(),
  description: z.string(),
  createdById: z.string().optional(),
  updatedById: z.string().optional(),
  projectId: z.string(),
  workspaceId: z.string(),
  created: z.string(),
  updated: z.string(),
  status: UpdateToolResponseBodyToolsResponseStatus$outboundSchema,
  versionHash: z.string(),
  type: UpdateToolResponseBodyToolsResponseType$outboundSchema,
  http: z.lazy(() => UpdateToolResponseBodyHttp$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    id: "_id",
    createdById: "created_by_id",
    updatedById: "updated_by_id",
    projectId: "project_id",
    workspaceId: "workspace_id",
    versionHash: "version_hash",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateToolResponseBody3$ {
  /** @deprecated use `UpdateToolResponseBody3$inboundSchema` instead. */
  export const inboundSchema = UpdateToolResponseBody3$inboundSchema;
  /** @deprecated use `UpdateToolResponseBody3$outboundSchema` instead. */
  export const outboundSchema = UpdateToolResponseBody3$outboundSchema;
  /** @deprecated use `UpdateToolResponseBody3$Outbound` instead. */
  export type Outbound = UpdateToolResponseBody3$Outbound;
}

export function updateToolResponseBody3ToJSON(
  updateToolResponseBody3: UpdateToolResponseBody3,
): string {
  return JSON.stringify(
    UpdateToolResponseBody3$outboundSchema.parse(updateToolResponseBody3),
  );
}

export function updateToolResponseBody3FromJSON(
  jsonString: string,
): SafeParseResult<UpdateToolResponseBody3, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateToolResponseBody3$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateToolResponseBody3' from JSON`,
  );
}

/** @internal */
export const UpdateToolResponseBodyToolsStatus$inboundSchema: z.ZodNativeEnum<
  typeof UpdateToolResponseBodyToolsStatus
> = z.nativeEnum(UpdateToolResponseBodyToolsStatus);

/** @internal */
export const UpdateToolResponseBodyToolsStatus$outboundSchema: z.ZodNativeEnum<
  typeof UpdateToolResponseBodyToolsStatus
> = UpdateToolResponseBodyToolsStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateToolResponseBodyToolsStatus$ {
  /** @deprecated use `UpdateToolResponseBodyToolsStatus$inboundSchema` instead. */
  export const inboundSchema = UpdateToolResponseBodyToolsStatus$inboundSchema;
  /** @deprecated use `UpdateToolResponseBodyToolsStatus$outboundSchema` instead. */
  export const outboundSchema =
    UpdateToolResponseBodyToolsStatus$outboundSchema;
}

/** @internal */
export const UpdateToolResponseBodyToolsType$inboundSchema: z.ZodNativeEnum<
  typeof UpdateToolResponseBodyToolsType
> = z.nativeEnum(UpdateToolResponseBodyToolsType);

/** @internal */
export const UpdateToolResponseBodyToolsType$outboundSchema: z.ZodNativeEnum<
  typeof UpdateToolResponseBodyToolsType
> = UpdateToolResponseBodyToolsType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateToolResponseBodyToolsType$ {
  /** @deprecated use `UpdateToolResponseBodyToolsType$inboundSchema` instead. */
  export const inboundSchema = UpdateToolResponseBodyToolsType$inboundSchema;
  /** @deprecated use `UpdateToolResponseBodyToolsType$outboundSchema` instead. */
  export const outboundSchema = UpdateToolResponseBodyToolsType$outboundSchema;
}

/** @internal */
export const UpdateToolResponseBodyJsonSchema$inboundSchema: z.ZodType<
  UpdateToolResponseBodyJsonSchema,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.string(),
  description: z.string().optional(),
  schema: z.record(z.any()),
  strict: z.nullable(z.boolean().default(false)),
});

/** @internal */
export type UpdateToolResponseBodyJsonSchema$Outbound = {
  name: string;
  description?: string | undefined;
  schema: { [k: string]: any };
  strict: boolean | null;
};

/** @internal */
export const UpdateToolResponseBodyJsonSchema$outboundSchema: z.ZodType<
  UpdateToolResponseBodyJsonSchema$Outbound,
  z.ZodTypeDef,
  UpdateToolResponseBodyJsonSchema
> = z.object({
  name: z.string(),
  description: z.string().optional(),
  schema: z.record(z.any()),
  strict: z.nullable(z.boolean().default(false)),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateToolResponseBodyJsonSchema$ {
  /** @deprecated use `UpdateToolResponseBodyJsonSchema$inboundSchema` instead. */
  export const inboundSchema = UpdateToolResponseBodyJsonSchema$inboundSchema;
  /** @deprecated use `UpdateToolResponseBodyJsonSchema$outboundSchema` instead. */
  export const outboundSchema = UpdateToolResponseBodyJsonSchema$outboundSchema;
  /** @deprecated use `UpdateToolResponseBodyJsonSchema$Outbound` instead. */
  export type Outbound = UpdateToolResponseBodyJsonSchema$Outbound;
}

export function updateToolResponseBodyJsonSchemaToJSON(
  updateToolResponseBodyJsonSchema: UpdateToolResponseBodyJsonSchema,
): string {
  return JSON.stringify(
    UpdateToolResponseBodyJsonSchema$outboundSchema.parse(
      updateToolResponseBodyJsonSchema,
    ),
  );
}

export function updateToolResponseBodyJsonSchemaFromJSON(
  jsonString: string,
): SafeParseResult<UpdateToolResponseBodyJsonSchema, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateToolResponseBodyJsonSchema$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateToolResponseBodyJsonSchema' from JSON`,
  );
}

/** @internal */
export const UpdateToolResponseBody2$inboundSchema: z.ZodType<
  UpdateToolResponseBody2,
  z.ZodTypeDef,
  unknown
> = z.object({
  _id: z.string().default("tool_01JRYR4D3QH2VJJK7DFZGMVA7B"),
  path: z.string(),
  key: z.string(),
  description: z.string(),
  created_by_id: z.string().optional(),
  updated_by_id: z.string().optional(),
  project_id: z.string(),
  workspace_id: z.string(),
  created: z.string(),
  updated: z.string(),
  status: UpdateToolResponseBodyToolsStatus$inboundSchema,
  version_hash: z.string(),
  type: UpdateToolResponseBodyToolsType$inboundSchema,
  json_schema: z.lazy(() => UpdateToolResponseBodyJsonSchema$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "_id": "id",
    "created_by_id": "createdById",
    "updated_by_id": "updatedById",
    "project_id": "projectId",
    "workspace_id": "workspaceId",
    "version_hash": "versionHash",
    "json_schema": "jsonSchema",
  });
});

/** @internal */
export type UpdateToolResponseBody2$Outbound = {
  _id: string;
  path: string;
  key: string;
  description: string;
  created_by_id?: string | undefined;
  updated_by_id?: string | undefined;
  project_id: string;
  workspace_id: string;
  created: string;
  updated: string;
  status: string;
  version_hash: string;
  type: string;
  json_schema: UpdateToolResponseBodyJsonSchema$Outbound;
};

/** @internal */
export const UpdateToolResponseBody2$outboundSchema: z.ZodType<
  UpdateToolResponseBody2$Outbound,
  z.ZodTypeDef,
  UpdateToolResponseBody2
> = z.object({
  id: z.string().default("tool_01JRYR4D3QH2VJJK7DFZGMVA7B"),
  path: z.string(),
  key: z.string(),
  description: z.string(),
  createdById: z.string().optional(),
  updatedById: z.string().optional(),
  projectId: z.string(),
  workspaceId: z.string(),
  created: z.string(),
  updated: z.string(),
  status: UpdateToolResponseBodyToolsStatus$outboundSchema,
  versionHash: z.string(),
  type: UpdateToolResponseBodyToolsType$outboundSchema,
  jsonSchema: z.lazy(() => UpdateToolResponseBodyJsonSchema$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    id: "_id",
    createdById: "created_by_id",
    updatedById: "updated_by_id",
    projectId: "project_id",
    workspaceId: "workspace_id",
    versionHash: "version_hash",
    jsonSchema: "json_schema",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateToolResponseBody2$ {
  /** @deprecated use `UpdateToolResponseBody2$inboundSchema` instead. */
  export const inboundSchema = UpdateToolResponseBody2$inboundSchema;
  /** @deprecated use `UpdateToolResponseBody2$outboundSchema` instead. */
  export const outboundSchema = UpdateToolResponseBody2$outboundSchema;
  /** @deprecated use `UpdateToolResponseBody2$Outbound` instead. */
  export type Outbound = UpdateToolResponseBody2$Outbound;
}

export function updateToolResponseBody2ToJSON(
  updateToolResponseBody2: UpdateToolResponseBody2,
): string {
  return JSON.stringify(
    UpdateToolResponseBody2$outboundSchema.parse(updateToolResponseBody2),
  );
}

export function updateToolResponseBody2FromJSON(
  jsonString: string,
): SafeParseResult<UpdateToolResponseBody2, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateToolResponseBody2$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateToolResponseBody2' from JSON`,
  );
}

/** @internal */
export const UpdateToolResponseBodyStatus$inboundSchema: z.ZodNativeEnum<
  typeof UpdateToolResponseBodyStatus
> = z.nativeEnum(UpdateToolResponseBodyStatus);

/** @internal */
export const UpdateToolResponseBodyStatus$outboundSchema: z.ZodNativeEnum<
  typeof UpdateToolResponseBodyStatus
> = UpdateToolResponseBodyStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateToolResponseBodyStatus$ {
  /** @deprecated use `UpdateToolResponseBodyStatus$inboundSchema` instead. */
  export const inboundSchema = UpdateToolResponseBodyStatus$inboundSchema;
  /** @deprecated use `UpdateToolResponseBodyStatus$outboundSchema` instead. */
  export const outboundSchema = UpdateToolResponseBodyStatus$outboundSchema;
}

/** @internal */
export const UpdateToolResponseBodyType$inboundSchema: z.ZodNativeEnum<
  typeof UpdateToolResponseBodyType
> = z.nativeEnum(UpdateToolResponseBodyType);

/** @internal */
export const UpdateToolResponseBodyType$outboundSchema: z.ZodNativeEnum<
  typeof UpdateToolResponseBodyType
> = UpdateToolResponseBodyType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateToolResponseBodyType$ {
  /** @deprecated use `UpdateToolResponseBodyType$inboundSchema` instead. */
  export const inboundSchema = UpdateToolResponseBodyType$inboundSchema;
  /** @deprecated use `UpdateToolResponseBodyType$outboundSchema` instead. */
  export const outboundSchema = UpdateToolResponseBodyType$outboundSchema;
}

/** @internal */
export const UpdateToolResponseBodyFunction$inboundSchema: z.ZodType<
  UpdateToolResponseBodyFunction,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.string(),
  description: z.string().optional(),
  strict: z.boolean().optional(),
  parameters: z.record(z.any()).optional(),
});

/** @internal */
export type UpdateToolResponseBodyFunction$Outbound = {
  name: string;
  description?: string | undefined;
  strict?: boolean | undefined;
  parameters?: { [k: string]: any } | undefined;
};

/** @internal */
export const UpdateToolResponseBodyFunction$outboundSchema: z.ZodType<
  UpdateToolResponseBodyFunction$Outbound,
  z.ZodTypeDef,
  UpdateToolResponseBodyFunction
> = z.object({
  name: z.string(),
  description: z.string().optional(),
  strict: z.boolean().optional(),
  parameters: z.record(z.any()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateToolResponseBodyFunction$ {
  /** @deprecated use `UpdateToolResponseBodyFunction$inboundSchema` instead. */
  export const inboundSchema = UpdateToolResponseBodyFunction$inboundSchema;
  /** @deprecated use `UpdateToolResponseBodyFunction$outboundSchema` instead. */
  export const outboundSchema = UpdateToolResponseBodyFunction$outboundSchema;
  /** @deprecated use `UpdateToolResponseBodyFunction$Outbound` instead. */
  export type Outbound = UpdateToolResponseBodyFunction$Outbound;
}

export function updateToolResponseBodyFunctionToJSON(
  updateToolResponseBodyFunction: UpdateToolResponseBodyFunction,
): string {
  return JSON.stringify(
    UpdateToolResponseBodyFunction$outboundSchema.parse(
      updateToolResponseBodyFunction,
    ),
  );
}

export function updateToolResponseBodyFunctionFromJSON(
  jsonString: string,
): SafeParseResult<UpdateToolResponseBodyFunction, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateToolResponseBodyFunction$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateToolResponseBodyFunction' from JSON`,
  );
}

/** @internal */
export const UpdateToolResponseBody1$inboundSchema: z.ZodType<
  UpdateToolResponseBody1,
  z.ZodTypeDef,
  unknown
> = z.object({
  _id: z.string().default("tool_01JRYR4D3M66TAE9749TPBG61A"),
  path: z.string(),
  key: z.string(),
  description: z.string(),
  created_by_id: z.string().optional(),
  updated_by_id: z.string().optional(),
  project_id: z.string(),
  workspace_id: z.string(),
  created: z.string(),
  updated: z.string(),
  status: UpdateToolResponseBodyStatus$inboundSchema,
  version_hash: z.string(),
  type: UpdateToolResponseBodyType$inboundSchema,
  function: z.lazy(() => UpdateToolResponseBodyFunction$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "_id": "id",
    "created_by_id": "createdById",
    "updated_by_id": "updatedById",
    "project_id": "projectId",
    "workspace_id": "workspaceId",
    "version_hash": "versionHash",
  });
});

/** @internal */
export type UpdateToolResponseBody1$Outbound = {
  _id: string;
  path: string;
  key: string;
  description: string;
  created_by_id?: string | undefined;
  updated_by_id?: string | undefined;
  project_id: string;
  workspace_id: string;
  created: string;
  updated: string;
  status: string;
  version_hash: string;
  type: string;
  function: UpdateToolResponseBodyFunction$Outbound;
};

/** @internal */
export const UpdateToolResponseBody1$outboundSchema: z.ZodType<
  UpdateToolResponseBody1$Outbound,
  z.ZodTypeDef,
  UpdateToolResponseBody1
> = z.object({
  id: z.string().default("tool_01JRYR4D3M66TAE9749TPBG61A"),
  path: z.string(),
  key: z.string(),
  description: z.string(),
  createdById: z.string().optional(),
  updatedById: z.string().optional(),
  projectId: z.string(),
  workspaceId: z.string(),
  created: z.string(),
  updated: z.string(),
  status: UpdateToolResponseBodyStatus$outboundSchema,
  versionHash: z.string(),
  type: UpdateToolResponseBodyType$outboundSchema,
  function: z.lazy(() => UpdateToolResponseBodyFunction$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    id: "_id",
    createdById: "created_by_id",
    updatedById: "updated_by_id",
    projectId: "project_id",
    workspaceId: "workspace_id",
    versionHash: "version_hash",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateToolResponseBody1$ {
  /** @deprecated use `UpdateToolResponseBody1$inboundSchema` instead. */
  export const inboundSchema = UpdateToolResponseBody1$inboundSchema;
  /** @deprecated use `UpdateToolResponseBody1$outboundSchema` instead. */
  export const outboundSchema = UpdateToolResponseBody1$outboundSchema;
  /** @deprecated use `UpdateToolResponseBody1$Outbound` instead. */
  export type Outbound = UpdateToolResponseBody1$Outbound;
}

export function updateToolResponseBody1ToJSON(
  updateToolResponseBody1: UpdateToolResponseBody1,
): string {
  return JSON.stringify(
    UpdateToolResponseBody1$outboundSchema.parse(updateToolResponseBody1),
  );
}

export function updateToolResponseBody1FromJSON(
  jsonString: string,
): SafeParseResult<UpdateToolResponseBody1, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateToolResponseBody1$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateToolResponseBody1' from JSON`,
  );
}

/** @internal */
export const UpdateToolResponseBody$inboundSchema: z.ZodType<
  UpdateToolResponseBody,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => UpdateToolResponseBody1$inboundSchema),
  z.lazy(() => UpdateToolResponseBody2$inboundSchema),
  z.lazy(() => UpdateToolResponseBody3$inboundSchema),
]);

/** @internal */
export type UpdateToolResponseBody$Outbound =
  | UpdateToolResponseBody1$Outbound
  | UpdateToolResponseBody2$Outbound
  | UpdateToolResponseBody3$Outbound;

/** @internal */
export const UpdateToolResponseBody$outboundSchema: z.ZodType<
  UpdateToolResponseBody$Outbound,
  z.ZodTypeDef,
  UpdateToolResponseBody
> = z.union([
  z.lazy(() => UpdateToolResponseBody1$outboundSchema),
  z.lazy(() => UpdateToolResponseBody2$outboundSchema),
  z.lazy(() => UpdateToolResponseBody3$outboundSchema),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateToolResponseBody$ {
  /** @deprecated use `UpdateToolResponseBody$inboundSchema` instead. */
  export const inboundSchema = UpdateToolResponseBody$inboundSchema;
  /** @deprecated use `UpdateToolResponseBody$outboundSchema` instead. */
  export const outboundSchema = UpdateToolResponseBody$outboundSchema;
  /** @deprecated use `UpdateToolResponseBody$Outbound` instead. */
  export type Outbound = UpdateToolResponseBody$Outbound;
}

export function updateToolResponseBodyToJSON(
  updateToolResponseBody: UpdateToolResponseBody,
): string {
  return JSON.stringify(
    UpdateToolResponseBody$outboundSchema.parse(updateToolResponseBody),
  );
}

export function updateToolResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<UpdateToolResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateToolResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateToolResponseBody' from JSON`,
  );
}
