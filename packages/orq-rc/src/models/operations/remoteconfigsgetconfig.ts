/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type RemoteConfigsGetConfigRequestBody = {
  /**
   * Remote configuration key
   */
  key: string;
  /**
   * Key-value pairs matching your data model, applied to each prompt key.
   */
  context?: { [k: string]: any } | undefined;
  /**
   * Key-value pairs to attach to the log generated by this request.
   */
  metadata?: { [k: string]: any } | undefined;
};

export const RemoteConfigsGetConfigType = {
  Boolean: "boolean",
  String: "string",
  Integer: "integer",
  Decimal: "decimal",
  List: "list",
  Json: "json",
  Deployment: "deployment",
} as const;
export type RemoteConfigsGetConfigType = ClosedEnum<
  typeof RemoteConfigsGetConfigType
>;

/**
 * An individual remote config
 */
export type RemoteConfigsGetConfigResponseBody = {
  type: RemoteConfigsGetConfigType;
  value?: any | undefined;
};

/** @internal */
export const RemoteConfigsGetConfigRequestBody$inboundSchema: z.ZodType<
  RemoteConfigsGetConfigRequestBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  key: z.string(),
  context: z.record(z.any()).optional(),
  metadata: z.record(z.any()).optional(),
});

/** @internal */
export type RemoteConfigsGetConfigRequestBody$Outbound = {
  key: string;
  context?: { [k: string]: any } | undefined;
  metadata?: { [k: string]: any } | undefined;
};

/** @internal */
export const RemoteConfigsGetConfigRequestBody$outboundSchema: z.ZodType<
  RemoteConfigsGetConfigRequestBody$Outbound,
  z.ZodTypeDef,
  RemoteConfigsGetConfigRequestBody
> = z.object({
  key: z.string(),
  context: z.record(z.any()).optional(),
  metadata: z.record(z.any()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RemoteConfigsGetConfigRequestBody$ {
  /** @deprecated use `RemoteConfigsGetConfigRequestBody$inboundSchema` instead. */
  export const inboundSchema = RemoteConfigsGetConfigRequestBody$inboundSchema;
  /** @deprecated use `RemoteConfigsGetConfigRequestBody$outboundSchema` instead. */
  export const outboundSchema =
    RemoteConfigsGetConfigRequestBody$outboundSchema;
  /** @deprecated use `RemoteConfigsGetConfigRequestBody$Outbound` instead. */
  export type Outbound = RemoteConfigsGetConfigRequestBody$Outbound;
}

export function remoteConfigsGetConfigRequestBodyToJSON(
  remoteConfigsGetConfigRequestBody: RemoteConfigsGetConfigRequestBody,
): string {
  return JSON.stringify(
    RemoteConfigsGetConfigRequestBody$outboundSchema.parse(
      remoteConfigsGetConfigRequestBody,
    ),
  );
}

export function remoteConfigsGetConfigRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<RemoteConfigsGetConfigRequestBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => RemoteConfigsGetConfigRequestBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RemoteConfigsGetConfigRequestBody' from JSON`,
  );
}

/** @internal */
export const RemoteConfigsGetConfigType$inboundSchema: z.ZodNativeEnum<
  typeof RemoteConfigsGetConfigType
> = z.nativeEnum(RemoteConfigsGetConfigType);

/** @internal */
export const RemoteConfigsGetConfigType$outboundSchema: z.ZodNativeEnum<
  typeof RemoteConfigsGetConfigType
> = RemoteConfigsGetConfigType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RemoteConfigsGetConfigType$ {
  /** @deprecated use `RemoteConfigsGetConfigType$inboundSchema` instead. */
  export const inboundSchema = RemoteConfigsGetConfigType$inboundSchema;
  /** @deprecated use `RemoteConfigsGetConfigType$outboundSchema` instead. */
  export const outboundSchema = RemoteConfigsGetConfigType$outboundSchema;
}

/** @internal */
export const RemoteConfigsGetConfigResponseBody$inboundSchema: z.ZodType<
  RemoteConfigsGetConfigResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: RemoteConfigsGetConfigType$inboundSchema,
  value: z.any().optional(),
});

/** @internal */
export type RemoteConfigsGetConfigResponseBody$Outbound = {
  type: string;
  value?: any | undefined;
};

/** @internal */
export const RemoteConfigsGetConfigResponseBody$outboundSchema: z.ZodType<
  RemoteConfigsGetConfigResponseBody$Outbound,
  z.ZodTypeDef,
  RemoteConfigsGetConfigResponseBody
> = z.object({
  type: RemoteConfigsGetConfigType$outboundSchema,
  value: z.any().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RemoteConfigsGetConfigResponseBody$ {
  /** @deprecated use `RemoteConfigsGetConfigResponseBody$inboundSchema` instead. */
  export const inboundSchema = RemoteConfigsGetConfigResponseBody$inboundSchema;
  /** @deprecated use `RemoteConfigsGetConfigResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    RemoteConfigsGetConfigResponseBody$outboundSchema;
  /** @deprecated use `RemoteConfigsGetConfigResponseBody$Outbound` instead. */
  export type Outbound = RemoteConfigsGetConfigResponseBody$Outbound;
}

export function remoteConfigsGetConfigResponseBodyToJSON(
  remoteConfigsGetConfigResponseBody: RemoteConfigsGetConfigResponseBody,
): string {
  return JSON.stringify(
    RemoteConfigsGetConfigResponseBody$outboundSchema.parse(
      remoteConfigsGetConfigResponseBody,
    ),
  );
}

export function remoteConfigsGetConfigResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<RemoteConfigsGetConfigResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      RemoteConfigsGetConfigResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RemoteConfigsGetConfigResponseBody' from JSON`,
  );
}
