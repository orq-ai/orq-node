/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * Filter contacts by tags
 */
export type QueryParamFilterBy = {
  tags?: Array<string> | undefined;
};

export type ListContactsRequest = {
  /**
   * A limit on the number of objects to be returned. Limit can range between 1 and 50, and the default is 10
   */
  limit?: number | undefined;
  /**
   * A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 20 objects, ending with `01JJ1HDHN79XAS7A01WB3HYSDB`, your subsequent call can include `after=01JJ1HDHN79XAS7A01WB3HYSDB` in order to fetch the next page of the list.
   */
  startingAfter?: string | undefined;
  /**
   * A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 20 objects, starting with `01JJ1HDHN79XAS7A01WB3HYSDB`, your subsequent call can include `before=01JJ1HDHN79XAS7A01WB3HYSDB` in order to fetch the previous page of the list.
   */
  endingBefore?: string | undefined;
  /**
   * Filter contacts by tags
   */
  filterBy?: QueryParamFilterBy | undefined;
  includeMetrics?: boolean | null | undefined;
};

export const ObjectT = {
  List: "list",
} as const;
export type ObjectT = ClosedEnum<typeof ObjectT>;

export type Metrics = {
  /**
   * Total cost in dollars of the last 30 days
   */
  totalCost: number;
  /**
   * Total tokens of the last 30 days
   */
  totalTokens: number;
  /**
   * Total requests of the last 30 days
   */
  totalRequests: number;
  /**
   * P50 error rate of the last 30 days
   */
  errorRate: number;
};

export type Data = {
  /**
   * Unique ULID (Universally Unique Lexicographically Sortable Identifier) for the contact
   */
  id: string;
  /**
   * Unique string value to identify the contact user in the customer's system. This should be the same ID you use in your system to reference this user.
   */
  externalId: string;
  /**
   * Display name or nickname of the contact user. This is typically shown in user interfaces.
   */
  displayName?: string | null | undefined;
  /**
   * Email address of the contact user
   */
  email?: string | null | undefined;
  /**
   * URL linking to the contact user's avatar image
   */
  avatarUrl?: string | null | undefined;
  /**
   * Array of tags associated with the contact. Useful for organizing and filtering contacts by categories, departments, or custom classifications.
   */
  tags?: Array<string> | undefined;
  /**
   * Additional custom metadata associated with the contact as key-value pairs. Use this to store any extra information specific to your application.
   */
  metadata?: { [k: string]: any } | undefined;
  /**
   * The date and time the resource was created
   */
  created?: Date | undefined;
  /**
   * The date and time the resource was last updated
   */
  updated?: Date | undefined;
  metrics: Metrics;
};

/**
 * List of contacts
 */
export type ListContactsResponseBody = {
  object: ObjectT;
  data: Array<Data>;
  hasMore: boolean;
};

/** @internal */
export const QueryParamFilterBy$inboundSchema: z.ZodType<
  QueryParamFilterBy,
  z.ZodTypeDef,
  unknown
> = z.object({
  tags: z.array(z.string()).optional(),
});

/** @internal */
export type QueryParamFilterBy$Outbound = {
  tags?: Array<string> | undefined;
};

/** @internal */
export const QueryParamFilterBy$outboundSchema: z.ZodType<
  QueryParamFilterBy$Outbound,
  z.ZodTypeDef,
  QueryParamFilterBy
> = z.object({
  tags: z.array(z.string()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace QueryParamFilterBy$ {
  /** @deprecated use `QueryParamFilterBy$inboundSchema` instead. */
  export const inboundSchema = QueryParamFilterBy$inboundSchema;
  /** @deprecated use `QueryParamFilterBy$outboundSchema` instead. */
  export const outboundSchema = QueryParamFilterBy$outboundSchema;
  /** @deprecated use `QueryParamFilterBy$Outbound` instead. */
  export type Outbound = QueryParamFilterBy$Outbound;
}

export function queryParamFilterByToJSON(
  queryParamFilterBy: QueryParamFilterBy,
): string {
  return JSON.stringify(
    QueryParamFilterBy$outboundSchema.parse(queryParamFilterBy),
  );
}

export function queryParamFilterByFromJSON(
  jsonString: string,
): SafeParseResult<QueryParamFilterBy, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => QueryParamFilterBy$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'QueryParamFilterBy' from JSON`,
  );
}

/** @internal */
export const ListContactsRequest$inboundSchema: z.ZodType<
  ListContactsRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  limit: z.number().default(10),
  starting_after: z.string().optional(),
  ending_before: z.string().optional(),
  filter_by: z.lazy(() => QueryParamFilterBy$inboundSchema).optional(),
  include_metrics: z.nullable(z.boolean().default(false)),
}).transform((v) => {
  return remap$(v, {
    "starting_after": "startingAfter",
    "ending_before": "endingBefore",
    "filter_by": "filterBy",
    "include_metrics": "includeMetrics",
  });
});

/** @internal */
export type ListContactsRequest$Outbound = {
  limit: number;
  starting_after?: string | undefined;
  ending_before?: string | undefined;
  filter_by?: QueryParamFilterBy$Outbound | undefined;
  include_metrics: boolean | null;
};

/** @internal */
export const ListContactsRequest$outboundSchema: z.ZodType<
  ListContactsRequest$Outbound,
  z.ZodTypeDef,
  ListContactsRequest
> = z.object({
  limit: z.number().default(10),
  startingAfter: z.string().optional(),
  endingBefore: z.string().optional(),
  filterBy: z.lazy(() => QueryParamFilterBy$outboundSchema).optional(),
  includeMetrics: z.nullable(z.boolean().default(false)),
}).transform((v) => {
  return remap$(v, {
    startingAfter: "starting_after",
    endingBefore: "ending_before",
    filterBy: "filter_by",
    includeMetrics: "include_metrics",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListContactsRequest$ {
  /** @deprecated use `ListContactsRequest$inboundSchema` instead. */
  export const inboundSchema = ListContactsRequest$inboundSchema;
  /** @deprecated use `ListContactsRequest$outboundSchema` instead. */
  export const outboundSchema = ListContactsRequest$outboundSchema;
  /** @deprecated use `ListContactsRequest$Outbound` instead. */
  export type Outbound = ListContactsRequest$Outbound;
}

export function listContactsRequestToJSON(
  listContactsRequest: ListContactsRequest,
): string {
  return JSON.stringify(
    ListContactsRequest$outboundSchema.parse(listContactsRequest),
  );
}

export function listContactsRequestFromJSON(
  jsonString: string,
): SafeParseResult<ListContactsRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListContactsRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListContactsRequest' from JSON`,
  );
}

/** @internal */
export const ObjectT$inboundSchema: z.ZodNativeEnum<typeof ObjectT> = z
  .nativeEnum(ObjectT);

/** @internal */
export const ObjectT$outboundSchema: z.ZodNativeEnum<typeof ObjectT> =
  ObjectT$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ObjectT$ {
  /** @deprecated use `ObjectT$inboundSchema` instead. */
  export const inboundSchema = ObjectT$inboundSchema;
  /** @deprecated use `ObjectT$outboundSchema` instead. */
  export const outboundSchema = ObjectT$outboundSchema;
}

/** @internal */
export const Metrics$inboundSchema: z.ZodType<Metrics, z.ZodTypeDef, unknown> =
  z.object({
    total_cost: z.number(),
    total_tokens: z.number(),
    total_requests: z.number(),
    error_rate: z.number(),
  }).transform((v) => {
    return remap$(v, {
      "total_cost": "totalCost",
      "total_tokens": "totalTokens",
      "total_requests": "totalRequests",
      "error_rate": "errorRate",
    });
  });

/** @internal */
export type Metrics$Outbound = {
  total_cost: number;
  total_tokens: number;
  total_requests: number;
  error_rate: number;
};

/** @internal */
export const Metrics$outboundSchema: z.ZodType<
  Metrics$Outbound,
  z.ZodTypeDef,
  Metrics
> = z.object({
  totalCost: z.number(),
  totalTokens: z.number(),
  totalRequests: z.number(),
  errorRate: z.number(),
}).transform((v) => {
  return remap$(v, {
    totalCost: "total_cost",
    totalTokens: "total_tokens",
    totalRequests: "total_requests",
    errorRate: "error_rate",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Metrics$ {
  /** @deprecated use `Metrics$inboundSchema` instead. */
  export const inboundSchema = Metrics$inboundSchema;
  /** @deprecated use `Metrics$outboundSchema` instead. */
  export const outboundSchema = Metrics$outboundSchema;
  /** @deprecated use `Metrics$Outbound` instead. */
  export type Outbound = Metrics$Outbound;
}

export function metricsToJSON(metrics: Metrics): string {
  return JSON.stringify(Metrics$outboundSchema.parse(metrics));
}

export function metricsFromJSON(
  jsonString: string,
): SafeParseResult<Metrics, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Metrics$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Metrics' from JSON`,
  );
}

/** @internal */
export const Data$inboundSchema: z.ZodType<Data, z.ZodTypeDef, unknown> = z
  .object({
    _id: z.string(),
    external_id: z.string(),
    display_name: z.nullable(z.string()).optional(),
    email: z.nullable(z.string()).optional(),
    avatar_url: z.nullable(z.string()).optional(),
    tags: z.array(z.string()).optional(),
    metadata: z.record(z.any()).optional(),
    created: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
    updated: z.string().datetime({ offset: true }).default(
      "2025-06-10T02:00:58.492Z",
    ).transform(v => new Date(v)),
    metrics: z.lazy(() => Metrics$inboundSchema),
  }).transform((v) => {
    return remap$(v, {
      "_id": "id",
      "external_id": "externalId",
      "display_name": "displayName",
      "avatar_url": "avatarUrl",
    });
  });

/** @internal */
export type Data$Outbound = {
  _id: string;
  external_id: string;
  display_name?: string | null | undefined;
  email?: string | null | undefined;
  avatar_url?: string | null | undefined;
  tags?: Array<string> | undefined;
  metadata?: { [k: string]: any } | undefined;
  created?: string | undefined;
  updated: string;
  metrics: Metrics$Outbound;
};

/** @internal */
export const Data$outboundSchema: z.ZodType<Data$Outbound, z.ZodTypeDef, Data> =
  z.object({
    id: z.string(),
    externalId: z.string(),
    displayName: z.nullable(z.string()).optional(),
    email: z.nullable(z.string()).optional(),
    avatarUrl: z.nullable(z.string()).optional(),
    tags: z.array(z.string()).optional(),
    metadata: z.record(z.any()).optional(),
    created: z.date().transform(v => v.toISOString()).optional(),
    updated: z.date().default(() => new Date("2025-06-10T02:00:58.492Z"))
      .transform(v => v.toISOString()),
    metrics: z.lazy(() => Metrics$outboundSchema),
  }).transform((v) => {
    return remap$(v, {
      id: "_id",
      externalId: "external_id",
      displayName: "display_name",
      avatarUrl: "avatar_url",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Data$ {
  /** @deprecated use `Data$inboundSchema` instead. */
  export const inboundSchema = Data$inboundSchema;
  /** @deprecated use `Data$outboundSchema` instead. */
  export const outboundSchema = Data$outboundSchema;
  /** @deprecated use `Data$Outbound` instead. */
  export type Outbound = Data$Outbound;
}

export function dataToJSON(data: Data): string {
  return JSON.stringify(Data$outboundSchema.parse(data));
}

export function dataFromJSON(
  jsonString: string,
): SafeParseResult<Data, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Data$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Data' from JSON`,
  );
}

/** @internal */
export const ListContactsResponseBody$inboundSchema: z.ZodType<
  ListContactsResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  object: ObjectT$inboundSchema,
  data: z.array(z.lazy(() => Data$inboundSchema)),
  has_more: z.boolean(),
}).transform((v) => {
  return remap$(v, {
    "has_more": "hasMore",
  });
});

/** @internal */
export type ListContactsResponseBody$Outbound = {
  object: string;
  data: Array<Data$Outbound>;
  has_more: boolean;
};

/** @internal */
export const ListContactsResponseBody$outboundSchema: z.ZodType<
  ListContactsResponseBody$Outbound,
  z.ZodTypeDef,
  ListContactsResponseBody
> = z.object({
  object: ObjectT$outboundSchema,
  data: z.array(z.lazy(() => Data$outboundSchema)),
  hasMore: z.boolean(),
}).transform((v) => {
  return remap$(v, {
    hasMore: "has_more",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListContactsResponseBody$ {
  /** @deprecated use `ListContactsResponseBody$inboundSchema` instead. */
  export const inboundSchema = ListContactsResponseBody$inboundSchema;
  /** @deprecated use `ListContactsResponseBody$outboundSchema` instead. */
  export const outboundSchema = ListContactsResponseBody$outboundSchema;
  /** @deprecated use `ListContactsResponseBody$Outbound` instead. */
  export type Outbound = ListContactsResponseBody$Outbound;
}

export function listContactsResponseBodyToJSON(
  listContactsResponseBody: ListContactsResponseBody,
): string {
  return JSON.stringify(
    ListContactsResponseBody$outboundSchema.parse(listContactsResponseBody),
  );
}

export function listContactsResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<ListContactsResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListContactsResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListContactsResponseBody' from JSON`,
  );
}
