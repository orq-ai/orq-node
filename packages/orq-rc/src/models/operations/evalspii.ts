/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type EvalsPiiRequestBody = {
  query: string;
  output: string;
  model: string;
};

export type EvalsPiiEvalsValue = number | boolean | string;

export type EvalsPiiOriginalValue = number | boolean | string;

export type EvalsPiiValue = {
  value: number | boolean | string;
  explanation?: string | null | undefined;
  originalValue?: number | boolean | string | null | undefined;
  originalExplanation?: string | null | undefined;
};

/**
 * Returns the result of the evaluator run
 */
export type EvalsPiiResponseBody = {
  value: EvalsPiiValue | null;
};

/** @internal */
export const EvalsPiiRequestBody$inboundSchema: z.ZodType<
  EvalsPiiRequestBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  query: z.string(),
  output: z.string(),
  model: z.string(),
});

/** @internal */
export type EvalsPiiRequestBody$Outbound = {
  query: string;
  output: string;
  model: string;
};

/** @internal */
export const EvalsPiiRequestBody$outboundSchema: z.ZodType<
  EvalsPiiRequestBody$Outbound,
  z.ZodTypeDef,
  EvalsPiiRequestBody
> = z.object({
  query: z.string(),
  output: z.string(),
  model: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EvalsPiiRequestBody$ {
  /** @deprecated use `EvalsPiiRequestBody$inboundSchema` instead. */
  export const inboundSchema = EvalsPiiRequestBody$inboundSchema;
  /** @deprecated use `EvalsPiiRequestBody$outboundSchema` instead. */
  export const outboundSchema = EvalsPiiRequestBody$outboundSchema;
  /** @deprecated use `EvalsPiiRequestBody$Outbound` instead. */
  export type Outbound = EvalsPiiRequestBody$Outbound;
}

export function evalsPiiRequestBodyToJSON(
  evalsPiiRequestBody: EvalsPiiRequestBody,
): string {
  return JSON.stringify(
    EvalsPiiRequestBody$outboundSchema.parse(evalsPiiRequestBody),
  );
}

export function evalsPiiRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<EvalsPiiRequestBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => EvalsPiiRequestBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'EvalsPiiRequestBody' from JSON`,
  );
}

/** @internal */
export const EvalsPiiEvalsValue$inboundSchema: z.ZodType<
  EvalsPiiEvalsValue,
  z.ZodTypeDef,
  unknown
> = z.union([z.number(), z.boolean(), z.string()]);

/** @internal */
export type EvalsPiiEvalsValue$Outbound = number | boolean | string;

/** @internal */
export const EvalsPiiEvalsValue$outboundSchema: z.ZodType<
  EvalsPiiEvalsValue$Outbound,
  z.ZodTypeDef,
  EvalsPiiEvalsValue
> = z.union([z.number(), z.boolean(), z.string()]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EvalsPiiEvalsValue$ {
  /** @deprecated use `EvalsPiiEvalsValue$inboundSchema` instead. */
  export const inboundSchema = EvalsPiiEvalsValue$inboundSchema;
  /** @deprecated use `EvalsPiiEvalsValue$outboundSchema` instead. */
  export const outboundSchema = EvalsPiiEvalsValue$outboundSchema;
  /** @deprecated use `EvalsPiiEvalsValue$Outbound` instead. */
  export type Outbound = EvalsPiiEvalsValue$Outbound;
}

export function evalsPiiEvalsValueToJSON(
  evalsPiiEvalsValue: EvalsPiiEvalsValue,
): string {
  return JSON.stringify(
    EvalsPiiEvalsValue$outboundSchema.parse(evalsPiiEvalsValue),
  );
}

export function evalsPiiEvalsValueFromJSON(
  jsonString: string,
): SafeParseResult<EvalsPiiEvalsValue, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => EvalsPiiEvalsValue$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'EvalsPiiEvalsValue' from JSON`,
  );
}

/** @internal */
export const EvalsPiiOriginalValue$inboundSchema: z.ZodType<
  EvalsPiiOriginalValue,
  z.ZodTypeDef,
  unknown
> = z.union([z.number(), z.boolean(), z.string()]);

/** @internal */
export type EvalsPiiOriginalValue$Outbound = number | boolean | string;

/** @internal */
export const EvalsPiiOriginalValue$outboundSchema: z.ZodType<
  EvalsPiiOriginalValue$Outbound,
  z.ZodTypeDef,
  EvalsPiiOriginalValue
> = z.union([z.number(), z.boolean(), z.string()]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EvalsPiiOriginalValue$ {
  /** @deprecated use `EvalsPiiOriginalValue$inboundSchema` instead. */
  export const inboundSchema = EvalsPiiOriginalValue$inboundSchema;
  /** @deprecated use `EvalsPiiOriginalValue$outboundSchema` instead. */
  export const outboundSchema = EvalsPiiOriginalValue$outboundSchema;
  /** @deprecated use `EvalsPiiOriginalValue$Outbound` instead. */
  export type Outbound = EvalsPiiOriginalValue$Outbound;
}

export function evalsPiiOriginalValueToJSON(
  evalsPiiOriginalValue: EvalsPiiOriginalValue,
): string {
  return JSON.stringify(
    EvalsPiiOriginalValue$outboundSchema.parse(evalsPiiOriginalValue),
  );
}

export function evalsPiiOriginalValueFromJSON(
  jsonString: string,
): SafeParseResult<EvalsPiiOriginalValue, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => EvalsPiiOriginalValue$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'EvalsPiiOriginalValue' from JSON`,
  );
}

/** @internal */
export const EvalsPiiValue$inboundSchema: z.ZodType<
  EvalsPiiValue,
  z.ZodTypeDef,
  unknown
> = z.object({
  value: z.union([z.number(), z.boolean(), z.string()]),
  explanation: z.nullable(z.string()).optional(),
  original_value: z.nullable(z.union([z.number(), z.boolean(), z.string()]))
    .optional(),
  original_explanation: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    "original_value": "originalValue",
    "original_explanation": "originalExplanation",
  });
});

/** @internal */
export type EvalsPiiValue$Outbound = {
  value: number | boolean | string;
  explanation?: string | null | undefined;
  original_value?: number | boolean | string | null | undefined;
  original_explanation?: string | null | undefined;
};

/** @internal */
export const EvalsPiiValue$outboundSchema: z.ZodType<
  EvalsPiiValue$Outbound,
  z.ZodTypeDef,
  EvalsPiiValue
> = z.object({
  value: z.union([z.number(), z.boolean(), z.string()]),
  explanation: z.nullable(z.string()).optional(),
  originalValue: z.nullable(z.union([z.number(), z.boolean(), z.string()]))
    .optional(),
  originalExplanation: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    originalValue: "original_value",
    originalExplanation: "original_explanation",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EvalsPiiValue$ {
  /** @deprecated use `EvalsPiiValue$inboundSchema` instead. */
  export const inboundSchema = EvalsPiiValue$inboundSchema;
  /** @deprecated use `EvalsPiiValue$outboundSchema` instead. */
  export const outboundSchema = EvalsPiiValue$outboundSchema;
  /** @deprecated use `EvalsPiiValue$Outbound` instead. */
  export type Outbound = EvalsPiiValue$Outbound;
}

export function evalsPiiValueToJSON(evalsPiiValue: EvalsPiiValue): string {
  return JSON.stringify(EvalsPiiValue$outboundSchema.parse(evalsPiiValue));
}

export function evalsPiiValueFromJSON(
  jsonString: string,
): SafeParseResult<EvalsPiiValue, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => EvalsPiiValue$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'EvalsPiiValue' from JSON`,
  );
}

/** @internal */
export const EvalsPiiResponseBody$inboundSchema: z.ZodType<
  EvalsPiiResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  value: z.nullable(z.lazy(() => EvalsPiiValue$inboundSchema)),
});

/** @internal */
export type EvalsPiiResponseBody$Outbound = {
  value: EvalsPiiValue$Outbound | null;
};

/** @internal */
export const EvalsPiiResponseBody$outboundSchema: z.ZodType<
  EvalsPiiResponseBody$Outbound,
  z.ZodTypeDef,
  EvalsPiiResponseBody
> = z.object({
  value: z.nullable(z.lazy(() => EvalsPiiValue$outboundSchema)),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EvalsPiiResponseBody$ {
  /** @deprecated use `EvalsPiiResponseBody$inboundSchema` instead. */
  export const inboundSchema = EvalsPiiResponseBody$inboundSchema;
  /** @deprecated use `EvalsPiiResponseBody$outboundSchema` instead. */
  export const outboundSchema = EvalsPiiResponseBody$outboundSchema;
  /** @deprecated use `EvalsPiiResponseBody$Outbound` instead. */
  export type Outbound = EvalsPiiResponseBody$Outbound;
}

export function evalsPiiResponseBodyToJSON(
  evalsPiiResponseBody: EvalsPiiResponseBody,
): string {
  return JSON.stringify(
    EvalsPiiResponseBody$outboundSchema.parse(evalsPiiResponseBody),
  );
}

export function evalsPiiResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<EvalsPiiResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => EvalsPiiResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'EvalsPiiResponseBody' from JSON`,
  );
}
