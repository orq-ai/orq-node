/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export const Six = {
  ElevenlabsElevenFlashV2: "elevenlabs/eleven_flash_v2",
} as const;
export type Six = ClosedEnum<typeof Six>;

export const Five = {
  ElevenlabsElevenFlashV25: "elevenlabs/eleven_flash_v2_5",
} as const;
export type Five = ClosedEnum<typeof Five>;

export const Model4 = {
  ElevenlabsElevenMultilingualV2: "elevenlabs/eleven_multilingual_v2",
} as const;
export type Model4 = ClosedEnum<typeof Model4>;

export const Model3 = {
  ElevenlabsElevenTurboV25: "elevenlabs/eleven_turbo_v2_5",
} as const;
export type Model3 = ClosedEnum<typeof Model3>;

export const Model2 = {
  OpenaiTts1Hd: "openai/tts-1-hd",
} as const;
export type Model2 = ClosedEnum<typeof Model2>;

export const Model1 = {
  OpenaiTts1: "openai/tts-1",
} as const;
export type Model1 = ClosedEnum<typeof Model1>;

/**
 * ID of the model to use
 */
export type Model = Model1 | Model2 | Model3 | Model4 | Five | Six;

/**
 * The format to audio in. Supported formats are `mp3`, `opus`, `aac`, `flac`, `wav`, and `pcm`. If a format is provided but not supported by the provider, the response will be in the default format. When the provided format is not supported by the provider, the response will be in the default format.
 */
export const PostV2ProxyAudioSpeechResponseFormat = {
  Mp3: "mp3",
  Opus: "opus",
  Aac: "aac",
  Flac: "flac",
  Wav: "wav",
  Pcm: "pcm",
} as const;
/**
 * The format to audio in. Supported formats are `mp3`, `opus`, `aac`, `flac`, `wav`, and `pcm`. If a format is provided but not supported by the provider, the response will be in the default format. When the provided format is not supported by the provider, the response will be in the default format.
 */
export type PostV2ProxyAudioSpeechResponseFormat = ClosedEnum<
  typeof PostV2ProxyAudioSpeechResponseFormat
>;

/**
 * input
 */
export type PostV2ProxyAudioSpeechRequestBody = {
  /**
   * The text to generate audio for. The maximum length is 4096 characters
   */
  input: string;
  /**
   * ID of the model to use
   */
  model: Model1 | Model2 | Model3 | Model4 | Five | Six;
  /**
   * The voice to use.
   *
   * @remarks
   *
   *  Available voices for OpenAI
   *
   *  `alloy`, `echo`, `fable`, `onyx`, `nova`, and `shimmer`
   *
   *  Available voices for ElevenLabs
   *
   *  `aria`, `roger`, `sarah`, `laura`, `charlie`, `george`, `callum`, `river`, `liam`, `charlotte`, `alice`, `matilda`, `will`, `jessica`, `eric`, `chris`, `brian`, `daniel`, `lily`, `bill`
   */
  voice: string;
  /**
   * The format to audio in. Supported formats are `mp3`, `opus`, `aac`, `flac`, `wav`, and `pcm`. If a format is provided but not supported by the provider, the response will be in the default format. When the provided format is not supported by the provider, the response will be in the default format.
   */
  responseFormat?: PostV2ProxyAudioSpeechResponseFormat | undefined;
  /**
   * The speed of the generated audio.
   */
  speed?: number | undefined;
};

/** @internal */
export const Six$inboundSchema: z.ZodNativeEnum<typeof Six> = z.nativeEnum(Six);

/** @internal */
export const Six$outboundSchema: z.ZodNativeEnum<typeof Six> =
  Six$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Six$ {
  /** @deprecated use `Six$inboundSchema` instead. */
  export const inboundSchema = Six$inboundSchema;
  /** @deprecated use `Six$outboundSchema` instead. */
  export const outboundSchema = Six$outboundSchema;
}

/** @internal */
export const Five$inboundSchema: z.ZodNativeEnum<typeof Five> = z.nativeEnum(
  Five,
);

/** @internal */
export const Five$outboundSchema: z.ZodNativeEnum<typeof Five> =
  Five$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Five$ {
  /** @deprecated use `Five$inboundSchema` instead. */
  export const inboundSchema = Five$inboundSchema;
  /** @deprecated use `Five$outboundSchema` instead. */
  export const outboundSchema = Five$outboundSchema;
}

/** @internal */
export const Model4$inboundSchema: z.ZodNativeEnum<typeof Model4> = z
  .nativeEnum(Model4);

/** @internal */
export const Model4$outboundSchema: z.ZodNativeEnum<typeof Model4> =
  Model4$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Model4$ {
  /** @deprecated use `Model4$inboundSchema` instead. */
  export const inboundSchema = Model4$inboundSchema;
  /** @deprecated use `Model4$outboundSchema` instead. */
  export const outboundSchema = Model4$outboundSchema;
}

/** @internal */
export const Model3$inboundSchema: z.ZodNativeEnum<typeof Model3> = z
  .nativeEnum(Model3);

/** @internal */
export const Model3$outboundSchema: z.ZodNativeEnum<typeof Model3> =
  Model3$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Model3$ {
  /** @deprecated use `Model3$inboundSchema` instead. */
  export const inboundSchema = Model3$inboundSchema;
  /** @deprecated use `Model3$outboundSchema` instead. */
  export const outboundSchema = Model3$outboundSchema;
}

/** @internal */
export const Model2$inboundSchema: z.ZodNativeEnum<typeof Model2> = z
  .nativeEnum(Model2);

/** @internal */
export const Model2$outboundSchema: z.ZodNativeEnum<typeof Model2> =
  Model2$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Model2$ {
  /** @deprecated use `Model2$inboundSchema` instead. */
  export const inboundSchema = Model2$inboundSchema;
  /** @deprecated use `Model2$outboundSchema` instead. */
  export const outboundSchema = Model2$outboundSchema;
}

/** @internal */
export const Model1$inboundSchema: z.ZodNativeEnum<typeof Model1> = z
  .nativeEnum(Model1);

/** @internal */
export const Model1$outboundSchema: z.ZodNativeEnum<typeof Model1> =
  Model1$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Model1$ {
  /** @deprecated use `Model1$inboundSchema` instead. */
  export const inboundSchema = Model1$inboundSchema;
  /** @deprecated use `Model1$outboundSchema` instead. */
  export const outboundSchema = Model1$outboundSchema;
}

/** @internal */
export const Model$inboundSchema: z.ZodType<Model, z.ZodTypeDef, unknown> = z
  .union([
    Model1$inboundSchema,
    Model2$inboundSchema,
    Model3$inboundSchema,
    Model4$inboundSchema,
    Five$inboundSchema,
    Six$inboundSchema,
  ]);

/** @internal */
export type Model$Outbound =
  | string
  | string
  | string
  | string
  | string
  | string;

/** @internal */
export const Model$outboundSchema: z.ZodType<
  Model$Outbound,
  z.ZodTypeDef,
  Model
> = z.union([
  Model1$outboundSchema,
  Model2$outboundSchema,
  Model3$outboundSchema,
  Model4$outboundSchema,
  Five$outboundSchema,
  Six$outboundSchema,
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Model$ {
  /** @deprecated use `Model$inboundSchema` instead. */
  export const inboundSchema = Model$inboundSchema;
  /** @deprecated use `Model$outboundSchema` instead. */
  export const outboundSchema = Model$outboundSchema;
  /** @deprecated use `Model$Outbound` instead. */
  export type Outbound = Model$Outbound;
}

export function modelToJSON(model: Model): string {
  return JSON.stringify(Model$outboundSchema.parse(model));
}

export function modelFromJSON(
  jsonString: string,
): SafeParseResult<Model, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Model$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Model' from JSON`,
  );
}

/** @internal */
export const PostV2ProxyAudioSpeechResponseFormat$inboundSchema:
  z.ZodNativeEnum<typeof PostV2ProxyAudioSpeechResponseFormat> = z.nativeEnum(
    PostV2ProxyAudioSpeechResponseFormat,
  );

/** @internal */
export const PostV2ProxyAudioSpeechResponseFormat$outboundSchema:
  z.ZodNativeEnum<typeof PostV2ProxyAudioSpeechResponseFormat> =
    PostV2ProxyAudioSpeechResponseFormat$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostV2ProxyAudioSpeechResponseFormat$ {
  /** @deprecated use `PostV2ProxyAudioSpeechResponseFormat$inboundSchema` instead. */
  export const inboundSchema =
    PostV2ProxyAudioSpeechResponseFormat$inboundSchema;
  /** @deprecated use `PostV2ProxyAudioSpeechResponseFormat$outboundSchema` instead. */
  export const outboundSchema =
    PostV2ProxyAudioSpeechResponseFormat$outboundSchema;
}

/** @internal */
export const PostV2ProxyAudioSpeechRequestBody$inboundSchema: z.ZodType<
  PostV2ProxyAudioSpeechRequestBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  input: z.string(),
  model: z.union([
    Model1$inboundSchema,
    Model2$inboundSchema,
    Model3$inboundSchema,
    Model4$inboundSchema,
    Five$inboundSchema,
    Six$inboundSchema,
  ]),
  voice: z.string(),
  response_format: PostV2ProxyAudioSpeechResponseFormat$inboundSchema.default(
    "mp3",
  ),
  speed: z.number().default(1),
}).transform((v) => {
  return remap$(v, {
    "response_format": "responseFormat",
  });
});

/** @internal */
export type PostV2ProxyAudioSpeechRequestBody$Outbound = {
  input: string;
  model: string | string | string | string | string | string;
  voice: string;
  response_format: string;
  speed: number;
};

/** @internal */
export const PostV2ProxyAudioSpeechRequestBody$outboundSchema: z.ZodType<
  PostV2ProxyAudioSpeechRequestBody$Outbound,
  z.ZodTypeDef,
  PostV2ProxyAudioSpeechRequestBody
> = z.object({
  input: z.string(),
  model: z.union([
    Model1$outboundSchema,
    Model2$outboundSchema,
    Model3$outboundSchema,
    Model4$outboundSchema,
    Five$outboundSchema,
    Six$outboundSchema,
  ]),
  voice: z.string(),
  responseFormat: PostV2ProxyAudioSpeechResponseFormat$outboundSchema.default(
    "mp3",
  ),
  speed: z.number().default(1),
}).transform((v) => {
  return remap$(v, {
    responseFormat: "response_format",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostV2ProxyAudioSpeechRequestBody$ {
  /** @deprecated use `PostV2ProxyAudioSpeechRequestBody$inboundSchema` instead. */
  export const inboundSchema = PostV2ProxyAudioSpeechRequestBody$inboundSchema;
  /** @deprecated use `PostV2ProxyAudioSpeechRequestBody$outboundSchema` instead. */
  export const outboundSchema =
    PostV2ProxyAudioSpeechRequestBody$outboundSchema;
  /** @deprecated use `PostV2ProxyAudioSpeechRequestBody$Outbound` instead. */
  export type Outbound = PostV2ProxyAudioSpeechRequestBody$Outbound;
}

export function postV2ProxyAudioSpeechRequestBodyToJSON(
  postV2ProxyAudioSpeechRequestBody: PostV2ProxyAudioSpeechRequestBody,
): string {
  return JSON.stringify(
    PostV2ProxyAudioSpeechRequestBody$outboundSchema.parse(
      postV2ProxyAudioSpeechRequestBody,
    ),
  );
}

export function postV2ProxyAudioSpeechRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<PostV2ProxyAudioSpeechRequestBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PostV2ProxyAudioSpeechRequestBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PostV2ProxyAudioSpeechRequestBody' from JSON`,
  );
}
