/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type DeleteToolRequest = {
  toolId: string;
};

/** @internal */
export const DeleteToolRequest$inboundSchema: z.ZodType<
  DeleteToolRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  tool_id: z.string(),
}).transform((v) => {
  return remap$(v, {
    "tool_id": "toolId",
  });
});

/** @internal */
export type DeleteToolRequest$Outbound = {
  tool_id: string;
};

/** @internal */
export const DeleteToolRequest$outboundSchema: z.ZodType<
  DeleteToolRequest$Outbound,
  z.ZodTypeDef,
  DeleteToolRequest
> = z.object({
  toolId: z.string(),
}).transform((v) => {
  return remap$(v, {
    toolId: "tool_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeleteToolRequest$ {
  /** @deprecated use `DeleteToolRequest$inboundSchema` instead. */
  export const inboundSchema = DeleteToolRequest$inboundSchema;
  /** @deprecated use `DeleteToolRequest$outboundSchema` instead. */
  export const outboundSchema = DeleteToolRequest$outboundSchema;
  /** @deprecated use `DeleteToolRequest$Outbound` instead. */
  export type Outbound = DeleteToolRequest$Outbound;
}

export function deleteToolRequestToJSON(
  deleteToolRequest: DeleteToolRequest,
): string {
  return JSON.stringify(
    DeleteToolRequest$outboundSchema.parse(deleteToolRequest),
  );
}

export function deleteToolRequestFromJSON(
  jsonString: string,
): SafeParseResult<DeleteToolRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DeleteToolRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DeleteToolRequest' from JSON`,
  );
}
