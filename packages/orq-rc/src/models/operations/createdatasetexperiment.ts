/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export const CreateDatasetExperimentType = {
  DatasetExperiment: "dataset_experiment",
} as const;
export type CreateDatasetExperimentType = ClosedEnum<
  typeof CreateDatasetExperimentType
>;

export type CreateDatasetExperimentRequestBody = {
  /**
   * The unique key of the experiment
   */
  experimentKey: string;
  /**
   * The list of evaluators to use for the experiment. You can apply multiple evaluators to the same experiment. By default we always consider latency and cost as evaluators.
   */
  evaluators?: Array<string> | undefined;
  /**
   * The path where the experiment needs to be stored. If not provided, the experiment will be stored in the same path of the dataset used for the experiment.
   */
  path?: string | undefined;
  /**
   * The list of model ids to use for the experiment.
   */
  modelIds?: Array<string> | undefined;
  type: CreateDatasetExperimentType;
};

export type CreateDatasetExperimentRequest = {
  datasetId: string;
  requestBody?: CreateDatasetExperimentRequestBody | undefined;
};

/**
 * Experiment created
 */
export type CreateDatasetExperimentResponseBody = {
  /**
   * The url of the experiment run that was just created
   */
  url: string;
  /**
   * The unique identifier of the experiment
   */
  experimentId: string;
  /**
   * The unique identifier of the experiment run
   */
  experimentRunId: string;
};

/** @internal */
export const CreateDatasetExperimentType$inboundSchema: z.ZodNativeEnum<
  typeof CreateDatasetExperimentType
> = z.nativeEnum(CreateDatasetExperimentType);

/** @internal */
export const CreateDatasetExperimentType$outboundSchema: z.ZodNativeEnum<
  typeof CreateDatasetExperimentType
> = CreateDatasetExperimentType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateDatasetExperimentType$ {
  /** @deprecated use `CreateDatasetExperimentType$inboundSchema` instead. */
  export const inboundSchema = CreateDatasetExperimentType$inboundSchema;
  /** @deprecated use `CreateDatasetExperimentType$outboundSchema` instead. */
  export const outboundSchema = CreateDatasetExperimentType$outboundSchema;
}

/** @internal */
export const CreateDatasetExperimentRequestBody$inboundSchema: z.ZodType<
  CreateDatasetExperimentRequestBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  experiment_key: z.string(),
  evaluators: z.array(z.string()).optional(),
  path: z.string().optional(),
  model_ids: z.array(z.string()).optional(),
  type: CreateDatasetExperimentType$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "experiment_key": "experimentKey",
    "model_ids": "modelIds",
  });
});

/** @internal */
export type CreateDatasetExperimentRequestBody$Outbound = {
  experiment_key: string;
  evaluators?: Array<string> | undefined;
  path?: string | undefined;
  model_ids?: Array<string> | undefined;
  type: string;
};

/** @internal */
export const CreateDatasetExperimentRequestBody$outboundSchema: z.ZodType<
  CreateDatasetExperimentRequestBody$Outbound,
  z.ZodTypeDef,
  CreateDatasetExperimentRequestBody
> = z.object({
  experimentKey: z.string(),
  evaluators: z.array(z.string()).optional(),
  path: z.string().optional(),
  modelIds: z.array(z.string()).optional(),
  type: CreateDatasetExperimentType$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    experimentKey: "experiment_key",
    modelIds: "model_ids",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateDatasetExperimentRequestBody$ {
  /** @deprecated use `CreateDatasetExperimentRequestBody$inboundSchema` instead. */
  export const inboundSchema = CreateDatasetExperimentRequestBody$inboundSchema;
  /** @deprecated use `CreateDatasetExperimentRequestBody$outboundSchema` instead. */
  export const outboundSchema =
    CreateDatasetExperimentRequestBody$outboundSchema;
  /** @deprecated use `CreateDatasetExperimentRequestBody$Outbound` instead. */
  export type Outbound = CreateDatasetExperimentRequestBody$Outbound;
}

export function createDatasetExperimentRequestBodyToJSON(
  createDatasetExperimentRequestBody: CreateDatasetExperimentRequestBody,
): string {
  return JSON.stringify(
    CreateDatasetExperimentRequestBody$outboundSchema.parse(
      createDatasetExperimentRequestBody,
    ),
  );
}

export function createDatasetExperimentRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<CreateDatasetExperimentRequestBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      CreateDatasetExperimentRequestBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateDatasetExperimentRequestBody' from JSON`,
  );
}

/** @internal */
export const CreateDatasetExperimentRequest$inboundSchema: z.ZodType<
  CreateDatasetExperimentRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  dataset_id: z.string(),
  RequestBody: z.lazy(() => CreateDatasetExperimentRequestBody$inboundSchema)
    .optional(),
}).transform((v) => {
  return remap$(v, {
    "dataset_id": "datasetId",
    "RequestBody": "requestBody",
  });
});

/** @internal */
export type CreateDatasetExperimentRequest$Outbound = {
  dataset_id: string;
  RequestBody?: CreateDatasetExperimentRequestBody$Outbound | undefined;
};

/** @internal */
export const CreateDatasetExperimentRequest$outboundSchema: z.ZodType<
  CreateDatasetExperimentRequest$Outbound,
  z.ZodTypeDef,
  CreateDatasetExperimentRequest
> = z.object({
  datasetId: z.string(),
  requestBody: z.lazy(() => CreateDatasetExperimentRequestBody$outboundSchema)
    .optional(),
}).transform((v) => {
  return remap$(v, {
    datasetId: "dataset_id",
    requestBody: "RequestBody",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateDatasetExperimentRequest$ {
  /** @deprecated use `CreateDatasetExperimentRequest$inboundSchema` instead. */
  export const inboundSchema = CreateDatasetExperimentRequest$inboundSchema;
  /** @deprecated use `CreateDatasetExperimentRequest$outboundSchema` instead. */
  export const outboundSchema = CreateDatasetExperimentRequest$outboundSchema;
  /** @deprecated use `CreateDatasetExperimentRequest$Outbound` instead. */
  export type Outbound = CreateDatasetExperimentRequest$Outbound;
}

export function createDatasetExperimentRequestToJSON(
  createDatasetExperimentRequest: CreateDatasetExperimentRequest,
): string {
  return JSON.stringify(
    CreateDatasetExperimentRequest$outboundSchema.parse(
      createDatasetExperimentRequest,
    ),
  );
}

export function createDatasetExperimentRequestFromJSON(
  jsonString: string,
): SafeParseResult<CreateDatasetExperimentRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateDatasetExperimentRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateDatasetExperimentRequest' from JSON`,
  );
}

/** @internal */
export const CreateDatasetExperimentResponseBody$inboundSchema: z.ZodType<
  CreateDatasetExperimentResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  url: z.string(),
  experiment_id: z.string(),
  experiment_run_id: z.string(),
}).transform((v) => {
  return remap$(v, {
    "experiment_id": "experimentId",
    "experiment_run_id": "experimentRunId",
  });
});

/** @internal */
export type CreateDatasetExperimentResponseBody$Outbound = {
  url: string;
  experiment_id: string;
  experiment_run_id: string;
};

/** @internal */
export const CreateDatasetExperimentResponseBody$outboundSchema: z.ZodType<
  CreateDatasetExperimentResponseBody$Outbound,
  z.ZodTypeDef,
  CreateDatasetExperimentResponseBody
> = z.object({
  url: z.string(),
  experimentId: z.string(),
  experimentRunId: z.string(),
}).transform((v) => {
  return remap$(v, {
    experimentId: "experiment_id",
    experimentRunId: "experiment_run_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateDatasetExperimentResponseBody$ {
  /** @deprecated use `CreateDatasetExperimentResponseBody$inboundSchema` instead. */
  export const inboundSchema =
    CreateDatasetExperimentResponseBody$inboundSchema;
  /** @deprecated use `CreateDatasetExperimentResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    CreateDatasetExperimentResponseBody$outboundSchema;
  /** @deprecated use `CreateDatasetExperimentResponseBody$Outbound` instead. */
  export type Outbound = CreateDatasetExperimentResponseBody$Outbound;
}

export function createDatasetExperimentResponseBodyToJSON(
  createDatasetExperimentResponseBody: CreateDatasetExperimentResponseBody,
): string {
  return JSON.stringify(
    CreateDatasetExperimentResponseBody$outboundSchema.parse(
      createDatasetExperimentResponseBody,
    ),
  );
}

export function createDatasetExperimentResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<CreateDatasetExperimentResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      CreateDatasetExperimentResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateDatasetExperimentResponseBody' from JSON`,
  );
}
