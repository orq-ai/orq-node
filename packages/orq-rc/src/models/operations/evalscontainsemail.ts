/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type EvalsContainsEmailRequestBody = {
  output: string;
};

export type EvalsContainsEmailValue = boolean | string | number;

/**
 * Returns the result of the evaluator run
 */
export type EvalsContainsEmailResponseBody = {
  value: boolean | string | number | null;
};

/** @internal */
export const EvalsContainsEmailRequestBody$inboundSchema: z.ZodType<
  EvalsContainsEmailRequestBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  output: z.string(),
});

/** @internal */
export type EvalsContainsEmailRequestBody$Outbound = {
  output: string;
};

/** @internal */
export const EvalsContainsEmailRequestBody$outboundSchema: z.ZodType<
  EvalsContainsEmailRequestBody$Outbound,
  z.ZodTypeDef,
  EvalsContainsEmailRequestBody
> = z.object({
  output: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EvalsContainsEmailRequestBody$ {
  /** @deprecated use `EvalsContainsEmailRequestBody$inboundSchema` instead. */
  export const inboundSchema = EvalsContainsEmailRequestBody$inboundSchema;
  /** @deprecated use `EvalsContainsEmailRequestBody$outboundSchema` instead. */
  export const outboundSchema = EvalsContainsEmailRequestBody$outboundSchema;
  /** @deprecated use `EvalsContainsEmailRequestBody$Outbound` instead. */
  export type Outbound = EvalsContainsEmailRequestBody$Outbound;
}

export function evalsContainsEmailRequestBodyToJSON(
  evalsContainsEmailRequestBody: EvalsContainsEmailRequestBody,
): string {
  return JSON.stringify(
    EvalsContainsEmailRequestBody$outboundSchema.parse(
      evalsContainsEmailRequestBody,
    ),
  );
}

export function evalsContainsEmailRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<EvalsContainsEmailRequestBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => EvalsContainsEmailRequestBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'EvalsContainsEmailRequestBody' from JSON`,
  );
}

/** @internal */
export const EvalsContainsEmailValue$inboundSchema: z.ZodType<
  EvalsContainsEmailValue,
  z.ZodTypeDef,
  unknown
> = z.union([z.boolean(), z.string(), z.number()]);

/** @internal */
export type EvalsContainsEmailValue$Outbound = boolean | string | number;

/** @internal */
export const EvalsContainsEmailValue$outboundSchema: z.ZodType<
  EvalsContainsEmailValue$Outbound,
  z.ZodTypeDef,
  EvalsContainsEmailValue
> = z.union([z.boolean(), z.string(), z.number()]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EvalsContainsEmailValue$ {
  /** @deprecated use `EvalsContainsEmailValue$inboundSchema` instead. */
  export const inboundSchema = EvalsContainsEmailValue$inboundSchema;
  /** @deprecated use `EvalsContainsEmailValue$outboundSchema` instead. */
  export const outboundSchema = EvalsContainsEmailValue$outboundSchema;
  /** @deprecated use `EvalsContainsEmailValue$Outbound` instead. */
  export type Outbound = EvalsContainsEmailValue$Outbound;
}

export function evalsContainsEmailValueToJSON(
  evalsContainsEmailValue: EvalsContainsEmailValue,
): string {
  return JSON.stringify(
    EvalsContainsEmailValue$outboundSchema.parse(evalsContainsEmailValue),
  );
}

export function evalsContainsEmailValueFromJSON(
  jsonString: string,
): SafeParseResult<EvalsContainsEmailValue, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => EvalsContainsEmailValue$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'EvalsContainsEmailValue' from JSON`,
  );
}

/** @internal */
export const EvalsContainsEmailResponseBody$inboundSchema: z.ZodType<
  EvalsContainsEmailResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  value: z.nullable(z.union([z.boolean(), z.string(), z.number()])),
});

/** @internal */
export type EvalsContainsEmailResponseBody$Outbound = {
  value: boolean | string | number | null;
};

/** @internal */
export const EvalsContainsEmailResponseBody$outboundSchema: z.ZodType<
  EvalsContainsEmailResponseBody$Outbound,
  z.ZodTypeDef,
  EvalsContainsEmailResponseBody
> = z.object({
  value: z.nullable(z.union([z.boolean(), z.string(), z.number()])),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EvalsContainsEmailResponseBody$ {
  /** @deprecated use `EvalsContainsEmailResponseBody$inboundSchema` instead. */
  export const inboundSchema = EvalsContainsEmailResponseBody$inboundSchema;
  /** @deprecated use `EvalsContainsEmailResponseBody$outboundSchema` instead. */
  export const outboundSchema = EvalsContainsEmailResponseBody$outboundSchema;
  /** @deprecated use `EvalsContainsEmailResponseBody$Outbound` instead. */
  export type Outbound = EvalsContainsEmailResponseBody$Outbound;
}

export function evalsContainsEmailResponseBodyToJSON(
  evalsContainsEmailResponseBody: EvalsContainsEmailResponseBody,
): string {
  return JSON.stringify(
    EvalsContainsEmailResponseBody$outboundSchema.parse(
      evalsContainsEmailResponseBody,
    ),
  );
}

export function evalsContainsEmailResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<EvalsContainsEmailResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => EvalsContainsEmailResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'EvalsContainsEmailResponseBody' from JSON`,
  );
}
