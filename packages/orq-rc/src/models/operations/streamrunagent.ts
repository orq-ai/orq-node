/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export const StreamRunAgentRole2 = {
  Tool: "tool",
} as const;
export type StreamRunAgentRole2 = ClosedEnum<typeof StreamRunAgentRole2>;

export const StreamRunAgentRole1 = {
  User: "user",
} as const;
export type StreamRunAgentRole1 = ClosedEnum<typeof StreamRunAgentRole1>;

/**
 * Message role (user or tool for continuing executions)
 */
export type StreamRunAgentRole = StreamRunAgentRole1 | StreamRunAgentRole2;

export const StreamRunAgentPartsAgentsRequestRequestBodyMessageKind = {
  ToolResult: "tool_result",
} as const;
export type StreamRunAgentPartsAgentsRequestRequestBodyMessageKind = ClosedEnum<
  typeof StreamRunAgentPartsAgentsRequestRequestBodyMessageKind
>;

export type Parts5 = {
  kind: StreamRunAgentPartsAgentsRequestRequestBodyMessageKind;
  toolCallId: string;
  result?: any | undefined;
  metadata?: { [k: string]: any } | undefined;
};

export const StreamRunAgentPartsAgentsRequestRequestBodyKind = {
  ToolCall: "tool_call",
} as const;
export type StreamRunAgentPartsAgentsRequestRequestBodyKind = ClosedEnum<
  typeof StreamRunAgentPartsAgentsRequestRequestBodyKind
>;

export type StreamRunAgentParts4 = {
  kind: StreamRunAgentPartsAgentsRequestRequestBodyKind;
  toolName: string;
  toolCallId: string;
  arguments: { [k: string]: any };
  metadata?: { [k: string]: any } | undefined;
};

export const StreamRunAgentPartsAgentsRequestKind = {
  File: "file",
} as const;
export type StreamRunAgentPartsAgentsRequestKind = ClosedEnum<
  typeof StreamRunAgentPartsAgentsRequestKind
>;

export type StreamRunAgentFile2 = {
  /**
   * URL for the File content
   */
  uri: string;
  /**
   * Optional mimeType for the file
   */
  mimeType?: string | undefined;
  /**
   * Optional name for the file
   */
  name?: string | undefined;
};

export type StreamRunAgentFile1 = {
  /**
   * base64 encoded content of the file
   */
  bytes: string;
  /**
   * Optional mimeType for the file
   */
  mimeType?: string | undefined;
  /**
   * Optional name for the file
   */
  name?: string | undefined;
};

export type StreamRunAgentPartsFile = StreamRunAgentFile1 | StreamRunAgentFile2;

export type StreamRunAgentParts3 = {
  kind: StreamRunAgentPartsAgentsRequestKind;
  file: StreamRunAgentFile1 | StreamRunAgentFile2;
  metadata?: { [k: string]: any } | undefined;
};

export const StreamRunAgentPartsAgentsKind = {
  Data: "data",
} as const;
export type StreamRunAgentPartsAgentsKind = ClosedEnum<
  typeof StreamRunAgentPartsAgentsKind
>;

export type StreamRunAgentParts2 = {
  kind: StreamRunAgentPartsAgentsKind;
  data?: any | undefined;
  metadata?: { [k: string]: any } | undefined;
};

export const StreamRunAgentPartsKind = {
  Text: "text",
} as const;
export type StreamRunAgentPartsKind = ClosedEnum<
  typeof StreamRunAgentPartsKind
>;

export type StreamRunAgentParts1 = {
  kind: StreamRunAgentPartsKind;
  text: string;
};

export type StreamRunAgentParts =
  | StreamRunAgentParts4
  | StreamRunAgentParts1
  | StreamRunAgentParts3
  | Parts5
  | StreamRunAgentParts2;

/**
 * The A2A format message containing the task for the agent to perform.
 */
export type StreamRunAgentMessage = {
  /**
   * Optional A2A message ID in ULID format
   */
  messageId?: string | undefined;
  /**
   * Message role (user or tool for continuing executions)
   */
  role: StreamRunAgentRole1 | StreamRunAgentRole2;
  /**
   * A2A message parts
   */
  parts: Array<
    | StreamRunAgentParts4
    | StreamRunAgentParts1
    | StreamRunAgentParts3
    | Parts5
    | StreamRunAgentParts2
  >;
  /**
   * Optional message metadata
   */
  metadata?: { [k: string]: any } | undefined;
};

export type StreamRunAgentTeamOfAgents = {
  id: string;
  /**
   * The role of the agent in this context. This is used to give extra information to the leader to help it decide which agent to hand off to.
   */
  role?: string | undefined;
};

export const StreamRunAgentToolsAgentsRequestRequestBodySettings12Type = {
  Function: "function",
} as const;
export type StreamRunAgentToolsAgentsRequestRequestBodySettings12Type =
  ClosedEnum<typeof StreamRunAgentToolsAgentsRequestRequestBodySettings12Type>;

export type StreamRunAgentToolsFunction = {
  name: string;
  description?: string | undefined;
  strict?: boolean | undefined;
  parameters?: { [k: string]: any } | undefined;
};

export type Tools12 = {
  type: StreamRunAgentToolsAgentsRequestRequestBodySettings12Type;
  id?: string | undefined;
  key: string;
  displayName?: string | undefined;
  description?: string | undefined;
  requiresApproval?: boolean | undefined;
  function: StreamRunAgentToolsFunction;
};

/**
 * The status of the tool. `Live` is the latest version of the tool. `Draft` is a version that is not yet published. `Pending` is a version that is pending approval. `Published` is a version that was live and has been replaced by a new version.
 */
export const ToolsStatus = {
  Live: "live",
  Draft: "draft",
  Pending: "pending",
  Published: "published",
} as const;
/**
 * The status of the tool. `Live` is the latest version of the tool. `Draft` is a version that is not yet published. `Pending` is a version that is pending approval. `Published` is a version that was live and has been replaced by a new version.
 */
export type ToolsStatus = ClosedEnum<typeof ToolsStatus>;

export const StreamRunAgentToolsAgentsRequestRequestBodySettings11Type = {
  Http: "http",
} as const;
export type StreamRunAgentToolsAgentsRequestRequestBodySettings11Type =
  ClosedEnum<typeof StreamRunAgentToolsAgentsRequestRequestBodySettings11Type>;

/**
 * The HTTP method to use.
 */
export const ToolsMethod = {
  Get: "GET",
  Post: "POST",
  Put: "PUT",
  Delete: "DELETE",
} as const;
/**
 * The HTTP method to use.
 */
export type ToolsMethod = ClosedEnum<typeof ToolsMethod>;

/**
 * The blueprint for the HTTP request. The `arguments` field will be used to replace the placeholders in the `url`, `headers`, `body`, and `arguments` fields.
 */
export type ToolsBlueprint = {
  /**
   * The URL to send the request to.
   */
  url: string;
  /**
   * The HTTP method to use.
   */
  method: ToolsMethod;
  /**
   * The headers to send with the request.
   */
  headers?: { [k: string]: string } | undefined;
  /**
   * The body to send with the request.
   */
  body?: { [k: string]: any } | undefined;
};

/**
 * The type of the argument.
 */
export const StreamRunAgentToolsAgentsRequestRequestBodySettings11HttpType = {
  String: "string",
  Number: "number",
  Boolean: "boolean",
} as const;
/**
 * The type of the argument.
 */
export type StreamRunAgentToolsAgentsRequestRequestBodySettings11HttpType =
  ClosedEnum<
    typeof StreamRunAgentToolsAgentsRequestRequestBodySettings11HttpType
  >;

/**
 * The default value of the argument.
 */
export type ToolsDefaultValue = string | number | boolean;

export type ToolsArguments = {
  /**
   * The type of the argument.
   */
  type: StreamRunAgentToolsAgentsRequestRequestBodySettings11HttpType;
  /**
   * A description of the argument.
   */
  description: string;
  /**
   * Whether to send the argument to the model. If set to false, the argument will not be sent to the model and needs to be provided by the user or it will be left blank.
   */
  sendToModel?: boolean | undefined;
  /**
   * The default value of the argument.
   */
  defaultValue?: string | number | boolean | undefined;
};

export type ToolsHttp = {
  /**
   * The blueprint for the HTTP request. The `arguments` field will be used to replace the placeholders in the `url`, `headers`, `body`, and `arguments` fields.
   */
  blueprint: ToolsBlueprint;
  /**
   * The arguments to send with the request. The keys will be used to replace the placeholders in the `blueprint` field.
   */
  arguments?: { [k: string]: ToolsArguments } | undefined;
};

export type Tools11 = {
  id?: string | undefined;
  /**
   * The path where the entity is stored in the project structure. The first element of the path always represents the project name. Any subsequent path element after the project will be created as a folder in the project if it does not exists.
   */
  path: string;
  /**
   * Unique key of the tool as it will be displayed in the UI
   */
  key: string;
  /**
   * The name of the tool as it will be displayed in the UI. This is optional and if not provided, the `key` will be used.
   */
  displayName: string;
  /**
   * A description of the tool, used by the model to choose when and how to call the tool. We do recommend using the `description` field as accurate as possible to give enough context to the model to make the right decision.
   */
  description: string;
  /**
   * The status of the tool. `Live` is the latest version of the tool. `Draft` is a version that is not yet published. `Pending` is a version that is pending approval. `Published` is a version that was live and has been replaced by a new version.
   */
  status?: ToolsStatus | undefined;
  versionHash?: string | undefined;
  type: StreamRunAgentToolsAgentsRequestRequestBodySettings11Type;
  http: ToolsHttp;
  requiresApproval?: boolean | undefined;
};

export const StreamRunAgentToolsAgentsRequestRequestBodySettings10Type = {
  CurrentDate: "current_date",
} as const;
export type StreamRunAgentToolsAgentsRequestRequestBodySettings10Type =
  ClosedEnum<typeof StreamRunAgentToolsAgentsRequestRequestBodySettings10Type>;

export type Tools10 = {
  type: StreamRunAgentToolsAgentsRequestRequestBodySettings10Type;
  requiresApproval?: boolean | undefined;
};

export const StreamRunAgentToolsAgentsRequestRequestBodySettings9Type = {
  QueryKnowledgeBase: "query_knowledge_base",
} as const;
export type StreamRunAgentToolsAgentsRequestRequestBodySettings9Type =
  ClosedEnum<typeof StreamRunAgentToolsAgentsRequestRequestBodySettings9Type>;

export type Tools9 = {
  type: StreamRunAgentToolsAgentsRequestRequestBodySettings9Type;
  requiresApproval?: boolean | undefined;
};

export const StreamRunAgentToolsAgentsRequestRequestBodySettings8Type = {
  RetrieveKnowledgeBases: "retrieve_knowledge_bases",
} as const;
export type StreamRunAgentToolsAgentsRequestRequestBodySettings8Type =
  ClosedEnum<typeof StreamRunAgentToolsAgentsRequestRequestBodySettings8Type>;

export type Tools8 = {
  type: StreamRunAgentToolsAgentsRequestRequestBodySettings8Type;
  requiresApproval?: boolean | undefined;
};

export const StreamRunAgentToolsAgentsRequestRequestBodySettings7Type = {
  RetrieveMemoryStores: "retrieve_memory_stores",
} as const;
export type StreamRunAgentToolsAgentsRequestRequestBodySettings7Type =
  ClosedEnum<typeof StreamRunAgentToolsAgentsRequestRequestBodySettings7Type>;

export type Tools7 = {
  type: StreamRunAgentToolsAgentsRequestRequestBodySettings7Type;
  requiresApproval?: boolean | undefined;
};

export const StreamRunAgentToolsAgentsRequestRequestBodySettings6Type = {
  WriteMemoryStore: "write_memory_store",
} as const;
export type StreamRunAgentToolsAgentsRequestRequestBodySettings6Type =
  ClosedEnum<typeof StreamRunAgentToolsAgentsRequestRequestBodySettings6Type>;

export type Tools6 = {
  type: StreamRunAgentToolsAgentsRequestRequestBodySettings6Type;
  requiresApproval?: boolean | undefined;
};

export const StreamRunAgentToolsAgentsRequestRequestBodySettingsType = {
  QueryMemoryStore: "query_memory_store",
} as const;
export type StreamRunAgentToolsAgentsRequestRequestBodySettingsType =
  ClosedEnum<typeof StreamRunAgentToolsAgentsRequestRequestBodySettingsType>;

export type StreamRunAgentTools5 = {
  type: StreamRunAgentToolsAgentsRequestRequestBodySettingsType;
  requiresApproval?: boolean | undefined;
};

export const StreamRunAgentToolsAgentsRequestRequestBodyType = {
  RetrieveAgents: "retrieve_agents",
} as const;
export type StreamRunAgentToolsAgentsRequestRequestBodyType = ClosedEnum<
  typeof StreamRunAgentToolsAgentsRequestRequestBodyType
>;

export type StreamRunAgentTools4 = {
  type: StreamRunAgentToolsAgentsRequestRequestBodyType;
  requiresApproval?: boolean | undefined;
};

export const StreamRunAgentToolsAgentsRequestType = {
  CallSubAgent: "call_sub_agent",
} as const;
export type StreamRunAgentToolsAgentsRequestType = ClosedEnum<
  typeof StreamRunAgentToolsAgentsRequestType
>;

export type StreamRunAgentTools3 = {
  type: StreamRunAgentToolsAgentsRequestType;
  requiresApproval?: boolean | undefined;
};

export const StreamRunAgentToolsAgentsType = {
  WebScraper: "web_scraper",
} as const;
export type StreamRunAgentToolsAgentsType = ClosedEnum<
  typeof StreamRunAgentToolsAgentsType
>;

export type StreamRunAgentTools2 = {
  type: StreamRunAgentToolsAgentsType;
  requiresApproval?: boolean | undefined;
};

export const StreamRunAgentToolsType = {
  GoogleSearch: "google_search",
} as const;
export type StreamRunAgentToolsType = ClosedEnum<
  typeof StreamRunAgentToolsType
>;

export type StreamRunAgentTools1 = {
  type: StreamRunAgentToolsType;
  requiresApproval?: boolean | undefined;
};

export type StreamRunAgentTools =
  | Tools11
  | Tools12
  | StreamRunAgentTools1
  | StreamRunAgentTools2
  | StreamRunAgentTools3
  | StreamRunAgentTools4
  | StreamRunAgentTools5
  | Tools6
  | Tools7
  | Tools8
  | Tools9
  | Tools10;

/**
 * If all, the agent will require approval for all tools. If respect_tool, the agent will require approval for tools that have the requires_approval flag set to true. If none, the agent will not require approval for any tools.
 */
export const StreamRunAgentToolApprovalRequired = {
  All: "all",
  RespectTool: "respect_tool",
  None: "none",
} as const;
/**
 * If all, the agent will require approval for all tools. If respect_tool, the agent will require approval for tools that have the requires_approval flag set to true. If none, the agent will not require approval for any tools.
 */
export type StreamRunAgentToolApprovalRequired = ClosedEnum<
  typeof StreamRunAgentToolApprovalRequired
>;

export type StreamRunAgentSettings = {
  tools: Array<
    | Tools11
    | Tools12
    | StreamRunAgentTools1
    | StreamRunAgentTools2
    | StreamRunAgentTools3
    | StreamRunAgentTools4
    | StreamRunAgentTools5
    | Tools6
    | Tools7
    | Tools8
    | Tools9
    | Tools10
  >;
  /**
   * If all, the agent will require approval for all tools. If respect_tool, the agent will require approval for tools that have the requires_approval flag set to true. If none, the agent will not require approval for any tools.
   */
  toolApprovalRequired?: StreamRunAgentToolApprovalRequired | undefined;
  /**
   * Maximum iterations before the agent must provide its best answer.
   */
  maxIterations?: number | undefined;
  /**
   * Maximum time (in seconds) for task execution.
   */
  maxExecutionTime?: number | undefined;
};

export type StreamRunAgentRequestBody = {
  /**
   * A unique identifier for the agent. This key must be unique within the same workspace and cannot be reused. When executing the agent, this key determines if the agent already exists. If the agent version differs, a new version is created at the end of the execution, except for the task. All agent parameters are evaluated to decide if a new version is needed. To prevent new version creation and update the latest version instead, use the `prevent_version_creation` parameter in the settings.
   */
  key: string;
  /**
   * Optional task ID to continue an existing agent execution. When provided, the agent will continue the conversation from the existing task state. The task must be in an inactive state to continue.
   */
  taskId?: string | undefined;
  /**
   * The language model that powers the agent. Currently, private models are not supported.
   */
  model: string;
  /**
   * Optional array of fallback model IDs to use when the primary model fails. Models are tried in order. All models must support tool calling capabilities.
   */
  fallbackModels?: Array<string> | undefined;
  /**
   * Specifies the agent's function and area of expertise.
   */
  role: string;
  /**
   * Provides context and purpose for the agent. Combined with the system prompt template to generate the agent's instructions.
   */
  instructions: string;
  /**
   * The A2A format message containing the task for the agent to perform.
   */
  message: StreamRunAgentMessage;
  /**
   * Optional variables for template replacement in system prompt, instructions, and messages
   */
  variables?: { [k: string]: any } | undefined;
  /**
   * Optional context ID that maps to thread_id
   */
  contextId?: string | undefined;
  /**
   * An external id for the agent execution. This can be used to associate a specific user with the agent execution.
   */
  externalId?: string | undefined;
  /**
   * The path where the entity is stored in the project structure. The first element of the path always represents the project name. Any subsequent path element after the project will be created as a folder in the project if it does not exists.
   */
  path: string;
  /**
   * A brief summary of the agent's purpose.
   */
  description?: string | undefined;
  /**
   * Optional URL to an icon for the agent
   */
  iconUrl?: string | undefined;
  /**
   * A custom system prompt template for the agent. If omitted, the default template is used.
   */
  systemPrompt?: string | undefined;
  memoryStores?: Array<string> | undefined;
  knowledgeBases?: Array<string> | undefined;
  /**
   * The agents that are accessible to this orchestrator. The main agent can hand off to these agents to perform tasks.
   */
  teamOfAgents?: Array<StreamRunAgentTeamOfAgents> | undefined;
  settings: StreamRunAgentSettings;
  /**
   * Stream timeout in seconds (1-3600). Default: 1800 (30 minutes)
   */
  streamTimeoutSeconds?: number | undefined;
};

/**
 * SSE stream of agent events
 */
export type StreamRunAgentResponseBody = {
  /**
   * JSON-encoded event data
   */
  data: string;
};

/** @internal */
export const StreamRunAgentRole2$inboundSchema: z.ZodNativeEnum<
  typeof StreamRunAgentRole2
> = z.nativeEnum(StreamRunAgentRole2);

/** @internal */
export const StreamRunAgentRole2$outboundSchema: z.ZodNativeEnum<
  typeof StreamRunAgentRole2
> = StreamRunAgentRole2$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace StreamRunAgentRole2$ {
  /** @deprecated use `StreamRunAgentRole2$inboundSchema` instead. */
  export const inboundSchema = StreamRunAgentRole2$inboundSchema;
  /** @deprecated use `StreamRunAgentRole2$outboundSchema` instead. */
  export const outboundSchema = StreamRunAgentRole2$outboundSchema;
}

/** @internal */
export const StreamRunAgentRole1$inboundSchema: z.ZodNativeEnum<
  typeof StreamRunAgentRole1
> = z.nativeEnum(StreamRunAgentRole1);

/** @internal */
export const StreamRunAgentRole1$outboundSchema: z.ZodNativeEnum<
  typeof StreamRunAgentRole1
> = StreamRunAgentRole1$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace StreamRunAgentRole1$ {
  /** @deprecated use `StreamRunAgentRole1$inboundSchema` instead. */
  export const inboundSchema = StreamRunAgentRole1$inboundSchema;
  /** @deprecated use `StreamRunAgentRole1$outboundSchema` instead. */
  export const outboundSchema = StreamRunAgentRole1$outboundSchema;
}

/** @internal */
export const StreamRunAgentRole$inboundSchema: z.ZodType<
  StreamRunAgentRole,
  z.ZodTypeDef,
  unknown
> = z.union([
  StreamRunAgentRole1$inboundSchema,
  StreamRunAgentRole2$inboundSchema,
]);

/** @internal */
export type StreamRunAgentRole$Outbound = string | string;

/** @internal */
export const StreamRunAgentRole$outboundSchema: z.ZodType<
  StreamRunAgentRole$Outbound,
  z.ZodTypeDef,
  StreamRunAgentRole
> = z.union([
  StreamRunAgentRole1$outboundSchema,
  StreamRunAgentRole2$outboundSchema,
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace StreamRunAgentRole$ {
  /** @deprecated use `StreamRunAgentRole$inboundSchema` instead. */
  export const inboundSchema = StreamRunAgentRole$inboundSchema;
  /** @deprecated use `StreamRunAgentRole$outboundSchema` instead. */
  export const outboundSchema = StreamRunAgentRole$outboundSchema;
  /** @deprecated use `StreamRunAgentRole$Outbound` instead. */
  export type Outbound = StreamRunAgentRole$Outbound;
}

export function streamRunAgentRoleToJSON(
  streamRunAgentRole: StreamRunAgentRole,
): string {
  return JSON.stringify(
    StreamRunAgentRole$outboundSchema.parse(streamRunAgentRole),
  );
}

export function streamRunAgentRoleFromJSON(
  jsonString: string,
): SafeParseResult<StreamRunAgentRole, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => StreamRunAgentRole$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'StreamRunAgentRole' from JSON`,
  );
}

/** @internal */
export const StreamRunAgentPartsAgentsRequestRequestBodyMessageKind$inboundSchema:
  z.ZodNativeEnum<
    typeof StreamRunAgentPartsAgentsRequestRequestBodyMessageKind
  > = z.nativeEnum(StreamRunAgentPartsAgentsRequestRequestBodyMessageKind);

/** @internal */
export const StreamRunAgentPartsAgentsRequestRequestBodyMessageKind$outboundSchema:
  z.ZodNativeEnum<
    typeof StreamRunAgentPartsAgentsRequestRequestBodyMessageKind
  > = StreamRunAgentPartsAgentsRequestRequestBodyMessageKind$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace StreamRunAgentPartsAgentsRequestRequestBodyMessageKind$ {
  /** @deprecated use `StreamRunAgentPartsAgentsRequestRequestBodyMessageKind$inboundSchema` instead. */
  export const inboundSchema =
    StreamRunAgentPartsAgentsRequestRequestBodyMessageKind$inboundSchema;
  /** @deprecated use `StreamRunAgentPartsAgentsRequestRequestBodyMessageKind$outboundSchema` instead. */
  export const outboundSchema =
    StreamRunAgentPartsAgentsRequestRequestBodyMessageKind$outboundSchema;
}

/** @internal */
export const Parts5$inboundSchema: z.ZodType<Parts5, z.ZodTypeDef, unknown> = z
  .object({
    kind: StreamRunAgentPartsAgentsRequestRequestBodyMessageKind$inboundSchema,
    tool_call_id: z.string(),
    result: z.any().optional(),
    metadata: z.record(z.any()).optional(),
  }).transform((v) => {
    return remap$(v, {
      "tool_call_id": "toolCallId",
    });
  });

/** @internal */
export type Parts5$Outbound = {
  kind: string;
  tool_call_id: string;
  result?: any | undefined;
  metadata?: { [k: string]: any } | undefined;
};

/** @internal */
export const Parts5$outboundSchema: z.ZodType<
  Parts5$Outbound,
  z.ZodTypeDef,
  Parts5
> = z.object({
  kind: StreamRunAgentPartsAgentsRequestRequestBodyMessageKind$outboundSchema,
  toolCallId: z.string(),
  result: z.any().optional(),
  metadata: z.record(z.any()).optional(),
}).transform((v) => {
  return remap$(v, {
    toolCallId: "tool_call_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Parts5$ {
  /** @deprecated use `Parts5$inboundSchema` instead. */
  export const inboundSchema = Parts5$inboundSchema;
  /** @deprecated use `Parts5$outboundSchema` instead. */
  export const outboundSchema = Parts5$outboundSchema;
  /** @deprecated use `Parts5$Outbound` instead. */
  export type Outbound = Parts5$Outbound;
}

export function parts5ToJSON(parts5: Parts5): string {
  return JSON.stringify(Parts5$outboundSchema.parse(parts5));
}

export function parts5FromJSON(
  jsonString: string,
): SafeParseResult<Parts5, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Parts5$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Parts5' from JSON`,
  );
}

/** @internal */
export const StreamRunAgentPartsAgentsRequestRequestBodyKind$inboundSchema:
  z.ZodNativeEnum<typeof StreamRunAgentPartsAgentsRequestRequestBodyKind> = z
    .nativeEnum(StreamRunAgentPartsAgentsRequestRequestBodyKind);

/** @internal */
export const StreamRunAgentPartsAgentsRequestRequestBodyKind$outboundSchema:
  z.ZodNativeEnum<typeof StreamRunAgentPartsAgentsRequestRequestBodyKind> =
    StreamRunAgentPartsAgentsRequestRequestBodyKind$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace StreamRunAgentPartsAgentsRequestRequestBodyKind$ {
  /** @deprecated use `StreamRunAgentPartsAgentsRequestRequestBodyKind$inboundSchema` instead. */
  export const inboundSchema =
    StreamRunAgentPartsAgentsRequestRequestBodyKind$inboundSchema;
  /** @deprecated use `StreamRunAgentPartsAgentsRequestRequestBodyKind$outboundSchema` instead. */
  export const outboundSchema =
    StreamRunAgentPartsAgentsRequestRequestBodyKind$outboundSchema;
}

/** @internal */
export const StreamRunAgentParts4$inboundSchema: z.ZodType<
  StreamRunAgentParts4,
  z.ZodTypeDef,
  unknown
> = z.object({
  kind: StreamRunAgentPartsAgentsRequestRequestBodyKind$inboundSchema,
  tool_name: z.string(),
  tool_call_id: z.string(),
  arguments: z.record(z.any()),
  metadata: z.record(z.any()).optional(),
}).transform((v) => {
  return remap$(v, {
    "tool_name": "toolName",
    "tool_call_id": "toolCallId",
  });
});

/** @internal */
export type StreamRunAgentParts4$Outbound = {
  kind: string;
  tool_name: string;
  tool_call_id: string;
  arguments: { [k: string]: any };
  metadata?: { [k: string]: any } | undefined;
};

/** @internal */
export const StreamRunAgentParts4$outboundSchema: z.ZodType<
  StreamRunAgentParts4$Outbound,
  z.ZodTypeDef,
  StreamRunAgentParts4
> = z.object({
  kind: StreamRunAgentPartsAgentsRequestRequestBodyKind$outboundSchema,
  toolName: z.string(),
  toolCallId: z.string(),
  arguments: z.record(z.any()),
  metadata: z.record(z.any()).optional(),
}).transform((v) => {
  return remap$(v, {
    toolName: "tool_name",
    toolCallId: "tool_call_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace StreamRunAgentParts4$ {
  /** @deprecated use `StreamRunAgentParts4$inboundSchema` instead. */
  export const inboundSchema = StreamRunAgentParts4$inboundSchema;
  /** @deprecated use `StreamRunAgentParts4$outboundSchema` instead. */
  export const outboundSchema = StreamRunAgentParts4$outboundSchema;
  /** @deprecated use `StreamRunAgentParts4$Outbound` instead. */
  export type Outbound = StreamRunAgentParts4$Outbound;
}

export function streamRunAgentParts4ToJSON(
  streamRunAgentParts4: StreamRunAgentParts4,
): string {
  return JSON.stringify(
    StreamRunAgentParts4$outboundSchema.parse(streamRunAgentParts4),
  );
}

export function streamRunAgentParts4FromJSON(
  jsonString: string,
): SafeParseResult<StreamRunAgentParts4, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => StreamRunAgentParts4$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'StreamRunAgentParts4' from JSON`,
  );
}

/** @internal */
export const StreamRunAgentPartsAgentsRequestKind$inboundSchema:
  z.ZodNativeEnum<typeof StreamRunAgentPartsAgentsRequestKind> = z.nativeEnum(
    StreamRunAgentPartsAgentsRequestKind,
  );

/** @internal */
export const StreamRunAgentPartsAgentsRequestKind$outboundSchema:
  z.ZodNativeEnum<typeof StreamRunAgentPartsAgentsRequestKind> =
    StreamRunAgentPartsAgentsRequestKind$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace StreamRunAgentPartsAgentsRequestKind$ {
  /** @deprecated use `StreamRunAgentPartsAgentsRequestKind$inboundSchema` instead. */
  export const inboundSchema =
    StreamRunAgentPartsAgentsRequestKind$inboundSchema;
  /** @deprecated use `StreamRunAgentPartsAgentsRequestKind$outboundSchema` instead. */
  export const outboundSchema =
    StreamRunAgentPartsAgentsRequestKind$outboundSchema;
}

/** @internal */
export const StreamRunAgentFile2$inboundSchema: z.ZodType<
  StreamRunAgentFile2,
  z.ZodTypeDef,
  unknown
> = z.object({
  uri: z.string(),
  mimeType: z.string().optional(),
  name: z.string().optional(),
});

/** @internal */
export type StreamRunAgentFile2$Outbound = {
  uri: string;
  mimeType?: string | undefined;
  name?: string | undefined;
};

/** @internal */
export const StreamRunAgentFile2$outboundSchema: z.ZodType<
  StreamRunAgentFile2$Outbound,
  z.ZodTypeDef,
  StreamRunAgentFile2
> = z.object({
  uri: z.string(),
  mimeType: z.string().optional(),
  name: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace StreamRunAgentFile2$ {
  /** @deprecated use `StreamRunAgentFile2$inboundSchema` instead. */
  export const inboundSchema = StreamRunAgentFile2$inboundSchema;
  /** @deprecated use `StreamRunAgentFile2$outboundSchema` instead. */
  export const outboundSchema = StreamRunAgentFile2$outboundSchema;
  /** @deprecated use `StreamRunAgentFile2$Outbound` instead. */
  export type Outbound = StreamRunAgentFile2$Outbound;
}

export function streamRunAgentFile2ToJSON(
  streamRunAgentFile2: StreamRunAgentFile2,
): string {
  return JSON.stringify(
    StreamRunAgentFile2$outboundSchema.parse(streamRunAgentFile2),
  );
}

export function streamRunAgentFile2FromJSON(
  jsonString: string,
): SafeParseResult<StreamRunAgentFile2, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => StreamRunAgentFile2$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'StreamRunAgentFile2' from JSON`,
  );
}

/** @internal */
export const StreamRunAgentFile1$inboundSchema: z.ZodType<
  StreamRunAgentFile1,
  z.ZodTypeDef,
  unknown
> = z.object({
  bytes: z.string(),
  mimeType: z.string().optional(),
  name: z.string().optional(),
});

/** @internal */
export type StreamRunAgentFile1$Outbound = {
  bytes: string;
  mimeType?: string | undefined;
  name?: string | undefined;
};

/** @internal */
export const StreamRunAgentFile1$outboundSchema: z.ZodType<
  StreamRunAgentFile1$Outbound,
  z.ZodTypeDef,
  StreamRunAgentFile1
> = z.object({
  bytes: z.string(),
  mimeType: z.string().optional(),
  name: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace StreamRunAgentFile1$ {
  /** @deprecated use `StreamRunAgentFile1$inboundSchema` instead. */
  export const inboundSchema = StreamRunAgentFile1$inboundSchema;
  /** @deprecated use `StreamRunAgentFile1$outboundSchema` instead. */
  export const outboundSchema = StreamRunAgentFile1$outboundSchema;
  /** @deprecated use `StreamRunAgentFile1$Outbound` instead. */
  export type Outbound = StreamRunAgentFile1$Outbound;
}

export function streamRunAgentFile1ToJSON(
  streamRunAgentFile1: StreamRunAgentFile1,
): string {
  return JSON.stringify(
    StreamRunAgentFile1$outboundSchema.parse(streamRunAgentFile1),
  );
}

export function streamRunAgentFile1FromJSON(
  jsonString: string,
): SafeParseResult<StreamRunAgentFile1, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => StreamRunAgentFile1$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'StreamRunAgentFile1' from JSON`,
  );
}

/** @internal */
export const StreamRunAgentPartsFile$inboundSchema: z.ZodType<
  StreamRunAgentPartsFile,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => StreamRunAgentFile1$inboundSchema),
  z.lazy(() => StreamRunAgentFile2$inboundSchema),
]);

/** @internal */
export type StreamRunAgentPartsFile$Outbound =
  | StreamRunAgentFile1$Outbound
  | StreamRunAgentFile2$Outbound;

/** @internal */
export const StreamRunAgentPartsFile$outboundSchema: z.ZodType<
  StreamRunAgentPartsFile$Outbound,
  z.ZodTypeDef,
  StreamRunAgentPartsFile
> = z.union([
  z.lazy(() => StreamRunAgentFile1$outboundSchema),
  z.lazy(() => StreamRunAgentFile2$outboundSchema),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace StreamRunAgentPartsFile$ {
  /** @deprecated use `StreamRunAgentPartsFile$inboundSchema` instead. */
  export const inboundSchema = StreamRunAgentPartsFile$inboundSchema;
  /** @deprecated use `StreamRunAgentPartsFile$outboundSchema` instead. */
  export const outboundSchema = StreamRunAgentPartsFile$outboundSchema;
  /** @deprecated use `StreamRunAgentPartsFile$Outbound` instead. */
  export type Outbound = StreamRunAgentPartsFile$Outbound;
}

export function streamRunAgentPartsFileToJSON(
  streamRunAgentPartsFile: StreamRunAgentPartsFile,
): string {
  return JSON.stringify(
    StreamRunAgentPartsFile$outboundSchema.parse(streamRunAgentPartsFile),
  );
}

export function streamRunAgentPartsFileFromJSON(
  jsonString: string,
): SafeParseResult<StreamRunAgentPartsFile, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => StreamRunAgentPartsFile$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'StreamRunAgentPartsFile' from JSON`,
  );
}

/** @internal */
export const StreamRunAgentParts3$inboundSchema: z.ZodType<
  StreamRunAgentParts3,
  z.ZodTypeDef,
  unknown
> = z.object({
  kind: StreamRunAgentPartsAgentsRequestKind$inboundSchema,
  file: z.union([
    z.lazy(() => StreamRunAgentFile1$inboundSchema),
    z.lazy(() => StreamRunAgentFile2$inboundSchema),
  ]),
  metadata: z.record(z.any()).optional(),
});

/** @internal */
export type StreamRunAgentParts3$Outbound = {
  kind: string;
  file: StreamRunAgentFile1$Outbound | StreamRunAgentFile2$Outbound;
  metadata?: { [k: string]: any } | undefined;
};

/** @internal */
export const StreamRunAgentParts3$outboundSchema: z.ZodType<
  StreamRunAgentParts3$Outbound,
  z.ZodTypeDef,
  StreamRunAgentParts3
> = z.object({
  kind: StreamRunAgentPartsAgentsRequestKind$outboundSchema,
  file: z.union([
    z.lazy(() => StreamRunAgentFile1$outboundSchema),
    z.lazy(() => StreamRunAgentFile2$outboundSchema),
  ]),
  metadata: z.record(z.any()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace StreamRunAgentParts3$ {
  /** @deprecated use `StreamRunAgentParts3$inboundSchema` instead. */
  export const inboundSchema = StreamRunAgentParts3$inboundSchema;
  /** @deprecated use `StreamRunAgentParts3$outboundSchema` instead. */
  export const outboundSchema = StreamRunAgentParts3$outboundSchema;
  /** @deprecated use `StreamRunAgentParts3$Outbound` instead. */
  export type Outbound = StreamRunAgentParts3$Outbound;
}

export function streamRunAgentParts3ToJSON(
  streamRunAgentParts3: StreamRunAgentParts3,
): string {
  return JSON.stringify(
    StreamRunAgentParts3$outboundSchema.parse(streamRunAgentParts3),
  );
}

export function streamRunAgentParts3FromJSON(
  jsonString: string,
): SafeParseResult<StreamRunAgentParts3, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => StreamRunAgentParts3$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'StreamRunAgentParts3' from JSON`,
  );
}

/** @internal */
export const StreamRunAgentPartsAgentsKind$inboundSchema: z.ZodNativeEnum<
  typeof StreamRunAgentPartsAgentsKind
> = z.nativeEnum(StreamRunAgentPartsAgentsKind);

/** @internal */
export const StreamRunAgentPartsAgentsKind$outboundSchema: z.ZodNativeEnum<
  typeof StreamRunAgentPartsAgentsKind
> = StreamRunAgentPartsAgentsKind$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace StreamRunAgentPartsAgentsKind$ {
  /** @deprecated use `StreamRunAgentPartsAgentsKind$inboundSchema` instead. */
  export const inboundSchema = StreamRunAgentPartsAgentsKind$inboundSchema;
  /** @deprecated use `StreamRunAgentPartsAgentsKind$outboundSchema` instead. */
  export const outboundSchema = StreamRunAgentPartsAgentsKind$outboundSchema;
}

/** @internal */
export const StreamRunAgentParts2$inboundSchema: z.ZodType<
  StreamRunAgentParts2,
  z.ZodTypeDef,
  unknown
> = z.object({
  kind: StreamRunAgentPartsAgentsKind$inboundSchema,
  data: z.any().optional(),
  metadata: z.record(z.any()).optional(),
});

/** @internal */
export type StreamRunAgentParts2$Outbound = {
  kind: string;
  data?: any | undefined;
  metadata?: { [k: string]: any } | undefined;
};

/** @internal */
export const StreamRunAgentParts2$outboundSchema: z.ZodType<
  StreamRunAgentParts2$Outbound,
  z.ZodTypeDef,
  StreamRunAgentParts2
> = z.object({
  kind: StreamRunAgentPartsAgentsKind$outboundSchema,
  data: z.any().optional(),
  metadata: z.record(z.any()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace StreamRunAgentParts2$ {
  /** @deprecated use `StreamRunAgentParts2$inboundSchema` instead. */
  export const inboundSchema = StreamRunAgentParts2$inboundSchema;
  /** @deprecated use `StreamRunAgentParts2$outboundSchema` instead. */
  export const outboundSchema = StreamRunAgentParts2$outboundSchema;
  /** @deprecated use `StreamRunAgentParts2$Outbound` instead. */
  export type Outbound = StreamRunAgentParts2$Outbound;
}

export function streamRunAgentParts2ToJSON(
  streamRunAgentParts2: StreamRunAgentParts2,
): string {
  return JSON.stringify(
    StreamRunAgentParts2$outboundSchema.parse(streamRunAgentParts2),
  );
}

export function streamRunAgentParts2FromJSON(
  jsonString: string,
): SafeParseResult<StreamRunAgentParts2, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => StreamRunAgentParts2$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'StreamRunAgentParts2' from JSON`,
  );
}

/** @internal */
export const StreamRunAgentPartsKind$inboundSchema: z.ZodNativeEnum<
  typeof StreamRunAgentPartsKind
> = z.nativeEnum(StreamRunAgentPartsKind);

/** @internal */
export const StreamRunAgentPartsKind$outboundSchema: z.ZodNativeEnum<
  typeof StreamRunAgentPartsKind
> = StreamRunAgentPartsKind$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace StreamRunAgentPartsKind$ {
  /** @deprecated use `StreamRunAgentPartsKind$inboundSchema` instead. */
  export const inboundSchema = StreamRunAgentPartsKind$inboundSchema;
  /** @deprecated use `StreamRunAgentPartsKind$outboundSchema` instead. */
  export const outboundSchema = StreamRunAgentPartsKind$outboundSchema;
}

/** @internal */
export const StreamRunAgentParts1$inboundSchema: z.ZodType<
  StreamRunAgentParts1,
  z.ZodTypeDef,
  unknown
> = z.object({
  kind: StreamRunAgentPartsKind$inboundSchema,
  text: z.string(),
});

/** @internal */
export type StreamRunAgentParts1$Outbound = {
  kind: string;
  text: string;
};

/** @internal */
export const StreamRunAgentParts1$outboundSchema: z.ZodType<
  StreamRunAgentParts1$Outbound,
  z.ZodTypeDef,
  StreamRunAgentParts1
> = z.object({
  kind: StreamRunAgentPartsKind$outboundSchema,
  text: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace StreamRunAgentParts1$ {
  /** @deprecated use `StreamRunAgentParts1$inboundSchema` instead. */
  export const inboundSchema = StreamRunAgentParts1$inboundSchema;
  /** @deprecated use `StreamRunAgentParts1$outboundSchema` instead. */
  export const outboundSchema = StreamRunAgentParts1$outboundSchema;
  /** @deprecated use `StreamRunAgentParts1$Outbound` instead. */
  export type Outbound = StreamRunAgentParts1$Outbound;
}

export function streamRunAgentParts1ToJSON(
  streamRunAgentParts1: StreamRunAgentParts1,
): string {
  return JSON.stringify(
    StreamRunAgentParts1$outboundSchema.parse(streamRunAgentParts1),
  );
}

export function streamRunAgentParts1FromJSON(
  jsonString: string,
): SafeParseResult<StreamRunAgentParts1, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => StreamRunAgentParts1$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'StreamRunAgentParts1' from JSON`,
  );
}

/** @internal */
export const StreamRunAgentParts$inboundSchema: z.ZodType<
  StreamRunAgentParts,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => StreamRunAgentParts4$inboundSchema),
  z.lazy(() => StreamRunAgentParts1$inboundSchema),
  z.lazy(() => StreamRunAgentParts3$inboundSchema),
  z.lazy(() => Parts5$inboundSchema),
  z.lazy(() => StreamRunAgentParts2$inboundSchema),
]);

/** @internal */
export type StreamRunAgentParts$Outbound =
  | StreamRunAgentParts4$Outbound
  | StreamRunAgentParts1$Outbound
  | StreamRunAgentParts3$Outbound
  | Parts5$Outbound
  | StreamRunAgentParts2$Outbound;

/** @internal */
export const StreamRunAgentParts$outboundSchema: z.ZodType<
  StreamRunAgentParts$Outbound,
  z.ZodTypeDef,
  StreamRunAgentParts
> = z.union([
  z.lazy(() => StreamRunAgentParts4$outboundSchema),
  z.lazy(() => StreamRunAgentParts1$outboundSchema),
  z.lazy(() => StreamRunAgentParts3$outboundSchema),
  z.lazy(() => Parts5$outboundSchema),
  z.lazy(() => StreamRunAgentParts2$outboundSchema),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace StreamRunAgentParts$ {
  /** @deprecated use `StreamRunAgentParts$inboundSchema` instead. */
  export const inboundSchema = StreamRunAgentParts$inboundSchema;
  /** @deprecated use `StreamRunAgentParts$outboundSchema` instead. */
  export const outboundSchema = StreamRunAgentParts$outboundSchema;
  /** @deprecated use `StreamRunAgentParts$Outbound` instead. */
  export type Outbound = StreamRunAgentParts$Outbound;
}

export function streamRunAgentPartsToJSON(
  streamRunAgentParts: StreamRunAgentParts,
): string {
  return JSON.stringify(
    StreamRunAgentParts$outboundSchema.parse(streamRunAgentParts),
  );
}

export function streamRunAgentPartsFromJSON(
  jsonString: string,
): SafeParseResult<StreamRunAgentParts, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => StreamRunAgentParts$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'StreamRunAgentParts' from JSON`,
  );
}

/** @internal */
export const StreamRunAgentMessage$inboundSchema: z.ZodType<
  StreamRunAgentMessage,
  z.ZodTypeDef,
  unknown
> = z.object({
  messageId: z.string().optional(),
  role: z.union([
    StreamRunAgentRole1$inboundSchema,
    StreamRunAgentRole2$inboundSchema,
  ]),
  parts: z.array(
    z.union([
      z.lazy(() => StreamRunAgentParts4$inboundSchema),
      z.lazy(() => StreamRunAgentParts1$inboundSchema),
      z.lazy(() => StreamRunAgentParts3$inboundSchema),
      z.lazy(() => Parts5$inboundSchema),
      z.lazy(() => StreamRunAgentParts2$inboundSchema),
    ]),
  ),
  metadata: z.record(z.any()).optional(),
});

/** @internal */
export type StreamRunAgentMessage$Outbound = {
  messageId?: string | undefined;
  role: string | string;
  parts: Array<
    | StreamRunAgentParts4$Outbound
    | StreamRunAgentParts1$Outbound
    | StreamRunAgentParts3$Outbound
    | Parts5$Outbound
    | StreamRunAgentParts2$Outbound
  >;
  metadata?: { [k: string]: any } | undefined;
};

/** @internal */
export const StreamRunAgentMessage$outboundSchema: z.ZodType<
  StreamRunAgentMessage$Outbound,
  z.ZodTypeDef,
  StreamRunAgentMessage
> = z.object({
  messageId: z.string().optional(),
  role: z.union([
    StreamRunAgentRole1$outboundSchema,
    StreamRunAgentRole2$outboundSchema,
  ]),
  parts: z.array(
    z.union([
      z.lazy(() => StreamRunAgentParts4$outboundSchema),
      z.lazy(() => StreamRunAgentParts1$outboundSchema),
      z.lazy(() => StreamRunAgentParts3$outboundSchema),
      z.lazy(() => Parts5$outboundSchema),
      z.lazy(() => StreamRunAgentParts2$outboundSchema),
    ]),
  ),
  metadata: z.record(z.any()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace StreamRunAgentMessage$ {
  /** @deprecated use `StreamRunAgentMessage$inboundSchema` instead. */
  export const inboundSchema = StreamRunAgentMessage$inboundSchema;
  /** @deprecated use `StreamRunAgentMessage$outboundSchema` instead. */
  export const outboundSchema = StreamRunAgentMessage$outboundSchema;
  /** @deprecated use `StreamRunAgentMessage$Outbound` instead. */
  export type Outbound = StreamRunAgentMessage$Outbound;
}

export function streamRunAgentMessageToJSON(
  streamRunAgentMessage: StreamRunAgentMessage,
): string {
  return JSON.stringify(
    StreamRunAgentMessage$outboundSchema.parse(streamRunAgentMessage),
  );
}

export function streamRunAgentMessageFromJSON(
  jsonString: string,
): SafeParseResult<StreamRunAgentMessage, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => StreamRunAgentMessage$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'StreamRunAgentMessage' from JSON`,
  );
}

/** @internal */
export const StreamRunAgentTeamOfAgents$inboundSchema: z.ZodType<
  StreamRunAgentTeamOfAgents,
  z.ZodTypeDef,
  unknown
> = z.object({
  _id: z.string(),
  role: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "_id": "id",
  });
});

/** @internal */
export type StreamRunAgentTeamOfAgents$Outbound = {
  _id: string;
  role?: string | undefined;
};

/** @internal */
export const StreamRunAgentTeamOfAgents$outboundSchema: z.ZodType<
  StreamRunAgentTeamOfAgents$Outbound,
  z.ZodTypeDef,
  StreamRunAgentTeamOfAgents
> = z.object({
  id: z.string(),
  role: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    id: "_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace StreamRunAgentTeamOfAgents$ {
  /** @deprecated use `StreamRunAgentTeamOfAgents$inboundSchema` instead. */
  export const inboundSchema = StreamRunAgentTeamOfAgents$inboundSchema;
  /** @deprecated use `StreamRunAgentTeamOfAgents$outboundSchema` instead. */
  export const outboundSchema = StreamRunAgentTeamOfAgents$outboundSchema;
  /** @deprecated use `StreamRunAgentTeamOfAgents$Outbound` instead. */
  export type Outbound = StreamRunAgentTeamOfAgents$Outbound;
}

export function streamRunAgentTeamOfAgentsToJSON(
  streamRunAgentTeamOfAgents: StreamRunAgentTeamOfAgents,
): string {
  return JSON.stringify(
    StreamRunAgentTeamOfAgents$outboundSchema.parse(streamRunAgentTeamOfAgents),
  );
}

export function streamRunAgentTeamOfAgentsFromJSON(
  jsonString: string,
): SafeParseResult<StreamRunAgentTeamOfAgents, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => StreamRunAgentTeamOfAgents$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'StreamRunAgentTeamOfAgents' from JSON`,
  );
}

/** @internal */
export const StreamRunAgentToolsAgentsRequestRequestBodySettings12Type$inboundSchema:
  z.ZodNativeEnum<
    typeof StreamRunAgentToolsAgentsRequestRequestBodySettings12Type
  > = z.nativeEnum(StreamRunAgentToolsAgentsRequestRequestBodySettings12Type);

/** @internal */
export const StreamRunAgentToolsAgentsRequestRequestBodySettings12Type$outboundSchema:
  z.ZodNativeEnum<
    typeof StreamRunAgentToolsAgentsRequestRequestBodySettings12Type
  > = StreamRunAgentToolsAgentsRequestRequestBodySettings12Type$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace StreamRunAgentToolsAgentsRequestRequestBodySettings12Type$ {
  /** @deprecated use `StreamRunAgentToolsAgentsRequestRequestBodySettings12Type$inboundSchema` instead. */
  export const inboundSchema =
    StreamRunAgentToolsAgentsRequestRequestBodySettings12Type$inboundSchema;
  /** @deprecated use `StreamRunAgentToolsAgentsRequestRequestBodySettings12Type$outboundSchema` instead. */
  export const outboundSchema =
    StreamRunAgentToolsAgentsRequestRequestBodySettings12Type$outboundSchema;
}

/** @internal */
export const StreamRunAgentToolsFunction$inboundSchema: z.ZodType<
  StreamRunAgentToolsFunction,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.string(),
  description: z.string().optional(),
  strict: z.boolean().optional(),
  parameters: z.record(z.any()).optional(),
});

/** @internal */
export type StreamRunAgentToolsFunction$Outbound = {
  name: string;
  description?: string | undefined;
  strict?: boolean | undefined;
  parameters?: { [k: string]: any } | undefined;
};

/** @internal */
export const StreamRunAgentToolsFunction$outboundSchema: z.ZodType<
  StreamRunAgentToolsFunction$Outbound,
  z.ZodTypeDef,
  StreamRunAgentToolsFunction
> = z.object({
  name: z.string(),
  description: z.string().optional(),
  strict: z.boolean().optional(),
  parameters: z.record(z.any()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace StreamRunAgentToolsFunction$ {
  /** @deprecated use `StreamRunAgentToolsFunction$inboundSchema` instead. */
  export const inboundSchema = StreamRunAgentToolsFunction$inboundSchema;
  /** @deprecated use `StreamRunAgentToolsFunction$outboundSchema` instead. */
  export const outboundSchema = StreamRunAgentToolsFunction$outboundSchema;
  /** @deprecated use `StreamRunAgentToolsFunction$Outbound` instead. */
  export type Outbound = StreamRunAgentToolsFunction$Outbound;
}

export function streamRunAgentToolsFunctionToJSON(
  streamRunAgentToolsFunction: StreamRunAgentToolsFunction,
): string {
  return JSON.stringify(
    StreamRunAgentToolsFunction$outboundSchema.parse(
      streamRunAgentToolsFunction,
    ),
  );
}

export function streamRunAgentToolsFunctionFromJSON(
  jsonString: string,
): SafeParseResult<StreamRunAgentToolsFunction, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => StreamRunAgentToolsFunction$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'StreamRunAgentToolsFunction' from JSON`,
  );
}

/** @internal */
export const Tools12$inboundSchema: z.ZodType<Tools12, z.ZodTypeDef, unknown> =
  z.object({
    type:
      StreamRunAgentToolsAgentsRequestRequestBodySettings12Type$inboundSchema,
    _id: z.string().optional(),
    key: z.string(),
    display_name: z.string().optional(),
    description: z.string().optional(),
    requires_approval: z.boolean().default(false),
    function: z.lazy(() => StreamRunAgentToolsFunction$inboundSchema),
  }).transform((v) => {
    return remap$(v, {
      "_id": "id",
      "display_name": "displayName",
      "requires_approval": "requiresApproval",
    });
  });

/** @internal */
export type Tools12$Outbound = {
  type: string;
  _id?: string | undefined;
  key: string;
  display_name?: string | undefined;
  description?: string | undefined;
  requires_approval: boolean;
  function: StreamRunAgentToolsFunction$Outbound;
};

/** @internal */
export const Tools12$outboundSchema: z.ZodType<
  Tools12$Outbound,
  z.ZodTypeDef,
  Tools12
> = z.object({
  type:
    StreamRunAgentToolsAgentsRequestRequestBodySettings12Type$outboundSchema,
  id: z.string().optional(),
  key: z.string(),
  displayName: z.string().optional(),
  description: z.string().optional(),
  requiresApproval: z.boolean().default(false),
  function: z.lazy(() => StreamRunAgentToolsFunction$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    id: "_id",
    displayName: "display_name",
    requiresApproval: "requires_approval",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Tools12$ {
  /** @deprecated use `Tools12$inboundSchema` instead. */
  export const inboundSchema = Tools12$inboundSchema;
  /** @deprecated use `Tools12$outboundSchema` instead. */
  export const outboundSchema = Tools12$outboundSchema;
  /** @deprecated use `Tools12$Outbound` instead. */
  export type Outbound = Tools12$Outbound;
}

export function tools12ToJSON(tools12: Tools12): string {
  return JSON.stringify(Tools12$outboundSchema.parse(tools12));
}

export function tools12FromJSON(
  jsonString: string,
): SafeParseResult<Tools12, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Tools12$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Tools12' from JSON`,
  );
}

/** @internal */
export const ToolsStatus$inboundSchema: z.ZodNativeEnum<typeof ToolsStatus> = z
  .nativeEnum(ToolsStatus);

/** @internal */
export const ToolsStatus$outboundSchema: z.ZodNativeEnum<typeof ToolsStatus> =
  ToolsStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ToolsStatus$ {
  /** @deprecated use `ToolsStatus$inboundSchema` instead. */
  export const inboundSchema = ToolsStatus$inboundSchema;
  /** @deprecated use `ToolsStatus$outboundSchema` instead. */
  export const outboundSchema = ToolsStatus$outboundSchema;
}

/** @internal */
export const StreamRunAgentToolsAgentsRequestRequestBodySettings11Type$inboundSchema:
  z.ZodNativeEnum<
    typeof StreamRunAgentToolsAgentsRequestRequestBodySettings11Type
  > = z.nativeEnum(StreamRunAgentToolsAgentsRequestRequestBodySettings11Type);

/** @internal */
export const StreamRunAgentToolsAgentsRequestRequestBodySettings11Type$outboundSchema:
  z.ZodNativeEnum<
    typeof StreamRunAgentToolsAgentsRequestRequestBodySettings11Type
  > = StreamRunAgentToolsAgentsRequestRequestBodySettings11Type$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace StreamRunAgentToolsAgentsRequestRequestBodySettings11Type$ {
  /** @deprecated use `StreamRunAgentToolsAgentsRequestRequestBodySettings11Type$inboundSchema` instead. */
  export const inboundSchema =
    StreamRunAgentToolsAgentsRequestRequestBodySettings11Type$inboundSchema;
  /** @deprecated use `StreamRunAgentToolsAgentsRequestRequestBodySettings11Type$outboundSchema` instead. */
  export const outboundSchema =
    StreamRunAgentToolsAgentsRequestRequestBodySettings11Type$outboundSchema;
}

/** @internal */
export const ToolsMethod$inboundSchema: z.ZodNativeEnum<typeof ToolsMethod> = z
  .nativeEnum(ToolsMethod);

/** @internal */
export const ToolsMethod$outboundSchema: z.ZodNativeEnum<typeof ToolsMethod> =
  ToolsMethod$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ToolsMethod$ {
  /** @deprecated use `ToolsMethod$inboundSchema` instead. */
  export const inboundSchema = ToolsMethod$inboundSchema;
  /** @deprecated use `ToolsMethod$outboundSchema` instead. */
  export const outboundSchema = ToolsMethod$outboundSchema;
}

/** @internal */
export const ToolsBlueprint$inboundSchema: z.ZodType<
  ToolsBlueprint,
  z.ZodTypeDef,
  unknown
> = z.object({
  url: z.string(),
  method: ToolsMethod$inboundSchema,
  headers: z.record(z.string()).optional(),
  body: z.record(z.any()).optional(),
});

/** @internal */
export type ToolsBlueprint$Outbound = {
  url: string;
  method: string;
  headers?: { [k: string]: string } | undefined;
  body?: { [k: string]: any } | undefined;
};

/** @internal */
export const ToolsBlueprint$outboundSchema: z.ZodType<
  ToolsBlueprint$Outbound,
  z.ZodTypeDef,
  ToolsBlueprint
> = z.object({
  url: z.string(),
  method: ToolsMethod$outboundSchema,
  headers: z.record(z.string()).optional(),
  body: z.record(z.any()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ToolsBlueprint$ {
  /** @deprecated use `ToolsBlueprint$inboundSchema` instead. */
  export const inboundSchema = ToolsBlueprint$inboundSchema;
  /** @deprecated use `ToolsBlueprint$outboundSchema` instead. */
  export const outboundSchema = ToolsBlueprint$outboundSchema;
  /** @deprecated use `ToolsBlueprint$Outbound` instead. */
  export type Outbound = ToolsBlueprint$Outbound;
}

export function toolsBlueprintToJSON(toolsBlueprint: ToolsBlueprint): string {
  return JSON.stringify(ToolsBlueprint$outboundSchema.parse(toolsBlueprint));
}

export function toolsBlueprintFromJSON(
  jsonString: string,
): SafeParseResult<ToolsBlueprint, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ToolsBlueprint$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ToolsBlueprint' from JSON`,
  );
}

/** @internal */
export const StreamRunAgentToolsAgentsRequestRequestBodySettings11HttpType$inboundSchema:
  z.ZodNativeEnum<
    typeof StreamRunAgentToolsAgentsRequestRequestBodySettings11HttpType
  > = z.nativeEnum(
    StreamRunAgentToolsAgentsRequestRequestBodySettings11HttpType,
  );

/** @internal */
export const StreamRunAgentToolsAgentsRequestRequestBodySettings11HttpType$outboundSchema:
  z.ZodNativeEnum<
    typeof StreamRunAgentToolsAgentsRequestRequestBodySettings11HttpType
  > =
    StreamRunAgentToolsAgentsRequestRequestBodySettings11HttpType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace StreamRunAgentToolsAgentsRequestRequestBodySettings11HttpType$ {
  /** @deprecated use `StreamRunAgentToolsAgentsRequestRequestBodySettings11HttpType$inboundSchema` instead. */
  export const inboundSchema =
    StreamRunAgentToolsAgentsRequestRequestBodySettings11HttpType$inboundSchema;
  /** @deprecated use `StreamRunAgentToolsAgentsRequestRequestBodySettings11HttpType$outboundSchema` instead. */
  export const outboundSchema =
    StreamRunAgentToolsAgentsRequestRequestBodySettings11HttpType$outboundSchema;
}

/** @internal */
export const ToolsDefaultValue$inboundSchema: z.ZodType<
  ToolsDefaultValue,
  z.ZodTypeDef,
  unknown
> = z.union([z.string(), z.number(), z.boolean()]);

/** @internal */
export type ToolsDefaultValue$Outbound = string | number | boolean;

/** @internal */
export const ToolsDefaultValue$outboundSchema: z.ZodType<
  ToolsDefaultValue$Outbound,
  z.ZodTypeDef,
  ToolsDefaultValue
> = z.union([z.string(), z.number(), z.boolean()]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ToolsDefaultValue$ {
  /** @deprecated use `ToolsDefaultValue$inboundSchema` instead. */
  export const inboundSchema = ToolsDefaultValue$inboundSchema;
  /** @deprecated use `ToolsDefaultValue$outboundSchema` instead. */
  export const outboundSchema = ToolsDefaultValue$outboundSchema;
  /** @deprecated use `ToolsDefaultValue$Outbound` instead. */
  export type Outbound = ToolsDefaultValue$Outbound;
}

export function toolsDefaultValueToJSON(
  toolsDefaultValue: ToolsDefaultValue,
): string {
  return JSON.stringify(
    ToolsDefaultValue$outboundSchema.parse(toolsDefaultValue),
  );
}

export function toolsDefaultValueFromJSON(
  jsonString: string,
): SafeParseResult<ToolsDefaultValue, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ToolsDefaultValue$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ToolsDefaultValue' from JSON`,
  );
}

/** @internal */
export const ToolsArguments$inboundSchema: z.ZodType<
  ToolsArguments,
  z.ZodTypeDef,
  unknown
> = z.object({
  type:
    StreamRunAgentToolsAgentsRequestRequestBodySettings11HttpType$inboundSchema,
  description: z.string(),
  send_to_model: z.boolean().default(true),
  default_value: z.union([z.string(), z.number(), z.boolean()]).optional(),
}).transform((v) => {
  return remap$(v, {
    "send_to_model": "sendToModel",
    "default_value": "defaultValue",
  });
});

/** @internal */
export type ToolsArguments$Outbound = {
  type: string;
  description: string;
  send_to_model: boolean;
  default_value?: string | number | boolean | undefined;
};

/** @internal */
export const ToolsArguments$outboundSchema: z.ZodType<
  ToolsArguments$Outbound,
  z.ZodTypeDef,
  ToolsArguments
> = z.object({
  type:
    StreamRunAgentToolsAgentsRequestRequestBodySettings11HttpType$outboundSchema,
  description: z.string(),
  sendToModel: z.boolean().default(true),
  defaultValue: z.union([z.string(), z.number(), z.boolean()]).optional(),
}).transform((v) => {
  return remap$(v, {
    sendToModel: "send_to_model",
    defaultValue: "default_value",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ToolsArguments$ {
  /** @deprecated use `ToolsArguments$inboundSchema` instead. */
  export const inboundSchema = ToolsArguments$inboundSchema;
  /** @deprecated use `ToolsArguments$outboundSchema` instead. */
  export const outboundSchema = ToolsArguments$outboundSchema;
  /** @deprecated use `ToolsArguments$Outbound` instead. */
  export type Outbound = ToolsArguments$Outbound;
}

export function toolsArgumentsToJSON(toolsArguments: ToolsArguments): string {
  return JSON.stringify(ToolsArguments$outboundSchema.parse(toolsArguments));
}

export function toolsArgumentsFromJSON(
  jsonString: string,
): SafeParseResult<ToolsArguments, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ToolsArguments$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ToolsArguments' from JSON`,
  );
}

/** @internal */
export const ToolsHttp$inboundSchema: z.ZodType<
  ToolsHttp,
  z.ZodTypeDef,
  unknown
> = z.object({
  blueprint: z.lazy(() => ToolsBlueprint$inboundSchema),
  arguments: z.record(z.lazy(() => ToolsArguments$inboundSchema)).optional(),
});

/** @internal */
export type ToolsHttp$Outbound = {
  blueprint: ToolsBlueprint$Outbound;
  arguments?: { [k: string]: ToolsArguments$Outbound } | undefined;
};

/** @internal */
export const ToolsHttp$outboundSchema: z.ZodType<
  ToolsHttp$Outbound,
  z.ZodTypeDef,
  ToolsHttp
> = z.object({
  blueprint: z.lazy(() => ToolsBlueprint$outboundSchema),
  arguments: z.record(z.lazy(() => ToolsArguments$outboundSchema)).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ToolsHttp$ {
  /** @deprecated use `ToolsHttp$inboundSchema` instead. */
  export const inboundSchema = ToolsHttp$inboundSchema;
  /** @deprecated use `ToolsHttp$outboundSchema` instead. */
  export const outboundSchema = ToolsHttp$outboundSchema;
  /** @deprecated use `ToolsHttp$Outbound` instead. */
  export type Outbound = ToolsHttp$Outbound;
}

export function toolsHttpToJSON(toolsHttp: ToolsHttp): string {
  return JSON.stringify(ToolsHttp$outboundSchema.parse(toolsHttp));
}

export function toolsHttpFromJSON(
  jsonString: string,
): SafeParseResult<ToolsHttp, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ToolsHttp$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ToolsHttp' from JSON`,
  );
}

/** @internal */
export const Tools11$inboundSchema: z.ZodType<Tools11, z.ZodTypeDef, unknown> =
  z.object({
    _id: z.string().default("01K5699S2Q4XJ1WRX4H36HP02A"),
    path: z.string(),
    key: z.string(),
    display_name: z.string(),
    description: z.string(),
    status: ToolsStatus$inboundSchema.default("live"),
    version_hash: z.string().optional(),
    type:
      StreamRunAgentToolsAgentsRequestRequestBodySettings11Type$inboundSchema,
    http: z.lazy(() => ToolsHttp$inboundSchema),
    requires_approval: z.boolean().default(false),
  }).transform((v) => {
    return remap$(v, {
      "_id": "id",
      "display_name": "displayName",
      "version_hash": "versionHash",
      "requires_approval": "requiresApproval",
    });
  });

/** @internal */
export type Tools11$Outbound = {
  _id: string;
  path: string;
  key: string;
  display_name: string;
  description: string;
  status: string;
  version_hash?: string | undefined;
  type: string;
  http: ToolsHttp$Outbound;
  requires_approval: boolean;
};

/** @internal */
export const Tools11$outboundSchema: z.ZodType<
  Tools11$Outbound,
  z.ZodTypeDef,
  Tools11
> = z.object({
  id: z.string().default("01K5699S2Q4XJ1WRX4H36HP02A"),
  path: z.string(),
  key: z.string(),
  displayName: z.string(),
  description: z.string(),
  status: ToolsStatus$outboundSchema.default("live"),
  versionHash: z.string().optional(),
  type:
    StreamRunAgentToolsAgentsRequestRequestBodySettings11Type$outboundSchema,
  http: z.lazy(() => ToolsHttp$outboundSchema),
  requiresApproval: z.boolean().default(false),
}).transform((v) => {
  return remap$(v, {
    id: "_id",
    displayName: "display_name",
    versionHash: "version_hash",
    requiresApproval: "requires_approval",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Tools11$ {
  /** @deprecated use `Tools11$inboundSchema` instead. */
  export const inboundSchema = Tools11$inboundSchema;
  /** @deprecated use `Tools11$outboundSchema` instead. */
  export const outboundSchema = Tools11$outboundSchema;
  /** @deprecated use `Tools11$Outbound` instead. */
  export type Outbound = Tools11$Outbound;
}

export function tools11ToJSON(tools11: Tools11): string {
  return JSON.stringify(Tools11$outboundSchema.parse(tools11));
}

export function tools11FromJSON(
  jsonString: string,
): SafeParseResult<Tools11, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Tools11$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Tools11' from JSON`,
  );
}

/** @internal */
export const StreamRunAgentToolsAgentsRequestRequestBodySettings10Type$inboundSchema:
  z.ZodNativeEnum<
    typeof StreamRunAgentToolsAgentsRequestRequestBodySettings10Type
  > = z.nativeEnum(StreamRunAgentToolsAgentsRequestRequestBodySettings10Type);

/** @internal */
export const StreamRunAgentToolsAgentsRequestRequestBodySettings10Type$outboundSchema:
  z.ZodNativeEnum<
    typeof StreamRunAgentToolsAgentsRequestRequestBodySettings10Type
  > = StreamRunAgentToolsAgentsRequestRequestBodySettings10Type$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace StreamRunAgentToolsAgentsRequestRequestBodySettings10Type$ {
  /** @deprecated use `StreamRunAgentToolsAgentsRequestRequestBodySettings10Type$inboundSchema` instead. */
  export const inboundSchema =
    StreamRunAgentToolsAgentsRequestRequestBodySettings10Type$inboundSchema;
  /** @deprecated use `StreamRunAgentToolsAgentsRequestRequestBodySettings10Type$outboundSchema` instead. */
  export const outboundSchema =
    StreamRunAgentToolsAgentsRequestRequestBodySettings10Type$outboundSchema;
}

/** @internal */
export const Tools10$inboundSchema: z.ZodType<Tools10, z.ZodTypeDef, unknown> =
  z.object({
    type:
      StreamRunAgentToolsAgentsRequestRequestBodySettings10Type$inboundSchema,
    requires_approval: z.boolean().default(false),
  }).transform((v) => {
    return remap$(v, {
      "requires_approval": "requiresApproval",
    });
  });

/** @internal */
export type Tools10$Outbound = {
  type: string;
  requires_approval: boolean;
};

/** @internal */
export const Tools10$outboundSchema: z.ZodType<
  Tools10$Outbound,
  z.ZodTypeDef,
  Tools10
> = z.object({
  type:
    StreamRunAgentToolsAgentsRequestRequestBodySettings10Type$outboundSchema,
  requiresApproval: z.boolean().default(false),
}).transform((v) => {
  return remap$(v, {
    requiresApproval: "requires_approval",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Tools10$ {
  /** @deprecated use `Tools10$inboundSchema` instead. */
  export const inboundSchema = Tools10$inboundSchema;
  /** @deprecated use `Tools10$outboundSchema` instead. */
  export const outboundSchema = Tools10$outboundSchema;
  /** @deprecated use `Tools10$Outbound` instead. */
  export type Outbound = Tools10$Outbound;
}

export function tools10ToJSON(tools10: Tools10): string {
  return JSON.stringify(Tools10$outboundSchema.parse(tools10));
}

export function tools10FromJSON(
  jsonString: string,
): SafeParseResult<Tools10, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Tools10$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Tools10' from JSON`,
  );
}

/** @internal */
export const StreamRunAgentToolsAgentsRequestRequestBodySettings9Type$inboundSchema:
  z.ZodNativeEnum<
    typeof StreamRunAgentToolsAgentsRequestRequestBodySettings9Type
  > = z.nativeEnum(StreamRunAgentToolsAgentsRequestRequestBodySettings9Type);

/** @internal */
export const StreamRunAgentToolsAgentsRequestRequestBodySettings9Type$outboundSchema:
  z.ZodNativeEnum<
    typeof StreamRunAgentToolsAgentsRequestRequestBodySettings9Type
  > = StreamRunAgentToolsAgentsRequestRequestBodySettings9Type$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace StreamRunAgentToolsAgentsRequestRequestBodySettings9Type$ {
  /** @deprecated use `StreamRunAgentToolsAgentsRequestRequestBodySettings9Type$inboundSchema` instead. */
  export const inboundSchema =
    StreamRunAgentToolsAgentsRequestRequestBodySettings9Type$inboundSchema;
  /** @deprecated use `StreamRunAgentToolsAgentsRequestRequestBodySettings9Type$outboundSchema` instead. */
  export const outboundSchema =
    StreamRunAgentToolsAgentsRequestRequestBodySettings9Type$outboundSchema;
}

/** @internal */
export const Tools9$inboundSchema: z.ZodType<Tools9, z.ZodTypeDef, unknown> = z
  .object({
    type:
      StreamRunAgentToolsAgentsRequestRequestBodySettings9Type$inboundSchema,
    requires_approval: z.boolean().default(false),
  }).transform((v) => {
    return remap$(v, {
      "requires_approval": "requiresApproval",
    });
  });

/** @internal */
export type Tools9$Outbound = {
  type: string;
  requires_approval: boolean;
};

/** @internal */
export const Tools9$outboundSchema: z.ZodType<
  Tools9$Outbound,
  z.ZodTypeDef,
  Tools9
> = z.object({
  type: StreamRunAgentToolsAgentsRequestRequestBodySettings9Type$outboundSchema,
  requiresApproval: z.boolean().default(false),
}).transform((v) => {
  return remap$(v, {
    requiresApproval: "requires_approval",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Tools9$ {
  /** @deprecated use `Tools9$inboundSchema` instead. */
  export const inboundSchema = Tools9$inboundSchema;
  /** @deprecated use `Tools9$outboundSchema` instead. */
  export const outboundSchema = Tools9$outboundSchema;
  /** @deprecated use `Tools9$Outbound` instead. */
  export type Outbound = Tools9$Outbound;
}

export function tools9ToJSON(tools9: Tools9): string {
  return JSON.stringify(Tools9$outboundSchema.parse(tools9));
}

export function tools9FromJSON(
  jsonString: string,
): SafeParseResult<Tools9, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Tools9$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Tools9' from JSON`,
  );
}

/** @internal */
export const StreamRunAgentToolsAgentsRequestRequestBodySettings8Type$inboundSchema:
  z.ZodNativeEnum<
    typeof StreamRunAgentToolsAgentsRequestRequestBodySettings8Type
  > = z.nativeEnum(StreamRunAgentToolsAgentsRequestRequestBodySettings8Type);

/** @internal */
export const StreamRunAgentToolsAgentsRequestRequestBodySettings8Type$outboundSchema:
  z.ZodNativeEnum<
    typeof StreamRunAgentToolsAgentsRequestRequestBodySettings8Type
  > = StreamRunAgentToolsAgentsRequestRequestBodySettings8Type$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace StreamRunAgentToolsAgentsRequestRequestBodySettings8Type$ {
  /** @deprecated use `StreamRunAgentToolsAgentsRequestRequestBodySettings8Type$inboundSchema` instead. */
  export const inboundSchema =
    StreamRunAgentToolsAgentsRequestRequestBodySettings8Type$inboundSchema;
  /** @deprecated use `StreamRunAgentToolsAgentsRequestRequestBodySettings8Type$outboundSchema` instead. */
  export const outboundSchema =
    StreamRunAgentToolsAgentsRequestRequestBodySettings8Type$outboundSchema;
}

/** @internal */
export const Tools8$inboundSchema: z.ZodType<Tools8, z.ZodTypeDef, unknown> = z
  .object({
    type:
      StreamRunAgentToolsAgentsRequestRequestBodySettings8Type$inboundSchema,
    requires_approval: z.boolean().default(false),
  }).transform((v) => {
    return remap$(v, {
      "requires_approval": "requiresApproval",
    });
  });

/** @internal */
export type Tools8$Outbound = {
  type: string;
  requires_approval: boolean;
};

/** @internal */
export const Tools8$outboundSchema: z.ZodType<
  Tools8$Outbound,
  z.ZodTypeDef,
  Tools8
> = z.object({
  type: StreamRunAgentToolsAgentsRequestRequestBodySettings8Type$outboundSchema,
  requiresApproval: z.boolean().default(false),
}).transform((v) => {
  return remap$(v, {
    requiresApproval: "requires_approval",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Tools8$ {
  /** @deprecated use `Tools8$inboundSchema` instead. */
  export const inboundSchema = Tools8$inboundSchema;
  /** @deprecated use `Tools8$outboundSchema` instead. */
  export const outboundSchema = Tools8$outboundSchema;
  /** @deprecated use `Tools8$Outbound` instead. */
  export type Outbound = Tools8$Outbound;
}

export function tools8ToJSON(tools8: Tools8): string {
  return JSON.stringify(Tools8$outboundSchema.parse(tools8));
}

export function tools8FromJSON(
  jsonString: string,
): SafeParseResult<Tools8, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Tools8$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Tools8' from JSON`,
  );
}

/** @internal */
export const StreamRunAgentToolsAgentsRequestRequestBodySettings7Type$inboundSchema:
  z.ZodNativeEnum<
    typeof StreamRunAgentToolsAgentsRequestRequestBodySettings7Type
  > = z.nativeEnum(StreamRunAgentToolsAgentsRequestRequestBodySettings7Type);

/** @internal */
export const StreamRunAgentToolsAgentsRequestRequestBodySettings7Type$outboundSchema:
  z.ZodNativeEnum<
    typeof StreamRunAgentToolsAgentsRequestRequestBodySettings7Type
  > = StreamRunAgentToolsAgentsRequestRequestBodySettings7Type$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace StreamRunAgentToolsAgentsRequestRequestBodySettings7Type$ {
  /** @deprecated use `StreamRunAgentToolsAgentsRequestRequestBodySettings7Type$inboundSchema` instead. */
  export const inboundSchema =
    StreamRunAgentToolsAgentsRequestRequestBodySettings7Type$inboundSchema;
  /** @deprecated use `StreamRunAgentToolsAgentsRequestRequestBodySettings7Type$outboundSchema` instead. */
  export const outboundSchema =
    StreamRunAgentToolsAgentsRequestRequestBodySettings7Type$outboundSchema;
}

/** @internal */
export const Tools7$inboundSchema: z.ZodType<Tools7, z.ZodTypeDef, unknown> = z
  .object({
    type:
      StreamRunAgentToolsAgentsRequestRequestBodySettings7Type$inboundSchema,
    requires_approval: z.boolean().default(false),
  }).transform((v) => {
    return remap$(v, {
      "requires_approval": "requiresApproval",
    });
  });

/** @internal */
export type Tools7$Outbound = {
  type: string;
  requires_approval: boolean;
};

/** @internal */
export const Tools7$outboundSchema: z.ZodType<
  Tools7$Outbound,
  z.ZodTypeDef,
  Tools7
> = z.object({
  type: StreamRunAgentToolsAgentsRequestRequestBodySettings7Type$outboundSchema,
  requiresApproval: z.boolean().default(false),
}).transform((v) => {
  return remap$(v, {
    requiresApproval: "requires_approval",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Tools7$ {
  /** @deprecated use `Tools7$inboundSchema` instead. */
  export const inboundSchema = Tools7$inboundSchema;
  /** @deprecated use `Tools7$outboundSchema` instead. */
  export const outboundSchema = Tools7$outboundSchema;
  /** @deprecated use `Tools7$Outbound` instead. */
  export type Outbound = Tools7$Outbound;
}

export function tools7ToJSON(tools7: Tools7): string {
  return JSON.stringify(Tools7$outboundSchema.parse(tools7));
}

export function tools7FromJSON(
  jsonString: string,
): SafeParseResult<Tools7, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Tools7$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Tools7' from JSON`,
  );
}

/** @internal */
export const StreamRunAgentToolsAgentsRequestRequestBodySettings6Type$inboundSchema:
  z.ZodNativeEnum<
    typeof StreamRunAgentToolsAgentsRequestRequestBodySettings6Type
  > = z.nativeEnum(StreamRunAgentToolsAgentsRequestRequestBodySettings6Type);

/** @internal */
export const StreamRunAgentToolsAgentsRequestRequestBodySettings6Type$outboundSchema:
  z.ZodNativeEnum<
    typeof StreamRunAgentToolsAgentsRequestRequestBodySettings6Type
  > = StreamRunAgentToolsAgentsRequestRequestBodySettings6Type$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace StreamRunAgentToolsAgentsRequestRequestBodySettings6Type$ {
  /** @deprecated use `StreamRunAgentToolsAgentsRequestRequestBodySettings6Type$inboundSchema` instead. */
  export const inboundSchema =
    StreamRunAgentToolsAgentsRequestRequestBodySettings6Type$inboundSchema;
  /** @deprecated use `StreamRunAgentToolsAgentsRequestRequestBodySettings6Type$outboundSchema` instead. */
  export const outboundSchema =
    StreamRunAgentToolsAgentsRequestRequestBodySettings6Type$outboundSchema;
}

/** @internal */
export const Tools6$inboundSchema: z.ZodType<Tools6, z.ZodTypeDef, unknown> = z
  .object({
    type:
      StreamRunAgentToolsAgentsRequestRequestBodySettings6Type$inboundSchema,
    requires_approval: z.boolean().default(false),
  }).transform((v) => {
    return remap$(v, {
      "requires_approval": "requiresApproval",
    });
  });

/** @internal */
export type Tools6$Outbound = {
  type: string;
  requires_approval: boolean;
};

/** @internal */
export const Tools6$outboundSchema: z.ZodType<
  Tools6$Outbound,
  z.ZodTypeDef,
  Tools6
> = z.object({
  type: StreamRunAgentToolsAgentsRequestRequestBodySettings6Type$outboundSchema,
  requiresApproval: z.boolean().default(false),
}).transform((v) => {
  return remap$(v, {
    requiresApproval: "requires_approval",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Tools6$ {
  /** @deprecated use `Tools6$inboundSchema` instead. */
  export const inboundSchema = Tools6$inboundSchema;
  /** @deprecated use `Tools6$outboundSchema` instead. */
  export const outboundSchema = Tools6$outboundSchema;
  /** @deprecated use `Tools6$Outbound` instead. */
  export type Outbound = Tools6$Outbound;
}

export function tools6ToJSON(tools6: Tools6): string {
  return JSON.stringify(Tools6$outboundSchema.parse(tools6));
}

export function tools6FromJSON(
  jsonString: string,
): SafeParseResult<Tools6, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Tools6$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Tools6' from JSON`,
  );
}

/** @internal */
export const StreamRunAgentToolsAgentsRequestRequestBodySettingsType$inboundSchema:
  z.ZodNativeEnum<
    typeof StreamRunAgentToolsAgentsRequestRequestBodySettingsType
  > = z.nativeEnum(StreamRunAgentToolsAgentsRequestRequestBodySettingsType);

/** @internal */
export const StreamRunAgentToolsAgentsRequestRequestBodySettingsType$outboundSchema:
  z.ZodNativeEnum<
    typeof StreamRunAgentToolsAgentsRequestRequestBodySettingsType
  > = StreamRunAgentToolsAgentsRequestRequestBodySettingsType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace StreamRunAgentToolsAgentsRequestRequestBodySettingsType$ {
  /** @deprecated use `StreamRunAgentToolsAgentsRequestRequestBodySettingsType$inboundSchema` instead. */
  export const inboundSchema =
    StreamRunAgentToolsAgentsRequestRequestBodySettingsType$inboundSchema;
  /** @deprecated use `StreamRunAgentToolsAgentsRequestRequestBodySettingsType$outboundSchema` instead. */
  export const outboundSchema =
    StreamRunAgentToolsAgentsRequestRequestBodySettingsType$outboundSchema;
}

/** @internal */
export const StreamRunAgentTools5$inboundSchema: z.ZodType<
  StreamRunAgentTools5,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: StreamRunAgentToolsAgentsRequestRequestBodySettingsType$inboundSchema,
  requires_approval: z.boolean().default(false),
}).transform((v) => {
  return remap$(v, {
    "requires_approval": "requiresApproval",
  });
});

/** @internal */
export type StreamRunAgentTools5$Outbound = {
  type: string;
  requires_approval: boolean;
};

/** @internal */
export const StreamRunAgentTools5$outboundSchema: z.ZodType<
  StreamRunAgentTools5$Outbound,
  z.ZodTypeDef,
  StreamRunAgentTools5
> = z.object({
  type: StreamRunAgentToolsAgentsRequestRequestBodySettingsType$outboundSchema,
  requiresApproval: z.boolean().default(false),
}).transform((v) => {
  return remap$(v, {
    requiresApproval: "requires_approval",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace StreamRunAgentTools5$ {
  /** @deprecated use `StreamRunAgentTools5$inboundSchema` instead. */
  export const inboundSchema = StreamRunAgentTools5$inboundSchema;
  /** @deprecated use `StreamRunAgentTools5$outboundSchema` instead. */
  export const outboundSchema = StreamRunAgentTools5$outboundSchema;
  /** @deprecated use `StreamRunAgentTools5$Outbound` instead. */
  export type Outbound = StreamRunAgentTools5$Outbound;
}

export function streamRunAgentTools5ToJSON(
  streamRunAgentTools5: StreamRunAgentTools5,
): string {
  return JSON.stringify(
    StreamRunAgentTools5$outboundSchema.parse(streamRunAgentTools5),
  );
}

export function streamRunAgentTools5FromJSON(
  jsonString: string,
): SafeParseResult<StreamRunAgentTools5, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => StreamRunAgentTools5$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'StreamRunAgentTools5' from JSON`,
  );
}

/** @internal */
export const StreamRunAgentToolsAgentsRequestRequestBodyType$inboundSchema:
  z.ZodNativeEnum<typeof StreamRunAgentToolsAgentsRequestRequestBodyType> = z
    .nativeEnum(StreamRunAgentToolsAgentsRequestRequestBodyType);

/** @internal */
export const StreamRunAgentToolsAgentsRequestRequestBodyType$outboundSchema:
  z.ZodNativeEnum<typeof StreamRunAgentToolsAgentsRequestRequestBodyType> =
    StreamRunAgentToolsAgentsRequestRequestBodyType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace StreamRunAgentToolsAgentsRequestRequestBodyType$ {
  /** @deprecated use `StreamRunAgentToolsAgentsRequestRequestBodyType$inboundSchema` instead. */
  export const inboundSchema =
    StreamRunAgentToolsAgentsRequestRequestBodyType$inboundSchema;
  /** @deprecated use `StreamRunAgentToolsAgentsRequestRequestBodyType$outboundSchema` instead. */
  export const outboundSchema =
    StreamRunAgentToolsAgentsRequestRequestBodyType$outboundSchema;
}

/** @internal */
export const StreamRunAgentTools4$inboundSchema: z.ZodType<
  StreamRunAgentTools4,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: StreamRunAgentToolsAgentsRequestRequestBodyType$inboundSchema,
  requires_approval: z.boolean().default(false),
}).transform((v) => {
  return remap$(v, {
    "requires_approval": "requiresApproval",
  });
});

/** @internal */
export type StreamRunAgentTools4$Outbound = {
  type: string;
  requires_approval: boolean;
};

/** @internal */
export const StreamRunAgentTools4$outboundSchema: z.ZodType<
  StreamRunAgentTools4$Outbound,
  z.ZodTypeDef,
  StreamRunAgentTools4
> = z.object({
  type: StreamRunAgentToolsAgentsRequestRequestBodyType$outboundSchema,
  requiresApproval: z.boolean().default(false),
}).transform((v) => {
  return remap$(v, {
    requiresApproval: "requires_approval",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace StreamRunAgentTools4$ {
  /** @deprecated use `StreamRunAgentTools4$inboundSchema` instead. */
  export const inboundSchema = StreamRunAgentTools4$inboundSchema;
  /** @deprecated use `StreamRunAgentTools4$outboundSchema` instead. */
  export const outboundSchema = StreamRunAgentTools4$outboundSchema;
  /** @deprecated use `StreamRunAgentTools4$Outbound` instead. */
  export type Outbound = StreamRunAgentTools4$Outbound;
}

export function streamRunAgentTools4ToJSON(
  streamRunAgentTools4: StreamRunAgentTools4,
): string {
  return JSON.stringify(
    StreamRunAgentTools4$outboundSchema.parse(streamRunAgentTools4),
  );
}

export function streamRunAgentTools4FromJSON(
  jsonString: string,
): SafeParseResult<StreamRunAgentTools4, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => StreamRunAgentTools4$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'StreamRunAgentTools4' from JSON`,
  );
}

/** @internal */
export const StreamRunAgentToolsAgentsRequestType$inboundSchema:
  z.ZodNativeEnum<typeof StreamRunAgentToolsAgentsRequestType> = z.nativeEnum(
    StreamRunAgentToolsAgentsRequestType,
  );

/** @internal */
export const StreamRunAgentToolsAgentsRequestType$outboundSchema:
  z.ZodNativeEnum<typeof StreamRunAgentToolsAgentsRequestType> =
    StreamRunAgentToolsAgentsRequestType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace StreamRunAgentToolsAgentsRequestType$ {
  /** @deprecated use `StreamRunAgentToolsAgentsRequestType$inboundSchema` instead. */
  export const inboundSchema =
    StreamRunAgentToolsAgentsRequestType$inboundSchema;
  /** @deprecated use `StreamRunAgentToolsAgentsRequestType$outboundSchema` instead. */
  export const outboundSchema =
    StreamRunAgentToolsAgentsRequestType$outboundSchema;
}

/** @internal */
export const StreamRunAgentTools3$inboundSchema: z.ZodType<
  StreamRunAgentTools3,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: StreamRunAgentToolsAgentsRequestType$inboundSchema,
  requires_approval: z.boolean().default(false),
}).transform((v) => {
  return remap$(v, {
    "requires_approval": "requiresApproval",
  });
});

/** @internal */
export type StreamRunAgentTools3$Outbound = {
  type: string;
  requires_approval: boolean;
};

/** @internal */
export const StreamRunAgentTools3$outboundSchema: z.ZodType<
  StreamRunAgentTools3$Outbound,
  z.ZodTypeDef,
  StreamRunAgentTools3
> = z.object({
  type: StreamRunAgentToolsAgentsRequestType$outboundSchema,
  requiresApproval: z.boolean().default(false),
}).transform((v) => {
  return remap$(v, {
    requiresApproval: "requires_approval",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace StreamRunAgentTools3$ {
  /** @deprecated use `StreamRunAgentTools3$inboundSchema` instead. */
  export const inboundSchema = StreamRunAgentTools3$inboundSchema;
  /** @deprecated use `StreamRunAgentTools3$outboundSchema` instead. */
  export const outboundSchema = StreamRunAgentTools3$outboundSchema;
  /** @deprecated use `StreamRunAgentTools3$Outbound` instead. */
  export type Outbound = StreamRunAgentTools3$Outbound;
}

export function streamRunAgentTools3ToJSON(
  streamRunAgentTools3: StreamRunAgentTools3,
): string {
  return JSON.stringify(
    StreamRunAgentTools3$outboundSchema.parse(streamRunAgentTools3),
  );
}

export function streamRunAgentTools3FromJSON(
  jsonString: string,
): SafeParseResult<StreamRunAgentTools3, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => StreamRunAgentTools3$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'StreamRunAgentTools3' from JSON`,
  );
}

/** @internal */
export const StreamRunAgentToolsAgentsType$inboundSchema: z.ZodNativeEnum<
  typeof StreamRunAgentToolsAgentsType
> = z.nativeEnum(StreamRunAgentToolsAgentsType);

/** @internal */
export const StreamRunAgentToolsAgentsType$outboundSchema: z.ZodNativeEnum<
  typeof StreamRunAgentToolsAgentsType
> = StreamRunAgentToolsAgentsType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace StreamRunAgentToolsAgentsType$ {
  /** @deprecated use `StreamRunAgentToolsAgentsType$inboundSchema` instead. */
  export const inboundSchema = StreamRunAgentToolsAgentsType$inboundSchema;
  /** @deprecated use `StreamRunAgentToolsAgentsType$outboundSchema` instead. */
  export const outboundSchema = StreamRunAgentToolsAgentsType$outboundSchema;
}

/** @internal */
export const StreamRunAgentTools2$inboundSchema: z.ZodType<
  StreamRunAgentTools2,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: StreamRunAgentToolsAgentsType$inboundSchema,
  requires_approval: z.boolean().default(false),
}).transform((v) => {
  return remap$(v, {
    "requires_approval": "requiresApproval",
  });
});

/** @internal */
export type StreamRunAgentTools2$Outbound = {
  type: string;
  requires_approval: boolean;
};

/** @internal */
export const StreamRunAgentTools2$outboundSchema: z.ZodType<
  StreamRunAgentTools2$Outbound,
  z.ZodTypeDef,
  StreamRunAgentTools2
> = z.object({
  type: StreamRunAgentToolsAgentsType$outboundSchema,
  requiresApproval: z.boolean().default(false),
}).transform((v) => {
  return remap$(v, {
    requiresApproval: "requires_approval",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace StreamRunAgentTools2$ {
  /** @deprecated use `StreamRunAgentTools2$inboundSchema` instead. */
  export const inboundSchema = StreamRunAgentTools2$inboundSchema;
  /** @deprecated use `StreamRunAgentTools2$outboundSchema` instead. */
  export const outboundSchema = StreamRunAgentTools2$outboundSchema;
  /** @deprecated use `StreamRunAgentTools2$Outbound` instead. */
  export type Outbound = StreamRunAgentTools2$Outbound;
}

export function streamRunAgentTools2ToJSON(
  streamRunAgentTools2: StreamRunAgentTools2,
): string {
  return JSON.stringify(
    StreamRunAgentTools2$outboundSchema.parse(streamRunAgentTools2),
  );
}

export function streamRunAgentTools2FromJSON(
  jsonString: string,
): SafeParseResult<StreamRunAgentTools2, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => StreamRunAgentTools2$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'StreamRunAgentTools2' from JSON`,
  );
}

/** @internal */
export const StreamRunAgentToolsType$inboundSchema: z.ZodNativeEnum<
  typeof StreamRunAgentToolsType
> = z.nativeEnum(StreamRunAgentToolsType);

/** @internal */
export const StreamRunAgentToolsType$outboundSchema: z.ZodNativeEnum<
  typeof StreamRunAgentToolsType
> = StreamRunAgentToolsType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace StreamRunAgentToolsType$ {
  /** @deprecated use `StreamRunAgentToolsType$inboundSchema` instead. */
  export const inboundSchema = StreamRunAgentToolsType$inboundSchema;
  /** @deprecated use `StreamRunAgentToolsType$outboundSchema` instead. */
  export const outboundSchema = StreamRunAgentToolsType$outboundSchema;
}

/** @internal */
export const StreamRunAgentTools1$inboundSchema: z.ZodType<
  StreamRunAgentTools1,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: StreamRunAgentToolsType$inboundSchema,
  requires_approval: z.boolean().default(false),
}).transform((v) => {
  return remap$(v, {
    "requires_approval": "requiresApproval",
  });
});

/** @internal */
export type StreamRunAgentTools1$Outbound = {
  type: string;
  requires_approval: boolean;
};

/** @internal */
export const StreamRunAgentTools1$outboundSchema: z.ZodType<
  StreamRunAgentTools1$Outbound,
  z.ZodTypeDef,
  StreamRunAgentTools1
> = z.object({
  type: StreamRunAgentToolsType$outboundSchema,
  requiresApproval: z.boolean().default(false),
}).transform((v) => {
  return remap$(v, {
    requiresApproval: "requires_approval",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace StreamRunAgentTools1$ {
  /** @deprecated use `StreamRunAgentTools1$inboundSchema` instead. */
  export const inboundSchema = StreamRunAgentTools1$inboundSchema;
  /** @deprecated use `StreamRunAgentTools1$outboundSchema` instead. */
  export const outboundSchema = StreamRunAgentTools1$outboundSchema;
  /** @deprecated use `StreamRunAgentTools1$Outbound` instead. */
  export type Outbound = StreamRunAgentTools1$Outbound;
}

export function streamRunAgentTools1ToJSON(
  streamRunAgentTools1: StreamRunAgentTools1,
): string {
  return JSON.stringify(
    StreamRunAgentTools1$outboundSchema.parse(streamRunAgentTools1),
  );
}

export function streamRunAgentTools1FromJSON(
  jsonString: string,
): SafeParseResult<StreamRunAgentTools1, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => StreamRunAgentTools1$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'StreamRunAgentTools1' from JSON`,
  );
}

/** @internal */
export const StreamRunAgentTools$inboundSchema: z.ZodType<
  StreamRunAgentTools,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => Tools11$inboundSchema),
  z.lazy(() => Tools12$inboundSchema),
  z.lazy(() => StreamRunAgentTools1$inboundSchema),
  z.lazy(() => StreamRunAgentTools2$inboundSchema),
  z.lazy(() => StreamRunAgentTools3$inboundSchema),
  z.lazy(() => StreamRunAgentTools4$inboundSchema),
  z.lazy(() => StreamRunAgentTools5$inboundSchema),
  z.lazy(() => Tools6$inboundSchema),
  z.lazy(() => Tools7$inboundSchema),
  z.lazy(() => Tools8$inboundSchema),
  z.lazy(() => Tools9$inboundSchema),
  z.lazy(() => Tools10$inboundSchema),
]);

/** @internal */
export type StreamRunAgentTools$Outbound =
  | Tools11$Outbound
  | Tools12$Outbound
  | StreamRunAgentTools1$Outbound
  | StreamRunAgentTools2$Outbound
  | StreamRunAgentTools3$Outbound
  | StreamRunAgentTools4$Outbound
  | StreamRunAgentTools5$Outbound
  | Tools6$Outbound
  | Tools7$Outbound
  | Tools8$Outbound
  | Tools9$Outbound
  | Tools10$Outbound;

/** @internal */
export const StreamRunAgentTools$outboundSchema: z.ZodType<
  StreamRunAgentTools$Outbound,
  z.ZodTypeDef,
  StreamRunAgentTools
> = z.union([
  z.lazy(() => Tools11$outboundSchema),
  z.lazy(() => Tools12$outboundSchema),
  z.lazy(() => StreamRunAgentTools1$outboundSchema),
  z.lazy(() => StreamRunAgentTools2$outboundSchema),
  z.lazy(() => StreamRunAgentTools3$outboundSchema),
  z.lazy(() => StreamRunAgentTools4$outboundSchema),
  z.lazy(() => StreamRunAgentTools5$outboundSchema),
  z.lazy(() => Tools6$outboundSchema),
  z.lazy(() => Tools7$outboundSchema),
  z.lazy(() => Tools8$outboundSchema),
  z.lazy(() => Tools9$outboundSchema),
  z.lazy(() => Tools10$outboundSchema),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace StreamRunAgentTools$ {
  /** @deprecated use `StreamRunAgentTools$inboundSchema` instead. */
  export const inboundSchema = StreamRunAgentTools$inboundSchema;
  /** @deprecated use `StreamRunAgentTools$outboundSchema` instead. */
  export const outboundSchema = StreamRunAgentTools$outboundSchema;
  /** @deprecated use `StreamRunAgentTools$Outbound` instead. */
  export type Outbound = StreamRunAgentTools$Outbound;
}

export function streamRunAgentToolsToJSON(
  streamRunAgentTools: StreamRunAgentTools,
): string {
  return JSON.stringify(
    StreamRunAgentTools$outboundSchema.parse(streamRunAgentTools),
  );
}

export function streamRunAgentToolsFromJSON(
  jsonString: string,
): SafeParseResult<StreamRunAgentTools, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => StreamRunAgentTools$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'StreamRunAgentTools' from JSON`,
  );
}

/** @internal */
export const StreamRunAgentToolApprovalRequired$inboundSchema: z.ZodNativeEnum<
  typeof StreamRunAgentToolApprovalRequired
> = z.nativeEnum(StreamRunAgentToolApprovalRequired);

/** @internal */
export const StreamRunAgentToolApprovalRequired$outboundSchema: z.ZodNativeEnum<
  typeof StreamRunAgentToolApprovalRequired
> = StreamRunAgentToolApprovalRequired$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace StreamRunAgentToolApprovalRequired$ {
  /** @deprecated use `StreamRunAgentToolApprovalRequired$inboundSchema` instead. */
  export const inboundSchema = StreamRunAgentToolApprovalRequired$inboundSchema;
  /** @deprecated use `StreamRunAgentToolApprovalRequired$outboundSchema` instead. */
  export const outboundSchema =
    StreamRunAgentToolApprovalRequired$outboundSchema;
}

/** @internal */
export const StreamRunAgentSettings$inboundSchema: z.ZodType<
  StreamRunAgentSettings,
  z.ZodTypeDef,
  unknown
> = z.object({
  tools: z.array(
    z.union([
      z.lazy(() => Tools11$inboundSchema),
      z.lazy(() => Tools12$inboundSchema),
      z.lazy(() => StreamRunAgentTools1$inboundSchema),
      z.lazy(() => StreamRunAgentTools2$inboundSchema),
      z.lazy(() => StreamRunAgentTools3$inboundSchema),
      z.lazy(() => StreamRunAgentTools4$inboundSchema),
      z.lazy(() => StreamRunAgentTools5$inboundSchema),
      z.lazy(() => Tools6$inboundSchema),
      z.lazy(() => Tools7$inboundSchema),
      z.lazy(() => Tools8$inboundSchema),
      z.lazy(() => Tools9$inboundSchema),
      z.lazy(() => Tools10$inboundSchema),
    ]),
  ),
  tool_approval_required: StreamRunAgentToolApprovalRequired$inboundSchema
    .default("none"),
  max_iterations: z.number().int().default(15),
  max_execution_time: z.number().int().default(120),
}).transform((v) => {
  return remap$(v, {
    "tool_approval_required": "toolApprovalRequired",
    "max_iterations": "maxIterations",
    "max_execution_time": "maxExecutionTime",
  });
});

/** @internal */
export type StreamRunAgentSettings$Outbound = {
  tools: Array<
    | Tools11$Outbound
    | Tools12$Outbound
    | StreamRunAgentTools1$Outbound
    | StreamRunAgentTools2$Outbound
    | StreamRunAgentTools3$Outbound
    | StreamRunAgentTools4$Outbound
    | StreamRunAgentTools5$Outbound
    | Tools6$Outbound
    | Tools7$Outbound
    | Tools8$Outbound
    | Tools9$Outbound
    | Tools10$Outbound
  >;
  tool_approval_required: string;
  max_iterations: number;
  max_execution_time: number;
};

/** @internal */
export const StreamRunAgentSettings$outboundSchema: z.ZodType<
  StreamRunAgentSettings$Outbound,
  z.ZodTypeDef,
  StreamRunAgentSettings
> = z.object({
  tools: z.array(
    z.union([
      z.lazy(() => Tools11$outboundSchema),
      z.lazy(() => Tools12$outboundSchema),
      z.lazy(() => StreamRunAgentTools1$outboundSchema),
      z.lazy(() => StreamRunAgentTools2$outboundSchema),
      z.lazy(() => StreamRunAgentTools3$outboundSchema),
      z.lazy(() => StreamRunAgentTools4$outboundSchema),
      z.lazy(() => StreamRunAgentTools5$outboundSchema),
      z.lazy(() => Tools6$outboundSchema),
      z.lazy(() => Tools7$outboundSchema),
      z.lazy(() => Tools8$outboundSchema),
      z.lazy(() => Tools9$outboundSchema),
      z.lazy(() => Tools10$outboundSchema),
    ]),
  ),
  toolApprovalRequired: StreamRunAgentToolApprovalRequired$outboundSchema
    .default("none"),
  maxIterations: z.number().int().default(15),
  maxExecutionTime: z.number().int().default(120),
}).transform((v) => {
  return remap$(v, {
    toolApprovalRequired: "tool_approval_required",
    maxIterations: "max_iterations",
    maxExecutionTime: "max_execution_time",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace StreamRunAgentSettings$ {
  /** @deprecated use `StreamRunAgentSettings$inboundSchema` instead. */
  export const inboundSchema = StreamRunAgentSettings$inboundSchema;
  /** @deprecated use `StreamRunAgentSettings$outboundSchema` instead. */
  export const outboundSchema = StreamRunAgentSettings$outboundSchema;
  /** @deprecated use `StreamRunAgentSettings$Outbound` instead. */
  export type Outbound = StreamRunAgentSettings$Outbound;
}

export function streamRunAgentSettingsToJSON(
  streamRunAgentSettings: StreamRunAgentSettings,
): string {
  return JSON.stringify(
    StreamRunAgentSettings$outboundSchema.parse(streamRunAgentSettings),
  );
}

export function streamRunAgentSettingsFromJSON(
  jsonString: string,
): SafeParseResult<StreamRunAgentSettings, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => StreamRunAgentSettings$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'StreamRunAgentSettings' from JSON`,
  );
}

/** @internal */
export const StreamRunAgentRequestBody$inboundSchema: z.ZodType<
  StreamRunAgentRequestBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  key: z.string(),
  taskId: z.string().optional(),
  model: z.string(),
  fallback_models: z.array(z.string()).optional(),
  role: z.string(),
  instructions: z.string(),
  message: z.lazy(() => StreamRunAgentMessage$inboundSchema),
  variables: z.record(z.any()).optional(),
  contextId: z.string().optional(),
  external_id: z.string().optional(),
  path: z.string(),
  description: z.string().optional(),
  iconUrl: z.string().optional(),
  system_prompt: z.string().optional(),
  memory_stores: z.array(z.string()).optional(),
  knowledge_bases: z.array(z.string()).optional(),
  team_of_agents: z.array(
    z.lazy(() => StreamRunAgentTeamOfAgents$inboundSchema),
  ).optional(),
  settings: z.lazy(() => StreamRunAgentSettings$inboundSchema),
  stream_timeout_seconds: z.number().optional(),
}).transform((v) => {
  return remap$(v, {
    "fallback_models": "fallbackModels",
    "external_id": "externalId",
    "system_prompt": "systemPrompt",
    "memory_stores": "memoryStores",
    "knowledge_bases": "knowledgeBases",
    "team_of_agents": "teamOfAgents",
    "stream_timeout_seconds": "streamTimeoutSeconds",
  });
});

/** @internal */
export type StreamRunAgentRequestBody$Outbound = {
  key: string;
  taskId?: string | undefined;
  model: string;
  fallback_models?: Array<string> | undefined;
  role: string;
  instructions: string;
  message: StreamRunAgentMessage$Outbound;
  variables?: { [k: string]: any } | undefined;
  contextId?: string | undefined;
  external_id?: string | undefined;
  path: string;
  description?: string | undefined;
  iconUrl?: string | undefined;
  system_prompt?: string | undefined;
  memory_stores?: Array<string> | undefined;
  knowledge_bases?: Array<string> | undefined;
  team_of_agents?: Array<StreamRunAgentTeamOfAgents$Outbound> | undefined;
  settings: StreamRunAgentSettings$Outbound;
  stream_timeout_seconds?: number | undefined;
};

/** @internal */
export const StreamRunAgentRequestBody$outboundSchema: z.ZodType<
  StreamRunAgentRequestBody$Outbound,
  z.ZodTypeDef,
  StreamRunAgentRequestBody
> = z.object({
  key: z.string(),
  taskId: z.string().optional(),
  model: z.string(),
  fallbackModels: z.array(z.string()).optional(),
  role: z.string(),
  instructions: z.string(),
  message: z.lazy(() => StreamRunAgentMessage$outboundSchema),
  variables: z.record(z.any()).optional(),
  contextId: z.string().optional(),
  externalId: z.string().optional(),
  path: z.string(),
  description: z.string().optional(),
  iconUrl: z.string().optional(),
  systemPrompt: z.string().optional(),
  memoryStores: z.array(z.string()).optional(),
  knowledgeBases: z.array(z.string()).optional(),
  teamOfAgents: z.array(z.lazy(() => StreamRunAgentTeamOfAgents$outboundSchema))
    .optional(),
  settings: z.lazy(() => StreamRunAgentSettings$outboundSchema),
  streamTimeoutSeconds: z.number().optional(),
}).transform((v) => {
  return remap$(v, {
    fallbackModels: "fallback_models",
    externalId: "external_id",
    systemPrompt: "system_prompt",
    memoryStores: "memory_stores",
    knowledgeBases: "knowledge_bases",
    teamOfAgents: "team_of_agents",
    streamTimeoutSeconds: "stream_timeout_seconds",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace StreamRunAgentRequestBody$ {
  /** @deprecated use `StreamRunAgentRequestBody$inboundSchema` instead. */
  export const inboundSchema = StreamRunAgentRequestBody$inboundSchema;
  /** @deprecated use `StreamRunAgentRequestBody$outboundSchema` instead. */
  export const outboundSchema = StreamRunAgentRequestBody$outboundSchema;
  /** @deprecated use `StreamRunAgentRequestBody$Outbound` instead. */
  export type Outbound = StreamRunAgentRequestBody$Outbound;
}

export function streamRunAgentRequestBodyToJSON(
  streamRunAgentRequestBody: StreamRunAgentRequestBody,
): string {
  return JSON.stringify(
    StreamRunAgentRequestBody$outboundSchema.parse(streamRunAgentRequestBody),
  );
}

export function streamRunAgentRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<StreamRunAgentRequestBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => StreamRunAgentRequestBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'StreamRunAgentRequestBody' from JSON`,
  );
}

/** @internal */
export const StreamRunAgentResponseBody$inboundSchema: z.ZodType<
  StreamRunAgentResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  data: z.string(),
});

/** @internal */
export type StreamRunAgentResponseBody$Outbound = {
  data: string;
};

/** @internal */
export const StreamRunAgentResponseBody$outboundSchema: z.ZodType<
  StreamRunAgentResponseBody$Outbound,
  z.ZodTypeDef,
  StreamRunAgentResponseBody
> = z.object({
  data: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace StreamRunAgentResponseBody$ {
  /** @deprecated use `StreamRunAgentResponseBody$inboundSchema` instead. */
  export const inboundSchema = StreamRunAgentResponseBody$inboundSchema;
  /** @deprecated use `StreamRunAgentResponseBody$outboundSchema` instead. */
  export const outboundSchema = StreamRunAgentResponseBody$outboundSchema;
  /** @deprecated use `StreamRunAgentResponseBody$Outbound` instead. */
  export type Outbound = StreamRunAgentResponseBody$Outbound;
}

export function streamRunAgentResponseBodyToJSON(
  streamRunAgentResponseBody: StreamRunAgentResponseBody,
): string {
  return JSON.stringify(
    StreamRunAgentResponseBody$outboundSchema.parse(streamRunAgentResponseBody),
  );
}

export function streamRunAgentResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<StreamRunAgentResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => StreamRunAgentResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'StreamRunAgentResponseBody' from JSON`,
  );
}
