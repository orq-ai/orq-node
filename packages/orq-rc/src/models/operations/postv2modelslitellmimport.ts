/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type LitellmParams = {
  useInPassThrough: boolean;
  useLitellmProxy: boolean;
  mergeReasoningContentInChoices: boolean;
  model: string;
};

export type ModelInfo = {
  id: string | null;
  dbModel: boolean | null;
  key: string | null;
  maxTokens?: number | null | undefined;
  maxInputTokens?: number | null | undefined;
  maxOutputTokens?: number | null | undefined;
  inputCostPerToken?: number | null | undefined;
  cacheCreationInputTokenCost?: number | null | undefined;
  cacheReadInputTokenCost?: number | null | undefined;
  inputCostPerCharacter?: number | null | undefined;
  inputCostPerTokenAbove128kTokens?: number | null | undefined;
  inputCostPerTokenAbove200kTokens?: number | null | undefined;
  inputCostPerQuery?: number | null | undefined;
  inputCostPerSecond?: number | null | undefined;
  inputCostPerAudioToken?: number | null | undefined;
  inputCostPerTokenBatches?: number | null | undefined;
  outputCostPerTokenBatches?: number | null | undefined;
  outputCostPerToken?: number | null | undefined;
  outputCostPerAudioToken?: number | null | undefined;
  outputCostPerCharacter?: number | null | undefined;
  outputCostPerReasoningToken?: number | null | undefined;
  outputCostPerTokenAbove128kTokens?: number | null | undefined;
  outputCostPerCharacterAbove128kTokens?: number | null | undefined;
  outputCostPerTokenAbove200kTokens?: number | null | undefined;
  outputCostPerSecond?: number | null | undefined;
  outputCostPerImage?: number | null | undefined;
  outputVectorSize?: number | null | undefined;
  litellmProvider: string | null;
  mode: string | null;
  supportsSystemMessages?: boolean | null | undefined;
  supportsResponseSchema?: boolean | null | undefined;
  supportsVision?: boolean | null | undefined;
  supportsFunctionCalling?: boolean | null | undefined;
  supportsToolChoice?: boolean | null | undefined;
  supportsAssistantPrefill?: boolean | null | undefined;
  supportsPromptCaching?: boolean | null | undefined;
  supportsAudioInput?: boolean | null | undefined;
  supportsAudioOutput?: boolean | null | undefined;
  supportsPdfInput?: boolean | null | undefined;
  supportsEmbeddingImageInput?: boolean | null | undefined;
  supportsNativeStreaming?: boolean | null | undefined;
  supportsWebSearch?: boolean | null | undefined;
  supportsUrlContext?: boolean | null | undefined;
  supportsReasoning?: boolean | null | undefined;
  supportsComputerUse?: boolean | null | undefined;
  searchContextCostPerQuery?: number | null | undefined;
  tpm?: number | null | undefined;
  rpm?: number | null | undefined;
  supportedOpenaiParams?: Array<string> | null | undefined;
};

export type RequestBody = {
  modelName: string;
  litellmParams: LitellmParams;
  modelInfo: ModelInfo;
};

/**
 * The modality of the model
 */
export const PostV2ModelsLitellmImportModelType = {
  Chat: "chat",
  Completion: "completion",
  Embedding: "embedding",
  Vision: "vision",
  Image: "image",
  Tts: "tts",
  Stt: "stt",
  Rerank: "rerank",
  Moderations: "moderations",
} as const;
/**
 * The modality of the model
 */
export type PostV2ModelsLitellmImportModelType = ClosedEnum<
  typeof PostV2ModelsLitellmImportModelType
>;

/**
 * The provider of the AI service
 */
export const PostV2ModelsLitellmImportProvider = {
  Cohere: "cohere",
  Openai: "openai",
  Anthropic: "anthropic",
  Huggingface: "huggingface",
  Replicate: "replicate",
  Google: "google",
  GoogleAi: "google-ai",
  Azure: "azure",
  Aws: "aws",
  Anyscale: "anyscale",
  Perplexity: "perplexity",
  Groq: "groq",
  Fal: "fal",
  Leonardoai: "leonardoai",
  Nvidia: "nvidia",
  Jina: "jina",
  Togetherai: "togetherai",
  Elevenlabs: "elevenlabs",
  Litellm: "litellm",
} as const;
/**
 * The provider of the AI service
 */
export type PostV2ModelsLitellmImportProvider = ClosedEnum<
  typeof PostV2ModelsLitellmImportProvider
>;

export const Region = {
  Us: "us",
  Europe: "europe",
  Rest: "rest",
} as const;
export type Region = ClosedEnum<typeof Region>;

export type PostV2ModelsLitellmImportMetadata = {
  contextWindow?: number | undefined;
  isPrivate: boolean;
  region: Region;
  hasFunctions?: boolean | undefined;
  strictToolSupported?: boolean | undefined;
  jsonModeResponseFormatSupported?: boolean | undefined;
  jsonSchemaResponseFormatSupported?: boolean | undefined;
  supportSystemMessage?: boolean | undefined;
  streamingNotSupported?: boolean | undefined;
  /**
   * Indicates if the model was in our database during creation of the private model
   */
  dbMatch?: boolean | undefined;
  imageTokenCost?: number | undefined;
};

export const PostV2ModelsLitellmImportConfigurationResponse200Provider = {
  Nvidia: "nvidia",
} as const;
export type PostV2ModelsLitellmImportConfigurationResponse200Provider =
  ClosedEnum<typeof PostV2ModelsLitellmImportConfigurationResponse200Provider>;

export type Configuration4 = {
  provider: PostV2ModelsLitellmImportConfigurationResponse200Provider;
  hostUrl: string;
};

export const PostV2ModelsLitellmImportConfigurationResponseProvider = {
  Aws: "aws",
} as const;
export type PostV2ModelsLitellmImportConfigurationResponseProvider = ClosedEnum<
  typeof PostV2ModelsLitellmImportConfigurationResponseProvider
>;

export type Configuration3 = {
  provider: PostV2ModelsLitellmImportConfigurationResponseProvider;
  region: string;
};

export const PostV2ModelsLitellmImportConfigurationProvider = {
  Google: "google",
} as const;
export type PostV2ModelsLitellmImportConfigurationProvider = ClosedEnum<
  typeof PostV2ModelsLitellmImportConfigurationProvider
>;

export type Configuration2 = {
  provider: PostV2ModelsLitellmImportConfigurationProvider;
  serviceAccount: string;
  region: string;
  location: string;
  shouldUseBetaFeatures: boolean;
  projectId: string;
  isOpenaiCompatible?: boolean | undefined;
  isTunedModel?: boolean | undefined;
};

export const ConfigurationProvider = {
  Azure: "azure",
} as const;
export type ConfigurationProvider = ClosedEnum<typeof ConfigurationProvider>;

export type Configuration1 = {
  provider: ConfigurationProvider;
  endpoint: string;
  apiKey: string;
};

/**
 * The configuration of the model
 */
export type Configuration =
  | Configuration3
  | Configuration4
  | Configuration1
  | Configuration2;

/**
 * Parameters value
 */
export const PostV2ModelsLitellmImportParametersParameter = {
  TopK: "topK",
  TopP: "topP",
  Temperature: "temperature",
  FrequencyPenalty: "frequencyPenalty",
  PresencePenalty: "presencePenalty",
  MaxTokens: "maxTokens",
  NumImages: "numImages",
  Format: "format",
  Dimensions: "dimensions",
  Quality: "quality",
  Style: "style",
  Seed: "seed",
  PhotoRealVersion: "photoRealVersion",
  ResponseFormat: "responseFormat",
  ReasoningEffort: "reasoningEffort",
  BudgetTokens: "budgetTokens",
} as const;
/**
 * Parameters value
 */
export type PostV2ModelsLitellmImportParametersParameter = ClosedEnum<
  typeof PostV2ModelsLitellmImportParametersParameter
>;

export const PostV2ModelsLitellmImportParametersParameterType = {
  Select: "select",
} as const;
export type PostV2ModelsLitellmImportParametersParameterType = ClosedEnum<
  typeof PostV2ModelsLitellmImportParametersParameterType
>;

export type Options = {
  displayName: string;
  value: string;
};

export type PostV2ModelsLitellmImportParametersConfig = {
  default: string;
  options: Array<Options>;
};

export type Parameters3 = {
  id: string;
  name: string;
  /**
   * Parameters value
   */
  parameter: PostV2ModelsLitellmImportParametersParameter;
  description: string;
  hints?: string | null | undefined;
  isActive: boolean;
  position?: number | null | undefined;
  parameterType: PostV2ModelsLitellmImportParametersParameterType;
  config: PostV2ModelsLitellmImportParametersConfig;
};

/**
 * Parameters value
 */
export const ParametersParameter = {
  TopK: "topK",
  TopP: "topP",
  Temperature: "temperature",
  FrequencyPenalty: "frequencyPenalty",
  PresencePenalty: "presencePenalty",
  MaxTokens: "maxTokens",
  NumImages: "numImages",
  Format: "format",
  Dimensions: "dimensions",
  Quality: "quality",
  Style: "style",
  Seed: "seed",
  PhotoRealVersion: "photoRealVersion",
  ResponseFormat: "responseFormat",
  ReasoningEffort: "reasoningEffort",
  BudgetTokens: "budgetTokens",
} as const;
/**
 * Parameters value
 */
export type ParametersParameter = ClosedEnum<typeof ParametersParameter>;

export const ParametersParameterType = {
  Switch: "switch",
} as const;
export type ParametersParameterType = ClosedEnum<
  typeof ParametersParameterType
>;

export type ParametersConfig = {
  default: boolean;
};

export type Parameters2 = {
  id: string;
  name: string;
  /**
   * Parameters value
   */
  parameter: ParametersParameter;
  description: string;
  hints?: string | null | undefined;
  isActive: boolean;
  position?: number | null | undefined;
  parameterType: ParametersParameterType;
  config: ParametersConfig;
};

/**
 * Parameters value
 */
export const Parameter = {
  TopK: "topK",
  TopP: "topP",
  Temperature: "temperature",
  FrequencyPenalty: "frequencyPenalty",
  PresencePenalty: "presencePenalty",
  MaxTokens: "maxTokens",
  NumImages: "numImages",
  Format: "format",
  Dimensions: "dimensions",
  Quality: "quality",
  Style: "style",
  Seed: "seed",
  PhotoRealVersion: "photoRealVersion",
  ResponseFormat: "responseFormat",
  ReasoningEffort: "reasoningEffort",
  BudgetTokens: "budgetTokens",
} as const;
/**
 * Parameters value
 */
export type Parameter = ClosedEnum<typeof Parameter>;

export const ParameterType = {
  Slider: "slider",
} as const;
export type ParameterType = ClosedEnum<typeof ParameterType>;

export type Config = {
  default: number;
  max: number;
  min: number;
  step: number;
};

export type Parameters1 = {
  id: string;
  name: string;
  /**
   * Parameters value
   */
  parameter: Parameter;
  description: string;
  hints?: string | null | undefined;
  isActive: boolean;
  position?: number | null | undefined;
  parameterType: ParameterType;
  config: Config;
};

export type ParametersT = Parameters1 | Parameters2 | Parameters3;

export type PostV2ModelsLitellmImportResponseBody = {
  /**
   * Unique identifier of the model
   */
  id: string;
  /**
   * A timestamp reflecting when the model was created
   */
  created: Date;
  /**
   * Indicates the last time the model was updated
   */
  updated: Date;
  /**
   * The display name of the model in the UI
   */
  displayName: string;
  /**
   * The model id for the provider
   */
  modelId: string;
  /**
   * The current revision of the model
   */
  modelRevision?: string | undefined;
  /**
   * The developer of the model
   */
  modelDeveloper: string;
  /**
   * The model family
   */
  modelFamily: string;
  /**
   * The modality of the model
   */
  modelType: PostV2ModelsLitellmImportModelType;
  /**
   * The provider of the AI service
   */
  provider: PostV2ModelsLitellmImportProvider;
  /**
   * Indicates if the model is active
   */
  isActive?: boolean | undefined;
  /**
   * The cost per 1000 input tokens
   */
  inputCost: number;
  /**
   * Input currency
   */
  inputCurrency?: string | undefined;
  /**
   * The cost per 1000 output tokens
   */
  outputCost: number;
  /**
   * Output currency
   */
  outputCurrency?: string | undefined;
  /**
   * Description
   */
  description?: string | undefined;
  /**
   * Indicates if this model supports function calling
   */
  hasFunctions?: boolean | undefined;
  /**
   * Indicates if this model pricing is based on time
   */
  hasCpuPricing?: boolean | undefined;
  /**
   * The url of the pricing for the model
   */
  pricingUrl?: string | undefined;
  /**
   * The link for the endpoint documentation
   */
  docsUrl?: string | undefined;
  /**
   * Indicates if the model is enabled
   */
  enabled: boolean;
  /**
   * If the value is `true` the model will be visible in the Prompt Studio
   */
  enabledForEndpoints?: boolean | undefined;
  /**
   * If the value is `true` the model will be visible in the Playground
   */
  enabledForPlayground?: boolean | undefined;
  /**
   * The owner of the model. If the value is `system` the model is provider by Orq.ai, otherwise is a private model
   */
  owner?: string | undefined;
  metadata: PostV2ModelsLitellmImportMetadata;
  /**
   * The configuration of the model
   */
  configuration?:
    | Configuration3
    | Configuration4
    | Configuration1
    | Configuration2
    | undefined;
  /**
   * The parameters of the model
   */
  parameters: Array<Parameters1 | Parameters2 | Parameters3>;
};

/** @internal */
export const LitellmParams$inboundSchema: z.ZodType<
  LitellmParams,
  z.ZodTypeDef,
  unknown
> = z.object({
  use_in_pass_through: z.boolean(),
  use_litellm_proxy: z.boolean(),
  merge_reasoning_content_in_choices: z.boolean(),
  model: z.string(),
}).transform((v) => {
  return remap$(v, {
    "use_in_pass_through": "useInPassThrough",
    "use_litellm_proxy": "useLitellmProxy",
    "merge_reasoning_content_in_choices": "mergeReasoningContentInChoices",
  });
});

/** @internal */
export type LitellmParams$Outbound = {
  use_in_pass_through: boolean;
  use_litellm_proxy: boolean;
  merge_reasoning_content_in_choices: boolean;
  model: string;
};

/** @internal */
export const LitellmParams$outboundSchema: z.ZodType<
  LitellmParams$Outbound,
  z.ZodTypeDef,
  LitellmParams
> = z.object({
  useInPassThrough: z.boolean(),
  useLitellmProxy: z.boolean(),
  mergeReasoningContentInChoices: z.boolean(),
  model: z.string(),
}).transform((v) => {
  return remap$(v, {
    useInPassThrough: "use_in_pass_through",
    useLitellmProxy: "use_litellm_proxy",
    mergeReasoningContentInChoices: "merge_reasoning_content_in_choices",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace LitellmParams$ {
  /** @deprecated use `LitellmParams$inboundSchema` instead. */
  export const inboundSchema = LitellmParams$inboundSchema;
  /** @deprecated use `LitellmParams$outboundSchema` instead. */
  export const outboundSchema = LitellmParams$outboundSchema;
  /** @deprecated use `LitellmParams$Outbound` instead. */
  export type Outbound = LitellmParams$Outbound;
}

export function litellmParamsToJSON(litellmParams: LitellmParams): string {
  return JSON.stringify(LitellmParams$outboundSchema.parse(litellmParams));
}

export function litellmParamsFromJSON(
  jsonString: string,
): SafeParseResult<LitellmParams, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => LitellmParams$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'LitellmParams' from JSON`,
  );
}

/** @internal */
export const ModelInfo$inboundSchema: z.ZodType<
  ModelInfo,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.nullable(z.string()),
  db_model: z.nullable(z.boolean()),
  key: z.nullable(z.string()),
  max_tokens: z.nullable(z.number()).optional(),
  max_input_tokens: z.nullable(z.number()).optional(),
  max_output_tokens: z.nullable(z.number()).optional(),
  input_cost_per_token: z.nullable(z.number()).optional(),
  cache_creation_input_token_cost: z.nullable(z.number()).optional(),
  cache_read_input_token_cost: z.nullable(z.number()).optional(),
  input_cost_per_character: z.nullable(z.number()).optional(),
  input_cost_per_token_above_128k_tokens: z.nullable(z.number()).optional(),
  input_cost_per_token_above_200k_tokens: z.nullable(z.number()).optional(),
  input_cost_per_query: z.nullable(z.number()).optional(),
  input_cost_per_second: z.nullable(z.number()).optional(),
  input_cost_per_audio_token: z.nullable(z.number()).optional(),
  input_cost_per_token_batches: z.nullable(z.number()).optional(),
  output_cost_per_token_batches: z.nullable(z.number()).optional(),
  output_cost_per_token: z.nullable(z.number()).optional(),
  output_cost_per_audio_token: z.nullable(z.number()).optional(),
  output_cost_per_character: z.nullable(z.number()).optional(),
  output_cost_per_reasoning_token: z.nullable(z.number()).optional(),
  output_cost_per_token_above_128k_tokens: z.nullable(z.number()).optional(),
  output_cost_per_character_above_128k_tokens: z.nullable(z.number())
    .optional(),
  output_cost_per_token_above_200k_tokens: z.nullable(z.number()).optional(),
  output_cost_per_second: z.nullable(z.number()).optional(),
  output_cost_per_image: z.nullable(z.number()).optional(),
  output_vector_size: z.nullable(z.number()).optional(),
  litellm_provider: z.nullable(z.string()),
  mode: z.nullable(z.string()),
  supports_system_messages: z.nullable(z.boolean()).optional(),
  supports_response_schema: z.nullable(z.boolean()).optional(),
  supports_vision: z.nullable(z.boolean()).optional(),
  supports_function_calling: z.nullable(z.boolean()).optional(),
  supports_tool_choice: z.nullable(z.boolean()).optional(),
  supports_assistant_prefill: z.nullable(z.boolean()).optional(),
  supports_prompt_caching: z.nullable(z.boolean()).optional(),
  supports_audio_input: z.nullable(z.boolean()).optional(),
  supports_audio_output: z.nullable(z.boolean()).optional(),
  supports_pdf_input: z.nullable(z.boolean()).optional(),
  supports_embedding_image_input: z.nullable(z.boolean()).optional(),
  supports_native_streaming: z.nullable(z.boolean()).optional(),
  supports_web_search: z.nullable(z.boolean()).optional(),
  supports_url_context: z.nullable(z.boolean()).optional(),
  supports_reasoning: z.nullable(z.boolean()).optional(),
  supports_computer_use: z.nullable(z.boolean()).optional(),
  search_context_cost_per_query: z.nullable(z.number()).optional(),
  tpm: z.nullable(z.number()).optional(),
  rpm: z.nullable(z.number()).optional(),
  supported_openai_params: z.nullable(z.array(z.string())).optional(),
}).transform((v) => {
  return remap$(v, {
    "db_model": "dbModel",
    "max_tokens": "maxTokens",
    "max_input_tokens": "maxInputTokens",
    "max_output_tokens": "maxOutputTokens",
    "input_cost_per_token": "inputCostPerToken",
    "cache_creation_input_token_cost": "cacheCreationInputTokenCost",
    "cache_read_input_token_cost": "cacheReadInputTokenCost",
    "input_cost_per_character": "inputCostPerCharacter",
    "input_cost_per_token_above_128k_tokens":
      "inputCostPerTokenAbove128kTokens",
    "input_cost_per_token_above_200k_tokens":
      "inputCostPerTokenAbove200kTokens",
    "input_cost_per_query": "inputCostPerQuery",
    "input_cost_per_second": "inputCostPerSecond",
    "input_cost_per_audio_token": "inputCostPerAudioToken",
    "input_cost_per_token_batches": "inputCostPerTokenBatches",
    "output_cost_per_token_batches": "outputCostPerTokenBatches",
    "output_cost_per_token": "outputCostPerToken",
    "output_cost_per_audio_token": "outputCostPerAudioToken",
    "output_cost_per_character": "outputCostPerCharacter",
    "output_cost_per_reasoning_token": "outputCostPerReasoningToken",
    "output_cost_per_token_above_128k_tokens":
      "outputCostPerTokenAbove128kTokens",
    "output_cost_per_character_above_128k_tokens":
      "outputCostPerCharacterAbove128kTokens",
    "output_cost_per_token_above_200k_tokens":
      "outputCostPerTokenAbove200kTokens",
    "output_cost_per_second": "outputCostPerSecond",
    "output_cost_per_image": "outputCostPerImage",
    "output_vector_size": "outputVectorSize",
    "litellm_provider": "litellmProvider",
    "supports_system_messages": "supportsSystemMessages",
    "supports_response_schema": "supportsResponseSchema",
    "supports_vision": "supportsVision",
    "supports_function_calling": "supportsFunctionCalling",
    "supports_tool_choice": "supportsToolChoice",
    "supports_assistant_prefill": "supportsAssistantPrefill",
    "supports_prompt_caching": "supportsPromptCaching",
    "supports_audio_input": "supportsAudioInput",
    "supports_audio_output": "supportsAudioOutput",
    "supports_pdf_input": "supportsPdfInput",
    "supports_embedding_image_input": "supportsEmbeddingImageInput",
    "supports_native_streaming": "supportsNativeStreaming",
    "supports_web_search": "supportsWebSearch",
    "supports_url_context": "supportsUrlContext",
    "supports_reasoning": "supportsReasoning",
    "supports_computer_use": "supportsComputerUse",
    "search_context_cost_per_query": "searchContextCostPerQuery",
    "supported_openai_params": "supportedOpenaiParams",
  });
});

/** @internal */
export type ModelInfo$Outbound = {
  id: string | null;
  db_model: boolean | null;
  key: string | null;
  max_tokens?: number | null | undefined;
  max_input_tokens?: number | null | undefined;
  max_output_tokens?: number | null | undefined;
  input_cost_per_token?: number | null | undefined;
  cache_creation_input_token_cost?: number | null | undefined;
  cache_read_input_token_cost?: number | null | undefined;
  input_cost_per_character?: number | null | undefined;
  input_cost_per_token_above_128k_tokens?: number | null | undefined;
  input_cost_per_token_above_200k_tokens?: number | null | undefined;
  input_cost_per_query?: number | null | undefined;
  input_cost_per_second?: number | null | undefined;
  input_cost_per_audio_token?: number | null | undefined;
  input_cost_per_token_batches?: number | null | undefined;
  output_cost_per_token_batches?: number | null | undefined;
  output_cost_per_token?: number | null | undefined;
  output_cost_per_audio_token?: number | null | undefined;
  output_cost_per_character?: number | null | undefined;
  output_cost_per_reasoning_token?: number | null | undefined;
  output_cost_per_token_above_128k_tokens?: number | null | undefined;
  output_cost_per_character_above_128k_tokens?: number | null | undefined;
  output_cost_per_token_above_200k_tokens?: number | null | undefined;
  output_cost_per_second?: number | null | undefined;
  output_cost_per_image?: number | null | undefined;
  output_vector_size?: number | null | undefined;
  litellm_provider: string | null;
  mode: string | null;
  supports_system_messages?: boolean | null | undefined;
  supports_response_schema?: boolean | null | undefined;
  supports_vision?: boolean | null | undefined;
  supports_function_calling?: boolean | null | undefined;
  supports_tool_choice?: boolean | null | undefined;
  supports_assistant_prefill?: boolean | null | undefined;
  supports_prompt_caching?: boolean | null | undefined;
  supports_audio_input?: boolean | null | undefined;
  supports_audio_output?: boolean | null | undefined;
  supports_pdf_input?: boolean | null | undefined;
  supports_embedding_image_input?: boolean | null | undefined;
  supports_native_streaming?: boolean | null | undefined;
  supports_web_search?: boolean | null | undefined;
  supports_url_context?: boolean | null | undefined;
  supports_reasoning?: boolean | null | undefined;
  supports_computer_use?: boolean | null | undefined;
  search_context_cost_per_query?: number | null | undefined;
  tpm?: number | null | undefined;
  rpm?: number | null | undefined;
  supported_openai_params?: Array<string> | null | undefined;
};

/** @internal */
export const ModelInfo$outboundSchema: z.ZodType<
  ModelInfo$Outbound,
  z.ZodTypeDef,
  ModelInfo
> = z.object({
  id: z.nullable(z.string()),
  dbModel: z.nullable(z.boolean()),
  key: z.nullable(z.string()),
  maxTokens: z.nullable(z.number()).optional(),
  maxInputTokens: z.nullable(z.number()).optional(),
  maxOutputTokens: z.nullable(z.number()).optional(),
  inputCostPerToken: z.nullable(z.number()).optional(),
  cacheCreationInputTokenCost: z.nullable(z.number()).optional(),
  cacheReadInputTokenCost: z.nullable(z.number()).optional(),
  inputCostPerCharacter: z.nullable(z.number()).optional(),
  inputCostPerTokenAbove128kTokens: z.nullable(z.number()).optional(),
  inputCostPerTokenAbove200kTokens: z.nullable(z.number()).optional(),
  inputCostPerQuery: z.nullable(z.number()).optional(),
  inputCostPerSecond: z.nullable(z.number()).optional(),
  inputCostPerAudioToken: z.nullable(z.number()).optional(),
  inputCostPerTokenBatches: z.nullable(z.number()).optional(),
  outputCostPerTokenBatches: z.nullable(z.number()).optional(),
  outputCostPerToken: z.nullable(z.number()).optional(),
  outputCostPerAudioToken: z.nullable(z.number()).optional(),
  outputCostPerCharacter: z.nullable(z.number()).optional(),
  outputCostPerReasoningToken: z.nullable(z.number()).optional(),
  outputCostPerTokenAbove128kTokens: z.nullable(z.number()).optional(),
  outputCostPerCharacterAbove128kTokens: z.nullable(z.number()).optional(),
  outputCostPerTokenAbove200kTokens: z.nullable(z.number()).optional(),
  outputCostPerSecond: z.nullable(z.number()).optional(),
  outputCostPerImage: z.nullable(z.number()).optional(),
  outputVectorSize: z.nullable(z.number()).optional(),
  litellmProvider: z.nullable(z.string()),
  mode: z.nullable(z.string()),
  supportsSystemMessages: z.nullable(z.boolean()).optional(),
  supportsResponseSchema: z.nullable(z.boolean()).optional(),
  supportsVision: z.nullable(z.boolean()).optional(),
  supportsFunctionCalling: z.nullable(z.boolean()).optional(),
  supportsToolChoice: z.nullable(z.boolean()).optional(),
  supportsAssistantPrefill: z.nullable(z.boolean()).optional(),
  supportsPromptCaching: z.nullable(z.boolean()).optional(),
  supportsAudioInput: z.nullable(z.boolean()).optional(),
  supportsAudioOutput: z.nullable(z.boolean()).optional(),
  supportsPdfInput: z.nullable(z.boolean()).optional(),
  supportsEmbeddingImageInput: z.nullable(z.boolean()).optional(),
  supportsNativeStreaming: z.nullable(z.boolean()).optional(),
  supportsWebSearch: z.nullable(z.boolean()).optional(),
  supportsUrlContext: z.nullable(z.boolean()).optional(),
  supportsReasoning: z.nullable(z.boolean()).optional(),
  supportsComputerUse: z.nullable(z.boolean()).optional(),
  searchContextCostPerQuery: z.nullable(z.number()).optional(),
  tpm: z.nullable(z.number()).optional(),
  rpm: z.nullable(z.number()).optional(),
  supportedOpenaiParams: z.nullable(z.array(z.string())).optional(),
}).transform((v) => {
  return remap$(v, {
    dbModel: "db_model",
    maxTokens: "max_tokens",
    maxInputTokens: "max_input_tokens",
    maxOutputTokens: "max_output_tokens",
    inputCostPerToken: "input_cost_per_token",
    cacheCreationInputTokenCost: "cache_creation_input_token_cost",
    cacheReadInputTokenCost: "cache_read_input_token_cost",
    inputCostPerCharacter: "input_cost_per_character",
    inputCostPerTokenAbove128kTokens: "input_cost_per_token_above_128k_tokens",
    inputCostPerTokenAbove200kTokens: "input_cost_per_token_above_200k_tokens",
    inputCostPerQuery: "input_cost_per_query",
    inputCostPerSecond: "input_cost_per_second",
    inputCostPerAudioToken: "input_cost_per_audio_token",
    inputCostPerTokenBatches: "input_cost_per_token_batches",
    outputCostPerTokenBatches: "output_cost_per_token_batches",
    outputCostPerToken: "output_cost_per_token",
    outputCostPerAudioToken: "output_cost_per_audio_token",
    outputCostPerCharacter: "output_cost_per_character",
    outputCostPerReasoningToken: "output_cost_per_reasoning_token",
    outputCostPerTokenAbove128kTokens:
      "output_cost_per_token_above_128k_tokens",
    outputCostPerCharacterAbove128kTokens:
      "output_cost_per_character_above_128k_tokens",
    outputCostPerTokenAbove200kTokens:
      "output_cost_per_token_above_200k_tokens",
    outputCostPerSecond: "output_cost_per_second",
    outputCostPerImage: "output_cost_per_image",
    outputVectorSize: "output_vector_size",
    litellmProvider: "litellm_provider",
    supportsSystemMessages: "supports_system_messages",
    supportsResponseSchema: "supports_response_schema",
    supportsVision: "supports_vision",
    supportsFunctionCalling: "supports_function_calling",
    supportsToolChoice: "supports_tool_choice",
    supportsAssistantPrefill: "supports_assistant_prefill",
    supportsPromptCaching: "supports_prompt_caching",
    supportsAudioInput: "supports_audio_input",
    supportsAudioOutput: "supports_audio_output",
    supportsPdfInput: "supports_pdf_input",
    supportsEmbeddingImageInput: "supports_embedding_image_input",
    supportsNativeStreaming: "supports_native_streaming",
    supportsWebSearch: "supports_web_search",
    supportsUrlContext: "supports_url_context",
    supportsReasoning: "supports_reasoning",
    supportsComputerUse: "supports_computer_use",
    searchContextCostPerQuery: "search_context_cost_per_query",
    supportedOpenaiParams: "supported_openai_params",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ModelInfo$ {
  /** @deprecated use `ModelInfo$inboundSchema` instead. */
  export const inboundSchema = ModelInfo$inboundSchema;
  /** @deprecated use `ModelInfo$outboundSchema` instead. */
  export const outboundSchema = ModelInfo$outboundSchema;
  /** @deprecated use `ModelInfo$Outbound` instead. */
  export type Outbound = ModelInfo$Outbound;
}

export function modelInfoToJSON(modelInfo: ModelInfo): string {
  return JSON.stringify(ModelInfo$outboundSchema.parse(modelInfo));
}

export function modelInfoFromJSON(
  jsonString: string,
): SafeParseResult<ModelInfo, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ModelInfo$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ModelInfo' from JSON`,
  );
}

/** @internal */
export const RequestBody$inboundSchema: z.ZodType<
  RequestBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  model_name: z.string(),
  litellm_params: z.lazy(() => LitellmParams$inboundSchema),
  model_info: z.lazy(() => ModelInfo$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "model_name": "modelName",
    "litellm_params": "litellmParams",
    "model_info": "modelInfo",
  });
});

/** @internal */
export type RequestBody$Outbound = {
  model_name: string;
  litellm_params: LitellmParams$Outbound;
  model_info: ModelInfo$Outbound;
};

/** @internal */
export const RequestBody$outboundSchema: z.ZodType<
  RequestBody$Outbound,
  z.ZodTypeDef,
  RequestBody
> = z.object({
  modelName: z.string(),
  litellmParams: z.lazy(() => LitellmParams$outboundSchema),
  modelInfo: z.lazy(() => ModelInfo$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    modelName: "model_name",
    litellmParams: "litellm_params",
    modelInfo: "model_info",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RequestBody$ {
  /** @deprecated use `RequestBody$inboundSchema` instead. */
  export const inboundSchema = RequestBody$inboundSchema;
  /** @deprecated use `RequestBody$outboundSchema` instead. */
  export const outboundSchema = RequestBody$outboundSchema;
  /** @deprecated use `RequestBody$Outbound` instead. */
  export type Outbound = RequestBody$Outbound;
}

export function requestBodyToJSON(requestBody: RequestBody): string {
  return JSON.stringify(RequestBody$outboundSchema.parse(requestBody));
}

export function requestBodyFromJSON(
  jsonString: string,
): SafeParseResult<RequestBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => RequestBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RequestBody' from JSON`,
  );
}

/** @internal */
export const PostV2ModelsLitellmImportModelType$inboundSchema: z.ZodNativeEnum<
  typeof PostV2ModelsLitellmImportModelType
> = z.nativeEnum(PostV2ModelsLitellmImportModelType);

/** @internal */
export const PostV2ModelsLitellmImportModelType$outboundSchema: z.ZodNativeEnum<
  typeof PostV2ModelsLitellmImportModelType
> = PostV2ModelsLitellmImportModelType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostV2ModelsLitellmImportModelType$ {
  /** @deprecated use `PostV2ModelsLitellmImportModelType$inboundSchema` instead. */
  export const inboundSchema = PostV2ModelsLitellmImportModelType$inboundSchema;
  /** @deprecated use `PostV2ModelsLitellmImportModelType$outboundSchema` instead. */
  export const outboundSchema =
    PostV2ModelsLitellmImportModelType$outboundSchema;
}

/** @internal */
export const PostV2ModelsLitellmImportProvider$inboundSchema: z.ZodNativeEnum<
  typeof PostV2ModelsLitellmImportProvider
> = z.nativeEnum(PostV2ModelsLitellmImportProvider);

/** @internal */
export const PostV2ModelsLitellmImportProvider$outboundSchema: z.ZodNativeEnum<
  typeof PostV2ModelsLitellmImportProvider
> = PostV2ModelsLitellmImportProvider$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostV2ModelsLitellmImportProvider$ {
  /** @deprecated use `PostV2ModelsLitellmImportProvider$inboundSchema` instead. */
  export const inboundSchema = PostV2ModelsLitellmImportProvider$inboundSchema;
  /** @deprecated use `PostV2ModelsLitellmImportProvider$outboundSchema` instead. */
  export const outboundSchema =
    PostV2ModelsLitellmImportProvider$outboundSchema;
}

/** @internal */
export const Region$inboundSchema: z.ZodNativeEnum<typeof Region> = z
  .nativeEnum(Region);

/** @internal */
export const Region$outboundSchema: z.ZodNativeEnum<typeof Region> =
  Region$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Region$ {
  /** @deprecated use `Region$inboundSchema` instead. */
  export const inboundSchema = Region$inboundSchema;
  /** @deprecated use `Region$outboundSchema` instead. */
  export const outboundSchema = Region$outboundSchema;
}

/** @internal */
export const PostV2ModelsLitellmImportMetadata$inboundSchema: z.ZodType<
  PostV2ModelsLitellmImportMetadata,
  z.ZodTypeDef,
  unknown
> = z.object({
  context_window: z.number().optional(),
  is_private: z.boolean(),
  region: Region$inboundSchema,
  has_functions: z.boolean().optional(),
  strict_tool_supported: z.boolean().optional(),
  json_mode_response_format_supported: z.boolean().optional(),
  json_schema_response_format_supported: z.boolean().optional(),
  support_system_message: z.boolean().optional(),
  streaming_not_supported: z.boolean().optional(),
  db_match: z.boolean().default(false),
  image_token_cost: z.number().optional(),
}).transform((v) => {
  return remap$(v, {
    "context_window": "contextWindow",
    "is_private": "isPrivate",
    "has_functions": "hasFunctions",
    "strict_tool_supported": "strictToolSupported",
    "json_mode_response_format_supported": "jsonModeResponseFormatSupported",
    "json_schema_response_format_supported":
      "jsonSchemaResponseFormatSupported",
    "support_system_message": "supportSystemMessage",
    "streaming_not_supported": "streamingNotSupported",
    "db_match": "dbMatch",
    "image_token_cost": "imageTokenCost",
  });
});

/** @internal */
export type PostV2ModelsLitellmImportMetadata$Outbound = {
  context_window?: number | undefined;
  is_private: boolean;
  region: string;
  has_functions?: boolean | undefined;
  strict_tool_supported?: boolean | undefined;
  json_mode_response_format_supported?: boolean | undefined;
  json_schema_response_format_supported?: boolean | undefined;
  support_system_message?: boolean | undefined;
  streaming_not_supported?: boolean | undefined;
  db_match: boolean;
  image_token_cost?: number | undefined;
};

/** @internal */
export const PostV2ModelsLitellmImportMetadata$outboundSchema: z.ZodType<
  PostV2ModelsLitellmImportMetadata$Outbound,
  z.ZodTypeDef,
  PostV2ModelsLitellmImportMetadata
> = z.object({
  contextWindow: z.number().optional(),
  isPrivate: z.boolean(),
  region: Region$outboundSchema,
  hasFunctions: z.boolean().optional(),
  strictToolSupported: z.boolean().optional(),
  jsonModeResponseFormatSupported: z.boolean().optional(),
  jsonSchemaResponseFormatSupported: z.boolean().optional(),
  supportSystemMessage: z.boolean().optional(),
  streamingNotSupported: z.boolean().optional(),
  dbMatch: z.boolean().default(false),
  imageTokenCost: z.number().optional(),
}).transform((v) => {
  return remap$(v, {
    contextWindow: "context_window",
    isPrivate: "is_private",
    hasFunctions: "has_functions",
    strictToolSupported: "strict_tool_supported",
    jsonModeResponseFormatSupported: "json_mode_response_format_supported",
    jsonSchemaResponseFormatSupported: "json_schema_response_format_supported",
    supportSystemMessage: "support_system_message",
    streamingNotSupported: "streaming_not_supported",
    dbMatch: "db_match",
    imageTokenCost: "image_token_cost",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostV2ModelsLitellmImportMetadata$ {
  /** @deprecated use `PostV2ModelsLitellmImportMetadata$inboundSchema` instead. */
  export const inboundSchema = PostV2ModelsLitellmImportMetadata$inboundSchema;
  /** @deprecated use `PostV2ModelsLitellmImportMetadata$outboundSchema` instead. */
  export const outboundSchema =
    PostV2ModelsLitellmImportMetadata$outboundSchema;
  /** @deprecated use `PostV2ModelsLitellmImportMetadata$Outbound` instead. */
  export type Outbound = PostV2ModelsLitellmImportMetadata$Outbound;
}

export function postV2ModelsLitellmImportMetadataToJSON(
  postV2ModelsLitellmImportMetadata: PostV2ModelsLitellmImportMetadata,
): string {
  return JSON.stringify(
    PostV2ModelsLitellmImportMetadata$outboundSchema.parse(
      postV2ModelsLitellmImportMetadata,
    ),
  );
}

export function postV2ModelsLitellmImportMetadataFromJSON(
  jsonString: string,
): SafeParseResult<PostV2ModelsLitellmImportMetadata, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PostV2ModelsLitellmImportMetadata$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PostV2ModelsLitellmImportMetadata' from JSON`,
  );
}

/** @internal */
export const PostV2ModelsLitellmImportConfigurationResponse200Provider$inboundSchema:
  z.ZodNativeEnum<
    typeof PostV2ModelsLitellmImportConfigurationResponse200Provider
  > = z.nativeEnum(PostV2ModelsLitellmImportConfigurationResponse200Provider);

/** @internal */
export const PostV2ModelsLitellmImportConfigurationResponse200Provider$outboundSchema:
  z.ZodNativeEnum<
    typeof PostV2ModelsLitellmImportConfigurationResponse200Provider
  > = PostV2ModelsLitellmImportConfigurationResponse200Provider$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostV2ModelsLitellmImportConfigurationResponse200Provider$ {
  /** @deprecated use `PostV2ModelsLitellmImportConfigurationResponse200Provider$inboundSchema` instead. */
  export const inboundSchema =
    PostV2ModelsLitellmImportConfigurationResponse200Provider$inboundSchema;
  /** @deprecated use `PostV2ModelsLitellmImportConfigurationResponse200Provider$outboundSchema` instead. */
  export const outboundSchema =
    PostV2ModelsLitellmImportConfigurationResponse200Provider$outboundSchema;
}

/** @internal */
export const Configuration4$inboundSchema: z.ZodType<
  Configuration4,
  z.ZodTypeDef,
  unknown
> = z.object({
  provider:
    PostV2ModelsLitellmImportConfigurationResponse200Provider$inboundSchema,
  host_url: z.string(),
}).transform((v) => {
  return remap$(v, {
    "host_url": "hostUrl",
  });
});

/** @internal */
export type Configuration4$Outbound = {
  provider: string;
  host_url: string;
};

/** @internal */
export const Configuration4$outboundSchema: z.ZodType<
  Configuration4$Outbound,
  z.ZodTypeDef,
  Configuration4
> = z.object({
  provider:
    PostV2ModelsLitellmImportConfigurationResponse200Provider$outboundSchema,
  hostUrl: z.string(),
}).transform((v) => {
  return remap$(v, {
    hostUrl: "host_url",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Configuration4$ {
  /** @deprecated use `Configuration4$inboundSchema` instead. */
  export const inboundSchema = Configuration4$inboundSchema;
  /** @deprecated use `Configuration4$outboundSchema` instead. */
  export const outboundSchema = Configuration4$outboundSchema;
  /** @deprecated use `Configuration4$Outbound` instead. */
  export type Outbound = Configuration4$Outbound;
}

export function configuration4ToJSON(configuration4: Configuration4): string {
  return JSON.stringify(Configuration4$outboundSchema.parse(configuration4));
}

export function configuration4FromJSON(
  jsonString: string,
): SafeParseResult<Configuration4, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Configuration4$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Configuration4' from JSON`,
  );
}

/** @internal */
export const PostV2ModelsLitellmImportConfigurationResponseProvider$inboundSchema:
  z.ZodNativeEnum<
    typeof PostV2ModelsLitellmImportConfigurationResponseProvider
  > = z.nativeEnum(PostV2ModelsLitellmImportConfigurationResponseProvider);

/** @internal */
export const PostV2ModelsLitellmImportConfigurationResponseProvider$outboundSchema:
  z.ZodNativeEnum<
    typeof PostV2ModelsLitellmImportConfigurationResponseProvider
  > = PostV2ModelsLitellmImportConfigurationResponseProvider$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostV2ModelsLitellmImportConfigurationResponseProvider$ {
  /** @deprecated use `PostV2ModelsLitellmImportConfigurationResponseProvider$inboundSchema` instead. */
  export const inboundSchema =
    PostV2ModelsLitellmImportConfigurationResponseProvider$inboundSchema;
  /** @deprecated use `PostV2ModelsLitellmImportConfigurationResponseProvider$outboundSchema` instead. */
  export const outboundSchema =
    PostV2ModelsLitellmImportConfigurationResponseProvider$outboundSchema;
}

/** @internal */
export const Configuration3$inboundSchema: z.ZodType<
  Configuration3,
  z.ZodTypeDef,
  unknown
> = z.object({
  provider:
    PostV2ModelsLitellmImportConfigurationResponseProvider$inboundSchema,
  region: z.string(),
});

/** @internal */
export type Configuration3$Outbound = {
  provider: string;
  region: string;
};

/** @internal */
export const Configuration3$outboundSchema: z.ZodType<
  Configuration3$Outbound,
  z.ZodTypeDef,
  Configuration3
> = z.object({
  provider:
    PostV2ModelsLitellmImportConfigurationResponseProvider$outboundSchema,
  region: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Configuration3$ {
  /** @deprecated use `Configuration3$inboundSchema` instead. */
  export const inboundSchema = Configuration3$inboundSchema;
  /** @deprecated use `Configuration3$outboundSchema` instead. */
  export const outboundSchema = Configuration3$outboundSchema;
  /** @deprecated use `Configuration3$Outbound` instead. */
  export type Outbound = Configuration3$Outbound;
}

export function configuration3ToJSON(configuration3: Configuration3): string {
  return JSON.stringify(Configuration3$outboundSchema.parse(configuration3));
}

export function configuration3FromJSON(
  jsonString: string,
): SafeParseResult<Configuration3, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Configuration3$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Configuration3' from JSON`,
  );
}

/** @internal */
export const PostV2ModelsLitellmImportConfigurationProvider$inboundSchema:
  z.ZodNativeEnum<typeof PostV2ModelsLitellmImportConfigurationProvider> = z
    .nativeEnum(PostV2ModelsLitellmImportConfigurationProvider);

/** @internal */
export const PostV2ModelsLitellmImportConfigurationProvider$outboundSchema:
  z.ZodNativeEnum<typeof PostV2ModelsLitellmImportConfigurationProvider> =
    PostV2ModelsLitellmImportConfigurationProvider$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostV2ModelsLitellmImportConfigurationProvider$ {
  /** @deprecated use `PostV2ModelsLitellmImportConfigurationProvider$inboundSchema` instead. */
  export const inboundSchema =
    PostV2ModelsLitellmImportConfigurationProvider$inboundSchema;
  /** @deprecated use `PostV2ModelsLitellmImportConfigurationProvider$outboundSchema` instead. */
  export const outboundSchema =
    PostV2ModelsLitellmImportConfigurationProvider$outboundSchema;
}

/** @internal */
export const Configuration2$inboundSchema: z.ZodType<
  Configuration2,
  z.ZodTypeDef,
  unknown
> = z.object({
  provider: PostV2ModelsLitellmImportConfigurationProvider$inboundSchema,
  service_account: z.string(),
  region: z.string(),
  location: z.string(),
  should_use_beta_features: z.boolean(),
  project_id: z.string(),
  is_openai_compatible: z.boolean().optional(),
  is_tuned_model: z.boolean().optional(),
}).transform((v) => {
  return remap$(v, {
    "service_account": "serviceAccount",
    "should_use_beta_features": "shouldUseBetaFeatures",
    "project_id": "projectId",
    "is_openai_compatible": "isOpenaiCompatible",
    "is_tuned_model": "isTunedModel",
  });
});

/** @internal */
export type Configuration2$Outbound = {
  provider: string;
  service_account: string;
  region: string;
  location: string;
  should_use_beta_features: boolean;
  project_id: string;
  is_openai_compatible?: boolean | undefined;
  is_tuned_model?: boolean | undefined;
};

/** @internal */
export const Configuration2$outboundSchema: z.ZodType<
  Configuration2$Outbound,
  z.ZodTypeDef,
  Configuration2
> = z.object({
  provider: PostV2ModelsLitellmImportConfigurationProvider$outboundSchema,
  serviceAccount: z.string(),
  region: z.string(),
  location: z.string(),
  shouldUseBetaFeatures: z.boolean(),
  projectId: z.string(),
  isOpenaiCompatible: z.boolean().optional(),
  isTunedModel: z.boolean().optional(),
}).transform((v) => {
  return remap$(v, {
    serviceAccount: "service_account",
    shouldUseBetaFeatures: "should_use_beta_features",
    projectId: "project_id",
    isOpenaiCompatible: "is_openai_compatible",
    isTunedModel: "is_tuned_model",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Configuration2$ {
  /** @deprecated use `Configuration2$inboundSchema` instead. */
  export const inboundSchema = Configuration2$inboundSchema;
  /** @deprecated use `Configuration2$outboundSchema` instead. */
  export const outboundSchema = Configuration2$outboundSchema;
  /** @deprecated use `Configuration2$Outbound` instead. */
  export type Outbound = Configuration2$Outbound;
}

export function configuration2ToJSON(configuration2: Configuration2): string {
  return JSON.stringify(Configuration2$outboundSchema.parse(configuration2));
}

export function configuration2FromJSON(
  jsonString: string,
): SafeParseResult<Configuration2, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Configuration2$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Configuration2' from JSON`,
  );
}

/** @internal */
export const ConfigurationProvider$inboundSchema: z.ZodNativeEnum<
  typeof ConfigurationProvider
> = z.nativeEnum(ConfigurationProvider);

/** @internal */
export const ConfigurationProvider$outboundSchema: z.ZodNativeEnum<
  typeof ConfigurationProvider
> = ConfigurationProvider$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ConfigurationProvider$ {
  /** @deprecated use `ConfigurationProvider$inboundSchema` instead. */
  export const inboundSchema = ConfigurationProvider$inboundSchema;
  /** @deprecated use `ConfigurationProvider$outboundSchema` instead. */
  export const outboundSchema = ConfigurationProvider$outboundSchema;
}

/** @internal */
export const Configuration1$inboundSchema: z.ZodType<
  Configuration1,
  z.ZodTypeDef,
  unknown
> = z.object({
  provider: ConfigurationProvider$inboundSchema,
  endpoint: z.string(),
  api_key: z.string(),
}).transform((v) => {
  return remap$(v, {
    "api_key": "apiKey",
  });
});

/** @internal */
export type Configuration1$Outbound = {
  provider: string;
  endpoint: string;
  api_key: string;
};

/** @internal */
export const Configuration1$outboundSchema: z.ZodType<
  Configuration1$Outbound,
  z.ZodTypeDef,
  Configuration1
> = z.object({
  provider: ConfigurationProvider$outboundSchema,
  endpoint: z.string(),
  apiKey: z.string(),
}).transform((v) => {
  return remap$(v, {
    apiKey: "api_key",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Configuration1$ {
  /** @deprecated use `Configuration1$inboundSchema` instead. */
  export const inboundSchema = Configuration1$inboundSchema;
  /** @deprecated use `Configuration1$outboundSchema` instead. */
  export const outboundSchema = Configuration1$outboundSchema;
  /** @deprecated use `Configuration1$Outbound` instead. */
  export type Outbound = Configuration1$Outbound;
}

export function configuration1ToJSON(configuration1: Configuration1): string {
  return JSON.stringify(Configuration1$outboundSchema.parse(configuration1));
}

export function configuration1FromJSON(
  jsonString: string,
): SafeParseResult<Configuration1, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Configuration1$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Configuration1' from JSON`,
  );
}

/** @internal */
export const Configuration$inboundSchema: z.ZodType<
  Configuration,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => Configuration3$inboundSchema),
  z.lazy(() => Configuration4$inboundSchema),
  z.lazy(() => Configuration1$inboundSchema),
  z.lazy(() => Configuration2$inboundSchema),
]);

/** @internal */
export type Configuration$Outbound =
  | Configuration3$Outbound
  | Configuration4$Outbound
  | Configuration1$Outbound
  | Configuration2$Outbound;

/** @internal */
export const Configuration$outboundSchema: z.ZodType<
  Configuration$Outbound,
  z.ZodTypeDef,
  Configuration
> = z.union([
  z.lazy(() => Configuration3$outboundSchema),
  z.lazy(() => Configuration4$outboundSchema),
  z.lazy(() => Configuration1$outboundSchema),
  z.lazy(() => Configuration2$outboundSchema),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Configuration$ {
  /** @deprecated use `Configuration$inboundSchema` instead. */
  export const inboundSchema = Configuration$inboundSchema;
  /** @deprecated use `Configuration$outboundSchema` instead. */
  export const outboundSchema = Configuration$outboundSchema;
  /** @deprecated use `Configuration$Outbound` instead. */
  export type Outbound = Configuration$Outbound;
}

export function configurationToJSON(configuration: Configuration): string {
  return JSON.stringify(Configuration$outboundSchema.parse(configuration));
}

export function configurationFromJSON(
  jsonString: string,
): SafeParseResult<Configuration, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Configuration$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Configuration' from JSON`,
  );
}

/** @internal */
export const PostV2ModelsLitellmImportParametersParameter$inboundSchema:
  z.ZodNativeEnum<typeof PostV2ModelsLitellmImportParametersParameter> = z
    .nativeEnum(PostV2ModelsLitellmImportParametersParameter);

/** @internal */
export const PostV2ModelsLitellmImportParametersParameter$outboundSchema:
  z.ZodNativeEnum<typeof PostV2ModelsLitellmImportParametersParameter> =
    PostV2ModelsLitellmImportParametersParameter$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostV2ModelsLitellmImportParametersParameter$ {
  /** @deprecated use `PostV2ModelsLitellmImportParametersParameter$inboundSchema` instead. */
  export const inboundSchema =
    PostV2ModelsLitellmImportParametersParameter$inboundSchema;
  /** @deprecated use `PostV2ModelsLitellmImportParametersParameter$outboundSchema` instead. */
  export const outboundSchema =
    PostV2ModelsLitellmImportParametersParameter$outboundSchema;
}

/** @internal */
export const PostV2ModelsLitellmImportParametersParameterType$inboundSchema:
  z.ZodNativeEnum<typeof PostV2ModelsLitellmImportParametersParameterType> = z
    .nativeEnum(PostV2ModelsLitellmImportParametersParameterType);

/** @internal */
export const PostV2ModelsLitellmImportParametersParameterType$outboundSchema:
  z.ZodNativeEnum<typeof PostV2ModelsLitellmImportParametersParameterType> =
    PostV2ModelsLitellmImportParametersParameterType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostV2ModelsLitellmImportParametersParameterType$ {
  /** @deprecated use `PostV2ModelsLitellmImportParametersParameterType$inboundSchema` instead. */
  export const inboundSchema =
    PostV2ModelsLitellmImportParametersParameterType$inboundSchema;
  /** @deprecated use `PostV2ModelsLitellmImportParametersParameterType$outboundSchema` instead. */
  export const outboundSchema =
    PostV2ModelsLitellmImportParametersParameterType$outboundSchema;
}

/** @internal */
export const Options$inboundSchema: z.ZodType<Options, z.ZodTypeDef, unknown> =
  z.object({
    display_name: z.string(),
    value: z.string(),
  }).transform((v) => {
    return remap$(v, {
      "display_name": "displayName",
    });
  });

/** @internal */
export type Options$Outbound = {
  display_name: string;
  value: string;
};

/** @internal */
export const Options$outboundSchema: z.ZodType<
  Options$Outbound,
  z.ZodTypeDef,
  Options
> = z.object({
  displayName: z.string(),
  value: z.string(),
}).transform((v) => {
  return remap$(v, {
    displayName: "display_name",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Options$ {
  /** @deprecated use `Options$inboundSchema` instead. */
  export const inboundSchema = Options$inboundSchema;
  /** @deprecated use `Options$outboundSchema` instead. */
  export const outboundSchema = Options$outboundSchema;
  /** @deprecated use `Options$Outbound` instead. */
  export type Outbound = Options$Outbound;
}

export function optionsToJSON(options: Options): string {
  return JSON.stringify(Options$outboundSchema.parse(options));
}

export function optionsFromJSON(
  jsonString: string,
): SafeParseResult<Options, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Options$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Options' from JSON`,
  );
}

/** @internal */
export const PostV2ModelsLitellmImportParametersConfig$inboundSchema: z.ZodType<
  PostV2ModelsLitellmImportParametersConfig,
  z.ZodTypeDef,
  unknown
> = z.object({
  default: z.string(),
  options: z.array(z.lazy(() => Options$inboundSchema)),
});

/** @internal */
export type PostV2ModelsLitellmImportParametersConfig$Outbound = {
  default: string;
  options: Array<Options$Outbound>;
};

/** @internal */
export const PostV2ModelsLitellmImportParametersConfig$outboundSchema:
  z.ZodType<
    PostV2ModelsLitellmImportParametersConfig$Outbound,
    z.ZodTypeDef,
    PostV2ModelsLitellmImportParametersConfig
  > = z.object({
    default: z.string(),
    options: z.array(z.lazy(() => Options$outboundSchema)),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostV2ModelsLitellmImportParametersConfig$ {
  /** @deprecated use `PostV2ModelsLitellmImportParametersConfig$inboundSchema` instead. */
  export const inboundSchema =
    PostV2ModelsLitellmImportParametersConfig$inboundSchema;
  /** @deprecated use `PostV2ModelsLitellmImportParametersConfig$outboundSchema` instead. */
  export const outboundSchema =
    PostV2ModelsLitellmImportParametersConfig$outboundSchema;
  /** @deprecated use `PostV2ModelsLitellmImportParametersConfig$Outbound` instead. */
  export type Outbound = PostV2ModelsLitellmImportParametersConfig$Outbound;
}

export function postV2ModelsLitellmImportParametersConfigToJSON(
  postV2ModelsLitellmImportParametersConfig:
    PostV2ModelsLitellmImportParametersConfig,
): string {
  return JSON.stringify(
    PostV2ModelsLitellmImportParametersConfig$outboundSchema.parse(
      postV2ModelsLitellmImportParametersConfig,
    ),
  );
}

export function postV2ModelsLitellmImportParametersConfigFromJSON(
  jsonString: string,
): SafeParseResult<
  PostV2ModelsLitellmImportParametersConfig,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PostV2ModelsLitellmImportParametersConfig$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'PostV2ModelsLitellmImportParametersConfig' from JSON`,
  );
}

/** @internal */
export const Parameters3$inboundSchema: z.ZodType<
  Parameters3,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  name: z.string(),
  parameter: PostV2ModelsLitellmImportParametersParameter$inboundSchema,
  description: z.string(),
  hints: z.nullable(z.string()).optional(),
  is_active: z.boolean(),
  position: z.nullable(z.number()).optional(),
  parameter_type:
    PostV2ModelsLitellmImportParametersParameterType$inboundSchema,
  config: z.lazy(() => PostV2ModelsLitellmImportParametersConfig$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "is_active": "isActive",
    "parameter_type": "parameterType",
  });
});

/** @internal */
export type Parameters3$Outbound = {
  id: string;
  name: string;
  parameter: string;
  description: string;
  hints?: string | null | undefined;
  is_active: boolean;
  position?: number | null | undefined;
  parameter_type: string;
  config: PostV2ModelsLitellmImportParametersConfig$Outbound;
};

/** @internal */
export const Parameters3$outboundSchema: z.ZodType<
  Parameters3$Outbound,
  z.ZodTypeDef,
  Parameters3
> = z.object({
  id: z.string(),
  name: z.string(),
  parameter: PostV2ModelsLitellmImportParametersParameter$outboundSchema,
  description: z.string(),
  hints: z.nullable(z.string()).optional(),
  isActive: z.boolean(),
  position: z.nullable(z.number()).optional(),
  parameterType:
    PostV2ModelsLitellmImportParametersParameterType$outboundSchema,
  config: z.lazy(() =>
    PostV2ModelsLitellmImportParametersConfig$outboundSchema
  ),
}).transform((v) => {
  return remap$(v, {
    isActive: "is_active",
    parameterType: "parameter_type",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Parameters3$ {
  /** @deprecated use `Parameters3$inboundSchema` instead. */
  export const inboundSchema = Parameters3$inboundSchema;
  /** @deprecated use `Parameters3$outboundSchema` instead. */
  export const outboundSchema = Parameters3$outboundSchema;
  /** @deprecated use `Parameters3$Outbound` instead. */
  export type Outbound = Parameters3$Outbound;
}

export function parameters3ToJSON(parameters3: Parameters3): string {
  return JSON.stringify(Parameters3$outboundSchema.parse(parameters3));
}

export function parameters3FromJSON(
  jsonString: string,
): SafeParseResult<Parameters3, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Parameters3$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Parameters3' from JSON`,
  );
}

/** @internal */
export const ParametersParameter$inboundSchema: z.ZodNativeEnum<
  typeof ParametersParameter
> = z.nativeEnum(ParametersParameter);

/** @internal */
export const ParametersParameter$outboundSchema: z.ZodNativeEnum<
  typeof ParametersParameter
> = ParametersParameter$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ParametersParameter$ {
  /** @deprecated use `ParametersParameter$inboundSchema` instead. */
  export const inboundSchema = ParametersParameter$inboundSchema;
  /** @deprecated use `ParametersParameter$outboundSchema` instead. */
  export const outboundSchema = ParametersParameter$outboundSchema;
}

/** @internal */
export const ParametersParameterType$inboundSchema: z.ZodNativeEnum<
  typeof ParametersParameterType
> = z.nativeEnum(ParametersParameterType);

/** @internal */
export const ParametersParameterType$outboundSchema: z.ZodNativeEnum<
  typeof ParametersParameterType
> = ParametersParameterType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ParametersParameterType$ {
  /** @deprecated use `ParametersParameterType$inboundSchema` instead. */
  export const inboundSchema = ParametersParameterType$inboundSchema;
  /** @deprecated use `ParametersParameterType$outboundSchema` instead. */
  export const outboundSchema = ParametersParameterType$outboundSchema;
}

/** @internal */
export const ParametersConfig$inboundSchema: z.ZodType<
  ParametersConfig,
  z.ZodTypeDef,
  unknown
> = z.object({
  default: z.boolean(),
});

/** @internal */
export type ParametersConfig$Outbound = {
  default: boolean;
};

/** @internal */
export const ParametersConfig$outboundSchema: z.ZodType<
  ParametersConfig$Outbound,
  z.ZodTypeDef,
  ParametersConfig
> = z.object({
  default: z.boolean(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ParametersConfig$ {
  /** @deprecated use `ParametersConfig$inboundSchema` instead. */
  export const inboundSchema = ParametersConfig$inboundSchema;
  /** @deprecated use `ParametersConfig$outboundSchema` instead. */
  export const outboundSchema = ParametersConfig$outboundSchema;
  /** @deprecated use `ParametersConfig$Outbound` instead. */
  export type Outbound = ParametersConfig$Outbound;
}

export function parametersConfigToJSON(
  parametersConfig: ParametersConfig,
): string {
  return JSON.stringify(
    ParametersConfig$outboundSchema.parse(parametersConfig),
  );
}

export function parametersConfigFromJSON(
  jsonString: string,
): SafeParseResult<ParametersConfig, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ParametersConfig$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ParametersConfig' from JSON`,
  );
}

/** @internal */
export const Parameters2$inboundSchema: z.ZodType<
  Parameters2,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  name: z.string(),
  parameter: ParametersParameter$inboundSchema,
  description: z.string(),
  hints: z.nullable(z.string()).optional(),
  is_active: z.boolean(),
  position: z.nullable(z.number()).optional(),
  parameter_type: ParametersParameterType$inboundSchema,
  config: z.lazy(() => ParametersConfig$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "is_active": "isActive",
    "parameter_type": "parameterType",
  });
});

/** @internal */
export type Parameters2$Outbound = {
  id: string;
  name: string;
  parameter: string;
  description: string;
  hints?: string | null | undefined;
  is_active: boolean;
  position?: number | null | undefined;
  parameter_type: string;
  config: ParametersConfig$Outbound;
};

/** @internal */
export const Parameters2$outboundSchema: z.ZodType<
  Parameters2$Outbound,
  z.ZodTypeDef,
  Parameters2
> = z.object({
  id: z.string(),
  name: z.string(),
  parameter: ParametersParameter$outboundSchema,
  description: z.string(),
  hints: z.nullable(z.string()).optional(),
  isActive: z.boolean(),
  position: z.nullable(z.number()).optional(),
  parameterType: ParametersParameterType$outboundSchema,
  config: z.lazy(() => ParametersConfig$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    isActive: "is_active",
    parameterType: "parameter_type",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Parameters2$ {
  /** @deprecated use `Parameters2$inboundSchema` instead. */
  export const inboundSchema = Parameters2$inboundSchema;
  /** @deprecated use `Parameters2$outboundSchema` instead. */
  export const outboundSchema = Parameters2$outboundSchema;
  /** @deprecated use `Parameters2$Outbound` instead. */
  export type Outbound = Parameters2$Outbound;
}

export function parameters2ToJSON(parameters2: Parameters2): string {
  return JSON.stringify(Parameters2$outboundSchema.parse(parameters2));
}

export function parameters2FromJSON(
  jsonString: string,
): SafeParseResult<Parameters2, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Parameters2$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Parameters2' from JSON`,
  );
}

/** @internal */
export const Parameter$inboundSchema: z.ZodNativeEnum<typeof Parameter> = z
  .nativeEnum(Parameter);

/** @internal */
export const Parameter$outboundSchema: z.ZodNativeEnum<typeof Parameter> =
  Parameter$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Parameter$ {
  /** @deprecated use `Parameter$inboundSchema` instead. */
  export const inboundSchema = Parameter$inboundSchema;
  /** @deprecated use `Parameter$outboundSchema` instead. */
  export const outboundSchema = Parameter$outboundSchema;
}

/** @internal */
export const ParameterType$inboundSchema: z.ZodNativeEnum<
  typeof ParameterType
> = z.nativeEnum(ParameterType);

/** @internal */
export const ParameterType$outboundSchema: z.ZodNativeEnum<
  typeof ParameterType
> = ParameterType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ParameterType$ {
  /** @deprecated use `ParameterType$inboundSchema` instead. */
  export const inboundSchema = ParameterType$inboundSchema;
  /** @deprecated use `ParameterType$outboundSchema` instead. */
  export const outboundSchema = ParameterType$outboundSchema;
}

/** @internal */
export const Config$inboundSchema: z.ZodType<Config, z.ZodTypeDef, unknown> = z
  .object({
    default: z.number(),
    max: z.number(),
    min: z.number(),
    step: z.number(),
  });

/** @internal */
export type Config$Outbound = {
  default: number;
  max: number;
  min: number;
  step: number;
};

/** @internal */
export const Config$outboundSchema: z.ZodType<
  Config$Outbound,
  z.ZodTypeDef,
  Config
> = z.object({
  default: z.number(),
  max: z.number(),
  min: z.number(),
  step: z.number(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Config$ {
  /** @deprecated use `Config$inboundSchema` instead. */
  export const inboundSchema = Config$inboundSchema;
  /** @deprecated use `Config$outboundSchema` instead. */
  export const outboundSchema = Config$outboundSchema;
  /** @deprecated use `Config$Outbound` instead. */
  export type Outbound = Config$Outbound;
}

export function configToJSON(config: Config): string {
  return JSON.stringify(Config$outboundSchema.parse(config));
}

export function configFromJSON(
  jsonString: string,
): SafeParseResult<Config, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Config$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Config' from JSON`,
  );
}

/** @internal */
export const Parameters1$inboundSchema: z.ZodType<
  Parameters1,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  name: z.string(),
  parameter: Parameter$inboundSchema,
  description: z.string(),
  hints: z.nullable(z.string()).optional(),
  is_active: z.boolean(),
  position: z.nullable(z.number()).optional(),
  parameter_type: ParameterType$inboundSchema,
  config: z.lazy(() => Config$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "is_active": "isActive",
    "parameter_type": "parameterType",
  });
});

/** @internal */
export type Parameters1$Outbound = {
  id: string;
  name: string;
  parameter: string;
  description: string;
  hints?: string | null | undefined;
  is_active: boolean;
  position?: number | null | undefined;
  parameter_type: string;
  config: Config$Outbound;
};

/** @internal */
export const Parameters1$outboundSchema: z.ZodType<
  Parameters1$Outbound,
  z.ZodTypeDef,
  Parameters1
> = z.object({
  id: z.string(),
  name: z.string(),
  parameter: Parameter$outboundSchema,
  description: z.string(),
  hints: z.nullable(z.string()).optional(),
  isActive: z.boolean(),
  position: z.nullable(z.number()).optional(),
  parameterType: ParameterType$outboundSchema,
  config: z.lazy(() => Config$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    isActive: "is_active",
    parameterType: "parameter_type",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Parameters1$ {
  /** @deprecated use `Parameters1$inboundSchema` instead. */
  export const inboundSchema = Parameters1$inboundSchema;
  /** @deprecated use `Parameters1$outboundSchema` instead. */
  export const outboundSchema = Parameters1$outboundSchema;
  /** @deprecated use `Parameters1$Outbound` instead. */
  export type Outbound = Parameters1$Outbound;
}

export function parameters1ToJSON(parameters1: Parameters1): string {
  return JSON.stringify(Parameters1$outboundSchema.parse(parameters1));
}

export function parameters1FromJSON(
  jsonString: string,
): SafeParseResult<Parameters1, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Parameters1$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Parameters1' from JSON`,
  );
}

/** @internal */
export const ParametersT$inboundSchema: z.ZodType<
  ParametersT,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => Parameters1$inboundSchema),
  z.lazy(() => Parameters2$inboundSchema),
  z.lazy(() => Parameters3$inboundSchema),
]);

/** @internal */
export type ParametersT$Outbound =
  | Parameters1$Outbound
  | Parameters2$Outbound
  | Parameters3$Outbound;

/** @internal */
export const ParametersT$outboundSchema: z.ZodType<
  ParametersT$Outbound,
  z.ZodTypeDef,
  ParametersT
> = z.union([
  z.lazy(() => Parameters1$outboundSchema),
  z.lazy(() => Parameters2$outboundSchema),
  z.lazy(() => Parameters3$outboundSchema),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ParametersT$ {
  /** @deprecated use `ParametersT$inboundSchema` instead. */
  export const inboundSchema = ParametersT$inboundSchema;
  /** @deprecated use `ParametersT$outboundSchema` instead. */
  export const outboundSchema = ParametersT$outboundSchema;
  /** @deprecated use `ParametersT$Outbound` instead. */
  export type Outbound = ParametersT$Outbound;
}

export function parametersToJSON(parametersT: ParametersT): string {
  return JSON.stringify(ParametersT$outboundSchema.parse(parametersT));
}

export function parametersFromJSON(
  jsonString: string,
): SafeParseResult<ParametersT, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ParametersT$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ParametersT' from JSON`,
  );
}

/** @internal */
export const PostV2ModelsLitellmImportResponseBody$inboundSchema: z.ZodType<
  PostV2ModelsLitellmImportResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  created: z.string().datetime({ offset: true }).transform(v => new Date(v)),
  updated: z.string().datetime({ offset: true }).transform(v => new Date(v)),
  display_name: z.string(),
  model_id: z.string(),
  model_revision: z.string().optional(),
  model_developer: z.string(),
  model_family: z.string(),
  model_type: PostV2ModelsLitellmImportModelType$inboundSchema,
  provider: PostV2ModelsLitellmImportProvider$inboundSchema,
  is_active: z.boolean().default(true),
  input_cost: z.number(),
  input_currency: z.string().default("USD"),
  output_cost: z.number(),
  output_currency: z.string().default("USD"),
  description: z.string().optional(),
  has_functions: z.boolean().default(false),
  has_cpu_pricing: z.boolean().default(false),
  pricing_url: z.string().optional(),
  docs_url: z.string().optional(),
  enabled: z.boolean(),
  enabled_for_endpoints: z.boolean().default(false),
  enabled_for_playground: z.boolean().default(false),
  owner: z.string().default("system"),
  metadata: z.lazy(() => PostV2ModelsLitellmImportMetadata$inboundSchema),
  configuration: z.union([
    z.lazy(() => Configuration3$inboundSchema),
    z.lazy(() => Configuration4$inboundSchema),
    z.lazy(() => Configuration1$inboundSchema),
    z.lazy(() => Configuration2$inboundSchema),
  ]).optional(),
  parameters: z.array(
    z.union([
      z.lazy(() => Parameters1$inboundSchema),
      z.lazy(() => Parameters2$inboundSchema),
      z.lazy(() => Parameters3$inboundSchema),
    ]),
  ),
}).transform((v) => {
  return remap$(v, {
    "display_name": "displayName",
    "model_id": "modelId",
    "model_revision": "modelRevision",
    "model_developer": "modelDeveloper",
    "model_family": "modelFamily",
    "model_type": "modelType",
    "is_active": "isActive",
    "input_cost": "inputCost",
    "input_currency": "inputCurrency",
    "output_cost": "outputCost",
    "output_currency": "outputCurrency",
    "has_functions": "hasFunctions",
    "has_cpu_pricing": "hasCpuPricing",
    "pricing_url": "pricingUrl",
    "docs_url": "docsUrl",
    "enabled_for_endpoints": "enabledForEndpoints",
    "enabled_for_playground": "enabledForPlayground",
  });
});

/** @internal */
export type PostV2ModelsLitellmImportResponseBody$Outbound = {
  id: string;
  created: string;
  updated: string;
  display_name: string;
  model_id: string;
  model_revision?: string | undefined;
  model_developer: string;
  model_family: string;
  model_type: string;
  provider: string;
  is_active: boolean;
  input_cost: number;
  input_currency: string;
  output_cost: number;
  output_currency: string;
  description?: string | undefined;
  has_functions: boolean;
  has_cpu_pricing: boolean;
  pricing_url?: string | undefined;
  docs_url?: string | undefined;
  enabled: boolean;
  enabled_for_endpoints: boolean;
  enabled_for_playground: boolean;
  owner: string;
  metadata: PostV2ModelsLitellmImportMetadata$Outbound;
  configuration?:
    | Configuration3$Outbound
    | Configuration4$Outbound
    | Configuration1$Outbound
    | Configuration2$Outbound
    | undefined;
  parameters: Array<
    Parameters1$Outbound | Parameters2$Outbound | Parameters3$Outbound
  >;
};

/** @internal */
export const PostV2ModelsLitellmImportResponseBody$outboundSchema: z.ZodType<
  PostV2ModelsLitellmImportResponseBody$Outbound,
  z.ZodTypeDef,
  PostV2ModelsLitellmImportResponseBody
> = z.object({
  id: z.string(),
  created: z.date().transform(v => v.toISOString()),
  updated: z.date().transform(v => v.toISOString()),
  displayName: z.string(),
  modelId: z.string(),
  modelRevision: z.string().optional(),
  modelDeveloper: z.string(),
  modelFamily: z.string(),
  modelType: PostV2ModelsLitellmImportModelType$outboundSchema,
  provider: PostV2ModelsLitellmImportProvider$outboundSchema,
  isActive: z.boolean().default(true),
  inputCost: z.number(),
  inputCurrency: z.string().default("USD"),
  outputCost: z.number(),
  outputCurrency: z.string().default("USD"),
  description: z.string().optional(),
  hasFunctions: z.boolean().default(false),
  hasCpuPricing: z.boolean().default(false),
  pricingUrl: z.string().optional(),
  docsUrl: z.string().optional(),
  enabled: z.boolean(),
  enabledForEndpoints: z.boolean().default(false),
  enabledForPlayground: z.boolean().default(false),
  owner: z.string().default("system"),
  metadata: z.lazy(() => PostV2ModelsLitellmImportMetadata$outboundSchema),
  configuration: z.union([
    z.lazy(() => Configuration3$outboundSchema),
    z.lazy(() => Configuration4$outboundSchema),
    z.lazy(() => Configuration1$outboundSchema),
    z.lazy(() => Configuration2$outboundSchema),
  ]).optional(),
  parameters: z.array(
    z.union([
      z.lazy(() => Parameters1$outboundSchema),
      z.lazy(() => Parameters2$outboundSchema),
      z.lazy(() => Parameters3$outboundSchema),
    ]),
  ),
}).transform((v) => {
  return remap$(v, {
    displayName: "display_name",
    modelId: "model_id",
    modelRevision: "model_revision",
    modelDeveloper: "model_developer",
    modelFamily: "model_family",
    modelType: "model_type",
    isActive: "is_active",
    inputCost: "input_cost",
    inputCurrency: "input_currency",
    outputCost: "output_cost",
    outputCurrency: "output_currency",
    hasFunctions: "has_functions",
    hasCpuPricing: "has_cpu_pricing",
    pricingUrl: "pricing_url",
    docsUrl: "docs_url",
    enabledForEndpoints: "enabled_for_endpoints",
    enabledForPlayground: "enabled_for_playground",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostV2ModelsLitellmImportResponseBody$ {
  /** @deprecated use `PostV2ModelsLitellmImportResponseBody$inboundSchema` instead. */
  export const inboundSchema =
    PostV2ModelsLitellmImportResponseBody$inboundSchema;
  /** @deprecated use `PostV2ModelsLitellmImportResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    PostV2ModelsLitellmImportResponseBody$outboundSchema;
  /** @deprecated use `PostV2ModelsLitellmImportResponseBody$Outbound` instead. */
  export type Outbound = PostV2ModelsLitellmImportResponseBody$Outbound;
}

export function postV2ModelsLitellmImportResponseBodyToJSON(
  postV2ModelsLitellmImportResponseBody: PostV2ModelsLitellmImportResponseBody,
): string {
  return JSON.stringify(
    PostV2ModelsLitellmImportResponseBody$outboundSchema.parse(
      postV2ModelsLitellmImportResponseBody,
    ),
  );
}

export function postV2ModelsLitellmImportResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<PostV2ModelsLitellmImportResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      PostV2ModelsLitellmImportResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PostV2ModelsLitellmImportResponseBody' from JSON`,
  );
}
