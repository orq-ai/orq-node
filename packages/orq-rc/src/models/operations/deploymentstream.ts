/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type DeploymentStreamGlobals = {
  environment?: string | undefined;
  contactId?: string | undefined;
};

export type DeploymentStreamInputs = string | number | boolean;

/**
 * The role of the messages author, in this case tool.
 */
export const DeploymentStreamPrefixMessagesDeploymentsRequestRequestBody5Role =
  {
    Tool: "tool",
  } as const;
/**
 * The role of the messages author, in this case tool.
 */
export type DeploymentStreamPrefixMessagesDeploymentsRequestRequestBody5Role =
  ClosedEnum<
    typeof DeploymentStreamPrefixMessagesDeploymentsRequestRequestBody5Role
  >;

/**
 * The contents of the tool message.
 */
export type DeploymentStreamPrefixMessagesDeploymentsRequestContent =
  | string
  | Array<string>;

export type PrefixMessagesToolMessage = {
  /**
   * The role of the messages author, in this case tool.
   */
  role: DeploymentStreamPrefixMessagesDeploymentsRequestRequestBody5Role;
  /**
   * The contents of the tool message.
   */
  content: string | Array<string>;
  /**
   * Tool call that this message is responding to.
   */
  toolCallId: string;
};

/**
 * The type of the content part.
 */
export const DeploymentStream2DeploymentsRequestRequestBodyPrefixMessages4Type =
  {
    Refusal: "refusal",
  } as const;
/**
 * The type of the content part.
 */
export type DeploymentStream2DeploymentsRequestRequestBodyPrefixMessages4Type =
  ClosedEnum<
    typeof DeploymentStream2DeploymentsRequestRequestBodyPrefixMessages4Type
  >;

export type DeploymentStream2RefusalContentPart = {
  /**
   * The type of the content part.
   */
  type: DeploymentStream2DeploymentsRequestRequestBodyPrefixMessages4Type;
  /**
   * The refusal message generated by the model.
   */
  refusal: string;
};

/**
 * The type of the content part.
 */
export const DeploymentStream2DeploymentsRequestRequestBodyPrefixMessagesType =
  {
    Text: "text",
  } as const;
/**
 * The type of the content part.
 */
export type DeploymentStream2DeploymentsRequestRequestBodyPrefixMessagesType =
  ClosedEnum<
    typeof DeploymentStream2DeploymentsRequestRequestBodyPrefixMessagesType
  >;

export type DeploymentStream2TextContentPart = {
  /**
   * The type of the content part.
   */
  type: DeploymentStream2DeploymentsRequestRequestBodyPrefixMessagesType;
  /**
   * The text content.
   */
  text: string;
};

export type DeploymentStreamContentDeployments2 =
  | DeploymentStream2TextContentPart
  | DeploymentStream2RefusalContentPart;

/**
 * The contents of the assistant message. Required unless `tool_calls` or `function_call` is specified.
 */
export type DeploymentStreamPrefixMessagesDeploymentsContent =
  | string
  | Array<
    DeploymentStream2TextContentPart | DeploymentStream2RefusalContentPart
  >;

/**
 * The role of the messages author, in this case `assistant`.
 */
export const DeploymentStreamPrefixMessagesDeploymentsRequestRequestBodyRole = {
  Assistant: "assistant",
} as const;
/**
 * The role of the messages author, in this case `assistant`.
 */
export type DeploymentStreamPrefixMessagesDeploymentsRequestRequestBodyRole =
  ClosedEnum<
    typeof DeploymentStreamPrefixMessagesDeploymentsRequestRequestBodyRole
  >;

/**
 * Data about a previous audio response from the model.
 */
export type PrefixMessagesAudio = {
  /**
   * Unique identifier for a previous audio response from the model.
   */
  id: string;
};

/**
 * The type of the tool. Currently, only `function` is supported.
 */
export const DeploymentStreamPrefixMessagesType = {
  Function: "function",
} as const;
/**
 * The type of the tool. Currently, only `function` is supported.
 */
export type DeploymentStreamPrefixMessagesType = ClosedEnum<
  typeof DeploymentStreamPrefixMessagesType
>;

export type PrefixMessagesFunction = {
  /**
   * The name of the function to call.
   */
  name?: string | undefined;
  /**
   * The arguments to call the function with, as generated by the model in JSON format. Note that the model does not always generate valid JSON, and may hallucinate parameters not defined by your function schema. Validate the arguments in your code before calling your function.
   */
  arguments?: string | undefined;
};

export type PrefixMessagesToolCalls = {
  /**
   * The ID of the tool call.
   */
  id: string;
  /**
   * The type of the tool. Currently, only `function` is supported.
   */
  type: DeploymentStreamPrefixMessagesType;
  function: PrefixMessagesFunction;
};

export type PrefixMessagesAssistantMessage = {
  /**
   * The contents of the assistant message. Required unless `tool_calls` or `function_call` is specified.
   */
  content?:
    | string
    | Array<
      DeploymentStream2TextContentPart | DeploymentStream2RefusalContentPart
    >
    | null
    | undefined;
  /**
   * The refusal message by the assistant.
   */
  refusal?: string | null | undefined;
  /**
   * The role of the messages author, in this case `assistant`.
   */
  role: DeploymentStreamPrefixMessagesDeploymentsRequestRequestBodyRole;
  /**
   * An optional name for the participant. Provides the model information to differentiate between participants of the same role.
   */
  name?: string | undefined;
  /**
   * Data about a previous audio response from the model.
   */
  audio?: PrefixMessagesAudio | null | undefined;
  /**
   * The tool calls generated by the model, such as function calls.
   */
  toolCalls?: Array<PrefixMessagesToolCalls> | undefined;
  /**
   * Internal thought process of the model
   */
  reasoning?: string | undefined;
  /**
   * The signature holds a cryptographic token which verifies that the thinking block was generated by the model, and is verified when thinking is part of a multiturn conversation. This value should not be modified and should always be sent to the API when the reasoning is redacted. Currently only supported by `Anthropic`.
   */
  reasoningSignature?: string | undefined;
  /**
   * Occasionally the model's internal reasoning will be flagged by the safety systems of the provider. When this occurs, the provider will encrypt the reasoning. These redacted reasoning is decrypted when passed back to the API, allowing the model to continue its response without losing context.
   */
  redactedReasoning?: string | undefined;
};

/**
 * The role of the messages author, in this case `user`.
 */
export const DeploymentStreamPrefixMessagesDeploymentsRequestRole = {
  User: "user",
} as const;
/**
 * The role of the messages author, in this case `user`.
 */
export type DeploymentStreamPrefixMessagesDeploymentsRequestRole = ClosedEnum<
  typeof DeploymentStreamPrefixMessagesDeploymentsRequestRole
>;

/**
 * The type of the content part. Always `file`.
 */
export const DeploymentStream2DeploymentsRequestRequestBodyType = {
  File: "file",
} as const;
/**
 * The type of the content part. Always `file`.
 */
export type DeploymentStream2DeploymentsRequestRequestBodyType = ClosedEnum<
  typeof DeploymentStream2DeploymentsRequestRequestBodyType
>;

export type DeploymentStream2File = {
  /**
   * The base64 encoded file data, used when passing the file to the model as a string.
   */
  fileData: string;
  /**
   * The name of the file, used when passing the file to the model as a string.
   */
  filename?: string | undefined;
};

export type DeploymentStream24 = {
  /**
   * The type of the content part. Always `file`.
   */
  type: DeploymentStream2DeploymentsRequestRequestBodyType;
  file: DeploymentStream2File;
};

export const DeploymentStream2DeploymentsRequestType = {
  InputAudio: "input_audio",
} as const;
export type DeploymentStream2DeploymentsRequestType = ClosedEnum<
  typeof DeploymentStream2DeploymentsRequestType
>;

/**
 * The format of the encoded audio data. Currently supports `wav` and `mp3`.
 */
export const DeploymentStream2Format = {
  Mp3: "mp3",
  Wav: "wav",
} as const;
/**
 * The format of the encoded audio data. Currently supports `wav` and `mp3`.
 */
export type DeploymentStream2Format = ClosedEnum<
  typeof DeploymentStream2Format
>;

export type DeploymentStream2InputAudio = {
  /**
   * Base64 encoded audio data.
   */
  data: string;
  /**
   * The format of the encoded audio data. Currently supports `wav` and `mp3`.
   */
  format: DeploymentStream2Format;
};

export type DeploymentStream23 = {
  type: DeploymentStream2DeploymentsRequestType;
  inputAudio: DeploymentStream2InputAudio;
};

export const DeploymentStream2DeploymentsType = {
  ImageUrl: "image_url",
} as const;
export type DeploymentStream2DeploymentsType = ClosedEnum<
  typeof DeploymentStream2DeploymentsType
>;

/**
 * Specifies the detail level of the image.
 */
export const DeploymentStream2Detail = {
  Low: "low",
  High: "high",
  Auto: "auto",
} as const;
/**
 * Specifies the detail level of the image.
 */
export type DeploymentStream2Detail = ClosedEnum<
  typeof DeploymentStream2Detail
>;

export type DeploymentStream2ImageUrl = {
  /**
   * Either a URL of the image or the base64 encoded image data.
   */
  url: string;
  /**
   * Specifies the detail level of the image.
   */
  detail?: DeploymentStream2Detail | undefined;
};

export type DeploymentStream22 = {
  type: DeploymentStream2DeploymentsType;
  imageUrl: DeploymentStream2ImageUrl;
};

export const DeploymentStream2Type = {
  Text: "text",
} as const;
export type DeploymentStream2Type = ClosedEnum<typeof DeploymentStream2Type>;

export type DeploymentStream21 = {
  type: DeploymentStream2Type;
  text: string;
};

export type DeploymentStreamContent2 =
  | DeploymentStream21
  | DeploymentStream22
  | DeploymentStream23
  | DeploymentStream24;

/**
 * The contents of the user message.
 */
export type DeploymentStreamPrefixMessagesContent =
  | string
  | Array<
    | DeploymentStream21
    | DeploymentStream22
    | DeploymentStream23
    | DeploymentStream24
  >;

export type PrefixMessagesUserMessage = {
  /**
   * The role of the messages author, in this case `user`.
   */
  role: DeploymentStreamPrefixMessagesDeploymentsRequestRole;
  /**
   * An optional name for the participant. Provides the model information to differentiate between participants of the same role.
   */
  name?: string | undefined;
  /**
   * The contents of the user message.
   */
  content:
    | string
    | Array<
      | DeploymentStream21
      | DeploymentStream22
      | DeploymentStream23
      | DeploymentStream24
    >;
};

/**
 * The role of the messages author, in this case `system`.
 */
export const DeploymentStreamPrefixMessagesDeploymentsRole = {
  System: "system",
} as const;
/**
 * The role of the messages author, in this case `system`.
 */
export type DeploymentStreamPrefixMessagesDeploymentsRole = ClosedEnum<
  typeof DeploymentStreamPrefixMessagesDeploymentsRole
>;

export type PrefixMessagesSystemMessage = {
  /**
   * The role of the messages author, in this case `system`.
   */
  role: DeploymentStreamPrefixMessagesDeploymentsRole;
  /**
   * The contents of the system message.
   */
  content: string;
  /**
   * An optional name for the participant. Provides the model information to differentiate between participants of the same role.
   */
  name?: string | undefined;
};

/**
 * The role of the messages author, in this case  `developer`.
 */
export const DeploymentStreamPrefixMessagesRole = {
  Developer: "developer",
} as const;
/**
 * The role of the messages author, in this case  `developer`.
 */
export type DeploymentStreamPrefixMessagesRole = ClosedEnum<
  typeof DeploymentStreamPrefixMessagesRole
>;

export type PrefixMessagesDeveloperMessage = {
  /**
   * The role of the messages author, in this case  `developer`.
   */
  role: DeploymentStreamPrefixMessagesRole;
  /**
   * The contents of the developer message.
   */
  content: string;
  /**
   * An optional name for the participant. Provides the model information to differentiate between participants of the same role.
   */
  name?: string | undefined;
};

export type DeploymentStreamPrefixMessages =
  | PrefixMessagesDeveloperMessage
  | PrefixMessagesSystemMessage
  | PrefixMessagesUserMessage
  | PrefixMessagesToolMessage
  | PrefixMessagesAssistantMessage;

/**
 * The role of the messages author, in this case tool.
 */
export const DeploymentStreamMessagesDeploymentsRequestRequestBody5Role = {
  Tool: "tool",
} as const;
/**
 * The role of the messages author, in this case tool.
 */
export type DeploymentStreamMessagesDeploymentsRequestRequestBody5Role =
  ClosedEnum<typeof DeploymentStreamMessagesDeploymentsRequestRequestBody5Role>;

/**
 * The contents of the tool message.
 */
export type DeploymentStreamMessagesDeploymentsRequestContent =
  | string
  | Array<string>;

export type DeploymentStreamMessagesToolMessage = {
  /**
   * The role of the messages author, in this case tool.
   */
  role: DeploymentStreamMessagesDeploymentsRequestRequestBody5Role;
  /**
   * The contents of the tool message.
   */
  content: string | Array<string>;
  /**
   * Tool call that this message is responding to.
   */
  toolCallId: string;
};

/**
 * The type of the content part.
 */
export const DeploymentStream2DeploymentsRequestRequestBodyMessages4ContentType =
  {
    Refusal: "refusal",
  } as const;
/**
 * The type of the content part.
 */
export type DeploymentStream2DeploymentsRequestRequestBodyMessages4ContentType =
  ClosedEnum<
    typeof DeploymentStream2DeploymentsRequestRequestBodyMessages4ContentType
  >;

export type DeploymentStream2DeploymentsRefusalContentPart = {
  /**
   * The type of the content part.
   */
  type: DeploymentStream2DeploymentsRequestRequestBodyMessages4ContentType;
  /**
   * The refusal message generated by the model.
   */
  refusal: string;
};

/**
 * The type of the content part.
 */
export const DeploymentStream2DeploymentsRequestRequestBodyMessages4Type = {
  Text: "text",
} as const;
/**
 * The type of the content part.
 */
export type DeploymentStream2DeploymentsRequestRequestBodyMessages4Type =
  ClosedEnum<
    typeof DeploymentStream2DeploymentsRequestRequestBodyMessages4Type
  >;

export type DeploymentStream2DeploymentsTextContentPart = {
  /**
   * The type of the content part.
   */
  type: DeploymentStream2DeploymentsRequestRequestBodyMessages4Type;
  /**
   * The text content.
   */
  text: string;
};

export type DeploymentStreamContentDeploymentsRequestRequestBody2 =
  | DeploymentStream2DeploymentsTextContentPart
  | DeploymentStream2DeploymentsRefusalContentPart;

/**
 * The contents of the assistant message. Required unless `tool_calls` or `function_call` is specified.
 */
export type DeploymentStreamMessagesDeploymentsContent =
  | string
  | Array<
    | DeploymentStream2DeploymentsTextContentPart
    | DeploymentStream2DeploymentsRefusalContentPart
  >;

/**
 * The role of the messages author, in this case `assistant`.
 */
export const DeploymentStreamMessagesDeploymentsRequestRequestBodyRole = {
  Assistant: "assistant",
} as const;
/**
 * The role of the messages author, in this case `assistant`.
 */
export type DeploymentStreamMessagesDeploymentsRequestRequestBodyRole =
  ClosedEnum<typeof DeploymentStreamMessagesDeploymentsRequestRequestBodyRole>;

/**
 * Data about a previous audio response from the model.
 */
export type DeploymentStreamMessagesAudio = {
  /**
   * Unique identifier for a previous audio response from the model.
   */
  id: string;
};

/**
 * The type of the tool. Currently, only `function` is supported.
 */
export const DeploymentStreamMessagesType = {
  Function: "function",
} as const;
/**
 * The type of the tool. Currently, only `function` is supported.
 */
export type DeploymentStreamMessagesType = ClosedEnum<
  typeof DeploymentStreamMessagesType
>;

export type DeploymentStreamMessagesFunction = {
  /**
   * The name of the function to call.
   */
  name?: string | undefined;
  /**
   * The arguments to call the function with, as generated by the model in JSON format. Note that the model does not always generate valid JSON, and may hallucinate parameters not defined by your function schema. Validate the arguments in your code before calling your function.
   */
  arguments?: string | undefined;
};

export type DeploymentStreamMessagesToolCalls = {
  /**
   * The ID of the tool call.
   */
  id: string;
  /**
   * The type of the tool. Currently, only `function` is supported.
   */
  type: DeploymentStreamMessagesType;
  function: DeploymentStreamMessagesFunction;
};

export type DeploymentStreamMessagesAssistantMessage = {
  /**
   * The contents of the assistant message. Required unless `tool_calls` or `function_call` is specified.
   */
  content?:
    | string
    | Array<
      | DeploymentStream2DeploymentsTextContentPart
      | DeploymentStream2DeploymentsRefusalContentPart
    >
    | null
    | undefined;
  /**
   * The refusal message by the assistant.
   */
  refusal?: string | null | undefined;
  /**
   * The role of the messages author, in this case `assistant`.
   */
  role: DeploymentStreamMessagesDeploymentsRequestRequestBodyRole;
  /**
   * An optional name for the participant. Provides the model information to differentiate between participants of the same role.
   */
  name?: string | undefined;
  /**
   * Data about a previous audio response from the model.
   */
  audio?: DeploymentStreamMessagesAudio | null | undefined;
  /**
   * The tool calls generated by the model, such as function calls.
   */
  toolCalls?: Array<DeploymentStreamMessagesToolCalls> | undefined;
  /**
   * Internal thought process of the model
   */
  reasoning?: string | undefined;
  /**
   * The signature holds a cryptographic token which verifies that the thinking block was generated by the model, and is verified when thinking is part of a multiturn conversation. This value should not be modified and should always be sent to the API when the reasoning is redacted. Currently only supported by `Anthropic`.
   */
  reasoningSignature?: string | undefined;
  /**
   * Occasionally the model's internal reasoning will be flagged by the safety systems of the provider. When this occurs, the provider will encrypt the reasoning. These redacted reasoning is decrypted when passed back to the API, allowing the model to continue its response without losing context.
   */
  redactedReasoning?: string | undefined;
};

/**
 * The role of the messages author, in this case `user`.
 */
export const DeploymentStreamMessagesDeploymentsRequestRole = {
  User: "user",
} as const;
/**
 * The role of the messages author, in this case `user`.
 */
export type DeploymentStreamMessagesDeploymentsRequestRole = ClosedEnum<
  typeof DeploymentStreamMessagesDeploymentsRequestRole
>;

/**
 * The type of the content part. Always `file`.
 */
export const DeploymentStream2DeploymentsRequestRequestBodyMessages3Content4Type =
  {
    File: "file",
  } as const;
/**
 * The type of the content part. Always `file`.
 */
export type DeploymentStream2DeploymentsRequestRequestBodyMessages3Content4Type =
  ClosedEnum<
    typeof DeploymentStream2DeploymentsRequestRequestBodyMessages3Content4Type
  >;

export type DeploymentStream2DeploymentsFile = {
  /**
   * The base64 encoded file data, used when passing the file to the model as a string.
   */
  fileData: string;
  /**
   * The name of the file, used when passing the file to the model as a string.
   */
  filename?: string | undefined;
};

export type DeploymentStream2Deployments4 = {
  /**
   * The type of the content part. Always `file`.
   */
  type: DeploymentStream2DeploymentsRequestRequestBodyMessages3Content4Type;
  file: DeploymentStream2DeploymentsFile;
};

export const DeploymentStream2DeploymentsRequestRequestBodyMessages3ContentType =
  {
    InputAudio: "input_audio",
  } as const;
export type DeploymentStream2DeploymentsRequestRequestBodyMessages3ContentType =
  ClosedEnum<
    typeof DeploymentStream2DeploymentsRequestRequestBodyMessages3ContentType
  >;

/**
 * The format of the encoded audio data. Currently supports `wav` and `mp3`.
 */
export const DeploymentStream2DeploymentsFormat = {
  Mp3: "mp3",
  Wav: "wav",
} as const;
/**
 * The format of the encoded audio data. Currently supports `wav` and `mp3`.
 */
export type DeploymentStream2DeploymentsFormat = ClosedEnum<
  typeof DeploymentStream2DeploymentsFormat
>;

export type DeploymentStream2DeploymentsInputAudio = {
  /**
   * Base64 encoded audio data.
   */
  data: string;
  /**
   * The format of the encoded audio data. Currently supports `wav` and `mp3`.
   */
  format: DeploymentStream2DeploymentsFormat;
};

export type DeploymentStream2Deployments3 = {
  type: DeploymentStream2DeploymentsRequestRequestBodyMessages3ContentType;
  inputAudio: DeploymentStream2DeploymentsInputAudio;
};

export const DeploymentStream2DeploymentsRequestRequestBodyMessages3Type = {
  ImageUrl: "image_url",
} as const;
export type DeploymentStream2DeploymentsRequestRequestBodyMessages3Type =
  ClosedEnum<
    typeof DeploymentStream2DeploymentsRequestRequestBodyMessages3Type
  >;

/**
 * Specifies the detail level of the image.
 */
export const DeploymentStream2DeploymentsDetail = {
  Low: "low",
  High: "high",
  Auto: "auto",
} as const;
/**
 * Specifies the detail level of the image.
 */
export type DeploymentStream2DeploymentsDetail = ClosedEnum<
  typeof DeploymentStream2DeploymentsDetail
>;

export type DeploymentStream2DeploymentsImageUrl = {
  /**
   * Either a URL of the image or the base64 encoded image data.
   */
  url: string;
  /**
   * Specifies the detail level of the image.
   */
  detail?: DeploymentStream2DeploymentsDetail | undefined;
};

export type DeploymentStream2Deployments2 = {
  type: DeploymentStream2DeploymentsRequestRequestBodyMessages3Type;
  imageUrl: DeploymentStream2DeploymentsImageUrl;
};

export const DeploymentStream2DeploymentsRequestRequestBodyMessagesType = {
  Text: "text",
} as const;
export type DeploymentStream2DeploymentsRequestRequestBodyMessagesType =
  ClosedEnum<typeof DeploymentStream2DeploymentsRequestRequestBodyMessagesType>;

export type DeploymentStream2Deployments1 = {
  type: DeploymentStream2DeploymentsRequestRequestBodyMessagesType;
  text: string;
};

export type DeploymentStreamContentDeploymentsRequest2 =
  | DeploymentStream2Deployments1
  | DeploymentStream2Deployments2
  | DeploymentStream2Deployments3
  | DeploymentStream2Deployments4;

/**
 * The contents of the user message.
 */
export type DeploymentStreamMessagesContent =
  | string
  | Array<
    | DeploymentStream2Deployments1
    | DeploymentStream2Deployments2
    | DeploymentStream2Deployments3
    | DeploymentStream2Deployments4
  >;

export type DeploymentStreamMessagesUserMessage = {
  /**
   * The role of the messages author, in this case `user`.
   */
  role: DeploymentStreamMessagesDeploymentsRequestRole;
  /**
   * An optional name for the participant. Provides the model information to differentiate between participants of the same role.
   */
  name?: string | undefined;
  /**
   * The contents of the user message.
   */
  content:
    | string
    | Array<
      | DeploymentStream2Deployments1
      | DeploymentStream2Deployments2
      | DeploymentStream2Deployments3
      | DeploymentStream2Deployments4
    >;
};

/**
 * The role of the messages author, in this case `system`.
 */
export const DeploymentStreamMessagesDeploymentsRole = {
  System: "system",
} as const;
/**
 * The role of the messages author, in this case `system`.
 */
export type DeploymentStreamMessagesDeploymentsRole = ClosedEnum<
  typeof DeploymentStreamMessagesDeploymentsRole
>;

export type DeploymentStreamMessagesSystemMessage = {
  /**
   * The role of the messages author, in this case `system`.
   */
  role: DeploymentStreamMessagesDeploymentsRole;
  /**
   * The contents of the system message.
   */
  content: string;
  /**
   * An optional name for the participant. Provides the model information to differentiate between participants of the same role.
   */
  name?: string | undefined;
};

/**
 * The role of the messages author, in this case  `developer`.
 */
export const DeploymentStreamMessagesRole = {
  Developer: "developer",
} as const;
/**
 * The role of the messages author, in this case  `developer`.
 */
export type DeploymentStreamMessagesRole = ClosedEnum<
  typeof DeploymentStreamMessagesRole
>;

export type DeploymentStreamMessagesDeveloperMessage = {
  /**
   * The role of the messages author, in this case  `developer`.
   */
  role: DeploymentStreamMessagesRole;
  /**
   * The contents of the developer message.
   */
  content: string;
  /**
   * An optional name for the participant. Provides the model information to differentiate between participants of the same role.
   */
  name?: string | undefined;
};

export type DeploymentStreamMessages =
  | DeploymentStreamMessagesDeveloperMessage
  | DeploymentStreamMessagesSystemMessage
  | DeploymentStreamMessagesUserMessage
  | DeploymentStreamMessagesToolMessage
  | DeploymentStreamMessagesAssistantMessage;

/**
 * Metadata about the document
 */
export type DeploymentStreamMetadata = {
  /**
   * Name of the file the text is from.
   */
  fileName?: string | undefined;
  /**
   * Content type of the file the text is from.
   */
  fileType?: string | undefined;
  /**
   * The page number the text is from.
   */
  pageNumber?: number | undefined;
};

export type DeploymentStreamDocuments = {
  /**
   * The text content of the document
   */
  text: string;
  /**
   * Metadata about the document
   */
  metadata?: DeploymentStreamMetadata | undefined;
};

export type DeploymentStreamInvokeOptions = {
  /**
   * Whether to include the retrieved knowledge chunks in the response.
   */
  includeRetrievals?: boolean | undefined;
  /**
   * A mock response to use instead of calling the LLM API. This is useful for testing purposes. When provided, the system will return a response object with this content as the completion, without making an actual API call to the LLM provider. This works for both streaming and non-streaming requests. Mock responses will not generate logs, traces or be counted for your plan usage.
   */
  mockResponse?: string | undefined;
};

export type DeploymentStreamThread = {
  /**
   * Unique thread identifier to group related invocations.
   */
  id: string;
  /**
   * Optional tags to differentiate or categorize threads
   */
  tags?: Array<string> | undefined;
};

/**
 * Exists
 */
export type DeploymentStreamDollarOrDollarExists = {
  dollarExists: boolean;
};

export type DeploymentStreamDollarOrDeploymentsDollarNin =
  | string
  | number
  | boolean;

/**
 * Not in
 */
export type DeploymentStreamDollarOrDollarNin = {
  dollarNin: Array<string | number | boolean>;
};

export type DeploymentStreamDollarOrDeploymentsDollarIn =
  | string
  | number
  | boolean;

/**
 * In
 */
export type DeploymentStreamDollarOrDollarIn = {
  dollarIn: Array<string | number | boolean>;
};

/**
 * Less than or equal to
 */
export type DeploymentStreamDollarOrDollarLte = {
  dollarLte: number;
};

/**
 * Less than
 */
export type DeploymentStreamDollarOrDollarLt = {
  dollarLt: number;
};

/**
 * Greater than or equal to
 */
export type DeploymentStreamDollarOrDollarGte = {
  dollarGte: number;
};

export type DeploymentStreamDollarOr3 = {
  dollarGt: number;
};

export type DeploymentStreamDollarOrDeploymentsDollarNe =
  | string
  | number
  | boolean;

/**
 * Not equal to
 */
export type DeploymentStreamDollarOrDollarNe = {
  dollarNe: string | number | boolean;
};

export type DeploymentStreamDollarOrDeploymentsDollarEq =
  | string
  | number
  | boolean;

/**
 * Equal to
 */
export type DeploymentStreamDollarOrDollarEq = {
  dollarEq: string | number | boolean;
};

export type DeploymentStreamKnowledgeFilterDeploymentsDollarOr =
  | DeploymentStreamDollarOrDollarEq
  | DeploymentStreamDollarOrDollarNe
  | DeploymentStreamDollarOr3
  | DeploymentStreamDollarOrDollarGte
  | DeploymentStreamDollarOrDollarLt
  | DeploymentStreamDollarOrDollarLte
  | DeploymentStreamDollarOrDollarIn
  | DeploymentStreamDollarOrDollarNin
  | DeploymentStreamDollarOrDollarExists;

/**
 * Or
 */
export type DeploymentStreamKnowledgeFilterDollarOr = {
  dollarOr: Array<
    {
      [k: string]:
        | DeploymentStreamDollarOrDollarEq
        | DeploymentStreamDollarOrDollarNe
        | DeploymentStreamDollarOr3
        | DeploymentStreamDollarOrDollarGte
        | DeploymentStreamDollarOrDollarLt
        | DeploymentStreamDollarOrDollarLte
        | DeploymentStreamDollarOrDollarIn
        | DeploymentStreamDollarOrDollarNin
        | DeploymentStreamDollarOrDollarExists;
    }
  >;
};

/**
 * Exists
 */
export type DeploymentStreamDollarAndDollarExists = {
  dollarExists: boolean;
};

export type DeploymentStreamDollarAndDeploymentsDollarNin =
  | string
  | number
  | boolean;

/**
 * Not in
 */
export type DeploymentStreamDollarAndDollarNin = {
  dollarNin: Array<string | number | boolean>;
};

export type DeploymentStreamDollarAndDeploymentsDollarIn =
  | string
  | number
  | boolean;

/**
 * In
 */
export type DeploymentStreamDollarAndDollarIn = {
  dollarIn: Array<string | number | boolean>;
};

/**
 * Less than or equal to
 */
export type DeploymentStreamDollarAndDollarLte = {
  dollarLte: number;
};

/**
 * Less than
 */
export type DeploymentStreamDollarAndDollarLt = {
  dollarLt: number;
};

/**
 * Greater than or equal to
 */
export type DeploymentStreamDollarAndDollarGte = {
  dollarGte: number;
};

export type DeploymentStreamDollarAnd3 = {
  dollarGt: number;
};

export type DeploymentStreamDollarAndDeploymentsDollarNe =
  | string
  | number
  | boolean;

/**
 * Not equal to
 */
export type DeploymentStreamDollarAndDollarNe = {
  dollarNe: string | number | boolean;
};

export type DeploymentStreamDollarAndDeploymentsDollarEq =
  | string
  | number
  | boolean;

/**
 * Equal to
 */
export type DeploymentStreamDollarAndDollarEq = {
  dollarEq: string | number | boolean;
};

export type DeploymentStreamKnowledgeFilterDeploymentsDollarAnd =
  | DeploymentStreamDollarAndDollarEq
  | DeploymentStreamDollarAndDollarNe
  | DeploymentStreamDollarAnd3
  | DeploymentStreamDollarAndDollarGte
  | DeploymentStreamDollarAndDollarLt
  | DeploymentStreamDollarAndDollarLte
  | DeploymentStreamDollarAndDollarIn
  | DeploymentStreamDollarAndDollarNin
  | DeploymentStreamDollarAndDollarExists;

/**
 * And
 */
export type DeploymentStreamKnowledgeFilterDollarAnd = {
  dollarAnd: Array<
    {
      [k: string]:
        | DeploymentStreamDollarAndDollarEq
        | DeploymentStreamDollarAndDollarNe
        | DeploymentStreamDollarAnd3
        | DeploymentStreamDollarAndDollarGte
        | DeploymentStreamDollarAndDollarLt
        | DeploymentStreamDollarAndDollarLte
        | DeploymentStreamDollarAndDollarIn
        | DeploymentStreamDollarAndDollarNin
        | DeploymentStreamDollarAndDollarExists;
    }
  >;
};

/**
 * Exists
 */
export type OneDollarExists = {
  dollarExists: boolean;
};

export type DeploymentStream1DeploymentsDollarNin = string | number | boolean;

/**
 * Not in
 */
export type DeploymentStream1DollarNin = {
  dollarNin: Array<string | number | boolean>;
};

export type DeploymentStream1DeploymentsDollarIn = string | number | boolean;

/**
 * In
 */
export type DeploymentStream1DollarIn = {
  dollarIn: Array<string | number | boolean>;
};

/**
 * Less than or equal to
 */
export type OneDollarLte = {
  dollarLte: number;
};

/**
 * Less than
 */
export type OneDollarLt = {
  dollarLt: number;
};

/**
 * Greater than or equal to
 */
export type OneDollarGte = {
  dollarGte: number;
};

export type DeploymentStream13 = {
  dollarGt: number;
};

export type DeploymentStream1DeploymentsDollarNe = string | number | boolean;

/**
 * Not equal to
 */
export type DeploymentStream1DollarNe = {
  dollarNe: string | number | boolean;
};

export type DeploymentStream1DeploymentsDollarEq = string | number | boolean;

/**
 * Equal to
 */
export type DeploymentStream1DollarEq = {
  dollarEq: string | number | boolean;
};

export type DeploymentStreamKnowledgeFilter1 =
  | DeploymentStream1DollarEq
  | DeploymentStream1DollarNe
  | DeploymentStream13
  | OneDollarGte
  | OneDollarLt
  | OneDollarLte
  | DeploymentStream1DollarIn
  | DeploymentStream1DollarNin
  | OneDollarExists;

/**
 * A filter to apply to the knowledge base chunk metadata when using  knowledge bases in the deployment.
 */
export type DeploymentStreamKnowledgeFilter =
  | DeploymentStreamKnowledgeFilterDollarAnd
  | DeploymentStreamKnowledgeFilterDollarOr
  | {
    [k: string]:
      | DeploymentStream1DollarEq
      | DeploymentStream1DollarNe
      | DeploymentStream13
      | OneDollarGte
      | OneDollarLt
      | OneDollarLte
      | DeploymentStream1DollarIn
      | DeploymentStream1DollarNin
      | OneDollarExists;
  };

export type DeploymentStreamRequestBody = {
  /**
   * The deployment key to invoke
   */
  key: string;
  /**
   * Key-value pairs variables to replace in your prompts. If a variable is not provided that is defined in the prompt, the default variables are used.
   */
  inputs?: { [k: string]: string | number | boolean } | undefined;
  /**
   * Key-value pairs that match your data model and fields declared in your deployment routing configuration
   */
  context?: { [k: string]: any } | undefined;
  /**
   * A list of messages to include after the `System` message, but before the  `User` and `Assistant` pairs configured in your deployment.
   */
  prefixMessages?:
    | Array<
      | PrefixMessagesDeveloperMessage
      | PrefixMessagesSystemMessage
      | PrefixMessagesUserMessage
      | PrefixMessagesToolMessage
      | PrefixMessagesAssistantMessage
    >
    | undefined;
  /**
   * A list of messages to send to the deployment.
   */
  messages?:
    | Array<
      | DeploymentStreamMessagesDeveloperMessage
      | DeploymentStreamMessagesSystemMessage
      | DeploymentStreamMessagesUserMessage
      | DeploymentStreamMessagesToolMessage
      | DeploymentStreamMessagesAssistantMessage
    >
    | undefined;
  /**
   * A list of file IDs that are associated with the deployment request.
   */
  fileIds?: Array<string> | undefined;
  /**
   * Key-value pairs that you want to attach to the log generated by this request.
   */
  metadata?: { [k: string]: any } | undefined;
  /**
   * Utilized for passing additional parameters to the model provider. Exercise caution when using this feature, as the included parameters will overwrite any parameters specified in the deployment prompt configuration.
   */
  extraParams?: { [k: string]: any } | undefined;
  /**
   * A list of relevant documents that evaluators and guardrails can cite to evaluate the user input or the model response based on your deployment settings.
   */
  documents?: Array<DeploymentStreamDocuments> | undefined;
  invokeOptions?: DeploymentStreamInvokeOptions | undefined;
  thread?: DeploymentStreamThread | undefined;
  /**
   * A filter to apply to the knowledge base chunk metadata when using  knowledge bases in the deployment.
   */
  knowledgeFilter?:
    | DeploymentStreamKnowledgeFilterDollarAnd
    | DeploymentStreamKnowledgeFilterDollarOr
    | {
      [k: string]:
        | DeploymentStream1DollarEq
        | DeploymentStream1DollarNe
        | DeploymentStream13
        | OneDollarGte
        | OneDollarLt
        | OneDollarLte
        | DeploymentStream1DollarIn
        | DeploymentStream1DollarNin
        | OneDollarExists;
    }
    | undefined;
};

/**
 * Indicates the type of model used to generate the response
 */
export const DeploymentStreamObject = {
  Chat: "chat",
  Completion: "completion",
  Image: "image",
  Vision: "vision",
} as const;
/**
 * Indicates the type of model used to generate the response
 */
export type DeploymentStreamObject = ClosedEnum<typeof DeploymentStreamObject>;

/**
 * The provider used to generate the response
 */
export const DeploymentStreamProvider = {
  Cohere: "cohere",
  Openai: "openai",
  Anthropic: "anthropic",
  Huggingface: "huggingface",
  Replicate: "replicate",
  Google: "google",
  GoogleAi: "google-ai",
  Azure: "azure",
  Aws: "aws",
  Anyscale: "anyscale",
  Perplexity: "perplexity",
  Groq: "groq",
  Fal: "fal",
  Leonardoai: "leonardoai",
  Nvidia: "nvidia",
  Jina: "jina",
  Togetherai: "togetherai",
  Elevenlabs: "elevenlabs",
} as const;
/**
 * The provider used to generate the response
 */
export type DeploymentStreamProvider = ClosedEnum<
  typeof DeploymentStreamProvider
>;

/**
 * The role of the prompt message
 */
export const DeploymentStreamMessageDeploymentsResponseRole = {
  System: "system",
  Assistant: "assistant",
  User: "user",
  Exception: "exception",
  Tool: "tool",
  Prompt: "prompt",
  Correction: "correction",
  ExpectedOutput: "expected_output",
} as const;
/**
 * The role of the prompt message
 */
export type DeploymentStreamMessageDeploymentsResponseRole = ClosedEnum<
  typeof DeploymentStreamMessageDeploymentsResponseRole
>;

export type DeploymentStreamMessage3 = {
  /**
   * The role of the prompt message
   */
  role: DeploymentStreamMessageDeploymentsResponseRole;
  url: string;
};

/**
 * The role of the prompt message
 */
export const DeploymentStreamMessageDeploymentsRole = {
  System: "system",
  Assistant: "assistant",
  User: "user",
  Exception: "exception",
  Tool: "tool",
  Prompt: "prompt",
  Correction: "correction",
  ExpectedOutput: "expected_output",
} as const;
/**
 * The role of the prompt message
 */
export type DeploymentStreamMessageDeploymentsRole = ClosedEnum<
  typeof DeploymentStreamMessageDeploymentsRole
>;

export type DeploymentStreamMessage2 = {
  /**
   * The role of the prompt message
   */
  role: DeploymentStreamMessageDeploymentsRole;
  content: string | null;
};

/**
 * The role of the prompt message
 */
export const DeploymentStreamMessageRole = {
  System: "system",
  Assistant: "assistant",
  User: "user",
  Exception: "exception",
  Tool: "tool",
  Prompt: "prompt",
  Correction: "correction",
  ExpectedOutput: "expected_output",
} as const;
/**
 * The role of the prompt message
 */
export type DeploymentStreamMessageRole = ClosedEnum<
  typeof DeploymentStreamMessageRole
>;

export const DeploymentStreamMessageType = {
  Function: "function",
} as const;
export type DeploymentStreamMessageType = ClosedEnum<
  typeof DeploymentStreamMessageType
>;

export type DeploymentStreamMessageFunction = {
  name: string;
  /**
   * JSON string arguments for the functions
   */
  arguments: string;
};

export type DeploymentStreamMessageToolCalls = {
  id?: string | undefined;
  index?: number | undefined;
  type: DeploymentStreamMessageType;
  function: DeploymentStreamMessageFunction;
};

export type DeploymentStreamMessage1 = {
  /**
   * The role of the prompt message
   */
  role: DeploymentStreamMessageRole;
  content?: string | null | undefined;
  toolCalls: Array<DeploymentStreamMessageToolCalls>;
};

export type DeploymentStreamMessage =
  | DeploymentStreamMessage2
  | DeploymentStreamMessage3
  | DeploymentStreamMessage1;

export type DeploymentStreamChoices = {
  index: number;
  message?:
    | DeploymentStreamMessage2
    | DeploymentStreamMessage3
    | DeploymentStreamMessage1
    | undefined;
  finishReason?: string | null | undefined;
};

/**
 * Metadata of the retrieved chunk from the knowledge base
 */
export type DeploymentStreamDeploymentsMetadata = {
  /**
   * Name of the file
   */
  fileName: string;
  /**
   * Page number of the chunk
   */
  pageNumber: number | null;
  /**
   * Type of the file
   */
  fileType: string;
  /**
   * Rerank scores are normalized to be in the range [0, 1]. Scores close to 1 indicate a high relevance to the query, and scores closer to 0 indicate low relevance. It is not accurate to assume a score of 0.9 means the document is 2x more relevant than a document with a score of 0.45
   */
  rerankScore?: number | undefined;
  /**
   * Search scores are normalized to be in the range [0, 1]. Search score is calculated based on `[Cosine Similarity](https://en.wikipedia.org/wiki/Cosine_similarity)` algorithm. Scores close to 1 indicate the document is closer to the query, and scores closer to 0 indicate the document is farther from the query.
   */
  searchScore: number;
};

export type DeploymentStreamRetrievals = {
  /**
   * Content of the retrieved chunk from the knowledge base
   */
  document: string;
  /**
   * Metadata of the retrieved chunk from the knowledge base
   */
  metadata: DeploymentStreamDeploymentsMetadata;
};

export type DeploymentStreamData = {
  /**
   * A unique identifier for the response. Can be used to add metrics to the transaction.
   */
  id?: string | undefined;
  /**
   * A timestamp indicating when the object was created. Usually in a standardized format like ISO 8601
   */
  created?: Date | undefined;
  /**
   * Indicates the type of model used to generate the response
   */
  object?: DeploymentStreamObject | undefined;
  /**
   * The model used to generate the response
   */
  model?: string | undefined;
  /**
   * The provider used to generate the response
   */
  provider?: DeploymentStreamProvider | undefined;
  /**
   * Indicates if the response is the final response
   */
  isFinal?: boolean | undefined;
  /**
   * Indicates integration id used to generate the response
   */
  integrationId?: string | undefined;
  /**
   * A timestamp indicating when the object was finalized. Usually in a standardized format like ISO 8601
   */
  finalized?: Date | undefined;
  /**
   * Provider backed system fingerprint.
   */
  systemFingerprint?: string | null | undefined;
  /**
   * A list of choices generated by the model
   */
  choices?: Array<DeploymentStreamChoices> | undefined;
  /**
   * List of documents retrieved from the knowledge base. This property is only available when the `include_retrievals` flag is set to `true` in the invoke settings. When stream is set to true, the `retrievals` property will be returned in the last streamed chunk where the property `is_final` is set to `true`.
   */
  retrievals?: Array<DeploymentStreamRetrievals> | undefined;
  /**
   * Response returned by the model provider. This functionality is only supported when streaming is not used. If streaming is used, the `provider_response` property will be set to `null`.
   */
  providerResponse?: any | undefined;
};

/**
 * Successful operation
 */
export type DeploymentStreamResponseBody = {
  data?: DeploymentStreamData | undefined;
};

/** @internal */
export const DeploymentStreamGlobals$inboundSchema: z.ZodType<
  DeploymentStreamGlobals,
  z.ZodTypeDef,
  unknown
> = z.object({
  environment: z.string().optional(),
  contactId: z.string().optional(),
});

/** @internal */
export type DeploymentStreamGlobals$Outbound = {
  environment?: string | undefined;
  contactId?: string | undefined;
};

/** @internal */
export const DeploymentStreamGlobals$outboundSchema: z.ZodType<
  DeploymentStreamGlobals$Outbound,
  z.ZodTypeDef,
  DeploymentStreamGlobals
> = z.object({
  environment: z.string().optional(),
  contactId: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeploymentStreamGlobals$ {
  /** @deprecated use `DeploymentStreamGlobals$inboundSchema` instead. */
  export const inboundSchema = DeploymentStreamGlobals$inboundSchema;
  /** @deprecated use `DeploymentStreamGlobals$outboundSchema` instead. */
  export const outboundSchema = DeploymentStreamGlobals$outboundSchema;
  /** @deprecated use `DeploymentStreamGlobals$Outbound` instead. */
  export type Outbound = DeploymentStreamGlobals$Outbound;
}

export function deploymentStreamGlobalsToJSON(
  deploymentStreamGlobals: DeploymentStreamGlobals,
): string {
  return JSON.stringify(
    DeploymentStreamGlobals$outboundSchema.parse(deploymentStreamGlobals),
  );
}

export function deploymentStreamGlobalsFromJSON(
  jsonString: string,
): SafeParseResult<DeploymentStreamGlobals, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DeploymentStreamGlobals$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DeploymentStreamGlobals' from JSON`,
  );
}

/** @internal */
export const DeploymentStreamInputs$inboundSchema: z.ZodType<
  DeploymentStreamInputs,
  z.ZodTypeDef,
  unknown
> = z.union([z.string(), z.number(), z.boolean()]);

/** @internal */
export type DeploymentStreamInputs$Outbound = string | number | boolean;

/** @internal */
export const DeploymentStreamInputs$outboundSchema: z.ZodType<
  DeploymentStreamInputs$Outbound,
  z.ZodTypeDef,
  DeploymentStreamInputs
> = z.union([z.string(), z.number(), z.boolean()]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeploymentStreamInputs$ {
  /** @deprecated use `DeploymentStreamInputs$inboundSchema` instead. */
  export const inboundSchema = DeploymentStreamInputs$inboundSchema;
  /** @deprecated use `DeploymentStreamInputs$outboundSchema` instead. */
  export const outboundSchema = DeploymentStreamInputs$outboundSchema;
  /** @deprecated use `DeploymentStreamInputs$Outbound` instead. */
  export type Outbound = DeploymentStreamInputs$Outbound;
}

export function deploymentStreamInputsToJSON(
  deploymentStreamInputs: DeploymentStreamInputs,
): string {
  return JSON.stringify(
    DeploymentStreamInputs$outboundSchema.parse(deploymentStreamInputs),
  );
}

export function deploymentStreamInputsFromJSON(
  jsonString: string,
): SafeParseResult<DeploymentStreamInputs, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DeploymentStreamInputs$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DeploymentStreamInputs' from JSON`,
  );
}

/** @internal */
export const DeploymentStreamPrefixMessagesDeploymentsRequestRequestBody5Role$inboundSchema:
  z.ZodNativeEnum<
    typeof DeploymentStreamPrefixMessagesDeploymentsRequestRequestBody5Role
  > = z.nativeEnum(
    DeploymentStreamPrefixMessagesDeploymentsRequestRequestBody5Role,
  );

/** @internal */
export const DeploymentStreamPrefixMessagesDeploymentsRequestRequestBody5Role$outboundSchema:
  z.ZodNativeEnum<
    typeof DeploymentStreamPrefixMessagesDeploymentsRequestRequestBody5Role
  > =
    DeploymentStreamPrefixMessagesDeploymentsRequestRequestBody5Role$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeploymentStreamPrefixMessagesDeploymentsRequestRequestBody5Role$ {
  /** @deprecated use `DeploymentStreamPrefixMessagesDeploymentsRequestRequestBody5Role$inboundSchema` instead. */
  export const inboundSchema =
    DeploymentStreamPrefixMessagesDeploymentsRequestRequestBody5Role$inboundSchema;
  /** @deprecated use `DeploymentStreamPrefixMessagesDeploymentsRequestRequestBody5Role$outboundSchema` instead. */
  export const outboundSchema =
    DeploymentStreamPrefixMessagesDeploymentsRequestRequestBody5Role$outboundSchema;
}

/** @internal */
export const DeploymentStreamPrefixMessagesDeploymentsRequestContent$inboundSchema:
  z.ZodType<
    DeploymentStreamPrefixMessagesDeploymentsRequestContent,
    z.ZodTypeDef,
    unknown
  > = z.union([z.string(), z.array(z.string())]);

/** @internal */
export type DeploymentStreamPrefixMessagesDeploymentsRequestContent$Outbound =
  | string
  | Array<string>;

/** @internal */
export const DeploymentStreamPrefixMessagesDeploymentsRequestContent$outboundSchema:
  z.ZodType<
    DeploymentStreamPrefixMessagesDeploymentsRequestContent$Outbound,
    z.ZodTypeDef,
    DeploymentStreamPrefixMessagesDeploymentsRequestContent
  > = z.union([z.string(), z.array(z.string())]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeploymentStreamPrefixMessagesDeploymentsRequestContent$ {
  /** @deprecated use `DeploymentStreamPrefixMessagesDeploymentsRequestContent$inboundSchema` instead. */
  export const inboundSchema =
    DeploymentStreamPrefixMessagesDeploymentsRequestContent$inboundSchema;
  /** @deprecated use `DeploymentStreamPrefixMessagesDeploymentsRequestContent$outboundSchema` instead. */
  export const outboundSchema =
    DeploymentStreamPrefixMessagesDeploymentsRequestContent$outboundSchema;
  /** @deprecated use `DeploymentStreamPrefixMessagesDeploymentsRequestContent$Outbound` instead. */
  export type Outbound =
    DeploymentStreamPrefixMessagesDeploymentsRequestContent$Outbound;
}

export function deploymentStreamPrefixMessagesDeploymentsRequestContentToJSON(
  deploymentStreamPrefixMessagesDeploymentsRequestContent:
    DeploymentStreamPrefixMessagesDeploymentsRequestContent,
): string {
  return JSON.stringify(
    DeploymentStreamPrefixMessagesDeploymentsRequestContent$outboundSchema
      .parse(deploymentStreamPrefixMessagesDeploymentsRequestContent),
  );
}

export function deploymentStreamPrefixMessagesDeploymentsRequestContentFromJSON(
  jsonString: string,
): SafeParseResult<
  DeploymentStreamPrefixMessagesDeploymentsRequestContent,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      DeploymentStreamPrefixMessagesDeploymentsRequestContent$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'DeploymentStreamPrefixMessagesDeploymentsRequestContent' from JSON`,
  );
}

/** @internal */
export const PrefixMessagesToolMessage$inboundSchema: z.ZodType<
  PrefixMessagesToolMessage,
  z.ZodTypeDef,
  unknown
> = z.object({
  role:
    DeploymentStreamPrefixMessagesDeploymentsRequestRequestBody5Role$inboundSchema,
  content: z.union([z.string(), z.array(z.string())]),
  tool_call_id: z.string(),
}).transform((v) => {
  return remap$(v, {
    "tool_call_id": "toolCallId",
  });
});

/** @internal */
export type PrefixMessagesToolMessage$Outbound = {
  role: string;
  content: string | Array<string>;
  tool_call_id: string;
};

/** @internal */
export const PrefixMessagesToolMessage$outboundSchema: z.ZodType<
  PrefixMessagesToolMessage$Outbound,
  z.ZodTypeDef,
  PrefixMessagesToolMessage
> = z.object({
  role:
    DeploymentStreamPrefixMessagesDeploymentsRequestRequestBody5Role$outboundSchema,
  content: z.union([z.string(), z.array(z.string())]),
  toolCallId: z.string(),
}).transform((v) => {
  return remap$(v, {
    toolCallId: "tool_call_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PrefixMessagesToolMessage$ {
  /** @deprecated use `PrefixMessagesToolMessage$inboundSchema` instead. */
  export const inboundSchema = PrefixMessagesToolMessage$inboundSchema;
  /** @deprecated use `PrefixMessagesToolMessage$outboundSchema` instead. */
  export const outboundSchema = PrefixMessagesToolMessage$outboundSchema;
  /** @deprecated use `PrefixMessagesToolMessage$Outbound` instead. */
  export type Outbound = PrefixMessagesToolMessage$Outbound;
}

export function prefixMessagesToolMessageToJSON(
  prefixMessagesToolMessage: PrefixMessagesToolMessage,
): string {
  return JSON.stringify(
    PrefixMessagesToolMessage$outboundSchema.parse(prefixMessagesToolMessage),
  );
}

export function prefixMessagesToolMessageFromJSON(
  jsonString: string,
): SafeParseResult<PrefixMessagesToolMessage, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PrefixMessagesToolMessage$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PrefixMessagesToolMessage' from JSON`,
  );
}

/** @internal */
export const DeploymentStream2DeploymentsRequestRequestBodyPrefixMessages4Type$inboundSchema:
  z.ZodNativeEnum<
    typeof DeploymentStream2DeploymentsRequestRequestBodyPrefixMessages4Type
  > = z.nativeEnum(
    DeploymentStream2DeploymentsRequestRequestBodyPrefixMessages4Type,
  );

/** @internal */
export const DeploymentStream2DeploymentsRequestRequestBodyPrefixMessages4Type$outboundSchema:
  z.ZodNativeEnum<
    typeof DeploymentStream2DeploymentsRequestRequestBodyPrefixMessages4Type
  > =
    DeploymentStream2DeploymentsRequestRequestBodyPrefixMessages4Type$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeploymentStream2DeploymentsRequestRequestBodyPrefixMessages4Type$ {
  /** @deprecated use `DeploymentStream2DeploymentsRequestRequestBodyPrefixMessages4Type$inboundSchema` instead. */
  export const inboundSchema =
    DeploymentStream2DeploymentsRequestRequestBodyPrefixMessages4Type$inboundSchema;
  /** @deprecated use `DeploymentStream2DeploymentsRequestRequestBodyPrefixMessages4Type$outboundSchema` instead. */
  export const outboundSchema =
    DeploymentStream2DeploymentsRequestRequestBodyPrefixMessages4Type$outboundSchema;
}

/** @internal */
export const DeploymentStream2RefusalContentPart$inboundSchema: z.ZodType<
  DeploymentStream2RefusalContentPart,
  z.ZodTypeDef,
  unknown
> = z.object({
  type:
    DeploymentStream2DeploymentsRequestRequestBodyPrefixMessages4Type$inboundSchema,
  refusal: z.string(),
});

/** @internal */
export type DeploymentStream2RefusalContentPart$Outbound = {
  type: string;
  refusal: string;
};

/** @internal */
export const DeploymentStream2RefusalContentPart$outboundSchema: z.ZodType<
  DeploymentStream2RefusalContentPart$Outbound,
  z.ZodTypeDef,
  DeploymentStream2RefusalContentPart
> = z.object({
  type:
    DeploymentStream2DeploymentsRequestRequestBodyPrefixMessages4Type$outboundSchema,
  refusal: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeploymentStream2RefusalContentPart$ {
  /** @deprecated use `DeploymentStream2RefusalContentPart$inboundSchema` instead. */
  export const inboundSchema =
    DeploymentStream2RefusalContentPart$inboundSchema;
  /** @deprecated use `DeploymentStream2RefusalContentPart$outboundSchema` instead. */
  export const outboundSchema =
    DeploymentStream2RefusalContentPart$outboundSchema;
  /** @deprecated use `DeploymentStream2RefusalContentPart$Outbound` instead. */
  export type Outbound = DeploymentStream2RefusalContentPart$Outbound;
}

export function deploymentStream2RefusalContentPartToJSON(
  deploymentStream2RefusalContentPart: DeploymentStream2RefusalContentPart,
): string {
  return JSON.stringify(
    DeploymentStream2RefusalContentPart$outboundSchema.parse(
      deploymentStream2RefusalContentPart,
    ),
  );
}

export function deploymentStream2RefusalContentPartFromJSON(
  jsonString: string,
): SafeParseResult<DeploymentStream2RefusalContentPart, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      DeploymentStream2RefusalContentPart$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DeploymentStream2RefusalContentPart' from JSON`,
  );
}

/** @internal */
export const DeploymentStream2DeploymentsRequestRequestBodyPrefixMessagesType$inboundSchema:
  z.ZodNativeEnum<
    typeof DeploymentStream2DeploymentsRequestRequestBodyPrefixMessagesType
  > = z.nativeEnum(
    DeploymentStream2DeploymentsRequestRequestBodyPrefixMessagesType,
  );

/** @internal */
export const DeploymentStream2DeploymentsRequestRequestBodyPrefixMessagesType$outboundSchema:
  z.ZodNativeEnum<
    typeof DeploymentStream2DeploymentsRequestRequestBodyPrefixMessagesType
  > =
    DeploymentStream2DeploymentsRequestRequestBodyPrefixMessagesType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeploymentStream2DeploymentsRequestRequestBodyPrefixMessagesType$ {
  /** @deprecated use `DeploymentStream2DeploymentsRequestRequestBodyPrefixMessagesType$inboundSchema` instead. */
  export const inboundSchema =
    DeploymentStream2DeploymentsRequestRequestBodyPrefixMessagesType$inboundSchema;
  /** @deprecated use `DeploymentStream2DeploymentsRequestRequestBodyPrefixMessagesType$outboundSchema` instead. */
  export const outboundSchema =
    DeploymentStream2DeploymentsRequestRequestBodyPrefixMessagesType$outboundSchema;
}

/** @internal */
export const DeploymentStream2TextContentPart$inboundSchema: z.ZodType<
  DeploymentStream2TextContentPart,
  z.ZodTypeDef,
  unknown
> = z.object({
  type:
    DeploymentStream2DeploymentsRequestRequestBodyPrefixMessagesType$inboundSchema,
  text: z.string(),
});

/** @internal */
export type DeploymentStream2TextContentPart$Outbound = {
  type: string;
  text: string;
};

/** @internal */
export const DeploymentStream2TextContentPart$outboundSchema: z.ZodType<
  DeploymentStream2TextContentPart$Outbound,
  z.ZodTypeDef,
  DeploymentStream2TextContentPart
> = z.object({
  type:
    DeploymentStream2DeploymentsRequestRequestBodyPrefixMessagesType$outboundSchema,
  text: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeploymentStream2TextContentPart$ {
  /** @deprecated use `DeploymentStream2TextContentPart$inboundSchema` instead. */
  export const inboundSchema = DeploymentStream2TextContentPart$inboundSchema;
  /** @deprecated use `DeploymentStream2TextContentPart$outboundSchema` instead. */
  export const outboundSchema = DeploymentStream2TextContentPart$outboundSchema;
  /** @deprecated use `DeploymentStream2TextContentPart$Outbound` instead. */
  export type Outbound = DeploymentStream2TextContentPart$Outbound;
}

export function deploymentStream2TextContentPartToJSON(
  deploymentStream2TextContentPart: DeploymentStream2TextContentPart,
): string {
  return JSON.stringify(
    DeploymentStream2TextContentPart$outboundSchema.parse(
      deploymentStream2TextContentPart,
    ),
  );
}

export function deploymentStream2TextContentPartFromJSON(
  jsonString: string,
): SafeParseResult<DeploymentStream2TextContentPart, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DeploymentStream2TextContentPart$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DeploymentStream2TextContentPart' from JSON`,
  );
}

/** @internal */
export const DeploymentStreamContentDeployments2$inboundSchema: z.ZodType<
  DeploymentStreamContentDeployments2,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => DeploymentStream2TextContentPart$inboundSchema),
  z.lazy(() => DeploymentStream2RefusalContentPart$inboundSchema),
]);

/** @internal */
export type DeploymentStreamContentDeployments2$Outbound =
  | DeploymentStream2TextContentPart$Outbound
  | DeploymentStream2RefusalContentPart$Outbound;

/** @internal */
export const DeploymentStreamContentDeployments2$outboundSchema: z.ZodType<
  DeploymentStreamContentDeployments2$Outbound,
  z.ZodTypeDef,
  DeploymentStreamContentDeployments2
> = z.union([
  z.lazy(() => DeploymentStream2TextContentPart$outboundSchema),
  z.lazy(() => DeploymentStream2RefusalContentPart$outboundSchema),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeploymentStreamContentDeployments2$ {
  /** @deprecated use `DeploymentStreamContentDeployments2$inboundSchema` instead. */
  export const inboundSchema =
    DeploymentStreamContentDeployments2$inboundSchema;
  /** @deprecated use `DeploymentStreamContentDeployments2$outboundSchema` instead. */
  export const outboundSchema =
    DeploymentStreamContentDeployments2$outboundSchema;
  /** @deprecated use `DeploymentStreamContentDeployments2$Outbound` instead. */
  export type Outbound = DeploymentStreamContentDeployments2$Outbound;
}

export function deploymentStreamContentDeployments2ToJSON(
  deploymentStreamContentDeployments2: DeploymentStreamContentDeployments2,
): string {
  return JSON.stringify(
    DeploymentStreamContentDeployments2$outboundSchema.parse(
      deploymentStreamContentDeployments2,
    ),
  );
}

export function deploymentStreamContentDeployments2FromJSON(
  jsonString: string,
): SafeParseResult<DeploymentStreamContentDeployments2, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      DeploymentStreamContentDeployments2$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DeploymentStreamContentDeployments2' from JSON`,
  );
}

/** @internal */
export const DeploymentStreamPrefixMessagesDeploymentsContent$inboundSchema:
  z.ZodType<
    DeploymentStreamPrefixMessagesDeploymentsContent,
    z.ZodTypeDef,
    unknown
  > = z.union([
    z.string(),
    z.array(z.union([
      z.lazy(() => DeploymentStream2TextContentPart$inboundSchema),
      z.lazy(() => DeploymentStream2RefusalContentPart$inboundSchema),
    ])),
  ]);

/** @internal */
export type DeploymentStreamPrefixMessagesDeploymentsContent$Outbound =
  | string
  | Array<
    | DeploymentStream2TextContentPart$Outbound
    | DeploymentStream2RefusalContentPart$Outbound
  >;

/** @internal */
export const DeploymentStreamPrefixMessagesDeploymentsContent$outboundSchema:
  z.ZodType<
    DeploymentStreamPrefixMessagesDeploymentsContent$Outbound,
    z.ZodTypeDef,
    DeploymentStreamPrefixMessagesDeploymentsContent
  > = z.union([
    z.string(),
    z.array(z.union([
      z.lazy(() => DeploymentStream2TextContentPart$outboundSchema),
      z.lazy(() => DeploymentStream2RefusalContentPart$outboundSchema),
    ])),
  ]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeploymentStreamPrefixMessagesDeploymentsContent$ {
  /** @deprecated use `DeploymentStreamPrefixMessagesDeploymentsContent$inboundSchema` instead. */
  export const inboundSchema =
    DeploymentStreamPrefixMessagesDeploymentsContent$inboundSchema;
  /** @deprecated use `DeploymentStreamPrefixMessagesDeploymentsContent$outboundSchema` instead. */
  export const outboundSchema =
    DeploymentStreamPrefixMessagesDeploymentsContent$outboundSchema;
  /** @deprecated use `DeploymentStreamPrefixMessagesDeploymentsContent$Outbound` instead. */
  export type Outbound =
    DeploymentStreamPrefixMessagesDeploymentsContent$Outbound;
}

export function deploymentStreamPrefixMessagesDeploymentsContentToJSON(
  deploymentStreamPrefixMessagesDeploymentsContent:
    DeploymentStreamPrefixMessagesDeploymentsContent,
): string {
  return JSON.stringify(
    DeploymentStreamPrefixMessagesDeploymentsContent$outboundSchema.parse(
      deploymentStreamPrefixMessagesDeploymentsContent,
    ),
  );
}

export function deploymentStreamPrefixMessagesDeploymentsContentFromJSON(
  jsonString: string,
): SafeParseResult<
  DeploymentStreamPrefixMessagesDeploymentsContent,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      DeploymentStreamPrefixMessagesDeploymentsContent$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'DeploymentStreamPrefixMessagesDeploymentsContent' from JSON`,
  );
}

/** @internal */
export const DeploymentStreamPrefixMessagesDeploymentsRequestRequestBodyRole$inboundSchema:
  z.ZodNativeEnum<
    typeof DeploymentStreamPrefixMessagesDeploymentsRequestRequestBodyRole
  > = z.nativeEnum(
    DeploymentStreamPrefixMessagesDeploymentsRequestRequestBodyRole,
  );

/** @internal */
export const DeploymentStreamPrefixMessagesDeploymentsRequestRequestBodyRole$outboundSchema:
  z.ZodNativeEnum<
    typeof DeploymentStreamPrefixMessagesDeploymentsRequestRequestBodyRole
  > =
    DeploymentStreamPrefixMessagesDeploymentsRequestRequestBodyRole$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeploymentStreamPrefixMessagesDeploymentsRequestRequestBodyRole$ {
  /** @deprecated use `DeploymentStreamPrefixMessagesDeploymentsRequestRequestBodyRole$inboundSchema` instead. */
  export const inboundSchema =
    DeploymentStreamPrefixMessagesDeploymentsRequestRequestBodyRole$inboundSchema;
  /** @deprecated use `DeploymentStreamPrefixMessagesDeploymentsRequestRequestBodyRole$outboundSchema` instead. */
  export const outboundSchema =
    DeploymentStreamPrefixMessagesDeploymentsRequestRequestBodyRole$outboundSchema;
}

/** @internal */
export const PrefixMessagesAudio$inboundSchema: z.ZodType<
  PrefixMessagesAudio,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
});

/** @internal */
export type PrefixMessagesAudio$Outbound = {
  id: string;
};

/** @internal */
export const PrefixMessagesAudio$outboundSchema: z.ZodType<
  PrefixMessagesAudio$Outbound,
  z.ZodTypeDef,
  PrefixMessagesAudio
> = z.object({
  id: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PrefixMessagesAudio$ {
  /** @deprecated use `PrefixMessagesAudio$inboundSchema` instead. */
  export const inboundSchema = PrefixMessagesAudio$inboundSchema;
  /** @deprecated use `PrefixMessagesAudio$outboundSchema` instead. */
  export const outboundSchema = PrefixMessagesAudio$outboundSchema;
  /** @deprecated use `PrefixMessagesAudio$Outbound` instead. */
  export type Outbound = PrefixMessagesAudio$Outbound;
}

export function prefixMessagesAudioToJSON(
  prefixMessagesAudio: PrefixMessagesAudio,
): string {
  return JSON.stringify(
    PrefixMessagesAudio$outboundSchema.parse(prefixMessagesAudio),
  );
}

export function prefixMessagesAudioFromJSON(
  jsonString: string,
): SafeParseResult<PrefixMessagesAudio, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PrefixMessagesAudio$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PrefixMessagesAudio' from JSON`,
  );
}

/** @internal */
export const DeploymentStreamPrefixMessagesType$inboundSchema: z.ZodNativeEnum<
  typeof DeploymentStreamPrefixMessagesType
> = z.nativeEnum(DeploymentStreamPrefixMessagesType);

/** @internal */
export const DeploymentStreamPrefixMessagesType$outboundSchema: z.ZodNativeEnum<
  typeof DeploymentStreamPrefixMessagesType
> = DeploymentStreamPrefixMessagesType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeploymentStreamPrefixMessagesType$ {
  /** @deprecated use `DeploymentStreamPrefixMessagesType$inboundSchema` instead. */
  export const inboundSchema = DeploymentStreamPrefixMessagesType$inboundSchema;
  /** @deprecated use `DeploymentStreamPrefixMessagesType$outboundSchema` instead. */
  export const outboundSchema =
    DeploymentStreamPrefixMessagesType$outboundSchema;
}

/** @internal */
export const PrefixMessagesFunction$inboundSchema: z.ZodType<
  PrefixMessagesFunction,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.string().optional(),
  arguments: z.string().optional(),
});

/** @internal */
export type PrefixMessagesFunction$Outbound = {
  name?: string | undefined;
  arguments?: string | undefined;
};

/** @internal */
export const PrefixMessagesFunction$outboundSchema: z.ZodType<
  PrefixMessagesFunction$Outbound,
  z.ZodTypeDef,
  PrefixMessagesFunction
> = z.object({
  name: z.string().optional(),
  arguments: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PrefixMessagesFunction$ {
  /** @deprecated use `PrefixMessagesFunction$inboundSchema` instead. */
  export const inboundSchema = PrefixMessagesFunction$inboundSchema;
  /** @deprecated use `PrefixMessagesFunction$outboundSchema` instead. */
  export const outboundSchema = PrefixMessagesFunction$outboundSchema;
  /** @deprecated use `PrefixMessagesFunction$Outbound` instead. */
  export type Outbound = PrefixMessagesFunction$Outbound;
}

export function prefixMessagesFunctionToJSON(
  prefixMessagesFunction: PrefixMessagesFunction,
): string {
  return JSON.stringify(
    PrefixMessagesFunction$outboundSchema.parse(prefixMessagesFunction),
  );
}

export function prefixMessagesFunctionFromJSON(
  jsonString: string,
): SafeParseResult<PrefixMessagesFunction, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PrefixMessagesFunction$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PrefixMessagesFunction' from JSON`,
  );
}

/** @internal */
export const PrefixMessagesToolCalls$inboundSchema: z.ZodType<
  PrefixMessagesToolCalls,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  type: DeploymentStreamPrefixMessagesType$inboundSchema,
  function: z.lazy(() => PrefixMessagesFunction$inboundSchema),
});

/** @internal */
export type PrefixMessagesToolCalls$Outbound = {
  id: string;
  type: string;
  function: PrefixMessagesFunction$Outbound;
};

/** @internal */
export const PrefixMessagesToolCalls$outboundSchema: z.ZodType<
  PrefixMessagesToolCalls$Outbound,
  z.ZodTypeDef,
  PrefixMessagesToolCalls
> = z.object({
  id: z.string(),
  type: DeploymentStreamPrefixMessagesType$outboundSchema,
  function: z.lazy(() => PrefixMessagesFunction$outboundSchema),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PrefixMessagesToolCalls$ {
  /** @deprecated use `PrefixMessagesToolCalls$inboundSchema` instead. */
  export const inboundSchema = PrefixMessagesToolCalls$inboundSchema;
  /** @deprecated use `PrefixMessagesToolCalls$outboundSchema` instead. */
  export const outboundSchema = PrefixMessagesToolCalls$outboundSchema;
  /** @deprecated use `PrefixMessagesToolCalls$Outbound` instead. */
  export type Outbound = PrefixMessagesToolCalls$Outbound;
}

export function prefixMessagesToolCallsToJSON(
  prefixMessagesToolCalls: PrefixMessagesToolCalls,
): string {
  return JSON.stringify(
    PrefixMessagesToolCalls$outboundSchema.parse(prefixMessagesToolCalls),
  );
}

export function prefixMessagesToolCallsFromJSON(
  jsonString: string,
): SafeParseResult<PrefixMessagesToolCalls, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PrefixMessagesToolCalls$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PrefixMessagesToolCalls' from JSON`,
  );
}

/** @internal */
export const PrefixMessagesAssistantMessage$inboundSchema: z.ZodType<
  PrefixMessagesAssistantMessage,
  z.ZodTypeDef,
  unknown
> = z.object({
  content: z.nullable(
    z.union([
      z.string(),
      z.array(
        z.union([
          z.lazy(() => DeploymentStream2TextContentPart$inboundSchema),
          z.lazy(() => DeploymentStream2RefusalContentPart$inboundSchema),
        ]),
      ),
    ]),
  ).optional(),
  refusal: z.nullable(z.string()).optional(),
  role:
    DeploymentStreamPrefixMessagesDeploymentsRequestRequestBodyRole$inboundSchema,
  name: z.string().optional(),
  audio: z.nullable(z.lazy(() => PrefixMessagesAudio$inboundSchema)).optional(),
  tool_calls: z.array(z.lazy(() => PrefixMessagesToolCalls$inboundSchema))
    .optional(),
  reasoning: z.string().optional(),
  reasoning_signature: z.string().optional(),
  redacted_reasoning: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "tool_calls": "toolCalls",
    "reasoning_signature": "reasoningSignature",
    "redacted_reasoning": "redactedReasoning",
  });
});

/** @internal */
export type PrefixMessagesAssistantMessage$Outbound = {
  content?:
    | string
    | Array<
      | DeploymentStream2TextContentPart$Outbound
      | DeploymentStream2RefusalContentPart$Outbound
    >
    | null
    | undefined;
  refusal?: string | null | undefined;
  role: string;
  name?: string | undefined;
  audio?: PrefixMessagesAudio$Outbound | null | undefined;
  tool_calls?: Array<PrefixMessagesToolCalls$Outbound> | undefined;
  reasoning?: string | undefined;
  reasoning_signature?: string | undefined;
  redacted_reasoning?: string | undefined;
};

/** @internal */
export const PrefixMessagesAssistantMessage$outboundSchema: z.ZodType<
  PrefixMessagesAssistantMessage$Outbound,
  z.ZodTypeDef,
  PrefixMessagesAssistantMessage
> = z.object({
  content: z.nullable(
    z.union([
      z.string(),
      z.array(
        z.union([
          z.lazy(() => DeploymentStream2TextContentPart$outboundSchema),
          z.lazy(() => DeploymentStream2RefusalContentPart$outboundSchema),
        ]),
      ),
    ]),
  ).optional(),
  refusal: z.nullable(z.string()).optional(),
  role:
    DeploymentStreamPrefixMessagesDeploymentsRequestRequestBodyRole$outboundSchema,
  name: z.string().optional(),
  audio: z.nullable(z.lazy(() => PrefixMessagesAudio$outboundSchema))
    .optional(),
  toolCalls: z.array(z.lazy(() => PrefixMessagesToolCalls$outboundSchema))
    .optional(),
  reasoning: z.string().optional(),
  reasoningSignature: z.string().optional(),
  redactedReasoning: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    toolCalls: "tool_calls",
    reasoningSignature: "reasoning_signature",
    redactedReasoning: "redacted_reasoning",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PrefixMessagesAssistantMessage$ {
  /** @deprecated use `PrefixMessagesAssistantMessage$inboundSchema` instead. */
  export const inboundSchema = PrefixMessagesAssistantMessage$inboundSchema;
  /** @deprecated use `PrefixMessagesAssistantMessage$outboundSchema` instead. */
  export const outboundSchema = PrefixMessagesAssistantMessage$outboundSchema;
  /** @deprecated use `PrefixMessagesAssistantMessage$Outbound` instead. */
  export type Outbound = PrefixMessagesAssistantMessage$Outbound;
}

export function prefixMessagesAssistantMessageToJSON(
  prefixMessagesAssistantMessage: PrefixMessagesAssistantMessage,
): string {
  return JSON.stringify(
    PrefixMessagesAssistantMessage$outboundSchema.parse(
      prefixMessagesAssistantMessage,
    ),
  );
}

export function prefixMessagesAssistantMessageFromJSON(
  jsonString: string,
): SafeParseResult<PrefixMessagesAssistantMessage, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PrefixMessagesAssistantMessage$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PrefixMessagesAssistantMessage' from JSON`,
  );
}

/** @internal */
export const DeploymentStreamPrefixMessagesDeploymentsRequestRole$inboundSchema:
  z.ZodNativeEnum<typeof DeploymentStreamPrefixMessagesDeploymentsRequestRole> =
    z.nativeEnum(DeploymentStreamPrefixMessagesDeploymentsRequestRole);

/** @internal */
export const DeploymentStreamPrefixMessagesDeploymentsRequestRole$outboundSchema:
  z.ZodNativeEnum<typeof DeploymentStreamPrefixMessagesDeploymentsRequestRole> =
    DeploymentStreamPrefixMessagesDeploymentsRequestRole$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeploymentStreamPrefixMessagesDeploymentsRequestRole$ {
  /** @deprecated use `DeploymentStreamPrefixMessagesDeploymentsRequestRole$inboundSchema` instead. */
  export const inboundSchema =
    DeploymentStreamPrefixMessagesDeploymentsRequestRole$inboundSchema;
  /** @deprecated use `DeploymentStreamPrefixMessagesDeploymentsRequestRole$outboundSchema` instead. */
  export const outboundSchema =
    DeploymentStreamPrefixMessagesDeploymentsRequestRole$outboundSchema;
}

/** @internal */
export const DeploymentStream2DeploymentsRequestRequestBodyType$inboundSchema:
  z.ZodNativeEnum<typeof DeploymentStream2DeploymentsRequestRequestBodyType> = z
    .nativeEnum(DeploymentStream2DeploymentsRequestRequestBodyType);

/** @internal */
export const DeploymentStream2DeploymentsRequestRequestBodyType$outboundSchema:
  z.ZodNativeEnum<typeof DeploymentStream2DeploymentsRequestRequestBodyType> =
    DeploymentStream2DeploymentsRequestRequestBodyType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeploymentStream2DeploymentsRequestRequestBodyType$ {
  /** @deprecated use `DeploymentStream2DeploymentsRequestRequestBodyType$inboundSchema` instead. */
  export const inboundSchema =
    DeploymentStream2DeploymentsRequestRequestBodyType$inboundSchema;
  /** @deprecated use `DeploymentStream2DeploymentsRequestRequestBodyType$outboundSchema` instead. */
  export const outboundSchema =
    DeploymentStream2DeploymentsRequestRequestBodyType$outboundSchema;
}

/** @internal */
export const DeploymentStream2File$inboundSchema: z.ZodType<
  DeploymentStream2File,
  z.ZodTypeDef,
  unknown
> = z.object({
  file_data: z.string(),
  filename: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "file_data": "fileData",
  });
});

/** @internal */
export type DeploymentStream2File$Outbound = {
  file_data: string;
  filename?: string | undefined;
};

/** @internal */
export const DeploymentStream2File$outboundSchema: z.ZodType<
  DeploymentStream2File$Outbound,
  z.ZodTypeDef,
  DeploymentStream2File
> = z.object({
  fileData: z.string(),
  filename: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    fileData: "file_data",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeploymentStream2File$ {
  /** @deprecated use `DeploymentStream2File$inboundSchema` instead. */
  export const inboundSchema = DeploymentStream2File$inboundSchema;
  /** @deprecated use `DeploymentStream2File$outboundSchema` instead. */
  export const outboundSchema = DeploymentStream2File$outboundSchema;
  /** @deprecated use `DeploymentStream2File$Outbound` instead. */
  export type Outbound = DeploymentStream2File$Outbound;
}

export function deploymentStream2FileToJSON(
  deploymentStream2File: DeploymentStream2File,
): string {
  return JSON.stringify(
    DeploymentStream2File$outboundSchema.parse(deploymentStream2File),
  );
}

export function deploymentStream2FileFromJSON(
  jsonString: string,
): SafeParseResult<DeploymentStream2File, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DeploymentStream2File$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DeploymentStream2File' from JSON`,
  );
}

/** @internal */
export const DeploymentStream24$inboundSchema: z.ZodType<
  DeploymentStream24,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: DeploymentStream2DeploymentsRequestRequestBodyType$inboundSchema,
  file: z.lazy(() => DeploymentStream2File$inboundSchema),
});

/** @internal */
export type DeploymentStream24$Outbound = {
  type: string;
  file: DeploymentStream2File$Outbound;
};

/** @internal */
export const DeploymentStream24$outboundSchema: z.ZodType<
  DeploymentStream24$Outbound,
  z.ZodTypeDef,
  DeploymentStream24
> = z.object({
  type: DeploymentStream2DeploymentsRequestRequestBodyType$outboundSchema,
  file: z.lazy(() => DeploymentStream2File$outboundSchema),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeploymentStream24$ {
  /** @deprecated use `DeploymentStream24$inboundSchema` instead. */
  export const inboundSchema = DeploymentStream24$inboundSchema;
  /** @deprecated use `DeploymentStream24$outboundSchema` instead. */
  export const outboundSchema = DeploymentStream24$outboundSchema;
  /** @deprecated use `DeploymentStream24$Outbound` instead. */
  export type Outbound = DeploymentStream24$Outbound;
}

export function deploymentStream24ToJSON(
  deploymentStream24: DeploymentStream24,
): string {
  return JSON.stringify(
    DeploymentStream24$outboundSchema.parse(deploymentStream24),
  );
}

export function deploymentStream24FromJSON(
  jsonString: string,
): SafeParseResult<DeploymentStream24, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DeploymentStream24$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DeploymentStream24' from JSON`,
  );
}

/** @internal */
export const DeploymentStream2DeploymentsRequestType$inboundSchema:
  z.ZodNativeEnum<typeof DeploymentStream2DeploymentsRequestType> = z
    .nativeEnum(DeploymentStream2DeploymentsRequestType);

/** @internal */
export const DeploymentStream2DeploymentsRequestType$outboundSchema:
  z.ZodNativeEnum<typeof DeploymentStream2DeploymentsRequestType> =
    DeploymentStream2DeploymentsRequestType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeploymentStream2DeploymentsRequestType$ {
  /** @deprecated use `DeploymentStream2DeploymentsRequestType$inboundSchema` instead. */
  export const inboundSchema =
    DeploymentStream2DeploymentsRequestType$inboundSchema;
  /** @deprecated use `DeploymentStream2DeploymentsRequestType$outboundSchema` instead. */
  export const outboundSchema =
    DeploymentStream2DeploymentsRequestType$outboundSchema;
}

/** @internal */
export const DeploymentStream2Format$inboundSchema: z.ZodNativeEnum<
  typeof DeploymentStream2Format
> = z.nativeEnum(DeploymentStream2Format);

/** @internal */
export const DeploymentStream2Format$outboundSchema: z.ZodNativeEnum<
  typeof DeploymentStream2Format
> = DeploymentStream2Format$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeploymentStream2Format$ {
  /** @deprecated use `DeploymentStream2Format$inboundSchema` instead. */
  export const inboundSchema = DeploymentStream2Format$inboundSchema;
  /** @deprecated use `DeploymentStream2Format$outboundSchema` instead. */
  export const outboundSchema = DeploymentStream2Format$outboundSchema;
}

/** @internal */
export const DeploymentStream2InputAudio$inboundSchema: z.ZodType<
  DeploymentStream2InputAudio,
  z.ZodTypeDef,
  unknown
> = z.object({
  data: z.string(),
  format: DeploymentStream2Format$inboundSchema,
});

/** @internal */
export type DeploymentStream2InputAudio$Outbound = {
  data: string;
  format: string;
};

/** @internal */
export const DeploymentStream2InputAudio$outboundSchema: z.ZodType<
  DeploymentStream2InputAudio$Outbound,
  z.ZodTypeDef,
  DeploymentStream2InputAudio
> = z.object({
  data: z.string(),
  format: DeploymentStream2Format$outboundSchema,
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeploymentStream2InputAudio$ {
  /** @deprecated use `DeploymentStream2InputAudio$inboundSchema` instead. */
  export const inboundSchema = DeploymentStream2InputAudio$inboundSchema;
  /** @deprecated use `DeploymentStream2InputAudio$outboundSchema` instead. */
  export const outboundSchema = DeploymentStream2InputAudio$outboundSchema;
  /** @deprecated use `DeploymentStream2InputAudio$Outbound` instead. */
  export type Outbound = DeploymentStream2InputAudio$Outbound;
}

export function deploymentStream2InputAudioToJSON(
  deploymentStream2InputAudio: DeploymentStream2InputAudio,
): string {
  return JSON.stringify(
    DeploymentStream2InputAudio$outboundSchema.parse(
      deploymentStream2InputAudio,
    ),
  );
}

export function deploymentStream2InputAudioFromJSON(
  jsonString: string,
): SafeParseResult<DeploymentStream2InputAudio, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DeploymentStream2InputAudio$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DeploymentStream2InputAudio' from JSON`,
  );
}

/** @internal */
export const DeploymentStream23$inboundSchema: z.ZodType<
  DeploymentStream23,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: DeploymentStream2DeploymentsRequestType$inboundSchema,
  input_audio: z.lazy(() => DeploymentStream2InputAudio$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "input_audio": "inputAudio",
  });
});

/** @internal */
export type DeploymentStream23$Outbound = {
  type: string;
  input_audio: DeploymentStream2InputAudio$Outbound;
};

/** @internal */
export const DeploymentStream23$outboundSchema: z.ZodType<
  DeploymentStream23$Outbound,
  z.ZodTypeDef,
  DeploymentStream23
> = z.object({
  type: DeploymentStream2DeploymentsRequestType$outboundSchema,
  inputAudio: z.lazy(() => DeploymentStream2InputAudio$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    inputAudio: "input_audio",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeploymentStream23$ {
  /** @deprecated use `DeploymentStream23$inboundSchema` instead. */
  export const inboundSchema = DeploymentStream23$inboundSchema;
  /** @deprecated use `DeploymentStream23$outboundSchema` instead. */
  export const outboundSchema = DeploymentStream23$outboundSchema;
  /** @deprecated use `DeploymentStream23$Outbound` instead. */
  export type Outbound = DeploymentStream23$Outbound;
}

export function deploymentStream23ToJSON(
  deploymentStream23: DeploymentStream23,
): string {
  return JSON.stringify(
    DeploymentStream23$outboundSchema.parse(deploymentStream23),
  );
}

export function deploymentStream23FromJSON(
  jsonString: string,
): SafeParseResult<DeploymentStream23, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DeploymentStream23$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DeploymentStream23' from JSON`,
  );
}

/** @internal */
export const DeploymentStream2DeploymentsType$inboundSchema: z.ZodNativeEnum<
  typeof DeploymentStream2DeploymentsType
> = z.nativeEnum(DeploymentStream2DeploymentsType);

/** @internal */
export const DeploymentStream2DeploymentsType$outboundSchema: z.ZodNativeEnum<
  typeof DeploymentStream2DeploymentsType
> = DeploymentStream2DeploymentsType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeploymentStream2DeploymentsType$ {
  /** @deprecated use `DeploymentStream2DeploymentsType$inboundSchema` instead. */
  export const inboundSchema = DeploymentStream2DeploymentsType$inboundSchema;
  /** @deprecated use `DeploymentStream2DeploymentsType$outboundSchema` instead. */
  export const outboundSchema = DeploymentStream2DeploymentsType$outboundSchema;
}

/** @internal */
export const DeploymentStream2Detail$inboundSchema: z.ZodNativeEnum<
  typeof DeploymentStream2Detail
> = z.nativeEnum(DeploymentStream2Detail);

/** @internal */
export const DeploymentStream2Detail$outboundSchema: z.ZodNativeEnum<
  typeof DeploymentStream2Detail
> = DeploymentStream2Detail$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeploymentStream2Detail$ {
  /** @deprecated use `DeploymentStream2Detail$inboundSchema` instead. */
  export const inboundSchema = DeploymentStream2Detail$inboundSchema;
  /** @deprecated use `DeploymentStream2Detail$outboundSchema` instead. */
  export const outboundSchema = DeploymentStream2Detail$outboundSchema;
}

/** @internal */
export const DeploymentStream2ImageUrl$inboundSchema: z.ZodType<
  DeploymentStream2ImageUrl,
  z.ZodTypeDef,
  unknown
> = z.object({
  url: z.string(),
  detail: DeploymentStream2Detail$inboundSchema.optional(),
});

/** @internal */
export type DeploymentStream2ImageUrl$Outbound = {
  url: string;
  detail?: string | undefined;
};

/** @internal */
export const DeploymentStream2ImageUrl$outboundSchema: z.ZodType<
  DeploymentStream2ImageUrl$Outbound,
  z.ZodTypeDef,
  DeploymentStream2ImageUrl
> = z.object({
  url: z.string(),
  detail: DeploymentStream2Detail$outboundSchema.optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeploymentStream2ImageUrl$ {
  /** @deprecated use `DeploymentStream2ImageUrl$inboundSchema` instead. */
  export const inboundSchema = DeploymentStream2ImageUrl$inboundSchema;
  /** @deprecated use `DeploymentStream2ImageUrl$outboundSchema` instead. */
  export const outboundSchema = DeploymentStream2ImageUrl$outboundSchema;
  /** @deprecated use `DeploymentStream2ImageUrl$Outbound` instead. */
  export type Outbound = DeploymentStream2ImageUrl$Outbound;
}

export function deploymentStream2ImageUrlToJSON(
  deploymentStream2ImageUrl: DeploymentStream2ImageUrl,
): string {
  return JSON.stringify(
    DeploymentStream2ImageUrl$outboundSchema.parse(deploymentStream2ImageUrl),
  );
}

export function deploymentStream2ImageUrlFromJSON(
  jsonString: string,
): SafeParseResult<DeploymentStream2ImageUrl, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DeploymentStream2ImageUrl$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DeploymentStream2ImageUrl' from JSON`,
  );
}

/** @internal */
export const DeploymentStream22$inboundSchema: z.ZodType<
  DeploymentStream22,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: DeploymentStream2DeploymentsType$inboundSchema,
  image_url: z.lazy(() => DeploymentStream2ImageUrl$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "image_url": "imageUrl",
  });
});

/** @internal */
export type DeploymentStream22$Outbound = {
  type: string;
  image_url: DeploymentStream2ImageUrl$Outbound;
};

/** @internal */
export const DeploymentStream22$outboundSchema: z.ZodType<
  DeploymentStream22$Outbound,
  z.ZodTypeDef,
  DeploymentStream22
> = z.object({
  type: DeploymentStream2DeploymentsType$outboundSchema,
  imageUrl: z.lazy(() => DeploymentStream2ImageUrl$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    imageUrl: "image_url",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeploymentStream22$ {
  /** @deprecated use `DeploymentStream22$inboundSchema` instead. */
  export const inboundSchema = DeploymentStream22$inboundSchema;
  /** @deprecated use `DeploymentStream22$outboundSchema` instead. */
  export const outboundSchema = DeploymentStream22$outboundSchema;
  /** @deprecated use `DeploymentStream22$Outbound` instead. */
  export type Outbound = DeploymentStream22$Outbound;
}

export function deploymentStream22ToJSON(
  deploymentStream22: DeploymentStream22,
): string {
  return JSON.stringify(
    DeploymentStream22$outboundSchema.parse(deploymentStream22),
  );
}

export function deploymentStream22FromJSON(
  jsonString: string,
): SafeParseResult<DeploymentStream22, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DeploymentStream22$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DeploymentStream22' from JSON`,
  );
}

/** @internal */
export const DeploymentStream2Type$inboundSchema: z.ZodNativeEnum<
  typeof DeploymentStream2Type
> = z.nativeEnum(DeploymentStream2Type);

/** @internal */
export const DeploymentStream2Type$outboundSchema: z.ZodNativeEnum<
  typeof DeploymentStream2Type
> = DeploymentStream2Type$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeploymentStream2Type$ {
  /** @deprecated use `DeploymentStream2Type$inboundSchema` instead. */
  export const inboundSchema = DeploymentStream2Type$inboundSchema;
  /** @deprecated use `DeploymentStream2Type$outboundSchema` instead. */
  export const outboundSchema = DeploymentStream2Type$outboundSchema;
}

/** @internal */
export const DeploymentStream21$inboundSchema: z.ZodType<
  DeploymentStream21,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: DeploymentStream2Type$inboundSchema,
  text: z.string(),
});

/** @internal */
export type DeploymentStream21$Outbound = {
  type: string;
  text: string;
};

/** @internal */
export const DeploymentStream21$outboundSchema: z.ZodType<
  DeploymentStream21$Outbound,
  z.ZodTypeDef,
  DeploymentStream21
> = z.object({
  type: DeploymentStream2Type$outboundSchema,
  text: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeploymentStream21$ {
  /** @deprecated use `DeploymentStream21$inboundSchema` instead. */
  export const inboundSchema = DeploymentStream21$inboundSchema;
  /** @deprecated use `DeploymentStream21$outboundSchema` instead. */
  export const outboundSchema = DeploymentStream21$outboundSchema;
  /** @deprecated use `DeploymentStream21$Outbound` instead. */
  export type Outbound = DeploymentStream21$Outbound;
}

export function deploymentStream21ToJSON(
  deploymentStream21: DeploymentStream21,
): string {
  return JSON.stringify(
    DeploymentStream21$outboundSchema.parse(deploymentStream21),
  );
}

export function deploymentStream21FromJSON(
  jsonString: string,
): SafeParseResult<DeploymentStream21, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DeploymentStream21$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DeploymentStream21' from JSON`,
  );
}

/** @internal */
export const DeploymentStreamContent2$inboundSchema: z.ZodType<
  DeploymentStreamContent2,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => DeploymentStream21$inboundSchema),
  z.lazy(() => DeploymentStream22$inboundSchema),
  z.lazy(() => DeploymentStream23$inboundSchema),
  z.lazy(() => DeploymentStream24$inboundSchema),
]);

/** @internal */
export type DeploymentStreamContent2$Outbound =
  | DeploymentStream21$Outbound
  | DeploymentStream22$Outbound
  | DeploymentStream23$Outbound
  | DeploymentStream24$Outbound;

/** @internal */
export const DeploymentStreamContent2$outboundSchema: z.ZodType<
  DeploymentStreamContent2$Outbound,
  z.ZodTypeDef,
  DeploymentStreamContent2
> = z.union([
  z.lazy(() => DeploymentStream21$outboundSchema),
  z.lazy(() => DeploymentStream22$outboundSchema),
  z.lazy(() => DeploymentStream23$outboundSchema),
  z.lazy(() => DeploymentStream24$outboundSchema),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeploymentStreamContent2$ {
  /** @deprecated use `DeploymentStreamContent2$inboundSchema` instead. */
  export const inboundSchema = DeploymentStreamContent2$inboundSchema;
  /** @deprecated use `DeploymentStreamContent2$outboundSchema` instead. */
  export const outboundSchema = DeploymentStreamContent2$outboundSchema;
  /** @deprecated use `DeploymentStreamContent2$Outbound` instead. */
  export type Outbound = DeploymentStreamContent2$Outbound;
}

export function deploymentStreamContent2ToJSON(
  deploymentStreamContent2: DeploymentStreamContent2,
): string {
  return JSON.stringify(
    DeploymentStreamContent2$outboundSchema.parse(deploymentStreamContent2),
  );
}

export function deploymentStreamContent2FromJSON(
  jsonString: string,
): SafeParseResult<DeploymentStreamContent2, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DeploymentStreamContent2$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DeploymentStreamContent2' from JSON`,
  );
}

/** @internal */
export const DeploymentStreamPrefixMessagesContent$inboundSchema: z.ZodType<
  DeploymentStreamPrefixMessagesContent,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.string(),
  z.array(z.union([
    z.lazy(() => DeploymentStream21$inboundSchema),
    z.lazy(() => DeploymentStream22$inboundSchema),
    z.lazy(() => DeploymentStream23$inboundSchema),
    z.lazy(() => DeploymentStream24$inboundSchema),
  ])),
]);

/** @internal */
export type DeploymentStreamPrefixMessagesContent$Outbound =
  | string
  | Array<
    | DeploymentStream21$Outbound
    | DeploymentStream22$Outbound
    | DeploymentStream23$Outbound
    | DeploymentStream24$Outbound
  >;

/** @internal */
export const DeploymentStreamPrefixMessagesContent$outboundSchema: z.ZodType<
  DeploymentStreamPrefixMessagesContent$Outbound,
  z.ZodTypeDef,
  DeploymentStreamPrefixMessagesContent
> = z.union([
  z.string(),
  z.array(z.union([
    z.lazy(() => DeploymentStream21$outboundSchema),
    z.lazy(() => DeploymentStream22$outboundSchema),
    z.lazy(() => DeploymentStream23$outboundSchema),
    z.lazy(() => DeploymentStream24$outboundSchema),
  ])),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeploymentStreamPrefixMessagesContent$ {
  /** @deprecated use `DeploymentStreamPrefixMessagesContent$inboundSchema` instead. */
  export const inboundSchema =
    DeploymentStreamPrefixMessagesContent$inboundSchema;
  /** @deprecated use `DeploymentStreamPrefixMessagesContent$outboundSchema` instead. */
  export const outboundSchema =
    DeploymentStreamPrefixMessagesContent$outboundSchema;
  /** @deprecated use `DeploymentStreamPrefixMessagesContent$Outbound` instead. */
  export type Outbound = DeploymentStreamPrefixMessagesContent$Outbound;
}

export function deploymentStreamPrefixMessagesContentToJSON(
  deploymentStreamPrefixMessagesContent: DeploymentStreamPrefixMessagesContent,
): string {
  return JSON.stringify(
    DeploymentStreamPrefixMessagesContent$outboundSchema.parse(
      deploymentStreamPrefixMessagesContent,
    ),
  );
}

export function deploymentStreamPrefixMessagesContentFromJSON(
  jsonString: string,
): SafeParseResult<DeploymentStreamPrefixMessagesContent, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      DeploymentStreamPrefixMessagesContent$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DeploymentStreamPrefixMessagesContent' from JSON`,
  );
}

/** @internal */
export const PrefixMessagesUserMessage$inboundSchema: z.ZodType<
  PrefixMessagesUserMessage,
  z.ZodTypeDef,
  unknown
> = z.object({
  role: DeploymentStreamPrefixMessagesDeploymentsRequestRole$inboundSchema,
  name: z.string().optional(),
  content: z.union([
    z.string(),
    z.array(z.union([
      z.lazy(() => DeploymentStream21$inboundSchema),
      z.lazy(() => DeploymentStream22$inboundSchema),
      z.lazy(() => DeploymentStream23$inboundSchema),
      z.lazy(() => DeploymentStream24$inboundSchema),
    ])),
  ]),
});

/** @internal */
export type PrefixMessagesUserMessage$Outbound = {
  role: string;
  name?: string | undefined;
  content:
    | string
    | Array<
      | DeploymentStream21$Outbound
      | DeploymentStream22$Outbound
      | DeploymentStream23$Outbound
      | DeploymentStream24$Outbound
    >;
};

/** @internal */
export const PrefixMessagesUserMessage$outboundSchema: z.ZodType<
  PrefixMessagesUserMessage$Outbound,
  z.ZodTypeDef,
  PrefixMessagesUserMessage
> = z.object({
  role: DeploymentStreamPrefixMessagesDeploymentsRequestRole$outboundSchema,
  name: z.string().optional(),
  content: z.union([
    z.string(),
    z.array(z.union([
      z.lazy(() => DeploymentStream21$outboundSchema),
      z.lazy(() => DeploymentStream22$outboundSchema),
      z.lazy(() => DeploymentStream23$outboundSchema),
      z.lazy(() => DeploymentStream24$outboundSchema),
    ])),
  ]),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PrefixMessagesUserMessage$ {
  /** @deprecated use `PrefixMessagesUserMessage$inboundSchema` instead. */
  export const inboundSchema = PrefixMessagesUserMessage$inboundSchema;
  /** @deprecated use `PrefixMessagesUserMessage$outboundSchema` instead. */
  export const outboundSchema = PrefixMessagesUserMessage$outboundSchema;
  /** @deprecated use `PrefixMessagesUserMessage$Outbound` instead. */
  export type Outbound = PrefixMessagesUserMessage$Outbound;
}

export function prefixMessagesUserMessageToJSON(
  prefixMessagesUserMessage: PrefixMessagesUserMessage,
): string {
  return JSON.stringify(
    PrefixMessagesUserMessage$outboundSchema.parse(prefixMessagesUserMessage),
  );
}

export function prefixMessagesUserMessageFromJSON(
  jsonString: string,
): SafeParseResult<PrefixMessagesUserMessage, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PrefixMessagesUserMessage$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PrefixMessagesUserMessage' from JSON`,
  );
}

/** @internal */
export const DeploymentStreamPrefixMessagesDeploymentsRole$inboundSchema:
  z.ZodNativeEnum<typeof DeploymentStreamPrefixMessagesDeploymentsRole> = z
    .nativeEnum(DeploymentStreamPrefixMessagesDeploymentsRole);

/** @internal */
export const DeploymentStreamPrefixMessagesDeploymentsRole$outboundSchema:
  z.ZodNativeEnum<typeof DeploymentStreamPrefixMessagesDeploymentsRole> =
    DeploymentStreamPrefixMessagesDeploymentsRole$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeploymentStreamPrefixMessagesDeploymentsRole$ {
  /** @deprecated use `DeploymentStreamPrefixMessagesDeploymentsRole$inboundSchema` instead. */
  export const inboundSchema =
    DeploymentStreamPrefixMessagesDeploymentsRole$inboundSchema;
  /** @deprecated use `DeploymentStreamPrefixMessagesDeploymentsRole$outboundSchema` instead. */
  export const outboundSchema =
    DeploymentStreamPrefixMessagesDeploymentsRole$outboundSchema;
}

/** @internal */
export const PrefixMessagesSystemMessage$inboundSchema: z.ZodType<
  PrefixMessagesSystemMessage,
  z.ZodTypeDef,
  unknown
> = z.object({
  role: DeploymentStreamPrefixMessagesDeploymentsRole$inboundSchema,
  content: z.string(),
  name: z.string().optional(),
});

/** @internal */
export type PrefixMessagesSystemMessage$Outbound = {
  role: string;
  content: string;
  name?: string | undefined;
};

/** @internal */
export const PrefixMessagesSystemMessage$outboundSchema: z.ZodType<
  PrefixMessagesSystemMessage$Outbound,
  z.ZodTypeDef,
  PrefixMessagesSystemMessage
> = z.object({
  role: DeploymentStreamPrefixMessagesDeploymentsRole$outboundSchema,
  content: z.string(),
  name: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PrefixMessagesSystemMessage$ {
  /** @deprecated use `PrefixMessagesSystemMessage$inboundSchema` instead. */
  export const inboundSchema = PrefixMessagesSystemMessage$inboundSchema;
  /** @deprecated use `PrefixMessagesSystemMessage$outboundSchema` instead. */
  export const outboundSchema = PrefixMessagesSystemMessage$outboundSchema;
  /** @deprecated use `PrefixMessagesSystemMessage$Outbound` instead. */
  export type Outbound = PrefixMessagesSystemMessage$Outbound;
}

export function prefixMessagesSystemMessageToJSON(
  prefixMessagesSystemMessage: PrefixMessagesSystemMessage,
): string {
  return JSON.stringify(
    PrefixMessagesSystemMessage$outboundSchema.parse(
      prefixMessagesSystemMessage,
    ),
  );
}

export function prefixMessagesSystemMessageFromJSON(
  jsonString: string,
): SafeParseResult<PrefixMessagesSystemMessage, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PrefixMessagesSystemMessage$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PrefixMessagesSystemMessage' from JSON`,
  );
}

/** @internal */
export const DeploymentStreamPrefixMessagesRole$inboundSchema: z.ZodNativeEnum<
  typeof DeploymentStreamPrefixMessagesRole
> = z.nativeEnum(DeploymentStreamPrefixMessagesRole);

/** @internal */
export const DeploymentStreamPrefixMessagesRole$outboundSchema: z.ZodNativeEnum<
  typeof DeploymentStreamPrefixMessagesRole
> = DeploymentStreamPrefixMessagesRole$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeploymentStreamPrefixMessagesRole$ {
  /** @deprecated use `DeploymentStreamPrefixMessagesRole$inboundSchema` instead. */
  export const inboundSchema = DeploymentStreamPrefixMessagesRole$inboundSchema;
  /** @deprecated use `DeploymentStreamPrefixMessagesRole$outboundSchema` instead. */
  export const outboundSchema =
    DeploymentStreamPrefixMessagesRole$outboundSchema;
}

/** @internal */
export const PrefixMessagesDeveloperMessage$inboundSchema: z.ZodType<
  PrefixMessagesDeveloperMessage,
  z.ZodTypeDef,
  unknown
> = z.object({
  role: DeploymentStreamPrefixMessagesRole$inboundSchema,
  content: z.string(),
  name: z.string().optional(),
});

/** @internal */
export type PrefixMessagesDeveloperMessage$Outbound = {
  role: string;
  content: string;
  name?: string | undefined;
};

/** @internal */
export const PrefixMessagesDeveloperMessage$outboundSchema: z.ZodType<
  PrefixMessagesDeveloperMessage$Outbound,
  z.ZodTypeDef,
  PrefixMessagesDeveloperMessage
> = z.object({
  role: DeploymentStreamPrefixMessagesRole$outboundSchema,
  content: z.string(),
  name: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PrefixMessagesDeveloperMessage$ {
  /** @deprecated use `PrefixMessagesDeveloperMessage$inboundSchema` instead. */
  export const inboundSchema = PrefixMessagesDeveloperMessage$inboundSchema;
  /** @deprecated use `PrefixMessagesDeveloperMessage$outboundSchema` instead. */
  export const outboundSchema = PrefixMessagesDeveloperMessage$outboundSchema;
  /** @deprecated use `PrefixMessagesDeveloperMessage$Outbound` instead. */
  export type Outbound = PrefixMessagesDeveloperMessage$Outbound;
}

export function prefixMessagesDeveloperMessageToJSON(
  prefixMessagesDeveloperMessage: PrefixMessagesDeveloperMessage,
): string {
  return JSON.stringify(
    PrefixMessagesDeveloperMessage$outboundSchema.parse(
      prefixMessagesDeveloperMessage,
    ),
  );
}

export function prefixMessagesDeveloperMessageFromJSON(
  jsonString: string,
): SafeParseResult<PrefixMessagesDeveloperMessage, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PrefixMessagesDeveloperMessage$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PrefixMessagesDeveloperMessage' from JSON`,
  );
}

/** @internal */
export const DeploymentStreamPrefixMessages$inboundSchema: z.ZodType<
  DeploymentStreamPrefixMessages,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => PrefixMessagesDeveloperMessage$inboundSchema),
  z.lazy(() => PrefixMessagesSystemMessage$inboundSchema),
  z.lazy(() => PrefixMessagesUserMessage$inboundSchema),
  z.lazy(() => PrefixMessagesToolMessage$inboundSchema),
  z.lazy(() => PrefixMessagesAssistantMessage$inboundSchema),
]);

/** @internal */
export type DeploymentStreamPrefixMessages$Outbound =
  | PrefixMessagesDeveloperMessage$Outbound
  | PrefixMessagesSystemMessage$Outbound
  | PrefixMessagesUserMessage$Outbound
  | PrefixMessagesToolMessage$Outbound
  | PrefixMessagesAssistantMessage$Outbound;

/** @internal */
export const DeploymentStreamPrefixMessages$outboundSchema: z.ZodType<
  DeploymentStreamPrefixMessages$Outbound,
  z.ZodTypeDef,
  DeploymentStreamPrefixMessages
> = z.union([
  z.lazy(() => PrefixMessagesDeveloperMessage$outboundSchema),
  z.lazy(() => PrefixMessagesSystemMessage$outboundSchema),
  z.lazy(() => PrefixMessagesUserMessage$outboundSchema),
  z.lazy(() => PrefixMessagesToolMessage$outboundSchema),
  z.lazy(() => PrefixMessagesAssistantMessage$outboundSchema),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeploymentStreamPrefixMessages$ {
  /** @deprecated use `DeploymentStreamPrefixMessages$inboundSchema` instead. */
  export const inboundSchema = DeploymentStreamPrefixMessages$inboundSchema;
  /** @deprecated use `DeploymentStreamPrefixMessages$outboundSchema` instead. */
  export const outboundSchema = DeploymentStreamPrefixMessages$outboundSchema;
  /** @deprecated use `DeploymentStreamPrefixMessages$Outbound` instead. */
  export type Outbound = DeploymentStreamPrefixMessages$Outbound;
}

export function deploymentStreamPrefixMessagesToJSON(
  deploymentStreamPrefixMessages: DeploymentStreamPrefixMessages,
): string {
  return JSON.stringify(
    DeploymentStreamPrefixMessages$outboundSchema.parse(
      deploymentStreamPrefixMessages,
    ),
  );
}

export function deploymentStreamPrefixMessagesFromJSON(
  jsonString: string,
): SafeParseResult<DeploymentStreamPrefixMessages, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DeploymentStreamPrefixMessages$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DeploymentStreamPrefixMessages' from JSON`,
  );
}

/** @internal */
export const DeploymentStreamMessagesDeploymentsRequestRequestBody5Role$inboundSchema:
  z.ZodNativeEnum<
    typeof DeploymentStreamMessagesDeploymentsRequestRequestBody5Role
  > = z.nativeEnum(DeploymentStreamMessagesDeploymentsRequestRequestBody5Role);

/** @internal */
export const DeploymentStreamMessagesDeploymentsRequestRequestBody5Role$outboundSchema:
  z.ZodNativeEnum<
    typeof DeploymentStreamMessagesDeploymentsRequestRequestBody5Role
  > = DeploymentStreamMessagesDeploymentsRequestRequestBody5Role$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeploymentStreamMessagesDeploymentsRequestRequestBody5Role$ {
  /** @deprecated use `DeploymentStreamMessagesDeploymentsRequestRequestBody5Role$inboundSchema` instead. */
  export const inboundSchema =
    DeploymentStreamMessagesDeploymentsRequestRequestBody5Role$inboundSchema;
  /** @deprecated use `DeploymentStreamMessagesDeploymentsRequestRequestBody5Role$outboundSchema` instead. */
  export const outboundSchema =
    DeploymentStreamMessagesDeploymentsRequestRequestBody5Role$outboundSchema;
}

/** @internal */
export const DeploymentStreamMessagesDeploymentsRequestContent$inboundSchema:
  z.ZodType<
    DeploymentStreamMessagesDeploymentsRequestContent,
    z.ZodTypeDef,
    unknown
  > = z.union([z.string(), z.array(z.string())]);

/** @internal */
export type DeploymentStreamMessagesDeploymentsRequestContent$Outbound =
  | string
  | Array<string>;

/** @internal */
export const DeploymentStreamMessagesDeploymentsRequestContent$outboundSchema:
  z.ZodType<
    DeploymentStreamMessagesDeploymentsRequestContent$Outbound,
    z.ZodTypeDef,
    DeploymentStreamMessagesDeploymentsRequestContent
  > = z.union([z.string(), z.array(z.string())]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeploymentStreamMessagesDeploymentsRequestContent$ {
  /** @deprecated use `DeploymentStreamMessagesDeploymentsRequestContent$inboundSchema` instead. */
  export const inboundSchema =
    DeploymentStreamMessagesDeploymentsRequestContent$inboundSchema;
  /** @deprecated use `DeploymentStreamMessagesDeploymentsRequestContent$outboundSchema` instead. */
  export const outboundSchema =
    DeploymentStreamMessagesDeploymentsRequestContent$outboundSchema;
  /** @deprecated use `DeploymentStreamMessagesDeploymentsRequestContent$Outbound` instead. */
  export type Outbound =
    DeploymentStreamMessagesDeploymentsRequestContent$Outbound;
}

export function deploymentStreamMessagesDeploymentsRequestContentToJSON(
  deploymentStreamMessagesDeploymentsRequestContent:
    DeploymentStreamMessagesDeploymentsRequestContent,
): string {
  return JSON.stringify(
    DeploymentStreamMessagesDeploymentsRequestContent$outboundSchema.parse(
      deploymentStreamMessagesDeploymentsRequestContent,
    ),
  );
}

export function deploymentStreamMessagesDeploymentsRequestContentFromJSON(
  jsonString: string,
): SafeParseResult<
  DeploymentStreamMessagesDeploymentsRequestContent,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      DeploymentStreamMessagesDeploymentsRequestContent$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'DeploymentStreamMessagesDeploymentsRequestContent' from JSON`,
  );
}

/** @internal */
export const DeploymentStreamMessagesToolMessage$inboundSchema: z.ZodType<
  DeploymentStreamMessagesToolMessage,
  z.ZodTypeDef,
  unknown
> = z.object({
  role:
    DeploymentStreamMessagesDeploymentsRequestRequestBody5Role$inboundSchema,
  content: z.union([z.string(), z.array(z.string())]),
  tool_call_id: z.string(),
}).transform((v) => {
  return remap$(v, {
    "tool_call_id": "toolCallId",
  });
});

/** @internal */
export type DeploymentStreamMessagesToolMessage$Outbound = {
  role: string;
  content: string | Array<string>;
  tool_call_id: string;
};

/** @internal */
export const DeploymentStreamMessagesToolMessage$outboundSchema: z.ZodType<
  DeploymentStreamMessagesToolMessage$Outbound,
  z.ZodTypeDef,
  DeploymentStreamMessagesToolMessage
> = z.object({
  role:
    DeploymentStreamMessagesDeploymentsRequestRequestBody5Role$outboundSchema,
  content: z.union([z.string(), z.array(z.string())]),
  toolCallId: z.string(),
}).transform((v) => {
  return remap$(v, {
    toolCallId: "tool_call_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeploymentStreamMessagesToolMessage$ {
  /** @deprecated use `DeploymentStreamMessagesToolMessage$inboundSchema` instead. */
  export const inboundSchema =
    DeploymentStreamMessagesToolMessage$inboundSchema;
  /** @deprecated use `DeploymentStreamMessagesToolMessage$outboundSchema` instead. */
  export const outboundSchema =
    DeploymentStreamMessagesToolMessage$outboundSchema;
  /** @deprecated use `DeploymentStreamMessagesToolMessage$Outbound` instead. */
  export type Outbound = DeploymentStreamMessagesToolMessage$Outbound;
}

export function deploymentStreamMessagesToolMessageToJSON(
  deploymentStreamMessagesToolMessage: DeploymentStreamMessagesToolMessage,
): string {
  return JSON.stringify(
    DeploymentStreamMessagesToolMessage$outboundSchema.parse(
      deploymentStreamMessagesToolMessage,
    ),
  );
}

export function deploymentStreamMessagesToolMessageFromJSON(
  jsonString: string,
): SafeParseResult<DeploymentStreamMessagesToolMessage, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      DeploymentStreamMessagesToolMessage$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DeploymentStreamMessagesToolMessage' from JSON`,
  );
}

/** @internal */
export const DeploymentStream2DeploymentsRequestRequestBodyMessages4ContentType$inboundSchema:
  z.ZodNativeEnum<
    typeof DeploymentStream2DeploymentsRequestRequestBodyMessages4ContentType
  > = z.nativeEnum(
    DeploymentStream2DeploymentsRequestRequestBodyMessages4ContentType,
  );

/** @internal */
export const DeploymentStream2DeploymentsRequestRequestBodyMessages4ContentType$outboundSchema:
  z.ZodNativeEnum<
    typeof DeploymentStream2DeploymentsRequestRequestBodyMessages4ContentType
  > =
    DeploymentStream2DeploymentsRequestRequestBodyMessages4ContentType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeploymentStream2DeploymentsRequestRequestBodyMessages4ContentType$ {
  /** @deprecated use `DeploymentStream2DeploymentsRequestRequestBodyMessages4ContentType$inboundSchema` instead. */
  export const inboundSchema =
    DeploymentStream2DeploymentsRequestRequestBodyMessages4ContentType$inboundSchema;
  /** @deprecated use `DeploymentStream2DeploymentsRequestRequestBodyMessages4ContentType$outboundSchema` instead. */
  export const outboundSchema =
    DeploymentStream2DeploymentsRequestRequestBodyMessages4ContentType$outboundSchema;
}

/** @internal */
export const DeploymentStream2DeploymentsRefusalContentPart$inboundSchema:
  z.ZodType<
    DeploymentStream2DeploymentsRefusalContentPart,
    z.ZodTypeDef,
    unknown
  > = z.object({
    type:
      DeploymentStream2DeploymentsRequestRequestBodyMessages4ContentType$inboundSchema,
    refusal: z.string(),
  });

/** @internal */
export type DeploymentStream2DeploymentsRefusalContentPart$Outbound = {
  type: string;
  refusal: string;
};

/** @internal */
export const DeploymentStream2DeploymentsRefusalContentPart$outboundSchema:
  z.ZodType<
    DeploymentStream2DeploymentsRefusalContentPart$Outbound,
    z.ZodTypeDef,
    DeploymentStream2DeploymentsRefusalContentPart
  > = z.object({
    type:
      DeploymentStream2DeploymentsRequestRequestBodyMessages4ContentType$outboundSchema,
    refusal: z.string(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeploymentStream2DeploymentsRefusalContentPart$ {
  /** @deprecated use `DeploymentStream2DeploymentsRefusalContentPart$inboundSchema` instead. */
  export const inboundSchema =
    DeploymentStream2DeploymentsRefusalContentPart$inboundSchema;
  /** @deprecated use `DeploymentStream2DeploymentsRefusalContentPart$outboundSchema` instead. */
  export const outboundSchema =
    DeploymentStream2DeploymentsRefusalContentPart$outboundSchema;
  /** @deprecated use `DeploymentStream2DeploymentsRefusalContentPart$Outbound` instead. */
  export type Outbound =
    DeploymentStream2DeploymentsRefusalContentPart$Outbound;
}

export function deploymentStream2DeploymentsRefusalContentPartToJSON(
  deploymentStream2DeploymentsRefusalContentPart:
    DeploymentStream2DeploymentsRefusalContentPart,
): string {
  return JSON.stringify(
    DeploymentStream2DeploymentsRefusalContentPart$outboundSchema.parse(
      deploymentStream2DeploymentsRefusalContentPart,
    ),
  );
}

export function deploymentStream2DeploymentsRefusalContentPartFromJSON(
  jsonString: string,
): SafeParseResult<
  DeploymentStream2DeploymentsRefusalContentPart,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      DeploymentStream2DeploymentsRefusalContentPart$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'DeploymentStream2DeploymentsRefusalContentPart' from JSON`,
  );
}

/** @internal */
export const DeploymentStream2DeploymentsRequestRequestBodyMessages4Type$inboundSchema:
  z.ZodNativeEnum<
    typeof DeploymentStream2DeploymentsRequestRequestBodyMessages4Type
  > = z.nativeEnum(DeploymentStream2DeploymentsRequestRequestBodyMessages4Type);

/** @internal */
export const DeploymentStream2DeploymentsRequestRequestBodyMessages4Type$outboundSchema:
  z.ZodNativeEnum<
    typeof DeploymentStream2DeploymentsRequestRequestBodyMessages4Type
  > = DeploymentStream2DeploymentsRequestRequestBodyMessages4Type$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeploymentStream2DeploymentsRequestRequestBodyMessages4Type$ {
  /** @deprecated use `DeploymentStream2DeploymentsRequestRequestBodyMessages4Type$inboundSchema` instead. */
  export const inboundSchema =
    DeploymentStream2DeploymentsRequestRequestBodyMessages4Type$inboundSchema;
  /** @deprecated use `DeploymentStream2DeploymentsRequestRequestBodyMessages4Type$outboundSchema` instead. */
  export const outboundSchema =
    DeploymentStream2DeploymentsRequestRequestBodyMessages4Type$outboundSchema;
}

/** @internal */
export const DeploymentStream2DeploymentsTextContentPart$inboundSchema:
  z.ZodType<
    DeploymentStream2DeploymentsTextContentPart,
    z.ZodTypeDef,
    unknown
  > = z.object({
    type:
      DeploymentStream2DeploymentsRequestRequestBodyMessages4Type$inboundSchema,
    text: z.string(),
  });

/** @internal */
export type DeploymentStream2DeploymentsTextContentPart$Outbound = {
  type: string;
  text: string;
};

/** @internal */
export const DeploymentStream2DeploymentsTextContentPart$outboundSchema:
  z.ZodType<
    DeploymentStream2DeploymentsTextContentPart$Outbound,
    z.ZodTypeDef,
    DeploymentStream2DeploymentsTextContentPart
  > = z.object({
    type:
      DeploymentStream2DeploymentsRequestRequestBodyMessages4Type$outboundSchema,
    text: z.string(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeploymentStream2DeploymentsTextContentPart$ {
  /** @deprecated use `DeploymentStream2DeploymentsTextContentPart$inboundSchema` instead. */
  export const inboundSchema =
    DeploymentStream2DeploymentsTextContentPart$inboundSchema;
  /** @deprecated use `DeploymentStream2DeploymentsTextContentPart$outboundSchema` instead. */
  export const outboundSchema =
    DeploymentStream2DeploymentsTextContentPart$outboundSchema;
  /** @deprecated use `DeploymentStream2DeploymentsTextContentPart$Outbound` instead. */
  export type Outbound = DeploymentStream2DeploymentsTextContentPart$Outbound;
}

export function deploymentStream2DeploymentsTextContentPartToJSON(
  deploymentStream2DeploymentsTextContentPart:
    DeploymentStream2DeploymentsTextContentPart,
): string {
  return JSON.stringify(
    DeploymentStream2DeploymentsTextContentPart$outboundSchema.parse(
      deploymentStream2DeploymentsTextContentPart,
    ),
  );
}

export function deploymentStream2DeploymentsTextContentPartFromJSON(
  jsonString: string,
): SafeParseResult<
  DeploymentStream2DeploymentsTextContentPart,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      DeploymentStream2DeploymentsTextContentPart$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'DeploymentStream2DeploymentsTextContentPart' from JSON`,
  );
}

/** @internal */
export const DeploymentStreamContentDeploymentsRequestRequestBody2$inboundSchema:
  z.ZodType<
    DeploymentStreamContentDeploymentsRequestRequestBody2,
    z.ZodTypeDef,
    unknown
  > = z.union([
    z.lazy(() => DeploymentStream2DeploymentsTextContentPart$inboundSchema),
    z.lazy(() => DeploymentStream2DeploymentsRefusalContentPart$inboundSchema),
  ]);

/** @internal */
export type DeploymentStreamContentDeploymentsRequestRequestBody2$Outbound =
  | DeploymentStream2DeploymentsTextContentPart$Outbound
  | DeploymentStream2DeploymentsRefusalContentPart$Outbound;

/** @internal */
export const DeploymentStreamContentDeploymentsRequestRequestBody2$outboundSchema:
  z.ZodType<
    DeploymentStreamContentDeploymentsRequestRequestBody2$Outbound,
    z.ZodTypeDef,
    DeploymentStreamContentDeploymentsRequestRequestBody2
  > = z.union([
    z.lazy(() => DeploymentStream2DeploymentsTextContentPart$outboundSchema),
    z.lazy(() => DeploymentStream2DeploymentsRefusalContentPart$outboundSchema),
  ]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeploymentStreamContentDeploymentsRequestRequestBody2$ {
  /** @deprecated use `DeploymentStreamContentDeploymentsRequestRequestBody2$inboundSchema` instead. */
  export const inboundSchema =
    DeploymentStreamContentDeploymentsRequestRequestBody2$inboundSchema;
  /** @deprecated use `DeploymentStreamContentDeploymentsRequestRequestBody2$outboundSchema` instead. */
  export const outboundSchema =
    DeploymentStreamContentDeploymentsRequestRequestBody2$outboundSchema;
  /** @deprecated use `DeploymentStreamContentDeploymentsRequestRequestBody2$Outbound` instead. */
  export type Outbound =
    DeploymentStreamContentDeploymentsRequestRequestBody2$Outbound;
}

export function deploymentStreamContentDeploymentsRequestRequestBody2ToJSON(
  deploymentStreamContentDeploymentsRequestRequestBody2:
    DeploymentStreamContentDeploymentsRequestRequestBody2,
): string {
  return JSON.stringify(
    DeploymentStreamContentDeploymentsRequestRequestBody2$outboundSchema.parse(
      deploymentStreamContentDeploymentsRequestRequestBody2,
    ),
  );
}

export function deploymentStreamContentDeploymentsRequestRequestBody2FromJSON(
  jsonString: string,
): SafeParseResult<
  DeploymentStreamContentDeploymentsRequestRequestBody2,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      DeploymentStreamContentDeploymentsRequestRequestBody2$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'DeploymentStreamContentDeploymentsRequestRequestBody2' from JSON`,
  );
}

/** @internal */
export const DeploymentStreamMessagesDeploymentsContent$inboundSchema:
  z.ZodType<DeploymentStreamMessagesDeploymentsContent, z.ZodTypeDef, unknown> =
    z.union([
      z.string(),
      z.array(z.union([
        z.lazy(() => DeploymentStream2DeploymentsTextContentPart$inboundSchema),
        z.lazy(() =>
          DeploymentStream2DeploymentsRefusalContentPart$inboundSchema
        ),
      ])),
    ]);

/** @internal */
export type DeploymentStreamMessagesDeploymentsContent$Outbound =
  | string
  | Array<
    | DeploymentStream2DeploymentsTextContentPart$Outbound
    | DeploymentStream2DeploymentsRefusalContentPart$Outbound
  >;

/** @internal */
export const DeploymentStreamMessagesDeploymentsContent$outboundSchema:
  z.ZodType<
    DeploymentStreamMessagesDeploymentsContent$Outbound,
    z.ZodTypeDef,
    DeploymentStreamMessagesDeploymentsContent
  > = z.union([
    z.string(),
    z.array(z.union([
      z.lazy(() => DeploymentStream2DeploymentsTextContentPart$outboundSchema),
      z.lazy(() =>
        DeploymentStream2DeploymentsRefusalContentPart$outboundSchema
      ),
    ])),
  ]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeploymentStreamMessagesDeploymentsContent$ {
  /** @deprecated use `DeploymentStreamMessagesDeploymentsContent$inboundSchema` instead. */
  export const inboundSchema =
    DeploymentStreamMessagesDeploymentsContent$inboundSchema;
  /** @deprecated use `DeploymentStreamMessagesDeploymentsContent$outboundSchema` instead. */
  export const outboundSchema =
    DeploymentStreamMessagesDeploymentsContent$outboundSchema;
  /** @deprecated use `DeploymentStreamMessagesDeploymentsContent$Outbound` instead. */
  export type Outbound = DeploymentStreamMessagesDeploymentsContent$Outbound;
}

export function deploymentStreamMessagesDeploymentsContentToJSON(
  deploymentStreamMessagesDeploymentsContent:
    DeploymentStreamMessagesDeploymentsContent,
): string {
  return JSON.stringify(
    DeploymentStreamMessagesDeploymentsContent$outboundSchema.parse(
      deploymentStreamMessagesDeploymentsContent,
    ),
  );
}

export function deploymentStreamMessagesDeploymentsContentFromJSON(
  jsonString: string,
): SafeParseResult<
  DeploymentStreamMessagesDeploymentsContent,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      DeploymentStreamMessagesDeploymentsContent$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'DeploymentStreamMessagesDeploymentsContent' from JSON`,
  );
}

/** @internal */
export const DeploymentStreamMessagesDeploymentsRequestRequestBodyRole$inboundSchema:
  z.ZodNativeEnum<
    typeof DeploymentStreamMessagesDeploymentsRequestRequestBodyRole
  > = z.nativeEnum(DeploymentStreamMessagesDeploymentsRequestRequestBodyRole);

/** @internal */
export const DeploymentStreamMessagesDeploymentsRequestRequestBodyRole$outboundSchema:
  z.ZodNativeEnum<
    typeof DeploymentStreamMessagesDeploymentsRequestRequestBodyRole
  > = DeploymentStreamMessagesDeploymentsRequestRequestBodyRole$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeploymentStreamMessagesDeploymentsRequestRequestBodyRole$ {
  /** @deprecated use `DeploymentStreamMessagesDeploymentsRequestRequestBodyRole$inboundSchema` instead. */
  export const inboundSchema =
    DeploymentStreamMessagesDeploymentsRequestRequestBodyRole$inboundSchema;
  /** @deprecated use `DeploymentStreamMessagesDeploymentsRequestRequestBodyRole$outboundSchema` instead. */
  export const outboundSchema =
    DeploymentStreamMessagesDeploymentsRequestRequestBodyRole$outboundSchema;
}

/** @internal */
export const DeploymentStreamMessagesAudio$inboundSchema: z.ZodType<
  DeploymentStreamMessagesAudio,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
});

/** @internal */
export type DeploymentStreamMessagesAudio$Outbound = {
  id: string;
};

/** @internal */
export const DeploymentStreamMessagesAudio$outboundSchema: z.ZodType<
  DeploymentStreamMessagesAudio$Outbound,
  z.ZodTypeDef,
  DeploymentStreamMessagesAudio
> = z.object({
  id: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeploymentStreamMessagesAudio$ {
  /** @deprecated use `DeploymentStreamMessagesAudio$inboundSchema` instead. */
  export const inboundSchema = DeploymentStreamMessagesAudio$inboundSchema;
  /** @deprecated use `DeploymentStreamMessagesAudio$outboundSchema` instead. */
  export const outboundSchema = DeploymentStreamMessagesAudio$outboundSchema;
  /** @deprecated use `DeploymentStreamMessagesAudio$Outbound` instead. */
  export type Outbound = DeploymentStreamMessagesAudio$Outbound;
}

export function deploymentStreamMessagesAudioToJSON(
  deploymentStreamMessagesAudio: DeploymentStreamMessagesAudio,
): string {
  return JSON.stringify(
    DeploymentStreamMessagesAudio$outboundSchema.parse(
      deploymentStreamMessagesAudio,
    ),
  );
}

export function deploymentStreamMessagesAudioFromJSON(
  jsonString: string,
): SafeParseResult<DeploymentStreamMessagesAudio, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DeploymentStreamMessagesAudio$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DeploymentStreamMessagesAudio' from JSON`,
  );
}

/** @internal */
export const DeploymentStreamMessagesType$inboundSchema: z.ZodNativeEnum<
  typeof DeploymentStreamMessagesType
> = z.nativeEnum(DeploymentStreamMessagesType);

/** @internal */
export const DeploymentStreamMessagesType$outboundSchema: z.ZodNativeEnum<
  typeof DeploymentStreamMessagesType
> = DeploymentStreamMessagesType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeploymentStreamMessagesType$ {
  /** @deprecated use `DeploymentStreamMessagesType$inboundSchema` instead. */
  export const inboundSchema = DeploymentStreamMessagesType$inboundSchema;
  /** @deprecated use `DeploymentStreamMessagesType$outboundSchema` instead. */
  export const outboundSchema = DeploymentStreamMessagesType$outboundSchema;
}

/** @internal */
export const DeploymentStreamMessagesFunction$inboundSchema: z.ZodType<
  DeploymentStreamMessagesFunction,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.string().optional(),
  arguments: z.string().optional(),
});

/** @internal */
export type DeploymentStreamMessagesFunction$Outbound = {
  name?: string | undefined;
  arguments?: string | undefined;
};

/** @internal */
export const DeploymentStreamMessagesFunction$outboundSchema: z.ZodType<
  DeploymentStreamMessagesFunction$Outbound,
  z.ZodTypeDef,
  DeploymentStreamMessagesFunction
> = z.object({
  name: z.string().optional(),
  arguments: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeploymentStreamMessagesFunction$ {
  /** @deprecated use `DeploymentStreamMessagesFunction$inboundSchema` instead. */
  export const inboundSchema = DeploymentStreamMessagesFunction$inboundSchema;
  /** @deprecated use `DeploymentStreamMessagesFunction$outboundSchema` instead. */
  export const outboundSchema = DeploymentStreamMessagesFunction$outboundSchema;
  /** @deprecated use `DeploymentStreamMessagesFunction$Outbound` instead. */
  export type Outbound = DeploymentStreamMessagesFunction$Outbound;
}

export function deploymentStreamMessagesFunctionToJSON(
  deploymentStreamMessagesFunction: DeploymentStreamMessagesFunction,
): string {
  return JSON.stringify(
    DeploymentStreamMessagesFunction$outboundSchema.parse(
      deploymentStreamMessagesFunction,
    ),
  );
}

export function deploymentStreamMessagesFunctionFromJSON(
  jsonString: string,
): SafeParseResult<DeploymentStreamMessagesFunction, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DeploymentStreamMessagesFunction$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DeploymentStreamMessagesFunction' from JSON`,
  );
}

/** @internal */
export const DeploymentStreamMessagesToolCalls$inboundSchema: z.ZodType<
  DeploymentStreamMessagesToolCalls,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  type: DeploymentStreamMessagesType$inboundSchema,
  function: z.lazy(() => DeploymentStreamMessagesFunction$inboundSchema),
});

/** @internal */
export type DeploymentStreamMessagesToolCalls$Outbound = {
  id: string;
  type: string;
  function: DeploymentStreamMessagesFunction$Outbound;
};

/** @internal */
export const DeploymentStreamMessagesToolCalls$outboundSchema: z.ZodType<
  DeploymentStreamMessagesToolCalls$Outbound,
  z.ZodTypeDef,
  DeploymentStreamMessagesToolCalls
> = z.object({
  id: z.string(),
  type: DeploymentStreamMessagesType$outboundSchema,
  function: z.lazy(() => DeploymentStreamMessagesFunction$outboundSchema),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeploymentStreamMessagesToolCalls$ {
  /** @deprecated use `DeploymentStreamMessagesToolCalls$inboundSchema` instead. */
  export const inboundSchema = DeploymentStreamMessagesToolCalls$inboundSchema;
  /** @deprecated use `DeploymentStreamMessagesToolCalls$outboundSchema` instead. */
  export const outboundSchema =
    DeploymentStreamMessagesToolCalls$outboundSchema;
  /** @deprecated use `DeploymentStreamMessagesToolCalls$Outbound` instead. */
  export type Outbound = DeploymentStreamMessagesToolCalls$Outbound;
}

export function deploymentStreamMessagesToolCallsToJSON(
  deploymentStreamMessagesToolCalls: DeploymentStreamMessagesToolCalls,
): string {
  return JSON.stringify(
    DeploymentStreamMessagesToolCalls$outboundSchema.parse(
      deploymentStreamMessagesToolCalls,
    ),
  );
}

export function deploymentStreamMessagesToolCallsFromJSON(
  jsonString: string,
): SafeParseResult<DeploymentStreamMessagesToolCalls, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DeploymentStreamMessagesToolCalls$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DeploymentStreamMessagesToolCalls' from JSON`,
  );
}

/** @internal */
export const DeploymentStreamMessagesAssistantMessage$inboundSchema: z.ZodType<
  DeploymentStreamMessagesAssistantMessage,
  z.ZodTypeDef,
  unknown
> = z.object({
  content: z.nullable(
    z.union([
      z.string(),
      z.array(
        z.union([
          z.lazy(() =>
            DeploymentStream2DeploymentsTextContentPart$inboundSchema
          ),
          z.lazy(() =>
            DeploymentStream2DeploymentsRefusalContentPart$inboundSchema
          ),
        ]),
      ),
    ]),
  ).optional(),
  refusal: z.nullable(z.string()).optional(),
  role: DeploymentStreamMessagesDeploymentsRequestRequestBodyRole$inboundSchema,
  name: z.string().optional(),
  audio: z.nullable(z.lazy(() => DeploymentStreamMessagesAudio$inboundSchema))
    .optional(),
  tool_calls: z.array(
    z.lazy(() => DeploymentStreamMessagesToolCalls$inboundSchema),
  ).optional(),
  reasoning: z.string().optional(),
  reasoning_signature: z.string().optional(),
  redacted_reasoning: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "tool_calls": "toolCalls",
    "reasoning_signature": "reasoningSignature",
    "redacted_reasoning": "redactedReasoning",
  });
});

/** @internal */
export type DeploymentStreamMessagesAssistantMessage$Outbound = {
  content?:
    | string
    | Array<
      | DeploymentStream2DeploymentsTextContentPart$Outbound
      | DeploymentStream2DeploymentsRefusalContentPart$Outbound
    >
    | null
    | undefined;
  refusal?: string | null | undefined;
  role: string;
  name?: string | undefined;
  audio?: DeploymentStreamMessagesAudio$Outbound | null | undefined;
  tool_calls?: Array<DeploymentStreamMessagesToolCalls$Outbound> | undefined;
  reasoning?: string | undefined;
  reasoning_signature?: string | undefined;
  redacted_reasoning?: string | undefined;
};

/** @internal */
export const DeploymentStreamMessagesAssistantMessage$outboundSchema: z.ZodType<
  DeploymentStreamMessagesAssistantMessage$Outbound,
  z.ZodTypeDef,
  DeploymentStreamMessagesAssistantMessage
> = z.object({
  content: z.nullable(
    z.union([
      z.string(),
      z.array(
        z.union([
          z.lazy(() =>
            DeploymentStream2DeploymentsTextContentPart$outboundSchema
          ),
          z.lazy(() =>
            DeploymentStream2DeploymentsRefusalContentPart$outboundSchema
          ),
        ]),
      ),
    ]),
  ).optional(),
  refusal: z.nullable(z.string()).optional(),
  role:
    DeploymentStreamMessagesDeploymentsRequestRequestBodyRole$outboundSchema,
  name: z.string().optional(),
  audio: z.nullable(z.lazy(() => DeploymentStreamMessagesAudio$outboundSchema))
    .optional(),
  toolCalls: z.array(
    z.lazy(() => DeploymentStreamMessagesToolCalls$outboundSchema),
  ).optional(),
  reasoning: z.string().optional(),
  reasoningSignature: z.string().optional(),
  redactedReasoning: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    toolCalls: "tool_calls",
    reasoningSignature: "reasoning_signature",
    redactedReasoning: "redacted_reasoning",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeploymentStreamMessagesAssistantMessage$ {
  /** @deprecated use `DeploymentStreamMessagesAssistantMessage$inboundSchema` instead. */
  export const inboundSchema =
    DeploymentStreamMessagesAssistantMessage$inboundSchema;
  /** @deprecated use `DeploymentStreamMessagesAssistantMessage$outboundSchema` instead. */
  export const outboundSchema =
    DeploymentStreamMessagesAssistantMessage$outboundSchema;
  /** @deprecated use `DeploymentStreamMessagesAssistantMessage$Outbound` instead. */
  export type Outbound = DeploymentStreamMessagesAssistantMessage$Outbound;
}

export function deploymentStreamMessagesAssistantMessageToJSON(
  deploymentStreamMessagesAssistantMessage:
    DeploymentStreamMessagesAssistantMessage,
): string {
  return JSON.stringify(
    DeploymentStreamMessagesAssistantMessage$outboundSchema.parse(
      deploymentStreamMessagesAssistantMessage,
    ),
  );
}

export function deploymentStreamMessagesAssistantMessageFromJSON(
  jsonString: string,
): SafeParseResult<
  DeploymentStreamMessagesAssistantMessage,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      DeploymentStreamMessagesAssistantMessage$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'DeploymentStreamMessagesAssistantMessage' from JSON`,
  );
}

/** @internal */
export const DeploymentStreamMessagesDeploymentsRequestRole$inboundSchema:
  z.ZodNativeEnum<typeof DeploymentStreamMessagesDeploymentsRequestRole> = z
    .nativeEnum(DeploymentStreamMessagesDeploymentsRequestRole);

/** @internal */
export const DeploymentStreamMessagesDeploymentsRequestRole$outboundSchema:
  z.ZodNativeEnum<typeof DeploymentStreamMessagesDeploymentsRequestRole> =
    DeploymentStreamMessagesDeploymentsRequestRole$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeploymentStreamMessagesDeploymentsRequestRole$ {
  /** @deprecated use `DeploymentStreamMessagesDeploymentsRequestRole$inboundSchema` instead. */
  export const inboundSchema =
    DeploymentStreamMessagesDeploymentsRequestRole$inboundSchema;
  /** @deprecated use `DeploymentStreamMessagesDeploymentsRequestRole$outboundSchema` instead. */
  export const outboundSchema =
    DeploymentStreamMessagesDeploymentsRequestRole$outboundSchema;
}

/** @internal */
export const DeploymentStream2DeploymentsRequestRequestBodyMessages3Content4Type$inboundSchema:
  z.ZodNativeEnum<
    typeof DeploymentStream2DeploymentsRequestRequestBodyMessages3Content4Type
  > = z.nativeEnum(
    DeploymentStream2DeploymentsRequestRequestBodyMessages3Content4Type,
  );

/** @internal */
export const DeploymentStream2DeploymentsRequestRequestBodyMessages3Content4Type$outboundSchema:
  z.ZodNativeEnum<
    typeof DeploymentStream2DeploymentsRequestRequestBodyMessages3Content4Type
  > =
    DeploymentStream2DeploymentsRequestRequestBodyMessages3Content4Type$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeploymentStream2DeploymentsRequestRequestBodyMessages3Content4Type$ {
  /** @deprecated use `DeploymentStream2DeploymentsRequestRequestBodyMessages3Content4Type$inboundSchema` instead. */
  export const inboundSchema =
    DeploymentStream2DeploymentsRequestRequestBodyMessages3Content4Type$inboundSchema;
  /** @deprecated use `DeploymentStream2DeploymentsRequestRequestBodyMessages3Content4Type$outboundSchema` instead. */
  export const outboundSchema =
    DeploymentStream2DeploymentsRequestRequestBodyMessages3Content4Type$outboundSchema;
}

/** @internal */
export const DeploymentStream2DeploymentsFile$inboundSchema: z.ZodType<
  DeploymentStream2DeploymentsFile,
  z.ZodTypeDef,
  unknown
> = z.object({
  file_data: z.string(),
  filename: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "file_data": "fileData",
  });
});

/** @internal */
export type DeploymentStream2DeploymentsFile$Outbound = {
  file_data: string;
  filename?: string | undefined;
};

/** @internal */
export const DeploymentStream2DeploymentsFile$outboundSchema: z.ZodType<
  DeploymentStream2DeploymentsFile$Outbound,
  z.ZodTypeDef,
  DeploymentStream2DeploymentsFile
> = z.object({
  fileData: z.string(),
  filename: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    fileData: "file_data",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeploymentStream2DeploymentsFile$ {
  /** @deprecated use `DeploymentStream2DeploymentsFile$inboundSchema` instead. */
  export const inboundSchema = DeploymentStream2DeploymentsFile$inboundSchema;
  /** @deprecated use `DeploymentStream2DeploymentsFile$outboundSchema` instead. */
  export const outboundSchema = DeploymentStream2DeploymentsFile$outboundSchema;
  /** @deprecated use `DeploymentStream2DeploymentsFile$Outbound` instead. */
  export type Outbound = DeploymentStream2DeploymentsFile$Outbound;
}

export function deploymentStream2DeploymentsFileToJSON(
  deploymentStream2DeploymentsFile: DeploymentStream2DeploymentsFile,
): string {
  return JSON.stringify(
    DeploymentStream2DeploymentsFile$outboundSchema.parse(
      deploymentStream2DeploymentsFile,
    ),
  );
}

export function deploymentStream2DeploymentsFileFromJSON(
  jsonString: string,
): SafeParseResult<DeploymentStream2DeploymentsFile, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DeploymentStream2DeploymentsFile$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DeploymentStream2DeploymentsFile' from JSON`,
  );
}

/** @internal */
export const DeploymentStream2Deployments4$inboundSchema: z.ZodType<
  DeploymentStream2Deployments4,
  z.ZodTypeDef,
  unknown
> = z.object({
  type:
    DeploymentStream2DeploymentsRequestRequestBodyMessages3Content4Type$inboundSchema,
  file: z.lazy(() => DeploymentStream2DeploymentsFile$inboundSchema),
});

/** @internal */
export type DeploymentStream2Deployments4$Outbound = {
  type: string;
  file: DeploymentStream2DeploymentsFile$Outbound;
};

/** @internal */
export const DeploymentStream2Deployments4$outboundSchema: z.ZodType<
  DeploymentStream2Deployments4$Outbound,
  z.ZodTypeDef,
  DeploymentStream2Deployments4
> = z.object({
  type:
    DeploymentStream2DeploymentsRequestRequestBodyMessages3Content4Type$outboundSchema,
  file: z.lazy(() => DeploymentStream2DeploymentsFile$outboundSchema),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeploymentStream2Deployments4$ {
  /** @deprecated use `DeploymentStream2Deployments4$inboundSchema` instead. */
  export const inboundSchema = DeploymentStream2Deployments4$inboundSchema;
  /** @deprecated use `DeploymentStream2Deployments4$outboundSchema` instead. */
  export const outboundSchema = DeploymentStream2Deployments4$outboundSchema;
  /** @deprecated use `DeploymentStream2Deployments4$Outbound` instead. */
  export type Outbound = DeploymentStream2Deployments4$Outbound;
}

export function deploymentStream2Deployments4ToJSON(
  deploymentStream2Deployments4: DeploymentStream2Deployments4,
): string {
  return JSON.stringify(
    DeploymentStream2Deployments4$outboundSchema.parse(
      deploymentStream2Deployments4,
    ),
  );
}

export function deploymentStream2Deployments4FromJSON(
  jsonString: string,
): SafeParseResult<DeploymentStream2Deployments4, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DeploymentStream2Deployments4$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DeploymentStream2Deployments4' from JSON`,
  );
}

/** @internal */
export const DeploymentStream2DeploymentsRequestRequestBodyMessages3ContentType$inboundSchema:
  z.ZodNativeEnum<
    typeof DeploymentStream2DeploymentsRequestRequestBodyMessages3ContentType
  > = z.nativeEnum(
    DeploymentStream2DeploymentsRequestRequestBodyMessages3ContentType,
  );

/** @internal */
export const DeploymentStream2DeploymentsRequestRequestBodyMessages3ContentType$outboundSchema:
  z.ZodNativeEnum<
    typeof DeploymentStream2DeploymentsRequestRequestBodyMessages3ContentType
  > =
    DeploymentStream2DeploymentsRequestRequestBodyMessages3ContentType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeploymentStream2DeploymentsRequestRequestBodyMessages3ContentType$ {
  /** @deprecated use `DeploymentStream2DeploymentsRequestRequestBodyMessages3ContentType$inboundSchema` instead. */
  export const inboundSchema =
    DeploymentStream2DeploymentsRequestRequestBodyMessages3ContentType$inboundSchema;
  /** @deprecated use `DeploymentStream2DeploymentsRequestRequestBodyMessages3ContentType$outboundSchema` instead. */
  export const outboundSchema =
    DeploymentStream2DeploymentsRequestRequestBodyMessages3ContentType$outboundSchema;
}

/** @internal */
export const DeploymentStream2DeploymentsFormat$inboundSchema: z.ZodNativeEnum<
  typeof DeploymentStream2DeploymentsFormat
> = z.nativeEnum(DeploymentStream2DeploymentsFormat);

/** @internal */
export const DeploymentStream2DeploymentsFormat$outboundSchema: z.ZodNativeEnum<
  typeof DeploymentStream2DeploymentsFormat
> = DeploymentStream2DeploymentsFormat$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeploymentStream2DeploymentsFormat$ {
  /** @deprecated use `DeploymentStream2DeploymentsFormat$inboundSchema` instead. */
  export const inboundSchema = DeploymentStream2DeploymentsFormat$inboundSchema;
  /** @deprecated use `DeploymentStream2DeploymentsFormat$outboundSchema` instead. */
  export const outboundSchema =
    DeploymentStream2DeploymentsFormat$outboundSchema;
}

/** @internal */
export const DeploymentStream2DeploymentsInputAudio$inboundSchema: z.ZodType<
  DeploymentStream2DeploymentsInputAudio,
  z.ZodTypeDef,
  unknown
> = z.object({
  data: z.string(),
  format: DeploymentStream2DeploymentsFormat$inboundSchema,
});

/** @internal */
export type DeploymentStream2DeploymentsInputAudio$Outbound = {
  data: string;
  format: string;
};

/** @internal */
export const DeploymentStream2DeploymentsInputAudio$outboundSchema: z.ZodType<
  DeploymentStream2DeploymentsInputAudio$Outbound,
  z.ZodTypeDef,
  DeploymentStream2DeploymentsInputAudio
> = z.object({
  data: z.string(),
  format: DeploymentStream2DeploymentsFormat$outboundSchema,
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeploymentStream2DeploymentsInputAudio$ {
  /** @deprecated use `DeploymentStream2DeploymentsInputAudio$inboundSchema` instead. */
  export const inboundSchema =
    DeploymentStream2DeploymentsInputAudio$inboundSchema;
  /** @deprecated use `DeploymentStream2DeploymentsInputAudio$outboundSchema` instead. */
  export const outboundSchema =
    DeploymentStream2DeploymentsInputAudio$outboundSchema;
  /** @deprecated use `DeploymentStream2DeploymentsInputAudio$Outbound` instead. */
  export type Outbound = DeploymentStream2DeploymentsInputAudio$Outbound;
}

export function deploymentStream2DeploymentsInputAudioToJSON(
  deploymentStream2DeploymentsInputAudio:
    DeploymentStream2DeploymentsInputAudio,
): string {
  return JSON.stringify(
    DeploymentStream2DeploymentsInputAudio$outboundSchema.parse(
      deploymentStream2DeploymentsInputAudio,
    ),
  );
}

export function deploymentStream2DeploymentsInputAudioFromJSON(
  jsonString: string,
): SafeParseResult<DeploymentStream2DeploymentsInputAudio, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      DeploymentStream2DeploymentsInputAudio$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DeploymentStream2DeploymentsInputAudio' from JSON`,
  );
}

/** @internal */
export const DeploymentStream2Deployments3$inboundSchema: z.ZodType<
  DeploymentStream2Deployments3,
  z.ZodTypeDef,
  unknown
> = z.object({
  type:
    DeploymentStream2DeploymentsRequestRequestBodyMessages3ContentType$inboundSchema,
  input_audio: z.lazy(() =>
    DeploymentStream2DeploymentsInputAudio$inboundSchema
  ),
}).transform((v) => {
  return remap$(v, {
    "input_audio": "inputAudio",
  });
});

/** @internal */
export type DeploymentStream2Deployments3$Outbound = {
  type: string;
  input_audio: DeploymentStream2DeploymentsInputAudio$Outbound;
};

/** @internal */
export const DeploymentStream2Deployments3$outboundSchema: z.ZodType<
  DeploymentStream2Deployments3$Outbound,
  z.ZodTypeDef,
  DeploymentStream2Deployments3
> = z.object({
  type:
    DeploymentStream2DeploymentsRequestRequestBodyMessages3ContentType$outboundSchema,
  inputAudio: z.lazy(() =>
    DeploymentStream2DeploymentsInputAudio$outboundSchema
  ),
}).transform((v) => {
  return remap$(v, {
    inputAudio: "input_audio",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeploymentStream2Deployments3$ {
  /** @deprecated use `DeploymentStream2Deployments3$inboundSchema` instead. */
  export const inboundSchema = DeploymentStream2Deployments3$inboundSchema;
  /** @deprecated use `DeploymentStream2Deployments3$outboundSchema` instead. */
  export const outboundSchema = DeploymentStream2Deployments3$outboundSchema;
  /** @deprecated use `DeploymentStream2Deployments3$Outbound` instead. */
  export type Outbound = DeploymentStream2Deployments3$Outbound;
}

export function deploymentStream2Deployments3ToJSON(
  deploymentStream2Deployments3: DeploymentStream2Deployments3,
): string {
  return JSON.stringify(
    DeploymentStream2Deployments3$outboundSchema.parse(
      deploymentStream2Deployments3,
    ),
  );
}

export function deploymentStream2Deployments3FromJSON(
  jsonString: string,
): SafeParseResult<DeploymentStream2Deployments3, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DeploymentStream2Deployments3$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DeploymentStream2Deployments3' from JSON`,
  );
}

/** @internal */
export const DeploymentStream2DeploymentsRequestRequestBodyMessages3Type$inboundSchema:
  z.ZodNativeEnum<
    typeof DeploymentStream2DeploymentsRequestRequestBodyMessages3Type
  > = z.nativeEnum(DeploymentStream2DeploymentsRequestRequestBodyMessages3Type);

/** @internal */
export const DeploymentStream2DeploymentsRequestRequestBodyMessages3Type$outboundSchema:
  z.ZodNativeEnum<
    typeof DeploymentStream2DeploymentsRequestRequestBodyMessages3Type
  > = DeploymentStream2DeploymentsRequestRequestBodyMessages3Type$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeploymentStream2DeploymentsRequestRequestBodyMessages3Type$ {
  /** @deprecated use `DeploymentStream2DeploymentsRequestRequestBodyMessages3Type$inboundSchema` instead. */
  export const inboundSchema =
    DeploymentStream2DeploymentsRequestRequestBodyMessages3Type$inboundSchema;
  /** @deprecated use `DeploymentStream2DeploymentsRequestRequestBodyMessages3Type$outboundSchema` instead. */
  export const outboundSchema =
    DeploymentStream2DeploymentsRequestRequestBodyMessages3Type$outboundSchema;
}

/** @internal */
export const DeploymentStream2DeploymentsDetail$inboundSchema: z.ZodNativeEnum<
  typeof DeploymentStream2DeploymentsDetail
> = z.nativeEnum(DeploymentStream2DeploymentsDetail);

/** @internal */
export const DeploymentStream2DeploymentsDetail$outboundSchema: z.ZodNativeEnum<
  typeof DeploymentStream2DeploymentsDetail
> = DeploymentStream2DeploymentsDetail$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeploymentStream2DeploymentsDetail$ {
  /** @deprecated use `DeploymentStream2DeploymentsDetail$inboundSchema` instead. */
  export const inboundSchema = DeploymentStream2DeploymentsDetail$inboundSchema;
  /** @deprecated use `DeploymentStream2DeploymentsDetail$outboundSchema` instead. */
  export const outboundSchema =
    DeploymentStream2DeploymentsDetail$outboundSchema;
}

/** @internal */
export const DeploymentStream2DeploymentsImageUrl$inboundSchema: z.ZodType<
  DeploymentStream2DeploymentsImageUrl,
  z.ZodTypeDef,
  unknown
> = z.object({
  url: z.string(),
  detail: DeploymentStream2DeploymentsDetail$inboundSchema.optional(),
});

/** @internal */
export type DeploymentStream2DeploymentsImageUrl$Outbound = {
  url: string;
  detail?: string | undefined;
};

/** @internal */
export const DeploymentStream2DeploymentsImageUrl$outboundSchema: z.ZodType<
  DeploymentStream2DeploymentsImageUrl$Outbound,
  z.ZodTypeDef,
  DeploymentStream2DeploymentsImageUrl
> = z.object({
  url: z.string(),
  detail: DeploymentStream2DeploymentsDetail$outboundSchema.optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeploymentStream2DeploymentsImageUrl$ {
  /** @deprecated use `DeploymentStream2DeploymentsImageUrl$inboundSchema` instead. */
  export const inboundSchema =
    DeploymentStream2DeploymentsImageUrl$inboundSchema;
  /** @deprecated use `DeploymentStream2DeploymentsImageUrl$outboundSchema` instead. */
  export const outboundSchema =
    DeploymentStream2DeploymentsImageUrl$outboundSchema;
  /** @deprecated use `DeploymentStream2DeploymentsImageUrl$Outbound` instead. */
  export type Outbound = DeploymentStream2DeploymentsImageUrl$Outbound;
}

export function deploymentStream2DeploymentsImageUrlToJSON(
  deploymentStream2DeploymentsImageUrl: DeploymentStream2DeploymentsImageUrl,
): string {
  return JSON.stringify(
    DeploymentStream2DeploymentsImageUrl$outboundSchema.parse(
      deploymentStream2DeploymentsImageUrl,
    ),
  );
}

export function deploymentStream2DeploymentsImageUrlFromJSON(
  jsonString: string,
): SafeParseResult<DeploymentStream2DeploymentsImageUrl, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      DeploymentStream2DeploymentsImageUrl$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DeploymentStream2DeploymentsImageUrl' from JSON`,
  );
}

/** @internal */
export const DeploymentStream2Deployments2$inboundSchema: z.ZodType<
  DeploymentStream2Deployments2,
  z.ZodTypeDef,
  unknown
> = z.object({
  type:
    DeploymentStream2DeploymentsRequestRequestBodyMessages3Type$inboundSchema,
  image_url: z.lazy(() => DeploymentStream2DeploymentsImageUrl$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "image_url": "imageUrl",
  });
});

/** @internal */
export type DeploymentStream2Deployments2$Outbound = {
  type: string;
  image_url: DeploymentStream2DeploymentsImageUrl$Outbound;
};

/** @internal */
export const DeploymentStream2Deployments2$outboundSchema: z.ZodType<
  DeploymentStream2Deployments2$Outbound,
  z.ZodTypeDef,
  DeploymentStream2Deployments2
> = z.object({
  type:
    DeploymentStream2DeploymentsRequestRequestBodyMessages3Type$outboundSchema,
  imageUrl: z.lazy(() => DeploymentStream2DeploymentsImageUrl$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    imageUrl: "image_url",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeploymentStream2Deployments2$ {
  /** @deprecated use `DeploymentStream2Deployments2$inboundSchema` instead. */
  export const inboundSchema = DeploymentStream2Deployments2$inboundSchema;
  /** @deprecated use `DeploymentStream2Deployments2$outboundSchema` instead. */
  export const outboundSchema = DeploymentStream2Deployments2$outboundSchema;
  /** @deprecated use `DeploymentStream2Deployments2$Outbound` instead. */
  export type Outbound = DeploymentStream2Deployments2$Outbound;
}

export function deploymentStream2Deployments2ToJSON(
  deploymentStream2Deployments2: DeploymentStream2Deployments2,
): string {
  return JSON.stringify(
    DeploymentStream2Deployments2$outboundSchema.parse(
      deploymentStream2Deployments2,
    ),
  );
}

export function deploymentStream2Deployments2FromJSON(
  jsonString: string,
): SafeParseResult<DeploymentStream2Deployments2, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DeploymentStream2Deployments2$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DeploymentStream2Deployments2' from JSON`,
  );
}

/** @internal */
export const DeploymentStream2DeploymentsRequestRequestBodyMessagesType$inboundSchema:
  z.ZodNativeEnum<
    typeof DeploymentStream2DeploymentsRequestRequestBodyMessagesType
  > = z.nativeEnum(DeploymentStream2DeploymentsRequestRequestBodyMessagesType);

/** @internal */
export const DeploymentStream2DeploymentsRequestRequestBodyMessagesType$outboundSchema:
  z.ZodNativeEnum<
    typeof DeploymentStream2DeploymentsRequestRequestBodyMessagesType
  > = DeploymentStream2DeploymentsRequestRequestBodyMessagesType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeploymentStream2DeploymentsRequestRequestBodyMessagesType$ {
  /** @deprecated use `DeploymentStream2DeploymentsRequestRequestBodyMessagesType$inboundSchema` instead. */
  export const inboundSchema =
    DeploymentStream2DeploymentsRequestRequestBodyMessagesType$inboundSchema;
  /** @deprecated use `DeploymentStream2DeploymentsRequestRequestBodyMessagesType$outboundSchema` instead. */
  export const outboundSchema =
    DeploymentStream2DeploymentsRequestRequestBodyMessagesType$outboundSchema;
}

/** @internal */
export const DeploymentStream2Deployments1$inboundSchema: z.ZodType<
  DeploymentStream2Deployments1,
  z.ZodTypeDef,
  unknown
> = z.object({
  type:
    DeploymentStream2DeploymentsRequestRequestBodyMessagesType$inboundSchema,
  text: z.string(),
});

/** @internal */
export type DeploymentStream2Deployments1$Outbound = {
  type: string;
  text: string;
};

/** @internal */
export const DeploymentStream2Deployments1$outboundSchema: z.ZodType<
  DeploymentStream2Deployments1$Outbound,
  z.ZodTypeDef,
  DeploymentStream2Deployments1
> = z.object({
  type:
    DeploymentStream2DeploymentsRequestRequestBodyMessagesType$outboundSchema,
  text: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeploymentStream2Deployments1$ {
  /** @deprecated use `DeploymentStream2Deployments1$inboundSchema` instead. */
  export const inboundSchema = DeploymentStream2Deployments1$inboundSchema;
  /** @deprecated use `DeploymentStream2Deployments1$outboundSchema` instead. */
  export const outboundSchema = DeploymentStream2Deployments1$outboundSchema;
  /** @deprecated use `DeploymentStream2Deployments1$Outbound` instead. */
  export type Outbound = DeploymentStream2Deployments1$Outbound;
}

export function deploymentStream2Deployments1ToJSON(
  deploymentStream2Deployments1: DeploymentStream2Deployments1,
): string {
  return JSON.stringify(
    DeploymentStream2Deployments1$outboundSchema.parse(
      deploymentStream2Deployments1,
    ),
  );
}

export function deploymentStream2Deployments1FromJSON(
  jsonString: string,
): SafeParseResult<DeploymentStream2Deployments1, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DeploymentStream2Deployments1$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DeploymentStream2Deployments1' from JSON`,
  );
}

/** @internal */
export const DeploymentStreamContentDeploymentsRequest2$inboundSchema:
  z.ZodType<DeploymentStreamContentDeploymentsRequest2, z.ZodTypeDef, unknown> =
    z.union([
      z.lazy(() => DeploymentStream2Deployments1$inboundSchema),
      z.lazy(() => DeploymentStream2Deployments2$inboundSchema),
      z.lazy(() => DeploymentStream2Deployments3$inboundSchema),
      z.lazy(() => DeploymentStream2Deployments4$inboundSchema),
    ]);

/** @internal */
export type DeploymentStreamContentDeploymentsRequest2$Outbound =
  | DeploymentStream2Deployments1$Outbound
  | DeploymentStream2Deployments2$Outbound
  | DeploymentStream2Deployments3$Outbound
  | DeploymentStream2Deployments4$Outbound;

/** @internal */
export const DeploymentStreamContentDeploymentsRequest2$outboundSchema:
  z.ZodType<
    DeploymentStreamContentDeploymentsRequest2$Outbound,
    z.ZodTypeDef,
    DeploymentStreamContentDeploymentsRequest2
  > = z.union([
    z.lazy(() => DeploymentStream2Deployments1$outboundSchema),
    z.lazy(() => DeploymentStream2Deployments2$outboundSchema),
    z.lazy(() => DeploymentStream2Deployments3$outboundSchema),
    z.lazy(() => DeploymentStream2Deployments4$outboundSchema),
  ]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeploymentStreamContentDeploymentsRequest2$ {
  /** @deprecated use `DeploymentStreamContentDeploymentsRequest2$inboundSchema` instead. */
  export const inboundSchema =
    DeploymentStreamContentDeploymentsRequest2$inboundSchema;
  /** @deprecated use `DeploymentStreamContentDeploymentsRequest2$outboundSchema` instead. */
  export const outboundSchema =
    DeploymentStreamContentDeploymentsRequest2$outboundSchema;
  /** @deprecated use `DeploymentStreamContentDeploymentsRequest2$Outbound` instead. */
  export type Outbound = DeploymentStreamContentDeploymentsRequest2$Outbound;
}

export function deploymentStreamContentDeploymentsRequest2ToJSON(
  deploymentStreamContentDeploymentsRequest2:
    DeploymentStreamContentDeploymentsRequest2,
): string {
  return JSON.stringify(
    DeploymentStreamContentDeploymentsRequest2$outboundSchema.parse(
      deploymentStreamContentDeploymentsRequest2,
    ),
  );
}

export function deploymentStreamContentDeploymentsRequest2FromJSON(
  jsonString: string,
): SafeParseResult<
  DeploymentStreamContentDeploymentsRequest2,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      DeploymentStreamContentDeploymentsRequest2$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'DeploymentStreamContentDeploymentsRequest2' from JSON`,
  );
}

/** @internal */
export const DeploymentStreamMessagesContent$inboundSchema: z.ZodType<
  DeploymentStreamMessagesContent,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.string(),
  z.array(z.union([
    z.lazy(() => DeploymentStream2Deployments1$inboundSchema),
    z.lazy(() => DeploymentStream2Deployments2$inboundSchema),
    z.lazy(() => DeploymentStream2Deployments3$inboundSchema),
    z.lazy(() => DeploymentStream2Deployments4$inboundSchema),
  ])),
]);

/** @internal */
export type DeploymentStreamMessagesContent$Outbound =
  | string
  | Array<
    | DeploymentStream2Deployments1$Outbound
    | DeploymentStream2Deployments2$Outbound
    | DeploymentStream2Deployments3$Outbound
    | DeploymentStream2Deployments4$Outbound
  >;

/** @internal */
export const DeploymentStreamMessagesContent$outboundSchema: z.ZodType<
  DeploymentStreamMessagesContent$Outbound,
  z.ZodTypeDef,
  DeploymentStreamMessagesContent
> = z.union([
  z.string(),
  z.array(z.union([
    z.lazy(() => DeploymentStream2Deployments1$outboundSchema),
    z.lazy(() => DeploymentStream2Deployments2$outboundSchema),
    z.lazy(() => DeploymentStream2Deployments3$outboundSchema),
    z.lazy(() => DeploymentStream2Deployments4$outboundSchema),
  ])),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeploymentStreamMessagesContent$ {
  /** @deprecated use `DeploymentStreamMessagesContent$inboundSchema` instead. */
  export const inboundSchema = DeploymentStreamMessagesContent$inboundSchema;
  /** @deprecated use `DeploymentStreamMessagesContent$outboundSchema` instead. */
  export const outboundSchema = DeploymentStreamMessagesContent$outboundSchema;
  /** @deprecated use `DeploymentStreamMessagesContent$Outbound` instead. */
  export type Outbound = DeploymentStreamMessagesContent$Outbound;
}

export function deploymentStreamMessagesContentToJSON(
  deploymentStreamMessagesContent: DeploymentStreamMessagesContent,
): string {
  return JSON.stringify(
    DeploymentStreamMessagesContent$outboundSchema.parse(
      deploymentStreamMessagesContent,
    ),
  );
}

export function deploymentStreamMessagesContentFromJSON(
  jsonString: string,
): SafeParseResult<DeploymentStreamMessagesContent, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DeploymentStreamMessagesContent$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DeploymentStreamMessagesContent' from JSON`,
  );
}

/** @internal */
export const DeploymentStreamMessagesUserMessage$inboundSchema: z.ZodType<
  DeploymentStreamMessagesUserMessage,
  z.ZodTypeDef,
  unknown
> = z.object({
  role: DeploymentStreamMessagesDeploymentsRequestRole$inboundSchema,
  name: z.string().optional(),
  content: z.union([
    z.string(),
    z.array(z.union([
      z.lazy(() => DeploymentStream2Deployments1$inboundSchema),
      z.lazy(() => DeploymentStream2Deployments2$inboundSchema),
      z.lazy(() => DeploymentStream2Deployments3$inboundSchema),
      z.lazy(() => DeploymentStream2Deployments4$inboundSchema),
    ])),
  ]),
});

/** @internal */
export type DeploymentStreamMessagesUserMessage$Outbound = {
  role: string;
  name?: string | undefined;
  content:
    | string
    | Array<
      | DeploymentStream2Deployments1$Outbound
      | DeploymentStream2Deployments2$Outbound
      | DeploymentStream2Deployments3$Outbound
      | DeploymentStream2Deployments4$Outbound
    >;
};

/** @internal */
export const DeploymentStreamMessagesUserMessage$outboundSchema: z.ZodType<
  DeploymentStreamMessagesUserMessage$Outbound,
  z.ZodTypeDef,
  DeploymentStreamMessagesUserMessage
> = z.object({
  role: DeploymentStreamMessagesDeploymentsRequestRole$outboundSchema,
  name: z.string().optional(),
  content: z.union([
    z.string(),
    z.array(z.union([
      z.lazy(() => DeploymentStream2Deployments1$outboundSchema),
      z.lazy(() => DeploymentStream2Deployments2$outboundSchema),
      z.lazy(() => DeploymentStream2Deployments3$outboundSchema),
      z.lazy(() => DeploymentStream2Deployments4$outboundSchema),
    ])),
  ]),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeploymentStreamMessagesUserMessage$ {
  /** @deprecated use `DeploymentStreamMessagesUserMessage$inboundSchema` instead. */
  export const inboundSchema =
    DeploymentStreamMessagesUserMessage$inboundSchema;
  /** @deprecated use `DeploymentStreamMessagesUserMessage$outboundSchema` instead. */
  export const outboundSchema =
    DeploymentStreamMessagesUserMessage$outboundSchema;
  /** @deprecated use `DeploymentStreamMessagesUserMessage$Outbound` instead. */
  export type Outbound = DeploymentStreamMessagesUserMessage$Outbound;
}

export function deploymentStreamMessagesUserMessageToJSON(
  deploymentStreamMessagesUserMessage: DeploymentStreamMessagesUserMessage,
): string {
  return JSON.stringify(
    DeploymentStreamMessagesUserMessage$outboundSchema.parse(
      deploymentStreamMessagesUserMessage,
    ),
  );
}

export function deploymentStreamMessagesUserMessageFromJSON(
  jsonString: string,
): SafeParseResult<DeploymentStreamMessagesUserMessage, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      DeploymentStreamMessagesUserMessage$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DeploymentStreamMessagesUserMessage' from JSON`,
  );
}

/** @internal */
export const DeploymentStreamMessagesDeploymentsRole$inboundSchema:
  z.ZodNativeEnum<typeof DeploymentStreamMessagesDeploymentsRole> = z
    .nativeEnum(DeploymentStreamMessagesDeploymentsRole);

/** @internal */
export const DeploymentStreamMessagesDeploymentsRole$outboundSchema:
  z.ZodNativeEnum<typeof DeploymentStreamMessagesDeploymentsRole> =
    DeploymentStreamMessagesDeploymentsRole$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeploymentStreamMessagesDeploymentsRole$ {
  /** @deprecated use `DeploymentStreamMessagesDeploymentsRole$inboundSchema` instead. */
  export const inboundSchema =
    DeploymentStreamMessagesDeploymentsRole$inboundSchema;
  /** @deprecated use `DeploymentStreamMessagesDeploymentsRole$outboundSchema` instead. */
  export const outboundSchema =
    DeploymentStreamMessagesDeploymentsRole$outboundSchema;
}

/** @internal */
export const DeploymentStreamMessagesSystemMessage$inboundSchema: z.ZodType<
  DeploymentStreamMessagesSystemMessage,
  z.ZodTypeDef,
  unknown
> = z.object({
  role: DeploymentStreamMessagesDeploymentsRole$inboundSchema,
  content: z.string(),
  name: z.string().optional(),
});

/** @internal */
export type DeploymentStreamMessagesSystemMessage$Outbound = {
  role: string;
  content: string;
  name?: string | undefined;
};

/** @internal */
export const DeploymentStreamMessagesSystemMessage$outboundSchema: z.ZodType<
  DeploymentStreamMessagesSystemMessage$Outbound,
  z.ZodTypeDef,
  DeploymentStreamMessagesSystemMessage
> = z.object({
  role: DeploymentStreamMessagesDeploymentsRole$outboundSchema,
  content: z.string(),
  name: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeploymentStreamMessagesSystemMessage$ {
  /** @deprecated use `DeploymentStreamMessagesSystemMessage$inboundSchema` instead. */
  export const inboundSchema =
    DeploymentStreamMessagesSystemMessage$inboundSchema;
  /** @deprecated use `DeploymentStreamMessagesSystemMessage$outboundSchema` instead. */
  export const outboundSchema =
    DeploymentStreamMessagesSystemMessage$outboundSchema;
  /** @deprecated use `DeploymentStreamMessagesSystemMessage$Outbound` instead. */
  export type Outbound = DeploymentStreamMessagesSystemMessage$Outbound;
}

export function deploymentStreamMessagesSystemMessageToJSON(
  deploymentStreamMessagesSystemMessage: DeploymentStreamMessagesSystemMessage,
): string {
  return JSON.stringify(
    DeploymentStreamMessagesSystemMessage$outboundSchema.parse(
      deploymentStreamMessagesSystemMessage,
    ),
  );
}

export function deploymentStreamMessagesSystemMessageFromJSON(
  jsonString: string,
): SafeParseResult<DeploymentStreamMessagesSystemMessage, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      DeploymentStreamMessagesSystemMessage$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DeploymentStreamMessagesSystemMessage' from JSON`,
  );
}

/** @internal */
export const DeploymentStreamMessagesRole$inboundSchema: z.ZodNativeEnum<
  typeof DeploymentStreamMessagesRole
> = z.nativeEnum(DeploymentStreamMessagesRole);

/** @internal */
export const DeploymentStreamMessagesRole$outboundSchema: z.ZodNativeEnum<
  typeof DeploymentStreamMessagesRole
> = DeploymentStreamMessagesRole$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeploymentStreamMessagesRole$ {
  /** @deprecated use `DeploymentStreamMessagesRole$inboundSchema` instead. */
  export const inboundSchema = DeploymentStreamMessagesRole$inboundSchema;
  /** @deprecated use `DeploymentStreamMessagesRole$outboundSchema` instead. */
  export const outboundSchema = DeploymentStreamMessagesRole$outboundSchema;
}

/** @internal */
export const DeploymentStreamMessagesDeveloperMessage$inboundSchema: z.ZodType<
  DeploymentStreamMessagesDeveloperMessage,
  z.ZodTypeDef,
  unknown
> = z.object({
  role: DeploymentStreamMessagesRole$inboundSchema,
  content: z.string(),
  name: z.string().optional(),
});

/** @internal */
export type DeploymentStreamMessagesDeveloperMessage$Outbound = {
  role: string;
  content: string;
  name?: string | undefined;
};

/** @internal */
export const DeploymentStreamMessagesDeveloperMessage$outboundSchema: z.ZodType<
  DeploymentStreamMessagesDeveloperMessage$Outbound,
  z.ZodTypeDef,
  DeploymentStreamMessagesDeveloperMessage
> = z.object({
  role: DeploymentStreamMessagesRole$outboundSchema,
  content: z.string(),
  name: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeploymentStreamMessagesDeveloperMessage$ {
  /** @deprecated use `DeploymentStreamMessagesDeveloperMessage$inboundSchema` instead. */
  export const inboundSchema =
    DeploymentStreamMessagesDeveloperMessage$inboundSchema;
  /** @deprecated use `DeploymentStreamMessagesDeveloperMessage$outboundSchema` instead. */
  export const outboundSchema =
    DeploymentStreamMessagesDeveloperMessage$outboundSchema;
  /** @deprecated use `DeploymentStreamMessagesDeveloperMessage$Outbound` instead. */
  export type Outbound = DeploymentStreamMessagesDeveloperMessage$Outbound;
}

export function deploymentStreamMessagesDeveloperMessageToJSON(
  deploymentStreamMessagesDeveloperMessage:
    DeploymentStreamMessagesDeveloperMessage,
): string {
  return JSON.stringify(
    DeploymentStreamMessagesDeveloperMessage$outboundSchema.parse(
      deploymentStreamMessagesDeveloperMessage,
    ),
  );
}

export function deploymentStreamMessagesDeveloperMessageFromJSON(
  jsonString: string,
): SafeParseResult<
  DeploymentStreamMessagesDeveloperMessage,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      DeploymentStreamMessagesDeveloperMessage$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'DeploymentStreamMessagesDeveloperMessage' from JSON`,
  );
}

/** @internal */
export const DeploymentStreamMessages$inboundSchema: z.ZodType<
  DeploymentStreamMessages,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => DeploymentStreamMessagesDeveloperMessage$inboundSchema),
  z.lazy(() => DeploymentStreamMessagesSystemMessage$inboundSchema),
  z.lazy(() => DeploymentStreamMessagesUserMessage$inboundSchema),
  z.lazy(() => DeploymentStreamMessagesToolMessage$inboundSchema),
  z.lazy(() => DeploymentStreamMessagesAssistantMessage$inboundSchema),
]);

/** @internal */
export type DeploymentStreamMessages$Outbound =
  | DeploymentStreamMessagesDeveloperMessage$Outbound
  | DeploymentStreamMessagesSystemMessage$Outbound
  | DeploymentStreamMessagesUserMessage$Outbound
  | DeploymentStreamMessagesToolMessage$Outbound
  | DeploymentStreamMessagesAssistantMessage$Outbound;

/** @internal */
export const DeploymentStreamMessages$outboundSchema: z.ZodType<
  DeploymentStreamMessages$Outbound,
  z.ZodTypeDef,
  DeploymentStreamMessages
> = z.union([
  z.lazy(() => DeploymentStreamMessagesDeveloperMessage$outboundSchema),
  z.lazy(() => DeploymentStreamMessagesSystemMessage$outboundSchema),
  z.lazy(() => DeploymentStreamMessagesUserMessage$outboundSchema),
  z.lazy(() => DeploymentStreamMessagesToolMessage$outboundSchema),
  z.lazy(() => DeploymentStreamMessagesAssistantMessage$outboundSchema),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeploymentStreamMessages$ {
  /** @deprecated use `DeploymentStreamMessages$inboundSchema` instead. */
  export const inboundSchema = DeploymentStreamMessages$inboundSchema;
  /** @deprecated use `DeploymentStreamMessages$outboundSchema` instead. */
  export const outboundSchema = DeploymentStreamMessages$outboundSchema;
  /** @deprecated use `DeploymentStreamMessages$Outbound` instead. */
  export type Outbound = DeploymentStreamMessages$Outbound;
}

export function deploymentStreamMessagesToJSON(
  deploymentStreamMessages: DeploymentStreamMessages,
): string {
  return JSON.stringify(
    DeploymentStreamMessages$outboundSchema.parse(deploymentStreamMessages),
  );
}

export function deploymentStreamMessagesFromJSON(
  jsonString: string,
): SafeParseResult<DeploymentStreamMessages, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DeploymentStreamMessages$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DeploymentStreamMessages' from JSON`,
  );
}

/** @internal */
export const DeploymentStreamMetadata$inboundSchema: z.ZodType<
  DeploymentStreamMetadata,
  z.ZodTypeDef,
  unknown
> = z.object({
  file_name: z.string().optional(),
  file_type: z.string().optional(),
  page_number: z.number().optional(),
}).transform((v) => {
  return remap$(v, {
    "file_name": "fileName",
    "file_type": "fileType",
    "page_number": "pageNumber",
  });
});

/** @internal */
export type DeploymentStreamMetadata$Outbound = {
  file_name?: string | undefined;
  file_type?: string | undefined;
  page_number?: number | undefined;
};

/** @internal */
export const DeploymentStreamMetadata$outboundSchema: z.ZodType<
  DeploymentStreamMetadata$Outbound,
  z.ZodTypeDef,
  DeploymentStreamMetadata
> = z.object({
  fileName: z.string().optional(),
  fileType: z.string().optional(),
  pageNumber: z.number().optional(),
}).transform((v) => {
  return remap$(v, {
    fileName: "file_name",
    fileType: "file_type",
    pageNumber: "page_number",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeploymentStreamMetadata$ {
  /** @deprecated use `DeploymentStreamMetadata$inboundSchema` instead. */
  export const inboundSchema = DeploymentStreamMetadata$inboundSchema;
  /** @deprecated use `DeploymentStreamMetadata$outboundSchema` instead. */
  export const outboundSchema = DeploymentStreamMetadata$outboundSchema;
  /** @deprecated use `DeploymentStreamMetadata$Outbound` instead. */
  export type Outbound = DeploymentStreamMetadata$Outbound;
}

export function deploymentStreamMetadataToJSON(
  deploymentStreamMetadata: DeploymentStreamMetadata,
): string {
  return JSON.stringify(
    DeploymentStreamMetadata$outboundSchema.parse(deploymentStreamMetadata),
  );
}

export function deploymentStreamMetadataFromJSON(
  jsonString: string,
): SafeParseResult<DeploymentStreamMetadata, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DeploymentStreamMetadata$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DeploymentStreamMetadata' from JSON`,
  );
}

/** @internal */
export const DeploymentStreamDocuments$inboundSchema: z.ZodType<
  DeploymentStreamDocuments,
  z.ZodTypeDef,
  unknown
> = z.object({
  text: z.string(),
  metadata: z.lazy(() => DeploymentStreamMetadata$inboundSchema).optional(),
});

/** @internal */
export type DeploymentStreamDocuments$Outbound = {
  text: string;
  metadata?: DeploymentStreamMetadata$Outbound | undefined;
};

/** @internal */
export const DeploymentStreamDocuments$outboundSchema: z.ZodType<
  DeploymentStreamDocuments$Outbound,
  z.ZodTypeDef,
  DeploymentStreamDocuments
> = z.object({
  text: z.string(),
  metadata: z.lazy(() => DeploymentStreamMetadata$outboundSchema).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeploymentStreamDocuments$ {
  /** @deprecated use `DeploymentStreamDocuments$inboundSchema` instead. */
  export const inboundSchema = DeploymentStreamDocuments$inboundSchema;
  /** @deprecated use `DeploymentStreamDocuments$outboundSchema` instead. */
  export const outboundSchema = DeploymentStreamDocuments$outboundSchema;
  /** @deprecated use `DeploymentStreamDocuments$Outbound` instead. */
  export type Outbound = DeploymentStreamDocuments$Outbound;
}

export function deploymentStreamDocumentsToJSON(
  deploymentStreamDocuments: DeploymentStreamDocuments,
): string {
  return JSON.stringify(
    DeploymentStreamDocuments$outboundSchema.parse(deploymentStreamDocuments),
  );
}

export function deploymentStreamDocumentsFromJSON(
  jsonString: string,
): SafeParseResult<DeploymentStreamDocuments, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DeploymentStreamDocuments$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DeploymentStreamDocuments' from JSON`,
  );
}

/** @internal */
export const DeploymentStreamInvokeOptions$inboundSchema: z.ZodType<
  DeploymentStreamInvokeOptions,
  z.ZodTypeDef,
  unknown
> = z.object({
  include_retrievals: z.boolean().default(false),
  mock_response: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "include_retrievals": "includeRetrievals",
    "mock_response": "mockResponse",
  });
});

/** @internal */
export type DeploymentStreamInvokeOptions$Outbound = {
  include_retrievals: boolean;
  mock_response?: string | undefined;
};

/** @internal */
export const DeploymentStreamInvokeOptions$outboundSchema: z.ZodType<
  DeploymentStreamInvokeOptions$Outbound,
  z.ZodTypeDef,
  DeploymentStreamInvokeOptions
> = z.object({
  includeRetrievals: z.boolean().default(false),
  mockResponse: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    includeRetrievals: "include_retrievals",
    mockResponse: "mock_response",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeploymentStreamInvokeOptions$ {
  /** @deprecated use `DeploymentStreamInvokeOptions$inboundSchema` instead. */
  export const inboundSchema = DeploymentStreamInvokeOptions$inboundSchema;
  /** @deprecated use `DeploymentStreamInvokeOptions$outboundSchema` instead. */
  export const outboundSchema = DeploymentStreamInvokeOptions$outboundSchema;
  /** @deprecated use `DeploymentStreamInvokeOptions$Outbound` instead. */
  export type Outbound = DeploymentStreamInvokeOptions$Outbound;
}

export function deploymentStreamInvokeOptionsToJSON(
  deploymentStreamInvokeOptions: DeploymentStreamInvokeOptions,
): string {
  return JSON.stringify(
    DeploymentStreamInvokeOptions$outboundSchema.parse(
      deploymentStreamInvokeOptions,
    ),
  );
}

export function deploymentStreamInvokeOptionsFromJSON(
  jsonString: string,
): SafeParseResult<DeploymentStreamInvokeOptions, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DeploymentStreamInvokeOptions$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DeploymentStreamInvokeOptions' from JSON`,
  );
}

/** @internal */
export const DeploymentStreamThread$inboundSchema: z.ZodType<
  DeploymentStreamThread,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  tags: z.array(z.string()).optional(),
});

/** @internal */
export type DeploymentStreamThread$Outbound = {
  id: string;
  tags?: Array<string> | undefined;
};

/** @internal */
export const DeploymentStreamThread$outboundSchema: z.ZodType<
  DeploymentStreamThread$Outbound,
  z.ZodTypeDef,
  DeploymentStreamThread
> = z.object({
  id: z.string(),
  tags: z.array(z.string()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeploymentStreamThread$ {
  /** @deprecated use `DeploymentStreamThread$inboundSchema` instead. */
  export const inboundSchema = DeploymentStreamThread$inboundSchema;
  /** @deprecated use `DeploymentStreamThread$outboundSchema` instead. */
  export const outboundSchema = DeploymentStreamThread$outboundSchema;
  /** @deprecated use `DeploymentStreamThread$Outbound` instead. */
  export type Outbound = DeploymentStreamThread$Outbound;
}

export function deploymentStreamThreadToJSON(
  deploymentStreamThread: DeploymentStreamThread,
): string {
  return JSON.stringify(
    DeploymentStreamThread$outboundSchema.parse(deploymentStreamThread),
  );
}

export function deploymentStreamThreadFromJSON(
  jsonString: string,
): SafeParseResult<DeploymentStreamThread, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DeploymentStreamThread$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DeploymentStreamThread' from JSON`,
  );
}

/** @internal */
export const DeploymentStreamDollarOrDollarExists$inboundSchema: z.ZodType<
  DeploymentStreamDollarOrDollarExists,
  z.ZodTypeDef,
  unknown
> = z.object({
  $exists: z.boolean(),
}).transform((v) => {
  return remap$(v, {
    "$exists": "dollarExists",
  });
});

/** @internal */
export type DeploymentStreamDollarOrDollarExists$Outbound = {
  $exists: boolean;
};

/** @internal */
export const DeploymentStreamDollarOrDollarExists$outboundSchema: z.ZodType<
  DeploymentStreamDollarOrDollarExists$Outbound,
  z.ZodTypeDef,
  DeploymentStreamDollarOrDollarExists
> = z.object({
  dollarExists: z.boolean(),
}).transform((v) => {
  return remap$(v, {
    dollarExists: "$exists",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeploymentStreamDollarOrDollarExists$ {
  /** @deprecated use `DeploymentStreamDollarOrDollarExists$inboundSchema` instead. */
  export const inboundSchema =
    DeploymentStreamDollarOrDollarExists$inboundSchema;
  /** @deprecated use `DeploymentStreamDollarOrDollarExists$outboundSchema` instead. */
  export const outboundSchema =
    DeploymentStreamDollarOrDollarExists$outboundSchema;
  /** @deprecated use `DeploymentStreamDollarOrDollarExists$Outbound` instead. */
  export type Outbound = DeploymentStreamDollarOrDollarExists$Outbound;
}

export function deploymentStreamDollarOrDollarExistsToJSON(
  deploymentStreamDollarOrDollarExists: DeploymentStreamDollarOrDollarExists,
): string {
  return JSON.stringify(
    DeploymentStreamDollarOrDollarExists$outboundSchema.parse(
      deploymentStreamDollarOrDollarExists,
    ),
  );
}

export function deploymentStreamDollarOrDollarExistsFromJSON(
  jsonString: string,
): SafeParseResult<DeploymentStreamDollarOrDollarExists, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      DeploymentStreamDollarOrDollarExists$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DeploymentStreamDollarOrDollarExists' from JSON`,
  );
}

/** @internal */
export const DeploymentStreamDollarOrDeploymentsDollarNin$inboundSchema:
  z.ZodType<
    DeploymentStreamDollarOrDeploymentsDollarNin,
    z.ZodTypeDef,
    unknown
  > = z.union([z.string(), z.number(), z.boolean()]);

/** @internal */
export type DeploymentStreamDollarOrDeploymentsDollarNin$Outbound =
  | string
  | number
  | boolean;

/** @internal */
export const DeploymentStreamDollarOrDeploymentsDollarNin$outboundSchema:
  z.ZodType<
    DeploymentStreamDollarOrDeploymentsDollarNin$Outbound,
    z.ZodTypeDef,
    DeploymentStreamDollarOrDeploymentsDollarNin
  > = z.union([z.string(), z.number(), z.boolean()]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeploymentStreamDollarOrDeploymentsDollarNin$ {
  /** @deprecated use `DeploymentStreamDollarOrDeploymentsDollarNin$inboundSchema` instead. */
  export const inboundSchema =
    DeploymentStreamDollarOrDeploymentsDollarNin$inboundSchema;
  /** @deprecated use `DeploymentStreamDollarOrDeploymentsDollarNin$outboundSchema` instead. */
  export const outboundSchema =
    DeploymentStreamDollarOrDeploymentsDollarNin$outboundSchema;
  /** @deprecated use `DeploymentStreamDollarOrDeploymentsDollarNin$Outbound` instead. */
  export type Outbound = DeploymentStreamDollarOrDeploymentsDollarNin$Outbound;
}

export function deploymentStreamDollarOrDeploymentsDollarNinToJSON(
  deploymentStreamDollarOrDeploymentsDollarNin:
    DeploymentStreamDollarOrDeploymentsDollarNin,
): string {
  return JSON.stringify(
    DeploymentStreamDollarOrDeploymentsDollarNin$outboundSchema.parse(
      deploymentStreamDollarOrDeploymentsDollarNin,
    ),
  );
}

export function deploymentStreamDollarOrDeploymentsDollarNinFromJSON(
  jsonString: string,
): SafeParseResult<
  DeploymentStreamDollarOrDeploymentsDollarNin,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      DeploymentStreamDollarOrDeploymentsDollarNin$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'DeploymentStreamDollarOrDeploymentsDollarNin' from JSON`,
  );
}

/** @internal */
export const DeploymentStreamDollarOrDollarNin$inboundSchema: z.ZodType<
  DeploymentStreamDollarOrDollarNin,
  z.ZodTypeDef,
  unknown
> = z.object({
  $nin: z.array(z.union([z.string(), z.number(), z.boolean()])),
}).transform((v) => {
  return remap$(v, {
    "$nin": "dollarNin",
  });
});

/** @internal */
export type DeploymentStreamDollarOrDollarNin$Outbound = {
  $nin: Array<string | number | boolean>;
};

/** @internal */
export const DeploymentStreamDollarOrDollarNin$outboundSchema: z.ZodType<
  DeploymentStreamDollarOrDollarNin$Outbound,
  z.ZodTypeDef,
  DeploymentStreamDollarOrDollarNin
> = z.object({
  dollarNin: z.array(z.union([z.string(), z.number(), z.boolean()])),
}).transform((v) => {
  return remap$(v, {
    dollarNin: "$nin",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeploymentStreamDollarOrDollarNin$ {
  /** @deprecated use `DeploymentStreamDollarOrDollarNin$inboundSchema` instead. */
  export const inboundSchema = DeploymentStreamDollarOrDollarNin$inboundSchema;
  /** @deprecated use `DeploymentStreamDollarOrDollarNin$outboundSchema` instead. */
  export const outboundSchema =
    DeploymentStreamDollarOrDollarNin$outboundSchema;
  /** @deprecated use `DeploymentStreamDollarOrDollarNin$Outbound` instead. */
  export type Outbound = DeploymentStreamDollarOrDollarNin$Outbound;
}

export function deploymentStreamDollarOrDollarNinToJSON(
  deploymentStreamDollarOrDollarNin: DeploymentStreamDollarOrDollarNin,
): string {
  return JSON.stringify(
    DeploymentStreamDollarOrDollarNin$outboundSchema.parse(
      deploymentStreamDollarOrDollarNin,
    ),
  );
}

export function deploymentStreamDollarOrDollarNinFromJSON(
  jsonString: string,
): SafeParseResult<DeploymentStreamDollarOrDollarNin, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DeploymentStreamDollarOrDollarNin$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DeploymentStreamDollarOrDollarNin' from JSON`,
  );
}

/** @internal */
export const DeploymentStreamDollarOrDeploymentsDollarIn$inboundSchema:
  z.ZodType<
    DeploymentStreamDollarOrDeploymentsDollarIn,
    z.ZodTypeDef,
    unknown
  > = z.union([z.string(), z.number(), z.boolean()]);

/** @internal */
export type DeploymentStreamDollarOrDeploymentsDollarIn$Outbound =
  | string
  | number
  | boolean;

/** @internal */
export const DeploymentStreamDollarOrDeploymentsDollarIn$outboundSchema:
  z.ZodType<
    DeploymentStreamDollarOrDeploymentsDollarIn$Outbound,
    z.ZodTypeDef,
    DeploymentStreamDollarOrDeploymentsDollarIn
  > = z.union([z.string(), z.number(), z.boolean()]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeploymentStreamDollarOrDeploymentsDollarIn$ {
  /** @deprecated use `DeploymentStreamDollarOrDeploymentsDollarIn$inboundSchema` instead. */
  export const inboundSchema =
    DeploymentStreamDollarOrDeploymentsDollarIn$inboundSchema;
  /** @deprecated use `DeploymentStreamDollarOrDeploymentsDollarIn$outboundSchema` instead. */
  export const outboundSchema =
    DeploymentStreamDollarOrDeploymentsDollarIn$outboundSchema;
  /** @deprecated use `DeploymentStreamDollarOrDeploymentsDollarIn$Outbound` instead. */
  export type Outbound = DeploymentStreamDollarOrDeploymentsDollarIn$Outbound;
}

export function deploymentStreamDollarOrDeploymentsDollarInToJSON(
  deploymentStreamDollarOrDeploymentsDollarIn:
    DeploymentStreamDollarOrDeploymentsDollarIn,
): string {
  return JSON.stringify(
    DeploymentStreamDollarOrDeploymentsDollarIn$outboundSchema.parse(
      deploymentStreamDollarOrDeploymentsDollarIn,
    ),
  );
}

export function deploymentStreamDollarOrDeploymentsDollarInFromJSON(
  jsonString: string,
): SafeParseResult<
  DeploymentStreamDollarOrDeploymentsDollarIn,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      DeploymentStreamDollarOrDeploymentsDollarIn$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'DeploymentStreamDollarOrDeploymentsDollarIn' from JSON`,
  );
}

/** @internal */
export const DeploymentStreamDollarOrDollarIn$inboundSchema: z.ZodType<
  DeploymentStreamDollarOrDollarIn,
  z.ZodTypeDef,
  unknown
> = z.object({
  $in: z.array(z.union([z.string(), z.number(), z.boolean()])),
}).transform((v) => {
  return remap$(v, {
    "$in": "dollarIn",
  });
});

/** @internal */
export type DeploymentStreamDollarOrDollarIn$Outbound = {
  $in: Array<string | number | boolean>;
};

/** @internal */
export const DeploymentStreamDollarOrDollarIn$outboundSchema: z.ZodType<
  DeploymentStreamDollarOrDollarIn$Outbound,
  z.ZodTypeDef,
  DeploymentStreamDollarOrDollarIn
> = z.object({
  dollarIn: z.array(z.union([z.string(), z.number(), z.boolean()])),
}).transform((v) => {
  return remap$(v, {
    dollarIn: "$in",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeploymentStreamDollarOrDollarIn$ {
  /** @deprecated use `DeploymentStreamDollarOrDollarIn$inboundSchema` instead. */
  export const inboundSchema = DeploymentStreamDollarOrDollarIn$inboundSchema;
  /** @deprecated use `DeploymentStreamDollarOrDollarIn$outboundSchema` instead. */
  export const outboundSchema = DeploymentStreamDollarOrDollarIn$outboundSchema;
  /** @deprecated use `DeploymentStreamDollarOrDollarIn$Outbound` instead. */
  export type Outbound = DeploymentStreamDollarOrDollarIn$Outbound;
}

export function deploymentStreamDollarOrDollarInToJSON(
  deploymentStreamDollarOrDollarIn: DeploymentStreamDollarOrDollarIn,
): string {
  return JSON.stringify(
    DeploymentStreamDollarOrDollarIn$outboundSchema.parse(
      deploymentStreamDollarOrDollarIn,
    ),
  );
}

export function deploymentStreamDollarOrDollarInFromJSON(
  jsonString: string,
): SafeParseResult<DeploymentStreamDollarOrDollarIn, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DeploymentStreamDollarOrDollarIn$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DeploymentStreamDollarOrDollarIn' from JSON`,
  );
}

/** @internal */
export const DeploymentStreamDollarOrDollarLte$inboundSchema: z.ZodType<
  DeploymentStreamDollarOrDollarLte,
  z.ZodTypeDef,
  unknown
> = z.object({
  $lte: z.number(),
}).transform((v) => {
  return remap$(v, {
    "$lte": "dollarLte",
  });
});

/** @internal */
export type DeploymentStreamDollarOrDollarLte$Outbound = {
  $lte: number;
};

/** @internal */
export const DeploymentStreamDollarOrDollarLte$outboundSchema: z.ZodType<
  DeploymentStreamDollarOrDollarLte$Outbound,
  z.ZodTypeDef,
  DeploymentStreamDollarOrDollarLte
> = z.object({
  dollarLte: z.number(),
}).transform((v) => {
  return remap$(v, {
    dollarLte: "$lte",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeploymentStreamDollarOrDollarLte$ {
  /** @deprecated use `DeploymentStreamDollarOrDollarLte$inboundSchema` instead. */
  export const inboundSchema = DeploymentStreamDollarOrDollarLte$inboundSchema;
  /** @deprecated use `DeploymentStreamDollarOrDollarLte$outboundSchema` instead. */
  export const outboundSchema =
    DeploymentStreamDollarOrDollarLte$outboundSchema;
  /** @deprecated use `DeploymentStreamDollarOrDollarLte$Outbound` instead. */
  export type Outbound = DeploymentStreamDollarOrDollarLte$Outbound;
}

export function deploymentStreamDollarOrDollarLteToJSON(
  deploymentStreamDollarOrDollarLte: DeploymentStreamDollarOrDollarLte,
): string {
  return JSON.stringify(
    DeploymentStreamDollarOrDollarLte$outboundSchema.parse(
      deploymentStreamDollarOrDollarLte,
    ),
  );
}

export function deploymentStreamDollarOrDollarLteFromJSON(
  jsonString: string,
): SafeParseResult<DeploymentStreamDollarOrDollarLte, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DeploymentStreamDollarOrDollarLte$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DeploymentStreamDollarOrDollarLte' from JSON`,
  );
}

/** @internal */
export const DeploymentStreamDollarOrDollarLt$inboundSchema: z.ZodType<
  DeploymentStreamDollarOrDollarLt,
  z.ZodTypeDef,
  unknown
> = z.object({
  $lt: z.number(),
}).transform((v) => {
  return remap$(v, {
    "$lt": "dollarLt",
  });
});

/** @internal */
export type DeploymentStreamDollarOrDollarLt$Outbound = {
  $lt: number;
};

/** @internal */
export const DeploymentStreamDollarOrDollarLt$outboundSchema: z.ZodType<
  DeploymentStreamDollarOrDollarLt$Outbound,
  z.ZodTypeDef,
  DeploymentStreamDollarOrDollarLt
> = z.object({
  dollarLt: z.number(),
}).transform((v) => {
  return remap$(v, {
    dollarLt: "$lt",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeploymentStreamDollarOrDollarLt$ {
  /** @deprecated use `DeploymentStreamDollarOrDollarLt$inboundSchema` instead. */
  export const inboundSchema = DeploymentStreamDollarOrDollarLt$inboundSchema;
  /** @deprecated use `DeploymentStreamDollarOrDollarLt$outboundSchema` instead. */
  export const outboundSchema = DeploymentStreamDollarOrDollarLt$outboundSchema;
  /** @deprecated use `DeploymentStreamDollarOrDollarLt$Outbound` instead. */
  export type Outbound = DeploymentStreamDollarOrDollarLt$Outbound;
}

export function deploymentStreamDollarOrDollarLtToJSON(
  deploymentStreamDollarOrDollarLt: DeploymentStreamDollarOrDollarLt,
): string {
  return JSON.stringify(
    DeploymentStreamDollarOrDollarLt$outboundSchema.parse(
      deploymentStreamDollarOrDollarLt,
    ),
  );
}

export function deploymentStreamDollarOrDollarLtFromJSON(
  jsonString: string,
): SafeParseResult<DeploymentStreamDollarOrDollarLt, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DeploymentStreamDollarOrDollarLt$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DeploymentStreamDollarOrDollarLt' from JSON`,
  );
}

/** @internal */
export const DeploymentStreamDollarOrDollarGte$inboundSchema: z.ZodType<
  DeploymentStreamDollarOrDollarGte,
  z.ZodTypeDef,
  unknown
> = z.object({
  $gte: z.number(),
}).transform((v) => {
  return remap$(v, {
    "$gte": "dollarGte",
  });
});

/** @internal */
export type DeploymentStreamDollarOrDollarGte$Outbound = {
  $gte: number;
};

/** @internal */
export const DeploymentStreamDollarOrDollarGte$outboundSchema: z.ZodType<
  DeploymentStreamDollarOrDollarGte$Outbound,
  z.ZodTypeDef,
  DeploymentStreamDollarOrDollarGte
> = z.object({
  dollarGte: z.number(),
}).transform((v) => {
  return remap$(v, {
    dollarGte: "$gte",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeploymentStreamDollarOrDollarGte$ {
  /** @deprecated use `DeploymentStreamDollarOrDollarGte$inboundSchema` instead. */
  export const inboundSchema = DeploymentStreamDollarOrDollarGte$inboundSchema;
  /** @deprecated use `DeploymentStreamDollarOrDollarGte$outboundSchema` instead. */
  export const outboundSchema =
    DeploymentStreamDollarOrDollarGte$outboundSchema;
  /** @deprecated use `DeploymentStreamDollarOrDollarGte$Outbound` instead. */
  export type Outbound = DeploymentStreamDollarOrDollarGte$Outbound;
}

export function deploymentStreamDollarOrDollarGteToJSON(
  deploymentStreamDollarOrDollarGte: DeploymentStreamDollarOrDollarGte,
): string {
  return JSON.stringify(
    DeploymentStreamDollarOrDollarGte$outboundSchema.parse(
      deploymentStreamDollarOrDollarGte,
    ),
  );
}

export function deploymentStreamDollarOrDollarGteFromJSON(
  jsonString: string,
): SafeParseResult<DeploymentStreamDollarOrDollarGte, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DeploymentStreamDollarOrDollarGte$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DeploymentStreamDollarOrDollarGte' from JSON`,
  );
}

/** @internal */
export const DeploymentStreamDollarOr3$inboundSchema: z.ZodType<
  DeploymentStreamDollarOr3,
  z.ZodTypeDef,
  unknown
> = z.object({
  $gt: z.number(),
}).transform((v) => {
  return remap$(v, {
    "$gt": "dollarGt",
  });
});

/** @internal */
export type DeploymentStreamDollarOr3$Outbound = {
  $gt: number;
};

/** @internal */
export const DeploymentStreamDollarOr3$outboundSchema: z.ZodType<
  DeploymentStreamDollarOr3$Outbound,
  z.ZodTypeDef,
  DeploymentStreamDollarOr3
> = z.object({
  dollarGt: z.number(),
}).transform((v) => {
  return remap$(v, {
    dollarGt: "$gt",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeploymentStreamDollarOr3$ {
  /** @deprecated use `DeploymentStreamDollarOr3$inboundSchema` instead. */
  export const inboundSchema = DeploymentStreamDollarOr3$inboundSchema;
  /** @deprecated use `DeploymentStreamDollarOr3$outboundSchema` instead. */
  export const outboundSchema = DeploymentStreamDollarOr3$outboundSchema;
  /** @deprecated use `DeploymentStreamDollarOr3$Outbound` instead. */
  export type Outbound = DeploymentStreamDollarOr3$Outbound;
}

export function deploymentStreamDollarOr3ToJSON(
  deploymentStreamDollarOr3: DeploymentStreamDollarOr3,
): string {
  return JSON.stringify(
    DeploymentStreamDollarOr3$outboundSchema.parse(deploymentStreamDollarOr3),
  );
}

export function deploymentStreamDollarOr3FromJSON(
  jsonString: string,
): SafeParseResult<DeploymentStreamDollarOr3, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DeploymentStreamDollarOr3$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DeploymentStreamDollarOr3' from JSON`,
  );
}

/** @internal */
export const DeploymentStreamDollarOrDeploymentsDollarNe$inboundSchema:
  z.ZodType<
    DeploymentStreamDollarOrDeploymentsDollarNe,
    z.ZodTypeDef,
    unknown
  > = z.union([z.string(), z.number(), z.boolean()]);

/** @internal */
export type DeploymentStreamDollarOrDeploymentsDollarNe$Outbound =
  | string
  | number
  | boolean;

/** @internal */
export const DeploymentStreamDollarOrDeploymentsDollarNe$outboundSchema:
  z.ZodType<
    DeploymentStreamDollarOrDeploymentsDollarNe$Outbound,
    z.ZodTypeDef,
    DeploymentStreamDollarOrDeploymentsDollarNe
  > = z.union([z.string(), z.number(), z.boolean()]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeploymentStreamDollarOrDeploymentsDollarNe$ {
  /** @deprecated use `DeploymentStreamDollarOrDeploymentsDollarNe$inboundSchema` instead. */
  export const inboundSchema =
    DeploymentStreamDollarOrDeploymentsDollarNe$inboundSchema;
  /** @deprecated use `DeploymentStreamDollarOrDeploymentsDollarNe$outboundSchema` instead. */
  export const outboundSchema =
    DeploymentStreamDollarOrDeploymentsDollarNe$outboundSchema;
  /** @deprecated use `DeploymentStreamDollarOrDeploymentsDollarNe$Outbound` instead. */
  export type Outbound = DeploymentStreamDollarOrDeploymentsDollarNe$Outbound;
}

export function deploymentStreamDollarOrDeploymentsDollarNeToJSON(
  deploymentStreamDollarOrDeploymentsDollarNe:
    DeploymentStreamDollarOrDeploymentsDollarNe,
): string {
  return JSON.stringify(
    DeploymentStreamDollarOrDeploymentsDollarNe$outboundSchema.parse(
      deploymentStreamDollarOrDeploymentsDollarNe,
    ),
  );
}

export function deploymentStreamDollarOrDeploymentsDollarNeFromJSON(
  jsonString: string,
): SafeParseResult<
  DeploymentStreamDollarOrDeploymentsDollarNe,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      DeploymentStreamDollarOrDeploymentsDollarNe$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'DeploymentStreamDollarOrDeploymentsDollarNe' from JSON`,
  );
}

/** @internal */
export const DeploymentStreamDollarOrDollarNe$inboundSchema: z.ZodType<
  DeploymentStreamDollarOrDollarNe,
  z.ZodTypeDef,
  unknown
> = z.object({
  $ne: z.union([z.string(), z.number(), z.boolean()]),
}).transform((v) => {
  return remap$(v, {
    "$ne": "dollarNe",
  });
});

/** @internal */
export type DeploymentStreamDollarOrDollarNe$Outbound = {
  $ne: string | number | boolean;
};

/** @internal */
export const DeploymentStreamDollarOrDollarNe$outboundSchema: z.ZodType<
  DeploymentStreamDollarOrDollarNe$Outbound,
  z.ZodTypeDef,
  DeploymentStreamDollarOrDollarNe
> = z.object({
  dollarNe: z.union([z.string(), z.number(), z.boolean()]),
}).transform((v) => {
  return remap$(v, {
    dollarNe: "$ne",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeploymentStreamDollarOrDollarNe$ {
  /** @deprecated use `DeploymentStreamDollarOrDollarNe$inboundSchema` instead. */
  export const inboundSchema = DeploymentStreamDollarOrDollarNe$inboundSchema;
  /** @deprecated use `DeploymentStreamDollarOrDollarNe$outboundSchema` instead. */
  export const outboundSchema = DeploymentStreamDollarOrDollarNe$outboundSchema;
  /** @deprecated use `DeploymentStreamDollarOrDollarNe$Outbound` instead. */
  export type Outbound = DeploymentStreamDollarOrDollarNe$Outbound;
}

export function deploymentStreamDollarOrDollarNeToJSON(
  deploymentStreamDollarOrDollarNe: DeploymentStreamDollarOrDollarNe,
): string {
  return JSON.stringify(
    DeploymentStreamDollarOrDollarNe$outboundSchema.parse(
      deploymentStreamDollarOrDollarNe,
    ),
  );
}

export function deploymentStreamDollarOrDollarNeFromJSON(
  jsonString: string,
): SafeParseResult<DeploymentStreamDollarOrDollarNe, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DeploymentStreamDollarOrDollarNe$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DeploymentStreamDollarOrDollarNe' from JSON`,
  );
}

/** @internal */
export const DeploymentStreamDollarOrDeploymentsDollarEq$inboundSchema:
  z.ZodType<
    DeploymentStreamDollarOrDeploymentsDollarEq,
    z.ZodTypeDef,
    unknown
  > = z.union([z.string(), z.number(), z.boolean()]);

/** @internal */
export type DeploymentStreamDollarOrDeploymentsDollarEq$Outbound =
  | string
  | number
  | boolean;

/** @internal */
export const DeploymentStreamDollarOrDeploymentsDollarEq$outboundSchema:
  z.ZodType<
    DeploymentStreamDollarOrDeploymentsDollarEq$Outbound,
    z.ZodTypeDef,
    DeploymentStreamDollarOrDeploymentsDollarEq
  > = z.union([z.string(), z.number(), z.boolean()]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeploymentStreamDollarOrDeploymentsDollarEq$ {
  /** @deprecated use `DeploymentStreamDollarOrDeploymentsDollarEq$inboundSchema` instead. */
  export const inboundSchema =
    DeploymentStreamDollarOrDeploymentsDollarEq$inboundSchema;
  /** @deprecated use `DeploymentStreamDollarOrDeploymentsDollarEq$outboundSchema` instead. */
  export const outboundSchema =
    DeploymentStreamDollarOrDeploymentsDollarEq$outboundSchema;
  /** @deprecated use `DeploymentStreamDollarOrDeploymentsDollarEq$Outbound` instead. */
  export type Outbound = DeploymentStreamDollarOrDeploymentsDollarEq$Outbound;
}

export function deploymentStreamDollarOrDeploymentsDollarEqToJSON(
  deploymentStreamDollarOrDeploymentsDollarEq:
    DeploymentStreamDollarOrDeploymentsDollarEq,
): string {
  return JSON.stringify(
    DeploymentStreamDollarOrDeploymentsDollarEq$outboundSchema.parse(
      deploymentStreamDollarOrDeploymentsDollarEq,
    ),
  );
}

export function deploymentStreamDollarOrDeploymentsDollarEqFromJSON(
  jsonString: string,
): SafeParseResult<
  DeploymentStreamDollarOrDeploymentsDollarEq,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      DeploymentStreamDollarOrDeploymentsDollarEq$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'DeploymentStreamDollarOrDeploymentsDollarEq' from JSON`,
  );
}

/** @internal */
export const DeploymentStreamDollarOrDollarEq$inboundSchema: z.ZodType<
  DeploymentStreamDollarOrDollarEq,
  z.ZodTypeDef,
  unknown
> = z.object({
  $eq: z.union([z.string(), z.number(), z.boolean()]),
}).transform((v) => {
  return remap$(v, {
    "$eq": "dollarEq",
  });
});

/** @internal */
export type DeploymentStreamDollarOrDollarEq$Outbound = {
  $eq: string | number | boolean;
};

/** @internal */
export const DeploymentStreamDollarOrDollarEq$outboundSchema: z.ZodType<
  DeploymentStreamDollarOrDollarEq$Outbound,
  z.ZodTypeDef,
  DeploymentStreamDollarOrDollarEq
> = z.object({
  dollarEq: z.union([z.string(), z.number(), z.boolean()]),
}).transform((v) => {
  return remap$(v, {
    dollarEq: "$eq",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeploymentStreamDollarOrDollarEq$ {
  /** @deprecated use `DeploymentStreamDollarOrDollarEq$inboundSchema` instead. */
  export const inboundSchema = DeploymentStreamDollarOrDollarEq$inboundSchema;
  /** @deprecated use `DeploymentStreamDollarOrDollarEq$outboundSchema` instead. */
  export const outboundSchema = DeploymentStreamDollarOrDollarEq$outboundSchema;
  /** @deprecated use `DeploymentStreamDollarOrDollarEq$Outbound` instead. */
  export type Outbound = DeploymentStreamDollarOrDollarEq$Outbound;
}

export function deploymentStreamDollarOrDollarEqToJSON(
  deploymentStreamDollarOrDollarEq: DeploymentStreamDollarOrDollarEq,
): string {
  return JSON.stringify(
    DeploymentStreamDollarOrDollarEq$outboundSchema.parse(
      deploymentStreamDollarOrDollarEq,
    ),
  );
}

export function deploymentStreamDollarOrDollarEqFromJSON(
  jsonString: string,
): SafeParseResult<DeploymentStreamDollarOrDollarEq, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DeploymentStreamDollarOrDollarEq$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DeploymentStreamDollarOrDollarEq' from JSON`,
  );
}

/** @internal */
export const DeploymentStreamKnowledgeFilterDeploymentsDollarOr$inboundSchema:
  z.ZodType<
    DeploymentStreamKnowledgeFilterDeploymentsDollarOr,
    z.ZodTypeDef,
    unknown
  > = z.union([
    z.lazy(() => DeploymentStreamDollarOrDollarEq$inboundSchema),
    z.lazy(() => DeploymentStreamDollarOrDollarNe$inboundSchema),
    z.lazy(() => DeploymentStreamDollarOr3$inboundSchema),
    z.lazy(() => DeploymentStreamDollarOrDollarGte$inboundSchema),
    z.lazy(() => DeploymentStreamDollarOrDollarLt$inboundSchema),
    z.lazy(() => DeploymentStreamDollarOrDollarLte$inboundSchema),
    z.lazy(() => DeploymentStreamDollarOrDollarIn$inboundSchema),
    z.lazy(() => DeploymentStreamDollarOrDollarNin$inboundSchema),
    z.lazy(() => DeploymentStreamDollarOrDollarExists$inboundSchema),
  ]);

/** @internal */
export type DeploymentStreamKnowledgeFilterDeploymentsDollarOr$Outbound =
  | DeploymentStreamDollarOrDollarEq$Outbound
  | DeploymentStreamDollarOrDollarNe$Outbound
  | DeploymentStreamDollarOr3$Outbound
  | DeploymentStreamDollarOrDollarGte$Outbound
  | DeploymentStreamDollarOrDollarLt$Outbound
  | DeploymentStreamDollarOrDollarLte$Outbound
  | DeploymentStreamDollarOrDollarIn$Outbound
  | DeploymentStreamDollarOrDollarNin$Outbound
  | DeploymentStreamDollarOrDollarExists$Outbound;

/** @internal */
export const DeploymentStreamKnowledgeFilterDeploymentsDollarOr$outboundSchema:
  z.ZodType<
    DeploymentStreamKnowledgeFilterDeploymentsDollarOr$Outbound,
    z.ZodTypeDef,
    DeploymentStreamKnowledgeFilterDeploymentsDollarOr
  > = z.union([
    z.lazy(() => DeploymentStreamDollarOrDollarEq$outboundSchema),
    z.lazy(() => DeploymentStreamDollarOrDollarNe$outboundSchema),
    z.lazy(() => DeploymentStreamDollarOr3$outboundSchema),
    z.lazy(() => DeploymentStreamDollarOrDollarGte$outboundSchema),
    z.lazy(() => DeploymentStreamDollarOrDollarLt$outboundSchema),
    z.lazy(() => DeploymentStreamDollarOrDollarLte$outboundSchema),
    z.lazy(() => DeploymentStreamDollarOrDollarIn$outboundSchema),
    z.lazy(() => DeploymentStreamDollarOrDollarNin$outboundSchema),
    z.lazy(() => DeploymentStreamDollarOrDollarExists$outboundSchema),
  ]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeploymentStreamKnowledgeFilterDeploymentsDollarOr$ {
  /** @deprecated use `DeploymentStreamKnowledgeFilterDeploymentsDollarOr$inboundSchema` instead. */
  export const inboundSchema =
    DeploymentStreamKnowledgeFilterDeploymentsDollarOr$inboundSchema;
  /** @deprecated use `DeploymentStreamKnowledgeFilterDeploymentsDollarOr$outboundSchema` instead. */
  export const outboundSchema =
    DeploymentStreamKnowledgeFilterDeploymentsDollarOr$outboundSchema;
  /** @deprecated use `DeploymentStreamKnowledgeFilterDeploymentsDollarOr$Outbound` instead. */
  export type Outbound =
    DeploymentStreamKnowledgeFilterDeploymentsDollarOr$Outbound;
}

export function deploymentStreamKnowledgeFilterDeploymentsDollarOrToJSON(
  deploymentStreamKnowledgeFilterDeploymentsDollarOr:
    DeploymentStreamKnowledgeFilterDeploymentsDollarOr,
): string {
  return JSON.stringify(
    DeploymentStreamKnowledgeFilterDeploymentsDollarOr$outboundSchema.parse(
      deploymentStreamKnowledgeFilterDeploymentsDollarOr,
    ),
  );
}

export function deploymentStreamKnowledgeFilterDeploymentsDollarOrFromJSON(
  jsonString: string,
): SafeParseResult<
  DeploymentStreamKnowledgeFilterDeploymentsDollarOr,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      DeploymentStreamKnowledgeFilterDeploymentsDollarOr$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'DeploymentStreamKnowledgeFilterDeploymentsDollarOr' from JSON`,
  );
}

/** @internal */
export const DeploymentStreamKnowledgeFilterDollarOr$inboundSchema: z.ZodType<
  DeploymentStreamKnowledgeFilterDollarOr,
  z.ZodTypeDef,
  unknown
> = z.object({
  $or: z.array(
    z.record(z.union([
      z.lazy(() => DeploymentStreamDollarOrDollarEq$inboundSchema),
      z.lazy(() =>
        DeploymentStreamDollarOrDollarNe$inboundSchema
      ),
      z.lazy(() => DeploymentStreamDollarOr3$inboundSchema),
      z.lazy(() => DeploymentStreamDollarOrDollarGte$inboundSchema),
      z.lazy(() => DeploymentStreamDollarOrDollarLt$inboundSchema),
      z.lazy(() => DeploymentStreamDollarOrDollarLte$inboundSchema),
      z.lazy(() => DeploymentStreamDollarOrDollarIn$inboundSchema),
      z.lazy(() => DeploymentStreamDollarOrDollarNin$inboundSchema),
      z.lazy(() => DeploymentStreamDollarOrDollarExists$inboundSchema),
    ])),
  ),
}).transform((v) => {
  return remap$(v, {
    "$or": "dollarOr",
  });
});

/** @internal */
export type DeploymentStreamKnowledgeFilterDollarOr$Outbound = {
  $or: Array<
    {
      [k: string]:
        | DeploymentStreamDollarOrDollarEq$Outbound
        | DeploymentStreamDollarOrDollarNe$Outbound
        | DeploymentStreamDollarOr3$Outbound
        | DeploymentStreamDollarOrDollarGte$Outbound
        | DeploymentStreamDollarOrDollarLt$Outbound
        | DeploymentStreamDollarOrDollarLte$Outbound
        | DeploymentStreamDollarOrDollarIn$Outbound
        | DeploymentStreamDollarOrDollarNin$Outbound
        | DeploymentStreamDollarOrDollarExists$Outbound;
    }
  >;
};

/** @internal */
export const DeploymentStreamKnowledgeFilterDollarOr$outboundSchema: z.ZodType<
  DeploymentStreamKnowledgeFilterDollarOr$Outbound,
  z.ZodTypeDef,
  DeploymentStreamKnowledgeFilterDollarOr
> = z.object({
  dollarOr: z.array(
    z.record(z.union([
      z.lazy(() => DeploymentStreamDollarOrDollarEq$outboundSchema),
      z.lazy(() =>
        DeploymentStreamDollarOrDollarNe$outboundSchema
      ),
      z.lazy(() => DeploymentStreamDollarOr3$outboundSchema),
      z.lazy(() => DeploymentStreamDollarOrDollarGte$outboundSchema),
      z.lazy(() => DeploymentStreamDollarOrDollarLt$outboundSchema),
      z.lazy(() => DeploymentStreamDollarOrDollarLte$outboundSchema),
      z.lazy(() => DeploymentStreamDollarOrDollarIn$outboundSchema),
      z.lazy(() => DeploymentStreamDollarOrDollarNin$outboundSchema),
      z.lazy(() => DeploymentStreamDollarOrDollarExists$outboundSchema),
    ])),
  ),
}).transform((v) => {
  return remap$(v, {
    dollarOr: "$or",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeploymentStreamKnowledgeFilterDollarOr$ {
  /** @deprecated use `DeploymentStreamKnowledgeFilterDollarOr$inboundSchema` instead. */
  export const inboundSchema =
    DeploymentStreamKnowledgeFilterDollarOr$inboundSchema;
  /** @deprecated use `DeploymentStreamKnowledgeFilterDollarOr$outboundSchema` instead. */
  export const outboundSchema =
    DeploymentStreamKnowledgeFilterDollarOr$outboundSchema;
  /** @deprecated use `DeploymentStreamKnowledgeFilterDollarOr$Outbound` instead. */
  export type Outbound = DeploymentStreamKnowledgeFilterDollarOr$Outbound;
}

export function deploymentStreamKnowledgeFilterDollarOrToJSON(
  deploymentStreamKnowledgeFilterDollarOr:
    DeploymentStreamKnowledgeFilterDollarOr,
): string {
  return JSON.stringify(
    DeploymentStreamKnowledgeFilterDollarOr$outboundSchema.parse(
      deploymentStreamKnowledgeFilterDollarOr,
    ),
  );
}

export function deploymentStreamKnowledgeFilterDollarOrFromJSON(
  jsonString: string,
): SafeParseResult<
  DeploymentStreamKnowledgeFilterDollarOr,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      DeploymentStreamKnowledgeFilterDollarOr$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'DeploymentStreamKnowledgeFilterDollarOr' from JSON`,
  );
}

/** @internal */
export const DeploymentStreamDollarAndDollarExists$inboundSchema: z.ZodType<
  DeploymentStreamDollarAndDollarExists,
  z.ZodTypeDef,
  unknown
> = z.object({
  $exists: z.boolean(),
}).transform((v) => {
  return remap$(v, {
    "$exists": "dollarExists",
  });
});

/** @internal */
export type DeploymentStreamDollarAndDollarExists$Outbound = {
  $exists: boolean;
};

/** @internal */
export const DeploymentStreamDollarAndDollarExists$outboundSchema: z.ZodType<
  DeploymentStreamDollarAndDollarExists$Outbound,
  z.ZodTypeDef,
  DeploymentStreamDollarAndDollarExists
> = z.object({
  dollarExists: z.boolean(),
}).transform((v) => {
  return remap$(v, {
    dollarExists: "$exists",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeploymentStreamDollarAndDollarExists$ {
  /** @deprecated use `DeploymentStreamDollarAndDollarExists$inboundSchema` instead. */
  export const inboundSchema =
    DeploymentStreamDollarAndDollarExists$inboundSchema;
  /** @deprecated use `DeploymentStreamDollarAndDollarExists$outboundSchema` instead. */
  export const outboundSchema =
    DeploymentStreamDollarAndDollarExists$outboundSchema;
  /** @deprecated use `DeploymentStreamDollarAndDollarExists$Outbound` instead. */
  export type Outbound = DeploymentStreamDollarAndDollarExists$Outbound;
}

export function deploymentStreamDollarAndDollarExistsToJSON(
  deploymentStreamDollarAndDollarExists: DeploymentStreamDollarAndDollarExists,
): string {
  return JSON.stringify(
    DeploymentStreamDollarAndDollarExists$outboundSchema.parse(
      deploymentStreamDollarAndDollarExists,
    ),
  );
}

export function deploymentStreamDollarAndDollarExistsFromJSON(
  jsonString: string,
): SafeParseResult<DeploymentStreamDollarAndDollarExists, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      DeploymentStreamDollarAndDollarExists$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DeploymentStreamDollarAndDollarExists' from JSON`,
  );
}

/** @internal */
export const DeploymentStreamDollarAndDeploymentsDollarNin$inboundSchema:
  z.ZodType<
    DeploymentStreamDollarAndDeploymentsDollarNin,
    z.ZodTypeDef,
    unknown
  > = z.union([z.string(), z.number(), z.boolean()]);

/** @internal */
export type DeploymentStreamDollarAndDeploymentsDollarNin$Outbound =
  | string
  | number
  | boolean;

/** @internal */
export const DeploymentStreamDollarAndDeploymentsDollarNin$outboundSchema:
  z.ZodType<
    DeploymentStreamDollarAndDeploymentsDollarNin$Outbound,
    z.ZodTypeDef,
    DeploymentStreamDollarAndDeploymentsDollarNin
  > = z.union([z.string(), z.number(), z.boolean()]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeploymentStreamDollarAndDeploymentsDollarNin$ {
  /** @deprecated use `DeploymentStreamDollarAndDeploymentsDollarNin$inboundSchema` instead. */
  export const inboundSchema =
    DeploymentStreamDollarAndDeploymentsDollarNin$inboundSchema;
  /** @deprecated use `DeploymentStreamDollarAndDeploymentsDollarNin$outboundSchema` instead. */
  export const outboundSchema =
    DeploymentStreamDollarAndDeploymentsDollarNin$outboundSchema;
  /** @deprecated use `DeploymentStreamDollarAndDeploymentsDollarNin$Outbound` instead. */
  export type Outbound = DeploymentStreamDollarAndDeploymentsDollarNin$Outbound;
}

export function deploymentStreamDollarAndDeploymentsDollarNinToJSON(
  deploymentStreamDollarAndDeploymentsDollarNin:
    DeploymentStreamDollarAndDeploymentsDollarNin,
): string {
  return JSON.stringify(
    DeploymentStreamDollarAndDeploymentsDollarNin$outboundSchema.parse(
      deploymentStreamDollarAndDeploymentsDollarNin,
    ),
  );
}

export function deploymentStreamDollarAndDeploymentsDollarNinFromJSON(
  jsonString: string,
): SafeParseResult<
  DeploymentStreamDollarAndDeploymentsDollarNin,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      DeploymentStreamDollarAndDeploymentsDollarNin$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'DeploymentStreamDollarAndDeploymentsDollarNin' from JSON`,
  );
}

/** @internal */
export const DeploymentStreamDollarAndDollarNin$inboundSchema: z.ZodType<
  DeploymentStreamDollarAndDollarNin,
  z.ZodTypeDef,
  unknown
> = z.object({
  $nin: z.array(z.union([z.string(), z.number(), z.boolean()])),
}).transform((v) => {
  return remap$(v, {
    "$nin": "dollarNin",
  });
});

/** @internal */
export type DeploymentStreamDollarAndDollarNin$Outbound = {
  $nin: Array<string | number | boolean>;
};

/** @internal */
export const DeploymentStreamDollarAndDollarNin$outboundSchema: z.ZodType<
  DeploymentStreamDollarAndDollarNin$Outbound,
  z.ZodTypeDef,
  DeploymentStreamDollarAndDollarNin
> = z.object({
  dollarNin: z.array(z.union([z.string(), z.number(), z.boolean()])),
}).transform((v) => {
  return remap$(v, {
    dollarNin: "$nin",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeploymentStreamDollarAndDollarNin$ {
  /** @deprecated use `DeploymentStreamDollarAndDollarNin$inboundSchema` instead. */
  export const inboundSchema = DeploymentStreamDollarAndDollarNin$inboundSchema;
  /** @deprecated use `DeploymentStreamDollarAndDollarNin$outboundSchema` instead. */
  export const outboundSchema =
    DeploymentStreamDollarAndDollarNin$outboundSchema;
  /** @deprecated use `DeploymentStreamDollarAndDollarNin$Outbound` instead. */
  export type Outbound = DeploymentStreamDollarAndDollarNin$Outbound;
}

export function deploymentStreamDollarAndDollarNinToJSON(
  deploymentStreamDollarAndDollarNin: DeploymentStreamDollarAndDollarNin,
): string {
  return JSON.stringify(
    DeploymentStreamDollarAndDollarNin$outboundSchema.parse(
      deploymentStreamDollarAndDollarNin,
    ),
  );
}

export function deploymentStreamDollarAndDollarNinFromJSON(
  jsonString: string,
): SafeParseResult<DeploymentStreamDollarAndDollarNin, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      DeploymentStreamDollarAndDollarNin$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DeploymentStreamDollarAndDollarNin' from JSON`,
  );
}

/** @internal */
export const DeploymentStreamDollarAndDeploymentsDollarIn$inboundSchema:
  z.ZodType<
    DeploymentStreamDollarAndDeploymentsDollarIn,
    z.ZodTypeDef,
    unknown
  > = z.union([z.string(), z.number(), z.boolean()]);

/** @internal */
export type DeploymentStreamDollarAndDeploymentsDollarIn$Outbound =
  | string
  | number
  | boolean;

/** @internal */
export const DeploymentStreamDollarAndDeploymentsDollarIn$outboundSchema:
  z.ZodType<
    DeploymentStreamDollarAndDeploymentsDollarIn$Outbound,
    z.ZodTypeDef,
    DeploymentStreamDollarAndDeploymentsDollarIn
  > = z.union([z.string(), z.number(), z.boolean()]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeploymentStreamDollarAndDeploymentsDollarIn$ {
  /** @deprecated use `DeploymentStreamDollarAndDeploymentsDollarIn$inboundSchema` instead. */
  export const inboundSchema =
    DeploymentStreamDollarAndDeploymentsDollarIn$inboundSchema;
  /** @deprecated use `DeploymentStreamDollarAndDeploymentsDollarIn$outboundSchema` instead. */
  export const outboundSchema =
    DeploymentStreamDollarAndDeploymentsDollarIn$outboundSchema;
  /** @deprecated use `DeploymentStreamDollarAndDeploymentsDollarIn$Outbound` instead. */
  export type Outbound = DeploymentStreamDollarAndDeploymentsDollarIn$Outbound;
}

export function deploymentStreamDollarAndDeploymentsDollarInToJSON(
  deploymentStreamDollarAndDeploymentsDollarIn:
    DeploymentStreamDollarAndDeploymentsDollarIn,
): string {
  return JSON.stringify(
    DeploymentStreamDollarAndDeploymentsDollarIn$outboundSchema.parse(
      deploymentStreamDollarAndDeploymentsDollarIn,
    ),
  );
}

export function deploymentStreamDollarAndDeploymentsDollarInFromJSON(
  jsonString: string,
): SafeParseResult<
  DeploymentStreamDollarAndDeploymentsDollarIn,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      DeploymentStreamDollarAndDeploymentsDollarIn$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'DeploymentStreamDollarAndDeploymentsDollarIn' from JSON`,
  );
}

/** @internal */
export const DeploymentStreamDollarAndDollarIn$inboundSchema: z.ZodType<
  DeploymentStreamDollarAndDollarIn,
  z.ZodTypeDef,
  unknown
> = z.object({
  $in: z.array(z.union([z.string(), z.number(), z.boolean()])),
}).transform((v) => {
  return remap$(v, {
    "$in": "dollarIn",
  });
});

/** @internal */
export type DeploymentStreamDollarAndDollarIn$Outbound = {
  $in: Array<string | number | boolean>;
};

/** @internal */
export const DeploymentStreamDollarAndDollarIn$outboundSchema: z.ZodType<
  DeploymentStreamDollarAndDollarIn$Outbound,
  z.ZodTypeDef,
  DeploymentStreamDollarAndDollarIn
> = z.object({
  dollarIn: z.array(z.union([z.string(), z.number(), z.boolean()])),
}).transform((v) => {
  return remap$(v, {
    dollarIn: "$in",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeploymentStreamDollarAndDollarIn$ {
  /** @deprecated use `DeploymentStreamDollarAndDollarIn$inboundSchema` instead. */
  export const inboundSchema = DeploymentStreamDollarAndDollarIn$inboundSchema;
  /** @deprecated use `DeploymentStreamDollarAndDollarIn$outboundSchema` instead. */
  export const outboundSchema =
    DeploymentStreamDollarAndDollarIn$outboundSchema;
  /** @deprecated use `DeploymentStreamDollarAndDollarIn$Outbound` instead. */
  export type Outbound = DeploymentStreamDollarAndDollarIn$Outbound;
}

export function deploymentStreamDollarAndDollarInToJSON(
  deploymentStreamDollarAndDollarIn: DeploymentStreamDollarAndDollarIn,
): string {
  return JSON.stringify(
    DeploymentStreamDollarAndDollarIn$outboundSchema.parse(
      deploymentStreamDollarAndDollarIn,
    ),
  );
}

export function deploymentStreamDollarAndDollarInFromJSON(
  jsonString: string,
): SafeParseResult<DeploymentStreamDollarAndDollarIn, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DeploymentStreamDollarAndDollarIn$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DeploymentStreamDollarAndDollarIn' from JSON`,
  );
}

/** @internal */
export const DeploymentStreamDollarAndDollarLte$inboundSchema: z.ZodType<
  DeploymentStreamDollarAndDollarLte,
  z.ZodTypeDef,
  unknown
> = z.object({
  $lte: z.number(),
}).transform((v) => {
  return remap$(v, {
    "$lte": "dollarLte",
  });
});

/** @internal */
export type DeploymentStreamDollarAndDollarLte$Outbound = {
  $lte: number;
};

/** @internal */
export const DeploymentStreamDollarAndDollarLte$outboundSchema: z.ZodType<
  DeploymentStreamDollarAndDollarLte$Outbound,
  z.ZodTypeDef,
  DeploymentStreamDollarAndDollarLte
> = z.object({
  dollarLte: z.number(),
}).transform((v) => {
  return remap$(v, {
    dollarLte: "$lte",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeploymentStreamDollarAndDollarLte$ {
  /** @deprecated use `DeploymentStreamDollarAndDollarLte$inboundSchema` instead. */
  export const inboundSchema = DeploymentStreamDollarAndDollarLte$inboundSchema;
  /** @deprecated use `DeploymentStreamDollarAndDollarLte$outboundSchema` instead. */
  export const outboundSchema =
    DeploymentStreamDollarAndDollarLte$outboundSchema;
  /** @deprecated use `DeploymentStreamDollarAndDollarLte$Outbound` instead. */
  export type Outbound = DeploymentStreamDollarAndDollarLte$Outbound;
}

export function deploymentStreamDollarAndDollarLteToJSON(
  deploymentStreamDollarAndDollarLte: DeploymentStreamDollarAndDollarLte,
): string {
  return JSON.stringify(
    DeploymentStreamDollarAndDollarLte$outboundSchema.parse(
      deploymentStreamDollarAndDollarLte,
    ),
  );
}

export function deploymentStreamDollarAndDollarLteFromJSON(
  jsonString: string,
): SafeParseResult<DeploymentStreamDollarAndDollarLte, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      DeploymentStreamDollarAndDollarLte$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DeploymentStreamDollarAndDollarLte' from JSON`,
  );
}

/** @internal */
export const DeploymentStreamDollarAndDollarLt$inboundSchema: z.ZodType<
  DeploymentStreamDollarAndDollarLt,
  z.ZodTypeDef,
  unknown
> = z.object({
  $lt: z.number(),
}).transform((v) => {
  return remap$(v, {
    "$lt": "dollarLt",
  });
});

/** @internal */
export type DeploymentStreamDollarAndDollarLt$Outbound = {
  $lt: number;
};

/** @internal */
export const DeploymentStreamDollarAndDollarLt$outboundSchema: z.ZodType<
  DeploymentStreamDollarAndDollarLt$Outbound,
  z.ZodTypeDef,
  DeploymentStreamDollarAndDollarLt
> = z.object({
  dollarLt: z.number(),
}).transform((v) => {
  return remap$(v, {
    dollarLt: "$lt",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeploymentStreamDollarAndDollarLt$ {
  /** @deprecated use `DeploymentStreamDollarAndDollarLt$inboundSchema` instead. */
  export const inboundSchema = DeploymentStreamDollarAndDollarLt$inboundSchema;
  /** @deprecated use `DeploymentStreamDollarAndDollarLt$outboundSchema` instead. */
  export const outboundSchema =
    DeploymentStreamDollarAndDollarLt$outboundSchema;
  /** @deprecated use `DeploymentStreamDollarAndDollarLt$Outbound` instead. */
  export type Outbound = DeploymentStreamDollarAndDollarLt$Outbound;
}

export function deploymentStreamDollarAndDollarLtToJSON(
  deploymentStreamDollarAndDollarLt: DeploymentStreamDollarAndDollarLt,
): string {
  return JSON.stringify(
    DeploymentStreamDollarAndDollarLt$outboundSchema.parse(
      deploymentStreamDollarAndDollarLt,
    ),
  );
}

export function deploymentStreamDollarAndDollarLtFromJSON(
  jsonString: string,
): SafeParseResult<DeploymentStreamDollarAndDollarLt, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DeploymentStreamDollarAndDollarLt$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DeploymentStreamDollarAndDollarLt' from JSON`,
  );
}

/** @internal */
export const DeploymentStreamDollarAndDollarGte$inboundSchema: z.ZodType<
  DeploymentStreamDollarAndDollarGte,
  z.ZodTypeDef,
  unknown
> = z.object({
  $gte: z.number(),
}).transform((v) => {
  return remap$(v, {
    "$gte": "dollarGte",
  });
});

/** @internal */
export type DeploymentStreamDollarAndDollarGte$Outbound = {
  $gte: number;
};

/** @internal */
export const DeploymentStreamDollarAndDollarGte$outboundSchema: z.ZodType<
  DeploymentStreamDollarAndDollarGte$Outbound,
  z.ZodTypeDef,
  DeploymentStreamDollarAndDollarGte
> = z.object({
  dollarGte: z.number(),
}).transform((v) => {
  return remap$(v, {
    dollarGte: "$gte",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeploymentStreamDollarAndDollarGte$ {
  /** @deprecated use `DeploymentStreamDollarAndDollarGte$inboundSchema` instead. */
  export const inboundSchema = DeploymentStreamDollarAndDollarGte$inboundSchema;
  /** @deprecated use `DeploymentStreamDollarAndDollarGte$outboundSchema` instead. */
  export const outboundSchema =
    DeploymentStreamDollarAndDollarGte$outboundSchema;
  /** @deprecated use `DeploymentStreamDollarAndDollarGte$Outbound` instead. */
  export type Outbound = DeploymentStreamDollarAndDollarGte$Outbound;
}

export function deploymentStreamDollarAndDollarGteToJSON(
  deploymentStreamDollarAndDollarGte: DeploymentStreamDollarAndDollarGte,
): string {
  return JSON.stringify(
    DeploymentStreamDollarAndDollarGte$outboundSchema.parse(
      deploymentStreamDollarAndDollarGte,
    ),
  );
}

export function deploymentStreamDollarAndDollarGteFromJSON(
  jsonString: string,
): SafeParseResult<DeploymentStreamDollarAndDollarGte, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      DeploymentStreamDollarAndDollarGte$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DeploymentStreamDollarAndDollarGte' from JSON`,
  );
}

/** @internal */
export const DeploymentStreamDollarAnd3$inboundSchema: z.ZodType<
  DeploymentStreamDollarAnd3,
  z.ZodTypeDef,
  unknown
> = z.object({
  $gt: z.number(),
}).transform((v) => {
  return remap$(v, {
    "$gt": "dollarGt",
  });
});

/** @internal */
export type DeploymentStreamDollarAnd3$Outbound = {
  $gt: number;
};

/** @internal */
export const DeploymentStreamDollarAnd3$outboundSchema: z.ZodType<
  DeploymentStreamDollarAnd3$Outbound,
  z.ZodTypeDef,
  DeploymentStreamDollarAnd3
> = z.object({
  dollarGt: z.number(),
}).transform((v) => {
  return remap$(v, {
    dollarGt: "$gt",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeploymentStreamDollarAnd3$ {
  /** @deprecated use `DeploymentStreamDollarAnd3$inboundSchema` instead. */
  export const inboundSchema = DeploymentStreamDollarAnd3$inboundSchema;
  /** @deprecated use `DeploymentStreamDollarAnd3$outboundSchema` instead. */
  export const outboundSchema = DeploymentStreamDollarAnd3$outboundSchema;
  /** @deprecated use `DeploymentStreamDollarAnd3$Outbound` instead. */
  export type Outbound = DeploymentStreamDollarAnd3$Outbound;
}

export function deploymentStreamDollarAnd3ToJSON(
  deploymentStreamDollarAnd3: DeploymentStreamDollarAnd3,
): string {
  return JSON.stringify(
    DeploymentStreamDollarAnd3$outboundSchema.parse(deploymentStreamDollarAnd3),
  );
}

export function deploymentStreamDollarAnd3FromJSON(
  jsonString: string,
): SafeParseResult<DeploymentStreamDollarAnd3, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DeploymentStreamDollarAnd3$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DeploymentStreamDollarAnd3' from JSON`,
  );
}

/** @internal */
export const DeploymentStreamDollarAndDeploymentsDollarNe$inboundSchema:
  z.ZodType<
    DeploymentStreamDollarAndDeploymentsDollarNe,
    z.ZodTypeDef,
    unknown
  > = z.union([z.string(), z.number(), z.boolean()]);

/** @internal */
export type DeploymentStreamDollarAndDeploymentsDollarNe$Outbound =
  | string
  | number
  | boolean;

/** @internal */
export const DeploymentStreamDollarAndDeploymentsDollarNe$outboundSchema:
  z.ZodType<
    DeploymentStreamDollarAndDeploymentsDollarNe$Outbound,
    z.ZodTypeDef,
    DeploymentStreamDollarAndDeploymentsDollarNe
  > = z.union([z.string(), z.number(), z.boolean()]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeploymentStreamDollarAndDeploymentsDollarNe$ {
  /** @deprecated use `DeploymentStreamDollarAndDeploymentsDollarNe$inboundSchema` instead. */
  export const inboundSchema =
    DeploymentStreamDollarAndDeploymentsDollarNe$inboundSchema;
  /** @deprecated use `DeploymentStreamDollarAndDeploymentsDollarNe$outboundSchema` instead. */
  export const outboundSchema =
    DeploymentStreamDollarAndDeploymentsDollarNe$outboundSchema;
  /** @deprecated use `DeploymentStreamDollarAndDeploymentsDollarNe$Outbound` instead. */
  export type Outbound = DeploymentStreamDollarAndDeploymentsDollarNe$Outbound;
}

export function deploymentStreamDollarAndDeploymentsDollarNeToJSON(
  deploymentStreamDollarAndDeploymentsDollarNe:
    DeploymentStreamDollarAndDeploymentsDollarNe,
): string {
  return JSON.stringify(
    DeploymentStreamDollarAndDeploymentsDollarNe$outboundSchema.parse(
      deploymentStreamDollarAndDeploymentsDollarNe,
    ),
  );
}

export function deploymentStreamDollarAndDeploymentsDollarNeFromJSON(
  jsonString: string,
): SafeParseResult<
  DeploymentStreamDollarAndDeploymentsDollarNe,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      DeploymentStreamDollarAndDeploymentsDollarNe$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'DeploymentStreamDollarAndDeploymentsDollarNe' from JSON`,
  );
}

/** @internal */
export const DeploymentStreamDollarAndDollarNe$inboundSchema: z.ZodType<
  DeploymentStreamDollarAndDollarNe,
  z.ZodTypeDef,
  unknown
> = z.object({
  $ne: z.union([z.string(), z.number(), z.boolean()]),
}).transform((v) => {
  return remap$(v, {
    "$ne": "dollarNe",
  });
});

/** @internal */
export type DeploymentStreamDollarAndDollarNe$Outbound = {
  $ne: string | number | boolean;
};

/** @internal */
export const DeploymentStreamDollarAndDollarNe$outboundSchema: z.ZodType<
  DeploymentStreamDollarAndDollarNe$Outbound,
  z.ZodTypeDef,
  DeploymentStreamDollarAndDollarNe
> = z.object({
  dollarNe: z.union([z.string(), z.number(), z.boolean()]),
}).transform((v) => {
  return remap$(v, {
    dollarNe: "$ne",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeploymentStreamDollarAndDollarNe$ {
  /** @deprecated use `DeploymentStreamDollarAndDollarNe$inboundSchema` instead. */
  export const inboundSchema = DeploymentStreamDollarAndDollarNe$inboundSchema;
  /** @deprecated use `DeploymentStreamDollarAndDollarNe$outboundSchema` instead. */
  export const outboundSchema =
    DeploymentStreamDollarAndDollarNe$outboundSchema;
  /** @deprecated use `DeploymentStreamDollarAndDollarNe$Outbound` instead. */
  export type Outbound = DeploymentStreamDollarAndDollarNe$Outbound;
}

export function deploymentStreamDollarAndDollarNeToJSON(
  deploymentStreamDollarAndDollarNe: DeploymentStreamDollarAndDollarNe,
): string {
  return JSON.stringify(
    DeploymentStreamDollarAndDollarNe$outboundSchema.parse(
      deploymentStreamDollarAndDollarNe,
    ),
  );
}

export function deploymentStreamDollarAndDollarNeFromJSON(
  jsonString: string,
): SafeParseResult<DeploymentStreamDollarAndDollarNe, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DeploymentStreamDollarAndDollarNe$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DeploymentStreamDollarAndDollarNe' from JSON`,
  );
}

/** @internal */
export const DeploymentStreamDollarAndDeploymentsDollarEq$inboundSchema:
  z.ZodType<
    DeploymentStreamDollarAndDeploymentsDollarEq,
    z.ZodTypeDef,
    unknown
  > = z.union([z.string(), z.number(), z.boolean()]);

/** @internal */
export type DeploymentStreamDollarAndDeploymentsDollarEq$Outbound =
  | string
  | number
  | boolean;

/** @internal */
export const DeploymentStreamDollarAndDeploymentsDollarEq$outboundSchema:
  z.ZodType<
    DeploymentStreamDollarAndDeploymentsDollarEq$Outbound,
    z.ZodTypeDef,
    DeploymentStreamDollarAndDeploymentsDollarEq
  > = z.union([z.string(), z.number(), z.boolean()]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeploymentStreamDollarAndDeploymentsDollarEq$ {
  /** @deprecated use `DeploymentStreamDollarAndDeploymentsDollarEq$inboundSchema` instead. */
  export const inboundSchema =
    DeploymentStreamDollarAndDeploymentsDollarEq$inboundSchema;
  /** @deprecated use `DeploymentStreamDollarAndDeploymentsDollarEq$outboundSchema` instead. */
  export const outboundSchema =
    DeploymentStreamDollarAndDeploymentsDollarEq$outboundSchema;
  /** @deprecated use `DeploymentStreamDollarAndDeploymentsDollarEq$Outbound` instead. */
  export type Outbound = DeploymentStreamDollarAndDeploymentsDollarEq$Outbound;
}

export function deploymentStreamDollarAndDeploymentsDollarEqToJSON(
  deploymentStreamDollarAndDeploymentsDollarEq:
    DeploymentStreamDollarAndDeploymentsDollarEq,
): string {
  return JSON.stringify(
    DeploymentStreamDollarAndDeploymentsDollarEq$outboundSchema.parse(
      deploymentStreamDollarAndDeploymentsDollarEq,
    ),
  );
}

export function deploymentStreamDollarAndDeploymentsDollarEqFromJSON(
  jsonString: string,
): SafeParseResult<
  DeploymentStreamDollarAndDeploymentsDollarEq,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      DeploymentStreamDollarAndDeploymentsDollarEq$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'DeploymentStreamDollarAndDeploymentsDollarEq' from JSON`,
  );
}

/** @internal */
export const DeploymentStreamDollarAndDollarEq$inboundSchema: z.ZodType<
  DeploymentStreamDollarAndDollarEq,
  z.ZodTypeDef,
  unknown
> = z.object({
  $eq: z.union([z.string(), z.number(), z.boolean()]),
}).transform((v) => {
  return remap$(v, {
    "$eq": "dollarEq",
  });
});

/** @internal */
export type DeploymentStreamDollarAndDollarEq$Outbound = {
  $eq: string | number | boolean;
};

/** @internal */
export const DeploymentStreamDollarAndDollarEq$outboundSchema: z.ZodType<
  DeploymentStreamDollarAndDollarEq$Outbound,
  z.ZodTypeDef,
  DeploymentStreamDollarAndDollarEq
> = z.object({
  dollarEq: z.union([z.string(), z.number(), z.boolean()]),
}).transform((v) => {
  return remap$(v, {
    dollarEq: "$eq",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeploymentStreamDollarAndDollarEq$ {
  /** @deprecated use `DeploymentStreamDollarAndDollarEq$inboundSchema` instead. */
  export const inboundSchema = DeploymentStreamDollarAndDollarEq$inboundSchema;
  /** @deprecated use `DeploymentStreamDollarAndDollarEq$outboundSchema` instead. */
  export const outboundSchema =
    DeploymentStreamDollarAndDollarEq$outboundSchema;
  /** @deprecated use `DeploymentStreamDollarAndDollarEq$Outbound` instead. */
  export type Outbound = DeploymentStreamDollarAndDollarEq$Outbound;
}

export function deploymentStreamDollarAndDollarEqToJSON(
  deploymentStreamDollarAndDollarEq: DeploymentStreamDollarAndDollarEq,
): string {
  return JSON.stringify(
    DeploymentStreamDollarAndDollarEq$outboundSchema.parse(
      deploymentStreamDollarAndDollarEq,
    ),
  );
}

export function deploymentStreamDollarAndDollarEqFromJSON(
  jsonString: string,
): SafeParseResult<DeploymentStreamDollarAndDollarEq, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DeploymentStreamDollarAndDollarEq$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DeploymentStreamDollarAndDollarEq' from JSON`,
  );
}

/** @internal */
export const DeploymentStreamKnowledgeFilterDeploymentsDollarAnd$inboundSchema:
  z.ZodType<
    DeploymentStreamKnowledgeFilterDeploymentsDollarAnd,
    z.ZodTypeDef,
    unknown
  > = z.union([
    z.lazy(() => DeploymentStreamDollarAndDollarEq$inboundSchema),
    z.lazy(() => DeploymentStreamDollarAndDollarNe$inboundSchema),
    z.lazy(() => DeploymentStreamDollarAnd3$inboundSchema),
    z.lazy(() => DeploymentStreamDollarAndDollarGte$inboundSchema),
    z.lazy(() => DeploymentStreamDollarAndDollarLt$inboundSchema),
    z.lazy(() => DeploymentStreamDollarAndDollarLte$inboundSchema),
    z.lazy(() => DeploymentStreamDollarAndDollarIn$inboundSchema),
    z.lazy(() => DeploymentStreamDollarAndDollarNin$inboundSchema),
    z.lazy(() => DeploymentStreamDollarAndDollarExists$inboundSchema),
  ]);

/** @internal */
export type DeploymentStreamKnowledgeFilterDeploymentsDollarAnd$Outbound =
  | DeploymentStreamDollarAndDollarEq$Outbound
  | DeploymentStreamDollarAndDollarNe$Outbound
  | DeploymentStreamDollarAnd3$Outbound
  | DeploymentStreamDollarAndDollarGte$Outbound
  | DeploymentStreamDollarAndDollarLt$Outbound
  | DeploymentStreamDollarAndDollarLte$Outbound
  | DeploymentStreamDollarAndDollarIn$Outbound
  | DeploymentStreamDollarAndDollarNin$Outbound
  | DeploymentStreamDollarAndDollarExists$Outbound;

/** @internal */
export const DeploymentStreamKnowledgeFilterDeploymentsDollarAnd$outboundSchema:
  z.ZodType<
    DeploymentStreamKnowledgeFilterDeploymentsDollarAnd$Outbound,
    z.ZodTypeDef,
    DeploymentStreamKnowledgeFilterDeploymentsDollarAnd
  > = z.union([
    z.lazy(() => DeploymentStreamDollarAndDollarEq$outboundSchema),
    z.lazy(() => DeploymentStreamDollarAndDollarNe$outboundSchema),
    z.lazy(() => DeploymentStreamDollarAnd3$outboundSchema),
    z.lazy(() => DeploymentStreamDollarAndDollarGte$outboundSchema),
    z.lazy(() => DeploymentStreamDollarAndDollarLt$outboundSchema),
    z.lazy(() => DeploymentStreamDollarAndDollarLte$outboundSchema),
    z.lazy(() => DeploymentStreamDollarAndDollarIn$outboundSchema),
    z.lazy(() => DeploymentStreamDollarAndDollarNin$outboundSchema),
    z.lazy(() => DeploymentStreamDollarAndDollarExists$outboundSchema),
  ]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeploymentStreamKnowledgeFilterDeploymentsDollarAnd$ {
  /** @deprecated use `DeploymentStreamKnowledgeFilterDeploymentsDollarAnd$inboundSchema` instead. */
  export const inboundSchema =
    DeploymentStreamKnowledgeFilterDeploymentsDollarAnd$inboundSchema;
  /** @deprecated use `DeploymentStreamKnowledgeFilterDeploymentsDollarAnd$outboundSchema` instead. */
  export const outboundSchema =
    DeploymentStreamKnowledgeFilterDeploymentsDollarAnd$outboundSchema;
  /** @deprecated use `DeploymentStreamKnowledgeFilterDeploymentsDollarAnd$Outbound` instead. */
  export type Outbound =
    DeploymentStreamKnowledgeFilterDeploymentsDollarAnd$Outbound;
}

export function deploymentStreamKnowledgeFilterDeploymentsDollarAndToJSON(
  deploymentStreamKnowledgeFilterDeploymentsDollarAnd:
    DeploymentStreamKnowledgeFilterDeploymentsDollarAnd,
): string {
  return JSON.stringify(
    DeploymentStreamKnowledgeFilterDeploymentsDollarAnd$outboundSchema.parse(
      deploymentStreamKnowledgeFilterDeploymentsDollarAnd,
    ),
  );
}

export function deploymentStreamKnowledgeFilterDeploymentsDollarAndFromJSON(
  jsonString: string,
): SafeParseResult<
  DeploymentStreamKnowledgeFilterDeploymentsDollarAnd,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      DeploymentStreamKnowledgeFilterDeploymentsDollarAnd$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'DeploymentStreamKnowledgeFilterDeploymentsDollarAnd' from JSON`,
  );
}

/** @internal */
export const DeploymentStreamKnowledgeFilterDollarAnd$inboundSchema: z.ZodType<
  DeploymentStreamKnowledgeFilterDollarAnd,
  z.ZodTypeDef,
  unknown
> = z.object({
  $and: z.array(
    z.record(z.union([
      z.lazy(() => DeploymentStreamDollarAndDollarEq$inboundSchema),
      z.lazy(() =>
        DeploymentStreamDollarAndDollarNe$inboundSchema
      ),
      z.lazy(() => DeploymentStreamDollarAnd3$inboundSchema),
      z.lazy(() => DeploymentStreamDollarAndDollarGte$inboundSchema),
      z.lazy(() => DeploymentStreamDollarAndDollarLt$inboundSchema),
      z.lazy(() => DeploymentStreamDollarAndDollarLte$inboundSchema),
      z.lazy(() => DeploymentStreamDollarAndDollarIn$inboundSchema),
      z.lazy(() => DeploymentStreamDollarAndDollarNin$inboundSchema),
      z.lazy(() => DeploymentStreamDollarAndDollarExists$inboundSchema),
    ])),
  ),
}).transform((v) => {
  return remap$(v, {
    "$and": "dollarAnd",
  });
});

/** @internal */
export type DeploymentStreamKnowledgeFilterDollarAnd$Outbound = {
  $and: Array<
    {
      [k: string]:
        | DeploymentStreamDollarAndDollarEq$Outbound
        | DeploymentStreamDollarAndDollarNe$Outbound
        | DeploymentStreamDollarAnd3$Outbound
        | DeploymentStreamDollarAndDollarGte$Outbound
        | DeploymentStreamDollarAndDollarLt$Outbound
        | DeploymentStreamDollarAndDollarLte$Outbound
        | DeploymentStreamDollarAndDollarIn$Outbound
        | DeploymentStreamDollarAndDollarNin$Outbound
        | DeploymentStreamDollarAndDollarExists$Outbound;
    }
  >;
};

/** @internal */
export const DeploymentStreamKnowledgeFilterDollarAnd$outboundSchema: z.ZodType<
  DeploymentStreamKnowledgeFilterDollarAnd$Outbound,
  z.ZodTypeDef,
  DeploymentStreamKnowledgeFilterDollarAnd
> = z.object({
  dollarAnd: z.array(
    z.record(z.union([
      z.lazy(() => DeploymentStreamDollarAndDollarEq$outboundSchema),
      z.lazy(() =>
        DeploymentStreamDollarAndDollarNe$outboundSchema
      ),
      z.lazy(() => DeploymentStreamDollarAnd3$outboundSchema),
      z.lazy(() => DeploymentStreamDollarAndDollarGte$outboundSchema),
      z.lazy(() => DeploymentStreamDollarAndDollarLt$outboundSchema),
      z.lazy(() => DeploymentStreamDollarAndDollarLte$outboundSchema),
      z.lazy(() => DeploymentStreamDollarAndDollarIn$outboundSchema),
      z.lazy(() => DeploymentStreamDollarAndDollarNin$outboundSchema),
      z.lazy(() => DeploymentStreamDollarAndDollarExists$outboundSchema),
    ])),
  ),
}).transform((v) => {
  return remap$(v, {
    dollarAnd: "$and",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeploymentStreamKnowledgeFilterDollarAnd$ {
  /** @deprecated use `DeploymentStreamKnowledgeFilterDollarAnd$inboundSchema` instead. */
  export const inboundSchema =
    DeploymentStreamKnowledgeFilterDollarAnd$inboundSchema;
  /** @deprecated use `DeploymentStreamKnowledgeFilterDollarAnd$outboundSchema` instead. */
  export const outboundSchema =
    DeploymentStreamKnowledgeFilterDollarAnd$outboundSchema;
  /** @deprecated use `DeploymentStreamKnowledgeFilterDollarAnd$Outbound` instead. */
  export type Outbound = DeploymentStreamKnowledgeFilterDollarAnd$Outbound;
}

export function deploymentStreamKnowledgeFilterDollarAndToJSON(
  deploymentStreamKnowledgeFilterDollarAnd:
    DeploymentStreamKnowledgeFilterDollarAnd,
): string {
  return JSON.stringify(
    DeploymentStreamKnowledgeFilterDollarAnd$outboundSchema.parse(
      deploymentStreamKnowledgeFilterDollarAnd,
    ),
  );
}

export function deploymentStreamKnowledgeFilterDollarAndFromJSON(
  jsonString: string,
): SafeParseResult<
  DeploymentStreamKnowledgeFilterDollarAnd,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      DeploymentStreamKnowledgeFilterDollarAnd$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'DeploymentStreamKnowledgeFilterDollarAnd' from JSON`,
  );
}

/** @internal */
export const OneDollarExists$inboundSchema: z.ZodType<
  OneDollarExists,
  z.ZodTypeDef,
  unknown
> = z.object({
  $exists: z.boolean(),
}).transform((v) => {
  return remap$(v, {
    "$exists": "dollarExists",
  });
});

/** @internal */
export type OneDollarExists$Outbound = {
  $exists: boolean;
};

/** @internal */
export const OneDollarExists$outboundSchema: z.ZodType<
  OneDollarExists$Outbound,
  z.ZodTypeDef,
  OneDollarExists
> = z.object({
  dollarExists: z.boolean(),
}).transform((v) => {
  return remap$(v, {
    dollarExists: "$exists",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OneDollarExists$ {
  /** @deprecated use `OneDollarExists$inboundSchema` instead. */
  export const inboundSchema = OneDollarExists$inboundSchema;
  /** @deprecated use `OneDollarExists$outboundSchema` instead. */
  export const outboundSchema = OneDollarExists$outboundSchema;
  /** @deprecated use `OneDollarExists$Outbound` instead. */
  export type Outbound = OneDollarExists$Outbound;
}

export function oneDollarExistsToJSON(
  oneDollarExists: OneDollarExists,
): string {
  return JSON.stringify(OneDollarExists$outboundSchema.parse(oneDollarExists));
}

export function oneDollarExistsFromJSON(
  jsonString: string,
): SafeParseResult<OneDollarExists, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => OneDollarExists$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'OneDollarExists' from JSON`,
  );
}

/** @internal */
export const DeploymentStream1DeploymentsDollarNin$inboundSchema: z.ZodType<
  DeploymentStream1DeploymentsDollarNin,
  z.ZodTypeDef,
  unknown
> = z.union([z.string(), z.number(), z.boolean()]);

/** @internal */
export type DeploymentStream1DeploymentsDollarNin$Outbound =
  | string
  | number
  | boolean;

/** @internal */
export const DeploymentStream1DeploymentsDollarNin$outboundSchema: z.ZodType<
  DeploymentStream1DeploymentsDollarNin$Outbound,
  z.ZodTypeDef,
  DeploymentStream1DeploymentsDollarNin
> = z.union([z.string(), z.number(), z.boolean()]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeploymentStream1DeploymentsDollarNin$ {
  /** @deprecated use `DeploymentStream1DeploymentsDollarNin$inboundSchema` instead. */
  export const inboundSchema =
    DeploymentStream1DeploymentsDollarNin$inboundSchema;
  /** @deprecated use `DeploymentStream1DeploymentsDollarNin$outboundSchema` instead. */
  export const outboundSchema =
    DeploymentStream1DeploymentsDollarNin$outboundSchema;
  /** @deprecated use `DeploymentStream1DeploymentsDollarNin$Outbound` instead. */
  export type Outbound = DeploymentStream1DeploymentsDollarNin$Outbound;
}

export function deploymentStream1DeploymentsDollarNinToJSON(
  deploymentStream1DeploymentsDollarNin: DeploymentStream1DeploymentsDollarNin,
): string {
  return JSON.stringify(
    DeploymentStream1DeploymentsDollarNin$outboundSchema.parse(
      deploymentStream1DeploymentsDollarNin,
    ),
  );
}

export function deploymentStream1DeploymentsDollarNinFromJSON(
  jsonString: string,
): SafeParseResult<DeploymentStream1DeploymentsDollarNin, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      DeploymentStream1DeploymentsDollarNin$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DeploymentStream1DeploymentsDollarNin' from JSON`,
  );
}

/** @internal */
export const DeploymentStream1DollarNin$inboundSchema: z.ZodType<
  DeploymentStream1DollarNin,
  z.ZodTypeDef,
  unknown
> = z.object({
  $nin: z.array(z.union([z.string(), z.number(), z.boolean()])),
}).transform((v) => {
  return remap$(v, {
    "$nin": "dollarNin",
  });
});

/** @internal */
export type DeploymentStream1DollarNin$Outbound = {
  $nin: Array<string | number | boolean>;
};

/** @internal */
export const DeploymentStream1DollarNin$outboundSchema: z.ZodType<
  DeploymentStream1DollarNin$Outbound,
  z.ZodTypeDef,
  DeploymentStream1DollarNin
> = z.object({
  dollarNin: z.array(z.union([z.string(), z.number(), z.boolean()])),
}).transform((v) => {
  return remap$(v, {
    dollarNin: "$nin",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeploymentStream1DollarNin$ {
  /** @deprecated use `DeploymentStream1DollarNin$inboundSchema` instead. */
  export const inboundSchema = DeploymentStream1DollarNin$inboundSchema;
  /** @deprecated use `DeploymentStream1DollarNin$outboundSchema` instead. */
  export const outboundSchema = DeploymentStream1DollarNin$outboundSchema;
  /** @deprecated use `DeploymentStream1DollarNin$Outbound` instead. */
  export type Outbound = DeploymentStream1DollarNin$Outbound;
}

export function deploymentStream1DollarNinToJSON(
  deploymentStream1DollarNin: DeploymentStream1DollarNin,
): string {
  return JSON.stringify(
    DeploymentStream1DollarNin$outboundSchema.parse(deploymentStream1DollarNin),
  );
}

export function deploymentStream1DollarNinFromJSON(
  jsonString: string,
): SafeParseResult<DeploymentStream1DollarNin, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DeploymentStream1DollarNin$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DeploymentStream1DollarNin' from JSON`,
  );
}

/** @internal */
export const DeploymentStream1DeploymentsDollarIn$inboundSchema: z.ZodType<
  DeploymentStream1DeploymentsDollarIn,
  z.ZodTypeDef,
  unknown
> = z.union([z.string(), z.number(), z.boolean()]);

/** @internal */
export type DeploymentStream1DeploymentsDollarIn$Outbound =
  | string
  | number
  | boolean;

/** @internal */
export const DeploymentStream1DeploymentsDollarIn$outboundSchema: z.ZodType<
  DeploymentStream1DeploymentsDollarIn$Outbound,
  z.ZodTypeDef,
  DeploymentStream1DeploymentsDollarIn
> = z.union([z.string(), z.number(), z.boolean()]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeploymentStream1DeploymentsDollarIn$ {
  /** @deprecated use `DeploymentStream1DeploymentsDollarIn$inboundSchema` instead. */
  export const inboundSchema =
    DeploymentStream1DeploymentsDollarIn$inboundSchema;
  /** @deprecated use `DeploymentStream1DeploymentsDollarIn$outboundSchema` instead. */
  export const outboundSchema =
    DeploymentStream1DeploymentsDollarIn$outboundSchema;
  /** @deprecated use `DeploymentStream1DeploymentsDollarIn$Outbound` instead. */
  export type Outbound = DeploymentStream1DeploymentsDollarIn$Outbound;
}

export function deploymentStream1DeploymentsDollarInToJSON(
  deploymentStream1DeploymentsDollarIn: DeploymentStream1DeploymentsDollarIn,
): string {
  return JSON.stringify(
    DeploymentStream1DeploymentsDollarIn$outboundSchema.parse(
      deploymentStream1DeploymentsDollarIn,
    ),
  );
}

export function deploymentStream1DeploymentsDollarInFromJSON(
  jsonString: string,
): SafeParseResult<DeploymentStream1DeploymentsDollarIn, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      DeploymentStream1DeploymentsDollarIn$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DeploymentStream1DeploymentsDollarIn' from JSON`,
  );
}

/** @internal */
export const DeploymentStream1DollarIn$inboundSchema: z.ZodType<
  DeploymentStream1DollarIn,
  z.ZodTypeDef,
  unknown
> = z.object({
  $in: z.array(z.union([z.string(), z.number(), z.boolean()])),
}).transform((v) => {
  return remap$(v, {
    "$in": "dollarIn",
  });
});

/** @internal */
export type DeploymentStream1DollarIn$Outbound = {
  $in: Array<string | number | boolean>;
};

/** @internal */
export const DeploymentStream1DollarIn$outboundSchema: z.ZodType<
  DeploymentStream1DollarIn$Outbound,
  z.ZodTypeDef,
  DeploymentStream1DollarIn
> = z.object({
  dollarIn: z.array(z.union([z.string(), z.number(), z.boolean()])),
}).transform((v) => {
  return remap$(v, {
    dollarIn: "$in",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeploymentStream1DollarIn$ {
  /** @deprecated use `DeploymentStream1DollarIn$inboundSchema` instead. */
  export const inboundSchema = DeploymentStream1DollarIn$inboundSchema;
  /** @deprecated use `DeploymentStream1DollarIn$outboundSchema` instead. */
  export const outboundSchema = DeploymentStream1DollarIn$outboundSchema;
  /** @deprecated use `DeploymentStream1DollarIn$Outbound` instead. */
  export type Outbound = DeploymentStream1DollarIn$Outbound;
}

export function deploymentStream1DollarInToJSON(
  deploymentStream1DollarIn: DeploymentStream1DollarIn,
): string {
  return JSON.stringify(
    DeploymentStream1DollarIn$outboundSchema.parse(deploymentStream1DollarIn),
  );
}

export function deploymentStream1DollarInFromJSON(
  jsonString: string,
): SafeParseResult<DeploymentStream1DollarIn, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DeploymentStream1DollarIn$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DeploymentStream1DollarIn' from JSON`,
  );
}

/** @internal */
export const OneDollarLte$inboundSchema: z.ZodType<
  OneDollarLte,
  z.ZodTypeDef,
  unknown
> = z.object({
  $lte: z.number(),
}).transform((v) => {
  return remap$(v, {
    "$lte": "dollarLte",
  });
});

/** @internal */
export type OneDollarLte$Outbound = {
  $lte: number;
};

/** @internal */
export const OneDollarLte$outboundSchema: z.ZodType<
  OneDollarLte$Outbound,
  z.ZodTypeDef,
  OneDollarLte
> = z.object({
  dollarLte: z.number(),
}).transform((v) => {
  return remap$(v, {
    dollarLte: "$lte",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OneDollarLte$ {
  /** @deprecated use `OneDollarLte$inboundSchema` instead. */
  export const inboundSchema = OneDollarLte$inboundSchema;
  /** @deprecated use `OneDollarLte$outboundSchema` instead. */
  export const outboundSchema = OneDollarLte$outboundSchema;
  /** @deprecated use `OneDollarLte$Outbound` instead. */
  export type Outbound = OneDollarLte$Outbound;
}

export function oneDollarLteToJSON(oneDollarLte: OneDollarLte): string {
  return JSON.stringify(OneDollarLte$outboundSchema.parse(oneDollarLte));
}

export function oneDollarLteFromJSON(
  jsonString: string,
): SafeParseResult<OneDollarLte, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => OneDollarLte$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'OneDollarLte' from JSON`,
  );
}

/** @internal */
export const OneDollarLt$inboundSchema: z.ZodType<
  OneDollarLt,
  z.ZodTypeDef,
  unknown
> = z.object({
  $lt: z.number(),
}).transform((v) => {
  return remap$(v, {
    "$lt": "dollarLt",
  });
});

/** @internal */
export type OneDollarLt$Outbound = {
  $lt: number;
};

/** @internal */
export const OneDollarLt$outboundSchema: z.ZodType<
  OneDollarLt$Outbound,
  z.ZodTypeDef,
  OneDollarLt
> = z.object({
  dollarLt: z.number(),
}).transform((v) => {
  return remap$(v, {
    dollarLt: "$lt",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OneDollarLt$ {
  /** @deprecated use `OneDollarLt$inboundSchema` instead. */
  export const inboundSchema = OneDollarLt$inboundSchema;
  /** @deprecated use `OneDollarLt$outboundSchema` instead. */
  export const outboundSchema = OneDollarLt$outboundSchema;
  /** @deprecated use `OneDollarLt$Outbound` instead. */
  export type Outbound = OneDollarLt$Outbound;
}

export function oneDollarLtToJSON(oneDollarLt: OneDollarLt): string {
  return JSON.stringify(OneDollarLt$outboundSchema.parse(oneDollarLt));
}

export function oneDollarLtFromJSON(
  jsonString: string,
): SafeParseResult<OneDollarLt, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => OneDollarLt$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'OneDollarLt' from JSON`,
  );
}

/** @internal */
export const OneDollarGte$inboundSchema: z.ZodType<
  OneDollarGte,
  z.ZodTypeDef,
  unknown
> = z.object({
  $gte: z.number(),
}).transform((v) => {
  return remap$(v, {
    "$gte": "dollarGte",
  });
});

/** @internal */
export type OneDollarGte$Outbound = {
  $gte: number;
};

/** @internal */
export const OneDollarGte$outboundSchema: z.ZodType<
  OneDollarGte$Outbound,
  z.ZodTypeDef,
  OneDollarGte
> = z.object({
  dollarGte: z.number(),
}).transform((v) => {
  return remap$(v, {
    dollarGte: "$gte",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OneDollarGte$ {
  /** @deprecated use `OneDollarGte$inboundSchema` instead. */
  export const inboundSchema = OneDollarGte$inboundSchema;
  /** @deprecated use `OneDollarGte$outboundSchema` instead. */
  export const outboundSchema = OneDollarGte$outboundSchema;
  /** @deprecated use `OneDollarGte$Outbound` instead. */
  export type Outbound = OneDollarGte$Outbound;
}

export function oneDollarGteToJSON(oneDollarGte: OneDollarGte): string {
  return JSON.stringify(OneDollarGte$outboundSchema.parse(oneDollarGte));
}

export function oneDollarGteFromJSON(
  jsonString: string,
): SafeParseResult<OneDollarGte, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => OneDollarGte$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'OneDollarGte' from JSON`,
  );
}

/** @internal */
export const DeploymentStream13$inboundSchema: z.ZodType<
  DeploymentStream13,
  z.ZodTypeDef,
  unknown
> = z.object({
  $gt: z.number(),
}).transform((v) => {
  return remap$(v, {
    "$gt": "dollarGt",
  });
});

/** @internal */
export type DeploymentStream13$Outbound = {
  $gt: number;
};

/** @internal */
export const DeploymentStream13$outboundSchema: z.ZodType<
  DeploymentStream13$Outbound,
  z.ZodTypeDef,
  DeploymentStream13
> = z.object({
  dollarGt: z.number(),
}).transform((v) => {
  return remap$(v, {
    dollarGt: "$gt",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeploymentStream13$ {
  /** @deprecated use `DeploymentStream13$inboundSchema` instead. */
  export const inboundSchema = DeploymentStream13$inboundSchema;
  /** @deprecated use `DeploymentStream13$outboundSchema` instead. */
  export const outboundSchema = DeploymentStream13$outboundSchema;
  /** @deprecated use `DeploymentStream13$Outbound` instead. */
  export type Outbound = DeploymentStream13$Outbound;
}

export function deploymentStream13ToJSON(
  deploymentStream13: DeploymentStream13,
): string {
  return JSON.stringify(
    DeploymentStream13$outboundSchema.parse(deploymentStream13),
  );
}

export function deploymentStream13FromJSON(
  jsonString: string,
): SafeParseResult<DeploymentStream13, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DeploymentStream13$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DeploymentStream13' from JSON`,
  );
}

/** @internal */
export const DeploymentStream1DeploymentsDollarNe$inboundSchema: z.ZodType<
  DeploymentStream1DeploymentsDollarNe,
  z.ZodTypeDef,
  unknown
> = z.union([z.string(), z.number(), z.boolean()]);

/** @internal */
export type DeploymentStream1DeploymentsDollarNe$Outbound =
  | string
  | number
  | boolean;

/** @internal */
export const DeploymentStream1DeploymentsDollarNe$outboundSchema: z.ZodType<
  DeploymentStream1DeploymentsDollarNe$Outbound,
  z.ZodTypeDef,
  DeploymentStream1DeploymentsDollarNe
> = z.union([z.string(), z.number(), z.boolean()]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeploymentStream1DeploymentsDollarNe$ {
  /** @deprecated use `DeploymentStream1DeploymentsDollarNe$inboundSchema` instead. */
  export const inboundSchema =
    DeploymentStream1DeploymentsDollarNe$inboundSchema;
  /** @deprecated use `DeploymentStream1DeploymentsDollarNe$outboundSchema` instead. */
  export const outboundSchema =
    DeploymentStream1DeploymentsDollarNe$outboundSchema;
  /** @deprecated use `DeploymentStream1DeploymentsDollarNe$Outbound` instead. */
  export type Outbound = DeploymentStream1DeploymentsDollarNe$Outbound;
}

export function deploymentStream1DeploymentsDollarNeToJSON(
  deploymentStream1DeploymentsDollarNe: DeploymentStream1DeploymentsDollarNe,
): string {
  return JSON.stringify(
    DeploymentStream1DeploymentsDollarNe$outboundSchema.parse(
      deploymentStream1DeploymentsDollarNe,
    ),
  );
}

export function deploymentStream1DeploymentsDollarNeFromJSON(
  jsonString: string,
): SafeParseResult<DeploymentStream1DeploymentsDollarNe, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      DeploymentStream1DeploymentsDollarNe$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DeploymentStream1DeploymentsDollarNe' from JSON`,
  );
}

/** @internal */
export const DeploymentStream1DollarNe$inboundSchema: z.ZodType<
  DeploymentStream1DollarNe,
  z.ZodTypeDef,
  unknown
> = z.object({
  $ne: z.union([z.string(), z.number(), z.boolean()]),
}).transform((v) => {
  return remap$(v, {
    "$ne": "dollarNe",
  });
});

/** @internal */
export type DeploymentStream1DollarNe$Outbound = {
  $ne: string | number | boolean;
};

/** @internal */
export const DeploymentStream1DollarNe$outboundSchema: z.ZodType<
  DeploymentStream1DollarNe$Outbound,
  z.ZodTypeDef,
  DeploymentStream1DollarNe
> = z.object({
  dollarNe: z.union([z.string(), z.number(), z.boolean()]),
}).transform((v) => {
  return remap$(v, {
    dollarNe: "$ne",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeploymentStream1DollarNe$ {
  /** @deprecated use `DeploymentStream1DollarNe$inboundSchema` instead. */
  export const inboundSchema = DeploymentStream1DollarNe$inboundSchema;
  /** @deprecated use `DeploymentStream1DollarNe$outboundSchema` instead. */
  export const outboundSchema = DeploymentStream1DollarNe$outboundSchema;
  /** @deprecated use `DeploymentStream1DollarNe$Outbound` instead. */
  export type Outbound = DeploymentStream1DollarNe$Outbound;
}

export function deploymentStream1DollarNeToJSON(
  deploymentStream1DollarNe: DeploymentStream1DollarNe,
): string {
  return JSON.stringify(
    DeploymentStream1DollarNe$outboundSchema.parse(deploymentStream1DollarNe),
  );
}

export function deploymentStream1DollarNeFromJSON(
  jsonString: string,
): SafeParseResult<DeploymentStream1DollarNe, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DeploymentStream1DollarNe$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DeploymentStream1DollarNe' from JSON`,
  );
}

/** @internal */
export const DeploymentStream1DeploymentsDollarEq$inboundSchema: z.ZodType<
  DeploymentStream1DeploymentsDollarEq,
  z.ZodTypeDef,
  unknown
> = z.union([z.string(), z.number(), z.boolean()]);

/** @internal */
export type DeploymentStream1DeploymentsDollarEq$Outbound =
  | string
  | number
  | boolean;

/** @internal */
export const DeploymentStream1DeploymentsDollarEq$outboundSchema: z.ZodType<
  DeploymentStream1DeploymentsDollarEq$Outbound,
  z.ZodTypeDef,
  DeploymentStream1DeploymentsDollarEq
> = z.union([z.string(), z.number(), z.boolean()]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeploymentStream1DeploymentsDollarEq$ {
  /** @deprecated use `DeploymentStream1DeploymentsDollarEq$inboundSchema` instead. */
  export const inboundSchema =
    DeploymentStream1DeploymentsDollarEq$inboundSchema;
  /** @deprecated use `DeploymentStream1DeploymentsDollarEq$outboundSchema` instead. */
  export const outboundSchema =
    DeploymentStream1DeploymentsDollarEq$outboundSchema;
  /** @deprecated use `DeploymentStream1DeploymentsDollarEq$Outbound` instead. */
  export type Outbound = DeploymentStream1DeploymentsDollarEq$Outbound;
}

export function deploymentStream1DeploymentsDollarEqToJSON(
  deploymentStream1DeploymentsDollarEq: DeploymentStream1DeploymentsDollarEq,
): string {
  return JSON.stringify(
    DeploymentStream1DeploymentsDollarEq$outboundSchema.parse(
      deploymentStream1DeploymentsDollarEq,
    ),
  );
}

export function deploymentStream1DeploymentsDollarEqFromJSON(
  jsonString: string,
): SafeParseResult<DeploymentStream1DeploymentsDollarEq, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      DeploymentStream1DeploymentsDollarEq$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DeploymentStream1DeploymentsDollarEq' from JSON`,
  );
}

/** @internal */
export const DeploymentStream1DollarEq$inboundSchema: z.ZodType<
  DeploymentStream1DollarEq,
  z.ZodTypeDef,
  unknown
> = z.object({
  $eq: z.union([z.string(), z.number(), z.boolean()]),
}).transform((v) => {
  return remap$(v, {
    "$eq": "dollarEq",
  });
});

/** @internal */
export type DeploymentStream1DollarEq$Outbound = {
  $eq: string | number | boolean;
};

/** @internal */
export const DeploymentStream1DollarEq$outboundSchema: z.ZodType<
  DeploymentStream1DollarEq$Outbound,
  z.ZodTypeDef,
  DeploymentStream1DollarEq
> = z.object({
  dollarEq: z.union([z.string(), z.number(), z.boolean()]),
}).transform((v) => {
  return remap$(v, {
    dollarEq: "$eq",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeploymentStream1DollarEq$ {
  /** @deprecated use `DeploymentStream1DollarEq$inboundSchema` instead. */
  export const inboundSchema = DeploymentStream1DollarEq$inboundSchema;
  /** @deprecated use `DeploymentStream1DollarEq$outboundSchema` instead. */
  export const outboundSchema = DeploymentStream1DollarEq$outboundSchema;
  /** @deprecated use `DeploymentStream1DollarEq$Outbound` instead. */
  export type Outbound = DeploymentStream1DollarEq$Outbound;
}

export function deploymentStream1DollarEqToJSON(
  deploymentStream1DollarEq: DeploymentStream1DollarEq,
): string {
  return JSON.stringify(
    DeploymentStream1DollarEq$outboundSchema.parse(deploymentStream1DollarEq),
  );
}

export function deploymentStream1DollarEqFromJSON(
  jsonString: string,
): SafeParseResult<DeploymentStream1DollarEq, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DeploymentStream1DollarEq$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DeploymentStream1DollarEq' from JSON`,
  );
}

/** @internal */
export const DeploymentStreamKnowledgeFilter1$inboundSchema: z.ZodType<
  DeploymentStreamKnowledgeFilter1,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => DeploymentStream1DollarEq$inboundSchema),
  z.lazy(() => DeploymentStream1DollarNe$inboundSchema),
  z.lazy(() => DeploymentStream13$inboundSchema),
  z.lazy(() => OneDollarGte$inboundSchema),
  z.lazy(() => OneDollarLt$inboundSchema),
  z.lazy(() => OneDollarLte$inboundSchema),
  z.lazy(() => DeploymentStream1DollarIn$inboundSchema),
  z.lazy(() => DeploymentStream1DollarNin$inboundSchema),
  z.lazy(() => OneDollarExists$inboundSchema),
]);

/** @internal */
export type DeploymentStreamKnowledgeFilter1$Outbound =
  | DeploymentStream1DollarEq$Outbound
  | DeploymentStream1DollarNe$Outbound
  | DeploymentStream13$Outbound
  | OneDollarGte$Outbound
  | OneDollarLt$Outbound
  | OneDollarLte$Outbound
  | DeploymentStream1DollarIn$Outbound
  | DeploymentStream1DollarNin$Outbound
  | OneDollarExists$Outbound;

/** @internal */
export const DeploymentStreamKnowledgeFilter1$outboundSchema: z.ZodType<
  DeploymentStreamKnowledgeFilter1$Outbound,
  z.ZodTypeDef,
  DeploymentStreamKnowledgeFilter1
> = z.union([
  z.lazy(() => DeploymentStream1DollarEq$outboundSchema),
  z.lazy(() => DeploymentStream1DollarNe$outboundSchema),
  z.lazy(() => DeploymentStream13$outboundSchema),
  z.lazy(() => OneDollarGte$outboundSchema),
  z.lazy(() => OneDollarLt$outboundSchema),
  z.lazy(() => OneDollarLte$outboundSchema),
  z.lazy(() => DeploymentStream1DollarIn$outboundSchema),
  z.lazy(() => DeploymentStream1DollarNin$outboundSchema),
  z.lazy(() => OneDollarExists$outboundSchema),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeploymentStreamKnowledgeFilter1$ {
  /** @deprecated use `DeploymentStreamKnowledgeFilter1$inboundSchema` instead. */
  export const inboundSchema = DeploymentStreamKnowledgeFilter1$inboundSchema;
  /** @deprecated use `DeploymentStreamKnowledgeFilter1$outboundSchema` instead. */
  export const outboundSchema = DeploymentStreamKnowledgeFilter1$outboundSchema;
  /** @deprecated use `DeploymentStreamKnowledgeFilter1$Outbound` instead. */
  export type Outbound = DeploymentStreamKnowledgeFilter1$Outbound;
}

export function deploymentStreamKnowledgeFilter1ToJSON(
  deploymentStreamKnowledgeFilter1: DeploymentStreamKnowledgeFilter1,
): string {
  return JSON.stringify(
    DeploymentStreamKnowledgeFilter1$outboundSchema.parse(
      deploymentStreamKnowledgeFilter1,
    ),
  );
}

export function deploymentStreamKnowledgeFilter1FromJSON(
  jsonString: string,
): SafeParseResult<DeploymentStreamKnowledgeFilter1, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DeploymentStreamKnowledgeFilter1$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DeploymentStreamKnowledgeFilter1' from JSON`,
  );
}

/** @internal */
export const DeploymentStreamKnowledgeFilter$inboundSchema: z.ZodType<
  DeploymentStreamKnowledgeFilter,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => DeploymentStreamKnowledgeFilterDollarAnd$inboundSchema),
  z.lazy(() => DeploymentStreamKnowledgeFilterDollarOr$inboundSchema),
  z.record(
    z.union([
      z.lazy(() => DeploymentStream1DollarEq$inboundSchema),
      z.lazy(() => DeploymentStream1DollarNe$inboundSchema),
      z.lazy(() => DeploymentStream13$inboundSchema),
      z.lazy(() => OneDollarGte$inboundSchema),
      z.lazy(() => OneDollarLt$inboundSchema),
      z.lazy(() => OneDollarLte$inboundSchema),
      z.lazy(() => DeploymentStream1DollarIn$inboundSchema),
      z.lazy(() => DeploymentStream1DollarNin$inboundSchema),
      z.lazy(() => OneDollarExists$inboundSchema),
    ]),
  ),
]);

/** @internal */
export type DeploymentStreamKnowledgeFilter$Outbound =
  | DeploymentStreamKnowledgeFilterDollarAnd$Outbound
  | DeploymentStreamKnowledgeFilterDollarOr$Outbound
  | {
    [k: string]:
      | DeploymentStream1DollarEq$Outbound
      | DeploymentStream1DollarNe$Outbound
      | DeploymentStream13$Outbound
      | OneDollarGte$Outbound
      | OneDollarLt$Outbound
      | OneDollarLte$Outbound
      | DeploymentStream1DollarIn$Outbound
      | DeploymentStream1DollarNin$Outbound
      | OneDollarExists$Outbound;
  };

/** @internal */
export const DeploymentStreamKnowledgeFilter$outboundSchema: z.ZodType<
  DeploymentStreamKnowledgeFilter$Outbound,
  z.ZodTypeDef,
  DeploymentStreamKnowledgeFilter
> = z.union([
  z.lazy(() => DeploymentStreamKnowledgeFilterDollarAnd$outboundSchema),
  z.lazy(() => DeploymentStreamKnowledgeFilterDollarOr$outboundSchema),
  z.record(
    z.union([
      z.lazy(() => DeploymentStream1DollarEq$outboundSchema),
      z.lazy(() => DeploymentStream1DollarNe$outboundSchema),
      z.lazy(() => DeploymentStream13$outboundSchema),
      z.lazy(() => OneDollarGte$outboundSchema),
      z.lazy(() => OneDollarLt$outboundSchema),
      z.lazy(() => OneDollarLte$outboundSchema),
      z.lazy(() => DeploymentStream1DollarIn$outboundSchema),
      z.lazy(() => DeploymentStream1DollarNin$outboundSchema),
      z.lazy(() => OneDollarExists$outboundSchema),
    ]),
  ),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeploymentStreamKnowledgeFilter$ {
  /** @deprecated use `DeploymentStreamKnowledgeFilter$inboundSchema` instead. */
  export const inboundSchema = DeploymentStreamKnowledgeFilter$inboundSchema;
  /** @deprecated use `DeploymentStreamKnowledgeFilter$outboundSchema` instead. */
  export const outboundSchema = DeploymentStreamKnowledgeFilter$outboundSchema;
  /** @deprecated use `DeploymentStreamKnowledgeFilter$Outbound` instead. */
  export type Outbound = DeploymentStreamKnowledgeFilter$Outbound;
}

export function deploymentStreamKnowledgeFilterToJSON(
  deploymentStreamKnowledgeFilter: DeploymentStreamKnowledgeFilter,
): string {
  return JSON.stringify(
    DeploymentStreamKnowledgeFilter$outboundSchema.parse(
      deploymentStreamKnowledgeFilter,
    ),
  );
}

export function deploymentStreamKnowledgeFilterFromJSON(
  jsonString: string,
): SafeParseResult<DeploymentStreamKnowledgeFilter, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DeploymentStreamKnowledgeFilter$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DeploymentStreamKnowledgeFilter' from JSON`,
  );
}

/** @internal */
export const DeploymentStreamRequestBody$inboundSchema: z.ZodType<
  DeploymentStreamRequestBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  key: z.string(),
  inputs: z.record(z.union([z.string(), z.number(), z.boolean()])).optional(),
  context: z.record(z.any()).optional(),
  prefix_messages: z.array(
    z.union([
      z.lazy(() => PrefixMessagesDeveloperMessage$inboundSchema),
      z.lazy(() => PrefixMessagesSystemMessage$inboundSchema),
      z.lazy(() => PrefixMessagesUserMessage$inboundSchema),
      z.lazy(() => PrefixMessagesToolMessage$inboundSchema),
      z.lazy(() => PrefixMessagesAssistantMessage$inboundSchema),
    ]),
  ).optional(),
  messages: z.array(
    z.union([
      z.lazy(() => DeploymentStreamMessagesDeveloperMessage$inboundSchema),
      z.lazy(() => DeploymentStreamMessagesSystemMessage$inboundSchema),
      z.lazy(() => DeploymentStreamMessagesUserMessage$inboundSchema),
      z.lazy(() => DeploymentStreamMessagesToolMessage$inboundSchema),
      z.lazy(() => DeploymentStreamMessagesAssistantMessage$inboundSchema),
    ]),
  ).optional(),
  file_ids: z.array(z.string()).optional(),
  metadata: z.record(z.any()).optional(),
  extra_params: z.record(z.any()).optional(),
  documents: z.array(z.lazy(() => DeploymentStreamDocuments$inboundSchema))
    .optional(),
  invoke_options: z.lazy(() => DeploymentStreamInvokeOptions$inboundSchema)
    .optional(),
  thread: z.lazy(() => DeploymentStreamThread$inboundSchema).optional(),
  knowledge_filter: z.union([
    z.lazy(() => DeploymentStreamKnowledgeFilterDollarAnd$inboundSchema),
    z.lazy(() => DeploymentStreamKnowledgeFilterDollarOr$inboundSchema),
    z.record(
      z.union([
        z.lazy(() => DeploymentStream1DollarEq$inboundSchema),
        z.lazy(() => DeploymentStream1DollarNe$inboundSchema),
        z.lazy(() => DeploymentStream13$inboundSchema),
        z.lazy(() => OneDollarGte$inboundSchema),
        z.lazy(() => OneDollarLt$inboundSchema),
        z.lazy(() => OneDollarLte$inboundSchema),
        z.lazy(() => DeploymentStream1DollarIn$inboundSchema),
        z.lazy(() => DeploymentStream1DollarNin$inboundSchema),
        z.lazy(() => OneDollarExists$inboundSchema),
      ]),
    ),
  ]).optional(),
}).transform((v) => {
  return remap$(v, {
    "prefix_messages": "prefixMessages",
    "file_ids": "fileIds",
    "extra_params": "extraParams",
    "invoke_options": "invokeOptions",
    "knowledge_filter": "knowledgeFilter",
  });
});

/** @internal */
export type DeploymentStreamRequestBody$Outbound = {
  key: string;
  inputs?: { [k: string]: string | number | boolean } | undefined;
  context?: { [k: string]: any } | undefined;
  prefix_messages?:
    | Array<
      | PrefixMessagesDeveloperMessage$Outbound
      | PrefixMessagesSystemMessage$Outbound
      | PrefixMessagesUserMessage$Outbound
      | PrefixMessagesToolMessage$Outbound
      | PrefixMessagesAssistantMessage$Outbound
    >
    | undefined;
  messages?:
    | Array<
      | DeploymentStreamMessagesDeveloperMessage$Outbound
      | DeploymentStreamMessagesSystemMessage$Outbound
      | DeploymentStreamMessagesUserMessage$Outbound
      | DeploymentStreamMessagesToolMessage$Outbound
      | DeploymentStreamMessagesAssistantMessage$Outbound
    >
    | undefined;
  file_ids?: Array<string> | undefined;
  metadata?: { [k: string]: any } | undefined;
  extra_params?: { [k: string]: any } | undefined;
  documents?: Array<DeploymentStreamDocuments$Outbound> | undefined;
  invoke_options?: DeploymentStreamInvokeOptions$Outbound | undefined;
  thread?: DeploymentStreamThread$Outbound | undefined;
  knowledge_filter?:
    | DeploymentStreamKnowledgeFilterDollarAnd$Outbound
    | DeploymentStreamKnowledgeFilterDollarOr$Outbound
    | {
      [k: string]:
        | DeploymentStream1DollarEq$Outbound
        | DeploymentStream1DollarNe$Outbound
        | DeploymentStream13$Outbound
        | OneDollarGte$Outbound
        | OneDollarLt$Outbound
        | OneDollarLte$Outbound
        | DeploymentStream1DollarIn$Outbound
        | DeploymentStream1DollarNin$Outbound
        | OneDollarExists$Outbound;
    }
    | undefined;
};

/** @internal */
export const DeploymentStreamRequestBody$outboundSchema: z.ZodType<
  DeploymentStreamRequestBody$Outbound,
  z.ZodTypeDef,
  DeploymentStreamRequestBody
> = z.object({
  key: z.string(),
  inputs: z.record(z.union([z.string(), z.number(), z.boolean()])).optional(),
  context: z.record(z.any()).optional(),
  prefixMessages: z.array(
    z.union([
      z.lazy(() => PrefixMessagesDeveloperMessage$outboundSchema),
      z.lazy(() => PrefixMessagesSystemMessage$outboundSchema),
      z.lazy(() => PrefixMessagesUserMessage$outboundSchema),
      z.lazy(() => PrefixMessagesToolMessage$outboundSchema),
      z.lazy(() => PrefixMessagesAssistantMessage$outboundSchema),
    ]),
  ).optional(),
  messages: z.array(
    z.union([
      z.lazy(() => DeploymentStreamMessagesDeveloperMessage$outboundSchema),
      z.lazy(() => DeploymentStreamMessagesSystemMessage$outboundSchema),
      z.lazy(() => DeploymentStreamMessagesUserMessage$outboundSchema),
      z.lazy(() => DeploymentStreamMessagesToolMessage$outboundSchema),
      z.lazy(() => DeploymentStreamMessagesAssistantMessage$outboundSchema),
    ]),
  ).optional(),
  fileIds: z.array(z.string()).optional(),
  metadata: z.record(z.any()).optional(),
  extraParams: z.record(z.any()).optional(),
  documents: z.array(z.lazy(() => DeploymentStreamDocuments$outboundSchema))
    .optional(),
  invokeOptions: z.lazy(() => DeploymentStreamInvokeOptions$outboundSchema)
    .optional(),
  thread: z.lazy(() => DeploymentStreamThread$outboundSchema).optional(),
  knowledgeFilter: z.union([
    z.lazy(() => DeploymentStreamKnowledgeFilterDollarAnd$outboundSchema),
    z.lazy(() => DeploymentStreamKnowledgeFilterDollarOr$outboundSchema),
    z.record(
      z.union([
        z.lazy(() => DeploymentStream1DollarEq$outboundSchema),
        z.lazy(() => DeploymentStream1DollarNe$outboundSchema),
        z.lazy(() => DeploymentStream13$outboundSchema),
        z.lazy(() => OneDollarGte$outboundSchema),
        z.lazy(() => OneDollarLt$outboundSchema),
        z.lazy(() => OneDollarLte$outboundSchema),
        z.lazy(() => DeploymentStream1DollarIn$outboundSchema),
        z.lazy(() => DeploymentStream1DollarNin$outboundSchema),
        z.lazy(() => OneDollarExists$outboundSchema),
      ]),
    ),
  ]).optional(),
}).transform((v) => {
  return remap$(v, {
    prefixMessages: "prefix_messages",
    fileIds: "file_ids",
    extraParams: "extra_params",
    invokeOptions: "invoke_options",
    knowledgeFilter: "knowledge_filter",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeploymentStreamRequestBody$ {
  /** @deprecated use `DeploymentStreamRequestBody$inboundSchema` instead. */
  export const inboundSchema = DeploymentStreamRequestBody$inboundSchema;
  /** @deprecated use `DeploymentStreamRequestBody$outboundSchema` instead. */
  export const outboundSchema = DeploymentStreamRequestBody$outboundSchema;
  /** @deprecated use `DeploymentStreamRequestBody$Outbound` instead. */
  export type Outbound = DeploymentStreamRequestBody$Outbound;
}

export function deploymentStreamRequestBodyToJSON(
  deploymentStreamRequestBody: DeploymentStreamRequestBody,
): string {
  return JSON.stringify(
    DeploymentStreamRequestBody$outboundSchema.parse(
      deploymentStreamRequestBody,
    ),
  );
}

export function deploymentStreamRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<DeploymentStreamRequestBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DeploymentStreamRequestBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DeploymentStreamRequestBody' from JSON`,
  );
}

/** @internal */
export const DeploymentStreamObject$inboundSchema: z.ZodNativeEnum<
  typeof DeploymentStreamObject
> = z.nativeEnum(DeploymentStreamObject);

/** @internal */
export const DeploymentStreamObject$outboundSchema: z.ZodNativeEnum<
  typeof DeploymentStreamObject
> = DeploymentStreamObject$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeploymentStreamObject$ {
  /** @deprecated use `DeploymentStreamObject$inboundSchema` instead. */
  export const inboundSchema = DeploymentStreamObject$inboundSchema;
  /** @deprecated use `DeploymentStreamObject$outboundSchema` instead. */
  export const outboundSchema = DeploymentStreamObject$outboundSchema;
}

/** @internal */
export const DeploymentStreamProvider$inboundSchema: z.ZodNativeEnum<
  typeof DeploymentStreamProvider
> = z.nativeEnum(DeploymentStreamProvider);

/** @internal */
export const DeploymentStreamProvider$outboundSchema: z.ZodNativeEnum<
  typeof DeploymentStreamProvider
> = DeploymentStreamProvider$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeploymentStreamProvider$ {
  /** @deprecated use `DeploymentStreamProvider$inboundSchema` instead. */
  export const inboundSchema = DeploymentStreamProvider$inboundSchema;
  /** @deprecated use `DeploymentStreamProvider$outboundSchema` instead. */
  export const outboundSchema = DeploymentStreamProvider$outboundSchema;
}

/** @internal */
export const DeploymentStreamMessageDeploymentsResponseRole$inboundSchema:
  z.ZodNativeEnum<typeof DeploymentStreamMessageDeploymentsResponseRole> = z
    .nativeEnum(DeploymentStreamMessageDeploymentsResponseRole);

/** @internal */
export const DeploymentStreamMessageDeploymentsResponseRole$outboundSchema:
  z.ZodNativeEnum<typeof DeploymentStreamMessageDeploymentsResponseRole> =
    DeploymentStreamMessageDeploymentsResponseRole$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeploymentStreamMessageDeploymentsResponseRole$ {
  /** @deprecated use `DeploymentStreamMessageDeploymentsResponseRole$inboundSchema` instead. */
  export const inboundSchema =
    DeploymentStreamMessageDeploymentsResponseRole$inboundSchema;
  /** @deprecated use `DeploymentStreamMessageDeploymentsResponseRole$outboundSchema` instead. */
  export const outboundSchema =
    DeploymentStreamMessageDeploymentsResponseRole$outboundSchema;
}

/** @internal */
export const DeploymentStreamMessage3$inboundSchema: z.ZodType<
  DeploymentStreamMessage3,
  z.ZodTypeDef,
  unknown
> = z.object({
  role: DeploymentStreamMessageDeploymentsResponseRole$inboundSchema,
  url: z.string(),
});

/** @internal */
export type DeploymentStreamMessage3$Outbound = {
  role: string;
  url: string;
};

/** @internal */
export const DeploymentStreamMessage3$outboundSchema: z.ZodType<
  DeploymentStreamMessage3$Outbound,
  z.ZodTypeDef,
  DeploymentStreamMessage3
> = z.object({
  role: DeploymentStreamMessageDeploymentsResponseRole$outboundSchema,
  url: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeploymentStreamMessage3$ {
  /** @deprecated use `DeploymentStreamMessage3$inboundSchema` instead. */
  export const inboundSchema = DeploymentStreamMessage3$inboundSchema;
  /** @deprecated use `DeploymentStreamMessage3$outboundSchema` instead. */
  export const outboundSchema = DeploymentStreamMessage3$outboundSchema;
  /** @deprecated use `DeploymentStreamMessage3$Outbound` instead. */
  export type Outbound = DeploymentStreamMessage3$Outbound;
}

export function deploymentStreamMessage3ToJSON(
  deploymentStreamMessage3: DeploymentStreamMessage3,
): string {
  return JSON.stringify(
    DeploymentStreamMessage3$outboundSchema.parse(deploymentStreamMessage3),
  );
}

export function deploymentStreamMessage3FromJSON(
  jsonString: string,
): SafeParseResult<DeploymentStreamMessage3, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DeploymentStreamMessage3$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DeploymentStreamMessage3' from JSON`,
  );
}

/** @internal */
export const DeploymentStreamMessageDeploymentsRole$inboundSchema:
  z.ZodNativeEnum<typeof DeploymentStreamMessageDeploymentsRole> = z.nativeEnum(
    DeploymentStreamMessageDeploymentsRole,
  );

/** @internal */
export const DeploymentStreamMessageDeploymentsRole$outboundSchema:
  z.ZodNativeEnum<typeof DeploymentStreamMessageDeploymentsRole> =
    DeploymentStreamMessageDeploymentsRole$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeploymentStreamMessageDeploymentsRole$ {
  /** @deprecated use `DeploymentStreamMessageDeploymentsRole$inboundSchema` instead. */
  export const inboundSchema =
    DeploymentStreamMessageDeploymentsRole$inboundSchema;
  /** @deprecated use `DeploymentStreamMessageDeploymentsRole$outboundSchema` instead. */
  export const outboundSchema =
    DeploymentStreamMessageDeploymentsRole$outboundSchema;
}

/** @internal */
export const DeploymentStreamMessage2$inboundSchema: z.ZodType<
  DeploymentStreamMessage2,
  z.ZodTypeDef,
  unknown
> = z.object({
  role: DeploymentStreamMessageDeploymentsRole$inboundSchema,
  content: z.nullable(z.string()),
});

/** @internal */
export type DeploymentStreamMessage2$Outbound = {
  role: string;
  content: string | null;
};

/** @internal */
export const DeploymentStreamMessage2$outboundSchema: z.ZodType<
  DeploymentStreamMessage2$Outbound,
  z.ZodTypeDef,
  DeploymentStreamMessage2
> = z.object({
  role: DeploymentStreamMessageDeploymentsRole$outboundSchema,
  content: z.nullable(z.string()),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeploymentStreamMessage2$ {
  /** @deprecated use `DeploymentStreamMessage2$inboundSchema` instead. */
  export const inboundSchema = DeploymentStreamMessage2$inboundSchema;
  /** @deprecated use `DeploymentStreamMessage2$outboundSchema` instead. */
  export const outboundSchema = DeploymentStreamMessage2$outboundSchema;
  /** @deprecated use `DeploymentStreamMessage2$Outbound` instead. */
  export type Outbound = DeploymentStreamMessage2$Outbound;
}

export function deploymentStreamMessage2ToJSON(
  deploymentStreamMessage2: DeploymentStreamMessage2,
): string {
  return JSON.stringify(
    DeploymentStreamMessage2$outboundSchema.parse(deploymentStreamMessage2),
  );
}

export function deploymentStreamMessage2FromJSON(
  jsonString: string,
): SafeParseResult<DeploymentStreamMessage2, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DeploymentStreamMessage2$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DeploymentStreamMessage2' from JSON`,
  );
}

/** @internal */
export const DeploymentStreamMessageRole$inboundSchema: z.ZodNativeEnum<
  typeof DeploymentStreamMessageRole
> = z.nativeEnum(DeploymentStreamMessageRole);

/** @internal */
export const DeploymentStreamMessageRole$outboundSchema: z.ZodNativeEnum<
  typeof DeploymentStreamMessageRole
> = DeploymentStreamMessageRole$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeploymentStreamMessageRole$ {
  /** @deprecated use `DeploymentStreamMessageRole$inboundSchema` instead. */
  export const inboundSchema = DeploymentStreamMessageRole$inboundSchema;
  /** @deprecated use `DeploymentStreamMessageRole$outboundSchema` instead. */
  export const outboundSchema = DeploymentStreamMessageRole$outboundSchema;
}

/** @internal */
export const DeploymentStreamMessageType$inboundSchema: z.ZodNativeEnum<
  typeof DeploymentStreamMessageType
> = z.nativeEnum(DeploymentStreamMessageType);

/** @internal */
export const DeploymentStreamMessageType$outboundSchema: z.ZodNativeEnum<
  typeof DeploymentStreamMessageType
> = DeploymentStreamMessageType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeploymentStreamMessageType$ {
  /** @deprecated use `DeploymentStreamMessageType$inboundSchema` instead. */
  export const inboundSchema = DeploymentStreamMessageType$inboundSchema;
  /** @deprecated use `DeploymentStreamMessageType$outboundSchema` instead. */
  export const outboundSchema = DeploymentStreamMessageType$outboundSchema;
}

/** @internal */
export const DeploymentStreamMessageFunction$inboundSchema: z.ZodType<
  DeploymentStreamMessageFunction,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.string(),
  arguments: z.string(),
});

/** @internal */
export type DeploymentStreamMessageFunction$Outbound = {
  name: string;
  arguments: string;
};

/** @internal */
export const DeploymentStreamMessageFunction$outboundSchema: z.ZodType<
  DeploymentStreamMessageFunction$Outbound,
  z.ZodTypeDef,
  DeploymentStreamMessageFunction
> = z.object({
  name: z.string(),
  arguments: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeploymentStreamMessageFunction$ {
  /** @deprecated use `DeploymentStreamMessageFunction$inboundSchema` instead. */
  export const inboundSchema = DeploymentStreamMessageFunction$inboundSchema;
  /** @deprecated use `DeploymentStreamMessageFunction$outboundSchema` instead. */
  export const outboundSchema = DeploymentStreamMessageFunction$outboundSchema;
  /** @deprecated use `DeploymentStreamMessageFunction$Outbound` instead. */
  export type Outbound = DeploymentStreamMessageFunction$Outbound;
}

export function deploymentStreamMessageFunctionToJSON(
  deploymentStreamMessageFunction: DeploymentStreamMessageFunction,
): string {
  return JSON.stringify(
    DeploymentStreamMessageFunction$outboundSchema.parse(
      deploymentStreamMessageFunction,
    ),
  );
}

export function deploymentStreamMessageFunctionFromJSON(
  jsonString: string,
): SafeParseResult<DeploymentStreamMessageFunction, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DeploymentStreamMessageFunction$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DeploymentStreamMessageFunction' from JSON`,
  );
}

/** @internal */
export const DeploymentStreamMessageToolCalls$inboundSchema: z.ZodType<
  DeploymentStreamMessageToolCalls,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string().optional(),
  index: z.number().optional(),
  type: DeploymentStreamMessageType$inboundSchema,
  function: z.lazy(() => DeploymentStreamMessageFunction$inboundSchema),
});

/** @internal */
export type DeploymentStreamMessageToolCalls$Outbound = {
  id?: string | undefined;
  index?: number | undefined;
  type: string;
  function: DeploymentStreamMessageFunction$Outbound;
};

/** @internal */
export const DeploymentStreamMessageToolCalls$outboundSchema: z.ZodType<
  DeploymentStreamMessageToolCalls$Outbound,
  z.ZodTypeDef,
  DeploymentStreamMessageToolCalls
> = z.object({
  id: z.string().optional(),
  index: z.number().optional(),
  type: DeploymentStreamMessageType$outboundSchema,
  function: z.lazy(() => DeploymentStreamMessageFunction$outboundSchema),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeploymentStreamMessageToolCalls$ {
  /** @deprecated use `DeploymentStreamMessageToolCalls$inboundSchema` instead. */
  export const inboundSchema = DeploymentStreamMessageToolCalls$inboundSchema;
  /** @deprecated use `DeploymentStreamMessageToolCalls$outboundSchema` instead. */
  export const outboundSchema = DeploymentStreamMessageToolCalls$outboundSchema;
  /** @deprecated use `DeploymentStreamMessageToolCalls$Outbound` instead. */
  export type Outbound = DeploymentStreamMessageToolCalls$Outbound;
}

export function deploymentStreamMessageToolCallsToJSON(
  deploymentStreamMessageToolCalls: DeploymentStreamMessageToolCalls,
): string {
  return JSON.stringify(
    DeploymentStreamMessageToolCalls$outboundSchema.parse(
      deploymentStreamMessageToolCalls,
    ),
  );
}

export function deploymentStreamMessageToolCallsFromJSON(
  jsonString: string,
): SafeParseResult<DeploymentStreamMessageToolCalls, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DeploymentStreamMessageToolCalls$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DeploymentStreamMessageToolCalls' from JSON`,
  );
}

/** @internal */
export const DeploymentStreamMessage1$inboundSchema: z.ZodType<
  DeploymentStreamMessage1,
  z.ZodTypeDef,
  unknown
> = z.object({
  role: DeploymentStreamMessageRole$inboundSchema,
  content: z.nullable(z.string()).optional(),
  tool_calls: z.array(
    z.lazy(() => DeploymentStreamMessageToolCalls$inboundSchema),
  ),
}).transform((v) => {
  return remap$(v, {
    "tool_calls": "toolCalls",
  });
});

/** @internal */
export type DeploymentStreamMessage1$Outbound = {
  role: string;
  content?: string | null | undefined;
  tool_calls: Array<DeploymentStreamMessageToolCalls$Outbound>;
};

/** @internal */
export const DeploymentStreamMessage1$outboundSchema: z.ZodType<
  DeploymentStreamMessage1$Outbound,
  z.ZodTypeDef,
  DeploymentStreamMessage1
> = z.object({
  role: DeploymentStreamMessageRole$outboundSchema,
  content: z.nullable(z.string()).optional(),
  toolCalls: z.array(
    z.lazy(() => DeploymentStreamMessageToolCalls$outboundSchema),
  ),
}).transform((v) => {
  return remap$(v, {
    toolCalls: "tool_calls",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeploymentStreamMessage1$ {
  /** @deprecated use `DeploymentStreamMessage1$inboundSchema` instead. */
  export const inboundSchema = DeploymentStreamMessage1$inboundSchema;
  /** @deprecated use `DeploymentStreamMessage1$outboundSchema` instead. */
  export const outboundSchema = DeploymentStreamMessage1$outboundSchema;
  /** @deprecated use `DeploymentStreamMessage1$Outbound` instead. */
  export type Outbound = DeploymentStreamMessage1$Outbound;
}

export function deploymentStreamMessage1ToJSON(
  deploymentStreamMessage1: DeploymentStreamMessage1,
): string {
  return JSON.stringify(
    DeploymentStreamMessage1$outboundSchema.parse(deploymentStreamMessage1),
  );
}

export function deploymentStreamMessage1FromJSON(
  jsonString: string,
): SafeParseResult<DeploymentStreamMessage1, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DeploymentStreamMessage1$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DeploymentStreamMessage1' from JSON`,
  );
}

/** @internal */
export const DeploymentStreamMessage$inboundSchema: z.ZodType<
  DeploymentStreamMessage,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => DeploymentStreamMessage2$inboundSchema),
  z.lazy(() => DeploymentStreamMessage3$inboundSchema),
  z.lazy(() => DeploymentStreamMessage1$inboundSchema),
]);

/** @internal */
export type DeploymentStreamMessage$Outbound =
  | DeploymentStreamMessage2$Outbound
  | DeploymentStreamMessage3$Outbound
  | DeploymentStreamMessage1$Outbound;

/** @internal */
export const DeploymentStreamMessage$outboundSchema: z.ZodType<
  DeploymentStreamMessage$Outbound,
  z.ZodTypeDef,
  DeploymentStreamMessage
> = z.union([
  z.lazy(() => DeploymentStreamMessage2$outboundSchema),
  z.lazy(() => DeploymentStreamMessage3$outboundSchema),
  z.lazy(() => DeploymentStreamMessage1$outboundSchema),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeploymentStreamMessage$ {
  /** @deprecated use `DeploymentStreamMessage$inboundSchema` instead. */
  export const inboundSchema = DeploymentStreamMessage$inboundSchema;
  /** @deprecated use `DeploymentStreamMessage$outboundSchema` instead. */
  export const outboundSchema = DeploymentStreamMessage$outboundSchema;
  /** @deprecated use `DeploymentStreamMessage$Outbound` instead. */
  export type Outbound = DeploymentStreamMessage$Outbound;
}

export function deploymentStreamMessageToJSON(
  deploymentStreamMessage: DeploymentStreamMessage,
): string {
  return JSON.stringify(
    DeploymentStreamMessage$outboundSchema.parse(deploymentStreamMessage),
  );
}

export function deploymentStreamMessageFromJSON(
  jsonString: string,
): SafeParseResult<DeploymentStreamMessage, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DeploymentStreamMessage$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DeploymentStreamMessage' from JSON`,
  );
}

/** @internal */
export const DeploymentStreamChoices$inboundSchema: z.ZodType<
  DeploymentStreamChoices,
  z.ZodTypeDef,
  unknown
> = z.object({
  index: z.number(),
  message: z.union([
    z.lazy(() => DeploymentStreamMessage2$inboundSchema),
    z.lazy(() => DeploymentStreamMessage3$inboundSchema),
    z.lazy(() => DeploymentStreamMessage1$inboundSchema),
  ]).optional(),
  finish_reason: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    "finish_reason": "finishReason",
  });
});

/** @internal */
export type DeploymentStreamChoices$Outbound = {
  index: number;
  message?:
    | DeploymentStreamMessage2$Outbound
    | DeploymentStreamMessage3$Outbound
    | DeploymentStreamMessage1$Outbound
    | undefined;
  finish_reason?: string | null | undefined;
};

/** @internal */
export const DeploymentStreamChoices$outboundSchema: z.ZodType<
  DeploymentStreamChoices$Outbound,
  z.ZodTypeDef,
  DeploymentStreamChoices
> = z.object({
  index: z.number(),
  message: z.union([
    z.lazy(() => DeploymentStreamMessage2$outboundSchema),
    z.lazy(() => DeploymentStreamMessage3$outboundSchema),
    z.lazy(() => DeploymentStreamMessage1$outboundSchema),
  ]).optional(),
  finishReason: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    finishReason: "finish_reason",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeploymentStreamChoices$ {
  /** @deprecated use `DeploymentStreamChoices$inboundSchema` instead. */
  export const inboundSchema = DeploymentStreamChoices$inboundSchema;
  /** @deprecated use `DeploymentStreamChoices$outboundSchema` instead. */
  export const outboundSchema = DeploymentStreamChoices$outboundSchema;
  /** @deprecated use `DeploymentStreamChoices$Outbound` instead. */
  export type Outbound = DeploymentStreamChoices$Outbound;
}

export function deploymentStreamChoicesToJSON(
  deploymentStreamChoices: DeploymentStreamChoices,
): string {
  return JSON.stringify(
    DeploymentStreamChoices$outboundSchema.parse(deploymentStreamChoices),
  );
}

export function deploymentStreamChoicesFromJSON(
  jsonString: string,
): SafeParseResult<DeploymentStreamChoices, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DeploymentStreamChoices$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DeploymentStreamChoices' from JSON`,
  );
}

/** @internal */
export const DeploymentStreamDeploymentsMetadata$inboundSchema: z.ZodType<
  DeploymentStreamDeploymentsMetadata,
  z.ZodTypeDef,
  unknown
> = z.object({
  file_name: z.string(),
  page_number: z.nullable(z.number()),
  file_type: z.string(),
  rerank_score: z.number().optional(),
  search_score: z.number(),
}).transform((v) => {
  return remap$(v, {
    "file_name": "fileName",
    "page_number": "pageNumber",
    "file_type": "fileType",
    "rerank_score": "rerankScore",
    "search_score": "searchScore",
  });
});

/** @internal */
export type DeploymentStreamDeploymentsMetadata$Outbound = {
  file_name: string;
  page_number: number | null;
  file_type: string;
  rerank_score?: number | undefined;
  search_score: number;
};

/** @internal */
export const DeploymentStreamDeploymentsMetadata$outboundSchema: z.ZodType<
  DeploymentStreamDeploymentsMetadata$Outbound,
  z.ZodTypeDef,
  DeploymentStreamDeploymentsMetadata
> = z.object({
  fileName: z.string(),
  pageNumber: z.nullable(z.number()),
  fileType: z.string(),
  rerankScore: z.number().optional(),
  searchScore: z.number(),
}).transform((v) => {
  return remap$(v, {
    fileName: "file_name",
    pageNumber: "page_number",
    fileType: "file_type",
    rerankScore: "rerank_score",
    searchScore: "search_score",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeploymentStreamDeploymentsMetadata$ {
  /** @deprecated use `DeploymentStreamDeploymentsMetadata$inboundSchema` instead. */
  export const inboundSchema =
    DeploymentStreamDeploymentsMetadata$inboundSchema;
  /** @deprecated use `DeploymentStreamDeploymentsMetadata$outboundSchema` instead. */
  export const outboundSchema =
    DeploymentStreamDeploymentsMetadata$outboundSchema;
  /** @deprecated use `DeploymentStreamDeploymentsMetadata$Outbound` instead. */
  export type Outbound = DeploymentStreamDeploymentsMetadata$Outbound;
}

export function deploymentStreamDeploymentsMetadataToJSON(
  deploymentStreamDeploymentsMetadata: DeploymentStreamDeploymentsMetadata,
): string {
  return JSON.stringify(
    DeploymentStreamDeploymentsMetadata$outboundSchema.parse(
      deploymentStreamDeploymentsMetadata,
    ),
  );
}

export function deploymentStreamDeploymentsMetadataFromJSON(
  jsonString: string,
): SafeParseResult<DeploymentStreamDeploymentsMetadata, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      DeploymentStreamDeploymentsMetadata$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DeploymentStreamDeploymentsMetadata' from JSON`,
  );
}

/** @internal */
export const DeploymentStreamRetrievals$inboundSchema: z.ZodType<
  DeploymentStreamRetrievals,
  z.ZodTypeDef,
  unknown
> = z.object({
  document: z.string(),
  metadata: z.lazy(() => DeploymentStreamDeploymentsMetadata$inboundSchema),
});

/** @internal */
export type DeploymentStreamRetrievals$Outbound = {
  document: string;
  metadata: DeploymentStreamDeploymentsMetadata$Outbound;
};

/** @internal */
export const DeploymentStreamRetrievals$outboundSchema: z.ZodType<
  DeploymentStreamRetrievals$Outbound,
  z.ZodTypeDef,
  DeploymentStreamRetrievals
> = z.object({
  document: z.string(),
  metadata: z.lazy(() => DeploymentStreamDeploymentsMetadata$outboundSchema),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeploymentStreamRetrievals$ {
  /** @deprecated use `DeploymentStreamRetrievals$inboundSchema` instead. */
  export const inboundSchema = DeploymentStreamRetrievals$inboundSchema;
  /** @deprecated use `DeploymentStreamRetrievals$outboundSchema` instead. */
  export const outboundSchema = DeploymentStreamRetrievals$outboundSchema;
  /** @deprecated use `DeploymentStreamRetrievals$Outbound` instead. */
  export type Outbound = DeploymentStreamRetrievals$Outbound;
}

export function deploymentStreamRetrievalsToJSON(
  deploymentStreamRetrievals: DeploymentStreamRetrievals,
): string {
  return JSON.stringify(
    DeploymentStreamRetrievals$outboundSchema.parse(deploymentStreamRetrievals),
  );
}

export function deploymentStreamRetrievalsFromJSON(
  jsonString: string,
): SafeParseResult<DeploymentStreamRetrievals, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DeploymentStreamRetrievals$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DeploymentStreamRetrievals' from JSON`,
  );
}

/** @internal */
export const DeploymentStreamData$inboundSchema: z.ZodType<
  DeploymentStreamData,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string().optional(),
  created: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
  object: DeploymentStreamObject$inboundSchema.optional(),
  model: z.string().optional(),
  provider: DeploymentStreamProvider$inboundSchema.optional(),
  is_final: z.boolean().optional(),
  integration_id: z.string().optional(),
  finalized: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
  system_fingerprint: z.nullable(z.string()).optional(),
  choices: z.array(z.lazy(() => DeploymentStreamChoices$inboundSchema))
    .optional(),
  retrievals: z.array(z.lazy(() => DeploymentStreamRetrievals$inboundSchema))
    .optional(),
  provider_response: z.any().optional(),
}).transform((v) => {
  return remap$(v, {
    "is_final": "isFinal",
    "integration_id": "integrationId",
    "system_fingerprint": "systemFingerprint",
    "provider_response": "providerResponse",
  });
});

/** @internal */
export type DeploymentStreamData$Outbound = {
  id?: string | undefined;
  created?: string | undefined;
  object?: string | undefined;
  model?: string | undefined;
  provider?: string | undefined;
  is_final?: boolean | undefined;
  integration_id?: string | undefined;
  finalized?: string | undefined;
  system_fingerprint?: string | null | undefined;
  choices?: Array<DeploymentStreamChoices$Outbound> | undefined;
  retrievals?: Array<DeploymentStreamRetrievals$Outbound> | undefined;
  provider_response?: any | undefined;
};

/** @internal */
export const DeploymentStreamData$outboundSchema: z.ZodType<
  DeploymentStreamData$Outbound,
  z.ZodTypeDef,
  DeploymentStreamData
> = z.object({
  id: z.string().optional(),
  created: z.date().transform(v => v.toISOString()).optional(),
  object: DeploymentStreamObject$outboundSchema.optional(),
  model: z.string().optional(),
  provider: DeploymentStreamProvider$outboundSchema.optional(),
  isFinal: z.boolean().optional(),
  integrationId: z.string().optional(),
  finalized: z.date().transform(v => v.toISOString()).optional(),
  systemFingerprint: z.nullable(z.string()).optional(),
  choices: z.array(z.lazy(() => DeploymentStreamChoices$outboundSchema))
    .optional(),
  retrievals: z.array(z.lazy(() => DeploymentStreamRetrievals$outboundSchema))
    .optional(),
  providerResponse: z.any().optional(),
}).transform((v) => {
  return remap$(v, {
    isFinal: "is_final",
    integrationId: "integration_id",
    systemFingerprint: "system_fingerprint",
    providerResponse: "provider_response",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeploymentStreamData$ {
  /** @deprecated use `DeploymentStreamData$inboundSchema` instead. */
  export const inboundSchema = DeploymentStreamData$inboundSchema;
  /** @deprecated use `DeploymentStreamData$outboundSchema` instead. */
  export const outboundSchema = DeploymentStreamData$outboundSchema;
  /** @deprecated use `DeploymentStreamData$Outbound` instead. */
  export type Outbound = DeploymentStreamData$Outbound;
}

export function deploymentStreamDataToJSON(
  deploymentStreamData: DeploymentStreamData,
): string {
  return JSON.stringify(
    DeploymentStreamData$outboundSchema.parse(deploymentStreamData),
  );
}

export function deploymentStreamDataFromJSON(
  jsonString: string,
): SafeParseResult<DeploymentStreamData, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DeploymentStreamData$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DeploymentStreamData' from JSON`,
  );
}

/** @internal */
export const DeploymentStreamResponseBody$inboundSchema: z.ZodType<
  DeploymentStreamResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  data: z.string().transform((v, ctx) => {
    try {
      return JSON.parse(v);
    } catch (err) {
      ctx.addIssue({
        code: z.ZodIssueCode.custom,
        message: `malformed json: ${err}`,
      });
      return z.NEVER;
    }
  }).pipe(z.lazy(() => DeploymentStreamData$inboundSchema).optional()),
});

/** @internal */
export type DeploymentStreamResponseBody$Outbound = {
  data?: DeploymentStreamData$Outbound | undefined;
};

/** @internal */
export const DeploymentStreamResponseBody$outboundSchema: z.ZodType<
  DeploymentStreamResponseBody$Outbound,
  z.ZodTypeDef,
  DeploymentStreamResponseBody
> = z.object({
  data: z.lazy(() => DeploymentStreamData$outboundSchema).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeploymentStreamResponseBody$ {
  /** @deprecated use `DeploymentStreamResponseBody$inboundSchema` instead. */
  export const inboundSchema = DeploymentStreamResponseBody$inboundSchema;
  /** @deprecated use `DeploymentStreamResponseBody$outboundSchema` instead. */
  export const outboundSchema = DeploymentStreamResponseBody$outboundSchema;
  /** @deprecated use `DeploymentStreamResponseBody$Outbound` instead. */
  export type Outbound = DeploymentStreamResponseBody$Outbound;
}

export function deploymentStreamResponseBodyToJSON(
  deploymentStreamResponseBody: DeploymentStreamResponseBody,
): string {
  return JSON.stringify(
    DeploymentStreamResponseBody$outboundSchema.parse(
      deploymentStreamResponseBody,
    ),
  );
}

export function deploymentStreamResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<DeploymentStreamResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DeploymentStreamResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DeploymentStreamResponseBody' from JSON`,
  );
}
