/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type EvalsExactMatchRequestBody = {
  output: string;
  reference: string;
};

export type EvalsExactMatchValue = boolean | string | number;

/**
 * Returns the result of the evaluator run
 */
export type EvalsExactMatchResponseBody = {
  value: boolean | string | number | null;
};

/** @internal */
export const EvalsExactMatchRequestBody$inboundSchema: z.ZodType<
  EvalsExactMatchRequestBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  output: z.string(),
  reference: z.string(),
});

/** @internal */
export type EvalsExactMatchRequestBody$Outbound = {
  output: string;
  reference: string;
};

/** @internal */
export const EvalsExactMatchRequestBody$outboundSchema: z.ZodType<
  EvalsExactMatchRequestBody$Outbound,
  z.ZodTypeDef,
  EvalsExactMatchRequestBody
> = z.object({
  output: z.string(),
  reference: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EvalsExactMatchRequestBody$ {
  /** @deprecated use `EvalsExactMatchRequestBody$inboundSchema` instead. */
  export const inboundSchema = EvalsExactMatchRequestBody$inboundSchema;
  /** @deprecated use `EvalsExactMatchRequestBody$outboundSchema` instead. */
  export const outboundSchema = EvalsExactMatchRequestBody$outboundSchema;
  /** @deprecated use `EvalsExactMatchRequestBody$Outbound` instead. */
  export type Outbound = EvalsExactMatchRequestBody$Outbound;
}

export function evalsExactMatchRequestBodyToJSON(
  evalsExactMatchRequestBody: EvalsExactMatchRequestBody,
): string {
  return JSON.stringify(
    EvalsExactMatchRequestBody$outboundSchema.parse(evalsExactMatchRequestBody),
  );
}

export function evalsExactMatchRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<EvalsExactMatchRequestBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => EvalsExactMatchRequestBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'EvalsExactMatchRequestBody' from JSON`,
  );
}

/** @internal */
export const EvalsExactMatchValue$inboundSchema: z.ZodType<
  EvalsExactMatchValue,
  z.ZodTypeDef,
  unknown
> = z.union([z.boolean(), z.string(), z.number()]);

/** @internal */
export type EvalsExactMatchValue$Outbound = boolean | string | number;

/** @internal */
export const EvalsExactMatchValue$outboundSchema: z.ZodType<
  EvalsExactMatchValue$Outbound,
  z.ZodTypeDef,
  EvalsExactMatchValue
> = z.union([z.boolean(), z.string(), z.number()]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EvalsExactMatchValue$ {
  /** @deprecated use `EvalsExactMatchValue$inboundSchema` instead. */
  export const inboundSchema = EvalsExactMatchValue$inboundSchema;
  /** @deprecated use `EvalsExactMatchValue$outboundSchema` instead. */
  export const outboundSchema = EvalsExactMatchValue$outboundSchema;
  /** @deprecated use `EvalsExactMatchValue$Outbound` instead. */
  export type Outbound = EvalsExactMatchValue$Outbound;
}

export function evalsExactMatchValueToJSON(
  evalsExactMatchValue: EvalsExactMatchValue,
): string {
  return JSON.stringify(
    EvalsExactMatchValue$outboundSchema.parse(evalsExactMatchValue),
  );
}

export function evalsExactMatchValueFromJSON(
  jsonString: string,
): SafeParseResult<EvalsExactMatchValue, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => EvalsExactMatchValue$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'EvalsExactMatchValue' from JSON`,
  );
}

/** @internal */
export const EvalsExactMatchResponseBody$inboundSchema: z.ZodType<
  EvalsExactMatchResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  value: z.nullable(z.union([z.boolean(), z.string(), z.number()])),
});

/** @internal */
export type EvalsExactMatchResponseBody$Outbound = {
  value: boolean | string | number | null;
};

/** @internal */
export const EvalsExactMatchResponseBody$outboundSchema: z.ZodType<
  EvalsExactMatchResponseBody$Outbound,
  z.ZodTypeDef,
  EvalsExactMatchResponseBody
> = z.object({
  value: z.nullable(z.union([z.boolean(), z.string(), z.number()])),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EvalsExactMatchResponseBody$ {
  /** @deprecated use `EvalsExactMatchResponseBody$inboundSchema` instead. */
  export const inboundSchema = EvalsExactMatchResponseBody$inboundSchema;
  /** @deprecated use `EvalsExactMatchResponseBody$outboundSchema` instead. */
  export const outboundSchema = EvalsExactMatchResponseBody$outboundSchema;
  /** @deprecated use `EvalsExactMatchResponseBody$Outbound` instead. */
  export type Outbound = EvalsExactMatchResponseBody$Outbound;
}

export function evalsExactMatchResponseBodyToJSON(
  evalsExactMatchResponseBody: EvalsExactMatchResponseBody,
): string {
  return JSON.stringify(
    EvalsExactMatchResponseBody$outboundSchema.parse(
      evalsExactMatchResponseBody,
    ),
  );
}

export function evalsExactMatchResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<EvalsExactMatchResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => EvalsExactMatchResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'EvalsExactMatchResponseBody' from JSON`,
  );
}
