/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export const ListModelsObject = {
  List: "list",
} as const;
export type ListModelsObject = ClosedEnum<typeof ListModelsObject>;

/**
 * The modality of the model
 */
export const ListModelsType = {
  Chat: "chat",
  Completion: "completion",
  Embedding: "embedding",
  Vision: "vision",
  Image: "image",
  Tts: "tts",
  Stt: "stt",
  Rerank: "rerank",
  Moderations: "moderations",
} as const;
/**
 * The modality of the model
 */
export type ListModelsType = ClosedEnum<typeof ListModelsType>;

/**
 * Describe the provider of the model. Every model with `vendor` is publicly available, while models with `workspace` are private.
 */
export const OwnedBy = {
  Vendor: "vendor",
  Workspace: "workspace",
} as const;
/**
 * Describe the provider of the model. Every model with `vendor` is publicly available, while models with `workspace` are private.
 */
export type OwnedBy = ClosedEnum<typeof OwnedBy>;

/**
 * Describes a model offering that can be used with the API
 */
export type ListModelsData = {
  /**
   * The model identifier, which can be referenced in the API endpoints.
   */
  id: string;
  /**
   * The timestamp of the model creation
   */
  created: number;
  /**
   * The modality of the model
   */
  type: ListModelsType;
  /**
   * Describe the provider of the model. Every model with `vendor` is publicly available, while models with `workspace` are private.
   */
  ownedBy: OwnedBy;
};

/**
 * A list of model objects.
 */
export type ListModelsResponseBody = {
  object: ListModelsObject;
  data: Array<ListModelsData>;
  hasMore: boolean;
};

/** @internal */
export const ListModelsObject$inboundSchema: z.ZodNativeEnum<
  typeof ListModelsObject
> = z.nativeEnum(ListModelsObject);

/** @internal */
export const ListModelsObject$outboundSchema: z.ZodNativeEnum<
  typeof ListModelsObject
> = ListModelsObject$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListModelsObject$ {
  /** @deprecated use `ListModelsObject$inboundSchema` instead. */
  export const inboundSchema = ListModelsObject$inboundSchema;
  /** @deprecated use `ListModelsObject$outboundSchema` instead. */
  export const outboundSchema = ListModelsObject$outboundSchema;
}

/** @internal */
export const ListModelsType$inboundSchema: z.ZodNativeEnum<
  typeof ListModelsType
> = z.nativeEnum(ListModelsType);

/** @internal */
export const ListModelsType$outboundSchema: z.ZodNativeEnum<
  typeof ListModelsType
> = ListModelsType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListModelsType$ {
  /** @deprecated use `ListModelsType$inboundSchema` instead. */
  export const inboundSchema = ListModelsType$inboundSchema;
  /** @deprecated use `ListModelsType$outboundSchema` instead. */
  export const outboundSchema = ListModelsType$outboundSchema;
}

/** @internal */
export const OwnedBy$inboundSchema: z.ZodNativeEnum<typeof OwnedBy> = z
  .nativeEnum(OwnedBy);

/** @internal */
export const OwnedBy$outboundSchema: z.ZodNativeEnum<typeof OwnedBy> =
  OwnedBy$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OwnedBy$ {
  /** @deprecated use `OwnedBy$inboundSchema` instead. */
  export const inboundSchema = OwnedBy$inboundSchema;
  /** @deprecated use `OwnedBy$outboundSchema` instead. */
  export const outboundSchema = OwnedBy$outboundSchema;
}

/** @internal */
export const ListModelsData$inboundSchema: z.ZodType<
  ListModelsData,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  created: z.number(),
  type: ListModelsType$inboundSchema,
  owned_by: OwnedBy$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "owned_by": "ownedBy",
  });
});

/** @internal */
export type ListModelsData$Outbound = {
  id: string;
  created: number;
  type: string;
  owned_by: string;
};

/** @internal */
export const ListModelsData$outboundSchema: z.ZodType<
  ListModelsData$Outbound,
  z.ZodTypeDef,
  ListModelsData
> = z.object({
  id: z.string(),
  created: z.number(),
  type: ListModelsType$outboundSchema,
  ownedBy: OwnedBy$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    ownedBy: "owned_by",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListModelsData$ {
  /** @deprecated use `ListModelsData$inboundSchema` instead. */
  export const inboundSchema = ListModelsData$inboundSchema;
  /** @deprecated use `ListModelsData$outboundSchema` instead. */
  export const outboundSchema = ListModelsData$outboundSchema;
  /** @deprecated use `ListModelsData$Outbound` instead. */
  export type Outbound = ListModelsData$Outbound;
}

export function listModelsDataToJSON(listModelsData: ListModelsData): string {
  return JSON.stringify(ListModelsData$outboundSchema.parse(listModelsData));
}

export function listModelsDataFromJSON(
  jsonString: string,
): SafeParseResult<ListModelsData, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListModelsData$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListModelsData' from JSON`,
  );
}

/** @internal */
export const ListModelsResponseBody$inboundSchema: z.ZodType<
  ListModelsResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  object: ListModelsObject$inboundSchema,
  data: z.array(z.lazy(() => ListModelsData$inboundSchema)),
  has_more: z.boolean(),
}).transform((v) => {
  return remap$(v, {
    "has_more": "hasMore",
  });
});

/** @internal */
export type ListModelsResponseBody$Outbound = {
  object: string;
  data: Array<ListModelsData$Outbound>;
  has_more: boolean;
};

/** @internal */
export const ListModelsResponseBody$outboundSchema: z.ZodType<
  ListModelsResponseBody$Outbound,
  z.ZodTypeDef,
  ListModelsResponseBody
> = z.object({
  object: ListModelsObject$outboundSchema,
  data: z.array(z.lazy(() => ListModelsData$outboundSchema)),
  hasMore: z.boolean(),
}).transform((v) => {
  return remap$(v, {
    hasMore: "has_more",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListModelsResponseBody$ {
  /** @deprecated use `ListModelsResponseBody$inboundSchema` instead. */
  export const inboundSchema = ListModelsResponseBody$inboundSchema;
  /** @deprecated use `ListModelsResponseBody$outboundSchema` instead. */
  export const outboundSchema = ListModelsResponseBody$outboundSchema;
  /** @deprecated use `ListModelsResponseBody$Outbound` instead. */
  export type Outbound = ListModelsResponseBody$Outbound;
}

export function listModelsResponseBodyToJSON(
  listModelsResponseBody: ListModelsResponseBody,
): string {
  return JSON.stringify(
    ListModelsResponseBody$outboundSchema.parse(listModelsResponseBody),
  );
}

export function listModelsResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<ListModelsResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListModelsResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListModelsResponseBody' from JSON`,
  );
}
