/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type EvalsRagasConcisenessRequestBody = {
  /**
   * Latest user message
   */
  input: string;
  /**
   * The generated response from the model
   */
  output: string;
  model: string;
  /**
   * The reference used to compare the output
   */
  reference?: string | undefined;
};

/**
 * Returns the conciseness evaluation result
 */
export type EvalsRagasConcisenessResponseBody = {
  value: number | null;
};

/** @internal */
export const EvalsRagasConcisenessRequestBody$inboundSchema: z.ZodType<
  EvalsRagasConcisenessRequestBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  input: z.string(),
  output: z.string(),
  model: z.string(),
  reference: z.string().optional(),
});

/** @internal */
export type EvalsRagasConcisenessRequestBody$Outbound = {
  input: string;
  output: string;
  model: string;
  reference?: string | undefined;
};

/** @internal */
export const EvalsRagasConcisenessRequestBody$outboundSchema: z.ZodType<
  EvalsRagasConcisenessRequestBody$Outbound,
  z.ZodTypeDef,
  EvalsRagasConcisenessRequestBody
> = z.object({
  input: z.string(),
  output: z.string(),
  model: z.string(),
  reference: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EvalsRagasConcisenessRequestBody$ {
  /** @deprecated use `EvalsRagasConcisenessRequestBody$inboundSchema` instead. */
  export const inboundSchema = EvalsRagasConcisenessRequestBody$inboundSchema;
  /** @deprecated use `EvalsRagasConcisenessRequestBody$outboundSchema` instead. */
  export const outboundSchema = EvalsRagasConcisenessRequestBody$outboundSchema;
  /** @deprecated use `EvalsRagasConcisenessRequestBody$Outbound` instead. */
  export type Outbound = EvalsRagasConcisenessRequestBody$Outbound;
}

export function evalsRagasConcisenessRequestBodyToJSON(
  evalsRagasConcisenessRequestBody: EvalsRagasConcisenessRequestBody,
): string {
  return JSON.stringify(
    EvalsRagasConcisenessRequestBody$outboundSchema.parse(
      evalsRagasConcisenessRequestBody,
    ),
  );
}

export function evalsRagasConcisenessRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<EvalsRagasConcisenessRequestBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => EvalsRagasConcisenessRequestBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'EvalsRagasConcisenessRequestBody' from JSON`,
  );
}

/** @internal */
export const EvalsRagasConcisenessResponseBody$inboundSchema: z.ZodType<
  EvalsRagasConcisenessResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  value: z.nullable(z.number()),
});

/** @internal */
export type EvalsRagasConcisenessResponseBody$Outbound = {
  value: number | null;
};

/** @internal */
export const EvalsRagasConcisenessResponseBody$outboundSchema: z.ZodType<
  EvalsRagasConcisenessResponseBody$Outbound,
  z.ZodTypeDef,
  EvalsRagasConcisenessResponseBody
> = z.object({
  value: z.nullable(z.number()),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EvalsRagasConcisenessResponseBody$ {
  /** @deprecated use `EvalsRagasConcisenessResponseBody$inboundSchema` instead. */
  export const inboundSchema = EvalsRagasConcisenessResponseBody$inboundSchema;
  /** @deprecated use `EvalsRagasConcisenessResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    EvalsRagasConcisenessResponseBody$outboundSchema;
  /** @deprecated use `EvalsRagasConcisenessResponseBody$Outbound` instead. */
  export type Outbound = EvalsRagasConcisenessResponseBody$Outbound;
}

export function evalsRagasConcisenessResponseBodyToJSON(
  evalsRagasConcisenessResponseBody: EvalsRagasConcisenessResponseBody,
): string {
  return JSON.stringify(
    EvalsRagasConcisenessResponseBody$outboundSchema.parse(
      evalsRagasConcisenessResponseBody,
    ),
  );
}

export function evalsRagasConcisenessResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<EvalsRagasConcisenessResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => EvalsRagasConcisenessResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'EvalsRagasConcisenessResponseBody' from JSON`,
  );
}
