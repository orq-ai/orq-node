/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * Comma-separated list of task statuses to filter by. Available values: inactive, approval_required, in_progress, errored
 */
export const Status = {
  Inactive: "inactive",
  ApprovalRequired: "approval_required",
  InProgress: "in_progress",
  Errored: "errored",
} as const;
/**
 * Comma-separated list of task statuses to filter by. Available values: inactive, approval_required, in_progress, errored
 */
export type Status = ClosedEnum<typeof Status>;

export type ListAgentTasksRequest = {
  /**
   * The unique key of the agent
   */
  agentKey: string;
  /**
   * A limit on the number of objects to be returned. Limit can range between 1 and 50, and the default is 10
   */
  limit?: number | undefined;
  /**
   * A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 20 objects, ending with `01JJ1HDHN79XAS7A01WB3HYSDB`, your subsequent call can include `after=01JJ1HDHN79XAS7A01WB3HYSDB` in order to fetch the next page of the list.
   */
  startingAfter?: string | undefined;
  /**
   * A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 20 objects, starting with `01JJ1HDHN79XAS7A01WB3HYSDB`, your subsequent call can include `before=01JJ1HDHN79XAS7A01WB3HYSDB` in order to fetch the previous page of the list.
   */
  endingBefore?: string | undefined;
  /**
   * Comma-separated list of task statuses to filter by. Available values: inactive, approval_required, in_progress, errored
   */
  status?: Status | undefined;
};

export type ListAgentTasksModel = {
  /**
   * The database ID of the primary model
   */
  id: string;
  /**
   * Optional integration ID for custom model configurations
   */
  integrationId?: string | null | undefined;
  /**
   * Optional array of fallback model IDs that will be used automatically in order if the primary model fails
   */
  fallbackModels?: Array<string> | null | undefined;
  /**
   * Maximum number of tokens for model responses
   */
  maxTokens?: number | undefined;
  /**
   * Temperature setting for model responses
   */
  temperature?: number | undefined;
};

/**
 * If all, the agent will require approval for all tools. If respect_tool, the agent will require approval for tools that have the requires_approval flag set to true. If none, the agent will not require approval for any tools.
 */
export const ListAgentTasksToolApprovalRequired = {
  All: "all",
  RespectTool: "respect_tool",
  None: "none",
} as const;
/**
 * If all, the agent will require approval for all tools. If respect_tool, the agent will require approval for tools that have the requires_approval flag set to true. If none, the agent will not require approval for any tools.
 */
export type ListAgentTasksToolApprovalRequired = ClosedEnum<
  typeof ListAgentTasksToolApprovalRequired
>;

export type ListAgentTasksConditions = {
  /**
   * The argument of the tool call to evaluate
   */
  condition: string;
  /**
   * The operator to use
   */
  operator: string;
  /**
   * The value to compare against
   */
  value: string;
};

export type ListAgentTasksTools = {
  /**
   * The id of the resource
   */
  id: string;
  /**
   * Optional tool key for custom tools
   */
  key?: string | undefined;
  actionType: string;
  displayName?: string | undefined;
  requiresApproval?: boolean | undefined;
  conditions?: Array<ListAgentTasksConditions> | undefined;
  /**
   * The id of the resource
   */
  mcpServer?: string | undefined;
  /**
   * Tool execution timeout in seconds (default: 2 minutes, max: 10 minutes)
   */
  timeout?: number | undefined;
};

export type ListAgentTasksSettings = {
  /**
   * Maximum iterations(llm calls) before the agent will stop executing.
   */
  maxIterations?: number | undefined;
  /**
   * Maximum time (in seconds) for the agent thinking process. This does not include the time for tool calls and sub agent calls. It will be loosely enforced, the in progress LLM calls will not be terminated and the last assistant message will be returned.
   */
  maxExecutionTime?: number | undefined;
  /**
   * If all, the agent will require approval for all tools. If respect_tool, the agent will require approval for tools that have the requires_approval flag set to true. If none, the agent will not require approval for any tools.
   */
  toolApprovalRequired?: ListAgentTasksToolApprovalRequired | undefined;
  tools: Array<ListAgentTasksTools>;
};

export type AgentManifestSnapshot = {
  id: string;
  key: string;
  role: string;
  description: string;
  instructions: string;
  systemPrompt?: string | undefined;
  model: ListAgentTasksModel;
  settings?: ListAgentTasksSettings | undefined;
  projectId?: string | undefined;
};

/**
 * Memory configuration for this execution
 */
export type ListAgentTasksMemory = {
  /**
   * Entity identifier used for memory store isolation (user/session/conversation)
   */
  entityId: string;
};

export type ListAgentTasksState = {
  waitingForApproval?: boolean | undefined;
  inactive?: boolean | undefined;
  error?: string | undefined;
  iteration?: number | undefined;
  accumulatedExecutionTime?: number | undefined;
};

export type ListAgentTasksMetrics = {
  inputCost?: number | undefined;
  outputCost?: number | undefined;
  totalCost?: number | undefined;
  promptTokens?: number | undefined;
  completionTokens?: number | undefined;
  totalTokens?: number | undefined;
};

export type Tasks = {
  id: string;
  agentManifestSnapshot: AgentManifestSnapshot;
  createdById?: string | undefined;
  updatedById?: string | undefined;
  created?: string | undefined;
  updated?: string | undefined;
  name?: string | undefined;
  workspaceId: string;
  /**
   * Memory configuration for this execution
   */
  memory?: ListAgentTasksMemory | undefined;
  /**
   * Execution-level metadata as key-value pairs
   */
  metadata?: { [k: string]: any } | undefined;
  state: ListAgentTasksState;
  metrics: ListAgentTasksMetrics;
};

/**
 * Agent tasks retrieved
 */
export type ListAgentTasksResponseBody = {
  tasks: Array<Tasks>;
  overallTotal: number;
};

/** @internal */
export const Status$inboundSchema: z.ZodNativeEnum<typeof Status> = z
  .nativeEnum(Status);

/** @internal */
export const Status$outboundSchema: z.ZodNativeEnum<typeof Status> =
  Status$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Status$ {
  /** @deprecated use `Status$inboundSchema` instead. */
  export const inboundSchema = Status$inboundSchema;
  /** @deprecated use `Status$outboundSchema` instead. */
  export const outboundSchema = Status$outboundSchema;
}

/** @internal */
export const ListAgentTasksRequest$inboundSchema: z.ZodType<
  ListAgentTasksRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  agent_key: z.string(),
  limit: z.number().default(10),
  starting_after: z.string().optional(),
  ending_before: z.string().optional(),
  status: Status$inboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    "agent_key": "agentKey",
    "starting_after": "startingAfter",
    "ending_before": "endingBefore",
  });
});

/** @internal */
export type ListAgentTasksRequest$Outbound = {
  agent_key: string;
  limit: number;
  starting_after?: string | undefined;
  ending_before?: string | undefined;
  status?: string | undefined;
};

/** @internal */
export const ListAgentTasksRequest$outboundSchema: z.ZodType<
  ListAgentTasksRequest$Outbound,
  z.ZodTypeDef,
  ListAgentTasksRequest
> = z.object({
  agentKey: z.string(),
  limit: z.number().default(10),
  startingAfter: z.string().optional(),
  endingBefore: z.string().optional(),
  status: Status$outboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    agentKey: "agent_key",
    startingAfter: "starting_after",
    endingBefore: "ending_before",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListAgentTasksRequest$ {
  /** @deprecated use `ListAgentTasksRequest$inboundSchema` instead. */
  export const inboundSchema = ListAgentTasksRequest$inboundSchema;
  /** @deprecated use `ListAgentTasksRequest$outboundSchema` instead. */
  export const outboundSchema = ListAgentTasksRequest$outboundSchema;
  /** @deprecated use `ListAgentTasksRequest$Outbound` instead. */
  export type Outbound = ListAgentTasksRequest$Outbound;
}

export function listAgentTasksRequestToJSON(
  listAgentTasksRequest: ListAgentTasksRequest,
): string {
  return JSON.stringify(
    ListAgentTasksRequest$outboundSchema.parse(listAgentTasksRequest),
  );
}

export function listAgentTasksRequestFromJSON(
  jsonString: string,
): SafeParseResult<ListAgentTasksRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListAgentTasksRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListAgentTasksRequest' from JSON`,
  );
}

/** @internal */
export const ListAgentTasksModel$inboundSchema: z.ZodType<
  ListAgentTasksModel,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  integration_id: z.nullable(z.string()).optional(),
  fallback_models: z.nullable(z.array(z.string())).optional(),
  max_tokens: z.number().int().optional(),
  temperature: z.number().optional(),
}).transform((v) => {
  return remap$(v, {
    "integration_id": "integrationId",
    "fallback_models": "fallbackModels",
    "max_tokens": "maxTokens",
  });
});

/** @internal */
export type ListAgentTasksModel$Outbound = {
  id: string;
  integration_id?: string | null | undefined;
  fallback_models?: Array<string> | null | undefined;
  max_tokens?: number | undefined;
  temperature?: number | undefined;
};

/** @internal */
export const ListAgentTasksModel$outboundSchema: z.ZodType<
  ListAgentTasksModel$Outbound,
  z.ZodTypeDef,
  ListAgentTasksModel
> = z.object({
  id: z.string(),
  integrationId: z.nullable(z.string()).optional(),
  fallbackModels: z.nullable(z.array(z.string())).optional(),
  maxTokens: z.number().int().optional(),
  temperature: z.number().optional(),
}).transform((v) => {
  return remap$(v, {
    integrationId: "integration_id",
    fallbackModels: "fallback_models",
    maxTokens: "max_tokens",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListAgentTasksModel$ {
  /** @deprecated use `ListAgentTasksModel$inboundSchema` instead. */
  export const inboundSchema = ListAgentTasksModel$inboundSchema;
  /** @deprecated use `ListAgentTasksModel$outboundSchema` instead. */
  export const outboundSchema = ListAgentTasksModel$outboundSchema;
  /** @deprecated use `ListAgentTasksModel$Outbound` instead. */
  export type Outbound = ListAgentTasksModel$Outbound;
}

export function listAgentTasksModelToJSON(
  listAgentTasksModel: ListAgentTasksModel,
): string {
  return JSON.stringify(
    ListAgentTasksModel$outboundSchema.parse(listAgentTasksModel),
  );
}

export function listAgentTasksModelFromJSON(
  jsonString: string,
): SafeParseResult<ListAgentTasksModel, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListAgentTasksModel$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListAgentTasksModel' from JSON`,
  );
}

/** @internal */
export const ListAgentTasksToolApprovalRequired$inboundSchema: z.ZodNativeEnum<
  typeof ListAgentTasksToolApprovalRequired
> = z.nativeEnum(ListAgentTasksToolApprovalRequired);

/** @internal */
export const ListAgentTasksToolApprovalRequired$outboundSchema: z.ZodNativeEnum<
  typeof ListAgentTasksToolApprovalRequired
> = ListAgentTasksToolApprovalRequired$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListAgentTasksToolApprovalRequired$ {
  /** @deprecated use `ListAgentTasksToolApprovalRequired$inboundSchema` instead. */
  export const inboundSchema = ListAgentTasksToolApprovalRequired$inboundSchema;
  /** @deprecated use `ListAgentTasksToolApprovalRequired$outboundSchema` instead. */
  export const outboundSchema =
    ListAgentTasksToolApprovalRequired$outboundSchema;
}

/** @internal */
export const ListAgentTasksConditions$inboundSchema: z.ZodType<
  ListAgentTasksConditions,
  z.ZodTypeDef,
  unknown
> = z.object({
  condition: z.string(),
  operator: z.string(),
  value: z.string(),
});

/** @internal */
export type ListAgentTasksConditions$Outbound = {
  condition: string;
  operator: string;
  value: string;
};

/** @internal */
export const ListAgentTasksConditions$outboundSchema: z.ZodType<
  ListAgentTasksConditions$Outbound,
  z.ZodTypeDef,
  ListAgentTasksConditions
> = z.object({
  condition: z.string(),
  operator: z.string(),
  value: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListAgentTasksConditions$ {
  /** @deprecated use `ListAgentTasksConditions$inboundSchema` instead. */
  export const inboundSchema = ListAgentTasksConditions$inboundSchema;
  /** @deprecated use `ListAgentTasksConditions$outboundSchema` instead. */
  export const outboundSchema = ListAgentTasksConditions$outboundSchema;
  /** @deprecated use `ListAgentTasksConditions$Outbound` instead. */
  export type Outbound = ListAgentTasksConditions$Outbound;
}

export function listAgentTasksConditionsToJSON(
  listAgentTasksConditions: ListAgentTasksConditions,
): string {
  return JSON.stringify(
    ListAgentTasksConditions$outboundSchema.parse(listAgentTasksConditions),
  );
}

export function listAgentTasksConditionsFromJSON(
  jsonString: string,
): SafeParseResult<ListAgentTasksConditions, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListAgentTasksConditions$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListAgentTasksConditions' from JSON`,
  );
}

/** @internal */
export const ListAgentTasksTools$inboundSchema: z.ZodType<
  ListAgentTasksTools,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  key: z.string().optional(),
  action_type: z.string(),
  display_name: z.string().optional(),
  requires_approval: z.boolean().default(false),
  conditions: z.array(z.lazy(() => ListAgentTasksConditions$inboundSchema))
    .optional(),
  mcpServer: z.string().optional(),
  timeout: z.number().default(120),
}).transform((v) => {
  return remap$(v, {
    "action_type": "actionType",
    "display_name": "displayName",
    "requires_approval": "requiresApproval",
  });
});

/** @internal */
export type ListAgentTasksTools$Outbound = {
  id: string;
  key?: string | undefined;
  action_type: string;
  display_name?: string | undefined;
  requires_approval: boolean;
  conditions?: Array<ListAgentTasksConditions$Outbound> | undefined;
  mcpServer?: string | undefined;
  timeout: number;
};

/** @internal */
export const ListAgentTasksTools$outboundSchema: z.ZodType<
  ListAgentTasksTools$Outbound,
  z.ZodTypeDef,
  ListAgentTasksTools
> = z.object({
  id: z.string(),
  key: z.string().optional(),
  actionType: z.string(),
  displayName: z.string().optional(),
  requiresApproval: z.boolean().default(false),
  conditions: z.array(z.lazy(() => ListAgentTasksConditions$outboundSchema))
    .optional(),
  mcpServer: z.string().optional(),
  timeout: z.number().default(120),
}).transform((v) => {
  return remap$(v, {
    actionType: "action_type",
    displayName: "display_name",
    requiresApproval: "requires_approval",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListAgentTasksTools$ {
  /** @deprecated use `ListAgentTasksTools$inboundSchema` instead. */
  export const inboundSchema = ListAgentTasksTools$inboundSchema;
  /** @deprecated use `ListAgentTasksTools$outboundSchema` instead. */
  export const outboundSchema = ListAgentTasksTools$outboundSchema;
  /** @deprecated use `ListAgentTasksTools$Outbound` instead. */
  export type Outbound = ListAgentTasksTools$Outbound;
}

export function listAgentTasksToolsToJSON(
  listAgentTasksTools: ListAgentTasksTools,
): string {
  return JSON.stringify(
    ListAgentTasksTools$outboundSchema.parse(listAgentTasksTools),
  );
}

export function listAgentTasksToolsFromJSON(
  jsonString: string,
): SafeParseResult<ListAgentTasksTools, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListAgentTasksTools$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListAgentTasksTools' from JSON`,
  );
}

/** @internal */
export const ListAgentTasksSettings$inboundSchema: z.ZodType<
  ListAgentTasksSettings,
  z.ZodTypeDef,
  unknown
> = z.object({
  max_iterations: z.number().int().default(15),
  max_execution_time: z.number().int().default(300),
  tool_approval_required: ListAgentTasksToolApprovalRequired$inboundSchema
    .default("respect_tool"),
  tools: z.array(z.lazy(() => ListAgentTasksTools$inboundSchema)),
}).transform((v) => {
  return remap$(v, {
    "max_iterations": "maxIterations",
    "max_execution_time": "maxExecutionTime",
    "tool_approval_required": "toolApprovalRequired",
  });
});

/** @internal */
export type ListAgentTasksSettings$Outbound = {
  max_iterations: number;
  max_execution_time: number;
  tool_approval_required: string;
  tools: Array<ListAgentTasksTools$Outbound>;
};

/** @internal */
export const ListAgentTasksSettings$outboundSchema: z.ZodType<
  ListAgentTasksSettings$Outbound,
  z.ZodTypeDef,
  ListAgentTasksSettings
> = z.object({
  maxIterations: z.number().int().default(15),
  maxExecutionTime: z.number().int().default(300),
  toolApprovalRequired: ListAgentTasksToolApprovalRequired$outboundSchema
    .default("respect_tool"),
  tools: z.array(z.lazy(() => ListAgentTasksTools$outboundSchema)),
}).transform((v) => {
  return remap$(v, {
    maxIterations: "max_iterations",
    maxExecutionTime: "max_execution_time",
    toolApprovalRequired: "tool_approval_required",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListAgentTasksSettings$ {
  /** @deprecated use `ListAgentTasksSettings$inboundSchema` instead. */
  export const inboundSchema = ListAgentTasksSettings$inboundSchema;
  /** @deprecated use `ListAgentTasksSettings$outboundSchema` instead. */
  export const outboundSchema = ListAgentTasksSettings$outboundSchema;
  /** @deprecated use `ListAgentTasksSettings$Outbound` instead. */
  export type Outbound = ListAgentTasksSettings$Outbound;
}

export function listAgentTasksSettingsToJSON(
  listAgentTasksSettings: ListAgentTasksSettings,
): string {
  return JSON.stringify(
    ListAgentTasksSettings$outboundSchema.parse(listAgentTasksSettings),
  );
}

export function listAgentTasksSettingsFromJSON(
  jsonString: string,
): SafeParseResult<ListAgentTasksSettings, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListAgentTasksSettings$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListAgentTasksSettings' from JSON`,
  );
}

/** @internal */
export const AgentManifestSnapshot$inboundSchema: z.ZodType<
  AgentManifestSnapshot,
  z.ZodTypeDef,
  unknown
> = z.object({
  _id: z.string(),
  key: z.string(),
  role: z.string(),
  description: z.string(),
  instructions: z.string(),
  system_prompt: z.string().optional(),
  model: z.lazy(() => ListAgentTasksModel$inboundSchema),
  settings: z.lazy(() => ListAgentTasksSettings$inboundSchema).optional(),
  project_id: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "_id": "id",
    "system_prompt": "systemPrompt",
    "project_id": "projectId",
  });
});

/** @internal */
export type AgentManifestSnapshot$Outbound = {
  _id: string;
  key: string;
  role: string;
  description: string;
  instructions: string;
  system_prompt?: string | undefined;
  model: ListAgentTasksModel$Outbound;
  settings?: ListAgentTasksSettings$Outbound | undefined;
  project_id?: string | undefined;
};

/** @internal */
export const AgentManifestSnapshot$outboundSchema: z.ZodType<
  AgentManifestSnapshot$Outbound,
  z.ZodTypeDef,
  AgentManifestSnapshot
> = z.object({
  id: z.string(),
  key: z.string(),
  role: z.string(),
  description: z.string(),
  instructions: z.string(),
  systemPrompt: z.string().optional(),
  model: z.lazy(() => ListAgentTasksModel$outboundSchema),
  settings: z.lazy(() => ListAgentTasksSettings$outboundSchema).optional(),
  projectId: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    id: "_id",
    systemPrompt: "system_prompt",
    projectId: "project_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AgentManifestSnapshot$ {
  /** @deprecated use `AgentManifestSnapshot$inboundSchema` instead. */
  export const inboundSchema = AgentManifestSnapshot$inboundSchema;
  /** @deprecated use `AgentManifestSnapshot$outboundSchema` instead. */
  export const outboundSchema = AgentManifestSnapshot$outboundSchema;
  /** @deprecated use `AgentManifestSnapshot$Outbound` instead. */
  export type Outbound = AgentManifestSnapshot$Outbound;
}

export function agentManifestSnapshotToJSON(
  agentManifestSnapshot: AgentManifestSnapshot,
): string {
  return JSON.stringify(
    AgentManifestSnapshot$outboundSchema.parse(agentManifestSnapshot),
  );
}

export function agentManifestSnapshotFromJSON(
  jsonString: string,
): SafeParseResult<AgentManifestSnapshot, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AgentManifestSnapshot$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AgentManifestSnapshot' from JSON`,
  );
}

/** @internal */
export const ListAgentTasksMemory$inboundSchema: z.ZodType<
  ListAgentTasksMemory,
  z.ZodTypeDef,
  unknown
> = z.object({
  entity_id: z.string(),
}).transform((v) => {
  return remap$(v, {
    "entity_id": "entityId",
  });
});

/** @internal */
export type ListAgentTasksMemory$Outbound = {
  entity_id: string;
};

/** @internal */
export const ListAgentTasksMemory$outboundSchema: z.ZodType<
  ListAgentTasksMemory$Outbound,
  z.ZodTypeDef,
  ListAgentTasksMemory
> = z.object({
  entityId: z.string(),
}).transform((v) => {
  return remap$(v, {
    entityId: "entity_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListAgentTasksMemory$ {
  /** @deprecated use `ListAgentTasksMemory$inboundSchema` instead. */
  export const inboundSchema = ListAgentTasksMemory$inboundSchema;
  /** @deprecated use `ListAgentTasksMemory$outboundSchema` instead. */
  export const outboundSchema = ListAgentTasksMemory$outboundSchema;
  /** @deprecated use `ListAgentTasksMemory$Outbound` instead. */
  export type Outbound = ListAgentTasksMemory$Outbound;
}

export function listAgentTasksMemoryToJSON(
  listAgentTasksMemory: ListAgentTasksMemory,
): string {
  return JSON.stringify(
    ListAgentTasksMemory$outboundSchema.parse(listAgentTasksMemory),
  );
}

export function listAgentTasksMemoryFromJSON(
  jsonString: string,
): SafeParseResult<ListAgentTasksMemory, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListAgentTasksMemory$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListAgentTasksMemory' from JSON`,
  );
}

/** @internal */
export const ListAgentTasksState$inboundSchema: z.ZodType<
  ListAgentTasksState,
  z.ZodTypeDef,
  unknown
> = z.object({
  waiting_for_approval: z.boolean().default(false),
  inactive: z.boolean().default(true),
  error: z.string().optional(),
  iteration: z.number().int().default(1),
  accumulated_execution_time: z.number().default(0),
}).transform((v) => {
  return remap$(v, {
    "waiting_for_approval": "waitingForApproval",
    "accumulated_execution_time": "accumulatedExecutionTime",
  });
});

/** @internal */
export type ListAgentTasksState$Outbound = {
  waiting_for_approval: boolean;
  inactive: boolean;
  error?: string | undefined;
  iteration: number;
  accumulated_execution_time: number;
};

/** @internal */
export const ListAgentTasksState$outboundSchema: z.ZodType<
  ListAgentTasksState$Outbound,
  z.ZodTypeDef,
  ListAgentTasksState
> = z.object({
  waitingForApproval: z.boolean().default(false),
  inactive: z.boolean().default(true),
  error: z.string().optional(),
  iteration: z.number().int().default(1),
  accumulatedExecutionTime: z.number().default(0),
}).transform((v) => {
  return remap$(v, {
    waitingForApproval: "waiting_for_approval",
    accumulatedExecutionTime: "accumulated_execution_time",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListAgentTasksState$ {
  /** @deprecated use `ListAgentTasksState$inboundSchema` instead. */
  export const inboundSchema = ListAgentTasksState$inboundSchema;
  /** @deprecated use `ListAgentTasksState$outboundSchema` instead. */
  export const outboundSchema = ListAgentTasksState$outboundSchema;
  /** @deprecated use `ListAgentTasksState$Outbound` instead. */
  export type Outbound = ListAgentTasksState$Outbound;
}

export function listAgentTasksStateToJSON(
  listAgentTasksState: ListAgentTasksState,
): string {
  return JSON.stringify(
    ListAgentTasksState$outboundSchema.parse(listAgentTasksState),
  );
}

export function listAgentTasksStateFromJSON(
  jsonString: string,
): SafeParseResult<ListAgentTasksState, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListAgentTasksState$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListAgentTasksState' from JSON`,
  );
}

/** @internal */
export const ListAgentTasksMetrics$inboundSchema: z.ZodType<
  ListAgentTasksMetrics,
  z.ZodTypeDef,
  unknown
> = z.object({
  input_cost: z.number().default(0),
  output_cost: z.number().default(0),
  total_cost: z.number().default(0),
  prompt_tokens: z.number().int().default(0),
  completion_tokens: z.number().int().default(0),
  total_tokens: z.number().int().default(0),
}).transform((v) => {
  return remap$(v, {
    "input_cost": "inputCost",
    "output_cost": "outputCost",
    "total_cost": "totalCost",
    "prompt_tokens": "promptTokens",
    "completion_tokens": "completionTokens",
    "total_tokens": "totalTokens",
  });
});

/** @internal */
export type ListAgentTasksMetrics$Outbound = {
  input_cost: number;
  output_cost: number;
  total_cost: number;
  prompt_tokens: number;
  completion_tokens: number;
  total_tokens: number;
};

/** @internal */
export const ListAgentTasksMetrics$outboundSchema: z.ZodType<
  ListAgentTasksMetrics$Outbound,
  z.ZodTypeDef,
  ListAgentTasksMetrics
> = z.object({
  inputCost: z.number().default(0),
  outputCost: z.number().default(0),
  totalCost: z.number().default(0),
  promptTokens: z.number().int().default(0),
  completionTokens: z.number().int().default(0),
  totalTokens: z.number().int().default(0),
}).transform((v) => {
  return remap$(v, {
    inputCost: "input_cost",
    outputCost: "output_cost",
    totalCost: "total_cost",
    promptTokens: "prompt_tokens",
    completionTokens: "completion_tokens",
    totalTokens: "total_tokens",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListAgentTasksMetrics$ {
  /** @deprecated use `ListAgentTasksMetrics$inboundSchema` instead. */
  export const inboundSchema = ListAgentTasksMetrics$inboundSchema;
  /** @deprecated use `ListAgentTasksMetrics$outboundSchema` instead. */
  export const outboundSchema = ListAgentTasksMetrics$outboundSchema;
  /** @deprecated use `ListAgentTasksMetrics$Outbound` instead. */
  export type Outbound = ListAgentTasksMetrics$Outbound;
}

export function listAgentTasksMetricsToJSON(
  listAgentTasksMetrics: ListAgentTasksMetrics,
): string {
  return JSON.stringify(
    ListAgentTasksMetrics$outboundSchema.parse(listAgentTasksMetrics),
  );
}

export function listAgentTasksMetricsFromJSON(
  jsonString: string,
): SafeParseResult<ListAgentTasksMetrics, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListAgentTasksMetrics$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListAgentTasksMetrics' from JSON`,
  );
}

/** @internal */
export const Tasks$inboundSchema: z.ZodType<Tasks, z.ZodTypeDef, unknown> = z
  .object({
    _id: z.string(),
    agent_manifest_snapshot: z.lazy(() => AgentManifestSnapshot$inboundSchema),
    created_by_id: z.string().optional(),
    updated_by_id: z.string().optional(),
    created: z.string().optional(),
    updated: z.string().optional(),
    name: z.string().optional(),
    workspace_id: z.string(),
    memory: z.lazy(() => ListAgentTasksMemory$inboundSchema).optional(),
    metadata: z.record(z.any()).optional(),
    state: z.lazy(() => ListAgentTasksState$inboundSchema),
    metrics: z.lazy(() => ListAgentTasksMetrics$inboundSchema),
  }).transform((v) => {
    return remap$(v, {
      "_id": "id",
      "agent_manifest_snapshot": "agentManifestSnapshot",
      "created_by_id": "createdById",
      "updated_by_id": "updatedById",
      "workspace_id": "workspaceId",
    });
  });

/** @internal */
export type Tasks$Outbound = {
  _id: string;
  agent_manifest_snapshot: AgentManifestSnapshot$Outbound;
  created_by_id?: string | undefined;
  updated_by_id?: string | undefined;
  created?: string | undefined;
  updated?: string | undefined;
  name?: string | undefined;
  workspace_id: string;
  memory?: ListAgentTasksMemory$Outbound | undefined;
  metadata?: { [k: string]: any } | undefined;
  state: ListAgentTasksState$Outbound;
  metrics: ListAgentTasksMetrics$Outbound;
};

/** @internal */
export const Tasks$outboundSchema: z.ZodType<
  Tasks$Outbound,
  z.ZodTypeDef,
  Tasks
> = z.object({
  id: z.string(),
  agentManifestSnapshot: z.lazy(() => AgentManifestSnapshot$outboundSchema),
  createdById: z.string().optional(),
  updatedById: z.string().optional(),
  created: z.string().optional(),
  updated: z.string().optional(),
  name: z.string().optional(),
  workspaceId: z.string(),
  memory: z.lazy(() => ListAgentTasksMemory$outboundSchema).optional(),
  metadata: z.record(z.any()).optional(),
  state: z.lazy(() => ListAgentTasksState$outboundSchema),
  metrics: z.lazy(() => ListAgentTasksMetrics$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    id: "_id",
    agentManifestSnapshot: "agent_manifest_snapshot",
    createdById: "created_by_id",
    updatedById: "updated_by_id",
    workspaceId: "workspace_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Tasks$ {
  /** @deprecated use `Tasks$inboundSchema` instead. */
  export const inboundSchema = Tasks$inboundSchema;
  /** @deprecated use `Tasks$outboundSchema` instead. */
  export const outboundSchema = Tasks$outboundSchema;
  /** @deprecated use `Tasks$Outbound` instead. */
  export type Outbound = Tasks$Outbound;
}

export function tasksToJSON(tasks: Tasks): string {
  return JSON.stringify(Tasks$outboundSchema.parse(tasks));
}

export function tasksFromJSON(
  jsonString: string,
): SafeParseResult<Tasks, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Tasks$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Tasks' from JSON`,
  );
}

/** @internal */
export const ListAgentTasksResponseBody$inboundSchema: z.ZodType<
  ListAgentTasksResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  tasks: z.array(z.lazy(() => Tasks$inboundSchema)),
  overall_total: z.number(),
}).transform((v) => {
  return remap$(v, {
    "overall_total": "overallTotal",
  });
});

/** @internal */
export type ListAgentTasksResponseBody$Outbound = {
  tasks: Array<Tasks$Outbound>;
  overall_total: number;
};

/** @internal */
export const ListAgentTasksResponseBody$outboundSchema: z.ZodType<
  ListAgentTasksResponseBody$Outbound,
  z.ZodTypeDef,
  ListAgentTasksResponseBody
> = z.object({
  tasks: z.array(z.lazy(() => Tasks$outboundSchema)),
  overallTotal: z.number(),
}).transform((v) => {
  return remap$(v, {
    overallTotal: "overall_total",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListAgentTasksResponseBody$ {
  /** @deprecated use `ListAgentTasksResponseBody$inboundSchema` instead. */
  export const inboundSchema = ListAgentTasksResponseBody$inboundSchema;
  /** @deprecated use `ListAgentTasksResponseBody$outboundSchema` instead. */
  export const outboundSchema = ListAgentTasksResponseBody$outboundSchema;
  /** @deprecated use `ListAgentTasksResponseBody$Outbound` instead. */
  export type Outbound = ListAgentTasksResponseBody$Outbound;
}

export function listAgentTasksResponseBodyToJSON(
  listAgentTasksResponseBody: ListAgentTasksResponseBody,
): string {
  return JSON.stringify(
    ListAgentTasksResponseBody$outboundSchema.parse(listAgentTasksResponseBody),
  );
}

export function listAgentTasksResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<ListAgentTasksResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListAgentTasksResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListAgentTasksResponseBody' from JSON`,
  );
}
