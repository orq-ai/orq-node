/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export const GetAllPromptsFiltersPromptsRequestRequestBodyType = {
  StringArray: "string_array",
} as const;
export type GetAllPromptsFiltersPromptsRequestRequestBodyType = ClosedEnum<
  typeof GetAllPromptsFiltersPromptsRequestRequestBodyType
>;

export const GetAllPromptsFiltersPromptsOperator = {
  In: "in",
} as const;
export type GetAllPromptsFiltersPromptsOperator = ClosedEnum<
  typeof GetAllPromptsFiltersPromptsOperator
>;

export type Filters4 = {
  type: GetAllPromptsFiltersPromptsRequestRequestBodyType;
  operator: GetAllPromptsFiltersPromptsOperator;
  values: Array<string>;
  path: string;
};

export const GetAllPromptsFiltersPromptsRequestType = {
  String: "string",
} as const;
export type GetAllPromptsFiltersPromptsRequestType = ClosedEnum<
  typeof GetAllPromptsFiltersPromptsRequestType
>;

export const GetAllPromptsFiltersOperator = {
  Contains: "contains",
  Equals: "equals",
} as const;
export type GetAllPromptsFiltersOperator = ClosedEnum<
  typeof GetAllPromptsFiltersOperator
>;

export type GetAllPromptsFilters3 = {
  type: GetAllPromptsFiltersPromptsRequestType;
  operator: GetAllPromptsFiltersOperator;
  value: string;
  path: string;
};

export const GetAllPromptsFiltersPromptsType = {
  Search: "search",
} as const;
export type GetAllPromptsFiltersPromptsType = ClosedEnum<
  typeof GetAllPromptsFiltersPromptsType
>;

export type GetAllPromptsFilters2 = {
  type: GetAllPromptsFiltersPromptsType;
  value: string;
  searchPaths: Array<string>;
};

export const GetAllPromptsFiltersType = {
  Id: "id",
} as const;
export type GetAllPromptsFiltersType = ClosedEnum<
  typeof GetAllPromptsFiltersType
>;

export type GetAllPromptsFilters1 = {
  type: GetAllPromptsFiltersType;
  id: string;
  path: string;
};

export type GetAllPromptsFilters =
  | GetAllPromptsFilters1
  | GetAllPromptsFilters2
  | GetAllPromptsFilters3
  | Filters4;

export type GetAllPromptsRequestBody = {
  filters: Array<
    | GetAllPromptsFilters1
    | GetAllPromptsFilters2
    | GetAllPromptsFilters3
    | Filters4
  >;
};

export type GetAllPromptsRequest = {
  page?: string | undefined;
  limit?: string | undefined;
  requestBody?: GetAllPromptsRequestBody | undefined;
};

export const GetAllPromptsOwnerPromptsResponse2 = {
  Vendor: "vendor",
} as const;
export type GetAllPromptsOwnerPromptsResponse2 = ClosedEnum<
  typeof GetAllPromptsOwnerPromptsResponse2
>;

export type GetAllPromptsItemsPromptsResponseOwner =
  | string
  | GetAllPromptsOwnerPromptsResponse2;

/**
 * The type of the model
 */
export const GetAllPromptsItemsPromptsResponseModelType = {
  Chat: "chat",
  Completion: "completion",
  Embedding: "embedding",
  Vision: "vision",
  Image: "image",
  Tts: "tts",
  Stt: "stt",
  Rerank: "rerank",
} as const;
/**
 * The type of the model
 */
export type GetAllPromptsItemsPromptsResponseModelType = ClosedEnum<
  typeof GetAllPromptsItemsPromptsResponseModelType
>;

/**
 * Only supported on `image` models.
 */
export const GetAllPromptsItemsPromptsResponse200Format = {
  Url: "url",
  B64Json: "b64_json",
  Text: "text",
  JsonObject: "json_object",
} as const;
/**
 * Only supported on `image` models.
 */
export type GetAllPromptsItemsPromptsResponse200Format = ClosedEnum<
  typeof GetAllPromptsItemsPromptsResponse200Format
>;

/**
 * Only supported on `image` models.
 */
export const GetAllPromptsItemsPromptsResponseQuality = {
  Standard: "standard",
  Hd: "hd",
} as const;
/**
 * Only supported on `image` models.
 */
export type GetAllPromptsItemsPromptsResponseQuality = ClosedEnum<
  typeof GetAllPromptsItemsPromptsResponseQuality
>;

export const GetAllPromptsResponseFormatPromptsResponse200ApplicationJSONResponseBodyType =
  {
    JsonObject: "json_object",
  } as const;
export type GetAllPromptsResponseFormatPromptsResponse200ApplicationJSONResponseBodyType =
  ClosedEnum<
    typeof GetAllPromptsResponseFormatPromptsResponse200ApplicationJSONResponseBodyType
  >;

export type GetAllPromptsResponseFormatPromptsResponse2 = {
  type:
    GetAllPromptsResponseFormatPromptsResponse200ApplicationJSONResponseBodyType;
};

export const GetAllPromptsResponseFormatPromptsResponse200ApplicationJSONType =
  {
    JsonSchema: "json_schema",
  } as const;
export type GetAllPromptsResponseFormatPromptsResponse200ApplicationJSONType =
  ClosedEnum<
    typeof GetAllPromptsResponseFormatPromptsResponse200ApplicationJSONType
  >;

export type GetAllPromptsResponseFormatPromptsResponseJsonSchema = {
  name: string;
  strict: boolean;
  schema: { [k: string]: any };
};

export type GetAllPromptsResponseFormatPromptsResponse1 = {
  type: GetAllPromptsResponseFormatPromptsResponse200ApplicationJSONType;
  jsonSchema: GetAllPromptsResponseFormatPromptsResponseJsonSchema;
};

/**
 * An object specifying the format that the model must output.
 *
 * @remarks
 *
 *  Setting to `{ "type": "json_schema", "json_schema": {...} }` enables Structured Outputs which ensures the model will match your supplied JSON schema
 *
 *  Setting to `{ "type": "json_object" }` enables JSON mode, which ensures the message the model generates is valid JSON.
 *
 * Important: when using JSON mode, you must also instruct the model to produce JSON yourself via a system or user message. Without this, the model may generate an unending stream of whitespace until the generation reaches the token limit, resulting in a long-running and seemingly "stuck" request. Also note that the message content may be partially cut off if finish_reason="length", which indicates the generation exceeded max_tokens or the conversation exceeded the max context length.
 */
export type GetAllPromptsItemsPromptsResponseResponseFormat =
  | GetAllPromptsResponseFormatPromptsResponse2
  | GetAllPromptsResponseFormatPromptsResponse1;

/**
 * The version of photoReal to use. Must be v1 or v2. Only available for `leonardoai` provider
 */
export const GetAllPromptsItemsPromptsResponsePhotoRealVersion = {
  V1: "v1",
  V2: "v2",
} as const;
/**
 * The version of photoReal to use. Must be v1 or v2. Only available for `leonardoai` provider
 */
export type GetAllPromptsItemsPromptsResponsePhotoRealVersion = ClosedEnum<
  typeof GetAllPromptsItemsPromptsResponsePhotoRealVersion
>;

/**
 * The format to return the embeddings
 */
export const GetAllPromptsItemsPromptsResponseEncodingFormat = {
  Float: "float",
  Base64: "base64",
} as const;
/**
 * The format to return the embeddings
 */
export type GetAllPromptsItemsPromptsResponseEncodingFormat = ClosedEnum<
  typeof GetAllPromptsItemsPromptsResponseEncodingFormat
>;

/**
 * Model Parameters: Not all parameters apply to every model
 */
export type GetAllPromptsItemsPromptsResponseModelParameters = {
  /**
   * Only supported on `chat` and `completion` models.
   */
  temperature?: number | undefined;
  /**
   * Only supported on `chat` and `completion` models.
   */
  maxTokens?: number | undefined;
  /**
   * Only supported on `chat` and `completion` models.
   */
  topK?: number | undefined;
  /**
   * Only supported on `chat` and `completion` models.
   */
  topP?: number | undefined;
  /**
   * Only supported on `chat` and `completion` models.
   */
  frequencyPenalty?: number | undefined;
  /**
   * Only supported on `chat` and `completion` models.
   */
  presencePenalty?: number | undefined;
  /**
   * Only supported on `image` models.
   */
  numImages?: number | undefined;
  /**
   * Best effort deterministic seed for the model. Currently only OpenAI models support these
   */
  seed?: number | undefined;
  /**
   * Only supported on `image` models.
   */
  format?: GetAllPromptsItemsPromptsResponse200Format | undefined;
  /**
   * Only supported on `image` models.
   */
  dimensions?: string | undefined;
  /**
   * Only supported on `image` models.
   */
  quality?: GetAllPromptsItemsPromptsResponseQuality | undefined;
  /**
   * Only supported on `image` models.
   */
  style?: string | undefined;
  /**
   * An object specifying the format that the model must output.
   *
   * @remarks
   *
   *  Setting to `{ "type": "json_schema", "json_schema": {...} }` enables Structured Outputs which ensures the model will match your supplied JSON schema
   *
   *  Setting to `{ "type": "json_object" }` enables JSON mode, which ensures the message the model generates is valid JSON.
   *
   * Important: when using JSON mode, you must also instruct the model to produce JSON yourself via a system or user message. Without this, the model may generate an unending stream of whitespace until the generation reaches the token limit, resulting in a long-running and seemingly "stuck" request. Also note that the message content may be partially cut off if finish_reason="length", which indicates the generation exceeded max_tokens or the conversation exceeded the max context length.
   */
  responseFormat?:
    | GetAllPromptsResponseFormatPromptsResponse2
    | GetAllPromptsResponseFormatPromptsResponse1
    | null
    | undefined;
  /**
   * The version of photoReal to use. Must be v1 or v2. Only available for `leonardoai` provider
   */
  photoRealVersion?:
    | GetAllPromptsItemsPromptsResponsePhotoRealVersion
    | undefined;
  /**
   * The format to return the embeddings
   */
  encodingFormat?: GetAllPromptsItemsPromptsResponseEncodingFormat | undefined;
};

export const GetAllPromptsItemsPromptsResponseProvider = {
  Cohere: "cohere",
  Openai: "openai",
  Anthropic: "anthropic",
  Huggingface: "huggingface",
  Replicate: "replicate",
  Google: "google",
  GoogleAi: "google-ai",
  Azure: "azure",
  Aws: "aws",
  Anyscale: "anyscale",
  Perplexity: "perplexity",
  Groq: "groq",
  Fal: "fal",
  Leonardoai: "leonardoai",
  Nvidia: "nvidia",
} as const;
export type GetAllPromptsItemsPromptsResponseProvider = ClosedEnum<
  typeof GetAllPromptsItemsPromptsResponseProvider
>;

/**
 * The role of the prompt message
 */
export const GetAllPromptsItemsPromptsResponseRole = {
  System: "system",
  Assistant: "assistant",
  User: "user",
  Exception: "exception",
  Tool: "tool",
  Prompt: "prompt",
  Correction: "correction",
  ExpectedOutput: "expected_output",
} as const;
/**
 * The role of the prompt message
 */
export type GetAllPromptsItemsPromptsResponseRole = ClosedEnum<
  typeof GetAllPromptsItemsPromptsResponseRole
>;

export const GetAllPrompts2PromptsResponse200ApplicationJSONResponseBodyType = {
  ImageUrl: "image_url",
} as const;
export type GetAllPrompts2PromptsResponse200ApplicationJSONResponseBodyType =
  ClosedEnum<
    typeof GetAllPrompts2PromptsResponse200ApplicationJSONResponseBodyType
  >;

export type GetAllPrompts2PromptsResponseImageUrl = {
  /**
   * The orq.ai id of the image
   */
  id?: string | undefined;
  /**
   * Either a URL of the image or the base64 encoded data URI.
   */
  url: string;
  /**
   * Specifies the detail level of the image. Currently only supported with OpenAI models
   */
  detail?: string | undefined;
};

/**
 * The image part of the prompt message. Only supported with vision models.
 */
export type GetAllPrompts2PromptsResponse2 = {
  type: GetAllPrompts2PromptsResponse200ApplicationJSONResponseBodyType;
  imageUrl: GetAllPrompts2PromptsResponseImageUrl;
};

export const GetAllPrompts2PromptsResponse200ApplicationJSONType = {
  Text: "text",
} as const;
export type GetAllPrompts2PromptsResponse200ApplicationJSONType = ClosedEnum<
  typeof GetAllPrompts2PromptsResponse200ApplicationJSONType
>;

/**
 * Text content part of a prompt message
 */
export type GetAllPrompts2PromptsResponse1 = {
  type: GetAllPrompts2PromptsResponse200ApplicationJSONType;
  text: string;
};

export type GetAllPromptsContentPromptsResponse2 =
  | GetAllPrompts2PromptsResponse1
  | GetAllPrompts2PromptsResponse2;

/**
 * The contents of the user message. Either the text content of the message or an array of content parts with a defined type, each can be of type `text` or `image_url` when passing in images. You can pass multiple images by adding multiple `image_url` content parts.
 */
export type GetAllPromptsItemsPromptsResponseContent =
  | string
  | Array<GetAllPrompts2PromptsResponse1 | GetAllPrompts2PromptsResponse2>;

export const GetAllPromptsItemsPromptsResponse200ApplicationJSONType = {
  Function: "function",
} as const;
export type GetAllPromptsItemsPromptsResponse200ApplicationJSONType =
  ClosedEnum<typeof GetAllPromptsItemsPromptsResponse200ApplicationJSONType>;

export type GetAllPromptsItemsPromptsResponseFunction = {
  name: string;
  /**
   * JSON string arguments for the functions
   */
  arguments: string;
};

export type GetAllPromptsItemsPromptsResponseToolCalls = {
  id?: string | undefined;
  index?: number | undefined;
  type: GetAllPromptsItemsPromptsResponse200ApplicationJSONType;
  function: GetAllPromptsItemsPromptsResponseFunction;
};

export type GetAllPromptsItemsPromptsResponseMessages = {
  /**
   * The role of the prompt message
   */
  role: GetAllPromptsItemsPromptsResponseRole;
  /**
   * The contents of the user message. Either the text content of the message or an array of content parts with a defined type, each can be of type `text` or `image_url` when passing in images. You can pass multiple images by adding multiple `image_url` content parts.
   */
  content:
    | string
    | Array<GetAllPrompts2PromptsResponse1 | GetAllPrompts2PromptsResponse2>;
  toolCalls?: Array<GetAllPromptsItemsPromptsResponseToolCalls> | undefined;
};

export type GetAllPromptsItemsPromptsResponsePromptConfig = {
  stream?: boolean | undefined;
  model?: string | undefined;
  /**
   * The id of the resource
   */
  modelDbId?: string | undefined;
  /**
   * The type of the model
   */
  modelType?: GetAllPromptsItemsPromptsResponseModelType | undefined;
  /**
   * Model Parameters: Not all parameters apply to every model
   */
  modelParameters?:
    | GetAllPromptsItemsPromptsResponseModelParameters
    | undefined;
  provider?: GetAllPromptsItemsPromptsResponseProvider | undefined;
  /**
   * The id of the resource
   */
  integrationId?: string | null | undefined;
  version?: string | undefined;
  messages: Array<GetAllPromptsItemsPromptsResponseMessages>;
};

export type GetAllPromptsItemsPromptsResponseMetadata = {
  useCases?: Array<string> | undefined;
  language?: string | undefined;
};

/**
 * The type of the model
 */
export const GetAllPromptsItemsPromptsResponse200ApplicationJSONResponseBodyModelType =
  {
    Chat: "chat",
    Completion: "completion",
    Embedding: "embedding",
    Vision: "vision",
    Image: "image",
    Tts: "tts",
    Stt: "stt",
    Rerank: "rerank",
  } as const;
/**
 * The type of the model
 */
export type GetAllPromptsItemsPromptsResponse200ApplicationJSONResponseBodyModelType =
  ClosedEnum<
    typeof GetAllPromptsItemsPromptsResponse200ApplicationJSONResponseBodyModelType
  >;

/**
 * Only supported on `image` models.
 */
export const GetAllPromptsItemsPromptsResponse200ApplicationJSONResponseBody3Format =
  {
    Url: "url",
    B64Json: "b64_json",
    Text: "text",
    JsonObject: "json_object",
  } as const;
/**
 * Only supported on `image` models.
 */
export type GetAllPromptsItemsPromptsResponse200ApplicationJSONResponseBody3Format =
  ClosedEnum<
    typeof GetAllPromptsItemsPromptsResponse200ApplicationJSONResponseBody3Format
  >;

/**
 * Only supported on `image` models.
 */
export const GetAllPromptsItemsPromptsResponse200ApplicationJSONResponseBodyQuality =
  {
    Standard: "standard",
    Hd: "hd",
  } as const;
/**
 * Only supported on `image` models.
 */
export type GetAllPromptsItemsPromptsResponse200ApplicationJSONResponseBodyQuality =
  ClosedEnum<
    typeof GetAllPromptsItemsPromptsResponse200ApplicationJSONResponseBodyQuality
  >;

export const GetAllPromptsResponseFormatPromptsResponse200ApplicationJSONResponseBodyItems3VersionsType =
  {
    JsonObject: "json_object",
  } as const;
export type GetAllPromptsResponseFormatPromptsResponse200ApplicationJSONResponseBodyItems3VersionsType =
  ClosedEnum<
    typeof GetAllPromptsResponseFormatPromptsResponse200ApplicationJSONResponseBodyItems3VersionsType
  >;

export type GetAllPromptsResponseFormatPromptsResponse200ApplicationJSONResponseBody2 =
  {
    type:
      GetAllPromptsResponseFormatPromptsResponse200ApplicationJSONResponseBodyItems3VersionsType;
  };

export const GetAllPromptsResponseFormatPromptsResponse200ApplicationJSONResponseBodyItems3Type =
  {
    JsonSchema: "json_schema",
  } as const;
export type GetAllPromptsResponseFormatPromptsResponse200ApplicationJSONResponseBodyItems3Type =
  ClosedEnum<
    typeof GetAllPromptsResponseFormatPromptsResponse200ApplicationJSONResponseBodyItems3Type
  >;

export type GetAllPromptsResponseFormatPromptsResponse200ApplicationJSONResponseBodyJSONSchema =
  {
    name: string;
    strict: boolean;
    schema: { [k: string]: any };
  };

export type GetAllPromptsResponseFormatPromptsResponse200ApplicationJSONResponseBody1 =
  {
    type:
      GetAllPromptsResponseFormatPromptsResponse200ApplicationJSONResponseBodyItems3Type;
    jsonSchema:
      GetAllPromptsResponseFormatPromptsResponse200ApplicationJSONResponseBodyJSONSchema;
  };

/**
 * An object specifying the format that the model must output.
 *
 * @remarks
 *
 *  Setting to `{ "type": "json_schema", "json_schema": {...} }` enables Structured Outputs which ensures the model will match your supplied JSON schema
 *
 *  Setting to `{ "type": "json_object" }` enables JSON mode, which ensures the message the model generates is valid JSON.
 *
 * Important: when using JSON mode, you must also instruct the model to produce JSON yourself via a system or user message. Without this, the model may generate an unending stream of whitespace until the generation reaches the token limit, resulting in a long-running and seemingly "stuck" request. Also note that the message content may be partially cut off if finish_reason="length", which indicates the generation exceeded max_tokens or the conversation exceeded the max context length.
 */
export type GetAllPromptsItemsPromptsResponse200ApplicationJSONResponseBodyResponseFormat =
  | GetAllPromptsResponseFormatPromptsResponse200ApplicationJSONResponseBody2
  | GetAllPromptsResponseFormatPromptsResponse200ApplicationJSONResponseBody1;

/**
 * The version of photoReal to use. Must be v1 or v2. Only available for `leonardoai` provider
 */
export const GetAllPromptsItemsPromptsResponse200ApplicationJSONResponseBodyPhotoRealVersion =
  {
    V1: "v1",
    V2: "v2",
  } as const;
/**
 * The version of photoReal to use. Must be v1 or v2. Only available for `leonardoai` provider
 */
export type GetAllPromptsItemsPromptsResponse200ApplicationJSONResponseBodyPhotoRealVersion =
  ClosedEnum<
    typeof GetAllPromptsItemsPromptsResponse200ApplicationJSONResponseBodyPhotoRealVersion
  >;

/**
 * The format to return the embeddings
 */
export const GetAllPromptsItemsPromptsResponse200ApplicationJSONResponseBodyEncodingFormat =
  {
    Float: "float",
    Base64: "base64",
  } as const;
/**
 * The format to return the embeddings
 */
export type GetAllPromptsItemsPromptsResponse200ApplicationJSONResponseBodyEncodingFormat =
  ClosedEnum<
    typeof GetAllPromptsItemsPromptsResponse200ApplicationJSONResponseBodyEncodingFormat
  >;

/**
 * Model Parameters: Not all parameters apply to every model
 */
export type GetAllPromptsItemsPromptsResponse200ApplicationJSONResponseBodyModelParameters =
  {
    /**
     * Only supported on `chat` and `completion` models.
     */
    temperature?: number | undefined;
    /**
     * Only supported on `chat` and `completion` models.
     */
    maxTokens?: number | undefined;
    /**
     * Only supported on `chat` and `completion` models.
     */
    topK?: number | undefined;
    /**
     * Only supported on `chat` and `completion` models.
     */
    topP?: number | undefined;
    /**
     * Only supported on `chat` and `completion` models.
     */
    frequencyPenalty?: number | undefined;
    /**
     * Only supported on `chat` and `completion` models.
     */
    presencePenalty?: number | undefined;
    /**
     * Only supported on `image` models.
     */
    numImages?: number | undefined;
    /**
     * Best effort deterministic seed for the model. Currently only OpenAI models support these
     */
    seed?: number | undefined;
    /**
     * Only supported on `image` models.
     */
    format?:
      | GetAllPromptsItemsPromptsResponse200ApplicationJSONResponseBody3Format
      | undefined;
    /**
     * Only supported on `image` models.
     */
    dimensions?: string | undefined;
    /**
     * Only supported on `image` models.
     */
    quality?:
      | GetAllPromptsItemsPromptsResponse200ApplicationJSONResponseBodyQuality
      | undefined;
    /**
     * Only supported on `image` models.
     */
    style?: string | undefined;
    /**
     * An object specifying the format that the model must output.
     *
     * @remarks
     *
     *  Setting to `{ "type": "json_schema", "json_schema": {...} }` enables Structured Outputs which ensures the model will match your supplied JSON schema
     *
     *  Setting to `{ "type": "json_object" }` enables JSON mode, which ensures the message the model generates is valid JSON.
     *
     * Important: when using JSON mode, you must also instruct the model to produce JSON yourself via a system or user message. Without this, the model may generate an unending stream of whitespace until the generation reaches the token limit, resulting in a long-running and seemingly "stuck" request. Also note that the message content may be partially cut off if finish_reason="length", which indicates the generation exceeded max_tokens or the conversation exceeded the max context length.
     */
    responseFormat?:
      | GetAllPromptsResponseFormatPromptsResponse200ApplicationJSONResponseBody2
      | GetAllPromptsResponseFormatPromptsResponse200ApplicationJSONResponseBody1
      | null
      | undefined;
    /**
     * The version of photoReal to use. Must be v1 or v2. Only available for `leonardoai` provider
     */
    photoRealVersion?:
      | GetAllPromptsItemsPromptsResponse200ApplicationJSONResponseBodyPhotoRealVersion
      | undefined;
    /**
     * The format to return the embeddings
     */
    encodingFormat?:
      | GetAllPromptsItemsPromptsResponse200ApplicationJSONResponseBodyEncodingFormat
      | undefined;
  };

export const GetAllPromptsItemsPromptsResponse200ApplicationJSONResponseBodyProvider =
  {
    Cohere: "cohere",
    Openai: "openai",
    Anthropic: "anthropic",
    Huggingface: "huggingface",
    Replicate: "replicate",
    Google: "google",
    GoogleAi: "google-ai",
    Azure: "azure",
    Aws: "aws",
    Anyscale: "anyscale",
    Perplexity: "perplexity",
    Groq: "groq",
    Fal: "fal",
    Leonardoai: "leonardoai",
    Nvidia: "nvidia",
  } as const;
export type GetAllPromptsItemsPromptsResponse200ApplicationJSONResponseBodyProvider =
  ClosedEnum<
    typeof GetAllPromptsItemsPromptsResponse200ApplicationJSONResponseBodyProvider
  >;

/**
 * The role of the prompt message
 */
export const GetAllPromptsItemsPromptsResponse200ApplicationJSONResponseBodyRole =
  {
    System: "system",
    Assistant: "assistant",
    User: "user",
    Exception: "exception",
    Tool: "tool",
    Prompt: "prompt",
    Correction: "correction",
    ExpectedOutput: "expected_output",
  } as const;
/**
 * The role of the prompt message
 */
export type GetAllPromptsItemsPromptsResponse200ApplicationJSONResponseBodyRole =
  ClosedEnum<
    typeof GetAllPromptsItemsPromptsResponse200ApplicationJSONResponseBodyRole
  >;

export const GetAllPrompts2PromptsResponse200ApplicationJSONResponseBodyItems3VersionsType =
  {
    ImageUrl: "image_url",
  } as const;
export type GetAllPrompts2PromptsResponse200ApplicationJSONResponseBodyItems3VersionsType =
  ClosedEnum<
    typeof GetAllPrompts2PromptsResponse200ApplicationJSONResponseBodyItems3VersionsType
  >;

export type GetAllPrompts2PromptsResponse200ApplicationJSONResponseBodyImageUrl =
  {
    /**
     * The orq.ai id of the image
     */
    id?: string | undefined;
    /**
     * Either a URL of the image or the base64 encoded data URI.
     */
    url: string;
    /**
     * Specifies the detail level of the image. Currently only supported with OpenAI models
     */
    detail?: string | undefined;
  };

/**
 * The image part of the prompt message. Only supported with vision models.
 */
export type GetAllPrompts2PromptsResponse200ApplicationJSONResponseBody2 = {
  type:
    GetAllPrompts2PromptsResponse200ApplicationJSONResponseBodyItems3VersionsType;
  imageUrl: GetAllPrompts2PromptsResponse200ApplicationJSONResponseBodyImageUrl;
};

export const GetAllPrompts2PromptsResponse200ApplicationJSONResponseBodyItems3Type =
  {
    Text: "text",
  } as const;
export type GetAllPrompts2PromptsResponse200ApplicationJSONResponseBodyItems3Type =
  ClosedEnum<
    typeof GetAllPrompts2PromptsResponse200ApplicationJSONResponseBodyItems3Type
  >;

/**
 * Text content part of a prompt message
 */
export type GetAllPrompts2PromptsResponse200ApplicationJSONResponseBody1 = {
  type: GetAllPrompts2PromptsResponse200ApplicationJSONResponseBodyItems3Type;
  text: string;
};

export type GetAllPromptsContentPromptsResponse200ApplicationJSONResponseBody2 =
  | GetAllPrompts2PromptsResponse200ApplicationJSONResponseBody1
  | GetAllPrompts2PromptsResponse200ApplicationJSONResponseBody2;

/**
 * The contents of the user message. Either the text content of the message or an array of content parts with a defined type, each can be of type `text` or `image_url` when passing in images. You can pass multiple images by adding multiple `image_url` content parts.
 */
export type GetAllPromptsItemsPromptsResponse200ApplicationJSONResponseBodyContent =
  | string
  | Array<
    | GetAllPrompts2PromptsResponse200ApplicationJSONResponseBody1
    | GetAllPrompts2PromptsResponse200ApplicationJSONResponseBody2
  >;

export const GetAllPromptsItemsPromptsResponse200ApplicationJSONResponseBody3Type =
  {
    Function: "function",
  } as const;
export type GetAllPromptsItemsPromptsResponse200ApplicationJSONResponseBody3Type =
  ClosedEnum<
    typeof GetAllPromptsItemsPromptsResponse200ApplicationJSONResponseBody3Type
  >;

export type GetAllPromptsItemsPromptsResponse200ApplicationJSONResponseBodyFunction =
  {
    name: string;
    /**
     * JSON string arguments for the functions
     */
    arguments: string;
  };

export type GetAllPromptsItemsPromptsResponse200ApplicationJSONResponseBodyToolCalls =
  {
    id?: string | undefined;
    index?: number | undefined;
    type: GetAllPromptsItemsPromptsResponse200ApplicationJSONResponseBody3Type;
    function:
      GetAllPromptsItemsPromptsResponse200ApplicationJSONResponseBodyFunction;
  };

export type GetAllPromptsItemsPromptsResponse200ApplicationJSONResponseBodyMessages =
  {
    /**
     * The role of the prompt message
     */
    role: GetAllPromptsItemsPromptsResponse200ApplicationJSONResponseBodyRole;
    /**
     * The contents of the user message. Either the text content of the message or an array of content parts with a defined type, each can be of type `text` or `image_url` when passing in images. You can pass multiple images by adding multiple `image_url` content parts.
     */
    content:
      | string
      | Array<
        | GetAllPrompts2PromptsResponse200ApplicationJSONResponseBody1
        | GetAllPrompts2PromptsResponse200ApplicationJSONResponseBody2
      >;
    toolCalls?:
      | Array<
        GetAllPromptsItemsPromptsResponse200ApplicationJSONResponseBodyToolCalls
      >
      | undefined;
  };

export type GetAllPromptsItemsPromptsResponse200ApplicationJSONResponseBodyPromptConfig =
  {
    stream?: boolean | undefined;
    model?: string | undefined;
    /**
     * The id of the resource
     */
    modelDbId?: string | undefined;
    /**
     * The type of the model
     */
    modelType?:
      | GetAllPromptsItemsPromptsResponse200ApplicationJSONResponseBodyModelType
      | undefined;
    /**
     * Model Parameters: Not all parameters apply to every model
     */
    modelParameters?:
      | GetAllPromptsItemsPromptsResponse200ApplicationJSONResponseBodyModelParameters
      | undefined;
    provider?:
      | GetAllPromptsItemsPromptsResponse200ApplicationJSONResponseBodyProvider
      | undefined;
    /**
     * The id of the resource
     */
    integrationId?: string | null | undefined;
    version?: string | undefined;
    messages: Array<
      GetAllPromptsItemsPromptsResponse200ApplicationJSONResponseBodyMessages
    >;
  };

export type GetAllPromptsItemsPromptsResponse200ApplicationJSONResponseBodyMetadata =
  {
    useCases?: Array<string> | undefined;
    language?: string | undefined;
  };

/**
 * Prompt version model returned from the API
 */
export type GetAllPromptsItemsPromptsResponseVersions = {
  id: string;
  createdById: string;
  displayName: string;
  updatedById: string;
  description?: string | null | undefined;
  promptConfig:
    GetAllPromptsItemsPromptsResponse200ApplicationJSONResponseBodyPromptConfig;
  metadata:
    GetAllPromptsItemsPromptsResponse200ApplicationJSONResponseBodyMetadata;
  commit: string;
  timestamp: string;
};

export const GetAllPromptsItemsPromptsResponseType = {
  Template: "template",
} as const;
export type GetAllPromptsItemsPromptsResponseType = ClosedEnum<
  typeof GetAllPromptsItemsPromptsResponseType
>;

/**
 * Prompt template model returned from the API
 */
export type GetAllPromptsItems3 = {
  id: string;
  owner: string | GetAllPromptsOwnerPromptsResponse2;
  domainId: string;
  createdById: string;
  displayName: string;
  updatedById: string;
  description?: string | null | undefined;
  promptConfig: GetAllPromptsItemsPromptsResponsePromptConfig;
  metadata: GetAllPromptsItemsPromptsResponseMetadata;
  /**
   * The date and time the resource was created
   */
  created?: Date | undefined;
  /**
   * The date and time the resource was last updated
   */
  updated?: Date | undefined;
  versions: Array<GetAllPromptsItemsPromptsResponseVersions>;
  type: GetAllPromptsItemsPromptsResponseType;
};

export const GetAllPromptsOwnerPrompts2 = {
  Vendor: "vendor",
} as const;
export type GetAllPromptsOwnerPrompts2 = ClosedEnum<
  typeof GetAllPromptsOwnerPrompts2
>;

export type GetAllPromptsItemsPromptsOwner =
  | string
  | GetAllPromptsOwnerPrompts2;

/**
 * The type of the model
 */
export const GetAllPromptsItemsPromptsModelType = {
  Chat: "chat",
  Completion: "completion",
  Embedding: "embedding",
  Vision: "vision",
  Image: "image",
  Tts: "tts",
  Stt: "stt",
  Rerank: "rerank",
} as const;
/**
 * The type of the model
 */
export type GetAllPromptsItemsPromptsModelType = ClosedEnum<
  typeof GetAllPromptsItemsPromptsModelType
>;

/**
 * Only supported on `image` models.
 */
export const GetAllPromptsItemsPromptsFormat = {
  Url: "url",
  B64Json: "b64_json",
  Text: "text",
  JsonObject: "json_object",
} as const;
/**
 * Only supported on `image` models.
 */
export type GetAllPromptsItemsPromptsFormat = ClosedEnum<
  typeof GetAllPromptsItemsPromptsFormat
>;

/**
 * Only supported on `image` models.
 */
export const GetAllPromptsItemsPromptsQuality = {
  Standard: "standard",
  Hd: "hd",
} as const;
/**
 * Only supported on `image` models.
 */
export type GetAllPromptsItemsPromptsQuality = ClosedEnum<
  typeof GetAllPromptsItemsPromptsQuality
>;

export const GetAllPromptsResponseFormatPromptsResponse200Type = {
  JsonObject: "json_object",
} as const;
export type GetAllPromptsResponseFormatPromptsResponse200Type = ClosedEnum<
  typeof GetAllPromptsResponseFormatPromptsResponse200Type
>;

export type GetAllPromptsResponseFormatPrompts2 = {
  type: GetAllPromptsResponseFormatPromptsResponse200Type;
};

export const GetAllPromptsResponseFormatPromptsResponseType = {
  JsonSchema: "json_schema",
} as const;
export type GetAllPromptsResponseFormatPromptsResponseType = ClosedEnum<
  typeof GetAllPromptsResponseFormatPromptsResponseType
>;

export type GetAllPromptsResponseFormatPromptsJsonSchema = {
  name: string;
  strict: boolean;
  schema: { [k: string]: any };
};

export type GetAllPromptsResponseFormatPrompts1 = {
  type: GetAllPromptsResponseFormatPromptsResponseType;
  jsonSchema: GetAllPromptsResponseFormatPromptsJsonSchema;
};

/**
 * An object specifying the format that the model must output.
 *
 * @remarks
 *
 *  Setting to `{ "type": "json_schema", "json_schema": {...} }` enables Structured Outputs which ensures the model will match your supplied JSON schema
 *
 *  Setting to `{ "type": "json_object" }` enables JSON mode, which ensures the message the model generates is valid JSON.
 *
 * Important: when using JSON mode, you must also instruct the model to produce JSON yourself via a system or user message. Without this, the model may generate an unending stream of whitespace until the generation reaches the token limit, resulting in a long-running and seemingly "stuck" request. Also note that the message content may be partially cut off if finish_reason="length", which indicates the generation exceeded max_tokens or the conversation exceeded the max context length.
 */
export type GetAllPromptsItemsPromptsResponseFormat =
  | GetAllPromptsResponseFormatPrompts2
  | GetAllPromptsResponseFormatPrompts1;

/**
 * The version of photoReal to use. Must be v1 or v2. Only available for `leonardoai` provider
 */
export const GetAllPromptsItemsPromptsPhotoRealVersion = {
  V1: "v1",
  V2: "v2",
} as const;
/**
 * The version of photoReal to use. Must be v1 or v2. Only available for `leonardoai` provider
 */
export type GetAllPromptsItemsPromptsPhotoRealVersion = ClosedEnum<
  typeof GetAllPromptsItemsPromptsPhotoRealVersion
>;

/**
 * The format to return the embeddings
 */
export const GetAllPromptsItemsPromptsEncodingFormat = {
  Float: "float",
  Base64: "base64",
} as const;
/**
 * The format to return the embeddings
 */
export type GetAllPromptsItemsPromptsEncodingFormat = ClosedEnum<
  typeof GetAllPromptsItemsPromptsEncodingFormat
>;

/**
 * Model Parameters: Not all parameters apply to every model
 */
export type GetAllPromptsItemsPromptsModelParameters = {
  /**
   * Only supported on `chat` and `completion` models.
   */
  temperature?: number | undefined;
  /**
   * Only supported on `chat` and `completion` models.
   */
  maxTokens?: number | undefined;
  /**
   * Only supported on `chat` and `completion` models.
   */
  topK?: number | undefined;
  /**
   * Only supported on `chat` and `completion` models.
   */
  topP?: number | undefined;
  /**
   * Only supported on `chat` and `completion` models.
   */
  frequencyPenalty?: number | undefined;
  /**
   * Only supported on `chat` and `completion` models.
   */
  presencePenalty?: number | undefined;
  /**
   * Only supported on `image` models.
   */
  numImages?: number | undefined;
  /**
   * Best effort deterministic seed for the model. Currently only OpenAI models support these
   */
  seed?: number | undefined;
  /**
   * Only supported on `image` models.
   */
  format?: GetAllPromptsItemsPromptsFormat | undefined;
  /**
   * Only supported on `image` models.
   */
  dimensions?: string | undefined;
  /**
   * Only supported on `image` models.
   */
  quality?: GetAllPromptsItemsPromptsQuality | undefined;
  /**
   * Only supported on `image` models.
   */
  style?: string | undefined;
  /**
   * An object specifying the format that the model must output.
   *
   * @remarks
   *
   *  Setting to `{ "type": "json_schema", "json_schema": {...} }` enables Structured Outputs which ensures the model will match your supplied JSON schema
   *
   *  Setting to `{ "type": "json_object" }` enables JSON mode, which ensures the message the model generates is valid JSON.
   *
   * Important: when using JSON mode, you must also instruct the model to produce JSON yourself via a system or user message. Without this, the model may generate an unending stream of whitespace until the generation reaches the token limit, resulting in a long-running and seemingly "stuck" request. Also note that the message content may be partially cut off if finish_reason="length", which indicates the generation exceeded max_tokens or the conversation exceeded the max context length.
   */
  responseFormat?:
    | GetAllPromptsResponseFormatPrompts2
    | GetAllPromptsResponseFormatPrompts1
    | null
    | undefined;
  /**
   * The version of photoReal to use. Must be v1 or v2. Only available for `leonardoai` provider
   */
  photoRealVersion?: GetAllPromptsItemsPromptsPhotoRealVersion | undefined;
  /**
   * The format to return the embeddings
   */
  encodingFormat?: GetAllPromptsItemsPromptsEncodingFormat | undefined;
};

export const GetAllPromptsItemsPromptsProvider = {
  Cohere: "cohere",
  Openai: "openai",
  Anthropic: "anthropic",
  Huggingface: "huggingface",
  Replicate: "replicate",
  Google: "google",
  GoogleAi: "google-ai",
  Azure: "azure",
  Aws: "aws",
  Anyscale: "anyscale",
  Perplexity: "perplexity",
  Groq: "groq",
  Fal: "fal",
  Leonardoai: "leonardoai",
  Nvidia: "nvidia",
} as const;
export type GetAllPromptsItemsPromptsProvider = ClosedEnum<
  typeof GetAllPromptsItemsPromptsProvider
>;

/**
 * The role of the prompt message
 */
export const GetAllPromptsItemsPromptsRole = {
  System: "system",
  Assistant: "assistant",
  User: "user",
  Exception: "exception",
  Tool: "tool",
  Prompt: "prompt",
  Correction: "correction",
  ExpectedOutput: "expected_output",
} as const;
/**
 * The role of the prompt message
 */
export type GetAllPromptsItemsPromptsRole = ClosedEnum<
  typeof GetAllPromptsItemsPromptsRole
>;

export const GetAllPrompts2PromptsResponse200Type = {
  ImageUrl: "image_url",
} as const;
export type GetAllPrompts2PromptsResponse200Type = ClosedEnum<
  typeof GetAllPrompts2PromptsResponse200Type
>;

export type GetAllPrompts2PromptsImageUrl = {
  /**
   * The orq.ai id of the image
   */
  id?: string | undefined;
  /**
   * Either a URL of the image or the base64 encoded data URI.
   */
  url: string;
  /**
   * Specifies the detail level of the image. Currently only supported with OpenAI models
   */
  detail?: string | undefined;
};

/**
 * The image part of the prompt message. Only supported with vision models.
 */
export type GetAllPrompts2Prompts2 = {
  type: GetAllPrompts2PromptsResponse200Type;
  imageUrl: GetAllPrompts2PromptsImageUrl;
};

export const GetAllPrompts2PromptsResponseType = {
  Text: "text",
} as const;
export type GetAllPrompts2PromptsResponseType = ClosedEnum<
  typeof GetAllPrompts2PromptsResponseType
>;

/**
 * Text content part of a prompt message
 */
export type GetAllPrompts2Prompts1 = {
  type: GetAllPrompts2PromptsResponseType;
  text: string;
};

export type GetAllPromptsContentPrompts2 =
  | GetAllPrompts2Prompts1
  | GetAllPrompts2Prompts2;

/**
 * The contents of the user message. Either the text content of the message or an array of content parts with a defined type, each can be of type `text` or `image_url` when passing in images. You can pass multiple images by adding multiple `image_url` content parts.
 */
export type GetAllPromptsItemsPromptsContent =
  | string
  | Array<GetAllPrompts2Prompts1 | GetAllPrompts2Prompts2>;

export const GetAllPromptsItemsPromptsResponse200ApplicationJSONResponseBodyType =
  {
    Function: "function",
  } as const;
export type GetAllPromptsItemsPromptsResponse200ApplicationJSONResponseBodyType =
  ClosedEnum<
    typeof GetAllPromptsItemsPromptsResponse200ApplicationJSONResponseBodyType
  >;

export type GetAllPromptsItemsPromptsFunction = {
  name: string;
  /**
   * JSON string arguments for the functions
   */
  arguments: string;
};

export type GetAllPromptsItemsPromptsToolCalls = {
  id?: string | undefined;
  index?: number | undefined;
  type: GetAllPromptsItemsPromptsResponse200ApplicationJSONResponseBodyType;
  function: GetAllPromptsItemsPromptsFunction;
};

export type GetAllPromptsItemsPromptsMessages = {
  /**
   * The role of the prompt message
   */
  role: GetAllPromptsItemsPromptsRole;
  /**
   * The contents of the user message. Either the text content of the message or an array of content parts with a defined type, each can be of type `text` or `image_url` when passing in images. You can pass multiple images by adding multiple `image_url` content parts.
   */
  content: string | Array<GetAllPrompts2Prompts1 | GetAllPrompts2Prompts2>;
  toolCalls?: Array<GetAllPromptsItemsPromptsToolCalls> | undefined;
};

export type GetAllPromptsItemsPromptsPromptConfig = {
  stream?: boolean | undefined;
  model?: string | undefined;
  /**
   * The id of the resource
   */
  modelDbId?: string | undefined;
  /**
   * The type of the model
   */
  modelType?: GetAllPromptsItemsPromptsModelType | undefined;
  /**
   * Model Parameters: Not all parameters apply to every model
   */
  modelParameters?: GetAllPromptsItemsPromptsModelParameters | undefined;
  provider?: GetAllPromptsItemsPromptsProvider | undefined;
  /**
   * The id of the resource
   */
  integrationId?: string | null | undefined;
  version?: string | undefined;
  messages: Array<GetAllPromptsItemsPromptsMessages>;
};

export type GetAllPromptsItemsPromptsMetadata = {
  useCases?: Array<string> | undefined;
  language?: string | undefined;
};

/**
 * The type of the model
 */
export const GetAllPromptsItemsPromptsResponse200ModelType = {
  Chat: "chat",
  Completion: "completion",
  Embedding: "embedding",
  Vision: "vision",
  Image: "image",
  Tts: "tts",
  Stt: "stt",
  Rerank: "rerank",
} as const;
/**
 * The type of the model
 */
export type GetAllPromptsItemsPromptsResponse200ModelType = ClosedEnum<
  typeof GetAllPromptsItemsPromptsResponse200ModelType
>;

/**
 * Only supported on `image` models.
 */
export const GetAllPromptsItemsPromptsResponse200ApplicationJSONFormat = {
  Url: "url",
  B64Json: "b64_json",
  Text: "text",
  JsonObject: "json_object",
} as const;
/**
 * Only supported on `image` models.
 */
export type GetAllPromptsItemsPromptsResponse200ApplicationJSONFormat =
  ClosedEnum<typeof GetAllPromptsItemsPromptsResponse200ApplicationJSONFormat>;

/**
 * Only supported on `image` models.
 */
export const GetAllPromptsItemsPromptsResponse200Quality = {
  Standard: "standard",
  Hd: "hd",
} as const;
/**
 * Only supported on `image` models.
 */
export type GetAllPromptsItemsPromptsResponse200Quality = ClosedEnum<
  typeof GetAllPromptsItemsPromptsResponse200Quality
>;

export const GetAllPromptsResponseFormatPromptsResponse200ApplicationJSONResponseBodyItems2Type =
  {
    JsonObject: "json_object",
  } as const;
export type GetAllPromptsResponseFormatPromptsResponse200ApplicationJSONResponseBodyItems2Type =
  ClosedEnum<
    typeof GetAllPromptsResponseFormatPromptsResponse200ApplicationJSONResponseBodyItems2Type
  >;

export type GetAllPromptsResponseFormatPromptsResponse2002 = {
  type:
    GetAllPromptsResponseFormatPromptsResponse200ApplicationJSONResponseBodyItems2Type;
};

export const GetAllPromptsResponseFormatPromptsResponse200ApplicationJSONResponseBodyItemsType =
  {
    JsonSchema: "json_schema",
  } as const;
export type GetAllPromptsResponseFormatPromptsResponse200ApplicationJSONResponseBodyItemsType =
  ClosedEnum<
    typeof GetAllPromptsResponseFormatPromptsResponse200ApplicationJSONResponseBodyItemsType
  >;

export type GetAllPromptsResponseFormatPromptsResponse200JsonSchema = {
  name: string;
  strict: boolean;
  schema: { [k: string]: any };
};

export type GetAllPromptsResponseFormatPromptsResponse2001 = {
  type:
    GetAllPromptsResponseFormatPromptsResponse200ApplicationJSONResponseBodyItemsType;
  jsonSchema: GetAllPromptsResponseFormatPromptsResponse200JsonSchema;
};

/**
 * An object specifying the format that the model must output.
 *
 * @remarks
 *
 *  Setting to `{ "type": "json_schema", "json_schema": {...} }` enables Structured Outputs which ensures the model will match your supplied JSON schema
 *
 *  Setting to `{ "type": "json_object" }` enables JSON mode, which ensures the message the model generates is valid JSON.
 *
 * Important: when using JSON mode, you must also instruct the model to produce JSON yourself via a system or user message. Without this, the model may generate an unending stream of whitespace until the generation reaches the token limit, resulting in a long-running and seemingly "stuck" request. Also note that the message content may be partially cut off if finish_reason="length", which indicates the generation exceeded max_tokens or the conversation exceeded the max context length.
 */
export type GetAllPromptsItemsPromptsResponse200ResponseFormat =
  | GetAllPromptsResponseFormatPromptsResponse2002
  | GetAllPromptsResponseFormatPromptsResponse2001;

/**
 * The version of photoReal to use. Must be v1 or v2. Only available for `leonardoai` provider
 */
export const GetAllPromptsItemsPromptsResponse200PhotoRealVersion = {
  V1: "v1",
  V2: "v2",
} as const;
/**
 * The version of photoReal to use. Must be v1 or v2. Only available for `leonardoai` provider
 */
export type GetAllPromptsItemsPromptsResponse200PhotoRealVersion = ClosedEnum<
  typeof GetAllPromptsItemsPromptsResponse200PhotoRealVersion
>;

/**
 * The format to return the embeddings
 */
export const GetAllPromptsItemsPromptsResponse200EncodingFormat = {
  Float: "float",
  Base64: "base64",
} as const;
/**
 * The format to return the embeddings
 */
export type GetAllPromptsItemsPromptsResponse200EncodingFormat = ClosedEnum<
  typeof GetAllPromptsItemsPromptsResponse200EncodingFormat
>;

/**
 * Model Parameters: Not all parameters apply to every model
 */
export type GetAllPromptsItemsPromptsResponse200ModelParameters = {
  /**
   * Only supported on `chat` and `completion` models.
   */
  temperature?: number | undefined;
  /**
   * Only supported on `chat` and `completion` models.
   */
  maxTokens?: number | undefined;
  /**
   * Only supported on `chat` and `completion` models.
   */
  topK?: number | undefined;
  /**
   * Only supported on `chat` and `completion` models.
   */
  topP?: number | undefined;
  /**
   * Only supported on `chat` and `completion` models.
   */
  frequencyPenalty?: number | undefined;
  /**
   * Only supported on `chat` and `completion` models.
   */
  presencePenalty?: number | undefined;
  /**
   * Only supported on `image` models.
   */
  numImages?: number | undefined;
  /**
   * Best effort deterministic seed for the model. Currently only OpenAI models support these
   */
  seed?: number | undefined;
  /**
   * Only supported on `image` models.
   */
  format?:
    | GetAllPromptsItemsPromptsResponse200ApplicationJSONFormat
    | undefined;
  /**
   * Only supported on `image` models.
   */
  dimensions?: string | undefined;
  /**
   * Only supported on `image` models.
   */
  quality?: GetAllPromptsItemsPromptsResponse200Quality | undefined;
  /**
   * Only supported on `image` models.
   */
  style?: string | undefined;
  /**
   * An object specifying the format that the model must output.
   *
   * @remarks
   *
   *  Setting to `{ "type": "json_schema", "json_schema": {...} }` enables Structured Outputs which ensures the model will match your supplied JSON schema
   *
   *  Setting to `{ "type": "json_object" }` enables JSON mode, which ensures the message the model generates is valid JSON.
   *
   * Important: when using JSON mode, you must also instruct the model to produce JSON yourself via a system or user message. Without this, the model may generate an unending stream of whitespace until the generation reaches the token limit, resulting in a long-running and seemingly "stuck" request. Also note that the message content may be partially cut off if finish_reason="length", which indicates the generation exceeded max_tokens or the conversation exceeded the max context length.
   */
  responseFormat?:
    | GetAllPromptsResponseFormatPromptsResponse2002
    | GetAllPromptsResponseFormatPromptsResponse2001
    | null
    | undefined;
  /**
   * The version of photoReal to use. Must be v1 or v2. Only available for `leonardoai` provider
   */
  photoRealVersion?:
    | GetAllPromptsItemsPromptsResponse200PhotoRealVersion
    | undefined;
  /**
   * The format to return the embeddings
   */
  encodingFormat?:
    | GetAllPromptsItemsPromptsResponse200EncodingFormat
    | undefined;
};

export const GetAllPromptsItemsPromptsResponse200Provider = {
  Cohere: "cohere",
  Openai: "openai",
  Anthropic: "anthropic",
  Huggingface: "huggingface",
  Replicate: "replicate",
  Google: "google",
  GoogleAi: "google-ai",
  Azure: "azure",
  Aws: "aws",
  Anyscale: "anyscale",
  Perplexity: "perplexity",
  Groq: "groq",
  Fal: "fal",
  Leonardoai: "leonardoai",
  Nvidia: "nvidia",
} as const;
export type GetAllPromptsItemsPromptsResponse200Provider = ClosedEnum<
  typeof GetAllPromptsItemsPromptsResponse200Provider
>;

/**
 * The role of the prompt message
 */
export const GetAllPromptsItemsPromptsResponse200Role = {
  System: "system",
  Assistant: "assistant",
  User: "user",
  Exception: "exception",
  Tool: "tool",
  Prompt: "prompt",
  Correction: "correction",
  ExpectedOutput: "expected_output",
} as const;
/**
 * The role of the prompt message
 */
export type GetAllPromptsItemsPromptsResponse200Role = ClosedEnum<
  typeof GetAllPromptsItemsPromptsResponse200Role
>;

export const GetAllPrompts2PromptsResponse200ApplicationJSONResponseBodyItems2Type =
  {
    ImageUrl: "image_url",
  } as const;
export type GetAllPrompts2PromptsResponse200ApplicationJSONResponseBodyItems2Type =
  ClosedEnum<
    typeof GetAllPrompts2PromptsResponse200ApplicationJSONResponseBodyItems2Type
  >;

export type GetAllPrompts2PromptsResponse200ImageUrl = {
  /**
   * The orq.ai id of the image
   */
  id?: string | undefined;
  /**
   * Either a URL of the image or the base64 encoded data URI.
   */
  url: string;
  /**
   * Specifies the detail level of the image. Currently only supported with OpenAI models
   */
  detail?: string | undefined;
};

/**
 * The image part of the prompt message. Only supported with vision models.
 */
export type GetAllPrompts2PromptsResponse2002 = {
  type: GetAllPrompts2PromptsResponse200ApplicationJSONResponseBodyItems2Type;
  imageUrl: GetAllPrompts2PromptsResponse200ImageUrl;
};

export const GetAllPrompts2PromptsResponse200ApplicationJSONResponseBodyItemsType =
  {
    Text: "text",
  } as const;
export type GetAllPrompts2PromptsResponse200ApplicationJSONResponseBodyItemsType =
  ClosedEnum<
    typeof GetAllPrompts2PromptsResponse200ApplicationJSONResponseBodyItemsType
  >;

/**
 * Text content part of a prompt message
 */
export type GetAllPrompts2PromptsResponse2001 = {
  type: GetAllPrompts2PromptsResponse200ApplicationJSONResponseBodyItemsType;
  text: string;
};

export type GetAllPromptsContentPromptsResponse2002 =
  | GetAllPrompts2PromptsResponse2001
  | GetAllPrompts2PromptsResponse2002;

/**
 * The contents of the user message. Either the text content of the message or an array of content parts with a defined type, each can be of type `text` or `image_url` when passing in images. You can pass multiple images by adding multiple `image_url` content parts.
 */
export type GetAllPromptsItemsPromptsResponse200Content =
  | string
  | Array<
    GetAllPrompts2PromptsResponse2001 | GetAllPrompts2PromptsResponse2002
  >;

export const GetAllPromptsItemsPromptsResponse200ApplicationJSONResponseBody2Type =
  {
    Function: "function",
  } as const;
export type GetAllPromptsItemsPromptsResponse200ApplicationJSONResponseBody2Type =
  ClosedEnum<
    typeof GetAllPromptsItemsPromptsResponse200ApplicationJSONResponseBody2Type
  >;

export type GetAllPromptsItemsPromptsResponse200Function = {
  name: string;
  /**
   * JSON string arguments for the functions
   */
  arguments: string;
};

export type GetAllPromptsItemsPromptsResponse200ToolCalls = {
  id?: string | undefined;
  index?: number | undefined;
  type: GetAllPromptsItemsPromptsResponse200ApplicationJSONResponseBody2Type;
  function: GetAllPromptsItemsPromptsResponse200Function;
};

export type GetAllPromptsItemsPromptsResponse200Messages = {
  /**
   * The role of the prompt message
   */
  role: GetAllPromptsItemsPromptsResponse200Role;
  /**
   * The contents of the user message. Either the text content of the message or an array of content parts with a defined type, each can be of type `text` or `image_url` when passing in images. You can pass multiple images by adding multiple `image_url` content parts.
   */
  content:
    | string
    | Array<
      GetAllPrompts2PromptsResponse2001 | GetAllPrompts2PromptsResponse2002
    >;
  toolCalls?: Array<GetAllPromptsItemsPromptsResponse200ToolCalls> | undefined;
};

export type GetAllPromptsItemsPromptsResponse200PromptConfig = {
  stream?: boolean | undefined;
  model?: string | undefined;
  /**
   * The id of the resource
   */
  modelDbId?: string | undefined;
  /**
   * The type of the model
   */
  modelType?: GetAllPromptsItemsPromptsResponse200ModelType | undefined;
  /**
   * Model Parameters: Not all parameters apply to every model
   */
  modelParameters?:
    | GetAllPromptsItemsPromptsResponse200ModelParameters
    | undefined;
  provider?: GetAllPromptsItemsPromptsResponse200Provider | undefined;
  /**
   * The id of the resource
   */
  integrationId?: string | null | undefined;
  version?: string | undefined;
  messages: Array<GetAllPromptsItemsPromptsResponse200Messages>;
};

export type GetAllPromptsItemsPromptsResponse200Metadata = {
  useCases?: Array<string> | undefined;
  language?: string | undefined;
};

/**
 * Prompt version model returned from the API
 */
export type GetAllPromptsItemsPromptsVersions = {
  id: string;
  createdById: string;
  displayName: string;
  updatedById: string;
  description?: string | null | undefined;
  promptConfig: GetAllPromptsItemsPromptsResponse200PromptConfig;
  metadata: GetAllPromptsItemsPromptsResponse200Metadata;
  commit: string;
  timestamp: string;
};

export const GetAllPromptsItemsPromptsType = {
  Snippet: "snippet",
} as const;
export type GetAllPromptsItemsPromptsType = ClosedEnum<
  typeof GetAllPromptsItemsPromptsType
>;

/**
 * Prompt snippet model returned from the API
 */
export type GetAllPromptsItems2 = {
  id: string;
  owner: string | GetAllPromptsOwnerPrompts2;
  domainId: string;
  createdById: string;
  displayName: string;
  updatedById: string;
  description?: string | null | undefined;
  promptConfig: GetAllPromptsItemsPromptsPromptConfig;
  metadata: GetAllPromptsItemsPromptsMetadata;
  /**
   * The date and time the resource was created
   */
  created?: Date | undefined;
  /**
   * The date and time the resource was last updated
   */
  updated?: Date | undefined;
  versions: Array<GetAllPromptsItemsPromptsVersions>;
  key: string;
  type: GetAllPromptsItemsPromptsType;
};

export const GetAllPromptsOwner2 = {
  Vendor: "vendor",
} as const;
export type GetAllPromptsOwner2 = ClosedEnum<typeof GetAllPromptsOwner2>;

export type GetAllPromptsItemsOwner = string | GetAllPromptsOwner2;

/**
 * The type of the model
 */
export const GetAllPromptsItemsModelType = {
  Chat: "chat",
  Completion: "completion",
  Embedding: "embedding",
  Vision: "vision",
  Image: "image",
  Tts: "tts",
  Stt: "stt",
  Rerank: "rerank",
} as const;
/**
 * The type of the model
 */
export type GetAllPromptsItemsModelType = ClosedEnum<
  typeof GetAllPromptsItemsModelType
>;

/**
 * Only supported on `image` models.
 */
export const GetAllPromptsItemsFormat = {
  Url: "url",
  B64Json: "b64_json",
  Text: "text",
  JsonObject: "json_object",
} as const;
/**
 * Only supported on `image` models.
 */
export type GetAllPromptsItemsFormat = ClosedEnum<
  typeof GetAllPromptsItemsFormat
>;

/**
 * Only supported on `image` models.
 */
export const GetAllPromptsItemsQuality = {
  Standard: "standard",
  Hd: "hd",
} as const;
/**
 * Only supported on `image` models.
 */
export type GetAllPromptsItemsQuality = ClosedEnum<
  typeof GetAllPromptsItemsQuality
>;

export const GetAllPromptsResponseFormatPromptsType = {
  JsonObject: "json_object",
} as const;
export type GetAllPromptsResponseFormatPromptsType = ClosedEnum<
  typeof GetAllPromptsResponseFormatPromptsType
>;

export type GetAllPromptsResponseFormat2 = {
  type: GetAllPromptsResponseFormatPromptsType;
};

export const GetAllPromptsResponseFormatType = {
  JsonSchema: "json_schema",
} as const;
export type GetAllPromptsResponseFormatType = ClosedEnum<
  typeof GetAllPromptsResponseFormatType
>;

export type GetAllPromptsResponseFormatJsonSchema = {
  name: string;
  strict: boolean;
  schema: { [k: string]: any };
};

export type GetAllPromptsResponseFormat1 = {
  type: GetAllPromptsResponseFormatType;
  jsonSchema: GetAllPromptsResponseFormatJsonSchema;
};

/**
 * An object specifying the format that the model must output.
 *
 * @remarks
 *
 *  Setting to `{ "type": "json_schema", "json_schema": {...} }` enables Structured Outputs which ensures the model will match your supplied JSON schema
 *
 *  Setting to `{ "type": "json_object" }` enables JSON mode, which ensures the message the model generates is valid JSON.
 *
 * Important: when using JSON mode, you must also instruct the model to produce JSON yourself via a system or user message. Without this, the model may generate an unending stream of whitespace until the generation reaches the token limit, resulting in a long-running and seemingly "stuck" request. Also note that the message content may be partially cut off if finish_reason="length", which indicates the generation exceeded max_tokens or the conversation exceeded the max context length.
 */
export type GetAllPromptsItemsResponseFormat =
  | GetAllPromptsResponseFormat2
  | GetAllPromptsResponseFormat1;

/**
 * The version of photoReal to use. Must be v1 or v2. Only available for `leonardoai` provider
 */
export const GetAllPromptsItemsPhotoRealVersion = {
  V1: "v1",
  V2: "v2",
} as const;
/**
 * The version of photoReal to use. Must be v1 or v2. Only available for `leonardoai` provider
 */
export type GetAllPromptsItemsPhotoRealVersion = ClosedEnum<
  typeof GetAllPromptsItemsPhotoRealVersion
>;

/**
 * The format to return the embeddings
 */
export const GetAllPromptsItemsEncodingFormat = {
  Float: "float",
  Base64: "base64",
} as const;
/**
 * The format to return the embeddings
 */
export type GetAllPromptsItemsEncodingFormat = ClosedEnum<
  typeof GetAllPromptsItemsEncodingFormat
>;

/**
 * Model Parameters: Not all parameters apply to every model
 */
export type GetAllPromptsItemsModelParameters = {
  /**
   * Only supported on `chat` and `completion` models.
   */
  temperature?: number | undefined;
  /**
   * Only supported on `chat` and `completion` models.
   */
  maxTokens?: number | undefined;
  /**
   * Only supported on `chat` and `completion` models.
   */
  topK?: number | undefined;
  /**
   * Only supported on `chat` and `completion` models.
   */
  topP?: number | undefined;
  /**
   * Only supported on `chat` and `completion` models.
   */
  frequencyPenalty?: number | undefined;
  /**
   * Only supported on `chat` and `completion` models.
   */
  presencePenalty?: number | undefined;
  /**
   * Only supported on `image` models.
   */
  numImages?: number | undefined;
  /**
   * Best effort deterministic seed for the model. Currently only OpenAI models support these
   */
  seed?: number | undefined;
  /**
   * Only supported on `image` models.
   */
  format?: GetAllPromptsItemsFormat | undefined;
  /**
   * Only supported on `image` models.
   */
  dimensions?: string | undefined;
  /**
   * Only supported on `image` models.
   */
  quality?: GetAllPromptsItemsQuality | undefined;
  /**
   * Only supported on `image` models.
   */
  style?: string | undefined;
  /**
   * An object specifying the format that the model must output.
   *
   * @remarks
   *
   *  Setting to `{ "type": "json_schema", "json_schema": {...} }` enables Structured Outputs which ensures the model will match your supplied JSON schema
   *
   *  Setting to `{ "type": "json_object" }` enables JSON mode, which ensures the message the model generates is valid JSON.
   *
   * Important: when using JSON mode, you must also instruct the model to produce JSON yourself via a system or user message. Without this, the model may generate an unending stream of whitespace until the generation reaches the token limit, resulting in a long-running and seemingly "stuck" request. Also note that the message content may be partially cut off if finish_reason="length", which indicates the generation exceeded max_tokens or the conversation exceeded the max context length.
   */
  responseFormat?:
    | GetAllPromptsResponseFormat2
    | GetAllPromptsResponseFormat1
    | null
    | undefined;
  /**
   * The version of photoReal to use. Must be v1 or v2. Only available for `leonardoai` provider
   */
  photoRealVersion?: GetAllPromptsItemsPhotoRealVersion | undefined;
  /**
   * The format to return the embeddings
   */
  encodingFormat?: GetAllPromptsItemsEncodingFormat | undefined;
};

export const GetAllPromptsItemsProvider = {
  Cohere: "cohere",
  Openai: "openai",
  Anthropic: "anthropic",
  Huggingface: "huggingface",
  Replicate: "replicate",
  Google: "google",
  GoogleAi: "google-ai",
  Azure: "azure",
  Aws: "aws",
  Anyscale: "anyscale",
  Perplexity: "perplexity",
  Groq: "groq",
  Fal: "fal",
  Leonardoai: "leonardoai",
  Nvidia: "nvidia",
} as const;
export type GetAllPromptsItemsProvider = ClosedEnum<
  typeof GetAllPromptsItemsProvider
>;

/**
 * The role of the prompt message
 */
export const GetAllPromptsItemsRole = {
  System: "system",
  Assistant: "assistant",
  User: "user",
  Exception: "exception",
  Tool: "tool",
  Prompt: "prompt",
  Correction: "correction",
  ExpectedOutput: "expected_output",
} as const;
/**
 * The role of the prompt message
 */
export type GetAllPromptsItemsRole = ClosedEnum<typeof GetAllPromptsItemsRole>;

export const GetAllPrompts2PromptsType = {
  ImageUrl: "image_url",
} as const;
export type GetAllPrompts2PromptsType = ClosedEnum<
  typeof GetAllPrompts2PromptsType
>;

export type GetAllPrompts2ImageUrl = {
  /**
   * The orq.ai id of the image
   */
  id?: string | undefined;
  /**
   * Either a URL of the image or the base64 encoded data URI.
   */
  url: string;
  /**
   * Specifies the detail level of the image. Currently only supported with OpenAI models
   */
  detail?: string | undefined;
};

/**
 * The image part of the prompt message. Only supported with vision models.
 */
export type GetAllPrompts22 = {
  type: GetAllPrompts2PromptsType;
  imageUrl: GetAllPrompts2ImageUrl;
};

export const GetAllPrompts2Type = {
  Text: "text",
} as const;
export type GetAllPrompts2Type = ClosedEnum<typeof GetAllPrompts2Type>;

/**
 * Text content part of a prompt message
 */
export type GetAllPrompts21 = {
  type: GetAllPrompts2Type;
  text: string;
};

export type GetAllPromptsContent2 = GetAllPrompts21 | GetAllPrompts22;

/**
 * The contents of the user message. Either the text content of the message or an array of content parts with a defined type, each can be of type `text` or `image_url` when passing in images. You can pass multiple images by adding multiple `image_url` content parts.
 */
export type GetAllPromptsItemsContent =
  | string
  | Array<GetAllPrompts21 | GetAllPrompts22>;

export const GetAllPromptsItemsPromptsResponse200Type = {
  Function: "function",
} as const;
export type GetAllPromptsItemsPromptsResponse200Type = ClosedEnum<
  typeof GetAllPromptsItemsPromptsResponse200Type
>;

export type GetAllPromptsItemsFunction = {
  name: string;
  /**
   * JSON string arguments for the functions
   */
  arguments: string;
};

export type GetAllPromptsItemsToolCalls = {
  id?: string | undefined;
  index?: number | undefined;
  type: GetAllPromptsItemsPromptsResponse200Type;
  function: GetAllPromptsItemsFunction;
};

export type GetAllPromptsItemsMessages = {
  /**
   * The role of the prompt message
   */
  role: GetAllPromptsItemsRole;
  /**
   * The contents of the user message. Either the text content of the message or an array of content parts with a defined type, each can be of type `text` or `image_url` when passing in images. You can pass multiple images by adding multiple `image_url` content parts.
   */
  content: string | Array<GetAllPrompts21 | GetAllPrompts22>;
  toolCalls?: Array<GetAllPromptsItemsToolCalls> | undefined;
};

export type GetAllPromptsItemsPromptConfig = {
  stream?: boolean | undefined;
  model?: string | undefined;
  /**
   * The id of the resource
   */
  modelDbId?: string | undefined;
  /**
   * The type of the model
   */
  modelType?: GetAllPromptsItemsModelType | undefined;
  /**
   * Model Parameters: Not all parameters apply to every model
   */
  modelParameters?: GetAllPromptsItemsModelParameters | undefined;
  provider?: GetAllPromptsItemsProvider | undefined;
  /**
   * The id of the resource
   */
  integrationId?: string | null | undefined;
  version?: string | undefined;
  messages: Array<GetAllPromptsItemsMessages>;
};

export type GetAllPromptsItemsMetadata = {
  useCases?: Array<string> | undefined;
  language?: string | undefined;
};

/**
 * The type of the model
 */
export const GetAllPromptsItemsPromptsResponse200ApplicationJSONModelType = {
  Chat: "chat",
  Completion: "completion",
  Embedding: "embedding",
  Vision: "vision",
  Image: "image",
  Tts: "tts",
  Stt: "stt",
  Rerank: "rerank",
} as const;
/**
 * The type of the model
 */
export type GetAllPromptsItemsPromptsResponse200ApplicationJSONModelType =
  ClosedEnum<
    typeof GetAllPromptsItemsPromptsResponse200ApplicationJSONModelType
  >;

/**
 * Only supported on `image` models.
 */
export const GetAllPromptsItemsPromptsResponse200ApplicationJSONResponseBodyFormat =
  {
    Url: "url",
    B64Json: "b64_json",
    Text: "text",
    JsonObject: "json_object",
  } as const;
/**
 * Only supported on `image` models.
 */
export type GetAllPromptsItemsPromptsResponse200ApplicationJSONResponseBodyFormat =
  ClosedEnum<
    typeof GetAllPromptsItemsPromptsResponse200ApplicationJSONResponseBodyFormat
  >;

/**
 * Only supported on `image` models.
 */
export const GetAllPromptsItemsPromptsResponse200ApplicationJSONQuality = {
  Standard: "standard",
  Hd: "hd",
} as const;
/**
 * Only supported on `image` models.
 */
export type GetAllPromptsItemsPromptsResponse200ApplicationJSONQuality =
  ClosedEnum<typeof GetAllPromptsItemsPromptsResponse200ApplicationJSONQuality>;

export const GetAllPromptsResponseFormatPromptsResponse200ApplicationJSONResponseBodyItems1VersionsType =
  {
    JsonObject: "json_object",
  } as const;
export type GetAllPromptsResponseFormatPromptsResponse200ApplicationJSONResponseBodyItems1VersionsType =
  ClosedEnum<
    typeof GetAllPromptsResponseFormatPromptsResponse200ApplicationJSONResponseBodyItems1VersionsType
  >;

export type GetAllPromptsResponseFormatPromptsResponse200ApplicationJson2 = {
  type:
    GetAllPromptsResponseFormatPromptsResponse200ApplicationJSONResponseBodyItems1VersionsType;
};

export const GetAllPromptsResponseFormatPromptsResponse200ApplicationJSONResponseBodyItems1Type =
  {
    JsonSchema: "json_schema",
  } as const;
export type GetAllPromptsResponseFormatPromptsResponse200ApplicationJSONResponseBodyItems1Type =
  ClosedEnum<
    typeof GetAllPromptsResponseFormatPromptsResponse200ApplicationJSONResponseBodyItems1Type
  >;

export type GetAllPromptsResponseFormatPromptsResponse200ApplicationJSONJSONSchema =
  {
    name: string;
    strict: boolean;
    schema: { [k: string]: any };
  };

export type GetAllPromptsResponseFormatPromptsResponse200ApplicationJson1 = {
  type:
    GetAllPromptsResponseFormatPromptsResponse200ApplicationJSONResponseBodyItems1Type;
  jsonSchema:
    GetAllPromptsResponseFormatPromptsResponse200ApplicationJSONJSONSchema;
};

/**
 * An object specifying the format that the model must output.
 *
 * @remarks
 *
 *  Setting to `{ "type": "json_schema", "json_schema": {...} }` enables Structured Outputs which ensures the model will match your supplied JSON schema
 *
 *  Setting to `{ "type": "json_object" }` enables JSON mode, which ensures the message the model generates is valid JSON.
 *
 * Important: when using JSON mode, you must also instruct the model to produce JSON yourself via a system or user message. Without this, the model may generate an unending stream of whitespace until the generation reaches the token limit, resulting in a long-running and seemingly "stuck" request. Also note that the message content may be partially cut off if finish_reason="length", which indicates the generation exceeded max_tokens or the conversation exceeded the max context length.
 */
export type GetAllPromptsItemsPromptsResponse200ApplicationJSONResponseFormat =
  | GetAllPromptsResponseFormatPromptsResponse200ApplicationJson2
  | GetAllPromptsResponseFormatPromptsResponse200ApplicationJson1;

/**
 * The version of photoReal to use. Must be v1 or v2. Only available for `leonardoai` provider
 */
export const GetAllPromptsItemsPromptsResponse200ApplicationJSONPhotoRealVersion =
  {
    V1: "v1",
    V2: "v2",
  } as const;
/**
 * The version of photoReal to use. Must be v1 or v2. Only available for `leonardoai` provider
 */
export type GetAllPromptsItemsPromptsResponse200ApplicationJSONPhotoRealVersion =
  ClosedEnum<
    typeof GetAllPromptsItemsPromptsResponse200ApplicationJSONPhotoRealVersion
  >;

/**
 * The format to return the embeddings
 */
export const GetAllPromptsItemsPromptsResponse200ApplicationJSONEncodingFormat =
  {
    Float: "float",
    Base64: "base64",
  } as const;
/**
 * The format to return the embeddings
 */
export type GetAllPromptsItemsPromptsResponse200ApplicationJSONEncodingFormat =
  ClosedEnum<
    typeof GetAllPromptsItemsPromptsResponse200ApplicationJSONEncodingFormat
  >;

/**
 * Model Parameters: Not all parameters apply to every model
 */
export type GetAllPromptsItemsPromptsResponse200ApplicationJSONModelParameters =
  {
    /**
     * Only supported on `chat` and `completion` models.
     */
    temperature?: number | undefined;
    /**
     * Only supported on `chat` and `completion` models.
     */
    maxTokens?: number | undefined;
    /**
     * Only supported on `chat` and `completion` models.
     */
    topK?: number | undefined;
    /**
     * Only supported on `chat` and `completion` models.
     */
    topP?: number | undefined;
    /**
     * Only supported on `chat` and `completion` models.
     */
    frequencyPenalty?: number | undefined;
    /**
     * Only supported on `chat` and `completion` models.
     */
    presencePenalty?: number | undefined;
    /**
     * Only supported on `image` models.
     */
    numImages?: number | undefined;
    /**
     * Best effort deterministic seed for the model. Currently only OpenAI models support these
     */
    seed?: number | undefined;
    /**
     * Only supported on `image` models.
     */
    format?:
      | GetAllPromptsItemsPromptsResponse200ApplicationJSONResponseBodyFormat
      | undefined;
    /**
     * Only supported on `image` models.
     */
    dimensions?: string | undefined;
    /**
     * Only supported on `image` models.
     */
    quality?:
      | GetAllPromptsItemsPromptsResponse200ApplicationJSONQuality
      | undefined;
    /**
     * Only supported on `image` models.
     */
    style?: string | undefined;
    /**
     * An object specifying the format that the model must output.
     *
     * @remarks
     *
     *  Setting to `{ "type": "json_schema", "json_schema": {...} }` enables Structured Outputs which ensures the model will match your supplied JSON schema
     *
     *  Setting to `{ "type": "json_object" }` enables JSON mode, which ensures the message the model generates is valid JSON.
     *
     * Important: when using JSON mode, you must also instruct the model to produce JSON yourself via a system or user message. Without this, the model may generate an unending stream of whitespace until the generation reaches the token limit, resulting in a long-running and seemingly "stuck" request. Also note that the message content may be partially cut off if finish_reason="length", which indicates the generation exceeded max_tokens or the conversation exceeded the max context length.
     */
    responseFormat?:
      | GetAllPromptsResponseFormatPromptsResponse200ApplicationJson2
      | GetAllPromptsResponseFormatPromptsResponse200ApplicationJson1
      | null
      | undefined;
    /**
     * The version of photoReal to use. Must be v1 or v2. Only available for `leonardoai` provider
     */
    photoRealVersion?:
      | GetAllPromptsItemsPromptsResponse200ApplicationJSONPhotoRealVersion
      | undefined;
    /**
     * The format to return the embeddings
     */
    encodingFormat?:
      | GetAllPromptsItemsPromptsResponse200ApplicationJSONEncodingFormat
      | undefined;
  };

export const GetAllPromptsItemsPromptsResponse200ApplicationJSONProvider = {
  Cohere: "cohere",
  Openai: "openai",
  Anthropic: "anthropic",
  Huggingface: "huggingface",
  Replicate: "replicate",
  Google: "google",
  GoogleAi: "google-ai",
  Azure: "azure",
  Aws: "aws",
  Anyscale: "anyscale",
  Perplexity: "perplexity",
  Groq: "groq",
  Fal: "fal",
  Leonardoai: "leonardoai",
  Nvidia: "nvidia",
} as const;
export type GetAllPromptsItemsPromptsResponse200ApplicationJSONProvider =
  ClosedEnum<
    typeof GetAllPromptsItemsPromptsResponse200ApplicationJSONProvider
  >;

/**
 * The role of the prompt message
 */
export const GetAllPromptsItemsPromptsResponse200ApplicationJSONRole = {
  System: "system",
  Assistant: "assistant",
  User: "user",
  Exception: "exception",
  Tool: "tool",
  Prompt: "prompt",
  Correction: "correction",
  ExpectedOutput: "expected_output",
} as const;
/**
 * The role of the prompt message
 */
export type GetAllPromptsItemsPromptsResponse200ApplicationJSONRole =
  ClosedEnum<typeof GetAllPromptsItemsPromptsResponse200ApplicationJSONRole>;

export const GetAllPrompts2PromptsResponse200ApplicationJSONResponseBodyItems1VersionsType =
  {
    ImageUrl: "image_url",
  } as const;
export type GetAllPrompts2PromptsResponse200ApplicationJSONResponseBodyItems1VersionsType =
  ClosedEnum<
    typeof GetAllPrompts2PromptsResponse200ApplicationJSONResponseBodyItems1VersionsType
  >;

export type GetAllPrompts2PromptsResponse200ApplicationJSONImageUrl = {
  /**
   * The orq.ai id of the image
   */
  id?: string | undefined;
  /**
   * Either a URL of the image or the base64 encoded data URI.
   */
  url: string;
  /**
   * Specifies the detail level of the image. Currently only supported with OpenAI models
   */
  detail?: string | undefined;
};

/**
 * The image part of the prompt message. Only supported with vision models.
 */
export type GetAllPrompts2PromptsResponse200ApplicationJson2 = {
  type:
    GetAllPrompts2PromptsResponse200ApplicationJSONResponseBodyItems1VersionsType;
  imageUrl: GetAllPrompts2PromptsResponse200ApplicationJSONImageUrl;
};

export const GetAllPrompts2PromptsResponse200ApplicationJSONResponseBodyItems1Type =
  {
    Text: "text",
  } as const;
export type GetAllPrompts2PromptsResponse200ApplicationJSONResponseBodyItems1Type =
  ClosedEnum<
    typeof GetAllPrompts2PromptsResponse200ApplicationJSONResponseBodyItems1Type
  >;

/**
 * Text content part of a prompt message
 */
export type GetAllPrompts2PromptsResponse200ApplicationJson1 = {
  type: GetAllPrompts2PromptsResponse200ApplicationJSONResponseBodyItems1Type;
  text: string;
};

export type GetAllPromptsContentPromptsResponse200ApplicationJson2 =
  | GetAllPrompts2PromptsResponse200ApplicationJson1
  | GetAllPrompts2PromptsResponse200ApplicationJson2;

/**
 * The contents of the user message. Either the text content of the message or an array of content parts with a defined type, each can be of type `text` or `image_url` when passing in images. You can pass multiple images by adding multiple `image_url` content parts.
 */
export type GetAllPromptsItemsPromptsResponse200ApplicationJSONContent =
  | string
  | Array<
    | GetAllPrompts2PromptsResponse200ApplicationJson1
    | GetAllPrompts2PromptsResponse200ApplicationJson2
  >;

export const GetAllPromptsItemsPromptsResponse200ApplicationJSONResponseBody1Type =
  {
    Function: "function",
  } as const;
export type GetAllPromptsItemsPromptsResponse200ApplicationJSONResponseBody1Type =
  ClosedEnum<
    typeof GetAllPromptsItemsPromptsResponse200ApplicationJSONResponseBody1Type
  >;

export type GetAllPromptsItemsPromptsResponse200ApplicationJSONFunction = {
  name: string;
  /**
   * JSON string arguments for the functions
   */
  arguments: string;
};

export type GetAllPromptsItemsPromptsResponse200ApplicationJSONToolCalls = {
  id?: string | undefined;
  index?: number | undefined;
  type: GetAllPromptsItemsPromptsResponse200ApplicationJSONResponseBody1Type;
  function: GetAllPromptsItemsPromptsResponse200ApplicationJSONFunction;
};

export type GetAllPromptsItemsPromptsResponse200ApplicationJSONMessages = {
  /**
   * The role of the prompt message
   */
  role: GetAllPromptsItemsPromptsResponse200ApplicationJSONRole;
  /**
   * The contents of the user message. Either the text content of the message or an array of content parts with a defined type, each can be of type `text` or `image_url` when passing in images. You can pass multiple images by adding multiple `image_url` content parts.
   */
  content:
    | string
    | Array<
      | GetAllPrompts2PromptsResponse200ApplicationJson1
      | GetAllPrompts2PromptsResponse200ApplicationJson2
    >;
  toolCalls?:
    | Array<GetAllPromptsItemsPromptsResponse200ApplicationJSONToolCalls>
    | undefined;
};

export type GetAllPromptsItemsPromptsResponse200ApplicationJSONPromptConfig = {
  stream?: boolean | undefined;
  model?: string | undefined;
  /**
   * The id of the resource
   */
  modelDbId?: string | undefined;
  /**
   * The type of the model
   */
  modelType?:
    | GetAllPromptsItemsPromptsResponse200ApplicationJSONModelType
    | undefined;
  /**
   * Model Parameters: Not all parameters apply to every model
   */
  modelParameters?:
    | GetAllPromptsItemsPromptsResponse200ApplicationJSONModelParameters
    | undefined;
  provider?:
    | GetAllPromptsItemsPromptsResponse200ApplicationJSONProvider
    | undefined;
  /**
   * The id of the resource
   */
  integrationId?: string | null | undefined;
  version?: string | undefined;
  messages: Array<GetAllPromptsItemsPromptsResponse200ApplicationJSONMessages>;
};

export type GetAllPromptsItemsPromptsResponse200ApplicationJSONMetadata = {
  useCases?: Array<string> | undefined;
  language?: string | undefined;
};

/**
 * Prompt version model returned from the API
 */
export type GetAllPromptsItemsVersions = {
  id: string;
  createdById: string;
  displayName: string;
  updatedById: string;
  description?: string | null | undefined;
  promptConfig: GetAllPromptsItemsPromptsResponse200ApplicationJSONPromptConfig;
  metadata: GetAllPromptsItemsPromptsResponse200ApplicationJSONMetadata;
  commit: string;
  timestamp: string;
};

export const GetAllPromptsItemsType = {
  Prompt: "prompt",
} as const;
export type GetAllPromptsItemsType = ClosedEnum<typeof GetAllPromptsItemsType>;

/**
 * Prompt model returned from the API
 */
export type GetAllPromptsItems1 = {
  id: string;
  owner: string | GetAllPromptsOwner2;
  domainId: string;
  createdById: string;
  displayName: string;
  updatedById: string;
  description?: string | null | undefined;
  promptConfig: GetAllPromptsItemsPromptConfig;
  metadata: GetAllPromptsItemsMetadata;
  /**
   * The date and time the resource was created
   */
  created?: Date | undefined;
  /**
   * The date and time the resource was last updated
   */
  updated?: Date | undefined;
  versions: Array<GetAllPromptsItemsVersions>;
  type: GetAllPromptsItemsType;
};

export type GetAllPromptsItems =
  | GetAllPromptsItems1
  | GetAllPromptsItems3
  | GetAllPromptsItems2;

/**
 * Prompts retrieved.
 */
export type GetAllPromptsResponseBody = {
  count: number;
  page: number;
  limit: number;
  totalPages: number;
  items: Array<GetAllPromptsItems1 | GetAllPromptsItems3 | GetAllPromptsItems2>;
};

/** @internal */
export const GetAllPromptsFiltersPromptsRequestRequestBodyType$inboundSchema:
  z.ZodNativeEnum<typeof GetAllPromptsFiltersPromptsRequestRequestBodyType> = z
    .nativeEnum(GetAllPromptsFiltersPromptsRequestRequestBodyType);

/** @internal */
export const GetAllPromptsFiltersPromptsRequestRequestBodyType$outboundSchema:
  z.ZodNativeEnum<typeof GetAllPromptsFiltersPromptsRequestRequestBodyType> =
    GetAllPromptsFiltersPromptsRequestRequestBodyType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPromptsFiltersPromptsRequestRequestBodyType$ {
  /** @deprecated use `GetAllPromptsFiltersPromptsRequestRequestBodyType$inboundSchema` instead. */
  export const inboundSchema =
    GetAllPromptsFiltersPromptsRequestRequestBodyType$inboundSchema;
  /** @deprecated use `GetAllPromptsFiltersPromptsRequestRequestBodyType$outboundSchema` instead. */
  export const outboundSchema =
    GetAllPromptsFiltersPromptsRequestRequestBodyType$outboundSchema;
}

/** @internal */
export const GetAllPromptsFiltersPromptsOperator$inboundSchema: z.ZodNativeEnum<
  typeof GetAllPromptsFiltersPromptsOperator
> = z.nativeEnum(GetAllPromptsFiltersPromptsOperator);

/** @internal */
export const GetAllPromptsFiltersPromptsOperator$outboundSchema:
  z.ZodNativeEnum<typeof GetAllPromptsFiltersPromptsOperator> =
    GetAllPromptsFiltersPromptsOperator$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPromptsFiltersPromptsOperator$ {
  /** @deprecated use `GetAllPromptsFiltersPromptsOperator$inboundSchema` instead. */
  export const inboundSchema =
    GetAllPromptsFiltersPromptsOperator$inboundSchema;
  /** @deprecated use `GetAllPromptsFiltersPromptsOperator$outboundSchema` instead. */
  export const outboundSchema =
    GetAllPromptsFiltersPromptsOperator$outboundSchema;
}

/** @internal */
export const Filters4$inboundSchema: z.ZodType<
  Filters4,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: GetAllPromptsFiltersPromptsRequestRequestBodyType$inboundSchema,
  operator: GetAllPromptsFiltersPromptsOperator$inboundSchema,
  values: z.array(z.string()),
  path: z.string(),
});

/** @internal */
export type Filters4$Outbound = {
  type: string;
  operator: string;
  values: Array<string>;
  path: string;
};

/** @internal */
export const Filters4$outboundSchema: z.ZodType<
  Filters4$Outbound,
  z.ZodTypeDef,
  Filters4
> = z.object({
  type: GetAllPromptsFiltersPromptsRequestRequestBodyType$outboundSchema,
  operator: GetAllPromptsFiltersPromptsOperator$outboundSchema,
  values: z.array(z.string()),
  path: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Filters4$ {
  /** @deprecated use `Filters4$inboundSchema` instead. */
  export const inboundSchema = Filters4$inboundSchema;
  /** @deprecated use `Filters4$outboundSchema` instead. */
  export const outboundSchema = Filters4$outboundSchema;
  /** @deprecated use `Filters4$Outbound` instead. */
  export type Outbound = Filters4$Outbound;
}

export function filters4ToJSON(filters4: Filters4): string {
  return JSON.stringify(Filters4$outboundSchema.parse(filters4));
}

export function filters4FromJSON(
  jsonString: string,
): SafeParseResult<Filters4, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Filters4$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Filters4' from JSON`,
  );
}

/** @internal */
export const GetAllPromptsFiltersPromptsRequestType$inboundSchema:
  z.ZodNativeEnum<typeof GetAllPromptsFiltersPromptsRequestType> = z.nativeEnum(
    GetAllPromptsFiltersPromptsRequestType,
  );

/** @internal */
export const GetAllPromptsFiltersPromptsRequestType$outboundSchema:
  z.ZodNativeEnum<typeof GetAllPromptsFiltersPromptsRequestType> =
    GetAllPromptsFiltersPromptsRequestType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPromptsFiltersPromptsRequestType$ {
  /** @deprecated use `GetAllPromptsFiltersPromptsRequestType$inboundSchema` instead. */
  export const inboundSchema =
    GetAllPromptsFiltersPromptsRequestType$inboundSchema;
  /** @deprecated use `GetAllPromptsFiltersPromptsRequestType$outboundSchema` instead. */
  export const outboundSchema =
    GetAllPromptsFiltersPromptsRequestType$outboundSchema;
}

/** @internal */
export const GetAllPromptsFiltersOperator$inboundSchema: z.ZodNativeEnum<
  typeof GetAllPromptsFiltersOperator
> = z.nativeEnum(GetAllPromptsFiltersOperator);

/** @internal */
export const GetAllPromptsFiltersOperator$outboundSchema: z.ZodNativeEnum<
  typeof GetAllPromptsFiltersOperator
> = GetAllPromptsFiltersOperator$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPromptsFiltersOperator$ {
  /** @deprecated use `GetAllPromptsFiltersOperator$inboundSchema` instead. */
  export const inboundSchema = GetAllPromptsFiltersOperator$inboundSchema;
  /** @deprecated use `GetAllPromptsFiltersOperator$outboundSchema` instead. */
  export const outboundSchema = GetAllPromptsFiltersOperator$outboundSchema;
}

/** @internal */
export const GetAllPromptsFilters3$inboundSchema: z.ZodType<
  GetAllPromptsFilters3,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: GetAllPromptsFiltersPromptsRequestType$inboundSchema,
  operator: GetAllPromptsFiltersOperator$inboundSchema,
  value: z.string(),
  path: z.string(),
});

/** @internal */
export type GetAllPromptsFilters3$Outbound = {
  type: string;
  operator: string;
  value: string;
  path: string;
};

/** @internal */
export const GetAllPromptsFilters3$outboundSchema: z.ZodType<
  GetAllPromptsFilters3$Outbound,
  z.ZodTypeDef,
  GetAllPromptsFilters3
> = z.object({
  type: GetAllPromptsFiltersPromptsRequestType$outboundSchema,
  operator: GetAllPromptsFiltersOperator$outboundSchema,
  value: z.string(),
  path: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPromptsFilters3$ {
  /** @deprecated use `GetAllPromptsFilters3$inboundSchema` instead. */
  export const inboundSchema = GetAllPromptsFilters3$inboundSchema;
  /** @deprecated use `GetAllPromptsFilters3$outboundSchema` instead. */
  export const outboundSchema = GetAllPromptsFilters3$outboundSchema;
  /** @deprecated use `GetAllPromptsFilters3$Outbound` instead. */
  export type Outbound = GetAllPromptsFilters3$Outbound;
}

export function getAllPromptsFilters3ToJSON(
  getAllPromptsFilters3: GetAllPromptsFilters3,
): string {
  return JSON.stringify(
    GetAllPromptsFilters3$outboundSchema.parse(getAllPromptsFilters3),
  );
}

export function getAllPromptsFilters3FromJSON(
  jsonString: string,
): SafeParseResult<GetAllPromptsFilters3, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetAllPromptsFilters3$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetAllPromptsFilters3' from JSON`,
  );
}

/** @internal */
export const GetAllPromptsFiltersPromptsType$inboundSchema: z.ZodNativeEnum<
  typeof GetAllPromptsFiltersPromptsType
> = z.nativeEnum(GetAllPromptsFiltersPromptsType);

/** @internal */
export const GetAllPromptsFiltersPromptsType$outboundSchema: z.ZodNativeEnum<
  typeof GetAllPromptsFiltersPromptsType
> = GetAllPromptsFiltersPromptsType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPromptsFiltersPromptsType$ {
  /** @deprecated use `GetAllPromptsFiltersPromptsType$inboundSchema` instead. */
  export const inboundSchema = GetAllPromptsFiltersPromptsType$inboundSchema;
  /** @deprecated use `GetAllPromptsFiltersPromptsType$outboundSchema` instead. */
  export const outboundSchema = GetAllPromptsFiltersPromptsType$outboundSchema;
}

/** @internal */
export const GetAllPromptsFilters2$inboundSchema: z.ZodType<
  GetAllPromptsFilters2,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: GetAllPromptsFiltersPromptsType$inboundSchema,
  value: z.string(),
  searchPaths: z.array(z.string()),
});

/** @internal */
export type GetAllPromptsFilters2$Outbound = {
  type: string;
  value: string;
  searchPaths: Array<string>;
};

/** @internal */
export const GetAllPromptsFilters2$outboundSchema: z.ZodType<
  GetAllPromptsFilters2$Outbound,
  z.ZodTypeDef,
  GetAllPromptsFilters2
> = z.object({
  type: GetAllPromptsFiltersPromptsType$outboundSchema,
  value: z.string(),
  searchPaths: z.array(z.string()),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPromptsFilters2$ {
  /** @deprecated use `GetAllPromptsFilters2$inboundSchema` instead. */
  export const inboundSchema = GetAllPromptsFilters2$inboundSchema;
  /** @deprecated use `GetAllPromptsFilters2$outboundSchema` instead. */
  export const outboundSchema = GetAllPromptsFilters2$outboundSchema;
  /** @deprecated use `GetAllPromptsFilters2$Outbound` instead. */
  export type Outbound = GetAllPromptsFilters2$Outbound;
}

export function getAllPromptsFilters2ToJSON(
  getAllPromptsFilters2: GetAllPromptsFilters2,
): string {
  return JSON.stringify(
    GetAllPromptsFilters2$outboundSchema.parse(getAllPromptsFilters2),
  );
}

export function getAllPromptsFilters2FromJSON(
  jsonString: string,
): SafeParseResult<GetAllPromptsFilters2, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetAllPromptsFilters2$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetAllPromptsFilters2' from JSON`,
  );
}

/** @internal */
export const GetAllPromptsFiltersType$inboundSchema: z.ZodNativeEnum<
  typeof GetAllPromptsFiltersType
> = z.nativeEnum(GetAllPromptsFiltersType);

/** @internal */
export const GetAllPromptsFiltersType$outboundSchema: z.ZodNativeEnum<
  typeof GetAllPromptsFiltersType
> = GetAllPromptsFiltersType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPromptsFiltersType$ {
  /** @deprecated use `GetAllPromptsFiltersType$inboundSchema` instead. */
  export const inboundSchema = GetAllPromptsFiltersType$inboundSchema;
  /** @deprecated use `GetAllPromptsFiltersType$outboundSchema` instead. */
  export const outboundSchema = GetAllPromptsFiltersType$outboundSchema;
}

/** @internal */
export const GetAllPromptsFilters1$inboundSchema: z.ZodType<
  GetAllPromptsFilters1,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: GetAllPromptsFiltersType$inboundSchema,
  id: z.string(),
  path: z.string(),
});

/** @internal */
export type GetAllPromptsFilters1$Outbound = {
  type: string;
  id: string;
  path: string;
};

/** @internal */
export const GetAllPromptsFilters1$outboundSchema: z.ZodType<
  GetAllPromptsFilters1$Outbound,
  z.ZodTypeDef,
  GetAllPromptsFilters1
> = z.object({
  type: GetAllPromptsFiltersType$outboundSchema,
  id: z.string(),
  path: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPromptsFilters1$ {
  /** @deprecated use `GetAllPromptsFilters1$inboundSchema` instead. */
  export const inboundSchema = GetAllPromptsFilters1$inboundSchema;
  /** @deprecated use `GetAllPromptsFilters1$outboundSchema` instead. */
  export const outboundSchema = GetAllPromptsFilters1$outboundSchema;
  /** @deprecated use `GetAllPromptsFilters1$Outbound` instead. */
  export type Outbound = GetAllPromptsFilters1$Outbound;
}

export function getAllPromptsFilters1ToJSON(
  getAllPromptsFilters1: GetAllPromptsFilters1,
): string {
  return JSON.stringify(
    GetAllPromptsFilters1$outboundSchema.parse(getAllPromptsFilters1),
  );
}

export function getAllPromptsFilters1FromJSON(
  jsonString: string,
): SafeParseResult<GetAllPromptsFilters1, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetAllPromptsFilters1$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetAllPromptsFilters1' from JSON`,
  );
}

/** @internal */
export const GetAllPromptsFilters$inboundSchema: z.ZodType<
  GetAllPromptsFilters,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => GetAllPromptsFilters1$inboundSchema),
  z.lazy(() => GetAllPromptsFilters2$inboundSchema),
  z.lazy(() => GetAllPromptsFilters3$inboundSchema),
  z.lazy(() => Filters4$inboundSchema),
]);

/** @internal */
export type GetAllPromptsFilters$Outbound =
  | GetAllPromptsFilters1$Outbound
  | GetAllPromptsFilters2$Outbound
  | GetAllPromptsFilters3$Outbound
  | Filters4$Outbound;

/** @internal */
export const GetAllPromptsFilters$outboundSchema: z.ZodType<
  GetAllPromptsFilters$Outbound,
  z.ZodTypeDef,
  GetAllPromptsFilters
> = z.union([
  z.lazy(() => GetAllPromptsFilters1$outboundSchema),
  z.lazy(() => GetAllPromptsFilters2$outboundSchema),
  z.lazy(() => GetAllPromptsFilters3$outboundSchema),
  z.lazy(() => Filters4$outboundSchema),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPromptsFilters$ {
  /** @deprecated use `GetAllPromptsFilters$inboundSchema` instead. */
  export const inboundSchema = GetAllPromptsFilters$inboundSchema;
  /** @deprecated use `GetAllPromptsFilters$outboundSchema` instead. */
  export const outboundSchema = GetAllPromptsFilters$outboundSchema;
  /** @deprecated use `GetAllPromptsFilters$Outbound` instead. */
  export type Outbound = GetAllPromptsFilters$Outbound;
}

export function getAllPromptsFiltersToJSON(
  getAllPromptsFilters: GetAllPromptsFilters,
): string {
  return JSON.stringify(
    GetAllPromptsFilters$outboundSchema.parse(getAllPromptsFilters),
  );
}

export function getAllPromptsFiltersFromJSON(
  jsonString: string,
): SafeParseResult<GetAllPromptsFilters, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetAllPromptsFilters$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetAllPromptsFilters' from JSON`,
  );
}

/** @internal */
export const GetAllPromptsRequestBody$inboundSchema: z.ZodType<
  GetAllPromptsRequestBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  filters: z.array(
    z.union([
      z.lazy(() => GetAllPromptsFilters1$inboundSchema),
      z.lazy(() => GetAllPromptsFilters2$inboundSchema),
      z.lazy(() => GetAllPromptsFilters3$inboundSchema),
      z.lazy(() => Filters4$inboundSchema),
    ]),
  ),
});

/** @internal */
export type GetAllPromptsRequestBody$Outbound = {
  filters: Array<
    | GetAllPromptsFilters1$Outbound
    | GetAllPromptsFilters2$Outbound
    | GetAllPromptsFilters3$Outbound
    | Filters4$Outbound
  >;
};

/** @internal */
export const GetAllPromptsRequestBody$outboundSchema: z.ZodType<
  GetAllPromptsRequestBody$Outbound,
  z.ZodTypeDef,
  GetAllPromptsRequestBody
> = z.object({
  filters: z.array(
    z.union([
      z.lazy(() => GetAllPromptsFilters1$outboundSchema),
      z.lazy(() => GetAllPromptsFilters2$outboundSchema),
      z.lazy(() => GetAllPromptsFilters3$outboundSchema),
      z.lazy(() => Filters4$outboundSchema),
    ]),
  ),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPromptsRequestBody$ {
  /** @deprecated use `GetAllPromptsRequestBody$inboundSchema` instead. */
  export const inboundSchema = GetAllPromptsRequestBody$inboundSchema;
  /** @deprecated use `GetAllPromptsRequestBody$outboundSchema` instead. */
  export const outboundSchema = GetAllPromptsRequestBody$outboundSchema;
  /** @deprecated use `GetAllPromptsRequestBody$Outbound` instead. */
  export type Outbound = GetAllPromptsRequestBody$Outbound;
}

export function getAllPromptsRequestBodyToJSON(
  getAllPromptsRequestBody: GetAllPromptsRequestBody,
): string {
  return JSON.stringify(
    GetAllPromptsRequestBody$outboundSchema.parse(getAllPromptsRequestBody),
  );
}

export function getAllPromptsRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<GetAllPromptsRequestBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetAllPromptsRequestBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetAllPromptsRequestBody' from JSON`,
  );
}

/** @internal */
export const GetAllPromptsRequest$inboundSchema: z.ZodType<
  GetAllPromptsRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  page: z.string().optional(),
  limit: z.string().optional(),
  RequestBody: z.lazy(() => GetAllPromptsRequestBody$inboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    "RequestBody": "requestBody",
  });
});

/** @internal */
export type GetAllPromptsRequest$Outbound = {
  page?: string | undefined;
  limit?: string | undefined;
  RequestBody?: GetAllPromptsRequestBody$Outbound | undefined;
};

/** @internal */
export const GetAllPromptsRequest$outboundSchema: z.ZodType<
  GetAllPromptsRequest$Outbound,
  z.ZodTypeDef,
  GetAllPromptsRequest
> = z.object({
  page: z.string().optional(),
  limit: z.string().optional(),
  requestBody: z.lazy(() => GetAllPromptsRequestBody$outboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    requestBody: "RequestBody",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPromptsRequest$ {
  /** @deprecated use `GetAllPromptsRequest$inboundSchema` instead. */
  export const inboundSchema = GetAllPromptsRequest$inboundSchema;
  /** @deprecated use `GetAllPromptsRequest$outboundSchema` instead. */
  export const outboundSchema = GetAllPromptsRequest$outboundSchema;
  /** @deprecated use `GetAllPromptsRequest$Outbound` instead. */
  export type Outbound = GetAllPromptsRequest$Outbound;
}

export function getAllPromptsRequestToJSON(
  getAllPromptsRequest: GetAllPromptsRequest,
): string {
  return JSON.stringify(
    GetAllPromptsRequest$outboundSchema.parse(getAllPromptsRequest),
  );
}

export function getAllPromptsRequestFromJSON(
  jsonString: string,
): SafeParseResult<GetAllPromptsRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetAllPromptsRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetAllPromptsRequest' from JSON`,
  );
}

/** @internal */
export const GetAllPromptsOwnerPromptsResponse2$inboundSchema: z.ZodNativeEnum<
  typeof GetAllPromptsOwnerPromptsResponse2
> = z.nativeEnum(GetAllPromptsOwnerPromptsResponse2);

/** @internal */
export const GetAllPromptsOwnerPromptsResponse2$outboundSchema: z.ZodNativeEnum<
  typeof GetAllPromptsOwnerPromptsResponse2
> = GetAllPromptsOwnerPromptsResponse2$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPromptsOwnerPromptsResponse2$ {
  /** @deprecated use `GetAllPromptsOwnerPromptsResponse2$inboundSchema` instead. */
  export const inboundSchema = GetAllPromptsOwnerPromptsResponse2$inboundSchema;
  /** @deprecated use `GetAllPromptsOwnerPromptsResponse2$outboundSchema` instead. */
  export const outboundSchema =
    GetAllPromptsOwnerPromptsResponse2$outboundSchema;
}

/** @internal */
export const GetAllPromptsItemsPromptsResponseOwner$inboundSchema: z.ZodType<
  GetAllPromptsItemsPromptsResponseOwner,
  z.ZodTypeDef,
  unknown
> = z.union([z.string(), GetAllPromptsOwnerPromptsResponse2$inboundSchema]);

/** @internal */
export type GetAllPromptsItemsPromptsResponseOwner$Outbound = string | string;

/** @internal */
export const GetAllPromptsItemsPromptsResponseOwner$outboundSchema: z.ZodType<
  GetAllPromptsItemsPromptsResponseOwner$Outbound,
  z.ZodTypeDef,
  GetAllPromptsItemsPromptsResponseOwner
> = z.union([z.string(), GetAllPromptsOwnerPromptsResponse2$outboundSchema]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPromptsItemsPromptsResponseOwner$ {
  /** @deprecated use `GetAllPromptsItemsPromptsResponseOwner$inboundSchema` instead. */
  export const inboundSchema =
    GetAllPromptsItemsPromptsResponseOwner$inboundSchema;
  /** @deprecated use `GetAllPromptsItemsPromptsResponseOwner$outboundSchema` instead. */
  export const outboundSchema =
    GetAllPromptsItemsPromptsResponseOwner$outboundSchema;
  /** @deprecated use `GetAllPromptsItemsPromptsResponseOwner$Outbound` instead. */
  export type Outbound = GetAllPromptsItemsPromptsResponseOwner$Outbound;
}

export function getAllPromptsItemsPromptsResponseOwnerToJSON(
  getAllPromptsItemsPromptsResponseOwner:
    GetAllPromptsItemsPromptsResponseOwner,
): string {
  return JSON.stringify(
    GetAllPromptsItemsPromptsResponseOwner$outboundSchema.parse(
      getAllPromptsItemsPromptsResponseOwner,
    ),
  );
}

export function getAllPromptsItemsPromptsResponseOwnerFromJSON(
  jsonString: string,
): SafeParseResult<GetAllPromptsItemsPromptsResponseOwner, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      GetAllPromptsItemsPromptsResponseOwner$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetAllPromptsItemsPromptsResponseOwner' from JSON`,
  );
}

/** @internal */
export const GetAllPromptsItemsPromptsResponseModelType$inboundSchema:
  z.ZodNativeEnum<typeof GetAllPromptsItemsPromptsResponseModelType> = z
    .nativeEnum(GetAllPromptsItemsPromptsResponseModelType);

/** @internal */
export const GetAllPromptsItemsPromptsResponseModelType$outboundSchema:
  z.ZodNativeEnum<typeof GetAllPromptsItemsPromptsResponseModelType> =
    GetAllPromptsItemsPromptsResponseModelType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPromptsItemsPromptsResponseModelType$ {
  /** @deprecated use `GetAllPromptsItemsPromptsResponseModelType$inboundSchema` instead. */
  export const inboundSchema =
    GetAllPromptsItemsPromptsResponseModelType$inboundSchema;
  /** @deprecated use `GetAllPromptsItemsPromptsResponseModelType$outboundSchema` instead. */
  export const outboundSchema =
    GetAllPromptsItemsPromptsResponseModelType$outboundSchema;
}

/** @internal */
export const GetAllPromptsItemsPromptsResponse200Format$inboundSchema:
  z.ZodNativeEnum<typeof GetAllPromptsItemsPromptsResponse200Format> = z
    .nativeEnum(GetAllPromptsItemsPromptsResponse200Format);

/** @internal */
export const GetAllPromptsItemsPromptsResponse200Format$outboundSchema:
  z.ZodNativeEnum<typeof GetAllPromptsItemsPromptsResponse200Format> =
    GetAllPromptsItemsPromptsResponse200Format$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPromptsItemsPromptsResponse200Format$ {
  /** @deprecated use `GetAllPromptsItemsPromptsResponse200Format$inboundSchema` instead. */
  export const inboundSchema =
    GetAllPromptsItemsPromptsResponse200Format$inboundSchema;
  /** @deprecated use `GetAllPromptsItemsPromptsResponse200Format$outboundSchema` instead. */
  export const outboundSchema =
    GetAllPromptsItemsPromptsResponse200Format$outboundSchema;
}

/** @internal */
export const GetAllPromptsItemsPromptsResponseQuality$inboundSchema:
  z.ZodNativeEnum<typeof GetAllPromptsItemsPromptsResponseQuality> = z
    .nativeEnum(GetAllPromptsItemsPromptsResponseQuality);

/** @internal */
export const GetAllPromptsItemsPromptsResponseQuality$outboundSchema:
  z.ZodNativeEnum<typeof GetAllPromptsItemsPromptsResponseQuality> =
    GetAllPromptsItemsPromptsResponseQuality$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPromptsItemsPromptsResponseQuality$ {
  /** @deprecated use `GetAllPromptsItemsPromptsResponseQuality$inboundSchema` instead. */
  export const inboundSchema =
    GetAllPromptsItemsPromptsResponseQuality$inboundSchema;
  /** @deprecated use `GetAllPromptsItemsPromptsResponseQuality$outboundSchema` instead. */
  export const outboundSchema =
    GetAllPromptsItemsPromptsResponseQuality$outboundSchema;
}

/** @internal */
export const GetAllPromptsResponseFormatPromptsResponse200ApplicationJSONResponseBodyType$inboundSchema:
  z.ZodNativeEnum<
    typeof GetAllPromptsResponseFormatPromptsResponse200ApplicationJSONResponseBodyType
  > = z.nativeEnum(
    GetAllPromptsResponseFormatPromptsResponse200ApplicationJSONResponseBodyType,
  );

/** @internal */
export const GetAllPromptsResponseFormatPromptsResponse200ApplicationJSONResponseBodyType$outboundSchema:
  z.ZodNativeEnum<
    typeof GetAllPromptsResponseFormatPromptsResponse200ApplicationJSONResponseBodyType
  > =
    GetAllPromptsResponseFormatPromptsResponse200ApplicationJSONResponseBodyType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPromptsResponseFormatPromptsResponse200ApplicationJSONResponseBodyType$ {
  /** @deprecated use `GetAllPromptsResponseFormatPromptsResponse200ApplicationJSONResponseBodyType$inboundSchema` instead. */
  export const inboundSchema =
    GetAllPromptsResponseFormatPromptsResponse200ApplicationJSONResponseBodyType$inboundSchema;
  /** @deprecated use `GetAllPromptsResponseFormatPromptsResponse200ApplicationJSONResponseBodyType$outboundSchema` instead. */
  export const outboundSchema =
    GetAllPromptsResponseFormatPromptsResponse200ApplicationJSONResponseBodyType$outboundSchema;
}

/** @internal */
export const GetAllPromptsResponseFormatPromptsResponse2$inboundSchema:
  z.ZodType<
    GetAllPromptsResponseFormatPromptsResponse2,
    z.ZodTypeDef,
    unknown
  > = z.object({
    type:
      GetAllPromptsResponseFormatPromptsResponse200ApplicationJSONResponseBodyType$inboundSchema,
  });

/** @internal */
export type GetAllPromptsResponseFormatPromptsResponse2$Outbound = {
  type: string;
};

/** @internal */
export const GetAllPromptsResponseFormatPromptsResponse2$outboundSchema:
  z.ZodType<
    GetAllPromptsResponseFormatPromptsResponse2$Outbound,
    z.ZodTypeDef,
    GetAllPromptsResponseFormatPromptsResponse2
  > = z.object({
    type:
      GetAllPromptsResponseFormatPromptsResponse200ApplicationJSONResponseBodyType$outboundSchema,
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPromptsResponseFormatPromptsResponse2$ {
  /** @deprecated use `GetAllPromptsResponseFormatPromptsResponse2$inboundSchema` instead. */
  export const inboundSchema =
    GetAllPromptsResponseFormatPromptsResponse2$inboundSchema;
  /** @deprecated use `GetAllPromptsResponseFormatPromptsResponse2$outboundSchema` instead. */
  export const outboundSchema =
    GetAllPromptsResponseFormatPromptsResponse2$outboundSchema;
  /** @deprecated use `GetAllPromptsResponseFormatPromptsResponse2$Outbound` instead. */
  export type Outbound = GetAllPromptsResponseFormatPromptsResponse2$Outbound;
}

export function getAllPromptsResponseFormatPromptsResponse2ToJSON(
  getAllPromptsResponseFormatPromptsResponse2:
    GetAllPromptsResponseFormatPromptsResponse2,
): string {
  return JSON.stringify(
    GetAllPromptsResponseFormatPromptsResponse2$outboundSchema.parse(
      getAllPromptsResponseFormatPromptsResponse2,
    ),
  );
}

export function getAllPromptsResponseFormatPromptsResponse2FromJSON(
  jsonString: string,
): SafeParseResult<
  GetAllPromptsResponseFormatPromptsResponse2,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetAllPromptsResponseFormatPromptsResponse2$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'GetAllPromptsResponseFormatPromptsResponse2' from JSON`,
  );
}

/** @internal */
export const GetAllPromptsResponseFormatPromptsResponse200ApplicationJSONType$inboundSchema:
  z.ZodNativeEnum<
    typeof GetAllPromptsResponseFormatPromptsResponse200ApplicationJSONType
  > = z.nativeEnum(
    GetAllPromptsResponseFormatPromptsResponse200ApplicationJSONType,
  );

/** @internal */
export const GetAllPromptsResponseFormatPromptsResponse200ApplicationJSONType$outboundSchema:
  z.ZodNativeEnum<
    typeof GetAllPromptsResponseFormatPromptsResponse200ApplicationJSONType
  > =
    GetAllPromptsResponseFormatPromptsResponse200ApplicationJSONType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPromptsResponseFormatPromptsResponse200ApplicationJSONType$ {
  /** @deprecated use `GetAllPromptsResponseFormatPromptsResponse200ApplicationJSONType$inboundSchema` instead. */
  export const inboundSchema =
    GetAllPromptsResponseFormatPromptsResponse200ApplicationJSONType$inboundSchema;
  /** @deprecated use `GetAllPromptsResponseFormatPromptsResponse200ApplicationJSONType$outboundSchema` instead. */
  export const outboundSchema =
    GetAllPromptsResponseFormatPromptsResponse200ApplicationJSONType$outboundSchema;
}

/** @internal */
export const GetAllPromptsResponseFormatPromptsResponseJsonSchema$inboundSchema:
  z.ZodType<
    GetAllPromptsResponseFormatPromptsResponseJsonSchema,
    z.ZodTypeDef,
    unknown
  > = z.object({
    name: z.string(),
    strict: z.boolean(),
    schema: z.record(z.any()),
  });

/** @internal */
export type GetAllPromptsResponseFormatPromptsResponseJsonSchema$Outbound = {
  name: string;
  strict: boolean;
  schema: { [k: string]: any };
};

/** @internal */
export const GetAllPromptsResponseFormatPromptsResponseJsonSchema$outboundSchema:
  z.ZodType<
    GetAllPromptsResponseFormatPromptsResponseJsonSchema$Outbound,
    z.ZodTypeDef,
    GetAllPromptsResponseFormatPromptsResponseJsonSchema
  > = z.object({
    name: z.string(),
    strict: z.boolean(),
    schema: z.record(z.any()),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPromptsResponseFormatPromptsResponseJsonSchema$ {
  /** @deprecated use `GetAllPromptsResponseFormatPromptsResponseJsonSchema$inboundSchema` instead. */
  export const inboundSchema =
    GetAllPromptsResponseFormatPromptsResponseJsonSchema$inboundSchema;
  /** @deprecated use `GetAllPromptsResponseFormatPromptsResponseJsonSchema$outboundSchema` instead. */
  export const outboundSchema =
    GetAllPromptsResponseFormatPromptsResponseJsonSchema$outboundSchema;
  /** @deprecated use `GetAllPromptsResponseFormatPromptsResponseJsonSchema$Outbound` instead. */
  export type Outbound =
    GetAllPromptsResponseFormatPromptsResponseJsonSchema$Outbound;
}

export function getAllPromptsResponseFormatPromptsResponseJsonSchemaToJSON(
  getAllPromptsResponseFormatPromptsResponseJsonSchema:
    GetAllPromptsResponseFormatPromptsResponseJsonSchema,
): string {
  return JSON.stringify(
    GetAllPromptsResponseFormatPromptsResponseJsonSchema$outboundSchema.parse(
      getAllPromptsResponseFormatPromptsResponseJsonSchema,
    ),
  );
}

export function getAllPromptsResponseFormatPromptsResponseJsonSchemaFromJSON(
  jsonString: string,
): SafeParseResult<
  GetAllPromptsResponseFormatPromptsResponseJsonSchema,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetAllPromptsResponseFormatPromptsResponseJsonSchema$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'GetAllPromptsResponseFormatPromptsResponseJsonSchema' from JSON`,
  );
}

/** @internal */
export const GetAllPromptsResponseFormatPromptsResponse1$inboundSchema:
  z.ZodType<
    GetAllPromptsResponseFormatPromptsResponse1,
    z.ZodTypeDef,
    unknown
  > = z.object({
    type:
      GetAllPromptsResponseFormatPromptsResponse200ApplicationJSONType$inboundSchema,
    json_schema: z.lazy(() =>
      GetAllPromptsResponseFormatPromptsResponseJsonSchema$inboundSchema
    ),
  }).transform((v) => {
    return remap$(v, {
      "json_schema": "jsonSchema",
    });
  });

/** @internal */
export type GetAllPromptsResponseFormatPromptsResponse1$Outbound = {
  type: string;
  json_schema: GetAllPromptsResponseFormatPromptsResponseJsonSchema$Outbound;
};

/** @internal */
export const GetAllPromptsResponseFormatPromptsResponse1$outboundSchema:
  z.ZodType<
    GetAllPromptsResponseFormatPromptsResponse1$Outbound,
    z.ZodTypeDef,
    GetAllPromptsResponseFormatPromptsResponse1
  > = z.object({
    type:
      GetAllPromptsResponseFormatPromptsResponse200ApplicationJSONType$outboundSchema,
    jsonSchema: z.lazy(() =>
      GetAllPromptsResponseFormatPromptsResponseJsonSchema$outboundSchema
    ),
  }).transform((v) => {
    return remap$(v, {
      jsonSchema: "json_schema",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPromptsResponseFormatPromptsResponse1$ {
  /** @deprecated use `GetAllPromptsResponseFormatPromptsResponse1$inboundSchema` instead. */
  export const inboundSchema =
    GetAllPromptsResponseFormatPromptsResponse1$inboundSchema;
  /** @deprecated use `GetAllPromptsResponseFormatPromptsResponse1$outboundSchema` instead. */
  export const outboundSchema =
    GetAllPromptsResponseFormatPromptsResponse1$outboundSchema;
  /** @deprecated use `GetAllPromptsResponseFormatPromptsResponse1$Outbound` instead. */
  export type Outbound = GetAllPromptsResponseFormatPromptsResponse1$Outbound;
}

export function getAllPromptsResponseFormatPromptsResponse1ToJSON(
  getAllPromptsResponseFormatPromptsResponse1:
    GetAllPromptsResponseFormatPromptsResponse1,
): string {
  return JSON.stringify(
    GetAllPromptsResponseFormatPromptsResponse1$outboundSchema.parse(
      getAllPromptsResponseFormatPromptsResponse1,
    ),
  );
}

export function getAllPromptsResponseFormatPromptsResponse1FromJSON(
  jsonString: string,
): SafeParseResult<
  GetAllPromptsResponseFormatPromptsResponse1,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetAllPromptsResponseFormatPromptsResponse1$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'GetAllPromptsResponseFormatPromptsResponse1' from JSON`,
  );
}

/** @internal */
export const GetAllPromptsItemsPromptsResponseResponseFormat$inboundSchema:
  z.ZodType<
    GetAllPromptsItemsPromptsResponseResponseFormat,
    z.ZodTypeDef,
    unknown
  > = z.union([
    z.lazy(() => GetAllPromptsResponseFormatPromptsResponse2$inboundSchema),
    z.lazy(() => GetAllPromptsResponseFormatPromptsResponse1$inboundSchema),
  ]);

/** @internal */
export type GetAllPromptsItemsPromptsResponseResponseFormat$Outbound =
  | GetAllPromptsResponseFormatPromptsResponse2$Outbound
  | GetAllPromptsResponseFormatPromptsResponse1$Outbound;

/** @internal */
export const GetAllPromptsItemsPromptsResponseResponseFormat$outboundSchema:
  z.ZodType<
    GetAllPromptsItemsPromptsResponseResponseFormat$Outbound,
    z.ZodTypeDef,
    GetAllPromptsItemsPromptsResponseResponseFormat
  > = z.union([
    z.lazy(() => GetAllPromptsResponseFormatPromptsResponse2$outboundSchema),
    z.lazy(() => GetAllPromptsResponseFormatPromptsResponse1$outboundSchema),
  ]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPromptsItemsPromptsResponseResponseFormat$ {
  /** @deprecated use `GetAllPromptsItemsPromptsResponseResponseFormat$inboundSchema` instead. */
  export const inboundSchema =
    GetAllPromptsItemsPromptsResponseResponseFormat$inboundSchema;
  /** @deprecated use `GetAllPromptsItemsPromptsResponseResponseFormat$outboundSchema` instead. */
  export const outboundSchema =
    GetAllPromptsItemsPromptsResponseResponseFormat$outboundSchema;
  /** @deprecated use `GetAllPromptsItemsPromptsResponseResponseFormat$Outbound` instead. */
  export type Outbound =
    GetAllPromptsItemsPromptsResponseResponseFormat$Outbound;
}

export function getAllPromptsItemsPromptsResponseResponseFormatToJSON(
  getAllPromptsItemsPromptsResponseResponseFormat:
    GetAllPromptsItemsPromptsResponseResponseFormat,
): string {
  return JSON.stringify(
    GetAllPromptsItemsPromptsResponseResponseFormat$outboundSchema.parse(
      getAllPromptsItemsPromptsResponseResponseFormat,
    ),
  );
}

export function getAllPromptsItemsPromptsResponseResponseFormatFromJSON(
  jsonString: string,
): SafeParseResult<
  GetAllPromptsItemsPromptsResponseResponseFormat,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetAllPromptsItemsPromptsResponseResponseFormat$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'GetAllPromptsItemsPromptsResponseResponseFormat' from JSON`,
  );
}

/** @internal */
export const GetAllPromptsItemsPromptsResponsePhotoRealVersion$inboundSchema:
  z.ZodNativeEnum<typeof GetAllPromptsItemsPromptsResponsePhotoRealVersion> = z
    .nativeEnum(GetAllPromptsItemsPromptsResponsePhotoRealVersion);

/** @internal */
export const GetAllPromptsItemsPromptsResponsePhotoRealVersion$outboundSchema:
  z.ZodNativeEnum<typeof GetAllPromptsItemsPromptsResponsePhotoRealVersion> =
    GetAllPromptsItemsPromptsResponsePhotoRealVersion$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPromptsItemsPromptsResponsePhotoRealVersion$ {
  /** @deprecated use `GetAllPromptsItemsPromptsResponsePhotoRealVersion$inboundSchema` instead. */
  export const inboundSchema =
    GetAllPromptsItemsPromptsResponsePhotoRealVersion$inboundSchema;
  /** @deprecated use `GetAllPromptsItemsPromptsResponsePhotoRealVersion$outboundSchema` instead. */
  export const outboundSchema =
    GetAllPromptsItemsPromptsResponsePhotoRealVersion$outboundSchema;
}

/** @internal */
export const GetAllPromptsItemsPromptsResponseEncodingFormat$inboundSchema:
  z.ZodNativeEnum<typeof GetAllPromptsItemsPromptsResponseEncodingFormat> = z
    .nativeEnum(GetAllPromptsItemsPromptsResponseEncodingFormat);

/** @internal */
export const GetAllPromptsItemsPromptsResponseEncodingFormat$outboundSchema:
  z.ZodNativeEnum<typeof GetAllPromptsItemsPromptsResponseEncodingFormat> =
    GetAllPromptsItemsPromptsResponseEncodingFormat$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPromptsItemsPromptsResponseEncodingFormat$ {
  /** @deprecated use `GetAllPromptsItemsPromptsResponseEncodingFormat$inboundSchema` instead. */
  export const inboundSchema =
    GetAllPromptsItemsPromptsResponseEncodingFormat$inboundSchema;
  /** @deprecated use `GetAllPromptsItemsPromptsResponseEncodingFormat$outboundSchema` instead. */
  export const outboundSchema =
    GetAllPromptsItemsPromptsResponseEncodingFormat$outboundSchema;
}

/** @internal */
export const GetAllPromptsItemsPromptsResponseModelParameters$inboundSchema:
  z.ZodType<
    GetAllPromptsItemsPromptsResponseModelParameters,
    z.ZodTypeDef,
    unknown
  > = z.object({
    temperature: z.number().optional(),
    maxTokens: z.number().optional(),
    topK: z.number().optional(),
    topP: z.number().optional(),
    frequencyPenalty: z.number().optional(),
    presencePenalty: z.number().optional(),
    numImages: z.number().optional(),
    seed: z.number().optional(),
    format: GetAllPromptsItemsPromptsResponse200Format$inboundSchema.optional(),
    dimensions: z.string().optional(),
    quality: GetAllPromptsItemsPromptsResponseQuality$inboundSchema.optional(),
    style: z.string().optional(),
    responseFormat: z.nullable(
      z.union([
        z.lazy(() => GetAllPromptsResponseFormatPromptsResponse2$inboundSchema),
        z.lazy(() => GetAllPromptsResponseFormatPromptsResponse1$inboundSchema),
      ]),
    ).optional(),
    photoRealVersion:
      GetAllPromptsItemsPromptsResponsePhotoRealVersion$inboundSchema
        .optional(),
    encoding_format:
      GetAllPromptsItemsPromptsResponseEncodingFormat$inboundSchema.optional(),
  }).transform((v) => {
    return remap$(v, {
      "encoding_format": "encodingFormat",
    });
  });

/** @internal */
export type GetAllPromptsItemsPromptsResponseModelParameters$Outbound = {
  temperature?: number | undefined;
  maxTokens?: number | undefined;
  topK?: number | undefined;
  topP?: number | undefined;
  frequencyPenalty?: number | undefined;
  presencePenalty?: number | undefined;
  numImages?: number | undefined;
  seed?: number | undefined;
  format?: string | undefined;
  dimensions?: string | undefined;
  quality?: string | undefined;
  style?: string | undefined;
  responseFormat?:
    | GetAllPromptsResponseFormatPromptsResponse2$Outbound
    | GetAllPromptsResponseFormatPromptsResponse1$Outbound
    | null
    | undefined;
  photoRealVersion?: string | undefined;
  encoding_format?: string | undefined;
};

/** @internal */
export const GetAllPromptsItemsPromptsResponseModelParameters$outboundSchema:
  z.ZodType<
    GetAllPromptsItemsPromptsResponseModelParameters$Outbound,
    z.ZodTypeDef,
    GetAllPromptsItemsPromptsResponseModelParameters
  > = z.object({
    temperature: z.number().optional(),
    maxTokens: z.number().optional(),
    topK: z.number().optional(),
    topP: z.number().optional(),
    frequencyPenalty: z.number().optional(),
    presencePenalty: z.number().optional(),
    numImages: z.number().optional(),
    seed: z.number().optional(),
    format: GetAllPromptsItemsPromptsResponse200Format$outboundSchema
      .optional(),
    dimensions: z.string().optional(),
    quality: GetAllPromptsItemsPromptsResponseQuality$outboundSchema.optional(),
    style: z.string().optional(),
    responseFormat: z.nullable(
      z.union([
        z.lazy(() =>
          GetAllPromptsResponseFormatPromptsResponse2$outboundSchema
        ),
        z.lazy(() =>
          GetAllPromptsResponseFormatPromptsResponse1$outboundSchema
        ),
      ]),
    ).optional(),
    photoRealVersion:
      GetAllPromptsItemsPromptsResponsePhotoRealVersion$outboundSchema
        .optional(),
    encodingFormat:
      GetAllPromptsItemsPromptsResponseEncodingFormat$outboundSchema.optional(),
  }).transform((v) => {
    return remap$(v, {
      encodingFormat: "encoding_format",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPromptsItemsPromptsResponseModelParameters$ {
  /** @deprecated use `GetAllPromptsItemsPromptsResponseModelParameters$inboundSchema` instead. */
  export const inboundSchema =
    GetAllPromptsItemsPromptsResponseModelParameters$inboundSchema;
  /** @deprecated use `GetAllPromptsItemsPromptsResponseModelParameters$outboundSchema` instead. */
  export const outboundSchema =
    GetAllPromptsItemsPromptsResponseModelParameters$outboundSchema;
  /** @deprecated use `GetAllPromptsItemsPromptsResponseModelParameters$Outbound` instead. */
  export type Outbound =
    GetAllPromptsItemsPromptsResponseModelParameters$Outbound;
}

export function getAllPromptsItemsPromptsResponseModelParametersToJSON(
  getAllPromptsItemsPromptsResponseModelParameters:
    GetAllPromptsItemsPromptsResponseModelParameters,
): string {
  return JSON.stringify(
    GetAllPromptsItemsPromptsResponseModelParameters$outboundSchema.parse(
      getAllPromptsItemsPromptsResponseModelParameters,
    ),
  );
}

export function getAllPromptsItemsPromptsResponseModelParametersFromJSON(
  jsonString: string,
): SafeParseResult<
  GetAllPromptsItemsPromptsResponseModelParameters,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetAllPromptsItemsPromptsResponseModelParameters$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'GetAllPromptsItemsPromptsResponseModelParameters' from JSON`,
  );
}

/** @internal */
export const GetAllPromptsItemsPromptsResponseProvider$inboundSchema:
  z.ZodNativeEnum<typeof GetAllPromptsItemsPromptsResponseProvider> = z
    .nativeEnum(GetAllPromptsItemsPromptsResponseProvider);

/** @internal */
export const GetAllPromptsItemsPromptsResponseProvider$outboundSchema:
  z.ZodNativeEnum<typeof GetAllPromptsItemsPromptsResponseProvider> =
    GetAllPromptsItemsPromptsResponseProvider$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPromptsItemsPromptsResponseProvider$ {
  /** @deprecated use `GetAllPromptsItemsPromptsResponseProvider$inboundSchema` instead. */
  export const inboundSchema =
    GetAllPromptsItemsPromptsResponseProvider$inboundSchema;
  /** @deprecated use `GetAllPromptsItemsPromptsResponseProvider$outboundSchema` instead. */
  export const outboundSchema =
    GetAllPromptsItemsPromptsResponseProvider$outboundSchema;
}

/** @internal */
export const GetAllPromptsItemsPromptsResponseRole$inboundSchema:
  z.ZodNativeEnum<typeof GetAllPromptsItemsPromptsResponseRole> = z.nativeEnum(
    GetAllPromptsItemsPromptsResponseRole,
  );

/** @internal */
export const GetAllPromptsItemsPromptsResponseRole$outboundSchema:
  z.ZodNativeEnum<typeof GetAllPromptsItemsPromptsResponseRole> =
    GetAllPromptsItemsPromptsResponseRole$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPromptsItemsPromptsResponseRole$ {
  /** @deprecated use `GetAllPromptsItemsPromptsResponseRole$inboundSchema` instead. */
  export const inboundSchema =
    GetAllPromptsItemsPromptsResponseRole$inboundSchema;
  /** @deprecated use `GetAllPromptsItemsPromptsResponseRole$outboundSchema` instead. */
  export const outboundSchema =
    GetAllPromptsItemsPromptsResponseRole$outboundSchema;
}

/** @internal */
export const GetAllPrompts2PromptsResponse200ApplicationJSONResponseBodyType$inboundSchema:
  z.ZodNativeEnum<
    typeof GetAllPrompts2PromptsResponse200ApplicationJSONResponseBodyType
  > = z.nativeEnum(
    GetAllPrompts2PromptsResponse200ApplicationJSONResponseBodyType,
  );

/** @internal */
export const GetAllPrompts2PromptsResponse200ApplicationJSONResponseBodyType$outboundSchema:
  z.ZodNativeEnum<
    typeof GetAllPrompts2PromptsResponse200ApplicationJSONResponseBodyType
  > =
    GetAllPrompts2PromptsResponse200ApplicationJSONResponseBodyType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPrompts2PromptsResponse200ApplicationJSONResponseBodyType$ {
  /** @deprecated use `GetAllPrompts2PromptsResponse200ApplicationJSONResponseBodyType$inboundSchema` instead. */
  export const inboundSchema =
    GetAllPrompts2PromptsResponse200ApplicationJSONResponseBodyType$inboundSchema;
  /** @deprecated use `GetAllPrompts2PromptsResponse200ApplicationJSONResponseBodyType$outboundSchema` instead. */
  export const outboundSchema =
    GetAllPrompts2PromptsResponse200ApplicationJSONResponseBodyType$outboundSchema;
}

/** @internal */
export const GetAllPrompts2PromptsResponseImageUrl$inboundSchema: z.ZodType<
  GetAllPrompts2PromptsResponseImageUrl,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string().optional(),
  url: z.string(),
  detail: z.string().optional(),
});

/** @internal */
export type GetAllPrompts2PromptsResponseImageUrl$Outbound = {
  id?: string | undefined;
  url: string;
  detail?: string | undefined;
};

/** @internal */
export const GetAllPrompts2PromptsResponseImageUrl$outboundSchema: z.ZodType<
  GetAllPrompts2PromptsResponseImageUrl$Outbound,
  z.ZodTypeDef,
  GetAllPrompts2PromptsResponseImageUrl
> = z.object({
  id: z.string().optional(),
  url: z.string(),
  detail: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPrompts2PromptsResponseImageUrl$ {
  /** @deprecated use `GetAllPrompts2PromptsResponseImageUrl$inboundSchema` instead. */
  export const inboundSchema =
    GetAllPrompts2PromptsResponseImageUrl$inboundSchema;
  /** @deprecated use `GetAllPrompts2PromptsResponseImageUrl$outboundSchema` instead. */
  export const outboundSchema =
    GetAllPrompts2PromptsResponseImageUrl$outboundSchema;
  /** @deprecated use `GetAllPrompts2PromptsResponseImageUrl$Outbound` instead. */
  export type Outbound = GetAllPrompts2PromptsResponseImageUrl$Outbound;
}

export function getAllPrompts2PromptsResponseImageUrlToJSON(
  getAllPrompts2PromptsResponseImageUrl: GetAllPrompts2PromptsResponseImageUrl,
): string {
  return JSON.stringify(
    GetAllPrompts2PromptsResponseImageUrl$outboundSchema.parse(
      getAllPrompts2PromptsResponseImageUrl,
    ),
  );
}

export function getAllPrompts2PromptsResponseImageUrlFromJSON(
  jsonString: string,
): SafeParseResult<GetAllPrompts2PromptsResponseImageUrl, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      GetAllPrompts2PromptsResponseImageUrl$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetAllPrompts2PromptsResponseImageUrl' from JSON`,
  );
}

/** @internal */
export const GetAllPrompts2PromptsResponse2$inboundSchema: z.ZodType<
  GetAllPrompts2PromptsResponse2,
  z.ZodTypeDef,
  unknown
> = z.object({
  type:
    GetAllPrompts2PromptsResponse200ApplicationJSONResponseBodyType$inboundSchema,
  image_url: z.lazy(() => GetAllPrompts2PromptsResponseImageUrl$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "image_url": "imageUrl",
  });
});

/** @internal */
export type GetAllPrompts2PromptsResponse2$Outbound = {
  type: string;
  image_url: GetAllPrompts2PromptsResponseImageUrl$Outbound;
};

/** @internal */
export const GetAllPrompts2PromptsResponse2$outboundSchema: z.ZodType<
  GetAllPrompts2PromptsResponse2$Outbound,
  z.ZodTypeDef,
  GetAllPrompts2PromptsResponse2
> = z.object({
  type:
    GetAllPrompts2PromptsResponse200ApplicationJSONResponseBodyType$outboundSchema,
  imageUrl: z.lazy(() => GetAllPrompts2PromptsResponseImageUrl$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    imageUrl: "image_url",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPrompts2PromptsResponse2$ {
  /** @deprecated use `GetAllPrompts2PromptsResponse2$inboundSchema` instead. */
  export const inboundSchema = GetAllPrompts2PromptsResponse2$inboundSchema;
  /** @deprecated use `GetAllPrompts2PromptsResponse2$outboundSchema` instead. */
  export const outboundSchema = GetAllPrompts2PromptsResponse2$outboundSchema;
  /** @deprecated use `GetAllPrompts2PromptsResponse2$Outbound` instead. */
  export type Outbound = GetAllPrompts2PromptsResponse2$Outbound;
}

export function getAllPrompts2PromptsResponse2ToJSON(
  getAllPrompts2PromptsResponse2: GetAllPrompts2PromptsResponse2,
): string {
  return JSON.stringify(
    GetAllPrompts2PromptsResponse2$outboundSchema.parse(
      getAllPrompts2PromptsResponse2,
    ),
  );
}

export function getAllPrompts2PromptsResponse2FromJSON(
  jsonString: string,
): SafeParseResult<GetAllPrompts2PromptsResponse2, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetAllPrompts2PromptsResponse2$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetAllPrompts2PromptsResponse2' from JSON`,
  );
}

/** @internal */
export const GetAllPrompts2PromptsResponse200ApplicationJSONType$inboundSchema:
  z.ZodNativeEnum<typeof GetAllPrompts2PromptsResponse200ApplicationJSONType> =
    z.nativeEnum(GetAllPrompts2PromptsResponse200ApplicationJSONType);

/** @internal */
export const GetAllPrompts2PromptsResponse200ApplicationJSONType$outboundSchema:
  z.ZodNativeEnum<typeof GetAllPrompts2PromptsResponse200ApplicationJSONType> =
    GetAllPrompts2PromptsResponse200ApplicationJSONType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPrompts2PromptsResponse200ApplicationJSONType$ {
  /** @deprecated use `GetAllPrompts2PromptsResponse200ApplicationJSONType$inboundSchema` instead. */
  export const inboundSchema =
    GetAllPrompts2PromptsResponse200ApplicationJSONType$inboundSchema;
  /** @deprecated use `GetAllPrompts2PromptsResponse200ApplicationJSONType$outboundSchema` instead. */
  export const outboundSchema =
    GetAllPrompts2PromptsResponse200ApplicationJSONType$outboundSchema;
}

/** @internal */
export const GetAllPrompts2PromptsResponse1$inboundSchema: z.ZodType<
  GetAllPrompts2PromptsResponse1,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: GetAllPrompts2PromptsResponse200ApplicationJSONType$inboundSchema,
  text: z.string(),
});

/** @internal */
export type GetAllPrompts2PromptsResponse1$Outbound = {
  type: string;
  text: string;
};

/** @internal */
export const GetAllPrompts2PromptsResponse1$outboundSchema: z.ZodType<
  GetAllPrompts2PromptsResponse1$Outbound,
  z.ZodTypeDef,
  GetAllPrompts2PromptsResponse1
> = z.object({
  type: GetAllPrompts2PromptsResponse200ApplicationJSONType$outboundSchema,
  text: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPrompts2PromptsResponse1$ {
  /** @deprecated use `GetAllPrompts2PromptsResponse1$inboundSchema` instead. */
  export const inboundSchema = GetAllPrompts2PromptsResponse1$inboundSchema;
  /** @deprecated use `GetAllPrompts2PromptsResponse1$outboundSchema` instead. */
  export const outboundSchema = GetAllPrompts2PromptsResponse1$outboundSchema;
  /** @deprecated use `GetAllPrompts2PromptsResponse1$Outbound` instead. */
  export type Outbound = GetAllPrompts2PromptsResponse1$Outbound;
}

export function getAllPrompts2PromptsResponse1ToJSON(
  getAllPrompts2PromptsResponse1: GetAllPrompts2PromptsResponse1,
): string {
  return JSON.stringify(
    GetAllPrompts2PromptsResponse1$outboundSchema.parse(
      getAllPrompts2PromptsResponse1,
    ),
  );
}

export function getAllPrompts2PromptsResponse1FromJSON(
  jsonString: string,
): SafeParseResult<GetAllPrompts2PromptsResponse1, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetAllPrompts2PromptsResponse1$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetAllPrompts2PromptsResponse1' from JSON`,
  );
}

/** @internal */
export const GetAllPromptsContentPromptsResponse2$inboundSchema: z.ZodType<
  GetAllPromptsContentPromptsResponse2,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => GetAllPrompts2PromptsResponse1$inboundSchema),
  z.lazy(() => GetAllPrompts2PromptsResponse2$inboundSchema),
]);

/** @internal */
export type GetAllPromptsContentPromptsResponse2$Outbound =
  | GetAllPrompts2PromptsResponse1$Outbound
  | GetAllPrompts2PromptsResponse2$Outbound;

/** @internal */
export const GetAllPromptsContentPromptsResponse2$outboundSchema: z.ZodType<
  GetAllPromptsContentPromptsResponse2$Outbound,
  z.ZodTypeDef,
  GetAllPromptsContentPromptsResponse2
> = z.union([
  z.lazy(() => GetAllPrompts2PromptsResponse1$outboundSchema),
  z.lazy(() => GetAllPrompts2PromptsResponse2$outboundSchema),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPromptsContentPromptsResponse2$ {
  /** @deprecated use `GetAllPromptsContentPromptsResponse2$inboundSchema` instead. */
  export const inboundSchema =
    GetAllPromptsContentPromptsResponse2$inboundSchema;
  /** @deprecated use `GetAllPromptsContentPromptsResponse2$outboundSchema` instead. */
  export const outboundSchema =
    GetAllPromptsContentPromptsResponse2$outboundSchema;
  /** @deprecated use `GetAllPromptsContentPromptsResponse2$Outbound` instead. */
  export type Outbound = GetAllPromptsContentPromptsResponse2$Outbound;
}

export function getAllPromptsContentPromptsResponse2ToJSON(
  getAllPromptsContentPromptsResponse2: GetAllPromptsContentPromptsResponse2,
): string {
  return JSON.stringify(
    GetAllPromptsContentPromptsResponse2$outboundSchema.parse(
      getAllPromptsContentPromptsResponse2,
    ),
  );
}

export function getAllPromptsContentPromptsResponse2FromJSON(
  jsonString: string,
): SafeParseResult<GetAllPromptsContentPromptsResponse2, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      GetAllPromptsContentPromptsResponse2$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetAllPromptsContentPromptsResponse2' from JSON`,
  );
}

/** @internal */
export const GetAllPromptsItemsPromptsResponseContent$inboundSchema: z.ZodType<
  GetAllPromptsItemsPromptsResponseContent,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.string(),
  z.array(z.union([
    z.lazy(() => GetAllPrompts2PromptsResponse1$inboundSchema),
    z.lazy(() => GetAllPrompts2PromptsResponse2$inboundSchema),
  ])),
]);

/** @internal */
export type GetAllPromptsItemsPromptsResponseContent$Outbound =
  | string
  | Array<
    | GetAllPrompts2PromptsResponse1$Outbound
    | GetAllPrompts2PromptsResponse2$Outbound
  >;

/** @internal */
export const GetAllPromptsItemsPromptsResponseContent$outboundSchema: z.ZodType<
  GetAllPromptsItemsPromptsResponseContent$Outbound,
  z.ZodTypeDef,
  GetAllPromptsItemsPromptsResponseContent
> = z.union([
  z.string(),
  z.array(z.union([
    z.lazy(() => GetAllPrompts2PromptsResponse1$outboundSchema),
    z.lazy(() => GetAllPrompts2PromptsResponse2$outboundSchema),
  ])),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPromptsItemsPromptsResponseContent$ {
  /** @deprecated use `GetAllPromptsItemsPromptsResponseContent$inboundSchema` instead. */
  export const inboundSchema =
    GetAllPromptsItemsPromptsResponseContent$inboundSchema;
  /** @deprecated use `GetAllPromptsItemsPromptsResponseContent$outboundSchema` instead. */
  export const outboundSchema =
    GetAllPromptsItemsPromptsResponseContent$outboundSchema;
  /** @deprecated use `GetAllPromptsItemsPromptsResponseContent$Outbound` instead. */
  export type Outbound = GetAllPromptsItemsPromptsResponseContent$Outbound;
}

export function getAllPromptsItemsPromptsResponseContentToJSON(
  getAllPromptsItemsPromptsResponseContent:
    GetAllPromptsItemsPromptsResponseContent,
): string {
  return JSON.stringify(
    GetAllPromptsItemsPromptsResponseContent$outboundSchema.parse(
      getAllPromptsItemsPromptsResponseContent,
    ),
  );
}

export function getAllPromptsItemsPromptsResponseContentFromJSON(
  jsonString: string,
): SafeParseResult<
  GetAllPromptsItemsPromptsResponseContent,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetAllPromptsItemsPromptsResponseContent$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'GetAllPromptsItemsPromptsResponseContent' from JSON`,
  );
}

/** @internal */
export const GetAllPromptsItemsPromptsResponse200ApplicationJSONType$inboundSchema:
  z.ZodNativeEnum<
    typeof GetAllPromptsItemsPromptsResponse200ApplicationJSONType
  > = z.nativeEnum(GetAllPromptsItemsPromptsResponse200ApplicationJSONType);

/** @internal */
export const GetAllPromptsItemsPromptsResponse200ApplicationJSONType$outboundSchema:
  z.ZodNativeEnum<
    typeof GetAllPromptsItemsPromptsResponse200ApplicationJSONType
  > = GetAllPromptsItemsPromptsResponse200ApplicationJSONType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPromptsItemsPromptsResponse200ApplicationJSONType$ {
  /** @deprecated use `GetAllPromptsItemsPromptsResponse200ApplicationJSONType$inboundSchema` instead. */
  export const inboundSchema =
    GetAllPromptsItemsPromptsResponse200ApplicationJSONType$inboundSchema;
  /** @deprecated use `GetAllPromptsItemsPromptsResponse200ApplicationJSONType$outboundSchema` instead. */
  export const outboundSchema =
    GetAllPromptsItemsPromptsResponse200ApplicationJSONType$outboundSchema;
}

/** @internal */
export const GetAllPromptsItemsPromptsResponseFunction$inboundSchema: z.ZodType<
  GetAllPromptsItemsPromptsResponseFunction,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.string(),
  arguments: z.string(),
});

/** @internal */
export type GetAllPromptsItemsPromptsResponseFunction$Outbound = {
  name: string;
  arguments: string;
};

/** @internal */
export const GetAllPromptsItemsPromptsResponseFunction$outboundSchema:
  z.ZodType<
    GetAllPromptsItemsPromptsResponseFunction$Outbound,
    z.ZodTypeDef,
    GetAllPromptsItemsPromptsResponseFunction
  > = z.object({
    name: z.string(),
    arguments: z.string(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPromptsItemsPromptsResponseFunction$ {
  /** @deprecated use `GetAllPromptsItemsPromptsResponseFunction$inboundSchema` instead. */
  export const inboundSchema =
    GetAllPromptsItemsPromptsResponseFunction$inboundSchema;
  /** @deprecated use `GetAllPromptsItemsPromptsResponseFunction$outboundSchema` instead. */
  export const outboundSchema =
    GetAllPromptsItemsPromptsResponseFunction$outboundSchema;
  /** @deprecated use `GetAllPromptsItemsPromptsResponseFunction$Outbound` instead. */
  export type Outbound = GetAllPromptsItemsPromptsResponseFunction$Outbound;
}

export function getAllPromptsItemsPromptsResponseFunctionToJSON(
  getAllPromptsItemsPromptsResponseFunction:
    GetAllPromptsItemsPromptsResponseFunction,
): string {
  return JSON.stringify(
    GetAllPromptsItemsPromptsResponseFunction$outboundSchema.parse(
      getAllPromptsItemsPromptsResponseFunction,
    ),
  );
}

export function getAllPromptsItemsPromptsResponseFunctionFromJSON(
  jsonString: string,
): SafeParseResult<
  GetAllPromptsItemsPromptsResponseFunction,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetAllPromptsItemsPromptsResponseFunction$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'GetAllPromptsItemsPromptsResponseFunction' from JSON`,
  );
}

/** @internal */
export const GetAllPromptsItemsPromptsResponseToolCalls$inboundSchema:
  z.ZodType<GetAllPromptsItemsPromptsResponseToolCalls, z.ZodTypeDef, unknown> =
    z.object({
      id: z.string().optional(),
      index: z.number().optional(),
      type:
        GetAllPromptsItemsPromptsResponse200ApplicationJSONType$inboundSchema,
      function: z.lazy(() =>
        GetAllPromptsItemsPromptsResponseFunction$inboundSchema
      ),
    });

/** @internal */
export type GetAllPromptsItemsPromptsResponseToolCalls$Outbound = {
  id?: string | undefined;
  index?: number | undefined;
  type: string;
  function: GetAllPromptsItemsPromptsResponseFunction$Outbound;
};

/** @internal */
export const GetAllPromptsItemsPromptsResponseToolCalls$outboundSchema:
  z.ZodType<
    GetAllPromptsItemsPromptsResponseToolCalls$Outbound,
    z.ZodTypeDef,
    GetAllPromptsItemsPromptsResponseToolCalls
  > = z.object({
    id: z.string().optional(),
    index: z.number().optional(),
    type:
      GetAllPromptsItemsPromptsResponse200ApplicationJSONType$outboundSchema,
    function: z.lazy(() =>
      GetAllPromptsItemsPromptsResponseFunction$outboundSchema
    ),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPromptsItemsPromptsResponseToolCalls$ {
  /** @deprecated use `GetAllPromptsItemsPromptsResponseToolCalls$inboundSchema` instead. */
  export const inboundSchema =
    GetAllPromptsItemsPromptsResponseToolCalls$inboundSchema;
  /** @deprecated use `GetAllPromptsItemsPromptsResponseToolCalls$outboundSchema` instead. */
  export const outboundSchema =
    GetAllPromptsItemsPromptsResponseToolCalls$outboundSchema;
  /** @deprecated use `GetAllPromptsItemsPromptsResponseToolCalls$Outbound` instead. */
  export type Outbound = GetAllPromptsItemsPromptsResponseToolCalls$Outbound;
}

export function getAllPromptsItemsPromptsResponseToolCallsToJSON(
  getAllPromptsItemsPromptsResponseToolCalls:
    GetAllPromptsItemsPromptsResponseToolCalls,
): string {
  return JSON.stringify(
    GetAllPromptsItemsPromptsResponseToolCalls$outboundSchema.parse(
      getAllPromptsItemsPromptsResponseToolCalls,
    ),
  );
}

export function getAllPromptsItemsPromptsResponseToolCallsFromJSON(
  jsonString: string,
): SafeParseResult<
  GetAllPromptsItemsPromptsResponseToolCalls,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetAllPromptsItemsPromptsResponseToolCalls$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'GetAllPromptsItemsPromptsResponseToolCalls' from JSON`,
  );
}

/** @internal */
export const GetAllPromptsItemsPromptsResponseMessages$inboundSchema: z.ZodType<
  GetAllPromptsItemsPromptsResponseMessages,
  z.ZodTypeDef,
  unknown
> = z.object({
  role: GetAllPromptsItemsPromptsResponseRole$inboundSchema,
  content: z.union([
    z.string(),
    z.array(z.union([
      z.lazy(() => GetAllPrompts2PromptsResponse1$inboundSchema),
      z.lazy(() => GetAllPrompts2PromptsResponse2$inboundSchema),
    ])),
  ]),
  tool_calls: z.array(
    z.lazy(() => GetAllPromptsItemsPromptsResponseToolCalls$inboundSchema),
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    "tool_calls": "toolCalls",
  });
});

/** @internal */
export type GetAllPromptsItemsPromptsResponseMessages$Outbound = {
  role: string;
  content:
    | string
    | Array<
      | GetAllPrompts2PromptsResponse1$Outbound
      | GetAllPrompts2PromptsResponse2$Outbound
    >;
  tool_calls?:
    | Array<GetAllPromptsItemsPromptsResponseToolCalls$Outbound>
    | undefined;
};

/** @internal */
export const GetAllPromptsItemsPromptsResponseMessages$outboundSchema:
  z.ZodType<
    GetAllPromptsItemsPromptsResponseMessages$Outbound,
    z.ZodTypeDef,
    GetAllPromptsItemsPromptsResponseMessages
  > = z.object({
    role: GetAllPromptsItemsPromptsResponseRole$outboundSchema,
    content: z.union([
      z.string(),
      z.array(z.union([
        z.lazy(() => GetAllPrompts2PromptsResponse1$outboundSchema),
        z.lazy(() => GetAllPrompts2PromptsResponse2$outboundSchema),
      ])),
    ]),
    toolCalls: z.array(
      z.lazy(() => GetAllPromptsItemsPromptsResponseToolCalls$outboundSchema),
    ).optional(),
  }).transform((v) => {
    return remap$(v, {
      toolCalls: "tool_calls",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPromptsItemsPromptsResponseMessages$ {
  /** @deprecated use `GetAllPromptsItemsPromptsResponseMessages$inboundSchema` instead. */
  export const inboundSchema =
    GetAllPromptsItemsPromptsResponseMessages$inboundSchema;
  /** @deprecated use `GetAllPromptsItemsPromptsResponseMessages$outboundSchema` instead. */
  export const outboundSchema =
    GetAllPromptsItemsPromptsResponseMessages$outboundSchema;
  /** @deprecated use `GetAllPromptsItemsPromptsResponseMessages$Outbound` instead. */
  export type Outbound = GetAllPromptsItemsPromptsResponseMessages$Outbound;
}

export function getAllPromptsItemsPromptsResponseMessagesToJSON(
  getAllPromptsItemsPromptsResponseMessages:
    GetAllPromptsItemsPromptsResponseMessages,
): string {
  return JSON.stringify(
    GetAllPromptsItemsPromptsResponseMessages$outboundSchema.parse(
      getAllPromptsItemsPromptsResponseMessages,
    ),
  );
}

export function getAllPromptsItemsPromptsResponseMessagesFromJSON(
  jsonString: string,
): SafeParseResult<
  GetAllPromptsItemsPromptsResponseMessages,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetAllPromptsItemsPromptsResponseMessages$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'GetAllPromptsItemsPromptsResponseMessages' from JSON`,
  );
}

/** @internal */
export const GetAllPromptsItemsPromptsResponsePromptConfig$inboundSchema:
  z.ZodType<
    GetAllPromptsItemsPromptsResponsePromptConfig,
    z.ZodTypeDef,
    unknown
  > = z.object({
    stream: z.boolean().optional(),
    model: z.string().optional(),
    model_db_id: z.string().optional(),
    model_type: GetAllPromptsItemsPromptsResponseModelType$inboundSchema
      .optional(),
    model_parameters: z.lazy(() =>
      GetAllPromptsItemsPromptsResponseModelParameters$inboundSchema
    ).optional(),
    provider: GetAllPromptsItemsPromptsResponseProvider$inboundSchema
      .optional(),
    integration_id: z.nullable(z.string()).optional(),
    version: z.string().optional(),
    messages: z.array(
      z.lazy(() => GetAllPromptsItemsPromptsResponseMessages$inboundSchema),
    ),
  }).transform((v) => {
    return remap$(v, {
      "model_db_id": "modelDbId",
      "model_type": "modelType",
      "model_parameters": "modelParameters",
      "integration_id": "integrationId",
    });
  });

/** @internal */
export type GetAllPromptsItemsPromptsResponsePromptConfig$Outbound = {
  stream?: boolean | undefined;
  model?: string | undefined;
  model_db_id?: string | undefined;
  model_type?: string | undefined;
  model_parameters?:
    | GetAllPromptsItemsPromptsResponseModelParameters$Outbound
    | undefined;
  provider?: string | undefined;
  integration_id?: string | null | undefined;
  version?: string | undefined;
  messages: Array<GetAllPromptsItemsPromptsResponseMessages$Outbound>;
};

/** @internal */
export const GetAllPromptsItemsPromptsResponsePromptConfig$outboundSchema:
  z.ZodType<
    GetAllPromptsItemsPromptsResponsePromptConfig$Outbound,
    z.ZodTypeDef,
    GetAllPromptsItemsPromptsResponsePromptConfig
  > = z.object({
    stream: z.boolean().optional(),
    model: z.string().optional(),
    modelDbId: z.string().optional(),
    modelType: GetAllPromptsItemsPromptsResponseModelType$outboundSchema
      .optional(),
    modelParameters: z.lazy(() =>
      GetAllPromptsItemsPromptsResponseModelParameters$outboundSchema
    ).optional(),
    provider: GetAllPromptsItemsPromptsResponseProvider$outboundSchema
      .optional(),
    integrationId: z.nullable(z.string()).optional(),
    version: z.string().optional(),
    messages: z.array(
      z.lazy(() => GetAllPromptsItemsPromptsResponseMessages$outboundSchema),
    ),
  }).transform((v) => {
    return remap$(v, {
      modelDbId: "model_db_id",
      modelType: "model_type",
      modelParameters: "model_parameters",
      integrationId: "integration_id",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPromptsItemsPromptsResponsePromptConfig$ {
  /** @deprecated use `GetAllPromptsItemsPromptsResponsePromptConfig$inboundSchema` instead. */
  export const inboundSchema =
    GetAllPromptsItemsPromptsResponsePromptConfig$inboundSchema;
  /** @deprecated use `GetAllPromptsItemsPromptsResponsePromptConfig$outboundSchema` instead. */
  export const outboundSchema =
    GetAllPromptsItemsPromptsResponsePromptConfig$outboundSchema;
  /** @deprecated use `GetAllPromptsItemsPromptsResponsePromptConfig$Outbound` instead. */
  export type Outbound = GetAllPromptsItemsPromptsResponsePromptConfig$Outbound;
}

export function getAllPromptsItemsPromptsResponsePromptConfigToJSON(
  getAllPromptsItemsPromptsResponsePromptConfig:
    GetAllPromptsItemsPromptsResponsePromptConfig,
): string {
  return JSON.stringify(
    GetAllPromptsItemsPromptsResponsePromptConfig$outboundSchema.parse(
      getAllPromptsItemsPromptsResponsePromptConfig,
    ),
  );
}

export function getAllPromptsItemsPromptsResponsePromptConfigFromJSON(
  jsonString: string,
): SafeParseResult<
  GetAllPromptsItemsPromptsResponsePromptConfig,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetAllPromptsItemsPromptsResponsePromptConfig$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'GetAllPromptsItemsPromptsResponsePromptConfig' from JSON`,
  );
}

/** @internal */
export const GetAllPromptsItemsPromptsResponseMetadata$inboundSchema: z.ZodType<
  GetAllPromptsItemsPromptsResponseMetadata,
  z.ZodTypeDef,
  unknown
> = z.object({
  use_cases: z.array(z.string()).optional(),
  language: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "use_cases": "useCases",
  });
});

/** @internal */
export type GetAllPromptsItemsPromptsResponseMetadata$Outbound = {
  use_cases?: Array<string> | undefined;
  language?: string | undefined;
};

/** @internal */
export const GetAllPromptsItemsPromptsResponseMetadata$outboundSchema:
  z.ZodType<
    GetAllPromptsItemsPromptsResponseMetadata$Outbound,
    z.ZodTypeDef,
    GetAllPromptsItemsPromptsResponseMetadata
  > = z.object({
    useCases: z.array(z.string()).optional(),
    language: z.string().optional(),
  }).transform((v) => {
    return remap$(v, {
      useCases: "use_cases",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPromptsItemsPromptsResponseMetadata$ {
  /** @deprecated use `GetAllPromptsItemsPromptsResponseMetadata$inboundSchema` instead. */
  export const inboundSchema =
    GetAllPromptsItemsPromptsResponseMetadata$inboundSchema;
  /** @deprecated use `GetAllPromptsItemsPromptsResponseMetadata$outboundSchema` instead. */
  export const outboundSchema =
    GetAllPromptsItemsPromptsResponseMetadata$outboundSchema;
  /** @deprecated use `GetAllPromptsItemsPromptsResponseMetadata$Outbound` instead. */
  export type Outbound = GetAllPromptsItemsPromptsResponseMetadata$Outbound;
}

export function getAllPromptsItemsPromptsResponseMetadataToJSON(
  getAllPromptsItemsPromptsResponseMetadata:
    GetAllPromptsItemsPromptsResponseMetadata,
): string {
  return JSON.stringify(
    GetAllPromptsItemsPromptsResponseMetadata$outboundSchema.parse(
      getAllPromptsItemsPromptsResponseMetadata,
    ),
  );
}

export function getAllPromptsItemsPromptsResponseMetadataFromJSON(
  jsonString: string,
): SafeParseResult<
  GetAllPromptsItemsPromptsResponseMetadata,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetAllPromptsItemsPromptsResponseMetadata$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'GetAllPromptsItemsPromptsResponseMetadata' from JSON`,
  );
}

/** @internal */
export const GetAllPromptsItemsPromptsResponse200ApplicationJSONResponseBodyModelType$inboundSchema:
  z.ZodNativeEnum<
    typeof GetAllPromptsItemsPromptsResponse200ApplicationJSONResponseBodyModelType
  > = z.nativeEnum(
    GetAllPromptsItemsPromptsResponse200ApplicationJSONResponseBodyModelType,
  );

/** @internal */
export const GetAllPromptsItemsPromptsResponse200ApplicationJSONResponseBodyModelType$outboundSchema:
  z.ZodNativeEnum<
    typeof GetAllPromptsItemsPromptsResponse200ApplicationJSONResponseBodyModelType
  > =
    GetAllPromptsItemsPromptsResponse200ApplicationJSONResponseBodyModelType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPromptsItemsPromptsResponse200ApplicationJSONResponseBodyModelType$ {
  /** @deprecated use `GetAllPromptsItemsPromptsResponse200ApplicationJSONResponseBodyModelType$inboundSchema` instead. */
  export const inboundSchema =
    GetAllPromptsItemsPromptsResponse200ApplicationJSONResponseBodyModelType$inboundSchema;
  /** @deprecated use `GetAllPromptsItemsPromptsResponse200ApplicationJSONResponseBodyModelType$outboundSchema` instead. */
  export const outboundSchema =
    GetAllPromptsItemsPromptsResponse200ApplicationJSONResponseBodyModelType$outboundSchema;
}

/** @internal */
export const GetAllPromptsItemsPromptsResponse200ApplicationJSONResponseBody3Format$inboundSchema:
  z.ZodNativeEnum<
    typeof GetAllPromptsItemsPromptsResponse200ApplicationJSONResponseBody3Format
  > = z.nativeEnum(
    GetAllPromptsItemsPromptsResponse200ApplicationJSONResponseBody3Format,
  );

/** @internal */
export const GetAllPromptsItemsPromptsResponse200ApplicationJSONResponseBody3Format$outboundSchema:
  z.ZodNativeEnum<
    typeof GetAllPromptsItemsPromptsResponse200ApplicationJSONResponseBody3Format
  > =
    GetAllPromptsItemsPromptsResponse200ApplicationJSONResponseBody3Format$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPromptsItemsPromptsResponse200ApplicationJSONResponseBody3Format$ {
  /** @deprecated use `GetAllPromptsItemsPromptsResponse200ApplicationJSONResponseBody3Format$inboundSchema` instead. */
  export const inboundSchema =
    GetAllPromptsItemsPromptsResponse200ApplicationJSONResponseBody3Format$inboundSchema;
  /** @deprecated use `GetAllPromptsItemsPromptsResponse200ApplicationJSONResponseBody3Format$outboundSchema` instead. */
  export const outboundSchema =
    GetAllPromptsItemsPromptsResponse200ApplicationJSONResponseBody3Format$outboundSchema;
}

/** @internal */
export const GetAllPromptsItemsPromptsResponse200ApplicationJSONResponseBodyQuality$inboundSchema:
  z.ZodNativeEnum<
    typeof GetAllPromptsItemsPromptsResponse200ApplicationJSONResponseBodyQuality
  > = z.nativeEnum(
    GetAllPromptsItemsPromptsResponse200ApplicationJSONResponseBodyQuality,
  );

/** @internal */
export const GetAllPromptsItemsPromptsResponse200ApplicationJSONResponseBodyQuality$outboundSchema:
  z.ZodNativeEnum<
    typeof GetAllPromptsItemsPromptsResponse200ApplicationJSONResponseBodyQuality
  > =
    GetAllPromptsItemsPromptsResponse200ApplicationJSONResponseBodyQuality$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPromptsItemsPromptsResponse200ApplicationJSONResponseBodyQuality$ {
  /** @deprecated use `GetAllPromptsItemsPromptsResponse200ApplicationJSONResponseBodyQuality$inboundSchema` instead. */
  export const inboundSchema =
    GetAllPromptsItemsPromptsResponse200ApplicationJSONResponseBodyQuality$inboundSchema;
  /** @deprecated use `GetAllPromptsItemsPromptsResponse200ApplicationJSONResponseBodyQuality$outboundSchema` instead. */
  export const outboundSchema =
    GetAllPromptsItemsPromptsResponse200ApplicationJSONResponseBodyQuality$outboundSchema;
}

/** @internal */
export const GetAllPromptsResponseFormatPromptsResponse200ApplicationJSONResponseBodyItems3VersionsType$inboundSchema:
  z.ZodNativeEnum<
    typeof GetAllPromptsResponseFormatPromptsResponse200ApplicationJSONResponseBodyItems3VersionsType
  > = z.nativeEnum(
    GetAllPromptsResponseFormatPromptsResponse200ApplicationJSONResponseBodyItems3VersionsType,
  );

/** @internal */
export const GetAllPromptsResponseFormatPromptsResponse200ApplicationJSONResponseBodyItems3VersionsType$outboundSchema:
  z.ZodNativeEnum<
    typeof GetAllPromptsResponseFormatPromptsResponse200ApplicationJSONResponseBodyItems3VersionsType
  > =
    GetAllPromptsResponseFormatPromptsResponse200ApplicationJSONResponseBodyItems3VersionsType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPromptsResponseFormatPromptsResponse200ApplicationJSONResponseBodyItems3VersionsType$ {
  /** @deprecated use `GetAllPromptsResponseFormatPromptsResponse200ApplicationJSONResponseBodyItems3VersionsType$inboundSchema` instead. */
  export const inboundSchema =
    GetAllPromptsResponseFormatPromptsResponse200ApplicationJSONResponseBodyItems3VersionsType$inboundSchema;
  /** @deprecated use `GetAllPromptsResponseFormatPromptsResponse200ApplicationJSONResponseBodyItems3VersionsType$outboundSchema` instead. */
  export const outboundSchema =
    GetAllPromptsResponseFormatPromptsResponse200ApplicationJSONResponseBodyItems3VersionsType$outboundSchema;
}

/** @internal */
export const GetAllPromptsResponseFormatPromptsResponse200ApplicationJSONResponseBody2$inboundSchema:
  z.ZodType<
    GetAllPromptsResponseFormatPromptsResponse200ApplicationJSONResponseBody2,
    z.ZodTypeDef,
    unknown
  > = z.object({
    type:
      GetAllPromptsResponseFormatPromptsResponse200ApplicationJSONResponseBodyItems3VersionsType$inboundSchema,
  });

/** @internal */
export type GetAllPromptsResponseFormatPromptsResponse200ApplicationJSONResponseBody2$Outbound =
  {
    type: string;
  };

/** @internal */
export const GetAllPromptsResponseFormatPromptsResponse200ApplicationJSONResponseBody2$outboundSchema:
  z.ZodType<
    GetAllPromptsResponseFormatPromptsResponse200ApplicationJSONResponseBody2$Outbound,
    z.ZodTypeDef,
    GetAllPromptsResponseFormatPromptsResponse200ApplicationJSONResponseBody2
  > = z.object({
    type:
      GetAllPromptsResponseFormatPromptsResponse200ApplicationJSONResponseBodyItems3VersionsType$outboundSchema,
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPromptsResponseFormatPromptsResponse200ApplicationJSONResponseBody2$ {
  /** @deprecated use `GetAllPromptsResponseFormatPromptsResponse200ApplicationJSONResponseBody2$inboundSchema` instead. */
  export const inboundSchema =
    GetAllPromptsResponseFormatPromptsResponse200ApplicationJSONResponseBody2$inboundSchema;
  /** @deprecated use `GetAllPromptsResponseFormatPromptsResponse200ApplicationJSONResponseBody2$outboundSchema` instead. */
  export const outboundSchema =
    GetAllPromptsResponseFormatPromptsResponse200ApplicationJSONResponseBody2$outboundSchema;
  /** @deprecated use `GetAllPromptsResponseFormatPromptsResponse200ApplicationJSONResponseBody2$Outbound` instead. */
  export type Outbound =
    GetAllPromptsResponseFormatPromptsResponse200ApplicationJSONResponseBody2$Outbound;
}

export function getAllPromptsResponseFormatPromptsResponse200ApplicationJSONResponseBody2ToJSON(
  getAllPromptsResponseFormatPromptsResponse200ApplicationJSONResponseBody2:
    GetAllPromptsResponseFormatPromptsResponse200ApplicationJSONResponseBody2,
): string {
  return JSON.stringify(
    GetAllPromptsResponseFormatPromptsResponse200ApplicationJSONResponseBody2$outboundSchema
      .parse(
        getAllPromptsResponseFormatPromptsResponse200ApplicationJSONResponseBody2,
      ),
  );
}

export function getAllPromptsResponseFormatPromptsResponse200ApplicationJSONResponseBody2FromJSON(
  jsonString: string,
): SafeParseResult<
  GetAllPromptsResponseFormatPromptsResponse200ApplicationJSONResponseBody2,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetAllPromptsResponseFormatPromptsResponse200ApplicationJSONResponseBody2$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'GetAllPromptsResponseFormatPromptsResponse200ApplicationJSONResponseBody2' from JSON`,
  );
}

/** @internal */
export const GetAllPromptsResponseFormatPromptsResponse200ApplicationJSONResponseBodyItems3Type$inboundSchema:
  z.ZodNativeEnum<
    typeof GetAllPromptsResponseFormatPromptsResponse200ApplicationJSONResponseBodyItems3Type
  > = z.nativeEnum(
    GetAllPromptsResponseFormatPromptsResponse200ApplicationJSONResponseBodyItems3Type,
  );

/** @internal */
export const GetAllPromptsResponseFormatPromptsResponse200ApplicationJSONResponseBodyItems3Type$outboundSchema:
  z.ZodNativeEnum<
    typeof GetAllPromptsResponseFormatPromptsResponse200ApplicationJSONResponseBodyItems3Type
  > =
    GetAllPromptsResponseFormatPromptsResponse200ApplicationJSONResponseBodyItems3Type$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPromptsResponseFormatPromptsResponse200ApplicationJSONResponseBodyItems3Type$ {
  /** @deprecated use `GetAllPromptsResponseFormatPromptsResponse200ApplicationJSONResponseBodyItems3Type$inboundSchema` instead. */
  export const inboundSchema =
    GetAllPromptsResponseFormatPromptsResponse200ApplicationJSONResponseBodyItems3Type$inboundSchema;
  /** @deprecated use `GetAllPromptsResponseFormatPromptsResponse200ApplicationJSONResponseBodyItems3Type$outboundSchema` instead. */
  export const outboundSchema =
    GetAllPromptsResponseFormatPromptsResponse200ApplicationJSONResponseBodyItems3Type$outboundSchema;
}

/** @internal */
export const GetAllPromptsResponseFormatPromptsResponse200ApplicationJSONResponseBodyJSONSchema$inboundSchema:
  z.ZodType<
    GetAllPromptsResponseFormatPromptsResponse200ApplicationJSONResponseBodyJSONSchema,
    z.ZodTypeDef,
    unknown
  > = z.object({
    name: z.string(),
    strict: z.boolean(),
    schema: z.record(z.any()),
  });

/** @internal */
export type GetAllPromptsResponseFormatPromptsResponse200ApplicationJSONResponseBodyJSONSchema$Outbound =
  {
    name: string;
    strict: boolean;
    schema: { [k: string]: any };
  };

/** @internal */
export const GetAllPromptsResponseFormatPromptsResponse200ApplicationJSONResponseBodyJSONSchema$outboundSchema:
  z.ZodType<
    GetAllPromptsResponseFormatPromptsResponse200ApplicationJSONResponseBodyJSONSchema$Outbound,
    z.ZodTypeDef,
    GetAllPromptsResponseFormatPromptsResponse200ApplicationJSONResponseBodyJSONSchema
  > = z.object({
    name: z.string(),
    strict: z.boolean(),
    schema: z.record(z.any()),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPromptsResponseFormatPromptsResponse200ApplicationJSONResponseBodyJSONSchema$ {
  /** @deprecated use `GetAllPromptsResponseFormatPromptsResponse200ApplicationJSONResponseBodyJSONSchema$inboundSchema` instead. */
  export const inboundSchema =
    GetAllPromptsResponseFormatPromptsResponse200ApplicationJSONResponseBodyJSONSchema$inboundSchema;
  /** @deprecated use `GetAllPromptsResponseFormatPromptsResponse200ApplicationJSONResponseBodyJSONSchema$outboundSchema` instead. */
  export const outboundSchema =
    GetAllPromptsResponseFormatPromptsResponse200ApplicationJSONResponseBodyJSONSchema$outboundSchema;
  /** @deprecated use `GetAllPromptsResponseFormatPromptsResponse200ApplicationJSONResponseBodyJSONSchema$Outbound` instead. */
  export type Outbound =
    GetAllPromptsResponseFormatPromptsResponse200ApplicationJSONResponseBodyJSONSchema$Outbound;
}

export function getAllPromptsResponseFormatPromptsResponse200ApplicationJSONResponseBodyJSONSchemaToJSON(
  getAllPromptsResponseFormatPromptsResponse200ApplicationJSONResponseBodyJSONSchema:
    GetAllPromptsResponseFormatPromptsResponse200ApplicationJSONResponseBodyJSONSchema,
): string {
  return JSON.stringify(
    GetAllPromptsResponseFormatPromptsResponse200ApplicationJSONResponseBodyJSONSchema$outboundSchema
      .parse(
        getAllPromptsResponseFormatPromptsResponse200ApplicationJSONResponseBodyJSONSchema,
      ),
  );
}

export function getAllPromptsResponseFormatPromptsResponse200ApplicationJSONResponseBodyJSONSchemaFromJSON(
  jsonString: string,
): SafeParseResult<
  GetAllPromptsResponseFormatPromptsResponse200ApplicationJSONResponseBodyJSONSchema,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetAllPromptsResponseFormatPromptsResponse200ApplicationJSONResponseBodyJSONSchema$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'GetAllPromptsResponseFormatPromptsResponse200ApplicationJSONResponseBodyJSONSchema' from JSON`,
  );
}

/** @internal */
export const GetAllPromptsResponseFormatPromptsResponse200ApplicationJSONResponseBody1$inboundSchema:
  z.ZodType<
    GetAllPromptsResponseFormatPromptsResponse200ApplicationJSONResponseBody1,
    z.ZodTypeDef,
    unknown
  > = z.object({
    type:
      GetAllPromptsResponseFormatPromptsResponse200ApplicationJSONResponseBodyItems3Type$inboundSchema,
    json_schema: z.lazy(() =>
      GetAllPromptsResponseFormatPromptsResponse200ApplicationJSONResponseBodyJSONSchema$inboundSchema
    ),
  }).transform((v) => {
    return remap$(v, {
      "json_schema": "jsonSchema",
    });
  });

/** @internal */
export type GetAllPromptsResponseFormatPromptsResponse200ApplicationJSONResponseBody1$Outbound =
  {
    type: string;
    json_schema:
      GetAllPromptsResponseFormatPromptsResponse200ApplicationJSONResponseBodyJSONSchema$Outbound;
  };

/** @internal */
export const GetAllPromptsResponseFormatPromptsResponse200ApplicationJSONResponseBody1$outboundSchema:
  z.ZodType<
    GetAllPromptsResponseFormatPromptsResponse200ApplicationJSONResponseBody1$Outbound,
    z.ZodTypeDef,
    GetAllPromptsResponseFormatPromptsResponse200ApplicationJSONResponseBody1
  > = z.object({
    type:
      GetAllPromptsResponseFormatPromptsResponse200ApplicationJSONResponseBodyItems3Type$outboundSchema,
    jsonSchema: z.lazy(() =>
      GetAllPromptsResponseFormatPromptsResponse200ApplicationJSONResponseBodyJSONSchema$outboundSchema
    ),
  }).transform((v) => {
    return remap$(v, {
      jsonSchema: "json_schema",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPromptsResponseFormatPromptsResponse200ApplicationJSONResponseBody1$ {
  /** @deprecated use `GetAllPromptsResponseFormatPromptsResponse200ApplicationJSONResponseBody1$inboundSchema` instead. */
  export const inboundSchema =
    GetAllPromptsResponseFormatPromptsResponse200ApplicationJSONResponseBody1$inboundSchema;
  /** @deprecated use `GetAllPromptsResponseFormatPromptsResponse200ApplicationJSONResponseBody1$outboundSchema` instead. */
  export const outboundSchema =
    GetAllPromptsResponseFormatPromptsResponse200ApplicationJSONResponseBody1$outboundSchema;
  /** @deprecated use `GetAllPromptsResponseFormatPromptsResponse200ApplicationJSONResponseBody1$Outbound` instead. */
  export type Outbound =
    GetAllPromptsResponseFormatPromptsResponse200ApplicationJSONResponseBody1$Outbound;
}

export function getAllPromptsResponseFormatPromptsResponse200ApplicationJSONResponseBody1ToJSON(
  getAllPromptsResponseFormatPromptsResponse200ApplicationJSONResponseBody1:
    GetAllPromptsResponseFormatPromptsResponse200ApplicationJSONResponseBody1,
): string {
  return JSON.stringify(
    GetAllPromptsResponseFormatPromptsResponse200ApplicationJSONResponseBody1$outboundSchema
      .parse(
        getAllPromptsResponseFormatPromptsResponse200ApplicationJSONResponseBody1,
      ),
  );
}

export function getAllPromptsResponseFormatPromptsResponse200ApplicationJSONResponseBody1FromJSON(
  jsonString: string,
): SafeParseResult<
  GetAllPromptsResponseFormatPromptsResponse200ApplicationJSONResponseBody1,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetAllPromptsResponseFormatPromptsResponse200ApplicationJSONResponseBody1$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'GetAllPromptsResponseFormatPromptsResponse200ApplicationJSONResponseBody1' from JSON`,
  );
}

/** @internal */
export const GetAllPromptsItemsPromptsResponse200ApplicationJSONResponseBodyResponseFormat$inboundSchema:
  z.ZodType<
    GetAllPromptsItemsPromptsResponse200ApplicationJSONResponseBodyResponseFormat,
    z.ZodTypeDef,
    unknown
  > = z.union([
    z.lazy(() =>
      GetAllPromptsResponseFormatPromptsResponse200ApplicationJSONResponseBody2$inboundSchema
    ),
    z.lazy(() =>
      GetAllPromptsResponseFormatPromptsResponse200ApplicationJSONResponseBody1$inboundSchema
    ),
  ]);

/** @internal */
export type GetAllPromptsItemsPromptsResponse200ApplicationJSONResponseBodyResponseFormat$Outbound =
  | GetAllPromptsResponseFormatPromptsResponse200ApplicationJSONResponseBody2$Outbound
  | GetAllPromptsResponseFormatPromptsResponse200ApplicationJSONResponseBody1$Outbound;

/** @internal */
export const GetAllPromptsItemsPromptsResponse200ApplicationJSONResponseBodyResponseFormat$outboundSchema:
  z.ZodType<
    GetAllPromptsItemsPromptsResponse200ApplicationJSONResponseBodyResponseFormat$Outbound,
    z.ZodTypeDef,
    GetAllPromptsItemsPromptsResponse200ApplicationJSONResponseBodyResponseFormat
  > = z.union([
    z.lazy(() =>
      GetAllPromptsResponseFormatPromptsResponse200ApplicationJSONResponseBody2$outboundSchema
    ),
    z.lazy(() =>
      GetAllPromptsResponseFormatPromptsResponse200ApplicationJSONResponseBody1$outboundSchema
    ),
  ]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPromptsItemsPromptsResponse200ApplicationJSONResponseBodyResponseFormat$ {
  /** @deprecated use `GetAllPromptsItemsPromptsResponse200ApplicationJSONResponseBodyResponseFormat$inboundSchema` instead. */
  export const inboundSchema =
    GetAllPromptsItemsPromptsResponse200ApplicationJSONResponseBodyResponseFormat$inboundSchema;
  /** @deprecated use `GetAllPromptsItemsPromptsResponse200ApplicationJSONResponseBodyResponseFormat$outboundSchema` instead. */
  export const outboundSchema =
    GetAllPromptsItemsPromptsResponse200ApplicationJSONResponseBodyResponseFormat$outboundSchema;
  /** @deprecated use `GetAllPromptsItemsPromptsResponse200ApplicationJSONResponseBodyResponseFormat$Outbound` instead. */
  export type Outbound =
    GetAllPromptsItemsPromptsResponse200ApplicationJSONResponseBodyResponseFormat$Outbound;
}

export function getAllPromptsItemsPromptsResponse200ApplicationJSONResponseBodyResponseFormatToJSON(
  getAllPromptsItemsPromptsResponse200ApplicationJSONResponseBodyResponseFormat:
    GetAllPromptsItemsPromptsResponse200ApplicationJSONResponseBodyResponseFormat,
): string {
  return JSON.stringify(
    GetAllPromptsItemsPromptsResponse200ApplicationJSONResponseBodyResponseFormat$outboundSchema
      .parse(
        getAllPromptsItemsPromptsResponse200ApplicationJSONResponseBodyResponseFormat,
      ),
  );
}

export function getAllPromptsItemsPromptsResponse200ApplicationJSONResponseBodyResponseFormatFromJSON(
  jsonString: string,
): SafeParseResult<
  GetAllPromptsItemsPromptsResponse200ApplicationJSONResponseBodyResponseFormat,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetAllPromptsItemsPromptsResponse200ApplicationJSONResponseBodyResponseFormat$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'GetAllPromptsItemsPromptsResponse200ApplicationJSONResponseBodyResponseFormat' from JSON`,
  );
}

/** @internal */
export const GetAllPromptsItemsPromptsResponse200ApplicationJSONResponseBodyPhotoRealVersion$inboundSchema:
  z.ZodNativeEnum<
    typeof GetAllPromptsItemsPromptsResponse200ApplicationJSONResponseBodyPhotoRealVersion
  > = z.nativeEnum(
    GetAllPromptsItemsPromptsResponse200ApplicationJSONResponseBodyPhotoRealVersion,
  );

/** @internal */
export const GetAllPromptsItemsPromptsResponse200ApplicationJSONResponseBodyPhotoRealVersion$outboundSchema:
  z.ZodNativeEnum<
    typeof GetAllPromptsItemsPromptsResponse200ApplicationJSONResponseBodyPhotoRealVersion
  > =
    GetAllPromptsItemsPromptsResponse200ApplicationJSONResponseBodyPhotoRealVersion$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPromptsItemsPromptsResponse200ApplicationJSONResponseBodyPhotoRealVersion$ {
  /** @deprecated use `GetAllPromptsItemsPromptsResponse200ApplicationJSONResponseBodyPhotoRealVersion$inboundSchema` instead. */
  export const inboundSchema =
    GetAllPromptsItemsPromptsResponse200ApplicationJSONResponseBodyPhotoRealVersion$inboundSchema;
  /** @deprecated use `GetAllPromptsItemsPromptsResponse200ApplicationJSONResponseBodyPhotoRealVersion$outboundSchema` instead. */
  export const outboundSchema =
    GetAllPromptsItemsPromptsResponse200ApplicationJSONResponseBodyPhotoRealVersion$outboundSchema;
}

/** @internal */
export const GetAllPromptsItemsPromptsResponse200ApplicationJSONResponseBodyEncodingFormat$inboundSchema:
  z.ZodNativeEnum<
    typeof GetAllPromptsItemsPromptsResponse200ApplicationJSONResponseBodyEncodingFormat
  > = z.nativeEnum(
    GetAllPromptsItemsPromptsResponse200ApplicationJSONResponseBodyEncodingFormat,
  );

/** @internal */
export const GetAllPromptsItemsPromptsResponse200ApplicationJSONResponseBodyEncodingFormat$outboundSchema:
  z.ZodNativeEnum<
    typeof GetAllPromptsItemsPromptsResponse200ApplicationJSONResponseBodyEncodingFormat
  > =
    GetAllPromptsItemsPromptsResponse200ApplicationJSONResponseBodyEncodingFormat$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPromptsItemsPromptsResponse200ApplicationJSONResponseBodyEncodingFormat$ {
  /** @deprecated use `GetAllPromptsItemsPromptsResponse200ApplicationJSONResponseBodyEncodingFormat$inboundSchema` instead. */
  export const inboundSchema =
    GetAllPromptsItemsPromptsResponse200ApplicationJSONResponseBodyEncodingFormat$inboundSchema;
  /** @deprecated use `GetAllPromptsItemsPromptsResponse200ApplicationJSONResponseBodyEncodingFormat$outboundSchema` instead. */
  export const outboundSchema =
    GetAllPromptsItemsPromptsResponse200ApplicationJSONResponseBodyEncodingFormat$outboundSchema;
}

/** @internal */
export const GetAllPromptsItemsPromptsResponse200ApplicationJSONResponseBodyModelParameters$inboundSchema:
  z.ZodType<
    GetAllPromptsItemsPromptsResponse200ApplicationJSONResponseBodyModelParameters,
    z.ZodTypeDef,
    unknown
  > = z.object({
    temperature: z.number().optional(),
    maxTokens: z.number().optional(),
    topK: z.number().optional(),
    topP: z.number().optional(),
    frequencyPenalty: z.number().optional(),
    presencePenalty: z.number().optional(),
    numImages: z.number().optional(),
    seed: z.number().optional(),
    format:
      GetAllPromptsItemsPromptsResponse200ApplicationJSONResponseBody3Format$inboundSchema
        .optional(),
    dimensions: z.string().optional(),
    quality:
      GetAllPromptsItemsPromptsResponse200ApplicationJSONResponseBodyQuality$inboundSchema
        .optional(),
    style: z.string().optional(),
    responseFormat: z.nullable(
      z.union([
        z.lazy(() =>
          GetAllPromptsResponseFormatPromptsResponse200ApplicationJSONResponseBody2$inboundSchema
        ),
        z.lazy(() =>
          GetAllPromptsResponseFormatPromptsResponse200ApplicationJSONResponseBody1$inboundSchema
        ),
      ]),
    ).optional(),
    photoRealVersion:
      GetAllPromptsItemsPromptsResponse200ApplicationJSONResponseBodyPhotoRealVersion$inboundSchema
        .optional(),
    encoding_format:
      GetAllPromptsItemsPromptsResponse200ApplicationJSONResponseBodyEncodingFormat$inboundSchema
        .optional(),
  }).transform((v) => {
    return remap$(v, {
      "encoding_format": "encodingFormat",
    });
  });

/** @internal */
export type GetAllPromptsItemsPromptsResponse200ApplicationJSONResponseBodyModelParameters$Outbound =
  {
    temperature?: number | undefined;
    maxTokens?: number | undefined;
    topK?: number | undefined;
    topP?: number | undefined;
    frequencyPenalty?: number | undefined;
    presencePenalty?: number | undefined;
    numImages?: number | undefined;
    seed?: number | undefined;
    format?: string | undefined;
    dimensions?: string | undefined;
    quality?: string | undefined;
    style?: string | undefined;
    responseFormat?:
      | GetAllPromptsResponseFormatPromptsResponse200ApplicationJSONResponseBody2$Outbound
      | GetAllPromptsResponseFormatPromptsResponse200ApplicationJSONResponseBody1$Outbound
      | null
      | undefined;
    photoRealVersion?: string | undefined;
    encoding_format?: string | undefined;
  };

/** @internal */
export const GetAllPromptsItemsPromptsResponse200ApplicationJSONResponseBodyModelParameters$outboundSchema:
  z.ZodType<
    GetAllPromptsItemsPromptsResponse200ApplicationJSONResponseBodyModelParameters$Outbound,
    z.ZodTypeDef,
    GetAllPromptsItemsPromptsResponse200ApplicationJSONResponseBodyModelParameters
  > = z.object({
    temperature: z.number().optional(),
    maxTokens: z.number().optional(),
    topK: z.number().optional(),
    topP: z.number().optional(),
    frequencyPenalty: z.number().optional(),
    presencePenalty: z.number().optional(),
    numImages: z.number().optional(),
    seed: z.number().optional(),
    format:
      GetAllPromptsItemsPromptsResponse200ApplicationJSONResponseBody3Format$outboundSchema
        .optional(),
    dimensions: z.string().optional(),
    quality:
      GetAllPromptsItemsPromptsResponse200ApplicationJSONResponseBodyQuality$outboundSchema
        .optional(),
    style: z.string().optional(),
    responseFormat: z.nullable(
      z.union([
        z.lazy(() =>
          GetAllPromptsResponseFormatPromptsResponse200ApplicationJSONResponseBody2$outboundSchema
        ),
        z.lazy(() =>
          GetAllPromptsResponseFormatPromptsResponse200ApplicationJSONResponseBody1$outboundSchema
        ),
      ]),
    ).optional(),
    photoRealVersion:
      GetAllPromptsItemsPromptsResponse200ApplicationJSONResponseBodyPhotoRealVersion$outboundSchema
        .optional(),
    encodingFormat:
      GetAllPromptsItemsPromptsResponse200ApplicationJSONResponseBodyEncodingFormat$outboundSchema
        .optional(),
  }).transform((v) => {
    return remap$(v, {
      encodingFormat: "encoding_format",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPromptsItemsPromptsResponse200ApplicationJSONResponseBodyModelParameters$ {
  /** @deprecated use `GetAllPromptsItemsPromptsResponse200ApplicationJSONResponseBodyModelParameters$inboundSchema` instead. */
  export const inboundSchema =
    GetAllPromptsItemsPromptsResponse200ApplicationJSONResponseBodyModelParameters$inboundSchema;
  /** @deprecated use `GetAllPromptsItemsPromptsResponse200ApplicationJSONResponseBodyModelParameters$outboundSchema` instead. */
  export const outboundSchema =
    GetAllPromptsItemsPromptsResponse200ApplicationJSONResponseBodyModelParameters$outboundSchema;
  /** @deprecated use `GetAllPromptsItemsPromptsResponse200ApplicationJSONResponseBodyModelParameters$Outbound` instead. */
  export type Outbound =
    GetAllPromptsItemsPromptsResponse200ApplicationJSONResponseBodyModelParameters$Outbound;
}

export function getAllPromptsItemsPromptsResponse200ApplicationJSONResponseBodyModelParametersToJSON(
  getAllPromptsItemsPromptsResponse200ApplicationJSONResponseBodyModelParameters:
    GetAllPromptsItemsPromptsResponse200ApplicationJSONResponseBodyModelParameters,
): string {
  return JSON.stringify(
    GetAllPromptsItemsPromptsResponse200ApplicationJSONResponseBodyModelParameters$outboundSchema
      .parse(
        getAllPromptsItemsPromptsResponse200ApplicationJSONResponseBodyModelParameters,
      ),
  );
}

export function getAllPromptsItemsPromptsResponse200ApplicationJSONResponseBodyModelParametersFromJSON(
  jsonString: string,
): SafeParseResult<
  GetAllPromptsItemsPromptsResponse200ApplicationJSONResponseBodyModelParameters,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetAllPromptsItemsPromptsResponse200ApplicationJSONResponseBodyModelParameters$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'GetAllPromptsItemsPromptsResponse200ApplicationJSONResponseBodyModelParameters' from JSON`,
  );
}

/** @internal */
export const GetAllPromptsItemsPromptsResponse200ApplicationJSONResponseBodyProvider$inboundSchema:
  z.ZodNativeEnum<
    typeof GetAllPromptsItemsPromptsResponse200ApplicationJSONResponseBodyProvider
  > = z.nativeEnum(
    GetAllPromptsItemsPromptsResponse200ApplicationJSONResponseBodyProvider,
  );

/** @internal */
export const GetAllPromptsItemsPromptsResponse200ApplicationJSONResponseBodyProvider$outboundSchema:
  z.ZodNativeEnum<
    typeof GetAllPromptsItemsPromptsResponse200ApplicationJSONResponseBodyProvider
  > =
    GetAllPromptsItemsPromptsResponse200ApplicationJSONResponseBodyProvider$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPromptsItemsPromptsResponse200ApplicationJSONResponseBodyProvider$ {
  /** @deprecated use `GetAllPromptsItemsPromptsResponse200ApplicationJSONResponseBodyProvider$inboundSchema` instead. */
  export const inboundSchema =
    GetAllPromptsItemsPromptsResponse200ApplicationJSONResponseBodyProvider$inboundSchema;
  /** @deprecated use `GetAllPromptsItemsPromptsResponse200ApplicationJSONResponseBodyProvider$outboundSchema` instead. */
  export const outboundSchema =
    GetAllPromptsItemsPromptsResponse200ApplicationJSONResponseBodyProvider$outboundSchema;
}

/** @internal */
export const GetAllPromptsItemsPromptsResponse200ApplicationJSONResponseBodyRole$inboundSchema:
  z.ZodNativeEnum<
    typeof GetAllPromptsItemsPromptsResponse200ApplicationJSONResponseBodyRole
  > = z.nativeEnum(
    GetAllPromptsItemsPromptsResponse200ApplicationJSONResponseBodyRole,
  );

/** @internal */
export const GetAllPromptsItemsPromptsResponse200ApplicationJSONResponseBodyRole$outboundSchema:
  z.ZodNativeEnum<
    typeof GetAllPromptsItemsPromptsResponse200ApplicationJSONResponseBodyRole
  > =
    GetAllPromptsItemsPromptsResponse200ApplicationJSONResponseBodyRole$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPromptsItemsPromptsResponse200ApplicationJSONResponseBodyRole$ {
  /** @deprecated use `GetAllPromptsItemsPromptsResponse200ApplicationJSONResponseBodyRole$inboundSchema` instead. */
  export const inboundSchema =
    GetAllPromptsItemsPromptsResponse200ApplicationJSONResponseBodyRole$inboundSchema;
  /** @deprecated use `GetAllPromptsItemsPromptsResponse200ApplicationJSONResponseBodyRole$outboundSchema` instead. */
  export const outboundSchema =
    GetAllPromptsItemsPromptsResponse200ApplicationJSONResponseBodyRole$outboundSchema;
}

/** @internal */
export const GetAllPrompts2PromptsResponse200ApplicationJSONResponseBodyItems3VersionsType$inboundSchema:
  z.ZodNativeEnum<
    typeof GetAllPrompts2PromptsResponse200ApplicationJSONResponseBodyItems3VersionsType
  > = z.nativeEnum(
    GetAllPrompts2PromptsResponse200ApplicationJSONResponseBodyItems3VersionsType,
  );

/** @internal */
export const GetAllPrompts2PromptsResponse200ApplicationJSONResponseBodyItems3VersionsType$outboundSchema:
  z.ZodNativeEnum<
    typeof GetAllPrompts2PromptsResponse200ApplicationJSONResponseBodyItems3VersionsType
  > =
    GetAllPrompts2PromptsResponse200ApplicationJSONResponseBodyItems3VersionsType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPrompts2PromptsResponse200ApplicationJSONResponseBodyItems3VersionsType$ {
  /** @deprecated use `GetAllPrompts2PromptsResponse200ApplicationJSONResponseBodyItems3VersionsType$inboundSchema` instead. */
  export const inboundSchema =
    GetAllPrompts2PromptsResponse200ApplicationJSONResponseBodyItems3VersionsType$inboundSchema;
  /** @deprecated use `GetAllPrompts2PromptsResponse200ApplicationJSONResponseBodyItems3VersionsType$outboundSchema` instead. */
  export const outboundSchema =
    GetAllPrompts2PromptsResponse200ApplicationJSONResponseBodyItems3VersionsType$outboundSchema;
}

/** @internal */
export const GetAllPrompts2PromptsResponse200ApplicationJSONResponseBodyImageUrl$inboundSchema:
  z.ZodType<
    GetAllPrompts2PromptsResponse200ApplicationJSONResponseBodyImageUrl,
    z.ZodTypeDef,
    unknown
  > = z.object({
    id: z.string().optional(),
    url: z.string(),
    detail: z.string().optional(),
  });

/** @internal */
export type GetAllPrompts2PromptsResponse200ApplicationJSONResponseBodyImageUrl$Outbound =
  {
    id?: string | undefined;
    url: string;
    detail?: string | undefined;
  };

/** @internal */
export const GetAllPrompts2PromptsResponse200ApplicationJSONResponseBodyImageUrl$outboundSchema:
  z.ZodType<
    GetAllPrompts2PromptsResponse200ApplicationJSONResponseBodyImageUrl$Outbound,
    z.ZodTypeDef,
    GetAllPrompts2PromptsResponse200ApplicationJSONResponseBodyImageUrl
  > = z.object({
    id: z.string().optional(),
    url: z.string(),
    detail: z.string().optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPrompts2PromptsResponse200ApplicationJSONResponseBodyImageUrl$ {
  /** @deprecated use `GetAllPrompts2PromptsResponse200ApplicationJSONResponseBodyImageUrl$inboundSchema` instead. */
  export const inboundSchema =
    GetAllPrompts2PromptsResponse200ApplicationJSONResponseBodyImageUrl$inboundSchema;
  /** @deprecated use `GetAllPrompts2PromptsResponse200ApplicationJSONResponseBodyImageUrl$outboundSchema` instead. */
  export const outboundSchema =
    GetAllPrompts2PromptsResponse200ApplicationJSONResponseBodyImageUrl$outboundSchema;
  /** @deprecated use `GetAllPrompts2PromptsResponse200ApplicationJSONResponseBodyImageUrl$Outbound` instead. */
  export type Outbound =
    GetAllPrompts2PromptsResponse200ApplicationJSONResponseBodyImageUrl$Outbound;
}

export function getAllPrompts2PromptsResponse200ApplicationJSONResponseBodyImageUrlToJSON(
  getAllPrompts2PromptsResponse200ApplicationJSONResponseBodyImageUrl:
    GetAllPrompts2PromptsResponse200ApplicationJSONResponseBodyImageUrl,
): string {
  return JSON.stringify(
    GetAllPrompts2PromptsResponse200ApplicationJSONResponseBodyImageUrl$outboundSchema
      .parse(
        getAllPrompts2PromptsResponse200ApplicationJSONResponseBodyImageUrl,
      ),
  );
}

export function getAllPrompts2PromptsResponse200ApplicationJSONResponseBodyImageUrlFromJSON(
  jsonString: string,
): SafeParseResult<
  GetAllPrompts2PromptsResponse200ApplicationJSONResponseBodyImageUrl,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetAllPrompts2PromptsResponse200ApplicationJSONResponseBodyImageUrl$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'GetAllPrompts2PromptsResponse200ApplicationJSONResponseBodyImageUrl' from JSON`,
  );
}

/** @internal */
export const GetAllPrompts2PromptsResponse200ApplicationJSONResponseBody2$inboundSchema:
  z.ZodType<
    GetAllPrompts2PromptsResponse200ApplicationJSONResponseBody2,
    z.ZodTypeDef,
    unknown
  > = z.object({
    type:
      GetAllPrompts2PromptsResponse200ApplicationJSONResponseBodyItems3VersionsType$inboundSchema,
    image_url: z.lazy(() =>
      GetAllPrompts2PromptsResponse200ApplicationJSONResponseBodyImageUrl$inboundSchema
    ),
  }).transform((v) => {
    return remap$(v, {
      "image_url": "imageUrl",
    });
  });

/** @internal */
export type GetAllPrompts2PromptsResponse200ApplicationJSONResponseBody2$Outbound =
  {
    type: string;
    image_url:
      GetAllPrompts2PromptsResponse200ApplicationJSONResponseBodyImageUrl$Outbound;
  };

/** @internal */
export const GetAllPrompts2PromptsResponse200ApplicationJSONResponseBody2$outboundSchema:
  z.ZodType<
    GetAllPrompts2PromptsResponse200ApplicationJSONResponseBody2$Outbound,
    z.ZodTypeDef,
    GetAllPrompts2PromptsResponse200ApplicationJSONResponseBody2
  > = z.object({
    type:
      GetAllPrompts2PromptsResponse200ApplicationJSONResponseBodyItems3VersionsType$outboundSchema,
    imageUrl: z.lazy(() =>
      GetAllPrompts2PromptsResponse200ApplicationJSONResponseBodyImageUrl$outboundSchema
    ),
  }).transform((v) => {
    return remap$(v, {
      imageUrl: "image_url",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPrompts2PromptsResponse200ApplicationJSONResponseBody2$ {
  /** @deprecated use `GetAllPrompts2PromptsResponse200ApplicationJSONResponseBody2$inboundSchema` instead. */
  export const inboundSchema =
    GetAllPrompts2PromptsResponse200ApplicationJSONResponseBody2$inboundSchema;
  /** @deprecated use `GetAllPrompts2PromptsResponse200ApplicationJSONResponseBody2$outboundSchema` instead. */
  export const outboundSchema =
    GetAllPrompts2PromptsResponse200ApplicationJSONResponseBody2$outboundSchema;
  /** @deprecated use `GetAllPrompts2PromptsResponse200ApplicationJSONResponseBody2$Outbound` instead. */
  export type Outbound =
    GetAllPrompts2PromptsResponse200ApplicationJSONResponseBody2$Outbound;
}

export function getAllPrompts2PromptsResponse200ApplicationJSONResponseBody2ToJSON(
  getAllPrompts2PromptsResponse200ApplicationJSONResponseBody2:
    GetAllPrompts2PromptsResponse200ApplicationJSONResponseBody2,
): string {
  return JSON.stringify(
    GetAllPrompts2PromptsResponse200ApplicationJSONResponseBody2$outboundSchema
      .parse(getAllPrompts2PromptsResponse200ApplicationJSONResponseBody2),
  );
}

export function getAllPrompts2PromptsResponse200ApplicationJSONResponseBody2FromJSON(
  jsonString: string,
): SafeParseResult<
  GetAllPrompts2PromptsResponse200ApplicationJSONResponseBody2,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetAllPrompts2PromptsResponse200ApplicationJSONResponseBody2$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'GetAllPrompts2PromptsResponse200ApplicationJSONResponseBody2' from JSON`,
  );
}

/** @internal */
export const GetAllPrompts2PromptsResponse200ApplicationJSONResponseBodyItems3Type$inboundSchema:
  z.ZodNativeEnum<
    typeof GetAllPrompts2PromptsResponse200ApplicationJSONResponseBodyItems3Type
  > = z.nativeEnum(
    GetAllPrompts2PromptsResponse200ApplicationJSONResponseBodyItems3Type,
  );

/** @internal */
export const GetAllPrompts2PromptsResponse200ApplicationJSONResponseBodyItems3Type$outboundSchema:
  z.ZodNativeEnum<
    typeof GetAllPrompts2PromptsResponse200ApplicationJSONResponseBodyItems3Type
  > =
    GetAllPrompts2PromptsResponse200ApplicationJSONResponseBodyItems3Type$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPrompts2PromptsResponse200ApplicationJSONResponseBodyItems3Type$ {
  /** @deprecated use `GetAllPrompts2PromptsResponse200ApplicationJSONResponseBodyItems3Type$inboundSchema` instead. */
  export const inboundSchema =
    GetAllPrompts2PromptsResponse200ApplicationJSONResponseBodyItems3Type$inboundSchema;
  /** @deprecated use `GetAllPrompts2PromptsResponse200ApplicationJSONResponseBodyItems3Type$outboundSchema` instead. */
  export const outboundSchema =
    GetAllPrompts2PromptsResponse200ApplicationJSONResponseBodyItems3Type$outboundSchema;
}

/** @internal */
export const GetAllPrompts2PromptsResponse200ApplicationJSONResponseBody1$inboundSchema:
  z.ZodType<
    GetAllPrompts2PromptsResponse200ApplicationJSONResponseBody1,
    z.ZodTypeDef,
    unknown
  > = z.object({
    type:
      GetAllPrompts2PromptsResponse200ApplicationJSONResponseBodyItems3Type$inboundSchema,
    text: z.string(),
  });

/** @internal */
export type GetAllPrompts2PromptsResponse200ApplicationJSONResponseBody1$Outbound =
  {
    type: string;
    text: string;
  };

/** @internal */
export const GetAllPrompts2PromptsResponse200ApplicationJSONResponseBody1$outboundSchema:
  z.ZodType<
    GetAllPrompts2PromptsResponse200ApplicationJSONResponseBody1$Outbound,
    z.ZodTypeDef,
    GetAllPrompts2PromptsResponse200ApplicationJSONResponseBody1
  > = z.object({
    type:
      GetAllPrompts2PromptsResponse200ApplicationJSONResponseBodyItems3Type$outboundSchema,
    text: z.string(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPrompts2PromptsResponse200ApplicationJSONResponseBody1$ {
  /** @deprecated use `GetAllPrompts2PromptsResponse200ApplicationJSONResponseBody1$inboundSchema` instead. */
  export const inboundSchema =
    GetAllPrompts2PromptsResponse200ApplicationJSONResponseBody1$inboundSchema;
  /** @deprecated use `GetAllPrompts2PromptsResponse200ApplicationJSONResponseBody1$outboundSchema` instead. */
  export const outboundSchema =
    GetAllPrompts2PromptsResponse200ApplicationJSONResponseBody1$outboundSchema;
  /** @deprecated use `GetAllPrompts2PromptsResponse200ApplicationJSONResponseBody1$Outbound` instead. */
  export type Outbound =
    GetAllPrompts2PromptsResponse200ApplicationJSONResponseBody1$Outbound;
}

export function getAllPrompts2PromptsResponse200ApplicationJSONResponseBody1ToJSON(
  getAllPrompts2PromptsResponse200ApplicationJSONResponseBody1:
    GetAllPrompts2PromptsResponse200ApplicationJSONResponseBody1,
): string {
  return JSON.stringify(
    GetAllPrompts2PromptsResponse200ApplicationJSONResponseBody1$outboundSchema
      .parse(getAllPrompts2PromptsResponse200ApplicationJSONResponseBody1),
  );
}

export function getAllPrompts2PromptsResponse200ApplicationJSONResponseBody1FromJSON(
  jsonString: string,
): SafeParseResult<
  GetAllPrompts2PromptsResponse200ApplicationJSONResponseBody1,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetAllPrompts2PromptsResponse200ApplicationJSONResponseBody1$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'GetAllPrompts2PromptsResponse200ApplicationJSONResponseBody1' from JSON`,
  );
}

/** @internal */
export const GetAllPromptsContentPromptsResponse200ApplicationJSONResponseBody2$inboundSchema:
  z.ZodType<
    GetAllPromptsContentPromptsResponse200ApplicationJSONResponseBody2,
    z.ZodTypeDef,
    unknown
  > = z.union([
    z.lazy(() =>
      GetAllPrompts2PromptsResponse200ApplicationJSONResponseBody1$inboundSchema
    ),
    z.lazy(() =>
      GetAllPrompts2PromptsResponse200ApplicationJSONResponseBody2$inboundSchema
    ),
  ]);

/** @internal */
export type GetAllPromptsContentPromptsResponse200ApplicationJSONResponseBody2$Outbound =
  | GetAllPrompts2PromptsResponse200ApplicationJSONResponseBody1$Outbound
  | GetAllPrompts2PromptsResponse200ApplicationJSONResponseBody2$Outbound;

/** @internal */
export const GetAllPromptsContentPromptsResponse200ApplicationJSONResponseBody2$outboundSchema:
  z.ZodType<
    GetAllPromptsContentPromptsResponse200ApplicationJSONResponseBody2$Outbound,
    z.ZodTypeDef,
    GetAllPromptsContentPromptsResponse200ApplicationJSONResponseBody2
  > = z.union([
    z.lazy(() =>
      GetAllPrompts2PromptsResponse200ApplicationJSONResponseBody1$outboundSchema
    ),
    z.lazy(() =>
      GetAllPrompts2PromptsResponse200ApplicationJSONResponseBody2$outboundSchema
    ),
  ]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPromptsContentPromptsResponse200ApplicationJSONResponseBody2$ {
  /** @deprecated use `GetAllPromptsContentPromptsResponse200ApplicationJSONResponseBody2$inboundSchema` instead. */
  export const inboundSchema =
    GetAllPromptsContentPromptsResponse200ApplicationJSONResponseBody2$inboundSchema;
  /** @deprecated use `GetAllPromptsContentPromptsResponse200ApplicationJSONResponseBody2$outboundSchema` instead. */
  export const outboundSchema =
    GetAllPromptsContentPromptsResponse200ApplicationJSONResponseBody2$outboundSchema;
  /** @deprecated use `GetAllPromptsContentPromptsResponse200ApplicationJSONResponseBody2$Outbound` instead. */
  export type Outbound =
    GetAllPromptsContentPromptsResponse200ApplicationJSONResponseBody2$Outbound;
}

export function getAllPromptsContentPromptsResponse200ApplicationJSONResponseBody2ToJSON(
  getAllPromptsContentPromptsResponse200ApplicationJSONResponseBody2:
    GetAllPromptsContentPromptsResponse200ApplicationJSONResponseBody2,
): string {
  return JSON.stringify(
    GetAllPromptsContentPromptsResponse200ApplicationJSONResponseBody2$outboundSchema
      .parse(
        getAllPromptsContentPromptsResponse200ApplicationJSONResponseBody2,
      ),
  );
}

export function getAllPromptsContentPromptsResponse200ApplicationJSONResponseBody2FromJSON(
  jsonString: string,
): SafeParseResult<
  GetAllPromptsContentPromptsResponse200ApplicationJSONResponseBody2,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetAllPromptsContentPromptsResponse200ApplicationJSONResponseBody2$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'GetAllPromptsContentPromptsResponse200ApplicationJSONResponseBody2' from JSON`,
  );
}

/** @internal */
export const GetAllPromptsItemsPromptsResponse200ApplicationJSONResponseBodyContent$inboundSchema:
  z.ZodType<
    GetAllPromptsItemsPromptsResponse200ApplicationJSONResponseBodyContent,
    z.ZodTypeDef,
    unknown
  > = z.union([
    z.string(),
    z.array(z.union([
      z.lazy(() =>
        GetAllPrompts2PromptsResponse200ApplicationJSONResponseBody1$inboundSchema
      ),
      z.lazy(() =>
        GetAllPrompts2PromptsResponse200ApplicationJSONResponseBody2$inboundSchema
      ),
    ])),
  ]);

/** @internal */
export type GetAllPromptsItemsPromptsResponse200ApplicationJSONResponseBodyContent$Outbound =
  | string
  | Array<
    | GetAllPrompts2PromptsResponse200ApplicationJSONResponseBody1$Outbound
    | GetAllPrompts2PromptsResponse200ApplicationJSONResponseBody2$Outbound
  >;

/** @internal */
export const GetAllPromptsItemsPromptsResponse200ApplicationJSONResponseBodyContent$outboundSchema:
  z.ZodType<
    GetAllPromptsItemsPromptsResponse200ApplicationJSONResponseBodyContent$Outbound,
    z.ZodTypeDef,
    GetAllPromptsItemsPromptsResponse200ApplicationJSONResponseBodyContent
  > = z.union([
    z.string(),
    z.array(z.union([
      z.lazy(() =>
        GetAllPrompts2PromptsResponse200ApplicationJSONResponseBody1$outboundSchema
      ),
      z.lazy(() =>
        GetAllPrompts2PromptsResponse200ApplicationJSONResponseBody2$outboundSchema
      ),
    ])),
  ]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPromptsItemsPromptsResponse200ApplicationJSONResponseBodyContent$ {
  /** @deprecated use `GetAllPromptsItemsPromptsResponse200ApplicationJSONResponseBodyContent$inboundSchema` instead. */
  export const inboundSchema =
    GetAllPromptsItemsPromptsResponse200ApplicationJSONResponseBodyContent$inboundSchema;
  /** @deprecated use `GetAllPromptsItemsPromptsResponse200ApplicationJSONResponseBodyContent$outboundSchema` instead. */
  export const outboundSchema =
    GetAllPromptsItemsPromptsResponse200ApplicationJSONResponseBodyContent$outboundSchema;
  /** @deprecated use `GetAllPromptsItemsPromptsResponse200ApplicationJSONResponseBodyContent$Outbound` instead. */
  export type Outbound =
    GetAllPromptsItemsPromptsResponse200ApplicationJSONResponseBodyContent$Outbound;
}

export function getAllPromptsItemsPromptsResponse200ApplicationJSONResponseBodyContentToJSON(
  getAllPromptsItemsPromptsResponse200ApplicationJSONResponseBodyContent:
    GetAllPromptsItemsPromptsResponse200ApplicationJSONResponseBodyContent,
): string {
  return JSON.stringify(
    GetAllPromptsItemsPromptsResponse200ApplicationJSONResponseBodyContent$outboundSchema
      .parse(
        getAllPromptsItemsPromptsResponse200ApplicationJSONResponseBodyContent,
      ),
  );
}

export function getAllPromptsItemsPromptsResponse200ApplicationJSONResponseBodyContentFromJSON(
  jsonString: string,
): SafeParseResult<
  GetAllPromptsItemsPromptsResponse200ApplicationJSONResponseBodyContent,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetAllPromptsItemsPromptsResponse200ApplicationJSONResponseBodyContent$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'GetAllPromptsItemsPromptsResponse200ApplicationJSONResponseBodyContent' from JSON`,
  );
}

/** @internal */
export const GetAllPromptsItemsPromptsResponse200ApplicationJSONResponseBody3Type$inboundSchema:
  z.ZodNativeEnum<
    typeof GetAllPromptsItemsPromptsResponse200ApplicationJSONResponseBody3Type
  > = z.nativeEnum(
    GetAllPromptsItemsPromptsResponse200ApplicationJSONResponseBody3Type,
  );

/** @internal */
export const GetAllPromptsItemsPromptsResponse200ApplicationJSONResponseBody3Type$outboundSchema:
  z.ZodNativeEnum<
    typeof GetAllPromptsItemsPromptsResponse200ApplicationJSONResponseBody3Type
  > =
    GetAllPromptsItemsPromptsResponse200ApplicationJSONResponseBody3Type$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPromptsItemsPromptsResponse200ApplicationJSONResponseBody3Type$ {
  /** @deprecated use `GetAllPromptsItemsPromptsResponse200ApplicationJSONResponseBody3Type$inboundSchema` instead. */
  export const inboundSchema =
    GetAllPromptsItemsPromptsResponse200ApplicationJSONResponseBody3Type$inboundSchema;
  /** @deprecated use `GetAllPromptsItemsPromptsResponse200ApplicationJSONResponseBody3Type$outboundSchema` instead. */
  export const outboundSchema =
    GetAllPromptsItemsPromptsResponse200ApplicationJSONResponseBody3Type$outboundSchema;
}

/** @internal */
export const GetAllPromptsItemsPromptsResponse200ApplicationJSONResponseBodyFunction$inboundSchema:
  z.ZodType<
    GetAllPromptsItemsPromptsResponse200ApplicationJSONResponseBodyFunction,
    z.ZodTypeDef,
    unknown
  > = z.object({
    name: z.string(),
    arguments: z.string(),
  });

/** @internal */
export type GetAllPromptsItemsPromptsResponse200ApplicationJSONResponseBodyFunction$Outbound =
  {
    name: string;
    arguments: string;
  };

/** @internal */
export const GetAllPromptsItemsPromptsResponse200ApplicationJSONResponseBodyFunction$outboundSchema:
  z.ZodType<
    GetAllPromptsItemsPromptsResponse200ApplicationJSONResponseBodyFunction$Outbound,
    z.ZodTypeDef,
    GetAllPromptsItemsPromptsResponse200ApplicationJSONResponseBodyFunction
  > = z.object({
    name: z.string(),
    arguments: z.string(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPromptsItemsPromptsResponse200ApplicationJSONResponseBodyFunction$ {
  /** @deprecated use `GetAllPromptsItemsPromptsResponse200ApplicationJSONResponseBodyFunction$inboundSchema` instead. */
  export const inboundSchema =
    GetAllPromptsItemsPromptsResponse200ApplicationJSONResponseBodyFunction$inboundSchema;
  /** @deprecated use `GetAllPromptsItemsPromptsResponse200ApplicationJSONResponseBodyFunction$outboundSchema` instead. */
  export const outboundSchema =
    GetAllPromptsItemsPromptsResponse200ApplicationJSONResponseBodyFunction$outboundSchema;
  /** @deprecated use `GetAllPromptsItemsPromptsResponse200ApplicationJSONResponseBodyFunction$Outbound` instead. */
  export type Outbound =
    GetAllPromptsItemsPromptsResponse200ApplicationJSONResponseBodyFunction$Outbound;
}

export function getAllPromptsItemsPromptsResponse200ApplicationJSONResponseBodyFunctionToJSON(
  getAllPromptsItemsPromptsResponse200ApplicationJSONResponseBodyFunction:
    GetAllPromptsItemsPromptsResponse200ApplicationJSONResponseBodyFunction,
): string {
  return JSON.stringify(
    GetAllPromptsItemsPromptsResponse200ApplicationJSONResponseBodyFunction$outboundSchema
      .parse(
        getAllPromptsItemsPromptsResponse200ApplicationJSONResponseBodyFunction,
      ),
  );
}

export function getAllPromptsItemsPromptsResponse200ApplicationJSONResponseBodyFunctionFromJSON(
  jsonString: string,
): SafeParseResult<
  GetAllPromptsItemsPromptsResponse200ApplicationJSONResponseBodyFunction,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetAllPromptsItemsPromptsResponse200ApplicationJSONResponseBodyFunction$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'GetAllPromptsItemsPromptsResponse200ApplicationJSONResponseBodyFunction' from JSON`,
  );
}

/** @internal */
export const GetAllPromptsItemsPromptsResponse200ApplicationJSONResponseBodyToolCalls$inboundSchema:
  z.ZodType<
    GetAllPromptsItemsPromptsResponse200ApplicationJSONResponseBodyToolCalls,
    z.ZodTypeDef,
    unknown
  > = z.object({
    id: z.string().optional(),
    index: z.number().optional(),
    type:
      GetAllPromptsItemsPromptsResponse200ApplicationJSONResponseBody3Type$inboundSchema,
    function: z.lazy(() =>
      GetAllPromptsItemsPromptsResponse200ApplicationJSONResponseBodyFunction$inboundSchema
    ),
  });

/** @internal */
export type GetAllPromptsItemsPromptsResponse200ApplicationJSONResponseBodyToolCalls$Outbound =
  {
    id?: string | undefined;
    index?: number | undefined;
    type: string;
    function:
      GetAllPromptsItemsPromptsResponse200ApplicationJSONResponseBodyFunction$Outbound;
  };

/** @internal */
export const GetAllPromptsItemsPromptsResponse200ApplicationJSONResponseBodyToolCalls$outboundSchema:
  z.ZodType<
    GetAllPromptsItemsPromptsResponse200ApplicationJSONResponseBodyToolCalls$Outbound,
    z.ZodTypeDef,
    GetAllPromptsItemsPromptsResponse200ApplicationJSONResponseBodyToolCalls
  > = z.object({
    id: z.string().optional(),
    index: z.number().optional(),
    type:
      GetAllPromptsItemsPromptsResponse200ApplicationJSONResponseBody3Type$outboundSchema,
    function: z.lazy(() =>
      GetAllPromptsItemsPromptsResponse200ApplicationJSONResponseBodyFunction$outboundSchema
    ),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPromptsItemsPromptsResponse200ApplicationJSONResponseBodyToolCalls$ {
  /** @deprecated use `GetAllPromptsItemsPromptsResponse200ApplicationJSONResponseBodyToolCalls$inboundSchema` instead. */
  export const inboundSchema =
    GetAllPromptsItemsPromptsResponse200ApplicationJSONResponseBodyToolCalls$inboundSchema;
  /** @deprecated use `GetAllPromptsItemsPromptsResponse200ApplicationJSONResponseBodyToolCalls$outboundSchema` instead. */
  export const outboundSchema =
    GetAllPromptsItemsPromptsResponse200ApplicationJSONResponseBodyToolCalls$outboundSchema;
  /** @deprecated use `GetAllPromptsItemsPromptsResponse200ApplicationJSONResponseBodyToolCalls$Outbound` instead. */
  export type Outbound =
    GetAllPromptsItemsPromptsResponse200ApplicationJSONResponseBodyToolCalls$Outbound;
}

export function getAllPromptsItemsPromptsResponse200ApplicationJSONResponseBodyToolCallsToJSON(
  getAllPromptsItemsPromptsResponse200ApplicationJSONResponseBodyToolCalls:
    GetAllPromptsItemsPromptsResponse200ApplicationJSONResponseBodyToolCalls,
): string {
  return JSON.stringify(
    GetAllPromptsItemsPromptsResponse200ApplicationJSONResponseBodyToolCalls$outboundSchema
      .parse(
        getAllPromptsItemsPromptsResponse200ApplicationJSONResponseBodyToolCalls,
      ),
  );
}

export function getAllPromptsItemsPromptsResponse200ApplicationJSONResponseBodyToolCallsFromJSON(
  jsonString: string,
): SafeParseResult<
  GetAllPromptsItemsPromptsResponse200ApplicationJSONResponseBodyToolCalls,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetAllPromptsItemsPromptsResponse200ApplicationJSONResponseBodyToolCalls$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'GetAllPromptsItemsPromptsResponse200ApplicationJSONResponseBodyToolCalls' from JSON`,
  );
}

/** @internal */
export const GetAllPromptsItemsPromptsResponse200ApplicationJSONResponseBodyMessages$inboundSchema:
  z.ZodType<
    GetAllPromptsItemsPromptsResponse200ApplicationJSONResponseBodyMessages,
    z.ZodTypeDef,
    unknown
  > = z.object({
    role:
      GetAllPromptsItemsPromptsResponse200ApplicationJSONResponseBodyRole$inboundSchema,
    content: z.union([
      z.string(),
      z.array(z.union([
        z.lazy(() =>
          GetAllPrompts2PromptsResponse200ApplicationJSONResponseBody1$inboundSchema
        ),
        z.lazy(() =>
          GetAllPrompts2PromptsResponse200ApplicationJSONResponseBody2$inboundSchema
        ),
      ])),
    ]),
    tool_calls: z.array(
      z.lazy(() =>
        GetAllPromptsItemsPromptsResponse200ApplicationJSONResponseBodyToolCalls$inboundSchema
      ),
    ).optional(),
  }).transform((v) => {
    return remap$(v, {
      "tool_calls": "toolCalls",
    });
  });

/** @internal */
export type GetAllPromptsItemsPromptsResponse200ApplicationJSONResponseBodyMessages$Outbound =
  {
    role: string;
    content:
      | string
      | Array<
        | GetAllPrompts2PromptsResponse200ApplicationJSONResponseBody1$Outbound
        | GetAllPrompts2PromptsResponse200ApplicationJSONResponseBody2$Outbound
      >;
    tool_calls?:
      | Array<
        GetAllPromptsItemsPromptsResponse200ApplicationJSONResponseBodyToolCalls$Outbound
      >
      | undefined;
  };

/** @internal */
export const GetAllPromptsItemsPromptsResponse200ApplicationJSONResponseBodyMessages$outboundSchema:
  z.ZodType<
    GetAllPromptsItemsPromptsResponse200ApplicationJSONResponseBodyMessages$Outbound,
    z.ZodTypeDef,
    GetAllPromptsItemsPromptsResponse200ApplicationJSONResponseBodyMessages
  > = z.object({
    role:
      GetAllPromptsItemsPromptsResponse200ApplicationJSONResponseBodyRole$outboundSchema,
    content: z.union([
      z.string(),
      z.array(z.union([
        z.lazy(() =>
          GetAllPrompts2PromptsResponse200ApplicationJSONResponseBody1$outboundSchema
        ),
        z.lazy(() =>
          GetAllPrompts2PromptsResponse200ApplicationJSONResponseBody2$outboundSchema
        ),
      ])),
    ]),
    toolCalls: z.array(
      z.lazy(() =>
        GetAllPromptsItemsPromptsResponse200ApplicationJSONResponseBodyToolCalls$outboundSchema
      ),
    ).optional(),
  }).transform((v) => {
    return remap$(v, {
      toolCalls: "tool_calls",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPromptsItemsPromptsResponse200ApplicationJSONResponseBodyMessages$ {
  /** @deprecated use `GetAllPromptsItemsPromptsResponse200ApplicationJSONResponseBodyMessages$inboundSchema` instead. */
  export const inboundSchema =
    GetAllPromptsItemsPromptsResponse200ApplicationJSONResponseBodyMessages$inboundSchema;
  /** @deprecated use `GetAllPromptsItemsPromptsResponse200ApplicationJSONResponseBodyMessages$outboundSchema` instead. */
  export const outboundSchema =
    GetAllPromptsItemsPromptsResponse200ApplicationJSONResponseBodyMessages$outboundSchema;
  /** @deprecated use `GetAllPromptsItemsPromptsResponse200ApplicationJSONResponseBodyMessages$Outbound` instead. */
  export type Outbound =
    GetAllPromptsItemsPromptsResponse200ApplicationJSONResponseBodyMessages$Outbound;
}

export function getAllPromptsItemsPromptsResponse200ApplicationJSONResponseBodyMessagesToJSON(
  getAllPromptsItemsPromptsResponse200ApplicationJSONResponseBodyMessages:
    GetAllPromptsItemsPromptsResponse200ApplicationJSONResponseBodyMessages,
): string {
  return JSON.stringify(
    GetAllPromptsItemsPromptsResponse200ApplicationJSONResponseBodyMessages$outboundSchema
      .parse(
        getAllPromptsItemsPromptsResponse200ApplicationJSONResponseBodyMessages,
      ),
  );
}

export function getAllPromptsItemsPromptsResponse200ApplicationJSONResponseBodyMessagesFromJSON(
  jsonString: string,
): SafeParseResult<
  GetAllPromptsItemsPromptsResponse200ApplicationJSONResponseBodyMessages,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetAllPromptsItemsPromptsResponse200ApplicationJSONResponseBodyMessages$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'GetAllPromptsItemsPromptsResponse200ApplicationJSONResponseBodyMessages' from JSON`,
  );
}

/** @internal */
export const GetAllPromptsItemsPromptsResponse200ApplicationJSONResponseBodyPromptConfig$inboundSchema:
  z.ZodType<
    GetAllPromptsItemsPromptsResponse200ApplicationJSONResponseBodyPromptConfig,
    z.ZodTypeDef,
    unknown
  > = z.object({
    stream: z.boolean().optional(),
    model: z.string().optional(),
    model_db_id: z.string().optional(),
    model_type:
      GetAllPromptsItemsPromptsResponse200ApplicationJSONResponseBodyModelType$inboundSchema
        .optional(),
    model_parameters: z.lazy(() =>
      GetAllPromptsItemsPromptsResponse200ApplicationJSONResponseBodyModelParameters$inboundSchema
    ).optional(),
    provider:
      GetAllPromptsItemsPromptsResponse200ApplicationJSONResponseBodyProvider$inboundSchema
        .optional(),
    integration_id: z.nullable(z.string()).optional(),
    version: z.string().optional(),
    messages: z.array(
      z.lazy(() =>
        GetAllPromptsItemsPromptsResponse200ApplicationJSONResponseBodyMessages$inboundSchema
      ),
    ),
  }).transform((v) => {
    return remap$(v, {
      "model_db_id": "modelDbId",
      "model_type": "modelType",
      "model_parameters": "modelParameters",
      "integration_id": "integrationId",
    });
  });

/** @internal */
export type GetAllPromptsItemsPromptsResponse200ApplicationJSONResponseBodyPromptConfig$Outbound =
  {
    stream?: boolean | undefined;
    model?: string | undefined;
    model_db_id?: string | undefined;
    model_type?: string | undefined;
    model_parameters?:
      | GetAllPromptsItemsPromptsResponse200ApplicationJSONResponseBodyModelParameters$Outbound
      | undefined;
    provider?: string | undefined;
    integration_id?: string | null | undefined;
    version?: string | undefined;
    messages: Array<
      GetAllPromptsItemsPromptsResponse200ApplicationJSONResponseBodyMessages$Outbound
    >;
  };

/** @internal */
export const GetAllPromptsItemsPromptsResponse200ApplicationJSONResponseBodyPromptConfig$outboundSchema:
  z.ZodType<
    GetAllPromptsItemsPromptsResponse200ApplicationJSONResponseBodyPromptConfig$Outbound,
    z.ZodTypeDef,
    GetAllPromptsItemsPromptsResponse200ApplicationJSONResponseBodyPromptConfig
  > = z.object({
    stream: z.boolean().optional(),
    model: z.string().optional(),
    modelDbId: z.string().optional(),
    modelType:
      GetAllPromptsItemsPromptsResponse200ApplicationJSONResponseBodyModelType$outboundSchema
        .optional(),
    modelParameters: z.lazy(() =>
      GetAllPromptsItemsPromptsResponse200ApplicationJSONResponseBodyModelParameters$outboundSchema
    ).optional(),
    provider:
      GetAllPromptsItemsPromptsResponse200ApplicationJSONResponseBodyProvider$outboundSchema
        .optional(),
    integrationId: z.nullable(z.string()).optional(),
    version: z.string().optional(),
    messages: z.array(
      z.lazy(() =>
        GetAllPromptsItemsPromptsResponse200ApplicationJSONResponseBodyMessages$outboundSchema
      ),
    ),
  }).transform((v) => {
    return remap$(v, {
      modelDbId: "model_db_id",
      modelType: "model_type",
      modelParameters: "model_parameters",
      integrationId: "integration_id",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPromptsItemsPromptsResponse200ApplicationJSONResponseBodyPromptConfig$ {
  /** @deprecated use `GetAllPromptsItemsPromptsResponse200ApplicationJSONResponseBodyPromptConfig$inboundSchema` instead. */
  export const inboundSchema =
    GetAllPromptsItemsPromptsResponse200ApplicationJSONResponseBodyPromptConfig$inboundSchema;
  /** @deprecated use `GetAllPromptsItemsPromptsResponse200ApplicationJSONResponseBodyPromptConfig$outboundSchema` instead. */
  export const outboundSchema =
    GetAllPromptsItemsPromptsResponse200ApplicationJSONResponseBodyPromptConfig$outboundSchema;
  /** @deprecated use `GetAllPromptsItemsPromptsResponse200ApplicationJSONResponseBodyPromptConfig$Outbound` instead. */
  export type Outbound =
    GetAllPromptsItemsPromptsResponse200ApplicationJSONResponseBodyPromptConfig$Outbound;
}

export function getAllPromptsItemsPromptsResponse200ApplicationJSONResponseBodyPromptConfigToJSON(
  getAllPromptsItemsPromptsResponse200ApplicationJSONResponseBodyPromptConfig:
    GetAllPromptsItemsPromptsResponse200ApplicationJSONResponseBodyPromptConfig,
): string {
  return JSON.stringify(
    GetAllPromptsItemsPromptsResponse200ApplicationJSONResponseBodyPromptConfig$outboundSchema
      .parse(
        getAllPromptsItemsPromptsResponse200ApplicationJSONResponseBodyPromptConfig,
      ),
  );
}

export function getAllPromptsItemsPromptsResponse200ApplicationJSONResponseBodyPromptConfigFromJSON(
  jsonString: string,
): SafeParseResult<
  GetAllPromptsItemsPromptsResponse200ApplicationJSONResponseBodyPromptConfig,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetAllPromptsItemsPromptsResponse200ApplicationJSONResponseBodyPromptConfig$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'GetAllPromptsItemsPromptsResponse200ApplicationJSONResponseBodyPromptConfig' from JSON`,
  );
}

/** @internal */
export const GetAllPromptsItemsPromptsResponse200ApplicationJSONResponseBodyMetadata$inboundSchema:
  z.ZodType<
    GetAllPromptsItemsPromptsResponse200ApplicationJSONResponseBodyMetadata,
    z.ZodTypeDef,
    unknown
  > = z.object({
    use_cases: z.array(z.string()).optional(),
    language: z.string().optional(),
  }).transform((v) => {
    return remap$(v, {
      "use_cases": "useCases",
    });
  });

/** @internal */
export type GetAllPromptsItemsPromptsResponse200ApplicationJSONResponseBodyMetadata$Outbound =
  {
    use_cases?: Array<string> | undefined;
    language?: string | undefined;
  };

/** @internal */
export const GetAllPromptsItemsPromptsResponse200ApplicationJSONResponseBodyMetadata$outboundSchema:
  z.ZodType<
    GetAllPromptsItemsPromptsResponse200ApplicationJSONResponseBodyMetadata$Outbound,
    z.ZodTypeDef,
    GetAllPromptsItemsPromptsResponse200ApplicationJSONResponseBodyMetadata
  > = z.object({
    useCases: z.array(z.string()).optional(),
    language: z.string().optional(),
  }).transform((v) => {
    return remap$(v, {
      useCases: "use_cases",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPromptsItemsPromptsResponse200ApplicationJSONResponseBodyMetadata$ {
  /** @deprecated use `GetAllPromptsItemsPromptsResponse200ApplicationJSONResponseBodyMetadata$inboundSchema` instead. */
  export const inboundSchema =
    GetAllPromptsItemsPromptsResponse200ApplicationJSONResponseBodyMetadata$inboundSchema;
  /** @deprecated use `GetAllPromptsItemsPromptsResponse200ApplicationJSONResponseBodyMetadata$outboundSchema` instead. */
  export const outboundSchema =
    GetAllPromptsItemsPromptsResponse200ApplicationJSONResponseBodyMetadata$outboundSchema;
  /** @deprecated use `GetAllPromptsItemsPromptsResponse200ApplicationJSONResponseBodyMetadata$Outbound` instead. */
  export type Outbound =
    GetAllPromptsItemsPromptsResponse200ApplicationJSONResponseBodyMetadata$Outbound;
}

export function getAllPromptsItemsPromptsResponse200ApplicationJSONResponseBodyMetadataToJSON(
  getAllPromptsItemsPromptsResponse200ApplicationJSONResponseBodyMetadata:
    GetAllPromptsItemsPromptsResponse200ApplicationJSONResponseBodyMetadata,
): string {
  return JSON.stringify(
    GetAllPromptsItemsPromptsResponse200ApplicationJSONResponseBodyMetadata$outboundSchema
      .parse(
        getAllPromptsItemsPromptsResponse200ApplicationJSONResponseBodyMetadata,
      ),
  );
}

export function getAllPromptsItemsPromptsResponse200ApplicationJSONResponseBodyMetadataFromJSON(
  jsonString: string,
): SafeParseResult<
  GetAllPromptsItemsPromptsResponse200ApplicationJSONResponseBodyMetadata,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetAllPromptsItemsPromptsResponse200ApplicationJSONResponseBodyMetadata$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'GetAllPromptsItemsPromptsResponse200ApplicationJSONResponseBodyMetadata' from JSON`,
  );
}

/** @internal */
export const GetAllPromptsItemsPromptsResponseVersions$inboundSchema: z.ZodType<
  GetAllPromptsItemsPromptsResponseVersions,
  z.ZodTypeDef,
  unknown
> = z.object({
  _id: z.string(),
  created_by_id: z.string(),
  display_name: z.string(),
  updated_by_id: z.string(),
  description: z.nullable(z.string()).optional(),
  prompt_config: z.lazy(() =>
    GetAllPromptsItemsPromptsResponse200ApplicationJSONResponseBodyPromptConfig$inboundSchema
  ),
  metadata: z.lazy(() =>
    GetAllPromptsItemsPromptsResponse200ApplicationJSONResponseBodyMetadata$inboundSchema
  ),
  commit: z.string(),
  timestamp: z.string(),
}).transform((v) => {
  return remap$(v, {
    "_id": "id",
    "created_by_id": "createdById",
    "display_name": "displayName",
    "updated_by_id": "updatedById",
    "prompt_config": "promptConfig",
  });
});

/** @internal */
export type GetAllPromptsItemsPromptsResponseVersions$Outbound = {
  _id: string;
  created_by_id: string;
  display_name: string;
  updated_by_id: string;
  description?: string | null | undefined;
  prompt_config:
    GetAllPromptsItemsPromptsResponse200ApplicationJSONResponseBodyPromptConfig$Outbound;
  metadata:
    GetAllPromptsItemsPromptsResponse200ApplicationJSONResponseBodyMetadata$Outbound;
  commit: string;
  timestamp: string;
};

/** @internal */
export const GetAllPromptsItemsPromptsResponseVersions$outboundSchema:
  z.ZodType<
    GetAllPromptsItemsPromptsResponseVersions$Outbound,
    z.ZodTypeDef,
    GetAllPromptsItemsPromptsResponseVersions
  > = z.object({
    id: z.string(),
    createdById: z.string(),
    displayName: z.string(),
    updatedById: z.string(),
    description: z.nullable(z.string()).optional(),
    promptConfig: z.lazy(() =>
      GetAllPromptsItemsPromptsResponse200ApplicationJSONResponseBodyPromptConfig$outboundSchema
    ),
    metadata: z.lazy(() =>
      GetAllPromptsItemsPromptsResponse200ApplicationJSONResponseBodyMetadata$outboundSchema
    ),
    commit: z.string(),
    timestamp: z.string(),
  }).transform((v) => {
    return remap$(v, {
      id: "_id",
      createdById: "created_by_id",
      displayName: "display_name",
      updatedById: "updated_by_id",
      promptConfig: "prompt_config",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPromptsItemsPromptsResponseVersions$ {
  /** @deprecated use `GetAllPromptsItemsPromptsResponseVersions$inboundSchema` instead. */
  export const inboundSchema =
    GetAllPromptsItemsPromptsResponseVersions$inboundSchema;
  /** @deprecated use `GetAllPromptsItemsPromptsResponseVersions$outboundSchema` instead. */
  export const outboundSchema =
    GetAllPromptsItemsPromptsResponseVersions$outboundSchema;
  /** @deprecated use `GetAllPromptsItemsPromptsResponseVersions$Outbound` instead. */
  export type Outbound = GetAllPromptsItemsPromptsResponseVersions$Outbound;
}

export function getAllPromptsItemsPromptsResponseVersionsToJSON(
  getAllPromptsItemsPromptsResponseVersions:
    GetAllPromptsItemsPromptsResponseVersions,
): string {
  return JSON.stringify(
    GetAllPromptsItemsPromptsResponseVersions$outboundSchema.parse(
      getAllPromptsItemsPromptsResponseVersions,
    ),
  );
}

export function getAllPromptsItemsPromptsResponseVersionsFromJSON(
  jsonString: string,
): SafeParseResult<
  GetAllPromptsItemsPromptsResponseVersions,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetAllPromptsItemsPromptsResponseVersions$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'GetAllPromptsItemsPromptsResponseVersions' from JSON`,
  );
}

/** @internal */
export const GetAllPromptsItemsPromptsResponseType$inboundSchema:
  z.ZodNativeEnum<typeof GetAllPromptsItemsPromptsResponseType> = z.nativeEnum(
    GetAllPromptsItemsPromptsResponseType,
  );

/** @internal */
export const GetAllPromptsItemsPromptsResponseType$outboundSchema:
  z.ZodNativeEnum<typeof GetAllPromptsItemsPromptsResponseType> =
    GetAllPromptsItemsPromptsResponseType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPromptsItemsPromptsResponseType$ {
  /** @deprecated use `GetAllPromptsItemsPromptsResponseType$inboundSchema` instead. */
  export const inboundSchema =
    GetAllPromptsItemsPromptsResponseType$inboundSchema;
  /** @deprecated use `GetAllPromptsItemsPromptsResponseType$outboundSchema` instead. */
  export const outboundSchema =
    GetAllPromptsItemsPromptsResponseType$outboundSchema;
}

/** @internal */
export const GetAllPromptsItems3$inboundSchema: z.ZodType<
  GetAllPromptsItems3,
  z.ZodTypeDef,
  unknown
> = z.object({
  _id: z.string(),
  owner: z.union([
    z.string(),
    GetAllPromptsOwnerPromptsResponse2$inboundSchema,
  ]),
  domain_id: z.string(),
  created_by_id: z.string(),
  display_name: z.string(),
  updated_by_id: z.string(),
  description: z.nullable(z.string()).optional(),
  prompt_config: z.lazy(() =>
    GetAllPromptsItemsPromptsResponsePromptConfig$inboundSchema
  ),
  metadata: z.lazy(() =>
    GetAllPromptsItemsPromptsResponseMetadata$inboundSchema
  ),
  created: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
  updated: z.string().datetime({ offset: true }).default(
    "2024-11-26T10:00:21.083Z",
  ).transform(v => new Date(v)),
  versions: z.array(
    z.lazy(() => GetAllPromptsItemsPromptsResponseVersions$inboundSchema),
  ),
  type: GetAllPromptsItemsPromptsResponseType$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "_id": "id",
    "domain_id": "domainId",
    "created_by_id": "createdById",
    "display_name": "displayName",
    "updated_by_id": "updatedById",
    "prompt_config": "promptConfig",
  });
});

/** @internal */
export type GetAllPromptsItems3$Outbound = {
  _id: string;
  owner: string | string;
  domain_id: string;
  created_by_id: string;
  display_name: string;
  updated_by_id: string;
  description?: string | null | undefined;
  prompt_config: GetAllPromptsItemsPromptsResponsePromptConfig$Outbound;
  metadata: GetAllPromptsItemsPromptsResponseMetadata$Outbound;
  created?: string | undefined;
  updated: string;
  versions: Array<GetAllPromptsItemsPromptsResponseVersions$Outbound>;
  type: string;
};

/** @internal */
export const GetAllPromptsItems3$outboundSchema: z.ZodType<
  GetAllPromptsItems3$Outbound,
  z.ZodTypeDef,
  GetAllPromptsItems3
> = z.object({
  id: z.string(),
  owner: z.union([
    z.string(),
    GetAllPromptsOwnerPromptsResponse2$outboundSchema,
  ]),
  domainId: z.string(),
  createdById: z.string(),
  displayName: z.string(),
  updatedById: z.string(),
  description: z.nullable(z.string()).optional(),
  promptConfig: z.lazy(() =>
    GetAllPromptsItemsPromptsResponsePromptConfig$outboundSchema
  ),
  metadata: z.lazy(() =>
    GetAllPromptsItemsPromptsResponseMetadata$outboundSchema
  ),
  created: z.date().transform(v => v.toISOString()).optional(),
  updated: z.date().default(() => new Date("2024-11-26T10:00:21.083Z"))
    .transform(v => v.toISOString()),
  versions: z.array(
    z.lazy(() => GetAllPromptsItemsPromptsResponseVersions$outboundSchema),
  ),
  type: GetAllPromptsItemsPromptsResponseType$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    id: "_id",
    domainId: "domain_id",
    createdById: "created_by_id",
    displayName: "display_name",
    updatedById: "updated_by_id",
    promptConfig: "prompt_config",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPromptsItems3$ {
  /** @deprecated use `GetAllPromptsItems3$inboundSchema` instead. */
  export const inboundSchema = GetAllPromptsItems3$inboundSchema;
  /** @deprecated use `GetAllPromptsItems3$outboundSchema` instead. */
  export const outboundSchema = GetAllPromptsItems3$outboundSchema;
  /** @deprecated use `GetAllPromptsItems3$Outbound` instead. */
  export type Outbound = GetAllPromptsItems3$Outbound;
}

export function getAllPromptsItems3ToJSON(
  getAllPromptsItems3: GetAllPromptsItems3,
): string {
  return JSON.stringify(
    GetAllPromptsItems3$outboundSchema.parse(getAllPromptsItems3),
  );
}

export function getAllPromptsItems3FromJSON(
  jsonString: string,
): SafeParseResult<GetAllPromptsItems3, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetAllPromptsItems3$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetAllPromptsItems3' from JSON`,
  );
}

/** @internal */
export const GetAllPromptsOwnerPrompts2$inboundSchema: z.ZodNativeEnum<
  typeof GetAllPromptsOwnerPrompts2
> = z.nativeEnum(GetAllPromptsOwnerPrompts2);

/** @internal */
export const GetAllPromptsOwnerPrompts2$outboundSchema: z.ZodNativeEnum<
  typeof GetAllPromptsOwnerPrompts2
> = GetAllPromptsOwnerPrompts2$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPromptsOwnerPrompts2$ {
  /** @deprecated use `GetAllPromptsOwnerPrompts2$inboundSchema` instead. */
  export const inboundSchema = GetAllPromptsOwnerPrompts2$inboundSchema;
  /** @deprecated use `GetAllPromptsOwnerPrompts2$outboundSchema` instead. */
  export const outboundSchema = GetAllPromptsOwnerPrompts2$outboundSchema;
}

/** @internal */
export const GetAllPromptsItemsPromptsOwner$inboundSchema: z.ZodType<
  GetAllPromptsItemsPromptsOwner,
  z.ZodTypeDef,
  unknown
> = z.union([z.string(), GetAllPromptsOwnerPrompts2$inboundSchema]);

/** @internal */
export type GetAllPromptsItemsPromptsOwner$Outbound = string | string;

/** @internal */
export const GetAllPromptsItemsPromptsOwner$outboundSchema: z.ZodType<
  GetAllPromptsItemsPromptsOwner$Outbound,
  z.ZodTypeDef,
  GetAllPromptsItemsPromptsOwner
> = z.union([z.string(), GetAllPromptsOwnerPrompts2$outboundSchema]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPromptsItemsPromptsOwner$ {
  /** @deprecated use `GetAllPromptsItemsPromptsOwner$inboundSchema` instead. */
  export const inboundSchema = GetAllPromptsItemsPromptsOwner$inboundSchema;
  /** @deprecated use `GetAllPromptsItemsPromptsOwner$outboundSchema` instead. */
  export const outboundSchema = GetAllPromptsItemsPromptsOwner$outboundSchema;
  /** @deprecated use `GetAllPromptsItemsPromptsOwner$Outbound` instead. */
  export type Outbound = GetAllPromptsItemsPromptsOwner$Outbound;
}

export function getAllPromptsItemsPromptsOwnerToJSON(
  getAllPromptsItemsPromptsOwner: GetAllPromptsItemsPromptsOwner,
): string {
  return JSON.stringify(
    GetAllPromptsItemsPromptsOwner$outboundSchema.parse(
      getAllPromptsItemsPromptsOwner,
    ),
  );
}

export function getAllPromptsItemsPromptsOwnerFromJSON(
  jsonString: string,
): SafeParseResult<GetAllPromptsItemsPromptsOwner, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetAllPromptsItemsPromptsOwner$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetAllPromptsItemsPromptsOwner' from JSON`,
  );
}

/** @internal */
export const GetAllPromptsItemsPromptsModelType$inboundSchema: z.ZodNativeEnum<
  typeof GetAllPromptsItemsPromptsModelType
> = z.nativeEnum(GetAllPromptsItemsPromptsModelType);

/** @internal */
export const GetAllPromptsItemsPromptsModelType$outboundSchema: z.ZodNativeEnum<
  typeof GetAllPromptsItemsPromptsModelType
> = GetAllPromptsItemsPromptsModelType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPromptsItemsPromptsModelType$ {
  /** @deprecated use `GetAllPromptsItemsPromptsModelType$inboundSchema` instead. */
  export const inboundSchema = GetAllPromptsItemsPromptsModelType$inboundSchema;
  /** @deprecated use `GetAllPromptsItemsPromptsModelType$outboundSchema` instead. */
  export const outboundSchema =
    GetAllPromptsItemsPromptsModelType$outboundSchema;
}

/** @internal */
export const GetAllPromptsItemsPromptsFormat$inboundSchema: z.ZodNativeEnum<
  typeof GetAllPromptsItemsPromptsFormat
> = z.nativeEnum(GetAllPromptsItemsPromptsFormat);

/** @internal */
export const GetAllPromptsItemsPromptsFormat$outboundSchema: z.ZodNativeEnum<
  typeof GetAllPromptsItemsPromptsFormat
> = GetAllPromptsItemsPromptsFormat$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPromptsItemsPromptsFormat$ {
  /** @deprecated use `GetAllPromptsItemsPromptsFormat$inboundSchema` instead. */
  export const inboundSchema = GetAllPromptsItemsPromptsFormat$inboundSchema;
  /** @deprecated use `GetAllPromptsItemsPromptsFormat$outboundSchema` instead. */
  export const outboundSchema = GetAllPromptsItemsPromptsFormat$outboundSchema;
}

/** @internal */
export const GetAllPromptsItemsPromptsQuality$inboundSchema: z.ZodNativeEnum<
  typeof GetAllPromptsItemsPromptsQuality
> = z.nativeEnum(GetAllPromptsItemsPromptsQuality);

/** @internal */
export const GetAllPromptsItemsPromptsQuality$outboundSchema: z.ZodNativeEnum<
  typeof GetAllPromptsItemsPromptsQuality
> = GetAllPromptsItemsPromptsQuality$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPromptsItemsPromptsQuality$ {
  /** @deprecated use `GetAllPromptsItemsPromptsQuality$inboundSchema` instead. */
  export const inboundSchema = GetAllPromptsItemsPromptsQuality$inboundSchema;
  /** @deprecated use `GetAllPromptsItemsPromptsQuality$outboundSchema` instead. */
  export const outboundSchema = GetAllPromptsItemsPromptsQuality$outboundSchema;
}

/** @internal */
export const GetAllPromptsResponseFormatPromptsResponse200Type$inboundSchema:
  z.ZodNativeEnum<typeof GetAllPromptsResponseFormatPromptsResponse200Type> = z
    .nativeEnum(GetAllPromptsResponseFormatPromptsResponse200Type);

/** @internal */
export const GetAllPromptsResponseFormatPromptsResponse200Type$outboundSchema:
  z.ZodNativeEnum<typeof GetAllPromptsResponseFormatPromptsResponse200Type> =
    GetAllPromptsResponseFormatPromptsResponse200Type$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPromptsResponseFormatPromptsResponse200Type$ {
  /** @deprecated use `GetAllPromptsResponseFormatPromptsResponse200Type$inboundSchema` instead. */
  export const inboundSchema =
    GetAllPromptsResponseFormatPromptsResponse200Type$inboundSchema;
  /** @deprecated use `GetAllPromptsResponseFormatPromptsResponse200Type$outboundSchema` instead. */
  export const outboundSchema =
    GetAllPromptsResponseFormatPromptsResponse200Type$outboundSchema;
}

/** @internal */
export const GetAllPromptsResponseFormatPrompts2$inboundSchema: z.ZodType<
  GetAllPromptsResponseFormatPrompts2,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: GetAllPromptsResponseFormatPromptsResponse200Type$inboundSchema,
});

/** @internal */
export type GetAllPromptsResponseFormatPrompts2$Outbound = {
  type: string;
};

/** @internal */
export const GetAllPromptsResponseFormatPrompts2$outboundSchema: z.ZodType<
  GetAllPromptsResponseFormatPrompts2$Outbound,
  z.ZodTypeDef,
  GetAllPromptsResponseFormatPrompts2
> = z.object({
  type: GetAllPromptsResponseFormatPromptsResponse200Type$outboundSchema,
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPromptsResponseFormatPrompts2$ {
  /** @deprecated use `GetAllPromptsResponseFormatPrompts2$inboundSchema` instead. */
  export const inboundSchema =
    GetAllPromptsResponseFormatPrompts2$inboundSchema;
  /** @deprecated use `GetAllPromptsResponseFormatPrompts2$outboundSchema` instead. */
  export const outboundSchema =
    GetAllPromptsResponseFormatPrompts2$outboundSchema;
  /** @deprecated use `GetAllPromptsResponseFormatPrompts2$Outbound` instead. */
  export type Outbound = GetAllPromptsResponseFormatPrompts2$Outbound;
}

export function getAllPromptsResponseFormatPrompts2ToJSON(
  getAllPromptsResponseFormatPrompts2: GetAllPromptsResponseFormatPrompts2,
): string {
  return JSON.stringify(
    GetAllPromptsResponseFormatPrompts2$outboundSchema.parse(
      getAllPromptsResponseFormatPrompts2,
    ),
  );
}

export function getAllPromptsResponseFormatPrompts2FromJSON(
  jsonString: string,
): SafeParseResult<GetAllPromptsResponseFormatPrompts2, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      GetAllPromptsResponseFormatPrompts2$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetAllPromptsResponseFormatPrompts2' from JSON`,
  );
}

/** @internal */
export const GetAllPromptsResponseFormatPromptsResponseType$inboundSchema:
  z.ZodNativeEnum<typeof GetAllPromptsResponseFormatPromptsResponseType> = z
    .nativeEnum(GetAllPromptsResponseFormatPromptsResponseType);

/** @internal */
export const GetAllPromptsResponseFormatPromptsResponseType$outboundSchema:
  z.ZodNativeEnum<typeof GetAllPromptsResponseFormatPromptsResponseType> =
    GetAllPromptsResponseFormatPromptsResponseType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPromptsResponseFormatPromptsResponseType$ {
  /** @deprecated use `GetAllPromptsResponseFormatPromptsResponseType$inboundSchema` instead. */
  export const inboundSchema =
    GetAllPromptsResponseFormatPromptsResponseType$inboundSchema;
  /** @deprecated use `GetAllPromptsResponseFormatPromptsResponseType$outboundSchema` instead. */
  export const outboundSchema =
    GetAllPromptsResponseFormatPromptsResponseType$outboundSchema;
}

/** @internal */
export const GetAllPromptsResponseFormatPromptsJsonSchema$inboundSchema:
  z.ZodType<
    GetAllPromptsResponseFormatPromptsJsonSchema,
    z.ZodTypeDef,
    unknown
  > = z.object({
    name: z.string(),
    strict: z.boolean(),
    schema: z.record(z.any()),
  });

/** @internal */
export type GetAllPromptsResponseFormatPromptsJsonSchema$Outbound = {
  name: string;
  strict: boolean;
  schema: { [k: string]: any };
};

/** @internal */
export const GetAllPromptsResponseFormatPromptsJsonSchema$outboundSchema:
  z.ZodType<
    GetAllPromptsResponseFormatPromptsJsonSchema$Outbound,
    z.ZodTypeDef,
    GetAllPromptsResponseFormatPromptsJsonSchema
  > = z.object({
    name: z.string(),
    strict: z.boolean(),
    schema: z.record(z.any()),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPromptsResponseFormatPromptsJsonSchema$ {
  /** @deprecated use `GetAllPromptsResponseFormatPromptsJsonSchema$inboundSchema` instead. */
  export const inboundSchema =
    GetAllPromptsResponseFormatPromptsJsonSchema$inboundSchema;
  /** @deprecated use `GetAllPromptsResponseFormatPromptsJsonSchema$outboundSchema` instead. */
  export const outboundSchema =
    GetAllPromptsResponseFormatPromptsJsonSchema$outboundSchema;
  /** @deprecated use `GetAllPromptsResponseFormatPromptsJsonSchema$Outbound` instead. */
  export type Outbound = GetAllPromptsResponseFormatPromptsJsonSchema$Outbound;
}

export function getAllPromptsResponseFormatPromptsJsonSchemaToJSON(
  getAllPromptsResponseFormatPromptsJsonSchema:
    GetAllPromptsResponseFormatPromptsJsonSchema,
): string {
  return JSON.stringify(
    GetAllPromptsResponseFormatPromptsJsonSchema$outboundSchema.parse(
      getAllPromptsResponseFormatPromptsJsonSchema,
    ),
  );
}

export function getAllPromptsResponseFormatPromptsJsonSchemaFromJSON(
  jsonString: string,
): SafeParseResult<
  GetAllPromptsResponseFormatPromptsJsonSchema,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetAllPromptsResponseFormatPromptsJsonSchema$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'GetAllPromptsResponseFormatPromptsJsonSchema' from JSON`,
  );
}

/** @internal */
export const GetAllPromptsResponseFormatPrompts1$inboundSchema: z.ZodType<
  GetAllPromptsResponseFormatPrompts1,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: GetAllPromptsResponseFormatPromptsResponseType$inboundSchema,
  json_schema: z.lazy(() =>
    GetAllPromptsResponseFormatPromptsJsonSchema$inboundSchema
  ),
}).transform((v) => {
  return remap$(v, {
    "json_schema": "jsonSchema",
  });
});

/** @internal */
export type GetAllPromptsResponseFormatPrompts1$Outbound = {
  type: string;
  json_schema: GetAllPromptsResponseFormatPromptsJsonSchema$Outbound;
};

/** @internal */
export const GetAllPromptsResponseFormatPrompts1$outboundSchema: z.ZodType<
  GetAllPromptsResponseFormatPrompts1$Outbound,
  z.ZodTypeDef,
  GetAllPromptsResponseFormatPrompts1
> = z.object({
  type: GetAllPromptsResponseFormatPromptsResponseType$outboundSchema,
  jsonSchema: z.lazy(() =>
    GetAllPromptsResponseFormatPromptsJsonSchema$outboundSchema
  ),
}).transform((v) => {
  return remap$(v, {
    jsonSchema: "json_schema",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPromptsResponseFormatPrompts1$ {
  /** @deprecated use `GetAllPromptsResponseFormatPrompts1$inboundSchema` instead. */
  export const inboundSchema =
    GetAllPromptsResponseFormatPrompts1$inboundSchema;
  /** @deprecated use `GetAllPromptsResponseFormatPrompts1$outboundSchema` instead. */
  export const outboundSchema =
    GetAllPromptsResponseFormatPrompts1$outboundSchema;
  /** @deprecated use `GetAllPromptsResponseFormatPrompts1$Outbound` instead. */
  export type Outbound = GetAllPromptsResponseFormatPrompts1$Outbound;
}

export function getAllPromptsResponseFormatPrompts1ToJSON(
  getAllPromptsResponseFormatPrompts1: GetAllPromptsResponseFormatPrompts1,
): string {
  return JSON.stringify(
    GetAllPromptsResponseFormatPrompts1$outboundSchema.parse(
      getAllPromptsResponseFormatPrompts1,
    ),
  );
}

export function getAllPromptsResponseFormatPrompts1FromJSON(
  jsonString: string,
): SafeParseResult<GetAllPromptsResponseFormatPrompts1, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      GetAllPromptsResponseFormatPrompts1$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetAllPromptsResponseFormatPrompts1' from JSON`,
  );
}

/** @internal */
export const GetAllPromptsItemsPromptsResponseFormat$inboundSchema: z.ZodType<
  GetAllPromptsItemsPromptsResponseFormat,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => GetAllPromptsResponseFormatPrompts2$inboundSchema),
  z.lazy(() => GetAllPromptsResponseFormatPrompts1$inboundSchema),
]);

/** @internal */
export type GetAllPromptsItemsPromptsResponseFormat$Outbound =
  | GetAllPromptsResponseFormatPrompts2$Outbound
  | GetAllPromptsResponseFormatPrompts1$Outbound;

/** @internal */
export const GetAllPromptsItemsPromptsResponseFormat$outboundSchema: z.ZodType<
  GetAllPromptsItemsPromptsResponseFormat$Outbound,
  z.ZodTypeDef,
  GetAllPromptsItemsPromptsResponseFormat
> = z.union([
  z.lazy(() => GetAllPromptsResponseFormatPrompts2$outboundSchema),
  z.lazy(() => GetAllPromptsResponseFormatPrompts1$outboundSchema),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPromptsItemsPromptsResponseFormat$ {
  /** @deprecated use `GetAllPromptsItemsPromptsResponseFormat$inboundSchema` instead. */
  export const inboundSchema =
    GetAllPromptsItemsPromptsResponseFormat$inboundSchema;
  /** @deprecated use `GetAllPromptsItemsPromptsResponseFormat$outboundSchema` instead. */
  export const outboundSchema =
    GetAllPromptsItemsPromptsResponseFormat$outboundSchema;
  /** @deprecated use `GetAllPromptsItemsPromptsResponseFormat$Outbound` instead. */
  export type Outbound = GetAllPromptsItemsPromptsResponseFormat$Outbound;
}

export function getAllPromptsItemsPromptsResponseFormatToJSON(
  getAllPromptsItemsPromptsResponseFormat:
    GetAllPromptsItemsPromptsResponseFormat,
): string {
  return JSON.stringify(
    GetAllPromptsItemsPromptsResponseFormat$outboundSchema.parse(
      getAllPromptsItemsPromptsResponseFormat,
    ),
  );
}

export function getAllPromptsItemsPromptsResponseFormatFromJSON(
  jsonString: string,
): SafeParseResult<
  GetAllPromptsItemsPromptsResponseFormat,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetAllPromptsItemsPromptsResponseFormat$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'GetAllPromptsItemsPromptsResponseFormat' from JSON`,
  );
}

/** @internal */
export const GetAllPromptsItemsPromptsPhotoRealVersion$inboundSchema:
  z.ZodNativeEnum<typeof GetAllPromptsItemsPromptsPhotoRealVersion> = z
    .nativeEnum(GetAllPromptsItemsPromptsPhotoRealVersion);

/** @internal */
export const GetAllPromptsItemsPromptsPhotoRealVersion$outboundSchema:
  z.ZodNativeEnum<typeof GetAllPromptsItemsPromptsPhotoRealVersion> =
    GetAllPromptsItemsPromptsPhotoRealVersion$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPromptsItemsPromptsPhotoRealVersion$ {
  /** @deprecated use `GetAllPromptsItemsPromptsPhotoRealVersion$inboundSchema` instead. */
  export const inboundSchema =
    GetAllPromptsItemsPromptsPhotoRealVersion$inboundSchema;
  /** @deprecated use `GetAllPromptsItemsPromptsPhotoRealVersion$outboundSchema` instead. */
  export const outboundSchema =
    GetAllPromptsItemsPromptsPhotoRealVersion$outboundSchema;
}

/** @internal */
export const GetAllPromptsItemsPromptsEncodingFormat$inboundSchema:
  z.ZodNativeEnum<typeof GetAllPromptsItemsPromptsEncodingFormat> = z
    .nativeEnum(GetAllPromptsItemsPromptsEncodingFormat);

/** @internal */
export const GetAllPromptsItemsPromptsEncodingFormat$outboundSchema:
  z.ZodNativeEnum<typeof GetAllPromptsItemsPromptsEncodingFormat> =
    GetAllPromptsItemsPromptsEncodingFormat$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPromptsItemsPromptsEncodingFormat$ {
  /** @deprecated use `GetAllPromptsItemsPromptsEncodingFormat$inboundSchema` instead. */
  export const inboundSchema =
    GetAllPromptsItemsPromptsEncodingFormat$inboundSchema;
  /** @deprecated use `GetAllPromptsItemsPromptsEncodingFormat$outboundSchema` instead. */
  export const outboundSchema =
    GetAllPromptsItemsPromptsEncodingFormat$outboundSchema;
}

/** @internal */
export const GetAllPromptsItemsPromptsModelParameters$inboundSchema: z.ZodType<
  GetAllPromptsItemsPromptsModelParameters,
  z.ZodTypeDef,
  unknown
> = z.object({
  temperature: z.number().optional(),
  maxTokens: z.number().optional(),
  topK: z.number().optional(),
  topP: z.number().optional(),
  frequencyPenalty: z.number().optional(),
  presencePenalty: z.number().optional(),
  numImages: z.number().optional(),
  seed: z.number().optional(),
  format: GetAllPromptsItemsPromptsFormat$inboundSchema.optional(),
  dimensions: z.string().optional(),
  quality: GetAllPromptsItemsPromptsQuality$inboundSchema.optional(),
  style: z.string().optional(),
  responseFormat: z.nullable(
    z.union([
      z.lazy(() => GetAllPromptsResponseFormatPrompts2$inboundSchema),
      z.lazy(() => GetAllPromptsResponseFormatPrompts1$inboundSchema),
    ]),
  ).optional(),
  photoRealVersion: GetAllPromptsItemsPromptsPhotoRealVersion$inboundSchema
    .optional(),
  encoding_format: GetAllPromptsItemsPromptsEncodingFormat$inboundSchema
    .optional(),
}).transform((v) => {
  return remap$(v, {
    "encoding_format": "encodingFormat",
  });
});

/** @internal */
export type GetAllPromptsItemsPromptsModelParameters$Outbound = {
  temperature?: number | undefined;
  maxTokens?: number | undefined;
  topK?: number | undefined;
  topP?: number | undefined;
  frequencyPenalty?: number | undefined;
  presencePenalty?: number | undefined;
  numImages?: number | undefined;
  seed?: number | undefined;
  format?: string | undefined;
  dimensions?: string | undefined;
  quality?: string | undefined;
  style?: string | undefined;
  responseFormat?:
    | GetAllPromptsResponseFormatPrompts2$Outbound
    | GetAllPromptsResponseFormatPrompts1$Outbound
    | null
    | undefined;
  photoRealVersion?: string | undefined;
  encoding_format?: string | undefined;
};

/** @internal */
export const GetAllPromptsItemsPromptsModelParameters$outboundSchema: z.ZodType<
  GetAllPromptsItemsPromptsModelParameters$Outbound,
  z.ZodTypeDef,
  GetAllPromptsItemsPromptsModelParameters
> = z.object({
  temperature: z.number().optional(),
  maxTokens: z.number().optional(),
  topK: z.number().optional(),
  topP: z.number().optional(),
  frequencyPenalty: z.number().optional(),
  presencePenalty: z.number().optional(),
  numImages: z.number().optional(),
  seed: z.number().optional(),
  format: GetAllPromptsItemsPromptsFormat$outboundSchema.optional(),
  dimensions: z.string().optional(),
  quality: GetAllPromptsItemsPromptsQuality$outboundSchema.optional(),
  style: z.string().optional(),
  responseFormat: z.nullable(
    z.union([
      z.lazy(() => GetAllPromptsResponseFormatPrompts2$outboundSchema),
      z.lazy(() => GetAllPromptsResponseFormatPrompts1$outboundSchema),
    ]),
  ).optional(),
  photoRealVersion: GetAllPromptsItemsPromptsPhotoRealVersion$outboundSchema
    .optional(),
  encodingFormat: GetAllPromptsItemsPromptsEncodingFormat$outboundSchema
    .optional(),
}).transform((v) => {
  return remap$(v, {
    encodingFormat: "encoding_format",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPromptsItemsPromptsModelParameters$ {
  /** @deprecated use `GetAllPromptsItemsPromptsModelParameters$inboundSchema` instead. */
  export const inboundSchema =
    GetAllPromptsItemsPromptsModelParameters$inboundSchema;
  /** @deprecated use `GetAllPromptsItemsPromptsModelParameters$outboundSchema` instead. */
  export const outboundSchema =
    GetAllPromptsItemsPromptsModelParameters$outboundSchema;
  /** @deprecated use `GetAllPromptsItemsPromptsModelParameters$Outbound` instead. */
  export type Outbound = GetAllPromptsItemsPromptsModelParameters$Outbound;
}

export function getAllPromptsItemsPromptsModelParametersToJSON(
  getAllPromptsItemsPromptsModelParameters:
    GetAllPromptsItemsPromptsModelParameters,
): string {
  return JSON.stringify(
    GetAllPromptsItemsPromptsModelParameters$outboundSchema.parse(
      getAllPromptsItemsPromptsModelParameters,
    ),
  );
}

export function getAllPromptsItemsPromptsModelParametersFromJSON(
  jsonString: string,
): SafeParseResult<
  GetAllPromptsItemsPromptsModelParameters,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetAllPromptsItemsPromptsModelParameters$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'GetAllPromptsItemsPromptsModelParameters' from JSON`,
  );
}

/** @internal */
export const GetAllPromptsItemsPromptsProvider$inboundSchema: z.ZodNativeEnum<
  typeof GetAllPromptsItemsPromptsProvider
> = z.nativeEnum(GetAllPromptsItemsPromptsProvider);

/** @internal */
export const GetAllPromptsItemsPromptsProvider$outboundSchema: z.ZodNativeEnum<
  typeof GetAllPromptsItemsPromptsProvider
> = GetAllPromptsItemsPromptsProvider$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPromptsItemsPromptsProvider$ {
  /** @deprecated use `GetAllPromptsItemsPromptsProvider$inboundSchema` instead. */
  export const inboundSchema = GetAllPromptsItemsPromptsProvider$inboundSchema;
  /** @deprecated use `GetAllPromptsItemsPromptsProvider$outboundSchema` instead. */
  export const outboundSchema =
    GetAllPromptsItemsPromptsProvider$outboundSchema;
}

/** @internal */
export const GetAllPromptsItemsPromptsRole$inboundSchema: z.ZodNativeEnum<
  typeof GetAllPromptsItemsPromptsRole
> = z.nativeEnum(GetAllPromptsItemsPromptsRole);

/** @internal */
export const GetAllPromptsItemsPromptsRole$outboundSchema: z.ZodNativeEnum<
  typeof GetAllPromptsItemsPromptsRole
> = GetAllPromptsItemsPromptsRole$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPromptsItemsPromptsRole$ {
  /** @deprecated use `GetAllPromptsItemsPromptsRole$inboundSchema` instead. */
  export const inboundSchema = GetAllPromptsItemsPromptsRole$inboundSchema;
  /** @deprecated use `GetAllPromptsItemsPromptsRole$outboundSchema` instead. */
  export const outboundSchema = GetAllPromptsItemsPromptsRole$outboundSchema;
}

/** @internal */
export const GetAllPrompts2PromptsResponse200Type$inboundSchema:
  z.ZodNativeEnum<typeof GetAllPrompts2PromptsResponse200Type> = z.nativeEnum(
    GetAllPrompts2PromptsResponse200Type,
  );

/** @internal */
export const GetAllPrompts2PromptsResponse200Type$outboundSchema:
  z.ZodNativeEnum<typeof GetAllPrompts2PromptsResponse200Type> =
    GetAllPrompts2PromptsResponse200Type$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPrompts2PromptsResponse200Type$ {
  /** @deprecated use `GetAllPrompts2PromptsResponse200Type$inboundSchema` instead. */
  export const inboundSchema =
    GetAllPrompts2PromptsResponse200Type$inboundSchema;
  /** @deprecated use `GetAllPrompts2PromptsResponse200Type$outboundSchema` instead. */
  export const outboundSchema =
    GetAllPrompts2PromptsResponse200Type$outboundSchema;
}

/** @internal */
export const GetAllPrompts2PromptsImageUrl$inboundSchema: z.ZodType<
  GetAllPrompts2PromptsImageUrl,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string().optional(),
  url: z.string(),
  detail: z.string().optional(),
});

/** @internal */
export type GetAllPrompts2PromptsImageUrl$Outbound = {
  id?: string | undefined;
  url: string;
  detail?: string | undefined;
};

/** @internal */
export const GetAllPrompts2PromptsImageUrl$outboundSchema: z.ZodType<
  GetAllPrompts2PromptsImageUrl$Outbound,
  z.ZodTypeDef,
  GetAllPrompts2PromptsImageUrl
> = z.object({
  id: z.string().optional(),
  url: z.string(),
  detail: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPrompts2PromptsImageUrl$ {
  /** @deprecated use `GetAllPrompts2PromptsImageUrl$inboundSchema` instead. */
  export const inboundSchema = GetAllPrompts2PromptsImageUrl$inboundSchema;
  /** @deprecated use `GetAllPrompts2PromptsImageUrl$outboundSchema` instead. */
  export const outboundSchema = GetAllPrompts2PromptsImageUrl$outboundSchema;
  /** @deprecated use `GetAllPrompts2PromptsImageUrl$Outbound` instead. */
  export type Outbound = GetAllPrompts2PromptsImageUrl$Outbound;
}

export function getAllPrompts2PromptsImageUrlToJSON(
  getAllPrompts2PromptsImageUrl: GetAllPrompts2PromptsImageUrl,
): string {
  return JSON.stringify(
    GetAllPrompts2PromptsImageUrl$outboundSchema.parse(
      getAllPrompts2PromptsImageUrl,
    ),
  );
}

export function getAllPrompts2PromptsImageUrlFromJSON(
  jsonString: string,
): SafeParseResult<GetAllPrompts2PromptsImageUrl, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetAllPrompts2PromptsImageUrl$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetAllPrompts2PromptsImageUrl' from JSON`,
  );
}

/** @internal */
export const GetAllPrompts2Prompts2$inboundSchema: z.ZodType<
  GetAllPrompts2Prompts2,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: GetAllPrompts2PromptsResponse200Type$inboundSchema,
  image_url: z.lazy(() => GetAllPrompts2PromptsImageUrl$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "image_url": "imageUrl",
  });
});

/** @internal */
export type GetAllPrompts2Prompts2$Outbound = {
  type: string;
  image_url: GetAllPrompts2PromptsImageUrl$Outbound;
};

/** @internal */
export const GetAllPrompts2Prompts2$outboundSchema: z.ZodType<
  GetAllPrompts2Prompts2$Outbound,
  z.ZodTypeDef,
  GetAllPrompts2Prompts2
> = z.object({
  type: GetAllPrompts2PromptsResponse200Type$outboundSchema,
  imageUrl: z.lazy(() => GetAllPrompts2PromptsImageUrl$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    imageUrl: "image_url",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPrompts2Prompts2$ {
  /** @deprecated use `GetAllPrompts2Prompts2$inboundSchema` instead. */
  export const inboundSchema = GetAllPrompts2Prompts2$inboundSchema;
  /** @deprecated use `GetAllPrompts2Prompts2$outboundSchema` instead. */
  export const outboundSchema = GetAllPrompts2Prompts2$outboundSchema;
  /** @deprecated use `GetAllPrompts2Prompts2$Outbound` instead. */
  export type Outbound = GetAllPrompts2Prompts2$Outbound;
}

export function getAllPrompts2Prompts2ToJSON(
  getAllPrompts2Prompts2: GetAllPrompts2Prompts2,
): string {
  return JSON.stringify(
    GetAllPrompts2Prompts2$outboundSchema.parse(getAllPrompts2Prompts2),
  );
}

export function getAllPrompts2Prompts2FromJSON(
  jsonString: string,
): SafeParseResult<GetAllPrompts2Prompts2, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetAllPrompts2Prompts2$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetAllPrompts2Prompts2' from JSON`,
  );
}

/** @internal */
export const GetAllPrompts2PromptsResponseType$inboundSchema: z.ZodNativeEnum<
  typeof GetAllPrompts2PromptsResponseType
> = z.nativeEnum(GetAllPrompts2PromptsResponseType);

/** @internal */
export const GetAllPrompts2PromptsResponseType$outboundSchema: z.ZodNativeEnum<
  typeof GetAllPrompts2PromptsResponseType
> = GetAllPrompts2PromptsResponseType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPrompts2PromptsResponseType$ {
  /** @deprecated use `GetAllPrompts2PromptsResponseType$inboundSchema` instead. */
  export const inboundSchema = GetAllPrompts2PromptsResponseType$inboundSchema;
  /** @deprecated use `GetAllPrompts2PromptsResponseType$outboundSchema` instead. */
  export const outboundSchema =
    GetAllPrompts2PromptsResponseType$outboundSchema;
}

/** @internal */
export const GetAllPrompts2Prompts1$inboundSchema: z.ZodType<
  GetAllPrompts2Prompts1,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: GetAllPrompts2PromptsResponseType$inboundSchema,
  text: z.string(),
});

/** @internal */
export type GetAllPrompts2Prompts1$Outbound = {
  type: string;
  text: string;
};

/** @internal */
export const GetAllPrompts2Prompts1$outboundSchema: z.ZodType<
  GetAllPrompts2Prompts1$Outbound,
  z.ZodTypeDef,
  GetAllPrompts2Prompts1
> = z.object({
  type: GetAllPrompts2PromptsResponseType$outboundSchema,
  text: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPrompts2Prompts1$ {
  /** @deprecated use `GetAllPrompts2Prompts1$inboundSchema` instead. */
  export const inboundSchema = GetAllPrompts2Prompts1$inboundSchema;
  /** @deprecated use `GetAllPrompts2Prompts1$outboundSchema` instead. */
  export const outboundSchema = GetAllPrompts2Prompts1$outboundSchema;
  /** @deprecated use `GetAllPrompts2Prompts1$Outbound` instead. */
  export type Outbound = GetAllPrompts2Prompts1$Outbound;
}

export function getAllPrompts2Prompts1ToJSON(
  getAllPrompts2Prompts1: GetAllPrompts2Prompts1,
): string {
  return JSON.stringify(
    GetAllPrompts2Prompts1$outboundSchema.parse(getAllPrompts2Prompts1),
  );
}

export function getAllPrompts2Prompts1FromJSON(
  jsonString: string,
): SafeParseResult<GetAllPrompts2Prompts1, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetAllPrompts2Prompts1$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetAllPrompts2Prompts1' from JSON`,
  );
}

/** @internal */
export const GetAllPromptsContentPrompts2$inboundSchema: z.ZodType<
  GetAllPromptsContentPrompts2,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => GetAllPrompts2Prompts1$inboundSchema),
  z.lazy(() => GetAllPrompts2Prompts2$inboundSchema),
]);

/** @internal */
export type GetAllPromptsContentPrompts2$Outbound =
  | GetAllPrompts2Prompts1$Outbound
  | GetAllPrompts2Prompts2$Outbound;

/** @internal */
export const GetAllPromptsContentPrompts2$outboundSchema: z.ZodType<
  GetAllPromptsContentPrompts2$Outbound,
  z.ZodTypeDef,
  GetAllPromptsContentPrompts2
> = z.union([
  z.lazy(() => GetAllPrompts2Prompts1$outboundSchema),
  z.lazy(() => GetAllPrompts2Prompts2$outboundSchema),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPromptsContentPrompts2$ {
  /** @deprecated use `GetAllPromptsContentPrompts2$inboundSchema` instead. */
  export const inboundSchema = GetAllPromptsContentPrompts2$inboundSchema;
  /** @deprecated use `GetAllPromptsContentPrompts2$outboundSchema` instead. */
  export const outboundSchema = GetAllPromptsContentPrompts2$outboundSchema;
  /** @deprecated use `GetAllPromptsContentPrompts2$Outbound` instead. */
  export type Outbound = GetAllPromptsContentPrompts2$Outbound;
}

export function getAllPromptsContentPrompts2ToJSON(
  getAllPromptsContentPrompts2: GetAllPromptsContentPrompts2,
): string {
  return JSON.stringify(
    GetAllPromptsContentPrompts2$outboundSchema.parse(
      getAllPromptsContentPrompts2,
    ),
  );
}

export function getAllPromptsContentPrompts2FromJSON(
  jsonString: string,
): SafeParseResult<GetAllPromptsContentPrompts2, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetAllPromptsContentPrompts2$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetAllPromptsContentPrompts2' from JSON`,
  );
}

/** @internal */
export const GetAllPromptsItemsPromptsContent$inboundSchema: z.ZodType<
  GetAllPromptsItemsPromptsContent,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.string(),
  z.array(z.union([
    z.lazy(() => GetAllPrompts2Prompts1$inboundSchema),
    z.lazy(() => GetAllPrompts2Prompts2$inboundSchema),
  ])),
]);

/** @internal */
export type GetAllPromptsItemsPromptsContent$Outbound =
  | string
  | Array<GetAllPrompts2Prompts1$Outbound | GetAllPrompts2Prompts2$Outbound>;

/** @internal */
export const GetAllPromptsItemsPromptsContent$outboundSchema: z.ZodType<
  GetAllPromptsItemsPromptsContent$Outbound,
  z.ZodTypeDef,
  GetAllPromptsItemsPromptsContent
> = z.union([
  z.string(),
  z.array(z.union([
    z.lazy(() => GetAllPrompts2Prompts1$outboundSchema),
    z.lazy(() => GetAllPrompts2Prompts2$outboundSchema),
  ])),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPromptsItemsPromptsContent$ {
  /** @deprecated use `GetAllPromptsItemsPromptsContent$inboundSchema` instead. */
  export const inboundSchema = GetAllPromptsItemsPromptsContent$inboundSchema;
  /** @deprecated use `GetAllPromptsItemsPromptsContent$outboundSchema` instead. */
  export const outboundSchema = GetAllPromptsItemsPromptsContent$outboundSchema;
  /** @deprecated use `GetAllPromptsItemsPromptsContent$Outbound` instead. */
  export type Outbound = GetAllPromptsItemsPromptsContent$Outbound;
}

export function getAllPromptsItemsPromptsContentToJSON(
  getAllPromptsItemsPromptsContent: GetAllPromptsItemsPromptsContent,
): string {
  return JSON.stringify(
    GetAllPromptsItemsPromptsContent$outboundSchema.parse(
      getAllPromptsItemsPromptsContent,
    ),
  );
}

export function getAllPromptsItemsPromptsContentFromJSON(
  jsonString: string,
): SafeParseResult<GetAllPromptsItemsPromptsContent, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetAllPromptsItemsPromptsContent$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetAllPromptsItemsPromptsContent' from JSON`,
  );
}

/** @internal */
export const GetAllPromptsItemsPromptsResponse200ApplicationJSONResponseBodyType$inboundSchema:
  z.ZodNativeEnum<
    typeof GetAllPromptsItemsPromptsResponse200ApplicationJSONResponseBodyType
  > = z.nativeEnum(
    GetAllPromptsItemsPromptsResponse200ApplicationJSONResponseBodyType,
  );

/** @internal */
export const GetAllPromptsItemsPromptsResponse200ApplicationJSONResponseBodyType$outboundSchema:
  z.ZodNativeEnum<
    typeof GetAllPromptsItemsPromptsResponse200ApplicationJSONResponseBodyType
  > =
    GetAllPromptsItemsPromptsResponse200ApplicationJSONResponseBodyType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPromptsItemsPromptsResponse200ApplicationJSONResponseBodyType$ {
  /** @deprecated use `GetAllPromptsItemsPromptsResponse200ApplicationJSONResponseBodyType$inboundSchema` instead. */
  export const inboundSchema =
    GetAllPromptsItemsPromptsResponse200ApplicationJSONResponseBodyType$inboundSchema;
  /** @deprecated use `GetAllPromptsItemsPromptsResponse200ApplicationJSONResponseBodyType$outboundSchema` instead. */
  export const outboundSchema =
    GetAllPromptsItemsPromptsResponse200ApplicationJSONResponseBodyType$outboundSchema;
}

/** @internal */
export const GetAllPromptsItemsPromptsFunction$inboundSchema: z.ZodType<
  GetAllPromptsItemsPromptsFunction,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.string(),
  arguments: z.string(),
});

/** @internal */
export type GetAllPromptsItemsPromptsFunction$Outbound = {
  name: string;
  arguments: string;
};

/** @internal */
export const GetAllPromptsItemsPromptsFunction$outboundSchema: z.ZodType<
  GetAllPromptsItemsPromptsFunction$Outbound,
  z.ZodTypeDef,
  GetAllPromptsItemsPromptsFunction
> = z.object({
  name: z.string(),
  arguments: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPromptsItemsPromptsFunction$ {
  /** @deprecated use `GetAllPromptsItemsPromptsFunction$inboundSchema` instead. */
  export const inboundSchema = GetAllPromptsItemsPromptsFunction$inboundSchema;
  /** @deprecated use `GetAllPromptsItemsPromptsFunction$outboundSchema` instead. */
  export const outboundSchema =
    GetAllPromptsItemsPromptsFunction$outboundSchema;
  /** @deprecated use `GetAllPromptsItemsPromptsFunction$Outbound` instead. */
  export type Outbound = GetAllPromptsItemsPromptsFunction$Outbound;
}

export function getAllPromptsItemsPromptsFunctionToJSON(
  getAllPromptsItemsPromptsFunction: GetAllPromptsItemsPromptsFunction,
): string {
  return JSON.stringify(
    GetAllPromptsItemsPromptsFunction$outboundSchema.parse(
      getAllPromptsItemsPromptsFunction,
    ),
  );
}

export function getAllPromptsItemsPromptsFunctionFromJSON(
  jsonString: string,
): SafeParseResult<GetAllPromptsItemsPromptsFunction, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetAllPromptsItemsPromptsFunction$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetAllPromptsItemsPromptsFunction' from JSON`,
  );
}

/** @internal */
export const GetAllPromptsItemsPromptsToolCalls$inboundSchema: z.ZodType<
  GetAllPromptsItemsPromptsToolCalls,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string().optional(),
  index: z.number().optional(),
  type:
    GetAllPromptsItemsPromptsResponse200ApplicationJSONResponseBodyType$inboundSchema,
  function: z.lazy(() => GetAllPromptsItemsPromptsFunction$inboundSchema),
});

/** @internal */
export type GetAllPromptsItemsPromptsToolCalls$Outbound = {
  id?: string | undefined;
  index?: number | undefined;
  type: string;
  function: GetAllPromptsItemsPromptsFunction$Outbound;
};

/** @internal */
export const GetAllPromptsItemsPromptsToolCalls$outboundSchema: z.ZodType<
  GetAllPromptsItemsPromptsToolCalls$Outbound,
  z.ZodTypeDef,
  GetAllPromptsItemsPromptsToolCalls
> = z.object({
  id: z.string().optional(),
  index: z.number().optional(),
  type:
    GetAllPromptsItemsPromptsResponse200ApplicationJSONResponseBodyType$outboundSchema,
  function: z.lazy(() => GetAllPromptsItemsPromptsFunction$outboundSchema),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPromptsItemsPromptsToolCalls$ {
  /** @deprecated use `GetAllPromptsItemsPromptsToolCalls$inboundSchema` instead. */
  export const inboundSchema = GetAllPromptsItemsPromptsToolCalls$inboundSchema;
  /** @deprecated use `GetAllPromptsItemsPromptsToolCalls$outboundSchema` instead. */
  export const outboundSchema =
    GetAllPromptsItemsPromptsToolCalls$outboundSchema;
  /** @deprecated use `GetAllPromptsItemsPromptsToolCalls$Outbound` instead. */
  export type Outbound = GetAllPromptsItemsPromptsToolCalls$Outbound;
}

export function getAllPromptsItemsPromptsToolCallsToJSON(
  getAllPromptsItemsPromptsToolCalls: GetAllPromptsItemsPromptsToolCalls,
): string {
  return JSON.stringify(
    GetAllPromptsItemsPromptsToolCalls$outboundSchema.parse(
      getAllPromptsItemsPromptsToolCalls,
    ),
  );
}

export function getAllPromptsItemsPromptsToolCallsFromJSON(
  jsonString: string,
): SafeParseResult<GetAllPromptsItemsPromptsToolCalls, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      GetAllPromptsItemsPromptsToolCalls$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetAllPromptsItemsPromptsToolCalls' from JSON`,
  );
}

/** @internal */
export const GetAllPromptsItemsPromptsMessages$inboundSchema: z.ZodType<
  GetAllPromptsItemsPromptsMessages,
  z.ZodTypeDef,
  unknown
> = z.object({
  role: GetAllPromptsItemsPromptsRole$inboundSchema,
  content: z.union([
    z.string(),
    z.array(z.union([
      z.lazy(() => GetAllPrompts2Prompts1$inboundSchema),
      z.lazy(() => GetAllPrompts2Prompts2$inboundSchema),
    ])),
  ]),
  tool_calls: z.array(
    z.lazy(() => GetAllPromptsItemsPromptsToolCalls$inboundSchema),
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    "tool_calls": "toolCalls",
  });
});

/** @internal */
export type GetAllPromptsItemsPromptsMessages$Outbound = {
  role: string;
  content:
    | string
    | Array<GetAllPrompts2Prompts1$Outbound | GetAllPrompts2Prompts2$Outbound>;
  tool_calls?: Array<GetAllPromptsItemsPromptsToolCalls$Outbound> | undefined;
};

/** @internal */
export const GetAllPromptsItemsPromptsMessages$outboundSchema: z.ZodType<
  GetAllPromptsItemsPromptsMessages$Outbound,
  z.ZodTypeDef,
  GetAllPromptsItemsPromptsMessages
> = z.object({
  role: GetAllPromptsItemsPromptsRole$outboundSchema,
  content: z.union([
    z.string(),
    z.array(z.union([
      z.lazy(() => GetAllPrompts2Prompts1$outboundSchema),
      z.lazy(() => GetAllPrompts2Prompts2$outboundSchema),
    ])),
  ]),
  toolCalls: z.array(
    z.lazy(() => GetAllPromptsItemsPromptsToolCalls$outboundSchema),
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    toolCalls: "tool_calls",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPromptsItemsPromptsMessages$ {
  /** @deprecated use `GetAllPromptsItemsPromptsMessages$inboundSchema` instead. */
  export const inboundSchema = GetAllPromptsItemsPromptsMessages$inboundSchema;
  /** @deprecated use `GetAllPromptsItemsPromptsMessages$outboundSchema` instead. */
  export const outboundSchema =
    GetAllPromptsItemsPromptsMessages$outboundSchema;
  /** @deprecated use `GetAllPromptsItemsPromptsMessages$Outbound` instead. */
  export type Outbound = GetAllPromptsItemsPromptsMessages$Outbound;
}

export function getAllPromptsItemsPromptsMessagesToJSON(
  getAllPromptsItemsPromptsMessages: GetAllPromptsItemsPromptsMessages,
): string {
  return JSON.stringify(
    GetAllPromptsItemsPromptsMessages$outboundSchema.parse(
      getAllPromptsItemsPromptsMessages,
    ),
  );
}

export function getAllPromptsItemsPromptsMessagesFromJSON(
  jsonString: string,
): SafeParseResult<GetAllPromptsItemsPromptsMessages, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetAllPromptsItemsPromptsMessages$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetAllPromptsItemsPromptsMessages' from JSON`,
  );
}

/** @internal */
export const GetAllPromptsItemsPromptsPromptConfig$inboundSchema: z.ZodType<
  GetAllPromptsItemsPromptsPromptConfig,
  z.ZodTypeDef,
  unknown
> = z.object({
  stream: z.boolean().optional(),
  model: z.string().optional(),
  model_db_id: z.string().optional(),
  model_type: GetAllPromptsItemsPromptsModelType$inboundSchema.optional(),
  model_parameters: z.lazy(() =>
    GetAllPromptsItemsPromptsModelParameters$inboundSchema
  ).optional(),
  provider: GetAllPromptsItemsPromptsProvider$inboundSchema.optional(),
  integration_id: z.nullable(z.string()).optional(),
  version: z.string().optional(),
  messages: z.array(
    z.lazy(() => GetAllPromptsItemsPromptsMessages$inboundSchema),
  ),
}).transform((v) => {
  return remap$(v, {
    "model_db_id": "modelDbId",
    "model_type": "modelType",
    "model_parameters": "modelParameters",
    "integration_id": "integrationId",
  });
});

/** @internal */
export type GetAllPromptsItemsPromptsPromptConfig$Outbound = {
  stream?: boolean | undefined;
  model?: string | undefined;
  model_db_id?: string | undefined;
  model_type?: string | undefined;
  model_parameters?:
    | GetAllPromptsItemsPromptsModelParameters$Outbound
    | undefined;
  provider?: string | undefined;
  integration_id?: string | null | undefined;
  version?: string | undefined;
  messages: Array<GetAllPromptsItemsPromptsMessages$Outbound>;
};

/** @internal */
export const GetAllPromptsItemsPromptsPromptConfig$outboundSchema: z.ZodType<
  GetAllPromptsItemsPromptsPromptConfig$Outbound,
  z.ZodTypeDef,
  GetAllPromptsItemsPromptsPromptConfig
> = z.object({
  stream: z.boolean().optional(),
  model: z.string().optional(),
  modelDbId: z.string().optional(),
  modelType: GetAllPromptsItemsPromptsModelType$outboundSchema.optional(),
  modelParameters: z.lazy(() =>
    GetAllPromptsItemsPromptsModelParameters$outboundSchema
  ).optional(),
  provider: GetAllPromptsItemsPromptsProvider$outboundSchema.optional(),
  integrationId: z.nullable(z.string()).optional(),
  version: z.string().optional(),
  messages: z.array(
    z.lazy(() => GetAllPromptsItemsPromptsMessages$outboundSchema),
  ),
}).transform((v) => {
  return remap$(v, {
    modelDbId: "model_db_id",
    modelType: "model_type",
    modelParameters: "model_parameters",
    integrationId: "integration_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPromptsItemsPromptsPromptConfig$ {
  /** @deprecated use `GetAllPromptsItemsPromptsPromptConfig$inboundSchema` instead. */
  export const inboundSchema =
    GetAllPromptsItemsPromptsPromptConfig$inboundSchema;
  /** @deprecated use `GetAllPromptsItemsPromptsPromptConfig$outboundSchema` instead. */
  export const outboundSchema =
    GetAllPromptsItemsPromptsPromptConfig$outboundSchema;
  /** @deprecated use `GetAllPromptsItemsPromptsPromptConfig$Outbound` instead. */
  export type Outbound = GetAllPromptsItemsPromptsPromptConfig$Outbound;
}

export function getAllPromptsItemsPromptsPromptConfigToJSON(
  getAllPromptsItemsPromptsPromptConfig: GetAllPromptsItemsPromptsPromptConfig,
): string {
  return JSON.stringify(
    GetAllPromptsItemsPromptsPromptConfig$outboundSchema.parse(
      getAllPromptsItemsPromptsPromptConfig,
    ),
  );
}

export function getAllPromptsItemsPromptsPromptConfigFromJSON(
  jsonString: string,
): SafeParseResult<GetAllPromptsItemsPromptsPromptConfig, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      GetAllPromptsItemsPromptsPromptConfig$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetAllPromptsItemsPromptsPromptConfig' from JSON`,
  );
}

/** @internal */
export const GetAllPromptsItemsPromptsMetadata$inboundSchema: z.ZodType<
  GetAllPromptsItemsPromptsMetadata,
  z.ZodTypeDef,
  unknown
> = z.object({
  use_cases: z.array(z.string()).optional(),
  language: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "use_cases": "useCases",
  });
});

/** @internal */
export type GetAllPromptsItemsPromptsMetadata$Outbound = {
  use_cases?: Array<string> | undefined;
  language?: string | undefined;
};

/** @internal */
export const GetAllPromptsItemsPromptsMetadata$outboundSchema: z.ZodType<
  GetAllPromptsItemsPromptsMetadata$Outbound,
  z.ZodTypeDef,
  GetAllPromptsItemsPromptsMetadata
> = z.object({
  useCases: z.array(z.string()).optional(),
  language: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    useCases: "use_cases",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPromptsItemsPromptsMetadata$ {
  /** @deprecated use `GetAllPromptsItemsPromptsMetadata$inboundSchema` instead. */
  export const inboundSchema = GetAllPromptsItemsPromptsMetadata$inboundSchema;
  /** @deprecated use `GetAllPromptsItemsPromptsMetadata$outboundSchema` instead. */
  export const outboundSchema =
    GetAllPromptsItemsPromptsMetadata$outboundSchema;
  /** @deprecated use `GetAllPromptsItemsPromptsMetadata$Outbound` instead. */
  export type Outbound = GetAllPromptsItemsPromptsMetadata$Outbound;
}

export function getAllPromptsItemsPromptsMetadataToJSON(
  getAllPromptsItemsPromptsMetadata: GetAllPromptsItemsPromptsMetadata,
): string {
  return JSON.stringify(
    GetAllPromptsItemsPromptsMetadata$outboundSchema.parse(
      getAllPromptsItemsPromptsMetadata,
    ),
  );
}

export function getAllPromptsItemsPromptsMetadataFromJSON(
  jsonString: string,
): SafeParseResult<GetAllPromptsItemsPromptsMetadata, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetAllPromptsItemsPromptsMetadata$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetAllPromptsItemsPromptsMetadata' from JSON`,
  );
}

/** @internal */
export const GetAllPromptsItemsPromptsResponse200ModelType$inboundSchema:
  z.ZodNativeEnum<typeof GetAllPromptsItemsPromptsResponse200ModelType> = z
    .nativeEnum(GetAllPromptsItemsPromptsResponse200ModelType);

/** @internal */
export const GetAllPromptsItemsPromptsResponse200ModelType$outboundSchema:
  z.ZodNativeEnum<typeof GetAllPromptsItemsPromptsResponse200ModelType> =
    GetAllPromptsItemsPromptsResponse200ModelType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPromptsItemsPromptsResponse200ModelType$ {
  /** @deprecated use `GetAllPromptsItemsPromptsResponse200ModelType$inboundSchema` instead. */
  export const inboundSchema =
    GetAllPromptsItemsPromptsResponse200ModelType$inboundSchema;
  /** @deprecated use `GetAllPromptsItemsPromptsResponse200ModelType$outboundSchema` instead. */
  export const outboundSchema =
    GetAllPromptsItemsPromptsResponse200ModelType$outboundSchema;
}

/** @internal */
export const GetAllPromptsItemsPromptsResponse200ApplicationJSONFormat$inboundSchema:
  z.ZodNativeEnum<
    typeof GetAllPromptsItemsPromptsResponse200ApplicationJSONFormat
  > = z.nativeEnum(GetAllPromptsItemsPromptsResponse200ApplicationJSONFormat);

/** @internal */
export const GetAllPromptsItemsPromptsResponse200ApplicationJSONFormat$outboundSchema:
  z.ZodNativeEnum<
    typeof GetAllPromptsItemsPromptsResponse200ApplicationJSONFormat
  > = GetAllPromptsItemsPromptsResponse200ApplicationJSONFormat$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPromptsItemsPromptsResponse200ApplicationJSONFormat$ {
  /** @deprecated use `GetAllPromptsItemsPromptsResponse200ApplicationJSONFormat$inboundSchema` instead. */
  export const inboundSchema =
    GetAllPromptsItemsPromptsResponse200ApplicationJSONFormat$inboundSchema;
  /** @deprecated use `GetAllPromptsItemsPromptsResponse200ApplicationJSONFormat$outboundSchema` instead. */
  export const outboundSchema =
    GetAllPromptsItemsPromptsResponse200ApplicationJSONFormat$outboundSchema;
}

/** @internal */
export const GetAllPromptsItemsPromptsResponse200Quality$inboundSchema:
  z.ZodNativeEnum<typeof GetAllPromptsItemsPromptsResponse200Quality> = z
    .nativeEnum(GetAllPromptsItemsPromptsResponse200Quality);

/** @internal */
export const GetAllPromptsItemsPromptsResponse200Quality$outboundSchema:
  z.ZodNativeEnum<typeof GetAllPromptsItemsPromptsResponse200Quality> =
    GetAllPromptsItemsPromptsResponse200Quality$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPromptsItemsPromptsResponse200Quality$ {
  /** @deprecated use `GetAllPromptsItemsPromptsResponse200Quality$inboundSchema` instead. */
  export const inboundSchema =
    GetAllPromptsItemsPromptsResponse200Quality$inboundSchema;
  /** @deprecated use `GetAllPromptsItemsPromptsResponse200Quality$outboundSchema` instead. */
  export const outboundSchema =
    GetAllPromptsItemsPromptsResponse200Quality$outboundSchema;
}

/** @internal */
export const GetAllPromptsResponseFormatPromptsResponse200ApplicationJSONResponseBodyItems2Type$inboundSchema:
  z.ZodNativeEnum<
    typeof GetAllPromptsResponseFormatPromptsResponse200ApplicationJSONResponseBodyItems2Type
  > = z.nativeEnum(
    GetAllPromptsResponseFormatPromptsResponse200ApplicationJSONResponseBodyItems2Type,
  );

/** @internal */
export const GetAllPromptsResponseFormatPromptsResponse200ApplicationJSONResponseBodyItems2Type$outboundSchema:
  z.ZodNativeEnum<
    typeof GetAllPromptsResponseFormatPromptsResponse200ApplicationJSONResponseBodyItems2Type
  > =
    GetAllPromptsResponseFormatPromptsResponse200ApplicationJSONResponseBodyItems2Type$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPromptsResponseFormatPromptsResponse200ApplicationJSONResponseBodyItems2Type$ {
  /** @deprecated use `GetAllPromptsResponseFormatPromptsResponse200ApplicationJSONResponseBodyItems2Type$inboundSchema` instead. */
  export const inboundSchema =
    GetAllPromptsResponseFormatPromptsResponse200ApplicationJSONResponseBodyItems2Type$inboundSchema;
  /** @deprecated use `GetAllPromptsResponseFormatPromptsResponse200ApplicationJSONResponseBodyItems2Type$outboundSchema` instead. */
  export const outboundSchema =
    GetAllPromptsResponseFormatPromptsResponse200ApplicationJSONResponseBodyItems2Type$outboundSchema;
}

/** @internal */
export const GetAllPromptsResponseFormatPromptsResponse2002$inboundSchema:
  z.ZodType<
    GetAllPromptsResponseFormatPromptsResponse2002,
    z.ZodTypeDef,
    unknown
  > = z.object({
    type:
      GetAllPromptsResponseFormatPromptsResponse200ApplicationJSONResponseBodyItems2Type$inboundSchema,
  });

/** @internal */
export type GetAllPromptsResponseFormatPromptsResponse2002$Outbound = {
  type: string;
};

/** @internal */
export const GetAllPromptsResponseFormatPromptsResponse2002$outboundSchema:
  z.ZodType<
    GetAllPromptsResponseFormatPromptsResponse2002$Outbound,
    z.ZodTypeDef,
    GetAllPromptsResponseFormatPromptsResponse2002
  > = z.object({
    type:
      GetAllPromptsResponseFormatPromptsResponse200ApplicationJSONResponseBodyItems2Type$outboundSchema,
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPromptsResponseFormatPromptsResponse2002$ {
  /** @deprecated use `GetAllPromptsResponseFormatPromptsResponse2002$inboundSchema` instead. */
  export const inboundSchema =
    GetAllPromptsResponseFormatPromptsResponse2002$inboundSchema;
  /** @deprecated use `GetAllPromptsResponseFormatPromptsResponse2002$outboundSchema` instead. */
  export const outboundSchema =
    GetAllPromptsResponseFormatPromptsResponse2002$outboundSchema;
  /** @deprecated use `GetAllPromptsResponseFormatPromptsResponse2002$Outbound` instead. */
  export type Outbound =
    GetAllPromptsResponseFormatPromptsResponse2002$Outbound;
}

export function getAllPromptsResponseFormatPromptsResponse2002ToJSON(
  getAllPromptsResponseFormatPromptsResponse2002:
    GetAllPromptsResponseFormatPromptsResponse2002,
): string {
  return JSON.stringify(
    GetAllPromptsResponseFormatPromptsResponse2002$outboundSchema.parse(
      getAllPromptsResponseFormatPromptsResponse2002,
    ),
  );
}

export function getAllPromptsResponseFormatPromptsResponse2002FromJSON(
  jsonString: string,
): SafeParseResult<
  GetAllPromptsResponseFormatPromptsResponse2002,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetAllPromptsResponseFormatPromptsResponse2002$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'GetAllPromptsResponseFormatPromptsResponse2002' from JSON`,
  );
}

/** @internal */
export const GetAllPromptsResponseFormatPromptsResponse200ApplicationJSONResponseBodyItemsType$inboundSchema:
  z.ZodNativeEnum<
    typeof GetAllPromptsResponseFormatPromptsResponse200ApplicationJSONResponseBodyItemsType
  > = z.nativeEnum(
    GetAllPromptsResponseFormatPromptsResponse200ApplicationJSONResponseBodyItemsType,
  );

/** @internal */
export const GetAllPromptsResponseFormatPromptsResponse200ApplicationJSONResponseBodyItemsType$outboundSchema:
  z.ZodNativeEnum<
    typeof GetAllPromptsResponseFormatPromptsResponse200ApplicationJSONResponseBodyItemsType
  > =
    GetAllPromptsResponseFormatPromptsResponse200ApplicationJSONResponseBodyItemsType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPromptsResponseFormatPromptsResponse200ApplicationJSONResponseBodyItemsType$ {
  /** @deprecated use `GetAllPromptsResponseFormatPromptsResponse200ApplicationJSONResponseBodyItemsType$inboundSchema` instead. */
  export const inboundSchema =
    GetAllPromptsResponseFormatPromptsResponse200ApplicationJSONResponseBodyItemsType$inboundSchema;
  /** @deprecated use `GetAllPromptsResponseFormatPromptsResponse200ApplicationJSONResponseBodyItemsType$outboundSchema` instead. */
  export const outboundSchema =
    GetAllPromptsResponseFormatPromptsResponse200ApplicationJSONResponseBodyItemsType$outboundSchema;
}

/** @internal */
export const GetAllPromptsResponseFormatPromptsResponse200JsonSchema$inboundSchema:
  z.ZodType<
    GetAllPromptsResponseFormatPromptsResponse200JsonSchema,
    z.ZodTypeDef,
    unknown
  > = z.object({
    name: z.string(),
    strict: z.boolean(),
    schema: z.record(z.any()),
  });

/** @internal */
export type GetAllPromptsResponseFormatPromptsResponse200JsonSchema$Outbound = {
  name: string;
  strict: boolean;
  schema: { [k: string]: any };
};

/** @internal */
export const GetAllPromptsResponseFormatPromptsResponse200JsonSchema$outboundSchema:
  z.ZodType<
    GetAllPromptsResponseFormatPromptsResponse200JsonSchema$Outbound,
    z.ZodTypeDef,
    GetAllPromptsResponseFormatPromptsResponse200JsonSchema
  > = z.object({
    name: z.string(),
    strict: z.boolean(),
    schema: z.record(z.any()),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPromptsResponseFormatPromptsResponse200JsonSchema$ {
  /** @deprecated use `GetAllPromptsResponseFormatPromptsResponse200JsonSchema$inboundSchema` instead. */
  export const inboundSchema =
    GetAllPromptsResponseFormatPromptsResponse200JsonSchema$inboundSchema;
  /** @deprecated use `GetAllPromptsResponseFormatPromptsResponse200JsonSchema$outboundSchema` instead. */
  export const outboundSchema =
    GetAllPromptsResponseFormatPromptsResponse200JsonSchema$outboundSchema;
  /** @deprecated use `GetAllPromptsResponseFormatPromptsResponse200JsonSchema$Outbound` instead. */
  export type Outbound =
    GetAllPromptsResponseFormatPromptsResponse200JsonSchema$Outbound;
}

export function getAllPromptsResponseFormatPromptsResponse200JsonSchemaToJSON(
  getAllPromptsResponseFormatPromptsResponse200JsonSchema:
    GetAllPromptsResponseFormatPromptsResponse200JsonSchema,
): string {
  return JSON.stringify(
    GetAllPromptsResponseFormatPromptsResponse200JsonSchema$outboundSchema
      .parse(getAllPromptsResponseFormatPromptsResponse200JsonSchema),
  );
}

export function getAllPromptsResponseFormatPromptsResponse200JsonSchemaFromJSON(
  jsonString: string,
): SafeParseResult<
  GetAllPromptsResponseFormatPromptsResponse200JsonSchema,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetAllPromptsResponseFormatPromptsResponse200JsonSchema$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'GetAllPromptsResponseFormatPromptsResponse200JsonSchema' from JSON`,
  );
}

/** @internal */
export const GetAllPromptsResponseFormatPromptsResponse2001$inboundSchema:
  z.ZodType<
    GetAllPromptsResponseFormatPromptsResponse2001,
    z.ZodTypeDef,
    unknown
  > = z.object({
    type:
      GetAllPromptsResponseFormatPromptsResponse200ApplicationJSONResponseBodyItemsType$inboundSchema,
    json_schema: z.lazy(() =>
      GetAllPromptsResponseFormatPromptsResponse200JsonSchema$inboundSchema
    ),
  }).transform((v) => {
    return remap$(v, {
      "json_schema": "jsonSchema",
    });
  });

/** @internal */
export type GetAllPromptsResponseFormatPromptsResponse2001$Outbound = {
  type: string;
  json_schema: GetAllPromptsResponseFormatPromptsResponse200JsonSchema$Outbound;
};

/** @internal */
export const GetAllPromptsResponseFormatPromptsResponse2001$outboundSchema:
  z.ZodType<
    GetAllPromptsResponseFormatPromptsResponse2001$Outbound,
    z.ZodTypeDef,
    GetAllPromptsResponseFormatPromptsResponse2001
  > = z.object({
    type:
      GetAllPromptsResponseFormatPromptsResponse200ApplicationJSONResponseBodyItemsType$outboundSchema,
    jsonSchema: z.lazy(() =>
      GetAllPromptsResponseFormatPromptsResponse200JsonSchema$outboundSchema
    ),
  }).transform((v) => {
    return remap$(v, {
      jsonSchema: "json_schema",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPromptsResponseFormatPromptsResponse2001$ {
  /** @deprecated use `GetAllPromptsResponseFormatPromptsResponse2001$inboundSchema` instead. */
  export const inboundSchema =
    GetAllPromptsResponseFormatPromptsResponse2001$inboundSchema;
  /** @deprecated use `GetAllPromptsResponseFormatPromptsResponse2001$outboundSchema` instead. */
  export const outboundSchema =
    GetAllPromptsResponseFormatPromptsResponse2001$outboundSchema;
  /** @deprecated use `GetAllPromptsResponseFormatPromptsResponse2001$Outbound` instead. */
  export type Outbound =
    GetAllPromptsResponseFormatPromptsResponse2001$Outbound;
}

export function getAllPromptsResponseFormatPromptsResponse2001ToJSON(
  getAllPromptsResponseFormatPromptsResponse2001:
    GetAllPromptsResponseFormatPromptsResponse2001,
): string {
  return JSON.stringify(
    GetAllPromptsResponseFormatPromptsResponse2001$outboundSchema.parse(
      getAllPromptsResponseFormatPromptsResponse2001,
    ),
  );
}

export function getAllPromptsResponseFormatPromptsResponse2001FromJSON(
  jsonString: string,
): SafeParseResult<
  GetAllPromptsResponseFormatPromptsResponse2001,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetAllPromptsResponseFormatPromptsResponse2001$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'GetAllPromptsResponseFormatPromptsResponse2001' from JSON`,
  );
}

/** @internal */
export const GetAllPromptsItemsPromptsResponse200ResponseFormat$inboundSchema:
  z.ZodType<
    GetAllPromptsItemsPromptsResponse200ResponseFormat,
    z.ZodTypeDef,
    unknown
  > = z.union([
    z.lazy(() => GetAllPromptsResponseFormatPromptsResponse2002$inboundSchema),
    z.lazy(() => GetAllPromptsResponseFormatPromptsResponse2001$inboundSchema),
  ]);

/** @internal */
export type GetAllPromptsItemsPromptsResponse200ResponseFormat$Outbound =
  | GetAllPromptsResponseFormatPromptsResponse2002$Outbound
  | GetAllPromptsResponseFormatPromptsResponse2001$Outbound;

/** @internal */
export const GetAllPromptsItemsPromptsResponse200ResponseFormat$outboundSchema:
  z.ZodType<
    GetAllPromptsItemsPromptsResponse200ResponseFormat$Outbound,
    z.ZodTypeDef,
    GetAllPromptsItemsPromptsResponse200ResponseFormat
  > = z.union([
    z.lazy(() => GetAllPromptsResponseFormatPromptsResponse2002$outboundSchema),
    z.lazy(() => GetAllPromptsResponseFormatPromptsResponse2001$outboundSchema),
  ]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPromptsItemsPromptsResponse200ResponseFormat$ {
  /** @deprecated use `GetAllPromptsItemsPromptsResponse200ResponseFormat$inboundSchema` instead. */
  export const inboundSchema =
    GetAllPromptsItemsPromptsResponse200ResponseFormat$inboundSchema;
  /** @deprecated use `GetAllPromptsItemsPromptsResponse200ResponseFormat$outboundSchema` instead. */
  export const outboundSchema =
    GetAllPromptsItemsPromptsResponse200ResponseFormat$outboundSchema;
  /** @deprecated use `GetAllPromptsItemsPromptsResponse200ResponseFormat$Outbound` instead. */
  export type Outbound =
    GetAllPromptsItemsPromptsResponse200ResponseFormat$Outbound;
}

export function getAllPromptsItemsPromptsResponse200ResponseFormatToJSON(
  getAllPromptsItemsPromptsResponse200ResponseFormat:
    GetAllPromptsItemsPromptsResponse200ResponseFormat,
): string {
  return JSON.stringify(
    GetAllPromptsItemsPromptsResponse200ResponseFormat$outboundSchema.parse(
      getAllPromptsItemsPromptsResponse200ResponseFormat,
    ),
  );
}

export function getAllPromptsItemsPromptsResponse200ResponseFormatFromJSON(
  jsonString: string,
): SafeParseResult<
  GetAllPromptsItemsPromptsResponse200ResponseFormat,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetAllPromptsItemsPromptsResponse200ResponseFormat$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'GetAllPromptsItemsPromptsResponse200ResponseFormat' from JSON`,
  );
}

/** @internal */
export const GetAllPromptsItemsPromptsResponse200PhotoRealVersion$inboundSchema:
  z.ZodNativeEnum<typeof GetAllPromptsItemsPromptsResponse200PhotoRealVersion> =
    z.nativeEnum(GetAllPromptsItemsPromptsResponse200PhotoRealVersion);

/** @internal */
export const GetAllPromptsItemsPromptsResponse200PhotoRealVersion$outboundSchema:
  z.ZodNativeEnum<typeof GetAllPromptsItemsPromptsResponse200PhotoRealVersion> =
    GetAllPromptsItemsPromptsResponse200PhotoRealVersion$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPromptsItemsPromptsResponse200PhotoRealVersion$ {
  /** @deprecated use `GetAllPromptsItemsPromptsResponse200PhotoRealVersion$inboundSchema` instead. */
  export const inboundSchema =
    GetAllPromptsItemsPromptsResponse200PhotoRealVersion$inboundSchema;
  /** @deprecated use `GetAllPromptsItemsPromptsResponse200PhotoRealVersion$outboundSchema` instead. */
  export const outboundSchema =
    GetAllPromptsItemsPromptsResponse200PhotoRealVersion$outboundSchema;
}

/** @internal */
export const GetAllPromptsItemsPromptsResponse200EncodingFormat$inboundSchema:
  z.ZodNativeEnum<typeof GetAllPromptsItemsPromptsResponse200EncodingFormat> = z
    .nativeEnum(GetAllPromptsItemsPromptsResponse200EncodingFormat);

/** @internal */
export const GetAllPromptsItemsPromptsResponse200EncodingFormat$outboundSchema:
  z.ZodNativeEnum<typeof GetAllPromptsItemsPromptsResponse200EncodingFormat> =
    GetAllPromptsItemsPromptsResponse200EncodingFormat$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPromptsItemsPromptsResponse200EncodingFormat$ {
  /** @deprecated use `GetAllPromptsItemsPromptsResponse200EncodingFormat$inboundSchema` instead. */
  export const inboundSchema =
    GetAllPromptsItemsPromptsResponse200EncodingFormat$inboundSchema;
  /** @deprecated use `GetAllPromptsItemsPromptsResponse200EncodingFormat$outboundSchema` instead. */
  export const outboundSchema =
    GetAllPromptsItemsPromptsResponse200EncodingFormat$outboundSchema;
}

/** @internal */
export const GetAllPromptsItemsPromptsResponse200ModelParameters$inboundSchema:
  z.ZodType<
    GetAllPromptsItemsPromptsResponse200ModelParameters,
    z.ZodTypeDef,
    unknown
  > = z.object({
    temperature: z.number().optional(),
    maxTokens: z.number().optional(),
    topK: z.number().optional(),
    topP: z.number().optional(),
    frequencyPenalty: z.number().optional(),
    presencePenalty: z.number().optional(),
    numImages: z.number().optional(),
    seed: z.number().optional(),
    format:
      GetAllPromptsItemsPromptsResponse200ApplicationJSONFormat$inboundSchema
        .optional(),
    dimensions: z.string().optional(),
    quality: GetAllPromptsItemsPromptsResponse200Quality$inboundSchema
      .optional(),
    style: z.string().optional(),
    responseFormat: z.nullable(
      z.union([
        z.lazy(() =>
          GetAllPromptsResponseFormatPromptsResponse2002$inboundSchema
        ),
        z.lazy(() =>
          GetAllPromptsResponseFormatPromptsResponse2001$inboundSchema
        ),
      ]),
    ).optional(),
    photoRealVersion:
      GetAllPromptsItemsPromptsResponse200PhotoRealVersion$inboundSchema
        .optional(),
    encoding_format:
      GetAllPromptsItemsPromptsResponse200EncodingFormat$inboundSchema
        .optional(),
  }).transform((v) => {
    return remap$(v, {
      "encoding_format": "encodingFormat",
    });
  });

/** @internal */
export type GetAllPromptsItemsPromptsResponse200ModelParameters$Outbound = {
  temperature?: number | undefined;
  maxTokens?: number | undefined;
  topK?: number | undefined;
  topP?: number | undefined;
  frequencyPenalty?: number | undefined;
  presencePenalty?: number | undefined;
  numImages?: number | undefined;
  seed?: number | undefined;
  format?: string | undefined;
  dimensions?: string | undefined;
  quality?: string | undefined;
  style?: string | undefined;
  responseFormat?:
    | GetAllPromptsResponseFormatPromptsResponse2002$Outbound
    | GetAllPromptsResponseFormatPromptsResponse2001$Outbound
    | null
    | undefined;
  photoRealVersion?: string | undefined;
  encoding_format?: string | undefined;
};

/** @internal */
export const GetAllPromptsItemsPromptsResponse200ModelParameters$outboundSchema:
  z.ZodType<
    GetAllPromptsItemsPromptsResponse200ModelParameters$Outbound,
    z.ZodTypeDef,
    GetAllPromptsItemsPromptsResponse200ModelParameters
  > = z.object({
    temperature: z.number().optional(),
    maxTokens: z.number().optional(),
    topK: z.number().optional(),
    topP: z.number().optional(),
    frequencyPenalty: z.number().optional(),
    presencePenalty: z.number().optional(),
    numImages: z.number().optional(),
    seed: z.number().optional(),
    format:
      GetAllPromptsItemsPromptsResponse200ApplicationJSONFormat$outboundSchema
        .optional(),
    dimensions: z.string().optional(),
    quality: GetAllPromptsItemsPromptsResponse200Quality$outboundSchema
      .optional(),
    style: z.string().optional(),
    responseFormat: z.nullable(
      z.union([
        z.lazy(() =>
          GetAllPromptsResponseFormatPromptsResponse2002$outboundSchema
        ),
        z.lazy(() =>
          GetAllPromptsResponseFormatPromptsResponse2001$outboundSchema
        ),
      ]),
    ).optional(),
    photoRealVersion:
      GetAllPromptsItemsPromptsResponse200PhotoRealVersion$outboundSchema
        .optional(),
    encodingFormat:
      GetAllPromptsItemsPromptsResponse200EncodingFormat$outboundSchema
        .optional(),
  }).transform((v) => {
    return remap$(v, {
      encodingFormat: "encoding_format",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPromptsItemsPromptsResponse200ModelParameters$ {
  /** @deprecated use `GetAllPromptsItemsPromptsResponse200ModelParameters$inboundSchema` instead. */
  export const inboundSchema =
    GetAllPromptsItemsPromptsResponse200ModelParameters$inboundSchema;
  /** @deprecated use `GetAllPromptsItemsPromptsResponse200ModelParameters$outboundSchema` instead. */
  export const outboundSchema =
    GetAllPromptsItemsPromptsResponse200ModelParameters$outboundSchema;
  /** @deprecated use `GetAllPromptsItemsPromptsResponse200ModelParameters$Outbound` instead. */
  export type Outbound =
    GetAllPromptsItemsPromptsResponse200ModelParameters$Outbound;
}

export function getAllPromptsItemsPromptsResponse200ModelParametersToJSON(
  getAllPromptsItemsPromptsResponse200ModelParameters:
    GetAllPromptsItemsPromptsResponse200ModelParameters,
): string {
  return JSON.stringify(
    GetAllPromptsItemsPromptsResponse200ModelParameters$outboundSchema.parse(
      getAllPromptsItemsPromptsResponse200ModelParameters,
    ),
  );
}

export function getAllPromptsItemsPromptsResponse200ModelParametersFromJSON(
  jsonString: string,
): SafeParseResult<
  GetAllPromptsItemsPromptsResponse200ModelParameters,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetAllPromptsItemsPromptsResponse200ModelParameters$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'GetAllPromptsItemsPromptsResponse200ModelParameters' from JSON`,
  );
}

/** @internal */
export const GetAllPromptsItemsPromptsResponse200Provider$inboundSchema:
  z.ZodNativeEnum<typeof GetAllPromptsItemsPromptsResponse200Provider> = z
    .nativeEnum(GetAllPromptsItemsPromptsResponse200Provider);

/** @internal */
export const GetAllPromptsItemsPromptsResponse200Provider$outboundSchema:
  z.ZodNativeEnum<typeof GetAllPromptsItemsPromptsResponse200Provider> =
    GetAllPromptsItemsPromptsResponse200Provider$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPromptsItemsPromptsResponse200Provider$ {
  /** @deprecated use `GetAllPromptsItemsPromptsResponse200Provider$inboundSchema` instead. */
  export const inboundSchema =
    GetAllPromptsItemsPromptsResponse200Provider$inboundSchema;
  /** @deprecated use `GetAllPromptsItemsPromptsResponse200Provider$outboundSchema` instead. */
  export const outboundSchema =
    GetAllPromptsItemsPromptsResponse200Provider$outboundSchema;
}

/** @internal */
export const GetAllPromptsItemsPromptsResponse200Role$inboundSchema:
  z.ZodNativeEnum<typeof GetAllPromptsItemsPromptsResponse200Role> = z
    .nativeEnum(GetAllPromptsItemsPromptsResponse200Role);

/** @internal */
export const GetAllPromptsItemsPromptsResponse200Role$outboundSchema:
  z.ZodNativeEnum<typeof GetAllPromptsItemsPromptsResponse200Role> =
    GetAllPromptsItemsPromptsResponse200Role$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPromptsItemsPromptsResponse200Role$ {
  /** @deprecated use `GetAllPromptsItemsPromptsResponse200Role$inboundSchema` instead. */
  export const inboundSchema =
    GetAllPromptsItemsPromptsResponse200Role$inboundSchema;
  /** @deprecated use `GetAllPromptsItemsPromptsResponse200Role$outboundSchema` instead. */
  export const outboundSchema =
    GetAllPromptsItemsPromptsResponse200Role$outboundSchema;
}

/** @internal */
export const GetAllPrompts2PromptsResponse200ApplicationJSONResponseBodyItems2Type$inboundSchema:
  z.ZodNativeEnum<
    typeof GetAllPrompts2PromptsResponse200ApplicationJSONResponseBodyItems2Type
  > = z.nativeEnum(
    GetAllPrompts2PromptsResponse200ApplicationJSONResponseBodyItems2Type,
  );

/** @internal */
export const GetAllPrompts2PromptsResponse200ApplicationJSONResponseBodyItems2Type$outboundSchema:
  z.ZodNativeEnum<
    typeof GetAllPrompts2PromptsResponse200ApplicationJSONResponseBodyItems2Type
  > =
    GetAllPrompts2PromptsResponse200ApplicationJSONResponseBodyItems2Type$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPrompts2PromptsResponse200ApplicationJSONResponseBodyItems2Type$ {
  /** @deprecated use `GetAllPrompts2PromptsResponse200ApplicationJSONResponseBodyItems2Type$inboundSchema` instead. */
  export const inboundSchema =
    GetAllPrompts2PromptsResponse200ApplicationJSONResponseBodyItems2Type$inboundSchema;
  /** @deprecated use `GetAllPrompts2PromptsResponse200ApplicationJSONResponseBodyItems2Type$outboundSchema` instead. */
  export const outboundSchema =
    GetAllPrompts2PromptsResponse200ApplicationJSONResponseBodyItems2Type$outboundSchema;
}

/** @internal */
export const GetAllPrompts2PromptsResponse200ImageUrl$inboundSchema: z.ZodType<
  GetAllPrompts2PromptsResponse200ImageUrl,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string().optional(),
  url: z.string(),
  detail: z.string().optional(),
});

/** @internal */
export type GetAllPrompts2PromptsResponse200ImageUrl$Outbound = {
  id?: string | undefined;
  url: string;
  detail?: string | undefined;
};

/** @internal */
export const GetAllPrompts2PromptsResponse200ImageUrl$outboundSchema: z.ZodType<
  GetAllPrompts2PromptsResponse200ImageUrl$Outbound,
  z.ZodTypeDef,
  GetAllPrompts2PromptsResponse200ImageUrl
> = z.object({
  id: z.string().optional(),
  url: z.string(),
  detail: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPrompts2PromptsResponse200ImageUrl$ {
  /** @deprecated use `GetAllPrompts2PromptsResponse200ImageUrl$inboundSchema` instead. */
  export const inboundSchema =
    GetAllPrompts2PromptsResponse200ImageUrl$inboundSchema;
  /** @deprecated use `GetAllPrompts2PromptsResponse200ImageUrl$outboundSchema` instead. */
  export const outboundSchema =
    GetAllPrompts2PromptsResponse200ImageUrl$outboundSchema;
  /** @deprecated use `GetAllPrompts2PromptsResponse200ImageUrl$Outbound` instead. */
  export type Outbound = GetAllPrompts2PromptsResponse200ImageUrl$Outbound;
}

export function getAllPrompts2PromptsResponse200ImageUrlToJSON(
  getAllPrompts2PromptsResponse200ImageUrl:
    GetAllPrompts2PromptsResponse200ImageUrl,
): string {
  return JSON.stringify(
    GetAllPrompts2PromptsResponse200ImageUrl$outboundSchema.parse(
      getAllPrompts2PromptsResponse200ImageUrl,
    ),
  );
}

export function getAllPrompts2PromptsResponse200ImageUrlFromJSON(
  jsonString: string,
): SafeParseResult<
  GetAllPrompts2PromptsResponse200ImageUrl,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetAllPrompts2PromptsResponse200ImageUrl$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'GetAllPrompts2PromptsResponse200ImageUrl' from JSON`,
  );
}

/** @internal */
export const GetAllPrompts2PromptsResponse2002$inboundSchema: z.ZodType<
  GetAllPrompts2PromptsResponse2002,
  z.ZodTypeDef,
  unknown
> = z.object({
  type:
    GetAllPrompts2PromptsResponse200ApplicationJSONResponseBodyItems2Type$inboundSchema,
  image_url: z.lazy(() =>
    GetAllPrompts2PromptsResponse200ImageUrl$inboundSchema
  ),
}).transform((v) => {
  return remap$(v, {
    "image_url": "imageUrl",
  });
});

/** @internal */
export type GetAllPrompts2PromptsResponse2002$Outbound = {
  type: string;
  image_url: GetAllPrompts2PromptsResponse200ImageUrl$Outbound;
};

/** @internal */
export const GetAllPrompts2PromptsResponse2002$outboundSchema: z.ZodType<
  GetAllPrompts2PromptsResponse2002$Outbound,
  z.ZodTypeDef,
  GetAllPrompts2PromptsResponse2002
> = z.object({
  type:
    GetAllPrompts2PromptsResponse200ApplicationJSONResponseBodyItems2Type$outboundSchema,
  imageUrl: z.lazy(() =>
    GetAllPrompts2PromptsResponse200ImageUrl$outboundSchema
  ),
}).transform((v) => {
  return remap$(v, {
    imageUrl: "image_url",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPrompts2PromptsResponse2002$ {
  /** @deprecated use `GetAllPrompts2PromptsResponse2002$inboundSchema` instead. */
  export const inboundSchema = GetAllPrompts2PromptsResponse2002$inboundSchema;
  /** @deprecated use `GetAllPrompts2PromptsResponse2002$outboundSchema` instead. */
  export const outboundSchema =
    GetAllPrompts2PromptsResponse2002$outboundSchema;
  /** @deprecated use `GetAllPrompts2PromptsResponse2002$Outbound` instead. */
  export type Outbound = GetAllPrompts2PromptsResponse2002$Outbound;
}

export function getAllPrompts2PromptsResponse2002ToJSON(
  getAllPrompts2PromptsResponse2002: GetAllPrompts2PromptsResponse2002,
): string {
  return JSON.stringify(
    GetAllPrompts2PromptsResponse2002$outboundSchema.parse(
      getAllPrompts2PromptsResponse2002,
    ),
  );
}

export function getAllPrompts2PromptsResponse2002FromJSON(
  jsonString: string,
): SafeParseResult<GetAllPrompts2PromptsResponse2002, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetAllPrompts2PromptsResponse2002$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetAllPrompts2PromptsResponse2002' from JSON`,
  );
}

/** @internal */
export const GetAllPrompts2PromptsResponse200ApplicationJSONResponseBodyItemsType$inboundSchema:
  z.ZodNativeEnum<
    typeof GetAllPrompts2PromptsResponse200ApplicationJSONResponseBodyItemsType
  > = z.nativeEnum(
    GetAllPrompts2PromptsResponse200ApplicationJSONResponseBodyItemsType,
  );

/** @internal */
export const GetAllPrompts2PromptsResponse200ApplicationJSONResponseBodyItemsType$outboundSchema:
  z.ZodNativeEnum<
    typeof GetAllPrompts2PromptsResponse200ApplicationJSONResponseBodyItemsType
  > =
    GetAllPrompts2PromptsResponse200ApplicationJSONResponseBodyItemsType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPrompts2PromptsResponse200ApplicationJSONResponseBodyItemsType$ {
  /** @deprecated use `GetAllPrompts2PromptsResponse200ApplicationJSONResponseBodyItemsType$inboundSchema` instead. */
  export const inboundSchema =
    GetAllPrompts2PromptsResponse200ApplicationJSONResponseBodyItemsType$inboundSchema;
  /** @deprecated use `GetAllPrompts2PromptsResponse200ApplicationJSONResponseBodyItemsType$outboundSchema` instead. */
  export const outboundSchema =
    GetAllPrompts2PromptsResponse200ApplicationJSONResponseBodyItemsType$outboundSchema;
}

/** @internal */
export const GetAllPrompts2PromptsResponse2001$inboundSchema: z.ZodType<
  GetAllPrompts2PromptsResponse2001,
  z.ZodTypeDef,
  unknown
> = z.object({
  type:
    GetAllPrompts2PromptsResponse200ApplicationJSONResponseBodyItemsType$inboundSchema,
  text: z.string(),
});

/** @internal */
export type GetAllPrompts2PromptsResponse2001$Outbound = {
  type: string;
  text: string;
};

/** @internal */
export const GetAllPrompts2PromptsResponse2001$outboundSchema: z.ZodType<
  GetAllPrompts2PromptsResponse2001$Outbound,
  z.ZodTypeDef,
  GetAllPrompts2PromptsResponse2001
> = z.object({
  type:
    GetAllPrompts2PromptsResponse200ApplicationJSONResponseBodyItemsType$outboundSchema,
  text: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPrompts2PromptsResponse2001$ {
  /** @deprecated use `GetAllPrompts2PromptsResponse2001$inboundSchema` instead. */
  export const inboundSchema = GetAllPrompts2PromptsResponse2001$inboundSchema;
  /** @deprecated use `GetAllPrompts2PromptsResponse2001$outboundSchema` instead. */
  export const outboundSchema =
    GetAllPrompts2PromptsResponse2001$outboundSchema;
  /** @deprecated use `GetAllPrompts2PromptsResponse2001$Outbound` instead. */
  export type Outbound = GetAllPrompts2PromptsResponse2001$Outbound;
}

export function getAllPrompts2PromptsResponse2001ToJSON(
  getAllPrompts2PromptsResponse2001: GetAllPrompts2PromptsResponse2001,
): string {
  return JSON.stringify(
    GetAllPrompts2PromptsResponse2001$outboundSchema.parse(
      getAllPrompts2PromptsResponse2001,
    ),
  );
}

export function getAllPrompts2PromptsResponse2001FromJSON(
  jsonString: string,
): SafeParseResult<GetAllPrompts2PromptsResponse2001, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetAllPrompts2PromptsResponse2001$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetAllPrompts2PromptsResponse2001' from JSON`,
  );
}

/** @internal */
export const GetAllPromptsContentPromptsResponse2002$inboundSchema: z.ZodType<
  GetAllPromptsContentPromptsResponse2002,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => GetAllPrompts2PromptsResponse2001$inboundSchema),
  z.lazy(() => GetAllPrompts2PromptsResponse2002$inboundSchema),
]);

/** @internal */
export type GetAllPromptsContentPromptsResponse2002$Outbound =
  | GetAllPrompts2PromptsResponse2001$Outbound
  | GetAllPrompts2PromptsResponse2002$Outbound;

/** @internal */
export const GetAllPromptsContentPromptsResponse2002$outboundSchema: z.ZodType<
  GetAllPromptsContentPromptsResponse2002$Outbound,
  z.ZodTypeDef,
  GetAllPromptsContentPromptsResponse2002
> = z.union([
  z.lazy(() => GetAllPrompts2PromptsResponse2001$outboundSchema),
  z.lazy(() => GetAllPrompts2PromptsResponse2002$outboundSchema),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPromptsContentPromptsResponse2002$ {
  /** @deprecated use `GetAllPromptsContentPromptsResponse2002$inboundSchema` instead. */
  export const inboundSchema =
    GetAllPromptsContentPromptsResponse2002$inboundSchema;
  /** @deprecated use `GetAllPromptsContentPromptsResponse2002$outboundSchema` instead. */
  export const outboundSchema =
    GetAllPromptsContentPromptsResponse2002$outboundSchema;
  /** @deprecated use `GetAllPromptsContentPromptsResponse2002$Outbound` instead. */
  export type Outbound = GetAllPromptsContentPromptsResponse2002$Outbound;
}

export function getAllPromptsContentPromptsResponse2002ToJSON(
  getAllPromptsContentPromptsResponse2002:
    GetAllPromptsContentPromptsResponse2002,
): string {
  return JSON.stringify(
    GetAllPromptsContentPromptsResponse2002$outboundSchema.parse(
      getAllPromptsContentPromptsResponse2002,
    ),
  );
}

export function getAllPromptsContentPromptsResponse2002FromJSON(
  jsonString: string,
): SafeParseResult<
  GetAllPromptsContentPromptsResponse2002,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetAllPromptsContentPromptsResponse2002$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'GetAllPromptsContentPromptsResponse2002' from JSON`,
  );
}

/** @internal */
export const GetAllPromptsItemsPromptsResponse200Content$inboundSchema:
  z.ZodType<
    GetAllPromptsItemsPromptsResponse200Content,
    z.ZodTypeDef,
    unknown
  > = z.union([
    z.string(),
    z.array(z.union([
      z.lazy(() => GetAllPrompts2PromptsResponse2001$inboundSchema),
      z.lazy(() => GetAllPrompts2PromptsResponse2002$inboundSchema),
    ])),
  ]);

/** @internal */
export type GetAllPromptsItemsPromptsResponse200Content$Outbound =
  | string
  | Array<
    | GetAllPrompts2PromptsResponse2001$Outbound
    | GetAllPrompts2PromptsResponse2002$Outbound
  >;

/** @internal */
export const GetAllPromptsItemsPromptsResponse200Content$outboundSchema:
  z.ZodType<
    GetAllPromptsItemsPromptsResponse200Content$Outbound,
    z.ZodTypeDef,
    GetAllPromptsItemsPromptsResponse200Content
  > = z.union([
    z.string(),
    z.array(z.union([
      z.lazy(() => GetAllPrompts2PromptsResponse2001$outboundSchema),
      z.lazy(() => GetAllPrompts2PromptsResponse2002$outboundSchema),
    ])),
  ]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPromptsItemsPromptsResponse200Content$ {
  /** @deprecated use `GetAllPromptsItemsPromptsResponse200Content$inboundSchema` instead. */
  export const inboundSchema =
    GetAllPromptsItemsPromptsResponse200Content$inboundSchema;
  /** @deprecated use `GetAllPromptsItemsPromptsResponse200Content$outboundSchema` instead. */
  export const outboundSchema =
    GetAllPromptsItemsPromptsResponse200Content$outboundSchema;
  /** @deprecated use `GetAllPromptsItemsPromptsResponse200Content$Outbound` instead. */
  export type Outbound = GetAllPromptsItemsPromptsResponse200Content$Outbound;
}

export function getAllPromptsItemsPromptsResponse200ContentToJSON(
  getAllPromptsItemsPromptsResponse200Content:
    GetAllPromptsItemsPromptsResponse200Content,
): string {
  return JSON.stringify(
    GetAllPromptsItemsPromptsResponse200Content$outboundSchema.parse(
      getAllPromptsItemsPromptsResponse200Content,
    ),
  );
}

export function getAllPromptsItemsPromptsResponse200ContentFromJSON(
  jsonString: string,
): SafeParseResult<
  GetAllPromptsItemsPromptsResponse200Content,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetAllPromptsItemsPromptsResponse200Content$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'GetAllPromptsItemsPromptsResponse200Content' from JSON`,
  );
}

/** @internal */
export const GetAllPromptsItemsPromptsResponse200ApplicationJSONResponseBody2Type$inboundSchema:
  z.ZodNativeEnum<
    typeof GetAllPromptsItemsPromptsResponse200ApplicationJSONResponseBody2Type
  > = z.nativeEnum(
    GetAllPromptsItemsPromptsResponse200ApplicationJSONResponseBody2Type,
  );

/** @internal */
export const GetAllPromptsItemsPromptsResponse200ApplicationJSONResponseBody2Type$outboundSchema:
  z.ZodNativeEnum<
    typeof GetAllPromptsItemsPromptsResponse200ApplicationJSONResponseBody2Type
  > =
    GetAllPromptsItemsPromptsResponse200ApplicationJSONResponseBody2Type$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPromptsItemsPromptsResponse200ApplicationJSONResponseBody2Type$ {
  /** @deprecated use `GetAllPromptsItemsPromptsResponse200ApplicationJSONResponseBody2Type$inboundSchema` instead. */
  export const inboundSchema =
    GetAllPromptsItemsPromptsResponse200ApplicationJSONResponseBody2Type$inboundSchema;
  /** @deprecated use `GetAllPromptsItemsPromptsResponse200ApplicationJSONResponseBody2Type$outboundSchema` instead. */
  export const outboundSchema =
    GetAllPromptsItemsPromptsResponse200ApplicationJSONResponseBody2Type$outboundSchema;
}

/** @internal */
export const GetAllPromptsItemsPromptsResponse200Function$inboundSchema:
  z.ZodType<
    GetAllPromptsItemsPromptsResponse200Function,
    z.ZodTypeDef,
    unknown
  > = z.object({
    name: z.string(),
    arguments: z.string(),
  });

/** @internal */
export type GetAllPromptsItemsPromptsResponse200Function$Outbound = {
  name: string;
  arguments: string;
};

/** @internal */
export const GetAllPromptsItemsPromptsResponse200Function$outboundSchema:
  z.ZodType<
    GetAllPromptsItemsPromptsResponse200Function$Outbound,
    z.ZodTypeDef,
    GetAllPromptsItemsPromptsResponse200Function
  > = z.object({
    name: z.string(),
    arguments: z.string(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPromptsItemsPromptsResponse200Function$ {
  /** @deprecated use `GetAllPromptsItemsPromptsResponse200Function$inboundSchema` instead. */
  export const inboundSchema =
    GetAllPromptsItemsPromptsResponse200Function$inboundSchema;
  /** @deprecated use `GetAllPromptsItemsPromptsResponse200Function$outboundSchema` instead. */
  export const outboundSchema =
    GetAllPromptsItemsPromptsResponse200Function$outboundSchema;
  /** @deprecated use `GetAllPromptsItemsPromptsResponse200Function$Outbound` instead. */
  export type Outbound = GetAllPromptsItemsPromptsResponse200Function$Outbound;
}

export function getAllPromptsItemsPromptsResponse200FunctionToJSON(
  getAllPromptsItemsPromptsResponse200Function:
    GetAllPromptsItemsPromptsResponse200Function,
): string {
  return JSON.stringify(
    GetAllPromptsItemsPromptsResponse200Function$outboundSchema.parse(
      getAllPromptsItemsPromptsResponse200Function,
    ),
  );
}

export function getAllPromptsItemsPromptsResponse200FunctionFromJSON(
  jsonString: string,
): SafeParseResult<
  GetAllPromptsItemsPromptsResponse200Function,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetAllPromptsItemsPromptsResponse200Function$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'GetAllPromptsItemsPromptsResponse200Function' from JSON`,
  );
}

/** @internal */
export const GetAllPromptsItemsPromptsResponse200ToolCalls$inboundSchema:
  z.ZodType<
    GetAllPromptsItemsPromptsResponse200ToolCalls,
    z.ZodTypeDef,
    unknown
  > = z.object({
    id: z.string().optional(),
    index: z.number().optional(),
    type:
      GetAllPromptsItemsPromptsResponse200ApplicationJSONResponseBody2Type$inboundSchema,
    function: z.lazy(() =>
      GetAllPromptsItemsPromptsResponse200Function$inboundSchema
    ),
  });

/** @internal */
export type GetAllPromptsItemsPromptsResponse200ToolCalls$Outbound = {
  id?: string | undefined;
  index?: number | undefined;
  type: string;
  function: GetAllPromptsItemsPromptsResponse200Function$Outbound;
};

/** @internal */
export const GetAllPromptsItemsPromptsResponse200ToolCalls$outboundSchema:
  z.ZodType<
    GetAllPromptsItemsPromptsResponse200ToolCalls$Outbound,
    z.ZodTypeDef,
    GetAllPromptsItemsPromptsResponse200ToolCalls
  > = z.object({
    id: z.string().optional(),
    index: z.number().optional(),
    type:
      GetAllPromptsItemsPromptsResponse200ApplicationJSONResponseBody2Type$outboundSchema,
    function: z.lazy(() =>
      GetAllPromptsItemsPromptsResponse200Function$outboundSchema
    ),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPromptsItemsPromptsResponse200ToolCalls$ {
  /** @deprecated use `GetAllPromptsItemsPromptsResponse200ToolCalls$inboundSchema` instead. */
  export const inboundSchema =
    GetAllPromptsItemsPromptsResponse200ToolCalls$inboundSchema;
  /** @deprecated use `GetAllPromptsItemsPromptsResponse200ToolCalls$outboundSchema` instead. */
  export const outboundSchema =
    GetAllPromptsItemsPromptsResponse200ToolCalls$outboundSchema;
  /** @deprecated use `GetAllPromptsItemsPromptsResponse200ToolCalls$Outbound` instead. */
  export type Outbound = GetAllPromptsItemsPromptsResponse200ToolCalls$Outbound;
}

export function getAllPromptsItemsPromptsResponse200ToolCallsToJSON(
  getAllPromptsItemsPromptsResponse200ToolCalls:
    GetAllPromptsItemsPromptsResponse200ToolCalls,
): string {
  return JSON.stringify(
    GetAllPromptsItemsPromptsResponse200ToolCalls$outboundSchema.parse(
      getAllPromptsItemsPromptsResponse200ToolCalls,
    ),
  );
}

export function getAllPromptsItemsPromptsResponse200ToolCallsFromJSON(
  jsonString: string,
): SafeParseResult<
  GetAllPromptsItemsPromptsResponse200ToolCalls,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetAllPromptsItemsPromptsResponse200ToolCalls$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'GetAllPromptsItemsPromptsResponse200ToolCalls' from JSON`,
  );
}

/** @internal */
export const GetAllPromptsItemsPromptsResponse200Messages$inboundSchema:
  z.ZodType<
    GetAllPromptsItemsPromptsResponse200Messages,
    z.ZodTypeDef,
    unknown
  > = z.object({
    role: GetAllPromptsItemsPromptsResponse200Role$inboundSchema,
    content: z.union([
      z.string(),
      z.array(z.union([
        z.lazy(() => GetAllPrompts2PromptsResponse2001$inboundSchema),
        z.lazy(() => GetAllPrompts2PromptsResponse2002$inboundSchema),
      ])),
    ]),
    tool_calls: z.array(
      z.lazy(() => GetAllPromptsItemsPromptsResponse200ToolCalls$inboundSchema),
    ).optional(),
  }).transform((v) => {
    return remap$(v, {
      "tool_calls": "toolCalls",
    });
  });

/** @internal */
export type GetAllPromptsItemsPromptsResponse200Messages$Outbound = {
  role: string;
  content:
    | string
    | Array<
      | GetAllPrompts2PromptsResponse2001$Outbound
      | GetAllPrompts2PromptsResponse2002$Outbound
    >;
  tool_calls?:
    | Array<GetAllPromptsItemsPromptsResponse200ToolCalls$Outbound>
    | undefined;
};

/** @internal */
export const GetAllPromptsItemsPromptsResponse200Messages$outboundSchema:
  z.ZodType<
    GetAllPromptsItemsPromptsResponse200Messages$Outbound,
    z.ZodTypeDef,
    GetAllPromptsItemsPromptsResponse200Messages
  > = z.object({
    role: GetAllPromptsItemsPromptsResponse200Role$outboundSchema,
    content: z.union([
      z.string(),
      z.array(z.union([
        z.lazy(() => GetAllPrompts2PromptsResponse2001$outboundSchema),
        z.lazy(() => GetAllPrompts2PromptsResponse2002$outboundSchema),
      ])),
    ]),
    toolCalls: z.array(
      z.lazy(() =>
        GetAllPromptsItemsPromptsResponse200ToolCalls$outboundSchema
      ),
    ).optional(),
  }).transform((v) => {
    return remap$(v, {
      toolCalls: "tool_calls",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPromptsItemsPromptsResponse200Messages$ {
  /** @deprecated use `GetAllPromptsItemsPromptsResponse200Messages$inboundSchema` instead. */
  export const inboundSchema =
    GetAllPromptsItemsPromptsResponse200Messages$inboundSchema;
  /** @deprecated use `GetAllPromptsItemsPromptsResponse200Messages$outboundSchema` instead. */
  export const outboundSchema =
    GetAllPromptsItemsPromptsResponse200Messages$outboundSchema;
  /** @deprecated use `GetAllPromptsItemsPromptsResponse200Messages$Outbound` instead. */
  export type Outbound = GetAllPromptsItemsPromptsResponse200Messages$Outbound;
}

export function getAllPromptsItemsPromptsResponse200MessagesToJSON(
  getAllPromptsItemsPromptsResponse200Messages:
    GetAllPromptsItemsPromptsResponse200Messages,
): string {
  return JSON.stringify(
    GetAllPromptsItemsPromptsResponse200Messages$outboundSchema.parse(
      getAllPromptsItemsPromptsResponse200Messages,
    ),
  );
}

export function getAllPromptsItemsPromptsResponse200MessagesFromJSON(
  jsonString: string,
): SafeParseResult<
  GetAllPromptsItemsPromptsResponse200Messages,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetAllPromptsItemsPromptsResponse200Messages$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'GetAllPromptsItemsPromptsResponse200Messages' from JSON`,
  );
}

/** @internal */
export const GetAllPromptsItemsPromptsResponse200PromptConfig$inboundSchema:
  z.ZodType<
    GetAllPromptsItemsPromptsResponse200PromptConfig,
    z.ZodTypeDef,
    unknown
  > = z.object({
    stream: z.boolean().optional(),
    model: z.string().optional(),
    model_db_id: z.string().optional(),
    model_type: GetAllPromptsItemsPromptsResponse200ModelType$inboundSchema
      .optional(),
    model_parameters: z.lazy(() =>
      GetAllPromptsItemsPromptsResponse200ModelParameters$inboundSchema
    ).optional(),
    provider: GetAllPromptsItemsPromptsResponse200Provider$inboundSchema
      .optional(),
    integration_id: z.nullable(z.string()).optional(),
    version: z.string().optional(),
    messages: z.array(
      z.lazy(() => GetAllPromptsItemsPromptsResponse200Messages$inboundSchema),
    ),
  }).transform((v) => {
    return remap$(v, {
      "model_db_id": "modelDbId",
      "model_type": "modelType",
      "model_parameters": "modelParameters",
      "integration_id": "integrationId",
    });
  });

/** @internal */
export type GetAllPromptsItemsPromptsResponse200PromptConfig$Outbound = {
  stream?: boolean | undefined;
  model?: string | undefined;
  model_db_id?: string | undefined;
  model_type?: string | undefined;
  model_parameters?:
    | GetAllPromptsItemsPromptsResponse200ModelParameters$Outbound
    | undefined;
  provider?: string | undefined;
  integration_id?: string | null | undefined;
  version?: string | undefined;
  messages: Array<GetAllPromptsItemsPromptsResponse200Messages$Outbound>;
};

/** @internal */
export const GetAllPromptsItemsPromptsResponse200PromptConfig$outboundSchema:
  z.ZodType<
    GetAllPromptsItemsPromptsResponse200PromptConfig$Outbound,
    z.ZodTypeDef,
    GetAllPromptsItemsPromptsResponse200PromptConfig
  > = z.object({
    stream: z.boolean().optional(),
    model: z.string().optional(),
    modelDbId: z.string().optional(),
    modelType: GetAllPromptsItemsPromptsResponse200ModelType$outboundSchema
      .optional(),
    modelParameters: z.lazy(() =>
      GetAllPromptsItemsPromptsResponse200ModelParameters$outboundSchema
    ).optional(),
    provider: GetAllPromptsItemsPromptsResponse200Provider$outboundSchema
      .optional(),
    integrationId: z.nullable(z.string()).optional(),
    version: z.string().optional(),
    messages: z.array(
      z.lazy(() => GetAllPromptsItemsPromptsResponse200Messages$outboundSchema),
    ),
  }).transform((v) => {
    return remap$(v, {
      modelDbId: "model_db_id",
      modelType: "model_type",
      modelParameters: "model_parameters",
      integrationId: "integration_id",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPromptsItemsPromptsResponse200PromptConfig$ {
  /** @deprecated use `GetAllPromptsItemsPromptsResponse200PromptConfig$inboundSchema` instead. */
  export const inboundSchema =
    GetAllPromptsItemsPromptsResponse200PromptConfig$inboundSchema;
  /** @deprecated use `GetAllPromptsItemsPromptsResponse200PromptConfig$outboundSchema` instead. */
  export const outboundSchema =
    GetAllPromptsItemsPromptsResponse200PromptConfig$outboundSchema;
  /** @deprecated use `GetAllPromptsItemsPromptsResponse200PromptConfig$Outbound` instead. */
  export type Outbound =
    GetAllPromptsItemsPromptsResponse200PromptConfig$Outbound;
}

export function getAllPromptsItemsPromptsResponse200PromptConfigToJSON(
  getAllPromptsItemsPromptsResponse200PromptConfig:
    GetAllPromptsItemsPromptsResponse200PromptConfig,
): string {
  return JSON.stringify(
    GetAllPromptsItemsPromptsResponse200PromptConfig$outboundSchema.parse(
      getAllPromptsItemsPromptsResponse200PromptConfig,
    ),
  );
}

export function getAllPromptsItemsPromptsResponse200PromptConfigFromJSON(
  jsonString: string,
): SafeParseResult<
  GetAllPromptsItemsPromptsResponse200PromptConfig,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetAllPromptsItemsPromptsResponse200PromptConfig$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'GetAllPromptsItemsPromptsResponse200PromptConfig' from JSON`,
  );
}

/** @internal */
export const GetAllPromptsItemsPromptsResponse200Metadata$inboundSchema:
  z.ZodType<
    GetAllPromptsItemsPromptsResponse200Metadata,
    z.ZodTypeDef,
    unknown
  > = z.object({
    use_cases: z.array(z.string()).optional(),
    language: z.string().optional(),
  }).transform((v) => {
    return remap$(v, {
      "use_cases": "useCases",
    });
  });

/** @internal */
export type GetAllPromptsItemsPromptsResponse200Metadata$Outbound = {
  use_cases?: Array<string> | undefined;
  language?: string | undefined;
};

/** @internal */
export const GetAllPromptsItemsPromptsResponse200Metadata$outboundSchema:
  z.ZodType<
    GetAllPromptsItemsPromptsResponse200Metadata$Outbound,
    z.ZodTypeDef,
    GetAllPromptsItemsPromptsResponse200Metadata
  > = z.object({
    useCases: z.array(z.string()).optional(),
    language: z.string().optional(),
  }).transform((v) => {
    return remap$(v, {
      useCases: "use_cases",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPromptsItemsPromptsResponse200Metadata$ {
  /** @deprecated use `GetAllPromptsItemsPromptsResponse200Metadata$inboundSchema` instead. */
  export const inboundSchema =
    GetAllPromptsItemsPromptsResponse200Metadata$inboundSchema;
  /** @deprecated use `GetAllPromptsItemsPromptsResponse200Metadata$outboundSchema` instead. */
  export const outboundSchema =
    GetAllPromptsItemsPromptsResponse200Metadata$outboundSchema;
  /** @deprecated use `GetAllPromptsItemsPromptsResponse200Metadata$Outbound` instead. */
  export type Outbound = GetAllPromptsItemsPromptsResponse200Metadata$Outbound;
}

export function getAllPromptsItemsPromptsResponse200MetadataToJSON(
  getAllPromptsItemsPromptsResponse200Metadata:
    GetAllPromptsItemsPromptsResponse200Metadata,
): string {
  return JSON.stringify(
    GetAllPromptsItemsPromptsResponse200Metadata$outboundSchema.parse(
      getAllPromptsItemsPromptsResponse200Metadata,
    ),
  );
}

export function getAllPromptsItemsPromptsResponse200MetadataFromJSON(
  jsonString: string,
): SafeParseResult<
  GetAllPromptsItemsPromptsResponse200Metadata,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetAllPromptsItemsPromptsResponse200Metadata$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'GetAllPromptsItemsPromptsResponse200Metadata' from JSON`,
  );
}

/** @internal */
export const GetAllPromptsItemsPromptsVersions$inboundSchema: z.ZodType<
  GetAllPromptsItemsPromptsVersions,
  z.ZodTypeDef,
  unknown
> = z.object({
  _id: z.string(),
  created_by_id: z.string(),
  display_name: z.string(),
  updated_by_id: z.string(),
  description: z.nullable(z.string()).optional(),
  prompt_config: z.lazy(() =>
    GetAllPromptsItemsPromptsResponse200PromptConfig$inboundSchema
  ),
  metadata: z.lazy(() =>
    GetAllPromptsItemsPromptsResponse200Metadata$inboundSchema
  ),
  commit: z.string(),
  timestamp: z.string(),
}).transform((v) => {
  return remap$(v, {
    "_id": "id",
    "created_by_id": "createdById",
    "display_name": "displayName",
    "updated_by_id": "updatedById",
    "prompt_config": "promptConfig",
  });
});

/** @internal */
export type GetAllPromptsItemsPromptsVersions$Outbound = {
  _id: string;
  created_by_id: string;
  display_name: string;
  updated_by_id: string;
  description?: string | null | undefined;
  prompt_config: GetAllPromptsItemsPromptsResponse200PromptConfig$Outbound;
  metadata: GetAllPromptsItemsPromptsResponse200Metadata$Outbound;
  commit: string;
  timestamp: string;
};

/** @internal */
export const GetAllPromptsItemsPromptsVersions$outboundSchema: z.ZodType<
  GetAllPromptsItemsPromptsVersions$Outbound,
  z.ZodTypeDef,
  GetAllPromptsItemsPromptsVersions
> = z.object({
  id: z.string(),
  createdById: z.string(),
  displayName: z.string(),
  updatedById: z.string(),
  description: z.nullable(z.string()).optional(),
  promptConfig: z.lazy(() =>
    GetAllPromptsItemsPromptsResponse200PromptConfig$outboundSchema
  ),
  metadata: z.lazy(() =>
    GetAllPromptsItemsPromptsResponse200Metadata$outboundSchema
  ),
  commit: z.string(),
  timestamp: z.string(),
}).transform((v) => {
  return remap$(v, {
    id: "_id",
    createdById: "created_by_id",
    displayName: "display_name",
    updatedById: "updated_by_id",
    promptConfig: "prompt_config",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPromptsItemsPromptsVersions$ {
  /** @deprecated use `GetAllPromptsItemsPromptsVersions$inboundSchema` instead. */
  export const inboundSchema = GetAllPromptsItemsPromptsVersions$inboundSchema;
  /** @deprecated use `GetAllPromptsItemsPromptsVersions$outboundSchema` instead. */
  export const outboundSchema =
    GetAllPromptsItemsPromptsVersions$outboundSchema;
  /** @deprecated use `GetAllPromptsItemsPromptsVersions$Outbound` instead. */
  export type Outbound = GetAllPromptsItemsPromptsVersions$Outbound;
}

export function getAllPromptsItemsPromptsVersionsToJSON(
  getAllPromptsItemsPromptsVersions: GetAllPromptsItemsPromptsVersions,
): string {
  return JSON.stringify(
    GetAllPromptsItemsPromptsVersions$outboundSchema.parse(
      getAllPromptsItemsPromptsVersions,
    ),
  );
}

export function getAllPromptsItemsPromptsVersionsFromJSON(
  jsonString: string,
): SafeParseResult<GetAllPromptsItemsPromptsVersions, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetAllPromptsItemsPromptsVersions$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetAllPromptsItemsPromptsVersions' from JSON`,
  );
}

/** @internal */
export const GetAllPromptsItemsPromptsType$inboundSchema: z.ZodNativeEnum<
  typeof GetAllPromptsItemsPromptsType
> = z.nativeEnum(GetAllPromptsItemsPromptsType);

/** @internal */
export const GetAllPromptsItemsPromptsType$outboundSchema: z.ZodNativeEnum<
  typeof GetAllPromptsItemsPromptsType
> = GetAllPromptsItemsPromptsType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPromptsItemsPromptsType$ {
  /** @deprecated use `GetAllPromptsItemsPromptsType$inboundSchema` instead. */
  export const inboundSchema = GetAllPromptsItemsPromptsType$inboundSchema;
  /** @deprecated use `GetAllPromptsItemsPromptsType$outboundSchema` instead. */
  export const outboundSchema = GetAllPromptsItemsPromptsType$outboundSchema;
}

/** @internal */
export const GetAllPromptsItems2$inboundSchema: z.ZodType<
  GetAllPromptsItems2,
  z.ZodTypeDef,
  unknown
> = z.object({
  _id: z.string(),
  owner: z.union([z.string(), GetAllPromptsOwnerPrompts2$inboundSchema]),
  domain_id: z.string(),
  created_by_id: z.string(),
  display_name: z.string(),
  updated_by_id: z.string(),
  description: z.nullable(z.string()).optional(),
  prompt_config: z.lazy(() =>
    GetAllPromptsItemsPromptsPromptConfig$inboundSchema
  ),
  metadata: z.lazy(() => GetAllPromptsItemsPromptsMetadata$inboundSchema),
  created: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
  updated: z.string().datetime({ offset: true }).default(
    "2024-11-26T10:00:21.083Z",
  ).transform(v => new Date(v)),
  versions: z.array(
    z.lazy(() => GetAllPromptsItemsPromptsVersions$inboundSchema),
  ),
  key: z.string(),
  type: GetAllPromptsItemsPromptsType$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "_id": "id",
    "domain_id": "domainId",
    "created_by_id": "createdById",
    "display_name": "displayName",
    "updated_by_id": "updatedById",
    "prompt_config": "promptConfig",
  });
});

/** @internal */
export type GetAllPromptsItems2$Outbound = {
  _id: string;
  owner: string | string;
  domain_id: string;
  created_by_id: string;
  display_name: string;
  updated_by_id: string;
  description?: string | null | undefined;
  prompt_config: GetAllPromptsItemsPromptsPromptConfig$Outbound;
  metadata: GetAllPromptsItemsPromptsMetadata$Outbound;
  created?: string | undefined;
  updated: string;
  versions: Array<GetAllPromptsItemsPromptsVersions$Outbound>;
  key: string;
  type: string;
};

/** @internal */
export const GetAllPromptsItems2$outboundSchema: z.ZodType<
  GetAllPromptsItems2$Outbound,
  z.ZodTypeDef,
  GetAllPromptsItems2
> = z.object({
  id: z.string(),
  owner: z.union([z.string(), GetAllPromptsOwnerPrompts2$outboundSchema]),
  domainId: z.string(),
  createdById: z.string(),
  displayName: z.string(),
  updatedById: z.string(),
  description: z.nullable(z.string()).optional(),
  promptConfig: z.lazy(() =>
    GetAllPromptsItemsPromptsPromptConfig$outboundSchema
  ),
  metadata: z.lazy(() => GetAllPromptsItemsPromptsMetadata$outboundSchema),
  created: z.date().transform(v => v.toISOString()).optional(),
  updated: z.date().default(() => new Date("2024-11-26T10:00:21.083Z"))
    .transform(v => v.toISOString()),
  versions: z.array(
    z.lazy(() => GetAllPromptsItemsPromptsVersions$outboundSchema),
  ),
  key: z.string(),
  type: GetAllPromptsItemsPromptsType$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    id: "_id",
    domainId: "domain_id",
    createdById: "created_by_id",
    displayName: "display_name",
    updatedById: "updated_by_id",
    promptConfig: "prompt_config",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPromptsItems2$ {
  /** @deprecated use `GetAllPromptsItems2$inboundSchema` instead. */
  export const inboundSchema = GetAllPromptsItems2$inboundSchema;
  /** @deprecated use `GetAllPromptsItems2$outboundSchema` instead. */
  export const outboundSchema = GetAllPromptsItems2$outboundSchema;
  /** @deprecated use `GetAllPromptsItems2$Outbound` instead. */
  export type Outbound = GetAllPromptsItems2$Outbound;
}

export function getAllPromptsItems2ToJSON(
  getAllPromptsItems2: GetAllPromptsItems2,
): string {
  return JSON.stringify(
    GetAllPromptsItems2$outboundSchema.parse(getAllPromptsItems2),
  );
}

export function getAllPromptsItems2FromJSON(
  jsonString: string,
): SafeParseResult<GetAllPromptsItems2, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetAllPromptsItems2$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetAllPromptsItems2' from JSON`,
  );
}

/** @internal */
export const GetAllPromptsOwner2$inboundSchema: z.ZodNativeEnum<
  typeof GetAllPromptsOwner2
> = z.nativeEnum(GetAllPromptsOwner2);

/** @internal */
export const GetAllPromptsOwner2$outboundSchema: z.ZodNativeEnum<
  typeof GetAllPromptsOwner2
> = GetAllPromptsOwner2$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPromptsOwner2$ {
  /** @deprecated use `GetAllPromptsOwner2$inboundSchema` instead. */
  export const inboundSchema = GetAllPromptsOwner2$inboundSchema;
  /** @deprecated use `GetAllPromptsOwner2$outboundSchema` instead. */
  export const outboundSchema = GetAllPromptsOwner2$outboundSchema;
}

/** @internal */
export const GetAllPromptsItemsOwner$inboundSchema: z.ZodType<
  GetAllPromptsItemsOwner,
  z.ZodTypeDef,
  unknown
> = z.union([z.string(), GetAllPromptsOwner2$inboundSchema]);

/** @internal */
export type GetAllPromptsItemsOwner$Outbound = string | string;

/** @internal */
export const GetAllPromptsItemsOwner$outboundSchema: z.ZodType<
  GetAllPromptsItemsOwner$Outbound,
  z.ZodTypeDef,
  GetAllPromptsItemsOwner
> = z.union([z.string(), GetAllPromptsOwner2$outboundSchema]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPromptsItemsOwner$ {
  /** @deprecated use `GetAllPromptsItemsOwner$inboundSchema` instead. */
  export const inboundSchema = GetAllPromptsItemsOwner$inboundSchema;
  /** @deprecated use `GetAllPromptsItemsOwner$outboundSchema` instead. */
  export const outboundSchema = GetAllPromptsItemsOwner$outboundSchema;
  /** @deprecated use `GetAllPromptsItemsOwner$Outbound` instead. */
  export type Outbound = GetAllPromptsItemsOwner$Outbound;
}

export function getAllPromptsItemsOwnerToJSON(
  getAllPromptsItemsOwner: GetAllPromptsItemsOwner,
): string {
  return JSON.stringify(
    GetAllPromptsItemsOwner$outboundSchema.parse(getAllPromptsItemsOwner),
  );
}

export function getAllPromptsItemsOwnerFromJSON(
  jsonString: string,
): SafeParseResult<GetAllPromptsItemsOwner, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetAllPromptsItemsOwner$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetAllPromptsItemsOwner' from JSON`,
  );
}

/** @internal */
export const GetAllPromptsItemsModelType$inboundSchema: z.ZodNativeEnum<
  typeof GetAllPromptsItemsModelType
> = z.nativeEnum(GetAllPromptsItemsModelType);

/** @internal */
export const GetAllPromptsItemsModelType$outboundSchema: z.ZodNativeEnum<
  typeof GetAllPromptsItemsModelType
> = GetAllPromptsItemsModelType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPromptsItemsModelType$ {
  /** @deprecated use `GetAllPromptsItemsModelType$inboundSchema` instead. */
  export const inboundSchema = GetAllPromptsItemsModelType$inboundSchema;
  /** @deprecated use `GetAllPromptsItemsModelType$outboundSchema` instead. */
  export const outboundSchema = GetAllPromptsItemsModelType$outboundSchema;
}

/** @internal */
export const GetAllPromptsItemsFormat$inboundSchema: z.ZodNativeEnum<
  typeof GetAllPromptsItemsFormat
> = z.nativeEnum(GetAllPromptsItemsFormat);

/** @internal */
export const GetAllPromptsItemsFormat$outboundSchema: z.ZodNativeEnum<
  typeof GetAllPromptsItemsFormat
> = GetAllPromptsItemsFormat$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPromptsItemsFormat$ {
  /** @deprecated use `GetAllPromptsItemsFormat$inboundSchema` instead. */
  export const inboundSchema = GetAllPromptsItemsFormat$inboundSchema;
  /** @deprecated use `GetAllPromptsItemsFormat$outboundSchema` instead. */
  export const outboundSchema = GetAllPromptsItemsFormat$outboundSchema;
}

/** @internal */
export const GetAllPromptsItemsQuality$inboundSchema: z.ZodNativeEnum<
  typeof GetAllPromptsItemsQuality
> = z.nativeEnum(GetAllPromptsItemsQuality);

/** @internal */
export const GetAllPromptsItemsQuality$outboundSchema: z.ZodNativeEnum<
  typeof GetAllPromptsItemsQuality
> = GetAllPromptsItemsQuality$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPromptsItemsQuality$ {
  /** @deprecated use `GetAllPromptsItemsQuality$inboundSchema` instead. */
  export const inboundSchema = GetAllPromptsItemsQuality$inboundSchema;
  /** @deprecated use `GetAllPromptsItemsQuality$outboundSchema` instead. */
  export const outboundSchema = GetAllPromptsItemsQuality$outboundSchema;
}

/** @internal */
export const GetAllPromptsResponseFormatPromptsType$inboundSchema:
  z.ZodNativeEnum<typeof GetAllPromptsResponseFormatPromptsType> = z.nativeEnum(
    GetAllPromptsResponseFormatPromptsType,
  );

/** @internal */
export const GetAllPromptsResponseFormatPromptsType$outboundSchema:
  z.ZodNativeEnum<typeof GetAllPromptsResponseFormatPromptsType> =
    GetAllPromptsResponseFormatPromptsType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPromptsResponseFormatPromptsType$ {
  /** @deprecated use `GetAllPromptsResponseFormatPromptsType$inboundSchema` instead. */
  export const inboundSchema =
    GetAllPromptsResponseFormatPromptsType$inboundSchema;
  /** @deprecated use `GetAllPromptsResponseFormatPromptsType$outboundSchema` instead. */
  export const outboundSchema =
    GetAllPromptsResponseFormatPromptsType$outboundSchema;
}

/** @internal */
export const GetAllPromptsResponseFormat2$inboundSchema: z.ZodType<
  GetAllPromptsResponseFormat2,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: GetAllPromptsResponseFormatPromptsType$inboundSchema,
});

/** @internal */
export type GetAllPromptsResponseFormat2$Outbound = {
  type: string;
};

/** @internal */
export const GetAllPromptsResponseFormat2$outboundSchema: z.ZodType<
  GetAllPromptsResponseFormat2$Outbound,
  z.ZodTypeDef,
  GetAllPromptsResponseFormat2
> = z.object({
  type: GetAllPromptsResponseFormatPromptsType$outboundSchema,
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPromptsResponseFormat2$ {
  /** @deprecated use `GetAllPromptsResponseFormat2$inboundSchema` instead. */
  export const inboundSchema = GetAllPromptsResponseFormat2$inboundSchema;
  /** @deprecated use `GetAllPromptsResponseFormat2$outboundSchema` instead. */
  export const outboundSchema = GetAllPromptsResponseFormat2$outboundSchema;
  /** @deprecated use `GetAllPromptsResponseFormat2$Outbound` instead. */
  export type Outbound = GetAllPromptsResponseFormat2$Outbound;
}

export function getAllPromptsResponseFormat2ToJSON(
  getAllPromptsResponseFormat2: GetAllPromptsResponseFormat2,
): string {
  return JSON.stringify(
    GetAllPromptsResponseFormat2$outboundSchema.parse(
      getAllPromptsResponseFormat2,
    ),
  );
}

export function getAllPromptsResponseFormat2FromJSON(
  jsonString: string,
): SafeParseResult<GetAllPromptsResponseFormat2, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetAllPromptsResponseFormat2$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetAllPromptsResponseFormat2' from JSON`,
  );
}

/** @internal */
export const GetAllPromptsResponseFormatType$inboundSchema: z.ZodNativeEnum<
  typeof GetAllPromptsResponseFormatType
> = z.nativeEnum(GetAllPromptsResponseFormatType);

/** @internal */
export const GetAllPromptsResponseFormatType$outboundSchema: z.ZodNativeEnum<
  typeof GetAllPromptsResponseFormatType
> = GetAllPromptsResponseFormatType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPromptsResponseFormatType$ {
  /** @deprecated use `GetAllPromptsResponseFormatType$inboundSchema` instead. */
  export const inboundSchema = GetAllPromptsResponseFormatType$inboundSchema;
  /** @deprecated use `GetAllPromptsResponseFormatType$outboundSchema` instead. */
  export const outboundSchema = GetAllPromptsResponseFormatType$outboundSchema;
}

/** @internal */
export const GetAllPromptsResponseFormatJsonSchema$inboundSchema: z.ZodType<
  GetAllPromptsResponseFormatJsonSchema,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.string(),
  strict: z.boolean(),
  schema: z.record(z.any()),
});

/** @internal */
export type GetAllPromptsResponseFormatJsonSchema$Outbound = {
  name: string;
  strict: boolean;
  schema: { [k: string]: any };
};

/** @internal */
export const GetAllPromptsResponseFormatJsonSchema$outboundSchema: z.ZodType<
  GetAllPromptsResponseFormatJsonSchema$Outbound,
  z.ZodTypeDef,
  GetAllPromptsResponseFormatJsonSchema
> = z.object({
  name: z.string(),
  strict: z.boolean(),
  schema: z.record(z.any()),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPromptsResponseFormatJsonSchema$ {
  /** @deprecated use `GetAllPromptsResponseFormatJsonSchema$inboundSchema` instead. */
  export const inboundSchema =
    GetAllPromptsResponseFormatJsonSchema$inboundSchema;
  /** @deprecated use `GetAllPromptsResponseFormatJsonSchema$outboundSchema` instead. */
  export const outboundSchema =
    GetAllPromptsResponseFormatJsonSchema$outboundSchema;
  /** @deprecated use `GetAllPromptsResponseFormatJsonSchema$Outbound` instead. */
  export type Outbound = GetAllPromptsResponseFormatJsonSchema$Outbound;
}

export function getAllPromptsResponseFormatJsonSchemaToJSON(
  getAllPromptsResponseFormatJsonSchema: GetAllPromptsResponseFormatJsonSchema,
): string {
  return JSON.stringify(
    GetAllPromptsResponseFormatJsonSchema$outboundSchema.parse(
      getAllPromptsResponseFormatJsonSchema,
    ),
  );
}

export function getAllPromptsResponseFormatJsonSchemaFromJSON(
  jsonString: string,
): SafeParseResult<GetAllPromptsResponseFormatJsonSchema, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      GetAllPromptsResponseFormatJsonSchema$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetAllPromptsResponseFormatJsonSchema' from JSON`,
  );
}

/** @internal */
export const GetAllPromptsResponseFormat1$inboundSchema: z.ZodType<
  GetAllPromptsResponseFormat1,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: GetAllPromptsResponseFormatType$inboundSchema,
  json_schema: z.lazy(() =>
    GetAllPromptsResponseFormatJsonSchema$inboundSchema
  ),
}).transform((v) => {
  return remap$(v, {
    "json_schema": "jsonSchema",
  });
});

/** @internal */
export type GetAllPromptsResponseFormat1$Outbound = {
  type: string;
  json_schema: GetAllPromptsResponseFormatJsonSchema$Outbound;
};

/** @internal */
export const GetAllPromptsResponseFormat1$outboundSchema: z.ZodType<
  GetAllPromptsResponseFormat1$Outbound,
  z.ZodTypeDef,
  GetAllPromptsResponseFormat1
> = z.object({
  type: GetAllPromptsResponseFormatType$outboundSchema,
  jsonSchema: z.lazy(() =>
    GetAllPromptsResponseFormatJsonSchema$outboundSchema
  ),
}).transform((v) => {
  return remap$(v, {
    jsonSchema: "json_schema",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPromptsResponseFormat1$ {
  /** @deprecated use `GetAllPromptsResponseFormat1$inboundSchema` instead. */
  export const inboundSchema = GetAllPromptsResponseFormat1$inboundSchema;
  /** @deprecated use `GetAllPromptsResponseFormat1$outboundSchema` instead. */
  export const outboundSchema = GetAllPromptsResponseFormat1$outboundSchema;
  /** @deprecated use `GetAllPromptsResponseFormat1$Outbound` instead. */
  export type Outbound = GetAllPromptsResponseFormat1$Outbound;
}

export function getAllPromptsResponseFormat1ToJSON(
  getAllPromptsResponseFormat1: GetAllPromptsResponseFormat1,
): string {
  return JSON.stringify(
    GetAllPromptsResponseFormat1$outboundSchema.parse(
      getAllPromptsResponseFormat1,
    ),
  );
}

export function getAllPromptsResponseFormat1FromJSON(
  jsonString: string,
): SafeParseResult<GetAllPromptsResponseFormat1, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetAllPromptsResponseFormat1$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetAllPromptsResponseFormat1' from JSON`,
  );
}

/** @internal */
export const GetAllPromptsItemsResponseFormat$inboundSchema: z.ZodType<
  GetAllPromptsItemsResponseFormat,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => GetAllPromptsResponseFormat2$inboundSchema),
  z.lazy(() => GetAllPromptsResponseFormat1$inboundSchema),
]);

/** @internal */
export type GetAllPromptsItemsResponseFormat$Outbound =
  | GetAllPromptsResponseFormat2$Outbound
  | GetAllPromptsResponseFormat1$Outbound;

/** @internal */
export const GetAllPromptsItemsResponseFormat$outboundSchema: z.ZodType<
  GetAllPromptsItemsResponseFormat$Outbound,
  z.ZodTypeDef,
  GetAllPromptsItemsResponseFormat
> = z.union([
  z.lazy(() => GetAllPromptsResponseFormat2$outboundSchema),
  z.lazy(() => GetAllPromptsResponseFormat1$outboundSchema),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPromptsItemsResponseFormat$ {
  /** @deprecated use `GetAllPromptsItemsResponseFormat$inboundSchema` instead. */
  export const inboundSchema = GetAllPromptsItemsResponseFormat$inboundSchema;
  /** @deprecated use `GetAllPromptsItemsResponseFormat$outboundSchema` instead. */
  export const outboundSchema = GetAllPromptsItemsResponseFormat$outboundSchema;
  /** @deprecated use `GetAllPromptsItemsResponseFormat$Outbound` instead. */
  export type Outbound = GetAllPromptsItemsResponseFormat$Outbound;
}

export function getAllPromptsItemsResponseFormatToJSON(
  getAllPromptsItemsResponseFormat: GetAllPromptsItemsResponseFormat,
): string {
  return JSON.stringify(
    GetAllPromptsItemsResponseFormat$outboundSchema.parse(
      getAllPromptsItemsResponseFormat,
    ),
  );
}

export function getAllPromptsItemsResponseFormatFromJSON(
  jsonString: string,
): SafeParseResult<GetAllPromptsItemsResponseFormat, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetAllPromptsItemsResponseFormat$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetAllPromptsItemsResponseFormat' from JSON`,
  );
}

/** @internal */
export const GetAllPromptsItemsPhotoRealVersion$inboundSchema: z.ZodNativeEnum<
  typeof GetAllPromptsItemsPhotoRealVersion
> = z.nativeEnum(GetAllPromptsItemsPhotoRealVersion);

/** @internal */
export const GetAllPromptsItemsPhotoRealVersion$outboundSchema: z.ZodNativeEnum<
  typeof GetAllPromptsItemsPhotoRealVersion
> = GetAllPromptsItemsPhotoRealVersion$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPromptsItemsPhotoRealVersion$ {
  /** @deprecated use `GetAllPromptsItemsPhotoRealVersion$inboundSchema` instead. */
  export const inboundSchema = GetAllPromptsItemsPhotoRealVersion$inboundSchema;
  /** @deprecated use `GetAllPromptsItemsPhotoRealVersion$outboundSchema` instead. */
  export const outboundSchema =
    GetAllPromptsItemsPhotoRealVersion$outboundSchema;
}

/** @internal */
export const GetAllPromptsItemsEncodingFormat$inboundSchema: z.ZodNativeEnum<
  typeof GetAllPromptsItemsEncodingFormat
> = z.nativeEnum(GetAllPromptsItemsEncodingFormat);

/** @internal */
export const GetAllPromptsItemsEncodingFormat$outboundSchema: z.ZodNativeEnum<
  typeof GetAllPromptsItemsEncodingFormat
> = GetAllPromptsItemsEncodingFormat$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPromptsItemsEncodingFormat$ {
  /** @deprecated use `GetAllPromptsItemsEncodingFormat$inboundSchema` instead. */
  export const inboundSchema = GetAllPromptsItemsEncodingFormat$inboundSchema;
  /** @deprecated use `GetAllPromptsItemsEncodingFormat$outboundSchema` instead. */
  export const outboundSchema = GetAllPromptsItemsEncodingFormat$outboundSchema;
}

/** @internal */
export const GetAllPromptsItemsModelParameters$inboundSchema: z.ZodType<
  GetAllPromptsItemsModelParameters,
  z.ZodTypeDef,
  unknown
> = z.object({
  temperature: z.number().optional(),
  maxTokens: z.number().optional(),
  topK: z.number().optional(),
  topP: z.number().optional(),
  frequencyPenalty: z.number().optional(),
  presencePenalty: z.number().optional(),
  numImages: z.number().optional(),
  seed: z.number().optional(),
  format: GetAllPromptsItemsFormat$inboundSchema.optional(),
  dimensions: z.string().optional(),
  quality: GetAllPromptsItemsQuality$inboundSchema.optional(),
  style: z.string().optional(),
  responseFormat: z.nullable(
    z.union([
      z.lazy(() => GetAllPromptsResponseFormat2$inboundSchema),
      z.lazy(() => GetAllPromptsResponseFormat1$inboundSchema),
    ]),
  ).optional(),
  photoRealVersion: GetAllPromptsItemsPhotoRealVersion$inboundSchema.optional(),
  encoding_format: GetAllPromptsItemsEncodingFormat$inboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    "encoding_format": "encodingFormat",
  });
});

/** @internal */
export type GetAllPromptsItemsModelParameters$Outbound = {
  temperature?: number | undefined;
  maxTokens?: number | undefined;
  topK?: number | undefined;
  topP?: number | undefined;
  frequencyPenalty?: number | undefined;
  presencePenalty?: number | undefined;
  numImages?: number | undefined;
  seed?: number | undefined;
  format?: string | undefined;
  dimensions?: string | undefined;
  quality?: string | undefined;
  style?: string | undefined;
  responseFormat?:
    | GetAllPromptsResponseFormat2$Outbound
    | GetAllPromptsResponseFormat1$Outbound
    | null
    | undefined;
  photoRealVersion?: string | undefined;
  encoding_format?: string | undefined;
};

/** @internal */
export const GetAllPromptsItemsModelParameters$outboundSchema: z.ZodType<
  GetAllPromptsItemsModelParameters$Outbound,
  z.ZodTypeDef,
  GetAllPromptsItemsModelParameters
> = z.object({
  temperature: z.number().optional(),
  maxTokens: z.number().optional(),
  topK: z.number().optional(),
  topP: z.number().optional(),
  frequencyPenalty: z.number().optional(),
  presencePenalty: z.number().optional(),
  numImages: z.number().optional(),
  seed: z.number().optional(),
  format: GetAllPromptsItemsFormat$outboundSchema.optional(),
  dimensions: z.string().optional(),
  quality: GetAllPromptsItemsQuality$outboundSchema.optional(),
  style: z.string().optional(),
  responseFormat: z.nullable(
    z.union([
      z.lazy(() => GetAllPromptsResponseFormat2$outboundSchema),
      z.lazy(() => GetAllPromptsResponseFormat1$outboundSchema),
    ]),
  ).optional(),
  photoRealVersion: GetAllPromptsItemsPhotoRealVersion$outboundSchema
    .optional(),
  encodingFormat: GetAllPromptsItemsEncodingFormat$outboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    encodingFormat: "encoding_format",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPromptsItemsModelParameters$ {
  /** @deprecated use `GetAllPromptsItemsModelParameters$inboundSchema` instead. */
  export const inboundSchema = GetAllPromptsItemsModelParameters$inboundSchema;
  /** @deprecated use `GetAllPromptsItemsModelParameters$outboundSchema` instead. */
  export const outboundSchema =
    GetAllPromptsItemsModelParameters$outboundSchema;
  /** @deprecated use `GetAllPromptsItemsModelParameters$Outbound` instead. */
  export type Outbound = GetAllPromptsItemsModelParameters$Outbound;
}

export function getAllPromptsItemsModelParametersToJSON(
  getAllPromptsItemsModelParameters: GetAllPromptsItemsModelParameters,
): string {
  return JSON.stringify(
    GetAllPromptsItemsModelParameters$outboundSchema.parse(
      getAllPromptsItemsModelParameters,
    ),
  );
}

export function getAllPromptsItemsModelParametersFromJSON(
  jsonString: string,
): SafeParseResult<GetAllPromptsItemsModelParameters, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetAllPromptsItemsModelParameters$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetAllPromptsItemsModelParameters' from JSON`,
  );
}

/** @internal */
export const GetAllPromptsItemsProvider$inboundSchema: z.ZodNativeEnum<
  typeof GetAllPromptsItemsProvider
> = z.nativeEnum(GetAllPromptsItemsProvider);

/** @internal */
export const GetAllPromptsItemsProvider$outboundSchema: z.ZodNativeEnum<
  typeof GetAllPromptsItemsProvider
> = GetAllPromptsItemsProvider$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPromptsItemsProvider$ {
  /** @deprecated use `GetAllPromptsItemsProvider$inboundSchema` instead. */
  export const inboundSchema = GetAllPromptsItemsProvider$inboundSchema;
  /** @deprecated use `GetAllPromptsItemsProvider$outboundSchema` instead. */
  export const outboundSchema = GetAllPromptsItemsProvider$outboundSchema;
}

/** @internal */
export const GetAllPromptsItemsRole$inboundSchema: z.ZodNativeEnum<
  typeof GetAllPromptsItemsRole
> = z.nativeEnum(GetAllPromptsItemsRole);

/** @internal */
export const GetAllPromptsItemsRole$outboundSchema: z.ZodNativeEnum<
  typeof GetAllPromptsItemsRole
> = GetAllPromptsItemsRole$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPromptsItemsRole$ {
  /** @deprecated use `GetAllPromptsItemsRole$inboundSchema` instead. */
  export const inboundSchema = GetAllPromptsItemsRole$inboundSchema;
  /** @deprecated use `GetAllPromptsItemsRole$outboundSchema` instead. */
  export const outboundSchema = GetAllPromptsItemsRole$outboundSchema;
}

/** @internal */
export const GetAllPrompts2PromptsType$inboundSchema: z.ZodNativeEnum<
  typeof GetAllPrompts2PromptsType
> = z.nativeEnum(GetAllPrompts2PromptsType);

/** @internal */
export const GetAllPrompts2PromptsType$outboundSchema: z.ZodNativeEnum<
  typeof GetAllPrompts2PromptsType
> = GetAllPrompts2PromptsType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPrompts2PromptsType$ {
  /** @deprecated use `GetAllPrompts2PromptsType$inboundSchema` instead. */
  export const inboundSchema = GetAllPrompts2PromptsType$inboundSchema;
  /** @deprecated use `GetAllPrompts2PromptsType$outboundSchema` instead. */
  export const outboundSchema = GetAllPrompts2PromptsType$outboundSchema;
}

/** @internal */
export const GetAllPrompts2ImageUrl$inboundSchema: z.ZodType<
  GetAllPrompts2ImageUrl,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string().optional(),
  url: z.string(),
  detail: z.string().optional(),
});

/** @internal */
export type GetAllPrompts2ImageUrl$Outbound = {
  id?: string | undefined;
  url: string;
  detail?: string | undefined;
};

/** @internal */
export const GetAllPrompts2ImageUrl$outboundSchema: z.ZodType<
  GetAllPrompts2ImageUrl$Outbound,
  z.ZodTypeDef,
  GetAllPrompts2ImageUrl
> = z.object({
  id: z.string().optional(),
  url: z.string(),
  detail: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPrompts2ImageUrl$ {
  /** @deprecated use `GetAllPrompts2ImageUrl$inboundSchema` instead. */
  export const inboundSchema = GetAllPrompts2ImageUrl$inboundSchema;
  /** @deprecated use `GetAllPrompts2ImageUrl$outboundSchema` instead. */
  export const outboundSchema = GetAllPrompts2ImageUrl$outboundSchema;
  /** @deprecated use `GetAllPrompts2ImageUrl$Outbound` instead. */
  export type Outbound = GetAllPrompts2ImageUrl$Outbound;
}

export function getAllPrompts2ImageUrlToJSON(
  getAllPrompts2ImageUrl: GetAllPrompts2ImageUrl,
): string {
  return JSON.stringify(
    GetAllPrompts2ImageUrl$outboundSchema.parse(getAllPrompts2ImageUrl),
  );
}

export function getAllPrompts2ImageUrlFromJSON(
  jsonString: string,
): SafeParseResult<GetAllPrompts2ImageUrl, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetAllPrompts2ImageUrl$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetAllPrompts2ImageUrl' from JSON`,
  );
}

/** @internal */
export const GetAllPrompts22$inboundSchema: z.ZodType<
  GetAllPrompts22,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: GetAllPrompts2PromptsType$inboundSchema,
  image_url: z.lazy(() => GetAllPrompts2ImageUrl$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "image_url": "imageUrl",
  });
});

/** @internal */
export type GetAllPrompts22$Outbound = {
  type: string;
  image_url: GetAllPrompts2ImageUrl$Outbound;
};

/** @internal */
export const GetAllPrompts22$outboundSchema: z.ZodType<
  GetAllPrompts22$Outbound,
  z.ZodTypeDef,
  GetAllPrompts22
> = z.object({
  type: GetAllPrompts2PromptsType$outboundSchema,
  imageUrl: z.lazy(() => GetAllPrompts2ImageUrl$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    imageUrl: "image_url",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPrompts22$ {
  /** @deprecated use `GetAllPrompts22$inboundSchema` instead. */
  export const inboundSchema = GetAllPrompts22$inboundSchema;
  /** @deprecated use `GetAllPrompts22$outboundSchema` instead. */
  export const outboundSchema = GetAllPrompts22$outboundSchema;
  /** @deprecated use `GetAllPrompts22$Outbound` instead. */
  export type Outbound = GetAllPrompts22$Outbound;
}

export function getAllPrompts22ToJSON(
  getAllPrompts22: GetAllPrompts22,
): string {
  return JSON.stringify(GetAllPrompts22$outboundSchema.parse(getAllPrompts22));
}

export function getAllPrompts22FromJSON(
  jsonString: string,
): SafeParseResult<GetAllPrompts22, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetAllPrompts22$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetAllPrompts22' from JSON`,
  );
}

/** @internal */
export const GetAllPrompts2Type$inboundSchema: z.ZodNativeEnum<
  typeof GetAllPrompts2Type
> = z.nativeEnum(GetAllPrompts2Type);

/** @internal */
export const GetAllPrompts2Type$outboundSchema: z.ZodNativeEnum<
  typeof GetAllPrompts2Type
> = GetAllPrompts2Type$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPrompts2Type$ {
  /** @deprecated use `GetAllPrompts2Type$inboundSchema` instead. */
  export const inboundSchema = GetAllPrompts2Type$inboundSchema;
  /** @deprecated use `GetAllPrompts2Type$outboundSchema` instead. */
  export const outboundSchema = GetAllPrompts2Type$outboundSchema;
}

/** @internal */
export const GetAllPrompts21$inboundSchema: z.ZodType<
  GetAllPrompts21,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: GetAllPrompts2Type$inboundSchema,
  text: z.string(),
});

/** @internal */
export type GetAllPrompts21$Outbound = {
  type: string;
  text: string;
};

/** @internal */
export const GetAllPrompts21$outboundSchema: z.ZodType<
  GetAllPrompts21$Outbound,
  z.ZodTypeDef,
  GetAllPrompts21
> = z.object({
  type: GetAllPrompts2Type$outboundSchema,
  text: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPrompts21$ {
  /** @deprecated use `GetAllPrompts21$inboundSchema` instead. */
  export const inboundSchema = GetAllPrompts21$inboundSchema;
  /** @deprecated use `GetAllPrompts21$outboundSchema` instead. */
  export const outboundSchema = GetAllPrompts21$outboundSchema;
  /** @deprecated use `GetAllPrompts21$Outbound` instead. */
  export type Outbound = GetAllPrompts21$Outbound;
}

export function getAllPrompts21ToJSON(
  getAllPrompts21: GetAllPrompts21,
): string {
  return JSON.stringify(GetAllPrompts21$outboundSchema.parse(getAllPrompts21));
}

export function getAllPrompts21FromJSON(
  jsonString: string,
): SafeParseResult<GetAllPrompts21, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetAllPrompts21$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetAllPrompts21' from JSON`,
  );
}

/** @internal */
export const GetAllPromptsContent2$inboundSchema: z.ZodType<
  GetAllPromptsContent2,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => GetAllPrompts21$inboundSchema),
  z.lazy(() => GetAllPrompts22$inboundSchema),
]);

/** @internal */
export type GetAllPromptsContent2$Outbound =
  | GetAllPrompts21$Outbound
  | GetAllPrompts22$Outbound;

/** @internal */
export const GetAllPromptsContent2$outboundSchema: z.ZodType<
  GetAllPromptsContent2$Outbound,
  z.ZodTypeDef,
  GetAllPromptsContent2
> = z.union([
  z.lazy(() => GetAllPrompts21$outboundSchema),
  z.lazy(() => GetAllPrompts22$outboundSchema),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPromptsContent2$ {
  /** @deprecated use `GetAllPromptsContent2$inboundSchema` instead. */
  export const inboundSchema = GetAllPromptsContent2$inboundSchema;
  /** @deprecated use `GetAllPromptsContent2$outboundSchema` instead. */
  export const outboundSchema = GetAllPromptsContent2$outboundSchema;
  /** @deprecated use `GetAllPromptsContent2$Outbound` instead. */
  export type Outbound = GetAllPromptsContent2$Outbound;
}

export function getAllPromptsContent2ToJSON(
  getAllPromptsContent2: GetAllPromptsContent2,
): string {
  return JSON.stringify(
    GetAllPromptsContent2$outboundSchema.parse(getAllPromptsContent2),
  );
}

export function getAllPromptsContent2FromJSON(
  jsonString: string,
): SafeParseResult<GetAllPromptsContent2, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetAllPromptsContent2$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetAllPromptsContent2' from JSON`,
  );
}

/** @internal */
export const GetAllPromptsItemsContent$inboundSchema: z.ZodType<
  GetAllPromptsItemsContent,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.string(),
  z.array(z.union([
    z.lazy(() => GetAllPrompts21$inboundSchema),
    z.lazy(() => GetAllPrompts22$inboundSchema),
  ])),
]);

/** @internal */
export type GetAllPromptsItemsContent$Outbound =
  | string
  | Array<GetAllPrompts21$Outbound | GetAllPrompts22$Outbound>;

/** @internal */
export const GetAllPromptsItemsContent$outboundSchema: z.ZodType<
  GetAllPromptsItemsContent$Outbound,
  z.ZodTypeDef,
  GetAllPromptsItemsContent
> = z.union([
  z.string(),
  z.array(z.union([
    z.lazy(() => GetAllPrompts21$outboundSchema),
    z.lazy(() => GetAllPrompts22$outboundSchema),
  ])),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPromptsItemsContent$ {
  /** @deprecated use `GetAllPromptsItemsContent$inboundSchema` instead. */
  export const inboundSchema = GetAllPromptsItemsContent$inboundSchema;
  /** @deprecated use `GetAllPromptsItemsContent$outboundSchema` instead. */
  export const outboundSchema = GetAllPromptsItemsContent$outboundSchema;
  /** @deprecated use `GetAllPromptsItemsContent$Outbound` instead. */
  export type Outbound = GetAllPromptsItemsContent$Outbound;
}

export function getAllPromptsItemsContentToJSON(
  getAllPromptsItemsContent: GetAllPromptsItemsContent,
): string {
  return JSON.stringify(
    GetAllPromptsItemsContent$outboundSchema.parse(getAllPromptsItemsContent),
  );
}

export function getAllPromptsItemsContentFromJSON(
  jsonString: string,
): SafeParseResult<GetAllPromptsItemsContent, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetAllPromptsItemsContent$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetAllPromptsItemsContent' from JSON`,
  );
}

/** @internal */
export const GetAllPromptsItemsPromptsResponse200Type$inboundSchema:
  z.ZodNativeEnum<typeof GetAllPromptsItemsPromptsResponse200Type> = z
    .nativeEnum(GetAllPromptsItemsPromptsResponse200Type);

/** @internal */
export const GetAllPromptsItemsPromptsResponse200Type$outboundSchema:
  z.ZodNativeEnum<typeof GetAllPromptsItemsPromptsResponse200Type> =
    GetAllPromptsItemsPromptsResponse200Type$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPromptsItemsPromptsResponse200Type$ {
  /** @deprecated use `GetAllPromptsItemsPromptsResponse200Type$inboundSchema` instead. */
  export const inboundSchema =
    GetAllPromptsItemsPromptsResponse200Type$inboundSchema;
  /** @deprecated use `GetAllPromptsItemsPromptsResponse200Type$outboundSchema` instead. */
  export const outboundSchema =
    GetAllPromptsItemsPromptsResponse200Type$outboundSchema;
}

/** @internal */
export const GetAllPromptsItemsFunction$inboundSchema: z.ZodType<
  GetAllPromptsItemsFunction,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.string(),
  arguments: z.string(),
});

/** @internal */
export type GetAllPromptsItemsFunction$Outbound = {
  name: string;
  arguments: string;
};

/** @internal */
export const GetAllPromptsItemsFunction$outboundSchema: z.ZodType<
  GetAllPromptsItemsFunction$Outbound,
  z.ZodTypeDef,
  GetAllPromptsItemsFunction
> = z.object({
  name: z.string(),
  arguments: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPromptsItemsFunction$ {
  /** @deprecated use `GetAllPromptsItemsFunction$inboundSchema` instead. */
  export const inboundSchema = GetAllPromptsItemsFunction$inboundSchema;
  /** @deprecated use `GetAllPromptsItemsFunction$outboundSchema` instead. */
  export const outboundSchema = GetAllPromptsItemsFunction$outboundSchema;
  /** @deprecated use `GetAllPromptsItemsFunction$Outbound` instead. */
  export type Outbound = GetAllPromptsItemsFunction$Outbound;
}

export function getAllPromptsItemsFunctionToJSON(
  getAllPromptsItemsFunction: GetAllPromptsItemsFunction,
): string {
  return JSON.stringify(
    GetAllPromptsItemsFunction$outboundSchema.parse(getAllPromptsItemsFunction),
  );
}

export function getAllPromptsItemsFunctionFromJSON(
  jsonString: string,
): SafeParseResult<GetAllPromptsItemsFunction, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetAllPromptsItemsFunction$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetAllPromptsItemsFunction' from JSON`,
  );
}

/** @internal */
export const GetAllPromptsItemsToolCalls$inboundSchema: z.ZodType<
  GetAllPromptsItemsToolCalls,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string().optional(),
  index: z.number().optional(),
  type: GetAllPromptsItemsPromptsResponse200Type$inboundSchema,
  function: z.lazy(() => GetAllPromptsItemsFunction$inboundSchema),
});

/** @internal */
export type GetAllPromptsItemsToolCalls$Outbound = {
  id?: string | undefined;
  index?: number | undefined;
  type: string;
  function: GetAllPromptsItemsFunction$Outbound;
};

/** @internal */
export const GetAllPromptsItemsToolCalls$outboundSchema: z.ZodType<
  GetAllPromptsItemsToolCalls$Outbound,
  z.ZodTypeDef,
  GetAllPromptsItemsToolCalls
> = z.object({
  id: z.string().optional(),
  index: z.number().optional(),
  type: GetAllPromptsItemsPromptsResponse200Type$outboundSchema,
  function: z.lazy(() => GetAllPromptsItemsFunction$outboundSchema),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPromptsItemsToolCalls$ {
  /** @deprecated use `GetAllPromptsItemsToolCalls$inboundSchema` instead. */
  export const inboundSchema = GetAllPromptsItemsToolCalls$inboundSchema;
  /** @deprecated use `GetAllPromptsItemsToolCalls$outboundSchema` instead. */
  export const outboundSchema = GetAllPromptsItemsToolCalls$outboundSchema;
  /** @deprecated use `GetAllPromptsItemsToolCalls$Outbound` instead. */
  export type Outbound = GetAllPromptsItemsToolCalls$Outbound;
}

export function getAllPromptsItemsToolCallsToJSON(
  getAllPromptsItemsToolCalls: GetAllPromptsItemsToolCalls,
): string {
  return JSON.stringify(
    GetAllPromptsItemsToolCalls$outboundSchema.parse(
      getAllPromptsItemsToolCalls,
    ),
  );
}

export function getAllPromptsItemsToolCallsFromJSON(
  jsonString: string,
): SafeParseResult<GetAllPromptsItemsToolCalls, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetAllPromptsItemsToolCalls$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetAllPromptsItemsToolCalls' from JSON`,
  );
}

/** @internal */
export const GetAllPromptsItemsMessages$inboundSchema: z.ZodType<
  GetAllPromptsItemsMessages,
  z.ZodTypeDef,
  unknown
> = z.object({
  role: GetAllPromptsItemsRole$inboundSchema,
  content: z.union([
    z.string(),
    z.array(z.union([
      z.lazy(() => GetAllPrompts21$inboundSchema),
      z.lazy(() => GetAllPrompts22$inboundSchema),
    ])),
  ]),
  tool_calls: z.array(z.lazy(() => GetAllPromptsItemsToolCalls$inboundSchema))
    .optional(),
}).transform((v) => {
  return remap$(v, {
    "tool_calls": "toolCalls",
  });
});

/** @internal */
export type GetAllPromptsItemsMessages$Outbound = {
  role: string;
  content: string | Array<GetAllPrompts21$Outbound | GetAllPrompts22$Outbound>;
  tool_calls?: Array<GetAllPromptsItemsToolCalls$Outbound> | undefined;
};

/** @internal */
export const GetAllPromptsItemsMessages$outboundSchema: z.ZodType<
  GetAllPromptsItemsMessages$Outbound,
  z.ZodTypeDef,
  GetAllPromptsItemsMessages
> = z.object({
  role: GetAllPromptsItemsRole$outboundSchema,
  content: z.union([
    z.string(),
    z.array(z.union([
      z.lazy(() => GetAllPrompts21$outboundSchema),
      z.lazy(() => GetAllPrompts22$outboundSchema),
    ])),
  ]),
  toolCalls: z.array(z.lazy(() => GetAllPromptsItemsToolCalls$outboundSchema))
    .optional(),
}).transform((v) => {
  return remap$(v, {
    toolCalls: "tool_calls",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPromptsItemsMessages$ {
  /** @deprecated use `GetAllPromptsItemsMessages$inboundSchema` instead. */
  export const inboundSchema = GetAllPromptsItemsMessages$inboundSchema;
  /** @deprecated use `GetAllPromptsItemsMessages$outboundSchema` instead. */
  export const outboundSchema = GetAllPromptsItemsMessages$outboundSchema;
  /** @deprecated use `GetAllPromptsItemsMessages$Outbound` instead. */
  export type Outbound = GetAllPromptsItemsMessages$Outbound;
}

export function getAllPromptsItemsMessagesToJSON(
  getAllPromptsItemsMessages: GetAllPromptsItemsMessages,
): string {
  return JSON.stringify(
    GetAllPromptsItemsMessages$outboundSchema.parse(getAllPromptsItemsMessages),
  );
}

export function getAllPromptsItemsMessagesFromJSON(
  jsonString: string,
): SafeParseResult<GetAllPromptsItemsMessages, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetAllPromptsItemsMessages$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetAllPromptsItemsMessages' from JSON`,
  );
}

/** @internal */
export const GetAllPromptsItemsPromptConfig$inboundSchema: z.ZodType<
  GetAllPromptsItemsPromptConfig,
  z.ZodTypeDef,
  unknown
> = z.object({
  stream: z.boolean().optional(),
  model: z.string().optional(),
  model_db_id: z.string().optional(),
  model_type: GetAllPromptsItemsModelType$inboundSchema.optional(),
  model_parameters: z.lazy(() =>
    GetAllPromptsItemsModelParameters$inboundSchema
  ).optional(),
  provider: GetAllPromptsItemsProvider$inboundSchema.optional(),
  integration_id: z.nullable(z.string()).optional(),
  version: z.string().optional(),
  messages: z.array(z.lazy(() => GetAllPromptsItemsMessages$inboundSchema)),
}).transform((v) => {
  return remap$(v, {
    "model_db_id": "modelDbId",
    "model_type": "modelType",
    "model_parameters": "modelParameters",
    "integration_id": "integrationId",
  });
});

/** @internal */
export type GetAllPromptsItemsPromptConfig$Outbound = {
  stream?: boolean | undefined;
  model?: string | undefined;
  model_db_id?: string | undefined;
  model_type?: string | undefined;
  model_parameters?: GetAllPromptsItemsModelParameters$Outbound | undefined;
  provider?: string | undefined;
  integration_id?: string | null | undefined;
  version?: string | undefined;
  messages: Array<GetAllPromptsItemsMessages$Outbound>;
};

/** @internal */
export const GetAllPromptsItemsPromptConfig$outboundSchema: z.ZodType<
  GetAllPromptsItemsPromptConfig$Outbound,
  z.ZodTypeDef,
  GetAllPromptsItemsPromptConfig
> = z.object({
  stream: z.boolean().optional(),
  model: z.string().optional(),
  modelDbId: z.string().optional(),
  modelType: GetAllPromptsItemsModelType$outboundSchema.optional(),
  modelParameters: z.lazy(() =>
    GetAllPromptsItemsModelParameters$outboundSchema
  ).optional(),
  provider: GetAllPromptsItemsProvider$outboundSchema.optional(),
  integrationId: z.nullable(z.string()).optional(),
  version: z.string().optional(),
  messages: z.array(z.lazy(() => GetAllPromptsItemsMessages$outboundSchema)),
}).transform((v) => {
  return remap$(v, {
    modelDbId: "model_db_id",
    modelType: "model_type",
    modelParameters: "model_parameters",
    integrationId: "integration_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPromptsItemsPromptConfig$ {
  /** @deprecated use `GetAllPromptsItemsPromptConfig$inboundSchema` instead. */
  export const inboundSchema = GetAllPromptsItemsPromptConfig$inboundSchema;
  /** @deprecated use `GetAllPromptsItemsPromptConfig$outboundSchema` instead. */
  export const outboundSchema = GetAllPromptsItemsPromptConfig$outboundSchema;
  /** @deprecated use `GetAllPromptsItemsPromptConfig$Outbound` instead. */
  export type Outbound = GetAllPromptsItemsPromptConfig$Outbound;
}

export function getAllPromptsItemsPromptConfigToJSON(
  getAllPromptsItemsPromptConfig: GetAllPromptsItemsPromptConfig,
): string {
  return JSON.stringify(
    GetAllPromptsItemsPromptConfig$outboundSchema.parse(
      getAllPromptsItemsPromptConfig,
    ),
  );
}

export function getAllPromptsItemsPromptConfigFromJSON(
  jsonString: string,
): SafeParseResult<GetAllPromptsItemsPromptConfig, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetAllPromptsItemsPromptConfig$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetAllPromptsItemsPromptConfig' from JSON`,
  );
}

/** @internal */
export const GetAllPromptsItemsMetadata$inboundSchema: z.ZodType<
  GetAllPromptsItemsMetadata,
  z.ZodTypeDef,
  unknown
> = z.object({
  use_cases: z.array(z.string()).optional(),
  language: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "use_cases": "useCases",
  });
});

/** @internal */
export type GetAllPromptsItemsMetadata$Outbound = {
  use_cases?: Array<string> | undefined;
  language?: string | undefined;
};

/** @internal */
export const GetAllPromptsItemsMetadata$outboundSchema: z.ZodType<
  GetAllPromptsItemsMetadata$Outbound,
  z.ZodTypeDef,
  GetAllPromptsItemsMetadata
> = z.object({
  useCases: z.array(z.string()).optional(),
  language: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    useCases: "use_cases",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPromptsItemsMetadata$ {
  /** @deprecated use `GetAllPromptsItemsMetadata$inboundSchema` instead. */
  export const inboundSchema = GetAllPromptsItemsMetadata$inboundSchema;
  /** @deprecated use `GetAllPromptsItemsMetadata$outboundSchema` instead. */
  export const outboundSchema = GetAllPromptsItemsMetadata$outboundSchema;
  /** @deprecated use `GetAllPromptsItemsMetadata$Outbound` instead. */
  export type Outbound = GetAllPromptsItemsMetadata$Outbound;
}

export function getAllPromptsItemsMetadataToJSON(
  getAllPromptsItemsMetadata: GetAllPromptsItemsMetadata,
): string {
  return JSON.stringify(
    GetAllPromptsItemsMetadata$outboundSchema.parse(getAllPromptsItemsMetadata),
  );
}

export function getAllPromptsItemsMetadataFromJSON(
  jsonString: string,
): SafeParseResult<GetAllPromptsItemsMetadata, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetAllPromptsItemsMetadata$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetAllPromptsItemsMetadata' from JSON`,
  );
}

/** @internal */
export const GetAllPromptsItemsPromptsResponse200ApplicationJSONModelType$inboundSchema:
  z.ZodNativeEnum<
    typeof GetAllPromptsItemsPromptsResponse200ApplicationJSONModelType
  > = z.nativeEnum(
    GetAllPromptsItemsPromptsResponse200ApplicationJSONModelType,
  );

/** @internal */
export const GetAllPromptsItemsPromptsResponse200ApplicationJSONModelType$outboundSchema:
  z.ZodNativeEnum<
    typeof GetAllPromptsItemsPromptsResponse200ApplicationJSONModelType
  > =
    GetAllPromptsItemsPromptsResponse200ApplicationJSONModelType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPromptsItemsPromptsResponse200ApplicationJSONModelType$ {
  /** @deprecated use `GetAllPromptsItemsPromptsResponse200ApplicationJSONModelType$inboundSchema` instead. */
  export const inboundSchema =
    GetAllPromptsItemsPromptsResponse200ApplicationJSONModelType$inboundSchema;
  /** @deprecated use `GetAllPromptsItemsPromptsResponse200ApplicationJSONModelType$outboundSchema` instead. */
  export const outboundSchema =
    GetAllPromptsItemsPromptsResponse200ApplicationJSONModelType$outboundSchema;
}

/** @internal */
export const GetAllPromptsItemsPromptsResponse200ApplicationJSONResponseBodyFormat$inboundSchema:
  z.ZodNativeEnum<
    typeof GetAllPromptsItemsPromptsResponse200ApplicationJSONResponseBodyFormat
  > = z.nativeEnum(
    GetAllPromptsItemsPromptsResponse200ApplicationJSONResponseBodyFormat,
  );

/** @internal */
export const GetAllPromptsItemsPromptsResponse200ApplicationJSONResponseBodyFormat$outboundSchema:
  z.ZodNativeEnum<
    typeof GetAllPromptsItemsPromptsResponse200ApplicationJSONResponseBodyFormat
  > =
    GetAllPromptsItemsPromptsResponse200ApplicationJSONResponseBodyFormat$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPromptsItemsPromptsResponse200ApplicationJSONResponseBodyFormat$ {
  /** @deprecated use `GetAllPromptsItemsPromptsResponse200ApplicationJSONResponseBodyFormat$inboundSchema` instead. */
  export const inboundSchema =
    GetAllPromptsItemsPromptsResponse200ApplicationJSONResponseBodyFormat$inboundSchema;
  /** @deprecated use `GetAllPromptsItemsPromptsResponse200ApplicationJSONResponseBodyFormat$outboundSchema` instead. */
  export const outboundSchema =
    GetAllPromptsItemsPromptsResponse200ApplicationJSONResponseBodyFormat$outboundSchema;
}

/** @internal */
export const GetAllPromptsItemsPromptsResponse200ApplicationJSONQuality$inboundSchema:
  z.ZodNativeEnum<
    typeof GetAllPromptsItemsPromptsResponse200ApplicationJSONQuality
  > = z.nativeEnum(GetAllPromptsItemsPromptsResponse200ApplicationJSONQuality);

/** @internal */
export const GetAllPromptsItemsPromptsResponse200ApplicationJSONQuality$outboundSchema:
  z.ZodNativeEnum<
    typeof GetAllPromptsItemsPromptsResponse200ApplicationJSONQuality
  > = GetAllPromptsItemsPromptsResponse200ApplicationJSONQuality$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPromptsItemsPromptsResponse200ApplicationJSONQuality$ {
  /** @deprecated use `GetAllPromptsItemsPromptsResponse200ApplicationJSONQuality$inboundSchema` instead. */
  export const inboundSchema =
    GetAllPromptsItemsPromptsResponse200ApplicationJSONQuality$inboundSchema;
  /** @deprecated use `GetAllPromptsItemsPromptsResponse200ApplicationJSONQuality$outboundSchema` instead. */
  export const outboundSchema =
    GetAllPromptsItemsPromptsResponse200ApplicationJSONQuality$outboundSchema;
}

/** @internal */
export const GetAllPromptsResponseFormatPromptsResponse200ApplicationJSONResponseBodyItems1VersionsType$inboundSchema:
  z.ZodNativeEnum<
    typeof GetAllPromptsResponseFormatPromptsResponse200ApplicationJSONResponseBodyItems1VersionsType
  > = z.nativeEnum(
    GetAllPromptsResponseFormatPromptsResponse200ApplicationJSONResponseBodyItems1VersionsType,
  );

/** @internal */
export const GetAllPromptsResponseFormatPromptsResponse200ApplicationJSONResponseBodyItems1VersionsType$outboundSchema:
  z.ZodNativeEnum<
    typeof GetAllPromptsResponseFormatPromptsResponse200ApplicationJSONResponseBodyItems1VersionsType
  > =
    GetAllPromptsResponseFormatPromptsResponse200ApplicationJSONResponseBodyItems1VersionsType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPromptsResponseFormatPromptsResponse200ApplicationJSONResponseBodyItems1VersionsType$ {
  /** @deprecated use `GetAllPromptsResponseFormatPromptsResponse200ApplicationJSONResponseBodyItems1VersionsType$inboundSchema` instead. */
  export const inboundSchema =
    GetAllPromptsResponseFormatPromptsResponse200ApplicationJSONResponseBodyItems1VersionsType$inboundSchema;
  /** @deprecated use `GetAllPromptsResponseFormatPromptsResponse200ApplicationJSONResponseBodyItems1VersionsType$outboundSchema` instead. */
  export const outboundSchema =
    GetAllPromptsResponseFormatPromptsResponse200ApplicationJSONResponseBodyItems1VersionsType$outboundSchema;
}

/** @internal */
export const GetAllPromptsResponseFormatPromptsResponse200ApplicationJson2$inboundSchema:
  z.ZodType<
    GetAllPromptsResponseFormatPromptsResponse200ApplicationJson2,
    z.ZodTypeDef,
    unknown
  > = z.object({
    type:
      GetAllPromptsResponseFormatPromptsResponse200ApplicationJSONResponseBodyItems1VersionsType$inboundSchema,
  });

/** @internal */
export type GetAllPromptsResponseFormatPromptsResponse200ApplicationJson2$Outbound =
  {
    type: string;
  };

/** @internal */
export const GetAllPromptsResponseFormatPromptsResponse200ApplicationJson2$outboundSchema:
  z.ZodType<
    GetAllPromptsResponseFormatPromptsResponse200ApplicationJson2$Outbound,
    z.ZodTypeDef,
    GetAllPromptsResponseFormatPromptsResponse200ApplicationJson2
  > = z.object({
    type:
      GetAllPromptsResponseFormatPromptsResponse200ApplicationJSONResponseBodyItems1VersionsType$outboundSchema,
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPromptsResponseFormatPromptsResponse200ApplicationJson2$ {
  /** @deprecated use `GetAllPromptsResponseFormatPromptsResponse200ApplicationJson2$inboundSchema` instead. */
  export const inboundSchema =
    GetAllPromptsResponseFormatPromptsResponse200ApplicationJson2$inboundSchema;
  /** @deprecated use `GetAllPromptsResponseFormatPromptsResponse200ApplicationJson2$outboundSchema` instead. */
  export const outboundSchema =
    GetAllPromptsResponseFormatPromptsResponse200ApplicationJson2$outboundSchema;
  /** @deprecated use `GetAllPromptsResponseFormatPromptsResponse200ApplicationJson2$Outbound` instead. */
  export type Outbound =
    GetAllPromptsResponseFormatPromptsResponse200ApplicationJson2$Outbound;
}

export function getAllPromptsResponseFormatPromptsResponse200ApplicationJson2ToJSON(
  getAllPromptsResponseFormatPromptsResponse200ApplicationJson2:
    GetAllPromptsResponseFormatPromptsResponse200ApplicationJson2,
): string {
  return JSON.stringify(
    GetAllPromptsResponseFormatPromptsResponse200ApplicationJson2$outboundSchema
      .parse(getAllPromptsResponseFormatPromptsResponse200ApplicationJson2),
  );
}

export function getAllPromptsResponseFormatPromptsResponse200ApplicationJson2FromJSON(
  jsonString: string,
): SafeParseResult<
  GetAllPromptsResponseFormatPromptsResponse200ApplicationJson2,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetAllPromptsResponseFormatPromptsResponse200ApplicationJson2$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'GetAllPromptsResponseFormatPromptsResponse200ApplicationJson2' from JSON`,
  );
}

/** @internal */
export const GetAllPromptsResponseFormatPromptsResponse200ApplicationJSONResponseBodyItems1Type$inboundSchema:
  z.ZodNativeEnum<
    typeof GetAllPromptsResponseFormatPromptsResponse200ApplicationJSONResponseBodyItems1Type
  > = z.nativeEnum(
    GetAllPromptsResponseFormatPromptsResponse200ApplicationJSONResponseBodyItems1Type,
  );

/** @internal */
export const GetAllPromptsResponseFormatPromptsResponse200ApplicationJSONResponseBodyItems1Type$outboundSchema:
  z.ZodNativeEnum<
    typeof GetAllPromptsResponseFormatPromptsResponse200ApplicationJSONResponseBodyItems1Type
  > =
    GetAllPromptsResponseFormatPromptsResponse200ApplicationJSONResponseBodyItems1Type$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPromptsResponseFormatPromptsResponse200ApplicationJSONResponseBodyItems1Type$ {
  /** @deprecated use `GetAllPromptsResponseFormatPromptsResponse200ApplicationJSONResponseBodyItems1Type$inboundSchema` instead. */
  export const inboundSchema =
    GetAllPromptsResponseFormatPromptsResponse200ApplicationJSONResponseBodyItems1Type$inboundSchema;
  /** @deprecated use `GetAllPromptsResponseFormatPromptsResponse200ApplicationJSONResponseBodyItems1Type$outboundSchema` instead. */
  export const outboundSchema =
    GetAllPromptsResponseFormatPromptsResponse200ApplicationJSONResponseBodyItems1Type$outboundSchema;
}

/** @internal */
export const GetAllPromptsResponseFormatPromptsResponse200ApplicationJSONJSONSchema$inboundSchema:
  z.ZodType<
    GetAllPromptsResponseFormatPromptsResponse200ApplicationJSONJSONSchema,
    z.ZodTypeDef,
    unknown
  > = z.object({
    name: z.string(),
    strict: z.boolean(),
    schema: z.record(z.any()),
  });

/** @internal */
export type GetAllPromptsResponseFormatPromptsResponse200ApplicationJSONJSONSchema$Outbound =
  {
    name: string;
    strict: boolean;
    schema: { [k: string]: any };
  };

/** @internal */
export const GetAllPromptsResponseFormatPromptsResponse200ApplicationJSONJSONSchema$outboundSchema:
  z.ZodType<
    GetAllPromptsResponseFormatPromptsResponse200ApplicationJSONJSONSchema$Outbound,
    z.ZodTypeDef,
    GetAllPromptsResponseFormatPromptsResponse200ApplicationJSONJSONSchema
  > = z.object({
    name: z.string(),
    strict: z.boolean(),
    schema: z.record(z.any()),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPromptsResponseFormatPromptsResponse200ApplicationJSONJSONSchema$ {
  /** @deprecated use `GetAllPromptsResponseFormatPromptsResponse200ApplicationJSONJSONSchema$inboundSchema` instead. */
  export const inboundSchema =
    GetAllPromptsResponseFormatPromptsResponse200ApplicationJSONJSONSchema$inboundSchema;
  /** @deprecated use `GetAllPromptsResponseFormatPromptsResponse200ApplicationJSONJSONSchema$outboundSchema` instead. */
  export const outboundSchema =
    GetAllPromptsResponseFormatPromptsResponse200ApplicationJSONJSONSchema$outboundSchema;
  /** @deprecated use `GetAllPromptsResponseFormatPromptsResponse200ApplicationJSONJSONSchema$Outbound` instead. */
  export type Outbound =
    GetAllPromptsResponseFormatPromptsResponse200ApplicationJSONJSONSchema$Outbound;
}

export function getAllPromptsResponseFormatPromptsResponse200ApplicationJSONJSONSchemaToJSON(
  getAllPromptsResponseFormatPromptsResponse200ApplicationJSONJSONSchema:
    GetAllPromptsResponseFormatPromptsResponse200ApplicationJSONJSONSchema,
): string {
  return JSON.stringify(
    GetAllPromptsResponseFormatPromptsResponse200ApplicationJSONJSONSchema$outboundSchema
      .parse(
        getAllPromptsResponseFormatPromptsResponse200ApplicationJSONJSONSchema,
      ),
  );
}

export function getAllPromptsResponseFormatPromptsResponse200ApplicationJSONJSONSchemaFromJSON(
  jsonString: string,
): SafeParseResult<
  GetAllPromptsResponseFormatPromptsResponse200ApplicationJSONJSONSchema,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetAllPromptsResponseFormatPromptsResponse200ApplicationJSONJSONSchema$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'GetAllPromptsResponseFormatPromptsResponse200ApplicationJSONJSONSchema' from JSON`,
  );
}

/** @internal */
export const GetAllPromptsResponseFormatPromptsResponse200ApplicationJson1$inboundSchema:
  z.ZodType<
    GetAllPromptsResponseFormatPromptsResponse200ApplicationJson1,
    z.ZodTypeDef,
    unknown
  > = z.object({
    type:
      GetAllPromptsResponseFormatPromptsResponse200ApplicationJSONResponseBodyItems1Type$inboundSchema,
    json_schema: z.lazy(() =>
      GetAllPromptsResponseFormatPromptsResponse200ApplicationJSONJSONSchema$inboundSchema
    ),
  }).transform((v) => {
    return remap$(v, {
      "json_schema": "jsonSchema",
    });
  });

/** @internal */
export type GetAllPromptsResponseFormatPromptsResponse200ApplicationJson1$Outbound =
  {
    type: string;
    json_schema:
      GetAllPromptsResponseFormatPromptsResponse200ApplicationJSONJSONSchema$Outbound;
  };

/** @internal */
export const GetAllPromptsResponseFormatPromptsResponse200ApplicationJson1$outboundSchema:
  z.ZodType<
    GetAllPromptsResponseFormatPromptsResponse200ApplicationJson1$Outbound,
    z.ZodTypeDef,
    GetAllPromptsResponseFormatPromptsResponse200ApplicationJson1
  > = z.object({
    type:
      GetAllPromptsResponseFormatPromptsResponse200ApplicationJSONResponseBodyItems1Type$outboundSchema,
    jsonSchema: z.lazy(() =>
      GetAllPromptsResponseFormatPromptsResponse200ApplicationJSONJSONSchema$outboundSchema
    ),
  }).transform((v) => {
    return remap$(v, {
      jsonSchema: "json_schema",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPromptsResponseFormatPromptsResponse200ApplicationJson1$ {
  /** @deprecated use `GetAllPromptsResponseFormatPromptsResponse200ApplicationJson1$inboundSchema` instead. */
  export const inboundSchema =
    GetAllPromptsResponseFormatPromptsResponse200ApplicationJson1$inboundSchema;
  /** @deprecated use `GetAllPromptsResponseFormatPromptsResponse200ApplicationJson1$outboundSchema` instead. */
  export const outboundSchema =
    GetAllPromptsResponseFormatPromptsResponse200ApplicationJson1$outboundSchema;
  /** @deprecated use `GetAllPromptsResponseFormatPromptsResponse200ApplicationJson1$Outbound` instead. */
  export type Outbound =
    GetAllPromptsResponseFormatPromptsResponse200ApplicationJson1$Outbound;
}

export function getAllPromptsResponseFormatPromptsResponse200ApplicationJson1ToJSON(
  getAllPromptsResponseFormatPromptsResponse200ApplicationJson1:
    GetAllPromptsResponseFormatPromptsResponse200ApplicationJson1,
): string {
  return JSON.stringify(
    GetAllPromptsResponseFormatPromptsResponse200ApplicationJson1$outboundSchema
      .parse(getAllPromptsResponseFormatPromptsResponse200ApplicationJson1),
  );
}

export function getAllPromptsResponseFormatPromptsResponse200ApplicationJson1FromJSON(
  jsonString: string,
): SafeParseResult<
  GetAllPromptsResponseFormatPromptsResponse200ApplicationJson1,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetAllPromptsResponseFormatPromptsResponse200ApplicationJson1$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'GetAllPromptsResponseFormatPromptsResponse200ApplicationJson1' from JSON`,
  );
}

/** @internal */
export const GetAllPromptsItemsPromptsResponse200ApplicationJSONResponseFormat$inboundSchema:
  z.ZodType<
    GetAllPromptsItemsPromptsResponse200ApplicationJSONResponseFormat,
    z.ZodTypeDef,
    unknown
  > = z.union([
    z.lazy(() =>
      GetAllPromptsResponseFormatPromptsResponse200ApplicationJson2$inboundSchema
    ),
    z.lazy(() =>
      GetAllPromptsResponseFormatPromptsResponse200ApplicationJson1$inboundSchema
    ),
  ]);

/** @internal */
export type GetAllPromptsItemsPromptsResponse200ApplicationJSONResponseFormat$Outbound =
  | GetAllPromptsResponseFormatPromptsResponse200ApplicationJson2$Outbound
  | GetAllPromptsResponseFormatPromptsResponse200ApplicationJson1$Outbound;

/** @internal */
export const GetAllPromptsItemsPromptsResponse200ApplicationJSONResponseFormat$outboundSchema:
  z.ZodType<
    GetAllPromptsItemsPromptsResponse200ApplicationJSONResponseFormat$Outbound,
    z.ZodTypeDef,
    GetAllPromptsItemsPromptsResponse200ApplicationJSONResponseFormat
  > = z.union([
    z.lazy(() =>
      GetAllPromptsResponseFormatPromptsResponse200ApplicationJson2$outboundSchema
    ),
    z.lazy(() =>
      GetAllPromptsResponseFormatPromptsResponse200ApplicationJson1$outboundSchema
    ),
  ]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPromptsItemsPromptsResponse200ApplicationJSONResponseFormat$ {
  /** @deprecated use `GetAllPromptsItemsPromptsResponse200ApplicationJSONResponseFormat$inboundSchema` instead. */
  export const inboundSchema =
    GetAllPromptsItemsPromptsResponse200ApplicationJSONResponseFormat$inboundSchema;
  /** @deprecated use `GetAllPromptsItemsPromptsResponse200ApplicationJSONResponseFormat$outboundSchema` instead. */
  export const outboundSchema =
    GetAllPromptsItemsPromptsResponse200ApplicationJSONResponseFormat$outboundSchema;
  /** @deprecated use `GetAllPromptsItemsPromptsResponse200ApplicationJSONResponseFormat$Outbound` instead. */
  export type Outbound =
    GetAllPromptsItemsPromptsResponse200ApplicationJSONResponseFormat$Outbound;
}

export function getAllPromptsItemsPromptsResponse200ApplicationJSONResponseFormatToJSON(
  getAllPromptsItemsPromptsResponse200ApplicationJSONResponseFormat:
    GetAllPromptsItemsPromptsResponse200ApplicationJSONResponseFormat,
): string {
  return JSON.stringify(
    GetAllPromptsItemsPromptsResponse200ApplicationJSONResponseFormat$outboundSchema
      .parse(getAllPromptsItemsPromptsResponse200ApplicationJSONResponseFormat),
  );
}

export function getAllPromptsItemsPromptsResponse200ApplicationJSONResponseFormatFromJSON(
  jsonString: string,
): SafeParseResult<
  GetAllPromptsItemsPromptsResponse200ApplicationJSONResponseFormat,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetAllPromptsItemsPromptsResponse200ApplicationJSONResponseFormat$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'GetAllPromptsItemsPromptsResponse200ApplicationJSONResponseFormat' from JSON`,
  );
}

/** @internal */
export const GetAllPromptsItemsPromptsResponse200ApplicationJSONPhotoRealVersion$inboundSchema:
  z.ZodNativeEnum<
    typeof GetAllPromptsItemsPromptsResponse200ApplicationJSONPhotoRealVersion
  > = z.nativeEnum(
    GetAllPromptsItemsPromptsResponse200ApplicationJSONPhotoRealVersion,
  );

/** @internal */
export const GetAllPromptsItemsPromptsResponse200ApplicationJSONPhotoRealVersion$outboundSchema:
  z.ZodNativeEnum<
    typeof GetAllPromptsItemsPromptsResponse200ApplicationJSONPhotoRealVersion
  > =
    GetAllPromptsItemsPromptsResponse200ApplicationJSONPhotoRealVersion$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPromptsItemsPromptsResponse200ApplicationJSONPhotoRealVersion$ {
  /** @deprecated use `GetAllPromptsItemsPromptsResponse200ApplicationJSONPhotoRealVersion$inboundSchema` instead. */
  export const inboundSchema =
    GetAllPromptsItemsPromptsResponse200ApplicationJSONPhotoRealVersion$inboundSchema;
  /** @deprecated use `GetAllPromptsItemsPromptsResponse200ApplicationJSONPhotoRealVersion$outboundSchema` instead. */
  export const outboundSchema =
    GetAllPromptsItemsPromptsResponse200ApplicationJSONPhotoRealVersion$outboundSchema;
}

/** @internal */
export const GetAllPromptsItemsPromptsResponse200ApplicationJSONEncodingFormat$inboundSchema:
  z.ZodNativeEnum<
    typeof GetAllPromptsItemsPromptsResponse200ApplicationJSONEncodingFormat
  > = z.nativeEnum(
    GetAllPromptsItemsPromptsResponse200ApplicationJSONEncodingFormat,
  );

/** @internal */
export const GetAllPromptsItemsPromptsResponse200ApplicationJSONEncodingFormat$outboundSchema:
  z.ZodNativeEnum<
    typeof GetAllPromptsItemsPromptsResponse200ApplicationJSONEncodingFormat
  > =
    GetAllPromptsItemsPromptsResponse200ApplicationJSONEncodingFormat$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPromptsItemsPromptsResponse200ApplicationJSONEncodingFormat$ {
  /** @deprecated use `GetAllPromptsItemsPromptsResponse200ApplicationJSONEncodingFormat$inboundSchema` instead. */
  export const inboundSchema =
    GetAllPromptsItemsPromptsResponse200ApplicationJSONEncodingFormat$inboundSchema;
  /** @deprecated use `GetAllPromptsItemsPromptsResponse200ApplicationJSONEncodingFormat$outboundSchema` instead. */
  export const outboundSchema =
    GetAllPromptsItemsPromptsResponse200ApplicationJSONEncodingFormat$outboundSchema;
}

/** @internal */
export const GetAllPromptsItemsPromptsResponse200ApplicationJSONModelParameters$inboundSchema:
  z.ZodType<
    GetAllPromptsItemsPromptsResponse200ApplicationJSONModelParameters,
    z.ZodTypeDef,
    unknown
  > = z.object({
    temperature: z.number().optional(),
    maxTokens: z.number().optional(),
    topK: z.number().optional(),
    topP: z.number().optional(),
    frequencyPenalty: z.number().optional(),
    presencePenalty: z.number().optional(),
    numImages: z.number().optional(),
    seed: z.number().optional(),
    format:
      GetAllPromptsItemsPromptsResponse200ApplicationJSONResponseBodyFormat$inboundSchema
        .optional(),
    dimensions: z.string().optional(),
    quality:
      GetAllPromptsItemsPromptsResponse200ApplicationJSONQuality$inboundSchema
        .optional(),
    style: z.string().optional(),
    responseFormat: z.nullable(
      z.union([
        z.lazy(() =>
          GetAllPromptsResponseFormatPromptsResponse200ApplicationJson2$inboundSchema
        ),
        z.lazy(() =>
          GetAllPromptsResponseFormatPromptsResponse200ApplicationJson1$inboundSchema
        ),
      ]),
    ).optional(),
    photoRealVersion:
      GetAllPromptsItemsPromptsResponse200ApplicationJSONPhotoRealVersion$inboundSchema
        .optional(),
    encoding_format:
      GetAllPromptsItemsPromptsResponse200ApplicationJSONEncodingFormat$inboundSchema
        .optional(),
  }).transform((v) => {
    return remap$(v, {
      "encoding_format": "encodingFormat",
    });
  });

/** @internal */
export type GetAllPromptsItemsPromptsResponse200ApplicationJSONModelParameters$Outbound =
  {
    temperature?: number | undefined;
    maxTokens?: number | undefined;
    topK?: number | undefined;
    topP?: number | undefined;
    frequencyPenalty?: number | undefined;
    presencePenalty?: number | undefined;
    numImages?: number | undefined;
    seed?: number | undefined;
    format?: string | undefined;
    dimensions?: string | undefined;
    quality?: string | undefined;
    style?: string | undefined;
    responseFormat?:
      | GetAllPromptsResponseFormatPromptsResponse200ApplicationJson2$Outbound
      | GetAllPromptsResponseFormatPromptsResponse200ApplicationJson1$Outbound
      | null
      | undefined;
    photoRealVersion?: string | undefined;
    encoding_format?: string | undefined;
  };

/** @internal */
export const GetAllPromptsItemsPromptsResponse200ApplicationJSONModelParameters$outboundSchema:
  z.ZodType<
    GetAllPromptsItemsPromptsResponse200ApplicationJSONModelParameters$Outbound,
    z.ZodTypeDef,
    GetAllPromptsItemsPromptsResponse200ApplicationJSONModelParameters
  > = z.object({
    temperature: z.number().optional(),
    maxTokens: z.number().optional(),
    topK: z.number().optional(),
    topP: z.number().optional(),
    frequencyPenalty: z.number().optional(),
    presencePenalty: z.number().optional(),
    numImages: z.number().optional(),
    seed: z.number().optional(),
    format:
      GetAllPromptsItemsPromptsResponse200ApplicationJSONResponseBodyFormat$outboundSchema
        .optional(),
    dimensions: z.string().optional(),
    quality:
      GetAllPromptsItemsPromptsResponse200ApplicationJSONQuality$outboundSchema
        .optional(),
    style: z.string().optional(),
    responseFormat: z.nullable(
      z.union([
        z.lazy(() =>
          GetAllPromptsResponseFormatPromptsResponse200ApplicationJson2$outboundSchema
        ),
        z.lazy(() =>
          GetAllPromptsResponseFormatPromptsResponse200ApplicationJson1$outboundSchema
        ),
      ]),
    ).optional(),
    photoRealVersion:
      GetAllPromptsItemsPromptsResponse200ApplicationJSONPhotoRealVersion$outboundSchema
        .optional(),
    encodingFormat:
      GetAllPromptsItemsPromptsResponse200ApplicationJSONEncodingFormat$outboundSchema
        .optional(),
  }).transform((v) => {
    return remap$(v, {
      encodingFormat: "encoding_format",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPromptsItemsPromptsResponse200ApplicationJSONModelParameters$ {
  /** @deprecated use `GetAllPromptsItemsPromptsResponse200ApplicationJSONModelParameters$inboundSchema` instead. */
  export const inboundSchema =
    GetAllPromptsItemsPromptsResponse200ApplicationJSONModelParameters$inboundSchema;
  /** @deprecated use `GetAllPromptsItemsPromptsResponse200ApplicationJSONModelParameters$outboundSchema` instead. */
  export const outboundSchema =
    GetAllPromptsItemsPromptsResponse200ApplicationJSONModelParameters$outboundSchema;
  /** @deprecated use `GetAllPromptsItemsPromptsResponse200ApplicationJSONModelParameters$Outbound` instead. */
  export type Outbound =
    GetAllPromptsItemsPromptsResponse200ApplicationJSONModelParameters$Outbound;
}

export function getAllPromptsItemsPromptsResponse200ApplicationJSONModelParametersToJSON(
  getAllPromptsItemsPromptsResponse200ApplicationJSONModelParameters:
    GetAllPromptsItemsPromptsResponse200ApplicationJSONModelParameters,
): string {
  return JSON.stringify(
    GetAllPromptsItemsPromptsResponse200ApplicationJSONModelParameters$outboundSchema
      .parse(
        getAllPromptsItemsPromptsResponse200ApplicationJSONModelParameters,
      ),
  );
}

export function getAllPromptsItemsPromptsResponse200ApplicationJSONModelParametersFromJSON(
  jsonString: string,
): SafeParseResult<
  GetAllPromptsItemsPromptsResponse200ApplicationJSONModelParameters,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetAllPromptsItemsPromptsResponse200ApplicationJSONModelParameters$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'GetAllPromptsItemsPromptsResponse200ApplicationJSONModelParameters' from JSON`,
  );
}

/** @internal */
export const GetAllPromptsItemsPromptsResponse200ApplicationJSONProvider$inboundSchema:
  z.ZodNativeEnum<
    typeof GetAllPromptsItemsPromptsResponse200ApplicationJSONProvider
  > = z.nativeEnum(GetAllPromptsItemsPromptsResponse200ApplicationJSONProvider);

/** @internal */
export const GetAllPromptsItemsPromptsResponse200ApplicationJSONProvider$outboundSchema:
  z.ZodNativeEnum<
    typeof GetAllPromptsItemsPromptsResponse200ApplicationJSONProvider
  > = GetAllPromptsItemsPromptsResponse200ApplicationJSONProvider$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPromptsItemsPromptsResponse200ApplicationJSONProvider$ {
  /** @deprecated use `GetAllPromptsItemsPromptsResponse200ApplicationJSONProvider$inboundSchema` instead. */
  export const inboundSchema =
    GetAllPromptsItemsPromptsResponse200ApplicationJSONProvider$inboundSchema;
  /** @deprecated use `GetAllPromptsItemsPromptsResponse200ApplicationJSONProvider$outboundSchema` instead. */
  export const outboundSchema =
    GetAllPromptsItemsPromptsResponse200ApplicationJSONProvider$outboundSchema;
}

/** @internal */
export const GetAllPromptsItemsPromptsResponse200ApplicationJSONRole$inboundSchema:
  z.ZodNativeEnum<
    typeof GetAllPromptsItemsPromptsResponse200ApplicationJSONRole
  > = z.nativeEnum(GetAllPromptsItemsPromptsResponse200ApplicationJSONRole);

/** @internal */
export const GetAllPromptsItemsPromptsResponse200ApplicationJSONRole$outboundSchema:
  z.ZodNativeEnum<
    typeof GetAllPromptsItemsPromptsResponse200ApplicationJSONRole
  > = GetAllPromptsItemsPromptsResponse200ApplicationJSONRole$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPromptsItemsPromptsResponse200ApplicationJSONRole$ {
  /** @deprecated use `GetAllPromptsItemsPromptsResponse200ApplicationJSONRole$inboundSchema` instead. */
  export const inboundSchema =
    GetAllPromptsItemsPromptsResponse200ApplicationJSONRole$inboundSchema;
  /** @deprecated use `GetAllPromptsItemsPromptsResponse200ApplicationJSONRole$outboundSchema` instead. */
  export const outboundSchema =
    GetAllPromptsItemsPromptsResponse200ApplicationJSONRole$outboundSchema;
}

/** @internal */
export const GetAllPrompts2PromptsResponse200ApplicationJSONResponseBodyItems1VersionsType$inboundSchema:
  z.ZodNativeEnum<
    typeof GetAllPrompts2PromptsResponse200ApplicationJSONResponseBodyItems1VersionsType
  > = z.nativeEnum(
    GetAllPrompts2PromptsResponse200ApplicationJSONResponseBodyItems1VersionsType,
  );

/** @internal */
export const GetAllPrompts2PromptsResponse200ApplicationJSONResponseBodyItems1VersionsType$outboundSchema:
  z.ZodNativeEnum<
    typeof GetAllPrompts2PromptsResponse200ApplicationJSONResponseBodyItems1VersionsType
  > =
    GetAllPrompts2PromptsResponse200ApplicationJSONResponseBodyItems1VersionsType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPrompts2PromptsResponse200ApplicationJSONResponseBodyItems1VersionsType$ {
  /** @deprecated use `GetAllPrompts2PromptsResponse200ApplicationJSONResponseBodyItems1VersionsType$inboundSchema` instead. */
  export const inboundSchema =
    GetAllPrompts2PromptsResponse200ApplicationJSONResponseBodyItems1VersionsType$inboundSchema;
  /** @deprecated use `GetAllPrompts2PromptsResponse200ApplicationJSONResponseBodyItems1VersionsType$outboundSchema` instead. */
  export const outboundSchema =
    GetAllPrompts2PromptsResponse200ApplicationJSONResponseBodyItems1VersionsType$outboundSchema;
}

/** @internal */
export const GetAllPrompts2PromptsResponse200ApplicationJSONImageUrl$inboundSchema:
  z.ZodType<
    GetAllPrompts2PromptsResponse200ApplicationJSONImageUrl,
    z.ZodTypeDef,
    unknown
  > = z.object({
    id: z.string().optional(),
    url: z.string(),
    detail: z.string().optional(),
  });

/** @internal */
export type GetAllPrompts2PromptsResponse200ApplicationJSONImageUrl$Outbound = {
  id?: string | undefined;
  url: string;
  detail?: string | undefined;
};

/** @internal */
export const GetAllPrompts2PromptsResponse200ApplicationJSONImageUrl$outboundSchema:
  z.ZodType<
    GetAllPrompts2PromptsResponse200ApplicationJSONImageUrl$Outbound,
    z.ZodTypeDef,
    GetAllPrompts2PromptsResponse200ApplicationJSONImageUrl
  > = z.object({
    id: z.string().optional(),
    url: z.string(),
    detail: z.string().optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPrompts2PromptsResponse200ApplicationJSONImageUrl$ {
  /** @deprecated use `GetAllPrompts2PromptsResponse200ApplicationJSONImageUrl$inboundSchema` instead. */
  export const inboundSchema =
    GetAllPrompts2PromptsResponse200ApplicationJSONImageUrl$inboundSchema;
  /** @deprecated use `GetAllPrompts2PromptsResponse200ApplicationJSONImageUrl$outboundSchema` instead. */
  export const outboundSchema =
    GetAllPrompts2PromptsResponse200ApplicationJSONImageUrl$outboundSchema;
  /** @deprecated use `GetAllPrompts2PromptsResponse200ApplicationJSONImageUrl$Outbound` instead. */
  export type Outbound =
    GetAllPrompts2PromptsResponse200ApplicationJSONImageUrl$Outbound;
}

export function getAllPrompts2PromptsResponse200ApplicationJSONImageUrlToJSON(
  getAllPrompts2PromptsResponse200ApplicationJSONImageUrl:
    GetAllPrompts2PromptsResponse200ApplicationJSONImageUrl,
): string {
  return JSON.stringify(
    GetAllPrompts2PromptsResponse200ApplicationJSONImageUrl$outboundSchema
      .parse(getAllPrompts2PromptsResponse200ApplicationJSONImageUrl),
  );
}

export function getAllPrompts2PromptsResponse200ApplicationJSONImageUrlFromJSON(
  jsonString: string,
): SafeParseResult<
  GetAllPrompts2PromptsResponse200ApplicationJSONImageUrl,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetAllPrompts2PromptsResponse200ApplicationJSONImageUrl$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'GetAllPrompts2PromptsResponse200ApplicationJSONImageUrl' from JSON`,
  );
}

/** @internal */
export const GetAllPrompts2PromptsResponse200ApplicationJson2$inboundSchema:
  z.ZodType<
    GetAllPrompts2PromptsResponse200ApplicationJson2,
    z.ZodTypeDef,
    unknown
  > = z.object({
    type:
      GetAllPrompts2PromptsResponse200ApplicationJSONResponseBodyItems1VersionsType$inboundSchema,
    image_url: z.lazy(() =>
      GetAllPrompts2PromptsResponse200ApplicationJSONImageUrl$inboundSchema
    ),
  }).transform((v) => {
    return remap$(v, {
      "image_url": "imageUrl",
    });
  });

/** @internal */
export type GetAllPrompts2PromptsResponse200ApplicationJson2$Outbound = {
  type: string;
  image_url: GetAllPrompts2PromptsResponse200ApplicationJSONImageUrl$Outbound;
};

/** @internal */
export const GetAllPrompts2PromptsResponse200ApplicationJson2$outboundSchema:
  z.ZodType<
    GetAllPrompts2PromptsResponse200ApplicationJson2$Outbound,
    z.ZodTypeDef,
    GetAllPrompts2PromptsResponse200ApplicationJson2
  > = z.object({
    type:
      GetAllPrompts2PromptsResponse200ApplicationJSONResponseBodyItems1VersionsType$outboundSchema,
    imageUrl: z.lazy(() =>
      GetAllPrompts2PromptsResponse200ApplicationJSONImageUrl$outboundSchema
    ),
  }).transform((v) => {
    return remap$(v, {
      imageUrl: "image_url",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPrompts2PromptsResponse200ApplicationJson2$ {
  /** @deprecated use `GetAllPrompts2PromptsResponse200ApplicationJson2$inboundSchema` instead. */
  export const inboundSchema =
    GetAllPrompts2PromptsResponse200ApplicationJson2$inboundSchema;
  /** @deprecated use `GetAllPrompts2PromptsResponse200ApplicationJson2$outboundSchema` instead. */
  export const outboundSchema =
    GetAllPrompts2PromptsResponse200ApplicationJson2$outboundSchema;
  /** @deprecated use `GetAllPrompts2PromptsResponse200ApplicationJson2$Outbound` instead. */
  export type Outbound =
    GetAllPrompts2PromptsResponse200ApplicationJson2$Outbound;
}

export function getAllPrompts2PromptsResponse200ApplicationJson2ToJSON(
  getAllPrompts2PromptsResponse200ApplicationJson2:
    GetAllPrompts2PromptsResponse200ApplicationJson2,
): string {
  return JSON.stringify(
    GetAllPrompts2PromptsResponse200ApplicationJson2$outboundSchema.parse(
      getAllPrompts2PromptsResponse200ApplicationJson2,
    ),
  );
}

export function getAllPrompts2PromptsResponse200ApplicationJson2FromJSON(
  jsonString: string,
): SafeParseResult<
  GetAllPrompts2PromptsResponse200ApplicationJson2,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetAllPrompts2PromptsResponse200ApplicationJson2$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'GetAllPrompts2PromptsResponse200ApplicationJson2' from JSON`,
  );
}

/** @internal */
export const GetAllPrompts2PromptsResponse200ApplicationJSONResponseBodyItems1Type$inboundSchema:
  z.ZodNativeEnum<
    typeof GetAllPrompts2PromptsResponse200ApplicationJSONResponseBodyItems1Type
  > = z.nativeEnum(
    GetAllPrompts2PromptsResponse200ApplicationJSONResponseBodyItems1Type,
  );

/** @internal */
export const GetAllPrompts2PromptsResponse200ApplicationJSONResponseBodyItems1Type$outboundSchema:
  z.ZodNativeEnum<
    typeof GetAllPrompts2PromptsResponse200ApplicationJSONResponseBodyItems1Type
  > =
    GetAllPrompts2PromptsResponse200ApplicationJSONResponseBodyItems1Type$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPrompts2PromptsResponse200ApplicationJSONResponseBodyItems1Type$ {
  /** @deprecated use `GetAllPrompts2PromptsResponse200ApplicationJSONResponseBodyItems1Type$inboundSchema` instead. */
  export const inboundSchema =
    GetAllPrompts2PromptsResponse200ApplicationJSONResponseBodyItems1Type$inboundSchema;
  /** @deprecated use `GetAllPrompts2PromptsResponse200ApplicationJSONResponseBodyItems1Type$outboundSchema` instead. */
  export const outboundSchema =
    GetAllPrompts2PromptsResponse200ApplicationJSONResponseBodyItems1Type$outboundSchema;
}

/** @internal */
export const GetAllPrompts2PromptsResponse200ApplicationJson1$inboundSchema:
  z.ZodType<
    GetAllPrompts2PromptsResponse200ApplicationJson1,
    z.ZodTypeDef,
    unknown
  > = z.object({
    type:
      GetAllPrompts2PromptsResponse200ApplicationJSONResponseBodyItems1Type$inboundSchema,
    text: z.string(),
  });

/** @internal */
export type GetAllPrompts2PromptsResponse200ApplicationJson1$Outbound = {
  type: string;
  text: string;
};

/** @internal */
export const GetAllPrompts2PromptsResponse200ApplicationJson1$outboundSchema:
  z.ZodType<
    GetAllPrompts2PromptsResponse200ApplicationJson1$Outbound,
    z.ZodTypeDef,
    GetAllPrompts2PromptsResponse200ApplicationJson1
  > = z.object({
    type:
      GetAllPrompts2PromptsResponse200ApplicationJSONResponseBodyItems1Type$outboundSchema,
    text: z.string(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPrompts2PromptsResponse200ApplicationJson1$ {
  /** @deprecated use `GetAllPrompts2PromptsResponse200ApplicationJson1$inboundSchema` instead. */
  export const inboundSchema =
    GetAllPrompts2PromptsResponse200ApplicationJson1$inboundSchema;
  /** @deprecated use `GetAllPrompts2PromptsResponse200ApplicationJson1$outboundSchema` instead. */
  export const outboundSchema =
    GetAllPrompts2PromptsResponse200ApplicationJson1$outboundSchema;
  /** @deprecated use `GetAllPrompts2PromptsResponse200ApplicationJson1$Outbound` instead. */
  export type Outbound =
    GetAllPrompts2PromptsResponse200ApplicationJson1$Outbound;
}

export function getAllPrompts2PromptsResponse200ApplicationJson1ToJSON(
  getAllPrompts2PromptsResponse200ApplicationJson1:
    GetAllPrompts2PromptsResponse200ApplicationJson1,
): string {
  return JSON.stringify(
    GetAllPrompts2PromptsResponse200ApplicationJson1$outboundSchema.parse(
      getAllPrompts2PromptsResponse200ApplicationJson1,
    ),
  );
}

export function getAllPrompts2PromptsResponse200ApplicationJson1FromJSON(
  jsonString: string,
): SafeParseResult<
  GetAllPrompts2PromptsResponse200ApplicationJson1,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetAllPrompts2PromptsResponse200ApplicationJson1$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'GetAllPrompts2PromptsResponse200ApplicationJson1' from JSON`,
  );
}

/** @internal */
export const GetAllPromptsContentPromptsResponse200ApplicationJson2$inboundSchema:
  z.ZodType<
    GetAllPromptsContentPromptsResponse200ApplicationJson2,
    z.ZodTypeDef,
    unknown
  > = z.union([
    z.lazy(() =>
      GetAllPrompts2PromptsResponse200ApplicationJson1$inboundSchema
    ),
    z.lazy(() =>
      GetAllPrompts2PromptsResponse200ApplicationJson2$inboundSchema
    ),
  ]);

/** @internal */
export type GetAllPromptsContentPromptsResponse200ApplicationJson2$Outbound =
  | GetAllPrompts2PromptsResponse200ApplicationJson1$Outbound
  | GetAllPrompts2PromptsResponse200ApplicationJson2$Outbound;

/** @internal */
export const GetAllPromptsContentPromptsResponse200ApplicationJson2$outboundSchema:
  z.ZodType<
    GetAllPromptsContentPromptsResponse200ApplicationJson2$Outbound,
    z.ZodTypeDef,
    GetAllPromptsContentPromptsResponse200ApplicationJson2
  > = z.union([
    z.lazy(() =>
      GetAllPrompts2PromptsResponse200ApplicationJson1$outboundSchema
    ),
    z.lazy(() =>
      GetAllPrompts2PromptsResponse200ApplicationJson2$outboundSchema
    ),
  ]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPromptsContentPromptsResponse200ApplicationJson2$ {
  /** @deprecated use `GetAllPromptsContentPromptsResponse200ApplicationJson2$inboundSchema` instead. */
  export const inboundSchema =
    GetAllPromptsContentPromptsResponse200ApplicationJson2$inboundSchema;
  /** @deprecated use `GetAllPromptsContentPromptsResponse200ApplicationJson2$outboundSchema` instead. */
  export const outboundSchema =
    GetAllPromptsContentPromptsResponse200ApplicationJson2$outboundSchema;
  /** @deprecated use `GetAllPromptsContentPromptsResponse200ApplicationJson2$Outbound` instead. */
  export type Outbound =
    GetAllPromptsContentPromptsResponse200ApplicationJson2$Outbound;
}

export function getAllPromptsContentPromptsResponse200ApplicationJson2ToJSON(
  getAllPromptsContentPromptsResponse200ApplicationJson2:
    GetAllPromptsContentPromptsResponse200ApplicationJson2,
): string {
  return JSON.stringify(
    GetAllPromptsContentPromptsResponse200ApplicationJson2$outboundSchema.parse(
      getAllPromptsContentPromptsResponse200ApplicationJson2,
    ),
  );
}

export function getAllPromptsContentPromptsResponse200ApplicationJson2FromJSON(
  jsonString: string,
): SafeParseResult<
  GetAllPromptsContentPromptsResponse200ApplicationJson2,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetAllPromptsContentPromptsResponse200ApplicationJson2$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'GetAllPromptsContentPromptsResponse200ApplicationJson2' from JSON`,
  );
}

/** @internal */
export const GetAllPromptsItemsPromptsResponse200ApplicationJSONContent$inboundSchema:
  z.ZodType<
    GetAllPromptsItemsPromptsResponse200ApplicationJSONContent,
    z.ZodTypeDef,
    unknown
  > = z.union([
    z.string(),
    z.array(z.union([
      z.lazy(() =>
        GetAllPrompts2PromptsResponse200ApplicationJson1$inboundSchema
      ),
      z.lazy(() =>
        GetAllPrompts2PromptsResponse200ApplicationJson2$inboundSchema
      ),
    ])),
  ]);

/** @internal */
export type GetAllPromptsItemsPromptsResponse200ApplicationJSONContent$Outbound =
  | string
  | Array<
    | GetAllPrompts2PromptsResponse200ApplicationJson1$Outbound
    | GetAllPrompts2PromptsResponse200ApplicationJson2$Outbound
  >;

/** @internal */
export const GetAllPromptsItemsPromptsResponse200ApplicationJSONContent$outboundSchema:
  z.ZodType<
    GetAllPromptsItemsPromptsResponse200ApplicationJSONContent$Outbound,
    z.ZodTypeDef,
    GetAllPromptsItemsPromptsResponse200ApplicationJSONContent
  > = z.union([
    z.string(),
    z.array(z.union([
      z.lazy(() =>
        GetAllPrompts2PromptsResponse200ApplicationJson1$outboundSchema
      ),
      z.lazy(() =>
        GetAllPrompts2PromptsResponse200ApplicationJson2$outboundSchema
      ),
    ])),
  ]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPromptsItemsPromptsResponse200ApplicationJSONContent$ {
  /** @deprecated use `GetAllPromptsItemsPromptsResponse200ApplicationJSONContent$inboundSchema` instead. */
  export const inboundSchema =
    GetAllPromptsItemsPromptsResponse200ApplicationJSONContent$inboundSchema;
  /** @deprecated use `GetAllPromptsItemsPromptsResponse200ApplicationJSONContent$outboundSchema` instead. */
  export const outboundSchema =
    GetAllPromptsItemsPromptsResponse200ApplicationJSONContent$outboundSchema;
  /** @deprecated use `GetAllPromptsItemsPromptsResponse200ApplicationJSONContent$Outbound` instead. */
  export type Outbound =
    GetAllPromptsItemsPromptsResponse200ApplicationJSONContent$Outbound;
}

export function getAllPromptsItemsPromptsResponse200ApplicationJSONContentToJSON(
  getAllPromptsItemsPromptsResponse200ApplicationJSONContent:
    GetAllPromptsItemsPromptsResponse200ApplicationJSONContent,
): string {
  return JSON.stringify(
    GetAllPromptsItemsPromptsResponse200ApplicationJSONContent$outboundSchema
      .parse(getAllPromptsItemsPromptsResponse200ApplicationJSONContent),
  );
}

export function getAllPromptsItemsPromptsResponse200ApplicationJSONContentFromJSON(
  jsonString: string,
): SafeParseResult<
  GetAllPromptsItemsPromptsResponse200ApplicationJSONContent,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetAllPromptsItemsPromptsResponse200ApplicationJSONContent$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'GetAllPromptsItemsPromptsResponse200ApplicationJSONContent' from JSON`,
  );
}

/** @internal */
export const GetAllPromptsItemsPromptsResponse200ApplicationJSONResponseBody1Type$inboundSchema:
  z.ZodNativeEnum<
    typeof GetAllPromptsItemsPromptsResponse200ApplicationJSONResponseBody1Type
  > = z.nativeEnum(
    GetAllPromptsItemsPromptsResponse200ApplicationJSONResponseBody1Type,
  );

/** @internal */
export const GetAllPromptsItemsPromptsResponse200ApplicationJSONResponseBody1Type$outboundSchema:
  z.ZodNativeEnum<
    typeof GetAllPromptsItemsPromptsResponse200ApplicationJSONResponseBody1Type
  > =
    GetAllPromptsItemsPromptsResponse200ApplicationJSONResponseBody1Type$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPromptsItemsPromptsResponse200ApplicationJSONResponseBody1Type$ {
  /** @deprecated use `GetAllPromptsItemsPromptsResponse200ApplicationJSONResponseBody1Type$inboundSchema` instead. */
  export const inboundSchema =
    GetAllPromptsItemsPromptsResponse200ApplicationJSONResponseBody1Type$inboundSchema;
  /** @deprecated use `GetAllPromptsItemsPromptsResponse200ApplicationJSONResponseBody1Type$outboundSchema` instead. */
  export const outboundSchema =
    GetAllPromptsItemsPromptsResponse200ApplicationJSONResponseBody1Type$outboundSchema;
}

/** @internal */
export const GetAllPromptsItemsPromptsResponse200ApplicationJSONFunction$inboundSchema:
  z.ZodType<
    GetAllPromptsItemsPromptsResponse200ApplicationJSONFunction,
    z.ZodTypeDef,
    unknown
  > = z.object({
    name: z.string(),
    arguments: z.string(),
  });

/** @internal */
export type GetAllPromptsItemsPromptsResponse200ApplicationJSONFunction$Outbound =
  {
    name: string;
    arguments: string;
  };

/** @internal */
export const GetAllPromptsItemsPromptsResponse200ApplicationJSONFunction$outboundSchema:
  z.ZodType<
    GetAllPromptsItemsPromptsResponse200ApplicationJSONFunction$Outbound,
    z.ZodTypeDef,
    GetAllPromptsItemsPromptsResponse200ApplicationJSONFunction
  > = z.object({
    name: z.string(),
    arguments: z.string(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPromptsItemsPromptsResponse200ApplicationJSONFunction$ {
  /** @deprecated use `GetAllPromptsItemsPromptsResponse200ApplicationJSONFunction$inboundSchema` instead. */
  export const inboundSchema =
    GetAllPromptsItemsPromptsResponse200ApplicationJSONFunction$inboundSchema;
  /** @deprecated use `GetAllPromptsItemsPromptsResponse200ApplicationJSONFunction$outboundSchema` instead. */
  export const outboundSchema =
    GetAllPromptsItemsPromptsResponse200ApplicationJSONFunction$outboundSchema;
  /** @deprecated use `GetAllPromptsItemsPromptsResponse200ApplicationJSONFunction$Outbound` instead. */
  export type Outbound =
    GetAllPromptsItemsPromptsResponse200ApplicationJSONFunction$Outbound;
}

export function getAllPromptsItemsPromptsResponse200ApplicationJSONFunctionToJSON(
  getAllPromptsItemsPromptsResponse200ApplicationJSONFunction:
    GetAllPromptsItemsPromptsResponse200ApplicationJSONFunction,
): string {
  return JSON.stringify(
    GetAllPromptsItemsPromptsResponse200ApplicationJSONFunction$outboundSchema
      .parse(getAllPromptsItemsPromptsResponse200ApplicationJSONFunction),
  );
}

export function getAllPromptsItemsPromptsResponse200ApplicationJSONFunctionFromJSON(
  jsonString: string,
): SafeParseResult<
  GetAllPromptsItemsPromptsResponse200ApplicationJSONFunction,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetAllPromptsItemsPromptsResponse200ApplicationJSONFunction$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'GetAllPromptsItemsPromptsResponse200ApplicationJSONFunction' from JSON`,
  );
}

/** @internal */
export const GetAllPromptsItemsPromptsResponse200ApplicationJSONToolCalls$inboundSchema:
  z.ZodType<
    GetAllPromptsItemsPromptsResponse200ApplicationJSONToolCalls,
    z.ZodTypeDef,
    unknown
  > = z.object({
    id: z.string().optional(),
    index: z.number().optional(),
    type:
      GetAllPromptsItemsPromptsResponse200ApplicationJSONResponseBody1Type$inboundSchema,
    function: z.lazy(() =>
      GetAllPromptsItemsPromptsResponse200ApplicationJSONFunction$inboundSchema
    ),
  });

/** @internal */
export type GetAllPromptsItemsPromptsResponse200ApplicationJSONToolCalls$Outbound =
  {
    id?: string | undefined;
    index?: number | undefined;
    type: string;
    function:
      GetAllPromptsItemsPromptsResponse200ApplicationJSONFunction$Outbound;
  };

/** @internal */
export const GetAllPromptsItemsPromptsResponse200ApplicationJSONToolCalls$outboundSchema:
  z.ZodType<
    GetAllPromptsItemsPromptsResponse200ApplicationJSONToolCalls$Outbound,
    z.ZodTypeDef,
    GetAllPromptsItemsPromptsResponse200ApplicationJSONToolCalls
  > = z.object({
    id: z.string().optional(),
    index: z.number().optional(),
    type:
      GetAllPromptsItemsPromptsResponse200ApplicationJSONResponseBody1Type$outboundSchema,
    function: z.lazy(() =>
      GetAllPromptsItemsPromptsResponse200ApplicationJSONFunction$outboundSchema
    ),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPromptsItemsPromptsResponse200ApplicationJSONToolCalls$ {
  /** @deprecated use `GetAllPromptsItemsPromptsResponse200ApplicationJSONToolCalls$inboundSchema` instead. */
  export const inboundSchema =
    GetAllPromptsItemsPromptsResponse200ApplicationJSONToolCalls$inboundSchema;
  /** @deprecated use `GetAllPromptsItemsPromptsResponse200ApplicationJSONToolCalls$outboundSchema` instead. */
  export const outboundSchema =
    GetAllPromptsItemsPromptsResponse200ApplicationJSONToolCalls$outboundSchema;
  /** @deprecated use `GetAllPromptsItemsPromptsResponse200ApplicationJSONToolCalls$Outbound` instead. */
  export type Outbound =
    GetAllPromptsItemsPromptsResponse200ApplicationJSONToolCalls$Outbound;
}

export function getAllPromptsItemsPromptsResponse200ApplicationJSONToolCallsToJSON(
  getAllPromptsItemsPromptsResponse200ApplicationJSONToolCalls:
    GetAllPromptsItemsPromptsResponse200ApplicationJSONToolCalls,
): string {
  return JSON.stringify(
    GetAllPromptsItemsPromptsResponse200ApplicationJSONToolCalls$outboundSchema
      .parse(getAllPromptsItemsPromptsResponse200ApplicationJSONToolCalls),
  );
}

export function getAllPromptsItemsPromptsResponse200ApplicationJSONToolCallsFromJSON(
  jsonString: string,
): SafeParseResult<
  GetAllPromptsItemsPromptsResponse200ApplicationJSONToolCalls,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetAllPromptsItemsPromptsResponse200ApplicationJSONToolCalls$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'GetAllPromptsItemsPromptsResponse200ApplicationJSONToolCalls' from JSON`,
  );
}

/** @internal */
export const GetAllPromptsItemsPromptsResponse200ApplicationJSONMessages$inboundSchema:
  z.ZodType<
    GetAllPromptsItemsPromptsResponse200ApplicationJSONMessages,
    z.ZodTypeDef,
    unknown
  > = z.object({
    role: GetAllPromptsItemsPromptsResponse200ApplicationJSONRole$inboundSchema,
    content: z.union([
      z.string(),
      z.array(z.union([
        z.lazy(() =>
          GetAllPrompts2PromptsResponse200ApplicationJson1$inboundSchema
        ),
        z.lazy(() =>
          GetAllPrompts2PromptsResponse200ApplicationJson2$inboundSchema
        ),
      ])),
    ]),
    tool_calls: z.array(
      z.lazy(() =>
        GetAllPromptsItemsPromptsResponse200ApplicationJSONToolCalls$inboundSchema
      ),
    ).optional(),
  }).transform((v) => {
    return remap$(v, {
      "tool_calls": "toolCalls",
    });
  });

/** @internal */
export type GetAllPromptsItemsPromptsResponse200ApplicationJSONMessages$Outbound =
  {
    role: string;
    content:
      | string
      | Array<
        | GetAllPrompts2PromptsResponse200ApplicationJson1$Outbound
        | GetAllPrompts2PromptsResponse200ApplicationJson2$Outbound
      >;
    tool_calls?:
      | Array<
        GetAllPromptsItemsPromptsResponse200ApplicationJSONToolCalls$Outbound
      >
      | undefined;
  };

/** @internal */
export const GetAllPromptsItemsPromptsResponse200ApplicationJSONMessages$outboundSchema:
  z.ZodType<
    GetAllPromptsItemsPromptsResponse200ApplicationJSONMessages$Outbound,
    z.ZodTypeDef,
    GetAllPromptsItemsPromptsResponse200ApplicationJSONMessages
  > = z.object({
    role:
      GetAllPromptsItemsPromptsResponse200ApplicationJSONRole$outboundSchema,
    content: z.union([
      z.string(),
      z.array(z.union([
        z.lazy(() =>
          GetAllPrompts2PromptsResponse200ApplicationJson1$outboundSchema
        ),
        z.lazy(() =>
          GetAllPrompts2PromptsResponse200ApplicationJson2$outboundSchema
        ),
      ])),
    ]),
    toolCalls: z.array(
      z.lazy(() =>
        GetAllPromptsItemsPromptsResponse200ApplicationJSONToolCalls$outboundSchema
      ),
    ).optional(),
  }).transform((v) => {
    return remap$(v, {
      toolCalls: "tool_calls",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPromptsItemsPromptsResponse200ApplicationJSONMessages$ {
  /** @deprecated use `GetAllPromptsItemsPromptsResponse200ApplicationJSONMessages$inboundSchema` instead. */
  export const inboundSchema =
    GetAllPromptsItemsPromptsResponse200ApplicationJSONMessages$inboundSchema;
  /** @deprecated use `GetAllPromptsItemsPromptsResponse200ApplicationJSONMessages$outboundSchema` instead. */
  export const outboundSchema =
    GetAllPromptsItemsPromptsResponse200ApplicationJSONMessages$outboundSchema;
  /** @deprecated use `GetAllPromptsItemsPromptsResponse200ApplicationJSONMessages$Outbound` instead. */
  export type Outbound =
    GetAllPromptsItemsPromptsResponse200ApplicationJSONMessages$Outbound;
}

export function getAllPromptsItemsPromptsResponse200ApplicationJSONMessagesToJSON(
  getAllPromptsItemsPromptsResponse200ApplicationJSONMessages:
    GetAllPromptsItemsPromptsResponse200ApplicationJSONMessages,
): string {
  return JSON.stringify(
    GetAllPromptsItemsPromptsResponse200ApplicationJSONMessages$outboundSchema
      .parse(getAllPromptsItemsPromptsResponse200ApplicationJSONMessages),
  );
}

export function getAllPromptsItemsPromptsResponse200ApplicationJSONMessagesFromJSON(
  jsonString: string,
): SafeParseResult<
  GetAllPromptsItemsPromptsResponse200ApplicationJSONMessages,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetAllPromptsItemsPromptsResponse200ApplicationJSONMessages$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'GetAllPromptsItemsPromptsResponse200ApplicationJSONMessages' from JSON`,
  );
}

/** @internal */
export const GetAllPromptsItemsPromptsResponse200ApplicationJSONPromptConfig$inboundSchema:
  z.ZodType<
    GetAllPromptsItemsPromptsResponse200ApplicationJSONPromptConfig,
    z.ZodTypeDef,
    unknown
  > = z.object({
    stream: z.boolean().optional(),
    model: z.string().optional(),
    model_db_id: z.string().optional(),
    model_type:
      GetAllPromptsItemsPromptsResponse200ApplicationJSONModelType$inboundSchema
        .optional(),
    model_parameters: z.lazy(() =>
      GetAllPromptsItemsPromptsResponse200ApplicationJSONModelParameters$inboundSchema
    ).optional(),
    provider:
      GetAllPromptsItemsPromptsResponse200ApplicationJSONProvider$inboundSchema
        .optional(),
    integration_id: z.nullable(z.string()).optional(),
    version: z.string().optional(),
    messages: z.array(
      z.lazy(() =>
        GetAllPromptsItemsPromptsResponse200ApplicationJSONMessages$inboundSchema
      ),
    ),
  }).transform((v) => {
    return remap$(v, {
      "model_db_id": "modelDbId",
      "model_type": "modelType",
      "model_parameters": "modelParameters",
      "integration_id": "integrationId",
    });
  });

/** @internal */
export type GetAllPromptsItemsPromptsResponse200ApplicationJSONPromptConfig$Outbound =
  {
    stream?: boolean | undefined;
    model?: string | undefined;
    model_db_id?: string | undefined;
    model_type?: string | undefined;
    model_parameters?:
      | GetAllPromptsItemsPromptsResponse200ApplicationJSONModelParameters$Outbound
      | undefined;
    provider?: string | undefined;
    integration_id?: string | null | undefined;
    version?: string | undefined;
    messages: Array<
      GetAllPromptsItemsPromptsResponse200ApplicationJSONMessages$Outbound
    >;
  };

/** @internal */
export const GetAllPromptsItemsPromptsResponse200ApplicationJSONPromptConfig$outboundSchema:
  z.ZodType<
    GetAllPromptsItemsPromptsResponse200ApplicationJSONPromptConfig$Outbound,
    z.ZodTypeDef,
    GetAllPromptsItemsPromptsResponse200ApplicationJSONPromptConfig
  > = z.object({
    stream: z.boolean().optional(),
    model: z.string().optional(),
    modelDbId: z.string().optional(),
    modelType:
      GetAllPromptsItemsPromptsResponse200ApplicationJSONModelType$outboundSchema
        .optional(),
    modelParameters: z.lazy(() =>
      GetAllPromptsItemsPromptsResponse200ApplicationJSONModelParameters$outboundSchema
    ).optional(),
    provider:
      GetAllPromptsItemsPromptsResponse200ApplicationJSONProvider$outboundSchema
        .optional(),
    integrationId: z.nullable(z.string()).optional(),
    version: z.string().optional(),
    messages: z.array(
      z.lazy(() =>
        GetAllPromptsItemsPromptsResponse200ApplicationJSONMessages$outboundSchema
      ),
    ),
  }).transform((v) => {
    return remap$(v, {
      modelDbId: "model_db_id",
      modelType: "model_type",
      modelParameters: "model_parameters",
      integrationId: "integration_id",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPromptsItemsPromptsResponse200ApplicationJSONPromptConfig$ {
  /** @deprecated use `GetAllPromptsItemsPromptsResponse200ApplicationJSONPromptConfig$inboundSchema` instead. */
  export const inboundSchema =
    GetAllPromptsItemsPromptsResponse200ApplicationJSONPromptConfig$inboundSchema;
  /** @deprecated use `GetAllPromptsItemsPromptsResponse200ApplicationJSONPromptConfig$outboundSchema` instead. */
  export const outboundSchema =
    GetAllPromptsItemsPromptsResponse200ApplicationJSONPromptConfig$outboundSchema;
  /** @deprecated use `GetAllPromptsItemsPromptsResponse200ApplicationJSONPromptConfig$Outbound` instead. */
  export type Outbound =
    GetAllPromptsItemsPromptsResponse200ApplicationJSONPromptConfig$Outbound;
}

export function getAllPromptsItemsPromptsResponse200ApplicationJSONPromptConfigToJSON(
  getAllPromptsItemsPromptsResponse200ApplicationJSONPromptConfig:
    GetAllPromptsItemsPromptsResponse200ApplicationJSONPromptConfig,
): string {
  return JSON.stringify(
    GetAllPromptsItemsPromptsResponse200ApplicationJSONPromptConfig$outboundSchema
      .parse(getAllPromptsItemsPromptsResponse200ApplicationJSONPromptConfig),
  );
}

export function getAllPromptsItemsPromptsResponse200ApplicationJSONPromptConfigFromJSON(
  jsonString: string,
): SafeParseResult<
  GetAllPromptsItemsPromptsResponse200ApplicationJSONPromptConfig,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetAllPromptsItemsPromptsResponse200ApplicationJSONPromptConfig$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'GetAllPromptsItemsPromptsResponse200ApplicationJSONPromptConfig' from JSON`,
  );
}

/** @internal */
export const GetAllPromptsItemsPromptsResponse200ApplicationJSONMetadata$inboundSchema:
  z.ZodType<
    GetAllPromptsItemsPromptsResponse200ApplicationJSONMetadata,
    z.ZodTypeDef,
    unknown
  > = z.object({
    use_cases: z.array(z.string()).optional(),
    language: z.string().optional(),
  }).transform((v) => {
    return remap$(v, {
      "use_cases": "useCases",
    });
  });

/** @internal */
export type GetAllPromptsItemsPromptsResponse200ApplicationJSONMetadata$Outbound =
  {
    use_cases?: Array<string> | undefined;
    language?: string | undefined;
  };

/** @internal */
export const GetAllPromptsItemsPromptsResponse200ApplicationJSONMetadata$outboundSchema:
  z.ZodType<
    GetAllPromptsItemsPromptsResponse200ApplicationJSONMetadata$Outbound,
    z.ZodTypeDef,
    GetAllPromptsItemsPromptsResponse200ApplicationJSONMetadata
  > = z.object({
    useCases: z.array(z.string()).optional(),
    language: z.string().optional(),
  }).transform((v) => {
    return remap$(v, {
      useCases: "use_cases",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPromptsItemsPromptsResponse200ApplicationJSONMetadata$ {
  /** @deprecated use `GetAllPromptsItemsPromptsResponse200ApplicationJSONMetadata$inboundSchema` instead. */
  export const inboundSchema =
    GetAllPromptsItemsPromptsResponse200ApplicationJSONMetadata$inboundSchema;
  /** @deprecated use `GetAllPromptsItemsPromptsResponse200ApplicationJSONMetadata$outboundSchema` instead. */
  export const outboundSchema =
    GetAllPromptsItemsPromptsResponse200ApplicationJSONMetadata$outboundSchema;
  /** @deprecated use `GetAllPromptsItemsPromptsResponse200ApplicationJSONMetadata$Outbound` instead. */
  export type Outbound =
    GetAllPromptsItemsPromptsResponse200ApplicationJSONMetadata$Outbound;
}

export function getAllPromptsItemsPromptsResponse200ApplicationJSONMetadataToJSON(
  getAllPromptsItemsPromptsResponse200ApplicationJSONMetadata:
    GetAllPromptsItemsPromptsResponse200ApplicationJSONMetadata,
): string {
  return JSON.stringify(
    GetAllPromptsItemsPromptsResponse200ApplicationJSONMetadata$outboundSchema
      .parse(getAllPromptsItemsPromptsResponse200ApplicationJSONMetadata),
  );
}

export function getAllPromptsItemsPromptsResponse200ApplicationJSONMetadataFromJSON(
  jsonString: string,
): SafeParseResult<
  GetAllPromptsItemsPromptsResponse200ApplicationJSONMetadata,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetAllPromptsItemsPromptsResponse200ApplicationJSONMetadata$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'GetAllPromptsItemsPromptsResponse200ApplicationJSONMetadata' from JSON`,
  );
}

/** @internal */
export const GetAllPromptsItemsVersions$inboundSchema: z.ZodType<
  GetAllPromptsItemsVersions,
  z.ZodTypeDef,
  unknown
> = z.object({
  _id: z.string(),
  created_by_id: z.string(),
  display_name: z.string(),
  updated_by_id: z.string(),
  description: z.nullable(z.string()).optional(),
  prompt_config: z.lazy(() =>
    GetAllPromptsItemsPromptsResponse200ApplicationJSONPromptConfig$inboundSchema
  ),
  metadata: z.lazy(() =>
    GetAllPromptsItemsPromptsResponse200ApplicationJSONMetadata$inboundSchema
  ),
  commit: z.string(),
  timestamp: z.string(),
}).transform((v) => {
  return remap$(v, {
    "_id": "id",
    "created_by_id": "createdById",
    "display_name": "displayName",
    "updated_by_id": "updatedById",
    "prompt_config": "promptConfig",
  });
});

/** @internal */
export type GetAllPromptsItemsVersions$Outbound = {
  _id: string;
  created_by_id: string;
  display_name: string;
  updated_by_id: string;
  description?: string | null | undefined;
  prompt_config:
    GetAllPromptsItemsPromptsResponse200ApplicationJSONPromptConfig$Outbound;
  metadata:
    GetAllPromptsItemsPromptsResponse200ApplicationJSONMetadata$Outbound;
  commit: string;
  timestamp: string;
};

/** @internal */
export const GetAllPromptsItemsVersions$outboundSchema: z.ZodType<
  GetAllPromptsItemsVersions$Outbound,
  z.ZodTypeDef,
  GetAllPromptsItemsVersions
> = z.object({
  id: z.string(),
  createdById: z.string(),
  displayName: z.string(),
  updatedById: z.string(),
  description: z.nullable(z.string()).optional(),
  promptConfig: z.lazy(() =>
    GetAllPromptsItemsPromptsResponse200ApplicationJSONPromptConfig$outboundSchema
  ),
  metadata: z.lazy(() =>
    GetAllPromptsItemsPromptsResponse200ApplicationJSONMetadata$outboundSchema
  ),
  commit: z.string(),
  timestamp: z.string(),
}).transform((v) => {
  return remap$(v, {
    id: "_id",
    createdById: "created_by_id",
    displayName: "display_name",
    updatedById: "updated_by_id",
    promptConfig: "prompt_config",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPromptsItemsVersions$ {
  /** @deprecated use `GetAllPromptsItemsVersions$inboundSchema` instead. */
  export const inboundSchema = GetAllPromptsItemsVersions$inboundSchema;
  /** @deprecated use `GetAllPromptsItemsVersions$outboundSchema` instead. */
  export const outboundSchema = GetAllPromptsItemsVersions$outboundSchema;
  /** @deprecated use `GetAllPromptsItemsVersions$Outbound` instead. */
  export type Outbound = GetAllPromptsItemsVersions$Outbound;
}

export function getAllPromptsItemsVersionsToJSON(
  getAllPromptsItemsVersions: GetAllPromptsItemsVersions,
): string {
  return JSON.stringify(
    GetAllPromptsItemsVersions$outboundSchema.parse(getAllPromptsItemsVersions),
  );
}

export function getAllPromptsItemsVersionsFromJSON(
  jsonString: string,
): SafeParseResult<GetAllPromptsItemsVersions, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetAllPromptsItemsVersions$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetAllPromptsItemsVersions' from JSON`,
  );
}

/** @internal */
export const GetAllPromptsItemsType$inboundSchema: z.ZodNativeEnum<
  typeof GetAllPromptsItemsType
> = z.nativeEnum(GetAllPromptsItemsType);

/** @internal */
export const GetAllPromptsItemsType$outboundSchema: z.ZodNativeEnum<
  typeof GetAllPromptsItemsType
> = GetAllPromptsItemsType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPromptsItemsType$ {
  /** @deprecated use `GetAllPromptsItemsType$inboundSchema` instead. */
  export const inboundSchema = GetAllPromptsItemsType$inboundSchema;
  /** @deprecated use `GetAllPromptsItemsType$outboundSchema` instead. */
  export const outboundSchema = GetAllPromptsItemsType$outboundSchema;
}

/** @internal */
export const GetAllPromptsItems1$inboundSchema: z.ZodType<
  GetAllPromptsItems1,
  z.ZodTypeDef,
  unknown
> = z.object({
  _id: z.string(),
  owner: z.union([z.string(), GetAllPromptsOwner2$inboundSchema]),
  domain_id: z.string(),
  created_by_id: z.string(),
  display_name: z.string(),
  updated_by_id: z.string(),
  description: z.nullable(z.string()).optional(),
  prompt_config: z.lazy(() => GetAllPromptsItemsPromptConfig$inboundSchema),
  metadata: z.lazy(() => GetAllPromptsItemsMetadata$inboundSchema),
  created: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
  updated: z.string().datetime({ offset: true }).default(
    "2024-11-26T10:00:21.083Z",
  ).transform(v => new Date(v)),
  versions: z.array(z.lazy(() => GetAllPromptsItemsVersions$inboundSchema)),
  type: GetAllPromptsItemsType$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "_id": "id",
    "domain_id": "domainId",
    "created_by_id": "createdById",
    "display_name": "displayName",
    "updated_by_id": "updatedById",
    "prompt_config": "promptConfig",
  });
});

/** @internal */
export type GetAllPromptsItems1$Outbound = {
  _id: string;
  owner: string | string;
  domain_id: string;
  created_by_id: string;
  display_name: string;
  updated_by_id: string;
  description?: string | null | undefined;
  prompt_config: GetAllPromptsItemsPromptConfig$Outbound;
  metadata: GetAllPromptsItemsMetadata$Outbound;
  created?: string | undefined;
  updated: string;
  versions: Array<GetAllPromptsItemsVersions$Outbound>;
  type: string;
};

/** @internal */
export const GetAllPromptsItems1$outboundSchema: z.ZodType<
  GetAllPromptsItems1$Outbound,
  z.ZodTypeDef,
  GetAllPromptsItems1
> = z.object({
  id: z.string(),
  owner: z.union([z.string(), GetAllPromptsOwner2$outboundSchema]),
  domainId: z.string(),
  createdById: z.string(),
  displayName: z.string(),
  updatedById: z.string(),
  description: z.nullable(z.string()).optional(),
  promptConfig: z.lazy(() => GetAllPromptsItemsPromptConfig$outboundSchema),
  metadata: z.lazy(() => GetAllPromptsItemsMetadata$outboundSchema),
  created: z.date().transform(v => v.toISOString()).optional(),
  updated: z.date().default(() => new Date("2024-11-26T10:00:21.083Z"))
    .transform(v => v.toISOString()),
  versions: z.array(z.lazy(() => GetAllPromptsItemsVersions$outboundSchema)),
  type: GetAllPromptsItemsType$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    id: "_id",
    domainId: "domain_id",
    createdById: "created_by_id",
    displayName: "display_name",
    updatedById: "updated_by_id",
    promptConfig: "prompt_config",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPromptsItems1$ {
  /** @deprecated use `GetAllPromptsItems1$inboundSchema` instead. */
  export const inboundSchema = GetAllPromptsItems1$inboundSchema;
  /** @deprecated use `GetAllPromptsItems1$outboundSchema` instead. */
  export const outboundSchema = GetAllPromptsItems1$outboundSchema;
  /** @deprecated use `GetAllPromptsItems1$Outbound` instead. */
  export type Outbound = GetAllPromptsItems1$Outbound;
}

export function getAllPromptsItems1ToJSON(
  getAllPromptsItems1: GetAllPromptsItems1,
): string {
  return JSON.stringify(
    GetAllPromptsItems1$outboundSchema.parse(getAllPromptsItems1),
  );
}

export function getAllPromptsItems1FromJSON(
  jsonString: string,
): SafeParseResult<GetAllPromptsItems1, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetAllPromptsItems1$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetAllPromptsItems1' from JSON`,
  );
}

/** @internal */
export const GetAllPromptsItems$inboundSchema: z.ZodType<
  GetAllPromptsItems,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => GetAllPromptsItems1$inboundSchema),
  z.lazy(() => GetAllPromptsItems3$inboundSchema),
  z.lazy(() => GetAllPromptsItems2$inboundSchema),
]);

/** @internal */
export type GetAllPromptsItems$Outbound =
  | GetAllPromptsItems1$Outbound
  | GetAllPromptsItems3$Outbound
  | GetAllPromptsItems2$Outbound;

/** @internal */
export const GetAllPromptsItems$outboundSchema: z.ZodType<
  GetAllPromptsItems$Outbound,
  z.ZodTypeDef,
  GetAllPromptsItems
> = z.union([
  z.lazy(() => GetAllPromptsItems1$outboundSchema),
  z.lazy(() => GetAllPromptsItems3$outboundSchema),
  z.lazy(() => GetAllPromptsItems2$outboundSchema),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPromptsItems$ {
  /** @deprecated use `GetAllPromptsItems$inboundSchema` instead. */
  export const inboundSchema = GetAllPromptsItems$inboundSchema;
  /** @deprecated use `GetAllPromptsItems$outboundSchema` instead. */
  export const outboundSchema = GetAllPromptsItems$outboundSchema;
  /** @deprecated use `GetAllPromptsItems$Outbound` instead. */
  export type Outbound = GetAllPromptsItems$Outbound;
}

export function getAllPromptsItemsToJSON(
  getAllPromptsItems: GetAllPromptsItems,
): string {
  return JSON.stringify(
    GetAllPromptsItems$outboundSchema.parse(getAllPromptsItems),
  );
}

export function getAllPromptsItemsFromJSON(
  jsonString: string,
): SafeParseResult<GetAllPromptsItems, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetAllPromptsItems$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetAllPromptsItems' from JSON`,
  );
}

/** @internal */
export const GetAllPromptsResponseBody$inboundSchema: z.ZodType<
  GetAllPromptsResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  count: z.number(),
  page: z.number(),
  limit: z.number(),
  totalPages: z.number(),
  items: z.array(
    z.union([
      z.lazy(() => GetAllPromptsItems1$inboundSchema),
      z.lazy(() => GetAllPromptsItems3$inboundSchema),
      z.lazy(() => GetAllPromptsItems2$inboundSchema),
    ]),
  ),
});

/** @internal */
export type GetAllPromptsResponseBody$Outbound = {
  count: number;
  page: number;
  limit: number;
  totalPages: number;
  items: Array<
    | GetAllPromptsItems1$Outbound
    | GetAllPromptsItems3$Outbound
    | GetAllPromptsItems2$Outbound
  >;
};

/** @internal */
export const GetAllPromptsResponseBody$outboundSchema: z.ZodType<
  GetAllPromptsResponseBody$Outbound,
  z.ZodTypeDef,
  GetAllPromptsResponseBody
> = z.object({
  count: z.number(),
  page: z.number(),
  limit: z.number(),
  totalPages: z.number(),
  items: z.array(
    z.union([
      z.lazy(() => GetAllPromptsItems1$outboundSchema),
      z.lazy(() => GetAllPromptsItems3$outboundSchema),
      z.lazy(() => GetAllPromptsItems2$outboundSchema),
    ]),
  ),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPromptsResponseBody$ {
  /** @deprecated use `GetAllPromptsResponseBody$inboundSchema` instead. */
  export const inboundSchema = GetAllPromptsResponseBody$inboundSchema;
  /** @deprecated use `GetAllPromptsResponseBody$outboundSchema` instead. */
  export const outboundSchema = GetAllPromptsResponseBody$outboundSchema;
  /** @deprecated use `GetAllPromptsResponseBody$Outbound` instead. */
  export type Outbound = GetAllPromptsResponseBody$Outbound;
}

export function getAllPromptsResponseBodyToJSON(
  getAllPromptsResponseBody: GetAllPromptsResponseBody,
): string {
  return JSON.stringify(
    GetAllPromptsResponseBody$outboundSchema.parse(getAllPromptsResponseBody),
  );
}

export function getAllPromptsResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<GetAllPromptsResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetAllPromptsResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetAllPromptsResponseBody' from JSON`,
  );
}
