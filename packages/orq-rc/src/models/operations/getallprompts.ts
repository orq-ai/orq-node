/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type GetAllPromptsPagination = {
  page?: number | undefined;
  limit?: number | undefined;
  lastId?: string | null | undefined;
  firstId?: string | null | undefined;
};

/**
 * The direction to sort by
 */
export const GetAllPromptsDirection = {
  Asc: "asc",
  Desc: "desc",
} as const;
/**
 * The direction to sort by
 */
export type GetAllPromptsDirection = ClosedEnum<typeof GetAllPromptsDirection>;

export type GetAllPromptsSortingProps = {
  /**
   * The path to sort by
   */
  key: string;
  /**
   * The direction to sort by
   */
  direction?: GetAllPromptsDirection | undefined;
};

export const GetAllPromptsOperator = {
  And: "and",
  Or: "or",
} as const;
export type GetAllPromptsOperator = ClosedEnum<typeof GetAllPromptsOperator>;

export const GetAllPromptsFiltersPromptsRequestRequestBodyQuery8Operator = {
  Is: "is",
} as const;
export type GetAllPromptsFiltersPromptsRequestRequestBodyQuery8Operator =
  ClosedEnum<
    typeof GetAllPromptsFiltersPromptsRequestRequestBodyQuery8Operator
  >;

export const GetAllPromptsFiltersPromptsRequestRequestBodyQuery8Type = {
  String: "string",
  MultiValueArray: "multi-value-array",
  SingleValueArray: "single-value-array",
  Number: "number",
  Date: "date",
  Object: "object",
  Boolean: "boolean",
  Evaluator: "evaluator",
} as const;
export type GetAllPromptsFiltersPromptsRequestRequestBodyQuery8Type =
  ClosedEnum<typeof GetAllPromptsFiltersPromptsRequestRequestBodyQuery8Type>;

export const GetAllPromptsHideOperatorsPromptsRequestRequestBodyQueryFilters85 =
  {
    Is: "is",
    IsBefore: "is_before",
    IsOnOrBefore: "is_on_or_before",
    IsBetween: "is_between",
    IsRelativeToday: "is_relative_today",
    IsRelativeTime: "is_relative_time",
    IsEmpty: "is_empty",
    IsNotEmpty: "is_not_empty",
  } as const;
export type GetAllPromptsHideOperatorsPromptsRequestRequestBodyQueryFilters85 =
  ClosedEnum<
    typeof GetAllPromptsHideOperatorsPromptsRequestRequestBodyQueryFilters85
  >;

export const GetAllPromptsHideOperatorsPromptsRequestRequestBodyQueryFilters84 =
  {
    Contains: "contains",
    DoesNotContain: "does_not_contain",
    IsEmpty: "is_empty",
    IsNotEmpty: "is_not_empty",
  } as const;
export type GetAllPromptsHideOperatorsPromptsRequestRequestBodyQueryFilters84 =
  ClosedEnum<
    typeof GetAllPromptsHideOperatorsPromptsRequestRequestBodyQueryFilters84
  >;

export const GetAllPromptsHideOperatorsPromptsRequestRequestBodyQueryFilters83 =
  {
    Is: "is",
    IsNot: "is_not",
    IsEmpty: "is_empty",
    IsNotEmpty: "is_not_empty",
  } as const;
export type GetAllPromptsHideOperatorsPromptsRequestRequestBodyQueryFilters83 =
  ClosedEnum<
    typeof GetAllPromptsHideOperatorsPromptsRequestRequestBodyQueryFilters83
  >;

export const GetAllPromptsHideOperatorsPromptsRequestRequestBodyQueryFilters82 =
  {
    Equals: "equals",
    IsNotEqual: "is_not_equal",
    IsGreaterThan: "is_greater_than",
    IsLessThan: "is_less_than",
    IsGreaterThanOrEqualTo: "is_greater_than_or_equal_to",
    IsLessThanOrEqualTo: "is_less_than_or_equal_to",
    IsBetween: "is_between",
    IsEmpty: "is_empty",
    IsNotEmpty: "is_not_empty",
  } as const;
export type GetAllPromptsHideOperatorsPromptsRequestRequestBodyQueryFilters82 =
  ClosedEnum<
    typeof GetAllPromptsHideOperatorsPromptsRequestRequestBodyQueryFilters82
  >;

export const GetAllPromptsHideOperatorsPromptsRequestRequestBodyQueryFilters81 =
  {
    Is: "is",
    IsNot: "is_not",
    Contains: "contains",
    DoesNotContain: "does_not_contain",
    StartsWith: "starts_with",
    EndsWith: "ends_with",
    IsEmpty: "is_empty",
    IsNotEmpty: "is_not_empty",
  } as const;
export type GetAllPromptsHideOperatorsPromptsRequestRequestBodyQueryFilters81 =
  ClosedEnum<
    typeof GetAllPromptsHideOperatorsPromptsRequestRequestBodyQueryFilters81
  >;

export type GetAllPromptsFiltersPromptsRequestRequestBodyQuery8HideOperators =
  | GetAllPromptsHideOperatorsPromptsRequestRequestBodyQueryFilters81
  | GetAllPromptsHideOperatorsPromptsRequestRequestBodyQueryFilters82
  | GetAllPromptsHideOperatorsPromptsRequestRequestBodyQueryFilters83
  | GetAllPromptsHideOperatorsPromptsRequestRequestBodyQueryFilters84
  | GetAllPromptsHideOperatorsPromptsRequestRequestBodyQueryFilters85;

export type Filters8 = {
  operator: GetAllPromptsFiltersPromptsRequestRequestBodyQuery8Operator;
  value?: boolean | undefined;
  type: GetAllPromptsFiltersPromptsRequestRequestBodyQuery8Type;
  name: string;
  path: string;
  hideOperators?:
    | Array<
      | GetAllPromptsHideOperatorsPromptsRequestRequestBodyQueryFilters81
      | GetAllPromptsHideOperatorsPromptsRequestRequestBodyQueryFilters82
      | GetAllPromptsHideOperatorsPromptsRequestRequestBodyQueryFilters83
      | GetAllPromptsHideOperatorsPromptsRequestRequestBodyQueryFilters84
      | GetAllPromptsHideOperatorsPromptsRequestRequestBodyQueryFilters85
    >
    | undefined;
};

export const GetAllPromptsOperatorPrompts2 = {
  Equals: "equals",
  IsNotEqual: "is_not_equal",
  IsGreaterThan: "is_greater_than",
  IsLessThan: "is_less_than",
  IsGreaterThanOrEqualTo: "is_greater_than_or_equal_to",
  IsLessThanOrEqualTo: "is_less_than_or_equal_to",
  IsBetween: "is_between",
  IsEmpty: "is_empty",
  IsNotEmpty: "is_not_empty",
} as const;
export type GetAllPromptsOperatorPrompts2 = ClosedEnum<
  typeof GetAllPromptsOperatorPrompts2
>;

export const GetAllPromptsOperatorPrompts1 = {
  Is: "is",
} as const;
export type GetAllPromptsOperatorPrompts1 = ClosedEnum<
  typeof GetAllPromptsOperatorPrompts1
>;

export type GetAllPromptsFiltersPromptsRequestRequestBodyQuery7Operator =
  | GetAllPromptsOperatorPrompts1
  | GetAllPromptsOperatorPrompts2;

export const GetAllPromptsFiltersPromptsRequestRequestBodyQuery7Type = {
  String: "string",
  MultiValueArray: "multi-value-array",
  SingleValueArray: "single-value-array",
  Number: "number",
  Date: "date",
  Object: "object",
  Boolean: "boolean",
  Evaluator: "evaluator",
} as const;
export type GetAllPromptsFiltersPromptsRequestRequestBodyQuery7Type =
  ClosedEnum<typeof GetAllPromptsFiltersPromptsRequestRequestBodyQuery7Type>;

export const GetAllPromptsFiltersPromptsRequestRequestBodyQuery7OptionsType = {
  String: "string",
  MultiValueArray: "multi-value-array",
  SingleValueArray: "single-value-array",
  Number: "number",
  Date: "date",
  Object: "object",
  Boolean: "boolean",
  Evaluator: "evaluator",
} as const;
export type GetAllPromptsFiltersPromptsRequestRequestBodyQuery7OptionsType =
  ClosedEnum<
    typeof GetAllPromptsFiltersPromptsRequestRequestBodyQuery7OptionsType
  >;

export const GetAllPromptsHideOperatorsPromptsRequestRequestBodyQueryFilters75 =
  {
    Is: "is",
    IsBefore: "is_before",
    IsOnOrBefore: "is_on_or_before",
    IsBetween: "is_between",
    IsRelativeToday: "is_relative_today",
    IsRelativeTime: "is_relative_time",
    IsEmpty: "is_empty",
    IsNotEmpty: "is_not_empty",
  } as const;
export type GetAllPromptsHideOperatorsPromptsRequestRequestBodyQueryFilters75 =
  ClosedEnum<
    typeof GetAllPromptsHideOperatorsPromptsRequestRequestBodyQueryFilters75
  >;

export const GetAllPromptsHideOperatorsPromptsRequestRequestBodyQueryFilters74 =
  {
    Contains: "contains",
    DoesNotContain: "does_not_contain",
    IsEmpty: "is_empty",
    IsNotEmpty: "is_not_empty",
  } as const;
export type GetAllPromptsHideOperatorsPromptsRequestRequestBodyQueryFilters74 =
  ClosedEnum<
    typeof GetAllPromptsHideOperatorsPromptsRequestRequestBodyQueryFilters74
  >;

export const GetAllPromptsHideOperatorsPromptsRequestRequestBodyQueryFilters73 =
  {
    Is: "is",
    IsNot: "is_not",
    IsEmpty: "is_empty",
    IsNotEmpty: "is_not_empty",
  } as const;
export type GetAllPromptsHideOperatorsPromptsRequestRequestBodyQueryFilters73 =
  ClosedEnum<
    typeof GetAllPromptsHideOperatorsPromptsRequestRequestBodyQueryFilters73
  >;

export const GetAllPromptsHideOperatorsPromptsRequestRequestBodyQueryFilters72 =
  {
    Equals: "equals",
    IsNotEqual: "is_not_equal",
    IsGreaterThan: "is_greater_than",
    IsLessThan: "is_less_than",
    IsGreaterThanOrEqualTo: "is_greater_than_or_equal_to",
    IsLessThanOrEqualTo: "is_less_than_or_equal_to",
    IsBetween: "is_between",
    IsEmpty: "is_empty",
    IsNotEmpty: "is_not_empty",
  } as const;
export type GetAllPromptsHideOperatorsPromptsRequestRequestBodyQueryFilters72 =
  ClosedEnum<
    typeof GetAllPromptsHideOperatorsPromptsRequestRequestBodyQueryFilters72
  >;

export const GetAllPromptsHideOperatorsPromptsRequestRequestBodyQueryFilters71 =
  {
    Is: "is",
    IsNot: "is_not",
    Contains: "contains",
    DoesNotContain: "does_not_contain",
    StartsWith: "starts_with",
    EndsWith: "ends_with",
    IsEmpty: "is_empty",
    IsNotEmpty: "is_not_empty",
  } as const;
export type GetAllPromptsHideOperatorsPromptsRequestRequestBodyQueryFilters71 =
  ClosedEnum<
    typeof GetAllPromptsHideOperatorsPromptsRequestRequestBodyQueryFilters71
  >;

export type GetAllPromptsFiltersPromptsRequestRequestBodyQuery7HideOperators =
  | GetAllPromptsHideOperatorsPromptsRequestRequestBodyQueryFilters71
  | GetAllPromptsHideOperatorsPromptsRequestRequestBodyQueryFilters72
  | GetAllPromptsHideOperatorsPromptsRequestRequestBodyQueryFilters73
  | GetAllPromptsHideOperatorsPromptsRequestRequestBodyQueryFilters74
  | GetAllPromptsHideOperatorsPromptsRequestRequestBodyQueryFilters75;

export const FiltersEvaluatorType = {
  FunctionEval: "function_eval",
  HttpEval: "http_eval",
  JsonSchema: "json_schema",
  LlmEval: "llm_eval",
  PythonEval: "python_eval",
  Ragas: "ragas",
  TypescriptEval: "typescript_eval",
} as const;
export type FiltersEvaluatorType = ClosedEnum<typeof FiltersEvaluatorType>;

export const FiltersEvaluatorOutputType = {
  Boolean: "boolean",
  Number: "number",
  String: "string",
  Enum: "enum",
} as const;
export type FiltersEvaluatorOutputType = ClosedEnum<
  typeof FiltersEvaluatorOutputType
>;

export type GetAllPromptsFiltersPromptsRequestRequestBodyOptions = {
  name: string;
  path: string;
  type: GetAllPromptsFiltersPromptsRequestRequestBodyQuery7OptionsType;
  hideOperators?:
    | Array<
      | GetAllPromptsHideOperatorsPromptsRequestRequestBodyQueryFilters71
      | GetAllPromptsHideOperatorsPromptsRequestRequestBodyQueryFilters72
      | GetAllPromptsHideOperatorsPromptsRequestRequestBodyQueryFilters73
      | GetAllPromptsHideOperatorsPromptsRequestRequestBodyQueryFilters74
      | GetAllPromptsHideOperatorsPromptsRequestRequestBodyQueryFilters75
    >
    | undefined;
  id: string;
  evaluatorId: string;
  evaluatorType: FiltersEvaluatorType;
  evaluatorOutputType: FiltersEvaluatorOutputType;
};

export const GetAllPromptsHideOperatorsPromptsRequestRequestBodyQueryFilters76 =
  {
    Is: "is",
    IsBefore: "is_before",
    IsOnOrBefore: "is_on_or_before",
    IsBetween: "is_between",
    IsRelativeToday: "is_relative_today",
    IsRelativeTime: "is_relative_time",
    IsEmpty: "is_empty",
    IsNotEmpty: "is_not_empty",
  } as const;
export type GetAllPromptsHideOperatorsPromptsRequestRequestBodyQueryFilters76 =
  ClosedEnum<
    typeof GetAllPromptsHideOperatorsPromptsRequestRequestBodyQueryFilters76
  >;

export const GetAllPromptsHideOperatorsPromptsRequestRequestBodyQueryFilters77 =
  {
    Contains: "contains",
    DoesNotContain: "does_not_contain",
    IsEmpty: "is_empty",
    IsNotEmpty: "is_not_empty",
  } as const;
export type GetAllPromptsHideOperatorsPromptsRequestRequestBodyQueryFilters77 =
  ClosedEnum<
    typeof GetAllPromptsHideOperatorsPromptsRequestRequestBodyQueryFilters77
  >;

export const GetAllPromptsHideOperatorsPromptsRequestRequestBodyQueryFilters78 =
  {
    Is: "is",
    IsNot: "is_not",
    IsEmpty: "is_empty",
    IsNotEmpty: "is_not_empty",
  } as const;
export type GetAllPromptsHideOperatorsPromptsRequestRequestBodyQueryFilters78 =
  ClosedEnum<
    typeof GetAllPromptsHideOperatorsPromptsRequestRequestBodyQueryFilters78
  >;

export const GetAllPromptsHideOperatorsPromptsRequestRequestBodyQueryFilters79 =
  {
    Equals: "equals",
    IsNotEqual: "is_not_equal",
    IsGreaterThan: "is_greater_than",
    IsLessThan: "is_less_than",
    IsGreaterThanOrEqualTo: "is_greater_than_or_equal_to",
    IsLessThanOrEqualTo: "is_less_than_or_equal_to",
    IsBetween: "is_between",
    IsEmpty: "is_empty",
    IsNotEmpty: "is_not_empty",
  } as const;
export type GetAllPromptsHideOperatorsPromptsRequestRequestBodyQueryFilters79 =
  ClosedEnum<
    typeof GetAllPromptsHideOperatorsPromptsRequestRequestBodyQueryFilters79
  >;

export const GetAllPromptsHideOperatorsPromptsRequestRequestBodyQueryFilters710 =
  {
    Is: "is",
    IsNot: "is_not",
    Contains: "contains",
    DoesNotContain: "does_not_contain",
    StartsWith: "starts_with",
    EndsWith: "ends_with",
    IsEmpty: "is_empty",
    IsNotEmpty: "is_not_empty",
  } as const;
export type GetAllPromptsHideOperatorsPromptsRequestRequestBodyQueryFilters710 =
  ClosedEnum<
    typeof GetAllPromptsHideOperatorsPromptsRequestRequestBodyQueryFilters710
  >;

export type GetAllPromptsFiltersPromptsRequestRequestBodyQuery7HideOperators1 =
  | GetAllPromptsHideOperatorsPromptsRequestRequestBodyQueryFilters710
  | GetAllPromptsHideOperatorsPromptsRequestRequestBodyQueryFilters79
  | GetAllPromptsHideOperatorsPromptsRequestRequestBodyQueryFilters78
  | GetAllPromptsHideOperatorsPromptsRequestRequestBodyQueryFilters77
  | GetAllPromptsHideOperatorsPromptsRequestRequestBodyQueryFilters76;

export type Filters7 = {
  operator: GetAllPromptsOperatorPrompts1 | GetAllPromptsOperatorPrompts2;
  value?: any | null | undefined;
  type: GetAllPromptsFiltersPromptsRequestRequestBodyQuery7Type;
  selectedOptionId: string | null;
  options: Array<GetAllPromptsFiltersPromptsRequestRequestBodyOptions>;
  name: string;
  path: string;
  hideOperators?:
    | Array<
      | GetAllPromptsHideOperatorsPromptsRequestRequestBodyQueryFilters710
      | GetAllPromptsHideOperatorsPromptsRequestRequestBodyQueryFilters79
      | GetAllPromptsHideOperatorsPromptsRequestRequestBodyQueryFilters78
      | GetAllPromptsHideOperatorsPromptsRequestRequestBodyQueryFilters77
      | GetAllPromptsHideOperatorsPromptsRequestRequestBodyQueryFilters76
    >
    | undefined;
};

export const GetAllPromptsOperator5 = {
  Equals: "equals",
  IsNotEqual: "is_not_equal",
  IsGreaterThan: "is_greater_than",
  IsLessThan: "is_less_than",
  IsGreaterThanOrEqualTo: "is_greater_than_or_equal_to",
  IsLessThanOrEqualTo: "is_less_than_or_equal_to",
  IsBetween: "is_between",
  IsEmpty: "is_empty",
  IsNotEmpty: "is_not_empty",
} as const;
export type GetAllPromptsOperator5 = ClosedEnum<typeof GetAllPromptsOperator5>;

export const GetAllPromptsOperator4 = {
  Is: "is",
  IsBefore: "is_before",
  IsOnOrBefore: "is_on_or_before",
  IsBetween: "is_between",
  IsRelativeToday: "is_relative_today",
  IsRelativeTime: "is_relative_time",
  IsEmpty: "is_empty",
  IsNotEmpty: "is_not_empty",
} as const;
export type GetAllPromptsOperator4 = ClosedEnum<typeof GetAllPromptsOperator4>;

export const GetAllPromptsOperator3 = {
  Contains: "contains",
  DoesNotContain: "does_not_contain",
  IsEmpty: "is_empty",
  IsNotEmpty: "is_not_empty",
} as const;
export type GetAllPromptsOperator3 = ClosedEnum<typeof GetAllPromptsOperator3>;

export const GetAllPromptsOperator2 = {
  Is: "is",
  IsNot: "is_not",
  IsEmpty: "is_empty",
  IsNotEmpty: "is_not_empty",
} as const;
export type GetAllPromptsOperator2 = ClosedEnum<typeof GetAllPromptsOperator2>;

export const GetAllPromptsOperator1 = {
  Is: "is",
  IsNot: "is_not",
  Contains: "contains",
  DoesNotContain: "does_not_contain",
  StartsWith: "starts_with",
  EndsWith: "ends_with",
  IsEmpty: "is_empty",
  IsNotEmpty: "is_not_empty",
} as const;
export type GetAllPromptsOperator1 = ClosedEnum<typeof GetAllPromptsOperator1>;

export type GetAllPromptsFiltersPromptsRequestRequestBodyQuery6Operator =
  | GetAllPromptsOperator1
  | GetAllPromptsOperator2
  | GetAllPromptsOperator3
  | GetAllPromptsOperator4
  | GetAllPromptsOperator5;

export const GetAllPromptsFiltersPromptsRequestRequestBodyQuery6Type = {
  String: "string",
  MultiValueArray: "multi-value-array",
  SingleValueArray: "single-value-array",
  Number: "number",
  Date: "date",
  Object: "object",
  Boolean: "boolean",
  Evaluator: "evaluator",
} as const;
export type GetAllPromptsFiltersPromptsRequestRequestBodyQuery6Type =
  ClosedEnum<typeof GetAllPromptsFiltersPromptsRequestRequestBodyQuery6Type>;

export const GetAllPromptsFiltersPromptsRequestRequestBodyQuery6OptionsType = {
  String: "string",
  MultiValueArray: "multi-value-array",
  SingleValueArray: "single-value-array",
  Number: "number",
  Date: "date",
  Object: "object",
  Boolean: "boolean",
  Evaluator: "evaluator",
} as const;
export type GetAllPromptsFiltersPromptsRequestRequestBodyQuery6OptionsType =
  ClosedEnum<
    typeof GetAllPromptsFiltersPromptsRequestRequestBodyQuery6OptionsType
  >;

export const GetAllPromptsHideOperatorsPromptsRequestRequestBodyQueryFilters5 =
  {
    Is: "is",
    IsBefore: "is_before",
    IsOnOrBefore: "is_on_or_before",
    IsBetween: "is_between",
    IsRelativeToday: "is_relative_today",
    IsRelativeTime: "is_relative_time",
    IsEmpty: "is_empty",
    IsNotEmpty: "is_not_empty",
  } as const;
export type GetAllPromptsHideOperatorsPromptsRequestRequestBodyQueryFilters5 =
  ClosedEnum<
    typeof GetAllPromptsHideOperatorsPromptsRequestRequestBodyQueryFilters5
  >;

export const GetAllPromptsHideOperatorsPromptsRequestRequestBodyQueryFilters4 =
  {
    Contains: "contains",
    DoesNotContain: "does_not_contain",
    IsEmpty: "is_empty",
    IsNotEmpty: "is_not_empty",
  } as const;
export type GetAllPromptsHideOperatorsPromptsRequestRequestBodyQueryFilters4 =
  ClosedEnum<
    typeof GetAllPromptsHideOperatorsPromptsRequestRequestBodyQueryFilters4
  >;

export const GetAllPromptsHideOperatorsPromptsRequestRequestBodyQueryFilters3 =
  {
    Is: "is",
    IsNot: "is_not",
    IsEmpty: "is_empty",
    IsNotEmpty: "is_not_empty",
  } as const;
export type GetAllPromptsHideOperatorsPromptsRequestRequestBodyQueryFilters3 =
  ClosedEnum<
    typeof GetAllPromptsHideOperatorsPromptsRequestRequestBodyQueryFilters3
  >;

export const GetAllPromptsHideOperatorsPromptsRequestRequestBodyQueryFilters2 =
  {
    Equals: "equals",
    IsNotEqual: "is_not_equal",
    IsGreaterThan: "is_greater_than",
    IsLessThan: "is_less_than",
    IsGreaterThanOrEqualTo: "is_greater_than_or_equal_to",
    IsLessThanOrEqualTo: "is_less_than_or_equal_to",
    IsBetween: "is_between",
    IsEmpty: "is_empty",
    IsNotEmpty: "is_not_empty",
  } as const;
export type GetAllPromptsHideOperatorsPromptsRequestRequestBodyQueryFilters2 =
  ClosedEnum<
    typeof GetAllPromptsHideOperatorsPromptsRequestRequestBodyQueryFilters2
  >;

export const GetAllPromptsHideOperatorsPromptsRequestRequestBodyQueryFilters1 =
  {
    Is: "is",
    IsNot: "is_not",
    Contains: "contains",
    DoesNotContain: "does_not_contain",
    StartsWith: "starts_with",
    EndsWith: "ends_with",
    IsEmpty: "is_empty",
    IsNotEmpty: "is_not_empty",
  } as const;
export type GetAllPromptsHideOperatorsPromptsRequestRequestBodyQueryFilters1 =
  ClosedEnum<
    typeof GetAllPromptsHideOperatorsPromptsRequestRequestBodyQueryFilters1
  >;

export type GetAllPromptsFiltersPromptsRequestRequestBodyQuery6HideOperators =
  | GetAllPromptsHideOperatorsPromptsRequestRequestBodyQueryFilters1
  | GetAllPromptsHideOperatorsPromptsRequestRequestBodyQueryFilters2
  | GetAllPromptsHideOperatorsPromptsRequestRequestBodyQueryFilters3
  | GetAllPromptsHideOperatorsPromptsRequestRequestBodyQueryFilters4
  | GetAllPromptsHideOperatorsPromptsRequestRequestBodyQueryFilters5;

export type GetAllPromptsFiltersPromptsRequestOptions = {
  name: string;
  path: string;
  type: GetAllPromptsFiltersPromptsRequestRequestBodyQuery6OptionsType;
  hideOperators?:
    | Array<
      | GetAllPromptsHideOperatorsPromptsRequestRequestBodyQueryFilters1
      | GetAllPromptsHideOperatorsPromptsRequestRequestBodyQueryFilters2
      | GetAllPromptsHideOperatorsPromptsRequestRequestBodyQueryFilters3
      | GetAllPromptsHideOperatorsPromptsRequestRequestBodyQueryFilters4
      | GetAllPromptsHideOperatorsPromptsRequestRequestBodyQueryFilters5
    >
    | undefined;
  id: string;
};

export const GetAllPromptsHideOperatorsPromptsRequestRequestBodyQueryFilters65 =
  {
    Is: "is",
    IsBefore: "is_before",
    IsOnOrBefore: "is_on_or_before",
    IsBetween: "is_between",
    IsRelativeToday: "is_relative_today",
    IsRelativeTime: "is_relative_time",
    IsEmpty: "is_empty",
    IsNotEmpty: "is_not_empty",
  } as const;
export type GetAllPromptsHideOperatorsPromptsRequestRequestBodyQueryFilters65 =
  ClosedEnum<
    typeof GetAllPromptsHideOperatorsPromptsRequestRequestBodyQueryFilters65
  >;

export const GetAllPromptsHideOperatorsPromptsRequestRequestBodyQueryFilters64 =
  {
    Contains: "contains",
    DoesNotContain: "does_not_contain",
    IsEmpty: "is_empty",
    IsNotEmpty: "is_not_empty",
  } as const;
export type GetAllPromptsHideOperatorsPromptsRequestRequestBodyQueryFilters64 =
  ClosedEnum<
    typeof GetAllPromptsHideOperatorsPromptsRequestRequestBodyQueryFilters64
  >;

export const GetAllPromptsHideOperatorsPromptsRequestRequestBodyQueryFilters63 =
  {
    Is: "is",
    IsNot: "is_not",
    IsEmpty: "is_empty",
    IsNotEmpty: "is_not_empty",
  } as const;
export type GetAllPromptsHideOperatorsPromptsRequestRequestBodyQueryFilters63 =
  ClosedEnum<
    typeof GetAllPromptsHideOperatorsPromptsRequestRequestBodyQueryFilters63
  >;

export const GetAllPromptsHideOperatorsPromptsRequestRequestBodyQueryFilters62 =
  {
    Equals: "equals",
    IsNotEqual: "is_not_equal",
    IsGreaterThan: "is_greater_than",
    IsLessThan: "is_less_than",
    IsGreaterThanOrEqualTo: "is_greater_than_or_equal_to",
    IsLessThanOrEqualTo: "is_less_than_or_equal_to",
    IsBetween: "is_between",
    IsEmpty: "is_empty",
    IsNotEmpty: "is_not_empty",
  } as const;
export type GetAllPromptsHideOperatorsPromptsRequestRequestBodyQueryFilters62 =
  ClosedEnum<
    typeof GetAllPromptsHideOperatorsPromptsRequestRequestBodyQueryFilters62
  >;

export const GetAllPromptsHideOperatorsPromptsRequestRequestBodyQueryFilters61 =
  {
    Is: "is",
    IsNot: "is_not",
    Contains: "contains",
    DoesNotContain: "does_not_contain",
    StartsWith: "starts_with",
    EndsWith: "ends_with",
    IsEmpty: "is_empty",
    IsNotEmpty: "is_not_empty",
  } as const;
export type GetAllPromptsHideOperatorsPromptsRequestRequestBodyQueryFilters61 =
  ClosedEnum<
    typeof GetAllPromptsHideOperatorsPromptsRequestRequestBodyQueryFilters61
  >;

export type GetAllPromptsFiltersPromptsRequestRequestBodyQuery6HideOperators1 =
  | GetAllPromptsHideOperatorsPromptsRequestRequestBodyQueryFilters61
  | GetAllPromptsHideOperatorsPromptsRequestRequestBodyQueryFilters62
  | GetAllPromptsHideOperatorsPromptsRequestRequestBodyQueryFilters63
  | GetAllPromptsHideOperatorsPromptsRequestRequestBodyQueryFilters64
  | GetAllPromptsHideOperatorsPromptsRequestRequestBodyQueryFilters65;

export type Filters6 = {
  operator:
    | GetAllPromptsOperator1
    | GetAllPromptsOperator2
    | GetAllPromptsOperator3
    | GetAllPromptsOperator4
    | GetAllPromptsOperator5;
  value?: any | null | undefined;
  type: GetAllPromptsFiltersPromptsRequestRequestBodyQuery6Type;
  options: Array<GetAllPromptsFiltersPromptsRequestOptions>;
  selectedOptionId: string | null;
  name: string;
  path: string;
  hideOperators?:
    | Array<
      | GetAllPromptsHideOperatorsPromptsRequestRequestBodyQueryFilters61
      | GetAllPromptsHideOperatorsPromptsRequestRequestBodyQueryFilters62
      | GetAllPromptsHideOperatorsPromptsRequestRequestBodyQueryFilters63
      | GetAllPromptsHideOperatorsPromptsRequestRequestBodyQueryFilters64
      | GetAllPromptsHideOperatorsPromptsRequestRequestBodyQueryFilters65
    >
    | undefined;
};

export const GetAllPromptsFiltersPromptsRequestRequestBodyQueryOperator = {
  Is: "is",
  IsNot: "is_not",
  Contains: "contains",
  DoesNotContain: "does_not_contain",
  StartsWith: "starts_with",
  EndsWith: "ends_with",
  IsEmpty: "is_empty",
  IsNotEmpty: "is_not_empty",
} as const;
export type GetAllPromptsFiltersPromptsRequestRequestBodyQueryOperator =
  ClosedEnum<typeof GetAllPromptsFiltersPromptsRequestRequestBodyQueryOperator>;

export const GetAllPromptsFiltersPromptsRequestRequestBodyQueryType = {
  String: "string",
  MultiValueArray: "multi-value-array",
  SingleValueArray: "single-value-array",
  Number: "number",
  Date: "date",
  Object: "object",
  Boolean: "boolean",
  Evaluator: "evaluator",
} as const;
export type GetAllPromptsFiltersPromptsRequestRequestBodyQueryType = ClosedEnum<
  typeof GetAllPromptsFiltersPromptsRequestRequestBodyQueryType
>;

export const GetAllPromptsHideOperatorsPromptsRequestRequestBodyQuery5 = {
  Is: "is",
  IsBefore: "is_before",
  IsOnOrBefore: "is_on_or_before",
  IsBetween: "is_between",
  IsRelativeToday: "is_relative_today",
  IsRelativeTime: "is_relative_time",
  IsEmpty: "is_empty",
  IsNotEmpty: "is_not_empty",
} as const;
export type GetAllPromptsHideOperatorsPromptsRequestRequestBodyQuery5 =
  ClosedEnum<typeof GetAllPromptsHideOperatorsPromptsRequestRequestBodyQuery5>;

export const GetAllPromptsHideOperatorsPromptsRequestRequestBodyQuery4 = {
  Contains: "contains",
  DoesNotContain: "does_not_contain",
  IsEmpty: "is_empty",
  IsNotEmpty: "is_not_empty",
} as const;
export type GetAllPromptsHideOperatorsPromptsRequestRequestBodyQuery4 =
  ClosedEnum<typeof GetAllPromptsHideOperatorsPromptsRequestRequestBodyQuery4>;

export const GetAllPromptsHideOperatorsPromptsRequestRequestBodyQuery3 = {
  Is: "is",
  IsNot: "is_not",
  IsEmpty: "is_empty",
  IsNotEmpty: "is_not_empty",
} as const;
export type GetAllPromptsHideOperatorsPromptsRequestRequestBodyQuery3 =
  ClosedEnum<typeof GetAllPromptsHideOperatorsPromptsRequestRequestBodyQuery3>;

export const GetAllPromptsHideOperatorsPromptsRequestRequestBodyQuery2 = {
  Equals: "equals",
  IsNotEqual: "is_not_equal",
  IsGreaterThan: "is_greater_than",
  IsLessThan: "is_less_than",
  IsGreaterThanOrEqualTo: "is_greater_than_or_equal_to",
  IsLessThanOrEqualTo: "is_less_than_or_equal_to",
  IsBetween: "is_between",
  IsEmpty: "is_empty",
  IsNotEmpty: "is_not_empty",
} as const;
export type GetAllPromptsHideOperatorsPromptsRequestRequestBodyQuery2 =
  ClosedEnum<typeof GetAllPromptsHideOperatorsPromptsRequestRequestBodyQuery2>;

export const GetAllPromptsHideOperatorsPromptsRequestRequestBodyQuery1 = {
  Is: "is",
  IsNot: "is_not",
  Contains: "contains",
  DoesNotContain: "does_not_contain",
  StartsWith: "starts_with",
  EndsWith: "ends_with",
  IsEmpty: "is_empty",
  IsNotEmpty: "is_not_empty",
} as const;
export type GetAllPromptsHideOperatorsPromptsRequestRequestBodyQuery1 =
  ClosedEnum<typeof GetAllPromptsHideOperatorsPromptsRequestRequestBodyQuery1>;

export type GetAllPromptsFiltersPromptsRequestRequestBodyQueryHideOperators =
  | GetAllPromptsHideOperatorsPromptsRequestRequestBodyQuery1
  | GetAllPromptsHideOperatorsPromptsRequestRequestBodyQuery2
  | GetAllPromptsHideOperatorsPromptsRequestRequestBodyQuery3
  | GetAllPromptsHideOperatorsPromptsRequestRequestBodyQuery4
  | GetAllPromptsHideOperatorsPromptsRequestRequestBodyQuery5;

export type GetAllPromptsFilters5 = {
  operator: GetAllPromptsFiltersPromptsRequestRequestBodyQueryOperator;
  value: string | null;
  type: GetAllPromptsFiltersPromptsRequestRequestBodyQueryType;
  name: string;
  path: string;
  hideOperators?:
    | Array<
      | GetAllPromptsHideOperatorsPromptsRequestRequestBodyQuery1
      | GetAllPromptsHideOperatorsPromptsRequestRequestBodyQuery2
      | GetAllPromptsHideOperatorsPromptsRequestRequestBodyQuery3
      | GetAllPromptsHideOperatorsPromptsRequestRequestBodyQuery4
      | GetAllPromptsHideOperatorsPromptsRequestRequestBodyQuery5
    >
    | undefined;
};

export const GetAllPromptsFiltersPromptsRequestRequestBodyOperator = {
  Equals: "equals",
  IsNotEqual: "is_not_equal",
  IsGreaterThan: "is_greater_than",
  IsLessThan: "is_less_than",
  IsGreaterThanOrEqualTo: "is_greater_than_or_equal_to",
  IsLessThanOrEqualTo: "is_less_than_or_equal_to",
  IsBetween: "is_between",
  IsEmpty: "is_empty",
  IsNotEmpty: "is_not_empty",
} as const;
export type GetAllPromptsFiltersPromptsRequestRequestBodyOperator = ClosedEnum<
  typeof GetAllPromptsFiltersPromptsRequestRequestBodyOperator
>;

export type GetAllPromptsFiltersPromptsValue = number | Array<number>;

export const GetAllPromptsFiltersPromptsRequestRequestBodyType = {
  String: "string",
  MultiValueArray: "multi-value-array",
  SingleValueArray: "single-value-array",
  Number: "number",
  Date: "date",
  Object: "object",
  Boolean: "boolean",
  Evaluator: "evaluator",
} as const;
export type GetAllPromptsFiltersPromptsRequestRequestBodyType = ClosedEnum<
  typeof GetAllPromptsFiltersPromptsRequestRequestBodyType
>;

export const GetAllPromptsHideOperatorsPromptsRequestRequestBody5 = {
  Is: "is",
  IsBefore: "is_before",
  IsOnOrBefore: "is_on_or_before",
  IsBetween: "is_between",
  IsRelativeToday: "is_relative_today",
  IsRelativeTime: "is_relative_time",
  IsEmpty: "is_empty",
  IsNotEmpty: "is_not_empty",
} as const;
export type GetAllPromptsHideOperatorsPromptsRequestRequestBody5 = ClosedEnum<
  typeof GetAllPromptsHideOperatorsPromptsRequestRequestBody5
>;

export const GetAllPromptsHideOperatorsPromptsRequestRequestBody4 = {
  Contains: "contains",
  DoesNotContain: "does_not_contain",
  IsEmpty: "is_empty",
  IsNotEmpty: "is_not_empty",
} as const;
export type GetAllPromptsHideOperatorsPromptsRequestRequestBody4 = ClosedEnum<
  typeof GetAllPromptsHideOperatorsPromptsRequestRequestBody4
>;

export const GetAllPromptsHideOperatorsPromptsRequestRequestBody3 = {
  Is: "is",
  IsNot: "is_not",
  IsEmpty: "is_empty",
  IsNotEmpty: "is_not_empty",
} as const;
export type GetAllPromptsHideOperatorsPromptsRequestRequestBody3 = ClosedEnum<
  typeof GetAllPromptsHideOperatorsPromptsRequestRequestBody3
>;

export const GetAllPromptsHideOperatorsPromptsRequestRequestBody2 = {
  Equals: "equals",
  IsNotEqual: "is_not_equal",
  IsGreaterThan: "is_greater_than",
  IsLessThan: "is_less_than",
  IsGreaterThanOrEqualTo: "is_greater_than_or_equal_to",
  IsLessThanOrEqualTo: "is_less_than_or_equal_to",
  IsBetween: "is_between",
  IsEmpty: "is_empty",
  IsNotEmpty: "is_not_empty",
} as const;
export type GetAllPromptsHideOperatorsPromptsRequestRequestBody2 = ClosedEnum<
  typeof GetAllPromptsHideOperatorsPromptsRequestRequestBody2
>;

export const GetAllPromptsHideOperatorsPromptsRequestRequestBody1 = {
  Is: "is",
  IsNot: "is_not",
  Contains: "contains",
  DoesNotContain: "does_not_contain",
  StartsWith: "starts_with",
  EndsWith: "ends_with",
  IsEmpty: "is_empty",
  IsNotEmpty: "is_not_empty",
} as const;
export type GetAllPromptsHideOperatorsPromptsRequestRequestBody1 = ClosedEnum<
  typeof GetAllPromptsHideOperatorsPromptsRequestRequestBody1
>;

export type GetAllPromptsFiltersPromptsRequestRequestBodyHideOperators =
  | GetAllPromptsHideOperatorsPromptsRequestRequestBody1
  | GetAllPromptsHideOperatorsPromptsRequestRequestBody2
  | GetAllPromptsHideOperatorsPromptsRequestRequestBody3
  | GetAllPromptsHideOperatorsPromptsRequestRequestBody4
  | GetAllPromptsHideOperatorsPromptsRequestRequestBody5;

export type GetAllPromptsFilters4 = {
  operator: GetAllPromptsFiltersPromptsRequestRequestBodyOperator;
  value: number | Array<number> | null;
  type: GetAllPromptsFiltersPromptsRequestRequestBodyType;
  name: string;
  path: string;
  hideOperators?:
    | Array<
      | GetAllPromptsHideOperatorsPromptsRequestRequestBody1
      | GetAllPromptsHideOperatorsPromptsRequestRequestBody2
      | GetAllPromptsHideOperatorsPromptsRequestRequestBody3
      | GetAllPromptsHideOperatorsPromptsRequestRequestBody4
      | GetAllPromptsHideOperatorsPromptsRequestRequestBody5
    >
    | undefined;
};

export const GetAllPromptsFiltersPromptsRequestOperator = {
  Is: "is",
  IsBefore: "is_before",
  IsOnOrBefore: "is_on_or_before",
  IsBetween: "is_between",
  IsRelativeToday: "is_relative_today",
  IsRelativeTime: "is_relative_time",
  IsEmpty: "is_empty",
  IsNotEmpty: "is_not_empty",
} as const;
export type GetAllPromptsFiltersPromptsRequestOperator = ClosedEnum<
  typeof GetAllPromptsFiltersPromptsRequestOperator
>;

export const GetAllPromptsUnit2 = {
  HoursAgo: "hours_ago",
  MinutesAgo: "minutes_ago",
} as const;
export type GetAllPromptsUnit2 = ClosedEnum<typeof GetAllPromptsUnit2>;

export const GetAllPromptsUnit1 = {
  Day: "day",
  Week: "week",
  Month: "month",
  Year: "year",
} as const;
export type GetAllPromptsUnit1 = ClosedEnum<typeof GetAllPromptsUnit1>;

export type FiltersUnit = GetAllPromptsUnit1 | GetAllPromptsUnit2;

export const FiltersRelativeTime = {
  Today: "today",
  Yesterday: "yesterday",
  OneWeekAgo: "one_week_ago",
  OneMonthAgo: "one_month_ago",
  CustomDate: "custom_date",
} as const;
export type FiltersRelativeTime = ClosedEnum<typeof FiltersRelativeTime>;

export const GetAllPromptsFiltersDirection = {
  Present: "present",
  Past: "past",
} as const;
export type GetAllPromptsFiltersDirection = ClosedEnum<
  typeof GetAllPromptsFiltersDirection
>;

export type FiltersCriteria = {
  unit?: GetAllPromptsUnit1 | GetAllPromptsUnit2 | undefined;
  count?: number | null | undefined;
  relativeTime?: FiltersRelativeTime | undefined;
  customDate?: string | null | undefined;
  direction?: GetAllPromptsFiltersDirection | undefined;
  startDate?: string | null | undefined;
  endDate?: string | null | undefined;
};

export const FiltersMode = {
  Date: "date",
  Datetime: "datetime",
} as const;
export type FiltersMode = ClosedEnum<typeof FiltersMode>;

export type GetAllPromptsFiltersValue = {
  criteria: FiltersCriteria | null;
  mode: FiltersMode;
};

export const GetAllPromptsFiltersPromptsRequestType = {
  String: "string",
  MultiValueArray: "multi-value-array",
  SingleValueArray: "single-value-array",
  Number: "number",
  Date: "date",
  Object: "object",
  Boolean: "boolean",
  Evaluator: "evaluator",
} as const;
export type GetAllPromptsFiltersPromptsRequestType = ClosedEnum<
  typeof GetAllPromptsFiltersPromptsRequestType
>;

export const GetAllPromptsHideOperatorsPromptsRequest5 = {
  Is: "is",
  IsBefore: "is_before",
  IsOnOrBefore: "is_on_or_before",
  IsBetween: "is_between",
  IsRelativeToday: "is_relative_today",
  IsRelativeTime: "is_relative_time",
  IsEmpty: "is_empty",
  IsNotEmpty: "is_not_empty",
} as const;
export type GetAllPromptsHideOperatorsPromptsRequest5 = ClosedEnum<
  typeof GetAllPromptsHideOperatorsPromptsRequest5
>;

export const GetAllPromptsHideOperatorsPromptsRequest4 = {
  Contains: "contains",
  DoesNotContain: "does_not_contain",
  IsEmpty: "is_empty",
  IsNotEmpty: "is_not_empty",
} as const;
export type GetAllPromptsHideOperatorsPromptsRequest4 = ClosedEnum<
  typeof GetAllPromptsHideOperatorsPromptsRequest4
>;

export const GetAllPromptsHideOperatorsPromptsRequest3 = {
  Is: "is",
  IsNot: "is_not",
  IsEmpty: "is_empty",
  IsNotEmpty: "is_not_empty",
} as const;
export type GetAllPromptsHideOperatorsPromptsRequest3 = ClosedEnum<
  typeof GetAllPromptsHideOperatorsPromptsRequest3
>;

export const GetAllPromptsHideOperatorsPromptsRequest2 = {
  Equals: "equals",
  IsNotEqual: "is_not_equal",
  IsGreaterThan: "is_greater_than",
  IsLessThan: "is_less_than",
  IsGreaterThanOrEqualTo: "is_greater_than_or_equal_to",
  IsLessThanOrEqualTo: "is_less_than_or_equal_to",
  IsBetween: "is_between",
  IsEmpty: "is_empty",
  IsNotEmpty: "is_not_empty",
} as const;
export type GetAllPromptsHideOperatorsPromptsRequest2 = ClosedEnum<
  typeof GetAllPromptsHideOperatorsPromptsRequest2
>;

export const GetAllPromptsHideOperatorsPromptsRequest1 = {
  Is: "is",
  IsNot: "is_not",
  Contains: "contains",
  DoesNotContain: "does_not_contain",
  StartsWith: "starts_with",
  EndsWith: "ends_with",
  IsEmpty: "is_empty",
  IsNotEmpty: "is_not_empty",
} as const;
export type GetAllPromptsHideOperatorsPromptsRequest1 = ClosedEnum<
  typeof GetAllPromptsHideOperatorsPromptsRequest1
>;

export type GetAllPromptsFiltersPromptsRequestHideOperators =
  | GetAllPromptsHideOperatorsPromptsRequest1
  | GetAllPromptsHideOperatorsPromptsRequest2
  | GetAllPromptsHideOperatorsPromptsRequest3
  | GetAllPromptsHideOperatorsPromptsRequest4
  | GetAllPromptsHideOperatorsPromptsRequest5;

export type GetAllPromptsFilters3 = {
  operator: GetAllPromptsFiltersPromptsRequestOperator;
  value: GetAllPromptsFiltersValue;
  type: GetAllPromptsFiltersPromptsRequestType;
  name: string;
  path: string;
  hideOperators?:
    | Array<
      | GetAllPromptsHideOperatorsPromptsRequest1
      | GetAllPromptsHideOperatorsPromptsRequest2
      | GetAllPromptsHideOperatorsPromptsRequest3
      | GetAllPromptsHideOperatorsPromptsRequest4
      | GetAllPromptsHideOperatorsPromptsRequest5
    >
    | undefined;
};

export const GetAllPromptsFiltersPromptsOperator = {
  Contains: "contains",
  DoesNotContain: "does_not_contain",
  IsEmpty: "is_empty",
  IsNotEmpty: "is_not_empty",
} as const;
export type GetAllPromptsFiltersPromptsOperator = ClosedEnum<
  typeof GetAllPromptsFiltersPromptsOperator
>;

export const GetAllPromptsFiltersPromptsType = {
  String: "string",
  MultiValueArray: "multi-value-array",
  SingleValueArray: "single-value-array",
  Number: "number",
  Date: "date",
  Object: "object",
  Boolean: "boolean",
  Evaluator: "evaluator",
} as const;
export type GetAllPromptsFiltersPromptsType = ClosedEnum<
  typeof GetAllPromptsFiltersPromptsType
>;

export type GetAllPromptsFiltersPromptsOptions = string | number;

export type GetAllPromptsFiltersPromptsOptionsMap = string | number;

export const GetAllPromptsHideOperatorsPrompts5 = {
  Is: "is",
  IsBefore: "is_before",
  IsOnOrBefore: "is_on_or_before",
  IsBetween: "is_between",
  IsRelativeToday: "is_relative_today",
  IsRelativeTime: "is_relative_time",
  IsEmpty: "is_empty",
  IsNotEmpty: "is_not_empty",
} as const;
export type GetAllPromptsHideOperatorsPrompts5 = ClosedEnum<
  typeof GetAllPromptsHideOperatorsPrompts5
>;

export const GetAllPromptsHideOperatorsPrompts4 = {
  Contains: "contains",
  DoesNotContain: "does_not_contain",
  IsEmpty: "is_empty",
  IsNotEmpty: "is_not_empty",
} as const;
export type GetAllPromptsHideOperatorsPrompts4 = ClosedEnum<
  typeof GetAllPromptsHideOperatorsPrompts4
>;

export const GetAllPromptsHideOperatorsPrompts3 = {
  Is: "is",
  IsNot: "is_not",
  IsEmpty: "is_empty",
  IsNotEmpty: "is_not_empty",
} as const;
export type GetAllPromptsHideOperatorsPrompts3 = ClosedEnum<
  typeof GetAllPromptsHideOperatorsPrompts3
>;

export const GetAllPromptsHideOperatorsPrompts2 = {
  Equals: "equals",
  IsNotEqual: "is_not_equal",
  IsGreaterThan: "is_greater_than",
  IsLessThan: "is_less_than",
  IsGreaterThanOrEqualTo: "is_greater_than_or_equal_to",
  IsLessThanOrEqualTo: "is_less_than_or_equal_to",
  IsBetween: "is_between",
  IsEmpty: "is_empty",
  IsNotEmpty: "is_not_empty",
} as const;
export type GetAllPromptsHideOperatorsPrompts2 = ClosedEnum<
  typeof GetAllPromptsHideOperatorsPrompts2
>;

export const GetAllPromptsHideOperatorsPrompts1 = {
  Is: "is",
  IsNot: "is_not",
  Contains: "contains",
  DoesNotContain: "does_not_contain",
  StartsWith: "starts_with",
  EndsWith: "ends_with",
  IsEmpty: "is_empty",
  IsNotEmpty: "is_not_empty",
} as const;
export type GetAllPromptsHideOperatorsPrompts1 = ClosedEnum<
  typeof GetAllPromptsHideOperatorsPrompts1
>;

export type GetAllPromptsFiltersPromptsHideOperators =
  | GetAllPromptsHideOperatorsPrompts1
  | GetAllPromptsHideOperatorsPrompts2
  | GetAllPromptsHideOperatorsPrompts3
  | GetAllPromptsHideOperatorsPrompts4
  | GetAllPromptsHideOperatorsPrompts5;

export type GetAllPromptsFilters2 = {
  operator: GetAllPromptsFiltersPromptsOperator;
  value: Array<any> | null;
  type: GetAllPromptsFiltersPromptsType;
  options: Array<string | number>;
  optionsMap?: { [k: string]: string | number } | null | undefined;
  imageUrlMap?: { [k: string]: string } | undefined;
  name: string;
  path: string;
  hideOperators?:
    | Array<
      | GetAllPromptsHideOperatorsPrompts1
      | GetAllPromptsHideOperatorsPrompts2
      | GetAllPromptsHideOperatorsPrompts3
      | GetAllPromptsHideOperatorsPrompts4
      | GetAllPromptsHideOperatorsPrompts5
    >
    | undefined;
};

export const GetAllPromptsFiltersOperator = {
  Is: "is",
  IsNot: "is_not",
  IsEmpty: "is_empty",
  IsNotEmpty: "is_not_empty",
} as const;
export type GetAllPromptsFiltersOperator = ClosedEnum<
  typeof GetAllPromptsFiltersOperator
>;

export const GetAllPromptsFiltersType = {
  String: "string",
  MultiValueArray: "multi-value-array",
  SingleValueArray: "single-value-array",
  Number: "number",
  Date: "date",
  Object: "object",
  Boolean: "boolean",
  Evaluator: "evaluator",
} as const;
export type GetAllPromptsFiltersType = ClosedEnum<
  typeof GetAllPromptsFiltersType
>;

export type GetAllPromptsFiltersOptions = string | number;

export type GetAllPromptsFiltersOptionsMap = string | number;

export const GetAllPromptsHideOperators5 = {
  Is: "is",
  IsBefore: "is_before",
  IsOnOrBefore: "is_on_or_before",
  IsBetween: "is_between",
  IsRelativeToday: "is_relative_today",
  IsRelativeTime: "is_relative_time",
  IsEmpty: "is_empty",
  IsNotEmpty: "is_not_empty",
} as const;
export type GetAllPromptsHideOperators5 = ClosedEnum<
  typeof GetAllPromptsHideOperators5
>;

export const GetAllPromptsHideOperators4 = {
  Contains: "contains",
  DoesNotContain: "does_not_contain",
  IsEmpty: "is_empty",
  IsNotEmpty: "is_not_empty",
} as const;
export type GetAllPromptsHideOperators4 = ClosedEnum<
  typeof GetAllPromptsHideOperators4
>;

export const GetAllPromptsHideOperators3 = {
  Is: "is",
  IsNot: "is_not",
  IsEmpty: "is_empty",
  IsNotEmpty: "is_not_empty",
} as const;
export type GetAllPromptsHideOperators3 = ClosedEnum<
  typeof GetAllPromptsHideOperators3
>;

export const GetAllPromptsHideOperators2 = {
  Equals: "equals",
  IsNotEqual: "is_not_equal",
  IsGreaterThan: "is_greater_than",
  IsLessThan: "is_less_than",
  IsGreaterThanOrEqualTo: "is_greater_than_or_equal_to",
  IsLessThanOrEqualTo: "is_less_than_or_equal_to",
  IsBetween: "is_between",
  IsEmpty: "is_empty",
  IsNotEmpty: "is_not_empty",
} as const;
export type GetAllPromptsHideOperators2 = ClosedEnum<
  typeof GetAllPromptsHideOperators2
>;

export const GetAllPromptsHideOperators1 = {
  Is: "is",
  IsNot: "is_not",
  Contains: "contains",
  DoesNotContain: "does_not_contain",
  StartsWith: "starts_with",
  EndsWith: "ends_with",
  IsEmpty: "is_empty",
  IsNotEmpty: "is_not_empty",
} as const;
export type GetAllPromptsHideOperators1 = ClosedEnum<
  typeof GetAllPromptsHideOperators1
>;

export type GetAllPromptsFiltersHideOperators =
  | GetAllPromptsHideOperators1
  | GetAllPromptsHideOperators2
  | GetAllPromptsHideOperators3
  | GetAllPromptsHideOperators4
  | GetAllPromptsHideOperators5;

export type GetAllPromptsFilters1 = {
  operator: GetAllPromptsFiltersOperator;
  value?: any | undefined;
  type: GetAllPromptsFiltersType;
  options: Array<string | number>;
  optionsMap?: { [k: string]: string | number } | null | undefined;
  imageUrlMap?: { [k: string]: string } | undefined;
  name: string;
  path: string;
  hideOperators?:
    | Array<
      | GetAllPromptsHideOperators1
      | GetAllPromptsHideOperators2
      | GetAllPromptsHideOperators3
      | GetAllPromptsHideOperators4
      | GetAllPromptsHideOperators5
    >
    | undefined;
};

export type GetAllPromptsFilters =
  | GetAllPromptsFilters3
  | GetAllPromptsFilters4
  | GetAllPromptsFilters5
  | Filters8
  | Filters6
  | Filters7
  | GetAllPromptsFilters1
  | GetAllPromptsFilters2;

export type GetAllPromptsQuery = {
  operator: GetAllPromptsOperator;
  filters?:
    | Array<
      | GetAllPromptsFilters3
      | GetAllPromptsFilters4
      | GetAllPromptsFilters5
      | Filters8
      | Filters6
      | Filters7
      | GetAllPromptsFilters1
      | GetAllPromptsFilters2
    >
    | undefined;
};

export const GetAllPromptsFiltersPromptsRequestRequestBody4Type = {
  StringArray: "string_array",
} as const;
export type GetAllPromptsFiltersPromptsRequestRequestBody4Type = ClosedEnum<
  typeof GetAllPromptsFiltersPromptsRequestRequestBody4Type
>;

export const GetAllPromptsFiltersPromptsRequestRequestBody4Operator = {
  In: "in",
} as const;
export type GetAllPromptsFiltersPromptsRequestRequestBody4Operator = ClosedEnum<
  typeof GetAllPromptsFiltersPromptsRequestRequestBody4Operator
>;

export type GetAllPromptsFiltersPrompts4 = {
  type: GetAllPromptsFiltersPromptsRequestRequestBody4Type;
  operator: GetAllPromptsFiltersPromptsRequestRequestBody4Operator;
  values: Array<string>;
  path: string;
};

export const GetAllPromptsFiltersPromptsRequestRequestBody3Type = {
  String: "string",
} as const;
export type GetAllPromptsFiltersPromptsRequestRequestBody3Type = ClosedEnum<
  typeof GetAllPromptsFiltersPromptsRequestRequestBody3Type
>;

export const GetAllPromptsFiltersPromptsRequestRequestBody3Operator = {
  Contains: "contains",
  Equals: "equals",
} as const;
export type GetAllPromptsFiltersPromptsRequestRequestBody3Operator = ClosedEnum<
  typeof GetAllPromptsFiltersPromptsRequestRequestBody3Operator
>;

export type GetAllPromptsFiltersPrompts3 = {
  type: GetAllPromptsFiltersPromptsRequestRequestBody3Type;
  operator: GetAllPromptsFiltersPromptsRequestRequestBody3Operator;
  value: string;
  path: string;
};

export const GetAllPromptsFiltersPromptsRequestRequestBody2Type = {
  Search: "search",
} as const;
export type GetAllPromptsFiltersPromptsRequestRequestBody2Type = ClosedEnum<
  typeof GetAllPromptsFiltersPromptsRequestRequestBody2Type
>;

export type GetAllPromptsFiltersPrompts2 = {
  type: GetAllPromptsFiltersPromptsRequestRequestBody2Type;
  value: string;
  searchPaths: Array<string>;
};

export const GetAllPromptsFiltersPromptsRequestRequestBody1Type = {
  Id: "id",
} as const;
export type GetAllPromptsFiltersPromptsRequestRequestBody1Type = ClosedEnum<
  typeof GetAllPromptsFiltersPromptsRequestRequestBody1Type
>;

export type GetAllPromptsFiltersPrompts1 = {
  type: GetAllPromptsFiltersPromptsRequestRequestBody1Type;
  id: string;
  path: string;
};

export type GetAllPromptsPromptsFilters =
  | GetAllPromptsFiltersPrompts1
  | GetAllPromptsFiltersPrompts2
  | GetAllPromptsFiltersPrompts3
  | GetAllPromptsFiltersPrompts4;

export type GetAllPromptsRequestBody = {
  pagination?: GetAllPromptsPagination | undefined;
  sortingProps?: Array<GetAllPromptsSortingProps> | undefined;
  query?: GetAllPromptsQuery | undefined;
  filters: Array<
    | GetAllPromptsFiltersPrompts1
    | GetAllPromptsFiltersPrompts2
    | GetAllPromptsFiltersPrompts3
    | GetAllPromptsFiltersPrompts4
  >;
  includedFields?: { [k: string]: string } | undefined;
};

export const GetAllPromptsObject = {
  List: "list",
} as const;
export type GetAllPromptsObject = ClosedEnum<typeof GetAllPromptsObject>;

export const GetAllPromptsOwnerPromptsResponse2 = {
  Vendor: "vendor",
} as const;
export type GetAllPromptsOwnerPromptsResponse2 = ClosedEnum<
  typeof GetAllPromptsOwnerPromptsResponse2
>;

export type GetAllPromptsDataPromptsOwner =
  | string
  | GetAllPromptsOwnerPromptsResponse2;

/**
 * The type of the model
 */
export const GetAllPromptsDataPromptsModelType = {
  Chat: "chat",
  Completion: "completion",
  Embedding: "embedding",
  Vision: "vision",
  Image: "image",
  Tts: "tts",
  Stt: "stt",
  Rerank: "rerank",
  Moderations: "moderations",
} as const;
/**
 * The type of the model
 */
export type GetAllPromptsDataPromptsModelType = ClosedEnum<
  typeof GetAllPromptsDataPromptsModelType
>;

/**
 * Only supported on `image` models.
 */
export const GetAllPromptsDataPromptsFormat = {
  Url: "url",
  B64Json: "b64_json",
  Text: "text",
  JsonObject: "json_object",
} as const;
/**
 * Only supported on `image` models.
 */
export type GetAllPromptsDataPromptsFormat = ClosedEnum<
  typeof GetAllPromptsDataPromptsFormat
>;

/**
 * Only supported on `image` models.
 */
export const GetAllPromptsDataPromptsQuality = {
  Standard: "standard",
  Hd: "hd",
} as const;
/**
 * Only supported on `image` models.
 */
export type GetAllPromptsDataPromptsQuality = ClosedEnum<
  typeof GetAllPromptsDataPromptsQuality
>;

export const GetAllPromptsResponseFormatPromptsResponse200ApplicationJSONResponseBodyType =
  {
    JsonObject: "json_object",
  } as const;
export type GetAllPromptsResponseFormatPromptsResponse200ApplicationJSONResponseBodyType =
  ClosedEnum<
    typeof GetAllPromptsResponseFormatPromptsResponse200ApplicationJSONResponseBodyType
  >;

export type GetAllPromptsResponseFormatPromptsResponse2 = {
  type:
    GetAllPromptsResponseFormatPromptsResponse200ApplicationJSONResponseBodyType;
};

export const GetAllPromptsResponseFormatPromptsResponse200ApplicationJSONType =
  {
    JsonSchema: "json_schema",
  } as const;
export type GetAllPromptsResponseFormatPromptsResponse200ApplicationJSONType =
  ClosedEnum<
    typeof GetAllPromptsResponseFormatPromptsResponse200ApplicationJSONType
  >;

export type GetAllPromptsResponseFormatPromptsResponseJsonSchema = {
  name: string;
  strict: boolean;
  schema: { [k: string]: any };
};

export type GetAllPromptsResponseFormatPromptsResponse1 = {
  type: GetAllPromptsResponseFormatPromptsResponse200ApplicationJSONType;
  jsonSchema: GetAllPromptsResponseFormatPromptsResponseJsonSchema;
};

/**
 * An object specifying the format that the model must output.
 *
 * @remarks
 *
 *  Setting to `{ "type": "json_schema", "json_schema": {...} }` enables Structured Outputs which ensures the model will match your supplied JSON schema
 *
 *  Setting to `{ "type": "json_object" }` enables JSON mode, which ensures the message the model generates is valid JSON.
 *
 * Important: when using JSON mode, you must also instruct the model to produce JSON yourself via a system or user message. Without this, the model may generate an unending stream of whitespace until the generation reaches the token limit, resulting in a long-running and seemingly "stuck" request. Also note that the message content may be partially cut off if finish_reason="length", which indicates the generation exceeded max_tokens or the conversation exceeded the max context length.
 */
export type GetAllPromptsDataPromptsResponseFormat =
  | GetAllPromptsResponseFormatPromptsResponse2
  | GetAllPromptsResponseFormatPromptsResponse1;

/**
 * The version of photoReal to use. Must be v1 or v2. Only available for `leonardoai` provider
 */
export const GetAllPromptsDataPromptsPhotoRealVersion = {
  V1: "v1",
  V2: "v2",
} as const;
/**
 * The version of photoReal to use. Must be v1 or v2. Only available for `leonardoai` provider
 */
export type GetAllPromptsDataPromptsPhotoRealVersion = ClosedEnum<
  typeof GetAllPromptsDataPromptsPhotoRealVersion
>;

/**
 * The format to return the embeddings
 */
export const GetAllPromptsDataPromptsEncodingFormat = {
  Float: "float",
  Base64: "base64",
} as const;
/**
 * The format to return the embeddings
 */
export type GetAllPromptsDataPromptsEncodingFormat = ClosedEnum<
  typeof GetAllPromptsDataPromptsEncodingFormat
>;

/**
 * Model Parameters: Not all parameters apply to every model
 */
export type GetAllPromptsDataPromptsModelParameters = {
  /**
   * Only supported on `chat` and `completion` models.
   */
  temperature?: number | undefined;
  /**
   * Only supported on `chat` and `completion` models.
   */
  maxTokens?: number | undefined;
  /**
   * Only supported on `chat` and `completion` models.
   */
  topK?: number | undefined;
  /**
   * Only supported on `chat` and `completion` models.
   */
  topP?: number | undefined;
  /**
   * Only supported on `chat` and `completion` models.
   */
  frequencyPenalty?: number | undefined;
  /**
   * Only supported on `chat` and `completion` models.
   */
  presencePenalty?: number | undefined;
  /**
   * Only supported on `image` models.
   */
  numImages?: number | undefined;
  /**
   * Best effort deterministic seed for the model. Currently only OpenAI models support these
   */
  seed?: number | undefined;
  /**
   * Only supported on `image` models.
   */
  format?: GetAllPromptsDataPromptsFormat | undefined;
  /**
   * Only supported on `image` models.
   */
  dimensions?: string | undefined;
  /**
   * Only supported on `image` models.
   */
  quality?: GetAllPromptsDataPromptsQuality | undefined;
  /**
   * Only supported on `image` models.
   */
  style?: string | undefined;
  /**
   * An object specifying the format that the model must output.
   *
   * @remarks
   *
   *  Setting to `{ "type": "json_schema", "json_schema": {...} }` enables Structured Outputs which ensures the model will match your supplied JSON schema
   *
   *  Setting to `{ "type": "json_object" }` enables JSON mode, which ensures the message the model generates is valid JSON.
   *
   * Important: when using JSON mode, you must also instruct the model to produce JSON yourself via a system or user message. Without this, the model may generate an unending stream of whitespace until the generation reaches the token limit, resulting in a long-running and seemingly "stuck" request. Also note that the message content may be partially cut off if finish_reason="length", which indicates the generation exceeded max_tokens or the conversation exceeded the max context length.
   */
  responseFormat?:
    | GetAllPromptsResponseFormatPromptsResponse2
    | GetAllPromptsResponseFormatPromptsResponse1
    | null
    | undefined;
  /**
   * The version of photoReal to use. Must be v1 or v2. Only available for `leonardoai` provider
   */
  photoRealVersion?: GetAllPromptsDataPromptsPhotoRealVersion | undefined;
  /**
   * The format to return the embeddings
   */
  encodingFormat?: GetAllPromptsDataPromptsEncodingFormat | undefined;
};

export const GetAllPromptsDataPromptsProvider = {
  Cohere: "cohere",
  Openai: "openai",
  Anthropic: "anthropic",
  Huggingface: "huggingface",
  Replicate: "replicate",
  Google: "google",
  GoogleAi: "google-ai",
  Azure: "azure",
  Aws: "aws",
  Anyscale: "anyscale",
  Perplexity: "perplexity",
  Groq: "groq",
  Fal: "fal",
  Leonardoai: "leonardoai",
  Nvidia: "nvidia",
  Jina: "jina",
  Togetherai: "togetherai",
  Elevenlabs: "elevenlabs",
} as const;
export type GetAllPromptsDataPromptsProvider = ClosedEnum<
  typeof GetAllPromptsDataPromptsProvider
>;

/**
 * The role of the prompt message
 */
export const GetAllPromptsDataPromptsRole = {
  System: "system",
  Assistant: "assistant",
  User: "user",
  Exception: "exception",
  Tool: "tool",
  Prompt: "prompt",
  Correction: "correction",
  ExpectedOutput: "expected_output",
} as const;
/**
 * The role of the prompt message
 */
export type GetAllPromptsDataPromptsRole = ClosedEnum<
  typeof GetAllPromptsDataPromptsRole
>;

export const GetAllPrompts2PromptsResponse200ApplicationJSONResponseBodyType = {
  ImageUrl: "image_url",
} as const;
export type GetAllPrompts2PromptsResponse200ApplicationJSONResponseBodyType =
  ClosedEnum<
    typeof GetAllPrompts2PromptsResponse200ApplicationJSONResponseBodyType
  >;

export type GetAllPrompts2PromptsResponseImageUrl = {
  /**
   * The orq.ai id of the image
   */
  id?: string | undefined;
  /**
   * Either a URL of the image or the base64 encoded data URI.
   */
  url: string;
  /**
   * Specifies the detail level of the image. Currently only supported with OpenAI models
   */
  detail?: string | undefined;
};

/**
 * The image part of the prompt message. Only supported with vision models.
 */
export type GetAllPrompts2PromptsResponse2 = {
  type: GetAllPrompts2PromptsResponse200ApplicationJSONResponseBodyType;
  imageUrl: GetAllPrompts2PromptsResponseImageUrl;
};

export const GetAllPrompts2PromptsResponse200ApplicationJSONType = {
  Text: "text",
} as const;
export type GetAllPrompts2PromptsResponse200ApplicationJSONType = ClosedEnum<
  typeof GetAllPrompts2PromptsResponse200ApplicationJSONType
>;

/**
 * Text content part of a prompt message
 */
export type GetAllPrompts2PromptsResponse1 = {
  type: GetAllPrompts2PromptsResponse200ApplicationJSONType;
  text: string;
};

export type GetAllPromptsContentPromptsResponse2 =
  | GetAllPrompts2PromptsResponse1
  | GetAllPrompts2PromptsResponse2;

/**
 * The contents of the user message. Either the text content of the message or an array of content parts with a defined type, each can be of type `text` or `image_url` when passing in images. You can pass multiple images by adding multiple `image_url` content parts.
 */
export type GetAllPromptsDataPromptsContent =
  | string
  | Array<GetAllPrompts2PromptsResponse1 | GetAllPrompts2PromptsResponse2>;

export const GetAllPromptsDataPromptsResponse200Type = {
  Function: "function",
} as const;
export type GetAllPromptsDataPromptsResponse200Type = ClosedEnum<
  typeof GetAllPromptsDataPromptsResponse200Type
>;

export type GetAllPromptsDataPromptsResponseFunction = {
  name: string;
  /**
   * JSON string arguments for the functions
   */
  arguments: string;
};

export type GetAllPromptsDataPromptsToolCalls = {
  id?: string | undefined;
  index?: number | undefined;
  type: GetAllPromptsDataPromptsResponse200Type;
  function: GetAllPromptsDataPromptsResponseFunction;
};

export type GetAllPromptsDataPromptsMessages = {
  /**
   * The role of the prompt message
   */
  role: GetAllPromptsDataPromptsRole;
  /**
   * The contents of the user message. Either the text content of the message or an array of content parts with a defined type, each can be of type `text` or `image_url` when passing in images. You can pass multiple images by adding multiple `image_url` content parts.
   */
  content:
    | string
    | Array<GetAllPrompts2PromptsResponse1 | GetAllPrompts2PromptsResponse2>;
  toolCalls?: Array<GetAllPromptsDataPromptsToolCalls> | undefined;
};

export type GetAllPromptsDataPromptsPromptConfig = {
  stream?: boolean | undefined;
  model?: string | undefined;
  /**
   * The id of the resource
   */
  modelDbId?: string | undefined;
  /**
   * The type of the model
   */
  modelType?: GetAllPromptsDataPromptsModelType | undefined;
  /**
   * Model Parameters: Not all parameters apply to every model
   */
  modelParameters?: GetAllPromptsDataPromptsModelParameters | undefined;
  provider?: GetAllPromptsDataPromptsProvider | undefined;
  /**
   * The id of the resource
   */
  integrationId?: string | null | undefined;
  version?: string | undefined;
  messages: Array<GetAllPromptsDataPromptsMessages>;
};

export type GetAllPromptsDataPromptsMetadata = {
  useCases?: Array<string> | undefined;
  language?: string | undefined;
};

/**
 * The type of the model
 */
export const GetAllPromptsDataPromptsResponse200ApplicationJSONModelType = {
  Chat: "chat",
  Completion: "completion",
  Embedding: "embedding",
  Vision: "vision",
  Image: "image",
  Tts: "tts",
  Stt: "stt",
  Rerank: "rerank",
  Moderations: "moderations",
} as const;
/**
 * The type of the model
 */
export type GetAllPromptsDataPromptsResponse200ApplicationJSONModelType =
  ClosedEnum<
    typeof GetAllPromptsDataPromptsResponse200ApplicationJSONModelType
  >;

/**
 * Only supported on `image` models.
 */
export const GetAllPromptsDataPromptsResponse200ApplicationJSONResponseBodyFormat =
  {
    Url: "url",
    B64Json: "b64_json",
    Text: "text",
    JsonObject: "json_object",
  } as const;
/**
 * Only supported on `image` models.
 */
export type GetAllPromptsDataPromptsResponse200ApplicationJSONResponseBodyFormat =
  ClosedEnum<
    typeof GetAllPromptsDataPromptsResponse200ApplicationJSONResponseBodyFormat
  >;

/**
 * Only supported on `image` models.
 */
export const GetAllPromptsDataPromptsResponse200ApplicationJSONQuality = {
  Standard: "standard",
  Hd: "hd",
} as const;
/**
 * Only supported on `image` models.
 */
export type GetAllPromptsDataPromptsResponse200ApplicationJSONQuality =
  ClosedEnum<typeof GetAllPromptsDataPromptsResponse200ApplicationJSONQuality>;

export const GetAllPromptsResponseFormatPromptsResponse200ApplicationJSONResponseBodyData3VersionsType =
  {
    JsonObject: "json_object",
  } as const;
export type GetAllPromptsResponseFormatPromptsResponse200ApplicationJSONResponseBodyData3VersionsType =
  ClosedEnum<
    typeof GetAllPromptsResponseFormatPromptsResponse200ApplicationJSONResponseBodyData3VersionsType
  >;

export type GetAllPromptsResponseFormatPromptsResponse200ApplicationJSONResponseBody2 =
  {
    type:
      GetAllPromptsResponseFormatPromptsResponse200ApplicationJSONResponseBodyData3VersionsType;
  };

export const GetAllPromptsResponseFormatPromptsResponse200ApplicationJSONResponseBodyData3Type =
  {
    JsonSchema: "json_schema",
  } as const;
export type GetAllPromptsResponseFormatPromptsResponse200ApplicationJSONResponseBodyData3Type =
  ClosedEnum<
    typeof GetAllPromptsResponseFormatPromptsResponse200ApplicationJSONResponseBodyData3Type
  >;

export type GetAllPromptsResponseFormatPromptsResponse200ApplicationJSONResponseBodyJSONSchema =
  {
    name: string;
    strict: boolean;
    schema: { [k: string]: any };
  };

export type GetAllPromptsResponseFormatPromptsResponse200ApplicationJSONResponseBody1 =
  {
    type:
      GetAllPromptsResponseFormatPromptsResponse200ApplicationJSONResponseBodyData3Type;
    jsonSchema:
      GetAllPromptsResponseFormatPromptsResponse200ApplicationJSONResponseBodyJSONSchema;
  };

/**
 * An object specifying the format that the model must output.
 *
 * @remarks
 *
 *  Setting to `{ "type": "json_schema", "json_schema": {...} }` enables Structured Outputs which ensures the model will match your supplied JSON schema
 *
 *  Setting to `{ "type": "json_object" }` enables JSON mode, which ensures the message the model generates is valid JSON.
 *
 * Important: when using JSON mode, you must also instruct the model to produce JSON yourself via a system or user message. Without this, the model may generate an unending stream of whitespace until the generation reaches the token limit, resulting in a long-running and seemingly "stuck" request. Also note that the message content may be partially cut off if finish_reason="length", which indicates the generation exceeded max_tokens or the conversation exceeded the max context length.
 */
export type GetAllPromptsDataPromptsResponse200ApplicationJSONResponseFormat =
  | GetAllPromptsResponseFormatPromptsResponse200ApplicationJSONResponseBody2
  | GetAllPromptsResponseFormatPromptsResponse200ApplicationJSONResponseBody1;

/**
 * The version of photoReal to use. Must be v1 or v2. Only available for `leonardoai` provider
 */
export const GetAllPromptsDataPromptsResponse200ApplicationJSONPhotoRealVersion =
  {
    V1: "v1",
    V2: "v2",
  } as const;
/**
 * The version of photoReal to use. Must be v1 or v2. Only available for `leonardoai` provider
 */
export type GetAllPromptsDataPromptsResponse200ApplicationJSONPhotoRealVersion =
  ClosedEnum<
    typeof GetAllPromptsDataPromptsResponse200ApplicationJSONPhotoRealVersion
  >;

/**
 * The format to return the embeddings
 */
export const GetAllPromptsDataPromptsResponse200ApplicationJSONEncodingFormat =
  {
    Float: "float",
    Base64: "base64",
  } as const;
/**
 * The format to return the embeddings
 */
export type GetAllPromptsDataPromptsResponse200ApplicationJSONEncodingFormat =
  ClosedEnum<
    typeof GetAllPromptsDataPromptsResponse200ApplicationJSONEncodingFormat
  >;

/**
 * Model Parameters: Not all parameters apply to every model
 */
export type GetAllPromptsDataPromptsResponse200ApplicationJSONModelParameters =
  {
    /**
     * Only supported on `chat` and `completion` models.
     */
    temperature?: number | undefined;
    /**
     * Only supported on `chat` and `completion` models.
     */
    maxTokens?: number | undefined;
    /**
     * Only supported on `chat` and `completion` models.
     */
    topK?: number | undefined;
    /**
     * Only supported on `chat` and `completion` models.
     */
    topP?: number | undefined;
    /**
     * Only supported on `chat` and `completion` models.
     */
    frequencyPenalty?: number | undefined;
    /**
     * Only supported on `chat` and `completion` models.
     */
    presencePenalty?: number | undefined;
    /**
     * Only supported on `image` models.
     */
    numImages?: number | undefined;
    /**
     * Best effort deterministic seed for the model. Currently only OpenAI models support these
     */
    seed?: number | undefined;
    /**
     * Only supported on `image` models.
     */
    format?:
      | GetAllPromptsDataPromptsResponse200ApplicationJSONResponseBodyFormat
      | undefined;
    /**
     * Only supported on `image` models.
     */
    dimensions?: string | undefined;
    /**
     * Only supported on `image` models.
     */
    quality?:
      | GetAllPromptsDataPromptsResponse200ApplicationJSONQuality
      | undefined;
    /**
     * Only supported on `image` models.
     */
    style?: string | undefined;
    /**
     * An object specifying the format that the model must output.
     *
     * @remarks
     *
     *  Setting to `{ "type": "json_schema", "json_schema": {...} }` enables Structured Outputs which ensures the model will match your supplied JSON schema
     *
     *  Setting to `{ "type": "json_object" }` enables JSON mode, which ensures the message the model generates is valid JSON.
     *
     * Important: when using JSON mode, you must also instruct the model to produce JSON yourself via a system or user message. Without this, the model may generate an unending stream of whitespace until the generation reaches the token limit, resulting in a long-running and seemingly "stuck" request. Also note that the message content may be partially cut off if finish_reason="length", which indicates the generation exceeded max_tokens or the conversation exceeded the max context length.
     */
    responseFormat?:
      | GetAllPromptsResponseFormatPromptsResponse200ApplicationJSONResponseBody2
      | GetAllPromptsResponseFormatPromptsResponse200ApplicationJSONResponseBody1
      | null
      | undefined;
    /**
     * The version of photoReal to use. Must be v1 or v2. Only available for `leonardoai` provider
     */
    photoRealVersion?:
      | GetAllPromptsDataPromptsResponse200ApplicationJSONPhotoRealVersion
      | undefined;
    /**
     * The format to return the embeddings
     */
    encodingFormat?:
      | GetAllPromptsDataPromptsResponse200ApplicationJSONEncodingFormat
      | undefined;
  };

export const GetAllPromptsDataPromptsResponse200ApplicationJSONProvider = {
  Cohere: "cohere",
  Openai: "openai",
  Anthropic: "anthropic",
  Huggingface: "huggingface",
  Replicate: "replicate",
  Google: "google",
  GoogleAi: "google-ai",
  Azure: "azure",
  Aws: "aws",
  Anyscale: "anyscale",
  Perplexity: "perplexity",
  Groq: "groq",
  Fal: "fal",
  Leonardoai: "leonardoai",
  Nvidia: "nvidia",
  Jina: "jina",
  Togetherai: "togetherai",
  Elevenlabs: "elevenlabs",
} as const;
export type GetAllPromptsDataPromptsResponse200ApplicationJSONProvider =
  ClosedEnum<typeof GetAllPromptsDataPromptsResponse200ApplicationJSONProvider>;

/**
 * The role of the prompt message
 */
export const GetAllPromptsDataPromptsResponse200ApplicationJSONRole = {
  System: "system",
  Assistant: "assistant",
  User: "user",
  Exception: "exception",
  Tool: "tool",
  Prompt: "prompt",
  Correction: "correction",
  ExpectedOutput: "expected_output",
} as const;
/**
 * The role of the prompt message
 */
export type GetAllPromptsDataPromptsResponse200ApplicationJSONRole = ClosedEnum<
  typeof GetAllPromptsDataPromptsResponse200ApplicationJSONRole
>;

export const GetAllPrompts2PromptsResponse200ApplicationJSONResponseBodyData3VersionsType =
  {
    ImageUrl: "image_url",
  } as const;
export type GetAllPrompts2PromptsResponse200ApplicationJSONResponseBodyData3VersionsType =
  ClosedEnum<
    typeof GetAllPrompts2PromptsResponse200ApplicationJSONResponseBodyData3VersionsType
  >;

export type GetAllPrompts2PromptsResponse200ApplicationJSONResponseBodyImageUrl =
  {
    /**
     * The orq.ai id of the image
     */
    id?: string | undefined;
    /**
     * Either a URL of the image or the base64 encoded data URI.
     */
    url: string;
    /**
     * Specifies the detail level of the image. Currently only supported with OpenAI models
     */
    detail?: string | undefined;
  };

/**
 * The image part of the prompt message. Only supported with vision models.
 */
export type GetAllPrompts2PromptsResponse200ApplicationJSONResponseBody2 = {
  type:
    GetAllPrompts2PromptsResponse200ApplicationJSONResponseBodyData3VersionsType;
  imageUrl: GetAllPrompts2PromptsResponse200ApplicationJSONResponseBodyImageUrl;
};

export const GetAllPrompts2PromptsResponse200ApplicationJSONResponseBodyData3Type =
  {
    Text: "text",
  } as const;
export type GetAllPrompts2PromptsResponse200ApplicationJSONResponseBodyData3Type =
  ClosedEnum<
    typeof GetAllPrompts2PromptsResponse200ApplicationJSONResponseBodyData3Type
  >;

/**
 * Text content part of a prompt message
 */
export type GetAllPrompts2PromptsResponse200ApplicationJSONResponseBody1 = {
  type: GetAllPrompts2PromptsResponse200ApplicationJSONResponseBodyData3Type;
  text: string;
};

export type GetAllPromptsContentPromptsResponse200ApplicationJSONResponseBody2 =
  | GetAllPrompts2PromptsResponse200ApplicationJSONResponseBody1
  | GetAllPrompts2PromptsResponse200ApplicationJSONResponseBody2;

/**
 * The contents of the user message. Either the text content of the message or an array of content parts with a defined type, each can be of type `text` or `image_url` when passing in images. You can pass multiple images by adding multiple `image_url` content parts.
 */
export type GetAllPromptsDataPromptsResponse200ApplicationJSONContent =
  | string
  | Array<
    | GetAllPrompts2PromptsResponse200ApplicationJSONResponseBody1
    | GetAllPrompts2PromptsResponse200ApplicationJSONResponseBody2
  >;

export const GetAllPromptsDataPromptsResponse200ApplicationJSONResponseBody3Type =
  {
    Function: "function",
  } as const;
export type GetAllPromptsDataPromptsResponse200ApplicationJSONResponseBody3Type =
  ClosedEnum<
    typeof GetAllPromptsDataPromptsResponse200ApplicationJSONResponseBody3Type
  >;

export type GetAllPromptsDataPromptsResponse200ApplicationJSONResponseBodyFunction =
  {
    name: string;
    /**
     * JSON string arguments for the functions
     */
    arguments: string;
  };

export type GetAllPromptsDataPromptsResponse200ApplicationJSONToolCalls = {
  id?: string | undefined;
  index?: number | undefined;
  type: GetAllPromptsDataPromptsResponse200ApplicationJSONResponseBody3Type;
  function:
    GetAllPromptsDataPromptsResponse200ApplicationJSONResponseBodyFunction;
};

export type GetAllPromptsDataPromptsResponse200ApplicationJSONMessages = {
  /**
   * The role of the prompt message
   */
  role: GetAllPromptsDataPromptsResponse200ApplicationJSONRole;
  /**
   * The contents of the user message. Either the text content of the message or an array of content parts with a defined type, each can be of type `text` or `image_url` when passing in images. You can pass multiple images by adding multiple `image_url` content parts.
   */
  content:
    | string
    | Array<
      | GetAllPrompts2PromptsResponse200ApplicationJSONResponseBody1
      | GetAllPrompts2PromptsResponse200ApplicationJSONResponseBody2
    >;
  toolCalls?:
    | Array<GetAllPromptsDataPromptsResponse200ApplicationJSONToolCalls>
    | undefined;
};

export type GetAllPromptsDataPromptsResponse200ApplicationJSONPromptConfig = {
  stream?: boolean | undefined;
  model?: string | undefined;
  /**
   * The id of the resource
   */
  modelDbId?: string | undefined;
  /**
   * The type of the model
   */
  modelType?:
    | GetAllPromptsDataPromptsResponse200ApplicationJSONModelType
    | undefined;
  /**
   * Model Parameters: Not all parameters apply to every model
   */
  modelParameters?:
    | GetAllPromptsDataPromptsResponse200ApplicationJSONModelParameters
    | undefined;
  provider?:
    | GetAllPromptsDataPromptsResponse200ApplicationJSONProvider
    | undefined;
  /**
   * The id of the resource
   */
  integrationId?: string | null | undefined;
  version?: string | undefined;
  messages: Array<GetAllPromptsDataPromptsResponse200ApplicationJSONMessages>;
};

export type GetAllPromptsDataPromptsResponse200ApplicationJSONMetadata = {
  useCases?: Array<string> | undefined;
  language?: string | undefined;
};

/**
 * Prompt version model returned from the API
 */
export type GetAllPromptsDataPromptsVersions = {
  id: string;
  createdById: string;
  displayName: string;
  updatedById: string;
  description?: string | null | undefined;
  promptConfig: GetAllPromptsDataPromptsResponse200ApplicationJSONPromptConfig;
  metadata: GetAllPromptsDataPromptsResponse200ApplicationJSONMetadata;
  commit: string;
  timestamp: string;
};

export const GetAllPromptsDataPromptsType = {
  Template: "template",
} as const;
export type GetAllPromptsDataPromptsType = ClosedEnum<
  typeof GetAllPromptsDataPromptsType
>;

/**
 * Prompt template model returned from the API
 */
export type GetAllPromptsData3 = {
  id: string;
  owner: string | GetAllPromptsOwnerPromptsResponse2;
  domainId: string;
  createdById: string;
  displayName: string;
  updatedById: string;
  description?: string | null | undefined;
  promptConfig: GetAllPromptsDataPromptsPromptConfig;
  metadata: GetAllPromptsDataPromptsMetadata;
  /**
   * The date and time the resource was created
   */
  created?: Date | undefined;
  /**
   * The date and time the resource was last updated
   */
  updated?: Date | undefined;
  versions: Array<GetAllPromptsDataPromptsVersions>;
  type: GetAllPromptsDataPromptsType;
};

export const GetAllPromptsOwnerPrompts2 = {
  Vendor: "vendor",
} as const;
export type GetAllPromptsOwnerPrompts2 = ClosedEnum<
  typeof GetAllPromptsOwnerPrompts2
>;

export type GetAllPromptsDataOwner = string | GetAllPromptsOwnerPrompts2;

/**
 * The type of the model
 */
export const GetAllPromptsDataModelType = {
  Chat: "chat",
  Completion: "completion",
  Embedding: "embedding",
  Vision: "vision",
  Image: "image",
  Tts: "tts",
  Stt: "stt",
  Rerank: "rerank",
  Moderations: "moderations",
} as const;
/**
 * The type of the model
 */
export type GetAllPromptsDataModelType = ClosedEnum<
  typeof GetAllPromptsDataModelType
>;

/**
 * Only supported on `image` models.
 */
export const GetAllPromptsDataFormat = {
  Url: "url",
  B64Json: "b64_json",
  Text: "text",
  JsonObject: "json_object",
} as const;
/**
 * Only supported on `image` models.
 */
export type GetAllPromptsDataFormat = ClosedEnum<
  typeof GetAllPromptsDataFormat
>;

/**
 * Only supported on `image` models.
 */
export const GetAllPromptsDataQuality = {
  Standard: "standard",
  Hd: "hd",
} as const;
/**
 * Only supported on `image` models.
 */
export type GetAllPromptsDataQuality = ClosedEnum<
  typeof GetAllPromptsDataQuality
>;

export const GetAllPromptsResponseFormatPromptsResponse200Type = {
  JsonObject: "json_object",
} as const;
export type GetAllPromptsResponseFormatPromptsResponse200Type = ClosedEnum<
  typeof GetAllPromptsResponseFormatPromptsResponse200Type
>;

export type GetAllPromptsResponseFormatPrompts2 = {
  type: GetAllPromptsResponseFormatPromptsResponse200Type;
};

export const GetAllPromptsResponseFormatPromptsResponseType = {
  JsonSchema: "json_schema",
} as const;
export type GetAllPromptsResponseFormatPromptsResponseType = ClosedEnum<
  typeof GetAllPromptsResponseFormatPromptsResponseType
>;

export type GetAllPromptsResponseFormatPromptsJsonSchema = {
  name: string;
  strict: boolean;
  schema: { [k: string]: any };
};

export type GetAllPromptsResponseFormatPrompts1 = {
  type: GetAllPromptsResponseFormatPromptsResponseType;
  jsonSchema: GetAllPromptsResponseFormatPromptsJsonSchema;
};

/**
 * An object specifying the format that the model must output.
 *
 * @remarks
 *
 *  Setting to `{ "type": "json_schema", "json_schema": {...} }` enables Structured Outputs which ensures the model will match your supplied JSON schema
 *
 *  Setting to `{ "type": "json_object" }` enables JSON mode, which ensures the message the model generates is valid JSON.
 *
 * Important: when using JSON mode, you must also instruct the model to produce JSON yourself via a system or user message. Without this, the model may generate an unending stream of whitespace until the generation reaches the token limit, resulting in a long-running and seemingly "stuck" request. Also note that the message content may be partially cut off if finish_reason="length", which indicates the generation exceeded max_tokens or the conversation exceeded the max context length.
 */
export type GetAllPromptsDataResponseFormat =
  | GetAllPromptsResponseFormatPrompts2
  | GetAllPromptsResponseFormatPrompts1;

/**
 * The version of photoReal to use. Must be v1 or v2. Only available for `leonardoai` provider
 */
export const GetAllPromptsDataPhotoRealVersion = {
  V1: "v1",
  V2: "v2",
} as const;
/**
 * The version of photoReal to use. Must be v1 or v2. Only available for `leonardoai` provider
 */
export type GetAllPromptsDataPhotoRealVersion = ClosedEnum<
  typeof GetAllPromptsDataPhotoRealVersion
>;

/**
 * The format to return the embeddings
 */
export const GetAllPromptsDataEncodingFormat = {
  Float: "float",
  Base64: "base64",
} as const;
/**
 * The format to return the embeddings
 */
export type GetAllPromptsDataEncodingFormat = ClosedEnum<
  typeof GetAllPromptsDataEncodingFormat
>;

/**
 * Model Parameters: Not all parameters apply to every model
 */
export type GetAllPromptsDataModelParameters = {
  /**
   * Only supported on `chat` and `completion` models.
   */
  temperature?: number | undefined;
  /**
   * Only supported on `chat` and `completion` models.
   */
  maxTokens?: number | undefined;
  /**
   * Only supported on `chat` and `completion` models.
   */
  topK?: number | undefined;
  /**
   * Only supported on `chat` and `completion` models.
   */
  topP?: number | undefined;
  /**
   * Only supported on `chat` and `completion` models.
   */
  frequencyPenalty?: number | undefined;
  /**
   * Only supported on `chat` and `completion` models.
   */
  presencePenalty?: number | undefined;
  /**
   * Only supported on `image` models.
   */
  numImages?: number | undefined;
  /**
   * Best effort deterministic seed for the model. Currently only OpenAI models support these
   */
  seed?: number | undefined;
  /**
   * Only supported on `image` models.
   */
  format?: GetAllPromptsDataFormat | undefined;
  /**
   * Only supported on `image` models.
   */
  dimensions?: string | undefined;
  /**
   * Only supported on `image` models.
   */
  quality?: GetAllPromptsDataQuality | undefined;
  /**
   * Only supported on `image` models.
   */
  style?: string | undefined;
  /**
   * An object specifying the format that the model must output.
   *
   * @remarks
   *
   *  Setting to `{ "type": "json_schema", "json_schema": {...} }` enables Structured Outputs which ensures the model will match your supplied JSON schema
   *
   *  Setting to `{ "type": "json_object" }` enables JSON mode, which ensures the message the model generates is valid JSON.
   *
   * Important: when using JSON mode, you must also instruct the model to produce JSON yourself via a system or user message. Without this, the model may generate an unending stream of whitespace until the generation reaches the token limit, resulting in a long-running and seemingly "stuck" request. Also note that the message content may be partially cut off if finish_reason="length", which indicates the generation exceeded max_tokens or the conversation exceeded the max context length.
   */
  responseFormat?:
    | GetAllPromptsResponseFormatPrompts2
    | GetAllPromptsResponseFormatPrompts1
    | null
    | undefined;
  /**
   * The version of photoReal to use. Must be v1 or v2. Only available for `leonardoai` provider
   */
  photoRealVersion?: GetAllPromptsDataPhotoRealVersion | undefined;
  /**
   * The format to return the embeddings
   */
  encodingFormat?: GetAllPromptsDataEncodingFormat | undefined;
};

export const GetAllPromptsDataProvider = {
  Cohere: "cohere",
  Openai: "openai",
  Anthropic: "anthropic",
  Huggingface: "huggingface",
  Replicate: "replicate",
  Google: "google",
  GoogleAi: "google-ai",
  Azure: "azure",
  Aws: "aws",
  Anyscale: "anyscale",
  Perplexity: "perplexity",
  Groq: "groq",
  Fal: "fal",
  Leonardoai: "leonardoai",
  Nvidia: "nvidia",
  Jina: "jina",
  Togetherai: "togetherai",
  Elevenlabs: "elevenlabs",
} as const;
export type GetAllPromptsDataProvider = ClosedEnum<
  typeof GetAllPromptsDataProvider
>;

/**
 * The role of the prompt message
 */
export const GetAllPromptsDataRole = {
  System: "system",
  Assistant: "assistant",
  User: "user",
  Exception: "exception",
  Tool: "tool",
  Prompt: "prompt",
  Correction: "correction",
  ExpectedOutput: "expected_output",
} as const;
/**
 * The role of the prompt message
 */
export type GetAllPromptsDataRole = ClosedEnum<typeof GetAllPromptsDataRole>;

export const GetAllPrompts2PromptsResponse200Type = {
  ImageUrl: "image_url",
} as const;
export type GetAllPrompts2PromptsResponse200Type = ClosedEnum<
  typeof GetAllPrompts2PromptsResponse200Type
>;

export type GetAllPrompts2PromptsImageUrl = {
  /**
   * The orq.ai id of the image
   */
  id?: string | undefined;
  /**
   * Either a URL of the image or the base64 encoded data URI.
   */
  url: string;
  /**
   * Specifies the detail level of the image. Currently only supported with OpenAI models
   */
  detail?: string | undefined;
};

/**
 * The image part of the prompt message. Only supported with vision models.
 */
export type GetAllPrompts2Prompts2 = {
  type: GetAllPrompts2PromptsResponse200Type;
  imageUrl: GetAllPrompts2PromptsImageUrl;
};

export const GetAllPrompts2PromptsResponseType = {
  Text: "text",
} as const;
export type GetAllPrompts2PromptsResponseType = ClosedEnum<
  typeof GetAllPrompts2PromptsResponseType
>;

/**
 * Text content part of a prompt message
 */
export type GetAllPrompts2Prompts1 = {
  type: GetAllPrompts2PromptsResponseType;
  text: string;
};

export type GetAllPromptsContentPrompts2 =
  | GetAllPrompts2Prompts1
  | GetAllPrompts2Prompts2;

/**
 * The contents of the user message. Either the text content of the message or an array of content parts with a defined type, each can be of type `text` or `image_url` when passing in images. You can pass multiple images by adding multiple `image_url` content parts.
 */
export type GetAllPromptsDataContent =
  | string
  | Array<GetAllPrompts2Prompts1 | GetAllPrompts2Prompts2>;

export const GetAllPromptsDataPromptsResponse200ApplicationJSONType = {
  Function: "function",
} as const;
export type GetAllPromptsDataPromptsResponse200ApplicationJSONType = ClosedEnum<
  typeof GetAllPromptsDataPromptsResponse200ApplicationJSONType
>;

export type GetAllPromptsDataPromptsFunction = {
  name: string;
  /**
   * JSON string arguments for the functions
   */
  arguments: string;
};

export type GetAllPromptsDataToolCalls = {
  id?: string | undefined;
  index?: number | undefined;
  type: GetAllPromptsDataPromptsResponse200ApplicationJSONType;
  function: GetAllPromptsDataPromptsFunction;
};

export type GetAllPromptsDataMessages = {
  /**
   * The role of the prompt message
   */
  role: GetAllPromptsDataRole;
  /**
   * The contents of the user message. Either the text content of the message or an array of content parts with a defined type, each can be of type `text` or `image_url` when passing in images. You can pass multiple images by adding multiple `image_url` content parts.
   */
  content: string | Array<GetAllPrompts2Prompts1 | GetAllPrompts2Prompts2>;
  toolCalls?: Array<GetAllPromptsDataToolCalls> | undefined;
};

export type GetAllPromptsDataPromptConfig = {
  stream?: boolean | undefined;
  model?: string | undefined;
  /**
   * The id of the resource
   */
  modelDbId?: string | undefined;
  /**
   * The type of the model
   */
  modelType?: GetAllPromptsDataModelType | undefined;
  /**
   * Model Parameters: Not all parameters apply to every model
   */
  modelParameters?: GetAllPromptsDataModelParameters | undefined;
  provider?: GetAllPromptsDataProvider | undefined;
  /**
   * The id of the resource
   */
  integrationId?: string | null | undefined;
  version?: string | undefined;
  messages: Array<GetAllPromptsDataMessages>;
};

export type GetAllPromptsDataMetadata = {
  useCases?: Array<string> | undefined;
  language?: string | undefined;
};

/**
 * The type of the model
 */
export const GetAllPromptsDataPromptsResponseModelType = {
  Chat: "chat",
  Completion: "completion",
  Embedding: "embedding",
  Vision: "vision",
  Image: "image",
  Tts: "tts",
  Stt: "stt",
  Rerank: "rerank",
  Moderations: "moderations",
} as const;
/**
 * The type of the model
 */
export type GetAllPromptsDataPromptsResponseModelType = ClosedEnum<
  typeof GetAllPromptsDataPromptsResponseModelType
>;

/**
 * Only supported on `image` models.
 */
export const GetAllPromptsDataPromptsResponse200Format = {
  Url: "url",
  B64Json: "b64_json",
  Text: "text",
  JsonObject: "json_object",
} as const;
/**
 * Only supported on `image` models.
 */
export type GetAllPromptsDataPromptsResponse200Format = ClosedEnum<
  typeof GetAllPromptsDataPromptsResponse200Format
>;

/**
 * Only supported on `image` models.
 */
export const GetAllPromptsDataPromptsResponseQuality = {
  Standard: "standard",
  Hd: "hd",
} as const;
/**
 * Only supported on `image` models.
 */
export type GetAllPromptsDataPromptsResponseQuality = ClosedEnum<
  typeof GetAllPromptsDataPromptsResponseQuality
>;

export const GetAllPromptsResponseFormatPromptsResponse200ApplicationJSONResponseBodyData2Type =
  {
    JsonObject: "json_object",
  } as const;
export type GetAllPromptsResponseFormatPromptsResponse200ApplicationJSONResponseBodyData2Type =
  ClosedEnum<
    typeof GetAllPromptsResponseFormatPromptsResponse200ApplicationJSONResponseBodyData2Type
  >;

export type GetAllPromptsResponseFormatPromptsResponse2002 = {
  type:
    GetAllPromptsResponseFormatPromptsResponse200ApplicationJSONResponseBodyData2Type;
};

export const GetAllPromptsResponseFormatPromptsResponse200ApplicationJSONResponseBodyDataType =
  {
    JsonSchema: "json_schema",
  } as const;
export type GetAllPromptsResponseFormatPromptsResponse200ApplicationJSONResponseBodyDataType =
  ClosedEnum<
    typeof GetAllPromptsResponseFormatPromptsResponse200ApplicationJSONResponseBodyDataType
  >;

export type GetAllPromptsResponseFormatPromptsResponse200JsonSchema = {
  name: string;
  strict: boolean;
  schema: { [k: string]: any };
};

export type GetAllPromptsResponseFormatPromptsResponse2001 = {
  type:
    GetAllPromptsResponseFormatPromptsResponse200ApplicationJSONResponseBodyDataType;
  jsonSchema: GetAllPromptsResponseFormatPromptsResponse200JsonSchema;
};

/**
 * An object specifying the format that the model must output.
 *
 * @remarks
 *
 *  Setting to `{ "type": "json_schema", "json_schema": {...} }` enables Structured Outputs which ensures the model will match your supplied JSON schema
 *
 *  Setting to `{ "type": "json_object" }` enables JSON mode, which ensures the message the model generates is valid JSON.
 *
 * Important: when using JSON mode, you must also instruct the model to produce JSON yourself via a system or user message. Without this, the model may generate an unending stream of whitespace until the generation reaches the token limit, resulting in a long-running and seemingly "stuck" request. Also note that the message content may be partially cut off if finish_reason="length", which indicates the generation exceeded max_tokens or the conversation exceeded the max context length.
 */
export type GetAllPromptsDataPromptsResponseResponseFormat =
  | GetAllPromptsResponseFormatPromptsResponse2002
  | GetAllPromptsResponseFormatPromptsResponse2001;

/**
 * The version of photoReal to use. Must be v1 or v2. Only available for `leonardoai` provider
 */
export const GetAllPromptsDataPromptsResponsePhotoRealVersion = {
  V1: "v1",
  V2: "v2",
} as const;
/**
 * The version of photoReal to use. Must be v1 or v2. Only available for `leonardoai` provider
 */
export type GetAllPromptsDataPromptsResponsePhotoRealVersion = ClosedEnum<
  typeof GetAllPromptsDataPromptsResponsePhotoRealVersion
>;

/**
 * The format to return the embeddings
 */
export const GetAllPromptsDataPromptsResponseEncodingFormat = {
  Float: "float",
  Base64: "base64",
} as const;
/**
 * The format to return the embeddings
 */
export type GetAllPromptsDataPromptsResponseEncodingFormat = ClosedEnum<
  typeof GetAllPromptsDataPromptsResponseEncodingFormat
>;

/**
 * Model Parameters: Not all parameters apply to every model
 */
export type GetAllPromptsDataPromptsResponseModelParameters = {
  /**
   * Only supported on `chat` and `completion` models.
   */
  temperature?: number | undefined;
  /**
   * Only supported on `chat` and `completion` models.
   */
  maxTokens?: number | undefined;
  /**
   * Only supported on `chat` and `completion` models.
   */
  topK?: number | undefined;
  /**
   * Only supported on `chat` and `completion` models.
   */
  topP?: number | undefined;
  /**
   * Only supported on `chat` and `completion` models.
   */
  frequencyPenalty?: number | undefined;
  /**
   * Only supported on `chat` and `completion` models.
   */
  presencePenalty?: number | undefined;
  /**
   * Only supported on `image` models.
   */
  numImages?: number | undefined;
  /**
   * Best effort deterministic seed for the model. Currently only OpenAI models support these
   */
  seed?: number | undefined;
  /**
   * Only supported on `image` models.
   */
  format?: GetAllPromptsDataPromptsResponse200Format | undefined;
  /**
   * Only supported on `image` models.
   */
  dimensions?: string | undefined;
  /**
   * Only supported on `image` models.
   */
  quality?: GetAllPromptsDataPromptsResponseQuality | undefined;
  /**
   * Only supported on `image` models.
   */
  style?: string | undefined;
  /**
   * An object specifying the format that the model must output.
   *
   * @remarks
   *
   *  Setting to `{ "type": "json_schema", "json_schema": {...} }` enables Structured Outputs which ensures the model will match your supplied JSON schema
   *
   *  Setting to `{ "type": "json_object" }` enables JSON mode, which ensures the message the model generates is valid JSON.
   *
   * Important: when using JSON mode, you must also instruct the model to produce JSON yourself via a system or user message. Without this, the model may generate an unending stream of whitespace until the generation reaches the token limit, resulting in a long-running and seemingly "stuck" request. Also note that the message content may be partially cut off if finish_reason="length", which indicates the generation exceeded max_tokens or the conversation exceeded the max context length.
   */
  responseFormat?:
    | GetAllPromptsResponseFormatPromptsResponse2002
    | GetAllPromptsResponseFormatPromptsResponse2001
    | null
    | undefined;
  /**
   * The version of photoReal to use. Must be v1 or v2. Only available for `leonardoai` provider
   */
  photoRealVersion?:
    | GetAllPromptsDataPromptsResponsePhotoRealVersion
    | undefined;
  /**
   * The format to return the embeddings
   */
  encodingFormat?: GetAllPromptsDataPromptsResponseEncodingFormat | undefined;
};

export const GetAllPromptsDataPromptsResponseProvider = {
  Cohere: "cohere",
  Openai: "openai",
  Anthropic: "anthropic",
  Huggingface: "huggingface",
  Replicate: "replicate",
  Google: "google",
  GoogleAi: "google-ai",
  Azure: "azure",
  Aws: "aws",
  Anyscale: "anyscale",
  Perplexity: "perplexity",
  Groq: "groq",
  Fal: "fal",
  Leonardoai: "leonardoai",
  Nvidia: "nvidia",
  Jina: "jina",
  Togetherai: "togetherai",
  Elevenlabs: "elevenlabs",
} as const;
export type GetAllPromptsDataPromptsResponseProvider = ClosedEnum<
  typeof GetAllPromptsDataPromptsResponseProvider
>;

/**
 * The role of the prompt message
 */
export const GetAllPromptsDataPromptsResponseRole = {
  System: "system",
  Assistant: "assistant",
  User: "user",
  Exception: "exception",
  Tool: "tool",
  Prompt: "prompt",
  Correction: "correction",
  ExpectedOutput: "expected_output",
} as const;
/**
 * The role of the prompt message
 */
export type GetAllPromptsDataPromptsResponseRole = ClosedEnum<
  typeof GetAllPromptsDataPromptsResponseRole
>;

export const GetAllPrompts2PromptsResponse200ApplicationJSONResponseBodyData2Type =
  {
    ImageUrl: "image_url",
  } as const;
export type GetAllPrompts2PromptsResponse200ApplicationJSONResponseBodyData2Type =
  ClosedEnum<
    typeof GetAllPrompts2PromptsResponse200ApplicationJSONResponseBodyData2Type
  >;

export type GetAllPrompts2PromptsResponse200ImageUrl = {
  /**
   * The orq.ai id of the image
   */
  id?: string | undefined;
  /**
   * Either a URL of the image or the base64 encoded data URI.
   */
  url: string;
  /**
   * Specifies the detail level of the image. Currently only supported with OpenAI models
   */
  detail?: string | undefined;
};

/**
 * The image part of the prompt message. Only supported with vision models.
 */
export type GetAllPrompts2PromptsResponse2002 = {
  type: GetAllPrompts2PromptsResponse200ApplicationJSONResponseBodyData2Type;
  imageUrl: GetAllPrompts2PromptsResponse200ImageUrl;
};

export const GetAllPrompts2PromptsResponse200ApplicationJSONResponseBodyDataType =
  {
    Text: "text",
  } as const;
export type GetAllPrompts2PromptsResponse200ApplicationJSONResponseBodyDataType =
  ClosedEnum<
    typeof GetAllPrompts2PromptsResponse200ApplicationJSONResponseBodyDataType
  >;

/**
 * Text content part of a prompt message
 */
export type GetAllPrompts2PromptsResponse2001 = {
  type: GetAllPrompts2PromptsResponse200ApplicationJSONResponseBodyDataType;
  text: string;
};

export type GetAllPromptsContentPromptsResponse2002 =
  | GetAllPrompts2PromptsResponse2001
  | GetAllPrompts2PromptsResponse2002;

/**
 * The contents of the user message. Either the text content of the message or an array of content parts with a defined type, each can be of type `text` or `image_url` when passing in images. You can pass multiple images by adding multiple `image_url` content parts.
 */
export type GetAllPromptsDataPromptsResponseContent =
  | string
  | Array<
    GetAllPrompts2PromptsResponse2001 | GetAllPrompts2PromptsResponse2002
  >;

export const GetAllPromptsDataPromptsResponse200ApplicationJSONResponseBodyType =
  {
    Function: "function",
  } as const;
export type GetAllPromptsDataPromptsResponse200ApplicationJSONResponseBodyType =
  ClosedEnum<
    typeof GetAllPromptsDataPromptsResponse200ApplicationJSONResponseBodyType
  >;

export type GetAllPromptsDataPromptsResponse200Function = {
  name: string;
  /**
   * JSON string arguments for the functions
   */
  arguments: string;
};

export type GetAllPromptsDataPromptsResponseToolCalls = {
  id?: string | undefined;
  index?: number | undefined;
  type: GetAllPromptsDataPromptsResponse200ApplicationJSONResponseBodyType;
  function: GetAllPromptsDataPromptsResponse200Function;
};

export type GetAllPromptsDataPromptsResponseMessages = {
  /**
   * The role of the prompt message
   */
  role: GetAllPromptsDataPromptsResponseRole;
  /**
   * The contents of the user message. Either the text content of the message or an array of content parts with a defined type, each can be of type `text` or `image_url` when passing in images. You can pass multiple images by adding multiple `image_url` content parts.
   */
  content:
    | string
    | Array<
      GetAllPrompts2PromptsResponse2001 | GetAllPrompts2PromptsResponse2002
    >;
  toolCalls?: Array<GetAllPromptsDataPromptsResponseToolCalls> | undefined;
};

export type GetAllPromptsDataPromptsResponsePromptConfig = {
  stream?: boolean | undefined;
  model?: string | undefined;
  /**
   * The id of the resource
   */
  modelDbId?: string | undefined;
  /**
   * The type of the model
   */
  modelType?: GetAllPromptsDataPromptsResponseModelType | undefined;
  /**
   * Model Parameters: Not all parameters apply to every model
   */
  modelParameters?: GetAllPromptsDataPromptsResponseModelParameters | undefined;
  provider?: GetAllPromptsDataPromptsResponseProvider | undefined;
  /**
   * The id of the resource
   */
  integrationId?: string | null | undefined;
  version?: string | undefined;
  messages: Array<GetAllPromptsDataPromptsResponseMessages>;
};

export type GetAllPromptsDataPromptsResponseMetadata = {
  useCases?: Array<string> | undefined;
  language?: string | undefined;
};

/**
 * Prompt version model returned from the API
 */
export type GetAllPromptsDataVersions = {
  id: string;
  createdById: string;
  displayName: string;
  updatedById: string;
  description?: string | null | undefined;
  promptConfig: GetAllPromptsDataPromptsResponsePromptConfig;
  metadata: GetAllPromptsDataPromptsResponseMetadata;
  commit: string;
  timestamp: string;
};

export const GetAllPromptsDataType = {
  Snippet: "snippet",
} as const;
export type GetAllPromptsDataType = ClosedEnum<typeof GetAllPromptsDataType>;

/**
 * Prompt snippet model returned from the API
 */
export type GetAllPromptsData2 = {
  id: string;
  owner: string | GetAllPromptsOwnerPrompts2;
  domainId: string;
  createdById: string;
  displayName: string;
  updatedById: string;
  description?: string | null | undefined;
  promptConfig: GetAllPromptsDataPromptConfig;
  metadata: GetAllPromptsDataMetadata;
  /**
   * The date and time the resource was created
   */
  created?: Date | undefined;
  /**
   * The date and time the resource was last updated
   */
  updated?: Date | undefined;
  versions: Array<GetAllPromptsDataVersions>;
  key: string;
  type: GetAllPromptsDataType;
};

export const GetAllPromptsOwner2 = {
  Vendor: "vendor",
} as const;
export type GetAllPromptsOwner2 = ClosedEnum<typeof GetAllPromptsOwner2>;

export type DataOwner = string | GetAllPromptsOwner2;

/**
 * The type of the model
 */
export const DataModelType = {
  Chat: "chat",
  Completion: "completion",
  Embedding: "embedding",
  Vision: "vision",
  Image: "image",
  Tts: "tts",
  Stt: "stt",
  Rerank: "rerank",
  Moderations: "moderations",
} as const;
/**
 * The type of the model
 */
export type DataModelType = ClosedEnum<typeof DataModelType>;

/**
 * Only supported on `image` models.
 */
export const DataFormat = {
  Url: "url",
  B64Json: "b64_json",
  Text: "text",
  JsonObject: "json_object",
} as const;
/**
 * Only supported on `image` models.
 */
export type DataFormat = ClosedEnum<typeof DataFormat>;

/**
 * Only supported on `image` models.
 */
export const DataQuality = {
  Standard: "standard",
  Hd: "hd",
} as const;
/**
 * Only supported on `image` models.
 */
export type DataQuality = ClosedEnum<typeof DataQuality>;

export const GetAllPromptsResponseFormatPromptsType = {
  JsonObject: "json_object",
} as const;
export type GetAllPromptsResponseFormatPromptsType = ClosedEnum<
  typeof GetAllPromptsResponseFormatPromptsType
>;

export type GetAllPromptsResponseFormat2 = {
  type: GetAllPromptsResponseFormatPromptsType;
};

export const GetAllPromptsResponseFormatType = {
  JsonSchema: "json_schema",
} as const;
export type GetAllPromptsResponseFormatType = ClosedEnum<
  typeof GetAllPromptsResponseFormatType
>;

export type GetAllPromptsResponseFormatJsonSchema = {
  name: string;
  strict: boolean;
  schema: { [k: string]: any };
};

export type GetAllPromptsResponseFormat1 = {
  type: GetAllPromptsResponseFormatType;
  jsonSchema: GetAllPromptsResponseFormatJsonSchema;
};

/**
 * An object specifying the format that the model must output.
 *
 * @remarks
 *
 *  Setting to `{ "type": "json_schema", "json_schema": {...} }` enables Structured Outputs which ensures the model will match your supplied JSON schema
 *
 *  Setting to `{ "type": "json_object" }` enables JSON mode, which ensures the message the model generates is valid JSON.
 *
 * Important: when using JSON mode, you must also instruct the model to produce JSON yourself via a system or user message. Without this, the model may generate an unending stream of whitespace until the generation reaches the token limit, resulting in a long-running and seemingly "stuck" request. Also note that the message content may be partially cut off if finish_reason="length", which indicates the generation exceeded max_tokens or the conversation exceeded the max context length.
 */
export type DataResponseFormat =
  | GetAllPromptsResponseFormat2
  | GetAllPromptsResponseFormat1;

/**
 * The version of photoReal to use. Must be v1 or v2. Only available for `leonardoai` provider
 */
export const DataPhotoRealVersion = {
  V1: "v1",
  V2: "v2",
} as const;
/**
 * The version of photoReal to use. Must be v1 or v2. Only available for `leonardoai` provider
 */
export type DataPhotoRealVersion = ClosedEnum<typeof DataPhotoRealVersion>;

/**
 * The format to return the embeddings
 */
export const DataEncodingFormat = {
  Float: "float",
  Base64: "base64",
} as const;
/**
 * The format to return the embeddings
 */
export type DataEncodingFormat = ClosedEnum<typeof DataEncodingFormat>;

/**
 * Model Parameters: Not all parameters apply to every model
 */
export type DataModelParameters = {
  /**
   * Only supported on `chat` and `completion` models.
   */
  temperature?: number | undefined;
  /**
   * Only supported on `chat` and `completion` models.
   */
  maxTokens?: number | undefined;
  /**
   * Only supported on `chat` and `completion` models.
   */
  topK?: number | undefined;
  /**
   * Only supported on `chat` and `completion` models.
   */
  topP?: number | undefined;
  /**
   * Only supported on `chat` and `completion` models.
   */
  frequencyPenalty?: number | undefined;
  /**
   * Only supported on `chat` and `completion` models.
   */
  presencePenalty?: number | undefined;
  /**
   * Only supported on `image` models.
   */
  numImages?: number | undefined;
  /**
   * Best effort deterministic seed for the model. Currently only OpenAI models support these
   */
  seed?: number | undefined;
  /**
   * Only supported on `image` models.
   */
  format?: DataFormat | undefined;
  /**
   * Only supported on `image` models.
   */
  dimensions?: string | undefined;
  /**
   * Only supported on `image` models.
   */
  quality?: DataQuality | undefined;
  /**
   * Only supported on `image` models.
   */
  style?: string | undefined;
  /**
   * An object specifying the format that the model must output.
   *
   * @remarks
   *
   *  Setting to `{ "type": "json_schema", "json_schema": {...} }` enables Structured Outputs which ensures the model will match your supplied JSON schema
   *
   *  Setting to `{ "type": "json_object" }` enables JSON mode, which ensures the message the model generates is valid JSON.
   *
   * Important: when using JSON mode, you must also instruct the model to produce JSON yourself via a system or user message. Without this, the model may generate an unending stream of whitespace until the generation reaches the token limit, resulting in a long-running and seemingly "stuck" request. Also note that the message content may be partially cut off if finish_reason="length", which indicates the generation exceeded max_tokens or the conversation exceeded the max context length.
   */
  responseFormat?:
    | GetAllPromptsResponseFormat2
    | GetAllPromptsResponseFormat1
    | null
    | undefined;
  /**
   * The version of photoReal to use. Must be v1 or v2. Only available for `leonardoai` provider
   */
  photoRealVersion?: DataPhotoRealVersion | undefined;
  /**
   * The format to return the embeddings
   */
  encodingFormat?: DataEncodingFormat | undefined;
};

export const DataProvider = {
  Cohere: "cohere",
  Openai: "openai",
  Anthropic: "anthropic",
  Huggingface: "huggingface",
  Replicate: "replicate",
  Google: "google",
  GoogleAi: "google-ai",
  Azure: "azure",
  Aws: "aws",
  Anyscale: "anyscale",
  Perplexity: "perplexity",
  Groq: "groq",
  Fal: "fal",
  Leonardoai: "leonardoai",
  Nvidia: "nvidia",
  Jina: "jina",
  Togetherai: "togetherai",
  Elevenlabs: "elevenlabs",
} as const;
export type DataProvider = ClosedEnum<typeof DataProvider>;

/**
 * The role of the prompt message
 */
export const DataRole = {
  System: "system",
  Assistant: "assistant",
  User: "user",
  Exception: "exception",
  Tool: "tool",
  Prompt: "prompt",
  Correction: "correction",
  ExpectedOutput: "expected_output",
} as const;
/**
 * The role of the prompt message
 */
export type DataRole = ClosedEnum<typeof DataRole>;

export const GetAllPrompts2PromptsType = {
  ImageUrl: "image_url",
} as const;
export type GetAllPrompts2PromptsType = ClosedEnum<
  typeof GetAllPrompts2PromptsType
>;

export type GetAllPrompts2ImageUrl = {
  /**
   * The orq.ai id of the image
   */
  id?: string | undefined;
  /**
   * Either a URL of the image or the base64 encoded data URI.
   */
  url: string;
  /**
   * Specifies the detail level of the image. Currently only supported with OpenAI models
   */
  detail?: string | undefined;
};

/**
 * The image part of the prompt message. Only supported with vision models.
 */
export type GetAllPrompts22 = {
  type: GetAllPrompts2PromptsType;
  imageUrl: GetAllPrompts2ImageUrl;
};

export const GetAllPrompts2Type = {
  Text: "text",
} as const;
export type GetAllPrompts2Type = ClosedEnum<typeof GetAllPrompts2Type>;

/**
 * Text content part of a prompt message
 */
export type GetAllPrompts21 = {
  type: GetAllPrompts2Type;
  text: string;
};

export type GetAllPromptsContent2 = GetAllPrompts21 | GetAllPrompts22;

/**
 * The contents of the user message. Either the text content of the message or an array of content parts with a defined type, each can be of type `text` or `image_url` when passing in images. You can pass multiple images by adding multiple `image_url` content parts.
 */
export type DataContent = string | Array<GetAllPrompts21 | GetAllPrompts22>;

export const GetAllPromptsDataPromptsResponseType = {
  Function: "function",
} as const;
export type GetAllPromptsDataPromptsResponseType = ClosedEnum<
  typeof GetAllPromptsDataPromptsResponseType
>;

export type GetAllPromptsDataFunction = {
  name: string;
  /**
   * JSON string arguments for the functions
   */
  arguments: string;
};

export type DataToolCalls = {
  id?: string | undefined;
  index?: number | undefined;
  type: GetAllPromptsDataPromptsResponseType;
  function: GetAllPromptsDataFunction;
};

export type DataMessages = {
  /**
   * The role of the prompt message
   */
  role: DataRole;
  /**
   * The contents of the user message. Either the text content of the message or an array of content parts with a defined type, each can be of type `text` or `image_url` when passing in images. You can pass multiple images by adding multiple `image_url` content parts.
   */
  content: string | Array<GetAllPrompts21 | GetAllPrompts22>;
  toolCalls?: Array<DataToolCalls> | undefined;
};

export type DataPromptConfig = {
  stream?: boolean | undefined;
  model?: string | undefined;
  /**
   * The id of the resource
   */
  modelDbId?: string | undefined;
  /**
   * The type of the model
   */
  modelType?: DataModelType | undefined;
  /**
   * Model Parameters: Not all parameters apply to every model
   */
  modelParameters?: DataModelParameters | undefined;
  provider?: DataProvider | undefined;
  /**
   * The id of the resource
   */
  integrationId?: string | null | undefined;
  version?: string | undefined;
  messages: Array<DataMessages>;
};

export type DataMetadata = {
  useCases?: Array<string> | undefined;
  language?: string | undefined;
};

/**
 * The type of the model
 */
export const GetAllPromptsDataPromptsResponse200ModelType = {
  Chat: "chat",
  Completion: "completion",
  Embedding: "embedding",
  Vision: "vision",
  Image: "image",
  Tts: "tts",
  Stt: "stt",
  Rerank: "rerank",
  Moderations: "moderations",
} as const;
/**
 * The type of the model
 */
export type GetAllPromptsDataPromptsResponse200ModelType = ClosedEnum<
  typeof GetAllPromptsDataPromptsResponse200ModelType
>;

/**
 * Only supported on `image` models.
 */
export const GetAllPromptsDataPromptsResponse200ApplicationJSONFormat = {
  Url: "url",
  B64Json: "b64_json",
  Text: "text",
  JsonObject: "json_object",
} as const;
/**
 * Only supported on `image` models.
 */
export type GetAllPromptsDataPromptsResponse200ApplicationJSONFormat =
  ClosedEnum<typeof GetAllPromptsDataPromptsResponse200ApplicationJSONFormat>;

/**
 * Only supported on `image` models.
 */
export const GetAllPromptsDataPromptsResponse200Quality = {
  Standard: "standard",
  Hd: "hd",
} as const;
/**
 * Only supported on `image` models.
 */
export type GetAllPromptsDataPromptsResponse200Quality = ClosedEnum<
  typeof GetAllPromptsDataPromptsResponse200Quality
>;

export const GetAllPromptsResponseFormatPromptsResponse200ApplicationJSONResponseBodyData1VersionsType =
  {
    JsonObject: "json_object",
  } as const;
export type GetAllPromptsResponseFormatPromptsResponse200ApplicationJSONResponseBodyData1VersionsType =
  ClosedEnum<
    typeof GetAllPromptsResponseFormatPromptsResponse200ApplicationJSONResponseBodyData1VersionsType
  >;

export type GetAllPromptsResponseFormatPromptsResponse200ApplicationJson2 = {
  type:
    GetAllPromptsResponseFormatPromptsResponse200ApplicationJSONResponseBodyData1VersionsType;
};

export const GetAllPromptsResponseFormatPromptsResponse200ApplicationJSONResponseBodyData1Type =
  {
    JsonSchema: "json_schema",
  } as const;
export type GetAllPromptsResponseFormatPromptsResponse200ApplicationJSONResponseBodyData1Type =
  ClosedEnum<
    typeof GetAllPromptsResponseFormatPromptsResponse200ApplicationJSONResponseBodyData1Type
  >;

export type GetAllPromptsResponseFormatPromptsResponse200ApplicationJSONJSONSchema =
  {
    name: string;
    strict: boolean;
    schema: { [k: string]: any };
  };

export type GetAllPromptsResponseFormatPromptsResponse200ApplicationJson1 = {
  type:
    GetAllPromptsResponseFormatPromptsResponse200ApplicationJSONResponseBodyData1Type;
  jsonSchema:
    GetAllPromptsResponseFormatPromptsResponse200ApplicationJSONJSONSchema;
};

/**
 * An object specifying the format that the model must output.
 *
 * @remarks
 *
 *  Setting to `{ "type": "json_schema", "json_schema": {...} }` enables Structured Outputs which ensures the model will match your supplied JSON schema
 *
 *  Setting to `{ "type": "json_object" }` enables JSON mode, which ensures the message the model generates is valid JSON.
 *
 * Important: when using JSON mode, you must also instruct the model to produce JSON yourself via a system or user message. Without this, the model may generate an unending stream of whitespace until the generation reaches the token limit, resulting in a long-running and seemingly "stuck" request. Also note that the message content may be partially cut off if finish_reason="length", which indicates the generation exceeded max_tokens or the conversation exceeded the max context length.
 */
export type GetAllPromptsDataPromptsResponse200ResponseFormat =
  | GetAllPromptsResponseFormatPromptsResponse200ApplicationJson2
  | GetAllPromptsResponseFormatPromptsResponse200ApplicationJson1;

/**
 * The version of photoReal to use. Must be v1 or v2. Only available for `leonardoai` provider
 */
export const GetAllPromptsDataPromptsResponse200PhotoRealVersion = {
  V1: "v1",
  V2: "v2",
} as const;
/**
 * The version of photoReal to use. Must be v1 or v2. Only available for `leonardoai` provider
 */
export type GetAllPromptsDataPromptsResponse200PhotoRealVersion = ClosedEnum<
  typeof GetAllPromptsDataPromptsResponse200PhotoRealVersion
>;

/**
 * The format to return the embeddings
 */
export const GetAllPromptsDataPromptsResponse200EncodingFormat = {
  Float: "float",
  Base64: "base64",
} as const;
/**
 * The format to return the embeddings
 */
export type GetAllPromptsDataPromptsResponse200EncodingFormat = ClosedEnum<
  typeof GetAllPromptsDataPromptsResponse200EncodingFormat
>;

/**
 * Model Parameters: Not all parameters apply to every model
 */
export type GetAllPromptsDataPromptsResponse200ModelParameters = {
  /**
   * Only supported on `chat` and `completion` models.
   */
  temperature?: number | undefined;
  /**
   * Only supported on `chat` and `completion` models.
   */
  maxTokens?: number | undefined;
  /**
   * Only supported on `chat` and `completion` models.
   */
  topK?: number | undefined;
  /**
   * Only supported on `chat` and `completion` models.
   */
  topP?: number | undefined;
  /**
   * Only supported on `chat` and `completion` models.
   */
  frequencyPenalty?: number | undefined;
  /**
   * Only supported on `chat` and `completion` models.
   */
  presencePenalty?: number | undefined;
  /**
   * Only supported on `image` models.
   */
  numImages?: number | undefined;
  /**
   * Best effort deterministic seed for the model. Currently only OpenAI models support these
   */
  seed?: number | undefined;
  /**
   * Only supported on `image` models.
   */
  format?: GetAllPromptsDataPromptsResponse200ApplicationJSONFormat | undefined;
  /**
   * Only supported on `image` models.
   */
  dimensions?: string | undefined;
  /**
   * Only supported on `image` models.
   */
  quality?: GetAllPromptsDataPromptsResponse200Quality | undefined;
  /**
   * Only supported on `image` models.
   */
  style?: string | undefined;
  /**
   * An object specifying the format that the model must output.
   *
   * @remarks
   *
   *  Setting to `{ "type": "json_schema", "json_schema": {...} }` enables Structured Outputs which ensures the model will match your supplied JSON schema
   *
   *  Setting to `{ "type": "json_object" }` enables JSON mode, which ensures the message the model generates is valid JSON.
   *
   * Important: when using JSON mode, you must also instruct the model to produce JSON yourself via a system or user message. Without this, the model may generate an unending stream of whitespace until the generation reaches the token limit, resulting in a long-running and seemingly "stuck" request. Also note that the message content may be partially cut off if finish_reason="length", which indicates the generation exceeded max_tokens or the conversation exceeded the max context length.
   */
  responseFormat?:
    | GetAllPromptsResponseFormatPromptsResponse200ApplicationJson2
    | GetAllPromptsResponseFormatPromptsResponse200ApplicationJson1
    | null
    | undefined;
  /**
   * The version of photoReal to use. Must be v1 or v2. Only available for `leonardoai` provider
   */
  photoRealVersion?:
    | GetAllPromptsDataPromptsResponse200PhotoRealVersion
    | undefined;
  /**
   * The format to return the embeddings
   */
  encodingFormat?:
    | GetAllPromptsDataPromptsResponse200EncodingFormat
    | undefined;
};

export const GetAllPromptsDataPromptsResponse200Provider = {
  Cohere: "cohere",
  Openai: "openai",
  Anthropic: "anthropic",
  Huggingface: "huggingface",
  Replicate: "replicate",
  Google: "google",
  GoogleAi: "google-ai",
  Azure: "azure",
  Aws: "aws",
  Anyscale: "anyscale",
  Perplexity: "perplexity",
  Groq: "groq",
  Fal: "fal",
  Leonardoai: "leonardoai",
  Nvidia: "nvidia",
  Jina: "jina",
  Togetherai: "togetherai",
  Elevenlabs: "elevenlabs",
} as const;
export type GetAllPromptsDataPromptsResponse200Provider = ClosedEnum<
  typeof GetAllPromptsDataPromptsResponse200Provider
>;

/**
 * The role of the prompt message
 */
export const GetAllPromptsDataPromptsResponse200Role = {
  System: "system",
  Assistant: "assistant",
  User: "user",
  Exception: "exception",
  Tool: "tool",
  Prompt: "prompt",
  Correction: "correction",
  ExpectedOutput: "expected_output",
} as const;
/**
 * The role of the prompt message
 */
export type GetAllPromptsDataPromptsResponse200Role = ClosedEnum<
  typeof GetAllPromptsDataPromptsResponse200Role
>;

export const GetAllPrompts2PromptsResponse200ApplicationJSONResponseBodyData1VersionsType =
  {
    ImageUrl: "image_url",
  } as const;
export type GetAllPrompts2PromptsResponse200ApplicationJSONResponseBodyData1VersionsType =
  ClosedEnum<
    typeof GetAllPrompts2PromptsResponse200ApplicationJSONResponseBodyData1VersionsType
  >;

export type GetAllPrompts2PromptsResponse200ApplicationJSONImageUrl = {
  /**
   * The orq.ai id of the image
   */
  id?: string | undefined;
  /**
   * Either a URL of the image or the base64 encoded data URI.
   */
  url: string;
  /**
   * Specifies the detail level of the image. Currently only supported with OpenAI models
   */
  detail?: string | undefined;
};

/**
 * The image part of the prompt message. Only supported with vision models.
 */
export type GetAllPrompts2PromptsResponse200ApplicationJson2 = {
  type:
    GetAllPrompts2PromptsResponse200ApplicationJSONResponseBodyData1VersionsType;
  imageUrl: GetAllPrompts2PromptsResponse200ApplicationJSONImageUrl;
};

export const GetAllPrompts2PromptsResponse200ApplicationJSONResponseBodyData1Type =
  {
    Text: "text",
  } as const;
export type GetAllPrompts2PromptsResponse200ApplicationJSONResponseBodyData1Type =
  ClosedEnum<
    typeof GetAllPrompts2PromptsResponse200ApplicationJSONResponseBodyData1Type
  >;

/**
 * Text content part of a prompt message
 */
export type GetAllPrompts2PromptsResponse200ApplicationJson1 = {
  type: GetAllPrompts2PromptsResponse200ApplicationJSONResponseBodyData1Type;
  text: string;
};

export type GetAllPromptsContentPromptsResponse200ApplicationJson2 =
  | GetAllPrompts2PromptsResponse200ApplicationJson1
  | GetAllPrompts2PromptsResponse200ApplicationJson2;

/**
 * The contents of the user message. Either the text content of the message or an array of content parts with a defined type, each can be of type `text` or `image_url` when passing in images. You can pass multiple images by adding multiple `image_url` content parts.
 */
export type GetAllPromptsDataPromptsResponse200Content =
  | string
  | Array<
    | GetAllPrompts2PromptsResponse200ApplicationJson1
    | GetAllPrompts2PromptsResponse200ApplicationJson2
  >;

export const GetAllPromptsDataPromptsResponse200ApplicationJSONResponseBody1Type =
  {
    Function: "function",
  } as const;
export type GetAllPromptsDataPromptsResponse200ApplicationJSONResponseBody1Type =
  ClosedEnum<
    typeof GetAllPromptsDataPromptsResponse200ApplicationJSONResponseBody1Type
  >;

export type GetAllPromptsDataPromptsResponse200ApplicationJSONFunction = {
  name: string;
  /**
   * JSON string arguments for the functions
   */
  arguments: string;
};

export type GetAllPromptsDataPromptsResponse200ToolCalls = {
  id?: string | undefined;
  index?: number | undefined;
  type: GetAllPromptsDataPromptsResponse200ApplicationJSONResponseBody1Type;
  function: GetAllPromptsDataPromptsResponse200ApplicationJSONFunction;
};

export type GetAllPromptsDataPromptsResponse200Messages = {
  /**
   * The role of the prompt message
   */
  role: GetAllPromptsDataPromptsResponse200Role;
  /**
   * The contents of the user message. Either the text content of the message or an array of content parts with a defined type, each can be of type `text` or `image_url` when passing in images. You can pass multiple images by adding multiple `image_url` content parts.
   */
  content:
    | string
    | Array<
      | GetAllPrompts2PromptsResponse200ApplicationJson1
      | GetAllPrompts2PromptsResponse200ApplicationJson2
    >;
  toolCalls?: Array<GetAllPromptsDataPromptsResponse200ToolCalls> | undefined;
};

export type GetAllPromptsDataPromptsResponse200PromptConfig = {
  stream?: boolean | undefined;
  model?: string | undefined;
  /**
   * The id of the resource
   */
  modelDbId?: string | undefined;
  /**
   * The type of the model
   */
  modelType?: GetAllPromptsDataPromptsResponse200ModelType | undefined;
  /**
   * Model Parameters: Not all parameters apply to every model
   */
  modelParameters?:
    | GetAllPromptsDataPromptsResponse200ModelParameters
    | undefined;
  provider?: GetAllPromptsDataPromptsResponse200Provider | undefined;
  /**
   * The id of the resource
   */
  integrationId?: string | null | undefined;
  version?: string | undefined;
  messages: Array<GetAllPromptsDataPromptsResponse200Messages>;
};

export type GetAllPromptsDataPromptsResponse200Metadata = {
  useCases?: Array<string> | undefined;
  language?: string | undefined;
};

/**
 * Prompt version model returned from the API
 */
export type DataVersions = {
  id: string;
  createdById: string;
  displayName: string;
  updatedById: string;
  description?: string | null | undefined;
  promptConfig: GetAllPromptsDataPromptsResponse200PromptConfig;
  metadata: GetAllPromptsDataPromptsResponse200Metadata;
  commit: string;
  timestamp: string;
};

export const DataType = {
  Prompt: "prompt",
} as const;
export type DataType = ClosedEnum<typeof DataType>;

/**
 * Prompt model returned from the API
 */
export type GetAllPromptsData1 = {
  id: string;
  owner: string | GetAllPromptsOwner2;
  domainId: string;
  createdById: string;
  displayName: string;
  updatedById: string;
  description?: string | null | undefined;
  promptConfig: DataPromptConfig;
  metadata: DataMetadata;
  /**
   * The date and time the resource was created
   */
  created?: Date | undefined;
  /**
   * The date and time the resource was last updated
   */
  updated?: Date | undefined;
  versions: Array<DataVersions>;
  type: DataType;
};

export type GetAllPromptsData =
  | GetAllPromptsData1
  | GetAllPromptsData3
  | GetAllPromptsData2;

/**
 * Prompts retrieved.
 */
export type GetAllPromptsResponseBody = {
  object: GetAllPromptsObject;
  data: Array<GetAllPromptsData1 | GetAllPromptsData3 | GetAllPromptsData2>;
  hasMore: boolean;
};

/** @internal */
export const GetAllPromptsPagination$inboundSchema: z.ZodType<
  GetAllPromptsPagination,
  z.ZodTypeDef,
  unknown
> = z.object({
  page: z.number().optional(),
  limit: z.number().default(50),
  lastId: z.nullable(z.string()).optional(),
  firstId: z.nullable(z.string()).optional(),
});

/** @internal */
export type GetAllPromptsPagination$Outbound = {
  page?: number | undefined;
  limit: number;
  lastId?: string | null | undefined;
  firstId?: string | null | undefined;
};

/** @internal */
export const GetAllPromptsPagination$outboundSchema: z.ZodType<
  GetAllPromptsPagination$Outbound,
  z.ZodTypeDef,
  GetAllPromptsPagination
> = z.object({
  page: z.number().optional(),
  limit: z.number().default(50),
  lastId: z.nullable(z.string()).optional(),
  firstId: z.nullable(z.string()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPromptsPagination$ {
  /** @deprecated use `GetAllPromptsPagination$inboundSchema` instead. */
  export const inboundSchema = GetAllPromptsPagination$inboundSchema;
  /** @deprecated use `GetAllPromptsPagination$outboundSchema` instead. */
  export const outboundSchema = GetAllPromptsPagination$outboundSchema;
  /** @deprecated use `GetAllPromptsPagination$Outbound` instead. */
  export type Outbound = GetAllPromptsPagination$Outbound;
}

export function getAllPromptsPaginationToJSON(
  getAllPromptsPagination: GetAllPromptsPagination,
): string {
  return JSON.stringify(
    GetAllPromptsPagination$outboundSchema.parse(getAllPromptsPagination),
  );
}

export function getAllPromptsPaginationFromJSON(
  jsonString: string,
): SafeParseResult<GetAllPromptsPagination, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetAllPromptsPagination$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetAllPromptsPagination' from JSON`,
  );
}

/** @internal */
export const GetAllPromptsDirection$inboundSchema: z.ZodNativeEnum<
  typeof GetAllPromptsDirection
> = z.nativeEnum(GetAllPromptsDirection);

/** @internal */
export const GetAllPromptsDirection$outboundSchema: z.ZodNativeEnum<
  typeof GetAllPromptsDirection
> = GetAllPromptsDirection$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPromptsDirection$ {
  /** @deprecated use `GetAllPromptsDirection$inboundSchema` instead. */
  export const inboundSchema = GetAllPromptsDirection$inboundSchema;
  /** @deprecated use `GetAllPromptsDirection$outboundSchema` instead. */
  export const outboundSchema = GetAllPromptsDirection$outboundSchema;
}

/** @internal */
export const GetAllPromptsSortingProps$inboundSchema: z.ZodType<
  GetAllPromptsSortingProps,
  z.ZodTypeDef,
  unknown
> = z.object({
  key: z.string(),
  direction: GetAllPromptsDirection$inboundSchema.optional(),
});

/** @internal */
export type GetAllPromptsSortingProps$Outbound = {
  key: string;
  direction?: string | undefined;
};

/** @internal */
export const GetAllPromptsSortingProps$outboundSchema: z.ZodType<
  GetAllPromptsSortingProps$Outbound,
  z.ZodTypeDef,
  GetAllPromptsSortingProps
> = z.object({
  key: z.string(),
  direction: GetAllPromptsDirection$outboundSchema.optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPromptsSortingProps$ {
  /** @deprecated use `GetAllPromptsSortingProps$inboundSchema` instead. */
  export const inboundSchema = GetAllPromptsSortingProps$inboundSchema;
  /** @deprecated use `GetAllPromptsSortingProps$outboundSchema` instead. */
  export const outboundSchema = GetAllPromptsSortingProps$outboundSchema;
  /** @deprecated use `GetAllPromptsSortingProps$Outbound` instead. */
  export type Outbound = GetAllPromptsSortingProps$Outbound;
}

export function getAllPromptsSortingPropsToJSON(
  getAllPromptsSortingProps: GetAllPromptsSortingProps,
): string {
  return JSON.stringify(
    GetAllPromptsSortingProps$outboundSchema.parse(getAllPromptsSortingProps),
  );
}

export function getAllPromptsSortingPropsFromJSON(
  jsonString: string,
): SafeParseResult<GetAllPromptsSortingProps, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetAllPromptsSortingProps$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetAllPromptsSortingProps' from JSON`,
  );
}

/** @internal */
export const GetAllPromptsOperator$inboundSchema: z.ZodNativeEnum<
  typeof GetAllPromptsOperator
> = z.nativeEnum(GetAllPromptsOperator);

/** @internal */
export const GetAllPromptsOperator$outboundSchema: z.ZodNativeEnum<
  typeof GetAllPromptsOperator
> = GetAllPromptsOperator$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPromptsOperator$ {
  /** @deprecated use `GetAllPromptsOperator$inboundSchema` instead. */
  export const inboundSchema = GetAllPromptsOperator$inboundSchema;
  /** @deprecated use `GetAllPromptsOperator$outboundSchema` instead. */
  export const outboundSchema = GetAllPromptsOperator$outboundSchema;
}

/** @internal */
export const GetAllPromptsFiltersPromptsRequestRequestBodyQuery8Operator$inboundSchema:
  z.ZodNativeEnum<
    typeof GetAllPromptsFiltersPromptsRequestRequestBodyQuery8Operator
  > = z.nativeEnum(GetAllPromptsFiltersPromptsRequestRequestBodyQuery8Operator);

/** @internal */
export const GetAllPromptsFiltersPromptsRequestRequestBodyQuery8Operator$outboundSchema:
  z.ZodNativeEnum<
    typeof GetAllPromptsFiltersPromptsRequestRequestBodyQuery8Operator
  > = GetAllPromptsFiltersPromptsRequestRequestBodyQuery8Operator$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPromptsFiltersPromptsRequestRequestBodyQuery8Operator$ {
  /** @deprecated use `GetAllPromptsFiltersPromptsRequestRequestBodyQuery8Operator$inboundSchema` instead. */
  export const inboundSchema =
    GetAllPromptsFiltersPromptsRequestRequestBodyQuery8Operator$inboundSchema;
  /** @deprecated use `GetAllPromptsFiltersPromptsRequestRequestBodyQuery8Operator$outboundSchema` instead. */
  export const outboundSchema =
    GetAllPromptsFiltersPromptsRequestRequestBodyQuery8Operator$outboundSchema;
}

/** @internal */
export const GetAllPromptsFiltersPromptsRequestRequestBodyQuery8Type$inboundSchema:
  z.ZodNativeEnum<
    typeof GetAllPromptsFiltersPromptsRequestRequestBodyQuery8Type
  > = z.nativeEnum(GetAllPromptsFiltersPromptsRequestRequestBodyQuery8Type);

/** @internal */
export const GetAllPromptsFiltersPromptsRequestRequestBodyQuery8Type$outboundSchema:
  z.ZodNativeEnum<
    typeof GetAllPromptsFiltersPromptsRequestRequestBodyQuery8Type
  > = GetAllPromptsFiltersPromptsRequestRequestBodyQuery8Type$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPromptsFiltersPromptsRequestRequestBodyQuery8Type$ {
  /** @deprecated use `GetAllPromptsFiltersPromptsRequestRequestBodyQuery8Type$inboundSchema` instead. */
  export const inboundSchema =
    GetAllPromptsFiltersPromptsRequestRequestBodyQuery8Type$inboundSchema;
  /** @deprecated use `GetAllPromptsFiltersPromptsRequestRequestBodyQuery8Type$outboundSchema` instead. */
  export const outboundSchema =
    GetAllPromptsFiltersPromptsRequestRequestBodyQuery8Type$outboundSchema;
}

/** @internal */
export const GetAllPromptsHideOperatorsPromptsRequestRequestBodyQueryFilters85$inboundSchema:
  z.ZodNativeEnum<
    typeof GetAllPromptsHideOperatorsPromptsRequestRequestBodyQueryFilters85
  > = z.nativeEnum(
    GetAllPromptsHideOperatorsPromptsRequestRequestBodyQueryFilters85,
  );

/** @internal */
export const GetAllPromptsHideOperatorsPromptsRequestRequestBodyQueryFilters85$outboundSchema:
  z.ZodNativeEnum<
    typeof GetAllPromptsHideOperatorsPromptsRequestRequestBodyQueryFilters85
  > =
    GetAllPromptsHideOperatorsPromptsRequestRequestBodyQueryFilters85$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPromptsHideOperatorsPromptsRequestRequestBodyQueryFilters85$ {
  /** @deprecated use `GetAllPromptsHideOperatorsPromptsRequestRequestBodyQueryFilters85$inboundSchema` instead. */
  export const inboundSchema =
    GetAllPromptsHideOperatorsPromptsRequestRequestBodyQueryFilters85$inboundSchema;
  /** @deprecated use `GetAllPromptsHideOperatorsPromptsRequestRequestBodyQueryFilters85$outboundSchema` instead. */
  export const outboundSchema =
    GetAllPromptsHideOperatorsPromptsRequestRequestBodyQueryFilters85$outboundSchema;
}

/** @internal */
export const GetAllPromptsHideOperatorsPromptsRequestRequestBodyQueryFilters84$inboundSchema:
  z.ZodNativeEnum<
    typeof GetAllPromptsHideOperatorsPromptsRequestRequestBodyQueryFilters84
  > = z.nativeEnum(
    GetAllPromptsHideOperatorsPromptsRequestRequestBodyQueryFilters84,
  );

/** @internal */
export const GetAllPromptsHideOperatorsPromptsRequestRequestBodyQueryFilters84$outboundSchema:
  z.ZodNativeEnum<
    typeof GetAllPromptsHideOperatorsPromptsRequestRequestBodyQueryFilters84
  > =
    GetAllPromptsHideOperatorsPromptsRequestRequestBodyQueryFilters84$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPromptsHideOperatorsPromptsRequestRequestBodyQueryFilters84$ {
  /** @deprecated use `GetAllPromptsHideOperatorsPromptsRequestRequestBodyQueryFilters84$inboundSchema` instead. */
  export const inboundSchema =
    GetAllPromptsHideOperatorsPromptsRequestRequestBodyQueryFilters84$inboundSchema;
  /** @deprecated use `GetAllPromptsHideOperatorsPromptsRequestRequestBodyQueryFilters84$outboundSchema` instead. */
  export const outboundSchema =
    GetAllPromptsHideOperatorsPromptsRequestRequestBodyQueryFilters84$outboundSchema;
}

/** @internal */
export const GetAllPromptsHideOperatorsPromptsRequestRequestBodyQueryFilters83$inboundSchema:
  z.ZodNativeEnum<
    typeof GetAllPromptsHideOperatorsPromptsRequestRequestBodyQueryFilters83
  > = z.nativeEnum(
    GetAllPromptsHideOperatorsPromptsRequestRequestBodyQueryFilters83,
  );

/** @internal */
export const GetAllPromptsHideOperatorsPromptsRequestRequestBodyQueryFilters83$outboundSchema:
  z.ZodNativeEnum<
    typeof GetAllPromptsHideOperatorsPromptsRequestRequestBodyQueryFilters83
  > =
    GetAllPromptsHideOperatorsPromptsRequestRequestBodyQueryFilters83$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPromptsHideOperatorsPromptsRequestRequestBodyQueryFilters83$ {
  /** @deprecated use `GetAllPromptsHideOperatorsPromptsRequestRequestBodyQueryFilters83$inboundSchema` instead. */
  export const inboundSchema =
    GetAllPromptsHideOperatorsPromptsRequestRequestBodyQueryFilters83$inboundSchema;
  /** @deprecated use `GetAllPromptsHideOperatorsPromptsRequestRequestBodyQueryFilters83$outboundSchema` instead. */
  export const outboundSchema =
    GetAllPromptsHideOperatorsPromptsRequestRequestBodyQueryFilters83$outboundSchema;
}

/** @internal */
export const GetAllPromptsHideOperatorsPromptsRequestRequestBodyQueryFilters82$inboundSchema:
  z.ZodNativeEnum<
    typeof GetAllPromptsHideOperatorsPromptsRequestRequestBodyQueryFilters82
  > = z.nativeEnum(
    GetAllPromptsHideOperatorsPromptsRequestRequestBodyQueryFilters82,
  );

/** @internal */
export const GetAllPromptsHideOperatorsPromptsRequestRequestBodyQueryFilters82$outboundSchema:
  z.ZodNativeEnum<
    typeof GetAllPromptsHideOperatorsPromptsRequestRequestBodyQueryFilters82
  > =
    GetAllPromptsHideOperatorsPromptsRequestRequestBodyQueryFilters82$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPromptsHideOperatorsPromptsRequestRequestBodyQueryFilters82$ {
  /** @deprecated use `GetAllPromptsHideOperatorsPromptsRequestRequestBodyQueryFilters82$inboundSchema` instead. */
  export const inboundSchema =
    GetAllPromptsHideOperatorsPromptsRequestRequestBodyQueryFilters82$inboundSchema;
  /** @deprecated use `GetAllPromptsHideOperatorsPromptsRequestRequestBodyQueryFilters82$outboundSchema` instead. */
  export const outboundSchema =
    GetAllPromptsHideOperatorsPromptsRequestRequestBodyQueryFilters82$outboundSchema;
}

/** @internal */
export const GetAllPromptsHideOperatorsPromptsRequestRequestBodyQueryFilters81$inboundSchema:
  z.ZodNativeEnum<
    typeof GetAllPromptsHideOperatorsPromptsRequestRequestBodyQueryFilters81
  > = z.nativeEnum(
    GetAllPromptsHideOperatorsPromptsRequestRequestBodyQueryFilters81,
  );

/** @internal */
export const GetAllPromptsHideOperatorsPromptsRequestRequestBodyQueryFilters81$outboundSchema:
  z.ZodNativeEnum<
    typeof GetAllPromptsHideOperatorsPromptsRequestRequestBodyQueryFilters81
  > =
    GetAllPromptsHideOperatorsPromptsRequestRequestBodyQueryFilters81$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPromptsHideOperatorsPromptsRequestRequestBodyQueryFilters81$ {
  /** @deprecated use `GetAllPromptsHideOperatorsPromptsRequestRequestBodyQueryFilters81$inboundSchema` instead. */
  export const inboundSchema =
    GetAllPromptsHideOperatorsPromptsRequestRequestBodyQueryFilters81$inboundSchema;
  /** @deprecated use `GetAllPromptsHideOperatorsPromptsRequestRequestBodyQueryFilters81$outboundSchema` instead. */
  export const outboundSchema =
    GetAllPromptsHideOperatorsPromptsRequestRequestBodyQueryFilters81$outboundSchema;
}

/** @internal */
export const GetAllPromptsFiltersPromptsRequestRequestBodyQuery8HideOperators$inboundSchema:
  z.ZodType<
    GetAllPromptsFiltersPromptsRequestRequestBodyQuery8HideOperators,
    z.ZodTypeDef,
    unknown
  > = z.union([
    GetAllPromptsHideOperatorsPromptsRequestRequestBodyQueryFilters81$inboundSchema,
    GetAllPromptsHideOperatorsPromptsRequestRequestBodyQueryFilters82$inboundSchema,
    GetAllPromptsHideOperatorsPromptsRequestRequestBodyQueryFilters83$inboundSchema,
    GetAllPromptsHideOperatorsPromptsRequestRequestBodyQueryFilters84$inboundSchema,
    GetAllPromptsHideOperatorsPromptsRequestRequestBodyQueryFilters85$inboundSchema,
  ]);

/** @internal */
export type GetAllPromptsFiltersPromptsRequestRequestBodyQuery8HideOperators$Outbound =
  | string
  | string
  | string
  | string
  | string;

/** @internal */
export const GetAllPromptsFiltersPromptsRequestRequestBodyQuery8HideOperators$outboundSchema:
  z.ZodType<
    GetAllPromptsFiltersPromptsRequestRequestBodyQuery8HideOperators$Outbound,
    z.ZodTypeDef,
    GetAllPromptsFiltersPromptsRequestRequestBodyQuery8HideOperators
  > = z.union([
    GetAllPromptsHideOperatorsPromptsRequestRequestBodyQueryFilters81$outboundSchema,
    GetAllPromptsHideOperatorsPromptsRequestRequestBodyQueryFilters82$outboundSchema,
    GetAllPromptsHideOperatorsPromptsRequestRequestBodyQueryFilters83$outboundSchema,
    GetAllPromptsHideOperatorsPromptsRequestRequestBodyQueryFilters84$outboundSchema,
    GetAllPromptsHideOperatorsPromptsRequestRequestBodyQueryFilters85$outboundSchema,
  ]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPromptsFiltersPromptsRequestRequestBodyQuery8HideOperators$ {
  /** @deprecated use `GetAllPromptsFiltersPromptsRequestRequestBodyQuery8HideOperators$inboundSchema` instead. */
  export const inboundSchema =
    GetAllPromptsFiltersPromptsRequestRequestBodyQuery8HideOperators$inboundSchema;
  /** @deprecated use `GetAllPromptsFiltersPromptsRequestRequestBodyQuery8HideOperators$outboundSchema` instead. */
  export const outboundSchema =
    GetAllPromptsFiltersPromptsRequestRequestBodyQuery8HideOperators$outboundSchema;
  /** @deprecated use `GetAllPromptsFiltersPromptsRequestRequestBodyQuery8HideOperators$Outbound` instead. */
  export type Outbound =
    GetAllPromptsFiltersPromptsRequestRequestBodyQuery8HideOperators$Outbound;
}

export function getAllPromptsFiltersPromptsRequestRequestBodyQuery8HideOperatorsToJSON(
  getAllPromptsFiltersPromptsRequestRequestBodyQuery8HideOperators:
    GetAllPromptsFiltersPromptsRequestRequestBodyQuery8HideOperators,
): string {
  return JSON.stringify(
    GetAllPromptsFiltersPromptsRequestRequestBodyQuery8HideOperators$outboundSchema
      .parse(getAllPromptsFiltersPromptsRequestRequestBodyQuery8HideOperators),
  );
}

export function getAllPromptsFiltersPromptsRequestRequestBodyQuery8HideOperatorsFromJSON(
  jsonString: string,
): SafeParseResult<
  GetAllPromptsFiltersPromptsRequestRequestBodyQuery8HideOperators,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetAllPromptsFiltersPromptsRequestRequestBodyQuery8HideOperators$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'GetAllPromptsFiltersPromptsRequestRequestBodyQuery8HideOperators' from JSON`,
  );
}

/** @internal */
export const Filters8$inboundSchema: z.ZodType<
  Filters8,
  z.ZodTypeDef,
  unknown
> = z.object({
  operator:
    GetAllPromptsFiltersPromptsRequestRequestBodyQuery8Operator$inboundSchema,
  value: z.boolean().default(false),
  type: GetAllPromptsFiltersPromptsRequestRequestBodyQuery8Type$inboundSchema,
  name: z.string(),
  path: z.string(),
  hideOperators: z.array(
    z.union([
      GetAllPromptsHideOperatorsPromptsRequestRequestBodyQueryFilters81$inboundSchema,
      GetAllPromptsHideOperatorsPromptsRequestRequestBodyQueryFilters82$inboundSchema,
      GetAllPromptsHideOperatorsPromptsRequestRequestBodyQueryFilters83$inboundSchema,
      GetAllPromptsHideOperatorsPromptsRequestRequestBodyQueryFilters84$inboundSchema,
      GetAllPromptsHideOperatorsPromptsRequestRequestBodyQueryFilters85$inboundSchema,
    ]),
  ).optional(),
});

/** @internal */
export type Filters8$Outbound = {
  operator: string;
  value: boolean;
  type: string;
  name: string;
  path: string;
  hideOperators?: Array<string | string | string | string | string> | undefined;
};

/** @internal */
export const Filters8$outboundSchema: z.ZodType<
  Filters8$Outbound,
  z.ZodTypeDef,
  Filters8
> = z.object({
  operator:
    GetAllPromptsFiltersPromptsRequestRequestBodyQuery8Operator$outboundSchema,
  value: z.boolean().default(false),
  type: GetAllPromptsFiltersPromptsRequestRequestBodyQuery8Type$outboundSchema,
  name: z.string(),
  path: z.string(),
  hideOperators: z.array(
    z.union([
      GetAllPromptsHideOperatorsPromptsRequestRequestBodyQueryFilters81$outboundSchema,
      GetAllPromptsHideOperatorsPromptsRequestRequestBodyQueryFilters82$outboundSchema,
      GetAllPromptsHideOperatorsPromptsRequestRequestBodyQueryFilters83$outboundSchema,
      GetAllPromptsHideOperatorsPromptsRequestRequestBodyQueryFilters84$outboundSchema,
      GetAllPromptsHideOperatorsPromptsRequestRequestBodyQueryFilters85$outboundSchema,
    ]),
  ).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Filters8$ {
  /** @deprecated use `Filters8$inboundSchema` instead. */
  export const inboundSchema = Filters8$inboundSchema;
  /** @deprecated use `Filters8$outboundSchema` instead. */
  export const outboundSchema = Filters8$outboundSchema;
  /** @deprecated use `Filters8$Outbound` instead. */
  export type Outbound = Filters8$Outbound;
}

export function filters8ToJSON(filters8: Filters8): string {
  return JSON.stringify(Filters8$outboundSchema.parse(filters8));
}

export function filters8FromJSON(
  jsonString: string,
): SafeParseResult<Filters8, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Filters8$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Filters8' from JSON`,
  );
}

/** @internal */
export const GetAllPromptsOperatorPrompts2$inboundSchema: z.ZodNativeEnum<
  typeof GetAllPromptsOperatorPrompts2
> = z.nativeEnum(GetAllPromptsOperatorPrompts2);

/** @internal */
export const GetAllPromptsOperatorPrompts2$outboundSchema: z.ZodNativeEnum<
  typeof GetAllPromptsOperatorPrompts2
> = GetAllPromptsOperatorPrompts2$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPromptsOperatorPrompts2$ {
  /** @deprecated use `GetAllPromptsOperatorPrompts2$inboundSchema` instead. */
  export const inboundSchema = GetAllPromptsOperatorPrompts2$inboundSchema;
  /** @deprecated use `GetAllPromptsOperatorPrompts2$outboundSchema` instead. */
  export const outboundSchema = GetAllPromptsOperatorPrompts2$outboundSchema;
}

/** @internal */
export const GetAllPromptsOperatorPrompts1$inboundSchema: z.ZodNativeEnum<
  typeof GetAllPromptsOperatorPrompts1
> = z.nativeEnum(GetAllPromptsOperatorPrompts1);

/** @internal */
export const GetAllPromptsOperatorPrompts1$outboundSchema: z.ZodNativeEnum<
  typeof GetAllPromptsOperatorPrompts1
> = GetAllPromptsOperatorPrompts1$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPromptsOperatorPrompts1$ {
  /** @deprecated use `GetAllPromptsOperatorPrompts1$inboundSchema` instead. */
  export const inboundSchema = GetAllPromptsOperatorPrompts1$inboundSchema;
  /** @deprecated use `GetAllPromptsOperatorPrompts1$outboundSchema` instead. */
  export const outboundSchema = GetAllPromptsOperatorPrompts1$outboundSchema;
}

/** @internal */
export const GetAllPromptsFiltersPromptsRequestRequestBodyQuery7Operator$inboundSchema:
  z.ZodType<
    GetAllPromptsFiltersPromptsRequestRequestBodyQuery7Operator,
    z.ZodTypeDef,
    unknown
  > = z.union([
    GetAllPromptsOperatorPrompts1$inboundSchema,
    GetAllPromptsOperatorPrompts2$inboundSchema,
  ]);

/** @internal */
export type GetAllPromptsFiltersPromptsRequestRequestBodyQuery7Operator$Outbound =
  | string
  | string;

/** @internal */
export const GetAllPromptsFiltersPromptsRequestRequestBodyQuery7Operator$outboundSchema:
  z.ZodType<
    GetAllPromptsFiltersPromptsRequestRequestBodyQuery7Operator$Outbound,
    z.ZodTypeDef,
    GetAllPromptsFiltersPromptsRequestRequestBodyQuery7Operator
  > = z.union([
    GetAllPromptsOperatorPrompts1$outboundSchema,
    GetAllPromptsOperatorPrompts2$outboundSchema,
  ]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPromptsFiltersPromptsRequestRequestBodyQuery7Operator$ {
  /** @deprecated use `GetAllPromptsFiltersPromptsRequestRequestBodyQuery7Operator$inboundSchema` instead. */
  export const inboundSchema =
    GetAllPromptsFiltersPromptsRequestRequestBodyQuery7Operator$inboundSchema;
  /** @deprecated use `GetAllPromptsFiltersPromptsRequestRequestBodyQuery7Operator$outboundSchema` instead. */
  export const outboundSchema =
    GetAllPromptsFiltersPromptsRequestRequestBodyQuery7Operator$outboundSchema;
  /** @deprecated use `GetAllPromptsFiltersPromptsRequestRequestBodyQuery7Operator$Outbound` instead. */
  export type Outbound =
    GetAllPromptsFiltersPromptsRequestRequestBodyQuery7Operator$Outbound;
}

export function getAllPromptsFiltersPromptsRequestRequestBodyQuery7OperatorToJSON(
  getAllPromptsFiltersPromptsRequestRequestBodyQuery7Operator:
    GetAllPromptsFiltersPromptsRequestRequestBodyQuery7Operator,
): string {
  return JSON.stringify(
    GetAllPromptsFiltersPromptsRequestRequestBodyQuery7Operator$outboundSchema
      .parse(getAllPromptsFiltersPromptsRequestRequestBodyQuery7Operator),
  );
}

export function getAllPromptsFiltersPromptsRequestRequestBodyQuery7OperatorFromJSON(
  jsonString: string,
): SafeParseResult<
  GetAllPromptsFiltersPromptsRequestRequestBodyQuery7Operator,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetAllPromptsFiltersPromptsRequestRequestBodyQuery7Operator$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'GetAllPromptsFiltersPromptsRequestRequestBodyQuery7Operator' from JSON`,
  );
}

/** @internal */
export const GetAllPromptsFiltersPromptsRequestRequestBodyQuery7Type$inboundSchema:
  z.ZodNativeEnum<
    typeof GetAllPromptsFiltersPromptsRequestRequestBodyQuery7Type
  > = z.nativeEnum(GetAllPromptsFiltersPromptsRequestRequestBodyQuery7Type);

/** @internal */
export const GetAllPromptsFiltersPromptsRequestRequestBodyQuery7Type$outboundSchema:
  z.ZodNativeEnum<
    typeof GetAllPromptsFiltersPromptsRequestRequestBodyQuery7Type
  > = GetAllPromptsFiltersPromptsRequestRequestBodyQuery7Type$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPromptsFiltersPromptsRequestRequestBodyQuery7Type$ {
  /** @deprecated use `GetAllPromptsFiltersPromptsRequestRequestBodyQuery7Type$inboundSchema` instead. */
  export const inboundSchema =
    GetAllPromptsFiltersPromptsRequestRequestBodyQuery7Type$inboundSchema;
  /** @deprecated use `GetAllPromptsFiltersPromptsRequestRequestBodyQuery7Type$outboundSchema` instead. */
  export const outboundSchema =
    GetAllPromptsFiltersPromptsRequestRequestBodyQuery7Type$outboundSchema;
}

/** @internal */
export const GetAllPromptsFiltersPromptsRequestRequestBodyQuery7OptionsType$inboundSchema:
  z.ZodNativeEnum<
    typeof GetAllPromptsFiltersPromptsRequestRequestBodyQuery7OptionsType
  > = z.nativeEnum(
    GetAllPromptsFiltersPromptsRequestRequestBodyQuery7OptionsType,
  );

/** @internal */
export const GetAllPromptsFiltersPromptsRequestRequestBodyQuery7OptionsType$outboundSchema:
  z.ZodNativeEnum<
    typeof GetAllPromptsFiltersPromptsRequestRequestBodyQuery7OptionsType
  > =
    GetAllPromptsFiltersPromptsRequestRequestBodyQuery7OptionsType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPromptsFiltersPromptsRequestRequestBodyQuery7OptionsType$ {
  /** @deprecated use `GetAllPromptsFiltersPromptsRequestRequestBodyQuery7OptionsType$inboundSchema` instead. */
  export const inboundSchema =
    GetAllPromptsFiltersPromptsRequestRequestBodyQuery7OptionsType$inboundSchema;
  /** @deprecated use `GetAllPromptsFiltersPromptsRequestRequestBodyQuery7OptionsType$outboundSchema` instead. */
  export const outboundSchema =
    GetAllPromptsFiltersPromptsRequestRequestBodyQuery7OptionsType$outboundSchema;
}

/** @internal */
export const GetAllPromptsHideOperatorsPromptsRequestRequestBodyQueryFilters75$inboundSchema:
  z.ZodNativeEnum<
    typeof GetAllPromptsHideOperatorsPromptsRequestRequestBodyQueryFilters75
  > = z.nativeEnum(
    GetAllPromptsHideOperatorsPromptsRequestRequestBodyQueryFilters75,
  );

/** @internal */
export const GetAllPromptsHideOperatorsPromptsRequestRequestBodyQueryFilters75$outboundSchema:
  z.ZodNativeEnum<
    typeof GetAllPromptsHideOperatorsPromptsRequestRequestBodyQueryFilters75
  > =
    GetAllPromptsHideOperatorsPromptsRequestRequestBodyQueryFilters75$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPromptsHideOperatorsPromptsRequestRequestBodyQueryFilters75$ {
  /** @deprecated use `GetAllPromptsHideOperatorsPromptsRequestRequestBodyQueryFilters75$inboundSchema` instead. */
  export const inboundSchema =
    GetAllPromptsHideOperatorsPromptsRequestRequestBodyQueryFilters75$inboundSchema;
  /** @deprecated use `GetAllPromptsHideOperatorsPromptsRequestRequestBodyQueryFilters75$outboundSchema` instead. */
  export const outboundSchema =
    GetAllPromptsHideOperatorsPromptsRequestRequestBodyQueryFilters75$outboundSchema;
}

/** @internal */
export const GetAllPromptsHideOperatorsPromptsRequestRequestBodyQueryFilters74$inboundSchema:
  z.ZodNativeEnum<
    typeof GetAllPromptsHideOperatorsPromptsRequestRequestBodyQueryFilters74
  > = z.nativeEnum(
    GetAllPromptsHideOperatorsPromptsRequestRequestBodyQueryFilters74,
  );

/** @internal */
export const GetAllPromptsHideOperatorsPromptsRequestRequestBodyQueryFilters74$outboundSchema:
  z.ZodNativeEnum<
    typeof GetAllPromptsHideOperatorsPromptsRequestRequestBodyQueryFilters74
  > =
    GetAllPromptsHideOperatorsPromptsRequestRequestBodyQueryFilters74$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPromptsHideOperatorsPromptsRequestRequestBodyQueryFilters74$ {
  /** @deprecated use `GetAllPromptsHideOperatorsPromptsRequestRequestBodyQueryFilters74$inboundSchema` instead. */
  export const inboundSchema =
    GetAllPromptsHideOperatorsPromptsRequestRequestBodyQueryFilters74$inboundSchema;
  /** @deprecated use `GetAllPromptsHideOperatorsPromptsRequestRequestBodyQueryFilters74$outboundSchema` instead. */
  export const outboundSchema =
    GetAllPromptsHideOperatorsPromptsRequestRequestBodyQueryFilters74$outboundSchema;
}

/** @internal */
export const GetAllPromptsHideOperatorsPromptsRequestRequestBodyQueryFilters73$inboundSchema:
  z.ZodNativeEnum<
    typeof GetAllPromptsHideOperatorsPromptsRequestRequestBodyQueryFilters73
  > = z.nativeEnum(
    GetAllPromptsHideOperatorsPromptsRequestRequestBodyQueryFilters73,
  );

/** @internal */
export const GetAllPromptsHideOperatorsPromptsRequestRequestBodyQueryFilters73$outboundSchema:
  z.ZodNativeEnum<
    typeof GetAllPromptsHideOperatorsPromptsRequestRequestBodyQueryFilters73
  > =
    GetAllPromptsHideOperatorsPromptsRequestRequestBodyQueryFilters73$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPromptsHideOperatorsPromptsRequestRequestBodyQueryFilters73$ {
  /** @deprecated use `GetAllPromptsHideOperatorsPromptsRequestRequestBodyQueryFilters73$inboundSchema` instead. */
  export const inboundSchema =
    GetAllPromptsHideOperatorsPromptsRequestRequestBodyQueryFilters73$inboundSchema;
  /** @deprecated use `GetAllPromptsHideOperatorsPromptsRequestRequestBodyQueryFilters73$outboundSchema` instead. */
  export const outboundSchema =
    GetAllPromptsHideOperatorsPromptsRequestRequestBodyQueryFilters73$outboundSchema;
}

/** @internal */
export const GetAllPromptsHideOperatorsPromptsRequestRequestBodyQueryFilters72$inboundSchema:
  z.ZodNativeEnum<
    typeof GetAllPromptsHideOperatorsPromptsRequestRequestBodyQueryFilters72
  > = z.nativeEnum(
    GetAllPromptsHideOperatorsPromptsRequestRequestBodyQueryFilters72,
  );

/** @internal */
export const GetAllPromptsHideOperatorsPromptsRequestRequestBodyQueryFilters72$outboundSchema:
  z.ZodNativeEnum<
    typeof GetAllPromptsHideOperatorsPromptsRequestRequestBodyQueryFilters72
  > =
    GetAllPromptsHideOperatorsPromptsRequestRequestBodyQueryFilters72$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPromptsHideOperatorsPromptsRequestRequestBodyQueryFilters72$ {
  /** @deprecated use `GetAllPromptsHideOperatorsPromptsRequestRequestBodyQueryFilters72$inboundSchema` instead. */
  export const inboundSchema =
    GetAllPromptsHideOperatorsPromptsRequestRequestBodyQueryFilters72$inboundSchema;
  /** @deprecated use `GetAllPromptsHideOperatorsPromptsRequestRequestBodyQueryFilters72$outboundSchema` instead. */
  export const outboundSchema =
    GetAllPromptsHideOperatorsPromptsRequestRequestBodyQueryFilters72$outboundSchema;
}

/** @internal */
export const GetAllPromptsHideOperatorsPromptsRequestRequestBodyQueryFilters71$inboundSchema:
  z.ZodNativeEnum<
    typeof GetAllPromptsHideOperatorsPromptsRequestRequestBodyQueryFilters71
  > = z.nativeEnum(
    GetAllPromptsHideOperatorsPromptsRequestRequestBodyQueryFilters71,
  );

/** @internal */
export const GetAllPromptsHideOperatorsPromptsRequestRequestBodyQueryFilters71$outboundSchema:
  z.ZodNativeEnum<
    typeof GetAllPromptsHideOperatorsPromptsRequestRequestBodyQueryFilters71
  > =
    GetAllPromptsHideOperatorsPromptsRequestRequestBodyQueryFilters71$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPromptsHideOperatorsPromptsRequestRequestBodyQueryFilters71$ {
  /** @deprecated use `GetAllPromptsHideOperatorsPromptsRequestRequestBodyQueryFilters71$inboundSchema` instead. */
  export const inboundSchema =
    GetAllPromptsHideOperatorsPromptsRequestRequestBodyQueryFilters71$inboundSchema;
  /** @deprecated use `GetAllPromptsHideOperatorsPromptsRequestRequestBodyQueryFilters71$outboundSchema` instead. */
  export const outboundSchema =
    GetAllPromptsHideOperatorsPromptsRequestRequestBodyQueryFilters71$outboundSchema;
}

/** @internal */
export const GetAllPromptsFiltersPromptsRequestRequestBodyQuery7HideOperators$inboundSchema:
  z.ZodType<
    GetAllPromptsFiltersPromptsRequestRequestBodyQuery7HideOperators,
    z.ZodTypeDef,
    unknown
  > = z.union([
    GetAllPromptsHideOperatorsPromptsRequestRequestBodyQueryFilters71$inboundSchema,
    GetAllPromptsHideOperatorsPromptsRequestRequestBodyQueryFilters72$inboundSchema,
    GetAllPromptsHideOperatorsPromptsRequestRequestBodyQueryFilters73$inboundSchema,
    GetAllPromptsHideOperatorsPromptsRequestRequestBodyQueryFilters74$inboundSchema,
    GetAllPromptsHideOperatorsPromptsRequestRequestBodyQueryFilters75$inboundSchema,
  ]);

/** @internal */
export type GetAllPromptsFiltersPromptsRequestRequestBodyQuery7HideOperators$Outbound =
  | string
  | string
  | string
  | string
  | string;

/** @internal */
export const GetAllPromptsFiltersPromptsRequestRequestBodyQuery7HideOperators$outboundSchema:
  z.ZodType<
    GetAllPromptsFiltersPromptsRequestRequestBodyQuery7HideOperators$Outbound,
    z.ZodTypeDef,
    GetAllPromptsFiltersPromptsRequestRequestBodyQuery7HideOperators
  > = z.union([
    GetAllPromptsHideOperatorsPromptsRequestRequestBodyQueryFilters71$outboundSchema,
    GetAllPromptsHideOperatorsPromptsRequestRequestBodyQueryFilters72$outboundSchema,
    GetAllPromptsHideOperatorsPromptsRequestRequestBodyQueryFilters73$outboundSchema,
    GetAllPromptsHideOperatorsPromptsRequestRequestBodyQueryFilters74$outboundSchema,
    GetAllPromptsHideOperatorsPromptsRequestRequestBodyQueryFilters75$outboundSchema,
  ]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPromptsFiltersPromptsRequestRequestBodyQuery7HideOperators$ {
  /** @deprecated use `GetAllPromptsFiltersPromptsRequestRequestBodyQuery7HideOperators$inboundSchema` instead. */
  export const inboundSchema =
    GetAllPromptsFiltersPromptsRequestRequestBodyQuery7HideOperators$inboundSchema;
  /** @deprecated use `GetAllPromptsFiltersPromptsRequestRequestBodyQuery7HideOperators$outboundSchema` instead. */
  export const outboundSchema =
    GetAllPromptsFiltersPromptsRequestRequestBodyQuery7HideOperators$outboundSchema;
  /** @deprecated use `GetAllPromptsFiltersPromptsRequestRequestBodyQuery7HideOperators$Outbound` instead. */
  export type Outbound =
    GetAllPromptsFiltersPromptsRequestRequestBodyQuery7HideOperators$Outbound;
}

export function getAllPromptsFiltersPromptsRequestRequestBodyQuery7HideOperatorsToJSON(
  getAllPromptsFiltersPromptsRequestRequestBodyQuery7HideOperators:
    GetAllPromptsFiltersPromptsRequestRequestBodyQuery7HideOperators,
): string {
  return JSON.stringify(
    GetAllPromptsFiltersPromptsRequestRequestBodyQuery7HideOperators$outboundSchema
      .parse(getAllPromptsFiltersPromptsRequestRequestBodyQuery7HideOperators),
  );
}

export function getAllPromptsFiltersPromptsRequestRequestBodyQuery7HideOperatorsFromJSON(
  jsonString: string,
): SafeParseResult<
  GetAllPromptsFiltersPromptsRequestRequestBodyQuery7HideOperators,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetAllPromptsFiltersPromptsRequestRequestBodyQuery7HideOperators$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'GetAllPromptsFiltersPromptsRequestRequestBodyQuery7HideOperators' from JSON`,
  );
}

/** @internal */
export const FiltersEvaluatorType$inboundSchema: z.ZodNativeEnum<
  typeof FiltersEvaluatorType
> = z.nativeEnum(FiltersEvaluatorType);

/** @internal */
export const FiltersEvaluatorType$outboundSchema: z.ZodNativeEnum<
  typeof FiltersEvaluatorType
> = FiltersEvaluatorType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FiltersEvaluatorType$ {
  /** @deprecated use `FiltersEvaluatorType$inboundSchema` instead. */
  export const inboundSchema = FiltersEvaluatorType$inboundSchema;
  /** @deprecated use `FiltersEvaluatorType$outboundSchema` instead. */
  export const outboundSchema = FiltersEvaluatorType$outboundSchema;
}

/** @internal */
export const FiltersEvaluatorOutputType$inboundSchema: z.ZodNativeEnum<
  typeof FiltersEvaluatorOutputType
> = z.nativeEnum(FiltersEvaluatorOutputType);

/** @internal */
export const FiltersEvaluatorOutputType$outboundSchema: z.ZodNativeEnum<
  typeof FiltersEvaluatorOutputType
> = FiltersEvaluatorOutputType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FiltersEvaluatorOutputType$ {
  /** @deprecated use `FiltersEvaluatorOutputType$inboundSchema` instead. */
  export const inboundSchema = FiltersEvaluatorOutputType$inboundSchema;
  /** @deprecated use `FiltersEvaluatorOutputType$outboundSchema` instead. */
  export const outboundSchema = FiltersEvaluatorOutputType$outboundSchema;
}

/** @internal */
export const GetAllPromptsFiltersPromptsRequestRequestBodyOptions$inboundSchema:
  z.ZodType<
    GetAllPromptsFiltersPromptsRequestRequestBodyOptions,
    z.ZodTypeDef,
    unknown
  > = z.object({
    name: z.string(),
    path: z.string(),
    type:
      GetAllPromptsFiltersPromptsRequestRequestBodyQuery7OptionsType$inboundSchema,
    hideOperators: z.array(
      z.union([
        GetAllPromptsHideOperatorsPromptsRequestRequestBodyQueryFilters71$inboundSchema,
        GetAllPromptsHideOperatorsPromptsRequestRequestBodyQueryFilters72$inboundSchema,
        GetAllPromptsHideOperatorsPromptsRequestRequestBodyQueryFilters73$inboundSchema,
        GetAllPromptsHideOperatorsPromptsRequestRequestBodyQueryFilters74$inboundSchema,
        GetAllPromptsHideOperatorsPromptsRequestRequestBodyQueryFilters75$inboundSchema,
      ]),
    ).optional(),
    id: z.string(),
    evaluatorId: z.string(),
    evaluatorType: FiltersEvaluatorType$inboundSchema,
    evaluatorOutputType: FiltersEvaluatorOutputType$inboundSchema,
  });

/** @internal */
export type GetAllPromptsFiltersPromptsRequestRequestBodyOptions$Outbound = {
  name: string;
  path: string;
  type: string;
  hideOperators?: Array<string | string | string | string | string> | undefined;
  id: string;
  evaluatorId: string;
  evaluatorType: string;
  evaluatorOutputType: string;
};

/** @internal */
export const GetAllPromptsFiltersPromptsRequestRequestBodyOptions$outboundSchema:
  z.ZodType<
    GetAllPromptsFiltersPromptsRequestRequestBodyOptions$Outbound,
    z.ZodTypeDef,
    GetAllPromptsFiltersPromptsRequestRequestBodyOptions
  > = z.object({
    name: z.string(),
    path: z.string(),
    type:
      GetAllPromptsFiltersPromptsRequestRequestBodyQuery7OptionsType$outboundSchema,
    hideOperators: z.array(
      z.union([
        GetAllPromptsHideOperatorsPromptsRequestRequestBodyQueryFilters71$outboundSchema,
        GetAllPromptsHideOperatorsPromptsRequestRequestBodyQueryFilters72$outboundSchema,
        GetAllPromptsHideOperatorsPromptsRequestRequestBodyQueryFilters73$outboundSchema,
        GetAllPromptsHideOperatorsPromptsRequestRequestBodyQueryFilters74$outboundSchema,
        GetAllPromptsHideOperatorsPromptsRequestRequestBodyQueryFilters75$outboundSchema,
      ]),
    ).optional(),
    id: z.string(),
    evaluatorId: z.string(),
    evaluatorType: FiltersEvaluatorType$outboundSchema,
    evaluatorOutputType: FiltersEvaluatorOutputType$outboundSchema,
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPromptsFiltersPromptsRequestRequestBodyOptions$ {
  /** @deprecated use `GetAllPromptsFiltersPromptsRequestRequestBodyOptions$inboundSchema` instead. */
  export const inboundSchema =
    GetAllPromptsFiltersPromptsRequestRequestBodyOptions$inboundSchema;
  /** @deprecated use `GetAllPromptsFiltersPromptsRequestRequestBodyOptions$outboundSchema` instead. */
  export const outboundSchema =
    GetAllPromptsFiltersPromptsRequestRequestBodyOptions$outboundSchema;
  /** @deprecated use `GetAllPromptsFiltersPromptsRequestRequestBodyOptions$Outbound` instead. */
  export type Outbound =
    GetAllPromptsFiltersPromptsRequestRequestBodyOptions$Outbound;
}

export function getAllPromptsFiltersPromptsRequestRequestBodyOptionsToJSON(
  getAllPromptsFiltersPromptsRequestRequestBodyOptions:
    GetAllPromptsFiltersPromptsRequestRequestBodyOptions,
): string {
  return JSON.stringify(
    GetAllPromptsFiltersPromptsRequestRequestBodyOptions$outboundSchema.parse(
      getAllPromptsFiltersPromptsRequestRequestBodyOptions,
    ),
  );
}

export function getAllPromptsFiltersPromptsRequestRequestBodyOptionsFromJSON(
  jsonString: string,
): SafeParseResult<
  GetAllPromptsFiltersPromptsRequestRequestBodyOptions,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetAllPromptsFiltersPromptsRequestRequestBodyOptions$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'GetAllPromptsFiltersPromptsRequestRequestBodyOptions' from JSON`,
  );
}

/** @internal */
export const GetAllPromptsHideOperatorsPromptsRequestRequestBodyQueryFilters76$inboundSchema:
  z.ZodNativeEnum<
    typeof GetAllPromptsHideOperatorsPromptsRequestRequestBodyQueryFilters76
  > = z.nativeEnum(
    GetAllPromptsHideOperatorsPromptsRequestRequestBodyQueryFilters76,
  );

/** @internal */
export const GetAllPromptsHideOperatorsPromptsRequestRequestBodyQueryFilters76$outboundSchema:
  z.ZodNativeEnum<
    typeof GetAllPromptsHideOperatorsPromptsRequestRequestBodyQueryFilters76
  > =
    GetAllPromptsHideOperatorsPromptsRequestRequestBodyQueryFilters76$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPromptsHideOperatorsPromptsRequestRequestBodyQueryFilters76$ {
  /** @deprecated use `GetAllPromptsHideOperatorsPromptsRequestRequestBodyQueryFilters76$inboundSchema` instead. */
  export const inboundSchema =
    GetAllPromptsHideOperatorsPromptsRequestRequestBodyQueryFilters76$inboundSchema;
  /** @deprecated use `GetAllPromptsHideOperatorsPromptsRequestRequestBodyQueryFilters76$outboundSchema` instead. */
  export const outboundSchema =
    GetAllPromptsHideOperatorsPromptsRequestRequestBodyQueryFilters76$outboundSchema;
}

/** @internal */
export const GetAllPromptsHideOperatorsPromptsRequestRequestBodyQueryFilters77$inboundSchema:
  z.ZodNativeEnum<
    typeof GetAllPromptsHideOperatorsPromptsRequestRequestBodyQueryFilters77
  > = z.nativeEnum(
    GetAllPromptsHideOperatorsPromptsRequestRequestBodyQueryFilters77,
  );

/** @internal */
export const GetAllPromptsHideOperatorsPromptsRequestRequestBodyQueryFilters77$outboundSchema:
  z.ZodNativeEnum<
    typeof GetAllPromptsHideOperatorsPromptsRequestRequestBodyQueryFilters77
  > =
    GetAllPromptsHideOperatorsPromptsRequestRequestBodyQueryFilters77$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPromptsHideOperatorsPromptsRequestRequestBodyQueryFilters77$ {
  /** @deprecated use `GetAllPromptsHideOperatorsPromptsRequestRequestBodyQueryFilters77$inboundSchema` instead. */
  export const inboundSchema =
    GetAllPromptsHideOperatorsPromptsRequestRequestBodyQueryFilters77$inboundSchema;
  /** @deprecated use `GetAllPromptsHideOperatorsPromptsRequestRequestBodyQueryFilters77$outboundSchema` instead. */
  export const outboundSchema =
    GetAllPromptsHideOperatorsPromptsRequestRequestBodyQueryFilters77$outboundSchema;
}

/** @internal */
export const GetAllPromptsHideOperatorsPromptsRequestRequestBodyQueryFilters78$inboundSchema:
  z.ZodNativeEnum<
    typeof GetAllPromptsHideOperatorsPromptsRequestRequestBodyQueryFilters78
  > = z.nativeEnum(
    GetAllPromptsHideOperatorsPromptsRequestRequestBodyQueryFilters78,
  );

/** @internal */
export const GetAllPromptsHideOperatorsPromptsRequestRequestBodyQueryFilters78$outboundSchema:
  z.ZodNativeEnum<
    typeof GetAllPromptsHideOperatorsPromptsRequestRequestBodyQueryFilters78
  > =
    GetAllPromptsHideOperatorsPromptsRequestRequestBodyQueryFilters78$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPromptsHideOperatorsPromptsRequestRequestBodyQueryFilters78$ {
  /** @deprecated use `GetAllPromptsHideOperatorsPromptsRequestRequestBodyQueryFilters78$inboundSchema` instead. */
  export const inboundSchema =
    GetAllPromptsHideOperatorsPromptsRequestRequestBodyQueryFilters78$inboundSchema;
  /** @deprecated use `GetAllPromptsHideOperatorsPromptsRequestRequestBodyQueryFilters78$outboundSchema` instead. */
  export const outboundSchema =
    GetAllPromptsHideOperatorsPromptsRequestRequestBodyQueryFilters78$outboundSchema;
}

/** @internal */
export const GetAllPromptsHideOperatorsPromptsRequestRequestBodyQueryFilters79$inboundSchema:
  z.ZodNativeEnum<
    typeof GetAllPromptsHideOperatorsPromptsRequestRequestBodyQueryFilters79
  > = z.nativeEnum(
    GetAllPromptsHideOperatorsPromptsRequestRequestBodyQueryFilters79,
  );

/** @internal */
export const GetAllPromptsHideOperatorsPromptsRequestRequestBodyQueryFilters79$outboundSchema:
  z.ZodNativeEnum<
    typeof GetAllPromptsHideOperatorsPromptsRequestRequestBodyQueryFilters79
  > =
    GetAllPromptsHideOperatorsPromptsRequestRequestBodyQueryFilters79$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPromptsHideOperatorsPromptsRequestRequestBodyQueryFilters79$ {
  /** @deprecated use `GetAllPromptsHideOperatorsPromptsRequestRequestBodyQueryFilters79$inboundSchema` instead. */
  export const inboundSchema =
    GetAllPromptsHideOperatorsPromptsRequestRequestBodyQueryFilters79$inboundSchema;
  /** @deprecated use `GetAllPromptsHideOperatorsPromptsRequestRequestBodyQueryFilters79$outboundSchema` instead. */
  export const outboundSchema =
    GetAllPromptsHideOperatorsPromptsRequestRequestBodyQueryFilters79$outboundSchema;
}

/** @internal */
export const GetAllPromptsHideOperatorsPromptsRequestRequestBodyQueryFilters710$inboundSchema:
  z.ZodNativeEnum<
    typeof GetAllPromptsHideOperatorsPromptsRequestRequestBodyQueryFilters710
  > = z.nativeEnum(
    GetAllPromptsHideOperatorsPromptsRequestRequestBodyQueryFilters710,
  );

/** @internal */
export const GetAllPromptsHideOperatorsPromptsRequestRequestBodyQueryFilters710$outboundSchema:
  z.ZodNativeEnum<
    typeof GetAllPromptsHideOperatorsPromptsRequestRequestBodyQueryFilters710
  > =
    GetAllPromptsHideOperatorsPromptsRequestRequestBodyQueryFilters710$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPromptsHideOperatorsPromptsRequestRequestBodyQueryFilters710$ {
  /** @deprecated use `GetAllPromptsHideOperatorsPromptsRequestRequestBodyQueryFilters710$inboundSchema` instead. */
  export const inboundSchema =
    GetAllPromptsHideOperatorsPromptsRequestRequestBodyQueryFilters710$inboundSchema;
  /** @deprecated use `GetAllPromptsHideOperatorsPromptsRequestRequestBodyQueryFilters710$outboundSchema` instead. */
  export const outboundSchema =
    GetAllPromptsHideOperatorsPromptsRequestRequestBodyQueryFilters710$outboundSchema;
}

/** @internal */
export const GetAllPromptsFiltersPromptsRequestRequestBodyQuery7HideOperators1$inboundSchema:
  z.ZodType<
    GetAllPromptsFiltersPromptsRequestRequestBodyQuery7HideOperators1,
    z.ZodTypeDef,
    unknown
  > = z.union([
    GetAllPromptsHideOperatorsPromptsRequestRequestBodyQueryFilters710$inboundSchema,
    GetAllPromptsHideOperatorsPromptsRequestRequestBodyQueryFilters79$inboundSchema,
    GetAllPromptsHideOperatorsPromptsRequestRequestBodyQueryFilters78$inboundSchema,
    GetAllPromptsHideOperatorsPromptsRequestRequestBodyQueryFilters77$inboundSchema,
    GetAllPromptsHideOperatorsPromptsRequestRequestBodyQueryFilters76$inboundSchema,
  ]);

/** @internal */
export type GetAllPromptsFiltersPromptsRequestRequestBodyQuery7HideOperators1$Outbound =
  | string
  | string
  | string
  | string
  | string;

/** @internal */
export const GetAllPromptsFiltersPromptsRequestRequestBodyQuery7HideOperators1$outboundSchema:
  z.ZodType<
    GetAllPromptsFiltersPromptsRequestRequestBodyQuery7HideOperators1$Outbound,
    z.ZodTypeDef,
    GetAllPromptsFiltersPromptsRequestRequestBodyQuery7HideOperators1
  > = z.union([
    GetAllPromptsHideOperatorsPromptsRequestRequestBodyQueryFilters710$outboundSchema,
    GetAllPromptsHideOperatorsPromptsRequestRequestBodyQueryFilters79$outboundSchema,
    GetAllPromptsHideOperatorsPromptsRequestRequestBodyQueryFilters78$outboundSchema,
    GetAllPromptsHideOperatorsPromptsRequestRequestBodyQueryFilters77$outboundSchema,
    GetAllPromptsHideOperatorsPromptsRequestRequestBodyQueryFilters76$outboundSchema,
  ]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPromptsFiltersPromptsRequestRequestBodyQuery7HideOperators1$ {
  /** @deprecated use `GetAllPromptsFiltersPromptsRequestRequestBodyQuery7HideOperators1$inboundSchema` instead. */
  export const inboundSchema =
    GetAllPromptsFiltersPromptsRequestRequestBodyQuery7HideOperators1$inboundSchema;
  /** @deprecated use `GetAllPromptsFiltersPromptsRequestRequestBodyQuery7HideOperators1$outboundSchema` instead. */
  export const outboundSchema =
    GetAllPromptsFiltersPromptsRequestRequestBodyQuery7HideOperators1$outboundSchema;
  /** @deprecated use `GetAllPromptsFiltersPromptsRequestRequestBodyQuery7HideOperators1$Outbound` instead. */
  export type Outbound =
    GetAllPromptsFiltersPromptsRequestRequestBodyQuery7HideOperators1$Outbound;
}

export function getAllPromptsFiltersPromptsRequestRequestBodyQuery7HideOperators1ToJSON(
  getAllPromptsFiltersPromptsRequestRequestBodyQuery7HideOperators1:
    GetAllPromptsFiltersPromptsRequestRequestBodyQuery7HideOperators1,
): string {
  return JSON.stringify(
    GetAllPromptsFiltersPromptsRequestRequestBodyQuery7HideOperators1$outboundSchema
      .parse(getAllPromptsFiltersPromptsRequestRequestBodyQuery7HideOperators1),
  );
}

export function getAllPromptsFiltersPromptsRequestRequestBodyQuery7HideOperators1FromJSON(
  jsonString: string,
): SafeParseResult<
  GetAllPromptsFiltersPromptsRequestRequestBodyQuery7HideOperators1,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetAllPromptsFiltersPromptsRequestRequestBodyQuery7HideOperators1$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'GetAllPromptsFiltersPromptsRequestRequestBodyQuery7HideOperators1' from JSON`,
  );
}

/** @internal */
export const Filters7$inboundSchema: z.ZodType<
  Filters7,
  z.ZodTypeDef,
  unknown
> = z.object({
  operator: z.union([
    GetAllPromptsOperatorPrompts1$inboundSchema,
    GetAllPromptsOperatorPrompts2$inboundSchema,
  ]),
  value: z.nullable(z.any()).optional(),
  type: GetAllPromptsFiltersPromptsRequestRequestBodyQuery7Type$inboundSchema,
  selectedOptionId: z.nullable(z.string()),
  options: z.array(
    z.lazy(() =>
      GetAllPromptsFiltersPromptsRequestRequestBodyOptions$inboundSchema
    ),
  ),
  name: z.string(),
  path: z.string(),
  hideOperators: z.array(
    z.union([
      GetAllPromptsHideOperatorsPromptsRequestRequestBodyQueryFilters710$inboundSchema,
      GetAllPromptsHideOperatorsPromptsRequestRequestBodyQueryFilters79$inboundSchema,
      GetAllPromptsHideOperatorsPromptsRequestRequestBodyQueryFilters78$inboundSchema,
      GetAllPromptsHideOperatorsPromptsRequestRequestBodyQueryFilters77$inboundSchema,
      GetAllPromptsHideOperatorsPromptsRequestRequestBodyQueryFilters76$inboundSchema,
    ]),
  ).optional(),
});

/** @internal */
export type Filters7$Outbound = {
  operator: string | string;
  value?: any | null | undefined;
  type: string;
  selectedOptionId: string | null;
  options: Array<GetAllPromptsFiltersPromptsRequestRequestBodyOptions$Outbound>;
  name: string;
  path: string;
  hideOperators?: Array<string | string | string | string | string> | undefined;
};

/** @internal */
export const Filters7$outboundSchema: z.ZodType<
  Filters7$Outbound,
  z.ZodTypeDef,
  Filters7
> = z.object({
  operator: z.union([
    GetAllPromptsOperatorPrompts1$outboundSchema,
    GetAllPromptsOperatorPrompts2$outboundSchema,
  ]),
  value: z.nullable(z.any()).optional(),
  type: GetAllPromptsFiltersPromptsRequestRequestBodyQuery7Type$outboundSchema,
  selectedOptionId: z.nullable(z.string()),
  options: z.array(
    z.lazy(() =>
      GetAllPromptsFiltersPromptsRequestRequestBodyOptions$outboundSchema
    ),
  ),
  name: z.string(),
  path: z.string(),
  hideOperators: z.array(
    z.union([
      GetAllPromptsHideOperatorsPromptsRequestRequestBodyQueryFilters710$outboundSchema,
      GetAllPromptsHideOperatorsPromptsRequestRequestBodyQueryFilters79$outboundSchema,
      GetAllPromptsHideOperatorsPromptsRequestRequestBodyQueryFilters78$outboundSchema,
      GetAllPromptsHideOperatorsPromptsRequestRequestBodyQueryFilters77$outboundSchema,
      GetAllPromptsHideOperatorsPromptsRequestRequestBodyQueryFilters76$outboundSchema,
    ]),
  ).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Filters7$ {
  /** @deprecated use `Filters7$inboundSchema` instead. */
  export const inboundSchema = Filters7$inboundSchema;
  /** @deprecated use `Filters7$outboundSchema` instead. */
  export const outboundSchema = Filters7$outboundSchema;
  /** @deprecated use `Filters7$Outbound` instead. */
  export type Outbound = Filters7$Outbound;
}

export function filters7ToJSON(filters7: Filters7): string {
  return JSON.stringify(Filters7$outboundSchema.parse(filters7));
}

export function filters7FromJSON(
  jsonString: string,
): SafeParseResult<Filters7, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Filters7$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Filters7' from JSON`,
  );
}

/** @internal */
export const GetAllPromptsOperator5$inboundSchema: z.ZodNativeEnum<
  typeof GetAllPromptsOperator5
> = z.nativeEnum(GetAllPromptsOperator5);

/** @internal */
export const GetAllPromptsOperator5$outboundSchema: z.ZodNativeEnum<
  typeof GetAllPromptsOperator5
> = GetAllPromptsOperator5$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPromptsOperator5$ {
  /** @deprecated use `GetAllPromptsOperator5$inboundSchema` instead. */
  export const inboundSchema = GetAllPromptsOperator5$inboundSchema;
  /** @deprecated use `GetAllPromptsOperator5$outboundSchema` instead. */
  export const outboundSchema = GetAllPromptsOperator5$outboundSchema;
}

/** @internal */
export const GetAllPromptsOperator4$inboundSchema: z.ZodNativeEnum<
  typeof GetAllPromptsOperator4
> = z.nativeEnum(GetAllPromptsOperator4);

/** @internal */
export const GetAllPromptsOperator4$outboundSchema: z.ZodNativeEnum<
  typeof GetAllPromptsOperator4
> = GetAllPromptsOperator4$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPromptsOperator4$ {
  /** @deprecated use `GetAllPromptsOperator4$inboundSchema` instead. */
  export const inboundSchema = GetAllPromptsOperator4$inboundSchema;
  /** @deprecated use `GetAllPromptsOperator4$outboundSchema` instead. */
  export const outboundSchema = GetAllPromptsOperator4$outboundSchema;
}

/** @internal */
export const GetAllPromptsOperator3$inboundSchema: z.ZodNativeEnum<
  typeof GetAllPromptsOperator3
> = z.nativeEnum(GetAllPromptsOperator3);

/** @internal */
export const GetAllPromptsOperator3$outboundSchema: z.ZodNativeEnum<
  typeof GetAllPromptsOperator3
> = GetAllPromptsOperator3$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPromptsOperator3$ {
  /** @deprecated use `GetAllPromptsOperator3$inboundSchema` instead. */
  export const inboundSchema = GetAllPromptsOperator3$inboundSchema;
  /** @deprecated use `GetAllPromptsOperator3$outboundSchema` instead. */
  export const outboundSchema = GetAllPromptsOperator3$outboundSchema;
}

/** @internal */
export const GetAllPromptsOperator2$inboundSchema: z.ZodNativeEnum<
  typeof GetAllPromptsOperator2
> = z.nativeEnum(GetAllPromptsOperator2);

/** @internal */
export const GetAllPromptsOperator2$outboundSchema: z.ZodNativeEnum<
  typeof GetAllPromptsOperator2
> = GetAllPromptsOperator2$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPromptsOperator2$ {
  /** @deprecated use `GetAllPromptsOperator2$inboundSchema` instead. */
  export const inboundSchema = GetAllPromptsOperator2$inboundSchema;
  /** @deprecated use `GetAllPromptsOperator2$outboundSchema` instead. */
  export const outboundSchema = GetAllPromptsOperator2$outboundSchema;
}

/** @internal */
export const GetAllPromptsOperator1$inboundSchema: z.ZodNativeEnum<
  typeof GetAllPromptsOperator1
> = z.nativeEnum(GetAllPromptsOperator1);

/** @internal */
export const GetAllPromptsOperator1$outboundSchema: z.ZodNativeEnum<
  typeof GetAllPromptsOperator1
> = GetAllPromptsOperator1$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPromptsOperator1$ {
  /** @deprecated use `GetAllPromptsOperator1$inboundSchema` instead. */
  export const inboundSchema = GetAllPromptsOperator1$inboundSchema;
  /** @deprecated use `GetAllPromptsOperator1$outboundSchema` instead. */
  export const outboundSchema = GetAllPromptsOperator1$outboundSchema;
}

/** @internal */
export const GetAllPromptsFiltersPromptsRequestRequestBodyQuery6Operator$inboundSchema:
  z.ZodType<
    GetAllPromptsFiltersPromptsRequestRequestBodyQuery6Operator,
    z.ZodTypeDef,
    unknown
  > = z.union([
    GetAllPromptsOperator1$inboundSchema,
    GetAllPromptsOperator2$inboundSchema,
    GetAllPromptsOperator3$inboundSchema,
    GetAllPromptsOperator4$inboundSchema,
    GetAllPromptsOperator5$inboundSchema,
  ]);

/** @internal */
export type GetAllPromptsFiltersPromptsRequestRequestBodyQuery6Operator$Outbound =
  | string
  | string
  | string
  | string
  | string;

/** @internal */
export const GetAllPromptsFiltersPromptsRequestRequestBodyQuery6Operator$outboundSchema:
  z.ZodType<
    GetAllPromptsFiltersPromptsRequestRequestBodyQuery6Operator$Outbound,
    z.ZodTypeDef,
    GetAllPromptsFiltersPromptsRequestRequestBodyQuery6Operator
  > = z.union([
    GetAllPromptsOperator1$outboundSchema,
    GetAllPromptsOperator2$outboundSchema,
    GetAllPromptsOperator3$outboundSchema,
    GetAllPromptsOperator4$outboundSchema,
    GetAllPromptsOperator5$outboundSchema,
  ]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPromptsFiltersPromptsRequestRequestBodyQuery6Operator$ {
  /** @deprecated use `GetAllPromptsFiltersPromptsRequestRequestBodyQuery6Operator$inboundSchema` instead. */
  export const inboundSchema =
    GetAllPromptsFiltersPromptsRequestRequestBodyQuery6Operator$inboundSchema;
  /** @deprecated use `GetAllPromptsFiltersPromptsRequestRequestBodyQuery6Operator$outboundSchema` instead. */
  export const outboundSchema =
    GetAllPromptsFiltersPromptsRequestRequestBodyQuery6Operator$outboundSchema;
  /** @deprecated use `GetAllPromptsFiltersPromptsRequestRequestBodyQuery6Operator$Outbound` instead. */
  export type Outbound =
    GetAllPromptsFiltersPromptsRequestRequestBodyQuery6Operator$Outbound;
}

export function getAllPromptsFiltersPromptsRequestRequestBodyQuery6OperatorToJSON(
  getAllPromptsFiltersPromptsRequestRequestBodyQuery6Operator:
    GetAllPromptsFiltersPromptsRequestRequestBodyQuery6Operator,
): string {
  return JSON.stringify(
    GetAllPromptsFiltersPromptsRequestRequestBodyQuery6Operator$outboundSchema
      .parse(getAllPromptsFiltersPromptsRequestRequestBodyQuery6Operator),
  );
}

export function getAllPromptsFiltersPromptsRequestRequestBodyQuery6OperatorFromJSON(
  jsonString: string,
): SafeParseResult<
  GetAllPromptsFiltersPromptsRequestRequestBodyQuery6Operator,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetAllPromptsFiltersPromptsRequestRequestBodyQuery6Operator$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'GetAllPromptsFiltersPromptsRequestRequestBodyQuery6Operator' from JSON`,
  );
}

/** @internal */
export const GetAllPromptsFiltersPromptsRequestRequestBodyQuery6Type$inboundSchema:
  z.ZodNativeEnum<
    typeof GetAllPromptsFiltersPromptsRequestRequestBodyQuery6Type
  > = z.nativeEnum(GetAllPromptsFiltersPromptsRequestRequestBodyQuery6Type);

/** @internal */
export const GetAllPromptsFiltersPromptsRequestRequestBodyQuery6Type$outboundSchema:
  z.ZodNativeEnum<
    typeof GetAllPromptsFiltersPromptsRequestRequestBodyQuery6Type
  > = GetAllPromptsFiltersPromptsRequestRequestBodyQuery6Type$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPromptsFiltersPromptsRequestRequestBodyQuery6Type$ {
  /** @deprecated use `GetAllPromptsFiltersPromptsRequestRequestBodyQuery6Type$inboundSchema` instead. */
  export const inboundSchema =
    GetAllPromptsFiltersPromptsRequestRequestBodyQuery6Type$inboundSchema;
  /** @deprecated use `GetAllPromptsFiltersPromptsRequestRequestBodyQuery6Type$outboundSchema` instead. */
  export const outboundSchema =
    GetAllPromptsFiltersPromptsRequestRequestBodyQuery6Type$outboundSchema;
}

/** @internal */
export const GetAllPromptsFiltersPromptsRequestRequestBodyQuery6OptionsType$inboundSchema:
  z.ZodNativeEnum<
    typeof GetAllPromptsFiltersPromptsRequestRequestBodyQuery6OptionsType
  > = z.nativeEnum(
    GetAllPromptsFiltersPromptsRequestRequestBodyQuery6OptionsType,
  );

/** @internal */
export const GetAllPromptsFiltersPromptsRequestRequestBodyQuery6OptionsType$outboundSchema:
  z.ZodNativeEnum<
    typeof GetAllPromptsFiltersPromptsRequestRequestBodyQuery6OptionsType
  > =
    GetAllPromptsFiltersPromptsRequestRequestBodyQuery6OptionsType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPromptsFiltersPromptsRequestRequestBodyQuery6OptionsType$ {
  /** @deprecated use `GetAllPromptsFiltersPromptsRequestRequestBodyQuery6OptionsType$inboundSchema` instead. */
  export const inboundSchema =
    GetAllPromptsFiltersPromptsRequestRequestBodyQuery6OptionsType$inboundSchema;
  /** @deprecated use `GetAllPromptsFiltersPromptsRequestRequestBodyQuery6OptionsType$outboundSchema` instead. */
  export const outboundSchema =
    GetAllPromptsFiltersPromptsRequestRequestBodyQuery6OptionsType$outboundSchema;
}

/** @internal */
export const GetAllPromptsHideOperatorsPromptsRequestRequestBodyQueryFilters5$inboundSchema:
  z.ZodNativeEnum<
    typeof GetAllPromptsHideOperatorsPromptsRequestRequestBodyQueryFilters5
  > = z.nativeEnum(
    GetAllPromptsHideOperatorsPromptsRequestRequestBodyQueryFilters5,
  );

/** @internal */
export const GetAllPromptsHideOperatorsPromptsRequestRequestBodyQueryFilters5$outboundSchema:
  z.ZodNativeEnum<
    typeof GetAllPromptsHideOperatorsPromptsRequestRequestBodyQueryFilters5
  > =
    GetAllPromptsHideOperatorsPromptsRequestRequestBodyQueryFilters5$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPromptsHideOperatorsPromptsRequestRequestBodyQueryFilters5$ {
  /** @deprecated use `GetAllPromptsHideOperatorsPromptsRequestRequestBodyQueryFilters5$inboundSchema` instead. */
  export const inboundSchema =
    GetAllPromptsHideOperatorsPromptsRequestRequestBodyQueryFilters5$inboundSchema;
  /** @deprecated use `GetAllPromptsHideOperatorsPromptsRequestRequestBodyQueryFilters5$outboundSchema` instead. */
  export const outboundSchema =
    GetAllPromptsHideOperatorsPromptsRequestRequestBodyQueryFilters5$outboundSchema;
}

/** @internal */
export const GetAllPromptsHideOperatorsPromptsRequestRequestBodyQueryFilters4$inboundSchema:
  z.ZodNativeEnum<
    typeof GetAllPromptsHideOperatorsPromptsRequestRequestBodyQueryFilters4
  > = z.nativeEnum(
    GetAllPromptsHideOperatorsPromptsRequestRequestBodyQueryFilters4,
  );

/** @internal */
export const GetAllPromptsHideOperatorsPromptsRequestRequestBodyQueryFilters4$outboundSchema:
  z.ZodNativeEnum<
    typeof GetAllPromptsHideOperatorsPromptsRequestRequestBodyQueryFilters4
  > =
    GetAllPromptsHideOperatorsPromptsRequestRequestBodyQueryFilters4$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPromptsHideOperatorsPromptsRequestRequestBodyQueryFilters4$ {
  /** @deprecated use `GetAllPromptsHideOperatorsPromptsRequestRequestBodyQueryFilters4$inboundSchema` instead. */
  export const inboundSchema =
    GetAllPromptsHideOperatorsPromptsRequestRequestBodyQueryFilters4$inboundSchema;
  /** @deprecated use `GetAllPromptsHideOperatorsPromptsRequestRequestBodyQueryFilters4$outboundSchema` instead. */
  export const outboundSchema =
    GetAllPromptsHideOperatorsPromptsRequestRequestBodyQueryFilters4$outboundSchema;
}

/** @internal */
export const GetAllPromptsHideOperatorsPromptsRequestRequestBodyQueryFilters3$inboundSchema:
  z.ZodNativeEnum<
    typeof GetAllPromptsHideOperatorsPromptsRequestRequestBodyQueryFilters3
  > = z.nativeEnum(
    GetAllPromptsHideOperatorsPromptsRequestRequestBodyQueryFilters3,
  );

/** @internal */
export const GetAllPromptsHideOperatorsPromptsRequestRequestBodyQueryFilters3$outboundSchema:
  z.ZodNativeEnum<
    typeof GetAllPromptsHideOperatorsPromptsRequestRequestBodyQueryFilters3
  > =
    GetAllPromptsHideOperatorsPromptsRequestRequestBodyQueryFilters3$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPromptsHideOperatorsPromptsRequestRequestBodyQueryFilters3$ {
  /** @deprecated use `GetAllPromptsHideOperatorsPromptsRequestRequestBodyQueryFilters3$inboundSchema` instead. */
  export const inboundSchema =
    GetAllPromptsHideOperatorsPromptsRequestRequestBodyQueryFilters3$inboundSchema;
  /** @deprecated use `GetAllPromptsHideOperatorsPromptsRequestRequestBodyQueryFilters3$outboundSchema` instead. */
  export const outboundSchema =
    GetAllPromptsHideOperatorsPromptsRequestRequestBodyQueryFilters3$outboundSchema;
}

/** @internal */
export const GetAllPromptsHideOperatorsPromptsRequestRequestBodyQueryFilters2$inboundSchema:
  z.ZodNativeEnum<
    typeof GetAllPromptsHideOperatorsPromptsRequestRequestBodyQueryFilters2
  > = z.nativeEnum(
    GetAllPromptsHideOperatorsPromptsRequestRequestBodyQueryFilters2,
  );

/** @internal */
export const GetAllPromptsHideOperatorsPromptsRequestRequestBodyQueryFilters2$outboundSchema:
  z.ZodNativeEnum<
    typeof GetAllPromptsHideOperatorsPromptsRequestRequestBodyQueryFilters2
  > =
    GetAllPromptsHideOperatorsPromptsRequestRequestBodyQueryFilters2$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPromptsHideOperatorsPromptsRequestRequestBodyQueryFilters2$ {
  /** @deprecated use `GetAllPromptsHideOperatorsPromptsRequestRequestBodyQueryFilters2$inboundSchema` instead. */
  export const inboundSchema =
    GetAllPromptsHideOperatorsPromptsRequestRequestBodyQueryFilters2$inboundSchema;
  /** @deprecated use `GetAllPromptsHideOperatorsPromptsRequestRequestBodyQueryFilters2$outboundSchema` instead. */
  export const outboundSchema =
    GetAllPromptsHideOperatorsPromptsRequestRequestBodyQueryFilters2$outboundSchema;
}

/** @internal */
export const GetAllPromptsHideOperatorsPromptsRequestRequestBodyQueryFilters1$inboundSchema:
  z.ZodNativeEnum<
    typeof GetAllPromptsHideOperatorsPromptsRequestRequestBodyQueryFilters1
  > = z.nativeEnum(
    GetAllPromptsHideOperatorsPromptsRequestRequestBodyQueryFilters1,
  );

/** @internal */
export const GetAllPromptsHideOperatorsPromptsRequestRequestBodyQueryFilters1$outboundSchema:
  z.ZodNativeEnum<
    typeof GetAllPromptsHideOperatorsPromptsRequestRequestBodyQueryFilters1
  > =
    GetAllPromptsHideOperatorsPromptsRequestRequestBodyQueryFilters1$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPromptsHideOperatorsPromptsRequestRequestBodyQueryFilters1$ {
  /** @deprecated use `GetAllPromptsHideOperatorsPromptsRequestRequestBodyQueryFilters1$inboundSchema` instead. */
  export const inboundSchema =
    GetAllPromptsHideOperatorsPromptsRequestRequestBodyQueryFilters1$inboundSchema;
  /** @deprecated use `GetAllPromptsHideOperatorsPromptsRequestRequestBodyQueryFilters1$outboundSchema` instead. */
  export const outboundSchema =
    GetAllPromptsHideOperatorsPromptsRequestRequestBodyQueryFilters1$outboundSchema;
}

/** @internal */
export const GetAllPromptsFiltersPromptsRequestRequestBodyQuery6HideOperators$inboundSchema:
  z.ZodType<
    GetAllPromptsFiltersPromptsRequestRequestBodyQuery6HideOperators,
    z.ZodTypeDef,
    unknown
  > = z.union([
    GetAllPromptsHideOperatorsPromptsRequestRequestBodyQueryFilters1$inboundSchema,
    GetAllPromptsHideOperatorsPromptsRequestRequestBodyQueryFilters2$inboundSchema,
    GetAllPromptsHideOperatorsPromptsRequestRequestBodyQueryFilters3$inboundSchema,
    GetAllPromptsHideOperatorsPromptsRequestRequestBodyQueryFilters4$inboundSchema,
    GetAllPromptsHideOperatorsPromptsRequestRequestBodyQueryFilters5$inboundSchema,
  ]);

/** @internal */
export type GetAllPromptsFiltersPromptsRequestRequestBodyQuery6HideOperators$Outbound =
  | string
  | string
  | string
  | string
  | string;

/** @internal */
export const GetAllPromptsFiltersPromptsRequestRequestBodyQuery6HideOperators$outboundSchema:
  z.ZodType<
    GetAllPromptsFiltersPromptsRequestRequestBodyQuery6HideOperators$Outbound,
    z.ZodTypeDef,
    GetAllPromptsFiltersPromptsRequestRequestBodyQuery6HideOperators
  > = z.union([
    GetAllPromptsHideOperatorsPromptsRequestRequestBodyQueryFilters1$outboundSchema,
    GetAllPromptsHideOperatorsPromptsRequestRequestBodyQueryFilters2$outboundSchema,
    GetAllPromptsHideOperatorsPromptsRequestRequestBodyQueryFilters3$outboundSchema,
    GetAllPromptsHideOperatorsPromptsRequestRequestBodyQueryFilters4$outboundSchema,
    GetAllPromptsHideOperatorsPromptsRequestRequestBodyQueryFilters5$outboundSchema,
  ]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPromptsFiltersPromptsRequestRequestBodyQuery6HideOperators$ {
  /** @deprecated use `GetAllPromptsFiltersPromptsRequestRequestBodyQuery6HideOperators$inboundSchema` instead. */
  export const inboundSchema =
    GetAllPromptsFiltersPromptsRequestRequestBodyQuery6HideOperators$inboundSchema;
  /** @deprecated use `GetAllPromptsFiltersPromptsRequestRequestBodyQuery6HideOperators$outboundSchema` instead. */
  export const outboundSchema =
    GetAllPromptsFiltersPromptsRequestRequestBodyQuery6HideOperators$outboundSchema;
  /** @deprecated use `GetAllPromptsFiltersPromptsRequestRequestBodyQuery6HideOperators$Outbound` instead. */
  export type Outbound =
    GetAllPromptsFiltersPromptsRequestRequestBodyQuery6HideOperators$Outbound;
}

export function getAllPromptsFiltersPromptsRequestRequestBodyQuery6HideOperatorsToJSON(
  getAllPromptsFiltersPromptsRequestRequestBodyQuery6HideOperators:
    GetAllPromptsFiltersPromptsRequestRequestBodyQuery6HideOperators,
): string {
  return JSON.stringify(
    GetAllPromptsFiltersPromptsRequestRequestBodyQuery6HideOperators$outboundSchema
      .parse(getAllPromptsFiltersPromptsRequestRequestBodyQuery6HideOperators),
  );
}

export function getAllPromptsFiltersPromptsRequestRequestBodyQuery6HideOperatorsFromJSON(
  jsonString: string,
): SafeParseResult<
  GetAllPromptsFiltersPromptsRequestRequestBodyQuery6HideOperators,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetAllPromptsFiltersPromptsRequestRequestBodyQuery6HideOperators$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'GetAllPromptsFiltersPromptsRequestRequestBodyQuery6HideOperators' from JSON`,
  );
}

/** @internal */
export const GetAllPromptsFiltersPromptsRequestOptions$inboundSchema: z.ZodType<
  GetAllPromptsFiltersPromptsRequestOptions,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.string(),
  path: z.string(),
  type:
    GetAllPromptsFiltersPromptsRequestRequestBodyQuery6OptionsType$inboundSchema,
  hideOperators: z.array(
    z.union([
      GetAllPromptsHideOperatorsPromptsRequestRequestBodyQueryFilters1$inboundSchema,
      GetAllPromptsHideOperatorsPromptsRequestRequestBodyQueryFilters2$inboundSchema,
      GetAllPromptsHideOperatorsPromptsRequestRequestBodyQueryFilters3$inboundSchema,
      GetAllPromptsHideOperatorsPromptsRequestRequestBodyQueryFilters4$inboundSchema,
      GetAllPromptsHideOperatorsPromptsRequestRequestBodyQueryFilters5$inboundSchema,
    ]),
  ).optional(),
  id: z.string(),
});

/** @internal */
export type GetAllPromptsFiltersPromptsRequestOptions$Outbound = {
  name: string;
  path: string;
  type: string;
  hideOperators?: Array<string | string | string | string | string> | undefined;
  id: string;
};

/** @internal */
export const GetAllPromptsFiltersPromptsRequestOptions$outboundSchema:
  z.ZodType<
    GetAllPromptsFiltersPromptsRequestOptions$Outbound,
    z.ZodTypeDef,
    GetAllPromptsFiltersPromptsRequestOptions
  > = z.object({
    name: z.string(),
    path: z.string(),
    type:
      GetAllPromptsFiltersPromptsRequestRequestBodyQuery6OptionsType$outboundSchema,
    hideOperators: z.array(
      z.union([
        GetAllPromptsHideOperatorsPromptsRequestRequestBodyQueryFilters1$outboundSchema,
        GetAllPromptsHideOperatorsPromptsRequestRequestBodyQueryFilters2$outboundSchema,
        GetAllPromptsHideOperatorsPromptsRequestRequestBodyQueryFilters3$outboundSchema,
        GetAllPromptsHideOperatorsPromptsRequestRequestBodyQueryFilters4$outboundSchema,
        GetAllPromptsHideOperatorsPromptsRequestRequestBodyQueryFilters5$outboundSchema,
      ]),
    ).optional(),
    id: z.string(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPromptsFiltersPromptsRequestOptions$ {
  /** @deprecated use `GetAllPromptsFiltersPromptsRequestOptions$inboundSchema` instead. */
  export const inboundSchema =
    GetAllPromptsFiltersPromptsRequestOptions$inboundSchema;
  /** @deprecated use `GetAllPromptsFiltersPromptsRequestOptions$outboundSchema` instead. */
  export const outboundSchema =
    GetAllPromptsFiltersPromptsRequestOptions$outboundSchema;
  /** @deprecated use `GetAllPromptsFiltersPromptsRequestOptions$Outbound` instead. */
  export type Outbound = GetAllPromptsFiltersPromptsRequestOptions$Outbound;
}

export function getAllPromptsFiltersPromptsRequestOptionsToJSON(
  getAllPromptsFiltersPromptsRequestOptions:
    GetAllPromptsFiltersPromptsRequestOptions,
): string {
  return JSON.stringify(
    GetAllPromptsFiltersPromptsRequestOptions$outboundSchema.parse(
      getAllPromptsFiltersPromptsRequestOptions,
    ),
  );
}

export function getAllPromptsFiltersPromptsRequestOptionsFromJSON(
  jsonString: string,
): SafeParseResult<
  GetAllPromptsFiltersPromptsRequestOptions,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetAllPromptsFiltersPromptsRequestOptions$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'GetAllPromptsFiltersPromptsRequestOptions' from JSON`,
  );
}

/** @internal */
export const GetAllPromptsHideOperatorsPromptsRequestRequestBodyQueryFilters65$inboundSchema:
  z.ZodNativeEnum<
    typeof GetAllPromptsHideOperatorsPromptsRequestRequestBodyQueryFilters65
  > = z.nativeEnum(
    GetAllPromptsHideOperatorsPromptsRequestRequestBodyQueryFilters65,
  );

/** @internal */
export const GetAllPromptsHideOperatorsPromptsRequestRequestBodyQueryFilters65$outboundSchema:
  z.ZodNativeEnum<
    typeof GetAllPromptsHideOperatorsPromptsRequestRequestBodyQueryFilters65
  > =
    GetAllPromptsHideOperatorsPromptsRequestRequestBodyQueryFilters65$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPromptsHideOperatorsPromptsRequestRequestBodyQueryFilters65$ {
  /** @deprecated use `GetAllPromptsHideOperatorsPromptsRequestRequestBodyQueryFilters65$inboundSchema` instead. */
  export const inboundSchema =
    GetAllPromptsHideOperatorsPromptsRequestRequestBodyQueryFilters65$inboundSchema;
  /** @deprecated use `GetAllPromptsHideOperatorsPromptsRequestRequestBodyQueryFilters65$outboundSchema` instead. */
  export const outboundSchema =
    GetAllPromptsHideOperatorsPromptsRequestRequestBodyQueryFilters65$outboundSchema;
}

/** @internal */
export const GetAllPromptsHideOperatorsPromptsRequestRequestBodyQueryFilters64$inboundSchema:
  z.ZodNativeEnum<
    typeof GetAllPromptsHideOperatorsPromptsRequestRequestBodyQueryFilters64
  > = z.nativeEnum(
    GetAllPromptsHideOperatorsPromptsRequestRequestBodyQueryFilters64,
  );

/** @internal */
export const GetAllPromptsHideOperatorsPromptsRequestRequestBodyQueryFilters64$outboundSchema:
  z.ZodNativeEnum<
    typeof GetAllPromptsHideOperatorsPromptsRequestRequestBodyQueryFilters64
  > =
    GetAllPromptsHideOperatorsPromptsRequestRequestBodyQueryFilters64$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPromptsHideOperatorsPromptsRequestRequestBodyQueryFilters64$ {
  /** @deprecated use `GetAllPromptsHideOperatorsPromptsRequestRequestBodyQueryFilters64$inboundSchema` instead. */
  export const inboundSchema =
    GetAllPromptsHideOperatorsPromptsRequestRequestBodyQueryFilters64$inboundSchema;
  /** @deprecated use `GetAllPromptsHideOperatorsPromptsRequestRequestBodyQueryFilters64$outboundSchema` instead. */
  export const outboundSchema =
    GetAllPromptsHideOperatorsPromptsRequestRequestBodyQueryFilters64$outboundSchema;
}

/** @internal */
export const GetAllPromptsHideOperatorsPromptsRequestRequestBodyQueryFilters63$inboundSchema:
  z.ZodNativeEnum<
    typeof GetAllPromptsHideOperatorsPromptsRequestRequestBodyQueryFilters63
  > = z.nativeEnum(
    GetAllPromptsHideOperatorsPromptsRequestRequestBodyQueryFilters63,
  );

/** @internal */
export const GetAllPromptsHideOperatorsPromptsRequestRequestBodyQueryFilters63$outboundSchema:
  z.ZodNativeEnum<
    typeof GetAllPromptsHideOperatorsPromptsRequestRequestBodyQueryFilters63
  > =
    GetAllPromptsHideOperatorsPromptsRequestRequestBodyQueryFilters63$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPromptsHideOperatorsPromptsRequestRequestBodyQueryFilters63$ {
  /** @deprecated use `GetAllPromptsHideOperatorsPromptsRequestRequestBodyQueryFilters63$inboundSchema` instead. */
  export const inboundSchema =
    GetAllPromptsHideOperatorsPromptsRequestRequestBodyQueryFilters63$inboundSchema;
  /** @deprecated use `GetAllPromptsHideOperatorsPromptsRequestRequestBodyQueryFilters63$outboundSchema` instead. */
  export const outboundSchema =
    GetAllPromptsHideOperatorsPromptsRequestRequestBodyQueryFilters63$outboundSchema;
}

/** @internal */
export const GetAllPromptsHideOperatorsPromptsRequestRequestBodyQueryFilters62$inboundSchema:
  z.ZodNativeEnum<
    typeof GetAllPromptsHideOperatorsPromptsRequestRequestBodyQueryFilters62
  > = z.nativeEnum(
    GetAllPromptsHideOperatorsPromptsRequestRequestBodyQueryFilters62,
  );

/** @internal */
export const GetAllPromptsHideOperatorsPromptsRequestRequestBodyQueryFilters62$outboundSchema:
  z.ZodNativeEnum<
    typeof GetAllPromptsHideOperatorsPromptsRequestRequestBodyQueryFilters62
  > =
    GetAllPromptsHideOperatorsPromptsRequestRequestBodyQueryFilters62$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPromptsHideOperatorsPromptsRequestRequestBodyQueryFilters62$ {
  /** @deprecated use `GetAllPromptsHideOperatorsPromptsRequestRequestBodyQueryFilters62$inboundSchema` instead. */
  export const inboundSchema =
    GetAllPromptsHideOperatorsPromptsRequestRequestBodyQueryFilters62$inboundSchema;
  /** @deprecated use `GetAllPromptsHideOperatorsPromptsRequestRequestBodyQueryFilters62$outboundSchema` instead. */
  export const outboundSchema =
    GetAllPromptsHideOperatorsPromptsRequestRequestBodyQueryFilters62$outboundSchema;
}

/** @internal */
export const GetAllPromptsHideOperatorsPromptsRequestRequestBodyQueryFilters61$inboundSchema:
  z.ZodNativeEnum<
    typeof GetAllPromptsHideOperatorsPromptsRequestRequestBodyQueryFilters61
  > = z.nativeEnum(
    GetAllPromptsHideOperatorsPromptsRequestRequestBodyQueryFilters61,
  );

/** @internal */
export const GetAllPromptsHideOperatorsPromptsRequestRequestBodyQueryFilters61$outboundSchema:
  z.ZodNativeEnum<
    typeof GetAllPromptsHideOperatorsPromptsRequestRequestBodyQueryFilters61
  > =
    GetAllPromptsHideOperatorsPromptsRequestRequestBodyQueryFilters61$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPromptsHideOperatorsPromptsRequestRequestBodyQueryFilters61$ {
  /** @deprecated use `GetAllPromptsHideOperatorsPromptsRequestRequestBodyQueryFilters61$inboundSchema` instead. */
  export const inboundSchema =
    GetAllPromptsHideOperatorsPromptsRequestRequestBodyQueryFilters61$inboundSchema;
  /** @deprecated use `GetAllPromptsHideOperatorsPromptsRequestRequestBodyQueryFilters61$outboundSchema` instead. */
  export const outboundSchema =
    GetAllPromptsHideOperatorsPromptsRequestRequestBodyQueryFilters61$outboundSchema;
}

/** @internal */
export const GetAllPromptsFiltersPromptsRequestRequestBodyQuery6HideOperators1$inboundSchema:
  z.ZodType<
    GetAllPromptsFiltersPromptsRequestRequestBodyQuery6HideOperators1,
    z.ZodTypeDef,
    unknown
  > = z.union([
    GetAllPromptsHideOperatorsPromptsRequestRequestBodyQueryFilters61$inboundSchema,
    GetAllPromptsHideOperatorsPromptsRequestRequestBodyQueryFilters62$inboundSchema,
    GetAllPromptsHideOperatorsPromptsRequestRequestBodyQueryFilters63$inboundSchema,
    GetAllPromptsHideOperatorsPromptsRequestRequestBodyQueryFilters64$inboundSchema,
    GetAllPromptsHideOperatorsPromptsRequestRequestBodyQueryFilters65$inboundSchema,
  ]);

/** @internal */
export type GetAllPromptsFiltersPromptsRequestRequestBodyQuery6HideOperators1$Outbound =
  | string
  | string
  | string
  | string
  | string;

/** @internal */
export const GetAllPromptsFiltersPromptsRequestRequestBodyQuery6HideOperators1$outboundSchema:
  z.ZodType<
    GetAllPromptsFiltersPromptsRequestRequestBodyQuery6HideOperators1$Outbound,
    z.ZodTypeDef,
    GetAllPromptsFiltersPromptsRequestRequestBodyQuery6HideOperators1
  > = z.union([
    GetAllPromptsHideOperatorsPromptsRequestRequestBodyQueryFilters61$outboundSchema,
    GetAllPromptsHideOperatorsPromptsRequestRequestBodyQueryFilters62$outboundSchema,
    GetAllPromptsHideOperatorsPromptsRequestRequestBodyQueryFilters63$outboundSchema,
    GetAllPromptsHideOperatorsPromptsRequestRequestBodyQueryFilters64$outboundSchema,
    GetAllPromptsHideOperatorsPromptsRequestRequestBodyQueryFilters65$outboundSchema,
  ]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPromptsFiltersPromptsRequestRequestBodyQuery6HideOperators1$ {
  /** @deprecated use `GetAllPromptsFiltersPromptsRequestRequestBodyQuery6HideOperators1$inboundSchema` instead. */
  export const inboundSchema =
    GetAllPromptsFiltersPromptsRequestRequestBodyQuery6HideOperators1$inboundSchema;
  /** @deprecated use `GetAllPromptsFiltersPromptsRequestRequestBodyQuery6HideOperators1$outboundSchema` instead. */
  export const outboundSchema =
    GetAllPromptsFiltersPromptsRequestRequestBodyQuery6HideOperators1$outboundSchema;
  /** @deprecated use `GetAllPromptsFiltersPromptsRequestRequestBodyQuery6HideOperators1$Outbound` instead. */
  export type Outbound =
    GetAllPromptsFiltersPromptsRequestRequestBodyQuery6HideOperators1$Outbound;
}

export function getAllPromptsFiltersPromptsRequestRequestBodyQuery6HideOperators1ToJSON(
  getAllPromptsFiltersPromptsRequestRequestBodyQuery6HideOperators1:
    GetAllPromptsFiltersPromptsRequestRequestBodyQuery6HideOperators1,
): string {
  return JSON.stringify(
    GetAllPromptsFiltersPromptsRequestRequestBodyQuery6HideOperators1$outboundSchema
      .parse(getAllPromptsFiltersPromptsRequestRequestBodyQuery6HideOperators1),
  );
}

export function getAllPromptsFiltersPromptsRequestRequestBodyQuery6HideOperators1FromJSON(
  jsonString: string,
): SafeParseResult<
  GetAllPromptsFiltersPromptsRequestRequestBodyQuery6HideOperators1,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetAllPromptsFiltersPromptsRequestRequestBodyQuery6HideOperators1$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'GetAllPromptsFiltersPromptsRequestRequestBodyQuery6HideOperators1' from JSON`,
  );
}

/** @internal */
export const Filters6$inboundSchema: z.ZodType<
  Filters6,
  z.ZodTypeDef,
  unknown
> = z.object({
  operator: z.union([
    GetAllPromptsOperator1$inboundSchema,
    GetAllPromptsOperator2$inboundSchema,
    GetAllPromptsOperator3$inboundSchema,
    GetAllPromptsOperator4$inboundSchema,
    GetAllPromptsOperator5$inboundSchema,
  ]),
  value: z.nullable(z.any()).optional(),
  type: GetAllPromptsFiltersPromptsRequestRequestBodyQuery6Type$inboundSchema,
  options: z.array(
    z.lazy(() => GetAllPromptsFiltersPromptsRequestOptions$inboundSchema),
  ),
  selectedOptionId: z.nullable(z.string()),
  name: z.string(),
  path: z.string(),
  hideOperators: z.array(
    z.union([
      GetAllPromptsHideOperatorsPromptsRequestRequestBodyQueryFilters61$inboundSchema,
      GetAllPromptsHideOperatorsPromptsRequestRequestBodyQueryFilters62$inboundSchema,
      GetAllPromptsHideOperatorsPromptsRequestRequestBodyQueryFilters63$inboundSchema,
      GetAllPromptsHideOperatorsPromptsRequestRequestBodyQueryFilters64$inboundSchema,
      GetAllPromptsHideOperatorsPromptsRequestRequestBodyQueryFilters65$inboundSchema,
    ]),
  ).optional(),
});

/** @internal */
export type Filters6$Outbound = {
  operator: string | string | string | string | string;
  value?: any | null | undefined;
  type: string;
  options: Array<GetAllPromptsFiltersPromptsRequestOptions$Outbound>;
  selectedOptionId: string | null;
  name: string;
  path: string;
  hideOperators?: Array<string | string | string | string | string> | undefined;
};

/** @internal */
export const Filters6$outboundSchema: z.ZodType<
  Filters6$Outbound,
  z.ZodTypeDef,
  Filters6
> = z.object({
  operator: z.union([
    GetAllPromptsOperator1$outboundSchema,
    GetAllPromptsOperator2$outboundSchema,
    GetAllPromptsOperator3$outboundSchema,
    GetAllPromptsOperator4$outboundSchema,
    GetAllPromptsOperator5$outboundSchema,
  ]),
  value: z.nullable(z.any()).optional(),
  type: GetAllPromptsFiltersPromptsRequestRequestBodyQuery6Type$outboundSchema,
  options: z.array(
    z.lazy(() => GetAllPromptsFiltersPromptsRequestOptions$outboundSchema),
  ),
  selectedOptionId: z.nullable(z.string()),
  name: z.string(),
  path: z.string(),
  hideOperators: z.array(
    z.union([
      GetAllPromptsHideOperatorsPromptsRequestRequestBodyQueryFilters61$outboundSchema,
      GetAllPromptsHideOperatorsPromptsRequestRequestBodyQueryFilters62$outboundSchema,
      GetAllPromptsHideOperatorsPromptsRequestRequestBodyQueryFilters63$outboundSchema,
      GetAllPromptsHideOperatorsPromptsRequestRequestBodyQueryFilters64$outboundSchema,
      GetAllPromptsHideOperatorsPromptsRequestRequestBodyQueryFilters65$outboundSchema,
    ]),
  ).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Filters6$ {
  /** @deprecated use `Filters6$inboundSchema` instead. */
  export const inboundSchema = Filters6$inboundSchema;
  /** @deprecated use `Filters6$outboundSchema` instead. */
  export const outboundSchema = Filters6$outboundSchema;
  /** @deprecated use `Filters6$Outbound` instead. */
  export type Outbound = Filters6$Outbound;
}

export function filters6ToJSON(filters6: Filters6): string {
  return JSON.stringify(Filters6$outboundSchema.parse(filters6));
}

export function filters6FromJSON(
  jsonString: string,
): SafeParseResult<Filters6, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Filters6$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Filters6' from JSON`,
  );
}

/** @internal */
export const GetAllPromptsFiltersPromptsRequestRequestBodyQueryOperator$inboundSchema:
  z.ZodNativeEnum<
    typeof GetAllPromptsFiltersPromptsRequestRequestBodyQueryOperator
  > = z.nativeEnum(GetAllPromptsFiltersPromptsRequestRequestBodyQueryOperator);

/** @internal */
export const GetAllPromptsFiltersPromptsRequestRequestBodyQueryOperator$outboundSchema:
  z.ZodNativeEnum<
    typeof GetAllPromptsFiltersPromptsRequestRequestBodyQueryOperator
  > = GetAllPromptsFiltersPromptsRequestRequestBodyQueryOperator$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPromptsFiltersPromptsRequestRequestBodyQueryOperator$ {
  /** @deprecated use `GetAllPromptsFiltersPromptsRequestRequestBodyQueryOperator$inboundSchema` instead. */
  export const inboundSchema =
    GetAllPromptsFiltersPromptsRequestRequestBodyQueryOperator$inboundSchema;
  /** @deprecated use `GetAllPromptsFiltersPromptsRequestRequestBodyQueryOperator$outboundSchema` instead. */
  export const outboundSchema =
    GetAllPromptsFiltersPromptsRequestRequestBodyQueryOperator$outboundSchema;
}

/** @internal */
export const GetAllPromptsFiltersPromptsRequestRequestBodyQueryType$inboundSchema:
  z.ZodNativeEnum<
    typeof GetAllPromptsFiltersPromptsRequestRequestBodyQueryType
  > = z.nativeEnum(GetAllPromptsFiltersPromptsRequestRequestBodyQueryType);

/** @internal */
export const GetAllPromptsFiltersPromptsRequestRequestBodyQueryType$outboundSchema:
  z.ZodNativeEnum<
    typeof GetAllPromptsFiltersPromptsRequestRequestBodyQueryType
  > = GetAllPromptsFiltersPromptsRequestRequestBodyQueryType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPromptsFiltersPromptsRequestRequestBodyQueryType$ {
  /** @deprecated use `GetAllPromptsFiltersPromptsRequestRequestBodyQueryType$inboundSchema` instead. */
  export const inboundSchema =
    GetAllPromptsFiltersPromptsRequestRequestBodyQueryType$inboundSchema;
  /** @deprecated use `GetAllPromptsFiltersPromptsRequestRequestBodyQueryType$outboundSchema` instead. */
  export const outboundSchema =
    GetAllPromptsFiltersPromptsRequestRequestBodyQueryType$outboundSchema;
}

/** @internal */
export const GetAllPromptsHideOperatorsPromptsRequestRequestBodyQuery5$inboundSchema:
  z.ZodNativeEnum<
    typeof GetAllPromptsHideOperatorsPromptsRequestRequestBodyQuery5
  > = z.nativeEnum(GetAllPromptsHideOperatorsPromptsRequestRequestBodyQuery5);

/** @internal */
export const GetAllPromptsHideOperatorsPromptsRequestRequestBodyQuery5$outboundSchema:
  z.ZodNativeEnum<
    typeof GetAllPromptsHideOperatorsPromptsRequestRequestBodyQuery5
  > = GetAllPromptsHideOperatorsPromptsRequestRequestBodyQuery5$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPromptsHideOperatorsPromptsRequestRequestBodyQuery5$ {
  /** @deprecated use `GetAllPromptsHideOperatorsPromptsRequestRequestBodyQuery5$inboundSchema` instead. */
  export const inboundSchema =
    GetAllPromptsHideOperatorsPromptsRequestRequestBodyQuery5$inboundSchema;
  /** @deprecated use `GetAllPromptsHideOperatorsPromptsRequestRequestBodyQuery5$outboundSchema` instead. */
  export const outboundSchema =
    GetAllPromptsHideOperatorsPromptsRequestRequestBodyQuery5$outboundSchema;
}

/** @internal */
export const GetAllPromptsHideOperatorsPromptsRequestRequestBodyQuery4$inboundSchema:
  z.ZodNativeEnum<
    typeof GetAllPromptsHideOperatorsPromptsRequestRequestBodyQuery4
  > = z.nativeEnum(GetAllPromptsHideOperatorsPromptsRequestRequestBodyQuery4);

/** @internal */
export const GetAllPromptsHideOperatorsPromptsRequestRequestBodyQuery4$outboundSchema:
  z.ZodNativeEnum<
    typeof GetAllPromptsHideOperatorsPromptsRequestRequestBodyQuery4
  > = GetAllPromptsHideOperatorsPromptsRequestRequestBodyQuery4$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPromptsHideOperatorsPromptsRequestRequestBodyQuery4$ {
  /** @deprecated use `GetAllPromptsHideOperatorsPromptsRequestRequestBodyQuery4$inboundSchema` instead. */
  export const inboundSchema =
    GetAllPromptsHideOperatorsPromptsRequestRequestBodyQuery4$inboundSchema;
  /** @deprecated use `GetAllPromptsHideOperatorsPromptsRequestRequestBodyQuery4$outboundSchema` instead. */
  export const outboundSchema =
    GetAllPromptsHideOperatorsPromptsRequestRequestBodyQuery4$outboundSchema;
}

/** @internal */
export const GetAllPromptsHideOperatorsPromptsRequestRequestBodyQuery3$inboundSchema:
  z.ZodNativeEnum<
    typeof GetAllPromptsHideOperatorsPromptsRequestRequestBodyQuery3
  > = z.nativeEnum(GetAllPromptsHideOperatorsPromptsRequestRequestBodyQuery3);

/** @internal */
export const GetAllPromptsHideOperatorsPromptsRequestRequestBodyQuery3$outboundSchema:
  z.ZodNativeEnum<
    typeof GetAllPromptsHideOperatorsPromptsRequestRequestBodyQuery3
  > = GetAllPromptsHideOperatorsPromptsRequestRequestBodyQuery3$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPromptsHideOperatorsPromptsRequestRequestBodyQuery3$ {
  /** @deprecated use `GetAllPromptsHideOperatorsPromptsRequestRequestBodyQuery3$inboundSchema` instead. */
  export const inboundSchema =
    GetAllPromptsHideOperatorsPromptsRequestRequestBodyQuery3$inboundSchema;
  /** @deprecated use `GetAllPromptsHideOperatorsPromptsRequestRequestBodyQuery3$outboundSchema` instead. */
  export const outboundSchema =
    GetAllPromptsHideOperatorsPromptsRequestRequestBodyQuery3$outboundSchema;
}

/** @internal */
export const GetAllPromptsHideOperatorsPromptsRequestRequestBodyQuery2$inboundSchema:
  z.ZodNativeEnum<
    typeof GetAllPromptsHideOperatorsPromptsRequestRequestBodyQuery2
  > = z.nativeEnum(GetAllPromptsHideOperatorsPromptsRequestRequestBodyQuery2);

/** @internal */
export const GetAllPromptsHideOperatorsPromptsRequestRequestBodyQuery2$outboundSchema:
  z.ZodNativeEnum<
    typeof GetAllPromptsHideOperatorsPromptsRequestRequestBodyQuery2
  > = GetAllPromptsHideOperatorsPromptsRequestRequestBodyQuery2$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPromptsHideOperatorsPromptsRequestRequestBodyQuery2$ {
  /** @deprecated use `GetAllPromptsHideOperatorsPromptsRequestRequestBodyQuery2$inboundSchema` instead. */
  export const inboundSchema =
    GetAllPromptsHideOperatorsPromptsRequestRequestBodyQuery2$inboundSchema;
  /** @deprecated use `GetAllPromptsHideOperatorsPromptsRequestRequestBodyQuery2$outboundSchema` instead. */
  export const outboundSchema =
    GetAllPromptsHideOperatorsPromptsRequestRequestBodyQuery2$outboundSchema;
}

/** @internal */
export const GetAllPromptsHideOperatorsPromptsRequestRequestBodyQuery1$inboundSchema:
  z.ZodNativeEnum<
    typeof GetAllPromptsHideOperatorsPromptsRequestRequestBodyQuery1
  > = z.nativeEnum(GetAllPromptsHideOperatorsPromptsRequestRequestBodyQuery1);

/** @internal */
export const GetAllPromptsHideOperatorsPromptsRequestRequestBodyQuery1$outboundSchema:
  z.ZodNativeEnum<
    typeof GetAllPromptsHideOperatorsPromptsRequestRequestBodyQuery1
  > = GetAllPromptsHideOperatorsPromptsRequestRequestBodyQuery1$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPromptsHideOperatorsPromptsRequestRequestBodyQuery1$ {
  /** @deprecated use `GetAllPromptsHideOperatorsPromptsRequestRequestBodyQuery1$inboundSchema` instead. */
  export const inboundSchema =
    GetAllPromptsHideOperatorsPromptsRequestRequestBodyQuery1$inboundSchema;
  /** @deprecated use `GetAllPromptsHideOperatorsPromptsRequestRequestBodyQuery1$outboundSchema` instead. */
  export const outboundSchema =
    GetAllPromptsHideOperatorsPromptsRequestRequestBodyQuery1$outboundSchema;
}

/** @internal */
export const GetAllPromptsFiltersPromptsRequestRequestBodyQueryHideOperators$inboundSchema:
  z.ZodType<
    GetAllPromptsFiltersPromptsRequestRequestBodyQueryHideOperators,
    z.ZodTypeDef,
    unknown
  > = z.union([
    GetAllPromptsHideOperatorsPromptsRequestRequestBodyQuery1$inboundSchema,
    GetAllPromptsHideOperatorsPromptsRequestRequestBodyQuery2$inboundSchema,
    GetAllPromptsHideOperatorsPromptsRequestRequestBodyQuery3$inboundSchema,
    GetAllPromptsHideOperatorsPromptsRequestRequestBodyQuery4$inboundSchema,
    GetAllPromptsHideOperatorsPromptsRequestRequestBodyQuery5$inboundSchema,
  ]);

/** @internal */
export type GetAllPromptsFiltersPromptsRequestRequestBodyQueryHideOperators$Outbound =
  | string
  | string
  | string
  | string
  | string;

/** @internal */
export const GetAllPromptsFiltersPromptsRequestRequestBodyQueryHideOperators$outboundSchema:
  z.ZodType<
    GetAllPromptsFiltersPromptsRequestRequestBodyQueryHideOperators$Outbound,
    z.ZodTypeDef,
    GetAllPromptsFiltersPromptsRequestRequestBodyQueryHideOperators
  > = z.union([
    GetAllPromptsHideOperatorsPromptsRequestRequestBodyQuery1$outboundSchema,
    GetAllPromptsHideOperatorsPromptsRequestRequestBodyQuery2$outboundSchema,
    GetAllPromptsHideOperatorsPromptsRequestRequestBodyQuery3$outboundSchema,
    GetAllPromptsHideOperatorsPromptsRequestRequestBodyQuery4$outboundSchema,
    GetAllPromptsHideOperatorsPromptsRequestRequestBodyQuery5$outboundSchema,
  ]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPromptsFiltersPromptsRequestRequestBodyQueryHideOperators$ {
  /** @deprecated use `GetAllPromptsFiltersPromptsRequestRequestBodyQueryHideOperators$inboundSchema` instead. */
  export const inboundSchema =
    GetAllPromptsFiltersPromptsRequestRequestBodyQueryHideOperators$inboundSchema;
  /** @deprecated use `GetAllPromptsFiltersPromptsRequestRequestBodyQueryHideOperators$outboundSchema` instead. */
  export const outboundSchema =
    GetAllPromptsFiltersPromptsRequestRequestBodyQueryHideOperators$outboundSchema;
  /** @deprecated use `GetAllPromptsFiltersPromptsRequestRequestBodyQueryHideOperators$Outbound` instead. */
  export type Outbound =
    GetAllPromptsFiltersPromptsRequestRequestBodyQueryHideOperators$Outbound;
}

export function getAllPromptsFiltersPromptsRequestRequestBodyQueryHideOperatorsToJSON(
  getAllPromptsFiltersPromptsRequestRequestBodyQueryHideOperators:
    GetAllPromptsFiltersPromptsRequestRequestBodyQueryHideOperators,
): string {
  return JSON.stringify(
    GetAllPromptsFiltersPromptsRequestRequestBodyQueryHideOperators$outboundSchema
      .parse(getAllPromptsFiltersPromptsRequestRequestBodyQueryHideOperators),
  );
}

export function getAllPromptsFiltersPromptsRequestRequestBodyQueryHideOperatorsFromJSON(
  jsonString: string,
): SafeParseResult<
  GetAllPromptsFiltersPromptsRequestRequestBodyQueryHideOperators,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetAllPromptsFiltersPromptsRequestRequestBodyQueryHideOperators$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'GetAllPromptsFiltersPromptsRequestRequestBodyQueryHideOperators' from JSON`,
  );
}

/** @internal */
export const GetAllPromptsFilters5$inboundSchema: z.ZodType<
  GetAllPromptsFilters5,
  z.ZodTypeDef,
  unknown
> = z.object({
  operator:
    GetAllPromptsFiltersPromptsRequestRequestBodyQueryOperator$inboundSchema,
  value: z.nullable(z.string()),
  type: GetAllPromptsFiltersPromptsRequestRequestBodyQueryType$inboundSchema,
  name: z.string(),
  path: z.string(),
  hideOperators: z.array(
    z.union([
      GetAllPromptsHideOperatorsPromptsRequestRequestBodyQuery1$inboundSchema,
      GetAllPromptsHideOperatorsPromptsRequestRequestBodyQuery2$inboundSchema,
      GetAllPromptsHideOperatorsPromptsRequestRequestBodyQuery3$inboundSchema,
      GetAllPromptsHideOperatorsPromptsRequestRequestBodyQuery4$inboundSchema,
      GetAllPromptsHideOperatorsPromptsRequestRequestBodyQuery5$inboundSchema,
    ]),
  ).optional(),
});

/** @internal */
export type GetAllPromptsFilters5$Outbound = {
  operator: string;
  value: string | null;
  type: string;
  name: string;
  path: string;
  hideOperators?: Array<string | string | string | string | string> | undefined;
};

/** @internal */
export const GetAllPromptsFilters5$outboundSchema: z.ZodType<
  GetAllPromptsFilters5$Outbound,
  z.ZodTypeDef,
  GetAllPromptsFilters5
> = z.object({
  operator:
    GetAllPromptsFiltersPromptsRequestRequestBodyQueryOperator$outboundSchema,
  value: z.nullable(z.string()),
  type: GetAllPromptsFiltersPromptsRequestRequestBodyQueryType$outboundSchema,
  name: z.string(),
  path: z.string(),
  hideOperators: z.array(
    z.union([
      GetAllPromptsHideOperatorsPromptsRequestRequestBodyQuery1$outboundSchema,
      GetAllPromptsHideOperatorsPromptsRequestRequestBodyQuery2$outboundSchema,
      GetAllPromptsHideOperatorsPromptsRequestRequestBodyQuery3$outboundSchema,
      GetAllPromptsHideOperatorsPromptsRequestRequestBodyQuery4$outboundSchema,
      GetAllPromptsHideOperatorsPromptsRequestRequestBodyQuery5$outboundSchema,
    ]),
  ).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPromptsFilters5$ {
  /** @deprecated use `GetAllPromptsFilters5$inboundSchema` instead. */
  export const inboundSchema = GetAllPromptsFilters5$inboundSchema;
  /** @deprecated use `GetAllPromptsFilters5$outboundSchema` instead. */
  export const outboundSchema = GetAllPromptsFilters5$outboundSchema;
  /** @deprecated use `GetAllPromptsFilters5$Outbound` instead. */
  export type Outbound = GetAllPromptsFilters5$Outbound;
}

export function getAllPromptsFilters5ToJSON(
  getAllPromptsFilters5: GetAllPromptsFilters5,
): string {
  return JSON.stringify(
    GetAllPromptsFilters5$outboundSchema.parse(getAllPromptsFilters5),
  );
}

export function getAllPromptsFilters5FromJSON(
  jsonString: string,
): SafeParseResult<GetAllPromptsFilters5, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetAllPromptsFilters5$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetAllPromptsFilters5' from JSON`,
  );
}

/** @internal */
export const GetAllPromptsFiltersPromptsRequestRequestBodyOperator$inboundSchema:
  z.ZodNativeEnum<
    typeof GetAllPromptsFiltersPromptsRequestRequestBodyOperator
  > = z.nativeEnum(GetAllPromptsFiltersPromptsRequestRequestBodyOperator);

/** @internal */
export const GetAllPromptsFiltersPromptsRequestRequestBodyOperator$outboundSchema:
  z.ZodNativeEnum<
    typeof GetAllPromptsFiltersPromptsRequestRequestBodyOperator
  > = GetAllPromptsFiltersPromptsRequestRequestBodyOperator$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPromptsFiltersPromptsRequestRequestBodyOperator$ {
  /** @deprecated use `GetAllPromptsFiltersPromptsRequestRequestBodyOperator$inboundSchema` instead. */
  export const inboundSchema =
    GetAllPromptsFiltersPromptsRequestRequestBodyOperator$inboundSchema;
  /** @deprecated use `GetAllPromptsFiltersPromptsRequestRequestBodyOperator$outboundSchema` instead. */
  export const outboundSchema =
    GetAllPromptsFiltersPromptsRequestRequestBodyOperator$outboundSchema;
}

/** @internal */
export const GetAllPromptsFiltersPromptsValue$inboundSchema: z.ZodType<
  GetAllPromptsFiltersPromptsValue,
  z.ZodTypeDef,
  unknown
> = z.union([z.number(), z.array(z.number())]);

/** @internal */
export type GetAllPromptsFiltersPromptsValue$Outbound = number | Array<number>;

/** @internal */
export const GetAllPromptsFiltersPromptsValue$outboundSchema: z.ZodType<
  GetAllPromptsFiltersPromptsValue$Outbound,
  z.ZodTypeDef,
  GetAllPromptsFiltersPromptsValue
> = z.union([z.number(), z.array(z.number())]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPromptsFiltersPromptsValue$ {
  /** @deprecated use `GetAllPromptsFiltersPromptsValue$inboundSchema` instead. */
  export const inboundSchema = GetAllPromptsFiltersPromptsValue$inboundSchema;
  /** @deprecated use `GetAllPromptsFiltersPromptsValue$outboundSchema` instead. */
  export const outboundSchema = GetAllPromptsFiltersPromptsValue$outboundSchema;
  /** @deprecated use `GetAllPromptsFiltersPromptsValue$Outbound` instead. */
  export type Outbound = GetAllPromptsFiltersPromptsValue$Outbound;
}

export function getAllPromptsFiltersPromptsValueToJSON(
  getAllPromptsFiltersPromptsValue: GetAllPromptsFiltersPromptsValue,
): string {
  return JSON.stringify(
    GetAllPromptsFiltersPromptsValue$outboundSchema.parse(
      getAllPromptsFiltersPromptsValue,
    ),
  );
}

export function getAllPromptsFiltersPromptsValueFromJSON(
  jsonString: string,
): SafeParseResult<GetAllPromptsFiltersPromptsValue, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetAllPromptsFiltersPromptsValue$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetAllPromptsFiltersPromptsValue' from JSON`,
  );
}

/** @internal */
export const GetAllPromptsFiltersPromptsRequestRequestBodyType$inboundSchema:
  z.ZodNativeEnum<typeof GetAllPromptsFiltersPromptsRequestRequestBodyType> = z
    .nativeEnum(GetAllPromptsFiltersPromptsRequestRequestBodyType);

/** @internal */
export const GetAllPromptsFiltersPromptsRequestRequestBodyType$outboundSchema:
  z.ZodNativeEnum<typeof GetAllPromptsFiltersPromptsRequestRequestBodyType> =
    GetAllPromptsFiltersPromptsRequestRequestBodyType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPromptsFiltersPromptsRequestRequestBodyType$ {
  /** @deprecated use `GetAllPromptsFiltersPromptsRequestRequestBodyType$inboundSchema` instead. */
  export const inboundSchema =
    GetAllPromptsFiltersPromptsRequestRequestBodyType$inboundSchema;
  /** @deprecated use `GetAllPromptsFiltersPromptsRequestRequestBodyType$outboundSchema` instead. */
  export const outboundSchema =
    GetAllPromptsFiltersPromptsRequestRequestBodyType$outboundSchema;
}

/** @internal */
export const GetAllPromptsHideOperatorsPromptsRequestRequestBody5$inboundSchema:
  z.ZodNativeEnum<typeof GetAllPromptsHideOperatorsPromptsRequestRequestBody5> =
    z.nativeEnum(GetAllPromptsHideOperatorsPromptsRequestRequestBody5);

/** @internal */
export const GetAllPromptsHideOperatorsPromptsRequestRequestBody5$outboundSchema:
  z.ZodNativeEnum<typeof GetAllPromptsHideOperatorsPromptsRequestRequestBody5> =
    GetAllPromptsHideOperatorsPromptsRequestRequestBody5$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPromptsHideOperatorsPromptsRequestRequestBody5$ {
  /** @deprecated use `GetAllPromptsHideOperatorsPromptsRequestRequestBody5$inboundSchema` instead. */
  export const inboundSchema =
    GetAllPromptsHideOperatorsPromptsRequestRequestBody5$inboundSchema;
  /** @deprecated use `GetAllPromptsHideOperatorsPromptsRequestRequestBody5$outboundSchema` instead. */
  export const outboundSchema =
    GetAllPromptsHideOperatorsPromptsRequestRequestBody5$outboundSchema;
}

/** @internal */
export const GetAllPromptsHideOperatorsPromptsRequestRequestBody4$inboundSchema:
  z.ZodNativeEnum<typeof GetAllPromptsHideOperatorsPromptsRequestRequestBody4> =
    z.nativeEnum(GetAllPromptsHideOperatorsPromptsRequestRequestBody4);

/** @internal */
export const GetAllPromptsHideOperatorsPromptsRequestRequestBody4$outboundSchema:
  z.ZodNativeEnum<typeof GetAllPromptsHideOperatorsPromptsRequestRequestBody4> =
    GetAllPromptsHideOperatorsPromptsRequestRequestBody4$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPromptsHideOperatorsPromptsRequestRequestBody4$ {
  /** @deprecated use `GetAllPromptsHideOperatorsPromptsRequestRequestBody4$inboundSchema` instead. */
  export const inboundSchema =
    GetAllPromptsHideOperatorsPromptsRequestRequestBody4$inboundSchema;
  /** @deprecated use `GetAllPromptsHideOperatorsPromptsRequestRequestBody4$outboundSchema` instead. */
  export const outboundSchema =
    GetAllPromptsHideOperatorsPromptsRequestRequestBody4$outboundSchema;
}

/** @internal */
export const GetAllPromptsHideOperatorsPromptsRequestRequestBody3$inboundSchema:
  z.ZodNativeEnum<typeof GetAllPromptsHideOperatorsPromptsRequestRequestBody3> =
    z.nativeEnum(GetAllPromptsHideOperatorsPromptsRequestRequestBody3);

/** @internal */
export const GetAllPromptsHideOperatorsPromptsRequestRequestBody3$outboundSchema:
  z.ZodNativeEnum<typeof GetAllPromptsHideOperatorsPromptsRequestRequestBody3> =
    GetAllPromptsHideOperatorsPromptsRequestRequestBody3$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPromptsHideOperatorsPromptsRequestRequestBody3$ {
  /** @deprecated use `GetAllPromptsHideOperatorsPromptsRequestRequestBody3$inboundSchema` instead. */
  export const inboundSchema =
    GetAllPromptsHideOperatorsPromptsRequestRequestBody3$inboundSchema;
  /** @deprecated use `GetAllPromptsHideOperatorsPromptsRequestRequestBody3$outboundSchema` instead. */
  export const outboundSchema =
    GetAllPromptsHideOperatorsPromptsRequestRequestBody3$outboundSchema;
}

/** @internal */
export const GetAllPromptsHideOperatorsPromptsRequestRequestBody2$inboundSchema:
  z.ZodNativeEnum<typeof GetAllPromptsHideOperatorsPromptsRequestRequestBody2> =
    z.nativeEnum(GetAllPromptsHideOperatorsPromptsRequestRequestBody2);

/** @internal */
export const GetAllPromptsHideOperatorsPromptsRequestRequestBody2$outboundSchema:
  z.ZodNativeEnum<typeof GetAllPromptsHideOperatorsPromptsRequestRequestBody2> =
    GetAllPromptsHideOperatorsPromptsRequestRequestBody2$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPromptsHideOperatorsPromptsRequestRequestBody2$ {
  /** @deprecated use `GetAllPromptsHideOperatorsPromptsRequestRequestBody2$inboundSchema` instead. */
  export const inboundSchema =
    GetAllPromptsHideOperatorsPromptsRequestRequestBody2$inboundSchema;
  /** @deprecated use `GetAllPromptsHideOperatorsPromptsRequestRequestBody2$outboundSchema` instead. */
  export const outboundSchema =
    GetAllPromptsHideOperatorsPromptsRequestRequestBody2$outboundSchema;
}

/** @internal */
export const GetAllPromptsHideOperatorsPromptsRequestRequestBody1$inboundSchema:
  z.ZodNativeEnum<typeof GetAllPromptsHideOperatorsPromptsRequestRequestBody1> =
    z.nativeEnum(GetAllPromptsHideOperatorsPromptsRequestRequestBody1);

/** @internal */
export const GetAllPromptsHideOperatorsPromptsRequestRequestBody1$outboundSchema:
  z.ZodNativeEnum<typeof GetAllPromptsHideOperatorsPromptsRequestRequestBody1> =
    GetAllPromptsHideOperatorsPromptsRequestRequestBody1$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPromptsHideOperatorsPromptsRequestRequestBody1$ {
  /** @deprecated use `GetAllPromptsHideOperatorsPromptsRequestRequestBody1$inboundSchema` instead. */
  export const inboundSchema =
    GetAllPromptsHideOperatorsPromptsRequestRequestBody1$inboundSchema;
  /** @deprecated use `GetAllPromptsHideOperatorsPromptsRequestRequestBody1$outboundSchema` instead. */
  export const outboundSchema =
    GetAllPromptsHideOperatorsPromptsRequestRequestBody1$outboundSchema;
}

/** @internal */
export const GetAllPromptsFiltersPromptsRequestRequestBodyHideOperators$inboundSchema:
  z.ZodType<
    GetAllPromptsFiltersPromptsRequestRequestBodyHideOperators,
    z.ZodTypeDef,
    unknown
  > = z.union([
    GetAllPromptsHideOperatorsPromptsRequestRequestBody1$inboundSchema,
    GetAllPromptsHideOperatorsPromptsRequestRequestBody2$inboundSchema,
    GetAllPromptsHideOperatorsPromptsRequestRequestBody3$inboundSchema,
    GetAllPromptsHideOperatorsPromptsRequestRequestBody4$inboundSchema,
    GetAllPromptsHideOperatorsPromptsRequestRequestBody5$inboundSchema,
  ]);

/** @internal */
export type GetAllPromptsFiltersPromptsRequestRequestBodyHideOperators$Outbound =
  | string
  | string
  | string
  | string
  | string;

/** @internal */
export const GetAllPromptsFiltersPromptsRequestRequestBodyHideOperators$outboundSchema:
  z.ZodType<
    GetAllPromptsFiltersPromptsRequestRequestBodyHideOperators$Outbound,
    z.ZodTypeDef,
    GetAllPromptsFiltersPromptsRequestRequestBodyHideOperators
  > = z.union([
    GetAllPromptsHideOperatorsPromptsRequestRequestBody1$outboundSchema,
    GetAllPromptsHideOperatorsPromptsRequestRequestBody2$outboundSchema,
    GetAllPromptsHideOperatorsPromptsRequestRequestBody3$outboundSchema,
    GetAllPromptsHideOperatorsPromptsRequestRequestBody4$outboundSchema,
    GetAllPromptsHideOperatorsPromptsRequestRequestBody5$outboundSchema,
  ]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPromptsFiltersPromptsRequestRequestBodyHideOperators$ {
  /** @deprecated use `GetAllPromptsFiltersPromptsRequestRequestBodyHideOperators$inboundSchema` instead. */
  export const inboundSchema =
    GetAllPromptsFiltersPromptsRequestRequestBodyHideOperators$inboundSchema;
  /** @deprecated use `GetAllPromptsFiltersPromptsRequestRequestBodyHideOperators$outboundSchema` instead. */
  export const outboundSchema =
    GetAllPromptsFiltersPromptsRequestRequestBodyHideOperators$outboundSchema;
  /** @deprecated use `GetAllPromptsFiltersPromptsRequestRequestBodyHideOperators$Outbound` instead. */
  export type Outbound =
    GetAllPromptsFiltersPromptsRequestRequestBodyHideOperators$Outbound;
}

export function getAllPromptsFiltersPromptsRequestRequestBodyHideOperatorsToJSON(
  getAllPromptsFiltersPromptsRequestRequestBodyHideOperators:
    GetAllPromptsFiltersPromptsRequestRequestBodyHideOperators,
): string {
  return JSON.stringify(
    GetAllPromptsFiltersPromptsRequestRequestBodyHideOperators$outboundSchema
      .parse(getAllPromptsFiltersPromptsRequestRequestBodyHideOperators),
  );
}

export function getAllPromptsFiltersPromptsRequestRequestBodyHideOperatorsFromJSON(
  jsonString: string,
): SafeParseResult<
  GetAllPromptsFiltersPromptsRequestRequestBodyHideOperators,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetAllPromptsFiltersPromptsRequestRequestBodyHideOperators$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'GetAllPromptsFiltersPromptsRequestRequestBodyHideOperators' from JSON`,
  );
}

/** @internal */
export const GetAllPromptsFilters4$inboundSchema: z.ZodType<
  GetAllPromptsFilters4,
  z.ZodTypeDef,
  unknown
> = z.object({
  operator: GetAllPromptsFiltersPromptsRequestRequestBodyOperator$inboundSchema,
  value: z.nullable(z.union([z.number(), z.array(z.number())])),
  type: GetAllPromptsFiltersPromptsRequestRequestBodyType$inboundSchema,
  name: z.string(),
  path: z.string(),
  hideOperators: z.array(
    z.union([
      GetAllPromptsHideOperatorsPromptsRequestRequestBody1$inboundSchema,
      GetAllPromptsHideOperatorsPromptsRequestRequestBody2$inboundSchema,
      GetAllPromptsHideOperatorsPromptsRequestRequestBody3$inboundSchema,
      GetAllPromptsHideOperatorsPromptsRequestRequestBody4$inboundSchema,
      GetAllPromptsHideOperatorsPromptsRequestRequestBody5$inboundSchema,
    ]),
  ).optional(),
});

/** @internal */
export type GetAllPromptsFilters4$Outbound = {
  operator: string;
  value: number | Array<number> | null;
  type: string;
  name: string;
  path: string;
  hideOperators?: Array<string | string | string | string | string> | undefined;
};

/** @internal */
export const GetAllPromptsFilters4$outboundSchema: z.ZodType<
  GetAllPromptsFilters4$Outbound,
  z.ZodTypeDef,
  GetAllPromptsFilters4
> = z.object({
  operator:
    GetAllPromptsFiltersPromptsRequestRequestBodyOperator$outboundSchema,
  value: z.nullable(z.union([z.number(), z.array(z.number())])),
  type: GetAllPromptsFiltersPromptsRequestRequestBodyType$outboundSchema,
  name: z.string(),
  path: z.string(),
  hideOperators: z.array(
    z.union([
      GetAllPromptsHideOperatorsPromptsRequestRequestBody1$outboundSchema,
      GetAllPromptsHideOperatorsPromptsRequestRequestBody2$outboundSchema,
      GetAllPromptsHideOperatorsPromptsRequestRequestBody3$outboundSchema,
      GetAllPromptsHideOperatorsPromptsRequestRequestBody4$outboundSchema,
      GetAllPromptsHideOperatorsPromptsRequestRequestBody5$outboundSchema,
    ]),
  ).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPromptsFilters4$ {
  /** @deprecated use `GetAllPromptsFilters4$inboundSchema` instead. */
  export const inboundSchema = GetAllPromptsFilters4$inboundSchema;
  /** @deprecated use `GetAllPromptsFilters4$outboundSchema` instead. */
  export const outboundSchema = GetAllPromptsFilters4$outboundSchema;
  /** @deprecated use `GetAllPromptsFilters4$Outbound` instead. */
  export type Outbound = GetAllPromptsFilters4$Outbound;
}

export function getAllPromptsFilters4ToJSON(
  getAllPromptsFilters4: GetAllPromptsFilters4,
): string {
  return JSON.stringify(
    GetAllPromptsFilters4$outboundSchema.parse(getAllPromptsFilters4),
  );
}

export function getAllPromptsFilters4FromJSON(
  jsonString: string,
): SafeParseResult<GetAllPromptsFilters4, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetAllPromptsFilters4$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetAllPromptsFilters4' from JSON`,
  );
}

/** @internal */
export const GetAllPromptsFiltersPromptsRequestOperator$inboundSchema:
  z.ZodNativeEnum<typeof GetAllPromptsFiltersPromptsRequestOperator> = z
    .nativeEnum(GetAllPromptsFiltersPromptsRequestOperator);

/** @internal */
export const GetAllPromptsFiltersPromptsRequestOperator$outboundSchema:
  z.ZodNativeEnum<typeof GetAllPromptsFiltersPromptsRequestOperator> =
    GetAllPromptsFiltersPromptsRequestOperator$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPromptsFiltersPromptsRequestOperator$ {
  /** @deprecated use `GetAllPromptsFiltersPromptsRequestOperator$inboundSchema` instead. */
  export const inboundSchema =
    GetAllPromptsFiltersPromptsRequestOperator$inboundSchema;
  /** @deprecated use `GetAllPromptsFiltersPromptsRequestOperator$outboundSchema` instead. */
  export const outboundSchema =
    GetAllPromptsFiltersPromptsRequestOperator$outboundSchema;
}

/** @internal */
export const GetAllPromptsUnit2$inboundSchema: z.ZodNativeEnum<
  typeof GetAllPromptsUnit2
> = z.nativeEnum(GetAllPromptsUnit2);

/** @internal */
export const GetAllPromptsUnit2$outboundSchema: z.ZodNativeEnum<
  typeof GetAllPromptsUnit2
> = GetAllPromptsUnit2$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPromptsUnit2$ {
  /** @deprecated use `GetAllPromptsUnit2$inboundSchema` instead. */
  export const inboundSchema = GetAllPromptsUnit2$inboundSchema;
  /** @deprecated use `GetAllPromptsUnit2$outboundSchema` instead. */
  export const outboundSchema = GetAllPromptsUnit2$outboundSchema;
}

/** @internal */
export const GetAllPromptsUnit1$inboundSchema: z.ZodNativeEnum<
  typeof GetAllPromptsUnit1
> = z.nativeEnum(GetAllPromptsUnit1);

/** @internal */
export const GetAllPromptsUnit1$outboundSchema: z.ZodNativeEnum<
  typeof GetAllPromptsUnit1
> = GetAllPromptsUnit1$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPromptsUnit1$ {
  /** @deprecated use `GetAllPromptsUnit1$inboundSchema` instead. */
  export const inboundSchema = GetAllPromptsUnit1$inboundSchema;
  /** @deprecated use `GetAllPromptsUnit1$outboundSchema` instead. */
  export const outboundSchema = GetAllPromptsUnit1$outboundSchema;
}

/** @internal */
export const FiltersUnit$inboundSchema: z.ZodType<
  FiltersUnit,
  z.ZodTypeDef,
  unknown
> = z.union([
  GetAllPromptsUnit1$inboundSchema,
  GetAllPromptsUnit2$inboundSchema,
]);

/** @internal */
export type FiltersUnit$Outbound = string | string;

/** @internal */
export const FiltersUnit$outboundSchema: z.ZodType<
  FiltersUnit$Outbound,
  z.ZodTypeDef,
  FiltersUnit
> = z.union([
  GetAllPromptsUnit1$outboundSchema,
  GetAllPromptsUnit2$outboundSchema,
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FiltersUnit$ {
  /** @deprecated use `FiltersUnit$inboundSchema` instead. */
  export const inboundSchema = FiltersUnit$inboundSchema;
  /** @deprecated use `FiltersUnit$outboundSchema` instead. */
  export const outboundSchema = FiltersUnit$outboundSchema;
  /** @deprecated use `FiltersUnit$Outbound` instead. */
  export type Outbound = FiltersUnit$Outbound;
}

export function filtersUnitToJSON(filtersUnit: FiltersUnit): string {
  return JSON.stringify(FiltersUnit$outboundSchema.parse(filtersUnit));
}

export function filtersUnitFromJSON(
  jsonString: string,
): SafeParseResult<FiltersUnit, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => FiltersUnit$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'FiltersUnit' from JSON`,
  );
}

/** @internal */
export const FiltersRelativeTime$inboundSchema: z.ZodNativeEnum<
  typeof FiltersRelativeTime
> = z.nativeEnum(FiltersRelativeTime);

/** @internal */
export const FiltersRelativeTime$outboundSchema: z.ZodNativeEnum<
  typeof FiltersRelativeTime
> = FiltersRelativeTime$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FiltersRelativeTime$ {
  /** @deprecated use `FiltersRelativeTime$inboundSchema` instead. */
  export const inboundSchema = FiltersRelativeTime$inboundSchema;
  /** @deprecated use `FiltersRelativeTime$outboundSchema` instead. */
  export const outboundSchema = FiltersRelativeTime$outboundSchema;
}

/** @internal */
export const GetAllPromptsFiltersDirection$inboundSchema: z.ZodNativeEnum<
  typeof GetAllPromptsFiltersDirection
> = z.nativeEnum(GetAllPromptsFiltersDirection);

/** @internal */
export const GetAllPromptsFiltersDirection$outboundSchema: z.ZodNativeEnum<
  typeof GetAllPromptsFiltersDirection
> = GetAllPromptsFiltersDirection$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPromptsFiltersDirection$ {
  /** @deprecated use `GetAllPromptsFiltersDirection$inboundSchema` instead. */
  export const inboundSchema = GetAllPromptsFiltersDirection$inboundSchema;
  /** @deprecated use `GetAllPromptsFiltersDirection$outboundSchema` instead. */
  export const outboundSchema = GetAllPromptsFiltersDirection$outboundSchema;
}

/** @internal */
export const FiltersCriteria$inboundSchema: z.ZodType<
  FiltersCriteria,
  z.ZodTypeDef,
  unknown
> = z.object({
  unit: z.union([
    GetAllPromptsUnit1$inboundSchema,
    GetAllPromptsUnit2$inboundSchema,
  ]).optional(),
  count: z.nullable(z.number()).optional(),
  relativeTime: FiltersRelativeTime$inboundSchema.optional(),
  customDate: z.nullable(z.string()).optional(),
  direction: GetAllPromptsFiltersDirection$inboundSchema.optional(),
  startDate: z.nullable(z.string()).optional(),
  endDate: z.nullable(z.string()).optional(),
});

/** @internal */
export type FiltersCriteria$Outbound = {
  unit?: string | string | undefined;
  count?: number | null | undefined;
  relativeTime?: string | undefined;
  customDate?: string | null | undefined;
  direction?: string | undefined;
  startDate?: string | null | undefined;
  endDate?: string | null | undefined;
};

/** @internal */
export const FiltersCriteria$outboundSchema: z.ZodType<
  FiltersCriteria$Outbound,
  z.ZodTypeDef,
  FiltersCriteria
> = z.object({
  unit: z.union([
    GetAllPromptsUnit1$outboundSchema,
    GetAllPromptsUnit2$outboundSchema,
  ]).optional(),
  count: z.nullable(z.number()).optional(),
  relativeTime: FiltersRelativeTime$outboundSchema.optional(),
  customDate: z.nullable(z.string()).optional(),
  direction: GetAllPromptsFiltersDirection$outboundSchema.optional(),
  startDate: z.nullable(z.string()).optional(),
  endDate: z.nullable(z.string()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FiltersCriteria$ {
  /** @deprecated use `FiltersCriteria$inboundSchema` instead. */
  export const inboundSchema = FiltersCriteria$inboundSchema;
  /** @deprecated use `FiltersCriteria$outboundSchema` instead. */
  export const outboundSchema = FiltersCriteria$outboundSchema;
  /** @deprecated use `FiltersCriteria$Outbound` instead. */
  export type Outbound = FiltersCriteria$Outbound;
}

export function filtersCriteriaToJSON(
  filtersCriteria: FiltersCriteria,
): string {
  return JSON.stringify(FiltersCriteria$outboundSchema.parse(filtersCriteria));
}

export function filtersCriteriaFromJSON(
  jsonString: string,
): SafeParseResult<FiltersCriteria, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => FiltersCriteria$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'FiltersCriteria' from JSON`,
  );
}

/** @internal */
export const FiltersMode$inboundSchema: z.ZodNativeEnum<typeof FiltersMode> = z
  .nativeEnum(FiltersMode);

/** @internal */
export const FiltersMode$outboundSchema: z.ZodNativeEnum<typeof FiltersMode> =
  FiltersMode$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FiltersMode$ {
  /** @deprecated use `FiltersMode$inboundSchema` instead. */
  export const inboundSchema = FiltersMode$inboundSchema;
  /** @deprecated use `FiltersMode$outboundSchema` instead. */
  export const outboundSchema = FiltersMode$outboundSchema;
}

/** @internal */
export const GetAllPromptsFiltersValue$inboundSchema: z.ZodType<
  GetAllPromptsFiltersValue,
  z.ZodTypeDef,
  unknown
> = z.object({
  criteria: z.nullable(z.lazy(() => FiltersCriteria$inboundSchema)),
  mode: FiltersMode$inboundSchema,
});

/** @internal */
export type GetAllPromptsFiltersValue$Outbound = {
  criteria: FiltersCriteria$Outbound | null;
  mode: string;
};

/** @internal */
export const GetAllPromptsFiltersValue$outboundSchema: z.ZodType<
  GetAllPromptsFiltersValue$Outbound,
  z.ZodTypeDef,
  GetAllPromptsFiltersValue
> = z.object({
  criteria: z.nullable(z.lazy(() => FiltersCriteria$outboundSchema)),
  mode: FiltersMode$outboundSchema,
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPromptsFiltersValue$ {
  /** @deprecated use `GetAllPromptsFiltersValue$inboundSchema` instead. */
  export const inboundSchema = GetAllPromptsFiltersValue$inboundSchema;
  /** @deprecated use `GetAllPromptsFiltersValue$outboundSchema` instead. */
  export const outboundSchema = GetAllPromptsFiltersValue$outboundSchema;
  /** @deprecated use `GetAllPromptsFiltersValue$Outbound` instead. */
  export type Outbound = GetAllPromptsFiltersValue$Outbound;
}

export function getAllPromptsFiltersValueToJSON(
  getAllPromptsFiltersValue: GetAllPromptsFiltersValue,
): string {
  return JSON.stringify(
    GetAllPromptsFiltersValue$outboundSchema.parse(getAllPromptsFiltersValue),
  );
}

export function getAllPromptsFiltersValueFromJSON(
  jsonString: string,
): SafeParseResult<GetAllPromptsFiltersValue, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetAllPromptsFiltersValue$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetAllPromptsFiltersValue' from JSON`,
  );
}

/** @internal */
export const GetAllPromptsFiltersPromptsRequestType$inboundSchema:
  z.ZodNativeEnum<typeof GetAllPromptsFiltersPromptsRequestType> = z.nativeEnum(
    GetAllPromptsFiltersPromptsRequestType,
  );

/** @internal */
export const GetAllPromptsFiltersPromptsRequestType$outboundSchema:
  z.ZodNativeEnum<typeof GetAllPromptsFiltersPromptsRequestType> =
    GetAllPromptsFiltersPromptsRequestType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPromptsFiltersPromptsRequestType$ {
  /** @deprecated use `GetAllPromptsFiltersPromptsRequestType$inboundSchema` instead. */
  export const inboundSchema =
    GetAllPromptsFiltersPromptsRequestType$inboundSchema;
  /** @deprecated use `GetAllPromptsFiltersPromptsRequestType$outboundSchema` instead. */
  export const outboundSchema =
    GetAllPromptsFiltersPromptsRequestType$outboundSchema;
}

/** @internal */
export const GetAllPromptsHideOperatorsPromptsRequest5$inboundSchema:
  z.ZodNativeEnum<typeof GetAllPromptsHideOperatorsPromptsRequest5> = z
    .nativeEnum(GetAllPromptsHideOperatorsPromptsRequest5);

/** @internal */
export const GetAllPromptsHideOperatorsPromptsRequest5$outboundSchema:
  z.ZodNativeEnum<typeof GetAllPromptsHideOperatorsPromptsRequest5> =
    GetAllPromptsHideOperatorsPromptsRequest5$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPromptsHideOperatorsPromptsRequest5$ {
  /** @deprecated use `GetAllPromptsHideOperatorsPromptsRequest5$inboundSchema` instead. */
  export const inboundSchema =
    GetAllPromptsHideOperatorsPromptsRequest5$inboundSchema;
  /** @deprecated use `GetAllPromptsHideOperatorsPromptsRequest5$outboundSchema` instead. */
  export const outboundSchema =
    GetAllPromptsHideOperatorsPromptsRequest5$outboundSchema;
}

/** @internal */
export const GetAllPromptsHideOperatorsPromptsRequest4$inboundSchema:
  z.ZodNativeEnum<typeof GetAllPromptsHideOperatorsPromptsRequest4> = z
    .nativeEnum(GetAllPromptsHideOperatorsPromptsRequest4);

/** @internal */
export const GetAllPromptsHideOperatorsPromptsRequest4$outboundSchema:
  z.ZodNativeEnum<typeof GetAllPromptsHideOperatorsPromptsRequest4> =
    GetAllPromptsHideOperatorsPromptsRequest4$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPromptsHideOperatorsPromptsRequest4$ {
  /** @deprecated use `GetAllPromptsHideOperatorsPromptsRequest4$inboundSchema` instead. */
  export const inboundSchema =
    GetAllPromptsHideOperatorsPromptsRequest4$inboundSchema;
  /** @deprecated use `GetAllPromptsHideOperatorsPromptsRequest4$outboundSchema` instead. */
  export const outboundSchema =
    GetAllPromptsHideOperatorsPromptsRequest4$outboundSchema;
}

/** @internal */
export const GetAllPromptsHideOperatorsPromptsRequest3$inboundSchema:
  z.ZodNativeEnum<typeof GetAllPromptsHideOperatorsPromptsRequest3> = z
    .nativeEnum(GetAllPromptsHideOperatorsPromptsRequest3);

/** @internal */
export const GetAllPromptsHideOperatorsPromptsRequest3$outboundSchema:
  z.ZodNativeEnum<typeof GetAllPromptsHideOperatorsPromptsRequest3> =
    GetAllPromptsHideOperatorsPromptsRequest3$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPromptsHideOperatorsPromptsRequest3$ {
  /** @deprecated use `GetAllPromptsHideOperatorsPromptsRequest3$inboundSchema` instead. */
  export const inboundSchema =
    GetAllPromptsHideOperatorsPromptsRequest3$inboundSchema;
  /** @deprecated use `GetAllPromptsHideOperatorsPromptsRequest3$outboundSchema` instead. */
  export const outboundSchema =
    GetAllPromptsHideOperatorsPromptsRequest3$outboundSchema;
}

/** @internal */
export const GetAllPromptsHideOperatorsPromptsRequest2$inboundSchema:
  z.ZodNativeEnum<typeof GetAllPromptsHideOperatorsPromptsRequest2> = z
    .nativeEnum(GetAllPromptsHideOperatorsPromptsRequest2);

/** @internal */
export const GetAllPromptsHideOperatorsPromptsRequest2$outboundSchema:
  z.ZodNativeEnum<typeof GetAllPromptsHideOperatorsPromptsRequest2> =
    GetAllPromptsHideOperatorsPromptsRequest2$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPromptsHideOperatorsPromptsRequest2$ {
  /** @deprecated use `GetAllPromptsHideOperatorsPromptsRequest2$inboundSchema` instead. */
  export const inboundSchema =
    GetAllPromptsHideOperatorsPromptsRequest2$inboundSchema;
  /** @deprecated use `GetAllPromptsHideOperatorsPromptsRequest2$outboundSchema` instead. */
  export const outboundSchema =
    GetAllPromptsHideOperatorsPromptsRequest2$outboundSchema;
}

/** @internal */
export const GetAllPromptsHideOperatorsPromptsRequest1$inboundSchema:
  z.ZodNativeEnum<typeof GetAllPromptsHideOperatorsPromptsRequest1> = z
    .nativeEnum(GetAllPromptsHideOperatorsPromptsRequest1);

/** @internal */
export const GetAllPromptsHideOperatorsPromptsRequest1$outboundSchema:
  z.ZodNativeEnum<typeof GetAllPromptsHideOperatorsPromptsRequest1> =
    GetAllPromptsHideOperatorsPromptsRequest1$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPromptsHideOperatorsPromptsRequest1$ {
  /** @deprecated use `GetAllPromptsHideOperatorsPromptsRequest1$inboundSchema` instead. */
  export const inboundSchema =
    GetAllPromptsHideOperatorsPromptsRequest1$inboundSchema;
  /** @deprecated use `GetAllPromptsHideOperatorsPromptsRequest1$outboundSchema` instead. */
  export const outboundSchema =
    GetAllPromptsHideOperatorsPromptsRequest1$outboundSchema;
}

/** @internal */
export const GetAllPromptsFiltersPromptsRequestHideOperators$inboundSchema:
  z.ZodType<
    GetAllPromptsFiltersPromptsRequestHideOperators,
    z.ZodTypeDef,
    unknown
  > = z.union([
    GetAllPromptsHideOperatorsPromptsRequest1$inboundSchema,
    GetAllPromptsHideOperatorsPromptsRequest2$inboundSchema,
    GetAllPromptsHideOperatorsPromptsRequest3$inboundSchema,
    GetAllPromptsHideOperatorsPromptsRequest4$inboundSchema,
    GetAllPromptsHideOperatorsPromptsRequest5$inboundSchema,
  ]);

/** @internal */
export type GetAllPromptsFiltersPromptsRequestHideOperators$Outbound =
  | string
  | string
  | string
  | string
  | string;

/** @internal */
export const GetAllPromptsFiltersPromptsRequestHideOperators$outboundSchema:
  z.ZodType<
    GetAllPromptsFiltersPromptsRequestHideOperators$Outbound,
    z.ZodTypeDef,
    GetAllPromptsFiltersPromptsRequestHideOperators
  > = z.union([
    GetAllPromptsHideOperatorsPromptsRequest1$outboundSchema,
    GetAllPromptsHideOperatorsPromptsRequest2$outboundSchema,
    GetAllPromptsHideOperatorsPromptsRequest3$outboundSchema,
    GetAllPromptsHideOperatorsPromptsRequest4$outboundSchema,
    GetAllPromptsHideOperatorsPromptsRequest5$outboundSchema,
  ]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPromptsFiltersPromptsRequestHideOperators$ {
  /** @deprecated use `GetAllPromptsFiltersPromptsRequestHideOperators$inboundSchema` instead. */
  export const inboundSchema =
    GetAllPromptsFiltersPromptsRequestHideOperators$inboundSchema;
  /** @deprecated use `GetAllPromptsFiltersPromptsRequestHideOperators$outboundSchema` instead. */
  export const outboundSchema =
    GetAllPromptsFiltersPromptsRequestHideOperators$outboundSchema;
  /** @deprecated use `GetAllPromptsFiltersPromptsRequestHideOperators$Outbound` instead. */
  export type Outbound =
    GetAllPromptsFiltersPromptsRequestHideOperators$Outbound;
}

export function getAllPromptsFiltersPromptsRequestHideOperatorsToJSON(
  getAllPromptsFiltersPromptsRequestHideOperators:
    GetAllPromptsFiltersPromptsRequestHideOperators,
): string {
  return JSON.stringify(
    GetAllPromptsFiltersPromptsRequestHideOperators$outboundSchema.parse(
      getAllPromptsFiltersPromptsRequestHideOperators,
    ),
  );
}

export function getAllPromptsFiltersPromptsRequestHideOperatorsFromJSON(
  jsonString: string,
): SafeParseResult<
  GetAllPromptsFiltersPromptsRequestHideOperators,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetAllPromptsFiltersPromptsRequestHideOperators$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'GetAllPromptsFiltersPromptsRequestHideOperators' from JSON`,
  );
}

/** @internal */
export const GetAllPromptsFilters3$inboundSchema: z.ZodType<
  GetAllPromptsFilters3,
  z.ZodTypeDef,
  unknown
> = z.object({
  operator: GetAllPromptsFiltersPromptsRequestOperator$inboundSchema,
  value: z.lazy(() => GetAllPromptsFiltersValue$inboundSchema),
  type: GetAllPromptsFiltersPromptsRequestType$inboundSchema,
  name: z.string(),
  path: z.string(),
  hideOperators: z.array(
    z.union([
      GetAllPromptsHideOperatorsPromptsRequest1$inboundSchema,
      GetAllPromptsHideOperatorsPromptsRequest2$inboundSchema,
      GetAllPromptsHideOperatorsPromptsRequest3$inboundSchema,
      GetAllPromptsHideOperatorsPromptsRequest4$inboundSchema,
      GetAllPromptsHideOperatorsPromptsRequest5$inboundSchema,
    ]),
  ).optional(),
});

/** @internal */
export type GetAllPromptsFilters3$Outbound = {
  operator: string;
  value: GetAllPromptsFiltersValue$Outbound;
  type: string;
  name: string;
  path: string;
  hideOperators?: Array<string | string | string | string | string> | undefined;
};

/** @internal */
export const GetAllPromptsFilters3$outboundSchema: z.ZodType<
  GetAllPromptsFilters3$Outbound,
  z.ZodTypeDef,
  GetAllPromptsFilters3
> = z.object({
  operator: GetAllPromptsFiltersPromptsRequestOperator$outboundSchema,
  value: z.lazy(() => GetAllPromptsFiltersValue$outboundSchema),
  type: GetAllPromptsFiltersPromptsRequestType$outboundSchema,
  name: z.string(),
  path: z.string(),
  hideOperators: z.array(
    z.union([
      GetAllPromptsHideOperatorsPromptsRequest1$outboundSchema,
      GetAllPromptsHideOperatorsPromptsRequest2$outboundSchema,
      GetAllPromptsHideOperatorsPromptsRequest3$outboundSchema,
      GetAllPromptsHideOperatorsPromptsRequest4$outboundSchema,
      GetAllPromptsHideOperatorsPromptsRequest5$outboundSchema,
    ]),
  ).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPromptsFilters3$ {
  /** @deprecated use `GetAllPromptsFilters3$inboundSchema` instead. */
  export const inboundSchema = GetAllPromptsFilters3$inboundSchema;
  /** @deprecated use `GetAllPromptsFilters3$outboundSchema` instead. */
  export const outboundSchema = GetAllPromptsFilters3$outboundSchema;
  /** @deprecated use `GetAllPromptsFilters3$Outbound` instead. */
  export type Outbound = GetAllPromptsFilters3$Outbound;
}

export function getAllPromptsFilters3ToJSON(
  getAllPromptsFilters3: GetAllPromptsFilters3,
): string {
  return JSON.stringify(
    GetAllPromptsFilters3$outboundSchema.parse(getAllPromptsFilters3),
  );
}

export function getAllPromptsFilters3FromJSON(
  jsonString: string,
): SafeParseResult<GetAllPromptsFilters3, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetAllPromptsFilters3$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetAllPromptsFilters3' from JSON`,
  );
}

/** @internal */
export const GetAllPromptsFiltersPromptsOperator$inboundSchema: z.ZodNativeEnum<
  typeof GetAllPromptsFiltersPromptsOperator
> = z.nativeEnum(GetAllPromptsFiltersPromptsOperator);

/** @internal */
export const GetAllPromptsFiltersPromptsOperator$outboundSchema:
  z.ZodNativeEnum<typeof GetAllPromptsFiltersPromptsOperator> =
    GetAllPromptsFiltersPromptsOperator$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPromptsFiltersPromptsOperator$ {
  /** @deprecated use `GetAllPromptsFiltersPromptsOperator$inboundSchema` instead. */
  export const inboundSchema =
    GetAllPromptsFiltersPromptsOperator$inboundSchema;
  /** @deprecated use `GetAllPromptsFiltersPromptsOperator$outboundSchema` instead. */
  export const outboundSchema =
    GetAllPromptsFiltersPromptsOperator$outboundSchema;
}

/** @internal */
export const GetAllPromptsFiltersPromptsType$inboundSchema: z.ZodNativeEnum<
  typeof GetAllPromptsFiltersPromptsType
> = z.nativeEnum(GetAllPromptsFiltersPromptsType);

/** @internal */
export const GetAllPromptsFiltersPromptsType$outboundSchema: z.ZodNativeEnum<
  typeof GetAllPromptsFiltersPromptsType
> = GetAllPromptsFiltersPromptsType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPromptsFiltersPromptsType$ {
  /** @deprecated use `GetAllPromptsFiltersPromptsType$inboundSchema` instead. */
  export const inboundSchema = GetAllPromptsFiltersPromptsType$inboundSchema;
  /** @deprecated use `GetAllPromptsFiltersPromptsType$outboundSchema` instead. */
  export const outboundSchema = GetAllPromptsFiltersPromptsType$outboundSchema;
}

/** @internal */
export const GetAllPromptsFiltersPromptsOptions$inboundSchema: z.ZodType<
  GetAllPromptsFiltersPromptsOptions,
  z.ZodTypeDef,
  unknown
> = z.union([z.string(), z.number()]);

/** @internal */
export type GetAllPromptsFiltersPromptsOptions$Outbound = string | number;

/** @internal */
export const GetAllPromptsFiltersPromptsOptions$outboundSchema: z.ZodType<
  GetAllPromptsFiltersPromptsOptions$Outbound,
  z.ZodTypeDef,
  GetAllPromptsFiltersPromptsOptions
> = z.union([z.string(), z.number()]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPromptsFiltersPromptsOptions$ {
  /** @deprecated use `GetAllPromptsFiltersPromptsOptions$inboundSchema` instead. */
  export const inboundSchema = GetAllPromptsFiltersPromptsOptions$inboundSchema;
  /** @deprecated use `GetAllPromptsFiltersPromptsOptions$outboundSchema` instead. */
  export const outboundSchema =
    GetAllPromptsFiltersPromptsOptions$outboundSchema;
  /** @deprecated use `GetAllPromptsFiltersPromptsOptions$Outbound` instead. */
  export type Outbound = GetAllPromptsFiltersPromptsOptions$Outbound;
}

export function getAllPromptsFiltersPromptsOptionsToJSON(
  getAllPromptsFiltersPromptsOptions: GetAllPromptsFiltersPromptsOptions,
): string {
  return JSON.stringify(
    GetAllPromptsFiltersPromptsOptions$outboundSchema.parse(
      getAllPromptsFiltersPromptsOptions,
    ),
  );
}

export function getAllPromptsFiltersPromptsOptionsFromJSON(
  jsonString: string,
): SafeParseResult<GetAllPromptsFiltersPromptsOptions, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      GetAllPromptsFiltersPromptsOptions$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetAllPromptsFiltersPromptsOptions' from JSON`,
  );
}

/** @internal */
export const GetAllPromptsFiltersPromptsOptionsMap$inboundSchema: z.ZodType<
  GetAllPromptsFiltersPromptsOptionsMap,
  z.ZodTypeDef,
  unknown
> = z.union([z.string(), z.number()]);

/** @internal */
export type GetAllPromptsFiltersPromptsOptionsMap$Outbound = string | number;

/** @internal */
export const GetAllPromptsFiltersPromptsOptionsMap$outboundSchema: z.ZodType<
  GetAllPromptsFiltersPromptsOptionsMap$Outbound,
  z.ZodTypeDef,
  GetAllPromptsFiltersPromptsOptionsMap
> = z.union([z.string(), z.number()]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPromptsFiltersPromptsOptionsMap$ {
  /** @deprecated use `GetAllPromptsFiltersPromptsOptionsMap$inboundSchema` instead. */
  export const inboundSchema =
    GetAllPromptsFiltersPromptsOptionsMap$inboundSchema;
  /** @deprecated use `GetAllPromptsFiltersPromptsOptionsMap$outboundSchema` instead. */
  export const outboundSchema =
    GetAllPromptsFiltersPromptsOptionsMap$outboundSchema;
  /** @deprecated use `GetAllPromptsFiltersPromptsOptionsMap$Outbound` instead. */
  export type Outbound = GetAllPromptsFiltersPromptsOptionsMap$Outbound;
}

export function getAllPromptsFiltersPromptsOptionsMapToJSON(
  getAllPromptsFiltersPromptsOptionsMap: GetAllPromptsFiltersPromptsOptionsMap,
): string {
  return JSON.stringify(
    GetAllPromptsFiltersPromptsOptionsMap$outboundSchema.parse(
      getAllPromptsFiltersPromptsOptionsMap,
    ),
  );
}

export function getAllPromptsFiltersPromptsOptionsMapFromJSON(
  jsonString: string,
): SafeParseResult<GetAllPromptsFiltersPromptsOptionsMap, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      GetAllPromptsFiltersPromptsOptionsMap$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetAllPromptsFiltersPromptsOptionsMap' from JSON`,
  );
}

/** @internal */
export const GetAllPromptsHideOperatorsPrompts5$inboundSchema: z.ZodNativeEnum<
  typeof GetAllPromptsHideOperatorsPrompts5
> = z.nativeEnum(GetAllPromptsHideOperatorsPrompts5);

/** @internal */
export const GetAllPromptsHideOperatorsPrompts5$outboundSchema: z.ZodNativeEnum<
  typeof GetAllPromptsHideOperatorsPrompts5
> = GetAllPromptsHideOperatorsPrompts5$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPromptsHideOperatorsPrompts5$ {
  /** @deprecated use `GetAllPromptsHideOperatorsPrompts5$inboundSchema` instead. */
  export const inboundSchema = GetAllPromptsHideOperatorsPrompts5$inboundSchema;
  /** @deprecated use `GetAllPromptsHideOperatorsPrompts5$outboundSchema` instead. */
  export const outboundSchema =
    GetAllPromptsHideOperatorsPrompts5$outboundSchema;
}

/** @internal */
export const GetAllPromptsHideOperatorsPrompts4$inboundSchema: z.ZodNativeEnum<
  typeof GetAllPromptsHideOperatorsPrompts4
> = z.nativeEnum(GetAllPromptsHideOperatorsPrompts4);

/** @internal */
export const GetAllPromptsHideOperatorsPrompts4$outboundSchema: z.ZodNativeEnum<
  typeof GetAllPromptsHideOperatorsPrompts4
> = GetAllPromptsHideOperatorsPrompts4$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPromptsHideOperatorsPrompts4$ {
  /** @deprecated use `GetAllPromptsHideOperatorsPrompts4$inboundSchema` instead. */
  export const inboundSchema = GetAllPromptsHideOperatorsPrompts4$inboundSchema;
  /** @deprecated use `GetAllPromptsHideOperatorsPrompts4$outboundSchema` instead. */
  export const outboundSchema =
    GetAllPromptsHideOperatorsPrompts4$outboundSchema;
}

/** @internal */
export const GetAllPromptsHideOperatorsPrompts3$inboundSchema: z.ZodNativeEnum<
  typeof GetAllPromptsHideOperatorsPrompts3
> = z.nativeEnum(GetAllPromptsHideOperatorsPrompts3);

/** @internal */
export const GetAllPromptsHideOperatorsPrompts3$outboundSchema: z.ZodNativeEnum<
  typeof GetAllPromptsHideOperatorsPrompts3
> = GetAllPromptsHideOperatorsPrompts3$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPromptsHideOperatorsPrompts3$ {
  /** @deprecated use `GetAllPromptsHideOperatorsPrompts3$inboundSchema` instead. */
  export const inboundSchema = GetAllPromptsHideOperatorsPrompts3$inboundSchema;
  /** @deprecated use `GetAllPromptsHideOperatorsPrompts3$outboundSchema` instead. */
  export const outboundSchema =
    GetAllPromptsHideOperatorsPrompts3$outboundSchema;
}

/** @internal */
export const GetAllPromptsHideOperatorsPrompts2$inboundSchema: z.ZodNativeEnum<
  typeof GetAllPromptsHideOperatorsPrompts2
> = z.nativeEnum(GetAllPromptsHideOperatorsPrompts2);

/** @internal */
export const GetAllPromptsHideOperatorsPrompts2$outboundSchema: z.ZodNativeEnum<
  typeof GetAllPromptsHideOperatorsPrompts2
> = GetAllPromptsHideOperatorsPrompts2$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPromptsHideOperatorsPrompts2$ {
  /** @deprecated use `GetAllPromptsHideOperatorsPrompts2$inboundSchema` instead. */
  export const inboundSchema = GetAllPromptsHideOperatorsPrompts2$inboundSchema;
  /** @deprecated use `GetAllPromptsHideOperatorsPrompts2$outboundSchema` instead. */
  export const outboundSchema =
    GetAllPromptsHideOperatorsPrompts2$outboundSchema;
}

/** @internal */
export const GetAllPromptsHideOperatorsPrompts1$inboundSchema: z.ZodNativeEnum<
  typeof GetAllPromptsHideOperatorsPrompts1
> = z.nativeEnum(GetAllPromptsHideOperatorsPrompts1);

/** @internal */
export const GetAllPromptsHideOperatorsPrompts1$outboundSchema: z.ZodNativeEnum<
  typeof GetAllPromptsHideOperatorsPrompts1
> = GetAllPromptsHideOperatorsPrompts1$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPromptsHideOperatorsPrompts1$ {
  /** @deprecated use `GetAllPromptsHideOperatorsPrompts1$inboundSchema` instead. */
  export const inboundSchema = GetAllPromptsHideOperatorsPrompts1$inboundSchema;
  /** @deprecated use `GetAllPromptsHideOperatorsPrompts1$outboundSchema` instead. */
  export const outboundSchema =
    GetAllPromptsHideOperatorsPrompts1$outboundSchema;
}

/** @internal */
export const GetAllPromptsFiltersPromptsHideOperators$inboundSchema: z.ZodType<
  GetAllPromptsFiltersPromptsHideOperators,
  z.ZodTypeDef,
  unknown
> = z.union([
  GetAllPromptsHideOperatorsPrompts1$inboundSchema,
  GetAllPromptsHideOperatorsPrompts2$inboundSchema,
  GetAllPromptsHideOperatorsPrompts3$inboundSchema,
  GetAllPromptsHideOperatorsPrompts4$inboundSchema,
  GetAllPromptsHideOperatorsPrompts5$inboundSchema,
]);

/** @internal */
export type GetAllPromptsFiltersPromptsHideOperators$Outbound =
  | string
  | string
  | string
  | string
  | string;

/** @internal */
export const GetAllPromptsFiltersPromptsHideOperators$outboundSchema: z.ZodType<
  GetAllPromptsFiltersPromptsHideOperators$Outbound,
  z.ZodTypeDef,
  GetAllPromptsFiltersPromptsHideOperators
> = z.union([
  GetAllPromptsHideOperatorsPrompts1$outboundSchema,
  GetAllPromptsHideOperatorsPrompts2$outboundSchema,
  GetAllPromptsHideOperatorsPrompts3$outboundSchema,
  GetAllPromptsHideOperatorsPrompts4$outboundSchema,
  GetAllPromptsHideOperatorsPrompts5$outboundSchema,
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPromptsFiltersPromptsHideOperators$ {
  /** @deprecated use `GetAllPromptsFiltersPromptsHideOperators$inboundSchema` instead. */
  export const inboundSchema =
    GetAllPromptsFiltersPromptsHideOperators$inboundSchema;
  /** @deprecated use `GetAllPromptsFiltersPromptsHideOperators$outboundSchema` instead. */
  export const outboundSchema =
    GetAllPromptsFiltersPromptsHideOperators$outboundSchema;
  /** @deprecated use `GetAllPromptsFiltersPromptsHideOperators$Outbound` instead. */
  export type Outbound = GetAllPromptsFiltersPromptsHideOperators$Outbound;
}

export function getAllPromptsFiltersPromptsHideOperatorsToJSON(
  getAllPromptsFiltersPromptsHideOperators:
    GetAllPromptsFiltersPromptsHideOperators,
): string {
  return JSON.stringify(
    GetAllPromptsFiltersPromptsHideOperators$outboundSchema.parse(
      getAllPromptsFiltersPromptsHideOperators,
    ),
  );
}

export function getAllPromptsFiltersPromptsHideOperatorsFromJSON(
  jsonString: string,
): SafeParseResult<
  GetAllPromptsFiltersPromptsHideOperators,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetAllPromptsFiltersPromptsHideOperators$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'GetAllPromptsFiltersPromptsHideOperators' from JSON`,
  );
}

/** @internal */
export const GetAllPromptsFilters2$inboundSchema: z.ZodType<
  GetAllPromptsFilters2,
  z.ZodTypeDef,
  unknown
> = z.object({
  operator: GetAllPromptsFiltersPromptsOperator$inboundSchema,
  value: z.nullable(z.array(z.any())),
  type: GetAllPromptsFiltersPromptsType$inboundSchema,
  options: z.array(z.union([z.string(), z.number()])),
  optionsMap: z.nullable(z.record(z.union([z.string(), z.number()])))
    .optional(),
  imageUrlMap: z.record(z.string()).optional(),
  name: z.string(),
  path: z.string(),
  hideOperators: z.array(
    z.union([
      GetAllPromptsHideOperatorsPrompts1$inboundSchema,
      GetAllPromptsHideOperatorsPrompts2$inboundSchema,
      GetAllPromptsHideOperatorsPrompts3$inboundSchema,
      GetAllPromptsHideOperatorsPrompts4$inboundSchema,
      GetAllPromptsHideOperatorsPrompts5$inboundSchema,
    ]),
  ).optional(),
});

/** @internal */
export type GetAllPromptsFilters2$Outbound = {
  operator: string;
  value: Array<any> | null;
  type: string;
  options: Array<string | number>;
  optionsMap?: { [k: string]: string | number } | null | undefined;
  imageUrlMap?: { [k: string]: string } | undefined;
  name: string;
  path: string;
  hideOperators?: Array<string | string | string | string | string> | undefined;
};

/** @internal */
export const GetAllPromptsFilters2$outboundSchema: z.ZodType<
  GetAllPromptsFilters2$Outbound,
  z.ZodTypeDef,
  GetAllPromptsFilters2
> = z.object({
  operator: GetAllPromptsFiltersPromptsOperator$outboundSchema,
  value: z.nullable(z.array(z.any())),
  type: GetAllPromptsFiltersPromptsType$outboundSchema,
  options: z.array(z.union([z.string(), z.number()])),
  optionsMap: z.nullable(z.record(z.union([z.string(), z.number()])))
    .optional(),
  imageUrlMap: z.record(z.string()).optional(),
  name: z.string(),
  path: z.string(),
  hideOperators: z.array(
    z.union([
      GetAllPromptsHideOperatorsPrompts1$outboundSchema,
      GetAllPromptsHideOperatorsPrompts2$outboundSchema,
      GetAllPromptsHideOperatorsPrompts3$outboundSchema,
      GetAllPromptsHideOperatorsPrompts4$outboundSchema,
      GetAllPromptsHideOperatorsPrompts5$outboundSchema,
    ]),
  ).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPromptsFilters2$ {
  /** @deprecated use `GetAllPromptsFilters2$inboundSchema` instead. */
  export const inboundSchema = GetAllPromptsFilters2$inboundSchema;
  /** @deprecated use `GetAllPromptsFilters2$outboundSchema` instead. */
  export const outboundSchema = GetAllPromptsFilters2$outboundSchema;
  /** @deprecated use `GetAllPromptsFilters2$Outbound` instead. */
  export type Outbound = GetAllPromptsFilters2$Outbound;
}

export function getAllPromptsFilters2ToJSON(
  getAllPromptsFilters2: GetAllPromptsFilters2,
): string {
  return JSON.stringify(
    GetAllPromptsFilters2$outboundSchema.parse(getAllPromptsFilters2),
  );
}

export function getAllPromptsFilters2FromJSON(
  jsonString: string,
): SafeParseResult<GetAllPromptsFilters2, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetAllPromptsFilters2$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetAllPromptsFilters2' from JSON`,
  );
}

/** @internal */
export const GetAllPromptsFiltersOperator$inboundSchema: z.ZodNativeEnum<
  typeof GetAllPromptsFiltersOperator
> = z.nativeEnum(GetAllPromptsFiltersOperator);

/** @internal */
export const GetAllPromptsFiltersOperator$outboundSchema: z.ZodNativeEnum<
  typeof GetAllPromptsFiltersOperator
> = GetAllPromptsFiltersOperator$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPromptsFiltersOperator$ {
  /** @deprecated use `GetAllPromptsFiltersOperator$inboundSchema` instead. */
  export const inboundSchema = GetAllPromptsFiltersOperator$inboundSchema;
  /** @deprecated use `GetAllPromptsFiltersOperator$outboundSchema` instead. */
  export const outboundSchema = GetAllPromptsFiltersOperator$outboundSchema;
}

/** @internal */
export const GetAllPromptsFiltersType$inboundSchema: z.ZodNativeEnum<
  typeof GetAllPromptsFiltersType
> = z.nativeEnum(GetAllPromptsFiltersType);

/** @internal */
export const GetAllPromptsFiltersType$outboundSchema: z.ZodNativeEnum<
  typeof GetAllPromptsFiltersType
> = GetAllPromptsFiltersType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPromptsFiltersType$ {
  /** @deprecated use `GetAllPromptsFiltersType$inboundSchema` instead. */
  export const inboundSchema = GetAllPromptsFiltersType$inboundSchema;
  /** @deprecated use `GetAllPromptsFiltersType$outboundSchema` instead. */
  export const outboundSchema = GetAllPromptsFiltersType$outboundSchema;
}

/** @internal */
export const GetAllPromptsFiltersOptions$inboundSchema: z.ZodType<
  GetAllPromptsFiltersOptions,
  z.ZodTypeDef,
  unknown
> = z.union([z.string(), z.number()]);

/** @internal */
export type GetAllPromptsFiltersOptions$Outbound = string | number;

/** @internal */
export const GetAllPromptsFiltersOptions$outboundSchema: z.ZodType<
  GetAllPromptsFiltersOptions$Outbound,
  z.ZodTypeDef,
  GetAllPromptsFiltersOptions
> = z.union([z.string(), z.number()]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPromptsFiltersOptions$ {
  /** @deprecated use `GetAllPromptsFiltersOptions$inboundSchema` instead. */
  export const inboundSchema = GetAllPromptsFiltersOptions$inboundSchema;
  /** @deprecated use `GetAllPromptsFiltersOptions$outboundSchema` instead. */
  export const outboundSchema = GetAllPromptsFiltersOptions$outboundSchema;
  /** @deprecated use `GetAllPromptsFiltersOptions$Outbound` instead. */
  export type Outbound = GetAllPromptsFiltersOptions$Outbound;
}

export function getAllPromptsFiltersOptionsToJSON(
  getAllPromptsFiltersOptions: GetAllPromptsFiltersOptions,
): string {
  return JSON.stringify(
    GetAllPromptsFiltersOptions$outboundSchema.parse(
      getAllPromptsFiltersOptions,
    ),
  );
}

export function getAllPromptsFiltersOptionsFromJSON(
  jsonString: string,
): SafeParseResult<GetAllPromptsFiltersOptions, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetAllPromptsFiltersOptions$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetAllPromptsFiltersOptions' from JSON`,
  );
}

/** @internal */
export const GetAllPromptsFiltersOptionsMap$inboundSchema: z.ZodType<
  GetAllPromptsFiltersOptionsMap,
  z.ZodTypeDef,
  unknown
> = z.union([z.string(), z.number()]);

/** @internal */
export type GetAllPromptsFiltersOptionsMap$Outbound = string | number;

/** @internal */
export const GetAllPromptsFiltersOptionsMap$outboundSchema: z.ZodType<
  GetAllPromptsFiltersOptionsMap$Outbound,
  z.ZodTypeDef,
  GetAllPromptsFiltersOptionsMap
> = z.union([z.string(), z.number()]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPromptsFiltersOptionsMap$ {
  /** @deprecated use `GetAllPromptsFiltersOptionsMap$inboundSchema` instead. */
  export const inboundSchema = GetAllPromptsFiltersOptionsMap$inboundSchema;
  /** @deprecated use `GetAllPromptsFiltersOptionsMap$outboundSchema` instead. */
  export const outboundSchema = GetAllPromptsFiltersOptionsMap$outboundSchema;
  /** @deprecated use `GetAllPromptsFiltersOptionsMap$Outbound` instead. */
  export type Outbound = GetAllPromptsFiltersOptionsMap$Outbound;
}

export function getAllPromptsFiltersOptionsMapToJSON(
  getAllPromptsFiltersOptionsMap: GetAllPromptsFiltersOptionsMap,
): string {
  return JSON.stringify(
    GetAllPromptsFiltersOptionsMap$outboundSchema.parse(
      getAllPromptsFiltersOptionsMap,
    ),
  );
}

export function getAllPromptsFiltersOptionsMapFromJSON(
  jsonString: string,
): SafeParseResult<GetAllPromptsFiltersOptionsMap, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetAllPromptsFiltersOptionsMap$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetAllPromptsFiltersOptionsMap' from JSON`,
  );
}

/** @internal */
export const GetAllPromptsHideOperators5$inboundSchema: z.ZodNativeEnum<
  typeof GetAllPromptsHideOperators5
> = z.nativeEnum(GetAllPromptsHideOperators5);

/** @internal */
export const GetAllPromptsHideOperators5$outboundSchema: z.ZodNativeEnum<
  typeof GetAllPromptsHideOperators5
> = GetAllPromptsHideOperators5$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPromptsHideOperators5$ {
  /** @deprecated use `GetAllPromptsHideOperators5$inboundSchema` instead. */
  export const inboundSchema = GetAllPromptsHideOperators5$inboundSchema;
  /** @deprecated use `GetAllPromptsHideOperators5$outboundSchema` instead. */
  export const outboundSchema = GetAllPromptsHideOperators5$outboundSchema;
}

/** @internal */
export const GetAllPromptsHideOperators4$inboundSchema: z.ZodNativeEnum<
  typeof GetAllPromptsHideOperators4
> = z.nativeEnum(GetAllPromptsHideOperators4);

/** @internal */
export const GetAllPromptsHideOperators4$outboundSchema: z.ZodNativeEnum<
  typeof GetAllPromptsHideOperators4
> = GetAllPromptsHideOperators4$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPromptsHideOperators4$ {
  /** @deprecated use `GetAllPromptsHideOperators4$inboundSchema` instead. */
  export const inboundSchema = GetAllPromptsHideOperators4$inboundSchema;
  /** @deprecated use `GetAllPromptsHideOperators4$outboundSchema` instead. */
  export const outboundSchema = GetAllPromptsHideOperators4$outboundSchema;
}

/** @internal */
export const GetAllPromptsHideOperators3$inboundSchema: z.ZodNativeEnum<
  typeof GetAllPromptsHideOperators3
> = z.nativeEnum(GetAllPromptsHideOperators3);

/** @internal */
export const GetAllPromptsHideOperators3$outboundSchema: z.ZodNativeEnum<
  typeof GetAllPromptsHideOperators3
> = GetAllPromptsHideOperators3$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPromptsHideOperators3$ {
  /** @deprecated use `GetAllPromptsHideOperators3$inboundSchema` instead. */
  export const inboundSchema = GetAllPromptsHideOperators3$inboundSchema;
  /** @deprecated use `GetAllPromptsHideOperators3$outboundSchema` instead. */
  export const outboundSchema = GetAllPromptsHideOperators3$outboundSchema;
}

/** @internal */
export const GetAllPromptsHideOperators2$inboundSchema: z.ZodNativeEnum<
  typeof GetAllPromptsHideOperators2
> = z.nativeEnum(GetAllPromptsHideOperators2);

/** @internal */
export const GetAllPromptsHideOperators2$outboundSchema: z.ZodNativeEnum<
  typeof GetAllPromptsHideOperators2
> = GetAllPromptsHideOperators2$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPromptsHideOperators2$ {
  /** @deprecated use `GetAllPromptsHideOperators2$inboundSchema` instead. */
  export const inboundSchema = GetAllPromptsHideOperators2$inboundSchema;
  /** @deprecated use `GetAllPromptsHideOperators2$outboundSchema` instead. */
  export const outboundSchema = GetAllPromptsHideOperators2$outboundSchema;
}

/** @internal */
export const GetAllPromptsHideOperators1$inboundSchema: z.ZodNativeEnum<
  typeof GetAllPromptsHideOperators1
> = z.nativeEnum(GetAllPromptsHideOperators1);

/** @internal */
export const GetAllPromptsHideOperators1$outboundSchema: z.ZodNativeEnum<
  typeof GetAllPromptsHideOperators1
> = GetAllPromptsHideOperators1$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPromptsHideOperators1$ {
  /** @deprecated use `GetAllPromptsHideOperators1$inboundSchema` instead. */
  export const inboundSchema = GetAllPromptsHideOperators1$inboundSchema;
  /** @deprecated use `GetAllPromptsHideOperators1$outboundSchema` instead. */
  export const outboundSchema = GetAllPromptsHideOperators1$outboundSchema;
}

/** @internal */
export const GetAllPromptsFiltersHideOperators$inboundSchema: z.ZodType<
  GetAllPromptsFiltersHideOperators,
  z.ZodTypeDef,
  unknown
> = z.union([
  GetAllPromptsHideOperators1$inboundSchema,
  GetAllPromptsHideOperators2$inboundSchema,
  GetAllPromptsHideOperators3$inboundSchema,
  GetAllPromptsHideOperators4$inboundSchema,
  GetAllPromptsHideOperators5$inboundSchema,
]);

/** @internal */
export type GetAllPromptsFiltersHideOperators$Outbound =
  | string
  | string
  | string
  | string
  | string;

/** @internal */
export const GetAllPromptsFiltersHideOperators$outboundSchema: z.ZodType<
  GetAllPromptsFiltersHideOperators$Outbound,
  z.ZodTypeDef,
  GetAllPromptsFiltersHideOperators
> = z.union([
  GetAllPromptsHideOperators1$outboundSchema,
  GetAllPromptsHideOperators2$outboundSchema,
  GetAllPromptsHideOperators3$outboundSchema,
  GetAllPromptsHideOperators4$outboundSchema,
  GetAllPromptsHideOperators5$outboundSchema,
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPromptsFiltersHideOperators$ {
  /** @deprecated use `GetAllPromptsFiltersHideOperators$inboundSchema` instead. */
  export const inboundSchema = GetAllPromptsFiltersHideOperators$inboundSchema;
  /** @deprecated use `GetAllPromptsFiltersHideOperators$outboundSchema` instead. */
  export const outboundSchema =
    GetAllPromptsFiltersHideOperators$outboundSchema;
  /** @deprecated use `GetAllPromptsFiltersHideOperators$Outbound` instead. */
  export type Outbound = GetAllPromptsFiltersHideOperators$Outbound;
}

export function getAllPromptsFiltersHideOperatorsToJSON(
  getAllPromptsFiltersHideOperators: GetAllPromptsFiltersHideOperators,
): string {
  return JSON.stringify(
    GetAllPromptsFiltersHideOperators$outboundSchema.parse(
      getAllPromptsFiltersHideOperators,
    ),
  );
}

export function getAllPromptsFiltersHideOperatorsFromJSON(
  jsonString: string,
): SafeParseResult<GetAllPromptsFiltersHideOperators, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetAllPromptsFiltersHideOperators$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetAllPromptsFiltersHideOperators' from JSON`,
  );
}

/** @internal */
export const GetAllPromptsFilters1$inboundSchema: z.ZodType<
  GetAllPromptsFilters1,
  z.ZodTypeDef,
  unknown
> = z.object({
  operator: GetAllPromptsFiltersOperator$inboundSchema,
  value: z.any().optional(),
  type: GetAllPromptsFiltersType$inboundSchema,
  options: z.array(z.union([z.string(), z.number()])),
  optionsMap: z.nullable(z.record(z.union([z.string(), z.number()])))
    .optional(),
  imageUrlMap: z.record(z.string()).optional(),
  name: z.string(),
  path: z.string(),
  hideOperators: z.array(
    z.union([
      GetAllPromptsHideOperators1$inboundSchema,
      GetAllPromptsHideOperators2$inboundSchema,
      GetAllPromptsHideOperators3$inboundSchema,
      GetAllPromptsHideOperators4$inboundSchema,
      GetAllPromptsHideOperators5$inboundSchema,
    ]),
  ).optional(),
});

/** @internal */
export type GetAllPromptsFilters1$Outbound = {
  operator: string;
  value?: any | undefined;
  type: string;
  options: Array<string | number>;
  optionsMap?: { [k: string]: string | number } | null | undefined;
  imageUrlMap?: { [k: string]: string } | undefined;
  name: string;
  path: string;
  hideOperators?: Array<string | string | string | string | string> | undefined;
};

/** @internal */
export const GetAllPromptsFilters1$outboundSchema: z.ZodType<
  GetAllPromptsFilters1$Outbound,
  z.ZodTypeDef,
  GetAllPromptsFilters1
> = z.object({
  operator: GetAllPromptsFiltersOperator$outboundSchema,
  value: z.any().optional(),
  type: GetAllPromptsFiltersType$outboundSchema,
  options: z.array(z.union([z.string(), z.number()])),
  optionsMap: z.nullable(z.record(z.union([z.string(), z.number()])))
    .optional(),
  imageUrlMap: z.record(z.string()).optional(),
  name: z.string(),
  path: z.string(),
  hideOperators: z.array(
    z.union([
      GetAllPromptsHideOperators1$outboundSchema,
      GetAllPromptsHideOperators2$outboundSchema,
      GetAllPromptsHideOperators3$outboundSchema,
      GetAllPromptsHideOperators4$outboundSchema,
      GetAllPromptsHideOperators5$outboundSchema,
    ]),
  ).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPromptsFilters1$ {
  /** @deprecated use `GetAllPromptsFilters1$inboundSchema` instead. */
  export const inboundSchema = GetAllPromptsFilters1$inboundSchema;
  /** @deprecated use `GetAllPromptsFilters1$outboundSchema` instead. */
  export const outboundSchema = GetAllPromptsFilters1$outboundSchema;
  /** @deprecated use `GetAllPromptsFilters1$Outbound` instead. */
  export type Outbound = GetAllPromptsFilters1$Outbound;
}

export function getAllPromptsFilters1ToJSON(
  getAllPromptsFilters1: GetAllPromptsFilters1,
): string {
  return JSON.stringify(
    GetAllPromptsFilters1$outboundSchema.parse(getAllPromptsFilters1),
  );
}

export function getAllPromptsFilters1FromJSON(
  jsonString: string,
): SafeParseResult<GetAllPromptsFilters1, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetAllPromptsFilters1$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetAllPromptsFilters1' from JSON`,
  );
}

/** @internal */
export const GetAllPromptsFilters$inboundSchema: z.ZodType<
  GetAllPromptsFilters,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => GetAllPromptsFilters3$inboundSchema),
  z.lazy(() => GetAllPromptsFilters4$inboundSchema),
  z.lazy(() => GetAllPromptsFilters5$inboundSchema),
  z.lazy(() => Filters8$inboundSchema),
  z.lazy(() => Filters6$inboundSchema),
  z.lazy(() => Filters7$inboundSchema),
  z.lazy(() => GetAllPromptsFilters1$inboundSchema),
  z.lazy(() => GetAllPromptsFilters2$inboundSchema),
]);

/** @internal */
export type GetAllPromptsFilters$Outbound =
  | GetAllPromptsFilters3$Outbound
  | GetAllPromptsFilters4$Outbound
  | GetAllPromptsFilters5$Outbound
  | Filters8$Outbound
  | Filters6$Outbound
  | Filters7$Outbound
  | GetAllPromptsFilters1$Outbound
  | GetAllPromptsFilters2$Outbound;

/** @internal */
export const GetAllPromptsFilters$outboundSchema: z.ZodType<
  GetAllPromptsFilters$Outbound,
  z.ZodTypeDef,
  GetAllPromptsFilters
> = z.union([
  z.lazy(() => GetAllPromptsFilters3$outboundSchema),
  z.lazy(() => GetAllPromptsFilters4$outboundSchema),
  z.lazy(() => GetAllPromptsFilters5$outboundSchema),
  z.lazy(() => Filters8$outboundSchema),
  z.lazy(() => Filters6$outboundSchema),
  z.lazy(() => Filters7$outboundSchema),
  z.lazy(() => GetAllPromptsFilters1$outboundSchema),
  z.lazy(() => GetAllPromptsFilters2$outboundSchema),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPromptsFilters$ {
  /** @deprecated use `GetAllPromptsFilters$inboundSchema` instead. */
  export const inboundSchema = GetAllPromptsFilters$inboundSchema;
  /** @deprecated use `GetAllPromptsFilters$outboundSchema` instead. */
  export const outboundSchema = GetAllPromptsFilters$outboundSchema;
  /** @deprecated use `GetAllPromptsFilters$Outbound` instead. */
  export type Outbound = GetAllPromptsFilters$Outbound;
}

export function getAllPromptsFiltersToJSON(
  getAllPromptsFilters: GetAllPromptsFilters,
): string {
  return JSON.stringify(
    GetAllPromptsFilters$outboundSchema.parse(getAllPromptsFilters),
  );
}

export function getAllPromptsFiltersFromJSON(
  jsonString: string,
): SafeParseResult<GetAllPromptsFilters, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetAllPromptsFilters$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetAllPromptsFilters' from JSON`,
  );
}

/** @internal */
export const GetAllPromptsQuery$inboundSchema: z.ZodType<
  GetAllPromptsQuery,
  z.ZodTypeDef,
  unknown
> = z.object({
  operator: GetAllPromptsOperator$inboundSchema,
  filters: z.array(
    z.union([
      z.lazy(() => GetAllPromptsFilters3$inboundSchema),
      z.lazy(() => GetAllPromptsFilters4$inboundSchema),
      z.lazy(() => GetAllPromptsFilters5$inboundSchema),
      z.lazy(() => Filters8$inboundSchema),
      z.lazy(() => Filters6$inboundSchema),
      z.lazy(() => Filters7$inboundSchema),
      z.lazy(() => GetAllPromptsFilters1$inboundSchema),
      z.lazy(() => GetAllPromptsFilters2$inboundSchema),
    ]),
  ).optional(),
});

/** @internal */
export type GetAllPromptsQuery$Outbound = {
  operator: string;
  filters?:
    | Array<
      | GetAllPromptsFilters3$Outbound
      | GetAllPromptsFilters4$Outbound
      | GetAllPromptsFilters5$Outbound
      | Filters8$Outbound
      | Filters6$Outbound
      | Filters7$Outbound
      | GetAllPromptsFilters1$Outbound
      | GetAllPromptsFilters2$Outbound
    >
    | undefined;
};

/** @internal */
export const GetAllPromptsQuery$outboundSchema: z.ZodType<
  GetAllPromptsQuery$Outbound,
  z.ZodTypeDef,
  GetAllPromptsQuery
> = z.object({
  operator: GetAllPromptsOperator$outboundSchema,
  filters: z.array(
    z.union([
      z.lazy(() => GetAllPromptsFilters3$outboundSchema),
      z.lazy(() => GetAllPromptsFilters4$outboundSchema),
      z.lazy(() => GetAllPromptsFilters5$outboundSchema),
      z.lazy(() => Filters8$outboundSchema),
      z.lazy(() => Filters6$outboundSchema),
      z.lazy(() => Filters7$outboundSchema),
      z.lazy(() => GetAllPromptsFilters1$outboundSchema),
      z.lazy(() => GetAllPromptsFilters2$outboundSchema),
    ]),
  ).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPromptsQuery$ {
  /** @deprecated use `GetAllPromptsQuery$inboundSchema` instead. */
  export const inboundSchema = GetAllPromptsQuery$inboundSchema;
  /** @deprecated use `GetAllPromptsQuery$outboundSchema` instead. */
  export const outboundSchema = GetAllPromptsQuery$outboundSchema;
  /** @deprecated use `GetAllPromptsQuery$Outbound` instead. */
  export type Outbound = GetAllPromptsQuery$Outbound;
}

export function getAllPromptsQueryToJSON(
  getAllPromptsQuery: GetAllPromptsQuery,
): string {
  return JSON.stringify(
    GetAllPromptsQuery$outboundSchema.parse(getAllPromptsQuery),
  );
}

export function getAllPromptsQueryFromJSON(
  jsonString: string,
): SafeParseResult<GetAllPromptsQuery, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetAllPromptsQuery$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetAllPromptsQuery' from JSON`,
  );
}

/** @internal */
export const GetAllPromptsFiltersPromptsRequestRequestBody4Type$inboundSchema:
  z.ZodNativeEnum<typeof GetAllPromptsFiltersPromptsRequestRequestBody4Type> = z
    .nativeEnum(GetAllPromptsFiltersPromptsRequestRequestBody4Type);

/** @internal */
export const GetAllPromptsFiltersPromptsRequestRequestBody4Type$outboundSchema:
  z.ZodNativeEnum<typeof GetAllPromptsFiltersPromptsRequestRequestBody4Type> =
    GetAllPromptsFiltersPromptsRequestRequestBody4Type$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPromptsFiltersPromptsRequestRequestBody4Type$ {
  /** @deprecated use `GetAllPromptsFiltersPromptsRequestRequestBody4Type$inboundSchema` instead. */
  export const inboundSchema =
    GetAllPromptsFiltersPromptsRequestRequestBody4Type$inboundSchema;
  /** @deprecated use `GetAllPromptsFiltersPromptsRequestRequestBody4Type$outboundSchema` instead. */
  export const outboundSchema =
    GetAllPromptsFiltersPromptsRequestRequestBody4Type$outboundSchema;
}

/** @internal */
export const GetAllPromptsFiltersPromptsRequestRequestBody4Operator$inboundSchema:
  z.ZodNativeEnum<
    typeof GetAllPromptsFiltersPromptsRequestRequestBody4Operator
  > = z.nativeEnum(GetAllPromptsFiltersPromptsRequestRequestBody4Operator);

/** @internal */
export const GetAllPromptsFiltersPromptsRequestRequestBody4Operator$outboundSchema:
  z.ZodNativeEnum<
    typeof GetAllPromptsFiltersPromptsRequestRequestBody4Operator
  > = GetAllPromptsFiltersPromptsRequestRequestBody4Operator$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPromptsFiltersPromptsRequestRequestBody4Operator$ {
  /** @deprecated use `GetAllPromptsFiltersPromptsRequestRequestBody4Operator$inboundSchema` instead. */
  export const inboundSchema =
    GetAllPromptsFiltersPromptsRequestRequestBody4Operator$inboundSchema;
  /** @deprecated use `GetAllPromptsFiltersPromptsRequestRequestBody4Operator$outboundSchema` instead. */
  export const outboundSchema =
    GetAllPromptsFiltersPromptsRequestRequestBody4Operator$outboundSchema;
}

/** @internal */
export const GetAllPromptsFiltersPrompts4$inboundSchema: z.ZodType<
  GetAllPromptsFiltersPrompts4,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: GetAllPromptsFiltersPromptsRequestRequestBody4Type$inboundSchema,
  operator:
    GetAllPromptsFiltersPromptsRequestRequestBody4Operator$inboundSchema,
  values: z.array(z.string()),
  path: z.string(),
});

/** @internal */
export type GetAllPromptsFiltersPrompts4$Outbound = {
  type: string;
  operator: string;
  values: Array<string>;
  path: string;
};

/** @internal */
export const GetAllPromptsFiltersPrompts4$outboundSchema: z.ZodType<
  GetAllPromptsFiltersPrompts4$Outbound,
  z.ZodTypeDef,
  GetAllPromptsFiltersPrompts4
> = z.object({
  type: GetAllPromptsFiltersPromptsRequestRequestBody4Type$outboundSchema,
  operator:
    GetAllPromptsFiltersPromptsRequestRequestBody4Operator$outboundSchema,
  values: z.array(z.string()),
  path: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPromptsFiltersPrompts4$ {
  /** @deprecated use `GetAllPromptsFiltersPrompts4$inboundSchema` instead. */
  export const inboundSchema = GetAllPromptsFiltersPrompts4$inboundSchema;
  /** @deprecated use `GetAllPromptsFiltersPrompts4$outboundSchema` instead. */
  export const outboundSchema = GetAllPromptsFiltersPrompts4$outboundSchema;
  /** @deprecated use `GetAllPromptsFiltersPrompts4$Outbound` instead. */
  export type Outbound = GetAllPromptsFiltersPrompts4$Outbound;
}

export function getAllPromptsFiltersPrompts4ToJSON(
  getAllPromptsFiltersPrompts4: GetAllPromptsFiltersPrompts4,
): string {
  return JSON.stringify(
    GetAllPromptsFiltersPrompts4$outboundSchema.parse(
      getAllPromptsFiltersPrompts4,
    ),
  );
}

export function getAllPromptsFiltersPrompts4FromJSON(
  jsonString: string,
): SafeParseResult<GetAllPromptsFiltersPrompts4, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetAllPromptsFiltersPrompts4$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetAllPromptsFiltersPrompts4' from JSON`,
  );
}

/** @internal */
export const GetAllPromptsFiltersPromptsRequestRequestBody3Type$inboundSchema:
  z.ZodNativeEnum<typeof GetAllPromptsFiltersPromptsRequestRequestBody3Type> = z
    .nativeEnum(GetAllPromptsFiltersPromptsRequestRequestBody3Type);

/** @internal */
export const GetAllPromptsFiltersPromptsRequestRequestBody3Type$outboundSchema:
  z.ZodNativeEnum<typeof GetAllPromptsFiltersPromptsRequestRequestBody3Type> =
    GetAllPromptsFiltersPromptsRequestRequestBody3Type$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPromptsFiltersPromptsRequestRequestBody3Type$ {
  /** @deprecated use `GetAllPromptsFiltersPromptsRequestRequestBody3Type$inboundSchema` instead. */
  export const inboundSchema =
    GetAllPromptsFiltersPromptsRequestRequestBody3Type$inboundSchema;
  /** @deprecated use `GetAllPromptsFiltersPromptsRequestRequestBody3Type$outboundSchema` instead. */
  export const outboundSchema =
    GetAllPromptsFiltersPromptsRequestRequestBody3Type$outboundSchema;
}

/** @internal */
export const GetAllPromptsFiltersPromptsRequestRequestBody3Operator$inboundSchema:
  z.ZodNativeEnum<
    typeof GetAllPromptsFiltersPromptsRequestRequestBody3Operator
  > = z.nativeEnum(GetAllPromptsFiltersPromptsRequestRequestBody3Operator);

/** @internal */
export const GetAllPromptsFiltersPromptsRequestRequestBody3Operator$outboundSchema:
  z.ZodNativeEnum<
    typeof GetAllPromptsFiltersPromptsRequestRequestBody3Operator
  > = GetAllPromptsFiltersPromptsRequestRequestBody3Operator$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPromptsFiltersPromptsRequestRequestBody3Operator$ {
  /** @deprecated use `GetAllPromptsFiltersPromptsRequestRequestBody3Operator$inboundSchema` instead. */
  export const inboundSchema =
    GetAllPromptsFiltersPromptsRequestRequestBody3Operator$inboundSchema;
  /** @deprecated use `GetAllPromptsFiltersPromptsRequestRequestBody3Operator$outboundSchema` instead. */
  export const outboundSchema =
    GetAllPromptsFiltersPromptsRequestRequestBody3Operator$outboundSchema;
}

/** @internal */
export const GetAllPromptsFiltersPrompts3$inboundSchema: z.ZodType<
  GetAllPromptsFiltersPrompts3,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: GetAllPromptsFiltersPromptsRequestRequestBody3Type$inboundSchema,
  operator:
    GetAllPromptsFiltersPromptsRequestRequestBody3Operator$inboundSchema,
  value: z.string(),
  path: z.string(),
});

/** @internal */
export type GetAllPromptsFiltersPrompts3$Outbound = {
  type: string;
  operator: string;
  value: string;
  path: string;
};

/** @internal */
export const GetAllPromptsFiltersPrompts3$outboundSchema: z.ZodType<
  GetAllPromptsFiltersPrompts3$Outbound,
  z.ZodTypeDef,
  GetAllPromptsFiltersPrompts3
> = z.object({
  type: GetAllPromptsFiltersPromptsRequestRequestBody3Type$outboundSchema,
  operator:
    GetAllPromptsFiltersPromptsRequestRequestBody3Operator$outboundSchema,
  value: z.string(),
  path: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPromptsFiltersPrompts3$ {
  /** @deprecated use `GetAllPromptsFiltersPrompts3$inboundSchema` instead. */
  export const inboundSchema = GetAllPromptsFiltersPrompts3$inboundSchema;
  /** @deprecated use `GetAllPromptsFiltersPrompts3$outboundSchema` instead. */
  export const outboundSchema = GetAllPromptsFiltersPrompts3$outboundSchema;
  /** @deprecated use `GetAllPromptsFiltersPrompts3$Outbound` instead. */
  export type Outbound = GetAllPromptsFiltersPrompts3$Outbound;
}

export function getAllPromptsFiltersPrompts3ToJSON(
  getAllPromptsFiltersPrompts3: GetAllPromptsFiltersPrompts3,
): string {
  return JSON.stringify(
    GetAllPromptsFiltersPrompts3$outboundSchema.parse(
      getAllPromptsFiltersPrompts3,
    ),
  );
}

export function getAllPromptsFiltersPrompts3FromJSON(
  jsonString: string,
): SafeParseResult<GetAllPromptsFiltersPrompts3, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetAllPromptsFiltersPrompts3$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetAllPromptsFiltersPrompts3' from JSON`,
  );
}

/** @internal */
export const GetAllPromptsFiltersPromptsRequestRequestBody2Type$inboundSchema:
  z.ZodNativeEnum<typeof GetAllPromptsFiltersPromptsRequestRequestBody2Type> = z
    .nativeEnum(GetAllPromptsFiltersPromptsRequestRequestBody2Type);

/** @internal */
export const GetAllPromptsFiltersPromptsRequestRequestBody2Type$outboundSchema:
  z.ZodNativeEnum<typeof GetAllPromptsFiltersPromptsRequestRequestBody2Type> =
    GetAllPromptsFiltersPromptsRequestRequestBody2Type$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPromptsFiltersPromptsRequestRequestBody2Type$ {
  /** @deprecated use `GetAllPromptsFiltersPromptsRequestRequestBody2Type$inboundSchema` instead. */
  export const inboundSchema =
    GetAllPromptsFiltersPromptsRequestRequestBody2Type$inboundSchema;
  /** @deprecated use `GetAllPromptsFiltersPromptsRequestRequestBody2Type$outboundSchema` instead. */
  export const outboundSchema =
    GetAllPromptsFiltersPromptsRequestRequestBody2Type$outboundSchema;
}

/** @internal */
export const GetAllPromptsFiltersPrompts2$inboundSchema: z.ZodType<
  GetAllPromptsFiltersPrompts2,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: GetAllPromptsFiltersPromptsRequestRequestBody2Type$inboundSchema,
  value: z.string(),
  searchPaths: z.array(z.string()),
});

/** @internal */
export type GetAllPromptsFiltersPrompts2$Outbound = {
  type: string;
  value: string;
  searchPaths: Array<string>;
};

/** @internal */
export const GetAllPromptsFiltersPrompts2$outboundSchema: z.ZodType<
  GetAllPromptsFiltersPrompts2$Outbound,
  z.ZodTypeDef,
  GetAllPromptsFiltersPrompts2
> = z.object({
  type: GetAllPromptsFiltersPromptsRequestRequestBody2Type$outboundSchema,
  value: z.string(),
  searchPaths: z.array(z.string()),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPromptsFiltersPrompts2$ {
  /** @deprecated use `GetAllPromptsFiltersPrompts2$inboundSchema` instead. */
  export const inboundSchema = GetAllPromptsFiltersPrompts2$inboundSchema;
  /** @deprecated use `GetAllPromptsFiltersPrompts2$outboundSchema` instead. */
  export const outboundSchema = GetAllPromptsFiltersPrompts2$outboundSchema;
  /** @deprecated use `GetAllPromptsFiltersPrompts2$Outbound` instead. */
  export type Outbound = GetAllPromptsFiltersPrompts2$Outbound;
}

export function getAllPromptsFiltersPrompts2ToJSON(
  getAllPromptsFiltersPrompts2: GetAllPromptsFiltersPrompts2,
): string {
  return JSON.stringify(
    GetAllPromptsFiltersPrompts2$outboundSchema.parse(
      getAllPromptsFiltersPrompts2,
    ),
  );
}

export function getAllPromptsFiltersPrompts2FromJSON(
  jsonString: string,
): SafeParseResult<GetAllPromptsFiltersPrompts2, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetAllPromptsFiltersPrompts2$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetAllPromptsFiltersPrompts2' from JSON`,
  );
}

/** @internal */
export const GetAllPromptsFiltersPromptsRequestRequestBody1Type$inboundSchema:
  z.ZodNativeEnum<typeof GetAllPromptsFiltersPromptsRequestRequestBody1Type> = z
    .nativeEnum(GetAllPromptsFiltersPromptsRequestRequestBody1Type);

/** @internal */
export const GetAllPromptsFiltersPromptsRequestRequestBody1Type$outboundSchema:
  z.ZodNativeEnum<typeof GetAllPromptsFiltersPromptsRequestRequestBody1Type> =
    GetAllPromptsFiltersPromptsRequestRequestBody1Type$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPromptsFiltersPromptsRequestRequestBody1Type$ {
  /** @deprecated use `GetAllPromptsFiltersPromptsRequestRequestBody1Type$inboundSchema` instead. */
  export const inboundSchema =
    GetAllPromptsFiltersPromptsRequestRequestBody1Type$inboundSchema;
  /** @deprecated use `GetAllPromptsFiltersPromptsRequestRequestBody1Type$outboundSchema` instead. */
  export const outboundSchema =
    GetAllPromptsFiltersPromptsRequestRequestBody1Type$outboundSchema;
}

/** @internal */
export const GetAllPromptsFiltersPrompts1$inboundSchema: z.ZodType<
  GetAllPromptsFiltersPrompts1,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: GetAllPromptsFiltersPromptsRequestRequestBody1Type$inboundSchema,
  id: z.string(),
  path: z.string(),
});

/** @internal */
export type GetAllPromptsFiltersPrompts1$Outbound = {
  type: string;
  id: string;
  path: string;
};

/** @internal */
export const GetAllPromptsFiltersPrompts1$outboundSchema: z.ZodType<
  GetAllPromptsFiltersPrompts1$Outbound,
  z.ZodTypeDef,
  GetAllPromptsFiltersPrompts1
> = z.object({
  type: GetAllPromptsFiltersPromptsRequestRequestBody1Type$outboundSchema,
  id: z.string(),
  path: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPromptsFiltersPrompts1$ {
  /** @deprecated use `GetAllPromptsFiltersPrompts1$inboundSchema` instead. */
  export const inboundSchema = GetAllPromptsFiltersPrompts1$inboundSchema;
  /** @deprecated use `GetAllPromptsFiltersPrompts1$outboundSchema` instead. */
  export const outboundSchema = GetAllPromptsFiltersPrompts1$outboundSchema;
  /** @deprecated use `GetAllPromptsFiltersPrompts1$Outbound` instead. */
  export type Outbound = GetAllPromptsFiltersPrompts1$Outbound;
}

export function getAllPromptsFiltersPrompts1ToJSON(
  getAllPromptsFiltersPrompts1: GetAllPromptsFiltersPrompts1,
): string {
  return JSON.stringify(
    GetAllPromptsFiltersPrompts1$outboundSchema.parse(
      getAllPromptsFiltersPrompts1,
    ),
  );
}

export function getAllPromptsFiltersPrompts1FromJSON(
  jsonString: string,
): SafeParseResult<GetAllPromptsFiltersPrompts1, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetAllPromptsFiltersPrompts1$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetAllPromptsFiltersPrompts1' from JSON`,
  );
}

/** @internal */
export const GetAllPromptsPromptsFilters$inboundSchema: z.ZodType<
  GetAllPromptsPromptsFilters,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => GetAllPromptsFiltersPrompts1$inboundSchema),
  z.lazy(() => GetAllPromptsFiltersPrompts2$inboundSchema),
  z.lazy(() => GetAllPromptsFiltersPrompts3$inboundSchema),
  z.lazy(() => GetAllPromptsFiltersPrompts4$inboundSchema),
]);

/** @internal */
export type GetAllPromptsPromptsFilters$Outbound =
  | GetAllPromptsFiltersPrompts1$Outbound
  | GetAllPromptsFiltersPrompts2$Outbound
  | GetAllPromptsFiltersPrompts3$Outbound
  | GetAllPromptsFiltersPrompts4$Outbound;

/** @internal */
export const GetAllPromptsPromptsFilters$outboundSchema: z.ZodType<
  GetAllPromptsPromptsFilters$Outbound,
  z.ZodTypeDef,
  GetAllPromptsPromptsFilters
> = z.union([
  z.lazy(() => GetAllPromptsFiltersPrompts1$outboundSchema),
  z.lazy(() => GetAllPromptsFiltersPrompts2$outboundSchema),
  z.lazy(() => GetAllPromptsFiltersPrompts3$outboundSchema),
  z.lazy(() => GetAllPromptsFiltersPrompts4$outboundSchema),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPromptsPromptsFilters$ {
  /** @deprecated use `GetAllPromptsPromptsFilters$inboundSchema` instead. */
  export const inboundSchema = GetAllPromptsPromptsFilters$inboundSchema;
  /** @deprecated use `GetAllPromptsPromptsFilters$outboundSchema` instead. */
  export const outboundSchema = GetAllPromptsPromptsFilters$outboundSchema;
  /** @deprecated use `GetAllPromptsPromptsFilters$Outbound` instead. */
  export type Outbound = GetAllPromptsPromptsFilters$Outbound;
}

export function getAllPromptsPromptsFiltersToJSON(
  getAllPromptsPromptsFilters: GetAllPromptsPromptsFilters,
): string {
  return JSON.stringify(
    GetAllPromptsPromptsFilters$outboundSchema.parse(
      getAllPromptsPromptsFilters,
    ),
  );
}

export function getAllPromptsPromptsFiltersFromJSON(
  jsonString: string,
): SafeParseResult<GetAllPromptsPromptsFilters, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetAllPromptsPromptsFilters$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetAllPromptsPromptsFilters' from JSON`,
  );
}

/** @internal */
export const GetAllPromptsRequestBody$inboundSchema: z.ZodType<
  GetAllPromptsRequestBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  pagination: z.lazy(() => GetAllPromptsPagination$inboundSchema).optional(),
  sortingProps: z.array(z.lazy(() => GetAllPromptsSortingProps$inboundSchema))
    .optional(),
  query: z.lazy(() => GetAllPromptsQuery$inboundSchema).optional(),
  filters: z.array(
    z.union([
      z.lazy(() => GetAllPromptsFiltersPrompts1$inboundSchema),
      z.lazy(() => GetAllPromptsFiltersPrompts2$inboundSchema),
      z.lazy(() => GetAllPromptsFiltersPrompts3$inboundSchema),
      z.lazy(() => GetAllPromptsFiltersPrompts4$inboundSchema),
    ]),
  ),
  includedFields: z.record(z.string()).optional(),
});

/** @internal */
export type GetAllPromptsRequestBody$Outbound = {
  pagination?: GetAllPromptsPagination$Outbound | undefined;
  sortingProps?: Array<GetAllPromptsSortingProps$Outbound> | undefined;
  query?: GetAllPromptsQuery$Outbound | undefined;
  filters: Array<
    | GetAllPromptsFiltersPrompts1$Outbound
    | GetAllPromptsFiltersPrompts2$Outbound
    | GetAllPromptsFiltersPrompts3$Outbound
    | GetAllPromptsFiltersPrompts4$Outbound
  >;
  includedFields?: { [k: string]: string } | undefined;
};

/** @internal */
export const GetAllPromptsRequestBody$outboundSchema: z.ZodType<
  GetAllPromptsRequestBody$Outbound,
  z.ZodTypeDef,
  GetAllPromptsRequestBody
> = z.object({
  pagination: z.lazy(() => GetAllPromptsPagination$outboundSchema).optional(),
  sortingProps: z.array(z.lazy(() => GetAllPromptsSortingProps$outboundSchema))
    .optional(),
  query: z.lazy(() => GetAllPromptsQuery$outboundSchema).optional(),
  filters: z.array(
    z.union([
      z.lazy(() => GetAllPromptsFiltersPrompts1$outboundSchema),
      z.lazy(() => GetAllPromptsFiltersPrompts2$outboundSchema),
      z.lazy(() => GetAllPromptsFiltersPrompts3$outboundSchema),
      z.lazy(() => GetAllPromptsFiltersPrompts4$outboundSchema),
    ]),
  ),
  includedFields: z.record(z.string()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPromptsRequestBody$ {
  /** @deprecated use `GetAllPromptsRequestBody$inboundSchema` instead. */
  export const inboundSchema = GetAllPromptsRequestBody$inboundSchema;
  /** @deprecated use `GetAllPromptsRequestBody$outboundSchema` instead. */
  export const outboundSchema = GetAllPromptsRequestBody$outboundSchema;
  /** @deprecated use `GetAllPromptsRequestBody$Outbound` instead. */
  export type Outbound = GetAllPromptsRequestBody$Outbound;
}

export function getAllPromptsRequestBodyToJSON(
  getAllPromptsRequestBody: GetAllPromptsRequestBody,
): string {
  return JSON.stringify(
    GetAllPromptsRequestBody$outboundSchema.parse(getAllPromptsRequestBody),
  );
}

export function getAllPromptsRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<GetAllPromptsRequestBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetAllPromptsRequestBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetAllPromptsRequestBody' from JSON`,
  );
}

/** @internal */
export const GetAllPromptsObject$inboundSchema: z.ZodNativeEnum<
  typeof GetAllPromptsObject
> = z.nativeEnum(GetAllPromptsObject);

/** @internal */
export const GetAllPromptsObject$outboundSchema: z.ZodNativeEnum<
  typeof GetAllPromptsObject
> = GetAllPromptsObject$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPromptsObject$ {
  /** @deprecated use `GetAllPromptsObject$inboundSchema` instead. */
  export const inboundSchema = GetAllPromptsObject$inboundSchema;
  /** @deprecated use `GetAllPromptsObject$outboundSchema` instead. */
  export const outboundSchema = GetAllPromptsObject$outboundSchema;
}

/** @internal */
export const GetAllPromptsOwnerPromptsResponse2$inboundSchema: z.ZodNativeEnum<
  typeof GetAllPromptsOwnerPromptsResponse2
> = z.nativeEnum(GetAllPromptsOwnerPromptsResponse2);

/** @internal */
export const GetAllPromptsOwnerPromptsResponse2$outboundSchema: z.ZodNativeEnum<
  typeof GetAllPromptsOwnerPromptsResponse2
> = GetAllPromptsOwnerPromptsResponse2$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPromptsOwnerPromptsResponse2$ {
  /** @deprecated use `GetAllPromptsOwnerPromptsResponse2$inboundSchema` instead. */
  export const inboundSchema = GetAllPromptsOwnerPromptsResponse2$inboundSchema;
  /** @deprecated use `GetAllPromptsOwnerPromptsResponse2$outboundSchema` instead. */
  export const outboundSchema =
    GetAllPromptsOwnerPromptsResponse2$outboundSchema;
}

/** @internal */
export const GetAllPromptsDataPromptsOwner$inboundSchema: z.ZodType<
  GetAllPromptsDataPromptsOwner,
  z.ZodTypeDef,
  unknown
> = z.union([z.string(), GetAllPromptsOwnerPromptsResponse2$inboundSchema]);

/** @internal */
export type GetAllPromptsDataPromptsOwner$Outbound = string | string;

/** @internal */
export const GetAllPromptsDataPromptsOwner$outboundSchema: z.ZodType<
  GetAllPromptsDataPromptsOwner$Outbound,
  z.ZodTypeDef,
  GetAllPromptsDataPromptsOwner
> = z.union([z.string(), GetAllPromptsOwnerPromptsResponse2$outboundSchema]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPromptsDataPromptsOwner$ {
  /** @deprecated use `GetAllPromptsDataPromptsOwner$inboundSchema` instead. */
  export const inboundSchema = GetAllPromptsDataPromptsOwner$inboundSchema;
  /** @deprecated use `GetAllPromptsDataPromptsOwner$outboundSchema` instead. */
  export const outboundSchema = GetAllPromptsDataPromptsOwner$outboundSchema;
  /** @deprecated use `GetAllPromptsDataPromptsOwner$Outbound` instead. */
  export type Outbound = GetAllPromptsDataPromptsOwner$Outbound;
}

export function getAllPromptsDataPromptsOwnerToJSON(
  getAllPromptsDataPromptsOwner: GetAllPromptsDataPromptsOwner,
): string {
  return JSON.stringify(
    GetAllPromptsDataPromptsOwner$outboundSchema.parse(
      getAllPromptsDataPromptsOwner,
    ),
  );
}

export function getAllPromptsDataPromptsOwnerFromJSON(
  jsonString: string,
): SafeParseResult<GetAllPromptsDataPromptsOwner, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetAllPromptsDataPromptsOwner$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetAllPromptsDataPromptsOwner' from JSON`,
  );
}

/** @internal */
export const GetAllPromptsDataPromptsModelType$inboundSchema: z.ZodNativeEnum<
  typeof GetAllPromptsDataPromptsModelType
> = z.nativeEnum(GetAllPromptsDataPromptsModelType);

/** @internal */
export const GetAllPromptsDataPromptsModelType$outboundSchema: z.ZodNativeEnum<
  typeof GetAllPromptsDataPromptsModelType
> = GetAllPromptsDataPromptsModelType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPromptsDataPromptsModelType$ {
  /** @deprecated use `GetAllPromptsDataPromptsModelType$inboundSchema` instead. */
  export const inboundSchema = GetAllPromptsDataPromptsModelType$inboundSchema;
  /** @deprecated use `GetAllPromptsDataPromptsModelType$outboundSchema` instead. */
  export const outboundSchema =
    GetAllPromptsDataPromptsModelType$outboundSchema;
}

/** @internal */
export const GetAllPromptsDataPromptsFormat$inboundSchema: z.ZodNativeEnum<
  typeof GetAllPromptsDataPromptsFormat
> = z.nativeEnum(GetAllPromptsDataPromptsFormat);

/** @internal */
export const GetAllPromptsDataPromptsFormat$outboundSchema: z.ZodNativeEnum<
  typeof GetAllPromptsDataPromptsFormat
> = GetAllPromptsDataPromptsFormat$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPromptsDataPromptsFormat$ {
  /** @deprecated use `GetAllPromptsDataPromptsFormat$inboundSchema` instead. */
  export const inboundSchema = GetAllPromptsDataPromptsFormat$inboundSchema;
  /** @deprecated use `GetAllPromptsDataPromptsFormat$outboundSchema` instead. */
  export const outboundSchema = GetAllPromptsDataPromptsFormat$outboundSchema;
}

/** @internal */
export const GetAllPromptsDataPromptsQuality$inboundSchema: z.ZodNativeEnum<
  typeof GetAllPromptsDataPromptsQuality
> = z.nativeEnum(GetAllPromptsDataPromptsQuality);

/** @internal */
export const GetAllPromptsDataPromptsQuality$outboundSchema: z.ZodNativeEnum<
  typeof GetAllPromptsDataPromptsQuality
> = GetAllPromptsDataPromptsQuality$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPromptsDataPromptsQuality$ {
  /** @deprecated use `GetAllPromptsDataPromptsQuality$inboundSchema` instead. */
  export const inboundSchema = GetAllPromptsDataPromptsQuality$inboundSchema;
  /** @deprecated use `GetAllPromptsDataPromptsQuality$outboundSchema` instead. */
  export const outboundSchema = GetAllPromptsDataPromptsQuality$outboundSchema;
}

/** @internal */
export const GetAllPromptsResponseFormatPromptsResponse200ApplicationJSONResponseBodyType$inboundSchema:
  z.ZodNativeEnum<
    typeof GetAllPromptsResponseFormatPromptsResponse200ApplicationJSONResponseBodyType
  > = z.nativeEnum(
    GetAllPromptsResponseFormatPromptsResponse200ApplicationJSONResponseBodyType,
  );

/** @internal */
export const GetAllPromptsResponseFormatPromptsResponse200ApplicationJSONResponseBodyType$outboundSchema:
  z.ZodNativeEnum<
    typeof GetAllPromptsResponseFormatPromptsResponse200ApplicationJSONResponseBodyType
  > =
    GetAllPromptsResponseFormatPromptsResponse200ApplicationJSONResponseBodyType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPromptsResponseFormatPromptsResponse200ApplicationJSONResponseBodyType$ {
  /** @deprecated use `GetAllPromptsResponseFormatPromptsResponse200ApplicationJSONResponseBodyType$inboundSchema` instead. */
  export const inboundSchema =
    GetAllPromptsResponseFormatPromptsResponse200ApplicationJSONResponseBodyType$inboundSchema;
  /** @deprecated use `GetAllPromptsResponseFormatPromptsResponse200ApplicationJSONResponseBodyType$outboundSchema` instead. */
  export const outboundSchema =
    GetAllPromptsResponseFormatPromptsResponse200ApplicationJSONResponseBodyType$outboundSchema;
}

/** @internal */
export const GetAllPromptsResponseFormatPromptsResponse2$inboundSchema:
  z.ZodType<
    GetAllPromptsResponseFormatPromptsResponse2,
    z.ZodTypeDef,
    unknown
  > = z.object({
    type:
      GetAllPromptsResponseFormatPromptsResponse200ApplicationJSONResponseBodyType$inboundSchema,
  });

/** @internal */
export type GetAllPromptsResponseFormatPromptsResponse2$Outbound = {
  type: string;
};

/** @internal */
export const GetAllPromptsResponseFormatPromptsResponse2$outboundSchema:
  z.ZodType<
    GetAllPromptsResponseFormatPromptsResponse2$Outbound,
    z.ZodTypeDef,
    GetAllPromptsResponseFormatPromptsResponse2
  > = z.object({
    type:
      GetAllPromptsResponseFormatPromptsResponse200ApplicationJSONResponseBodyType$outboundSchema,
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPromptsResponseFormatPromptsResponse2$ {
  /** @deprecated use `GetAllPromptsResponseFormatPromptsResponse2$inboundSchema` instead. */
  export const inboundSchema =
    GetAllPromptsResponseFormatPromptsResponse2$inboundSchema;
  /** @deprecated use `GetAllPromptsResponseFormatPromptsResponse2$outboundSchema` instead. */
  export const outboundSchema =
    GetAllPromptsResponseFormatPromptsResponse2$outboundSchema;
  /** @deprecated use `GetAllPromptsResponseFormatPromptsResponse2$Outbound` instead. */
  export type Outbound = GetAllPromptsResponseFormatPromptsResponse2$Outbound;
}

export function getAllPromptsResponseFormatPromptsResponse2ToJSON(
  getAllPromptsResponseFormatPromptsResponse2:
    GetAllPromptsResponseFormatPromptsResponse2,
): string {
  return JSON.stringify(
    GetAllPromptsResponseFormatPromptsResponse2$outboundSchema.parse(
      getAllPromptsResponseFormatPromptsResponse2,
    ),
  );
}

export function getAllPromptsResponseFormatPromptsResponse2FromJSON(
  jsonString: string,
): SafeParseResult<
  GetAllPromptsResponseFormatPromptsResponse2,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetAllPromptsResponseFormatPromptsResponse2$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'GetAllPromptsResponseFormatPromptsResponse2' from JSON`,
  );
}

/** @internal */
export const GetAllPromptsResponseFormatPromptsResponse200ApplicationJSONType$inboundSchema:
  z.ZodNativeEnum<
    typeof GetAllPromptsResponseFormatPromptsResponse200ApplicationJSONType
  > = z.nativeEnum(
    GetAllPromptsResponseFormatPromptsResponse200ApplicationJSONType,
  );

/** @internal */
export const GetAllPromptsResponseFormatPromptsResponse200ApplicationJSONType$outboundSchema:
  z.ZodNativeEnum<
    typeof GetAllPromptsResponseFormatPromptsResponse200ApplicationJSONType
  > =
    GetAllPromptsResponseFormatPromptsResponse200ApplicationJSONType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPromptsResponseFormatPromptsResponse200ApplicationJSONType$ {
  /** @deprecated use `GetAllPromptsResponseFormatPromptsResponse200ApplicationJSONType$inboundSchema` instead. */
  export const inboundSchema =
    GetAllPromptsResponseFormatPromptsResponse200ApplicationJSONType$inboundSchema;
  /** @deprecated use `GetAllPromptsResponseFormatPromptsResponse200ApplicationJSONType$outboundSchema` instead. */
  export const outboundSchema =
    GetAllPromptsResponseFormatPromptsResponse200ApplicationJSONType$outboundSchema;
}

/** @internal */
export const GetAllPromptsResponseFormatPromptsResponseJsonSchema$inboundSchema:
  z.ZodType<
    GetAllPromptsResponseFormatPromptsResponseJsonSchema,
    z.ZodTypeDef,
    unknown
  > = z.object({
    name: z.string(),
    strict: z.boolean(),
    schema: z.record(z.any()),
  });

/** @internal */
export type GetAllPromptsResponseFormatPromptsResponseJsonSchema$Outbound = {
  name: string;
  strict: boolean;
  schema: { [k: string]: any };
};

/** @internal */
export const GetAllPromptsResponseFormatPromptsResponseJsonSchema$outboundSchema:
  z.ZodType<
    GetAllPromptsResponseFormatPromptsResponseJsonSchema$Outbound,
    z.ZodTypeDef,
    GetAllPromptsResponseFormatPromptsResponseJsonSchema
  > = z.object({
    name: z.string(),
    strict: z.boolean(),
    schema: z.record(z.any()),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPromptsResponseFormatPromptsResponseJsonSchema$ {
  /** @deprecated use `GetAllPromptsResponseFormatPromptsResponseJsonSchema$inboundSchema` instead. */
  export const inboundSchema =
    GetAllPromptsResponseFormatPromptsResponseJsonSchema$inboundSchema;
  /** @deprecated use `GetAllPromptsResponseFormatPromptsResponseJsonSchema$outboundSchema` instead. */
  export const outboundSchema =
    GetAllPromptsResponseFormatPromptsResponseJsonSchema$outboundSchema;
  /** @deprecated use `GetAllPromptsResponseFormatPromptsResponseJsonSchema$Outbound` instead. */
  export type Outbound =
    GetAllPromptsResponseFormatPromptsResponseJsonSchema$Outbound;
}

export function getAllPromptsResponseFormatPromptsResponseJsonSchemaToJSON(
  getAllPromptsResponseFormatPromptsResponseJsonSchema:
    GetAllPromptsResponseFormatPromptsResponseJsonSchema,
): string {
  return JSON.stringify(
    GetAllPromptsResponseFormatPromptsResponseJsonSchema$outboundSchema.parse(
      getAllPromptsResponseFormatPromptsResponseJsonSchema,
    ),
  );
}

export function getAllPromptsResponseFormatPromptsResponseJsonSchemaFromJSON(
  jsonString: string,
): SafeParseResult<
  GetAllPromptsResponseFormatPromptsResponseJsonSchema,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetAllPromptsResponseFormatPromptsResponseJsonSchema$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'GetAllPromptsResponseFormatPromptsResponseJsonSchema' from JSON`,
  );
}

/** @internal */
export const GetAllPromptsResponseFormatPromptsResponse1$inboundSchema:
  z.ZodType<
    GetAllPromptsResponseFormatPromptsResponse1,
    z.ZodTypeDef,
    unknown
  > = z.object({
    type:
      GetAllPromptsResponseFormatPromptsResponse200ApplicationJSONType$inboundSchema,
    json_schema: z.lazy(() =>
      GetAllPromptsResponseFormatPromptsResponseJsonSchema$inboundSchema
    ),
  }).transform((v) => {
    return remap$(v, {
      "json_schema": "jsonSchema",
    });
  });

/** @internal */
export type GetAllPromptsResponseFormatPromptsResponse1$Outbound = {
  type: string;
  json_schema: GetAllPromptsResponseFormatPromptsResponseJsonSchema$Outbound;
};

/** @internal */
export const GetAllPromptsResponseFormatPromptsResponse1$outboundSchema:
  z.ZodType<
    GetAllPromptsResponseFormatPromptsResponse1$Outbound,
    z.ZodTypeDef,
    GetAllPromptsResponseFormatPromptsResponse1
  > = z.object({
    type:
      GetAllPromptsResponseFormatPromptsResponse200ApplicationJSONType$outboundSchema,
    jsonSchema: z.lazy(() =>
      GetAllPromptsResponseFormatPromptsResponseJsonSchema$outboundSchema
    ),
  }).transform((v) => {
    return remap$(v, {
      jsonSchema: "json_schema",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPromptsResponseFormatPromptsResponse1$ {
  /** @deprecated use `GetAllPromptsResponseFormatPromptsResponse1$inboundSchema` instead. */
  export const inboundSchema =
    GetAllPromptsResponseFormatPromptsResponse1$inboundSchema;
  /** @deprecated use `GetAllPromptsResponseFormatPromptsResponse1$outboundSchema` instead. */
  export const outboundSchema =
    GetAllPromptsResponseFormatPromptsResponse1$outboundSchema;
  /** @deprecated use `GetAllPromptsResponseFormatPromptsResponse1$Outbound` instead. */
  export type Outbound = GetAllPromptsResponseFormatPromptsResponse1$Outbound;
}

export function getAllPromptsResponseFormatPromptsResponse1ToJSON(
  getAllPromptsResponseFormatPromptsResponse1:
    GetAllPromptsResponseFormatPromptsResponse1,
): string {
  return JSON.stringify(
    GetAllPromptsResponseFormatPromptsResponse1$outboundSchema.parse(
      getAllPromptsResponseFormatPromptsResponse1,
    ),
  );
}

export function getAllPromptsResponseFormatPromptsResponse1FromJSON(
  jsonString: string,
): SafeParseResult<
  GetAllPromptsResponseFormatPromptsResponse1,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetAllPromptsResponseFormatPromptsResponse1$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'GetAllPromptsResponseFormatPromptsResponse1' from JSON`,
  );
}

/** @internal */
export const GetAllPromptsDataPromptsResponseFormat$inboundSchema: z.ZodType<
  GetAllPromptsDataPromptsResponseFormat,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => GetAllPromptsResponseFormatPromptsResponse2$inboundSchema),
  z.lazy(() => GetAllPromptsResponseFormatPromptsResponse1$inboundSchema),
]);

/** @internal */
export type GetAllPromptsDataPromptsResponseFormat$Outbound =
  | GetAllPromptsResponseFormatPromptsResponse2$Outbound
  | GetAllPromptsResponseFormatPromptsResponse1$Outbound;

/** @internal */
export const GetAllPromptsDataPromptsResponseFormat$outboundSchema: z.ZodType<
  GetAllPromptsDataPromptsResponseFormat$Outbound,
  z.ZodTypeDef,
  GetAllPromptsDataPromptsResponseFormat
> = z.union([
  z.lazy(() => GetAllPromptsResponseFormatPromptsResponse2$outboundSchema),
  z.lazy(() => GetAllPromptsResponseFormatPromptsResponse1$outboundSchema),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPromptsDataPromptsResponseFormat$ {
  /** @deprecated use `GetAllPromptsDataPromptsResponseFormat$inboundSchema` instead. */
  export const inboundSchema =
    GetAllPromptsDataPromptsResponseFormat$inboundSchema;
  /** @deprecated use `GetAllPromptsDataPromptsResponseFormat$outboundSchema` instead. */
  export const outboundSchema =
    GetAllPromptsDataPromptsResponseFormat$outboundSchema;
  /** @deprecated use `GetAllPromptsDataPromptsResponseFormat$Outbound` instead. */
  export type Outbound = GetAllPromptsDataPromptsResponseFormat$Outbound;
}

export function getAllPromptsDataPromptsResponseFormatToJSON(
  getAllPromptsDataPromptsResponseFormat:
    GetAllPromptsDataPromptsResponseFormat,
): string {
  return JSON.stringify(
    GetAllPromptsDataPromptsResponseFormat$outboundSchema.parse(
      getAllPromptsDataPromptsResponseFormat,
    ),
  );
}

export function getAllPromptsDataPromptsResponseFormatFromJSON(
  jsonString: string,
): SafeParseResult<GetAllPromptsDataPromptsResponseFormat, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      GetAllPromptsDataPromptsResponseFormat$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetAllPromptsDataPromptsResponseFormat' from JSON`,
  );
}

/** @internal */
export const GetAllPromptsDataPromptsPhotoRealVersion$inboundSchema:
  z.ZodNativeEnum<typeof GetAllPromptsDataPromptsPhotoRealVersion> = z
    .nativeEnum(GetAllPromptsDataPromptsPhotoRealVersion);

/** @internal */
export const GetAllPromptsDataPromptsPhotoRealVersion$outboundSchema:
  z.ZodNativeEnum<typeof GetAllPromptsDataPromptsPhotoRealVersion> =
    GetAllPromptsDataPromptsPhotoRealVersion$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPromptsDataPromptsPhotoRealVersion$ {
  /** @deprecated use `GetAllPromptsDataPromptsPhotoRealVersion$inboundSchema` instead. */
  export const inboundSchema =
    GetAllPromptsDataPromptsPhotoRealVersion$inboundSchema;
  /** @deprecated use `GetAllPromptsDataPromptsPhotoRealVersion$outboundSchema` instead. */
  export const outboundSchema =
    GetAllPromptsDataPromptsPhotoRealVersion$outboundSchema;
}

/** @internal */
export const GetAllPromptsDataPromptsEncodingFormat$inboundSchema:
  z.ZodNativeEnum<typeof GetAllPromptsDataPromptsEncodingFormat> = z.nativeEnum(
    GetAllPromptsDataPromptsEncodingFormat,
  );

/** @internal */
export const GetAllPromptsDataPromptsEncodingFormat$outboundSchema:
  z.ZodNativeEnum<typeof GetAllPromptsDataPromptsEncodingFormat> =
    GetAllPromptsDataPromptsEncodingFormat$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPromptsDataPromptsEncodingFormat$ {
  /** @deprecated use `GetAllPromptsDataPromptsEncodingFormat$inboundSchema` instead. */
  export const inboundSchema =
    GetAllPromptsDataPromptsEncodingFormat$inboundSchema;
  /** @deprecated use `GetAllPromptsDataPromptsEncodingFormat$outboundSchema` instead. */
  export const outboundSchema =
    GetAllPromptsDataPromptsEncodingFormat$outboundSchema;
}

/** @internal */
export const GetAllPromptsDataPromptsModelParameters$inboundSchema: z.ZodType<
  GetAllPromptsDataPromptsModelParameters,
  z.ZodTypeDef,
  unknown
> = z.object({
  temperature: z.number().optional(),
  maxTokens: z.number().optional(),
  topK: z.number().optional(),
  topP: z.number().optional(),
  frequencyPenalty: z.number().optional(),
  presencePenalty: z.number().optional(),
  numImages: z.number().optional(),
  seed: z.number().optional(),
  format: GetAllPromptsDataPromptsFormat$inboundSchema.optional(),
  dimensions: z.string().optional(),
  quality: GetAllPromptsDataPromptsQuality$inboundSchema.optional(),
  style: z.string().optional(),
  responseFormat: z.nullable(
    z.union([
      z.lazy(() => GetAllPromptsResponseFormatPromptsResponse2$inboundSchema),
      z.lazy(() => GetAllPromptsResponseFormatPromptsResponse1$inboundSchema),
    ]),
  ).optional(),
  photoRealVersion: GetAllPromptsDataPromptsPhotoRealVersion$inboundSchema
    .optional(),
  encoding_format: GetAllPromptsDataPromptsEncodingFormat$inboundSchema
    .optional(),
}).transform((v) => {
  return remap$(v, {
    "encoding_format": "encodingFormat",
  });
});

/** @internal */
export type GetAllPromptsDataPromptsModelParameters$Outbound = {
  temperature?: number | undefined;
  maxTokens?: number | undefined;
  topK?: number | undefined;
  topP?: number | undefined;
  frequencyPenalty?: number | undefined;
  presencePenalty?: number | undefined;
  numImages?: number | undefined;
  seed?: number | undefined;
  format?: string | undefined;
  dimensions?: string | undefined;
  quality?: string | undefined;
  style?: string | undefined;
  responseFormat?:
    | GetAllPromptsResponseFormatPromptsResponse2$Outbound
    | GetAllPromptsResponseFormatPromptsResponse1$Outbound
    | null
    | undefined;
  photoRealVersion?: string | undefined;
  encoding_format?: string | undefined;
};

/** @internal */
export const GetAllPromptsDataPromptsModelParameters$outboundSchema: z.ZodType<
  GetAllPromptsDataPromptsModelParameters$Outbound,
  z.ZodTypeDef,
  GetAllPromptsDataPromptsModelParameters
> = z.object({
  temperature: z.number().optional(),
  maxTokens: z.number().optional(),
  topK: z.number().optional(),
  topP: z.number().optional(),
  frequencyPenalty: z.number().optional(),
  presencePenalty: z.number().optional(),
  numImages: z.number().optional(),
  seed: z.number().optional(),
  format: GetAllPromptsDataPromptsFormat$outboundSchema.optional(),
  dimensions: z.string().optional(),
  quality: GetAllPromptsDataPromptsQuality$outboundSchema.optional(),
  style: z.string().optional(),
  responseFormat: z.nullable(
    z.union([
      z.lazy(() => GetAllPromptsResponseFormatPromptsResponse2$outboundSchema),
      z.lazy(() => GetAllPromptsResponseFormatPromptsResponse1$outboundSchema),
    ]),
  ).optional(),
  photoRealVersion: GetAllPromptsDataPromptsPhotoRealVersion$outboundSchema
    .optional(),
  encodingFormat: GetAllPromptsDataPromptsEncodingFormat$outboundSchema
    .optional(),
}).transform((v) => {
  return remap$(v, {
    encodingFormat: "encoding_format",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPromptsDataPromptsModelParameters$ {
  /** @deprecated use `GetAllPromptsDataPromptsModelParameters$inboundSchema` instead. */
  export const inboundSchema =
    GetAllPromptsDataPromptsModelParameters$inboundSchema;
  /** @deprecated use `GetAllPromptsDataPromptsModelParameters$outboundSchema` instead. */
  export const outboundSchema =
    GetAllPromptsDataPromptsModelParameters$outboundSchema;
  /** @deprecated use `GetAllPromptsDataPromptsModelParameters$Outbound` instead. */
  export type Outbound = GetAllPromptsDataPromptsModelParameters$Outbound;
}

export function getAllPromptsDataPromptsModelParametersToJSON(
  getAllPromptsDataPromptsModelParameters:
    GetAllPromptsDataPromptsModelParameters,
): string {
  return JSON.stringify(
    GetAllPromptsDataPromptsModelParameters$outboundSchema.parse(
      getAllPromptsDataPromptsModelParameters,
    ),
  );
}

export function getAllPromptsDataPromptsModelParametersFromJSON(
  jsonString: string,
): SafeParseResult<
  GetAllPromptsDataPromptsModelParameters,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetAllPromptsDataPromptsModelParameters$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'GetAllPromptsDataPromptsModelParameters' from JSON`,
  );
}

/** @internal */
export const GetAllPromptsDataPromptsProvider$inboundSchema: z.ZodNativeEnum<
  typeof GetAllPromptsDataPromptsProvider
> = z.nativeEnum(GetAllPromptsDataPromptsProvider);

/** @internal */
export const GetAllPromptsDataPromptsProvider$outboundSchema: z.ZodNativeEnum<
  typeof GetAllPromptsDataPromptsProvider
> = GetAllPromptsDataPromptsProvider$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPromptsDataPromptsProvider$ {
  /** @deprecated use `GetAllPromptsDataPromptsProvider$inboundSchema` instead. */
  export const inboundSchema = GetAllPromptsDataPromptsProvider$inboundSchema;
  /** @deprecated use `GetAllPromptsDataPromptsProvider$outboundSchema` instead. */
  export const outboundSchema = GetAllPromptsDataPromptsProvider$outboundSchema;
}

/** @internal */
export const GetAllPromptsDataPromptsRole$inboundSchema: z.ZodNativeEnum<
  typeof GetAllPromptsDataPromptsRole
> = z.nativeEnum(GetAllPromptsDataPromptsRole);

/** @internal */
export const GetAllPromptsDataPromptsRole$outboundSchema: z.ZodNativeEnum<
  typeof GetAllPromptsDataPromptsRole
> = GetAllPromptsDataPromptsRole$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPromptsDataPromptsRole$ {
  /** @deprecated use `GetAllPromptsDataPromptsRole$inboundSchema` instead. */
  export const inboundSchema = GetAllPromptsDataPromptsRole$inboundSchema;
  /** @deprecated use `GetAllPromptsDataPromptsRole$outboundSchema` instead. */
  export const outboundSchema = GetAllPromptsDataPromptsRole$outboundSchema;
}

/** @internal */
export const GetAllPrompts2PromptsResponse200ApplicationJSONResponseBodyType$inboundSchema:
  z.ZodNativeEnum<
    typeof GetAllPrompts2PromptsResponse200ApplicationJSONResponseBodyType
  > = z.nativeEnum(
    GetAllPrompts2PromptsResponse200ApplicationJSONResponseBodyType,
  );

/** @internal */
export const GetAllPrompts2PromptsResponse200ApplicationJSONResponseBodyType$outboundSchema:
  z.ZodNativeEnum<
    typeof GetAllPrompts2PromptsResponse200ApplicationJSONResponseBodyType
  > =
    GetAllPrompts2PromptsResponse200ApplicationJSONResponseBodyType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPrompts2PromptsResponse200ApplicationJSONResponseBodyType$ {
  /** @deprecated use `GetAllPrompts2PromptsResponse200ApplicationJSONResponseBodyType$inboundSchema` instead. */
  export const inboundSchema =
    GetAllPrompts2PromptsResponse200ApplicationJSONResponseBodyType$inboundSchema;
  /** @deprecated use `GetAllPrompts2PromptsResponse200ApplicationJSONResponseBodyType$outboundSchema` instead. */
  export const outboundSchema =
    GetAllPrompts2PromptsResponse200ApplicationJSONResponseBodyType$outboundSchema;
}

/** @internal */
export const GetAllPrompts2PromptsResponseImageUrl$inboundSchema: z.ZodType<
  GetAllPrompts2PromptsResponseImageUrl,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string().optional(),
  url: z.string(),
  detail: z.string().optional(),
});

/** @internal */
export type GetAllPrompts2PromptsResponseImageUrl$Outbound = {
  id?: string | undefined;
  url: string;
  detail?: string | undefined;
};

/** @internal */
export const GetAllPrompts2PromptsResponseImageUrl$outboundSchema: z.ZodType<
  GetAllPrompts2PromptsResponseImageUrl$Outbound,
  z.ZodTypeDef,
  GetAllPrompts2PromptsResponseImageUrl
> = z.object({
  id: z.string().optional(),
  url: z.string(),
  detail: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPrompts2PromptsResponseImageUrl$ {
  /** @deprecated use `GetAllPrompts2PromptsResponseImageUrl$inboundSchema` instead. */
  export const inboundSchema =
    GetAllPrompts2PromptsResponseImageUrl$inboundSchema;
  /** @deprecated use `GetAllPrompts2PromptsResponseImageUrl$outboundSchema` instead. */
  export const outboundSchema =
    GetAllPrompts2PromptsResponseImageUrl$outboundSchema;
  /** @deprecated use `GetAllPrompts2PromptsResponseImageUrl$Outbound` instead. */
  export type Outbound = GetAllPrompts2PromptsResponseImageUrl$Outbound;
}

export function getAllPrompts2PromptsResponseImageUrlToJSON(
  getAllPrompts2PromptsResponseImageUrl: GetAllPrompts2PromptsResponseImageUrl,
): string {
  return JSON.stringify(
    GetAllPrompts2PromptsResponseImageUrl$outboundSchema.parse(
      getAllPrompts2PromptsResponseImageUrl,
    ),
  );
}

export function getAllPrompts2PromptsResponseImageUrlFromJSON(
  jsonString: string,
): SafeParseResult<GetAllPrompts2PromptsResponseImageUrl, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      GetAllPrompts2PromptsResponseImageUrl$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetAllPrompts2PromptsResponseImageUrl' from JSON`,
  );
}

/** @internal */
export const GetAllPrompts2PromptsResponse2$inboundSchema: z.ZodType<
  GetAllPrompts2PromptsResponse2,
  z.ZodTypeDef,
  unknown
> = z.object({
  type:
    GetAllPrompts2PromptsResponse200ApplicationJSONResponseBodyType$inboundSchema,
  image_url: z.lazy(() => GetAllPrompts2PromptsResponseImageUrl$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "image_url": "imageUrl",
  });
});

/** @internal */
export type GetAllPrompts2PromptsResponse2$Outbound = {
  type: string;
  image_url: GetAllPrompts2PromptsResponseImageUrl$Outbound;
};

/** @internal */
export const GetAllPrompts2PromptsResponse2$outboundSchema: z.ZodType<
  GetAllPrompts2PromptsResponse2$Outbound,
  z.ZodTypeDef,
  GetAllPrompts2PromptsResponse2
> = z.object({
  type:
    GetAllPrompts2PromptsResponse200ApplicationJSONResponseBodyType$outboundSchema,
  imageUrl: z.lazy(() => GetAllPrompts2PromptsResponseImageUrl$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    imageUrl: "image_url",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPrompts2PromptsResponse2$ {
  /** @deprecated use `GetAllPrompts2PromptsResponse2$inboundSchema` instead. */
  export const inboundSchema = GetAllPrompts2PromptsResponse2$inboundSchema;
  /** @deprecated use `GetAllPrompts2PromptsResponse2$outboundSchema` instead. */
  export const outboundSchema = GetAllPrompts2PromptsResponse2$outboundSchema;
  /** @deprecated use `GetAllPrompts2PromptsResponse2$Outbound` instead. */
  export type Outbound = GetAllPrompts2PromptsResponse2$Outbound;
}

export function getAllPrompts2PromptsResponse2ToJSON(
  getAllPrompts2PromptsResponse2: GetAllPrompts2PromptsResponse2,
): string {
  return JSON.stringify(
    GetAllPrompts2PromptsResponse2$outboundSchema.parse(
      getAllPrompts2PromptsResponse2,
    ),
  );
}

export function getAllPrompts2PromptsResponse2FromJSON(
  jsonString: string,
): SafeParseResult<GetAllPrompts2PromptsResponse2, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetAllPrompts2PromptsResponse2$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetAllPrompts2PromptsResponse2' from JSON`,
  );
}

/** @internal */
export const GetAllPrompts2PromptsResponse200ApplicationJSONType$inboundSchema:
  z.ZodNativeEnum<typeof GetAllPrompts2PromptsResponse200ApplicationJSONType> =
    z.nativeEnum(GetAllPrompts2PromptsResponse200ApplicationJSONType);

/** @internal */
export const GetAllPrompts2PromptsResponse200ApplicationJSONType$outboundSchema:
  z.ZodNativeEnum<typeof GetAllPrompts2PromptsResponse200ApplicationJSONType> =
    GetAllPrompts2PromptsResponse200ApplicationJSONType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPrompts2PromptsResponse200ApplicationJSONType$ {
  /** @deprecated use `GetAllPrompts2PromptsResponse200ApplicationJSONType$inboundSchema` instead. */
  export const inboundSchema =
    GetAllPrompts2PromptsResponse200ApplicationJSONType$inboundSchema;
  /** @deprecated use `GetAllPrompts2PromptsResponse200ApplicationJSONType$outboundSchema` instead. */
  export const outboundSchema =
    GetAllPrompts2PromptsResponse200ApplicationJSONType$outboundSchema;
}

/** @internal */
export const GetAllPrompts2PromptsResponse1$inboundSchema: z.ZodType<
  GetAllPrompts2PromptsResponse1,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: GetAllPrompts2PromptsResponse200ApplicationJSONType$inboundSchema,
  text: z.string(),
});

/** @internal */
export type GetAllPrompts2PromptsResponse1$Outbound = {
  type: string;
  text: string;
};

/** @internal */
export const GetAllPrompts2PromptsResponse1$outboundSchema: z.ZodType<
  GetAllPrompts2PromptsResponse1$Outbound,
  z.ZodTypeDef,
  GetAllPrompts2PromptsResponse1
> = z.object({
  type: GetAllPrompts2PromptsResponse200ApplicationJSONType$outboundSchema,
  text: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPrompts2PromptsResponse1$ {
  /** @deprecated use `GetAllPrompts2PromptsResponse1$inboundSchema` instead. */
  export const inboundSchema = GetAllPrompts2PromptsResponse1$inboundSchema;
  /** @deprecated use `GetAllPrompts2PromptsResponse1$outboundSchema` instead. */
  export const outboundSchema = GetAllPrompts2PromptsResponse1$outboundSchema;
  /** @deprecated use `GetAllPrompts2PromptsResponse1$Outbound` instead. */
  export type Outbound = GetAllPrompts2PromptsResponse1$Outbound;
}

export function getAllPrompts2PromptsResponse1ToJSON(
  getAllPrompts2PromptsResponse1: GetAllPrompts2PromptsResponse1,
): string {
  return JSON.stringify(
    GetAllPrompts2PromptsResponse1$outboundSchema.parse(
      getAllPrompts2PromptsResponse1,
    ),
  );
}

export function getAllPrompts2PromptsResponse1FromJSON(
  jsonString: string,
): SafeParseResult<GetAllPrompts2PromptsResponse1, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetAllPrompts2PromptsResponse1$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetAllPrompts2PromptsResponse1' from JSON`,
  );
}

/** @internal */
export const GetAllPromptsContentPromptsResponse2$inboundSchema: z.ZodType<
  GetAllPromptsContentPromptsResponse2,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => GetAllPrompts2PromptsResponse1$inboundSchema),
  z.lazy(() => GetAllPrompts2PromptsResponse2$inboundSchema),
]);

/** @internal */
export type GetAllPromptsContentPromptsResponse2$Outbound =
  | GetAllPrompts2PromptsResponse1$Outbound
  | GetAllPrompts2PromptsResponse2$Outbound;

/** @internal */
export const GetAllPromptsContentPromptsResponse2$outboundSchema: z.ZodType<
  GetAllPromptsContentPromptsResponse2$Outbound,
  z.ZodTypeDef,
  GetAllPromptsContentPromptsResponse2
> = z.union([
  z.lazy(() => GetAllPrompts2PromptsResponse1$outboundSchema),
  z.lazy(() => GetAllPrompts2PromptsResponse2$outboundSchema),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPromptsContentPromptsResponse2$ {
  /** @deprecated use `GetAllPromptsContentPromptsResponse2$inboundSchema` instead. */
  export const inboundSchema =
    GetAllPromptsContentPromptsResponse2$inboundSchema;
  /** @deprecated use `GetAllPromptsContentPromptsResponse2$outboundSchema` instead. */
  export const outboundSchema =
    GetAllPromptsContentPromptsResponse2$outboundSchema;
  /** @deprecated use `GetAllPromptsContentPromptsResponse2$Outbound` instead. */
  export type Outbound = GetAllPromptsContentPromptsResponse2$Outbound;
}

export function getAllPromptsContentPromptsResponse2ToJSON(
  getAllPromptsContentPromptsResponse2: GetAllPromptsContentPromptsResponse2,
): string {
  return JSON.stringify(
    GetAllPromptsContentPromptsResponse2$outboundSchema.parse(
      getAllPromptsContentPromptsResponse2,
    ),
  );
}

export function getAllPromptsContentPromptsResponse2FromJSON(
  jsonString: string,
): SafeParseResult<GetAllPromptsContentPromptsResponse2, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      GetAllPromptsContentPromptsResponse2$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetAllPromptsContentPromptsResponse2' from JSON`,
  );
}

/** @internal */
export const GetAllPromptsDataPromptsContent$inboundSchema: z.ZodType<
  GetAllPromptsDataPromptsContent,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.string(),
  z.array(z.union([
    z.lazy(() => GetAllPrompts2PromptsResponse1$inboundSchema),
    z.lazy(() => GetAllPrompts2PromptsResponse2$inboundSchema),
  ])),
]);

/** @internal */
export type GetAllPromptsDataPromptsContent$Outbound =
  | string
  | Array<
    | GetAllPrompts2PromptsResponse1$Outbound
    | GetAllPrompts2PromptsResponse2$Outbound
  >;

/** @internal */
export const GetAllPromptsDataPromptsContent$outboundSchema: z.ZodType<
  GetAllPromptsDataPromptsContent$Outbound,
  z.ZodTypeDef,
  GetAllPromptsDataPromptsContent
> = z.union([
  z.string(),
  z.array(z.union([
    z.lazy(() => GetAllPrompts2PromptsResponse1$outboundSchema),
    z.lazy(() => GetAllPrompts2PromptsResponse2$outboundSchema),
  ])),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPromptsDataPromptsContent$ {
  /** @deprecated use `GetAllPromptsDataPromptsContent$inboundSchema` instead. */
  export const inboundSchema = GetAllPromptsDataPromptsContent$inboundSchema;
  /** @deprecated use `GetAllPromptsDataPromptsContent$outboundSchema` instead. */
  export const outboundSchema = GetAllPromptsDataPromptsContent$outboundSchema;
  /** @deprecated use `GetAllPromptsDataPromptsContent$Outbound` instead. */
  export type Outbound = GetAllPromptsDataPromptsContent$Outbound;
}

export function getAllPromptsDataPromptsContentToJSON(
  getAllPromptsDataPromptsContent: GetAllPromptsDataPromptsContent,
): string {
  return JSON.stringify(
    GetAllPromptsDataPromptsContent$outboundSchema.parse(
      getAllPromptsDataPromptsContent,
    ),
  );
}

export function getAllPromptsDataPromptsContentFromJSON(
  jsonString: string,
): SafeParseResult<GetAllPromptsDataPromptsContent, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetAllPromptsDataPromptsContent$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetAllPromptsDataPromptsContent' from JSON`,
  );
}

/** @internal */
export const GetAllPromptsDataPromptsResponse200Type$inboundSchema:
  z.ZodNativeEnum<typeof GetAllPromptsDataPromptsResponse200Type> = z
    .nativeEnum(GetAllPromptsDataPromptsResponse200Type);

/** @internal */
export const GetAllPromptsDataPromptsResponse200Type$outboundSchema:
  z.ZodNativeEnum<typeof GetAllPromptsDataPromptsResponse200Type> =
    GetAllPromptsDataPromptsResponse200Type$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPromptsDataPromptsResponse200Type$ {
  /** @deprecated use `GetAllPromptsDataPromptsResponse200Type$inboundSchema` instead. */
  export const inboundSchema =
    GetAllPromptsDataPromptsResponse200Type$inboundSchema;
  /** @deprecated use `GetAllPromptsDataPromptsResponse200Type$outboundSchema` instead. */
  export const outboundSchema =
    GetAllPromptsDataPromptsResponse200Type$outboundSchema;
}

/** @internal */
export const GetAllPromptsDataPromptsResponseFunction$inboundSchema: z.ZodType<
  GetAllPromptsDataPromptsResponseFunction,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.string(),
  arguments: z.string(),
});

/** @internal */
export type GetAllPromptsDataPromptsResponseFunction$Outbound = {
  name: string;
  arguments: string;
};

/** @internal */
export const GetAllPromptsDataPromptsResponseFunction$outboundSchema: z.ZodType<
  GetAllPromptsDataPromptsResponseFunction$Outbound,
  z.ZodTypeDef,
  GetAllPromptsDataPromptsResponseFunction
> = z.object({
  name: z.string(),
  arguments: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPromptsDataPromptsResponseFunction$ {
  /** @deprecated use `GetAllPromptsDataPromptsResponseFunction$inboundSchema` instead. */
  export const inboundSchema =
    GetAllPromptsDataPromptsResponseFunction$inboundSchema;
  /** @deprecated use `GetAllPromptsDataPromptsResponseFunction$outboundSchema` instead. */
  export const outboundSchema =
    GetAllPromptsDataPromptsResponseFunction$outboundSchema;
  /** @deprecated use `GetAllPromptsDataPromptsResponseFunction$Outbound` instead. */
  export type Outbound = GetAllPromptsDataPromptsResponseFunction$Outbound;
}

export function getAllPromptsDataPromptsResponseFunctionToJSON(
  getAllPromptsDataPromptsResponseFunction:
    GetAllPromptsDataPromptsResponseFunction,
): string {
  return JSON.stringify(
    GetAllPromptsDataPromptsResponseFunction$outboundSchema.parse(
      getAllPromptsDataPromptsResponseFunction,
    ),
  );
}

export function getAllPromptsDataPromptsResponseFunctionFromJSON(
  jsonString: string,
): SafeParseResult<
  GetAllPromptsDataPromptsResponseFunction,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetAllPromptsDataPromptsResponseFunction$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'GetAllPromptsDataPromptsResponseFunction' from JSON`,
  );
}

/** @internal */
export const GetAllPromptsDataPromptsToolCalls$inboundSchema: z.ZodType<
  GetAllPromptsDataPromptsToolCalls,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string().optional(),
  index: z.number().optional(),
  type: GetAllPromptsDataPromptsResponse200Type$inboundSchema,
  function: z.lazy(() =>
    GetAllPromptsDataPromptsResponseFunction$inboundSchema
  ),
});

/** @internal */
export type GetAllPromptsDataPromptsToolCalls$Outbound = {
  id?: string | undefined;
  index?: number | undefined;
  type: string;
  function: GetAllPromptsDataPromptsResponseFunction$Outbound;
};

/** @internal */
export const GetAllPromptsDataPromptsToolCalls$outboundSchema: z.ZodType<
  GetAllPromptsDataPromptsToolCalls$Outbound,
  z.ZodTypeDef,
  GetAllPromptsDataPromptsToolCalls
> = z.object({
  id: z.string().optional(),
  index: z.number().optional(),
  type: GetAllPromptsDataPromptsResponse200Type$outboundSchema,
  function: z.lazy(() =>
    GetAllPromptsDataPromptsResponseFunction$outboundSchema
  ),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPromptsDataPromptsToolCalls$ {
  /** @deprecated use `GetAllPromptsDataPromptsToolCalls$inboundSchema` instead. */
  export const inboundSchema = GetAllPromptsDataPromptsToolCalls$inboundSchema;
  /** @deprecated use `GetAllPromptsDataPromptsToolCalls$outboundSchema` instead. */
  export const outboundSchema =
    GetAllPromptsDataPromptsToolCalls$outboundSchema;
  /** @deprecated use `GetAllPromptsDataPromptsToolCalls$Outbound` instead. */
  export type Outbound = GetAllPromptsDataPromptsToolCalls$Outbound;
}

export function getAllPromptsDataPromptsToolCallsToJSON(
  getAllPromptsDataPromptsToolCalls: GetAllPromptsDataPromptsToolCalls,
): string {
  return JSON.stringify(
    GetAllPromptsDataPromptsToolCalls$outboundSchema.parse(
      getAllPromptsDataPromptsToolCalls,
    ),
  );
}

export function getAllPromptsDataPromptsToolCallsFromJSON(
  jsonString: string,
): SafeParseResult<GetAllPromptsDataPromptsToolCalls, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetAllPromptsDataPromptsToolCalls$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetAllPromptsDataPromptsToolCalls' from JSON`,
  );
}

/** @internal */
export const GetAllPromptsDataPromptsMessages$inboundSchema: z.ZodType<
  GetAllPromptsDataPromptsMessages,
  z.ZodTypeDef,
  unknown
> = z.object({
  role: GetAllPromptsDataPromptsRole$inboundSchema,
  content: z.union([
    z.string(),
    z.array(z.union([
      z.lazy(() => GetAllPrompts2PromptsResponse1$inboundSchema),
      z.lazy(() => GetAllPrompts2PromptsResponse2$inboundSchema),
    ])),
  ]),
  tool_calls: z.array(
    z.lazy(() => GetAllPromptsDataPromptsToolCalls$inboundSchema),
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    "tool_calls": "toolCalls",
  });
});

/** @internal */
export type GetAllPromptsDataPromptsMessages$Outbound = {
  role: string;
  content:
    | string
    | Array<
      | GetAllPrompts2PromptsResponse1$Outbound
      | GetAllPrompts2PromptsResponse2$Outbound
    >;
  tool_calls?: Array<GetAllPromptsDataPromptsToolCalls$Outbound> | undefined;
};

/** @internal */
export const GetAllPromptsDataPromptsMessages$outboundSchema: z.ZodType<
  GetAllPromptsDataPromptsMessages$Outbound,
  z.ZodTypeDef,
  GetAllPromptsDataPromptsMessages
> = z.object({
  role: GetAllPromptsDataPromptsRole$outboundSchema,
  content: z.union([
    z.string(),
    z.array(z.union([
      z.lazy(() => GetAllPrompts2PromptsResponse1$outboundSchema),
      z.lazy(() => GetAllPrompts2PromptsResponse2$outboundSchema),
    ])),
  ]),
  toolCalls: z.array(
    z.lazy(() => GetAllPromptsDataPromptsToolCalls$outboundSchema),
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    toolCalls: "tool_calls",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPromptsDataPromptsMessages$ {
  /** @deprecated use `GetAllPromptsDataPromptsMessages$inboundSchema` instead. */
  export const inboundSchema = GetAllPromptsDataPromptsMessages$inboundSchema;
  /** @deprecated use `GetAllPromptsDataPromptsMessages$outboundSchema` instead. */
  export const outboundSchema = GetAllPromptsDataPromptsMessages$outboundSchema;
  /** @deprecated use `GetAllPromptsDataPromptsMessages$Outbound` instead. */
  export type Outbound = GetAllPromptsDataPromptsMessages$Outbound;
}

export function getAllPromptsDataPromptsMessagesToJSON(
  getAllPromptsDataPromptsMessages: GetAllPromptsDataPromptsMessages,
): string {
  return JSON.stringify(
    GetAllPromptsDataPromptsMessages$outboundSchema.parse(
      getAllPromptsDataPromptsMessages,
    ),
  );
}

export function getAllPromptsDataPromptsMessagesFromJSON(
  jsonString: string,
): SafeParseResult<GetAllPromptsDataPromptsMessages, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetAllPromptsDataPromptsMessages$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetAllPromptsDataPromptsMessages' from JSON`,
  );
}

/** @internal */
export const GetAllPromptsDataPromptsPromptConfig$inboundSchema: z.ZodType<
  GetAllPromptsDataPromptsPromptConfig,
  z.ZodTypeDef,
  unknown
> = z.object({
  stream: z.boolean().optional(),
  model: z.string().optional(),
  model_db_id: z.string().optional(),
  model_type: GetAllPromptsDataPromptsModelType$inboundSchema.optional(),
  model_parameters: z.lazy(() =>
    GetAllPromptsDataPromptsModelParameters$inboundSchema
  ).optional(),
  provider: GetAllPromptsDataPromptsProvider$inboundSchema.optional(),
  integration_id: z.nullable(z.string()).optional(),
  version: z.string().optional(),
  messages: z.array(
    z.lazy(() => GetAllPromptsDataPromptsMessages$inboundSchema),
  ),
}).transform((v) => {
  return remap$(v, {
    "model_db_id": "modelDbId",
    "model_type": "modelType",
    "model_parameters": "modelParameters",
    "integration_id": "integrationId",
  });
});

/** @internal */
export type GetAllPromptsDataPromptsPromptConfig$Outbound = {
  stream?: boolean | undefined;
  model?: string | undefined;
  model_db_id?: string | undefined;
  model_type?: string | undefined;
  model_parameters?:
    | GetAllPromptsDataPromptsModelParameters$Outbound
    | undefined;
  provider?: string | undefined;
  integration_id?: string | null | undefined;
  version?: string | undefined;
  messages: Array<GetAllPromptsDataPromptsMessages$Outbound>;
};

/** @internal */
export const GetAllPromptsDataPromptsPromptConfig$outboundSchema: z.ZodType<
  GetAllPromptsDataPromptsPromptConfig$Outbound,
  z.ZodTypeDef,
  GetAllPromptsDataPromptsPromptConfig
> = z.object({
  stream: z.boolean().optional(),
  model: z.string().optional(),
  modelDbId: z.string().optional(),
  modelType: GetAllPromptsDataPromptsModelType$outboundSchema.optional(),
  modelParameters: z.lazy(() =>
    GetAllPromptsDataPromptsModelParameters$outboundSchema
  ).optional(),
  provider: GetAllPromptsDataPromptsProvider$outboundSchema.optional(),
  integrationId: z.nullable(z.string()).optional(),
  version: z.string().optional(),
  messages: z.array(
    z.lazy(() => GetAllPromptsDataPromptsMessages$outboundSchema),
  ),
}).transform((v) => {
  return remap$(v, {
    modelDbId: "model_db_id",
    modelType: "model_type",
    modelParameters: "model_parameters",
    integrationId: "integration_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPromptsDataPromptsPromptConfig$ {
  /** @deprecated use `GetAllPromptsDataPromptsPromptConfig$inboundSchema` instead. */
  export const inboundSchema =
    GetAllPromptsDataPromptsPromptConfig$inboundSchema;
  /** @deprecated use `GetAllPromptsDataPromptsPromptConfig$outboundSchema` instead. */
  export const outboundSchema =
    GetAllPromptsDataPromptsPromptConfig$outboundSchema;
  /** @deprecated use `GetAllPromptsDataPromptsPromptConfig$Outbound` instead. */
  export type Outbound = GetAllPromptsDataPromptsPromptConfig$Outbound;
}

export function getAllPromptsDataPromptsPromptConfigToJSON(
  getAllPromptsDataPromptsPromptConfig: GetAllPromptsDataPromptsPromptConfig,
): string {
  return JSON.stringify(
    GetAllPromptsDataPromptsPromptConfig$outboundSchema.parse(
      getAllPromptsDataPromptsPromptConfig,
    ),
  );
}

export function getAllPromptsDataPromptsPromptConfigFromJSON(
  jsonString: string,
): SafeParseResult<GetAllPromptsDataPromptsPromptConfig, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      GetAllPromptsDataPromptsPromptConfig$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetAllPromptsDataPromptsPromptConfig' from JSON`,
  );
}

/** @internal */
export const GetAllPromptsDataPromptsMetadata$inboundSchema: z.ZodType<
  GetAllPromptsDataPromptsMetadata,
  z.ZodTypeDef,
  unknown
> = z.object({
  use_cases: z.array(z.string()).optional(),
  language: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "use_cases": "useCases",
  });
});

/** @internal */
export type GetAllPromptsDataPromptsMetadata$Outbound = {
  use_cases?: Array<string> | undefined;
  language?: string | undefined;
};

/** @internal */
export const GetAllPromptsDataPromptsMetadata$outboundSchema: z.ZodType<
  GetAllPromptsDataPromptsMetadata$Outbound,
  z.ZodTypeDef,
  GetAllPromptsDataPromptsMetadata
> = z.object({
  useCases: z.array(z.string()).optional(),
  language: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    useCases: "use_cases",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPromptsDataPromptsMetadata$ {
  /** @deprecated use `GetAllPromptsDataPromptsMetadata$inboundSchema` instead. */
  export const inboundSchema = GetAllPromptsDataPromptsMetadata$inboundSchema;
  /** @deprecated use `GetAllPromptsDataPromptsMetadata$outboundSchema` instead. */
  export const outboundSchema = GetAllPromptsDataPromptsMetadata$outboundSchema;
  /** @deprecated use `GetAllPromptsDataPromptsMetadata$Outbound` instead. */
  export type Outbound = GetAllPromptsDataPromptsMetadata$Outbound;
}

export function getAllPromptsDataPromptsMetadataToJSON(
  getAllPromptsDataPromptsMetadata: GetAllPromptsDataPromptsMetadata,
): string {
  return JSON.stringify(
    GetAllPromptsDataPromptsMetadata$outboundSchema.parse(
      getAllPromptsDataPromptsMetadata,
    ),
  );
}

export function getAllPromptsDataPromptsMetadataFromJSON(
  jsonString: string,
): SafeParseResult<GetAllPromptsDataPromptsMetadata, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetAllPromptsDataPromptsMetadata$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetAllPromptsDataPromptsMetadata' from JSON`,
  );
}

/** @internal */
export const GetAllPromptsDataPromptsResponse200ApplicationJSONModelType$inboundSchema:
  z.ZodNativeEnum<
    typeof GetAllPromptsDataPromptsResponse200ApplicationJSONModelType
  > = z.nativeEnum(GetAllPromptsDataPromptsResponse200ApplicationJSONModelType);

/** @internal */
export const GetAllPromptsDataPromptsResponse200ApplicationJSONModelType$outboundSchema:
  z.ZodNativeEnum<
    typeof GetAllPromptsDataPromptsResponse200ApplicationJSONModelType
  > = GetAllPromptsDataPromptsResponse200ApplicationJSONModelType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPromptsDataPromptsResponse200ApplicationJSONModelType$ {
  /** @deprecated use `GetAllPromptsDataPromptsResponse200ApplicationJSONModelType$inboundSchema` instead. */
  export const inboundSchema =
    GetAllPromptsDataPromptsResponse200ApplicationJSONModelType$inboundSchema;
  /** @deprecated use `GetAllPromptsDataPromptsResponse200ApplicationJSONModelType$outboundSchema` instead. */
  export const outboundSchema =
    GetAllPromptsDataPromptsResponse200ApplicationJSONModelType$outboundSchema;
}

/** @internal */
export const GetAllPromptsDataPromptsResponse200ApplicationJSONResponseBodyFormat$inboundSchema:
  z.ZodNativeEnum<
    typeof GetAllPromptsDataPromptsResponse200ApplicationJSONResponseBodyFormat
  > = z.nativeEnum(
    GetAllPromptsDataPromptsResponse200ApplicationJSONResponseBodyFormat,
  );

/** @internal */
export const GetAllPromptsDataPromptsResponse200ApplicationJSONResponseBodyFormat$outboundSchema:
  z.ZodNativeEnum<
    typeof GetAllPromptsDataPromptsResponse200ApplicationJSONResponseBodyFormat
  > =
    GetAllPromptsDataPromptsResponse200ApplicationJSONResponseBodyFormat$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPromptsDataPromptsResponse200ApplicationJSONResponseBodyFormat$ {
  /** @deprecated use `GetAllPromptsDataPromptsResponse200ApplicationJSONResponseBodyFormat$inboundSchema` instead. */
  export const inboundSchema =
    GetAllPromptsDataPromptsResponse200ApplicationJSONResponseBodyFormat$inboundSchema;
  /** @deprecated use `GetAllPromptsDataPromptsResponse200ApplicationJSONResponseBodyFormat$outboundSchema` instead. */
  export const outboundSchema =
    GetAllPromptsDataPromptsResponse200ApplicationJSONResponseBodyFormat$outboundSchema;
}

/** @internal */
export const GetAllPromptsDataPromptsResponse200ApplicationJSONQuality$inboundSchema:
  z.ZodNativeEnum<
    typeof GetAllPromptsDataPromptsResponse200ApplicationJSONQuality
  > = z.nativeEnum(GetAllPromptsDataPromptsResponse200ApplicationJSONQuality);

/** @internal */
export const GetAllPromptsDataPromptsResponse200ApplicationJSONQuality$outboundSchema:
  z.ZodNativeEnum<
    typeof GetAllPromptsDataPromptsResponse200ApplicationJSONQuality
  > = GetAllPromptsDataPromptsResponse200ApplicationJSONQuality$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPromptsDataPromptsResponse200ApplicationJSONQuality$ {
  /** @deprecated use `GetAllPromptsDataPromptsResponse200ApplicationJSONQuality$inboundSchema` instead. */
  export const inboundSchema =
    GetAllPromptsDataPromptsResponse200ApplicationJSONQuality$inboundSchema;
  /** @deprecated use `GetAllPromptsDataPromptsResponse200ApplicationJSONQuality$outboundSchema` instead. */
  export const outboundSchema =
    GetAllPromptsDataPromptsResponse200ApplicationJSONQuality$outboundSchema;
}

/** @internal */
export const GetAllPromptsResponseFormatPromptsResponse200ApplicationJSONResponseBodyData3VersionsType$inboundSchema:
  z.ZodNativeEnum<
    typeof GetAllPromptsResponseFormatPromptsResponse200ApplicationJSONResponseBodyData3VersionsType
  > = z.nativeEnum(
    GetAllPromptsResponseFormatPromptsResponse200ApplicationJSONResponseBodyData3VersionsType,
  );

/** @internal */
export const GetAllPromptsResponseFormatPromptsResponse200ApplicationJSONResponseBodyData3VersionsType$outboundSchema:
  z.ZodNativeEnum<
    typeof GetAllPromptsResponseFormatPromptsResponse200ApplicationJSONResponseBodyData3VersionsType
  > =
    GetAllPromptsResponseFormatPromptsResponse200ApplicationJSONResponseBodyData3VersionsType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPromptsResponseFormatPromptsResponse200ApplicationJSONResponseBodyData3VersionsType$ {
  /** @deprecated use `GetAllPromptsResponseFormatPromptsResponse200ApplicationJSONResponseBodyData3VersionsType$inboundSchema` instead. */
  export const inboundSchema =
    GetAllPromptsResponseFormatPromptsResponse200ApplicationJSONResponseBodyData3VersionsType$inboundSchema;
  /** @deprecated use `GetAllPromptsResponseFormatPromptsResponse200ApplicationJSONResponseBodyData3VersionsType$outboundSchema` instead. */
  export const outboundSchema =
    GetAllPromptsResponseFormatPromptsResponse200ApplicationJSONResponseBodyData3VersionsType$outboundSchema;
}

/** @internal */
export const GetAllPromptsResponseFormatPromptsResponse200ApplicationJSONResponseBody2$inboundSchema:
  z.ZodType<
    GetAllPromptsResponseFormatPromptsResponse200ApplicationJSONResponseBody2,
    z.ZodTypeDef,
    unknown
  > = z.object({
    type:
      GetAllPromptsResponseFormatPromptsResponse200ApplicationJSONResponseBodyData3VersionsType$inboundSchema,
  });

/** @internal */
export type GetAllPromptsResponseFormatPromptsResponse200ApplicationJSONResponseBody2$Outbound =
  {
    type: string;
  };

/** @internal */
export const GetAllPromptsResponseFormatPromptsResponse200ApplicationJSONResponseBody2$outboundSchema:
  z.ZodType<
    GetAllPromptsResponseFormatPromptsResponse200ApplicationJSONResponseBody2$Outbound,
    z.ZodTypeDef,
    GetAllPromptsResponseFormatPromptsResponse200ApplicationJSONResponseBody2
  > = z.object({
    type:
      GetAllPromptsResponseFormatPromptsResponse200ApplicationJSONResponseBodyData3VersionsType$outboundSchema,
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPromptsResponseFormatPromptsResponse200ApplicationJSONResponseBody2$ {
  /** @deprecated use `GetAllPromptsResponseFormatPromptsResponse200ApplicationJSONResponseBody2$inboundSchema` instead. */
  export const inboundSchema =
    GetAllPromptsResponseFormatPromptsResponse200ApplicationJSONResponseBody2$inboundSchema;
  /** @deprecated use `GetAllPromptsResponseFormatPromptsResponse200ApplicationJSONResponseBody2$outboundSchema` instead. */
  export const outboundSchema =
    GetAllPromptsResponseFormatPromptsResponse200ApplicationJSONResponseBody2$outboundSchema;
  /** @deprecated use `GetAllPromptsResponseFormatPromptsResponse200ApplicationJSONResponseBody2$Outbound` instead. */
  export type Outbound =
    GetAllPromptsResponseFormatPromptsResponse200ApplicationJSONResponseBody2$Outbound;
}

export function getAllPromptsResponseFormatPromptsResponse200ApplicationJSONResponseBody2ToJSON(
  getAllPromptsResponseFormatPromptsResponse200ApplicationJSONResponseBody2:
    GetAllPromptsResponseFormatPromptsResponse200ApplicationJSONResponseBody2,
): string {
  return JSON.stringify(
    GetAllPromptsResponseFormatPromptsResponse200ApplicationJSONResponseBody2$outboundSchema
      .parse(
        getAllPromptsResponseFormatPromptsResponse200ApplicationJSONResponseBody2,
      ),
  );
}

export function getAllPromptsResponseFormatPromptsResponse200ApplicationJSONResponseBody2FromJSON(
  jsonString: string,
): SafeParseResult<
  GetAllPromptsResponseFormatPromptsResponse200ApplicationJSONResponseBody2,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetAllPromptsResponseFormatPromptsResponse200ApplicationJSONResponseBody2$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'GetAllPromptsResponseFormatPromptsResponse200ApplicationJSONResponseBody2' from JSON`,
  );
}

/** @internal */
export const GetAllPromptsResponseFormatPromptsResponse200ApplicationJSONResponseBodyData3Type$inboundSchema:
  z.ZodNativeEnum<
    typeof GetAllPromptsResponseFormatPromptsResponse200ApplicationJSONResponseBodyData3Type
  > = z.nativeEnum(
    GetAllPromptsResponseFormatPromptsResponse200ApplicationJSONResponseBodyData3Type,
  );

/** @internal */
export const GetAllPromptsResponseFormatPromptsResponse200ApplicationJSONResponseBodyData3Type$outboundSchema:
  z.ZodNativeEnum<
    typeof GetAllPromptsResponseFormatPromptsResponse200ApplicationJSONResponseBodyData3Type
  > =
    GetAllPromptsResponseFormatPromptsResponse200ApplicationJSONResponseBodyData3Type$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPromptsResponseFormatPromptsResponse200ApplicationJSONResponseBodyData3Type$ {
  /** @deprecated use `GetAllPromptsResponseFormatPromptsResponse200ApplicationJSONResponseBodyData3Type$inboundSchema` instead. */
  export const inboundSchema =
    GetAllPromptsResponseFormatPromptsResponse200ApplicationJSONResponseBodyData3Type$inboundSchema;
  /** @deprecated use `GetAllPromptsResponseFormatPromptsResponse200ApplicationJSONResponseBodyData3Type$outboundSchema` instead. */
  export const outboundSchema =
    GetAllPromptsResponseFormatPromptsResponse200ApplicationJSONResponseBodyData3Type$outboundSchema;
}

/** @internal */
export const GetAllPromptsResponseFormatPromptsResponse200ApplicationJSONResponseBodyJSONSchema$inboundSchema:
  z.ZodType<
    GetAllPromptsResponseFormatPromptsResponse200ApplicationJSONResponseBodyJSONSchema,
    z.ZodTypeDef,
    unknown
  > = z.object({
    name: z.string(),
    strict: z.boolean(),
    schema: z.record(z.any()),
  });

/** @internal */
export type GetAllPromptsResponseFormatPromptsResponse200ApplicationJSONResponseBodyJSONSchema$Outbound =
  {
    name: string;
    strict: boolean;
    schema: { [k: string]: any };
  };

/** @internal */
export const GetAllPromptsResponseFormatPromptsResponse200ApplicationJSONResponseBodyJSONSchema$outboundSchema:
  z.ZodType<
    GetAllPromptsResponseFormatPromptsResponse200ApplicationJSONResponseBodyJSONSchema$Outbound,
    z.ZodTypeDef,
    GetAllPromptsResponseFormatPromptsResponse200ApplicationJSONResponseBodyJSONSchema
  > = z.object({
    name: z.string(),
    strict: z.boolean(),
    schema: z.record(z.any()),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPromptsResponseFormatPromptsResponse200ApplicationJSONResponseBodyJSONSchema$ {
  /** @deprecated use `GetAllPromptsResponseFormatPromptsResponse200ApplicationJSONResponseBodyJSONSchema$inboundSchema` instead. */
  export const inboundSchema =
    GetAllPromptsResponseFormatPromptsResponse200ApplicationJSONResponseBodyJSONSchema$inboundSchema;
  /** @deprecated use `GetAllPromptsResponseFormatPromptsResponse200ApplicationJSONResponseBodyJSONSchema$outboundSchema` instead. */
  export const outboundSchema =
    GetAllPromptsResponseFormatPromptsResponse200ApplicationJSONResponseBodyJSONSchema$outboundSchema;
  /** @deprecated use `GetAllPromptsResponseFormatPromptsResponse200ApplicationJSONResponseBodyJSONSchema$Outbound` instead. */
  export type Outbound =
    GetAllPromptsResponseFormatPromptsResponse200ApplicationJSONResponseBodyJSONSchema$Outbound;
}

export function getAllPromptsResponseFormatPromptsResponse200ApplicationJSONResponseBodyJSONSchemaToJSON(
  getAllPromptsResponseFormatPromptsResponse200ApplicationJSONResponseBodyJSONSchema:
    GetAllPromptsResponseFormatPromptsResponse200ApplicationJSONResponseBodyJSONSchema,
): string {
  return JSON.stringify(
    GetAllPromptsResponseFormatPromptsResponse200ApplicationJSONResponseBodyJSONSchema$outboundSchema
      .parse(
        getAllPromptsResponseFormatPromptsResponse200ApplicationJSONResponseBodyJSONSchema,
      ),
  );
}

export function getAllPromptsResponseFormatPromptsResponse200ApplicationJSONResponseBodyJSONSchemaFromJSON(
  jsonString: string,
): SafeParseResult<
  GetAllPromptsResponseFormatPromptsResponse200ApplicationJSONResponseBodyJSONSchema,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetAllPromptsResponseFormatPromptsResponse200ApplicationJSONResponseBodyJSONSchema$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'GetAllPromptsResponseFormatPromptsResponse200ApplicationJSONResponseBodyJSONSchema' from JSON`,
  );
}

/** @internal */
export const GetAllPromptsResponseFormatPromptsResponse200ApplicationJSONResponseBody1$inboundSchema:
  z.ZodType<
    GetAllPromptsResponseFormatPromptsResponse200ApplicationJSONResponseBody1,
    z.ZodTypeDef,
    unknown
  > = z.object({
    type:
      GetAllPromptsResponseFormatPromptsResponse200ApplicationJSONResponseBodyData3Type$inboundSchema,
    json_schema: z.lazy(() =>
      GetAllPromptsResponseFormatPromptsResponse200ApplicationJSONResponseBodyJSONSchema$inboundSchema
    ),
  }).transform((v) => {
    return remap$(v, {
      "json_schema": "jsonSchema",
    });
  });

/** @internal */
export type GetAllPromptsResponseFormatPromptsResponse200ApplicationJSONResponseBody1$Outbound =
  {
    type: string;
    json_schema:
      GetAllPromptsResponseFormatPromptsResponse200ApplicationJSONResponseBodyJSONSchema$Outbound;
  };

/** @internal */
export const GetAllPromptsResponseFormatPromptsResponse200ApplicationJSONResponseBody1$outboundSchema:
  z.ZodType<
    GetAllPromptsResponseFormatPromptsResponse200ApplicationJSONResponseBody1$Outbound,
    z.ZodTypeDef,
    GetAllPromptsResponseFormatPromptsResponse200ApplicationJSONResponseBody1
  > = z.object({
    type:
      GetAllPromptsResponseFormatPromptsResponse200ApplicationJSONResponseBodyData3Type$outboundSchema,
    jsonSchema: z.lazy(() =>
      GetAllPromptsResponseFormatPromptsResponse200ApplicationJSONResponseBodyJSONSchema$outboundSchema
    ),
  }).transform((v) => {
    return remap$(v, {
      jsonSchema: "json_schema",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPromptsResponseFormatPromptsResponse200ApplicationJSONResponseBody1$ {
  /** @deprecated use `GetAllPromptsResponseFormatPromptsResponse200ApplicationJSONResponseBody1$inboundSchema` instead. */
  export const inboundSchema =
    GetAllPromptsResponseFormatPromptsResponse200ApplicationJSONResponseBody1$inboundSchema;
  /** @deprecated use `GetAllPromptsResponseFormatPromptsResponse200ApplicationJSONResponseBody1$outboundSchema` instead. */
  export const outboundSchema =
    GetAllPromptsResponseFormatPromptsResponse200ApplicationJSONResponseBody1$outboundSchema;
  /** @deprecated use `GetAllPromptsResponseFormatPromptsResponse200ApplicationJSONResponseBody1$Outbound` instead. */
  export type Outbound =
    GetAllPromptsResponseFormatPromptsResponse200ApplicationJSONResponseBody1$Outbound;
}

export function getAllPromptsResponseFormatPromptsResponse200ApplicationJSONResponseBody1ToJSON(
  getAllPromptsResponseFormatPromptsResponse200ApplicationJSONResponseBody1:
    GetAllPromptsResponseFormatPromptsResponse200ApplicationJSONResponseBody1,
): string {
  return JSON.stringify(
    GetAllPromptsResponseFormatPromptsResponse200ApplicationJSONResponseBody1$outboundSchema
      .parse(
        getAllPromptsResponseFormatPromptsResponse200ApplicationJSONResponseBody1,
      ),
  );
}

export function getAllPromptsResponseFormatPromptsResponse200ApplicationJSONResponseBody1FromJSON(
  jsonString: string,
): SafeParseResult<
  GetAllPromptsResponseFormatPromptsResponse200ApplicationJSONResponseBody1,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetAllPromptsResponseFormatPromptsResponse200ApplicationJSONResponseBody1$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'GetAllPromptsResponseFormatPromptsResponse200ApplicationJSONResponseBody1' from JSON`,
  );
}

/** @internal */
export const GetAllPromptsDataPromptsResponse200ApplicationJSONResponseFormat$inboundSchema:
  z.ZodType<
    GetAllPromptsDataPromptsResponse200ApplicationJSONResponseFormat,
    z.ZodTypeDef,
    unknown
  > = z.union([
    z.lazy(() =>
      GetAllPromptsResponseFormatPromptsResponse200ApplicationJSONResponseBody2$inboundSchema
    ),
    z.lazy(() =>
      GetAllPromptsResponseFormatPromptsResponse200ApplicationJSONResponseBody1$inboundSchema
    ),
  ]);

/** @internal */
export type GetAllPromptsDataPromptsResponse200ApplicationJSONResponseFormat$Outbound =
  | GetAllPromptsResponseFormatPromptsResponse200ApplicationJSONResponseBody2$Outbound
  | GetAllPromptsResponseFormatPromptsResponse200ApplicationJSONResponseBody1$Outbound;

/** @internal */
export const GetAllPromptsDataPromptsResponse200ApplicationJSONResponseFormat$outboundSchema:
  z.ZodType<
    GetAllPromptsDataPromptsResponse200ApplicationJSONResponseFormat$Outbound,
    z.ZodTypeDef,
    GetAllPromptsDataPromptsResponse200ApplicationJSONResponseFormat
  > = z.union([
    z.lazy(() =>
      GetAllPromptsResponseFormatPromptsResponse200ApplicationJSONResponseBody2$outboundSchema
    ),
    z.lazy(() =>
      GetAllPromptsResponseFormatPromptsResponse200ApplicationJSONResponseBody1$outboundSchema
    ),
  ]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPromptsDataPromptsResponse200ApplicationJSONResponseFormat$ {
  /** @deprecated use `GetAllPromptsDataPromptsResponse200ApplicationJSONResponseFormat$inboundSchema` instead. */
  export const inboundSchema =
    GetAllPromptsDataPromptsResponse200ApplicationJSONResponseFormat$inboundSchema;
  /** @deprecated use `GetAllPromptsDataPromptsResponse200ApplicationJSONResponseFormat$outboundSchema` instead. */
  export const outboundSchema =
    GetAllPromptsDataPromptsResponse200ApplicationJSONResponseFormat$outboundSchema;
  /** @deprecated use `GetAllPromptsDataPromptsResponse200ApplicationJSONResponseFormat$Outbound` instead. */
  export type Outbound =
    GetAllPromptsDataPromptsResponse200ApplicationJSONResponseFormat$Outbound;
}

export function getAllPromptsDataPromptsResponse200ApplicationJSONResponseFormatToJSON(
  getAllPromptsDataPromptsResponse200ApplicationJSONResponseFormat:
    GetAllPromptsDataPromptsResponse200ApplicationJSONResponseFormat,
): string {
  return JSON.stringify(
    GetAllPromptsDataPromptsResponse200ApplicationJSONResponseFormat$outboundSchema
      .parse(getAllPromptsDataPromptsResponse200ApplicationJSONResponseFormat),
  );
}

export function getAllPromptsDataPromptsResponse200ApplicationJSONResponseFormatFromJSON(
  jsonString: string,
): SafeParseResult<
  GetAllPromptsDataPromptsResponse200ApplicationJSONResponseFormat,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetAllPromptsDataPromptsResponse200ApplicationJSONResponseFormat$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'GetAllPromptsDataPromptsResponse200ApplicationJSONResponseFormat' from JSON`,
  );
}

/** @internal */
export const GetAllPromptsDataPromptsResponse200ApplicationJSONPhotoRealVersion$inboundSchema:
  z.ZodNativeEnum<
    typeof GetAllPromptsDataPromptsResponse200ApplicationJSONPhotoRealVersion
  > = z.nativeEnum(
    GetAllPromptsDataPromptsResponse200ApplicationJSONPhotoRealVersion,
  );

/** @internal */
export const GetAllPromptsDataPromptsResponse200ApplicationJSONPhotoRealVersion$outboundSchema:
  z.ZodNativeEnum<
    typeof GetAllPromptsDataPromptsResponse200ApplicationJSONPhotoRealVersion
  > =
    GetAllPromptsDataPromptsResponse200ApplicationJSONPhotoRealVersion$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPromptsDataPromptsResponse200ApplicationJSONPhotoRealVersion$ {
  /** @deprecated use `GetAllPromptsDataPromptsResponse200ApplicationJSONPhotoRealVersion$inboundSchema` instead. */
  export const inboundSchema =
    GetAllPromptsDataPromptsResponse200ApplicationJSONPhotoRealVersion$inboundSchema;
  /** @deprecated use `GetAllPromptsDataPromptsResponse200ApplicationJSONPhotoRealVersion$outboundSchema` instead. */
  export const outboundSchema =
    GetAllPromptsDataPromptsResponse200ApplicationJSONPhotoRealVersion$outboundSchema;
}

/** @internal */
export const GetAllPromptsDataPromptsResponse200ApplicationJSONEncodingFormat$inboundSchema:
  z.ZodNativeEnum<
    typeof GetAllPromptsDataPromptsResponse200ApplicationJSONEncodingFormat
  > = z.nativeEnum(
    GetAllPromptsDataPromptsResponse200ApplicationJSONEncodingFormat,
  );

/** @internal */
export const GetAllPromptsDataPromptsResponse200ApplicationJSONEncodingFormat$outboundSchema:
  z.ZodNativeEnum<
    typeof GetAllPromptsDataPromptsResponse200ApplicationJSONEncodingFormat
  > =
    GetAllPromptsDataPromptsResponse200ApplicationJSONEncodingFormat$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPromptsDataPromptsResponse200ApplicationJSONEncodingFormat$ {
  /** @deprecated use `GetAllPromptsDataPromptsResponse200ApplicationJSONEncodingFormat$inboundSchema` instead. */
  export const inboundSchema =
    GetAllPromptsDataPromptsResponse200ApplicationJSONEncodingFormat$inboundSchema;
  /** @deprecated use `GetAllPromptsDataPromptsResponse200ApplicationJSONEncodingFormat$outboundSchema` instead. */
  export const outboundSchema =
    GetAllPromptsDataPromptsResponse200ApplicationJSONEncodingFormat$outboundSchema;
}

/** @internal */
export const GetAllPromptsDataPromptsResponse200ApplicationJSONModelParameters$inboundSchema:
  z.ZodType<
    GetAllPromptsDataPromptsResponse200ApplicationJSONModelParameters,
    z.ZodTypeDef,
    unknown
  > = z.object({
    temperature: z.number().optional(),
    maxTokens: z.number().optional(),
    topK: z.number().optional(),
    topP: z.number().optional(),
    frequencyPenalty: z.number().optional(),
    presencePenalty: z.number().optional(),
    numImages: z.number().optional(),
    seed: z.number().optional(),
    format:
      GetAllPromptsDataPromptsResponse200ApplicationJSONResponseBodyFormat$inboundSchema
        .optional(),
    dimensions: z.string().optional(),
    quality:
      GetAllPromptsDataPromptsResponse200ApplicationJSONQuality$inboundSchema
        .optional(),
    style: z.string().optional(),
    responseFormat: z.nullable(
      z.union([
        z.lazy(() =>
          GetAllPromptsResponseFormatPromptsResponse200ApplicationJSONResponseBody2$inboundSchema
        ),
        z.lazy(() =>
          GetAllPromptsResponseFormatPromptsResponse200ApplicationJSONResponseBody1$inboundSchema
        ),
      ]),
    ).optional(),
    photoRealVersion:
      GetAllPromptsDataPromptsResponse200ApplicationJSONPhotoRealVersion$inboundSchema
        .optional(),
    encoding_format:
      GetAllPromptsDataPromptsResponse200ApplicationJSONEncodingFormat$inboundSchema
        .optional(),
  }).transform((v) => {
    return remap$(v, {
      "encoding_format": "encodingFormat",
    });
  });

/** @internal */
export type GetAllPromptsDataPromptsResponse200ApplicationJSONModelParameters$Outbound =
  {
    temperature?: number | undefined;
    maxTokens?: number | undefined;
    topK?: number | undefined;
    topP?: number | undefined;
    frequencyPenalty?: number | undefined;
    presencePenalty?: number | undefined;
    numImages?: number | undefined;
    seed?: number | undefined;
    format?: string | undefined;
    dimensions?: string | undefined;
    quality?: string | undefined;
    style?: string | undefined;
    responseFormat?:
      | GetAllPromptsResponseFormatPromptsResponse200ApplicationJSONResponseBody2$Outbound
      | GetAllPromptsResponseFormatPromptsResponse200ApplicationJSONResponseBody1$Outbound
      | null
      | undefined;
    photoRealVersion?: string | undefined;
    encoding_format?: string | undefined;
  };

/** @internal */
export const GetAllPromptsDataPromptsResponse200ApplicationJSONModelParameters$outboundSchema:
  z.ZodType<
    GetAllPromptsDataPromptsResponse200ApplicationJSONModelParameters$Outbound,
    z.ZodTypeDef,
    GetAllPromptsDataPromptsResponse200ApplicationJSONModelParameters
  > = z.object({
    temperature: z.number().optional(),
    maxTokens: z.number().optional(),
    topK: z.number().optional(),
    topP: z.number().optional(),
    frequencyPenalty: z.number().optional(),
    presencePenalty: z.number().optional(),
    numImages: z.number().optional(),
    seed: z.number().optional(),
    format:
      GetAllPromptsDataPromptsResponse200ApplicationJSONResponseBodyFormat$outboundSchema
        .optional(),
    dimensions: z.string().optional(),
    quality:
      GetAllPromptsDataPromptsResponse200ApplicationJSONQuality$outboundSchema
        .optional(),
    style: z.string().optional(),
    responseFormat: z.nullable(
      z.union([
        z.lazy(() =>
          GetAllPromptsResponseFormatPromptsResponse200ApplicationJSONResponseBody2$outboundSchema
        ),
        z.lazy(() =>
          GetAllPromptsResponseFormatPromptsResponse200ApplicationJSONResponseBody1$outboundSchema
        ),
      ]),
    ).optional(),
    photoRealVersion:
      GetAllPromptsDataPromptsResponse200ApplicationJSONPhotoRealVersion$outboundSchema
        .optional(),
    encodingFormat:
      GetAllPromptsDataPromptsResponse200ApplicationJSONEncodingFormat$outboundSchema
        .optional(),
  }).transform((v) => {
    return remap$(v, {
      encodingFormat: "encoding_format",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPromptsDataPromptsResponse200ApplicationJSONModelParameters$ {
  /** @deprecated use `GetAllPromptsDataPromptsResponse200ApplicationJSONModelParameters$inboundSchema` instead. */
  export const inboundSchema =
    GetAllPromptsDataPromptsResponse200ApplicationJSONModelParameters$inboundSchema;
  /** @deprecated use `GetAllPromptsDataPromptsResponse200ApplicationJSONModelParameters$outboundSchema` instead. */
  export const outboundSchema =
    GetAllPromptsDataPromptsResponse200ApplicationJSONModelParameters$outboundSchema;
  /** @deprecated use `GetAllPromptsDataPromptsResponse200ApplicationJSONModelParameters$Outbound` instead. */
  export type Outbound =
    GetAllPromptsDataPromptsResponse200ApplicationJSONModelParameters$Outbound;
}

export function getAllPromptsDataPromptsResponse200ApplicationJSONModelParametersToJSON(
  getAllPromptsDataPromptsResponse200ApplicationJSONModelParameters:
    GetAllPromptsDataPromptsResponse200ApplicationJSONModelParameters,
): string {
  return JSON.stringify(
    GetAllPromptsDataPromptsResponse200ApplicationJSONModelParameters$outboundSchema
      .parse(getAllPromptsDataPromptsResponse200ApplicationJSONModelParameters),
  );
}

export function getAllPromptsDataPromptsResponse200ApplicationJSONModelParametersFromJSON(
  jsonString: string,
): SafeParseResult<
  GetAllPromptsDataPromptsResponse200ApplicationJSONModelParameters,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetAllPromptsDataPromptsResponse200ApplicationJSONModelParameters$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'GetAllPromptsDataPromptsResponse200ApplicationJSONModelParameters' from JSON`,
  );
}

/** @internal */
export const GetAllPromptsDataPromptsResponse200ApplicationJSONProvider$inboundSchema:
  z.ZodNativeEnum<
    typeof GetAllPromptsDataPromptsResponse200ApplicationJSONProvider
  > = z.nativeEnum(GetAllPromptsDataPromptsResponse200ApplicationJSONProvider);

/** @internal */
export const GetAllPromptsDataPromptsResponse200ApplicationJSONProvider$outboundSchema:
  z.ZodNativeEnum<
    typeof GetAllPromptsDataPromptsResponse200ApplicationJSONProvider
  > = GetAllPromptsDataPromptsResponse200ApplicationJSONProvider$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPromptsDataPromptsResponse200ApplicationJSONProvider$ {
  /** @deprecated use `GetAllPromptsDataPromptsResponse200ApplicationJSONProvider$inboundSchema` instead. */
  export const inboundSchema =
    GetAllPromptsDataPromptsResponse200ApplicationJSONProvider$inboundSchema;
  /** @deprecated use `GetAllPromptsDataPromptsResponse200ApplicationJSONProvider$outboundSchema` instead. */
  export const outboundSchema =
    GetAllPromptsDataPromptsResponse200ApplicationJSONProvider$outboundSchema;
}

/** @internal */
export const GetAllPromptsDataPromptsResponse200ApplicationJSONRole$inboundSchema:
  z.ZodNativeEnum<
    typeof GetAllPromptsDataPromptsResponse200ApplicationJSONRole
  > = z.nativeEnum(GetAllPromptsDataPromptsResponse200ApplicationJSONRole);

/** @internal */
export const GetAllPromptsDataPromptsResponse200ApplicationJSONRole$outboundSchema:
  z.ZodNativeEnum<
    typeof GetAllPromptsDataPromptsResponse200ApplicationJSONRole
  > = GetAllPromptsDataPromptsResponse200ApplicationJSONRole$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPromptsDataPromptsResponse200ApplicationJSONRole$ {
  /** @deprecated use `GetAllPromptsDataPromptsResponse200ApplicationJSONRole$inboundSchema` instead. */
  export const inboundSchema =
    GetAllPromptsDataPromptsResponse200ApplicationJSONRole$inboundSchema;
  /** @deprecated use `GetAllPromptsDataPromptsResponse200ApplicationJSONRole$outboundSchema` instead. */
  export const outboundSchema =
    GetAllPromptsDataPromptsResponse200ApplicationJSONRole$outboundSchema;
}

/** @internal */
export const GetAllPrompts2PromptsResponse200ApplicationJSONResponseBodyData3VersionsType$inboundSchema:
  z.ZodNativeEnum<
    typeof GetAllPrompts2PromptsResponse200ApplicationJSONResponseBodyData3VersionsType
  > = z.nativeEnum(
    GetAllPrompts2PromptsResponse200ApplicationJSONResponseBodyData3VersionsType,
  );

/** @internal */
export const GetAllPrompts2PromptsResponse200ApplicationJSONResponseBodyData3VersionsType$outboundSchema:
  z.ZodNativeEnum<
    typeof GetAllPrompts2PromptsResponse200ApplicationJSONResponseBodyData3VersionsType
  > =
    GetAllPrompts2PromptsResponse200ApplicationJSONResponseBodyData3VersionsType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPrompts2PromptsResponse200ApplicationJSONResponseBodyData3VersionsType$ {
  /** @deprecated use `GetAllPrompts2PromptsResponse200ApplicationJSONResponseBodyData3VersionsType$inboundSchema` instead. */
  export const inboundSchema =
    GetAllPrompts2PromptsResponse200ApplicationJSONResponseBodyData3VersionsType$inboundSchema;
  /** @deprecated use `GetAllPrompts2PromptsResponse200ApplicationJSONResponseBodyData3VersionsType$outboundSchema` instead. */
  export const outboundSchema =
    GetAllPrompts2PromptsResponse200ApplicationJSONResponseBodyData3VersionsType$outboundSchema;
}

/** @internal */
export const GetAllPrompts2PromptsResponse200ApplicationJSONResponseBodyImageUrl$inboundSchema:
  z.ZodType<
    GetAllPrompts2PromptsResponse200ApplicationJSONResponseBodyImageUrl,
    z.ZodTypeDef,
    unknown
  > = z.object({
    id: z.string().optional(),
    url: z.string(),
    detail: z.string().optional(),
  });

/** @internal */
export type GetAllPrompts2PromptsResponse200ApplicationJSONResponseBodyImageUrl$Outbound =
  {
    id?: string | undefined;
    url: string;
    detail?: string | undefined;
  };

/** @internal */
export const GetAllPrompts2PromptsResponse200ApplicationJSONResponseBodyImageUrl$outboundSchema:
  z.ZodType<
    GetAllPrompts2PromptsResponse200ApplicationJSONResponseBodyImageUrl$Outbound,
    z.ZodTypeDef,
    GetAllPrompts2PromptsResponse200ApplicationJSONResponseBodyImageUrl
  > = z.object({
    id: z.string().optional(),
    url: z.string(),
    detail: z.string().optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPrompts2PromptsResponse200ApplicationJSONResponseBodyImageUrl$ {
  /** @deprecated use `GetAllPrompts2PromptsResponse200ApplicationJSONResponseBodyImageUrl$inboundSchema` instead. */
  export const inboundSchema =
    GetAllPrompts2PromptsResponse200ApplicationJSONResponseBodyImageUrl$inboundSchema;
  /** @deprecated use `GetAllPrompts2PromptsResponse200ApplicationJSONResponseBodyImageUrl$outboundSchema` instead. */
  export const outboundSchema =
    GetAllPrompts2PromptsResponse200ApplicationJSONResponseBodyImageUrl$outboundSchema;
  /** @deprecated use `GetAllPrompts2PromptsResponse200ApplicationJSONResponseBodyImageUrl$Outbound` instead. */
  export type Outbound =
    GetAllPrompts2PromptsResponse200ApplicationJSONResponseBodyImageUrl$Outbound;
}

export function getAllPrompts2PromptsResponse200ApplicationJSONResponseBodyImageUrlToJSON(
  getAllPrompts2PromptsResponse200ApplicationJSONResponseBodyImageUrl:
    GetAllPrompts2PromptsResponse200ApplicationJSONResponseBodyImageUrl,
): string {
  return JSON.stringify(
    GetAllPrompts2PromptsResponse200ApplicationJSONResponseBodyImageUrl$outboundSchema
      .parse(
        getAllPrompts2PromptsResponse200ApplicationJSONResponseBodyImageUrl,
      ),
  );
}

export function getAllPrompts2PromptsResponse200ApplicationJSONResponseBodyImageUrlFromJSON(
  jsonString: string,
): SafeParseResult<
  GetAllPrompts2PromptsResponse200ApplicationJSONResponseBodyImageUrl,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetAllPrompts2PromptsResponse200ApplicationJSONResponseBodyImageUrl$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'GetAllPrompts2PromptsResponse200ApplicationJSONResponseBodyImageUrl' from JSON`,
  );
}

/** @internal */
export const GetAllPrompts2PromptsResponse200ApplicationJSONResponseBody2$inboundSchema:
  z.ZodType<
    GetAllPrompts2PromptsResponse200ApplicationJSONResponseBody2,
    z.ZodTypeDef,
    unknown
  > = z.object({
    type:
      GetAllPrompts2PromptsResponse200ApplicationJSONResponseBodyData3VersionsType$inboundSchema,
    image_url: z.lazy(() =>
      GetAllPrompts2PromptsResponse200ApplicationJSONResponseBodyImageUrl$inboundSchema
    ),
  }).transform((v) => {
    return remap$(v, {
      "image_url": "imageUrl",
    });
  });

/** @internal */
export type GetAllPrompts2PromptsResponse200ApplicationJSONResponseBody2$Outbound =
  {
    type: string;
    image_url:
      GetAllPrompts2PromptsResponse200ApplicationJSONResponseBodyImageUrl$Outbound;
  };

/** @internal */
export const GetAllPrompts2PromptsResponse200ApplicationJSONResponseBody2$outboundSchema:
  z.ZodType<
    GetAllPrompts2PromptsResponse200ApplicationJSONResponseBody2$Outbound,
    z.ZodTypeDef,
    GetAllPrompts2PromptsResponse200ApplicationJSONResponseBody2
  > = z.object({
    type:
      GetAllPrompts2PromptsResponse200ApplicationJSONResponseBodyData3VersionsType$outboundSchema,
    imageUrl: z.lazy(() =>
      GetAllPrompts2PromptsResponse200ApplicationJSONResponseBodyImageUrl$outboundSchema
    ),
  }).transform((v) => {
    return remap$(v, {
      imageUrl: "image_url",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPrompts2PromptsResponse200ApplicationJSONResponseBody2$ {
  /** @deprecated use `GetAllPrompts2PromptsResponse200ApplicationJSONResponseBody2$inboundSchema` instead. */
  export const inboundSchema =
    GetAllPrompts2PromptsResponse200ApplicationJSONResponseBody2$inboundSchema;
  /** @deprecated use `GetAllPrompts2PromptsResponse200ApplicationJSONResponseBody2$outboundSchema` instead. */
  export const outboundSchema =
    GetAllPrompts2PromptsResponse200ApplicationJSONResponseBody2$outboundSchema;
  /** @deprecated use `GetAllPrompts2PromptsResponse200ApplicationJSONResponseBody2$Outbound` instead. */
  export type Outbound =
    GetAllPrompts2PromptsResponse200ApplicationJSONResponseBody2$Outbound;
}

export function getAllPrompts2PromptsResponse200ApplicationJSONResponseBody2ToJSON(
  getAllPrompts2PromptsResponse200ApplicationJSONResponseBody2:
    GetAllPrompts2PromptsResponse200ApplicationJSONResponseBody2,
): string {
  return JSON.stringify(
    GetAllPrompts2PromptsResponse200ApplicationJSONResponseBody2$outboundSchema
      .parse(getAllPrompts2PromptsResponse200ApplicationJSONResponseBody2),
  );
}

export function getAllPrompts2PromptsResponse200ApplicationJSONResponseBody2FromJSON(
  jsonString: string,
): SafeParseResult<
  GetAllPrompts2PromptsResponse200ApplicationJSONResponseBody2,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetAllPrompts2PromptsResponse200ApplicationJSONResponseBody2$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'GetAllPrompts2PromptsResponse200ApplicationJSONResponseBody2' from JSON`,
  );
}

/** @internal */
export const GetAllPrompts2PromptsResponse200ApplicationJSONResponseBodyData3Type$inboundSchema:
  z.ZodNativeEnum<
    typeof GetAllPrompts2PromptsResponse200ApplicationJSONResponseBodyData3Type
  > = z.nativeEnum(
    GetAllPrompts2PromptsResponse200ApplicationJSONResponseBodyData3Type,
  );

/** @internal */
export const GetAllPrompts2PromptsResponse200ApplicationJSONResponseBodyData3Type$outboundSchema:
  z.ZodNativeEnum<
    typeof GetAllPrompts2PromptsResponse200ApplicationJSONResponseBodyData3Type
  > =
    GetAllPrompts2PromptsResponse200ApplicationJSONResponseBodyData3Type$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPrompts2PromptsResponse200ApplicationJSONResponseBodyData3Type$ {
  /** @deprecated use `GetAllPrompts2PromptsResponse200ApplicationJSONResponseBodyData3Type$inboundSchema` instead. */
  export const inboundSchema =
    GetAllPrompts2PromptsResponse200ApplicationJSONResponseBodyData3Type$inboundSchema;
  /** @deprecated use `GetAllPrompts2PromptsResponse200ApplicationJSONResponseBodyData3Type$outboundSchema` instead. */
  export const outboundSchema =
    GetAllPrompts2PromptsResponse200ApplicationJSONResponseBodyData3Type$outboundSchema;
}

/** @internal */
export const GetAllPrompts2PromptsResponse200ApplicationJSONResponseBody1$inboundSchema:
  z.ZodType<
    GetAllPrompts2PromptsResponse200ApplicationJSONResponseBody1,
    z.ZodTypeDef,
    unknown
  > = z.object({
    type:
      GetAllPrompts2PromptsResponse200ApplicationJSONResponseBodyData3Type$inboundSchema,
    text: z.string(),
  });

/** @internal */
export type GetAllPrompts2PromptsResponse200ApplicationJSONResponseBody1$Outbound =
  {
    type: string;
    text: string;
  };

/** @internal */
export const GetAllPrompts2PromptsResponse200ApplicationJSONResponseBody1$outboundSchema:
  z.ZodType<
    GetAllPrompts2PromptsResponse200ApplicationJSONResponseBody1$Outbound,
    z.ZodTypeDef,
    GetAllPrompts2PromptsResponse200ApplicationJSONResponseBody1
  > = z.object({
    type:
      GetAllPrompts2PromptsResponse200ApplicationJSONResponseBodyData3Type$outboundSchema,
    text: z.string(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPrompts2PromptsResponse200ApplicationJSONResponseBody1$ {
  /** @deprecated use `GetAllPrompts2PromptsResponse200ApplicationJSONResponseBody1$inboundSchema` instead. */
  export const inboundSchema =
    GetAllPrompts2PromptsResponse200ApplicationJSONResponseBody1$inboundSchema;
  /** @deprecated use `GetAllPrompts2PromptsResponse200ApplicationJSONResponseBody1$outboundSchema` instead. */
  export const outboundSchema =
    GetAllPrompts2PromptsResponse200ApplicationJSONResponseBody1$outboundSchema;
  /** @deprecated use `GetAllPrompts2PromptsResponse200ApplicationJSONResponseBody1$Outbound` instead. */
  export type Outbound =
    GetAllPrompts2PromptsResponse200ApplicationJSONResponseBody1$Outbound;
}

export function getAllPrompts2PromptsResponse200ApplicationJSONResponseBody1ToJSON(
  getAllPrompts2PromptsResponse200ApplicationJSONResponseBody1:
    GetAllPrompts2PromptsResponse200ApplicationJSONResponseBody1,
): string {
  return JSON.stringify(
    GetAllPrompts2PromptsResponse200ApplicationJSONResponseBody1$outboundSchema
      .parse(getAllPrompts2PromptsResponse200ApplicationJSONResponseBody1),
  );
}

export function getAllPrompts2PromptsResponse200ApplicationJSONResponseBody1FromJSON(
  jsonString: string,
): SafeParseResult<
  GetAllPrompts2PromptsResponse200ApplicationJSONResponseBody1,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetAllPrompts2PromptsResponse200ApplicationJSONResponseBody1$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'GetAllPrompts2PromptsResponse200ApplicationJSONResponseBody1' from JSON`,
  );
}

/** @internal */
export const GetAllPromptsContentPromptsResponse200ApplicationJSONResponseBody2$inboundSchema:
  z.ZodType<
    GetAllPromptsContentPromptsResponse200ApplicationJSONResponseBody2,
    z.ZodTypeDef,
    unknown
  > = z.union([
    z.lazy(() =>
      GetAllPrompts2PromptsResponse200ApplicationJSONResponseBody1$inboundSchema
    ),
    z.lazy(() =>
      GetAllPrompts2PromptsResponse200ApplicationJSONResponseBody2$inboundSchema
    ),
  ]);

/** @internal */
export type GetAllPromptsContentPromptsResponse200ApplicationJSONResponseBody2$Outbound =
  | GetAllPrompts2PromptsResponse200ApplicationJSONResponseBody1$Outbound
  | GetAllPrompts2PromptsResponse200ApplicationJSONResponseBody2$Outbound;

/** @internal */
export const GetAllPromptsContentPromptsResponse200ApplicationJSONResponseBody2$outboundSchema:
  z.ZodType<
    GetAllPromptsContentPromptsResponse200ApplicationJSONResponseBody2$Outbound,
    z.ZodTypeDef,
    GetAllPromptsContentPromptsResponse200ApplicationJSONResponseBody2
  > = z.union([
    z.lazy(() =>
      GetAllPrompts2PromptsResponse200ApplicationJSONResponseBody1$outboundSchema
    ),
    z.lazy(() =>
      GetAllPrompts2PromptsResponse200ApplicationJSONResponseBody2$outboundSchema
    ),
  ]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPromptsContentPromptsResponse200ApplicationJSONResponseBody2$ {
  /** @deprecated use `GetAllPromptsContentPromptsResponse200ApplicationJSONResponseBody2$inboundSchema` instead. */
  export const inboundSchema =
    GetAllPromptsContentPromptsResponse200ApplicationJSONResponseBody2$inboundSchema;
  /** @deprecated use `GetAllPromptsContentPromptsResponse200ApplicationJSONResponseBody2$outboundSchema` instead. */
  export const outboundSchema =
    GetAllPromptsContentPromptsResponse200ApplicationJSONResponseBody2$outboundSchema;
  /** @deprecated use `GetAllPromptsContentPromptsResponse200ApplicationJSONResponseBody2$Outbound` instead. */
  export type Outbound =
    GetAllPromptsContentPromptsResponse200ApplicationJSONResponseBody2$Outbound;
}

export function getAllPromptsContentPromptsResponse200ApplicationJSONResponseBody2ToJSON(
  getAllPromptsContentPromptsResponse200ApplicationJSONResponseBody2:
    GetAllPromptsContentPromptsResponse200ApplicationJSONResponseBody2,
): string {
  return JSON.stringify(
    GetAllPromptsContentPromptsResponse200ApplicationJSONResponseBody2$outboundSchema
      .parse(
        getAllPromptsContentPromptsResponse200ApplicationJSONResponseBody2,
      ),
  );
}

export function getAllPromptsContentPromptsResponse200ApplicationJSONResponseBody2FromJSON(
  jsonString: string,
): SafeParseResult<
  GetAllPromptsContentPromptsResponse200ApplicationJSONResponseBody2,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetAllPromptsContentPromptsResponse200ApplicationJSONResponseBody2$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'GetAllPromptsContentPromptsResponse200ApplicationJSONResponseBody2' from JSON`,
  );
}

/** @internal */
export const GetAllPromptsDataPromptsResponse200ApplicationJSONContent$inboundSchema:
  z.ZodType<
    GetAllPromptsDataPromptsResponse200ApplicationJSONContent,
    z.ZodTypeDef,
    unknown
  > = z.union([
    z.string(),
    z.array(z.union([
      z.lazy(() =>
        GetAllPrompts2PromptsResponse200ApplicationJSONResponseBody1$inboundSchema
      ),
      z.lazy(() =>
        GetAllPrompts2PromptsResponse200ApplicationJSONResponseBody2$inboundSchema
      ),
    ])),
  ]);

/** @internal */
export type GetAllPromptsDataPromptsResponse200ApplicationJSONContent$Outbound =
  | string
  | Array<
    | GetAllPrompts2PromptsResponse200ApplicationJSONResponseBody1$Outbound
    | GetAllPrompts2PromptsResponse200ApplicationJSONResponseBody2$Outbound
  >;

/** @internal */
export const GetAllPromptsDataPromptsResponse200ApplicationJSONContent$outboundSchema:
  z.ZodType<
    GetAllPromptsDataPromptsResponse200ApplicationJSONContent$Outbound,
    z.ZodTypeDef,
    GetAllPromptsDataPromptsResponse200ApplicationJSONContent
  > = z.union([
    z.string(),
    z.array(z.union([
      z.lazy(() =>
        GetAllPrompts2PromptsResponse200ApplicationJSONResponseBody1$outboundSchema
      ),
      z.lazy(() =>
        GetAllPrompts2PromptsResponse200ApplicationJSONResponseBody2$outboundSchema
      ),
    ])),
  ]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPromptsDataPromptsResponse200ApplicationJSONContent$ {
  /** @deprecated use `GetAllPromptsDataPromptsResponse200ApplicationJSONContent$inboundSchema` instead. */
  export const inboundSchema =
    GetAllPromptsDataPromptsResponse200ApplicationJSONContent$inboundSchema;
  /** @deprecated use `GetAllPromptsDataPromptsResponse200ApplicationJSONContent$outboundSchema` instead. */
  export const outboundSchema =
    GetAllPromptsDataPromptsResponse200ApplicationJSONContent$outboundSchema;
  /** @deprecated use `GetAllPromptsDataPromptsResponse200ApplicationJSONContent$Outbound` instead. */
  export type Outbound =
    GetAllPromptsDataPromptsResponse200ApplicationJSONContent$Outbound;
}

export function getAllPromptsDataPromptsResponse200ApplicationJSONContentToJSON(
  getAllPromptsDataPromptsResponse200ApplicationJSONContent:
    GetAllPromptsDataPromptsResponse200ApplicationJSONContent,
): string {
  return JSON.stringify(
    GetAllPromptsDataPromptsResponse200ApplicationJSONContent$outboundSchema
      .parse(getAllPromptsDataPromptsResponse200ApplicationJSONContent),
  );
}

export function getAllPromptsDataPromptsResponse200ApplicationJSONContentFromJSON(
  jsonString: string,
): SafeParseResult<
  GetAllPromptsDataPromptsResponse200ApplicationJSONContent,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetAllPromptsDataPromptsResponse200ApplicationJSONContent$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'GetAllPromptsDataPromptsResponse200ApplicationJSONContent' from JSON`,
  );
}

/** @internal */
export const GetAllPromptsDataPromptsResponse200ApplicationJSONResponseBody3Type$inboundSchema:
  z.ZodNativeEnum<
    typeof GetAllPromptsDataPromptsResponse200ApplicationJSONResponseBody3Type
  > = z.nativeEnum(
    GetAllPromptsDataPromptsResponse200ApplicationJSONResponseBody3Type,
  );

/** @internal */
export const GetAllPromptsDataPromptsResponse200ApplicationJSONResponseBody3Type$outboundSchema:
  z.ZodNativeEnum<
    typeof GetAllPromptsDataPromptsResponse200ApplicationJSONResponseBody3Type
  > =
    GetAllPromptsDataPromptsResponse200ApplicationJSONResponseBody3Type$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPromptsDataPromptsResponse200ApplicationJSONResponseBody3Type$ {
  /** @deprecated use `GetAllPromptsDataPromptsResponse200ApplicationJSONResponseBody3Type$inboundSchema` instead. */
  export const inboundSchema =
    GetAllPromptsDataPromptsResponse200ApplicationJSONResponseBody3Type$inboundSchema;
  /** @deprecated use `GetAllPromptsDataPromptsResponse200ApplicationJSONResponseBody3Type$outboundSchema` instead. */
  export const outboundSchema =
    GetAllPromptsDataPromptsResponse200ApplicationJSONResponseBody3Type$outboundSchema;
}

/** @internal */
export const GetAllPromptsDataPromptsResponse200ApplicationJSONResponseBodyFunction$inboundSchema:
  z.ZodType<
    GetAllPromptsDataPromptsResponse200ApplicationJSONResponseBodyFunction,
    z.ZodTypeDef,
    unknown
  > = z.object({
    name: z.string(),
    arguments: z.string(),
  });

/** @internal */
export type GetAllPromptsDataPromptsResponse200ApplicationJSONResponseBodyFunction$Outbound =
  {
    name: string;
    arguments: string;
  };

/** @internal */
export const GetAllPromptsDataPromptsResponse200ApplicationJSONResponseBodyFunction$outboundSchema:
  z.ZodType<
    GetAllPromptsDataPromptsResponse200ApplicationJSONResponseBodyFunction$Outbound,
    z.ZodTypeDef,
    GetAllPromptsDataPromptsResponse200ApplicationJSONResponseBodyFunction
  > = z.object({
    name: z.string(),
    arguments: z.string(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPromptsDataPromptsResponse200ApplicationJSONResponseBodyFunction$ {
  /** @deprecated use `GetAllPromptsDataPromptsResponse200ApplicationJSONResponseBodyFunction$inboundSchema` instead. */
  export const inboundSchema =
    GetAllPromptsDataPromptsResponse200ApplicationJSONResponseBodyFunction$inboundSchema;
  /** @deprecated use `GetAllPromptsDataPromptsResponse200ApplicationJSONResponseBodyFunction$outboundSchema` instead. */
  export const outboundSchema =
    GetAllPromptsDataPromptsResponse200ApplicationJSONResponseBodyFunction$outboundSchema;
  /** @deprecated use `GetAllPromptsDataPromptsResponse200ApplicationJSONResponseBodyFunction$Outbound` instead. */
  export type Outbound =
    GetAllPromptsDataPromptsResponse200ApplicationJSONResponseBodyFunction$Outbound;
}

export function getAllPromptsDataPromptsResponse200ApplicationJSONResponseBodyFunctionToJSON(
  getAllPromptsDataPromptsResponse200ApplicationJSONResponseBodyFunction:
    GetAllPromptsDataPromptsResponse200ApplicationJSONResponseBodyFunction,
): string {
  return JSON.stringify(
    GetAllPromptsDataPromptsResponse200ApplicationJSONResponseBodyFunction$outboundSchema
      .parse(
        getAllPromptsDataPromptsResponse200ApplicationJSONResponseBodyFunction,
      ),
  );
}

export function getAllPromptsDataPromptsResponse200ApplicationJSONResponseBodyFunctionFromJSON(
  jsonString: string,
): SafeParseResult<
  GetAllPromptsDataPromptsResponse200ApplicationJSONResponseBodyFunction,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetAllPromptsDataPromptsResponse200ApplicationJSONResponseBodyFunction$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'GetAllPromptsDataPromptsResponse200ApplicationJSONResponseBodyFunction' from JSON`,
  );
}

/** @internal */
export const GetAllPromptsDataPromptsResponse200ApplicationJSONToolCalls$inboundSchema:
  z.ZodType<
    GetAllPromptsDataPromptsResponse200ApplicationJSONToolCalls,
    z.ZodTypeDef,
    unknown
  > = z.object({
    id: z.string().optional(),
    index: z.number().optional(),
    type:
      GetAllPromptsDataPromptsResponse200ApplicationJSONResponseBody3Type$inboundSchema,
    function: z.lazy(() =>
      GetAllPromptsDataPromptsResponse200ApplicationJSONResponseBodyFunction$inboundSchema
    ),
  });

/** @internal */
export type GetAllPromptsDataPromptsResponse200ApplicationJSONToolCalls$Outbound =
  {
    id?: string | undefined;
    index?: number | undefined;
    type: string;
    function:
      GetAllPromptsDataPromptsResponse200ApplicationJSONResponseBodyFunction$Outbound;
  };

/** @internal */
export const GetAllPromptsDataPromptsResponse200ApplicationJSONToolCalls$outboundSchema:
  z.ZodType<
    GetAllPromptsDataPromptsResponse200ApplicationJSONToolCalls$Outbound,
    z.ZodTypeDef,
    GetAllPromptsDataPromptsResponse200ApplicationJSONToolCalls
  > = z.object({
    id: z.string().optional(),
    index: z.number().optional(),
    type:
      GetAllPromptsDataPromptsResponse200ApplicationJSONResponseBody3Type$outboundSchema,
    function: z.lazy(() =>
      GetAllPromptsDataPromptsResponse200ApplicationJSONResponseBodyFunction$outboundSchema
    ),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPromptsDataPromptsResponse200ApplicationJSONToolCalls$ {
  /** @deprecated use `GetAllPromptsDataPromptsResponse200ApplicationJSONToolCalls$inboundSchema` instead. */
  export const inboundSchema =
    GetAllPromptsDataPromptsResponse200ApplicationJSONToolCalls$inboundSchema;
  /** @deprecated use `GetAllPromptsDataPromptsResponse200ApplicationJSONToolCalls$outboundSchema` instead. */
  export const outboundSchema =
    GetAllPromptsDataPromptsResponse200ApplicationJSONToolCalls$outboundSchema;
  /** @deprecated use `GetAllPromptsDataPromptsResponse200ApplicationJSONToolCalls$Outbound` instead. */
  export type Outbound =
    GetAllPromptsDataPromptsResponse200ApplicationJSONToolCalls$Outbound;
}

export function getAllPromptsDataPromptsResponse200ApplicationJSONToolCallsToJSON(
  getAllPromptsDataPromptsResponse200ApplicationJSONToolCalls:
    GetAllPromptsDataPromptsResponse200ApplicationJSONToolCalls,
): string {
  return JSON.stringify(
    GetAllPromptsDataPromptsResponse200ApplicationJSONToolCalls$outboundSchema
      .parse(getAllPromptsDataPromptsResponse200ApplicationJSONToolCalls),
  );
}

export function getAllPromptsDataPromptsResponse200ApplicationJSONToolCallsFromJSON(
  jsonString: string,
): SafeParseResult<
  GetAllPromptsDataPromptsResponse200ApplicationJSONToolCalls,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetAllPromptsDataPromptsResponse200ApplicationJSONToolCalls$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'GetAllPromptsDataPromptsResponse200ApplicationJSONToolCalls' from JSON`,
  );
}

/** @internal */
export const GetAllPromptsDataPromptsResponse200ApplicationJSONMessages$inboundSchema:
  z.ZodType<
    GetAllPromptsDataPromptsResponse200ApplicationJSONMessages,
    z.ZodTypeDef,
    unknown
  > = z.object({
    role: GetAllPromptsDataPromptsResponse200ApplicationJSONRole$inboundSchema,
    content: z.union([
      z.string(),
      z.array(z.union([
        z.lazy(() =>
          GetAllPrompts2PromptsResponse200ApplicationJSONResponseBody1$inboundSchema
        ),
        z.lazy(() =>
          GetAllPrompts2PromptsResponse200ApplicationJSONResponseBody2$inboundSchema
        ),
      ])),
    ]),
    tool_calls: z.array(
      z.lazy(() =>
        GetAllPromptsDataPromptsResponse200ApplicationJSONToolCalls$inboundSchema
      ),
    ).optional(),
  }).transform((v) => {
    return remap$(v, {
      "tool_calls": "toolCalls",
    });
  });

/** @internal */
export type GetAllPromptsDataPromptsResponse200ApplicationJSONMessages$Outbound =
  {
    role: string;
    content:
      | string
      | Array<
        | GetAllPrompts2PromptsResponse200ApplicationJSONResponseBody1$Outbound
        | GetAllPrompts2PromptsResponse200ApplicationJSONResponseBody2$Outbound
      >;
    tool_calls?:
      | Array<
        GetAllPromptsDataPromptsResponse200ApplicationJSONToolCalls$Outbound
      >
      | undefined;
  };

/** @internal */
export const GetAllPromptsDataPromptsResponse200ApplicationJSONMessages$outboundSchema:
  z.ZodType<
    GetAllPromptsDataPromptsResponse200ApplicationJSONMessages$Outbound,
    z.ZodTypeDef,
    GetAllPromptsDataPromptsResponse200ApplicationJSONMessages
  > = z.object({
    role: GetAllPromptsDataPromptsResponse200ApplicationJSONRole$outboundSchema,
    content: z.union([
      z.string(),
      z.array(z.union([
        z.lazy(() =>
          GetAllPrompts2PromptsResponse200ApplicationJSONResponseBody1$outboundSchema
        ),
        z.lazy(() =>
          GetAllPrompts2PromptsResponse200ApplicationJSONResponseBody2$outboundSchema
        ),
      ])),
    ]),
    toolCalls: z.array(
      z.lazy(() =>
        GetAllPromptsDataPromptsResponse200ApplicationJSONToolCalls$outboundSchema
      ),
    ).optional(),
  }).transform((v) => {
    return remap$(v, {
      toolCalls: "tool_calls",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPromptsDataPromptsResponse200ApplicationJSONMessages$ {
  /** @deprecated use `GetAllPromptsDataPromptsResponse200ApplicationJSONMessages$inboundSchema` instead. */
  export const inboundSchema =
    GetAllPromptsDataPromptsResponse200ApplicationJSONMessages$inboundSchema;
  /** @deprecated use `GetAllPromptsDataPromptsResponse200ApplicationJSONMessages$outboundSchema` instead. */
  export const outboundSchema =
    GetAllPromptsDataPromptsResponse200ApplicationJSONMessages$outboundSchema;
  /** @deprecated use `GetAllPromptsDataPromptsResponse200ApplicationJSONMessages$Outbound` instead. */
  export type Outbound =
    GetAllPromptsDataPromptsResponse200ApplicationJSONMessages$Outbound;
}

export function getAllPromptsDataPromptsResponse200ApplicationJSONMessagesToJSON(
  getAllPromptsDataPromptsResponse200ApplicationJSONMessages:
    GetAllPromptsDataPromptsResponse200ApplicationJSONMessages,
): string {
  return JSON.stringify(
    GetAllPromptsDataPromptsResponse200ApplicationJSONMessages$outboundSchema
      .parse(getAllPromptsDataPromptsResponse200ApplicationJSONMessages),
  );
}

export function getAllPromptsDataPromptsResponse200ApplicationJSONMessagesFromJSON(
  jsonString: string,
): SafeParseResult<
  GetAllPromptsDataPromptsResponse200ApplicationJSONMessages,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetAllPromptsDataPromptsResponse200ApplicationJSONMessages$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'GetAllPromptsDataPromptsResponse200ApplicationJSONMessages' from JSON`,
  );
}

/** @internal */
export const GetAllPromptsDataPromptsResponse200ApplicationJSONPromptConfig$inboundSchema:
  z.ZodType<
    GetAllPromptsDataPromptsResponse200ApplicationJSONPromptConfig,
    z.ZodTypeDef,
    unknown
  > = z.object({
    stream: z.boolean().optional(),
    model: z.string().optional(),
    model_db_id: z.string().optional(),
    model_type:
      GetAllPromptsDataPromptsResponse200ApplicationJSONModelType$inboundSchema
        .optional(),
    model_parameters: z.lazy(() =>
      GetAllPromptsDataPromptsResponse200ApplicationJSONModelParameters$inboundSchema
    ).optional(),
    provider:
      GetAllPromptsDataPromptsResponse200ApplicationJSONProvider$inboundSchema
        .optional(),
    integration_id: z.nullable(z.string()).optional(),
    version: z.string().optional(),
    messages: z.array(
      z.lazy(() =>
        GetAllPromptsDataPromptsResponse200ApplicationJSONMessages$inboundSchema
      ),
    ),
  }).transform((v) => {
    return remap$(v, {
      "model_db_id": "modelDbId",
      "model_type": "modelType",
      "model_parameters": "modelParameters",
      "integration_id": "integrationId",
    });
  });

/** @internal */
export type GetAllPromptsDataPromptsResponse200ApplicationJSONPromptConfig$Outbound =
  {
    stream?: boolean | undefined;
    model?: string | undefined;
    model_db_id?: string | undefined;
    model_type?: string | undefined;
    model_parameters?:
      | GetAllPromptsDataPromptsResponse200ApplicationJSONModelParameters$Outbound
      | undefined;
    provider?: string | undefined;
    integration_id?: string | null | undefined;
    version?: string | undefined;
    messages: Array<
      GetAllPromptsDataPromptsResponse200ApplicationJSONMessages$Outbound
    >;
  };

/** @internal */
export const GetAllPromptsDataPromptsResponse200ApplicationJSONPromptConfig$outboundSchema:
  z.ZodType<
    GetAllPromptsDataPromptsResponse200ApplicationJSONPromptConfig$Outbound,
    z.ZodTypeDef,
    GetAllPromptsDataPromptsResponse200ApplicationJSONPromptConfig
  > = z.object({
    stream: z.boolean().optional(),
    model: z.string().optional(),
    modelDbId: z.string().optional(),
    modelType:
      GetAllPromptsDataPromptsResponse200ApplicationJSONModelType$outboundSchema
        .optional(),
    modelParameters: z.lazy(() =>
      GetAllPromptsDataPromptsResponse200ApplicationJSONModelParameters$outboundSchema
    ).optional(),
    provider:
      GetAllPromptsDataPromptsResponse200ApplicationJSONProvider$outboundSchema
        .optional(),
    integrationId: z.nullable(z.string()).optional(),
    version: z.string().optional(),
    messages: z.array(
      z.lazy(() =>
        GetAllPromptsDataPromptsResponse200ApplicationJSONMessages$outboundSchema
      ),
    ),
  }).transform((v) => {
    return remap$(v, {
      modelDbId: "model_db_id",
      modelType: "model_type",
      modelParameters: "model_parameters",
      integrationId: "integration_id",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPromptsDataPromptsResponse200ApplicationJSONPromptConfig$ {
  /** @deprecated use `GetAllPromptsDataPromptsResponse200ApplicationJSONPromptConfig$inboundSchema` instead. */
  export const inboundSchema =
    GetAllPromptsDataPromptsResponse200ApplicationJSONPromptConfig$inboundSchema;
  /** @deprecated use `GetAllPromptsDataPromptsResponse200ApplicationJSONPromptConfig$outboundSchema` instead. */
  export const outboundSchema =
    GetAllPromptsDataPromptsResponse200ApplicationJSONPromptConfig$outboundSchema;
  /** @deprecated use `GetAllPromptsDataPromptsResponse200ApplicationJSONPromptConfig$Outbound` instead. */
  export type Outbound =
    GetAllPromptsDataPromptsResponse200ApplicationJSONPromptConfig$Outbound;
}

export function getAllPromptsDataPromptsResponse200ApplicationJSONPromptConfigToJSON(
  getAllPromptsDataPromptsResponse200ApplicationJSONPromptConfig:
    GetAllPromptsDataPromptsResponse200ApplicationJSONPromptConfig,
): string {
  return JSON.stringify(
    GetAllPromptsDataPromptsResponse200ApplicationJSONPromptConfig$outboundSchema
      .parse(getAllPromptsDataPromptsResponse200ApplicationJSONPromptConfig),
  );
}

export function getAllPromptsDataPromptsResponse200ApplicationJSONPromptConfigFromJSON(
  jsonString: string,
): SafeParseResult<
  GetAllPromptsDataPromptsResponse200ApplicationJSONPromptConfig,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetAllPromptsDataPromptsResponse200ApplicationJSONPromptConfig$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'GetAllPromptsDataPromptsResponse200ApplicationJSONPromptConfig' from JSON`,
  );
}

/** @internal */
export const GetAllPromptsDataPromptsResponse200ApplicationJSONMetadata$inboundSchema:
  z.ZodType<
    GetAllPromptsDataPromptsResponse200ApplicationJSONMetadata,
    z.ZodTypeDef,
    unknown
  > = z.object({
    use_cases: z.array(z.string()).optional(),
    language: z.string().optional(),
  }).transform((v) => {
    return remap$(v, {
      "use_cases": "useCases",
    });
  });

/** @internal */
export type GetAllPromptsDataPromptsResponse200ApplicationJSONMetadata$Outbound =
  {
    use_cases?: Array<string> | undefined;
    language?: string | undefined;
  };

/** @internal */
export const GetAllPromptsDataPromptsResponse200ApplicationJSONMetadata$outboundSchema:
  z.ZodType<
    GetAllPromptsDataPromptsResponse200ApplicationJSONMetadata$Outbound,
    z.ZodTypeDef,
    GetAllPromptsDataPromptsResponse200ApplicationJSONMetadata
  > = z.object({
    useCases: z.array(z.string()).optional(),
    language: z.string().optional(),
  }).transform((v) => {
    return remap$(v, {
      useCases: "use_cases",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPromptsDataPromptsResponse200ApplicationJSONMetadata$ {
  /** @deprecated use `GetAllPromptsDataPromptsResponse200ApplicationJSONMetadata$inboundSchema` instead. */
  export const inboundSchema =
    GetAllPromptsDataPromptsResponse200ApplicationJSONMetadata$inboundSchema;
  /** @deprecated use `GetAllPromptsDataPromptsResponse200ApplicationJSONMetadata$outboundSchema` instead. */
  export const outboundSchema =
    GetAllPromptsDataPromptsResponse200ApplicationJSONMetadata$outboundSchema;
  /** @deprecated use `GetAllPromptsDataPromptsResponse200ApplicationJSONMetadata$Outbound` instead. */
  export type Outbound =
    GetAllPromptsDataPromptsResponse200ApplicationJSONMetadata$Outbound;
}

export function getAllPromptsDataPromptsResponse200ApplicationJSONMetadataToJSON(
  getAllPromptsDataPromptsResponse200ApplicationJSONMetadata:
    GetAllPromptsDataPromptsResponse200ApplicationJSONMetadata,
): string {
  return JSON.stringify(
    GetAllPromptsDataPromptsResponse200ApplicationJSONMetadata$outboundSchema
      .parse(getAllPromptsDataPromptsResponse200ApplicationJSONMetadata),
  );
}

export function getAllPromptsDataPromptsResponse200ApplicationJSONMetadataFromJSON(
  jsonString: string,
): SafeParseResult<
  GetAllPromptsDataPromptsResponse200ApplicationJSONMetadata,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetAllPromptsDataPromptsResponse200ApplicationJSONMetadata$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'GetAllPromptsDataPromptsResponse200ApplicationJSONMetadata' from JSON`,
  );
}

/** @internal */
export const GetAllPromptsDataPromptsVersions$inboundSchema: z.ZodType<
  GetAllPromptsDataPromptsVersions,
  z.ZodTypeDef,
  unknown
> = z.object({
  _id: z.string(),
  created_by_id: z.string(),
  display_name: z.string(),
  updated_by_id: z.string(),
  description: z.nullable(z.string()).optional(),
  prompt_config: z.lazy(() =>
    GetAllPromptsDataPromptsResponse200ApplicationJSONPromptConfig$inboundSchema
  ),
  metadata: z.lazy(() =>
    GetAllPromptsDataPromptsResponse200ApplicationJSONMetadata$inboundSchema
  ),
  commit: z.string(),
  timestamp: z.string(),
}).transform((v) => {
  return remap$(v, {
    "_id": "id",
    "created_by_id": "createdById",
    "display_name": "displayName",
    "updated_by_id": "updatedById",
    "prompt_config": "promptConfig",
  });
});

/** @internal */
export type GetAllPromptsDataPromptsVersions$Outbound = {
  _id: string;
  created_by_id: string;
  display_name: string;
  updated_by_id: string;
  description?: string | null | undefined;
  prompt_config:
    GetAllPromptsDataPromptsResponse200ApplicationJSONPromptConfig$Outbound;
  metadata: GetAllPromptsDataPromptsResponse200ApplicationJSONMetadata$Outbound;
  commit: string;
  timestamp: string;
};

/** @internal */
export const GetAllPromptsDataPromptsVersions$outboundSchema: z.ZodType<
  GetAllPromptsDataPromptsVersions$Outbound,
  z.ZodTypeDef,
  GetAllPromptsDataPromptsVersions
> = z.object({
  id: z.string(),
  createdById: z.string(),
  displayName: z.string(),
  updatedById: z.string(),
  description: z.nullable(z.string()).optional(),
  promptConfig: z.lazy(() =>
    GetAllPromptsDataPromptsResponse200ApplicationJSONPromptConfig$outboundSchema
  ),
  metadata: z.lazy(() =>
    GetAllPromptsDataPromptsResponse200ApplicationJSONMetadata$outboundSchema
  ),
  commit: z.string(),
  timestamp: z.string(),
}).transform((v) => {
  return remap$(v, {
    id: "_id",
    createdById: "created_by_id",
    displayName: "display_name",
    updatedById: "updated_by_id",
    promptConfig: "prompt_config",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPromptsDataPromptsVersions$ {
  /** @deprecated use `GetAllPromptsDataPromptsVersions$inboundSchema` instead. */
  export const inboundSchema = GetAllPromptsDataPromptsVersions$inboundSchema;
  /** @deprecated use `GetAllPromptsDataPromptsVersions$outboundSchema` instead. */
  export const outboundSchema = GetAllPromptsDataPromptsVersions$outboundSchema;
  /** @deprecated use `GetAllPromptsDataPromptsVersions$Outbound` instead. */
  export type Outbound = GetAllPromptsDataPromptsVersions$Outbound;
}

export function getAllPromptsDataPromptsVersionsToJSON(
  getAllPromptsDataPromptsVersions: GetAllPromptsDataPromptsVersions,
): string {
  return JSON.stringify(
    GetAllPromptsDataPromptsVersions$outboundSchema.parse(
      getAllPromptsDataPromptsVersions,
    ),
  );
}

export function getAllPromptsDataPromptsVersionsFromJSON(
  jsonString: string,
): SafeParseResult<GetAllPromptsDataPromptsVersions, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetAllPromptsDataPromptsVersions$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetAllPromptsDataPromptsVersions' from JSON`,
  );
}

/** @internal */
export const GetAllPromptsDataPromptsType$inboundSchema: z.ZodNativeEnum<
  typeof GetAllPromptsDataPromptsType
> = z.nativeEnum(GetAllPromptsDataPromptsType);

/** @internal */
export const GetAllPromptsDataPromptsType$outboundSchema: z.ZodNativeEnum<
  typeof GetAllPromptsDataPromptsType
> = GetAllPromptsDataPromptsType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPromptsDataPromptsType$ {
  /** @deprecated use `GetAllPromptsDataPromptsType$inboundSchema` instead. */
  export const inboundSchema = GetAllPromptsDataPromptsType$inboundSchema;
  /** @deprecated use `GetAllPromptsDataPromptsType$outboundSchema` instead. */
  export const outboundSchema = GetAllPromptsDataPromptsType$outboundSchema;
}

/** @internal */
export const GetAllPromptsData3$inboundSchema: z.ZodType<
  GetAllPromptsData3,
  z.ZodTypeDef,
  unknown
> = z.object({
  _id: z.string(),
  owner: z.union([
    z.string(),
    GetAllPromptsOwnerPromptsResponse2$inboundSchema,
  ]),
  domain_id: z.string(),
  created_by_id: z.string(),
  display_name: z.string(),
  updated_by_id: z.string(),
  description: z.nullable(z.string()).optional(),
  prompt_config: z.lazy(() =>
    GetAllPromptsDataPromptsPromptConfig$inboundSchema
  ),
  metadata: z.lazy(() => GetAllPromptsDataPromptsMetadata$inboundSchema),
  created: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
  updated: z.string().datetime({ offset: true }).default(
    "2025-01-21T09:55:10.979Z",
  ).transform(v => new Date(v)),
  versions: z.array(
    z.lazy(() => GetAllPromptsDataPromptsVersions$inboundSchema),
  ),
  type: GetAllPromptsDataPromptsType$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "_id": "id",
    "domain_id": "domainId",
    "created_by_id": "createdById",
    "display_name": "displayName",
    "updated_by_id": "updatedById",
    "prompt_config": "promptConfig",
  });
});

/** @internal */
export type GetAllPromptsData3$Outbound = {
  _id: string;
  owner: string | string;
  domain_id: string;
  created_by_id: string;
  display_name: string;
  updated_by_id: string;
  description?: string | null | undefined;
  prompt_config: GetAllPromptsDataPromptsPromptConfig$Outbound;
  metadata: GetAllPromptsDataPromptsMetadata$Outbound;
  created?: string | undefined;
  updated: string;
  versions: Array<GetAllPromptsDataPromptsVersions$Outbound>;
  type: string;
};

/** @internal */
export const GetAllPromptsData3$outboundSchema: z.ZodType<
  GetAllPromptsData3$Outbound,
  z.ZodTypeDef,
  GetAllPromptsData3
> = z.object({
  id: z.string(),
  owner: z.union([
    z.string(),
    GetAllPromptsOwnerPromptsResponse2$outboundSchema,
  ]),
  domainId: z.string(),
  createdById: z.string(),
  displayName: z.string(),
  updatedById: z.string(),
  description: z.nullable(z.string()).optional(),
  promptConfig: z.lazy(() =>
    GetAllPromptsDataPromptsPromptConfig$outboundSchema
  ),
  metadata: z.lazy(() => GetAllPromptsDataPromptsMetadata$outboundSchema),
  created: z.date().transform(v => v.toISOString()).optional(),
  updated: z.date().default(() => new Date("2025-01-21T09:55:10.979Z"))
    .transform(v => v.toISOString()),
  versions: z.array(
    z.lazy(() => GetAllPromptsDataPromptsVersions$outboundSchema),
  ),
  type: GetAllPromptsDataPromptsType$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    id: "_id",
    domainId: "domain_id",
    createdById: "created_by_id",
    displayName: "display_name",
    updatedById: "updated_by_id",
    promptConfig: "prompt_config",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPromptsData3$ {
  /** @deprecated use `GetAllPromptsData3$inboundSchema` instead. */
  export const inboundSchema = GetAllPromptsData3$inboundSchema;
  /** @deprecated use `GetAllPromptsData3$outboundSchema` instead. */
  export const outboundSchema = GetAllPromptsData3$outboundSchema;
  /** @deprecated use `GetAllPromptsData3$Outbound` instead. */
  export type Outbound = GetAllPromptsData3$Outbound;
}

export function getAllPromptsData3ToJSON(
  getAllPromptsData3: GetAllPromptsData3,
): string {
  return JSON.stringify(
    GetAllPromptsData3$outboundSchema.parse(getAllPromptsData3),
  );
}

export function getAllPromptsData3FromJSON(
  jsonString: string,
): SafeParseResult<GetAllPromptsData3, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetAllPromptsData3$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetAllPromptsData3' from JSON`,
  );
}

/** @internal */
export const GetAllPromptsOwnerPrompts2$inboundSchema: z.ZodNativeEnum<
  typeof GetAllPromptsOwnerPrompts2
> = z.nativeEnum(GetAllPromptsOwnerPrompts2);

/** @internal */
export const GetAllPromptsOwnerPrompts2$outboundSchema: z.ZodNativeEnum<
  typeof GetAllPromptsOwnerPrompts2
> = GetAllPromptsOwnerPrompts2$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPromptsOwnerPrompts2$ {
  /** @deprecated use `GetAllPromptsOwnerPrompts2$inboundSchema` instead. */
  export const inboundSchema = GetAllPromptsOwnerPrompts2$inboundSchema;
  /** @deprecated use `GetAllPromptsOwnerPrompts2$outboundSchema` instead. */
  export const outboundSchema = GetAllPromptsOwnerPrompts2$outboundSchema;
}

/** @internal */
export const GetAllPromptsDataOwner$inboundSchema: z.ZodType<
  GetAllPromptsDataOwner,
  z.ZodTypeDef,
  unknown
> = z.union([z.string(), GetAllPromptsOwnerPrompts2$inboundSchema]);

/** @internal */
export type GetAllPromptsDataOwner$Outbound = string | string;

/** @internal */
export const GetAllPromptsDataOwner$outboundSchema: z.ZodType<
  GetAllPromptsDataOwner$Outbound,
  z.ZodTypeDef,
  GetAllPromptsDataOwner
> = z.union([z.string(), GetAllPromptsOwnerPrompts2$outboundSchema]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPromptsDataOwner$ {
  /** @deprecated use `GetAllPromptsDataOwner$inboundSchema` instead. */
  export const inboundSchema = GetAllPromptsDataOwner$inboundSchema;
  /** @deprecated use `GetAllPromptsDataOwner$outboundSchema` instead. */
  export const outboundSchema = GetAllPromptsDataOwner$outboundSchema;
  /** @deprecated use `GetAllPromptsDataOwner$Outbound` instead. */
  export type Outbound = GetAllPromptsDataOwner$Outbound;
}

export function getAllPromptsDataOwnerToJSON(
  getAllPromptsDataOwner: GetAllPromptsDataOwner,
): string {
  return JSON.stringify(
    GetAllPromptsDataOwner$outboundSchema.parse(getAllPromptsDataOwner),
  );
}

export function getAllPromptsDataOwnerFromJSON(
  jsonString: string,
): SafeParseResult<GetAllPromptsDataOwner, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetAllPromptsDataOwner$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetAllPromptsDataOwner' from JSON`,
  );
}

/** @internal */
export const GetAllPromptsDataModelType$inboundSchema: z.ZodNativeEnum<
  typeof GetAllPromptsDataModelType
> = z.nativeEnum(GetAllPromptsDataModelType);

/** @internal */
export const GetAllPromptsDataModelType$outboundSchema: z.ZodNativeEnum<
  typeof GetAllPromptsDataModelType
> = GetAllPromptsDataModelType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPromptsDataModelType$ {
  /** @deprecated use `GetAllPromptsDataModelType$inboundSchema` instead. */
  export const inboundSchema = GetAllPromptsDataModelType$inboundSchema;
  /** @deprecated use `GetAllPromptsDataModelType$outboundSchema` instead. */
  export const outboundSchema = GetAllPromptsDataModelType$outboundSchema;
}

/** @internal */
export const GetAllPromptsDataFormat$inboundSchema: z.ZodNativeEnum<
  typeof GetAllPromptsDataFormat
> = z.nativeEnum(GetAllPromptsDataFormat);

/** @internal */
export const GetAllPromptsDataFormat$outboundSchema: z.ZodNativeEnum<
  typeof GetAllPromptsDataFormat
> = GetAllPromptsDataFormat$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPromptsDataFormat$ {
  /** @deprecated use `GetAllPromptsDataFormat$inboundSchema` instead. */
  export const inboundSchema = GetAllPromptsDataFormat$inboundSchema;
  /** @deprecated use `GetAllPromptsDataFormat$outboundSchema` instead. */
  export const outboundSchema = GetAllPromptsDataFormat$outboundSchema;
}

/** @internal */
export const GetAllPromptsDataQuality$inboundSchema: z.ZodNativeEnum<
  typeof GetAllPromptsDataQuality
> = z.nativeEnum(GetAllPromptsDataQuality);

/** @internal */
export const GetAllPromptsDataQuality$outboundSchema: z.ZodNativeEnum<
  typeof GetAllPromptsDataQuality
> = GetAllPromptsDataQuality$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPromptsDataQuality$ {
  /** @deprecated use `GetAllPromptsDataQuality$inboundSchema` instead. */
  export const inboundSchema = GetAllPromptsDataQuality$inboundSchema;
  /** @deprecated use `GetAllPromptsDataQuality$outboundSchema` instead. */
  export const outboundSchema = GetAllPromptsDataQuality$outboundSchema;
}

/** @internal */
export const GetAllPromptsResponseFormatPromptsResponse200Type$inboundSchema:
  z.ZodNativeEnum<typeof GetAllPromptsResponseFormatPromptsResponse200Type> = z
    .nativeEnum(GetAllPromptsResponseFormatPromptsResponse200Type);

/** @internal */
export const GetAllPromptsResponseFormatPromptsResponse200Type$outboundSchema:
  z.ZodNativeEnum<typeof GetAllPromptsResponseFormatPromptsResponse200Type> =
    GetAllPromptsResponseFormatPromptsResponse200Type$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPromptsResponseFormatPromptsResponse200Type$ {
  /** @deprecated use `GetAllPromptsResponseFormatPromptsResponse200Type$inboundSchema` instead. */
  export const inboundSchema =
    GetAllPromptsResponseFormatPromptsResponse200Type$inboundSchema;
  /** @deprecated use `GetAllPromptsResponseFormatPromptsResponse200Type$outboundSchema` instead. */
  export const outboundSchema =
    GetAllPromptsResponseFormatPromptsResponse200Type$outboundSchema;
}

/** @internal */
export const GetAllPromptsResponseFormatPrompts2$inboundSchema: z.ZodType<
  GetAllPromptsResponseFormatPrompts2,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: GetAllPromptsResponseFormatPromptsResponse200Type$inboundSchema,
});

/** @internal */
export type GetAllPromptsResponseFormatPrompts2$Outbound = {
  type: string;
};

/** @internal */
export const GetAllPromptsResponseFormatPrompts2$outboundSchema: z.ZodType<
  GetAllPromptsResponseFormatPrompts2$Outbound,
  z.ZodTypeDef,
  GetAllPromptsResponseFormatPrompts2
> = z.object({
  type: GetAllPromptsResponseFormatPromptsResponse200Type$outboundSchema,
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPromptsResponseFormatPrompts2$ {
  /** @deprecated use `GetAllPromptsResponseFormatPrompts2$inboundSchema` instead. */
  export const inboundSchema =
    GetAllPromptsResponseFormatPrompts2$inboundSchema;
  /** @deprecated use `GetAllPromptsResponseFormatPrompts2$outboundSchema` instead. */
  export const outboundSchema =
    GetAllPromptsResponseFormatPrompts2$outboundSchema;
  /** @deprecated use `GetAllPromptsResponseFormatPrompts2$Outbound` instead. */
  export type Outbound = GetAllPromptsResponseFormatPrompts2$Outbound;
}

export function getAllPromptsResponseFormatPrompts2ToJSON(
  getAllPromptsResponseFormatPrompts2: GetAllPromptsResponseFormatPrompts2,
): string {
  return JSON.stringify(
    GetAllPromptsResponseFormatPrompts2$outboundSchema.parse(
      getAllPromptsResponseFormatPrompts2,
    ),
  );
}

export function getAllPromptsResponseFormatPrompts2FromJSON(
  jsonString: string,
): SafeParseResult<GetAllPromptsResponseFormatPrompts2, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      GetAllPromptsResponseFormatPrompts2$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetAllPromptsResponseFormatPrompts2' from JSON`,
  );
}

/** @internal */
export const GetAllPromptsResponseFormatPromptsResponseType$inboundSchema:
  z.ZodNativeEnum<typeof GetAllPromptsResponseFormatPromptsResponseType> = z
    .nativeEnum(GetAllPromptsResponseFormatPromptsResponseType);

/** @internal */
export const GetAllPromptsResponseFormatPromptsResponseType$outboundSchema:
  z.ZodNativeEnum<typeof GetAllPromptsResponseFormatPromptsResponseType> =
    GetAllPromptsResponseFormatPromptsResponseType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPromptsResponseFormatPromptsResponseType$ {
  /** @deprecated use `GetAllPromptsResponseFormatPromptsResponseType$inboundSchema` instead. */
  export const inboundSchema =
    GetAllPromptsResponseFormatPromptsResponseType$inboundSchema;
  /** @deprecated use `GetAllPromptsResponseFormatPromptsResponseType$outboundSchema` instead. */
  export const outboundSchema =
    GetAllPromptsResponseFormatPromptsResponseType$outboundSchema;
}

/** @internal */
export const GetAllPromptsResponseFormatPromptsJsonSchema$inboundSchema:
  z.ZodType<
    GetAllPromptsResponseFormatPromptsJsonSchema,
    z.ZodTypeDef,
    unknown
  > = z.object({
    name: z.string(),
    strict: z.boolean(),
    schema: z.record(z.any()),
  });

/** @internal */
export type GetAllPromptsResponseFormatPromptsJsonSchema$Outbound = {
  name: string;
  strict: boolean;
  schema: { [k: string]: any };
};

/** @internal */
export const GetAllPromptsResponseFormatPromptsJsonSchema$outboundSchema:
  z.ZodType<
    GetAllPromptsResponseFormatPromptsJsonSchema$Outbound,
    z.ZodTypeDef,
    GetAllPromptsResponseFormatPromptsJsonSchema
  > = z.object({
    name: z.string(),
    strict: z.boolean(),
    schema: z.record(z.any()),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPromptsResponseFormatPromptsJsonSchema$ {
  /** @deprecated use `GetAllPromptsResponseFormatPromptsJsonSchema$inboundSchema` instead. */
  export const inboundSchema =
    GetAllPromptsResponseFormatPromptsJsonSchema$inboundSchema;
  /** @deprecated use `GetAllPromptsResponseFormatPromptsJsonSchema$outboundSchema` instead. */
  export const outboundSchema =
    GetAllPromptsResponseFormatPromptsJsonSchema$outboundSchema;
  /** @deprecated use `GetAllPromptsResponseFormatPromptsJsonSchema$Outbound` instead. */
  export type Outbound = GetAllPromptsResponseFormatPromptsJsonSchema$Outbound;
}

export function getAllPromptsResponseFormatPromptsJsonSchemaToJSON(
  getAllPromptsResponseFormatPromptsJsonSchema:
    GetAllPromptsResponseFormatPromptsJsonSchema,
): string {
  return JSON.stringify(
    GetAllPromptsResponseFormatPromptsJsonSchema$outboundSchema.parse(
      getAllPromptsResponseFormatPromptsJsonSchema,
    ),
  );
}

export function getAllPromptsResponseFormatPromptsJsonSchemaFromJSON(
  jsonString: string,
): SafeParseResult<
  GetAllPromptsResponseFormatPromptsJsonSchema,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetAllPromptsResponseFormatPromptsJsonSchema$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'GetAllPromptsResponseFormatPromptsJsonSchema' from JSON`,
  );
}

/** @internal */
export const GetAllPromptsResponseFormatPrompts1$inboundSchema: z.ZodType<
  GetAllPromptsResponseFormatPrompts1,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: GetAllPromptsResponseFormatPromptsResponseType$inboundSchema,
  json_schema: z.lazy(() =>
    GetAllPromptsResponseFormatPromptsJsonSchema$inboundSchema
  ),
}).transform((v) => {
  return remap$(v, {
    "json_schema": "jsonSchema",
  });
});

/** @internal */
export type GetAllPromptsResponseFormatPrompts1$Outbound = {
  type: string;
  json_schema: GetAllPromptsResponseFormatPromptsJsonSchema$Outbound;
};

/** @internal */
export const GetAllPromptsResponseFormatPrompts1$outboundSchema: z.ZodType<
  GetAllPromptsResponseFormatPrompts1$Outbound,
  z.ZodTypeDef,
  GetAllPromptsResponseFormatPrompts1
> = z.object({
  type: GetAllPromptsResponseFormatPromptsResponseType$outboundSchema,
  jsonSchema: z.lazy(() =>
    GetAllPromptsResponseFormatPromptsJsonSchema$outboundSchema
  ),
}).transform((v) => {
  return remap$(v, {
    jsonSchema: "json_schema",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPromptsResponseFormatPrompts1$ {
  /** @deprecated use `GetAllPromptsResponseFormatPrompts1$inboundSchema` instead. */
  export const inboundSchema =
    GetAllPromptsResponseFormatPrompts1$inboundSchema;
  /** @deprecated use `GetAllPromptsResponseFormatPrompts1$outboundSchema` instead. */
  export const outboundSchema =
    GetAllPromptsResponseFormatPrompts1$outboundSchema;
  /** @deprecated use `GetAllPromptsResponseFormatPrompts1$Outbound` instead. */
  export type Outbound = GetAllPromptsResponseFormatPrompts1$Outbound;
}

export function getAllPromptsResponseFormatPrompts1ToJSON(
  getAllPromptsResponseFormatPrompts1: GetAllPromptsResponseFormatPrompts1,
): string {
  return JSON.stringify(
    GetAllPromptsResponseFormatPrompts1$outboundSchema.parse(
      getAllPromptsResponseFormatPrompts1,
    ),
  );
}

export function getAllPromptsResponseFormatPrompts1FromJSON(
  jsonString: string,
): SafeParseResult<GetAllPromptsResponseFormatPrompts1, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      GetAllPromptsResponseFormatPrompts1$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetAllPromptsResponseFormatPrompts1' from JSON`,
  );
}

/** @internal */
export const GetAllPromptsDataResponseFormat$inboundSchema: z.ZodType<
  GetAllPromptsDataResponseFormat,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => GetAllPromptsResponseFormatPrompts2$inboundSchema),
  z.lazy(() => GetAllPromptsResponseFormatPrompts1$inboundSchema),
]);

/** @internal */
export type GetAllPromptsDataResponseFormat$Outbound =
  | GetAllPromptsResponseFormatPrompts2$Outbound
  | GetAllPromptsResponseFormatPrompts1$Outbound;

/** @internal */
export const GetAllPromptsDataResponseFormat$outboundSchema: z.ZodType<
  GetAllPromptsDataResponseFormat$Outbound,
  z.ZodTypeDef,
  GetAllPromptsDataResponseFormat
> = z.union([
  z.lazy(() => GetAllPromptsResponseFormatPrompts2$outboundSchema),
  z.lazy(() => GetAllPromptsResponseFormatPrompts1$outboundSchema),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPromptsDataResponseFormat$ {
  /** @deprecated use `GetAllPromptsDataResponseFormat$inboundSchema` instead. */
  export const inboundSchema = GetAllPromptsDataResponseFormat$inboundSchema;
  /** @deprecated use `GetAllPromptsDataResponseFormat$outboundSchema` instead. */
  export const outboundSchema = GetAllPromptsDataResponseFormat$outboundSchema;
  /** @deprecated use `GetAllPromptsDataResponseFormat$Outbound` instead. */
  export type Outbound = GetAllPromptsDataResponseFormat$Outbound;
}

export function getAllPromptsDataResponseFormatToJSON(
  getAllPromptsDataResponseFormat: GetAllPromptsDataResponseFormat,
): string {
  return JSON.stringify(
    GetAllPromptsDataResponseFormat$outboundSchema.parse(
      getAllPromptsDataResponseFormat,
    ),
  );
}

export function getAllPromptsDataResponseFormatFromJSON(
  jsonString: string,
): SafeParseResult<GetAllPromptsDataResponseFormat, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetAllPromptsDataResponseFormat$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetAllPromptsDataResponseFormat' from JSON`,
  );
}

/** @internal */
export const GetAllPromptsDataPhotoRealVersion$inboundSchema: z.ZodNativeEnum<
  typeof GetAllPromptsDataPhotoRealVersion
> = z.nativeEnum(GetAllPromptsDataPhotoRealVersion);

/** @internal */
export const GetAllPromptsDataPhotoRealVersion$outboundSchema: z.ZodNativeEnum<
  typeof GetAllPromptsDataPhotoRealVersion
> = GetAllPromptsDataPhotoRealVersion$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPromptsDataPhotoRealVersion$ {
  /** @deprecated use `GetAllPromptsDataPhotoRealVersion$inboundSchema` instead. */
  export const inboundSchema = GetAllPromptsDataPhotoRealVersion$inboundSchema;
  /** @deprecated use `GetAllPromptsDataPhotoRealVersion$outboundSchema` instead. */
  export const outboundSchema =
    GetAllPromptsDataPhotoRealVersion$outboundSchema;
}

/** @internal */
export const GetAllPromptsDataEncodingFormat$inboundSchema: z.ZodNativeEnum<
  typeof GetAllPromptsDataEncodingFormat
> = z.nativeEnum(GetAllPromptsDataEncodingFormat);

/** @internal */
export const GetAllPromptsDataEncodingFormat$outboundSchema: z.ZodNativeEnum<
  typeof GetAllPromptsDataEncodingFormat
> = GetAllPromptsDataEncodingFormat$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPromptsDataEncodingFormat$ {
  /** @deprecated use `GetAllPromptsDataEncodingFormat$inboundSchema` instead. */
  export const inboundSchema = GetAllPromptsDataEncodingFormat$inboundSchema;
  /** @deprecated use `GetAllPromptsDataEncodingFormat$outboundSchema` instead. */
  export const outboundSchema = GetAllPromptsDataEncodingFormat$outboundSchema;
}

/** @internal */
export const GetAllPromptsDataModelParameters$inboundSchema: z.ZodType<
  GetAllPromptsDataModelParameters,
  z.ZodTypeDef,
  unknown
> = z.object({
  temperature: z.number().optional(),
  maxTokens: z.number().optional(),
  topK: z.number().optional(),
  topP: z.number().optional(),
  frequencyPenalty: z.number().optional(),
  presencePenalty: z.number().optional(),
  numImages: z.number().optional(),
  seed: z.number().optional(),
  format: GetAllPromptsDataFormat$inboundSchema.optional(),
  dimensions: z.string().optional(),
  quality: GetAllPromptsDataQuality$inboundSchema.optional(),
  style: z.string().optional(),
  responseFormat: z.nullable(
    z.union([
      z.lazy(() => GetAllPromptsResponseFormatPrompts2$inboundSchema),
      z.lazy(() => GetAllPromptsResponseFormatPrompts1$inboundSchema),
    ]),
  ).optional(),
  photoRealVersion: GetAllPromptsDataPhotoRealVersion$inboundSchema.optional(),
  encoding_format: GetAllPromptsDataEncodingFormat$inboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    "encoding_format": "encodingFormat",
  });
});

/** @internal */
export type GetAllPromptsDataModelParameters$Outbound = {
  temperature?: number | undefined;
  maxTokens?: number | undefined;
  topK?: number | undefined;
  topP?: number | undefined;
  frequencyPenalty?: number | undefined;
  presencePenalty?: number | undefined;
  numImages?: number | undefined;
  seed?: number | undefined;
  format?: string | undefined;
  dimensions?: string | undefined;
  quality?: string | undefined;
  style?: string | undefined;
  responseFormat?:
    | GetAllPromptsResponseFormatPrompts2$Outbound
    | GetAllPromptsResponseFormatPrompts1$Outbound
    | null
    | undefined;
  photoRealVersion?: string | undefined;
  encoding_format?: string | undefined;
};

/** @internal */
export const GetAllPromptsDataModelParameters$outboundSchema: z.ZodType<
  GetAllPromptsDataModelParameters$Outbound,
  z.ZodTypeDef,
  GetAllPromptsDataModelParameters
> = z.object({
  temperature: z.number().optional(),
  maxTokens: z.number().optional(),
  topK: z.number().optional(),
  topP: z.number().optional(),
  frequencyPenalty: z.number().optional(),
  presencePenalty: z.number().optional(),
  numImages: z.number().optional(),
  seed: z.number().optional(),
  format: GetAllPromptsDataFormat$outboundSchema.optional(),
  dimensions: z.string().optional(),
  quality: GetAllPromptsDataQuality$outboundSchema.optional(),
  style: z.string().optional(),
  responseFormat: z.nullable(
    z.union([
      z.lazy(() => GetAllPromptsResponseFormatPrompts2$outboundSchema),
      z.lazy(() => GetAllPromptsResponseFormatPrompts1$outboundSchema),
    ]),
  ).optional(),
  photoRealVersion: GetAllPromptsDataPhotoRealVersion$outboundSchema.optional(),
  encodingFormat: GetAllPromptsDataEncodingFormat$outboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    encodingFormat: "encoding_format",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPromptsDataModelParameters$ {
  /** @deprecated use `GetAllPromptsDataModelParameters$inboundSchema` instead. */
  export const inboundSchema = GetAllPromptsDataModelParameters$inboundSchema;
  /** @deprecated use `GetAllPromptsDataModelParameters$outboundSchema` instead. */
  export const outboundSchema = GetAllPromptsDataModelParameters$outboundSchema;
  /** @deprecated use `GetAllPromptsDataModelParameters$Outbound` instead. */
  export type Outbound = GetAllPromptsDataModelParameters$Outbound;
}

export function getAllPromptsDataModelParametersToJSON(
  getAllPromptsDataModelParameters: GetAllPromptsDataModelParameters,
): string {
  return JSON.stringify(
    GetAllPromptsDataModelParameters$outboundSchema.parse(
      getAllPromptsDataModelParameters,
    ),
  );
}

export function getAllPromptsDataModelParametersFromJSON(
  jsonString: string,
): SafeParseResult<GetAllPromptsDataModelParameters, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetAllPromptsDataModelParameters$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetAllPromptsDataModelParameters' from JSON`,
  );
}

/** @internal */
export const GetAllPromptsDataProvider$inboundSchema: z.ZodNativeEnum<
  typeof GetAllPromptsDataProvider
> = z.nativeEnum(GetAllPromptsDataProvider);

/** @internal */
export const GetAllPromptsDataProvider$outboundSchema: z.ZodNativeEnum<
  typeof GetAllPromptsDataProvider
> = GetAllPromptsDataProvider$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPromptsDataProvider$ {
  /** @deprecated use `GetAllPromptsDataProvider$inboundSchema` instead. */
  export const inboundSchema = GetAllPromptsDataProvider$inboundSchema;
  /** @deprecated use `GetAllPromptsDataProvider$outboundSchema` instead. */
  export const outboundSchema = GetAllPromptsDataProvider$outboundSchema;
}

/** @internal */
export const GetAllPromptsDataRole$inboundSchema: z.ZodNativeEnum<
  typeof GetAllPromptsDataRole
> = z.nativeEnum(GetAllPromptsDataRole);

/** @internal */
export const GetAllPromptsDataRole$outboundSchema: z.ZodNativeEnum<
  typeof GetAllPromptsDataRole
> = GetAllPromptsDataRole$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPromptsDataRole$ {
  /** @deprecated use `GetAllPromptsDataRole$inboundSchema` instead. */
  export const inboundSchema = GetAllPromptsDataRole$inboundSchema;
  /** @deprecated use `GetAllPromptsDataRole$outboundSchema` instead. */
  export const outboundSchema = GetAllPromptsDataRole$outboundSchema;
}

/** @internal */
export const GetAllPrompts2PromptsResponse200Type$inboundSchema:
  z.ZodNativeEnum<typeof GetAllPrompts2PromptsResponse200Type> = z.nativeEnum(
    GetAllPrompts2PromptsResponse200Type,
  );

/** @internal */
export const GetAllPrompts2PromptsResponse200Type$outboundSchema:
  z.ZodNativeEnum<typeof GetAllPrompts2PromptsResponse200Type> =
    GetAllPrompts2PromptsResponse200Type$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPrompts2PromptsResponse200Type$ {
  /** @deprecated use `GetAllPrompts2PromptsResponse200Type$inboundSchema` instead. */
  export const inboundSchema =
    GetAllPrompts2PromptsResponse200Type$inboundSchema;
  /** @deprecated use `GetAllPrompts2PromptsResponse200Type$outboundSchema` instead. */
  export const outboundSchema =
    GetAllPrompts2PromptsResponse200Type$outboundSchema;
}

/** @internal */
export const GetAllPrompts2PromptsImageUrl$inboundSchema: z.ZodType<
  GetAllPrompts2PromptsImageUrl,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string().optional(),
  url: z.string(),
  detail: z.string().optional(),
});

/** @internal */
export type GetAllPrompts2PromptsImageUrl$Outbound = {
  id?: string | undefined;
  url: string;
  detail?: string | undefined;
};

/** @internal */
export const GetAllPrompts2PromptsImageUrl$outboundSchema: z.ZodType<
  GetAllPrompts2PromptsImageUrl$Outbound,
  z.ZodTypeDef,
  GetAllPrompts2PromptsImageUrl
> = z.object({
  id: z.string().optional(),
  url: z.string(),
  detail: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPrompts2PromptsImageUrl$ {
  /** @deprecated use `GetAllPrompts2PromptsImageUrl$inboundSchema` instead. */
  export const inboundSchema = GetAllPrompts2PromptsImageUrl$inboundSchema;
  /** @deprecated use `GetAllPrompts2PromptsImageUrl$outboundSchema` instead. */
  export const outboundSchema = GetAllPrompts2PromptsImageUrl$outboundSchema;
  /** @deprecated use `GetAllPrompts2PromptsImageUrl$Outbound` instead. */
  export type Outbound = GetAllPrompts2PromptsImageUrl$Outbound;
}

export function getAllPrompts2PromptsImageUrlToJSON(
  getAllPrompts2PromptsImageUrl: GetAllPrompts2PromptsImageUrl,
): string {
  return JSON.stringify(
    GetAllPrompts2PromptsImageUrl$outboundSchema.parse(
      getAllPrompts2PromptsImageUrl,
    ),
  );
}

export function getAllPrompts2PromptsImageUrlFromJSON(
  jsonString: string,
): SafeParseResult<GetAllPrompts2PromptsImageUrl, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetAllPrompts2PromptsImageUrl$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetAllPrompts2PromptsImageUrl' from JSON`,
  );
}

/** @internal */
export const GetAllPrompts2Prompts2$inboundSchema: z.ZodType<
  GetAllPrompts2Prompts2,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: GetAllPrompts2PromptsResponse200Type$inboundSchema,
  image_url: z.lazy(() => GetAllPrompts2PromptsImageUrl$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "image_url": "imageUrl",
  });
});

/** @internal */
export type GetAllPrompts2Prompts2$Outbound = {
  type: string;
  image_url: GetAllPrompts2PromptsImageUrl$Outbound;
};

/** @internal */
export const GetAllPrompts2Prompts2$outboundSchema: z.ZodType<
  GetAllPrompts2Prompts2$Outbound,
  z.ZodTypeDef,
  GetAllPrompts2Prompts2
> = z.object({
  type: GetAllPrompts2PromptsResponse200Type$outboundSchema,
  imageUrl: z.lazy(() => GetAllPrompts2PromptsImageUrl$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    imageUrl: "image_url",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPrompts2Prompts2$ {
  /** @deprecated use `GetAllPrompts2Prompts2$inboundSchema` instead. */
  export const inboundSchema = GetAllPrompts2Prompts2$inboundSchema;
  /** @deprecated use `GetAllPrompts2Prompts2$outboundSchema` instead. */
  export const outboundSchema = GetAllPrompts2Prompts2$outboundSchema;
  /** @deprecated use `GetAllPrompts2Prompts2$Outbound` instead. */
  export type Outbound = GetAllPrompts2Prompts2$Outbound;
}

export function getAllPrompts2Prompts2ToJSON(
  getAllPrompts2Prompts2: GetAllPrompts2Prompts2,
): string {
  return JSON.stringify(
    GetAllPrompts2Prompts2$outboundSchema.parse(getAllPrompts2Prompts2),
  );
}

export function getAllPrompts2Prompts2FromJSON(
  jsonString: string,
): SafeParseResult<GetAllPrompts2Prompts2, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetAllPrompts2Prompts2$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetAllPrompts2Prompts2' from JSON`,
  );
}

/** @internal */
export const GetAllPrompts2PromptsResponseType$inboundSchema: z.ZodNativeEnum<
  typeof GetAllPrompts2PromptsResponseType
> = z.nativeEnum(GetAllPrompts2PromptsResponseType);

/** @internal */
export const GetAllPrompts2PromptsResponseType$outboundSchema: z.ZodNativeEnum<
  typeof GetAllPrompts2PromptsResponseType
> = GetAllPrompts2PromptsResponseType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPrompts2PromptsResponseType$ {
  /** @deprecated use `GetAllPrompts2PromptsResponseType$inboundSchema` instead. */
  export const inboundSchema = GetAllPrompts2PromptsResponseType$inboundSchema;
  /** @deprecated use `GetAllPrompts2PromptsResponseType$outboundSchema` instead. */
  export const outboundSchema =
    GetAllPrompts2PromptsResponseType$outboundSchema;
}

/** @internal */
export const GetAllPrompts2Prompts1$inboundSchema: z.ZodType<
  GetAllPrompts2Prompts1,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: GetAllPrompts2PromptsResponseType$inboundSchema,
  text: z.string(),
});

/** @internal */
export type GetAllPrompts2Prompts1$Outbound = {
  type: string;
  text: string;
};

/** @internal */
export const GetAllPrompts2Prompts1$outboundSchema: z.ZodType<
  GetAllPrompts2Prompts1$Outbound,
  z.ZodTypeDef,
  GetAllPrompts2Prompts1
> = z.object({
  type: GetAllPrompts2PromptsResponseType$outboundSchema,
  text: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPrompts2Prompts1$ {
  /** @deprecated use `GetAllPrompts2Prompts1$inboundSchema` instead. */
  export const inboundSchema = GetAllPrompts2Prompts1$inboundSchema;
  /** @deprecated use `GetAllPrompts2Prompts1$outboundSchema` instead. */
  export const outboundSchema = GetAllPrompts2Prompts1$outboundSchema;
  /** @deprecated use `GetAllPrompts2Prompts1$Outbound` instead. */
  export type Outbound = GetAllPrompts2Prompts1$Outbound;
}

export function getAllPrompts2Prompts1ToJSON(
  getAllPrompts2Prompts1: GetAllPrompts2Prompts1,
): string {
  return JSON.stringify(
    GetAllPrompts2Prompts1$outboundSchema.parse(getAllPrompts2Prompts1),
  );
}

export function getAllPrompts2Prompts1FromJSON(
  jsonString: string,
): SafeParseResult<GetAllPrompts2Prompts1, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetAllPrompts2Prompts1$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetAllPrompts2Prompts1' from JSON`,
  );
}

/** @internal */
export const GetAllPromptsContentPrompts2$inboundSchema: z.ZodType<
  GetAllPromptsContentPrompts2,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => GetAllPrompts2Prompts1$inboundSchema),
  z.lazy(() => GetAllPrompts2Prompts2$inboundSchema),
]);

/** @internal */
export type GetAllPromptsContentPrompts2$Outbound =
  | GetAllPrompts2Prompts1$Outbound
  | GetAllPrompts2Prompts2$Outbound;

/** @internal */
export const GetAllPromptsContentPrompts2$outboundSchema: z.ZodType<
  GetAllPromptsContentPrompts2$Outbound,
  z.ZodTypeDef,
  GetAllPromptsContentPrompts2
> = z.union([
  z.lazy(() => GetAllPrompts2Prompts1$outboundSchema),
  z.lazy(() => GetAllPrompts2Prompts2$outboundSchema),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPromptsContentPrompts2$ {
  /** @deprecated use `GetAllPromptsContentPrompts2$inboundSchema` instead. */
  export const inboundSchema = GetAllPromptsContentPrompts2$inboundSchema;
  /** @deprecated use `GetAllPromptsContentPrompts2$outboundSchema` instead. */
  export const outboundSchema = GetAllPromptsContentPrompts2$outboundSchema;
  /** @deprecated use `GetAllPromptsContentPrompts2$Outbound` instead. */
  export type Outbound = GetAllPromptsContentPrompts2$Outbound;
}

export function getAllPromptsContentPrompts2ToJSON(
  getAllPromptsContentPrompts2: GetAllPromptsContentPrompts2,
): string {
  return JSON.stringify(
    GetAllPromptsContentPrompts2$outboundSchema.parse(
      getAllPromptsContentPrompts2,
    ),
  );
}

export function getAllPromptsContentPrompts2FromJSON(
  jsonString: string,
): SafeParseResult<GetAllPromptsContentPrompts2, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetAllPromptsContentPrompts2$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetAllPromptsContentPrompts2' from JSON`,
  );
}

/** @internal */
export const GetAllPromptsDataContent$inboundSchema: z.ZodType<
  GetAllPromptsDataContent,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.string(),
  z.array(z.union([
    z.lazy(() => GetAllPrompts2Prompts1$inboundSchema),
    z.lazy(() => GetAllPrompts2Prompts2$inboundSchema),
  ])),
]);

/** @internal */
export type GetAllPromptsDataContent$Outbound =
  | string
  | Array<GetAllPrompts2Prompts1$Outbound | GetAllPrompts2Prompts2$Outbound>;

/** @internal */
export const GetAllPromptsDataContent$outboundSchema: z.ZodType<
  GetAllPromptsDataContent$Outbound,
  z.ZodTypeDef,
  GetAllPromptsDataContent
> = z.union([
  z.string(),
  z.array(z.union([
    z.lazy(() => GetAllPrompts2Prompts1$outboundSchema),
    z.lazy(() => GetAllPrompts2Prompts2$outboundSchema),
  ])),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPromptsDataContent$ {
  /** @deprecated use `GetAllPromptsDataContent$inboundSchema` instead. */
  export const inboundSchema = GetAllPromptsDataContent$inboundSchema;
  /** @deprecated use `GetAllPromptsDataContent$outboundSchema` instead. */
  export const outboundSchema = GetAllPromptsDataContent$outboundSchema;
  /** @deprecated use `GetAllPromptsDataContent$Outbound` instead. */
  export type Outbound = GetAllPromptsDataContent$Outbound;
}

export function getAllPromptsDataContentToJSON(
  getAllPromptsDataContent: GetAllPromptsDataContent,
): string {
  return JSON.stringify(
    GetAllPromptsDataContent$outboundSchema.parse(getAllPromptsDataContent),
  );
}

export function getAllPromptsDataContentFromJSON(
  jsonString: string,
): SafeParseResult<GetAllPromptsDataContent, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetAllPromptsDataContent$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetAllPromptsDataContent' from JSON`,
  );
}

/** @internal */
export const GetAllPromptsDataPromptsResponse200ApplicationJSONType$inboundSchema:
  z.ZodNativeEnum<
    typeof GetAllPromptsDataPromptsResponse200ApplicationJSONType
  > = z.nativeEnum(GetAllPromptsDataPromptsResponse200ApplicationJSONType);

/** @internal */
export const GetAllPromptsDataPromptsResponse200ApplicationJSONType$outboundSchema:
  z.ZodNativeEnum<
    typeof GetAllPromptsDataPromptsResponse200ApplicationJSONType
  > = GetAllPromptsDataPromptsResponse200ApplicationJSONType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPromptsDataPromptsResponse200ApplicationJSONType$ {
  /** @deprecated use `GetAllPromptsDataPromptsResponse200ApplicationJSONType$inboundSchema` instead. */
  export const inboundSchema =
    GetAllPromptsDataPromptsResponse200ApplicationJSONType$inboundSchema;
  /** @deprecated use `GetAllPromptsDataPromptsResponse200ApplicationJSONType$outboundSchema` instead. */
  export const outboundSchema =
    GetAllPromptsDataPromptsResponse200ApplicationJSONType$outboundSchema;
}

/** @internal */
export const GetAllPromptsDataPromptsFunction$inboundSchema: z.ZodType<
  GetAllPromptsDataPromptsFunction,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.string(),
  arguments: z.string(),
});

/** @internal */
export type GetAllPromptsDataPromptsFunction$Outbound = {
  name: string;
  arguments: string;
};

/** @internal */
export const GetAllPromptsDataPromptsFunction$outboundSchema: z.ZodType<
  GetAllPromptsDataPromptsFunction$Outbound,
  z.ZodTypeDef,
  GetAllPromptsDataPromptsFunction
> = z.object({
  name: z.string(),
  arguments: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPromptsDataPromptsFunction$ {
  /** @deprecated use `GetAllPromptsDataPromptsFunction$inboundSchema` instead. */
  export const inboundSchema = GetAllPromptsDataPromptsFunction$inboundSchema;
  /** @deprecated use `GetAllPromptsDataPromptsFunction$outboundSchema` instead. */
  export const outboundSchema = GetAllPromptsDataPromptsFunction$outboundSchema;
  /** @deprecated use `GetAllPromptsDataPromptsFunction$Outbound` instead. */
  export type Outbound = GetAllPromptsDataPromptsFunction$Outbound;
}

export function getAllPromptsDataPromptsFunctionToJSON(
  getAllPromptsDataPromptsFunction: GetAllPromptsDataPromptsFunction,
): string {
  return JSON.stringify(
    GetAllPromptsDataPromptsFunction$outboundSchema.parse(
      getAllPromptsDataPromptsFunction,
    ),
  );
}

export function getAllPromptsDataPromptsFunctionFromJSON(
  jsonString: string,
): SafeParseResult<GetAllPromptsDataPromptsFunction, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetAllPromptsDataPromptsFunction$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetAllPromptsDataPromptsFunction' from JSON`,
  );
}

/** @internal */
export const GetAllPromptsDataToolCalls$inboundSchema: z.ZodType<
  GetAllPromptsDataToolCalls,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string().optional(),
  index: z.number().optional(),
  type: GetAllPromptsDataPromptsResponse200ApplicationJSONType$inboundSchema,
  function: z.lazy(() => GetAllPromptsDataPromptsFunction$inboundSchema),
});

/** @internal */
export type GetAllPromptsDataToolCalls$Outbound = {
  id?: string | undefined;
  index?: number | undefined;
  type: string;
  function: GetAllPromptsDataPromptsFunction$Outbound;
};

/** @internal */
export const GetAllPromptsDataToolCalls$outboundSchema: z.ZodType<
  GetAllPromptsDataToolCalls$Outbound,
  z.ZodTypeDef,
  GetAllPromptsDataToolCalls
> = z.object({
  id: z.string().optional(),
  index: z.number().optional(),
  type: GetAllPromptsDataPromptsResponse200ApplicationJSONType$outboundSchema,
  function: z.lazy(() => GetAllPromptsDataPromptsFunction$outboundSchema),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPromptsDataToolCalls$ {
  /** @deprecated use `GetAllPromptsDataToolCalls$inboundSchema` instead. */
  export const inboundSchema = GetAllPromptsDataToolCalls$inboundSchema;
  /** @deprecated use `GetAllPromptsDataToolCalls$outboundSchema` instead. */
  export const outboundSchema = GetAllPromptsDataToolCalls$outboundSchema;
  /** @deprecated use `GetAllPromptsDataToolCalls$Outbound` instead. */
  export type Outbound = GetAllPromptsDataToolCalls$Outbound;
}

export function getAllPromptsDataToolCallsToJSON(
  getAllPromptsDataToolCalls: GetAllPromptsDataToolCalls,
): string {
  return JSON.stringify(
    GetAllPromptsDataToolCalls$outboundSchema.parse(getAllPromptsDataToolCalls),
  );
}

export function getAllPromptsDataToolCallsFromJSON(
  jsonString: string,
): SafeParseResult<GetAllPromptsDataToolCalls, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetAllPromptsDataToolCalls$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetAllPromptsDataToolCalls' from JSON`,
  );
}

/** @internal */
export const GetAllPromptsDataMessages$inboundSchema: z.ZodType<
  GetAllPromptsDataMessages,
  z.ZodTypeDef,
  unknown
> = z.object({
  role: GetAllPromptsDataRole$inboundSchema,
  content: z.union([
    z.string(),
    z.array(z.union([
      z.lazy(() => GetAllPrompts2Prompts1$inboundSchema),
      z.lazy(() => GetAllPrompts2Prompts2$inboundSchema),
    ])),
  ]),
  tool_calls: z.array(z.lazy(() => GetAllPromptsDataToolCalls$inboundSchema))
    .optional(),
}).transform((v) => {
  return remap$(v, {
    "tool_calls": "toolCalls",
  });
});

/** @internal */
export type GetAllPromptsDataMessages$Outbound = {
  role: string;
  content:
    | string
    | Array<GetAllPrompts2Prompts1$Outbound | GetAllPrompts2Prompts2$Outbound>;
  tool_calls?: Array<GetAllPromptsDataToolCalls$Outbound> | undefined;
};

/** @internal */
export const GetAllPromptsDataMessages$outboundSchema: z.ZodType<
  GetAllPromptsDataMessages$Outbound,
  z.ZodTypeDef,
  GetAllPromptsDataMessages
> = z.object({
  role: GetAllPromptsDataRole$outboundSchema,
  content: z.union([
    z.string(),
    z.array(z.union([
      z.lazy(() => GetAllPrompts2Prompts1$outboundSchema),
      z.lazy(() => GetAllPrompts2Prompts2$outboundSchema),
    ])),
  ]),
  toolCalls: z.array(z.lazy(() => GetAllPromptsDataToolCalls$outboundSchema))
    .optional(),
}).transform((v) => {
  return remap$(v, {
    toolCalls: "tool_calls",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPromptsDataMessages$ {
  /** @deprecated use `GetAllPromptsDataMessages$inboundSchema` instead. */
  export const inboundSchema = GetAllPromptsDataMessages$inboundSchema;
  /** @deprecated use `GetAllPromptsDataMessages$outboundSchema` instead. */
  export const outboundSchema = GetAllPromptsDataMessages$outboundSchema;
  /** @deprecated use `GetAllPromptsDataMessages$Outbound` instead. */
  export type Outbound = GetAllPromptsDataMessages$Outbound;
}

export function getAllPromptsDataMessagesToJSON(
  getAllPromptsDataMessages: GetAllPromptsDataMessages,
): string {
  return JSON.stringify(
    GetAllPromptsDataMessages$outboundSchema.parse(getAllPromptsDataMessages),
  );
}

export function getAllPromptsDataMessagesFromJSON(
  jsonString: string,
): SafeParseResult<GetAllPromptsDataMessages, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetAllPromptsDataMessages$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetAllPromptsDataMessages' from JSON`,
  );
}

/** @internal */
export const GetAllPromptsDataPromptConfig$inboundSchema: z.ZodType<
  GetAllPromptsDataPromptConfig,
  z.ZodTypeDef,
  unknown
> = z.object({
  stream: z.boolean().optional(),
  model: z.string().optional(),
  model_db_id: z.string().optional(),
  model_type: GetAllPromptsDataModelType$inboundSchema.optional(),
  model_parameters: z.lazy(() => GetAllPromptsDataModelParameters$inboundSchema)
    .optional(),
  provider: GetAllPromptsDataProvider$inboundSchema.optional(),
  integration_id: z.nullable(z.string()).optional(),
  version: z.string().optional(),
  messages: z.array(z.lazy(() => GetAllPromptsDataMessages$inboundSchema)),
}).transform((v) => {
  return remap$(v, {
    "model_db_id": "modelDbId",
    "model_type": "modelType",
    "model_parameters": "modelParameters",
    "integration_id": "integrationId",
  });
});

/** @internal */
export type GetAllPromptsDataPromptConfig$Outbound = {
  stream?: boolean | undefined;
  model?: string | undefined;
  model_db_id?: string | undefined;
  model_type?: string | undefined;
  model_parameters?: GetAllPromptsDataModelParameters$Outbound | undefined;
  provider?: string | undefined;
  integration_id?: string | null | undefined;
  version?: string | undefined;
  messages: Array<GetAllPromptsDataMessages$Outbound>;
};

/** @internal */
export const GetAllPromptsDataPromptConfig$outboundSchema: z.ZodType<
  GetAllPromptsDataPromptConfig$Outbound,
  z.ZodTypeDef,
  GetAllPromptsDataPromptConfig
> = z.object({
  stream: z.boolean().optional(),
  model: z.string().optional(),
  modelDbId: z.string().optional(),
  modelType: GetAllPromptsDataModelType$outboundSchema.optional(),
  modelParameters: z.lazy(() => GetAllPromptsDataModelParameters$outboundSchema)
    .optional(),
  provider: GetAllPromptsDataProvider$outboundSchema.optional(),
  integrationId: z.nullable(z.string()).optional(),
  version: z.string().optional(),
  messages: z.array(z.lazy(() => GetAllPromptsDataMessages$outboundSchema)),
}).transform((v) => {
  return remap$(v, {
    modelDbId: "model_db_id",
    modelType: "model_type",
    modelParameters: "model_parameters",
    integrationId: "integration_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPromptsDataPromptConfig$ {
  /** @deprecated use `GetAllPromptsDataPromptConfig$inboundSchema` instead. */
  export const inboundSchema = GetAllPromptsDataPromptConfig$inboundSchema;
  /** @deprecated use `GetAllPromptsDataPromptConfig$outboundSchema` instead. */
  export const outboundSchema = GetAllPromptsDataPromptConfig$outboundSchema;
  /** @deprecated use `GetAllPromptsDataPromptConfig$Outbound` instead. */
  export type Outbound = GetAllPromptsDataPromptConfig$Outbound;
}

export function getAllPromptsDataPromptConfigToJSON(
  getAllPromptsDataPromptConfig: GetAllPromptsDataPromptConfig,
): string {
  return JSON.stringify(
    GetAllPromptsDataPromptConfig$outboundSchema.parse(
      getAllPromptsDataPromptConfig,
    ),
  );
}

export function getAllPromptsDataPromptConfigFromJSON(
  jsonString: string,
): SafeParseResult<GetAllPromptsDataPromptConfig, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetAllPromptsDataPromptConfig$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetAllPromptsDataPromptConfig' from JSON`,
  );
}

/** @internal */
export const GetAllPromptsDataMetadata$inboundSchema: z.ZodType<
  GetAllPromptsDataMetadata,
  z.ZodTypeDef,
  unknown
> = z.object({
  use_cases: z.array(z.string()).optional(),
  language: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "use_cases": "useCases",
  });
});

/** @internal */
export type GetAllPromptsDataMetadata$Outbound = {
  use_cases?: Array<string> | undefined;
  language?: string | undefined;
};

/** @internal */
export const GetAllPromptsDataMetadata$outboundSchema: z.ZodType<
  GetAllPromptsDataMetadata$Outbound,
  z.ZodTypeDef,
  GetAllPromptsDataMetadata
> = z.object({
  useCases: z.array(z.string()).optional(),
  language: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    useCases: "use_cases",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPromptsDataMetadata$ {
  /** @deprecated use `GetAllPromptsDataMetadata$inboundSchema` instead. */
  export const inboundSchema = GetAllPromptsDataMetadata$inboundSchema;
  /** @deprecated use `GetAllPromptsDataMetadata$outboundSchema` instead. */
  export const outboundSchema = GetAllPromptsDataMetadata$outboundSchema;
  /** @deprecated use `GetAllPromptsDataMetadata$Outbound` instead. */
  export type Outbound = GetAllPromptsDataMetadata$Outbound;
}

export function getAllPromptsDataMetadataToJSON(
  getAllPromptsDataMetadata: GetAllPromptsDataMetadata,
): string {
  return JSON.stringify(
    GetAllPromptsDataMetadata$outboundSchema.parse(getAllPromptsDataMetadata),
  );
}

export function getAllPromptsDataMetadataFromJSON(
  jsonString: string,
): SafeParseResult<GetAllPromptsDataMetadata, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetAllPromptsDataMetadata$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetAllPromptsDataMetadata' from JSON`,
  );
}

/** @internal */
export const GetAllPromptsDataPromptsResponseModelType$inboundSchema:
  z.ZodNativeEnum<typeof GetAllPromptsDataPromptsResponseModelType> = z
    .nativeEnum(GetAllPromptsDataPromptsResponseModelType);

/** @internal */
export const GetAllPromptsDataPromptsResponseModelType$outboundSchema:
  z.ZodNativeEnum<typeof GetAllPromptsDataPromptsResponseModelType> =
    GetAllPromptsDataPromptsResponseModelType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPromptsDataPromptsResponseModelType$ {
  /** @deprecated use `GetAllPromptsDataPromptsResponseModelType$inboundSchema` instead. */
  export const inboundSchema =
    GetAllPromptsDataPromptsResponseModelType$inboundSchema;
  /** @deprecated use `GetAllPromptsDataPromptsResponseModelType$outboundSchema` instead. */
  export const outboundSchema =
    GetAllPromptsDataPromptsResponseModelType$outboundSchema;
}

/** @internal */
export const GetAllPromptsDataPromptsResponse200Format$inboundSchema:
  z.ZodNativeEnum<typeof GetAllPromptsDataPromptsResponse200Format> = z
    .nativeEnum(GetAllPromptsDataPromptsResponse200Format);

/** @internal */
export const GetAllPromptsDataPromptsResponse200Format$outboundSchema:
  z.ZodNativeEnum<typeof GetAllPromptsDataPromptsResponse200Format> =
    GetAllPromptsDataPromptsResponse200Format$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPromptsDataPromptsResponse200Format$ {
  /** @deprecated use `GetAllPromptsDataPromptsResponse200Format$inboundSchema` instead. */
  export const inboundSchema =
    GetAllPromptsDataPromptsResponse200Format$inboundSchema;
  /** @deprecated use `GetAllPromptsDataPromptsResponse200Format$outboundSchema` instead. */
  export const outboundSchema =
    GetAllPromptsDataPromptsResponse200Format$outboundSchema;
}

/** @internal */
export const GetAllPromptsDataPromptsResponseQuality$inboundSchema:
  z.ZodNativeEnum<typeof GetAllPromptsDataPromptsResponseQuality> = z
    .nativeEnum(GetAllPromptsDataPromptsResponseQuality);

/** @internal */
export const GetAllPromptsDataPromptsResponseQuality$outboundSchema:
  z.ZodNativeEnum<typeof GetAllPromptsDataPromptsResponseQuality> =
    GetAllPromptsDataPromptsResponseQuality$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPromptsDataPromptsResponseQuality$ {
  /** @deprecated use `GetAllPromptsDataPromptsResponseQuality$inboundSchema` instead. */
  export const inboundSchema =
    GetAllPromptsDataPromptsResponseQuality$inboundSchema;
  /** @deprecated use `GetAllPromptsDataPromptsResponseQuality$outboundSchema` instead. */
  export const outboundSchema =
    GetAllPromptsDataPromptsResponseQuality$outboundSchema;
}

/** @internal */
export const GetAllPromptsResponseFormatPromptsResponse200ApplicationJSONResponseBodyData2Type$inboundSchema:
  z.ZodNativeEnum<
    typeof GetAllPromptsResponseFormatPromptsResponse200ApplicationJSONResponseBodyData2Type
  > = z.nativeEnum(
    GetAllPromptsResponseFormatPromptsResponse200ApplicationJSONResponseBodyData2Type,
  );

/** @internal */
export const GetAllPromptsResponseFormatPromptsResponse200ApplicationJSONResponseBodyData2Type$outboundSchema:
  z.ZodNativeEnum<
    typeof GetAllPromptsResponseFormatPromptsResponse200ApplicationJSONResponseBodyData2Type
  > =
    GetAllPromptsResponseFormatPromptsResponse200ApplicationJSONResponseBodyData2Type$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPromptsResponseFormatPromptsResponse200ApplicationJSONResponseBodyData2Type$ {
  /** @deprecated use `GetAllPromptsResponseFormatPromptsResponse200ApplicationJSONResponseBodyData2Type$inboundSchema` instead. */
  export const inboundSchema =
    GetAllPromptsResponseFormatPromptsResponse200ApplicationJSONResponseBodyData2Type$inboundSchema;
  /** @deprecated use `GetAllPromptsResponseFormatPromptsResponse200ApplicationJSONResponseBodyData2Type$outboundSchema` instead. */
  export const outboundSchema =
    GetAllPromptsResponseFormatPromptsResponse200ApplicationJSONResponseBodyData2Type$outboundSchema;
}

/** @internal */
export const GetAllPromptsResponseFormatPromptsResponse2002$inboundSchema:
  z.ZodType<
    GetAllPromptsResponseFormatPromptsResponse2002,
    z.ZodTypeDef,
    unknown
  > = z.object({
    type:
      GetAllPromptsResponseFormatPromptsResponse200ApplicationJSONResponseBodyData2Type$inboundSchema,
  });

/** @internal */
export type GetAllPromptsResponseFormatPromptsResponse2002$Outbound = {
  type: string;
};

/** @internal */
export const GetAllPromptsResponseFormatPromptsResponse2002$outboundSchema:
  z.ZodType<
    GetAllPromptsResponseFormatPromptsResponse2002$Outbound,
    z.ZodTypeDef,
    GetAllPromptsResponseFormatPromptsResponse2002
  > = z.object({
    type:
      GetAllPromptsResponseFormatPromptsResponse200ApplicationJSONResponseBodyData2Type$outboundSchema,
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPromptsResponseFormatPromptsResponse2002$ {
  /** @deprecated use `GetAllPromptsResponseFormatPromptsResponse2002$inboundSchema` instead. */
  export const inboundSchema =
    GetAllPromptsResponseFormatPromptsResponse2002$inboundSchema;
  /** @deprecated use `GetAllPromptsResponseFormatPromptsResponse2002$outboundSchema` instead. */
  export const outboundSchema =
    GetAllPromptsResponseFormatPromptsResponse2002$outboundSchema;
  /** @deprecated use `GetAllPromptsResponseFormatPromptsResponse2002$Outbound` instead. */
  export type Outbound =
    GetAllPromptsResponseFormatPromptsResponse2002$Outbound;
}

export function getAllPromptsResponseFormatPromptsResponse2002ToJSON(
  getAllPromptsResponseFormatPromptsResponse2002:
    GetAllPromptsResponseFormatPromptsResponse2002,
): string {
  return JSON.stringify(
    GetAllPromptsResponseFormatPromptsResponse2002$outboundSchema.parse(
      getAllPromptsResponseFormatPromptsResponse2002,
    ),
  );
}

export function getAllPromptsResponseFormatPromptsResponse2002FromJSON(
  jsonString: string,
): SafeParseResult<
  GetAllPromptsResponseFormatPromptsResponse2002,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetAllPromptsResponseFormatPromptsResponse2002$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'GetAllPromptsResponseFormatPromptsResponse2002' from JSON`,
  );
}

/** @internal */
export const GetAllPromptsResponseFormatPromptsResponse200ApplicationJSONResponseBodyDataType$inboundSchema:
  z.ZodNativeEnum<
    typeof GetAllPromptsResponseFormatPromptsResponse200ApplicationJSONResponseBodyDataType
  > = z.nativeEnum(
    GetAllPromptsResponseFormatPromptsResponse200ApplicationJSONResponseBodyDataType,
  );

/** @internal */
export const GetAllPromptsResponseFormatPromptsResponse200ApplicationJSONResponseBodyDataType$outboundSchema:
  z.ZodNativeEnum<
    typeof GetAllPromptsResponseFormatPromptsResponse200ApplicationJSONResponseBodyDataType
  > =
    GetAllPromptsResponseFormatPromptsResponse200ApplicationJSONResponseBodyDataType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPromptsResponseFormatPromptsResponse200ApplicationJSONResponseBodyDataType$ {
  /** @deprecated use `GetAllPromptsResponseFormatPromptsResponse200ApplicationJSONResponseBodyDataType$inboundSchema` instead. */
  export const inboundSchema =
    GetAllPromptsResponseFormatPromptsResponse200ApplicationJSONResponseBodyDataType$inboundSchema;
  /** @deprecated use `GetAllPromptsResponseFormatPromptsResponse200ApplicationJSONResponseBodyDataType$outboundSchema` instead. */
  export const outboundSchema =
    GetAllPromptsResponseFormatPromptsResponse200ApplicationJSONResponseBodyDataType$outboundSchema;
}

/** @internal */
export const GetAllPromptsResponseFormatPromptsResponse200JsonSchema$inboundSchema:
  z.ZodType<
    GetAllPromptsResponseFormatPromptsResponse200JsonSchema,
    z.ZodTypeDef,
    unknown
  > = z.object({
    name: z.string(),
    strict: z.boolean(),
    schema: z.record(z.any()),
  });

/** @internal */
export type GetAllPromptsResponseFormatPromptsResponse200JsonSchema$Outbound = {
  name: string;
  strict: boolean;
  schema: { [k: string]: any };
};

/** @internal */
export const GetAllPromptsResponseFormatPromptsResponse200JsonSchema$outboundSchema:
  z.ZodType<
    GetAllPromptsResponseFormatPromptsResponse200JsonSchema$Outbound,
    z.ZodTypeDef,
    GetAllPromptsResponseFormatPromptsResponse200JsonSchema
  > = z.object({
    name: z.string(),
    strict: z.boolean(),
    schema: z.record(z.any()),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPromptsResponseFormatPromptsResponse200JsonSchema$ {
  /** @deprecated use `GetAllPromptsResponseFormatPromptsResponse200JsonSchema$inboundSchema` instead. */
  export const inboundSchema =
    GetAllPromptsResponseFormatPromptsResponse200JsonSchema$inboundSchema;
  /** @deprecated use `GetAllPromptsResponseFormatPromptsResponse200JsonSchema$outboundSchema` instead. */
  export const outboundSchema =
    GetAllPromptsResponseFormatPromptsResponse200JsonSchema$outboundSchema;
  /** @deprecated use `GetAllPromptsResponseFormatPromptsResponse200JsonSchema$Outbound` instead. */
  export type Outbound =
    GetAllPromptsResponseFormatPromptsResponse200JsonSchema$Outbound;
}

export function getAllPromptsResponseFormatPromptsResponse200JsonSchemaToJSON(
  getAllPromptsResponseFormatPromptsResponse200JsonSchema:
    GetAllPromptsResponseFormatPromptsResponse200JsonSchema,
): string {
  return JSON.stringify(
    GetAllPromptsResponseFormatPromptsResponse200JsonSchema$outboundSchema
      .parse(getAllPromptsResponseFormatPromptsResponse200JsonSchema),
  );
}

export function getAllPromptsResponseFormatPromptsResponse200JsonSchemaFromJSON(
  jsonString: string,
): SafeParseResult<
  GetAllPromptsResponseFormatPromptsResponse200JsonSchema,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetAllPromptsResponseFormatPromptsResponse200JsonSchema$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'GetAllPromptsResponseFormatPromptsResponse200JsonSchema' from JSON`,
  );
}

/** @internal */
export const GetAllPromptsResponseFormatPromptsResponse2001$inboundSchema:
  z.ZodType<
    GetAllPromptsResponseFormatPromptsResponse2001,
    z.ZodTypeDef,
    unknown
  > = z.object({
    type:
      GetAllPromptsResponseFormatPromptsResponse200ApplicationJSONResponseBodyDataType$inboundSchema,
    json_schema: z.lazy(() =>
      GetAllPromptsResponseFormatPromptsResponse200JsonSchema$inboundSchema
    ),
  }).transform((v) => {
    return remap$(v, {
      "json_schema": "jsonSchema",
    });
  });

/** @internal */
export type GetAllPromptsResponseFormatPromptsResponse2001$Outbound = {
  type: string;
  json_schema: GetAllPromptsResponseFormatPromptsResponse200JsonSchema$Outbound;
};

/** @internal */
export const GetAllPromptsResponseFormatPromptsResponse2001$outboundSchema:
  z.ZodType<
    GetAllPromptsResponseFormatPromptsResponse2001$Outbound,
    z.ZodTypeDef,
    GetAllPromptsResponseFormatPromptsResponse2001
  > = z.object({
    type:
      GetAllPromptsResponseFormatPromptsResponse200ApplicationJSONResponseBodyDataType$outboundSchema,
    jsonSchema: z.lazy(() =>
      GetAllPromptsResponseFormatPromptsResponse200JsonSchema$outboundSchema
    ),
  }).transform((v) => {
    return remap$(v, {
      jsonSchema: "json_schema",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPromptsResponseFormatPromptsResponse2001$ {
  /** @deprecated use `GetAllPromptsResponseFormatPromptsResponse2001$inboundSchema` instead. */
  export const inboundSchema =
    GetAllPromptsResponseFormatPromptsResponse2001$inboundSchema;
  /** @deprecated use `GetAllPromptsResponseFormatPromptsResponse2001$outboundSchema` instead. */
  export const outboundSchema =
    GetAllPromptsResponseFormatPromptsResponse2001$outboundSchema;
  /** @deprecated use `GetAllPromptsResponseFormatPromptsResponse2001$Outbound` instead. */
  export type Outbound =
    GetAllPromptsResponseFormatPromptsResponse2001$Outbound;
}

export function getAllPromptsResponseFormatPromptsResponse2001ToJSON(
  getAllPromptsResponseFormatPromptsResponse2001:
    GetAllPromptsResponseFormatPromptsResponse2001,
): string {
  return JSON.stringify(
    GetAllPromptsResponseFormatPromptsResponse2001$outboundSchema.parse(
      getAllPromptsResponseFormatPromptsResponse2001,
    ),
  );
}

export function getAllPromptsResponseFormatPromptsResponse2001FromJSON(
  jsonString: string,
): SafeParseResult<
  GetAllPromptsResponseFormatPromptsResponse2001,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetAllPromptsResponseFormatPromptsResponse2001$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'GetAllPromptsResponseFormatPromptsResponse2001' from JSON`,
  );
}

/** @internal */
export const GetAllPromptsDataPromptsResponseResponseFormat$inboundSchema:
  z.ZodType<
    GetAllPromptsDataPromptsResponseResponseFormat,
    z.ZodTypeDef,
    unknown
  > = z.union([
    z.lazy(() => GetAllPromptsResponseFormatPromptsResponse2002$inboundSchema),
    z.lazy(() => GetAllPromptsResponseFormatPromptsResponse2001$inboundSchema),
  ]);

/** @internal */
export type GetAllPromptsDataPromptsResponseResponseFormat$Outbound =
  | GetAllPromptsResponseFormatPromptsResponse2002$Outbound
  | GetAllPromptsResponseFormatPromptsResponse2001$Outbound;

/** @internal */
export const GetAllPromptsDataPromptsResponseResponseFormat$outboundSchema:
  z.ZodType<
    GetAllPromptsDataPromptsResponseResponseFormat$Outbound,
    z.ZodTypeDef,
    GetAllPromptsDataPromptsResponseResponseFormat
  > = z.union([
    z.lazy(() => GetAllPromptsResponseFormatPromptsResponse2002$outboundSchema),
    z.lazy(() => GetAllPromptsResponseFormatPromptsResponse2001$outboundSchema),
  ]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPromptsDataPromptsResponseResponseFormat$ {
  /** @deprecated use `GetAllPromptsDataPromptsResponseResponseFormat$inboundSchema` instead. */
  export const inboundSchema =
    GetAllPromptsDataPromptsResponseResponseFormat$inboundSchema;
  /** @deprecated use `GetAllPromptsDataPromptsResponseResponseFormat$outboundSchema` instead. */
  export const outboundSchema =
    GetAllPromptsDataPromptsResponseResponseFormat$outboundSchema;
  /** @deprecated use `GetAllPromptsDataPromptsResponseResponseFormat$Outbound` instead. */
  export type Outbound =
    GetAllPromptsDataPromptsResponseResponseFormat$Outbound;
}

export function getAllPromptsDataPromptsResponseResponseFormatToJSON(
  getAllPromptsDataPromptsResponseResponseFormat:
    GetAllPromptsDataPromptsResponseResponseFormat,
): string {
  return JSON.stringify(
    GetAllPromptsDataPromptsResponseResponseFormat$outboundSchema.parse(
      getAllPromptsDataPromptsResponseResponseFormat,
    ),
  );
}

export function getAllPromptsDataPromptsResponseResponseFormatFromJSON(
  jsonString: string,
): SafeParseResult<
  GetAllPromptsDataPromptsResponseResponseFormat,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetAllPromptsDataPromptsResponseResponseFormat$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'GetAllPromptsDataPromptsResponseResponseFormat' from JSON`,
  );
}

/** @internal */
export const GetAllPromptsDataPromptsResponsePhotoRealVersion$inboundSchema:
  z.ZodNativeEnum<typeof GetAllPromptsDataPromptsResponsePhotoRealVersion> = z
    .nativeEnum(GetAllPromptsDataPromptsResponsePhotoRealVersion);

/** @internal */
export const GetAllPromptsDataPromptsResponsePhotoRealVersion$outboundSchema:
  z.ZodNativeEnum<typeof GetAllPromptsDataPromptsResponsePhotoRealVersion> =
    GetAllPromptsDataPromptsResponsePhotoRealVersion$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPromptsDataPromptsResponsePhotoRealVersion$ {
  /** @deprecated use `GetAllPromptsDataPromptsResponsePhotoRealVersion$inboundSchema` instead. */
  export const inboundSchema =
    GetAllPromptsDataPromptsResponsePhotoRealVersion$inboundSchema;
  /** @deprecated use `GetAllPromptsDataPromptsResponsePhotoRealVersion$outboundSchema` instead. */
  export const outboundSchema =
    GetAllPromptsDataPromptsResponsePhotoRealVersion$outboundSchema;
}

/** @internal */
export const GetAllPromptsDataPromptsResponseEncodingFormat$inboundSchema:
  z.ZodNativeEnum<typeof GetAllPromptsDataPromptsResponseEncodingFormat> = z
    .nativeEnum(GetAllPromptsDataPromptsResponseEncodingFormat);

/** @internal */
export const GetAllPromptsDataPromptsResponseEncodingFormat$outboundSchema:
  z.ZodNativeEnum<typeof GetAllPromptsDataPromptsResponseEncodingFormat> =
    GetAllPromptsDataPromptsResponseEncodingFormat$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPromptsDataPromptsResponseEncodingFormat$ {
  /** @deprecated use `GetAllPromptsDataPromptsResponseEncodingFormat$inboundSchema` instead. */
  export const inboundSchema =
    GetAllPromptsDataPromptsResponseEncodingFormat$inboundSchema;
  /** @deprecated use `GetAllPromptsDataPromptsResponseEncodingFormat$outboundSchema` instead. */
  export const outboundSchema =
    GetAllPromptsDataPromptsResponseEncodingFormat$outboundSchema;
}

/** @internal */
export const GetAllPromptsDataPromptsResponseModelParameters$inboundSchema:
  z.ZodType<
    GetAllPromptsDataPromptsResponseModelParameters,
    z.ZodTypeDef,
    unknown
  > = z.object({
    temperature: z.number().optional(),
    maxTokens: z.number().optional(),
    topK: z.number().optional(),
    topP: z.number().optional(),
    frequencyPenalty: z.number().optional(),
    presencePenalty: z.number().optional(),
    numImages: z.number().optional(),
    seed: z.number().optional(),
    format: GetAllPromptsDataPromptsResponse200Format$inboundSchema.optional(),
    dimensions: z.string().optional(),
    quality: GetAllPromptsDataPromptsResponseQuality$inboundSchema.optional(),
    style: z.string().optional(),
    responseFormat: z.nullable(
      z.union([
        z.lazy(() =>
          GetAllPromptsResponseFormatPromptsResponse2002$inboundSchema
        ),
        z.lazy(() =>
          GetAllPromptsResponseFormatPromptsResponse2001$inboundSchema
        ),
      ]),
    ).optional(),
    photoRealVersion:
      GetAllPromptsDataPromptsResponsePhotoRealVersion$inboundSchema.optional(),
    encoding_format:
      GetAllPromptsDataPromptsResponseEncodingFormat$inboundSchema.optional(),
  }).transform((v) => {
    return remap$(v, {
      "encoding_format": "encodingFormat",
    });
  });

/** @internal */
export type GetAllPromptsDataPromptsResponseModelParameters$Outbound = {
  temperature?: number | undefined;
  maxTokens?: number | undefined;
  topK?: number | undefined;
  topP?: number | undefined;
  frequencyPenalty?: number | undefined;
  presencePenalty?: number | undefined;
  numImages?: number | undefined;
  seed?: number | undefined;
  format?: string | undefined;
  dimensions?: string | undefined;
  quality?: string | undefined;
  style?: string | undefined;
  responseFormat?:
    | GetAllPromptsResponseFormatPromptsResponse2002$Outbound
    | GetAllPromptsResponseFormatPromptsResponse2001$Outbound
    | null
    | undefined;
  photoRealVersion?: string | undefined;
  encoding_format?: string | undefined;
};

/** @internal */
export const GetAllPromptsDataPromptsResponseModelParameters$outboundSchema:
  z.ZodType<
    GetAllPromptsDataPromptsResponseModelParameters$Outbound,
    z.ZodTypeDef,
    GetAllPromptsDataPromptsResponseModelParameters
  > = z.object({
    temperature: z.number().optional(),
    maxTokens: z.number().optional(),
    topK: z.number().optional(),
    topP: z.number().optional(),
    frequencyPenalty: z.number().optional(),
    presencePenalty: z.number().optional(),
    numImages: z.number().optional(),
    seed: z.number().optional(),
    format: GetAllPromptsDataPromptsResponse200Format$outboundSchema.optional(),
    dimensions: z.string().optional(),
    quality: GetAllPromptsDataPromptsResponseQuality$outboundSchema.optional(),
    style: z.string().optional(),
    responseFormat: z.nullable(
      z.union([
        z.lazy(() =>
          GetAllPromptsResponseFormatPromptsResponse2002$outboundSchema
        ),
        z.lazy(() =>
          GetAllPromptsResponseFormatPromptsResponse2001$outboundSchema
        ),
      ]),
    ).optional(),
    photoRealVersion:
      GetAllPromptsDataPromptsResponsePhotoRealVersion$outboundSchema
        .optional(),
    encodingFormat:
      GetAllPromptsDataPromptsResponseEncodingFormat$outboundSchema.optional(),
  }).transform((v) => {
    return remap$(v, {
      encodingFormat: "encoding_format",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPromptsDataPromptsResponseModelParameters$ {
  /** @deprecated use `GetAllPromptsDataPromptsResponseModelParameters$inboundSchema` instead. */
  export const inboundSchema =
    GetAllPromptsDataPromptsResponseModelParameters$inboundSchema;
  /** @deprecated use `GetAllPromptsDataPromptsResponseModelParameters$outboundSchema` instead. */
  export const outboundSchema =
    GetAllPromptsDataPromptsResponseModelParameters$outboundSchema;
  /** @deprecated use `GetAllPromptsDataPromptsResponseModelParameters$Outbound` instead. */
  export type Outbound =
    GetAllPromptsDataPromptsResponseModelParameters$Outbound;
}

export function getAllPromptsDataPromptsResponseModelParametersToJSON(
  getAllPromptsDataPromptsResponseModelParameters:
    GetAllPromptsDataPromptsResponseModelParameters,
): string {
  return JSON.stringify(
    GetAllPromptsDataPromptsResponseModelParameters$outboundSchema.parse(
      getAllPromptsDataPromptsResponseModelParameters,
    ),
  );
}

export function getAllPromptsDataPromptsResponseModelParametersFromJSON(
  jsonString: string,
): SafeParseResult<
  GetAllPromptsDataPromptsResponseModelParameters,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetAllPromptsDataPromptsResponseModelParameters$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'GetAllPromptsDataPromptsResponseModelParameters' from JSON`,
  );
}

/** @internal */
export const GetAllPromptsDataPromptsResponseProvider$inboundSchema:
  z.ZodNativeEnum<typeof GetAllPromptsDataPromptsResponseProvider> = z
    .nativeEnum(GetAllPromptsDataPromptsResponseProvider);

/** @internal */
export const GetAllPromptsDataPromptsResponseProvider$outboundSchema:
  z.ZodNativeEnum<typeof GetAllPromptsDataPromptsResponseProvider> =
    GetAllPromptsDataPromptsResponseProvider$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPromptsDataPromptsResponseProvider$ {
  /** @deprecated use `GetAllPromptsDataPromptsResponseProvider$inboundSchema` instead. */
  export const inboundSchema =
    GetAllPromptsDataPromptsResponseProvider$inboundSchema;
  /** @deprecated use `GetAllPromptsDataPromptsResponseProvider$outboundSchema` instead. */
  export const outboundSchema =
    GetAllPromptsDataPromptsResponseProvider$outboundSchema;
}

/** @internal */
export const GetAllPromptsDataPromptsResponseRole$inboundSchema:
  z.ZodNativeEnum<typeof GetAllPromptsDataPromptsResponseRole> = z.nativeEnum(
    GetAllPromptsDataPromptsResponseRole,
  );

/** @internal */
export const GetAllPromptsDataPromptsResponseRole$outboundSchema:
  z.ZodNativeEnum<typeof GetAllPromptsDataPromptsResponseRole> =
    GetAllPromptsDataPromptsResponseRole$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPromptsDataPromptsResponseRole$ {
  /** @deprecated use `GetAllPromptsDataPromptsResponseRole$inboundSchema` instead. */
  export const inboundSchema =
    GetAllPromptsDataPromptsResponseRole$inboundSchema;
  /** @deprecated use `GetAllPromptsDataPromptsResponseRole$outboundSchema` instead. */
  export const outboundSchema =
    GetAllPromptsDataPromptsResponseRole$outboundSchema;
}

/** @internal */
export const GetAllPrompts2PromptsResponse200ApplicationJSONResponseBodyData2Type$inboundSchema:
  z.ZodNativeEnum<
    typeof GetAllPrompts2PromptsResponse200ApplicationJSONResponseBodyData2Type
  > = z.nativeEnum(
    GetAllPrompts2PromptsResponse200ApplicationJSONResponseBodyData2Type,
  );

/** @internal */
export const GetAllPrompts2PromptsResponse200ApplicationJSONResponseBodyData2Type$outboundSchema:
  z.ZodNativeEnum<
    typeof GetAllPrompts2PromptsResponse200ApplicationJSONResponseBodyData2Type
  > =
    GetAllPrompts2PromptsResponse200ApplicationJSONResponseBodyData2Type$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPrompts2PromptsResponse200ApplicationJSONResponseBodyData2Type$ {
  /** @deprecated use `GetAllPrompts2PromptsResponse200ApplicationJSONResponseBodyData2Type$inboundSchema` instead. */
  export const inboundSchema =
    GetAllPrompts2PromptsResponse200ApplicationJSONResponseBodyData2Type$inboundSchema;
  /** @deprecated use `GetAllPrompts2PromptsResponse200ApplicationJSONResponseBodyData2Type$outboundSchema` instead. */
  export const outboundSchema =
    GetAllPrompts2PromptsResponse200ApplicationJSONResponseBodyData2Type$outboundSchema;
}

/** @internal */
export const GetAllPrompts2PromptsResponse200ImageUrl$inboundSchema: z.ZodType<
  GetAllPrompts2PromptsResponse200ImageUrl,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string().optional(),
  url: z.string(),
  detail: z.string().optional(),
});

/** @internal */
export type GetAllPrompts2PromptsResponse200ImageUrl$Outbound = {
  id?: string | undefined;
  url: string;
  detail?: string | undefined;
};

/** @internal */
export const GetAllPrompts2PromptsResponse200ImageUrl$outboundSchema: z.ZodType<
  GetAllPrompts2PromptsResponse200ImageUrl$Outbound,
  z.ZodTypeDef,
  GetAllPrompts2PromptsResponse200ImageUrl
> = z.object({
  id: z.string().optional(),
  url: z.string(),
  detail: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPrompts2PromptsResponse200ImageUrl$ {
  /** @deprecated use `GetAllPrompts2PromptsResponse200ImageUrl$inboundSchema` instead. */
  export const inboundSchema =
    GetAllPrompts2PromptsResponse200ImageUrl$inboundSchema;
  /** @deprecated use `GetAllPrompts2PromptsResponse200ImageUrl$outboundSchema` instead. */
  export const outboundSchema =
    GetAllPrompts2PromptsResponse200ImageUrl$outboundSchema;
  /** @deprecated use `GetAllPrompts2PromptsResponse200ImageUrl$Outbound` instead. */
  export type Outbound = GetAllPrompts2PromptsResponse200ImageUrl$Outbound;
}

export function getAllPrompts2PromptsResponse200ImageUrlToJSON(
  getAllPrompts2PromptsResponse200ImageUrl:
    GetAllPrompts2PromptsResponse200ImageUrl,
): string {
  return JSON.stringify(
    GetAllPrompts2PromptsResponse200ImageUrl$outboundSchema.parse(
      getAllPrompts2PromptsResponse200ImageUrl,
    ),
  );
}

export function getAllPrompts2PromptsResponse200ImageUrlFromJSON(
  jsonString: string,
): SafeParseResult<
  GetAllPrompts2PromptsResponse200ImageUrl,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetAllPrompts2PromptsResponse200ImageUrl$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'GetAllPrompts2PromptsResponse200ImageUrl' from JSON`,
  );
}

/** @internal */
export const GetAllPrompts2PromptsResponse2002$inboundSchema: z.ZodType<
  GetAllPrompts2PromptsResponse2002,
  z.ZodTypeDef,
  unknown
> = z.object({
  type:
    GetAllPrompts2PromptsResponse200ApplicationJSONResponseBodyData2Type$inboundSchema,
  image_url: z.lazy(() =>
    GetAllPrompts2PromptsResponse200ImageUrl$inboundSchema
  ),
}).transform((v) => {
  return remap$(v, {
    "image_url": "imageUrl",
  });
});

/** @internal */
export type GetAllPrompts2PromptsResponse2002$Outbound = {
  type: string;
  image_url: GetAllPrompts2PromptsResponse200ImageUrl$Outbound;
};

/** @internal */
export const GetAllPrompts2PromptsResponse2002$outboundSchema: z.ZodType<
  GetAllPrompts2PromptsResponse2002$Outbound,
  z.ZodTypeDef,
  GetAllPrompts2PromptsResponse2002
> = z.object({
  type:
    GetAllPrompts2PromptsResponse200ApplicationJSONResponseBodyData2Type$outboundSchema,
  imageUrl: z.lazy(() =>
    GetAllPrompts2PromptsResponse200ImageUrl$outboundSchema
  ),
}).transform((v) => {
  return remap$(v, {
    imageUrl: "image_url",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPrompts2PromptsResponse2002$ {
  /** @deprecated use `GetAllPrompts2PromptsResponse2002$inboundSchema` instead. */
  export const inboundSchema = GetAllPrompts2PromptsResponse2002$inboundSchema;
  /** @deprecated use `GetAllPrompts2PromptsResponse2002$outboundSchema` instead. */
  export const outboundSchema =
    GetAllPrompts2PromptsResponse2002$outboundSchema;
  /** @deprecated use `GetAllPrompts2PromptsResponse2002$Outbound` instead. */
  export type Outbound = GetAllPrompts2PromptsResponse2002$Outbound;
}

export function getAllPrompts2PromptsResponse2002ToJSON(
  getAllPrompts2PromptsResponse2002: GetAllPrompts2PromptsResponse2002,
): string {
  return JSON.stringify(
    GetAllPrompts2PromptsResponse2002$outboundSchema.parse(
      getAllPrompts2PromptsResponse2002,
    ),
  );
}

export function getAllPrompts2PromptsResponse2002FromJSON(
  jsonString: string,
): SafeParseResult<GetAllPrompts2PromptsResponse2002, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetAllPrompts2PromptsResponse2002$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetAllPrompts2PromptsResponse2002' from JSON`,
  );
}

/** @internal */
export const GetAllPrompts2PromptsResponse200ApplicationJSONResponseBodyDataType$inboundSchema:
  z.ZodNativeEnum<
    typeof GetAllPrompts2PromptsResponse200ApplicationJSONResponseBodyDataType
  > = z.nativeEnum(
    GetAllPrompts2PromptsResponse200ApplicationJSONResponseBodyDataType,
  );

/** @internal */
export const GetAllPrompts2PromptsResponse200ApplicationJSONResponseBodyDataType$outboundSchema:
  z.ZodNativeEnum<
    typeof GetAllPrompts2PromptsResponse200ApplicationJSONResponseBodyDataType
  > =
    GetAllPrompts2PromptsResponse200ApplicationJSONResponseBodyDataType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPrompts2PromptsResponse200ApplicationJSONResponseBodyDataType$ {
  /** @deprecated use `GetAllPrompts2PromptsResponse200ApplicationJSONResponseBodyDataType$inboundSchema` instead. */
  export const inboundSchema =
    GetAllPrompts2PromptsResponse200ApplicationJSONResponseBodyDataType$inboundSchema;
  /** @deprecated use `GetAllPrompts2PromptsResponse200ApplicationJSONResponseBodyDataType$outboundSchema` instead. */
  export const outboundSchema =
    GetAllPrompts2PromptsResponse200ApplicationJSONResponseBodyDataType$outboundSchema;
}

/** @internal */
export const GetAllPrompts2PromptsResponse2001$inboundSchema: z.ZodType<
  GetAllPrompts2PromptsResponse2001,
  z.ZodTypeDef,
  unknown
> = z.object({
  type:
    GetAllPrompts2PromptsResponse200ApplicationJSONResponseBodyDataType$inboundSchema,
  text: z.string(),
});

/** @internal */
export type GetAllPrompts2PromptsResponse2001$Outbound = {
  type: string;
  text: string;
};

/** @internal */
export const GetAllPrompts2PromptsResponse2001$outboundSchema: z.ZodType<
  GetAllPrompts2PromptsResponse2001$Outbound,
  z.ZodTypeDef,
  GetAllPrompts2PromptsResponse2001
> = z.object({
  type:
    GetAllPrompts2PromptsResponse200ApplicationJSONResponseBodyDataType$outboundSchema,
  text: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPrompts2PromptsResponse2001$ {
  /** @deprecated use `GetAllPrompts2PromptsResponse2001$inboundSchema` instead. */
  export const inboundSchema = GetAllPrompts2PromptsResponse2001$inboundSchema;
  /** @deprecated use `GetAllPrompts2PromptsResponse2001$outboundSchema` instead. */
  export const outboundSchema =
    GetAllPrompts2PromptsResponse2001$outboundSchema;
  /** @deprecated use `GetAllPrompts2PromptsResponse2001$Outbound` instead. */
  export type Outbound = GetAllPrompts2PromptsResponse2001$Outbound;
}

export function getAllPrompts2PromptsResponse2001ToJSON(
  getAllPrompts2PromptsResponse2001: GetAllPrompts2PromptsResponse2001,
): string {
  return JSON.stringify(
    GetAllPrompts2PromptsResponse2001$outboundSchema.parse(
      getAllPrompts2PromptsResponse2001,
    ),
  );
}

export function getAllPrompts2PromptsResponse2001FromJSON(
  jsonString: string,
): SafeParseResult<GetAllPrompts2PromptsResponse2001, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetAllPrompts2PromptsResponse2001$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetAllPrompts2PromptsResponse2001' from JSON`,
  );
}

/** @internal */
export const GetAllPromptsContentPromptsResponse2002$inboundSchema: z.ZodType<
  GetAllPromptsContentPromptsResponse2002,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => GetAllPrompts2PromptsResponse2001$inboundSchema),
  z.lazy(() => GetAllPrompts2PromptsResponse2002$inboundSchema),
]);

/** @internal */
export type GetAllPromptsContentPromptsResponse2002$Outbound =
  | GetAllPrompts2PromptsResponse2001$Outbound
  | GetAllPrompts2PromptsResponse2002$Outbound;

/** @internal */
export const GetAllPromptsContentPromptsResponse2002$outboundSchema: z.ZodType<
  GetAllPromptsContentPromptsResponse2002$Outbound,
  z.ZodTypeDef,
  GetAllPromptsContentPromptsResponse2002
> = z.union([
  z.lazy(() => GetAllPrompts2PromptsResponse2001$outboundSchema),
  z.lazy(() => GetAllPrompts2PromptsResponse2002$outboundSchema),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPromptsContentPromptsResponse2002$ {
  /** @deprecated use `GetAllPromptsContentPromptsResponse2002$inboundSchema` instead. */
  export const inboundSchema =
    GetAllPromptsContentPromptsResponse2002$inboundSchema;
  /** @deprecated use `GetAllPromptsContentPromptsResponse2002$outboundSchema` instead. */
  export const outboundSchema =
    GetAllPromptsContentPromptsResponse2002$outboundSchema;
  /** @deprecated use `GetAllPromptsContentPromptsResponse2002$Outbound` instead. */
  export type Outbound = GetAllPromptsContentPromptsResponse2002$Outbound;
}

export function getAllPromptsContentPromptsResponse2002ToJSON(
  getAllPromptsContentPromptsResponse2002:
    GetAllPromptsContentPromptsResponse2002,
): string {
  return JSON.stringify(
    GetAllPromptsContentPromptsResponse2002$outboundSchema.parse(
      getAllPromptsContentPromptsResponse2002,
    ),
  );
}

export function getAllPromptsContentPromptsResponse2002FromJSON(
  jsonString: string,
): SafeParseResult<
  GetAllPromptsContentPromptsResponse2002,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetAllPromptsContentPromptsResponse2002$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'GetAllPromptsContentPromptsResponse2002' from JSON`,
  );
}

/** @internal */
export const GetAllPromptsDataPromptsResponseContent$inboundSchema: z.ZodType<
  GetAllPromptsDataPromptsResponseContent,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.string(),
  z.array(z.union([
    z.lazy(() => GetAllPrompts2PromptsResponse2001$inboundSchema),
    z.lazy(() => GetAllPrompts2PromptsResponse2002$inboundSchema),
  ])),
]);

/** @internal */
export type GetAllPromptsDataPromptsResponseContent$Outbound =
  | string
  | Array<
    | GetAllPrompts2PromptsResponse2001$Outbound
    | GetAllPrompts2PromptsResponse2002$Outbound
  >;

/** @internal */
export const GetAllPromptsDataPromptsResponseContent$outboundSchema: z.ZodType<
  GetAllPromptsDataPromptsResponseContent$Outbound,
  z.ZodTypeDef,
  GetAllPromptsDataPromptsResponseContent
> = z.union([
  z.string(),
  z.array(z.union([
    z.lazy(() => GetAllPrompts2PromptsResponse2001$outboundSchema),
    z.lazy(() => GetAllPrompts2PromptsResponse2002$outboundSchema),
  ])),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPromptsDataPromptsResponseContent$ {
  /** @deprecated use `GetAllPromptsDataPromptsResponseContent$inboundSchema` instead. */
  export const inboundSchema =
    GetAllPromptsDataPromptsResponseContent$inboundSchema;
  /** @deprecated use `GetAllPromptsDataPromptsResponseContent$outboundSchema` instead. */
  export const outboundSchema =
    GetAllPromptsDataPromptsResponseContent$outboundSchema;
  /** @deprecated use `GetAllPromptsDataPromptsResponseContent$Outbound` instead. */
  export type Outbound = GetAllPromptsDataPromptsResponseContent$Outbound;
}

export function getAllPromptsDataPromptsResponseContentToJSON(
  getAllPromptsDataPromptsResponseContent:
    GetAllPromptsDataPromptsResponseContent,
): string {
  return JSON.stringify(
    GetAllPromptsDataPromptsResponseContent$outboundSchema.parse(
      getAllPromptsDataPromptsResponseContent,
    ),
  );
}

export function getAllPromptsDataPromptsResponseContentFromJSON(
  jsonString: string,
): SafeParseResult<
  GetAllPromptsDataPromptsResponseContent,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetAllPromptsDataPromptsResponseContent$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'GetAllPromptsDataPromptsResponseContent' from JSON`,
  );
}

/** @internal */
export const GetAllPromptsDataPromptsResponse200ApplicationJSONResponseBodyType$inboundSchema:
  z.ZodNativeEnum<
    typeof GetAllPromptsDataPromptsResponse200ApplicationJSONResponseBodyType
  > = z.nativeEnum(
    GetAllPromptsDataPromptsResponse200ApplicationJSONResponseBodyType,
  );

/** @internal */
export const GetAllPromptsDataPromptsResponse200ApplicationJSONResponseBodyType$outboundSchema:
  z.ZodNativeEnum<
    typeof GetAllPromptsDataPromptsResponse200ApplicationJSONResponseBodyType
  > =
    GetAllPromptsDataPromptsResponse200ApplicationJSONResponseBodyType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPromptsDataPromptsResponse200ApplicationJSONResponseBodyType$ {
  /** @deprecated use `GetAllPromptsDataPromptsResponse200ApplicationJSONResponseBodyType$inboundSchema` instead. */
  export const inboundSchema =
    GetAllPromptsDataPromptsResponse200ApplicationJSONResponseBodyType$inboundSchema;
  /** @deprecated use `GetAllPromptsDataPromptsResponse200ApplicationJSONResponseBodyType$outboundSchema` instead. */
  export const outboundSchema =
    GetAllPromptsDataPromptsResponse200ApplicationJSONResponseBodyType$outboundSchema;
}

/** @internal */
export const GetAllPromptsDataPromptsResponse200Function$inboundSchema:
  z.ZodType<
    GetAllPromptsDataPromptsResponse200Function,
    z.ZodTypeDef,
    unknown
  > = z.object({
    name: z.string(),
    arguments: z.string(),
  });

/** @internal */
export type GetAllPromptsDataPromptsResponse200Function$Outbound = {
  name: string;
  arguments: string;
};

/** @internal */
export const GetAllPromptsDataPromptsResponse200Function$outboundSchema:
  z.ZodType<
    GetAllPromptsDataPromptsResponse200Function$Outbound,
    z.ZodTypeDef,
    GetAllPromptsDataPromptsResponse200Function
  > = z.object({
    name: z.string(),
    arguments: z.string(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPromptsDataPromptsResponse200Function$ {
  /** @deprecated use `GetAllPromptsDataPromptsResponse200Function$inboundSchema` instead. */
  export const inboundSchema =
    GetAllPromptsDataPromptsResponse200Function$inboundSchema;
  /** @deprecated use `GetAllPromptsDataPromptsResponse200Function$outboundSchema` instead. */
  export const outboundSchema =
    GetAllPromptsDataPromptsResponse200Function$outboundSchema;
  /** @deprecated use `GetAllPromptsDataPromptsResponse200Function$Outbound` instead. */
  export type Outbound = GetAllPromptsDataPromptsResponse200Function$Outbound;
}

export function getAllPromptsDataPromptsResponse200FunctionToJSON(
  getAllPromptsDataPromptsResponse200Function:
    GetAllPromptsDataPromptsResponse200Function,
): string {
  return JSON.stringify(
    GetAllPromptsDataPromptsResponse200Function$outboundSchema.parse(
      getAllPromptsDataPromptsResponse200Function,
    ),
  );
}

export function getAllPromptsDataPromptsResponse200FunctionFromJSON(
  jsonString: string,
): SafeParseResult<
  GetAllPromptsDataPromptsResponse200Function,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetAllPromptsDataPromptsResponse200Function$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'GetAllPromptsDataPromptsResponse200Function' from JSON`,
  );
}

/** @internal */
export const GetAllPromptsDataPromptsResponseToolCalls$inboundSchema: z.ZodType<
  GetAllPromptsDataPromptsResponseToolCalls,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string().optional(),
  index: z.number().optional(),
  type:
    GetAllPromptsDataPromptsResponse200ApplicationJSONResponseBodyType$inboundSchema,
  function: z.lazy(() =>
    GetAllPromptsDataPromptsResponse200Function$inboundSchema
  ),
});

/** @internal */
export type GetAllPromptsDataPromptsResponseToolCalls$Outbound = {
  id?: string | undefined;
  index?: number | undefined;
  type: string;
  function: GetAllPromptsDataPromptsResponse200Function$Outbound;
};

/** @internal */
export const GetAllPromptsDataPromptsResponseToolCalls$outboundSchema:
  z.ZodType<
    GetAllPromptsDataPromptsResponseToolCalls$Outbound,
    z.ZodTypeDef,
    GetAllPromptsDataPromptsResponseToolCalls
  > = z.object({
    id: z.string().optional(),
    index: z.number().optional(),
    type:
      GetAllPromptsDataPromptsResponse200ApplicationJSONResponseBodyType$outboundSchema,
    function: z.lazy(() =>
      GetAllPromptsDataPromptsResponse200Function$outboundSchema
    ),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPromptsDataPromptsResponseToolCalls$ {
  /** @deprecated use `GetAllPromptsDataPromptsResponseToolCalls$inboundSchema` instead. */
  export const inboundSchema =
    GetAllPromptsDataPromptsResponseToolCalls$inboundSchema;
  /** @deprecated use `GetAllPromptsDataPromptsResponseToolCalls$outboundSchema` instead. */
  export const outboundSchema =
    GetAllPromptsDataPromptsResponseToolCalls$outboundSchema;
  /** @deprecated use `GetAllPromptsDataPromptsResponseToolCalls$Outbound` instead. */
  export type Outbound = GetAllPromptsDataPromptsResponseToolCalls$Outbound;
}

export function getAllPromptsDataPromptsResponseToolCallsToJSON(
  getAllPromptsDataPromptsResponseToolCalls:
    GetAllPromptsDataPromptsResponseToolCalls,
): string {
  return JSON.stringify(
    GetAllPromptsDataPromptsResponseToolCalls$outboundSchema.parse(
      getAllPromptsDataPromptsResponseToolCalls,
    ),
  );
}

export function getAllPromptsDataPromptsResponseToolCallsFromJSON(
  jsonString: string,
): SafeParseResult<
  GetAllPromptsDataPromptsResponseToolCalls,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetAllPromptsDataPromptsResponseToolCalls$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'GetAllPromptsDataPromptsResponseToolCalls' from JSON`,
  );
}

/** @internal */
export const GetAllPromptsDataPromptsResponseMessages$inboundSchema: z.ZodType<
  GetAllPromptsDataPromptsResponseMessages,
  z.ZodTypeDef,
  unknown
> = z.object({
  role: GetAllPromptsDataPromptsResponseRole$inboundSchema,
  content: z.union([
    z.string(),
    z.array(z.union([
      z.lazy(() => GetAllPrompts2PromptsResponse2001$inboundSchema),
      z.lazy(() => GetAllPrompts2PromptsResponse2002$inboundSchema),
    ])),
  ]),
  tool_calls: z.array(
    z.lazy(() => GetAllPromptsDataPromptsResponseToolCalls$inboundSchema),
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    "tool_calls": "toolCalls",
  });
});

/** @internal */
export type GetAllPromptsDataPromptsResponseMessages$Outbound = {
  role: string;
  content:
    | string
    | Array<
      | GetAllPrompts2PromptsResponse2001$Outbound
      | GetAllPrompts2PromptsResponse2002$Outbound
    >;
  tool_calls?:
    | Array<GetAllPromptsDataPromptsResponseToolCalls$Outbound>
    | undefined;
};

/** @internal */
export const GetAllPromptsDataPromptsResponseMessages$outboundSchema: z.ZodType<
  GetAllPromptsDataPromptsResponseMessages$Outbound,
  z.ZodTypeDef,
  GetAllPromptsDataPromptsResponseMessages
> = z.object({
  role: GetAllPromptsDataPromptsResponseRole$outboundSchema,
  content: z.union([
    z.string(),
    z.array(z.union([
      z.lazy(() => GetAllPrompts2PromptsResponse2001$outboundSchema),
      z.lazy(() => GetAllPrompts2PromptsResponse2002$outboundSchema),
    ])),
  ]),
  toolCalls: z.array(
    z.lazy(() => GetAllPromptsDataPromptsResponseToolCalls$outboundSchema),
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    toolCalls: "tool_calls",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPromptsDataPromptsResponseMessages$ {
  /** @deprecated use `GetAllPromptsDataPromptsResponseMessages$inboundSchema` instead. */
  export const inboundSchema =
    GetAllPromptsDataPromptsResponseMessages$inboundSchema;
  /** @deprecated use `GetAllPromptsDataPromptsResponseMessages$outboundSchema` instead. */
  export const outboundSchema =
    GetAllPromptsDataPromptsResponseMessages$outboundSchema;
  /** @deprecated use `GetAllPromptsDataPromptsResponseMessages$Outbound` instead. */
  export type Outbound = GetAllPromptsDataPromptsResponseMessages$Outbound;
}

export function getAllPromptsDataPromptsResponseMessagesToJSON(
  getAllPromptsDataPromptsResponseMessages:
    GetAllPromptsDataPromptsResponseMessages,
): string {
  return JSON.stringify(
    GetAllPromptsDataPromptsResponseMessages$outboundSchema.parse(
      getAllPromptsDataPromptsResponseMessages,
    ),
  );
}

export function getAllPromptsDataPromptsResponseMessagesFromJSON(
  jsonString: string,
): SafeParseResult<
  GetAllPromptsDataPromptsResponseMessages,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetAllPromptsDataPromptsResponseMessages$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'GetAllPromptsDataPromptsResponseMessages' from JSON`,
  );
}

/** @internal */
export const GetAllPromptsDataPromptsResponsePromptConfig$inboundSchema:
  z.ZodType<
    GetAllPromptsDataPromptsResponsePromptConfig,
    z.ZodTypeDef,
    unknown
  > = z.object({
    stream: z.boolean().optional(),
    model: z.string().optional(),
    model_db_id: z.string().optional(),
    model_type: GetAllPromptsDataPromptsResponseModelType$inboundSchema
      .optional(),
    model_parameters: z.lazy(() =>
      GetAllPromptsDataPromptsResponseModelParameters$inboundSchema
    ).optional(),
    provider: GetAllPromptsDataPromptsResponseProvider$inboundSchema.optional(),
    integration_id: z.nullable(z.string()).optional(),
    version: z.string().optional(),
    messages: z.array(
      z.lazy(() => GetAllPromptsDataPromptsResponseMessages$inboundSchema),
    ),
  }).transform((v) => {
    return remap$(v, {
      "model_db_id": "modelDbId",
      "model_type": "modelType",
      "model_parameters": "modelParameters",
      "integration_id": "integrationId",
    });
  });

/** @internal */
export type GetAllPromptsDataPromptsResponsePromptConfig$Outbound = {
  stream?: boolean | undefined;
  model?: string | undefined;
  model_db_id?: string | undefined;
  model_type?: string | undefined;
  model_parameters?:
    | GetAllPromptsDataPromptsResponseModelParameters$Outbound
    | undefined;
  provider?: string | undefined;
  integration_id?: string | null | undefined;
  version?: string | undefined;
  messages: Array<GetAllPromptsDataPromptsResponseMessages$Outbound>;
};

/** @internal */
export const GetAllPromptsDataPromptsResponsePromptConfig$outboundSchema:
  z.ZodType<
    GetAllPromptsDataPromptsResponsePromptConfig$Outbound,
    z.ZodTypeDef,
    GetAllPromptsDataPromptsResponsePromptConfig
  > = z.object({
    stream: z.boolean().optional(),
    model: z.string().optional(),
    modelDbId: z.string().optional(),
    modelType: GetAllPromptsDataPromptsResponseModelType$outboundSchema
      .optional(),
    modelParameters: z.lazy(() =>
      GetAllPromptsDataPromptsResponseModelParameters$outboundSchema
    ).optional(),
    provider: GetAllPromptsDataPromptsResponseProvider$outboundSchema
      .optional(),
    integrationId: z.nullable(z.string()).optional(),
    version: z.string().optional(),
    messages: z.array(
      z.lazy(() => GetAllPromptsDataPromptsResponseMessages$outboundSchema),
    ),
  }).transform((v) => {
    return remap$(v, {
      modelDbId: "model_db_id",
      modelType: "model_type",
      modelParameters: "model_parameters",
      integrationId: "integration_id",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPromptsDataPromptsResponsePromptConfig$ {
  /** @deprecated use `GetAllPromptsDataPromptsResponsePromptConfig$inboundSchema` instead. */
  export const inboundSchema =
    GetAllPromptsDataPromptsResponsePromptConfig$inboundSchema;
  /** @deprecated use `GetAllPromptsDataPromptsResponsePromptConfig$outboundSchema` instead. */
  export const outboundSchema =
    GetAllPromptsDataPromptsResponsePromptConfig$outboundSchema;
  /** @deprecated use `GetAllPromptsDataPromptsResponsePromptConfig$Outbound` instead. */
  export type Outbound = GetAllPromptsDataPromptsResponsePromptConfig$Outbound;
}

export function getAllPromptsDataPromptsResponsePromptConfigToJSON(
  getAllPromptsDataPromptsResponsePromptConfig:
    GetAllPromptsDataPromptsResponsePromptConfig,
): string {
  return JSON.stringify(
    GetAllPromptsDataPromptsResponsePromptConfig$outboundSchema.parse(
      getAllPromptsDataPromptsResponsePromptConfig,
    ),
  );
}

export function getAllPromptsDataPromptsResponsePromptConfigFromJSON(
  jsonString: string,
): SafeParseResult<
  GetAllPromptsDataPromptsResponsePromptConfig,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetAllPromptsDataPromptsResponsePromptConfig$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'GetAllPromptsDataPromptsResponsePromptConfig' from JSON`,
  );
}

/** @internal */
export const GetAllPromptsDataPromptsResponseMetadata$inboundSchema: z.ZodType<
  GetAllPromptsDataPromptsResponseMetadata,
  z.ZodTypeDef,
  unknown
> = z.object({
  use_cases: z.array(z.string()).optional(),
  language: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "use_cases": "useCases",
  });
});

/** @internal */
export type GetAllPromptsDataPromptsResponseMetadata$Outbound = {
  use_cases?: Array<string> | undefined;
  language?: string | undefined;
};

/** @internal */
export const GetAllPromptsDataPromptsResponseMetadata$outboundSchema: z.ZodType<
  GetAllPromptsDataPromptsResponseMetadata$Outbound,
  z.ZodTypeDef,
  GetAllPromptsDataPromptsResponseMetadata
> = z.object({
  useCases: z.array(z.string()).optional(),
  language: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    useCases: "use_cases",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPromptsDataPromptsResponseMetadata$ {
  /** @deprecated use `GetAllPromptsDataPromptsResponseMetadata$inboundSchema` instead. */
  export const inboundSchema =
    GetAllPromptsDataPromptsResponseMetadata$inboundSchema;
  /** @deprecated use `GetAllPromptsDataPromptsResponseMetadata$outboundSchema` instead. */
  export const outboundSchema =
    GetAllPromptsDataPromptsResponseMetadata$outboundSchema;
  /** @deprecated use `GetAllPromptsDataPromptsResponseMetadata$Outbound` instead. */
  export type Outbound = GetAllPromptsDataPromptsResponseMetadata$Outbound;
}

export function getAllPromptsDataPromptsResponseMetadataToJSON(
  getAllPromptsDataPromptsResponseMetadata:
    GetAllPromptsDataPromptsResponseMetadata,
): string {
  return JSON.stringify(
    GetAllPromptsDataPromptsResponseMetadata$outboundSchema.parse(
      getAllPromptsDataPromptsResponseMetadata,
    ),
  );
}

export function getAllPromptsDataPromptsResponseMetadataFromJSON(
  jsonString: string,
): SafeParseResult<
  GetAllPromptsDataPromptsResponseMetadata,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetAllPromptsDataPromptsResponseMetadata$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'GetAllPromptsDataPromptsResponseMetadata' from JSON`,
  );
}

/** @internal */
export const GetAllPromptsDataVersions$inboundSchema: z.ZodType<
  GetAllPromptsDataVersions,
  z.ZodTypeDef,
  unknown
> = z.object({
  _id: z.string(),
  created_by_id: z.string(),
  display_name: z.string(),
  updated_by_id: z.string(),
  description: z.nullable(z.string()).optional(),
  prompt_config: z.lazy(() =>
    GetAllPromptsDataPromptsResponsePromptConfig$inboundSchema
  ),
  metadata: z.lazy(() =>
    GetAllPromptsDataPromptsResponseMetadata$inboundSchema
  ),
  commit: z.string(),
  timestamp: z.string(),
}).transform((v) => {
  return remap$(v, {
    "_id": "id",
    "created_by_id": "createdById",
    "display_name": "displayName",
    "updated_by_id": "updatedById",
    "prompt_config": "promptConfig",
  });
});

/** @internal */
export type GetAllPromptsDataVersions$Outbound = {
  _id: string;
  created_by_id: string;
  display_name: string;
  updated_by_id: string;
  description?: string | null | undefined;
  prompt_config: GetAllPromptsDataPromptsResponsePromptConfig$Outbound;
  metadata: GetAllPromptsDataPromptsResponseMetadata$Outbound;
  commit: string;
  timestamp: string;
};

/** @internal */
export const GetAllPromptsDataVersions$outboundSchema: z.ZodType<
  GetAllPromptsDataVersions$Outbound,
  z.ZodTypeDef,
  GetAllPromptsDataVersions
> = z.object({
  id: z.string(),
  createdById: z.string(),
  displayName: z.string(),
  updatedById: z.string(),
  description: z.nullable(z.string()).optional(),
  promptConfig: z.lazy(() =>
    GetAllPromptsDataPromptsResponsePromptConfig$outboundSchema
  ),
  metadata: z.lazy(() =>
    GetAllPromptsDataPromptsResponseMetadata$outboundSchema
  ),
  commit: z.string(),
  timestamp: z.string(),
}).transform((v) => {
  return remap$(v, {
    id: "_id",
    createdById: "created_by_id",
    displayName: "display_name",
    updatedById: "updated_by_id",
    promptConfig: "prompt_config",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPromptsDataVersions$ {
  /** @deprecated use `GetAllPromptsDataVersions$inboundSchema` instead. */
  export const inboundSchema = GetAllPromptsDataVersions$inboundSchema;
  /** @deprecated use `GetAllPromptsDataVersions$outboundSchema` instead. */
  export const outboundSchema = GetAllPromptsDataVersions$outboundSchema;
  /** @deprecated use `GetAllPromptsDataVersions$Outbound` instead. */
  export type Outbound = GetAllPromptsDataVersions$Outbound;
}

export function getAllPromptsDataVersionsToJSON(
  getAllPromptsDataVersions: GetAllPromptsDataVersions,
): string {
  return JSON.stringify(
    GetAllPromptsDataVersions$outboundSchema.parse(getAllPromptsDataVersions),
  );
}

export function getAllPromptsDataVersionsFromJSON(
  jsonString: string,
): SafeParseResult<GetAllPromptsDataVersions, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetAllPromptsDataVersions$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetAllPromptsDataVersions' from JSON`,
  );
}

/** @internal */
export const GetAllPromptsDataType$inboundSchema: z.ZodNativeEnum<
  typeof GetAllPromptsDataType
> = z.nativeEnum(GetAllPromptsDataType);

/** @internal */
export const GetAllPromptsDataType$outboundSchema: z.ZodNativeEnum<
  typeof GetAllPromptsDataType
> = GetAllPromptsDataType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPromptsDataType$ {
  /** @deprecated use `GetAllPromptsDataType$inboundSchema` instead. */
  export const inboundSchema = GetAllPromptsDataType$inboundSchema;
  /** @deprecated use `GetAllPromptsDataType$outboundSchema` instead. */
  export const outboundSchema = GetAllPromptsDataType$outboundSchema;
}

/** @internal */
export const GetAllPromptsData2$inboundSchema: z.ZodType<
  GetAllPromptsData2,
  z.ZodTypeDef,
  unknown
> = z.object({
  _id: z.string(),
  owner: z.union([z.string(), GetAllPromptsOwnerPrompts2$inboundSchema]),
  domain_id: z.string(),
  created_by_id: z.string(),
  display_name: z.string(),
  updated_by_id: z.string(),
  description: z.nullable(z.string()).optional(),
  prompt_config: z.lazy(() => GetAllPromptsDataPromptConfig$inboundSchema),
  metadata: z.lazy(() => GetAllPromptsDataMetadata$inboundSchema),
  created: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
  updated: z.string().datetime({ offset: true }).default(
    "2025-01-21T09:55:10.979Z",
  ).transform(v => new Date(v)),
  versions: z.array(z.lazy(() => GetAllPromptsDataVersions$inboundSchema)),
  key: z.string(),
  type: GetAllPromptsDataType$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "_id": "id",
    "domain_id": "domainId",
    "created_by_id": "createdById",
    "display_name": "displayName",
    "updated_by_id": "updatedById",
    "prompt_config": "promptConfig",
  });
});

/** @internal */
export type GetAllPromptsData2$Outbound = {
  _id: string;
  owner: string | string;
  domain_id: string;
  created_by_id: string;
  display_name: string;
  updated_by_id: string;
  description?: string | null | undefined;
  prompt_config: GetAllPromptsDataPromptConfig$Outbound;
  metadata: GetAllPromptsDataMetadata$Outbound;
  created?: string | undefined;
  updated: string;
  versions: Array<GetAllPromptsDataVersions$Outbound>;
  key: string;
  type: string;
};

/** @internal */
export const GetAllPromptsData2$outboundSchema: z.ZodType<
  GetAllPromptsData2$Outbound,
  z.ZodTypeDef,
  GetAllPromptsData2
> = z.object({
  id: z.string(),
  owner: z.union([z.string(), GetAllPromptsOwnerPrompts2$outboundSchema]),
  domainId: z.string(),
  createdById: z.string(),
  displayName: z.string(),
  updatedById: z.string(),
  description: z.nullable(z.string()).optional(),
  promptConfig: z.lazy(() => GetAllPromptsDataPromptConfig$outboundSchema),
  metadata: z.lazy(() => GetAllPromptsDataMetadata$outboundSchema),
  created: z.date().transform(v => v.toISOString()).optional(),
  updated: z.date().default(() => new Date("2025-01-21T09:55:10.979Z"))
    .transform(v => v.toISOString()),
  versions: z.array(z.lazy(() => GetAllPromptsDataVersions$outboundSchema)),
  key: z.string(),
  type: GetAllPromptsDataType$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    id: "_id",
    domainId: "domain_id",
    createdById: "created_by_id",
    displayName: "display_name",
    updatedById: "updated_by_id",
    promptConfig: "prompt_config",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPromptsData2$ {
  /** @deprecated use `GetAllPromptsData2$inboundSchema` instead. */
  export const inboundSchema = GetAllPromptsData2$inboundSchema;
  /** @deprecated use `GetAllPromptsData2$outboundSchema` instead. */
  export const outboundSchema = GetAllPromptsData2$outboundSchema;
  /** @deprecated use `GetAllPromptsData2$Outbound` instead. */
  export type Outbound = GetAllPromptsData2$Outbound;
}

export function getAllPromptsData2ToJSON(
  getAllPromptsData2: GetAllPromptsData2,
): string {
  return JSON.stringify(
    GetAllPromptsData2$outboundSchema.parse(getAllPromptsData2),
  );
}

export function getAllPromptsData2FromJSON(
  jsonString: string,
): SafeParseResult<GetAllPromptsData2, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetAllPromptsData2$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetAllPromptsData2' from JSON`,
  );
}

/** @internal */
export const GetAllPromptsOwner2$inboundSchema: z.ZodNativeEnum<
  typeof GetAllPromptsOwner2
> = z.nativeEnum(GetAllPromptsOwner2);

/** @internal */
export const GetAllPromptsOwner2$outboundSchema: z.ZodNativeEnum<
  typeof GetAllPromptsOwner2
> = GetAllPromptsOwner2$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPromptsOwner2$ {
  /** @deprecated use `GetAllPromptsOwner2$inboundSchema` instead. */
  export const inboundSchema = GetAllPromptsOwner2$inboundSchema;
  /** @deprecated use `GetAllPromptsOwner2$outboundSchema` instead. */
  export const outboundSchema = GetAllPromptsOwner2$outboundSchema;
}

/** @internal */
export const DataOwner$inboundSchema: z.ZodType<
  DataOwner,
  z.ZodTypeDef,
  unknown
> = z.union([z.string(), GetAllPromptsOwner2$inboundSchema]);

/** @internal */
export type DataOwner$Outbound = string | string;

/** @internal */
export const DataOwner$outboundSchema: z.ZodType<
  DataOwner$Outbound,
  z.ZodTypeDef,
  DataOwner
> = z.union([z.string(), GetAllPromptsOwner2$outboundSchema]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DataOwner$ {
  /** @deprecated use `DataOwner$inboundSchema` instead. */
  export const inboundSchema = DataOwner$inboundSchema;
  /** @deprecated use `DataOwner$outboundSchema` instead. */
  export const outboundSchema = DataOwner$outboundSchema;
  /** @deprecated use `DataOwner$Outbound` instead. */
  export type Outbound = DataOwner$Outbound;
}

export function dataOwnerToJSON(dataOwner: DataOwner): string {
  return JSON.stringify(DataOwner$outboundSchema.parse(dataOwner));
}

export function dataOwnerFromJSON(
  jsonString: string,
): SafeParseResult<DataOwner, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DataOwner$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DataOwner' from JSON`,
  );
}

/** @internal */
export const DataModelType$inboundSchema: z.ZodNativeEnum<
  typeof DataModelType
> = z.nativeEnum(DataModelType);

/** @internal */
export const DataModelType$outboundSchema: z.ZodNativeEnum<
  typeof DataModelType
> = DataModelType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DataModelType$ {
  /** @deprecated use `DataModelType$inboundSchema` instead. */
  export const inboundSchema = DataModelType$inboundSchema;
  /** @deprecated use `DataModelType$outboundSchema` instead. */
  export const outboundSchema = DataModelType$outboundSchema;
}

/** @internal */
export const DataFormat$inboundSchema: z.ZodNativeEnum<typeof DataFormat> = z
  .nativeEnum(DataFormat);

/** @internal */
export const DataFormat$outboundSchema: z.ZodNativeEnum<typeof DataFormat> =
  DataFormat$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DataFormat$ {
  /** @deprecated use `DataFormat$inboundSchema` instead. */
  export const inboundSchema = DataFormat$inboundSchema;
  /** @deprecated use `DataFormat$outboundSchema` instead. */
  export const outboundSchema = DataFormat$outboundSchema;
}

/** @internal */
export const DataQuality$inboundSchema: z.ZodNativeEnum<typeof DataQuality> = z
  .nativeEnum(DataQuality);

/** @internal */
export const DataQuality$outboundSchema: z.ZodNativeEnum<typeof DataQuality> =
  DataQuality$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DataQuality$ {
  /** @deprecated use `DataQuality$inboundSchema` instead. */
  export const inboundSchema = DataQuality$inboundSchema;
  /** @deprecated use `DataQuality$outboundSchema` instead. */
  export const outboundSchema = DataQuality$outboundSchema;
}

/** @internal */
export const GetAllPromptsResponseFormatPromptsType$inboundSchema:
  z.ZodNativeEnum<typeof GetAllPromptsResponseFormatPromptsType> = z.nativeEnum(
    GetAllPromptsResponseFormatPromptsType,
  );

/** @internal */
export const GetAllPromptsResponseFormatPromptsType$outboundSchema:
  z.ZodNativeEnum<typeof GetAllPromptsResponseFormatPromptsType> =
    GetAllPromptsResponseFormatPromptsType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPromptsResponseFormatPromptsType$ {
  /** @deprecated use `GetAllPromptsResponseFormatPromptsType$inboundSchema` instead. */
  export const inboundSchema =
    GetAllPromptsResponseFormatPromptsType$inboundSchema;
  /** @deprecated use `GetAllPromptsResponseFormatPromptsType$outboundSchema` instead. */
  export const outboundSchema =
    GetAllPromptsResponseFormatPromptsType$outboundSchema;
}

/** @internal */
export const GetAllPromptsResponseFormat2$inboundSchema: z.ZodType<
  GetAllPromptsResponseFormat2,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: GetAllPromptsResponseFormatPromptsType$inboundSchema,
});

/** @internal */
export type GetAllPromptsResponseFormat2$Outbound = {
  type: string;
};

/** @internal */
export const GetAllPromptsResponseFormat2$outboundSchema: z.ZodType<
  GetAllPromptsResponseFormat2$Outbound,
  z.ZodTypeDef,
  GetAllPromptsResponseFormat2
> = z.object({
  type: GetAllPromptsResponseFormatPromptsType$outboundSchema,
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPromptsResponseFormat2$ {
  /** @deprecated use `GetAllPromptsResponseFormat2$inboundSchema` instead. */
  export const inboundSchema = GetAllPromptsResponseFormat2$inboundSchema;
  /** @deprecated use `GetAllPromptsResponseFormat2$outboundSchema` instead. */
  export const outboundSchema = GetAllPromptsResponseFormat2$outboundSchema;
  /** @deprecated use `GetAllPromptsResponseFormat2$Outbound` instead. */
  export type Outbound = GetAllPromptsResponseFormat2$Outbound;
}

export function getAllPromptsResponseFormat2ToJSON(
  getAllPromptsResponseFormat2: GetAllPromptsResponseFormat2,
): string {
  return JSON.stringify(
    GetAllPromptsResponseFormat2$outboundSchema.parse(
      getAllPromptsResponseFormat2,
    ),
  );
}

export function getAllPromptsResponseFormat2FromJSON(
  jsonString: string,
): SafeParseResult<GetAllPromptsResponseFormat2, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetAllPromptsResponseFormat2$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetAllPromptsResponseFormat2' from JSON`,
  );
}

/** @internal */
export const GetAllPromptsResponseFormatType$inboundSchema: z.ZodNativeEnum<
  typeof GetAllPromptsResponseFormatType
> = z.nativeEnum(GetAllPromptsResponseFormatType);

/** @internal */
export const GetAllPromptsResponseFormatType$outboundSchema: z.ZodNativeEnum<
  typeof GetAllPromptsResponseFormatType
> = GetAllPromptsResponseFormatType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPromptsResponseFormatType$ {
  /** @deprecated use `GetAllPromptsResponseFormatType$inboundSchema` instead. */
  export const inboundSchema = GetAllPromptsResponseFormatType$inboundSchema;
  /** @deprecated use `GetAllPromptsResponseFormatType$outboundSchema` instead. */
  export const outboundSchema = GetAllPromptsResponseFormatType$outboundSchema;
}

/** @internal */
export const GetAllPromptsResponseFormatJsonSchema$inboundSchema: z.ZodType<
  GetAllPromptsResponseFormatJsonSchema,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.string(),
  strict: z.boolean(),
  schema: z.record(z.any()),
});

/** @internal */
export type GetAllPromptsResponseFormatJsonSchema$Outbound = {
  name: string;
  strict: boolean;
  schema: { [k: string]: any };
};

/** @internal */
export const GetAllPromptsResponseFormatJsonSchema$outboundSchema: z.ZodType<
  GetAllPromptsResponseFormatJsonSchema$Outbound,
  z.ZodTypeDef,
  GetAllPromptsResponseFormatJsonSchema
> = z.object({
  name: z.string(),
  strict: z.boolean(),
  schema: z.record(z.any()),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPromptsResponseFormatJsonSchema$ {
  /** @deprecated use `GetAllPromptsResponseFormatJsonSchema$inboundSchema` instead. */
  export const inboundSchema =
    GetAllPromptsResponseFormatJsonSchema$inboundSchema;
  /** @deprecated use `GetAllPromptsResponseFormatJsonSchema$outboundSchema` instead. */
  export const outboundSchema =
    GetAllPromptsResponseFormatJsonSchema$outboundSchema;
  /** @deprecated use `GetAllPromptsResponseFormatJsonSchema$Outbound` instead. */
  export type Outbound = GetAllPromptsResponseFormatJsonSchema$Outbound;
}

export function getAllPromptsResponseFormatJsonSchemaToJSON(
  getAllPromptsResponseFormatJsonSchema: GetAllPromptsResponseFormatJsonSchema,
): string {
  return JSON.stringify(
    GetAllPromptsResponseFormatJsonSchema$outboundSchema.parse(
      getAllPromptsResponseFormatJsonSchema,
    ),
  );
}

export function getAllPromptsResponseFormatJsonSchemaFromJSON(
  jsonString: string,
): SafeParseResult<GetAllPromptsResponseFormatJsonSchema, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      GetAllPromptsResponseFormatJsonSchema$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetAllPromptsResponseFormatJsonSchema' from JSON`,
  );
}

/** @internal */
export const GetAllPromptsResponseFormat1$inboundSchema: z.ZodType<
  GetAllPromptsResponseFormat1,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: GetAllPromptsResponseFormatType$inboundSchema,
  json_schema: z.lazy(() =>
    GetAllPromptsResponseFormatJsonSchema$inboundSchema
  ),
}).transform((v) => {
  return remap$(v, {
    "json_schema": "jsonSchema",
  });
});

/** @internal */
export type GetAllPromptsResponseFormat1$Outbound = {
  type: string;
  json_schema: GetAllPromptsResponseFormatJsonSchema$Outbound;
};

/** @internal */
export const GetAllPromptsResponseFormat1$outboundSchema: z.ZodType<
  GetAllPromptsResponseFormat1$Outbound,
  z.ZodTypeDef,
  GetAllPromptsResponseFormat1
> = z.object({
  type: GetAllPromptsResponseFormatType$outboundSchema,
  jsonSchema: z.lazy(() =>
    GetAllPromptsResponseFormatJsonSchema$outboundSchema
  ),
}).transform((v) => {
  return remap$(v, {
    jsonSchema: "json_schema",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPromptsResponseFormat1$ {
  /** @deprecated use `GetAllPromptsResponseFormat1$inboundSchema` instead. */
  export const inboundSchema = GetAllPromptsResponseFormat1$inboundSchema;
  /** @deprecated use `GetAllPromptsResponseFormat1$outboundSchema` instead. */
  export const outboundSchema = GetAllPromptsResponseFormat1$outboundSchema;
  /** @deprecated use `GetAllPromptsResponseFormat1$Outbound` instead. */
  export type Outbound = GetAllPromptsResponseFormat1$Outbound;
}

export function getAllPromptsResponseFormat1ToJSON(
  getAllPromptsResponseFormat1: GetAllPromptsResponseFormat1,
): string {
  return JSON.stringify(
    GetAllPromptsResponseFormat1$outboundSchema.parse(
      getAllPromptsResponseFormat1,
    ),
  );
}

export function getAllPromptsResponseFormat1FromJSON(
  jsonString: string,
): SafeParseResult<GetAllPromptsResponseFormat1, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetAllPromptsResponseFormat1$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetAllPromptsResponseFormat1' from JSON`,
  );
}

/** @internal */
export const DataResponseFormat$inboundSchema: z.ZodType<
  DataResponseFormat,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => GetAllPromptsResponseFormat2$inboundSchema),
  z.lazy(() => GetAllPromptsResponseFormat1$inboundSchema),
]);

/** @internal */
export type DataResponseFormat$Outbound =
  | GetAllPromptsResponseFormat2$Outbound
  | GetAllPromptsResponseFormat1$Outbound;

/** @internal */
export const DataResponseFormat$outboundSchema: z.ZodType<
  DataResponseFormat$Outbound,
  z.ZodTypeDef,
  DataResponseFormat
> = z.union([
  z.lazy(() => GetAllPromptsResponseFormat2$outboundSchema),
  z.lazy(() => GetAllPromptsResponseFormat1$outboundSchema),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DataResponseFormat$ {
  /** @deprecated use `DataResponseFormat$inboundSchema` instead. */
  export const inboundSchema = DataResponseFormat$inboundSchema;
  /** @deprecated use `DataResponseFormat$outboundSchema` instead. */
  export const outboundSchema = DataResponseFormat$outboundSchema;
  /** @deprecated use `DataResponseFormat$Outbound` instead. */
  export type Outbound = DataResponseFormat$Outbound;
}

export function dataResponseFormatToJSON(
  dataResponseFormat: DataResponseFormat,
): string {
  return JSON.stringify(
    DataResponseFormat$outboundSchema.parse(dataResponseFormat),
  );
}

export function dataResponseFormatFromJSON(
  jsonString: string,
): SafeParseResult<DataResponseFormat, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DataResponseFormat$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DataResponseFormat' from JSON`,
  );
}

/** @internal */
export const DataPhotoRealVersion$inboundSchema: z.ZodNativeEnum<
  typeof DataPhotoRealVersion
> = z.nativeEnum(DataPhotoRealVersion);

/** @internal */
export const DataPhotoRealVersion$outboundSchema: z.ZodNativeEnum<
  typeof DataPhotoRealVersion
> = DataPhotoRealVersion$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DataPhotoRealVersion$ {
  /** @deprecated use `DataPhotoRealVersion$inboundSchema` instead. */
  export const inboundSchema = DataPhotoRealVersion$inboundSchema;
  /** @deprecated use `DataPhotoRealVersion$outboundSchema` instead. */
  export const outboundSchema = DataPhotoRealVersion$outboundSchema;
}

/** @internal */
export const DataEncodingFormat$inboundSchema: z.ZodNativeEnum<
  typeof DataEncodingFormat
> = z.nativeEnum(DataEncodingFormat);

/** @internal */
export const DataEncodingFormat$outboundSchema: z.ZodNativeEnum<
  typeof DataEncodingFormat
> = DataEncodingFormat$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DataEncodingFormat$ {
  /** @deprecated use `DataEncodingFormat$inboundSchema` instead. */
  export const inboundSchema = DataEncodingFormat$inboundSchema;
  /** @deprecated use `DataEncodingFormat$outboundSchema` instead. */
  export const outboundSchema = DataEncodingFormat$outboundSchema;
}

/** @internal */
export const DataModelParameters$inboundSchema: z.ZodType<
  DataModelParameters,
  z.ZodTypeDef,
  unknown
> = z.object({
  temperature: z.number().optional(),
  maxTokens: z.number().optional(),
  topK: z.number().optional(),
  topP: z.number().optional(),
  frequencyPenalty: z.number().optional(),
  presencePenalty: z.number().optional(),
  numImages: z.number().optional(),
  seed: z.number().optional(),
  format: DataFormat$inboundSchema.optional(),
  dimensions: z.string().optional(),
  quality: DataQuality$inboundSchema.optional(),
  style: z.string().optional(),
  responseFormat: z.nullable(
    z.union([
      z.lazy(() => GetAllPromptsResponseFormat2$inboundSchema),
      z.lazy(() => GetAllPromptsResponseFormat1$inboundSchema),
    ]),
  ).optional(),
  photoRealVersion: DataPhotoRealVersion$inboundSchema.optional(),
  encoding_format: DataEncodingFormat$inboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    "encoding_format": "encodingFormat",
  });
});

/** @internal */
export type DataModelParameters$Outbound = {
  temperature?: number | undefined;
  maxTokens?: number | undefined;
  topK?: number | undefined;
  topP?: number | undefined;
  frequencyPenalty?: number | undefined;
  presencePenalty?: number | undefined;
  numImages?: number | undefined;
  seed?: number | undefined;
  format?: string | undefined;
  dimensions?: string | undefined;
  quality?: string | undefined;
  style?: string | undefined;
  responseFormat?:
    | GetAllPromptsResponseFormat2$Outbound
    | GetAllPromptsResponseFormat1$Outbound
    | null
    | undefined;
  photoRealVersion?: string | undefined;
  encoding_format?: string | undefined;
};

/** @internal */
export const DataModelParameters$outboundSchema: z.ZodType<
  DataModelParameters$Outbound,
  z.ZodTypeDef,
  DataModelParameters
> = z.object({
  temperature: z.number().optional(),
  maxTokens: z.number().optional(),
  topK: z.number().optional(),
  topP: z.number().optional(),
  frequencyPenalty: z.number().optional(),
  presencePenalty: z.number().optional(),
  numImages: z.number().optional(),
  seed: z.number().optional(),
  format: DataFormat$outboundSchema.optional(),
  dimensions: z.string().optional(),
  quality: DataQuality$outboundSchema.optional(),
  style: z.string().optional(),
  responseFormat: z.nullable(
    z.union([
      z.lazy(() => GetAllPromptsResponseFormat2$outboundSchema),
      z.lazy(() => GetAllPromptsResponseFormat1$outboundSchema),
    ]),
  ).optional(),
  photoRealVersion: DataPhotoRealVersion$outboundSchema.optional(),
  encodingFormat: DataEncodingFormat$outboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    encodingFormat: "encoding_format",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DataModelParameters$ {
  /** @deprecated use `DataModelParameters$inboundSchema` instead. */
  export const inboundSchema = DataModelParameters$inboundSchema;
  /** @deprecated use `DataModelParameters$outboundSchema` instead. */
  export const outboundSchema = DataModelParameters$outboundSchema;
  /** @deprecated use `DataModelParameters$Outbound` instead. */
  export type Outbound = DataModelParameters$Outbound;
}

export function dataModelParametersToJSON(
  dataModelParameters: DataModelParameters,
): string {
  return JSON.stringify(
    DataModelParameters$outboundSchema.parse(dataModelParameters),
  );
}

export function dataModelParametersFromJSON(
  jsonString: string,
): SafeParseResult<DataModelParameters, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DataModelParameters$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DataModelParameters' from JSON`,
  );
}

/** @internal */
export const DataProvider$inboundSchema: z.ZodNativeEnum<typeof DataProvider> =
  z.nativeEnum(DataProvider);

/** @internal */
export const DataProvider$outboundSchema: z.ZodNativeEnum<typeof DataProvider> =
  DataProvider$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DataProvider$ {
  /** @deprecated use `DataProvider$inboundSchema` instead. */
  export const inboundSchema = DataProvider$inboundSchema;
  /** @deprecated use `DataProvider$outboundSchema` instead. */
  export const outboundSchema = DataProvider$outboundSchema;
}

/** @internal */
export const DataRole$inboundSchema: z.ZodNativeEnum<typeof DataRole> = z
  .nativeEnum(DataRole);

/** @internal */
export const DataRole$outboundSchema: z.ZodNativeEnum<typeof DataRole> =
  DataRole$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DataRole$ {
  /** @deprecated use `DataRole$inboundSchema` instead. */
  export const inboundSchema = DataRole$inboundSchema;
  /** @deprecated use `DataRole$outboundSchema` instead. */
  export const outboundSchema = DataRole$outboundSchema;
}

/** @internal */
export const GetAllPrompts2PromptsType$inboundSchema: z.ZodNativeEnum<
  typeof GetAllPrompts2PromptsType
> = z.nativeEnum(GetAllPrompts2PromptsType);

/** @internal */
export const GetAllPrompts2PromptsType$outboundSchema: z.ZodNativeEnum<
  typeof GetAllPrompts2PromptsType
> = GetAllPrompts2PromptsType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPrompts2PromptsType$ {
  /** @deprecated use `GetAllPrompts2PromptsType$inboundSchema` instead. */
  export const inboundSchema = GetAllPrompts2PromptsType$inboundSchema;
  /** @deprecated use `GetAllPrompts2PromptsType$outboundSchema` instead. */
  export const outboundSchema = GetAllPrompts2PromptsType$outboundSchema;
}

/** @internal */
export const GetAllPrompts2ImageUrl$inboundSchema: z.ZodType<
  GetAllPrompts2ImageUrl,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string().optional(),
  url: z.string(),
  detail: z.string().optional(),
});

/** @internal */
export type GetAllPrompts2ImageUrl$Outbound = {
  id?: string | undefined;
  url: string;
  detail?: string | undefined;
};

/** @internal */
export const GetAllPrompts2ImageUrl$outboundSchema: z.ZodType<
  GetAllPrompts2ImageUrl$Outbound,
  z.ZodTypeDef,
  GetAllPrompts2ImageUrl
> = z.object({
  id: z.string().optional(),
  url: z.string(),
  detail: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPrompts2ImageUrl$ {
  /** @deprecated use `GetAllPrompts2ImageUrl$inboundSchema` instead. */
  export const inboundSchema = GetAllPrompts2ImageUrl$inboundSchema;
  /** @deprecated use `GetAllPrompts2ImageUrl$outboundSchema` instead. */
  export const outboundSchema = GetAllPrompts2ImageUrl$outboundSchema;
  /** @deprecated use `GetAllPrompts2ImageUrl$Outbound` instead. */
  export type Outbound = GetAllPrompts2ImageUrl$Outbound;
}

export function getAllPrompts2ImageUrlToJSON(
  getAllPrompts2ImageUrl: GetAllPrompts2ImageUrl,
): string {
  return JSON.stringify(
    GetAllPrompts2ImageUrl$outboundSchema.parse(getAllPrompts2ImageUrl),
  );
}

export function getAllPrompts2ImageUrlFromJSON(
  jsonString: string,
): SafeParseResult<GetAllPrompts2ImageUrl, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetAllPrompts2ImageUrl$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetAllPrompts2ImageUrl' from JSON`,
  );
}

/** @internal */
export const GetAllPrompts22$inboundSchema: z.ZodType<
  GetAllPrompts22,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: GetAllPrompts2PromptsType$inboundSchema,
  image_url: z.lazy(() => GetAllPrompts2ImageUrl$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "image_url": "imageUrl",
  });
});

/** @internal */
export type GetAllPrompts22$Outbound = {
  type: string;
  image_url: GetAllPrompts2ImageUrl$Outbound;
};

/** @internal */
export const GetAllPrompts22$outboundSchema: z.ZodType<
  GetAllPrompts22$Outbound,
  z.ZodTypeDef,
  GetAllPrompts22
> = z.object({
  type: GetAllPrompts2PromptsType$outboundSchema,
  imageUrl: z.lazy(() => GetAllPrompts2ImageUrl$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    imageUrl: "image_url",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPrompts22$ {
  /** @deprecated use `GetAllPrompts22$inboundSchema` instead. */
  export const inboundSchema = GetAllPrompts22$inboundSchema;
  /** @deprecated use `GetAllPrompts22$outboundSchema` instead. */
  export const outboundSchema = GetAllPrompts22$outboundSchema;
  /** @deprecated use `GetAllPrompts22$Outbound` instead. */
  export type Outbound = GetAllPrompts22$Outbound;
}

export function getAllPrompts22ToJSON(
  getAllPrompts22: GetAllPrompts22,
): string {
  return JSON.stringify(GetAllPrompts22$outboundSchema.parse(getAllPrompts22));
}

export function getAllPrompts22FromJSON(
  jsonString: string,
): SafeParseResult<GetAllPrompts22, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetAllPrompts22$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetAllPrompts22' from JSON`,
  );
}

/** @internal */
export const GetAllPrompts2Type$inboundSchema: z.ZodNativeEnum<
  typeof GetAllPrompts2Type
> = z.nativeEnum(GetAllPrompts2Type);

/** @internal */
export const GetAllPrompts2Type$outboundSchema: z.ZodNativeEnum<
  typeof GetAllPrompts2Type
> = GetAllPrompts2Type$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPrompts2Type$ {
  /** @deprecated use `GetAllPrompts2Type$inboundSchema` instead. */
  export const inboundSchema = GetAllPrompts2Type$inboundSchema;
  /** @deprecated use `GetAllPrompts2Type$outboundSchema` instead. */
  export const outboundSchema = GetAllPrompts2Type$outboundSchema;
}

/** @internal */
export const GetAllPrompts21$inboundSchema: z.ZodType<
  GetAllPrompts21,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: GetAllPrompts2Type$inboundSchema,
  text: z.string(),
});

/** @internal */
export type GetAllPrompts21$Outbound = {
  type: string;
  text: string;
};

/** @internal */
export const GetAllPrompts21$outboundSchema: z.ZodType<
  GetAllPrompts21$Outbound,
  z.ZodTypeDef,
  GetAllPrompts21
> = z.object({
  type: GetAllPrompts2Type$outboundSchema,
  text: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPrompts21$ {
  /** @deprecated use `GetAllPrompts21$inboundSchema` instead. */
  export const inboundSchema = GetAllPrompts21$inboundSchema;
  /** @deprecated use `GetAllPrompts21$outboundSchema` instead. */
  export const outboundSchema = GetAllPrompts21$outboundSchema;
  /** @deprecated use `GetAllPrompts21$Outbound` instead. */
  export type Outbound = GetAllPrompts21$Outbound;
}

export function getAllPrompts21ToJSON(
  getAllPrompts21: GetAllPrompts21,
): string {
  return JSON.stringify(GetAllPrompts21$outboundSchema.parse(getAllPrompts21));
}

export function getAllPrompts21FromJSON(
  jsonString: string,
): SafeParseResult<GetAllPrompts21, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetAllPrompts21$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetAllPrompts21' from JSON`,
  );
}

/** @internal */
export const GetAllPromptsContent2$inboundSchema: z.ZodType<
  GetAllPromptsContent2,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => GetAllPrompts21$inboundSchema),
  z.lazy(() => GetAllPrompts22$inboundSchema),
]);

/** @internal */
export type GetAllPromptsContent2$Outbound =
  | GetAllPrompts21$Outbound
  | GetAllPrompts22$Outbound;

/** @internal */
export const GetAllPromptsContent2$outboundSchema: z.ZodType<
  GetAllPromptsContent2$Outbound,
  z.ZodTypeDef,
  GetAllPromptsContent2
> = z.union([
  z.lazy(() => GetAllPrompts21$outboundSchema),
  z.lazy(() => GetAllPrompts22$outboundSchema),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPromptsContent2$ {
  /** @deprecated use `GetAllPromptsContent2$inboundSchema` instead. */
  export const inboundSchema = GetAllPromptsContent2$inboundSchema;
  /** @deprecated use `GetAllPromptsContent2$outboundSchema` instead. */
  export const outboundSchema = GetAllPromptsContent2$outboundSchema;
  /** @deprecated use `GetAllPromptsContent2$Outbound` instead. */
  export type Outbound = GetAllPromptsContent2$Outbound;
}

export function getAllPromptsContent2ToJSON(
  getAllPromptsContent2: GetAllPromptsContent2,
): string {
  return JSON.stringify(
    GetAllPromptsContent2$outboundSchema.parse(getAllPromptsContent2),
  );
}

export function getAllPromptsContent2FromJSON(
  jsonString: string,
): SafeParseResult<GetAllPromptsContent2, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetAllPromptsContent2$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetAllPromptsContent2' from JSON`,
  );
}

/** @internal */
export const DataContent$inboundSchema: z.ZodType<
  DataContent,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.string(),
  z.array(z.union([
    z.lazy(() => GetAllPrompts21$inboundSchema),
    z.lazy(() => GetAllPrompts22$inboundSchema),
  ])),
]);

/** @internal */
export type DataContent$Outbound =
  | string
  | Array<GetAllPrompts21$Outbound | GetAllPrompts22$Outbound>;

/** @internal */
export const DataContent$outboundSchema: z.ZodType<
  DataContent$Outbound,
  z.ZodTypeDef,
  DataContent
> = z.union([
  z.string(),
  z.array(z.union([
    z.lazy(() => GetAllPrompts21$outboundSchema),
    z.lazy(() => GetAllPrompts22$outboundSchema),
  ])),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DataContent$ {
  /** @deprecated use `DataContent$inboundSchema` instead. */
  export const inboundSchema = DataContent$inboundSchema;
  /** @deprecated use `DataContent$outboundSchema` instead. */
  export const outboundSchema = DataContent$outboundSchema;
  /** @deprecated use `DataContent$Outbound` instead. */
  export type Outbound = DataContent$Outbound;
}

export function dataContentToJSON(dataContent: DataContent): string {
  return JSON.stringify(DataContent$outboundSchema.parse(dataContent));
}

export function dataContentFromJSON(
  jsonString: string,
): SafeParseResult<DataContent, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DataContent$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DataContent' from JSON`,
  );
}

/** @internal */
export const GetAllPromptsDataPromptsResponseType$inboundSchema:
  z.ZodNativeEnum<typeof GetAllPromptsDataPromptsResponseType> = z.nativeEnum(
    GetAllPromptsDataPromptsResponseType,
  );

/** @internal */
export const GetAllPromptsDataPromptsResponseType$outboundSchema:
  z.ZodNativeEnum<typeof GetAllPromptsDataPromptsResponseType> =
    GetAllPromptsDataPromptsResponseType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPromptsDataPromptsResponseType$ {
  /** @deprecated use `GetAllPromptsDataPromptsResponseType$inboundSchema` instead. */
  export const inboundSchema =
    GetAllPromptsDataPromptsResponseType$inboundSchema;
  /** @deprecated use `GetAllPromptsDataPromptsResponseType$outboundSchema` instead. */
  export const outboundSchema =
    GetAllPromptsDataPromptsResponseType$outboundSchema;
}

/** @internal */
export const GetAllPromptsDataFunction$inboundSchema: z.ZodType<
  GetAllPromptsDataFunction,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.string(),
  arguments: z.string(),
});

/** @internal */
export type GetAllPromptsDataFunction$Outbound = {
  name: string;
  arguments: string;
};

/** @internal */
export const GetAllPromptsDataFunction$outboundSchema: z.ZodType<
  GetAllPromptsDataFunction$Outbound,
  z.ZodTypeDef,
  GetAllPromptsDataFunction
> = z.object({
  name: z.string(),
  arguments: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPromptsDataFunction$ {
  /** @deprecated use `GetAllPromptsDataFunction$inboundSchema` instead. */
  export const inboundSchema = GetAllPromptsDataFunction$inboundSchema;
  /** @deprecated use `GetAllPromptsDataFunction$outboundSchema` instead. */
  export const outboundSchema = GetAllPromptsDataFunction$outboundSchema;
  /** @deprecated use `GetAllPromptsDataFunction$Outbound` instead. */
  export type Outbound = GetAllPromptsDataFunction$Outbound;
}

export function getAllPromptsDataFunctionToJSON(
  getAllPromptsDataFunction: GetAllPromptsDataFunction,
): string {
  return JSON.stringify(
    GetAllPromptsDataFunction$outboundSchema.parse(getAllPromptsDataFunction),
  );
}

export function getAllPromptsDataFunctionFromJSON(
  jsonString: string,
): SafeParseResult<GetAllPromptsDataFunction, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetAllPromptsDataFunction$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetAllPromptsDataFunction' from JSON`,
  );
}

/** @internal */
export const DataToolCalls$inboundSchema: z.ZodType<
  DataToolCalls,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string().optional(),
  index: z.number().optional(),
  type: GetAllPromptsDataPromptsResponseType$inboundSchema,
  function: z.lazy(() => GetAllPromptsDataFunction$inboundSchema),
});

/** @internal */
export type DataToolCalls$Outbound = {
  id?: string | undefined;
  index?: number | undefined;
  type: string;
  function: GetAllPromptsDataFunction$Outbound;
};

/** @internal */
export const DataToolCalls$outboundSchema: z.ZodType<
  DataToolCalls$Outbound,
  z.ZodTypeDef,
  DataToolCalls
> = z.object({
  id: z.string().optional(),
  index: z.number().optional(),
  type: GetAllPromptsDataPromptsResponseType$outboundSchema,
  function: z.lazy(() => GetAllPromptsDataFunction$outboundSchema),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DataToolCalls$ {
  /** @deprecated use `DataToolCalls$inboundSchema` instead. */
  export const inboundSchema = DataToolCalls$inboundSchema;
  /** @deprecated use `DataToolCalls$outboundSchema` instead. */
  export const outboundSchema = DataToolCalls$outboundSchema;
  /** @deprecated use `DataToolCalls$Outbound` instead. */
  export type Outbound = DataToolCalls$Outbound;
}

export function dataToolCallsToJSON(dataToolCalls: DataToolCalls): string {
  return JSON.stringify(DataToolCalls$outboundSchema.parse(dataToolCalls));
}

export function dataToolCallsFromJSON(
  jsonString: string,
): SafeParseResult<DataToolCalls, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DataToolCalls$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DataToolCalls' from JSON`,
  );
}

/** @internal */
export const DataMessages$inboundSchema: z.ZodType<
  DataMessages,
  z.ZodTypeDef,
  unknown
> = z.object({
  role: DataRole$inboundSchema,
  content: z.union([
    z.string(),
    z.array(z.union([
      z.lazy(() => GetAllPrompts21$inboundSchema),
      z.lazy(() => GetAllPrompts22$inboundSchema),
    ])),
  ]),
  tool_calls: z.array(z.lazy(() => DataToolCalls$inboundSchema)).optional(),
}).transform((v) => {
  return remap$(v, {
    "tool_calls": "toolCalls",
  });
});

/** @internal */
export type DataMessages$Outbound = {
  role: string;
  content: string | Array<GetAllPrompts21$Outbound | GetAllPrompts22$Outbound>;
  tool_calls?: Array<DataToolCalls$Outbound> | undefined;
};

/** @internal */
export const DataMessages$outboundSchema: z.ZodType<
  DataMessages$Outbound,
  z.ZodTypeDef,
  DataMessages
> = z.object({
  role: DataRole$outboundSchema,
  content: z.union([
    z.string(),
    z.array(z.union([
      z.lazy(() => GetAllPrompts21$outboundSchema),
      z.lazy(() => GetAllPrompts22$outboundSchema),
    ])),
  ]),
  toolCalls: z.array(z.lazy(() => DataToolCalls$outboundSchema)).optional(),
}).transform((v) => {
  return remap$(v, {
    toolCalls: "tool_calls",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DataMessages$ {
  /** @deprecated use `DataMessages$inboundSchema` instead. */
  export const inboundSchema = DataMessages$inboundSchema;
  /** @deprecated use `DataMessages$outboundSchema` instead. */
  export const outboundSchema = DataMessages$outboundSchema;
  /** @deprecated use `DataMessages$Outbound` instead. */
  export type Outbound = DataMessages$Outbound;
}

export function dataMessagesToJSON(dataMessages: DataMessages): string {
  return JSON.stringify(DataMessages$outboundSchema.parse(dataMessages));
}

export function dataMessagesFromJSON(
  jsonString: string,
): SafeParseResult<DataMessages, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DataMessages$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DataMessages' from JSON`,
  );
}

/** @internal */
export const DataPromptConfig$inboundSchema: z.ZodType<
  DataPromptConfig,
  z.ZodTypeDef,
  unknown
> = z.object({
  stream: z.boolean().optional(),
  model: z.string().optional(),
  model_db_id: z.string().optional(),
  model_type: DataModelType$inboundSchema.optional(),
  model_parameters: z.lazy(() => DataModelParameters$inboundSchema).optional(),
  provider: DataProvider$inboundSchema.optional(),
  integration_id: z.nullable(z.string()).optional(),
  version: z.string().optional(),
  messages: z.array(z.lazy(() => DataMessages$inboundSchema)),
}).transform((v) => {
  return remap$(v, {
    "model_db_id": "modelDbId",
    "model_type": "modelType",
    "model_parameters": "modelParameters",
    "integration_id": "integrationId",
  });
});

/** @internal */
export type DataPromptConfig$Outbound = {
  stream?: boolean | undefined;
  model?: string | undefined;
  model_db_id?: string | undefined;
  model_type?: string | undefined;
  model_parameters?: DataModelParameters$Outbound | undefined;
  provider?: string | undefined;
  integration_id?: string | null | undefined;
  version?: string | undefined;
  messages: Array<DataMessages$Outbound>;
};

/** @internal */
export const DataPromptConfig$outboundSchema: z.ZodType<
  DataPromptConfig$Outbound,
  z.ZodTypeDef,
  DataPromptConfig
> = z.object({
  stream: z.boolean().optional(),
  model: z.string().optional(),
  modelDbId: z.string().optional(),
  modelType: DataModelType$outboundSchema.optional(),
  modelParameters: z.lazy(() => DataModelParameters$outboundSchema).optional(),
  provider: DataProvider$outboundSchema.optional(),
  integrationId: z.nullable(z.string()).optional(),
  version: z.string().optional(),
  messages: z.array(z.lazy(() => DataMessages$outboundSchema)),
}).transform((v) => {
  return remap$(v, {
    modelDbId: "model_db_id",
    modelType: "model_type",
    modelParameters: "model_parameters",
    integrationId: "integration_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DataPromptConfig$ {
  /** @deprecated use `DataPromptConfig$inboundSchema` instead. */
  export const inboundSchema = DataPromptConfig$inboundSchema;
  /** @deprecated use `DataPromptConfig$outboundSchema` instead. */
  export const outboundSchema = DataPromptConfig$outboundSchema;
  /** @deprecated use `DataPromptConfig$Outbound` instead. */
  export type Outbound = DataPromptConfig$Outbound;
}

export function dataPromptConfigToJSON(
  dataPromptConfig: DataPromptConfig,
): string {
  return JSON.stringify(
    DataPromptConfig$outboundSchema.parse(dataPromptConfig),
  );
}

export function dataPromptConfigFromJSON(
  jsonString: string,
): SafeParseResult<DataPromptConfig, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DataPromptConfig$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DataPromptConfig' from JSON`,
  );
}

/** @internal */
export const DataMetadata$inboundSchema: z.ZodType<
  DataMetadata,
  z.ZodTypeDef,
  unknown
> = z.object({
  use_cases: z.array(z.string()).optional(),
  language: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "use_cases": "useCases",
  });
});

/** @internal */
export type DataMetadata$Outbound = {
  use_cases?: Array<string> | undefined;
  language?: string | undefined;
};

/** @internal */
export const DataMetadata$outboundSchema: z.ZodType<
  DataMetadata$Outbound,
  z.ZodTypeDef,
  DataMetadata
> = z.object({
  useCases: z.array(z.string()).optional(),
  language: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    useCases: "use_cases",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DataMetadata$ {
  /** @deprecated use `DataMetadata$inboundSchema` instead. */
  export const inboundSchema = DataMetadata$inboundSchema;
  /** @deprecated use `DataMetadata$outboundSchema` instead. */
  export const outboundSchema = DataMetadata$outboundSchema;
  /** @deprecated use `DataMetadata$Outbound` instead. */
  export type Outbound = DataMetadata$Outbound;
}

export function dataMetadataToJSON(dataMetadata: DataMetadata): string {
  return JSON.stringify(DataMetadata$outboundSchema.parse(dataMetadata));
}

export function dataMetadataFromJSON(
  jsonString: string,
): SafeParseResult<DataMetadata, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DataMetadata$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DataMetadata' from JSON`,
  );
}

/** @internal */
export const GetAllPromptsDataPromptsResponse200ModelType$inboundSchema:
  z.ZodNativeEnum<typeof GetAllPromptsDataPromptsResponse200ModelType> = z
    .nativeEnum(GetAllPromptsDataPromptsResponse200ModelType);

/** @internal */
export const GetAllPromptsDataPromptsResponse200ModelType$outboundSchema:
  z.ZodNativeEnum<typeof GetAllPromptsDataPromptsResponse200ModelType> =
    GetAllPromptsDataPromptsResponse200ModelType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPromptsDataPromptsResponse200ModelType$ {
  /** @deprecated use `GetAllPromptsDataPromptsResponse200ModelType$inboundSchema` instead. */
  export const inboundSchema =
    GetAllPromptsDataPromptsResponse200ModelType$inboundSchema;
  /** @deprecated use `GetAllPromptsDataPromptsResponse200ModelType$outboundSchema` instead. */
  export const outboundSchema =
    GetAllPromptsDataPromptsResponse200ModelType$outboundSchema;
}

/** @internal */
export const GetAllPromptsDataPromptsResponse200ApplicationJSONFormat$inboundSchema:
  z.ZodNativeEnum<
    typeof GetAllPromptsDataPromptsResponse200ApplicationJSONFormat
  > = z.nativeEnum(GetAllPromptsDataPromptsResponse200ApplicationJSONFormat);

/** @internal */
export const GetAllPromptsDataPromptsResponse200ApplicationJSONFormat$outboundSchema:
  z.ZodNativeEnum<
    typeof GetAllPromptsDataPromptsResponse200ApplicationJSONFormat
  > = GetAllPromptsDataPromptsResponse200ApplicationJSONFormat$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPromptsDataPromptsResponse200ApplicationJSONFormat$ {
  /** @deprecated use `GetAllPromptsDataPromptsResponse200ApplicationJSONFormat$inboundSchema` instead. */
  export const inboundSchema =
    GetAllPromptsDataPromptsResponse200ApplicationJSONFormat$inboundSchema;
  /** @deprecated use `GetAllPromptsDataPromptsResponse200ApplicationJSONFormat$outboundSchema` instead. */
  export const outboundSchema =
    GetAllPromptsDataPromptsResponse200ApplicationJSONFormat$outboundSchema;
}

/** @internal */
export const GetAllPromptsDataPromptsResponse200Quality$inboundSchema:
  z.ZodNativeEnum<typeof GetAllPromptsDataPromptsResponse200Quality> = z
    .nativeEnum(GetAllPromptsDataPromptsResponse200Quality);

/** @internal */
export const GetAllPromptsDataPromptsResponse200Quality$outboundSchema:
  z.ZodNativeEnum<typeof GetAllPromptsDataPromptsResponse200Quality> =
    GetAllPromptsDataPromptsResponse200Quality$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPromptsDataPromptsResponse200Quality$ {
  /** @deprecated use `GetAllPromptsDataPromptsResponse200Quality$inboundSchema` instead. */
  export const inboundSchema =
    GetAllPromptsDataPromptsResponse200Quality$inboundSchema;
  /** @deprecated use `GetAllPromptsDataPromptsResponse200Quality$outboundSchema` instead. */
  export const outboundSchema =
    GetAllPromptsDataPromptsResponse200Quality$outboundSchema;
}

/** @internal */
export const GetAllPromptsResponseFormatPromptsResponse200ApplicationJSONResponseBodyData1VersionsType$inboundSchema:
  z.ZodNativeEnum<
    typeof GetAllPromptsResponseFormatPromptsResponse200ApplicationJSONResponseBodyData1VersionsType
  > = z.nativeEnum(
    GetAllPromptsResponseFormatPromptsResponse200ApplicationJSONResponseBodyData1VersionsType,
  );

/** @internal */
export const GetAllPromptsResponseFormatPromptsResponse200ApplicationJSONResponseBodyData1VersionsType$outboundSchema:
  z.ZodNativeEnum<
    typeof GetAllPromptsResponseFormatPromptsResponse200ApplicationJSONResponseBodyData1VersionsType
  > =
    GetAllPromptsResponseFormatPromptsResponse200ApplicationJSONResponseBodyData1VersionsType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPromptsResponseFormatPromptsResponse200ApplicationJSONResponseBodyData1VersionsType$ {
  /** @deprecated use `GetAllPromptsResponseFormatPromptsResponse200ApplicationJSONResponseBodyData1VersionsType$inboundSchema` instead. */
  export const inboundSchema =
    GetAllPromptsResponseFormatPromptsResponse200ApplicationJSONResponseBodyData1VersionsType$inboundSchema;
  /** @deprecated use `GetAllPromptsResponseFormatPromptsResponse200ApplicationJSONResponseBodyData1VersionsType$outboundSchema` instead. */
  export const outboundSchema =
    GetAllPromptsResponseFormatPromptsResponse200ApplicationJSONResponseBodyData1VersionsType$outboundSchema;
}

/** @internal */
export const GetAllPromptsResponseFormatPromptsResponse200ApplicationJson2$inboundSchema:
  z.ZodType<
    GetAllPromptsResponseFormatPromptsResponse200ApplicationJson2,
    z.ZodTypeDef,
    unknown
  > = z.object({
    type:
      GetAllPromptsResponseFormatPromptsResponse200ApplicationJSONResponseBodyData1VersionsType$inboundSchema,
  });

/** @internal */
export type GetAllPromptsResponseFormatPromptsResponse200ApplicationJson2$Outbound =
  {
    type: string;
  };

/** @internal */
export const GetAllPromptsResponseFormatPromptsResponse200ApplicationJson2$outboundSchema:
  z.ZodType<
    GetAllPromptsResponseFormatPromptsResponse200ApplicationJson2$Outbound,
    z.ZodTypeDef,
    GetAllPromptsResponseFormatPromptsResponse200ApplicationJson2
  > = z.object({
    type:
      GetAllPromptsResponseFormatPromptsResponse200ApplicationJSONResponseBodyData1VersionsType$outboundSchema,
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPromptsResponseFormatPromptsResponse200ApplicationJson2$ {
  /** @deprecated use `GetAllPromptsResponseFormatPromptsResponse200ApplicationJson2$inboundSchema` instead. */
  export const inboundSchema =
    GetAllPromptsResponseFormatPromptsResponse200ApplicationJson2$inboundSchema;
  /** @deprecated use `GetAllPromptsResponseFormatPromptsResponse200ApplicationJson2$outboundSchema` instead. */
  export const outboundSchema =
    GetAllPromptsResponseFormatPromptsResponse200ApplicationJson2$outboundSchema;
  /** @deprecated use `GetAllPromptsResponseFormatPromptsResponse200ApplicationJson2$Outbound` instead. */
  export type Outbound =
    GetAllPromptsResponseFormatPromptsResponse200ApplicationJson2$Outbound;
}

export function getAllPromptsResponseFormatPromptsResponse200ApplicationJSON2ToJSON(
  getAllPromptsResponseFormatPromptsResponse200ApplicationJson2:
    GetAllPromptsResponseFormatPromptsResponse200ApplicationJson2,
): string {
  return JSON.stringify(
    GetAllPromptsResponseFormatPromptsResponse200ApplicationJson2$outboundSchema
      .parse(getAllPromptsResponseFormatPromptsResponse200ApplicationJson2),
  );
}

export function getAllPromptsResponseFormatPromptsResponse200ApplicationJSON2FromJSON(
  jsonString: string,
): SafeParseResult<
  GetAllPromptsResponseFormatPromptsResponse200ApplicationJson2,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetAllPromptsResponseFormatPromptsResponse200ApplicationJson2$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'GetAllPromptsResponseFormatPromptsResponse200ApplicationJson2' from JSON`,
  );
}

/** @internal */
export const GetAllPromptsResponseFormatPromptsResponse200ApplicationJSONResponseBodyData1Type$inboundSchema:
  z.ZodNativeEnum<
    typeof GetAllPromptsResponseFormatPromptsResponse200ApplicationJSONResponseBodyData1Type
  > = z.nativeEnum(
    GetAllPromptsResponseFormatPromptsResponse200ApplicationJSONResponseBodyData1Type,
  );

/** @internal */
export const GetAllPromptsResponseFormatPromptsResponse200ApplicationJSONResponseBodyData1Type$outboundSchema:
  z.ZodNativeEnum<
    typeof GetAllPromptsResponseFormatPromptsResponse200ApplicationJSONResponseBodyData1Type
  > =
    GetAllPromptsResponseFormatPromptsResponse200ApplicationJSONResponseBodyData1Type$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPromptsResponseFormatPromptsResponse200ApplicationJSONResponseBodyData1Type$ {
  /** @deprecated use `GetAllPromptsResponseFormatPromptsResponse200ApplicationJSONResponseBodyData1Type$inboundSchema` instead. */
  export const inboundSchema =
    GetAllPromptsResponseFormatPromptsResponse200ApplicationJSONResponseBodyData1Type$inboundSchema;
  /** @deprecated use `GetAllPromptsResponseFormatPromptsResponse200ApplicationJSONResponseBodyData1Type$outboundSchema` instead. */
  export const outboundSchema =
    GetAllPromptsResponseFormatPromptsResponse200ApplicationJSONResponseBodyData1Type$outboundSchema;
}

/** @internal */
export const GetAllPromptsResponseFormatPromptsResponse200ApplicationJSONJSONSchema$inboundSchema:
  z.ZodType<
    GetAllPromptsResponseFormatPromptsResponse200ApplicationJSONJSONSchema,
    z.ZodTypeDef,
    unknown
  > = z.object({
    name: z.string(),
    strict: z.boolean(),
    schema: z.record(z.any()),
  });

/** @internal */
export type GetAllPromptsResponseFormatPromptsResponse200ApplicationJSONJSONSchema$Outbound =
  {
    name: string;
    strict: boolean;
    schema: { [k: string]: any };
  };

/** @internal */
export const GetAllPromptsResponseFormatPromptsResponse200ApplicationJSONJSONSchema$outboundSchema:
  z.ZodType<
    GetAllPromptsResponseFormatPromptsResponse200ApplicationJSONJSONSchema$Outbound,
    z.ZodTypeDef,
    GetAllPromptsResponseFormatPromptsResponse200ApplicationJSONJSONSchema
  > = z.object({
    name: z.string(),
    strict: z.boolean(),
    schema: z.record(z.any()),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPromptsResponseFormatPromptsResponse200ApplicationJSONJSONSchema$ {
  /** @deprecated use `GetAllPromptsResponseFormatPromptsResponse200ApplicationJSONJSONSchema$inboundSchema` instead. */
  export const inboundSchema =
    GetAllPromptsResponseFormatPromptsResponse200ApplicationJSONJSONSchema$inboundSchema;
  /** @deprecated use `GetAllPromptsResponseFormatPromptsResponse200ApplicationJSONJSONSchema$outboundSchema` instead. */
  export const outboundSchema =
    GetAllPromptsResponseFormatPromptsResponse200ApplicationJSONJSONSchema$outboundSchema;
  /** @deprecated use `GetAllPromptsResponseFormatPromptsResponse200ApplicationJSONJSONSchema$Outbound` instead. */
  export type Outbound =
    GetAllPromptsResponseFormatPromptsResponse200ApplicationJSONJSONSchema$Outbound;
}

export function getAllPromptsResponseFormatPromptsResponse200ApplicationJSONJSONSchemaToJSON(
  getAllPromptsResponseFormatPromptsResponse200ApplicationJSONJSONSchema:
    GetAllPromptsResponseFormatPromptsResponse200ApplicationJSONJSONSchema,
): string {
  return JSON.stringify(
    GetAllPromptsResponseFormatPromptsResponse200ApplicationJSONJSONSchema$outboundSchema
      .parse(
        getAllPromptsResponseFormatPromptsResponse200ApplicationJSONJSONSchema,
      ),
  );
}

export function getAllPromptsResponseFormatPromptsResponse200ApplicationJSONJSONSchemaFromJSON(
  jsonString: string,
): SafeParseResult<
  GetAllPromptsResponseFormatPromptsResponse200ApplicationJSONJSONSchema,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetAllPromptsResponseFormatPromptsResponse200ApplicationJSONJSONSchema$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'GetAllPromptsResponseFormatPromptsResponse200ApplicationJSONJSONSchema' from JSON`,
  );
}

/** @internal */
export const GetAllPromptsResponseFormatPromptsResponse200ApplicationJson1$inboundSchema:
  z.ZodType<
    GetAllPromptsResponseFormatPromptsResponse200ApplicationJson1,
    z.ZodTypeDef,
    unknown
  > = z.object({
    type:
      GetAllPromptsResponseFormatPromptsResponse200ApplicationJSONResponseBodyData1Type$inboundSchema,
    json_schema: z.lazy(() =>
      GetAllPromptsResponseFormatPromptsResponse200ApplicationJSONJSONSchema$inboundSchema
    ),
  }).transform((v) => {
    return remap$(v, {
      "json_schema": "jsonSchema",
    });
  });

/** @internal */
export type GetAllPromptsResponseFormatPromptsResponse200ApplicationJson1$Outbound =
  {
    type: string;
    json_schema:
      GetAllPromptsResponseFormatPromptsResponse200ApplicationJSONJSONSchema$Outbound;
  };

/** @internal */
export const GetAllPromptsResponseFormatPromptsResponse200ApplicationJson1$outboundSchema:
  z.ZodType<
    GetAllPromptsResponseFormatPromptsResponse200ApplicationJson1$Outbound,
    z.ZodTypeDef,
    GetAllPromptsResponseFormatPromptsResponse200ApplicationJson1
  > = z.object({
    type:
      GetAllPromptsResponseFormatPromptsResponse200ApplicationJSONResponseBodyData1Type$outboundSchema,
    jsonSchema: z.lazy(() =>
      GetAllPromptsResponseFormatPromptsResponse200ApplicationJSONJSONSchema$outboundSchema
    ),
  }).transform((v) => {
    return remap$(v, {
      jsonSchema: "json_schema",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPromptsResponseFormatPromptsResponse200ApplicationJson1$ {
  /** @deprecated use `GetAllPromptsResponseFormatPromptsResponse200ApplicationJson1$inboundSchema` instead. */
  export const inboundSchema =
    GetAllPromptsResponseFormatPromptsResponse200ApplicationJson1$inboundSchema;
  /** @deprecated use `GetAllPromptsResponseFormatPromptsResponse200ApplicationJson1$outboundSchema` instead. */
  export const outboundSchema =
    GetAllPromptsResponseFormatPromptsResponse200ApplicationJson1$outboundSchema;
  /** @deprecated use `GetAllPromptsResponseFormatPromptsResponse200ApplicationJson1$Outbound` instead. */
  export type Outbound =
    GetAllPromptsResponseFormatPromptsResponse200ApplicationJson1$Outbound;
}

export function getAllPromptsResponseFormatPromptsResponse200ApplicationJSON1ToJSON(
  getAllPromptsResponseFormatPromptsResponse200ApplicationJson1:
    GetAllPromptsResponseFormatPromptsResponse200ApplicationJson1,
): string {
  return JSON.stringify(
    GetAllPromptsResponseFormatPromptsResponse200ApplicationJson1$outboundSchema
      .parse(getAllPromptsResponseFormatPromptsResponse200ApplicationJson1),
  );
}

export function getAllPromptsResponseFormatPromptsResponse200ApplicationJSON1FromJSON(
  jsonString: string,
): SafeParseResult<
  GetAllPromptsResponseFormatPromptsResponse200ApplicationJson1,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetAllPromptsResponseFormatPromptsResponse200ApplicationJson1$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'GetAllPromptsResponseFormatPromptsResponse200ApplicationJson1' from JSON`,
  );
}

/** @internal */
export const GetAllPromptsDataPromptsResponse200ResponseFormat$inboundSchema:
  z.ZodType<
    GetAllPromptsDataPromptsResponse200ResponseFormat,
    z.ZodTypeDef,
    unknown
  > = z.union([
    z.lazy(() =>
      GetAllPromptsResponseFormatPromptsResponse200ApplicationJson2$inboundSchema
    ),
    z.lazy(() =>
      GetAllPromptsResponseFormatPromptsResponse200ApplicationJson1$inboundSchema
    ),
  ]);

/** @internal */
export type GetAllPromptsDataPromptsResponse200ResponseFormat$Outbound =
  | GetAllPromptsResponseFormatPromptsResponse200ApplicationJson2$Outbound
  | GetAllPromptsResponseFormatPromptsResponse200ApplicationJson1$Outbound;

/** @internal */
export const GetAllPromptsDataPromptsResponse200ResponseFormat$outboundSchema:
  z.ZodType<
    GetAllPromptsDataPromptsResponse200ResponseFormat$Outbound,
    z.ZodTypeDef,
    GetAllPromptsDataPromptsResponse200ResponseFormat
  > = z.union([
    z.lazy(() =>
      GetAllPromptsResponseFormatPromptsResponse200ApplicationJson2$outboundSchema
    ),
    z.lazy(() =>
      GetAllPromptsResponseFormatPromptsResponse200ApplicationJson1$outboundSchema
    ),
  ]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPromptsDataPromptsResponse200ResponseFormat$ {
  /** @deprecated use `GetAllPromptsDataPromptsResponse200ResponseFormat$inboundSchema` instead. */
  export const inboundSchema =
    GetAllPromptsDataPromptsResponse200ResponseFormat$inboundSchema;
  /** @deprecated use `GetAllPromptsDataPromptsResponse200ResponseFormat$outboundSchema` instead. */
  export const outboundSchema =
    GetAllPromptsDataPromptsResponse200ResponseFormat$outboundSchema;
  /** @deprecated use `GetAllPromptsDataPromptsResponse200ResponseFormat$Outbound` instead. */
  export type Outbound =
    GetAllPromptsDataPromptsResponse200ResponseFormat$Outbound;
}

export function getAllPromptsDataPromptsResponse200ResponseFormatToJSON(
  getAllPromptsDataPromptsResponse200ResponseFormat:
    GetAllPromptsDataPromptsResponse200ResponseFormat,
): string {
  return JSON.stringify(
    GetAllPromptsDataPromptsResponse200ResponseFormat$outboundSchema.parse(
      getAllPromptsDataPromptsResponse200ResponseFormat,
    ),
  );
}

export function getAllPromptsDataPromptsResponse200ResponseFormatFromJSON(
  jsonString: string,
): SafeParseResult<
  GetAllPromptsDataPromptsResponse200ResponseFormat,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetAllPromptsDataPromptsResponse200ResponseFormat$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'GetAllPromptsDataPromptsResponse200ResponseFormat' from JSON`,
  );
}

/** @internal */
export const GetAllPromptsDataPromptsResponse200PhotoRealVersion$inboundSchema:
  z.ZodNativeEnum<typeof GetAllPromptsDataPromptsResponse200PhotoRealVersion> =
    z.nativeEnum(GetAllPromptsDataPromptsResponse200PhotoRealVersion);

/** @internal */
export const GetAllPromptsDataPromptsResponse200PhotoRealVersion$outboundSchema:
  z.ZodNativeEnum<typeof GetAllPromptsDataPromptsResponse200PhotoRealVersion> =
    GetAllPromptsDataPromptsResponse200PhotoRealVersion$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPromptsDataPromptsResponse200PhotoRealVersion$ {
  /** @deprecated use `GetAllPromptsDataPromptsResponse200PhotoRealVersion$inboundSchema` instead. */
  export const inboundSchema =
    GetAllPromptsDataPromptsResponse200PhotoRealVersion$inboundSchema;
  /** @deprecated use `GetAllPromptsDataPromptsResponse200PhotoRealVersion$outboundSchema` instead. */
  export const outboundSchema =
    GetAllPromptsDataPromptsResponse200PhotoRealVersion$outboundSchema;
}

/** @internal */
export const GetAllPromptsDataPromptsResponse200EncodingFormat$inboundSchema:
  z.ZodNativeEnum<typeof GetAllPromptsDataPromptsResponse200EncodingFormat> = z
    .nativeEnum(GetAllPromptsDataPromptsResponse200EncodingFormat);

/** @internal */
export const GetAllPromptsDataPromptsResponse200EncodingFormat$outboundSchema:
  z.ZodNativeEnum<typeof GetAllPromptsDataPromptsResponse200EncodingFormat> =
    GetAllPromptsDataPromptsResponse200EncodingFormat$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPromptsDataPromptsResponse200EncodingFormat$ {
  /** @deprecated use `GetAllPromptsDataPromptsResponse200EncodingFormat$inboundSchema` instead. */
  export const inboundSchema =
    GetAllPromptsDataPromptsResponse200EncodingFormat$inboundSchema;
  /** @deprecated use `GetAllPromptsDataPromptsResponse200EncodingFormat$outboundSchema` instead. */
  export const outboundSchema =
    GetAllPromptsDataPromptsResponse200EncodingFormat$outboundSchema;
}

/** @internal */
export const GetAllPromptsDataPromptsResponse200ModelParameters$inboundSchema:
  z.ZodType<
    GetAllPromptsDataPromptsResponse200ModelParameters,
    z.ZodTypeDef,
    unknown
  > = z.object({
    temperature: z.number().optional(),
    maxTokens: z.number().optional(),
    topK: z.number().optional(),
    topP: z.number().optional(),
    frequencyPenalty: z.number().optional(),
    presencePenalty: z.number().optional(),
    numImages: z.number().optional(),
    seed: z.number().optional(),
    format:
      GetAllPromptsDataPromptsResponse200ApplicationJSONFormat$inboundSchema
        .optional(),
    dimensions: z.string().optional(),
    quality: GetAllPromptsDataPromptsResponse200Quality$inboundSchema
      .optional(),
    style: z.string().optional(),
    responseFormat: z.nullable(
      z.union([
        z.lazy(() =>
          GetAllPromptsResponseFormatPromptsResponse200ApplicationJson2$inboundSchema
        ),
        z.lazy(() =>
          GetAllPromptsResponseFormatPromptsResponse200ApplicationJson1$inboundSchema
        ),
      ]),
    ).optional(),
    photoRealVersion:
      GetAllPromptsDataPromptsResponse200PhotoRealVersion$inboundSchema
        .optional(),
    encoding_format:
      GetAllPromptsDataPromptsResponse200EncodingFormat$inboundSchema
        .optional(),
  }).transform((v) => {
    return remap$(v, {
      "encoding_format": "encodingFormat",
    });
  });

/** @internal */
export type GetAllPromptsDataPromptsResponse200ModelParameters$Outbound = {
  temperature?: number | undefined;
  maxTokens?: number | undefined;
  topK?: number | undefined;
  topP?: number | undefined;
  frequencyPenalty?: number | undefined;
  presencePenalty?: number | undefined;
  numImages?: number | undefined;
  seed?: number | undefined;
  format?: string | undefined;
  dimensions?: string | undefined;
  quality?: string | undefined;
  style?: string | undefined;
  responseFormat?:
    | GetAllPromptsResponseFormatPromptsResponse200ApplicationJson2$Outbound
    | GetAllPromptsResponseFormatPromptsResponse200ApplicationJson1$Outbound
    | null
    | undefined;
  photoRealVersion?: string | undefined;
  encoding_format?: string | undefined;
};

/** @internal */
export const GetAllPromptsDataPromptsResponse200ModelParameters$outboundSchema:
  z.ZodType<
    GetAllPromptsDataPromptsResponse200ModelParameters$Outbound,
    z.ZodTypeDef,
    GetAllPromptsDataPromptsResponse200ModelParameters
  > = z.object({
    temperature: z.number().optional(),
    maxTokens: z.number().optional(),
    topK: z.number().optional(),
    topP: z.number().optional(),
    frequencyPenalty: z.number().optional(),
    presencePenalty: z.number().optional(),
    numImages: z.number().optional(),
    seed: z.number().optional(),
    format:
      GetAllPromptsDataPromptsResponse200ApplicationJSONFormat$outboundSchema
        .optional(),
    dimensions: z.string().optional(),
    quality: GetAllPromptsDataPromptsResponse200Quality$outboundSchema
      .optional(),
    style: z.string().optional(),
    responseFormat: z.nullable(
      z.union([
        z.lazy(() =>
          GetAllPromptsResponseFormatPromptsResponse200ApplicationJson2$outboundSchema
        ),
        z.lazy(() =>
          GetAllPromptsResponseFormatPromptsResponse200ApplicationJson1$outboundSchema
        ),
      ]),
    ).optional(),
    photoRealVersion:
      GetAllPromptsDataPromptsResponse200PhotoRealVersion$outboundSchema
        .optional(),
    encodingFormat:
      GetAllPromptsDataPromptsResponse200EncodingFormat$outboundSchema
        .optional(),
  }).transform((v) => {
    return remap$(v, {
      encodingFormat: "encoding_format",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPromptsDataPromptsResponse200ModelParameters$ {
  /** @deprecated use `GetAllPromptsDataPromptsResponse200ModelParameters$inboundSchema` instead. */
  export const inboundSchema =
    GetAllPromptsDataPromptsResponse200ModelParameters$inboundSchema;
  /** @deprecated use `GetAllPromptsDataPromptsResponse200ModelParameters$outboundSchema` instead. */
  export const outboundSchema =
    GetAllPromptsDataPromptsResponse200ModelParameters$outboundSchema;
  /** @deprecated use `GetAllPromptsDataPromptsResponse200ModelParameters$Outbound` instead. */
  export type Outbound =
    GetAllPromptsDataPromptsResponse200ModelParameters$Outbound;
}

export function getAllPromptsDataPromptsResponse200ModelParametersToJSON(
  getAllPromptsDataPromptsResponse200ModelParameters:
    GetAllPromptsDataPromptsResponse200ModelParameters,
): string {
  return JSON.stringify(
    GetAllPromptsDataPromptsResponse200ModelParameters$outboundSchema.parse(
      getAllPromptsDataPromptsResponse200ModelParameters,
    ),
  );
}

export function getAllPromptsDataPromptsResponse200ModelParametersFromJSON(
  jsonString: string,
): SafeParseResult<
  GetAllPromptsDataPromptsResponse200ModelParameters,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetAllPromptsDataPromptsResponse200ModelParameters$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'GetAllPromptsDataPromptsResponse200ModelParameters' from JSON`,
  );
}

/** @internal */
export const GetAllPromptsDataPromptsResponse200Provider$inboundSchema:
  z.ZodNativeEnum<typeof GetAllPromptsDataPromptsResponse200Provider> = z
    .nativeEnum(GetAllPromptsDataPromptsResponse200Provider);

/** @internal */
export const GetAllPromptsDataPromptsResponse200Provider$outboundSchema:
  z.ZodNativeEnum<typeof GetAllPromptsDataPromptsResponse200Provider> =
    GetAllPromptsDataPromptsResponse200Provider$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPromptsDataPromptsResponse200Provider$ {
  /** @deprecated use `GetAllPromptsDataPromptsResponse200Provider$inboundSchema` instead. */
  export const inboundSchema =
    GetAllPromptsDataPromptsResponse200Provider$inboundSchema;
  /** @deprecated use `GetAllPromptsDataPromptsResponse200Provider$outboundSchema` instead. */
  export const outboundSchema =
    GetAllPromptsDataPromptsResponse200Provider$outboundSchema;
}

/** @internal */
export const GetAllPromptsDataPromptsResponse200Role$inboundSchema:
  z.ZodNativeEnum<typeof GetAllPromptsDataPromptsResponse200Role> = z
    .nativeEnum(GetAllPromptsDataPromptsResponse200Role);

/** @internal */
export const GetAllPromptsDataPromptsResponse200Role$outboundSchema:
  z.ZodNativeEnum<typeof GetAllPromptsDataPromptsResponse200Role> =
    GetAllPromptsDataPromptsResponse200Role$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPromptsDataPromptsResponse200Role$ {
  /** @deprecated use `GetAllPromptsDataPromptsResponse200Role$inboundSchema` instead. */
  export const inboundSchema =
    GetAllPromptsDataPromptsResponse200Role$inboundSchema;
  /** @deprecated use `GetAllPromptsDataPromptsResponse200Role$outboundSchema` instead. */
  export const outboundSchema =
    GetAllPromptsDataPromptsResponse200Role$outboundSchema;
}

/** @internal */
export const GetAllPrompts2PromptsResponse200ApplicationJSONResponseBodyData1VersionsType$inboundSchema:
  z.ZodNativeEnum<
    typeof GetAllPrompts2PromptsResponse200ApplicationJSONResponseBodyData1VersionsType
  > = z.nativeEnum(
    GetAllPrompts2PromptsResponse200ApplicationJSONResponseBodyData1VersionsType,
  );

/** @internal */
export const GetAllPrompts2PromptsResponse200ApplicationJSONResponseBodyData1VersionsType$outboundSchema:
  z.ZodNativeEnum<
    typeof GetAllPrompts2PromptsResponse200ApplicationJSONResponseBodyData1VersionsType
  > =
    GetAllPrompts2PromptsResponse200ApplicationJSONResponseBodyData1VersionsType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPrompts2PromptsResponse200ApplicationJSONResponseBodyData1VersionsType$ {
  /** @deprecated use `GetAllPrompts2PromptsResponse200ApplicationJSONResponseBodyData1VersionsType$inboundSchema` instead. */
  export const inboundSchema =
    GetAllPrompts2PromptsResponse200ApplicationJSONResponseBodyData1VersionsType$inboundSchema;
  /** @deprecated use `GetAllPrompts2PromptsResponse200ApplicationJSONResponseBodyData1VersionsType$outboundSchema` instead. */
  export const outboundSchema =
    GetAllPrompts2PromptsResponse200ApplicationJSONResponseBodyData1VersionsType$outboundSchema;
}

/** @internal */
export const GetAllPrompts2PromptsResponse200ApplicationJSONImageUrl$inboundSchema:
  z.ZodType<
    GetAllPrompts2PromptsResponse200ApplicationJSONImageUrl,
    z.ZodTypeDef,
    unknown
  > = z.object({
    id: z.string().optional(),
    url: z.string(),
    detail: z.string().optional(),
  });

/** @internal */
export type GetAllPrompts2PromptsResponse200ApplicationJSONImageUrl$Outbound = {
  id?: string | undefined;
  url: string;
  detail?: string | undefined;
};

/** @internal */
export const GetAllPrompts2PromptsResponse200ApplicationJSONImageUrl$outboundSchema:
  z.ZodType<
    GetAllPrompts2PromptsResponse200ApplicationJSONImageUrl$Outbound,
    z.ZodTypeDef,
    GetAllPrompts2PromptsResponse200ApplicationJSONImageUrl
  > = z.object({
    id: z.string().optional(),
    url: z.string(),
    detail: z.string().optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPrompts2PromptsResponse200ApplicationJSONImageUrl$ {
  /** @deprecated use `GetAllPrompts2PromptsResponse200ApplicationJSONImageUrl$inboundSchema` instead. */
  export const inboundSchema =
    GetAllPrompts2PromptsResponse200ApplicationJSONImageUrl$inboundSchema;
  /** @deprecated use `GetAllPrompts2PromptsResponse200ApplicationJSONImageUrl$outboundSchema` instead. */
  export const outboundSchema =
    GetAllPrompts2PromptsResponse200ApplicationJSONImageUrl$outboundSchema;
  /** @deprecated use `GetAllPrompts2PromptsResponse200ApplicationJSONImageUrl$Outbound` instead. */
  export type Outbound =
    GetAllPrompts2PromptsResponse200ApplicationJSONImageUrl$Outbound;
}

export function getAllPrompts2PromptsResponse200ApplicationJSONImageUrlToJSON(
  getAllPrompts2PromptsResponse200ApplicationJSONImageUrl:
    GetAllPrompts2PromptsResponse200ApplicationJSONImageUrl,
): string {
  return JSON.stringify(
    GetAllPrompts2PromptsResponse200ApplicationJSONImageUrl$outboundSchema
      .parse(getAllPrompts2PromptsResponse200ApplicationJSONImageUrl),
  );
}

export function getAllPrompts2PromptsResponse200ApplicationJSONImageUrlFromJSON(
  jsonString: string,
): SafeParseResult<
  GetAllPrompts2PromptsResponse200ApplicationJSONImageUrl,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetAllPrompts2PromptsResponse200ApplicationJSONImageUrl$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'GetAllPrompts2PromptsResponse200ApplicationJSONImageUrl' from JSON`,
  );
}

/** @internal */
export const GetAllPrompts2PromptsResponse200ApplicationJson2$inboundSchema:
  z.ZodType<
    GetAllPrompts2PromptsResponse200ApplicationJson2,
    z.ZodTypeDef,
    unknown
  > = z.object({
    type:
      GetAllPrompts2PromptsResponse200ApplicationJSONResponseBodyData1VersionsType$inboundSchema,
    image_url: z.lazy(() =>
      GetAllPrompts2PromptsResponse200ApplicationJSONImageUrl$inboundSchema
    ),
  }).transform((v) => {
    return remap$(v, {
      "image_url": "imageUrl",
    });
  });

/** @internal */
export type GetAllPrompts2PromptsResponse200ApplicationJson2$Outbound = {
  type: string;
  image_url: GetAllPrompts2PromptsResponse200ApplicationJSONImageUrl$Outbound;
};

/** @internal */
export const GetAllPrompts2PromptsResponse200ApplicationJson2$outboundSchema:
  z.ZodType<
    GetAllPrompts2PromptsResponse200ApplicationJson2$Outbound,
    z.ZodTypeDef,
    GetAllPrompts2PromptsResponse200ApplicationJson2
  > = z.object({
    type:
      GetAllPrompts2PromptsResponse200ApplicationJSONResponseBodyData1VersionsType$outboundSchema,
    imageUrl: z.lazy(() =>
      GetAllPrompts2PromptsResponse200ApplicationJSONImageUrl$outboundSchema
    ),
  }).transform((v) => {
    return remap$(v, {
      imageUrl: "image_url",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPrompts2PromptsResponse200ApplicationJson2$ {
  /** @deprecated use `GetAllPrompts2PromptsResponse200ApplicationJson2$inboundSchema` instead. */
  export const inboundSchema =
    GetAllPrompts2PromptsResponse200ApplicationJson2$inboundSchema;
  /** @deprecated use `GetAllPrompts2PromptsResponse200ApplicationJson2$outboundSchema` instead. */
  export const outboundSchema =
    GetAllPrompts2PromptsResponse200ApplicationJson2$outboundSchema;
  /** @deprecated use `GetAllPrompts2PromptsResponse200ApplicationJson2$Outbound` instead. */
  export type Outbound =
    GetAllPrompts2PromptsResponse200ApplicationJson2$Outbound;
}

export function getAllPrompts2PromptsResponse200ApplicationJSON2ToJSON(
  getAllPrompts2PromptsResponse200ApplicationJson2:
    GetAllPrompts2PromptsResponse200ApplicationJson2,
): string {
  return JSON.stringify(
    GetAllPrompts2PromptsResponse200ApplicationJson2$outboundSchema.parse(
      getAllPrompts2PromptsResponse200ApplicationJson2,
    ),
  );
}

export function getAllPrompts2PromptsResponse200ApplicationJSON2FromJSON(
  jsonString: string,
): SafeParseResult<
  GetAllPrompts2PromptsResponse200ApplicationJson2,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetAllPrompts2PromptsResponse200ApplicationJson2$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'GetAllPrompts2PromptsResponse200ApplicationJson2' from JSON`,
  );
}

/** @internal */
export const GetAllPrompts2PromptsResponse200ApplicationJSONResponseBodyData1Type$inboundSchema:
  z.ZodNativeEnum<
    typeof GetAllPrompts2PromptsResponse200ApplicationJSONResponseBodyData1Type
  > = z.nativeEnum(
    GetAllPrompts2PromptsResponse200ApplicationJSONResponseBodyData1Type,
  );

/** @internal */
export const GetAllPrompts2PromptsResponse200ApplicationJSONResponseBodyData1Type$outboundSchema:
  z.ZodNativeEnum<
    typeof GetAllPrompts2PromptsResponse200ApplicationJSONResponseBodyData1Type
  > =
    GetAllPrompts2PromptsResponse200ApplicationJSONResponseBodyData1Type$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPrompts2PromptsResponse200ApplicationJSONResponseBodyData1Type$ {
  /** @deprecated use `GetAllPrompts2PromptsResponse200ApplicationJSONResponseBodyData1Type$inboundSchema` instead. */
  export const inboundSchema =
    GetAllPrompts2PromptsResponse200ApplicationJSONResponseBodyData1Type$inboundSchema;
  /** @deprecated use `GetAllPrompts2PromptsResponse200ApplicationJSONResponseBodyData1Type$outboundSchema` instead. */
  export const outboundSchema =
    GetAllPrompts2PromptsResponse200ApplicationJSONResponseBodyData1Type$outboundSchema;
}

/** @internal */
export const GetAllPrompts2PromptsResponse200ApplicationJson1$inboundSchema:
  z.ZodType<
    GetAllPrompts2PromptsResponse200ApplicationJson1,
    z.ZodTypeDef,
    unknown
  > = z.object({
    type:
      GetAllPrompts2PromptsResponse200ApplicationJSONResponseBodyData1Type$inboundSchema,
    text: z.string(),
  });

/** @internal */
export type GetAllPrompts2PromptsResponse200ApplicationJson1$Outbound = {
  type: string;
  text: string;
};

/** @internal */
export const GetAllPrompts2PromptsResponse200ApplicationJson1$outboundSchema:
  z.ZodType<
    GetAllPrompts2PromptsResponse200ApplicationJson1$Outbound,
    z.ZodTypeDef,
    GetAllPrompts2PromptsResponse200ApplicationJson1
  > = z.object({
    type:
      GetAllPrompts2PromptsResponse200ApplicationJSONResponseBodyData1Type$outboundSchema,
    text: z.string(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPrompts2PromptsResponse200ApplicationJson1$ {
  /** @deprecated use `GetAllPrompts2PromptsResponse200ApplicationJson1$inboundSchema` instead. */
  export const inboundSchema =
    GetAllPrompts2PromptsResponse200ApplicationJson1$inboundSchema;
  /** @deprecated use `GetAllPrompts2PromptsResponse200ApplicationJson1$outboundSchema` instead. */
  export const outboundSchema =
    GetAllPrompts2PromptsResponse200ApplicationJson1$outboundSchema;
  /** @deprecated use `GetAllPrompts2PromptsResponse200ApplicationJson1$Outbound` instead. */
  export type Outbound =
    GetAllPrompts2PromptsResponse200ApplicationJson1$Outbound;
}

export function getAllPrompts2PromptsResponse200ApplicationJSON1ToJSON(
  getAllPrompts2PromptsResponse200ApplicationJson1:
    GetAllPrompts2PromptsResponse200ApplicationJson1,
): string {
  return JSON.stringify(
    GetAllPrompts2PromptsResponse200ApplicationJson1$outboundSchema.parse(
      getAllPrompts2PromptsResponse200ApplicationJson1,
    ),
  );
}

export function getAllPrompts2PromptsResponse200ApplicationJSON1FromJSON(
  jsonString: string,
): SafeParseResult<
  GetAllPrompts2PromptsResponse200ApplicationJson1,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetAllPrompts2PromptsResponse200ApplicationJson1$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'GetAllPrompts2PromptsResponse200ApplicationJson1' from JSON`,
  );
}

/** @internal */
export const GetAllPromptsContentPromptsResponse200ApplicationJson2$inboundSchema:
  z.ZodType<
    GetAllPromptsContentPromptsResponse200ApplicationJson2,
    z.ZodTypeDef,
    unknown
  > = z.union([
    z.lazy(() =>
      GetAllPrompts2PromptsResponse200ApplicationJson1$inboundSchema
    ),
    z.lazy(() =>
      GetAllPrompts2PromptsResponse200ApplicationJson2$inboundSchema
    ),
  ]);

/** @internal */
export type GetAllPromptsContentPromptsResponse200ApplicationJson2$Outbound =
  | GetAllPrompts2PromptsResponse200ApplicationJson1$Outbound
  | GetAllPrompts2PromptsResponse200ApplicationJson2$Outbound;

/** @internal */
export const GetAllPromptsContentPromptsResponse200ApplicationJson2$outboundSchema:
  z.ZodType<
    GetAllPromptsContentPromptsResponse200ApplicationJson2$Outbound,
    z.ZodTypeDef,
    GetAllPromptsContentPromptsResponse200ApplicationJson2
  > = z.union([
    z.lazy(() =>
      GetAllPrompts2PromptsResponse200ApplicationJson1$outboundSchema
    ),
    z.lazy(() =>
      GetAllPrompts2PromptsResponse200ApplicationJson2$outboundSchema
    ),
  ]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPromptsContentPromptsResponse200ApplicationJson2$ {
  /** @deprecated use `GetAllPromptsContentPromptsResponse200ApplicationJson2$inboundSchema` instead. */
  export const inboundSchema =
    GetAllPromptsContentPromptsResponse200ApplicationJson2$inboundSchema;
  /** @deprecated use `GetAllPromptsContentPromptsResponse200ApplicationJson2$outboundSchema` instead. */
  export const outboundSchema =
    GetAllPromptsContentPromptsResponse200ApplicationJson2$outboundSchema;
  /** @deprecated use `GetAllPromptsContentPromptsResponse200ApplicationJson2$Outbound` instead. */
  export type Outbound =
    GetAllPromptsContentPromptsResponse200ApplicationJson2$Outbound;
}

export function getAllPromptsContentPromptsResponse200ApplicationJSON2ToJSON(
  getAllPromptsContentPromptsResponse200ApplicationJson2:
    GetAllPromptsContentPromptsResponse200ApplicationJson2,
): string {
  return JSON.stringify(
    GetAllPromptsContentPromptsResponse200ApplicationJson2$outboundSchema.parse(
      getAllPromptsContentPromptsResponse200ApplicationJson2,
    ),
  );
}

export function getAllPromptsContentPromptsResponse200ApplicationJSON2FromJSON(
  jsonString: string,
): SafeParseResult<
  GetAllPromptsContentPromptsResponse200ApplicationJson2,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetAllPromptsContentPromptsResponse200ApplicationJson2$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'GetAllPromptsContentPromptsResponse200ApplicationJson2' from JSON`,
  );
}

/** @internal */
export const GetAllPromptsDataPromptsResponse200Content$inboundSchema:
  z.ZodType<GetAllPromptsDataPromptsResponse200Content, z.ZodTypeDef, unknown> =
    z.union([
      z.string(),
      z.array(z.union([
        z.lazy(() =>
          GetAllPrompts2PromptsResponse200ApplicationJson1$inboundSchema
        ),
        z.lazy(() =>
          GetAllPrompts2PromptsResponse200ApplicationJson2$inboundSchema
        ),
      ])),
    ]);

/** @internal */
export type GetAllPromptsDataPromptsResponse200Content$Outbound =
  | string
  | Array<
    | GetAllPrompts2PromptsResponse200ApplicationJson1$Outbound
    | GetAllPrompts2PromptsResponse200ApplicationJson2$Outbound
  >;

/** @internal */
export const GetAllPromptsDataPromptsResponse200Content$outboundSchema:
  z.ZodType<
    GetAllPromptsDataPromptsResponse200Content$Outbound,
    z.ZodTypeDef,
    GetAllPromptsDataPromptsResponse200Content
  > = z.union([
    z.string(),
    z.array(z.union([
      z.lazy(() =>
        GetAllPrompts2PromptsResponse200ApplicationJson1$outboundSchema
      ),
      z.lazy(() =>
        GetAllPrompts2PromptsResponse200ApplicationJson2$outboundSchema
      ),
    ])),
  ]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPromptsDataPromptsResponse200Content$ {
  /** @deprecated use `GetAllPromptsDataPromptsResponse200Content$inboundSchema` instead. */
  export const inboundSchema =
    GetAllPromptsDataPromptsResponse200Content$inboundSchema;
  /** @deprecated use `GetAllPromptsDataPromptsResponse200Content$outboundSchema` instead. */
  export const outboundSchema =
    GetAllPromptsDataPromptsResponse200Content$outboundSchema;
  /** @deprecated use `GetAllPromptsDataPromptsResponse200Content$Outbound` instead. */
  export type Outbound = GetAllPromptsDataPromptsResponse200Content$Outbound;
}

export function getAllPromptsDataPromptsResponse200ContentToJSON(
  getAllPromptsDataPromptsResponse200Content:
    GetAllPromptsDataPromptsResponse200Content,
): string {
  return JSON.stringify(
    GetAllPromptsDataPromptsResponse200Content$outboundSchema.parse(
      getAllPromptsDataPromptsResponse200Content,
    ),
  );
}

export function getAllPromptsDataPromptsResponse200ContentFromJSON(
  jsonString: string,
): SafeParseResult<
  GetAllPromptsDataPromptsResponse200Content,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetAllPromptsDataPromptsResponse200Content$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'GetAllPromptsDataPromptsResponse200Content' from JSON`,
  );
}

/** @internal */
export const GetAllPromptsDataPromptsResponse200ApplicationJSONResponseBody1Type$inboundSchema:
  z.ZodNativeEnum<
    typeof GetAllPromptsDataPromptsResponse200ApplicationJSONResponseBody1Type
  > = z.nativeEnum(
    GetAllPromptsDataPromptsResponse200ApplicationJSONResponseBody1Type,
  );

/** @internal */
export const GetAllPromptsDataPromptsResponse200ApplicationJSONResponseBody1Type$outboundSchema:
  z.ZodNativeEnum<
    typeof GetAllPromptsDataPromptsResponse200ApplicationJSONResponseBody1Type
  > =
    GetAllPromptsDataPromptsResponse200ApplicationJSONResponseBody1Type$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPromptsDataPromptsResponse200ApplicationJSONResponseBody1Type$ {
  /** @deprecated use `GetAllPromptsDataPromptsResponse200ApplicationJSONResponseBody1Type$inboundSchema` instead. */
  export const inboundSchema =
    GetAllPromptsDataPromptsResponse200ApplicationJSONResponseBody1Type$inboundSchema;
  /** @deprecated use `GetAllPromptsDataPromptsResponse200ApplicationJSONResponseBody1Type$outboundSchema` instead. */
  export const outboundSchema =
    GetAllPromptsDataPromptsResponse200ApplicationJSONResponseBody1Type$outboundSchema;
}

/** @internal */
export const GetAllPromptsDataPromptsResponse200ApplicationJSONFunction$inboundSchema:
  z.ZodType<
    GetAllPromptsDataPromptsResponse200ApplicationJSONFunction,
    z.ZodTypeDef,
    unknown
  > = z.object({
    name: z.string(),
    arguments: z.string(),
  });

/** @internal */
export type GetAllPromptsDataPromptsResponse200ApplicationJSONFunction$Outbound =
  {
    name: string;
    arguments: string;
  };

/** @internal */
export const GetAllPromptsDataPromptsResponse200ApplicationJSONFunction$outboundSchema:
  z.ZodType<
    GetAllPromptsDataPromptsResponse200ApplicationJSONFunction$Outbound,
    z.ZodTypeDef,
    GetAllPromptsDataPromptsResponse200ApplicationJSONFunction
  > = z.object({
    name: z.string(),
    arguments: z.string(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPromptsDataPromptsResponse200ApplicationJSONFunction$ {
  /** @deprecated use `GetAllPromptsDataPromptsResponse200ApplicationJSONFunction$inboundSchema` instead. */
  export const inboundSchema =
    GetAllPromptsDataPromptsResponse200ApplicationJSONFunction$inboundSchema;
  /** @deprecated use `GetAllPromptsDataPromptsResponse200ApplicationJSONFunction$outboundSchema` instead. */
  export const outboundSchema =
    GetAllPromptsDataPromptsResponse200ApplicationJSONFunction$outboundSchema;
  /** @deprecated use `GetAllPromptsDataPromptsResponse200ApplicationJSONFunction$Outbound` instead. */
  export type Outbound =
    GetAllPromptsDataPromptsResponse200ApplicationJSONFunction$Outbound;
}

export function getAllPromptsDataPromptsResponse200ApplicationJSONFunctionToJSON(
  getAllPromptsDataPromptsResponse200ApplicationJSONFunction:
    GetAllPromptsDataPromptsResponse200ApplicationJSONFunction,
): string {
  return JSON.stringify(
    GetAllPromptsDataPromptsResponse200ApplicationJSONFunction$outboundSchema
      .parse(getAllPromptsDataPromptsResponse200ApplicationJSONFunction),
  );
}

export function getAllPromptsDataPromptsResponse200ApplicationJSONFunctionFromJSON(
  jsonString: string,
): SafeParseResult<
  GetAllPromptsDataPromptsResponse200ApplicationJSONFunction,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetAllPromptsDataPromptsResponse200ApplicationJSONFunction$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'GetAllPromptsDataPromptsResponse200ApplicationJSONFunction' from JSON`,
  );
}

/** @internal */
export const GetAllPromptsDataPromptsResponse200ToolCalls$inboundSchema:
  z.ZodType<
    GetAllPromptsDataPromptsResponse200ToolCalls,
    z.ZodTypeDef,
    unknown
  > = z.object({
    id: z.string().optional(),
    index: z.number().optional(),
    type:
      GetAllPromptsDataPromptsResponse200ApplicationJSONResponseBody1Type$inboundSchema,
    function: z.lazy(() =>
      GetAllPromptsDataPromptsResponse200ApplicationJSONFunction$inboundSchema
    ),
  });

/** @internal */
export type GetAllPromptsDataPromptsResponse200ToolCalls$Outbound = {
  id?: string | undefined;
  index?: number | undefined;
  type: string;
  function: GetAllPromptsDataPromptsResponse200ApplicationJSONFunction$Outbound;
};

/** @internal */
export const GetAllPromptsDataPromptsResponse200ToolCalls$outboundSchema:
  z.ZodType<
    GetAllPromptsDataPromptsResponse200ToolCalls$Outbound,
    z.ZodTypeDef,
    GetAllPromptsDataPromptsResponse200ToolCalls
  > = z.object({
    id: z.string().optional(),
    index: z.number().optional(),
    type:
      GetAllPromptsDataPromptsResponse200ApplicationJSONResponseBody1Type$outboundSchema,
    function: z.lazy(() =>
      GetAllPromptsDataPromptsResponse200ApplicationJSONFunction$outboundSchema
    ),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPromptsDataPromptsResponse200ToolCalls$ {
  /** @deprecated use `GetAllPromptsDataPromptsResponse200ToolCalls$inboundSchema` instead. */
  export const inboundSchema =
    GetAllPromptsDataPromptsResponse200ToolCalls$inboundSchema;
  /** @deprecated use `GetAllPromptsDataPromptsResponse200ToolCalls$outboundSchema` instead. */
  export const outboundSchema =
    GetAllPromptsDataPromptsResponse200ToolCalls$outboundSchema;
  /** @deprecated use `GetAllPromptsDataPromptsResponse200ToolCalls$Outbound` instead. */
  export type Outbound = GetAllPromptsDataPromptsResponse200ToolCalls$Outbound;
}

export function getAllPromptsDataPromptsResponse200ToolCallsToJSON(
  getAllPromptsDataPromptsResponse200ToolCalls:
    GetAllPromptsDataPromptsResponse200ToolCalls,
): string {
  return JSON.stringify(
    GetAllPromptsDataPromptsResponse200ToolCalls$outboundSchema.parse(
      getAllPromptsDataPromptsResponse200ToolCalls,
    ),
  );
}

export function getAllPromptsDataPromptsResponse200ToolCallsFromJSON(
  jsonString: string,
): SafeParseResult<
  GetAllPromptsDataPromptsResponse200ToolCalls,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetAllPromptsDataPromptsResponse200ToolCalls$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'GetAllPromptsDataPromptsResponse200ToolCalls' from JSON`,
  );
}

/** @internal */
export const GetAllPromptsDataPromptsResponse200Messages$inboundSchema:
  z.ZodType<
    GetAllPromptsDataPromptsResponse200Messages,
    z.ZodTypeDef,
    unknown
  > = z.object({
    role: GetAllPromptsDataPromptsResponse200Role$inboundSchema,
    content: z.union([
      z.string(),
      z.array(z.union([
        z.lazy(() =>
          GetAllPrompts2PromptsResponse200ApplicationJson1$inboundSchema
        ),
        z.lazy(() =>
          GetAllPrompts2PromptsResponse200ApplicationJson2$inboundSchema
        ),
      ])),
    ]),
    tool_calls: z.array(
      z.lazy(() => GetAllPromptsDataPromptsResponse200ToolCalls$inboundSchema),
    ).optional(),
  }).transform((v) => {
    return remap$(v, {
      "tool_calls": "toolCalls",
    });
  });

/** @internal */
export type GetAllPromptsDataPromptsResponse200Messages$Outbound = {
  role: string;
  content:
    | string
    | Array<
      | GetAllPrompts2PromptsResponse200ApplicationJson1$Outbound
      | GetAllPrompts2PromptsResponse200ApplicationJson2$Outbound
    >;
  tool_calls?:
    | Array<GetAllPromptsDataPromptsResponse200ToolCalls$Outbound>
    | undefined;
};

/** @internal */
export const GetAllPromptsDataPromptsResponse200Messages$outboundSchema:
  z.ZodType<
    GetAllPromptsDataPromptsResponse200Messages$Outbound,
    z.ZodTypeDef,
    GetAllPromptsDataPromptsResponse200Messages
  > = z.object({
    role: GetAllPromptsDataPromptsResponse200Role$outboundSchema,
    content: z.union([
      z.string(),
      z.array(z.union([
        z.lazy(() =>
          GetAllPrompts2PromptsResponse200ApplicationJson1$outboundSchema
        ),
        z.lazy(() =>
          GetAllPrompts2PromptsResponse200ApplicationJson2$outboundSchema
        ),
      ])),
    ]),
    toolCalls: z.array(
      z.lazy(() => GetAllPromptsDataPromptsResponse200ToolCalls$outboundSchema),
    ).optional(),
  }).transform((v) => {
    return remap$(v, {
      toolCalls: "tool_calls",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPromptsDataPromptsResponse200Messages$ {
  /** @deprecated use `GetAllPromptsDataPromptsResponse200Messages$inboundSchema` instead. */
  export const inboundSchema =
    GetAllPromptsDataPromptsResponse200Messages$inboundSchema;
  /** @deprecated use `GetAllPromptsDataPromptsResponse200Messages$outboundSchema` instead. */
  export const outboundSchema =
    GetAllPromptsDataPromptsResponse200Messages$outboundSchema;
  /** @deprecated use `GetAllPromptsDataPromptsResponse200Messages$Outbound` instead. */
  export type Outbound = GetAllPromptsDataPromptsResponse200Messages$Outbound;
}

export function getAllPromptsDataPromptsResponse200MessagesToJSON(
  getAllPromptsDataPromptsResponse200Messages:
    GetAllPromptsDataPromptsResponse200Messages,
): string {
  return JSON.stringify(
    GetAllPromptsDataPromptsResponse200Messages$outboundSchema.parse(
      getAllPromptsDataPromptsResponse200Messages,
    ),
  );
}

export function getAllPromptsDataPromptsResponse200MessagesFromJSON(
  jsonString: string,
): SafeParseResult<
  GetAllPromptsDataPromptsResponse200Messages,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetAllPromptsDataPromptsResponse200Messages$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'GetAllPromptsDataPromptsResponse200Messages' from JSON`,
  );
}

/** @internal */
export const GetAllPromptsDataPromptsResponse200PromptConfig$inboundSchema:
  z.ZodType<
    GetAllPromptsDataPromptsResponse200PromptConfig,
    z.ZodTypeDef,
    unknown
  > = z.object({
    stream: z.boolean().optional(),
    model: z.string().optional(),
    model_db_id: z.string().optional(),
    model_type: GetAllPromptsDataPromptsResponse200ModelType$inboundSchema
      .optional(),
    model_parameters: z.lazy(() =>
      GetAllPromptsDataPromptsResponse200ModelParameters$inboundSchema
    ).optional(),
    provider: GetAllPromptsDataPromptsResponse200Provider$inboundSchema
      .optional(),
    integration_id: z.nullable(z.string()).optional(),
    version: z.string().optional(),
    messages: z.array(
      z.lazy(() => GetAllPromptsDataPromptsResponse200Messages$inboundSchema),
    ),
  }).transform((v) => {
    return remap$(v, {
      "model_db_id": "modelDbId",
      "model_type": "modelType",
      "model_parameters": "modelParameters",
      "integration_id": "integrationId",
    });
  });

/** @internal */
export type GetAllPromptsDataPromptsResponse200PromptConfig$Outbound = {
  stream?: boolean | undefined;
  model?: string | undefined;
  model_db_id?: string | undefined;
  model_type?: string | undefined;
  model_parameters?:
    | GetAllPromptsDataPromptsResponse200ModelParameters$Outbound
    | undefined;
  provider?: string | undefined;
  integration_id?: string | null | undefined;
  version?: string | undefined;
  messages: Array<GetAllPromptsDataPromptsResponse200Messages$Outbound>;
};

/** @internal */
export const GetAllPromptsDataPromptsResponse200PromptConfig$outboundSchema:
  z.ZodType<
    GetAllPromptsDataPromptsResponse200PromptConfig$Outbound,
    z.ZodTypeDef,
    GetAllPromptsDataPromptsResponse200PromptConfig
  > = z.object({
    stream: z.boolean().optional(),
    model: z.string().optional(),
    modelDbId: z.string().optional(),
    modelType: GetAllPromptsDataPromptsResponse200ModelType$outboundSchema
      .optional(),
    modelParameters: z.lazy(() =>
      GetAllPromptsDataPromptsResponse200ModelParameters$outboundSchema
    ).optional(),
    provider: GetAllPromptsDataPromptsResponse200Provider$outboundSchema
      .optional(),
    integrationId: z.nullable(z.string()).optional(),
    version: z.string().optional(),
    messages: z.array(
      z.lazy(() => GetAllPromptsDataPromptsResponse200Messages$outboundSchema),
    ),
  }).transform((v) => {
    return remap$(v, {
      modelDbId: "model_db_id",
      modelType: "model_type",
      modelParameters: "model_parameters",
      integrationId: "integration_id",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPromptsDataPromptsResponse200PromptConfig$ {
  /** @deprecated use `GetAllPromptsDataPromptsResponse200PromptConfig$inboundSchema` instead. */
  export const inboundSchema =
    GetAllPromptsDataPromptsResponse200PromptConfig$inboundSchema;
  /** @deprecated use `GetAllPromptsDataPromptsResponse200PromptConfig$outboundSchema` instead. */
  export const outboundSchema =
    GetAllPromptsDataPromptsResponse200PromptConfig$outboundSchema;
  /** @deprecated use `GetAllPromptsDataPromptsResponse200PromptConfig$Outbound` instead. */
  export type Outbound =
    GetAllPromptsDataPromptsResponse200PromptConfig$Outbound;
}

export function getAllPromptsDataPromptsResponse200PromptConfigToJSON(
  getAllPromptsDataPromptsResponse200PromptConfig:
    GetAllPromptsDataPromptsResponse200PromptConfig,
): string {
  return JSON.stringify(
    GetAllPromptsDataPromptsResponse200PromptConfig$outboundSchema.parse(
      getAllPromptsDataPromptsResponse200PromptConfig,
    ),
  );
}

export function getAllPromptsDataPromptsResponse200PromptConfigFromJSON(
  jsonString: string,
): SafeParseResult<
  GetAllPromptsDataPromptsResponse200PromptConfig,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetAllPromptsDataPromptsResponse200PromptConfig$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'GetAllPromptsDataPromptsResponse200PromptConfig' from JSON`,
  );
}

/** @internal */
export const GetAllPromptsDataPromptsResponse200Metadata$inboundSchema:
  z.ZodType<
    GetAllPromptsDataPromptsResponse200Metadata,
    z.ZodTypeDef,
    unknown
  > = z.object({
    use_cases: z.array(z.string()).optional(),
    language: z.string().optional(),
  }).transform((v) => {
    return remap$(v, {
      "use_cases": "useCases",
    });
  });

/** @internal */
export type GetAllPromptsDataPromptsResponse200Metadata$Outbound = {
  use_cases?: Array<string> | undefined;
  language?: string | undefined;
};

/** @internal */
export const GetAllPromptsDataPromptsResponse200Metadata$outboundSchema:
  z.ZodType<
    GetAllPromptsDataPromptsResponse200Metadata$Outbound,
    z.ZodTypeDef,
    GetAllPromptsDataPromptsResponse200Metadata
  > = z.object({
    useCases: z.array(z.string()).optional(),
    language: z.string().optional(),
  }).transform((v) => {
    return remap$(v, {
      useCases: "use_cases",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPromptsDataPromptsResponse200Metadata$ {
  /** @deprecated use `GetAllPromptsDataPromptsResponse200Metadata$inboundSchema` instead. */
  export const inboundSchema =
    GetAllPromptsDataPromptsResponse200Metadata$inboundSchema;
  /** @deprecated use `GetAllPromptsDataPromptsResponse200Metadata$outboundSchema` instead. */
  export const outboundSchema =
    GetAllPromptsDataPromptsResponse200Metadata$outboundSchema;
  /** @deprecated use `GetAllPromptsDataPromptsResponse200Metadata$Outbound` instead. */
  export type Outbound = GetAllPromptsDataPromptsResponse200Metadata$Outbound;
}

export function getAllPromptsDataPromptsResponse200MetadataToJSON(
  getAllPromptsDataPromptsResponse200Metadata:
    GetAllPromptsDataPromptsResponse200Metadata,
): string {
  return JSON.stringify(
    GetAllPromptsDataPromptsResponse200Metadata$outboundSchema.parse(
      getAllPromptsDataPromptsResponse200Metadata,
    ),
  );
}

export function getAllPromptsDataPromptsResponse200MetadataFromJSON(
  jsonString: string,
): SafeParseResult<
  GetAllPromptsDataPromptsResponse200Metadata,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetAllPromptsDataPromptsResponse200Metadata$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'GetAllPromptsDataPromptsResponse200Metadata' from JSON`,
  );
}

/** @internal */
export const DataVersions$inboundSchema: z.ZodType<
  DataVersions,
  z.ZodTypeDef,
  unknown
> = z.object({
  _id: z.string(),
  created_by_id: z.string(),
  display_name: z.string(),
  updated_by_id: z.string(),
  description: z.nullable(z.string()).optional(),
  prompt_config: z.lazy(() =>
    GetAllPromptsDataPromptsResponse200PromptConfig$inboundSchema
  ),
  metadata: z.lazy(() =>
    GetAllPromptsDataPromptsResponse200Metadata$inboundSchema
  ),
  commit: z.string(),
  timestamp: z.string(),
}).transform((v) => {
  return remap$(v, {
    "_id": "id",
    "created_by_id": "createdById",
    "display_name": "displayName",
    "updated_by_id": "updatedById",
    "prompt_config": "promptConfig",
  });
});

/** @internal */
export type DataVersions$Outbound = {
  _id: string;
  created_by_id: string;
  display_name: string;
  updated_by_id: string;
  description?: string | null | undefined;
  prompt_config: GetAllPromptsDataPromptsResponse200PromptConfig$Outbound;
  metadata: GetAllPromptsDataPromptsResponse200Metadata$Outbound;
  commit: string;
  timestamp: string;
};

/** @internal */
export const DataVersions$outboundSchema: z.ZodType<
  DataVersions$Outbound,
  z.ZodTypeDef,
  DataVersions
> = z.object({
  id: z.string(),
  createdById: z.string(),
  displayName: z.string(),
  updatedById: z.string(),
  description: z.nullable(z.string()).optional(),
  promptConfig: z.lazy(() =>
    GetAllPromptsDataPromptsResponse200PromptConfig$outboundSchema
  ),
  metadata: z.lazy(() =>
    GetAllPromptsDataPromptsResponse200Metadata$outboundSchema
  ),
  commit: z.string(),
  timestamp: z.string(),
}).transform((v) => {
  return remap$(v, {
    id: "_id",
    createdById: "created_by_id",
    displayName: "display_name",
    updatedById: "updated_by_id",
    promptConfig: "prompt_config",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DataVersions$ {
  /** @deprecated use `DataVersions$inboundSchema` instead. */
  export const inboundSchema = DataVersions$inboundSchema;
  /** @deprecated use `DataVersions$outboundSchema` instead. */
  export const outboundSchema = DataVersions$outboundSchema;
  /** @deprecated use `DataVersions$Outbound` instead. */
  export type Outbound = DataVersions$Outbound;
}

export function dataVersionsToJSON(dataVersions: DataVersions): string {
  return JSON.stringify(DataVersions$outboundSchema.parse(dataVersions));
}

export function dataVersionsFromJSON(
  jsonString: string,
): SafeParseResult<DataVersions, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DataVersions$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DataVersions' from JSON`,
  );
}

/** @internal */
export const DataType$inboundSchema: z.ZodNativeEnum<typeof DataType> = z
  .nativeEnum(DataType);

/** @internal */
export const DataType$outboundSchema: z.ZodNativeEnum<typeof DataType> =
  DataType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DataType$ {
  /** @deprecated use `DataType$inboundSchema` instead. */
  export const inboundSchema = DataType$inboundSchema;
  /** @deprecated use `DataType$outboundSchema` instead. */
  export const outboundSchema = DataType$outboundSchema;
}

/** @internal */
export const GetAllPromptsData1$inboundSchema: z.ZodType<
  GetAllPromptsData1,
  z.ZodTypeDef,
  unknown
> = z.object({
  _id: z.string(),
  owner: z.union([z.string(), GetAllPromptsOwner2$inboundSchema]),
  domain_id: z.string(),
  created_by_id: z.string(),
  display_name: z.string(),
  updated_by_id: z.string(),
  description: z.nullable(z.string()).optional(),
  prompt_config: z.lazy(() => DataPromptConfig$inboundSchema),
  metadata: z.lazy(() => DataMetadata$inboundSchema),
  created: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
  updated: z.string().datetime({ offset: true }).default(
    "2025-01-21T09:55:10.979Z",
  ).transform(v => new Date(v)),
  versions: z.array(z.lazy(() => DataVersions$inboundSchema)),
  type: DataType$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "_id": "id",
    "domain_id": "domainId",
    "created_by_id": "createdById",
    "display_name": "displayName",
    "updated_by_id": "updatedById",
    "prompt_config": "promptConfig",
  });
});

/** @internal */
export type GetAllPromptsData1$Outbound = {
  _id: string;
  owner: string | string;
  domain_id: string;
  created_by_id: string;
  display_name: string;
  updated_by_id: string;
  description?: string | null | undefined;
  prompt_config: DataPromptConfig$Outbound;
  metadata: DataMetadata$Outbound;
  created?: string | undefined;
  updated: string;
  versions: Array<DataVersions$Outbound>;
  type: string;
};

/** @internal */
export const GetAllPromptsData1$outboundSchema: z.ZodType<
  GetAllPromptsData1$Outbound,
  z.ZodTypeDef,
  GetAllPromptsData1
> = z.object({
  id: z.string(),
  owner: z.union([z.string(), GetAllPromptsOwner2$outboundSchema]),
  domainId: z.string(),
  createdById: z.string(),
  displayName: z.string(),
  updatedById: z.string(),
  description: z.nullable(z.string()).optional(),
  promptConfig: z.lazy(() => DataPromptConfig$outboundSchema),
  metadata: z.lazy(() => DataMetadata$outboundSchema),
  created: z.date().transform(v => v.toISOString()).optional(),
  updated: z.date().default(() => new Date("2025-01-21T09:55:10.979Z"))
    .transform(v => v.toISOString()),
  versions: z.array(z.lazy(() => DataVersions$outboundSchema)),
  type: DataType$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    id: "_id",
    domainId: "domain_id",
    createdById: "created_by_id",
    displayName: "display_name",
    updatedById: "updated_by_id",
    promptConfig: "prompt_config",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPromptsData1$ {
  /** @deprecated use `GetAllPromptsData1$inboundSchema` instead. */
  export const inboundSchema = GetAllPromptsData1$inboundSchema;
  /** @deprecated use `GetAllPromptsData1$outboundSchema` instead. */
  export const outboundSchema = GetAllPromptsData1$outboundSchema;
  /** @deprecated use `GetAllPromptsData1$Outbound` instead. */
  export type Outbound = GetAllPromptsData1$Outbound;
}

export function getAllPromptsData1ToJSON(
  getAllPromptsData1: GetAllPromptsData1,
): string {
  return JSON.stringify(
    GetAllPromptsData1$outboundSchema.parse(getAllPromptsData1),
  );
}

export function getAllPromptsData1FromJSON(
  jsonString: string,
): SafeParseResult<GetAllPromptsData1, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetAllPromptsData1$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetAllPromptsData1' from JSON`,
  );
}

/** @internal */
export const GetAllPromptsData$inboundSchema: z.ZodType<
  GetAllPromptsData,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => GetAllPromptsData1$inboundSchema),
  z.lazy(() => GetAllPromptsData3$inboundSchema),
  z.lazy(() => GetAllPromptsData2$inboundSchema),
]);

/** @internal */
export type GetAllPromptsData$Outbound =
  | GetAllPromptsData1$Outbound
  | GetAllPromptsData3$Outbound
  | GetAllPromptsData2$Outbound;

/** @internal */
export const GetAllPromptsData$outboundSchema: z.ZodType<
  GetAllPromptsData$Outbound,
  z.ZodTypeDef,
  GetAllPromptsData
> = z.union([
  z.lazy(() => GetAllPromptsData1$outboundSchema),
  z.lazy(() => GetAllPromptsData3$outboundSchema),
  z.lazy(() => GetAllPromptsData2$outboundSchema),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPromptsData$ {
  /** @deprecated use `GetAllPromptsData$inboundSchema` instead. */
  export const inboundSchema = GetAllPromptsData$inboundSchema;
  /** @deprecated use `GetAllPromptsData$outboundSchema` instead. */
  export const outboundSchema = GetAllPromptsData$outboundSchema;
  /** @deprecated use `GetAllPromptsData$Outbound` instead. */
  export type Outbound = GetAllPromptsData$Outbound;
}

export function getAllPromptsDataToJSON(
  getAllPromptsData: GetAllPromptsData,
): string {
  return JSON.stringify(
    GetAllPromptsData$outboundSchema.parse(getAllPromptsData),
  );
}

export function getAllPromptsDataFromJSON(
  jsonString: string,
): SafeParseResult<GetAllPromptsData, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetAllPromptsData$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetAllPromptsData' from JSON`,
  );
}

/** @internal */
export const GetAllPromptsResponseBody$inboundSchema: z.ZodType<
  GetAllPromptsResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  object: GetAllPromptsObject$inboundSchema,
  data: z.array(
    z.union([
      z.lazy(() => GetAllPromptsData1$inboundSchema),
      z.lazy(() => GetAllPromptsData3$inboundSchema),
      z.lazy(() => GetAllPromptsData2$inboundSchema),
    ]),
  ),
  has_more: z.boolean(),
}).transform((v) => {
  return remap$(v, {
    "has_more": "hasMore",
  });
});

/** @internal */
export type GetAllPromptsResponseBody$Outbound = {
  object: string;
  data: Array<
    | GetAllPromptsData1$Outbound
    | GetAllPromptsData3$Outbound
    | GetAllPromptsData2$Outbound
  >;
  has_more: boolean;
};

/** @internal */
export const GetAllPromptsResponseBody$outboundSchema: z.ZodType<
  GetAllPromptsResponseBody$Outbound,
  z.ZodTypeDef,
  GetAllPromptsResponseBody
> = z.object({
  object: GetAllPromptsObject$outboundSchema,
  data: z.array(
    z.union([
      z.lazy(() => GetAllPromptsData1$outboundSchema),
      z.lazy(() => GetAllPromptsData3$outboundSchema),
      z.lazy(() => GetAllPromptsData2$outboundSchema),
    ]),
  ),
  hasMore: z.boolean(),
}).transform((v) => {
  return remap$(v, {
    hasMore: "has_more",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPromptsResponseBody$ {
  /** @deprecated use `GetAllPromptsResponseBody$inboundSchema` instead. */
  export const inboundSchema = GetAllPromptsResponseBody$inboundSchema;
  /** @deprecated use `GetAllPromptsResponseBody$outboundSchema` instead. */
  export const outboundSchema = GetAllPromptsResponseBody$outboundSchema;
  /** @deprecated use `GetAllPromptsResponseBody$Outbound` instead. */
  export type Outbound = GetAllPromptsResponseBody$Outbound;
}

export function getAllPromptsResponseBodyToJSON(
  getAllPromptsResponseBody: GetAllPromptsResponseBody,
): string {
  return JSON.stringify(
    GetAllPromptsResponseBody$outboundSchema.parse(getAllPromptsResponseBody),
  );
}

export function getAllPromptsResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<GetAllPromptsResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetAllPromptsResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetAllPromptsResponseBody' from JSON`,
  );
}
