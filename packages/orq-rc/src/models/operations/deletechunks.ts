/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type DeleteChunksRequestBody = {
  /**
   * Array of chunk IDs to delete
   */
  chunkIds: Array<string>;
};

export type DeleteChunksRequest = {
  /**
   * The unique identifier of the knowledge base
   */
  knowledgeId: string;
  /**
   * The unique identifier of the datasource.
   */
  datasourceId: string;
  requestBody?: DeleteChunksRequestBody | undefined;
};

/**
 * Chunks deletion result
 */
export type DeleteChunksResponseBody = {
  /**
   * Number of chunks successfully deleted
   */
  deletedCount: number;
  /**
   * Array of chunk IDs that failed to delete
   */
  failedIds?: Array<string> | undefined;
};

/** @internal */
export const DeleteChunksRequestBody$inboundSchema: z.ZodType<
  DeleteChunksRequestBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  chunk_ids: z.array(z.string()),
}).transform((v) => {
  return remap$(v, {
    "chunk_ids": "chunkIds",
  });
});

/** @internal */
export type DeleteChunksRequestBody$Outbound = {
  chunk_ids: Array<string>;
};

/** @internal */
export const DeleteChunksRequestBody$outboundSchema: z.ZodType<
  DeleteChunksRequestBody$Outbound,
  z.ZodTypeDef,
  DeleteChunksRequestBody
> = z.object({
  chunkIds: z.array(z.string()),
}).transform((v) => {
  return remap$(v, {
    chunkIds: "chunk_ids",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeleteChunksRequestBody$ {
  /** @deprecated use `DeleteChunksRequestBody$inboundSchema` instead. */
  export const inboundSchema = DeleteChunksRequestBody$inboundSchema;
  /** @deprecated use `DeleteChunksRequestBody$outboundSchema` instead. */
  export const outboundSchema = DeleteChunksRequestBody$outboundSchema;
  /** @deprecated use `DeleteChunksRequestBody$Outbound` instead. */
  export type Outbound = DeleteChunksRequestBody$Outbound;
}

export function deleteChunksRequestBodyToJSON(
  deleteChunksRequestBody: DeleteChunksRequestBody,
): string {
  return JSON.stringify(
    DeleteChunksRequestBody$outboundSchema.parse(deleteChunksRequestBody),
  );
}

export function deleteChunksRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<DeleteChunksRequestBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DeleteChunksRequestBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DeleteChunksRequestBody' from JSON`,
  );
}

/** @internal */
export const DeleteChunksRequest$inboundSchema: z.ZodType<
  DeleteChunksRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  knowledge_id: z.string(),
  datasource_id: z.string(),
  RequestBody: z.lazy(() => DeleteChunksRequestBody$inboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    "knowledge_id": "knowledgeId",
    "datasource_id": "datasourceId",
    "RequestBody": "requestBody",
  });
});

/** @internal */
export type DeleteChunksRequest$Outbound = {
  knowledge_id: string;
  datasource_id: string;
  RequestBody?: DeleteChunksRequestBody$Outbound | undefined;
};

/** @internal */
export const DeleteChunksRequest$outboundSchema: z.ZodType<
  DeleteChunksRequest$Outbound,
  z.ZodTypeDef,
  DeleteChunksRequest
> = z.object({
  knowledgeId: z.string(),
  datasourceId: z.string(),
  requestBody: z.lazy(() => DeleteChunksRequestBody$outboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    knowledgeId: "knowledge_id",
    datasourceId: "datasource_id",
    requestBody: "RequestBody",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeleteChunksRequest$ {
  /** @deprecated use `DeleteChunksRequest$inboundSchema` instead. */
  export const inboundSchema = DeleteChunksRequest$inboundSchema;
  /** @deprecated use `DeleteChunksRequest$outboundSchema` instead. */
  export const outboundSchema = DeleteChunksRequest$outboundSchema;
  /** @deprecated use `DeleteChunksRequest$Outbound` instead. */
  export type Outbound = DeleteChunksRequest$Outbound;
}

export function deleteChunksRequestToJSON(
  deleteChunksRequest: DeleteChunksRequest,
): string {
  return JSON.stringify(
    DeleteChunksRequest$outboundSchema.parse(deleteChunksRequest),
  );
}

export function deleteChunksRequestFromJSON(
  jsonString: string,
): SafeParseResult<DeleteChunksRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DeleteChunksRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DeleteChunksRequest' from JSON`,
  );
}

/** @internal */
export const DeleteChunksResponseBody$inboundSchema: z.ZodType<
  DeleteChunksResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  deleted_count: z.number(),
  failed_ids: z.array(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    "deleted_count": "deletedCount",
    "failed_ids": "failedIds",
  });
});

/** @internal */
export type DeleteChunksResponseBody$Outbound = {
  deleted_count: number;
  failed_ids?: Array<string> | undefined;
};

/** @internal */
export const DeleteChunksResponseBody$outboundSchema: z.ZodType<
  DeleteChunksResponseBody$Outbound,
  z.ZodTypeDef,
  DeleteChunksResponseBody
> = z.object({
  deletedCount: z.number(),
  failedIds: z.array(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    deletedCount: "deleted_count",
    failedIds: "failed_ids",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeleteChunksResponseBody$ {
  /** @deprecated use `DeleteChunksResponseBody$inboundSchema` instead. */
  export const inboundSchema = DeleteChunksResponseBody$inboundSchema;
  /** @deprecated use `DeleteChunksResponseBody$outboundSchema` instead. */
  export const outboundSchema = DeleteChunksResponseBody$outboundSchema;
  /** @deprecated use `DeleteChunksResponseBody$Outbound` instead. */
  export type Outbound = DeleteChunksResponseBody$Outbound;
}

export function deleteChunksResponseBodyToJSON(
  deleteChunksResponseBody: DeleteChunksResponseBody,
): string {
  return JSON.stringify(
    DeleteChunksResponseBody$outboundSchema.parse(deleteChunksResponseBody),
  );
}

export function deleteChunksResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<DeleteChunksResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DeleteChunksResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DeleteChunksResponseBody' from JSON`,
  );
}
