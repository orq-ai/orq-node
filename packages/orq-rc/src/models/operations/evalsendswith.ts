/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type EvalsEndsWithFunctionParams = {
  value: string;
};

export type EvalsEndsWithRequestBody = {
  output: string;
  functionParams: EvalsEndsWithFunctionParams;
};

export type EvalsEndsWithValue = boolean | string | number;

/**
 * Returns the result of the evaluator run
 */
export type EvalsEndsWithResponseBody = {
  value: boolean | string | number | null;
};

/** @internal */
export const EvalsEndsWithFunctionParams$inboundSchema: z.ZodType<
  EvalsEndsWithFunctionParams,
  z.ZodTypeDef,
  unknown
> = z.object({
  value: z.string(),
});

/** @internal */
export type EvalsEndsWithFunctionParams$Outbound = {
  value: string;
};

/** @internal */
export const EvalsEndsWithFunctionParams$outboundSchema: z.ZodType<
  EvalsEndsWithFunctionParams$Outbound,
  z.ZodTypeDef,
  EvalsEndsWithFunctionParams
> = z.object({
  value: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EvalsEndsWithFunctionParams$ {
  /** @deprecated use `EvalsEndsWithFunctionParams$inboundSchema` instead. */
  export const inboundSchema = EvalsEndsWithFunctionParams$inboundSchema;
  /** @deprecated use `EvalsEndsWithFunctionParams$outboundSchema` instead. */
  export const outboundSchema = EvalsEndsWithFunctionParams$outboundSchema;
  /** @deprecated use `EvalsEndsWithFunctionParams$Outbound` instead. */
  export type Outbound = EvalsEndsWithFunctionParams$Outbound;
}

export function evalsEndsWithFunctionParamsToJSON(
  evalsEndsWithFunctionParams: EvalsEndsWithFunctionParams,
): string {
  return JSON.stringify(
    EvalsEndsWithFunctionParams$outboundSchema.parse(
      evalsEndsWithFunctionParams,
    ),
  );
}

export function evalsEndsWithFunctionParamsFromJSON(
  jsonString: string,
): SafeParseResult<EvalsEndsWithFunctionParams, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => EvalsEndsWithFunctionParams$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'EvalsEndsWithFunctionParams' from JSON`,
  );
}

/** @internal */
export const EvalsEndsWithRequestBody$inboundSchema: z.ZodType<
  EvalsEndsWithRequestBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  output: z.string(),
  function_params: z.lazy(() => EvalsEndsWithFunctionParams$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "function_params": "functionParams",
  });
});

/** @internal */
export type EvalsEndsWithRequestBody$Outbound = {
  output: string;
  function_params: EvalsEndsWithFunctionParams$Outbound;
};

/** @internal */
export const EvalsEndsWithRequestBody$outboundSchema: z.ZodType<
  EvalsEndsWithRequestBody$Outbound,
  z.ZodTypeDef,
  EvalsEndsWithRequestBody
> = z.object({
  output: z.string(),
  functionParams: z.lazy(() => EvalsEndsWithFunctionParams$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    functionParams: "function_params",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EvalsEndsWithRequestBody$ {
  /** @deprecated use `EvalsEndsWithRequestBody$inboundSchema` instead. */
  export const inboundSchema = EvalsEndsWithRequestBody$inboundSchema;
  /** @deprecated use `EvalsEndsWithRequestBody$outboundSchema` instead. */
  export const outboundSchema = EvalsEndsWithRequestBody$outboundSchema;
  /** @deprecated use `EvalsEndsWithRequestBody$Outbound` instead. */
  export type Outbound = EvalsEndsWithRequestBody$Outbound;
}

export function evalsEndsWithRequestBodyToJSON(
  evalsEndsWithRequestBody: EvalsEndsWithRequestBody,
): string {
  return JSON.stringify(
    EvalsEndsWithRequestBody$outboundSchema.parse(evalsEndsWithRequestBody),
  );
}

export function evalsEndsWithRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<EvalsEndsWithRequestBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => EvalsEndsWithRequestBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'EvalsEndsWithRequestBody' from JSON`,
  );
}

/** @internal */
export const EvalsEndsWithValue$inboundSchema: z.ZodType<
  EvalsEndsWithValue,
  z.ZodTypeDef,
  unknown
> = z.union([z.boolean(), z.string(), z.number()]);

/** @internal */
export type EvalsEndsWithValue$Outbound = boolean | string | number;

/** @internal */
export const EvalsEndsWithValue$outboundSchema: z.ZodType<
  EvalsEndsWithValue$Outbound,
  z.ZodTypeDef,
  EvalsEndsWithValue
> = z.union([z.boolean(), z.string(), z.number()]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EvalsEndsWithValue$ {
  /** @deprecated use `EvalsEndsWithValue$inboundSchema` instead. */
  export const inboundSchema = EvalsEndsWithValue$inboundSchema;
  /** @deprecated use `EvalsEndsWithValue$outboundSchema` instead. */
  export const outboundSchema = EvalsEndsWithValue$outboundSchema;
  /** @deprecated use `EvalsEndsWithValue$Outbound` instead. */
  export type Outbound = EvalsEndsWithValue$Outbound;
}

export function evalsEndsWithValueToJSON(
  evalsEndsWithValue: EvalsEndsWithValue,
): string {
  return JSON.stringify(
    EvalsEndsWithValue$outboundSchema.parse(evalsEndsWithValue),
  );
}

export function evalsEndsWithValueFromJSON(
  jsonString: string,
): SafeParseResult<EvalsEndsWithValue, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => EvalsEndsWithValue$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'EvalsEndsWithValue' from JSON`,
  );
}

/** @internal */
export const EvalsEndsWithResponseBody$inboundSchema: z.ZodType<
  EvalsEndsWithResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  value: z.nullable(z.union([z.boolean(), z.string(), z.number()])),
});

/** @internal */
export type EvalsEndsWithResponseBody$Outbound = {
  value: boolean | string | number | null;
};

/** @internal */
export const EvalsEndsWithResponseBody$outboundSchema: z.ZodType<
  EvalsEndsWithResponseBody$Outbound,
  z.ZodTypeDef,
  EvalsEndsWithResponseBody
> = z.object({
  value: z.nullable(z.union([z.boolean(), z.string(), z.number()])),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EvalsEndsWithResponseBody$ {
  /** @deprecated use `EvalsEndsWithResponseBody$inboundSchema` instead. */
  export const inboundSchema = EvalsEndsWithResponseBody$inboundSchema;
  /** @deprecated use `EvalsEndsWithResponseBody$outboundSchema` instead. */
  export const outboundSchema = EvalsEndsWithResponseBody$outboundSchema;
  /** @deprecated use `EvalsEndsWithResponseBody$Outbound` instead. */
  export type Outbound = EvalsEndsWithResponseBody$Outbound;
}

export function evalsEndsWithResponseBodyToJSON(
  evalsEndsWithResponseBody: EvalsEndsWithResponseBody,
): string {
  return JSON.stringify(
    EvalsEndsWithResponseBody$outboundSchema.parse(evalsEndsWithResponseBody),
  );
}

export function evalsEndsWithResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<EvalsEndsWithResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => EvalsEndsWithResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'EvalsEndsWithResponseBody' from JSON`,
  );
}
