/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type GetAllMemoryDocumentsRequest = {
  /**
   * The unique key identifier of the memory store
   */
  memoryStoreKey: string;
  /**
   * The unique identifier of the memory
   */
  memoryId: string;
  /**
   * A limit on the number of objects to be returned. Limit can range between 1 and 50, and the default is 10
   */
  limit?: number | undefined;
  /**
   * A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 20 objects, ending with `01JJ1HDHN79XAS7A01WB3HYSDB`, your subsequent call can include `after=01JJ1HDHN79XAS7A01WB3HYSDB` in order to fetch the next page of the list.
   */
  startingAfter?: string | undefined;
  /**
   * A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 20 objects, starting with `01JJ1HDHN79XAS7A01WB3HYSDB`, your subsequent call can include `before=01JJ1HDHN79XAS7A01WB3HYSDB` in order to fetch the previous page of the list.
   */
  endingBefore?: string | undefined;
};

export const GetAllMemoryDocumentsObject = {
  List: "list",
} as const;
export type GetAllMemoryDocumentsObject = ClosedEnum<
  typeof GetAllMemoryDocumentsObject
>;

export type GetAllMemoryDocumentsData = {
  id: string;
  memoryId: string;
  storeId: string;
  text: string;
  created: string;
  updated: string;
  createdById?: string | undefined;
  updatedById?: string | undefined;
  workspaceId: string;
  tags?: { [k: string]: string } | undefined;
};

/**
 * Successfully retrieved the list of memory documents.
 */
export type GetAllMemoryDocumentsResponseBody = {
  object: GetAllMemoryDocumentsObject;
  data: Array<GetAllMemoryDocumentsData>;
  hasMore: boolean;
};

/** @internal */
export const GetAllMemoryDocumentsRequest$inboundSchema: z.ZodType<
  GetAllMemoryDocumentsRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  memory_store_key: z.string(),
  memory_id: z.string(),
  limit: z.number().default(10),
  starting_after: z.string().optional(),
  ending_before: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "memory_store_key": "memoryStoreKey",
    "memory_id": "memoryId",
    "starting_after": "startingAfter",
    "ending_before": "endingBefore",
  });
});

/** @internal */
export type GetAllMemoryDocumentsRequest$Outbound = {
  memory_store_key: string;
  memory_id: string;
  limit: number;
  starting_after?: string | undefined;
  ending_before?: string | undefined;
};

/** @internal */
export const GetAllMemoryDocumentsRequest$outboundSchema: z.ZodType<
  GetAllMemoryDocumentsRequest$Outbound,
  z.ZodTypeDef,
  GetAllMemoryDocumentsRequest
> = z.object({
  memoryStoreKey: z.string(),
  memoryId: z.string(),
  limit: z.number().default(10),
  startingAfter: z.string().optional(),
  endingBefore: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    memoryStoreKey: "memory_store_key",
    memoryId: "memory_id",
    startingAfter: "starting_after",
    endingBefore: "ending_before",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllMemoryDocumentsRequest$ {
  /** @deprecated use `GetAllMemoryDocumentsRequest$inboundSchema` instead. */
  export const inboundSchema = GetAllMemoryDocumentsRequest$inboundSchema;
  /** @deprecated use `GetAllMemoryDocumentsRequest$outboundSchema` instead. */
  export const outboundSchema = GetAllMemoryDocumentsRequest$outboundSchema;
  /** @deprecated use `GetAllMemoryDocumentsRequest$Outbound` instead. */
  export type Outbound = GetAllMemoryDocumentsRequest$Outbound;
}

export function getAllMemoryDocumentsRequestToJSON(
  getAllMemoryDocumentsRequest: GetAllMemoryDocumentsRequest,
): string {
  return JSON.stringify(
    GetAllMemoryDocumentsRequest$outboundSchema.parse(
      getAllMemoryDocumentsRequest,
    ),
  );
}

export function getAllMemoryDocumentsRequestFromJSON(
  jsonString: string,
): SafeParseResult<GetAllMemoryDocumentsRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetAllMemoryDocumentsRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetAllMemoryDocumentsRequest' from JSON`,
  );
}

/** @internal */
export const GetAllMemoryDocumentsObject$inboundSchema: z.ZodNativeEnum<
  typeof GetAllMemoryDocumentsObject
> = z.nativeEnum(GetAllMemoryDocumentsObject);

/** @internal */
export const GetAllMemoryDocumentsObject$outboundSchema: z.ZodNativeEnum<
  typeof GetAllMemoryDocumentsObject
> = GetAllMemoryDocumentsObject$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllMemoryDocumentsObject$ {
  /** @deprecated use `GetAllMemoryDocumentsObject$inboundSchema` instead. */
  export const inboundSchema = GetAllMemoryDocumentsObject$inboundSchema;
  /** @deprecated use `GetAllMemoryDocumentsObject$outboundSchema` instead. */
  export const outboundSchema = GetAllMemoryDocumentsObject$outboundSchema;
}

/** @internal */
export const GetAllMemoryDocumentsData$inboundSchema: z.ZodType<
  GetAllMemoryDocumentsData,
  z.ZodTypeDef,
  unknown
> = z.object({
  _id: z.string(),
  memory_id: z.string(),
  store_id: z.string(),
  text: z.string(),
  created: z.string(),
  updated: z.string(),
  created_by_id: z.string().optional(),
  updated_by_id: z.string().optional(),
  workspace_id: z.string(),
  tags: z.record(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    "_id": "id",
    "memory_id": "memoryId",
    "store_id": "storeId",
    "created_by_id": "createdById",
    "updated_by_id": "updatedById",
    "workspace_id": "workspaceId",
  });
});

/** @internal */
export type GetAllMemoryDocumentsData$Outbound = {
  _id: string;
  memory_id: string;
  store_id: string;
  text: string;
  created: string;
  updated: string;
  created_by_id?: string | undefined;
  updated_by_id?: string | undefined;
  workspace_id: string;
  tags?: { [k: string]: string } | undefined;
};

/** @internal */
export const GetAllMemoryDocumentsData$outboundSchema: z.ZodType<
  GetAllMemoryDocumentsData$Outbound,
  z.ZodTypeDef,
  GetAllMemoryDocumentsData
> = z.object({
  id: z.string(),
  memoryId: z.string(),
  storeId: z.string(),
  text: z.string(),
  created: z.string(),
  updated: z.string(),
  createdById: z.string().optional(),
  updatedById: z.string().optional(),
  workspaceId: z.string(),
  tags: z.record(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    id: "_id",
    memoryId: "memory_id",
    storeId: "store_id",
    createdById: "created_by_id",
    updatedById: "updated_by_id",
    workspaceId: "workspace_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllMemoryDocumentsData$ {
  /** @deprecated use `GetAllMemoryDocumentsData$inboundSchema` instead. */
  export const inboundSchema = GetAllMemoryDocumentsData$inboundSchema;
  /** @deprecated use `GetAllMemoryDocumentsData$outboundSchema` instead. */
  export const outboundSchema = GetAllMemoryDocumentsData$outboundSchema;
  /** @deprecated use `GetAllMemoryDocumentsData$Outbound` instead. */
  export type Outbound = GetAllMemoryDocumentsData$Outbound;
}

export function getAllMemoryDocumentsDataToJSON(
  getAllMemoryDocumentsData: GetAllMemoryDocumentsData,
): string {
  return JSON.stringify(
    GetAllMemoryDocumentsData$outboundSchema.parse(getAllMemoryDocumentsData),
  );
}

export function getAllMemoryDocumentsDataFromJSON(
  jsonString: string,
): SafeParseResult<GetAllMemoryDocumentsData, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetAllMemoryDocumentsData$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetAllMemoryDocumentsData' from JSON`,
  );
}

/** @internal */
export const GetAllMemoryDocumentsResponseBody$inboundSchema: z.ZodType<
  GetAllMemoryDocumentsResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  object: GetAllMemoryDocumentsObject$inboundSchema,
  data: z.array(z.lazy(() => GetAllMemoryDocumentsData$inboundSchema)),
  has_more: z.boolean(),
}).transform((v) => {
  return remap$(v, {
    "has_more": "hasMore",
  });
});

/** @internal */
export type GetAllMemoryDocumentsResponseBody$Outbound = {
  object: string;
  data: Array<GetAllMemoryDocumentsData$Outbound>;
  has_more: boolean;
};

/** @internal */
export const GetAllMemoryDocumentsResponseBody$outboundSchema: z.ZodType<
  GetAllMemoryDocumentsResponseBody$Outbound,
  z.ZodTypeDef,
  GetAllMemoryDocumentsResponseBody
> = z.object({
  object: GetAllMemoryDocumentsObject$outboundSchema,
  data: z.array(z.lazy(() => GetAllMemoryDocumentsData$outboundSchema)),
  hasMore: z.boolean(),
}).transform((v) => {
  return remap$(v, {
    hasMore: "has_more",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllMemoryDocumentsResponseBody$ {
  /** @deprecated use `GetAllMemoryDocumentsResponseBody$inboundSchema` instead. */
  export const inboundSchema = GetAllMemoryDocumentsResponseBody$inboundSchema;
  /** @deprecated use `GetAllMemoryDocumentsResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    GetAllMemoryDocumentsResponseBody$outboundSchema;
  /** @deprecated use `GetAllMemoryDocumentsResponseBody$Outbound` instead. */
  export type Outbound = GetAllMemoryDocumentsResponseBody$Outbound;
}

export function getAllMemoryDocumentsResponseBodyToJSON(
  getAllMemoryDocumentsResponseBody: GetAllMemoryDocumentsResponseBody,
): string {
  return JSON.stringify(
    GetAllMemoryDocumentsResponseBody$outboundSchema.parse(
      getAllMemoryDocumentsResponseBody,
    ),
  );
}

export function getAllMemoryDocumentsResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<GetAllMemoryDocumentsResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetAllMemoryDocumentsResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetAllMemoryDocumentsResponseBody' from JSON`,
  );
}
