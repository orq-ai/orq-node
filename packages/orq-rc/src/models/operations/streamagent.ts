/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * Tool message
 */
export const StreamAgentRoleToolMessage = {
  Tool: "tool",
} as const;
/**
 * Tool message
 */
export type StreamAgentRoleToolMessage = ClosedEnum<
  typeof StreamAgentRoleToolMessage
>;

/**
 * User message
 */
export const StreamAgentRoleUserMessage = {
  User: "user",
} as const;
/**
 * User message
 */
export type StreamAgentRoleUserMessage = ClosedEnum<
  typeof StreamAgentRoleUserMessage
>;

/**
 * Message role (user or tool for continuing executions)
 */
export type StreamAgentRole =
  | StreamAgentRoleUserMessage
  | StreamAgentRoleToolMessage;

export const StreamAgentPublicMessagePartAgentsRequestKind = {
  ToolResult: "tool_result",
} as const;
export type StreamAgentPublicMessagePartAgentsRequestKind = ClosedEnum<
  typeof StreamAgentPublicMessagePartAgentsRequestKind
>;

/**
 * Tool execution result part. Use this ONLY when providing results for a pending tool call from the agent. The tool_call_id must match the ID from the agent's tool call request.
 */
export type StreamAgentPublicMessagePartToolResultPart = {
  kind: StreamAgentPublicMessagePartAgentsRequestKind;
  toolCallId: string;
  result?: any | undefined;
  metadata?: { [k: string]: any } | undefined;
};

export const StreamAgentPublicMessagePartAgentsKind = {
  File: "file",
} as const;
export type StreamAgentPublicMessagePartAgentsKind = ClosedEnum<
  typeof StreamAgentPublicMessagePartAgentsKind
>;

/**
 * File in URI format. Check in the model's documentation for the supported mime types for the URI format
 */
export type StreamAgentFileFileInURIFormat = {
  /**
   * URL for the File content
   */
  uri: string;
  /**
   * Optional mimeType for the file
   */
  mimeType?: string | undefined;
  /**
   * Optional name for the file
   */
  name?: string | undefined;
};

/**
 * Binary in base64 format. Check in the model's documentation for the supported mime types for the binary format.
 */
export type StreamAgentFileBinaryFormat = {
  /**
   * base64 encoded content of the file
   */
  bytes: string;
  /**
   * Optional mimeType for the file
   */
  mimeType?: string | undefined;
  /**
   * Optional name for the file
   */
  name?: string | undefined;
};

export type StreamAgentPublicMessagePartFile =
  | StreamAgentFileBinaryFormat
  | StreamAgentFileFileInURIFormat;

/**
 * File attachment part. Use this to send files (images, documents, etc.) to the agent for processing.
 */
export type StreamAgentPublicMessagePartFilePart = {
  kind: StreamAgentPublicMessagePartAgentsKind;
  file: StreamAgentFileBinaryFormat | StreamAgentFileFileInURIFormat;
  metadata?: { [k: string]: any } | undefined;
};

export const StreamAgentPublicMessagePartKind = {
  Text: "text",
} as const;
export type StreamAgentPublicMessagePartKind = ClosedEnum<
  typeof StreamAgentPublicMessagePartKind
>;

/**
 * Text content part. Use this to send text messages to the agent.
 */
export type StreamAgentPublicMessagePartTextPart = {
  kind: StreamAgentPublicMessagePartKind;
  text: string;
};

/**
 * Message part that can be provided by users. Use "text" for regular messages, "file" for attachments, or "tool_result" when responding to tool call requests.
 */
export type StreamAgentPublicMessagePart =
  | StreamAgentPublicMessagePartTextPart
  | StreamAgentPublicMessagePartFilePart
  | StreamAgentPublicMessagePartToolResultPart;

export type StreamAgentMessage = {
  /**
   * Optional A2A message ID in ULID format
   */
  messageId?: string | undefined;
  /**
   * Message role (user or tool for continuing executions)
   */
  role: StreamAgentRoleUserMessage | StreamAgentRoleToolMessage;
  /**
   * A2A message parts (text, file, or tool_result only)
   */
  parts: Array<
    | StreamAgentPublicMessagePartTextPart
    | StreamAgentPublicMessagePartFilePart
    | StreamAgentPublicMessagePartToolResultPart
  >;
};

/**
 * Information about the contact making the request. If the contact does not exist, it will be created automatically.
 */
export type StreamAgentContact = {
  /**
   * Unique identifier for the contact
   */
  id: string;
  /**
   * Display name of the contact
   */
  displayName?: string | undefined;
  /**
   * Email address of the contact
   */
  email?: string | undefined;
  /**
   * A hash of key/value pairs containing any other data about the contact
   */
  metadata?: Array<{ [k: string]: any }> | undefined;
  /**
   * URL to the contact's avatar or logo
   */
  logoUrl?: string | undefined;
  /**
   * A list of tags associated with the contact
   */
  tags?: Array<string> | undefined;
};

/**
 * Thread information to group related requests
 */
export type StreamAgentThread = {
  /**
   * Unique thread identifier to group related invocations.
   */
  id: string;
  /**
   * Optional tags to differentiate or categorize threads
   */
  tags?: Array<string> | undefined;
};

/**
 * Memory configuration for the agent execution. Used to associate memory stores with specific entities like users or sessions.
 */
export type StreamAgentMemory = {
  /**
   * An entity ID used to link memory stores to a specific user, session, or conversation. This ID is used to isolate and retrieve memories specific to the entity across agent executions.
   */
  entityId: string;
};

export type StreamAgentRequestBody = {
  /**
   * Optional task ID to continue an existing agent execution. When provided, the agent will continue the conversation from the existing task state. The task must be in an inactive state to continue.
   */
  taskId?: string | undefined;
  message: StreamAgentMessage;
  /**
   * Optional variables for template replacement in system prompt, instructions, and messages
   */
  variables?: { [k: string]: any } | undefined;
  /**
   * Information about the contact making the request. If the contact does not exist, it will be created automatically.
   */
  contact?: StreamAgentContact | undefined;
  /**
   * Thread information to group related requests
   */
  thread?: StreamAgentThread | undefined;
  /**
   * Memory configuration for the agent execution. Used to associate memory stores with specific entities like users or sessions.
   */
  memory?: StreamAgentMemory | undefined;
  /**
   * Optional metadata for the agent invocation as key-value pairs that will be included in traces
   */
  metadata?: { [k: string]: any } | undefined;
  /**
   * Stream timeout in seconds (1-3600). Default: 1800 (30 minutes)
   */
  streamTimeoutSeconds?: number | undefined;
};

export type StreamAgentRequest = {
  /**
   * The key or ID of the agent to invoke
   */
  key: string;
  requestBody?: StreamAgentRequestBody | undefined;
};

/**
 * SSE stream of agent events
 */
export type StreamAgentResponseBody = {
  /**
   * JSON-encoded event data
   */
  data: string;
};

/** @internal */
export const StreamAgentRoleToolMessage$inboundSchema: z.ZodNativeEnum<
  typeof StreamAgentRoleToolMessage
> = z.nativeEnum(StreamAgentRoleToolMessage);

/** @internal */
export const StreamAgentRoleToolMessage$outboundSchema: z.ZodNativeEnum<
  typeof StreamAgentRoleToolMessage
> = StreamAgentRoleToolMessage$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace StreamAgentRoleToolMessage$ {
  /** @deprecated use `StreamAgentRoleToolMessage$inboundSchema` instead. */
  export const inboundSchema = StreamAgentRoleToolMessage$inboundSchema;
  /** @deprecated use `StreamAgentRoleToolMessage$outboundSchema` instead. */
  export const outboundSchema = StreamAgentRoleToolMessage$outboundSchema;
}

/** @internal */
export const StreamAgentRoleUserMessage$inboundSchema: z.ZodNativeEnum<
  typeof StreamAgentRoleUserMessage
> = z.nativeEnum(StreamAgentRoleUserMessage);

/** @internal */
export const StreamAgentRoleUserMessage$outboundSchema: z.ZodNativeEnum<
  typeof StreamAgentRoleUserMessage
> = StreamAgentRoleUserMessage$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace StreamAgentRoleUserMessage$ {
  /** @deprecated use `StreamAgentRoleUserMessage$inboundSchema` instead. */
  export const inboundSchema = StreamAgentRoleUserMessage$inboundSchema;
  /** @deprecated use `StreamAgentRoleUserMessage$outboundSchema` instead. */
  export const outboundSchema = StreamAgentRoleUserMessage$outboundSchema;
}

/** @internal */
export const StreamAgentRole$inboundSchema: z.ZodType<
  StreamAgentRole,
  z.ZodTypeDef,
  unknown
> = z.union([
  StreamAgentRoleUserMessage$inboundSchema,
  StreamAgentRoleToolMessage$inboundSchema,
]);

/** @internal */
export type StreamAgentRole$Outbound = string | string;

/** @internal */
export const StreamAgentRole$outboundSchema: z.ZodType<
  StreamAgentRole$Outbound,
  z.ZodTypeDef,
  StreamAgentRole
> = z.union([
  StreamAgentRoleUserMessage$outboundSchema,
  StreamAgentRoleToolMessage$outboundSchema,
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace StreamAgentRole$ {
  /** @deprecated use `StreamAgentRole$inboundSchema` instead. */
  export const inboundSchema = StreamAgentRole$inboundSchema;
  /** @deprecated use `StreamAgentRole$outboundSchema` instead. */
  export const outboundSchema = StreamAgentRole$outboundSchema;
  /** @deprecated use `StreamAgentRole$Outbound` instead. */
  export type Outbound = StreamAgentRole$Outbound;
}

export function streamAgentRoleToJSON(
  streamAgentRole: StreamAgentRole,
): string {
  return JSON.stringify(StreamAgentRole$outboundSchema.parse(streamAgentRole));
}

export function streamAgentRoleFromJSON(
  jsonString: string,
): SafeParseResult<StreamAgentRole, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => StreamAgentRole$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'StreamAgentRole' from JSON`,
  );
}

/** @internal */
export const StreamAgentPublicMessagePartAgentsRequestKind$inboundSchema:
  z.ZodNativeEnum<typeof StreamAgentPublicMessagePartAgentsRequestKind> = z
    .nativeEnum(StreamAgentPublicMessagePartAgentsRequestKind);

/** @internal */
export const StreamAgentPublicMessagePartAgentsRequestKind$outboundSchema:
  z.ZodNativeEnum<typeof StreamAgentPublicMessagePartAgentsRequestKind> =
    StreamAgentPublicMessagePartAgentsRequestKind$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace StreamAgentPublicMessagePartAgentsRequestKind$ {
  /** @deprecated use `StreamAgentPublicMessagePartAgentsRequestKind$inboundSchema` instead. */
  export const inboundSchema =
    StreamAgentPublicMessagePartAgentsRequestKind$inboundSchema;
  /** @deprecated use `StreamAgentPublicMessagePartAgentsRequestKind$outboundSchema` instead. */
  export const outboundSchema =
    StreamAgentPublicMessagePartAgentsRequestKind$outboundSchema;
}

/** @internal */
export const StreamAgentPublicMessagePartToolResultPart$inboundSchema:
  z.ZodType<StreamAgentPublicMessagePartToolResultPart, z.ZodTypeDef, unknown> =
    z.object({
      kind: StreamAgentPublicMessagePartAgentsRequestKind$inboundSchema,
      tool_call_id: z.string(),
      result: z.any().optional(),
      metadata: z.record(z.any()).optional(),
    }).transform((v) => {
      return remap$(v, {
        "tool_call_id": "toolCallId",
      });
    });

/** @internal */
export type StreamAgentPublicMessagePartToolResultPart$Outbound = {
  kind: string;
  tool_call_id: string;
  result?: any | undefined;
  metadata?: { [k: string]: any } | undefined;
};

/** @internal */
export const StreamAgentPublicMessagePartToolResultPart$outboundSchema:
  z.ZodType<
    StreamAgentPublicMessagePartToolResultPart$Outbound,
    z.ZodTypeDef,
    StreamAgentPublicMessagePartToolResultPart
  > = z.object({
    kind: StreamAgentPublicMessagePartAgentsRequestKind$outboundSchema,
    toolCallId: z.string(),
    result: z.any().optional(),
    metadata: z.record(z.any()).optional(),
  }).transform((v) => {
    return remap$(v, {
      toolCallId: "tool_call_id",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace StreamAgentPublicMessagePartToolResultPart$ {
  /** @deprecated use `StreamAgentPublicMessagePartToolResultPart$inboundSchema` instead. */
  export const inboundSchema =
    StreamAgentPublicMessagePartToolResultPart$inboundSchema;
  /** @deprecated use `StreamAgentPublicMessagePartToolResultPart$outboundSchema` instead. */
  export const outboundSchema =
    StreamAgentPublicMessagePartToolResultPart$outboundSchema;
  /** @deprecated use `StreamAgentPublicMessagePartToolResultPart$Outbound` instead. */
  export type Outbound = StreamAgentPublicMessagePartToolResultPart$Outbound;
}

export function streamAgentPublicMessagePartToolResultPartToJSON(
  streamAgentPublicMessagePartToolResultPart:
    StreamAgentPublicMessagePartToolResultPart,
): string {
  return JSON.stringify(
    StreamAgentPublicMessagePartToolResultPart$outboundSchema.parse(
      streamAgentPublicMessagePartToolResultPart,
    ),
  );
}

export function streamAgentPublicMessagePartToolResultPartFromJSON(
  jsonString: string,
): SafeParseResult<
  StreamAgentPublicMessagePartToolResultPart,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      StreamAgentPublicMessagePartToolResultPart$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'StreamAgentPublicMessagePartToolResultPart' from JSON`,
  );
}

/** @internal */
export const StreamAgentPublicMessagePartAgentsKind$inboundSchema:
  z.ZodNativeEnum<typeof StreamAgentPublicMessagePartAgentsKind> = z.nativeEnum(
    StreamAgentPublicMessagePartAgentsKind,
  );

/** @internal */
export const StreamAgentPublicMessagePartAgentsKind$outboundSchema:
  z.ZodNativeEnum<typeof StreamAgentPublicMessagePartAgentsKind> =
    StreamAgentPublicMessagePartAgentsKind$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace StreamAgentPublicMessagePartAgentsKind$ {
  /** @deprecated use `StreamAgentPublicMessagePartAgentsKind$inboundSchema` instead. */
  export const inboundSchema =
    StreamAgentPublicMessagePartAgentsKind$inboundSchema;
  /** @deprecated use `StreamAgentPublicMessagePartAgentsKind$outboundSchema` instead. */
  export const outboundSchema =
    StreamAgentPublicMessagePartAgentsKind$outboundSchema;
}

/** @internal */
export const StreamAgentFileFileInURIFormat$inboundSchema: z.ZodType<
  StreamAgentFileFileInURIFormat,
  z.ZodTypeDef,
  unknown
> = z.object({
  uri: z.string(),
  mimeType: z.string().optional(),
  name: z.string().optional(),
});

/** @internal */
export type StreamAgentFileFileInURIFormat$Outbound = {
  uri: string;
  mimeType?: string | undefined;
  name?: string | undefined;
};

/** @internal */
export const StreamAgentFileFileInURIFormat$outboundSchema: z.ZodType<
  StreamAgentFileFileInURIFormat$Outbound,
  z.ZodTypeDef,
  StreamAgentFileFileInURIFormat
> = z.object({
  uri: z.string(),
  mimeType: z.string().optional(),
  name: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace StreamAgentFileFileInURIFormat$ {
  /** @deprecated use `StreamAgentFileFileInURIFormat$inboundSchema` instead. */
  export const inboundSchema = StreamAgentFileFileInURIFormat$inboundSchema;
  /** @deprecated use `StreamAgentFileFileInURIFormat$outboundSchema` instead. */
  export const outboundSchema = StreamAgentFileFileInURIFormat$outboundSchema;
  /** @deprecated use `StreamAgentFileFileInURIFormat$Outbound` instead. */
  export type Outbound = StreamAgentFileFileInURIFormat$Outbound;
}

export function streamAgentFileFileInURIFormatToJSON(
  streamAgentFileFileInURIFormat: StreamAgentFileFileInURIFormat,
): string {
  return JSON.stringify(
    StreamAgentFileFileInURIFormat$outboundSchema.parse(
      streamAgentFileFileInURIFormat,
    ),
  );
}

export function streamAgentFileFileInURIFormatFromJSON(
  jsonString: string,
): SafeParseResult<StreamAgentFileFileInURIFormat, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => StreamAgentFileFileInURIFormat$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'StreamAgentFileFileInURIFormat' from JSON`,
  );
}

/** @internal */
export const StreamAgentFileBinaryFormat$inboundSchema: z.ZodType<
  StreamAgentFileBinaryFormat,
  z.ZodTypeDef,
  unknown
> = z.object({
  bytes: z.string(),
  mimeType: z.string().optional(),
  name: z.string().optional(),
});

/** @internal */
export type StreamAgentFileBinaryFormat$Outbound = {
  bytes: string;
  mimeType?: string | undefined;
  name?: string | undefined;
};

/** @internal */
export const StreamAgentFileBinaryFormat$outboundSchema: z.ZodType<
  StreamAgentFileBinaryFormat$Outbound,
  z.ZodTypeDef,
  StreamAgentFileBinaryFormat
> = z.object({
  bytes: z.string(),
  mimeType: z.string().optional(),
  name: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace StreamAgentFileBinaryFormat$ {
  /** @deprecated use `StreamAgentFileBinaryFormat$inboundSchema` instead. */
  export const inboundSchema = StreamAgentFileBinaryFormat$inboundSchema;
  /** @deprecated use `StreamAgentFileBinaryFormat$outboundSchema` instead. */
  export const outboundSchema = StreamAgentFileBinaryFormat$outboundSchema;
  /** @deprecated use `StreamAgentFileBinaryFormat$Outbound` instead. */
  export type Outbound = StreamAgentFileBinaryFormat$Outbound;
}

export function streamAgentFileBinaryFormatToJSON(
  streamAgentFileBinaryFormat: StreamAgentFileBinaryFormat,
): string {
  return JSON.stringify(
    StreamAgentFileBinaryFormat$outboundSchema.parse(
      streamAgentFileBinaryFormat,
    ),
  );
}

export function streamAgentFileBinaryFormatFromJSON(
  jsonString: string,
): SafeParseResult<StreamAgentFileBinaryFormat, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => StreamAgentFileBinaryFormat$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'StreamAgentFileBinaryFormat' from JSON`,
  );
}

/** @internal */
export const StreamAgentPublicMessagePartFile$inboundSchema: z.ZodType<
  StreamAgentPublicMessagePartFile,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => StreamAgentFileBinaryFormat$inboundSchema),
  z.lazy(() => StreamAgentFileFileInURIFormat$inboundSchema),
]);

/** @internal */
export type StreamAgentPublicMessagePartFile$Outbound =
  | StreamAgentFileBinaryFormat$Outbound
  | StreamAgentFileFileInURIFormat$Outbound;

/** @internal */
export const StreamAgentPublicMessagePartFile$outboundSchema: z.ZodType<
  StreamAgentPublicMessagePartFile$Outbound,
  z.ZodTypeDef,
  StreamAgentPublicMessagePartFile
> = z.union([
  z.lazy(() => StreamAgentFileBinaryFormat$outboundSchema),
  z.lazy(() => StreamAgentFileFileInURIFormat$outboundSchema),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace StreamAgentPublicMessagePartFile$ {
  /** @deprecated use `StreamAgentPublicMessagePartFile$inboundSchema` instead. */
  export const inboundSchema = StreamAgentPublicMessagePartFile$inboundSchema;
  /** @deprecated use `StreamAgentPublicMessagePartFile$outboundSchema` instead. */
  export const outboundSchema = StreamAgentPublicMessagePartFile$outboundSchema;
  /** @deprecated use `StreamAgentPublicMessagePartFile$Outbound` instead. */
  export type Outbound = StreamAgentPublicMessagePartFile$Outbound;
}

export function streamAgentPublicMessagePartFileToJSON(
  streamAgentPublicMessagePartFile: StreamAgentPublicMessagePartFile,
): string {
  return JSON.stringify(
    StreamAgentPublicMessagePartFile$outboundSchema.parse(
      streamAgentPublicMessagePartFile,
    ),
  );
}

export function streamAgentPublicMessagePartFileFromJSON(
  jsonString: string,
): SafeParseResult<StreamAgentPublicMessagePartFile, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => StreamAgentPublicMessagePartFile$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'StreamAgentPublicMessagePartFile' from JSON`,
  );
}

/** @internal */
export const StreamAgentPublicMessagePartFilePart$inboundSchema: z.ZodType<
  StreamAgentPublicMessagePartFilePart,
  z.ZodTypeDef,
  unknown
> = z.object({
  kind: StreamAgentPublicMessagePartAgentsKind$inboundSchema,
  file: z.union([
    z.lazy(() => StreamAgentFileBinaryFormat$inboundSchema),
    z.lazy(() => StreamAgentFileFileInURIFormat$inboundSchema),
  ]),
  metadata: z.record(z.any()).optional(),
});

/** @internal */
export type StreamAgentPublicMessagePartFilePart$Outbound = {
  kind: string;
  file:
    | StreamAgentFileBinaryFormat$Outbound
    | StreamAgentFileFileInURIFormat$Outbound;
  metadata?: { [k: string]: any } | undefined;
};

/** @internal */
export const StreamAgentPublicMessagePartFilePart$outboundSchema: z.ZodType<
  StreamAgentPublicMessagePartFilePart$Outbound,
  z.ZodTypeDef,
  StreamAgentPublicMessagePartFilePart
> = z.object({
  kind: StreamAgentPublicMessagePartAgentsKind$outboundSchema,
  file: z.union([
    z.lazy(() => StreamAgentFileBinaryFormat$outboundSchema),
    z.lazy(() => StreamAgentFileFileInURIFormat$outboundSchema),
  ]),
  metadata: z.record(z.any()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace StreamAgentPublicMessagePartFilePart$ {
  /** @deprecated use `StreamAgentPublicMessagePartFilePart$inboundSchema` instead. */
  export const inboundSchema =
    StreamAgentPublicMessagePartFilePart$inboundSchema;
  /** @deprecated use `StreamAgentPublicMessagePartFilePart$outboundSchema` instead. */
  export const outboundSchema =
    StreamAgentPublicMessagePartFilePart$outboundSchema;
  /** @deprecated use `StreamAgentPublicMessagePartFilePart$Outbound` instead. */
  export type Outbound = StreamAgentPublicMessagePartFilePart$Outbound;
}

export function streamAgentPublicMessagePartFilePartToJSON(
  streamAgentPublicMessagePartFilePart: StreamAgentPublicMessagePartFilePart,
): string {
  return JSON.stringify(
    StreamAgentPublicMessagePartFilePart$outboundSchema.parse(
      streamAgentPublicMessagePartFilePart,
    ),
  );
}

export function streamAgentPublicMessagePartFilePartFromJSON(
  jsonString: string,
): SafeParseResult<StreamAgentPublicMessagePartFilePart, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      StreamAgentPublicMessagePartFilePart$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'StreamAgentPublicMessagePartFilePart' from JSON`,
  );
}

/** @internal */
export const StreamAgentPublicMessagePartKind$inboundSchema: z.ZodNativeEnum<
  typeof StreamAgentPublicMessagePartKind
> = z.nativeEnum(StreamAgentPublicMessagePartKind);

/** @internal */
export const StreamAgentPublicMessagePartKind$outboundSchema: z.ZodNativeEnum<
  typeof StreamAgentPublicMessagePartKind
> = StreamAgentPublicMessagePartKind$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace StreamAgentPublicMessagePartKind$ {
  /** @deprecated use `StreamAgentPublicMessagePartKind$inboundSchema` instead. */
  export const inboundSchema = StreamAgentPublicMessagePartKind$inboundSchema;
  /** @deprecated use `StreamAgentPublicMessagePartKind$outboundSchema` instead. */
  export const outboundSchema = StreamAgentPublicMessagePartKind$outboundSchema;
}

/** @internal */
export const StreamAgentPublicMessagePartTextPart$inboundSchema: z.ZodType<
  StreamAgentPublicMessagePartTextPart,
  z.ZodTypeDef,
  unknown
> = z.object({
  kind: StreamAgentPublicMessagePartKind$inboundSchema,
  text: z.string(),
});

/** @internal */
export type StreamAgentPublicMessagePartTextPart$Outbound = {
  kind: string;
  text: string;
};

/** @internal */
export const StreamAgentPublicMessagePartTextPart$outboundSchema: z.ZodType<
  StreamAgentPublicMessagePartTextPart$Outbound,
  z.ZodTypeDef,
  StreamAgentPublicMessagePartTextPart
> = z.object({
  kind: StreamAgentPublicMessagePartKind$outboundSchema,
  text: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace StreamAgentPublicMessagePartTextPart$ {
  /** @deprecated use `StreamAgentPublicMessagePartTextPart$inboundSchema` instead. */
  export const inboundSchema =
    StreamAgentPublicMessagePartTextPart$inboundSchema;
  /** @deprecated use `StreamAgentPublicMessagePartTextPart$outboundSchema` instead. */
  export const outboundSchema =
    StreamAgentPublicMessagePartTextPart$outboundSchema;
  /** @deprecated use `StreamAgentPublicMessagePartTextPart$Outbound` instead. */
  export type Outbound = StreamAgentPublicMessagePartTextPart$Outbound;
}

export function streamAgentPublicMessagePartTextPartToJSON(
  streamAgentPublicMessagePartTextPart: StreamAgentPublicMessagePartTextPart,
): string {
  return JSON.stringify(
    StreamAgentPublicMessagePartTextPart$outboundSchema.parse(
      streamAgentPublicMessagePartTextPart,
    ),
  );
}

export function streamAgentPublicMessagePartTextPartFromJSON(
  jsonString: string,
): SafeParseResult<StreamAgentPublicMessagePartTextPart, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      StreamAgentPublicMessagePartTextPart$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'StreamAgentPublicMessagePartTextPart' from JSON`,
  );
}

/** @internal */
export const StreamAgentPublicMessagePart$inboundSchema: z.ZodType<
  StreamAgentPublicMessagePart,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => StreamAgentPublicMessagePartTextPart$inboundSchema),
  z.lazy(() => StreamAgentPublicMessagePartFilePart$inboundSchema),
  z.lazy(() => StreamAgentPublicMessagePartToolResultPart$inboundSchema),
]);

/** @internal */
export type StreamAgentPublicMessagePart$Outbound =
  | StreamAgentPublicMessagePartTextPart$Outbound
  | StreamAgentPublicMessagePartFilePart$Outbound
  | StreamAgentPublicMessagePartToolResultPart$Outbound;

/** @internal */
export const StreamAgentPublicMessagePart$outboundSchema: z.ZodType<
  StreamAgentPublicMessagePart$Outbound,
  z.ZodTypeDef,
  StreamAgentPublicMessagePart
> = z.union([
  z.lazy(() => StreamAgentPublicMessagePartTextPart$outboundSchema),
  z.lazy(() => StreamAgentPublicMessagePartFilePart$outboundSchema),
  z.lazy(() => StreamAgentPublicMessagePartToolResultPart$outboundSchema),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace StreamAgentPublicMessagePart$ {
  /** @deprecated use `StreamAgentPublicMessagePart$inboundSchema` instead. */
  export const inboundSchema = StreamAgentPublicMessagePart$inboundSchema;
  /** @deprecated use `StreamAgentPublicMessagePart$outboundSchema` instead. */
  export const outboundSchema = StreamAgentPublicMessagePart$outboundSchema;
  /** @deprecated use `StreamAgentPublicMessagePart$Outbound` instead. */
  export type Outbound = StreamAgentPublicMessagePart$Outbound;
}

export function streamAgentPublicMessagePartToJSON(
  streamAgentPublicMessagePart: StreamAgentPublicMessagePart,
): string {
  return JSON.stringify(
    StreamAgentPublicMessagePart$outboundSchema.parse(
      streamAgentPublicMessagePart,
    ),
  );
}

export function streamAgentPublicMessagePartFromJSON(
  jsonString: string,
): SafeParseResult<StreamAgentPublicMessagePart, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => StreamAgentPublicMessagePart$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'StreamAgentPublicMessagePart' from JSON`,
  );
}

/** @internal */
export const StreamAgentMessage$inboundSchema: z.ZodType<
  StreamAgentMessage,
  z.ZodTypeDef,
  unknown
> = z.object({
  messageId: z.string().optional(),
  role: z.union([
    StreamAgentRoleUserMessage$inboundSchema,
    StreamAgentRoleToolMessage$inboundSchema,
  ]),
  parts: z.array(
    z.union([
      z.lazy(() => StreamAgentPublicMessagePartTextPart$inboundSchema),
      z.lazy(() => StreamAgentPublicMessagePartFilePart$inboundSchema),
      z.lazy(() => StreamAgentPublicMessagePartToolResultPart$inboundSchema),
    ]),
  ),
});

/** @internal */
export type StreamAgentMessage$Outbound = {
  messageId?: string | undefined;
  role: string | string;
  parts: Array<
    | StreamAgentPublicMessagePartTextPart$Outbound
    | StreamAgentPublicMessagePartFilePart$Outbound
    | StreamAgentPublicMessagePartToolResultPart$Outbound
  >;
};

/** @internal */
export const StreamAgentMessage$outboundSchema: z.ZodType<
  StreamAgentMessage$Outbound,
  z.ZodTypeDef,
  StreamAgentMessage
> = z.object({
  messageId: z.string().optional(),
  role: z.union([
    StreamAgentRoleUserMessage$outboundSchema,
    StreamAgentRoleToolMessage$outboundSchema,
  ]),
  parts: z.array(
    z.union([
      z.lazy(() => StreamAgentPublicMessagePartTextPart$outboundSchema),
      z.lazy(() => StreamAgentPublicMessagePartFilePart$outboundSchema),
      z.lazy(() => StreamAgentPublicMessagePartToolResultPart$outboundSchema),
    ]),
  ),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace StreamAgentMessage$ {
  /** @deprecated use `StreamAgentMessage$inboundSchema` instead. */
  export const inboundSchema = StreamAgentMessage$inboundSchema;
  /** @deprecated use `StreamAgentMessage$outboundSchema` instead. */
  export const outboundSchema = StreamAgentMessage$outboundSchema;
  /** @deprecated use `StreamAgentMessage$Outbound` instead. */
  export type Outbound = StreamAgentMessage$Outbound;
}

export function streamAgentMessageToJSON(
  streamAgentMessage: StreamAgentMessage,
): string {
  return JSON.stringify(
    StreamAgentMessage$outboundSchema.parse(streamAgentMessage),
  );
}

export function streamAgentMessageFromJSON(
  jsonString: string,
): SafeParseResult<StreamAgentMessage, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => StreamAgentMessage$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'StreamAgentMessage' from JSON`,
  );
}

/** @internal */
export const StreamAgentContact$inboundSchema: z.ZodType<
  StreamAgentContact,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  display_name: z.string().optional(),
  email: z.string().optional(),
  metadata: z.array(z.record(z.any())).optional(),
  logo_url: z.string().optional(),
  tags: z.array(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    "display_name": "displayName",
    "logo_url": "logoUrl",
  });
});

/** @internal */
export type StreamAgentContact$Outbound = {
  id: string;
  display_name?: string | undefined;
  email?: string | undefined;
  metadata?: Array<{ [k: string]: any }> | undefined;
  logo_url?: string | undefined;
  tags?: Array<string> | undefined;
};

/** @internal */
export const StreamAgentContact$outboundSchema: z.ZodType<
  StreamAgentContact$Outbound,
  z.ZodTypeDef,
  StreamAgentContact
> = z.object({
  id: z.string(),
  displayName: z.string().optional(),
  email: z.string().optional(),
  metadata: z.array(z.record(z.any())).optional(),
  logoUrl: z.string().optional(),
  tags: z.array(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    displayName: "display_name",
    logoUrl: "logo_url",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace StreamAgentContact$ {
  /** @deprecated use `StreamAgentContact$inboundSchema` instead. */
  export const inboundSchema = StreamAgentContact$inboundSchema;
  /** @deprecated use `StreamAgentContact$outboundSchema` instead. */
  export const outboundSchema = StreamAgentContact$outboundSchema;
  /** @deprecated use `StreamAgentContact$Outbound` instead. */
  export type Outbound = StreamAgentContact$Outbound;
}

export function streamAgentContactToJSON(
  streamAgentContact: StreamAgentContact,
): string {
  return JSON.stringify(
    StreamAgentContact$outboundSchema.parse(streamAgentContact),
  );
}

export function streamAgentContactFromJSON(
  jsonString: string,
): SafeParseResult<StreamAgentContact, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => StreamAgentContact$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'StreamAgentContact' from JSON`,
  );
}

/** @internal */
export const StreamAgentThread$inboundSchema: z.ZodType<
  StreamAgentThread,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  tags: z.array(z.string()).optional(),
});

/** @internal */
export type StreamAgentThread$Outbound = {
  id: string;
  tags?: Array<string> | undefined;
};

/** @internal */
export const StreamAgentThread$outboundSchema: z.ZodType<
  StreamAgentThread$Outbound,
  z.ZodTypeDef,
  StreamAgentThread
> = z.object({
  id: z.string(),
  tags: z.array(z.string()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace StreamAgentThread$ {
  /** @deprecated use `StreamAgentThread$inboundSchema` instead. */
  export const inboundSchema = StreamAgentThread$inboundSchema;
  /** @deprecated use `StreamAgentThread$outboundSchema` instead. */
  export const outboundSchema = StreamAgentThread$outboundSchema;
  /** @deprecated use `StreamAgentThread$Outbound` instead. */
  export type Outbound = StreamAgentThread$Outbound;
}

export function streamAgentThreadToJSON(
  streamAgentThread: StreamAgentThread,
): string {
  return JSON.stringify(
    StreamAgentThread$outboundSchema.parse(streamAgentThread),
  );
}

export function streamAgentThreadFromJSON(
  jsonString: string,
): SafeParseResult<StreamAgentThread, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => StreamAgentThread$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'StreamAgentThread' from JSON`,
  );
}

/** @internal */
export const StreamAgentMemory$inboundSchema: z.ZodType<
  StreamAgentMemory,
  z.ZodTypeDef,
  unknown
> = z.object({
  entity_id: z.string(),
}).transform((v) => {
  return remap$(v, {
    "entity_id": "entityId",
  });
});

/** @internal */
export type StreamAgentMemory$Outbound = {
  entity_id: string;
};

/** @internal */
export const StreamAgentMemory$outboundSchema: z.ZodType<
  StreamAgentMemory$Outbound,
  z.ZodTypeDef,
  StreamAgentMemory
> = z.object({
  entityId: z.string(),
}).transform((v) => {
  return remap$(v, {
    entityId: "entity_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace StreamAgentMemory$ {
  /** @deprecated use `StreamAgentMemory$inboundSchema` instead. */
  export const inboundSchema = StreamAgentMemory$inboundSchema;
  /** @deprecated use `StreamAgentMemory$outboundSchema` instead. */
  export const outboundSchema = StreamAgentMemory$outboundSchema;
  /** @deprecated use `StreamAgentMemory$Outbound` instead. */
  export type Outbound = StreamAgentMemory$Outbound;
}

export function streamAgentMemoryToJSON(
  streamAgentMemory: StreamAgentMemory,
): string {
  return JSON.stringify(
    StreamAgentMemory$outboundSchema.parse(streamAgentMemory),
  );
}

export function streamAgentMemoryFromJSON(
  jsonString: string,
): SafeParseResult<StreamAgentMemory, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => StreamAgentMemory$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'StreamAgentMemory' from JSON`,
  );
}

/** @internal */
export const StreamAgentRequestBody$inboundSchema: z.ZodType<
  StreamAgentRequestBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  task_id: z.string().optional(),
  message: z.lazy(() => StreamAgentMessage$inboundSchema),
  variables: z.record(z.any()).optional(),
  contact: z.lazy(() => StreamAgentContact$inboundSchema).optional(),
  thread: z.lazy(() => StreamAgentThread$inboundSchema).optional(),
  memory: z.lazy(() => StreamAgentMemory$inboundSchema).optional(),
  metadata: z.record(z.any()).optional(),
  stream_timeout_seconds: z.number().optional(),
}).transform((v) => {
  return remap$(v, {
    "task_id": "taskId",
    "stream_timeout_seconds": "streamTimeoutSeconds",
  });
});

/** @internal */
export type StreamAgentRequestBody$Outbound = {
  task_id?: string | undefined;
  message: StreamAgentMessage$Outbound;
  variables?: { [k: string]: any } | undefined;
  contact?: StreamAgentContact$Outbound | undefined;
  thread?: StreamAgentThread$Outbound | undefined;
  memory?: StreamAgentMemory$Outbound | undefined;
  metadata?: { [k: string]: any } | undefined;
  stream_timeout_seconds?: number | undefined;
};

/** @internal */
export const StreamAgentRequestBody$outboundSchema: z.ZodType<
  StreamAgentRequestBody$Outbound,
  z.ZodTypeDef,
  StreamAgentRequestBody
> = z.object({
  taskId: z.string().optional(),
  message: z.lazy(() => StreamAgentMessage$outboundSchema),
  variables: z.record(z.any()).optional(),
  contact: z.lazy(() => StreamAgentContact$outboundSchema).optional(),
  thread: z.lazy(() => StreamAgentThread$outboundSchema).optional(),
  memory: z.lazy(() => StreamAgentMemory$outboundSchema).optional(),
  metadata: z.record(z.any()).optional(),
  streamTimeoutSeconds: z.number().optional(),
}).transform((v) => {
  return remap$(v, {
    taskId: "task_id",
    streamTimeoutSeconds: "stream_timeout_seconds",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace StreamAgentRequestBody$ {
  /** @deprecated use `StreamAgentRequestBody$inboundSchema` instead. */
  export const inboundSchema = StreamAgentRequestBody$inboundSchema;
  /** @deprecated use `StreamAgentRequestBody$outboundSchema` instead. */
  export const outboundSchema = StreamAgentRequestBody$outboundSchema;
  /** @deprecated use `StreamAgentRequestBody$Outbound` instead. */
  export type Outbound = StreamAgentRequestBody$Outbound;
}

export function streamAgentRequestBodyToJSON(
  streamAgentRequestBody: StreamAgentRequestBody,
): string {
  return JSON.stringify(
    StreamAgentRequestBody$outboundSchema.parse(streamAgentRequestBody),
  );
}

export function streamAgentRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<StreamAgentRequestBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => StreamAgentRequestBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'StreamAgentRequestBody' from JSON`,
  );
}

/** @internal */
export const StreamAgentRequest$inboundSchema: z.ZodType<
  StreamAgentRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  key: z.string(),
  RequestBody: z.lazy(() => StreamAgentRequestBody$inboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    "RequestBody": "requestBody",
  });
});

/** @internal */
export type StreamAgentRequest$Outbound = {
  key: string;
  RequestBody?: StreamAgentRequestBody$Outbound | undefined;
};

/** @internal */
export const StreamAgentRequest$outboundSchema: z.ZodType<
  StreamAgentRequest$Outbound,
  z.ZodTypeDef,
  StreamAgentRequest
> = z.object({
  key: z.string(),
  requestBody: z.lazy(() => StreamAgentRequestBody$outboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    requestBody: "RequestBody",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace StreamAgentRequest$ {
  /** @deprecated use `StreamAgentRequest$inboundSchema` instead. */
  export const inboundSchema = StreamAgentRequest$inboundSchema;
  /** @deprecated use `StreamAgentRequest$outboundSchema` instead. */
  export const outboundSchema = StreamAgentRequest$outboundSchema;
  /** @deprecated use `StreamAgentRequest$Outbound` instead. */
  export type Outbound = StreamAgentRequest$Outbound;
}

export function streamAgentRequestToJSON(
  streamAgentRequest: StreamAgentRequest,
): string {
  return JSON.stringify(
    StreamAgentRequest$outboundSchema.parse(streamAgentRequest),
  );
}

export function streamAgentRequestFromJSON(
  jsonString: string,
): SafeParseResult<StreamAgentRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => StreamAgentRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'StreamAgentRequest' from JSON`,
  );
}

/** @internal */
export const StreamAgentResponseBody$inboundSchema: z.ZodType<
  StreamAgentResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  data: z.string(),
});

/** @internal */
export type StreamAgentResponseBody$Outbound = {
  data: string;
};

/** @internal */
export const StreamAgentResponseBody$outboundSchema: z.ZodType<
  StreamAgentResponseBody$Outbound,
  z.ZodTypeDef,
  StreamAgentResponseBody
> = z.object({
  data: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace StreamAgentResponseBody$ {
  /** @deprecated use `StreamAgentResponseBody$inboundSchema` instead. */
  export const inboundSchema = StreamAgentResponseBody$inboundSchema;
  /** @deprecated use `StreamAgentResponseBody$outboundSchema` instead. */
  export const outboundSchema = StreamAgentResponseBody$outboundSchema;
  /** @deprecated use `StreamAgentResponseBody$Outbound` instead. */
  export type Outbound = StreamAgentResponseBody$Outbound;
}

export function streamAgentResponseBodyToJSON(
  streamAgentResponseBody: StreamAgentResponseBody,
): string {
  return JSON.stringify(
    StreamAgentResponseBody$outboundSchema.parse(streamAgentResponseBody),
  );
}

export function streamAgentResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<StreamAgentResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => StreamAgentResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'StreamAgentResponseBody' from JSON`,
  );
}
