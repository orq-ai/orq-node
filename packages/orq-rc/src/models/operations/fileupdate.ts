/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type FileUpdateRequestBody = {
  fileName: string;
};

export type FileUpdateRequest = {
  /**
   * The ID of the file
   */
  fileId: string;
  requestBody?: FileUpdateRequestBody | undefined;
};

/**
 * The intended purpose of the uploaded file.
 */
export const FileUpdatePurpose = {
  Retrieval: "retrieval",
  KnowledgeDatasource: "knowledge_datasource",
} as const;
/**
 * The intended purpose of the uploaded file.
 */
export type FileUpdatePurpose = ClosedEnum<typeof FileUpdatePurpose>;

/**
 * File updated successfully
 */
export type FileUpdateResponseBody = {
  id: string;
  /**
   * path to the file in the storage
   */
  objectName: string;
  /**
   * The intended purpose of the uploaded file.
   */
  purpose: FileUpdatePurpose;
  bytes: number;
  fileName: string;
  /**
   * The id of the resource
   */
  workspaceId: string;
  /**
   * The date and time the resource was created
   */
  created?: Date | undefined;
};

/** @internal */
export const FileUpdateRequestBody$inboundSchema: z.ZodType<
  FileUpdateRequestBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  file_name: z.string(),
}).transform((v) => {
  return remap$(v, {
    "file_name": "fileName",
  });
});

/** @internal */
export type FileUpdateRequestBody$Outbound = {
  file_name: string;
};

/** @internal */
export const FileUpdateRequestBody$outboundSchema: z.ZodType<
  FileUpdateRequestBody$Outbound,
  z.ZodTypeDef,
  FileUpdateRequestBody
> = z.object({
  fileName: z.string(),
}).transform((v) => {
  return remap$(v, {
    fileName: "file_name",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FileUpdateRequestBody$ {
  /** @deprecated use `FileUpdateRequestBody$inboundSchema` instead. */
  export const inboundSchema = FileUpdateRequestBody$inboundSchema;
  /** @deprecated use `FileUpdateRequestBody$outboundSchema` instead. */
  export const outboundSchema = FileUpdateRequestBody$outboundSchema;
  /** @deprecated use `FileUpdateRequestBody$Outbound` instead. */
  export type Outbound = FileUpdateRequestBody$Outbound;
}

export function fileUpdateRequestBodyToJSON(
  fileUpdateRequestBody: FileUpdateRequestBody,
): string {
  return JSON.stringify(
    FileUpdateRequestBody$outboundSchema.parse(fileUpdateRequestBody),
  );
}

export function fileUpdateRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<FileUpdateRequestBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => FileUpdateRequestBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'FileUpdateRequestBody' from JSON`,
  );
}

/** @internal */
export const FileUpdateRequest$inboundSchema: z.ZodType<
  FileUpdateRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  file_id: z.string(),
  RequestBody: z.lazy(() => FileUpdateRequestBody$inboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    "file_id": "fileId",
    "RequestBody": "requestBody",
  });
});

/** @internal */
export type FileUpdateRequest$Outbound = {
  file_id: string;
  RequestBody?: FileUpdateRequestBody$Outbound | undefined;
};

/** @internal */
export const FileUpdateRequest$outboundSchema: z.ZodType<
  FileUpdateRequest$Outbound,
  z.ZodTypeDef,
  FileUpdateRequest
> = z.object({
  fileId: z.string(),
  requestBody: z.lazy(() => FileUpdateRequestBody$outboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    fileId: "file_id",
    requestBody: "RequestBody",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FileUpdateRequest$ {
  /** @deprecated use `FileUpdateRequest$inboundSchema` instead. */
  export const inboundSchema = FileUpdateRequest$inboundSchema;
  /** @deprecated use `FileUpdateRequest$outboundSchema` instead. */
  export const outboundSchema = FileUpdateRequest$outboundSchema;
  /** @deprecated use `FileUpdateRequest$Outbound` instead. */
  export type Outbound = FileUpdateRequest$Outbound;
}

export function fileUpdateRequestToJSON(
  fileUpdateRequest: FileUpdateRequest,
): string {
  return JSON.stringify(
    FileUpdateRequest$outboundSchema.parse(fileUpdateRequest),
  );
}

export function fileUpdateRequestFromJSON(
  jsonString: string,
): SafeParseResult<FileUpdateRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => FileUpdateRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'FileUpdateRequest' from JSON`,
  );
}

/** @internal */
export const FileUpdatePurpose$inboundSchema: z.ZodNativeEnum<
  typeof FileUpdatePurpose
> = z.nativeEnum(FileUpdatePurpose);

/** @internal */
export const FileUpdatePurpose$outboundSchema: z.ZodNativeEnum<
  typeof FileUpdatePurpose
> = FileUpdatePurpose$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FileUpdatePurpose$ {
  /** @deprecated use `FileUpdatePurpose$inboundSchema` instead. */
  export const inboundSchema = FileUpdatePurpose$inboundSchema;
  /** @deprecated use `FileUpdatePurpose$outboundSchema` instead. */
  export const outboundSchema = FileUpdatePurpose$outboundSchema;
}

/** @internal */
export const FileUpdateResponseBody$inboundSchema: z.ZodType<
  FileUpdateResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  _id: z.string(),
  object_name: z.string(),
  purpose: FileUpdatePurpose$inboundSchema,
  bytes: z.number(),
  file_name: z.string(),
  workspace_id: z.string(),
  created: z.string().datetime({ offset: true }).default(
    "2025-01-21T09:55:12.054Z",
  ).transform(v => new Date(v)),
}).transform((v) => {
  return remap$(v, {
    "_id": "id",
    "object_name": "objectName",
    "file_name": "fileName",
    "workspace_id": "workspaceId",
  });
});

/** @internal */
export type FileUpdateResponseBody$Outbound = {
  _id: string;
  object_name: string;
  purpose: string;
  bytes: number;
  file_name: string;
  workspace_id: string;
  created: string;
};

/** @internal */
export const FileUpdateResponseBody$outboundSchema: z.ZodType<
  FileUpdateResponseBody$Outbound,
  z.ZodTypeDef,
  FileUpdateResponseBody
> = z.object({
  id: z.string(),
  objectName: z.string(),
  purpose: FileUpdatePurpose$outboundSchema,
  bytes: z.number(),
  fileName: z.string(),
  workspaceId: z.string(),
  created: z.date().default(() => new Date("2025-01-21T09:55:12.054Z"))
    .transform(v => v.toISOString()),
}).transform((v) => {
  return remap$(v, {
    id: "_id",
    objectName: "object_name",
    fileName: "file_name",
    workspaceId: "workspace_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FileUpdateResponseBody$ {
  /** @deprecated use `FileUpdateResponseBody$inboundSchema` instead. */
  export const inboundSchema = FileUpdateResponseBody$inboundSchema;
  /** @deprecated use `FileUpdateResponseBody$outboundSchema` instead. */
  export const outboundSchema = FileUpdateResponseBody$outboundSchema;
  /** @deprecated use `FileUpdateResponseBody$Outbound` instead. */
  export type Outbound = FileUpdateResponseBody$Outbound;
}

export function fileUpdateResponseBodyToJSON(
  fileUpdateResponseBody: FileUpdateResponseBody,
): string {
  return JSON.stringify(
    FileUpdateResponseBody$outboundSchema.parse(fileUpdateResponseBody),
  );
}

export function fileUpdateResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<FileUpdateResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => FileUpdateResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'FileUpdateResponseBody' from JSON`,
  );
}
