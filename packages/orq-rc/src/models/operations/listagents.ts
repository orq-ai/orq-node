/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type ListAgentsRequest = {
  /**
   * A limit on the number of objects to be returned. Limit can range between 1 and 50, and the default is 10
   */
  limit?: number | undefined;
  /**
   * A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 20 objects, ending with `01JJ1HDHN79XAS7A01WB3HYSDB`, your subsequent call can include `after=01JJ1HDHN79XAS7A01WB3HYSDB` in order to fetch the next page of the list.
   */
  startingAfter?: string | undefined;
  /**
   * A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 20 objects, starting with `01JJ1HDHN79XAS7A01WB3HYSDB`, your subsequent call can include `before=01JJ1HDHN79XAS7A01WB3HYSDB` in order to fetch the previous page of the list.
   */
  endingBefore?: string | undefined;
};

export const ListAgentsObject = {
  List: "list",
} as const;
export type ListAgentsObject = ClosedEnum<typeof ListAgentsObject>;

/**
 * The status of the agent. `Live` is the latest version of the agent. `Draft` is a version that is not yet published. `Pending` is a version that is pending approval. `Published` is a version that was live and has been replaced by a new version.
 */
export const ListAgentsStatus = {
  Live: "live",
  Draft: "draft",
  Pending: "pending",
  Published: "published",
} as const;
/**
 * The status of the agent. `Live` is the latest version of the agent. `Draft` is a version that is not yet published. `Pending` is a version that is pending approval. `Published` is a version that was live and has been replaced by a new version.
 */
export type ListAgentsStatus = ClosedEnum<typeof ListAgentsStatus>;

/**
 * If all, the agent will require approval for all tools. If respect_tool, the agent will require approval for tools that have the requires_approval flag set to true. If none, the agent will not require approval for any tools.
 */
export const ListAgentsToolApprovalRequired = {
  All: "all",
  RespectTool: "respect_tool",
  None: "none",
} as const;
/**
 * If all, the agent will require approval for all tools. If respect_tool, the agent will require approval for tools that have the requires_approval flag set to true. If none, the agent will not require approval for any tools.
 */
export type ListAgentsToolApprovalRequired = ClosedEnum<
  typeof ListAgentsToolApprovalRequired
>;

export type ListAgentsConditions = {
  /**
   * The argument of the tool call to evaluate
   */
  condition: string;
  /**
   * The operator to use
   */
  operator: string;
  /**
   * The value to compare against
   */
  value: string;
};

export type ListAgentsTools = {
  /**
   * The id of the resource
   */
  id: string;
  actionType: string;
  displayName?: string | undefined;
  requiresApproval: boolean;
  conditions?: Array<ListAgentsConditions> | undefined;
  /**
   * The id of the resource
   */
  mcpServer?: string | undefined;
  /**
   * Tool execution timeout in seconds (default: 2 minutes, max: 10 minutes)
   */
  timeout?: number | undefined;
};

export type ListAgentsSettings = {
  maxIterations?: number | undefined;
  /**
   * Max execution time in seconds
   */
  maxExecutionTime: number;
  /**
   * If all, the agent will require approval for all tools. If respect_tool, the agent will require approval for tools that have the requires_approval flag set to true. If none, the agent will not require approval for any tools.
   */
  toolApprovalRequired?: ListAgentsToolApprovalRequired | undefined;
  tools: Array<ListAgentsTools>;
};

export type ListAgentsModel = {
  /**
   * The database ID of the primary model
   */
  id: string;
  /**
   * Optional integration ID for custom model configurations
   */
  integrationId?: string | undefined;
  /**
   * Optional array of fallback model IDs that will be used automatically in order if the primary model fails
   */
  fallbackModels?: Array<string> | undefined;
  /**
   * Maximum number of tokens for model responses
   */
  maxTokens?: number | undefined;
  /**
   * Temperature setting for model responses
   */
  temperature?: number | undefined;
};

export type ListAgentsTeamOfAgents = {
  id: string;
  /**
   * The role of the agent in this context. This is used to give extra information to the leader to help it decide which agent to hand off to.
   */
  role?: string | undefined;
};

export type ListAgentsMetrics = {
  totalCost?: number | undefined;
};

export const ListAgentsConfigurationType = {
  Query: "query",
} as const;
export type ListAgentsConfigurationType = ClosedEnum<
  typeof ListAgentsConfigurationType
>;

export type ListAgentsConfiguration2 = {
  type: ListAgentsConfigurationType;
  query: string;
};

export const ListAgentsConfigurationAgentsType = {
  LastUserMessage: "last_user_message",
} as const;
export type ListAgentsConfigurationAgentsType = ClosedEnum<
  typeof ListAgentsConfigurationAgentsType
>;

export type ListAgentsConfiguration1 = {
  type: ListAgentsConfigurationAgentsType;
};

/**
 * Defines the configuration settings which can either be for a user message or a text entry.
 */
export type ListAgentsConfiguration =
  | ListAgentsConfiguration2
  | ListAgentsConfiguration1;

export type ListAgentsKnowledgeBases = {
  /**
   * The id of the resource
   */
  id?: string | undefined;
  /**
   * The id of the resource
   */
  knowledgeId: string;
  /**
   * Defines the configuration settings which can either be for a user message or a text entry.
   */
  configuration: ListAgentsConfiguration2 | ListAgentsConfiguration1;
};

export const ListAgentsHiddenPanels = {
  Model: "model",
  Tools: "tools",
  KnowledgeBases: "knowledge_bases",
  Variables: "variables",
  RuntimeConstraints: "runtime_constraints",
} as const;
export type ListAgentsHiddenPanels = ClosedEnum<typeof ListAgentsHiddenPanels>;

export type ListAgentsData = {
  id: string;
  key: string;
  workspaceId: string;
  projectId: string;
  createdById?: string | undefined;
  updatedById?: string | undefined;
  created?: string | undefined;
  updated?: string | undefined;
  role: string;
  description: string;
  systemPrompt?: string | undefined;
  instructions: string;
  /**
   * Optional URL to an icon for the agent
   */
  iconUrl?: string | undefined;
  /**
   * The status of the agent. `Live` is the latest version of the agent. `Draft` is a version that is not yet published. `Pending` is a version that is pending approval. `Published` is a version that was live and has been replaced by a new version.
   */
  status: ListAgentsStatus;
  settings?: ListAgentsSettings | undefined;
  model: ListAgentsModel;
  versionHash?: string | undefined;
  /**
   * The path where the entity is stored in the project structure. The first element of the path always represents the project name. Any subsequent path element after the project will be created as a folder in the project if it does not exists.
   */
  path: string;
  memoryStores: Array<string>;
  /**
   * The agents that are accessible to this orchestrator. The main agent can hand off to these agents to perform tasks.
   */
  teamOfAgents: Array<ListAgentsTeamOfAgents>;
  metrics?: ListAgentsMetrics | undefined;
  /**
   * Extracted variables from agent instructions
   */
  variables?: { [k: string]: any } | undefined;
  /**
   * Agent knowledge bases reference
   */
  knowledgeBases?: Array<ListAgentsKnowledgeBases> | undefined;
  /**
   * List of hidden collapsed panels in configuration. Duplicates are not allowed.
   */
  hiddenPanels?: Array<ListAgentsHiddenPanels> | undefined;
};

/**
 * List of agents with their configurations including fallback models
 */
export type ListAgentsResponseBody = {
  object: ListAgentsObject;
  data: Array<ListAgentsData>;
  hasMore: boolean;
};

/** @internal */
export const ListAgentsRequest$inboundSchema: z.ZodType<
  ListAgentsRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  limit: z.number().default(10),
  starting_after: z.string().optional(),
  ending_before: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "starting_after": "startingAfter",
    "ending_before": "endingBefore",
  });
});

/** @internal */
export type ListAgentsRequest$Outbound = {
  limit: number;
  starting_after?: string | undefined;
  ending_before?: string | undefined;
};

/** @internal */
export const ListAgentsRequest$outboundSchema: z.ZodType<
  ListAgentsRequest$Outbound,
  z.ZodTypeDef,
  ListAgentsRequest
> = z.object({
  limit: z.number().default(10),
  startingAfter: z.string().optional(),
  endingBefore: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    startingAfter: "starting_after",
    endingBefore: "ending_before",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListAgentsRequest$ {
  /** @deprecated use `ListAgentsRequest$inboundSchema` instead. */
  export const inboundSchema = ListAgentsRequest$inboundSchema;
  /** @deprecated use `ListAgentsRequest$outboundSchema` instead. */
  export const outboundSchema = ListAgentsRequest$outboundSchema;
  /** @deprecated use `ListAgentsRequest$Outbound` instead. */
  export type Outbound = ListAgentsRequest$Outbound;
}

export function listAgentsRequestToJSON(
  listAgentsRequest: ListAgentsRequest,
): string {
  return JSON.stringify(
    ListAgentsRequest$outboundSchema.parse(listAgentsRequest),
  );
}

export function listAgentsRequestFromJSON(
  jsonString: string,
): SafeParseResult<ListAgentsRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListAgentsRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListAgentsRequest' from JSON`,
  );
}

/** @internal */
export const ListAgentsObject$inboundSchema: z.ZodNativeEnum<
  typeof ListAgentsObject
> = z.nativeEnum(ListAgentsObject);

/** @internal */
export const ListAgentsObject$outboundSchema: z.ZodNativeEnum<
  typeof ListAgentsObject
> = ListAgentsObject$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListAgentsObject$ {
  /** @deprecated use `ListAgentsObject$inboundSchema` instead. */
  export const inboundSchema = ListAgentsObject$inboundSchema;
  /** @deprecated use `ListAgentsObject$outboundSchema` instead. */
  export const outboundSchema = ListAgentsObject$outboundSchema;
}

/** @internal */
export const ListAgentsStatus$inboundSchema: z.ZodNativeEnum<
  typeof ListAgentsStatus
> = z.nativeEnum(ListAgentsStatus);

/** @internal */
export const ListAgentsStatus$outboundSchema: z.ZodNativeEnum<
  typeof ListAgentsStatus
> = ListAgentsStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListAgentsStatus$ {
  /** @deprecated use `ListAgentsStatus$inboundSchema` instead. */
  export const inboundSchema = ListAgentsStatus$inboundSchema;
  /** @deprecated use `ListAgentsStatus$outboundSchema` instead. */
  export const outboundSchema = ListAgentsStatus$outboundSchema;
}

/** @internal */
export const ListAgentsToolApprovalRequired$inboundSchema: z.ZodNativeEnum<
  typeof ListAgentsToolApprovalRequired
> = z.nativeEnum(ListAgentsToolApprovalRequired);

/** @internal */
export const ListAgentsToolApprovalRequired$outboundSchema: z.ZodNativeEnum<
  typeof ListAgentsToolApprovalRequired
> = ListAgentsToolApprovalRequired$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListAgentsToolApprovalRequired$ {
  /** @deprecated use `ListAgentsToolApprovalRequired$inboundSchema` instead. */
  export const inboundSchema = ListAgentsToolApprovalRequired$inboundSchema;
  /** @deprecated use `ListAgentsToolApprovalRequired$outboundSchema` instead. */
  export const outboundSchema = ListAgentsToolApprovalRequired$outboundSchema;
}

/** @internal */
export const ListAgentsConditions$inboundSchema: z.ZodType<
  ListAgentsConditions,
  z.ZodTypeDef,
  unknown
> = z.object({
  condition: z.string(),
  operator: z.string(),
  value: z.string(),
});

/** @internal */
export type ListAgentsConditions$Outbound = {
  condition: string;
  operator: string;
  value: string;
};

/** @internal */
export const ListAgentsConditions$outboundSchema: z.ZodType<
  ListAgentsConditions$Outbound,
  z.ZodTypeDef,
  ListAgentsConditions
> = z.object({
  condition: z.string(),
  operator: z.string(),
  value: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListAgentsConditions$ {
  /** @deprecated use `ListAgentsConditions$inboundSchema` instead. */
  export const inboundSchema = ListAgentsConditions$inboundSchema;
  /** @deprecated use `ListAgentsConditions$outboundSchema` instead. */
  export const outboundSchema = ListAgentsConditions$outboundSchema;
  /** @deprecated use `ListAgentsConditions$Outbound` instead. */
  export type Outbound = ListAgentsConditions$Outbound;
}

export function listAgentsConditionsToJSON(
  listAgentsConditions: ListAgentsConditions,
): string {
  return JSON.stringify(
    ListAgentsConditions$outboundSchema.parse(listAgentsConditions),
  );
}

export function listAgentsConditionsFromJSON(
  jsonString: string,
): SafeParseResult<ListAgentsConditions, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListAgentsConditions$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListAgentsConditions' from JSON`,
  );
}

/** @internal */
export const ListAgentsTools$inboundSchema: z.ZodType<
  ListAgentsTools,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  action_type: z.string(),
  display_name: z.string().optional(),
  requires_approval: z.boolean(),
  conditions: z.array(z.lazy(() => ListAgentsConditions$inboundSchema))
    .optional(),
  mcpServer: z.string().optional(),
  timeout: z.number().default(120),
}).transform((v) => {
  return remap$(v, {
    "action_type": "actionType",
    "display_name": "displayName",
    "requires_approval": "requiresApproval",
  });
});

/** @internal */
export type ListAgentsTools$Outbound = {
  id: string;
  action_type: string;
  display_name?: string | undefined;
  requires_approval: boolean;
  conditions?: Array<ListAgentsConditions$Outbound> | undefined;
  mcpServer?: string | undefined;
  timeout: number;
};

/** @internal */
export const ListAgentsTools$outboundSchema: z.ZodType<
  ListAgentsTools$Outbound,
  z.ZodTypeDef,
  ListAgentsTools
> = z.object({
  id: z.string(),
  actionType: z.string(),
  displayName: z.string().optional(),
  requiresApproval: z.boolean(),
  conditions: z.array(z.lazy(() => ListAgentsConditions$outboundSchema))
    .optional(),
  mcpServer: z.string().optional(),
  timeout: z.number().default(120),
}).transform((v) => {
  return remap$(v, {
    actionType: "action_type",
    displayName: "display_name",
    requiresApproval: "requires_approval",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListAgentsTools$ {
  /** @deprecated use `ListAgentsTools$inboundSchema` instead. */
  export const inboundSchema = ListAgentsTools$inboundSchema;
  /** @deprecated use `ListAgentsTools$outboundSchema` instead. */
  export const outboundSchema = ListAgentsTools$outboundSchema;
  /** @deprecated use `ListAgentsTools$Outbound` instead. */
  export type Outbound = ListAgentsTools$Outbound;
}

export function listAgentsToolsToJSON(
  listAgentsTools: ListAgentsTools,
): string {
  return JSON.stringify(ListAgentsTools$outboundSchema.parse(listAgentsTools));
}

export function listAgentsToolsFromJSON(
  jsonString: string,
): SafeParseResult<ListAgentsTools, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListAgentsTools$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListAgentsTools' from JSON`,
  );
}

/** @internal */
export const ListAgentsSettings$inboundSchema: z.ZodType<
  ListAgentsSettings,
  z.ZodTypeDef,
  unknown
> = z.object({
  max_iterations: z.number().int().default(10),
  max_execution_time: z.number().int(),
  tool_approval_required: ListAgentsToolApprovalRequired$inboundSchema.default(
    "respect_tool",
  ),
  tools: z.array(z.lazy(() => ListAgentsTools$inboundSchema)),
}).transform((v) => {
  return remap$(v, {
    "max_iterations": "maxIterations",
    "max_execution_time": "maxExecutionTime",
    "tool_approval_required": "toolApprovalRequired",
  });
});

/** @internal */
export type ListAgentsSettings$Outbound = {
  max_iterations: number;
  max_execution_time: number;
  tool_approval_required: string;
  tools: Array<ListAgentsTools$Outbound>;
};

/** @internal */
export const ListAgentsSettings$outboundSchema: z.ZodType<
  ListAgentsSettings$Outbound,
  z.ZodTypeDef,
  ListAgentsSettings
> = z.object({
  maxIterations: z.number().int().default(10),
  maxExecutionTime: z.number().int(),
  toolApprovalRequired: ListAgentsToolApprovalRequired$outboundSchema.default(
    "respect_tool",
  ),
  tools: z.array(z.lazy(() => ListAgentsTools$outboundSchema)),
}).transform((v) => {
  return remap$(v, {
    maxIterations: "max_iterations",
    maxExecutionTime: "max_execution_time",
    toolApprovalRequired: "tool_approval_required",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListAgentsSettings$ {
  /** @deprecated use `ListAgentsSettings$inboundSchema` instead. */
  export const inboundSchema = ListAgentsSettings$inboundSchema;
  /** @deprecated use `ListAgentsSettings$outboundSchema` instead. */
  export const outboundSchema = ListAgentsSettings$outboundSchema;
  /** @deprecated use `ListAgentsSettings$Outbound` instead. */
  export type Outbound = ListAgentsSettings$Outbound;
}

export function listAgentsSettingsToJSON(
  listAgentsSettings: ListAgentsSettings,
): string {
  return JSON.stringify(
    ListAgentsSettings$outboundSchema.parse(listAgentsSettings),
  );
}

export function listAgentsSettingsFromJSON(
  jsonString: string,
): SafeParseResult<ListAgentsSettings, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListAgentsSettings$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListAgentsSettings' from JSON`,
  );
}

/** @internal */
export const ListAgentsModel$inboundSchema: z.ZodType<
  ListAgentsModel,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  integration_id: z.string().optional(),
  fallback_models: z.array(z.string()).optional(),
  max_tokens: z.number().int().optional(),
  temperature: z.number().optional(),
}).transform((v) => {
  return remap$(v, {
    "integration_id": "integrationId",
    "fallback_models": "fallbackModels",
    "max_tokens": "maxTokens",
  });
});

/** @internal */
export type ListAgentsModel$Outbound = {
  id: string;
  integration_id?: string | undefined;
  fallback_models?: Array<string> | undefined;
  max_tokens?: number | undefined;
  temperature?: number | undefined;
};

/** @internal */
export const ListAgentsModel$outboundSchema: z.ZodType<
  ListAgentsModel$Outbound,
  z.ZodTypeDef,
  ListAgentsModel
> = z.object({
  id: z.string(),
  integrationId: z.string().optional(),
  fallbackModels: z.array(z.string()).optional(),
  maxTokens: z.number().int().optional(),
  temperature: z.number().optional(),
}).transform((v) => {
  return remap$(v, {
    integrationId: "integration_id",
    fallbackModels: "fallback_models",
    maxTokens: "max_tokens",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListAgentsModel$ {
  /** @deprecated use `ListAgentsModel$inboundSchema` instead. */
  export const inboundSchema = ListAgentsModel$inboundSchema;
  /** @deprecated use `ListAgentsModel$outboundSchema` instead. */
  export const outboundSchema = ListAgentsModel$outboundSchema;
  /** @deprecated use `ListAgentsModel$Outbound` instead. */
  export type Outbound = ListAgentsModel$Outbound;
}

export function listAgentsModelToJSON(
  listAgentsModel: ListAgentsModel,
): string {
  return JSON.stringify(ListAgentsModel$outboundSchema.parse(listAgentsModel));
}

export function listAgentsModelFromJSON(
  jsonString: string,
): SafeParseResult<ListAgentsModel, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListAgentsModel$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListAgentsModel' from JSON`,
  );
}

/** @internal */
export const ListAgentsTeamOfAgents$inboundSchema: z.ZodType<
  ListAgentsTeamOfAgents,
  z.ZodTypeDef,
  unknown
> = z.object({
  _id: z.string(),
  role: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "_id": "id",
  });
});

/** @internal */
export type ListAgentsTeamOfAgents$Outbound = {
  _id: string;
  role?: string | undefined;
};

/** @internal */
export const ListAgentsTeamOfAgents$outboundSchema: z.ZodType<
  ListAgentsTeamOfAgents$Outbound,
  z.ZodTypeDef,
  ListAgentsTeamOfAgents
> = z.object({
  id: z.string(),
  role: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    id: "_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListAgentsTeamOfAgents$ {
  /** @deprecated use `ListAgentsTeamOfAgents$inboundSchema` instead. */
  export const inboundSchema = ListAgentsTeamOfAgents$inboundSchema;
  /** @deprecated use `ListAgentsTeamOfAgents$outboundSchema` instead. */
  export const outboundSchema = ListAgentsTeamOfAgents$outboundSchema;
  /** @deprecated use `ListAgentsTeamOfAgents$Outbound` instead. */
  export type Outbound = ListAgentsTeamOfAgents$Outbound;
}

export function listAgentsTeamOfAgentsToJSON(
  listAgentsTeamOfAgents: ListAgentsTeamOfAgents,
): string {
  return JSON.stringify(
    ListAgentsTeamOfAgents$outboundSchema.parse(listAgentsTeamOfAgents),
  );
}

export function listAgentsTeamOfAgentsFromJSON(
  jsonString: string,
): SafeParseResult<ListAgentsTeamOfAgents, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListAgentsTeamOfAgents$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListAgentsTeamOfAgents' from JSON`,
  );
}

/** @internal */
export const ListAgentsMetrics$inboundSchema: z.ZodType<
  ListAgentsMetrics,
  z.ZodTypeDef,
  unknown
> = z.object({
  total_cost: z.number().default(0),
}).transform((v) => {
  return remap$(v, {
    "total_cost": "totalCost",
  });
});

/** @internal */
export type ListAgentsMetrics$Outbound = {
  total_cost: number;
};

/** @internal */
export const ListAgentsMetrics$outboundSchema: z.ZodType<
  ListAgentsMetrics$Outbound,
  z.ZodTypeDef,
  ListAgentsMetrics
> = z.object({
  totalCost: z.number().default(0),
}).transform((v) => {
  return remap$(v, {
    totalCost: "total_cost",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListAgentsMetrics$ {
  /** @deprecated use `ListAgentsMetrics$inboundSchema` instead. */
  export const inboundSchema = ListAgentsMetrics$inboundSchema;
  /** @deprecated use `ListAgentsMetrics$outboundSchema` instead. */
  export const outboundSchema = ListAgentsMetrics$outboundSchema;
  /** @deprecated use `ListAgentsMetrics$Outbound` instead. */
  export type Outbound = ListAgentsMetrics$Outbound;
}

export function listAgentsMetricsToJSON(
  listAgentsMetrics: ListAgentsMetrics,
): string {
  return JSON.stringify(
    ListAgentsMetrics$outboundSchema.parse(listAgentsMetrics),
  );
}

export function listAgentsMetricsFromJSON(
  jsonString: string,
): SafeParseResult<ListAgentsMetrics, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListAgentsMetrics$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListAgentsMetrics' from JSON`,
  );
}

/** @internal */
export const ListAgentsConfigurationType$inboundSchema: z.ZodNativeEnum<
  typeof ListAgentsConfigurationType
> = z.nativeEnum(ListAgentsConfigurationType);

/** @internal */
export const ListAgentsConfigurationType$outboundSchema: z.ZodNativeEnum<
  typeof ListAgentsConfigurationType
> = ListAgentsConfigurationType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListAgentsConfigurationType$ {
  /** @deprecated use `ListAgentsConfigurationType$inboundSchema` instead. */
  export const inboundSchema = ListAgentsConfigurationType$inboundSchema;
  /** @deprecated use `ListAgentsConfigurationType$outboundSchema` instead. */
  export const outboundSchema = ListAgentsConfigurationType$outboundSchema;
}

/** @internal */
export const ListAgentsConfiguration2$inboundSchema: z.ZodType<
  ListAgentsConfiguration2,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: ListAgentsConfigurationType$inboundSchema,
  query: z.string(),
});

/** @internal */
export type ListAgentsConfiguration2$Outbound = {
  type: string;
  query: string;
};

/** @internal */
export const ListAgentsConfiguration2$outboundSchema: z.ZodType<
  ListAgentsConfiguration2$Outbound,
  z.ZodTypeDef,
  ListAgentsConfiguration2
> = z.object({
  type: ListAgentsConfigurationType$outboundSchema,
  query: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListAgentsConfiguration2$ {
  /** @deprecated use `ListAgentsConfiguration2$inboundSchema` instead. */
  export const inboundSchema = ListAgentsConfiguration2$inboundSchema;
  /** @deprecated use `ListAgentsConfiguration2$outboundSchema` instead. */
  export const outboundSchema = ListAgentsConfiguration2$outboundSchema;
  /** @deprecated use `ListAgentsConfiguration2$Outbound` instead. */
  export type Outbound = ListAgentsConfiguration2$Outbound;
}

export function listAgentsConfiguration2ToJSON(
  listAgentsConfiguration2: ListAgentsConfiguration2,
): string {
  return JSON.stringify(
    ListAgentsConfiguration2$outboundSchema.parse(listAgentsConfiguration2),
  );
}

export function listAgentsConfiguration2FromJSON(
  jsonString: string,
): SafeParseResult<ListAgentsConfiguration2, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListAgentsConfiguration2$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListAgentsConfiguration2' from JSON`,
  );
}

/** @internal */
export const ListAgentsConfigurationAgentsType$inboundSchema: z.ZodNativeEnum<
  typeof ListAgentsConfigurationAgentsType
> = z.nativeEnum(ListAgentsConfigurationAgentsType);

/** @internal */
export const ListAgentsConfigurationAgentsType$outboundSchema: z.ZodNativeEnum<
  typeof ListAgentsConfigurationAgentsType
> = ListAgentsConfigurationAgentsType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListAgentsConfigurationAgentsType$ {
  /** @deprecated use `ListAgentsConfigurationAgentsType$inboundSchema` instead. */
  export const inboundSchema = ListAgentsConfigurationAgentsType$inboundSchema;
  /** @deprecated use `ListAgentsConfigurationAgentsType$outboundSchema` instead. */
  export const outboundSchema =
    ListAgentsConfigurationAgentsType$outboundSchema;
}

/** @internal */
export const ListAgentsConfiguration1$inboundSchema: z.ZodType<
  ListAgentsConfiguration1,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: ListAgentsConfigurationAgentsType$inboundSchema,
});

/** @internal */
export type ListAgentsConfiguration1$Outbound = {
  type: string;
};

/** @internal */
export const ListAgentsConfiguration1$outboundSchema: z.ZodType<
  ListAgentsConfiguration1$Outbound,
  z.ZodTypeDef,
  ListAgentsConfiguration1
> = z.object({
  type: ListAgentsConfigurationAgentsType$outboundSchema,
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListAgentsConfiguration1$ {
  /** @deprecated use `ListAgentsConfiguration1$inboundSchema` instead. */
  export const inboundSchema = ListAgentsConfiguration1$inboundSchema;
  /** @deprecated use `ListAgentsConfiguration1$outboundSchema` instead. */
  export const outboundSchema = ListAgentsConfiguration1$outboundSchema;
  /** @deprecated use `ListAgentsConfiguration1$Outbound` instead. */
  export type Outbound = ListAgentsConfiguration1$Outbound;
}

export function listAgentsConfiguration1ToJSON(
  listAgentsConfiguration1: ListAgentsConfiguration1,
): string {
  return JSON.stringify(
    ListAgentsConfiguration1$outboundSchema.parse(listAgentsConfiguration1),
  );
}

export function listAgentsConfiguration1FromJSON(
  jsonString: string,
): SafeParseResult<ListAgentsConfiguration1, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListAgentsConfiguration1$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListAgentsConfiguration1' from JSON`,
  );
}

/** @internal */
export const ListAgentsConfiguration$inboundSchema: z.ZodType<
  ListAgentsConfiguration,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => ListAgentsConfiguration2$inboundSchema),
  z.lazy(() => ListAgentsConfiguration1$inboundSchema),
]);

/** @internal */
export type ListAgentsConfiguration$Outbound =
  | ListAgentsConfiguration2$Outbound
  | ListAgentsConfiguration1$Outbound;

/** @internal */
export const ListAgentsConfiguration$outboundSchema: z.ZodType<
  ListAgentsConfiguration$Outbound,
  z.ZodTypeDef,
  ListAgentsConfiguration
> = z.union([
  z.lazy(() => ListAgentsConfiguration2$outboundSchema),
  z.lazy(() => ListAgentsConfiguration1$outboundSchema),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListAgentsConfiguration$ {
  /** @deprecated use `ListAgentsConfiguration$inboundSchema` instead. */
  export const inboundSchema = ListAgentsConfiguration$inboundSchema;
  /** @deprecated use `ListAgentsConfiguration$outboundSchema` instead. */
  export const outboundSchema = ListAgentsConfiguration$outboundSchema;
  /** @deprecated use `ListAgentsConfiguration$Outbound` instead. */
  export type Outbound = ListAgentsConfiguration$Outbound;
}

export function listAgentsConfigurationToJSON(
  listAgentsConfiguration: ListAgentsConfiguration,
): string {
  return JSON.stringify(
    ListAgentsConfiguration$outboundSchema.parse(listAgentsConfiguration),
  );
}

export function listAgentsConfigurationFromJSON(
  jsonString: string,
): SafeParseResult<ListAgentsConfiguration, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListAgentsConfiguration$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListAgentsConfiguration' from JSON`,
  );
}

/** @internal */
export const ListAgentsKnowledgeBases$inboundSchema: z.ZodType<
  ListAgentsKnowledgeBases,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string().default("01K4W8GWG16V3WRAMDR8NDQQXM"),
  knowledge_id: z.string(),
  configuration: z.union([
    z.lazy(() => ListAgentsConfiguration2$inboundSchema),
    z.lazy(() => ListAgentsConfiguration1$inboundSchema),
  ]),
}).transform((v) => {
  return remap$(v, {
    "knowledge_id": "knowledgeId",
  });
});

/** @internal */
export type ListAgentsKnowledgeBases$Outbound = {
  id: string;
  knowledge_id: string;
  configuration:
    | ListAgentsConfiguration2$Outbound
    | ListAgentsConfiguration1$Outbound;
};

/** @internal */
export const ListAgentsKnowledgeBases$outboundSchema: z.ZodType<
  ListAgentsKnowledgeBases$Outbound,
  z.ZodTypeDef,
  ListAgentsKnowledgeBases
> = z.object({
  id: z.string().default("01K4W8GWG16V3WRAMDR8NDQQXM"),
  knowledgeId: z.string(),
  configuration: z.union([
    z.lazy(() => ListAgentsConfiguration2$outboundSchema),
    z.lazy(() => ListAgentsConfiguration1$outboundSchema),
  ]),
}).transform((v) => {
  return remap$(v, {
    knowledgeId: "knowledge_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListAgentsKnowledgeBases$ {
  /** @deprecated use `ListAgentsKnowledgeBases$inboundSchema` instead. */
  export const inboundSchema = ListAgentsKnowledgeBases$inboundSchema;
  /** @deprecated use `ListAgentsKnowledgeBases$outboundSchema` instead. */
  export const outboundSchema = ListAgentsKnowledgeBases$outboundSchema;
  /** @deprecated use `ListAgentsKnowledgeBases$Outbound` instead. */
  export type Outbound = ListAgentsKnowledgeBases$Outbound;
}

export function listAgentsKnowledgeBasesToJSON(
  listAgentsKnowledgeBases: ListAgentsKnowledgeBases,
): string {
  return JSON.stringify(
    ListAgentsKnowledgeBases$outboundSchema.parse(listAgentsKnowledgeBases),
  );
}

export function listAgentsKnowledgeBasesFromJSON(
  jsonString: string,
): SafeParseResult<ListAgentsKnowledgeBases, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListAgentsKnowledgeBases$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListAgentsKnowledgeBases' from JSON`,
  );
}

/** @internal */
export const ListAgentsHiddenPanels$inboundSchema: z.ZodNativeEnum<
  typeof ListAgentsHiddenPanels
> = z.nativeEnum(ListAgentsHiddenPanels);

/** @internal */
export const ListAgentsHiddenPanels$outboundSchema: z.ZodNativeEnum<
  typeof ListAgentsHiddenPanels
> = ListAgentsHiddenPanels$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListAgentsHiddenPanels$ {
  /** @deprecated use `ListAgentsHiddenPanels$inboundSchema` instead. */
  export const inboundSchema = ListAgentsHiddenPanels$inboundSchema;
  /** @deprecated use `ListAgentsHiddenPanels$outboundSchema` instead. */
  export const outboundSchema = ListAgentsHiddenPanels$outboundSchema;
}

/** @internal */
export const ListAgentsData$inboundSchema: z.ZodType<
  ListAgentsData,
  z.ZodTypeDef,
  unknown
> = z.object({
  _id: z.string(),
  key: z.string(),
  workspace_id: z.string(),
  project_id: z.string(),
  created_by_id: z.string().optional(),
  updated_by_id: z.string().optional(),
  created: z.string().optional(),
  updated: z.string().optional(),
  role: z.string(),
  description: z.string(),
  system_prompt: z.string().optional(),
  instructions: z.string(),
  iconUrl: z.string().optional(),
  status: ListAgentsStatus$inboundSchema,
  settings: z.lazy(() => ListAgentsSettings$inboundSchema).optional(),
  model: z.lazy(() => ListAgentsModel$inboundSchema),
  version_hash: z.string().optional(),
  path: z.string(),
  memory_stores: z.array(z.string()),
  team_of_agents: z.array(z.lazy(() => ListAgentsTeamOfAgents$inboundSchema)),
  metrics: z.lazy(() => ListAgentsMetrics$inboundSchema).optional(),
  variables: z.record(z.any()).optional(),
  knowledge_bases: z.array(z.lazy(() => ListAgentsKnowledgeBases$inboundSchema))
    .optional(),
  hidden_panels: z.array(ListAgentsHiddenPanels$inboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    "_id": "id",
    "workspace_id": "workspaceId",
    "project_id": "projectId",
    "created_by_id": "createdById",
    "updated_by_id": "updatedById",
    "system_prompt": "systemPrompt",
    "version_hash": "versionHash",
    "memory_stores": "memoryStores",
    "team_of_agents": "teamOfAgents",
    "knowledge_bases": "knowledgeBases",
    "hidden_panels": "hiddenPanels",
  });
});

/** @internal */
export type ListAgentsData$Outbound = {
  _id: string;
  key: string;
  workspace_id: string;
  project_id: string;
  created_by_id?: string | undefined;
  updated_by_id?: string | undefined;
  created?: string | undefined;
  updated?: string | undefined;
  role: string;
  description: string;
  system_prompt?: string | undefined;
  instructions: string;
  iconUrl?: string | undefined;
  status: string;
  settings?: ListAgentsSettings$Outbound | undefined;
  model: ListAgentsModel$Outbound;
  version_hash?: string | undefined;
  path: string;
  memory_stores: Array<string>;
  team_of_agents: Array<ListAgentsTeamOfAgents$Outbound>;
  metrics?: ListAgentsMetrics$Outbound | undefined;
  variables?: { [k: string]: any } | undefined;
  knowledge_bases?: Array<ListAgentsKnowledgeBases$Outbound> | undefined;
  hidden_panels?: Array<string> | undefined;
};

/** @internal */
export const ListAgentsData$outboundSchema: z.ZodType<
  ListAgentsData$Outbound,
  z.ZodTypeDef,
  ListAgentsData
> = z.object({
  id: z.string(),
  key: z.string(),
  workspaceId: z.string(),
  projectId: z.string(),
  createdById: z.string().optional(),
  updatedById: z.string().optional(),
  created: z.string().optional(),
  updated: z.string().optional(),
  role: z.string(),
  description: z.string(),
  systemPrompt: z.string().optional(),
  instructions: z.string(),
  iconUrl: z.string().optional(),
  status: ListAgentsStatus$outboundSchema,
  settings: z.lazy(() => ListAgentsSettings$outboundSchema).optional(),
  model: z.lazy(() => ListAgentsModel$outboundSchema),
  versionHash: z.string().optional(),
  path: z.string(),
  memoryStores: z.array(z.string()),
  teamOfAgents: z.array(z.lazy(() => ListAgentsTeamOfAgents$outboundSchema)),
  metrics: z.lazy(() => ListAgentsMetrics$outboundSchema).optional(),
  variables: z.record(z.any()).optional(),
  knowledgeBases: z.array(z.lazy(() => ListAgentsKnowledgeBases$outboundSchema))
    .optional(),
  hiddenPanels: z.array(ListAgentsHiddenPanels$outboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    id: "_id",
    workspaceId: "workspace_id",
    projectId: "project_id",
    createdById: "created_by_id",
    updatedById: "updated_by_id",
    systemPrompt: "system_prompt",
    versionHash: "version_hash",
    memoryStores: "memory_stores",
    teamOfAgents: "team_of_agents",
    knowledgeBases: "knowledge_bases",
    hiddenPanels: "hidden_panels",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListAgentsData$ {
  /** @deprecated use `ListAgentsData$inboundSchema` instead. */
  export const inboundSchema = ListAgentsData$inboundSchema;
  /** @deprecated use `ListAgentsData$outboundSchema` instead. */
  export const outboundSchema = ListAgentsData$outboundSchema;
  /** @deprecated use `ListAgentsData$Outbound` instead. */
  export type Outbound = ListAgentsData$Outbound;
}

export function listAgentsDataToJSON(listAgentsData: ListAgentsData): string {
  return JSON.stringify(ListAgentsData$outboundSchema.parse(listAgentsData));
}

export function listAgentsDataFromJSON(
  jsonString: string,
): SafeParseResult<ListAgentsData, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListAgentsData$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListAgentsData' from JSON`,
  );
}

/** @internal */
export const ListAgentsResponseBody$inboundSchema: z.ZodType<
  ListAgentsResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  object: ListAgentsObject$inboundSchema,
  data: z.array(z.lazy(() => ListAgentsData$inboundSchema)),
  has_more: z.boolean(),
}).transform((v) => {
  return remap$(v, {
    "has_more": "hasMore",
  });
});

/** @internal */
export type ListAgentsResponseBody$Outbound = {
  object: string;
  data: Array<ListAgentsData$Outbound>;
  has_more: boolean;
};

/** @internal */
export const ListAgentsResponseBody$outboundSchema: z.ZodType<
  ListAgentsResponseBody$Outbound,
  z.ZodTypeDef,
  ListAgentsResponseBody
> = z.object({
  object: ListAgentsObject$outboundSchema,
  data: z.array(z.lazy(() => ListAgentsData$outboundSchema)),
  hasMore: z.boolean(),
}).transform((v) => {
  return remap$(v, {
    hasMore: "has_more",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListAgentsResponseBody$ {
  /** @deprecated use `ListAgentsResponseBody$inboundSchema` instead. */
  export const inboundSchema = ListAgentsResponseBody$inboundSchema;
  /** @deprecated use `ListAgentsResponseBody$outboundSchema` instead. */
  export const outboundSchema = ListAgentsResponseBody$outboundSchema;
  /** @deprecated use `ListAgentsResponseBody$Outbound` instead. */
  export type Outbound = ListAgentsResponseBody$Outbound;
}

export function listAgentsResponseBodyToJSON(
  listAgentsResponseBody: ListAgentsResponseBody,
): string {
  return JSON.stringify(
    ListAgentsResponseBody$outboundSchema.parse(listAgentsResponseBody),
  );
}

export function listAgentsResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<ListAgentsResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListAgentsResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListAgentsResponseBody' from JSON`,
  );
}
