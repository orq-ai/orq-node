/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { EventStream } from "../../lib/event-streams.js";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * Up to 4 sequences where the API will stop generating further tokens. The returned text will not contain the stop sequence.
 */
export type PostV2ProxyCompletionsStop = string | Array<string>;

export type PostV2ProxyCompletionsRequestBody = {
  /**
   * ID of the model to use
   */
  model: string;
  /**
   * The prompt(s) to generate completions for, encoded as a string, array of strings, array of tokens, or array of token arrays.
   */
  prompt: string;
  /**
   * Echo back the prompt in addition to the completion
   */
  echo?: boolean | null | undefined;
  /**
   * Number between -2.0 and 2.0. Positive values penalize new tokens based on their existing frequency in the text so far, decreasing the model's likelihood to repeat the same line verbatim.
   */
  frequencyPenalty?: number | null | undefined;
  /**
   * The maximum number of tokens that can be generated in the completion.
   */
  maxTokens?: number | null | undefined;
  /**
   * Number between -2.0 and 2.0. Positive values penalize new tokens based on whether they appear in the text so far, increasing the model's likelihood to talk about new topics.
   */
  presencePenalty?: number | null | undefined;
  /**
   * If specified, our system will make a best effort to sample deterministically, such that repeated requests with the same seed and parameters should return the same result.
   */
  seed?: number | null | undefined;
  /**
   * Up to 4 sequences where the API will stop generating further tokens. The returned text will not contain the stop sequence.
   */
  stop?: string | Array<string> | null | undefined;
  /**
   * What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic.
   */
  temperature?: number | null | undefined;
  /**
   * An alternative to sampling with temperature, called nucleus sampling, where the model considers the results of the tokens with top_p probability mass. So 0.1 means only the tokens comprising the top 10% probability mass are considered.
   */
  topP?: number | null | undefined;
  /**
   * A unique identifier representing your end-user, which can help OpenAI to monitor and detect abuse.
   */
  user?: string | undefined;
  stream?: boolean | undefined;
};

/**
 * The reason the model stopped generating tokens.
 */
export const PostV2ProxyCompletionsProxyFinishReason = {
  Stop: "stop",
  Length: "length",
  ContentFilter: "content_filter",
  ToolCalls: "tool_calls",
} as const;
/**
 * The reason the model stopped generating tokens.
 */
export type PostV2ProxyCompletionsProxyFinishReason = ClosedEnum<
  typeof PostV2ProxyCompletionsProxyFinishReason
>;

export type PostV2ProxyCompletionsProxyChoices = {
  /**
   * The reason the model stopped generating tokens.
   */
  finishReason: PostV2ProxyCompletionsProxyFinishReason;
  /**
   * The index of the choice in the list of choices.
   */
  index: number;
  text: string;
};

/**
 * The Unix timestamp (in seconds) of when the chat completion was created.
 */
export type PostV2ProxyCompletionsCreated = string | number;

export type PostV2ProxyCompletionsProxyPromptTokensDetails = {
  cachedTokens?: number | null | undefined;
  /**
   * The number of audio input tokens consumed by the request.
   */
  audioTokens?: number | null | undefined;
};

export type PostV2ProxyCompletionsProxyCompletionTokensDetails = {
  reasoningTokens?: number | null | undefined;
  acceptedPredictionTokens?: number | null | undefined;
  rejectedPredictionTokens?: number | null | undefined;
  /**
   * The number of audio output tokens produced by the response.
   */
  audioTokens?: number | null | undefined;
};

/**
 * Usage statistics for the completion request.
 */
export type PostV2ProxyCompletionsProxyUsage = {
  /**
   * Number of tokens in the generated completion.
   */
  completionTokens?: number | undefined;
  /**
   * Number of tokens in the prompt.
   */
  promptTokens?: number | undefined;
  /**
   * Total number of tokens used in the request (prompt + completion).
   */
  totalTokens?: number | undefined;
  promptTokensDetails?:
    | PostV2ProxyCompletionsProxyPromptTokensDetails
    | null
    | undefined;
  completionTokensDetails?:
    | PostV2ProxyCompletionsProxyCompletionTokensDetails
    | null
    | undefined;
};

export type PostV2ProxyCompletionsData = {
  /**
   * A unique identifier for the completion.
   */
  id: string;
  /**
   * The list of completion choices the model generated for the input prompt.
   */
  choices: Array<PostV2ProxyCompletionsProxyChoices>;
  /**
   * The Unix timestamp (in seconds) of when the chat completion was created.
   */
  created?: string | number | undefined;
  /**
   * The model used for the chat completion.
   */
  model: string;
  /**
   * This fingerprint represents the backend configuration that the model runs with.
   */
  systemFingerprint?: string | undefined;
  /**
   * The object type
   */
  object: string;
  /**
   * Usage statistics for the completion request.
   */
  usage?: PostV2ProxyCompletionsProxyUsage | undefined;
};

/**
 * Represents a completion response from the API.
 */
export type PostV2ProxyCompletionsProxyResponseBody = {
  data?: PostV2ProxyCompletionsData | undefined;
};

/**
 * The reason the model stopped generating tokens.
 */
export const PostV2ProxyCompletionsFinishReason = {
  Stop: "stop",
  Length: "length",
  ContentFilter: "content_filter",
  ToolCalls: "tool_calls",
} as const;
/**
 * The reason the model stopped generating tokens.
 */
export type PostV2ProxyCompletionsFinishReason = ClosedEnum<
  typeof PostV2ProxyCompletionsFinishReason
>;

export type PostV2ProxyCompletionsChoices = {
  /**
   * The reason the model stopped generating tokens.
   */
  finishReason: PostV2ProxyCompletionsFinishReason;
  /**
   * The index of the choice in the list of choices.
   */
  index: number;
  text: string;
};

/**
 * The Unix timestamp (in seconds) of when the chat completion was created.
 */
export type Created = string | number;

export type PostV2ProxyCompletionsPromptTokensDetails = {
  cachedTokens?: number | null | undefined;
  /**
   * The number of audio input tokens consumed by the request.
   */
  audioTokens?: number | null | undefined;
};

export type PostV2ProxyCompletionsCompletionTokensDetails = {
  reasoningTokens?: number | null | undefined;
  acceptedPredictionTokens?: number | null | undefined;
  rejectedPredictionTokens?: number | null | undefined;
  /**
   * The number of audio output tokens produced by the response.
   */
  audioTokens?: number | null | undefined;
};

/**
 * Usage statistics for the completion request.
 */
export type PostV2ProxyCompletionsUsage = {
  /**
   * Number of tokens in the generated completion.
   */
  completionTokens?: number | undefined;
  /**
   * Number of tokens in the prompt.
   */
  promptTokens?: number | undefined;
  /**
   * Total number of tokens used in the request (prompt + completion).
   */
  totalTokens?: number | undefined;
  promptTokensDetails?:
    | PostV2ProxyCompletionsPromptTokensDetails
    | null
    | undefined;
  completionTokensDetails?:
    | PostV2ProxyCompletionsCompletionTokensDetails
    | null
    | undefined;
};

/**
 * Represents a completion response from the API.
 */
export type PostV2ProxyCompletionsResponseBody = {
  /**
   * A unique identifier for the completion.
   */
  id: string;
  /**
   * The list of completion choices the model generated for the input prompt.
   */
  choices: Array<PostV2ProxyCompletionsChoices>;
  /**
   * The Unix timestamp (in seconds) of when the chat completion was created.
   */
  created?: string | number | undefined;
  /**
   * The model used for the chat completion.
   */
  model: string;
  /**
   * This fingerprint represents the backend configuration that the model runs with.
   */
  systemFingerprint?: string | undefined;
  /**
   * The object type
   */
  object: string;
  /**
   * Usage statistics for the completion request.
   */
  usage?: PostV2ProxyCompletionsUsage | undefined;
};

export type PostV2ProxyCompletionsResponse =
  | PostV2ProxyCompletionsResponseBody
  | EventStream<PostV2ProxyCompletionsProxyResponseBody>;

/** @internal */
export const PostV2ProxyCompletionsStop$inboundSchema: z.ZodType<
  PostV2ProxyCompletionsStop,
  z.ZodTypeDef,
  unknown
> = z.union([z.string(), z.array(z.string())]);

/** @internal */
export type PostV2ProxyCompletionsStop$Outbound = string | Array<string>;

/** @internal */
export const PostV2ProxyCompletionsStop$outboundSchema: z.ZodType<
  PostV2ProxyCompletionsStop$Outbound,
  z.ZodTypeDef,
  PostV2ProxyCompletionsStop
> = z.union([z.string(), z.array(z.string())]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostV2ProxyCompletionsStop$ {
  /** @deprecated use `PostV2ProxyCompletionsStop$inboundSchema` instead. */
  export const inboundSchema = PostV2ProxyCompletionsStop$inboundSchema;
  /** @deprecated use `PostV2ProxyCompletionsStop$outboundSchema` instead. */
  export const outboundSchema = PostV2ProxyCompletionsStop$outboundSchema;
  /** @deprecated use `PostV2ProxyCompletionsStop$Outbound` instead. */
  export type Outbound = PostV2ProxyCompletionsStop$Outbound;
}

export function postV2ProxyCompletionsStopToJSON(
  postV2ProxyCompletionsStop: PostV2ProxyCompletionsStop,
): string {
  return JSON.stringify(
    PostV2ProxyCompletionsStop$outboundSchema.parse(postV2ProxyCompletionsStop),
  );
}

export function postV2ProxyCompletionsStopFromJSON(
  jsonString: string,
): SafeParseResult<PostV2ProxyCompletionsStop, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PostV2ProxyCompletionsStop$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PostV2ProxyCompletionsStop' from JSON`,
  );
}

/** @internal */
export const PostV2ProxyCompletionsRequestBody$inboundSchema: z.ZodType<
  PostV2ProxyCompletionsRequestBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  model: z.string(),
  prompt: z.string(),
  echo: z.nullable(z.boolean().default(false)),
  frequency_penalty: z.nullable(z.number().default(0)),
  max_tokens: z.nullable(z.number().default(16)),
  presence_penalty: z.nullable(z.number().default(0)),
  seed: z.nullable(z.number()).optional(),
  stop: z.nullable(z.union([z.string(), z.array(z.string())])).optional(),
  temperature: z.nullable(z.number().default(1)),
  top_p: z.nullable(z.number().default(1)),
  user: z.string().optional(),
  stream: z.boolean().default(false),
}).transform((v) => {
  return remap$(v, {
    "frequency_penalty": "frequencyPenalty",
    "max_tokens": "maxTokens",
    "presence_penalty": "presencePenalty",
    "top_p": "topP",
  });
});

/** @internal */
export type PostV2ProxyCompletionsRequestBody$Outbound = {
  model: string;
  prompt: string;
  echo: boolean | null;
  frequency_penalty: number | null;
  max_tokens: number | null;
  presence_penalty: number | null;
  seed?: number | null | undefined;
  stop?: string | Array<string> | null | undefined;
  temperature: number | null;
  top_p: number | null;
  user?: string | undefined;
  stream: boolean;
};

/** @internal */
export const PostV2ProxyCompletionsRequestBody$outboundSchema: z.ZodType<
  PostV2ProxyCompletionsRequestBody$Outbound,
  z.ZodTypeDef,
  PostV2ProxyCompletionsRequestBody
> = z.object({
  model: z.string(),
  prompt: z.string(),
  echo: z.nullable(z.boolean().default(false)),
  frequencyPenalty: z.nullable(z.number().default(0)),
  maxTokens: z.nullable(z.number().default(16)),
  presencePenalty: z.nullable(z.number().default(0)),
  seed: z.nullable(z.number()).optional(),
  stop: z.nullable(z.union([z.string(), z.array(z.string())])).optional(),
  temperature: z.nullable(z.number().default(1)),
  topP: z.nullable(z.number().default(1)),
  user: z.string().optional(),
  stream: z.boolean().default(false),
}).transform((v) => {
  return remap$(v, {
    frequencyPenalty: "frequency_penalty",
    maxTokens: "max_tokens",
    presencePenalty: "presence_penalty",
    topP: "top_p",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostV2ProxyCompletionsRequestBody$ {
  /** @deprecated use `PostV2ProxyCompletionsRequestBody$inboundSchema` instead. */
  export const inboundSchema = PostV2ProxyCompletionsRequestBody$inboundSchema;
  /** @deprecated use `PostV2ProxyCompletionsRequestBody$outboundSchema` instead. */
  export const outboundSchema =
    PostV2ProxyCompletionsRequestBody$outboundSchema;
  /** @deprecated use `PostV2ProxyCompletionsRequestBody$Outbound` instead. */
  export type Outbound = PostV2ProxyCompletionsRequestBody$Outbound;
}

export function postV2ProxyCompletionsRequestBodyToJSON(
  postV2ProxyCompletionsRequestBody: PostV2ProxyCompletionsRequestBody,
): string {
  return JSON.stringify(
    PostV2ProxyCompletionsRequestBody$outboundSchema.parse(
      postV2ProxyCompletionsRequestBody,
    ),
  );
}

export function postV2ProxyCompletionsRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<PostV2ProxyCompletionsRequestBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PostV2ProxyCompletionsRequestBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PostV2ProxyCompletionsRequestBody' from JSON`,
  );
}

/** @internal */
export const PostV2ProxyCompletionsProxyFinishReason$inboundSchema:
  z.ZodNativeEnum<typeof PostV2ProxyCompletionsProxyFinishReason> = z
    .nativeEnum(PostV2ProxyCompletionsProxyFinishReason);

/** @internal */
export const PostV2ProxyCompletionsProxyFinishReason$outboundSchema:
  z.ZodNativeEnum<typeof PostV2ProxyCompletionsProxyFinishReason> =
    PostV2ProxyCompletionsProxyFinishReason$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostV2ProxyCompletionsProxyFinishReason$ {
  /** @deprecated use `PostV2ProxyCompletionsProxyFinishReason$inboundSchema` instead. */
  export const inboundSchema =
    PostV2ProxyCompletionsProxyFinishReason$inboundSchema;
  /** @deprecated use `PostV2ProxyCompletionsProxyFinishReason$outboundSchema` instead. */
  export const outboundSchema =
    PostV2ProxyCompletionsProxyFinishReason$outboundSchema;
}

/** @internal */
export const PostV2ProxyCompletionsProxyChoices$inboundSchema: z.ZodType<
  PostV2ProxyCompletionsProxyChoices,
  z.ZodTypeDef,
  unknown
> = z.object({
  finish_reason: PostV2ProxyCompletionsProxyFinishReason$inboundSchema,
  index: z.number(),
  text: z.string(),
}).transform((v) => {
  return remap$(v, {
    "finish_reason": "finishReason",
  });
});

/** @internal */
export type PostV2ProxyCompletionsProxyChoices$Outbound = {
  finish_reason: string;
  index: number;
  text: string;
};

/** @internal */
export const PostV2ProxyCompletionsProxyChoices$outboundSchema: z.ZodType<
  PostV2ProxyCompletionsProxyChoices$Outbound,
  z.ZodTypeDef,
  PostV2ProxyCompletionsProxyChoices
> = z.object({
  finishReason: PostV2ProxyCompletionsProxyFinishReason$outboundSchema,
  index: z.number(),
  text: z.string(),
}).transform((v) => {
  return remap$(v, {
    finishReason: "finish_reason",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostV2ProxyCompletionsProxyChoices$ {
  /** @deprecated use `PostV2ProxyCompletionsProxyChoices$inboundSchema` instead. */
  export const inboundSchema = PostV2ProxyCompletionsProxyChoices$inboundSchema;
  /** @deprecated use `PostV2ProxyCompletionsProxyChoices$outboundSchema` instead. */
  export const outboundSchema =
    PostV2ProxyCompletionsProxyChoices$outboundSchema;
  /** @deprecated use `PostV2ProxyCompletionsProxyChoices$Outbound` instead. */
  export type Outbound = PostV2ProxyCompletionsProxyChoices$Outbound;
}

export function postV2ProxyCompletionsProxyChoicesToJSON(
  postV2ProxyCompletionsProxyChoices: PostV2ProxyCompletionsProxyChoices,
): string {
  return JSON.stringify(
    PostV2ProxyCompletionsProxyChoices$outboundSchema.parse(
      postV2ProxyCompletionsProxyChoices,
    ),
  );
}

export function postV2ProxyCompletionsProxyChoicesFromJSON(
  jsonString: string,
): SafeParseResult<PostV2ProxyCompletionsProxyChoices, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      PostV2ProxyCompletionsProxyChoices$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PostV2ProxyCompletionsProxyChoices' from JSON`,
  );
}

/** @internal */
export const PostV2ProxyCompletionsCreated$inboundSchema: z.ZodType<
  PostV2ProxyCompletionsCreated,
  z.ZodTypeDef,
  unknown
> = z.union([z.string(), z.number()]);

/** @internal */
export type PostV2ProxyCompletionsCreated$Outbound = string | number;

/** @internal */
export const PostV2ProxyCompletionsCreated$outboundSchema: z.ZodType<
  PostV2ProxyCompletionsCreated$Outbound,
  z.ZodTypeDef,
  PostV2ProxyCompletionsCreated
> = z.union([z.string(), z.number()]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostV2ProxyCompletionsCreated$ {
  /** @deprecated use `PostV2ProxyCompletionsCreated$inboundSchema` instead. */
  export const inboundSchema = PostV2ProxyCompletionsCreated$inboundSchema;
  /** @deprecated use `PostV2ProxyCompletionsCreated$outboundSchema` instead. */
  export const outboundSchema = PostV2ProxyCompletionsCreated$outboundSchema;
  /** @deprecated use `PostV2ProxyCompletionsCreated$Outbound` instead. */
  export type Outbound = PostV2ProxyCompletionsCreated$Outbound;
}

export function postV2ProxyCompletionsCreatedToJSON(
  postV2ProxyCompletionsCreated: PostV2ProxyCompletionsCreated,
): string {
  return JSON.stringify(
    PostV2ProxyCompletionsCreated$outboundSchema.parse(
      postV2ProxyCompletionsCreated,
    ),
  );
}

export function postV2ProxyCompletionsCreatedFromJSON(
  jsonString: string,
): SafeParseResult<PostV2ProxyCompletionsCreated, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PostV2ProxyCompletionsCreated$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PostV2ProxyCompletionsCreated' from JSON`,
  );
}

/** @internal */
export const PostV2ProxyCompletionsProxyPromptTokensDetails$inboundSchema:
  z.ZodType<
    PostV2ProxyCompletionsProxyPromptTokensDetails,
    z.ZodTypeDef,
    unknown
  > = z.object({
    cached_tokens: z.nullable(z.number().int()).optional(),
    audio_tokens: z.nullable(z.number().int()).optional(),
  }).transform((v) => {
    return remap$(v, {
      "cached_tokens": "cachedTokens",
      "audio_tokens": "audioTokens",
    });
  });

/** @internal */
export type PostV2ProxyCompletionsProxyPromptTokensDetails$Outbound = {
  cached_tokens?: number | null | undefined;
  audio_tokens?: number | null | undefined;
};

/** @internal */
export const PostV2ProxyCompletionsProxyPromptTokensDetails$outboundSchema:
  z.ZodType<
    PostV2ProxyCompletionsProxyPromptTokensDetails$Outbound,
    z.ZodTypeDef,
    PostV2ProxyCompletionsProxyPromptTokensDetails
  > = z.object({
    cachedTokens: z.nullable(z.number().int()).optional(),
    audioTokens: z.nullable(z.number().int()).optional(),
  }).transform((v) => {
    return remap$(v, {
      cachedTokens: "cached_tokens",
      audioTokens: "audio_tokens",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostV2ProxyCompletionsProxyPromptTokensDetails$ {
  /** @deprecated use `PostV2ProxyCompletionsProxyPromptTokensDetails$inboundSchema` instead. */
  export const inboundSchema =
    PostV2ProxyCompletionsProxyPromptTokensDetails$inboundSchema;
  /** @deprecated use `PostV2ProxyCompletionsProxyPromptTokensDetails$outboundSchema` instead. */
  export const outboundSchema =
    PostV2ProxyCompletionsProxyPromptTokensDetails$outboundSchema;
  /** @deprecated use `PostV2ProxyCompletionsProxyPromptTokensDetails$Outbound` instead. */
  export type Outbound =
    PostV2ProxyCompletionsProxyPromptTokensDetails$Outbound;
}

export function postV2ProxyCompletionsProxyPromptTokensDetailsToJSON(
  postV2ProxyCompletionsProxyPromptTokensDetails:
    PostV2ProxyCompletionsProxyPromptTokensDetails,
): string {
  return JSON.stringify(
    PostV2ProxyCompletionsProxyPromptTokensDetails$outboundSchema.parse(
      postV2ProxyCompletionsProxyPromptTokensDetails,
    ),
  );
}

export function postV2ProxyCompletionsProxyPromptTokensDetailsFromJSON(
  jsonString: string,
): SafeParseResult<
  PostV2ProxyCompletionsProxyPromptTokensDetails,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PostV2ProxyCompletionsProxyPromptTokensDetails$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'PostV2ProxyCompletionsProxyPromptTokensDetails' from JSON`,
  );
}

/** @internal */
export const PostV2ProxyCompletionsProxyCompletionTokensDetails$inboundSchema:
  z.ZodType<
    PostV2ProxyCompletionsProxyCompletionTokensDetails,
    z.ZodTypeDef,
    unknown
  > = z.object({
    reasoning_tokens: z.nullable(z.number()).optional(),
    accepted_prediction_tokens: z.nullable(z.number()).optional(),
    rejected_prediction_tokens: z.nullable(z.number()).optional(),
    audio_tokens: z.nullable(z.number().int()).optional(),
  }).transform((v) => {
    return remap$(v, {
      "reasoning_tokens": "reasoningTokens",
      "accepted_prediction_tokens": "acceptedPredictionTokens",
      "rejected_prediction_tokens": "rejectedPredictionTokens",
      "audio_tokens": "audioTokens",
    });
  });

/** @internal */
export type PostV2ProxyCompletionsProxyCompletionTokensDetails$Outbound = {
  reasoning_tokens?: number | null | undefined;
  accepted_prediction_tokens?: number | null | undefined;
  rejected_prediction_tokens?: number | null | undefined;
  audio_tokens?: number | null | undefined;
};

/** @internal */
export const PostV2ProxyCompletionsProxyCompletionTokensDetails$outboundSchema:
  z.ZodType<
    PostV2ProxyCompletionsProxyCompletionTokensDetails$Outbound,
    z.ZodTypeDef,
    PostV2ProxyCompletionsProxyCompletionTokensDetails
  > = z.object({
    reasoningTokens: z.nullable(z.number()).optional(),
    acceptedPredictionTokens: z.nullable(z.number()).optional(),
    rejectedPredictionTokens: z.nullable(z.number()).optional(),
    audioTokens: z.nullable(z.number().int()).optional(),
  }).transform((v) => {
    return remap$(v, {
      reasoningTokens: "reasoning_tokens",
      acceptedPredictionTokens: "accepted_prediction_tokens",
      rejectedPredictionTokens: "rejected_prediction_tokens",
      audioTokens: "audio_tokens",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostV2ProxyCompletionsProxyCompletionTokensDetails$ {
  /** @deprecated use `PostV2ProxyCompletionsProxyCompletionTokensDetails$inboundSchema` instead. */
  export const inboundSchema =
    PostV2ProxyCompletionsProxyCompletionTokensDetails$inboundSchema;
  /** @deprecated use `PostV2ProxyCompletionsProxyCompletionTokensDetails$outboundSchema` instead. */
  export const outboundSchema =
    PostV2ProxyCompletionsProxyCompletionTokensDetails$outboundSchema;
  /** @deprecated use `PostV2ProxyCompletionsProxyCompletionTokensDetails$Outbound` instead. */
  export type Outbound =
    PostV2ProxyCompletionsProxyCompletionTokensDetails$Outbound;
}

export function postV2ProxyCompletionsProxyCompletionTokensDetailsToJSON(
  postV2ProxyCompletionsProxyCompletionTokensDetails:
    PostV2ProxyCompletionsProxyCompletionTokensDetails,
): string {
  return JSON.stringify(
    PostV2ProxyCompletionsProxyCompletionTokensDetails$outboundSchema.parse(
      postV2ProxyCompletionsProxyCompletionTokensDetails,
    ),
  );
}

export function postV2ProxyCompletionsProxyCompletionTokensDetailsFromJSON(
  jsonString: string,
): SafeParseResult<
  PostV2ProxyCompletionsProxyCompletionTokensDetails,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PostV2ProxyCompletionsProxyCompletionTokensDetails$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'PostV2ProxyCompletionsProxyCompletionTokensDetails' from JSON`,
  );
}

/** @internal */
export const PostV2ProxyCompletionsProxyUsage$inboundSchema: z.ZodType<
  PostV2ProxyCompletionsProxyUsage,
  z.ZodTypeDef,
  unknown
> = z.object({
  completion_tokens: z.number().optional(),
  prompt_tokens: z.number().optional(),
  total_tokens: z.number().optional(),
  prompt_tokens_details: z.nullable(
    z.lazy(() => PostV2ProxyCompletionsProxyPromptTokensDetails$inboundSchema),
  ).optional(),
  completion_tokens_details: z.nullable(
    z.lazy(() =>
      PostV2ProxyCompletionsProxyCompletionTokensDetails$inboundSchema
    ),
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    "completion_tokens": "completionTokens",
    "prompt_tokens": "promptTokens",
    "total_tokens": "totalTokens",
    "prompt_tokens_details": "promptTokensDetails",
    "completion_tokens_details": "completionTokensDetails",
  });
});

/** @internal */
export type PostV2ProxyCompletionsProxyUsage$Outbound = {
  completion_tokens?: number | undefined;
  prompt_tokens?: number | undefined;
  total_tokens?: number | undefined;
  prompt_tokens_details?:
    | PostV2ProxyCompletionsProxyPromptTokensDetails$Outbound
    | null
    | undefined;
  completion_tokens_details?:
    | PostV2ProxyCompletionsProxyCompletionTokensDetails$Outbound
    | null
    | undefined;
};

/** @internal */
export const PostV2ProxyCompletionsProxyUsage$outboundSchema: z.ZodType<
  PostV2ProxyCompletionsProxyUsage$Outbound,
  z.ZodTypeDef,
  PostV2ProxyCompletionsProxyUsage
> = z.object({
  completionTokens: z.number().optional(),
  promptTokens: z.number().optional(),
  totalTokens: z.number().optional(),
  promptTokensDetails: z.nullable(
    z.lazy(() => PostV2ProxyCompletionsProxyPromptTokensDetails$outboundSchema),
  ).optional(),
  completionTokensDetails: z.nullable(
    z.lazy(() =>
      PostV2ProxyCompletionsProxyCompletionTokensDetails$outboundSchema
    ),
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    completionTokens: "completion_tokens",
    promptTokens: "prompt_tokens",
    totalTokens: "total_tokens",
    promptTokensDetails: "prompt_tokens_details",
    completionTokensDetails: "completion_tokens_details",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostV2ProxyCompletionsProxyUsage$ {
  /** @deprecated use `PostV2ProxyCompletionsProxyUsage$inboundSchema` instead. */
  export const inboundSchema = PostV2ProxyCompletionsProxyUsage$inboundSchema;
  /** @deprecated use `PostV2ProxyCompletionsProxyUsage$outboundSchema` instead. */
  export const outboundSchema = PostV2ProxyCompletionsProxyUsage$outboundSchema;
  /** @deprecated use `PostV2ProxyCompletionsProxyUsage$Outbound` instead. */
  export type Outbound = PostV2ProxyCompletionsProxyUsage$Outbound;
}

export function postV2ProxyCompletionsProxyUsageToJSON(
  postV2ProxyCompletionsProxyUsage: PostV2ProxyCompletionsProxyUsage,
): string {
  return JSON.stringify(
    PostV2ProxyCompletionsProxyUsage$outboundSchema.parse(
      postV2ProxyCompletionsProxyUsage,
    ),
  );
}

export function postV2ProxyCompletionsProxyUsageFromJSON(
  jsonString: string,
): SafeParseResult<PostV2ProxyCompletionsProxyUsage, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PostV2ProxyCompletionsProxyUsage$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PostV2ProxyCompletionsProxyUsage' from JSON`,
  );
}

/** @internal */
export const PostV2ProxyCompletionsData$inboundSchema: z.ZodType<
  PostV2ProxyCompletionsData,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  choices: z.array(
    z.lazy(() => PostV2ProxyCompletionsProxyChoices$inboundSchema),
  ),
  created: z.union([z.string(), z.number()]).optional(),
  model: z.string(),
  system_fingerprint: z.string().optional(),
  object: z.string(),
  usage: z.lazy(() => PostV2ProxyCompletionsProxyUsage$inboundSchema)
    .optional(),
}).transform((v) => {
  return remap$(v, {
    "system_fingerprint": "systemFingerprint",
  });
});

/** @internal */
export type PostV2ProxyCompletionsData$Outbound = {
  id: string;
  choices: Array<PostV2ProxyCompletionsProxyChoices$Outbound>;
  created?: string | number | undefined;
  model: string;
  system_fingerprint?: string | undefined;
  object: string;
  usage?: PostV2ProxyCompletionsProxyUsage$Outbound | undefined;
};

/** @internal */
export const PostV2ProxyCompletionsData$outboundSchema: z.ZodType<
  PostV2ProxyCompletionsData$Outbound,
  z.ZodTypeDef,
  PostV2ProxyCompletionsData
> = z.object({
  id: z.string(),
  choices: z.array(
    z.lazy(() => PostV2ProxyCompletionsProxyChoices$outboundSchema),
  ),
  created: z.union([z.string(), z.number()]).optional(),
  model: z.string(),
  systemFingerprint: z.string().optional(),
  object: z.string(),
  usage: z.lazy(() => PostV2ProxyCompletionsProxyUsage$outboundSchema)
    .optional(),
}).transform((v) => {
  return remap$(v, {
    systemFingerprint: "system_fingerprint",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostV2ProxyCompletionsData$ {
  /** @deprecated use `PostV2ProxyCompletionsData$inboundSchema` instead. */
  export const inboundSchema = PostV2ProxyCompletionsData$inboundSchema;
  /** @deprecated use `PostV2ProxyCompletionsData$outboundSchema` instead. */
  export const outboundSchema = PostV2ProxyCompletionsData$outboundSchema;
  /** @deprecated use `PostV2ProxyCompletionsData$Outbound` instead. */
  export type Outbound = PostV2ProxyCompletionsData$Outbound;
}

export function postV2ProxyCompletionsDataToJSON(
  postV2ProxyCompletionsData: PostV2ProxyCompletionsData,
): string {
  return JSON.stringify(
    PostV2ProxyCompletionsData$outboundSchema.parse(postV2ProxyCompletionsData),
  );
}

export function postV2ProxyCompletionsDataFromJSON(
  jsonString: string,
): SafeParseResult<PostV2ProxyCompletionsData, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PostV2ProxyCompletionsData$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PostV2ProxyCompletionsData' from JSON`,
  );
}

/** @internal */
export const PostV2ProxyCompletionsProxyResponseBody$inboundSchema: z.ZodType<
  PostV2ProxyCompletionsProxyResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  data: z.string().transform((v, ctx) => {
    try {
      return JSON.parse(v);
    } catch (err) {
      ctx.addIssue({
        code: z.ZodIssueCode.custom,
        message: `malformed json: ${err}`,
      });
      return z.NEVER;
    }
  }).pipe(z.lazy(() => PostV2ProxyCompletionsData$inboundSchema).optional()),
});

/** @internal */
export type PostV2ProxyCompletionsProxyResponseBody$Outbound = {
  data?: PostV2ProxyCompletionsData$Outbound | undefined;
};

/** @internal */
export const PostV2ProxyCompletionsProxyResponseBody$outboundSchema: z.ZodType<
  PostV2ProxyCompletionsProxyResponseBody$Outbound,
  z.ZodTypeDef,
  PostV2ProxyCompletionsProxyResponseBody
> = z.object({
  data: z.lazy(() => PostV2ProxyCompletionsData$outboundSchema).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostV2ProxyCompletionsProxyResponseBody$ {
  /** @deprecated use `PostV2ProxyCompletionsProxyResponseBody$inboundSchema` instead. */
  export const inboundSchema =
    PostV2ProxyCompletionsProxyResponseBody$inboundSchema;
  /** @deprecated use `PostV2ProxyCompletionsProxyResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    PostV2ProxyCompletionsProxyResponseBody$outboundSchema;
  /** @deprecated use `PostV2ProxyCompletionsProxyResponseBody$Outbound` instead. */
  export type Outbound = PostV2ProxyCompletionsProxyResponseBody$Outbound;
}

export function postV2ProxyCompletionsProxyResponseBodyToJSON(
  postV2ProxyCompletionsProxyResponseBody:
    PostV2ProxyCompletionsProxyResponseBody,
): string {
  return JSON.stringify(
    PostV2ProxyCompletionsProxyResponseBody$outboundSchema.parse(
      postV2ProxyCompletionsProxyResponseBody,
    ),
  );
}

export function postV2ProxyCompletionsProxyResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<
  PostV2ProxyCompletionsProxyResponseBody,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PostV2ProxyCompletionsProxyResponseBody$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'PostV2ProxyCompletionsProxyResponseBody' from JSON`,
  );
}

/** @internal */
export const PostV2ProxyCompletionsFinishReason$inboundSchema: z.ZodNativeEnum<
  typeof PostV2ProxyCompletionsFinishReason
> = z.nativeEnum(PostV2ProxyCompletionsFinishReason);

/** @internal */
export const PostV2ProxyCompletionsFinishReason$outboundSchema: z.ZodNativeEnum<
  typeof PostV2ProxyCompletionsFinishReason
> = PostV2ProxyCompletionsFinishReason$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostV2ProxyCompletionsFinishReason$ {
  /** @deprecated use `PostV2ProxyCompletionsFinishReason$inboundSchema` instead. */
  export const inboundSchema = PostV2ProxyCompletionsFinishReason$inboundSchema;
  /** @deprecated use `PostV2ProxyCompletionsFinishReason$outboundSchema` instead. */
  export const outboundSchema =
    PostV2ProxyCompletionsFinishReason$outboundSchema;
}

/** @internal */
export const PostV2ProxyCompletionsChoices$inboundSchema: z.ZodType<
  PostV2ProxyCompletionsChoices,
  z.ZodTypeDef,
  unknown
> = z.object({
  finish_reason: PostV2ProxyCompletionsFinishReason$inboundSchema,
  index: z.number(),
  text: z.string(),
}).transform((v) => {
  return remap$(v, {
    "finish_reason": "finishReason",
  });
});

/** @internal */
export type PostV2ProxyCompletionsChoices$Outbound = {
  finish_reason: string;
  index: number;
  text: string;
};

/** @internal */
export const PostV2ProxyCompletionsChoices$outboundSchema: z.ZodType<
  PostV2ProxyCompletionsChoices$Outbound,
  z.ZodTypeDef,
  PostV2ProxyCompletionsChoices
> = z.object({
  finishReason: PostV2ProxyCompletionsFinishReason$outboundSchema,
  index: z.number(),
  text: z.string(),
}).transform((v) => {
  return remap$(v, {
    finishReason: "finish_reason",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostV2ProxyCompletionsChoices$ {
  /** @deprecated use `PostV2ProxyCompletionsChoices$inboundSchema` instead. */
  export const inboundSchema = PostV2ProxyCompletionsChoices$inboundSchema;
  /** @deprecated use `PostV2ProxyCompletionsChoices$outboundSchema` instead. */
  export const outboundSchema = PostV2ProxyCompletionsChoices$outboundSchema;
  /** @deprecated use `PostV2ProxyCompletionsChoices$Outbound` instead. */
  export type Outbound = PostV2ProxyCompletionsChoices$Outbound;
}

export function postV2ProxyCompletionsChoicesToJSON(
  postV2ProxyCompletionsChoices: PostV2ProxyCompletionsChoices,
): string {
  return JSON.stringify(
    PostV2ProxyCompletionsChoices$outboundSchema.parse(
      postV2ProxyCompletionsChoices,
    ),
  );
}

export function postV2ProxyCompletionsChoicesFromJSON(
  jsonString: string,
): SafeParseResult<PostV2ProxyCompletionsChoices, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PostV2ProxyCompletionsChoices$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PostV2ProxyCompletionsChoices' from JSON`,
  );
}

/** @internal */
export const Created$inboundSchema: z.ZodType<Created, z.ZodTypeDef, unknown> =
  z.union([z.string(), z.number()]);

/** @internal */
export type Created$Outbound = string | number;

/** @internal */
export const Created$outboundSchema: z.ZodType<
  Created$Outbound,
  z.ZodTypeDef,
  Created
> = z.union([z.string(), z.number()]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Created$ {
  /** @deprecated use `Created$inboundSchema` instead. */
  export const inboundSchema = Created$inboundSchema;
  /** @deprecated use `Created$outboundSchema` instead. */
  export const outboundSchema = Created$outboundSchema;
  /** @deprecated use `Created$Outbound` instead. */
  export type Outbound = Created$Outbound;
}

export function createdToJSON(created: Created): string {
  return JSON.stringify(Created$outboundSchema.parse(created));
}

export function createdFromJSON(
  jsonString: string,
): SafeParseResult<Created, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Created$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Created' from JSON`,
  );
}

/** @internal */
export const PostV2ProxyCompletionsPromptTokensDetails$inboundSchema: z.ZodType<
  PostV2ProxyCompletionsPromptTokensDetails,
  z.ZodTypeDef,
  unknown
> = z.object({
  cached_tokens: z.nullable(z.number().int()).optional(),
  audio_tokens: z.nullable(z.number().int()).optional(),
}).transform((v) => {
  return remap$(v, {
    "cached_tokens": "cachedTokens",
    "audio_tokens": "audioTokens",
  });
});

/** @internal */
export type PostV2ProxyCompletionsPromptTokensDetails$Outbound = {
  cached_tokens?: number | null | undefined;
  audio_tokens?: number | null | undefined;
};

/** @internal */
export const PostV2ProxyCompletionsPromptTokensDetails$outboundSchema:
  z.ZodType<
    PostV2ProxyCompletionsPromptTokensDetails$Outbound,
    z.ZodTypeDef,
    PostV2ProxyCompletionsPromptTokensDetails
  > = z.object({
    cachedTokens: z.nullable(z.number().int()).optional(),
    audioTokens: z.nullable(z.number().int()).optional(),
  }).transform((v) => {
    return remap$(v, {
      cachedTokens: "cached_tokens",
      audioTokens: "audio_tokens",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostV2ProxyCompletionsPromptTokensDetails$ {
  /** @deprecated use `PostV2ProxyCompletionsPromptTokensDetails$inboundSchema` instead. */
  export const inboundSchema =
    PostV2ProxyCompletionsPromptTokensDetails$inboundSchema;
  /** @deprecated use `PostV2ProxyCompletionsPromptTokensDetails$outboundSchema` instead. */
  export const outboundSchema =
    PostV2ProxyCompletionsPromptTokensDetails$outboundSchema;
  /** @deprecated use `PostV2ProxyCompletionsPromptTokensDetails$Outbound` instead. */
  export type Outbound = PostV2ProxyCompletionsPromptTokensDetails$Outbound;
}

export function postV2ProxyCompletionsPromptTokensDetailsToJSON(
  postV2ProxyCompletionsPromptTokensDetails:
    PostV2ProxyCompletionsPromptTokensDetails,
): string {
  return JSON.stringify(
    PostV2ProxyCompletionsPromptTokensDetails$outboundSchema.parse(
      postV2ProxyCompletionsPromptTokensDetails,
    ),
  );
}

export function postV2ProxyCompletionsPromptTokensDetailsFromJSON(
  jsonString: string,
): SafeParseResult<
  PostV2ProxyCompletionsPromptTokensDetails,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PostV2ProxyCompletionsPromptTokensDetails$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'PostV2ProxyCompletionsPromptTokensDetails' from JSON`,
  );
}

/** @internal */
export const PostV2ProxyCompletionsCompletionTokensDetails$inboundSchema:
  z.ZodType<
    PostV2ProxyCompletionsCompletionTokensDetails,
    z.ZodTypeDef,
    unknown
  > = z.object({
    reasoning_tokens: z.nullable(z.number()).optional(),
    accepted_prediction_tokens: z.nullable(z.number()).optional(),
    rejected_prediction_tokens: z.nullable(z.number()).optional(),
    audio_tokens: z.nullable(z.number().int()).optional(),
  }).transform((v) => {
    return remap$(v, {
      "reasoning_tokens": "reasoningTokens",
      "accepted_prediction_tokens": "acceptedPredictionTokens",
      "rejected_prediction_tokens": "rejectedPredictionTokens",
      "audio_tokens": "audioTokens",
    });
  });

/** @internal */
export type PostV2ProxyCompletionsCompletionTokensDetails$Outbound = {
  reasoning_tokens?: number | null | undefined;
  accepted_prediction_tokens?: number | null | undefined;
  rejected_prediction_tokens?: number | null | undefined;
  audio_tokens?: number | null | undefined;
};

/** @internal */
export const PostV2ProxyCompletionsCompletionTokensDetails$outboundSchema:
  z.ZodType<
    PostV2ProxyCompletionsCompletionTokensDetails$Outbound,
    z.ZodTypeDef,
    PostV2ProxyCompletionsCompletionTokensDetails
  > = z.object({
    reasoningTokens: z.nullable(z.number()).optional(),
    acceptedPredictionTokens: z.nullable(z.number()).optional(),
    rejectedPredictionTokens: z.nullable(z.number()).optional(),
    audioTokens: z.nullable(z.number().int()).optional(),
  }).transform((v) => {
    return remap$(v, {
      reasoningTokens: "reasoning_tokens",
      acceptedPredictionTokens: "accepted_prediction_tokens",
      rejectedPredictionTokens: "rejected_prediction_tokens",
      audioTokens: "audio_tokens",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostV2ProxyCompletionsCompletionTokensDetails$ {
  /** @deprecated use `PostV2ProxyCompletionsCompletionTokensDetails$inboundSchema` instead. */
  export const inboundSchema =
    PostV2ProxyCompletionsCompletionTokensDetails$inboundSchema;
  /** @deprecated use `PostV2ProxyCompletionsCompletionTokensDetails$outboundSchema` instead. */
  export const outboundSchema =
    PostV2ProxyCompletionsCompletionTokensDetails$outboundSchema;
  /** @deprecated use `PostV2ProxyCompletionsCompletionTokensDetails$Outbound` instead. */
  export type Outbound = PostV2ProxyCompletionsCompletionTokensDetails$Outbound;
}

export function postV2ProxyCompletionsCompletionTokensDetailsToJSON(
  postV2ProxyCompletionsCompletionTokensDetails:
    PostV2ProxyCompletionsCompletionTokensDetails,
): string {
  return JSON.stringify(
    PostV2ProxyCompletionsCompletionTokensDetails$outboundSchema.parse(
      postV2ProxyCompletionsCompletionTokensDetails,
    ),
  );
}

export function postV2ProxyCompletionsCompletionTokensDetailsFromJSON(
  jsonString: string,
): SafeParseResult<
  PostV2ProxyCompletionsCompletionTokensDetails,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PostV2ProxyCompletionsCompletionTokensDetails$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'PostV2ProxyCompletionsCompletionTokensDetails' from JSON`,
  );
}

/** @internal */
export const PostV2ProxyCompletionsUsage$inboundSchema: z.ZodType<
  PostV2ProxyCompletionsUsage,
  z.ZodTypeDef,
  unknown
> = z.object({
  completion_tokens: z.number().optional(),
  prompt_tokens: z.number().optional(),
  total_tokens: z.number().optional(),
  prompt_tokens_details: z.nullable(
    z.lazy(() => PostV2ProxyCompletionsPromptTokensDetails$inboundSchema),
  ).optional(),
  completion_tokens_details: z.nullable(
    z.lazy(() => PostV2ProxyCompletionsCompletionTokensDetails$inboundSchema),
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    "completion_tokens": "completionTokens",
    "prompt_tokens": "promptTokens",
    "total_tokens": "totalTokens",
    "prompt_tokens_details": "promptTokensDetails",
    "completion_tokens_details": "completionTokensDetails",
  });
});

/** @internal */
export type PostV2ProxyCompletionsUsage$Outbound = {
  completion_tokens?: number | undefined;
  prompt_tokens?: number | undefined;
  total_tokens?: number | undefined;
  prompt_tokens_details?:
    | PostV2ProxyCompletionsPromptTokensDetails$Outbound
    | null
    | undefined;
  completion_tokens_details?:
    | PostV2ProxyCompletionsCompletionTokensDetails$Outbound
    | null
    | undefined;
};

/** @internal */
export const PostV2ProxyCompletionsUsage$outboundSchema: z.ZodType<
  PostV2ProxyCompletionsUsage$Outbound,
  z.ZodTypeDef,
  PostV2ProxyCompletionsUsage
> = z.object({
  completionTokens: z.number().optional(),
  promptTokens: z.number().optional(),
  totalTokens: z.number().optional(),
  promptTokensDetails: z.nullable(
    z.lazy(() => PostV2ProxyCompletionsPromptTokensDetails$outboundSchema),
  ).optional(),
  completionTokensDetails: z.nullable(
    z.lazy(() => PostV2ProxyCompletionsCompletionTokensDetails$outboundSchema),
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    completionTokens: "completion_tokens",
    promptTokens: "prompt_tokens",
    totalTokens: "total_tokens",
    promptTokensDetails: "prompt_tokens_details",
    completionTokensDetails: "completion_tokens_details",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostV2ProxyCompletionsUsage$ {
  /** @deprecated use `PostV2ProxyCompletionsUsage$inboundSchema` instead. */
  export const inboundSchema = PostV2ProxyCompletionsUsage$inboundSchema;
  /** @deprecated use `PostV2ProxyCompletionsUsage$outboundSchema` instead. */
  export const outboundSchema = PostV2ProxyCompletionsUsage$outboundSchema;
  /** @deprecated use `PostV2ProxyCompletionsUsage$Outbound` instead. */
  export type Outbound = PostV2ProxyCompletionsUsage$Outbound;
}

export function postV2ProxyCompletionsUsageToJSON(
  postV2ProxyCompletionsUsage: PostV2ProxyCompletionsUsage,
): string {
  return JSON.stringify(
    PostV2ProxyCompletionsUsage$outboundSchema.parse(
      postV2ProxyCompletionsUsage,
    ),
  );
}

export function postV2ProxyCompletionsUsageFromJSON(
  jsonString: string,
): SafeParseResult<PostV2ProxyCompletionsUsage, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PostV2ProxyCompletionsUsage$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PostV2ProxyCompletionsUsage' from JSON`,
  );
}

/** @internal */
export const PostV2ProxyCompletionsResponseBody$inboundSchema: z.ZodType<
  PostV2ProxyCompletionsResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  choices: z.array(z.lazy(() => PostV2ProxyCompletionsChoices$inboundSchema)),
  created: z.union([z.string(), z.number()]).optional(),
  model: z.string(),
  system_fingerprint: z.string().optional(),
  object: z.string(),
  usage: z.lazy(() => PostV2ProxyCompletionsUsage$inboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    "system_fingerprint": "systemFingerprint",
  });
});

/** @internal */
export type PostV2ProxyCompletionsResponseBody$Outbound = {
  id: string;
  choices: Array<PostV2ProxyCompletionsChoices$Outbound>;
  created?: string | number | undefined;
  model: string;
  system_fingerprint?: string | undefined;
  object: string;
  usage?: PostV2ProxyCompletionsUsage$Outbound | undefined;
};

/** @internal */
export const PostV2ProxyCompletionsResponseBody$outboundSchema: z.ZodType<
  PostV2ProxyCompletionsResponseBody$Outbound,
  z.ZodTypeDef,
  PostV2ProxyCompletionsResponseBody
> = z.object({
  id: z.string(),
  choices: z.array(z.lazy(() => PostV2ProxyCompletionsChoices$outboundSchema)),
  created: z.union([z.string(), z.number()]).optional(),
  model: z.string(),
  systemFingerprint: z.string().optional(),
  object: z.string(),
  usage: z.lazy(() => PostV2ProxyCompletionsUsage$outboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    systemFingerprint: "system_fingerprint",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostV2ProxyCompletionsResponseBody$ {
  /** @deprecated use `PostV2ProxyCompletionsResponseBody$inboundSchema` instead. */
  export const inboundSchema = PostV2ProxyCompletionsResponseBody$inboundSchema;
  /** @deprecated use `PostV2ProxyCompletionsResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    PostV2ProxyCompletionsResponseBody$outboundSchema;
  /** @deprecated use `PostV2ProxyCompletionsResponseBody$Outbound` instead. */
  export type Outbound = PostV2ProxyCompletionsResponseBody$Outbound;
}

export function postV2ProxyCompletionsResponseBodyToJSON(
  postV2ProxyCompletionsResponseBody: PostV2ProxyCompletionsResponseBody,
): string {
  return JSON.stringify(
    PostV2ProxyCompletionsResponseBody$outboundSchema.parse(
      postV2ProxyCompletionsResponseBody,
    ),
  );
}

export function postV2ProxyCompletionsResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<PostV2ProxyCompletionsResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      PostV2ProxyCompletionsResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PostV2ProxyCompletionsResponseBody' from JSON`,
  );
}

/** @internal */
export const PostV2ProxyCompletionsResponse$inboundSchema: z.ZodType<
  PostV2ProxyCompletionsResponse,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => PostV2ProxyCompletionsResponseBody$inboundSchema),
  z.instanceof(ReadableStream<Uint8Array>).transform(stream => {
    return new EventStream(stream, rawEvent => {
      return {
        value: z.lazy(() =>
          PostV2ProxyCompletionsProxyResponseBody$inboundSchema
        ).parse(rawEvent),
      };
    });
  }),
]);

/** @internal */
export type PostV2ProxyCompletionsResponse$Outbound =
  | PostV2ProxyCompletionsResponseBody$Outbound
  | never;

/** @internal */
export const PostV2ProxyCompletionsResponse$outboundSchema: z.ZodType<
  PostV2ProxyCompletionsResponse$Outbound,
  z.ZodTypeDef,
  PostV2ProxyCompletionsResponse
> = z.union([
  z.lazy(() => PostV2ProxyCompletionsResponseBody$outboundSchema),
  z.never(),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostV2ProxyCompletionsResponse$ {
  /** @deprecated use `PostV2ProxyCompletionsResponse$inboundSchema` instead. */
  export const inboundSchema = PostV2ProxyCompletionsResponse$inboundSchema;
  /** @deprecated use `PostV2ProxyCompletionsResponse$outboundSchema` instead. */
  export const outboundSchema = PostV2ProxyCompletionsResponse$outboundSchema;
  /** @deprecated use `PostV2ProxyCompletionsResponse$Outbound` instead. */
  export type Outbound = PostV2ProxyCompletionsResponse$Outbound;
}

export function postV2ProxyCompletionsResponseToJSON(
  postV2ProxyCompletionsResponse: PostV2ProxyCompletionsResponse,
): string {
  return JSON.stringify(
    PostV2ProxyCompletionsResponse$outboundSchema.parse(
      postV2ProxyCompletionsResponse,
    ),
  );
}

export function postV2ProxyCompletionsResponseFromJSON(
  jsonString: string,
): SafeParseResult<PostV2ProxyCompletionsResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PostV2ProxyCompletionsResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PostV2ProxyCompletionsResponse' from JSON`,
  );
}
