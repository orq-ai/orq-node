/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * The format in which the generated images are returned. Must be one of `url` or `b64_json`. URLs are only valid for 60 minutes after the image has been generated.
 */
export const PostV2ProxyImagesVariationsResponseFormat = {
  Url: "url",
  B64Json: "b64_json",
} as const;
/**
 * The format in which the generated images are returned. Must be one of `url` or `b64_json`. URLs are only valid for 60 minutes after the image has been generated.
 */
export type PostV2ProxyImagesVariationsResponseFormat = ClosedEnum<
  typeof PostV2ProxyImagesVariationsResponseFormat
>;

/**
 * The size of the generated images. Must be one of `256x256`, `512x512`, or `1024x1024`.
 */
export const Size = {
  TwoHundredAndFiftySixx256: "256x256",
  FiveHundredAndTwelvex512: "512x512",
  OneThousandAndTwentyFourx1024: "1024x1024",
} as const;
/**
 * The size of the generated images. Must be one of `256x256`, `512x512`, or `1024x1024`.
 */
export type Size = ClosedEnum<typeof Size>;

/**
 * input
 */
export type PostV2ProxyImagesVariationsRequestBody = {
  /**
   * The image to edit. Must be a supported image file. It should be a png, webp, or jpg file less than 50MB.
   */
  image?: any | undefined;
  /**
   * The model to use for image generation.
   */
  model: string;
  /**
   * The number of images to generate. Must be between 1 and 10.
   */
  n?: number | null | undefined;
  /**
   * The format in which the generated images are returned. Must be one of `url` or `b64_json`. URLs are only valid for 60 minutes after the image has been generated.
   */
  responseFormat?: PostV2ProxyImagesVariationsResponseFormat | undefined;
  /**
   * The size of the generated images. Must be one of `256x256`, `512x512`, or `1024x1024`.
   */
  size?: Size | undefined;
  /**
   * A unique identifier representing your end-user, which can help to monitor and detect abuse.
   */
  user?: string | undefined;
};

export type PostV2ProxyImagesVariationsData = {
  /**
   * The base64-encoded JSON of the generated image, if response_format is b64_json
   */
  b64Json?: string | undefined;
  /**
   * The URL of the generated image, if response_format is url (default)
   */
  url?: string | undefined;
};

/**
 * The input tokens detailed information for the image generation.
 */
export type PostV2ProxyImagesVariationsInputTokensDetails = {
  /**
   * The number of text tokens in the input prompt.
   */
  textTokens: number;
  /**
   * The number of image tokens in the input prompt.
   */
  imageTokens: number;
};

/**
 * The token usage information for the image generation.
 */
export type PostV2ProxyImagesVariationsUsage = {
  /**
   * The total number of tokens (images and text) used for the image generation.
   */
  totalTokens: number;
  /**
   * The number of tokens (images and text) in the input prompt.
   */
  inputTokens: number;
  /**
   * The number of output tokens generated by the model.
   */
  outputTokens: number;
  /**
   * The input tokens detailed information for the image generation.
   */
  inputTokensDetails: PostV2ProxyImagesVariationsInputTokensDetails;
};

/**
 * Represents an image variation response from the API.
 */
export type PostV2ProxyImagesVariationsResponseBody = {
  /**
   * The Unix timestamp (in seconds) of when the image was created.
   */
  created: number;
  /**
   * The output format of the image generation
   */
  outputFormat?: string | undefined;
  /**
   * The size of the image generated
   */
  size?: string | undefined;
  /**
   * The quality of the image generated
   */
  quality?: string | undefined;
  /**
   * The list of generated images.
   */
  data: Array<PostV2ProxyImagesVariationsData>;
  /**
   * The token usage information for the image generation.
   */
  usage?: PostV2ProxyImagesVariationsUsage | undefined;
};

/** @internal */
export const PostV2ProxyImagesVariationsResponseFormat$inboundSchema:
  z.ZodNativeEnum<typeof PostV2ProxyImagesVariationsResponseFormat> = z
    .nativeEnum(PostV2ProxyImagesVariationsResponseFormat);

/** @internal */
export const PostV2ProxyImagesVariationsResponseFormat$outboundSchema:
  z.ZodNativeEnum<typeof PostV2ProxyImagesVariationsResponseFormat> =
    PostV2ProxyImagesVariationsResponseFormat$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostV2ProxyImagesVariationsResponseFormat$ {
  /** @deprecated use `PostV2ProxyImagesVariationsResponseFormat$inboundSchema` instead. */
  export const inboundSchema =
    PostV2ProxyImagesVariationsResponseFormat$inboundSchema;
  /** @deprecated use `PostV2ProxyImagesVariationsResponseFormat$outboundSchema` instead. */
  export const outboundSchema =
    PostV2ProxyImagesVariationsResponseFormat$outboundSchema;
}

/** @internal */
export const Size$inboundSchema: z.ZodNativeEnum<typeof Size> = z.nativeEnum(
  Size,
);

/** @internal */
export const Size$outboundSchema: z.ZodNativeEnum<typeof Size> =
  Size$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Size$ {
  /** @deprecated use `Size$inboundSchema` instead. */
  export const inboundSchema = Size$inboundSchema;
  /** @deprecated use `Size$outboundSchema` instead. */
  export const outboundSchema = Size$outboundSchema;
}

/** @internal */
export const PostV2ProxyImagesVariationsRequestBody$inboundSchema: z.ZodType<
  PostV2ProxyImagesVariationsRequestBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  image: z.any().optional(),
  model: z.string(),
  n: z.nullable(z.number().int().default(1)),
  response_format: PostV2ProxyImagesVariationsResponseFormat$inboundSchema
    .default("url"),
  size: Size$inboundSchema.default("1024x1024"),
  user: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "response_format": "responseFormat",
  });
});

/** @internal */
export type PostV2ProxyImagesVariationsRequestBody$Outbound = {
  image?: any | undefined;
  model: string;
  n: number | null;
  response_format: string;
  size: string;
  user?: string | undefined;
};

/** @internal */
export const PostV2ProxyImagesVariationsRequestBody$outboundSchema: z.ZodType<
  PostV2ProxyImagesVariationsRequestBody$Outbound,
  z.ZodTypeDef,
  PostV2ProxyImagesVariationsRequestBody
> = z.object({
  image: z.any().optional(),
  model: z.string(),
  n: z.nullable(z.number().int().default(1)),
  responseFormat: PostV2ProxyImagesVariationsResponseFormat$outboundSchema
    .default("url"),
  size: Size$outboundSchema.default("1024x1024"),
  user: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    responseFormat: "response_format",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostV2ProxyImagesVariationsRequestBody$ {
  /** @deprecated use `PostV2ProxyImagesVariationsRequestBody$inboundSchema` instead. */
  export const inboundSchema =
    PostV2ProxyImagesVariationsRequestBody$inboundSchema;
  /** @deprecated use `PostV2ProxyImagesVariationsRequestBody$outboundSchema` instead. */
  export const outboundSchema =
    PostV2ProxyImagesVariationsRequestBody$outboundSchema;
  /** @deprecated use `PostV2ProxyImagesVariationsRequestBody$Outbound` instead. */
  export type Outbound = PostV2ProxyImagesVariationsRequestBody$Outbound;
}

export function postV2ProxyImagesVariationsRequestBodyToJSON(
  postV2ProxyImagesVariationsRequestBody:
    PostV2ProxyImagesVariationsRequestBody,
): string {
  return JSON.stringify(
    PostV2ProxyImagesVariationsRequestBody$outboundSchema.parse(
      postV2ProxyImagesVariationsRequestBody,
    ),
  );
}

export function postV2ProxyImagesVariationsRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<PostV2ProxyImagesVariationsRequestBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      PostV2ProxyImagesVariationsRequestBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PostV2ProxyImagesVariationsRequestBody' from JSON`,
  );
}

/** @internal */
export const PostV2ProxyImagesVariationsData$inboundSchema: z.ZodType<
  PostV2ProxyImagesVariationsData,
  z.ZodTypeDef,
  unknown
> = z.object({
  b64_json: z.string().optional(),
  url: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "b64_json": "b64Json",
  });
});

/** @internal */
export type PostV2ProxyImagesVariationsData$Outbound = {
  b64_json?: string | undefined;
  url?: string | undefined;
};

/** @internal */
export const PostV2ProxyImagesVariationsData$outboundSchema: z.ZodType<
  PostV2ProxyImagesVariationsData$Outbound,
  z.ZodTypeDef,
  PostV2ProxyImagesVariationsData
> = z.object({
  b64Json: z.string().optional(),
  url: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    b64Json: "b64_json",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostV2ProxyImagesVariationsData$ {
  /** @deprecated use `PostV2ProxyImagesVariationsData$inboundSchema` instead. */
  export const inboundSchema = PostV2ProxyImagesVariationsData$inboundSchema;
  /** @deprecated use `PostV2ProxyImagesVariationsData$outboundSchema` instead. */
  export const outboundSchema = PostV2ProxyImagesVariationsData$outboundSchema;
  /** @deprecated use `PostV2ProxyImagesVariationsData$Outbound` instead. */
  export type Outbound = PostV2ProxyImagesVariationsData$Outbound;
}

export function postV2ProxyImagesVariationsDataToJSON(
  postV2ProxyImagesVariationsData: PostV2ProxyImagesVariationsData,
): string {
  return JSON.stringify(
    PostV2ProxyImagesVariationsData$outboundSchema.parse(
      postV2ProxyImagesVariationsData,
    ),
  );
}

export function postV2ProxyImagesVariationsDataFromJSON(
  jsonString: string,
): SafeParseResult<PostV2ProxyImagesVariationsData, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PostV2ProxyImagesVariationsData$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PostV2ProxyImagesVariationsData' from JSON`,
  );
}

/** @internal */
export const PostV2ProxyImagesVariationsInputTokensDetails$inboundSchema:
  z.ZodType<
    PostV2ProxyImagesVariationsInputTokensDetails,
    z.ZodTypeDef,
    unknown
  > = z.object({
    text_tokens: z.number(),
    image_tokens: z.number(),
  }).transform((v) => {
    return remap$(v, {
      "text_tokens": "textTokens",
      "image_tokens": "imageTokens",
    });
  });

/** @internal */
export type PostV2ProxyImagesVariationsInputTokensDetails$Outbound = {
  text_tokens: number;
  image_tokens: number;
};

/** @internal */
export const PostV2ProxyImagesVariationsInputTokensDetails$outboundSchema:
  z.ZodType<
    PostV2ProxyImagesVariationsInputTokensDetails$Outbound,
    z.ZodTypeDef,
    PostV2ProxyImagesVariationsInputTokensDetails
  > = z.object({
    textTokens: z.number(),
    imageTokens: z.number(),
  }).transform((v) => {
    return remap$(v, {
      textTokens: "text_tokens",
      imageTokens: "image_tokens",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostV2ProxyImagesVariationsInputTokensDetails$ {
  /** @deprecated use `PostV2ProxyImagesVariationsInputTokensDetails$inboundSchema` instead. */
  export const inboundSchema =
    PostV2ProxyImagesVariationsInputTokensDetails$inboundSchema;
  /** @deprecated use `PostV2ProxyImagesVariationsInputTokensDetails$outboundSchema` instead. */
  export const outboundSchema =
    PostV2ProxyImagesVariationsInputTokensDetails$outboundSchema;
  /** @deprecated use `PostV2ProxyImagesVariationsInputTokensDetails$Outbound` instead. */
  export type Outbound = PostV2ProxyImagesVariationsInputTokensDetails$Outbound;
}

export function postV2ProxyImagesVariationsInputTokensDetailsToJSON(
  postV2ProxyImagesVariationsInputTokensDetails:
    PostV2ProxyImagesVariationsInputTokensDetails,
): string {
  return JSON.stringify(
    PostV2ProxyImagesVariationsInputTokensDetails$outboundSchema.parse(
      postV2ProxyImagesVariationsInputTokensDetails,
    ),
  );
}

export function postV2ProxyImagesVariationsInputTokensDetailsFromJSON(
  jsonString: string,
): SafeParseResult<
  PostV2ProxyImagesVariationsInputTokensDetails,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PostV2ProxyImagesVariationsInputTokensDetails$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'PostV2ProxyImagesVariationsInputTokensDetails' from JSON`,
  );
}

/** @internal */
export const PostV2ProxyImagesVariationsUsage$inboundSchema: z.ZodType<
  PostV2ProxyImagesVariationsUsage,
  z.ZodTypeDef,
  unknown
> = z.object({
  total_tokens: z.number(),
  input_tokens: z.number(),
  output_tokens: z.number(),
  input_tokens_details: z.lazy(() =>
    PostV2ProxyImagesVariationsInputTokensDetails$inboundSchema
  ),
}).transform((v) => {
  return remap$(v, {
    "total_tokens": "totalTokens",
    "input_tokens": "inputTokens",
    "output_tokens": "outputTokens",
    "input_tokens_details": "inputTokensDetails",
  });
});

/** @internal */
export type PostV2ProxyImagesVariationsUsage$Outbound = {
  total_tokens: number;
  input_tokens: number;
  output_tokens: number;
  input_tokens_details: PostV2ProxyImagesVariationsInputTokensDetails$Outbound;
};

/** @internal */
export const PostV2ProxyImagesVariationsUsage$outboundSchema: z.ZodType<
  PostV2ProxyImagesVariationsUsage$Outbound,
  z.ZodTypeDef,
  PostV2ProxyImagesVariationsUsage
> = z.object({
  totalTokens: z.number(),
  inputTokens: z.number(),
  outputTokens: z.number(),
  inputTokensDetails: z.lazy(() =>
    PostV2ProxyImagesVariationsInputTokensDetails$outboundSchema
  ),
}).transform((v) => {
  return remap$(v, {
    totalTokens: "total_tokens",
    inputTokens: "input_tokens",
    outputTokens: "output_tokens",
    inputTokensDetails: "input_tokens_details",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostV2ProxyImagesVariationsUsage$ {
  /** @deprecated use `PostV2ProxyImagesVariationsUsage$inboundSchema` instead. */
  export const inboundSchema = PostV2ProxyImagesVariationsUsage$inboundSchema;
  /** @deprecated use `PostV2ProxyImagesVariationsUsage$outboundSchema` instead. */
  export const outboundSchema = PostV2ProxyImagesVariationsUsage$outboundSchema;
  /** @deprecated use `PostV2ProxyImagesVariationsUsage$Outbound` instead. */
  export type Outbound = PostV2ProxyImagesVariationsUsage$Outbound;
}

export function postV2ProxyImagesVariationsUsageToJSON(
  postV2ProxyImagesVariationsUsage: PostV2ProxyImagesVariationsUsage,
): string {
  return JSON.stringify(
    PostV2ProxyImagesVariationsUsage$outboundSchema.parse(
      postV2ProxyImagesVariationsUsage,
    ),
  );
}

export function postV2ProxyImagesVariationsUsageFromJSON(
  jsonString: string,
): SafeParseResult<PostV2ProxyImagesVariationsUsage, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PostV2ProxyImagesVariationsUsage$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PostV2ProxyImagesVariationsUsage' from JSON`,
  );
}

/** @internal */
export const PostV2ProxyImagesVariationsResponseBody$inboundSchema: z.ZodType<
  PostV2ProxyImagesVariationsResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  created: z.number(),
  output_format: z.string().optional(),
  size: z.string().optional(),
  quality: z.string().optional(),
  data: z.array(z.lazy(() => PostV2ProxyImagesVariationsData$inboundSchema)),
  usage: z.lazy(() => PostV2ProxyImagesVariationsUsage$inboundSchema)
    .optional(),
}).transform((v) => {
  return remap$(v, {
    "output_format": "outputFormat",
  });
});

/** @internal */
export type PostV2ProxyImagesVariationsResponseBody$Outbound = {
  created: number;
  output_format?: string | undefined;
  size?: string | undefined;
  quality?: string | undefined;
  data: Array<PostV2ProxyImagesVariationsData$Outbound>;
  usage?: PostV2ProxyImagesVariationsUsage$Outbound | undefined;
};

/** @internal */
export const PostV2ProxyImagesVariationsResponseBody$outboundSchema: z.ZodType<
  PostV2ProxyImagesVariationsResponseBody$Outbound,
  z.ZodTypeDef,
  PostV2ProxyImagesVariationsResponseBody
> = z.object({
  created: z.number(),
  outputFormat: z.string().optional(),
  size: z.string().optional(),
  quality: z.string().optional(),
  data: z.array(z.lazy(() => PostV2ProxyImagesVariationsData$outboundSchema)),
  usage: z.lazy(() => PostV2ProxyImagesVariationsUsage$outboundSchema)
    .optional(),
}).transform((v) => {
  return remap$(v, {
    outputFormat: "output_format",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostV2ProxyImagesVariationsResponseBody$ {
  /** @deprecated use `PostV2ProxyImagesVariationsResponseBody$inboundSchema` instead. */
  export const inboundSchema =
    PostV2ProxyImagesVariationsResponseBody$inboundSchema;
  /** @deprecated use `PostV2ProxyImagesVariationsResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    PostV2ProxyImagesVariationsResponseBody$outboundSchema;
  /** @deprecated use `PostV2ProxyImagesVariationsResponseBody$Outbound` instead. */
  export type Outbound = PostV2ProxyImagesVariationsResponseBody$Outbound;
}

export function postV2ProxyImagesVariationsResponseBodyToJSON(
  postV2ProxyImagesVariationsResponseBody:
    PostV2ProxyImagesVariationsResponseBody,
): string {
  return JSON.stringify(
    PostV2ProxyImagesVariationsResponseBody$outboundSchema.parse(
      postV2ProxyImagesVariationsResponseBody,
    ),
  );
}

export function postV2ProxyImagesVariationsResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<
  PostV2ProxyImagesVariationsResponseBody,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PostV2ProxyImagesVariationsResponseBody$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'PostV2ProxyImagesVariationsResponseBody' from JSON`,
  );
}
