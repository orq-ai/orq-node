/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * The image(s) to edit. Must be a supported image file or an array of images.  Each image should be a png, webp, or jpg file less than 50MB. You can provide up to 16 images.
 */
export type Image = any | Array<any>;

/**
 * The format in which the generated images are returned. Some of the models only return the image in base64 format.
 */
export const PostV2ProxyImagesEditsResponseFormat = {
  Url: "url",
  B64Json: "b64_json",
} as const;
/**
 * The format in which the generated images are returned. Some of the models only return the image in base64 format.
 */
export type PostV2ProxyImagesEditsResponseFormat = ClosedEnum<
  typeof PostV2ProxyImagesEditsResponseFormat
>;

export type PostV2ProxyImagesEditsRequestBody = {
  /**
   * The model to use for image generation. [Check models](https://docs.orq.ai/docs/proxy#/image-models)
   */
  model: string;
  /**
   * The image(s) to edit. Must be a supported image file or an array of images.  Each image should be a png, webp, or jpg file less than 50MB. You can provide up to 16 images.
   */
  image?: any | Array<any> | undefined;
  /**
   * A text description of the desired image(s).
   */
  prompt: string;
  /**
   * The number of images to generate. Must be between 1 and 10.
   */
  n?: number | null | undefined;
  /**
   * The size of the generated images
   */
  size?: string | null | undefined;
  /**
   * The format in which the generated images are returned. Some of the models only return the image in base64 format.
   */
  responseFormat?: PostV2ProxyImagesEditsResponseFormat | null | undefined;
  /**
   * A unique identifier representing your end-user, which can help to monitor and detect abuse.
   */
  user?: string | undefined;
};

export type PostV2ProxyImagesEditsData = {
  /**
   * The base64-encoded JSON of the generated image, if response_format is b64_json
   */
  b64Json?: string | undefined;
  /**
   * The URL of the generated image, if response_format is url (default)
   */
  url?: string | undefined;
};

/**
 * The input tokens detailed information for the image generation.
 */
export type PostV2ProxyImagesEditsInputTokensDetails = {
  /**
   * The number of text tokens in the input prompt.
   */
  textTokens: number;
  /**
   * The number of image tokens in the input prompt.
   */
  imageTokens: number;
};

/**
 * The token usage information for the image generation.
 */
export type PostV2ProxyImagesEditsUsage = {
  /**
   * The total number of tokens (images and text) used for the image generation.
   */
  totalTokens: number;
  /**
   * The number of tokens (images and text) in the input prompt.
   */
  inputTokens: number;
  /**
   * The number of output tokens generated by the model.
   */
  outputTokens: number;
  /**
   * The input tokens detailed information for the image generation.
   */
  inputTokensDetails: PostV2ProxyImagesEditsInputTokensDetails;
};

/**
 * Represents an image edit response from the API.
 */
export type PostV2ProxyImagesEditsResponseBody = {
  /**
   * The Unix timestamp (in seconds) of when the image was created.
   */
  created: number;
  /**
   * The output format of the image generation
   */
  outputFormat?: string | undefined;
  /**
   * The size of the image generated
   */
  size?: string | undefined;
  /**
   * The quality of the image generated
   */
  quality?: string | undefined;
  /**
   * The list of generated images.
   */
  data: Array<PostV2ProxyImagesEditsData>;
  /**
   * The token usage information for the image generation.
   */
  usage?: PostV2ProxyImagesEditsUsage | undefined;
};

/** @internal */
export const Image$inboundSchema: z.ZodType<Image, z.ZodTypeDef, unknown> = z
  .union([z.any(), z.array(z.any())]);

/** @internal */
export type Image$Outbound = any | Array<any>;

/** @internal */
export const Image$outboundSchema: z.ZodType<
  Image$Outbound,
  z.ZodTypeDef,
  Image
> = z.union([z.any(), z.array(z.any())]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Image$ {
  /** @deprecated use `Image$inboundSchema` instead. */
  export const inboundSchema = Image$inboundSchema;
  /** @deprecated use `Image$outboundSchema` instead. */
  export const outboundSchema = Image$outboundSchema;
  /** @deprecated use `Image$Outbound` instead. */
  export type Outbound = Image$Outbound;
}

export function imageToJSON(image: Image): string {
  return JSON.stringify(Image$outboundSchema.parse(image));
}

export function imageFromJSON(
  jsonString: string,
): SafeParseResult<Image, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Image$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Image' from JSON`,
  );
}

/** @internal */
export const PostV2ProxyImagesEditsResponseFormat$inboundSchema:
  z.ZodNativeEnum<typeof PostV2ProxyImagesEditsResponseFormat> = z.nativeEnum(
    PostV2ProxyImagesEditsResponseFormat,
  );

/** @internal */
export const PostV2ProxyImagesEditsResponseFormat$outboundSchema:
  z.ZodNativeEnum<typeof PostV2ProxyImagesEditsResponseFormat> =
    PostV2ProxyImagesEditsResponseFormat$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostV2ProxyImagesEditsResponseFormat$ {
  /** @deprecated use `PostV2ProxyImagesEditsResponseFormat$inboundSchema` instead. */
  export const inboundSchema =
    PostV2ProxyImagesEditsResponseFormat$inboundSchema;
  /** @deprecated use `PostV2ProxyImagesEditsResponseFormat$outboundSchema` instead. */
  export const outboundSchema =
    PostV2ProxyImagesEditsResponseFormat$outboundSchema;
}

/** @internal */
export const PostV2ProxyImagesEditsRequestBody$inboundSchema: z.ZodType<
  PostV2ProxyImagesEditsRequestBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  model: z.string(),
  image: z.union([z.any(), z.array(z.any())]).optional(),
  prompt: z.string(),
  n: z.nullable(z.number().int().default(1)),
  size: z.nullable(z.string()).optional(),
  response_format: z.nullable(
    PostV2ProxyImagesEditsResponseFormat$inboundSchema.default("url"),
  ),
  user: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "response_format": "responseFormat",
  });
});

/** @internal */
export type PostV2ProxyImagesEditsRequestBody$Outbound = {
  model: string;
  image?: any | Array<any> | undefined;
  prompt: string;
  n: number | null;
  size?: string | null | undefined;
  response_format: string | null;
  user?: string | undefined;
};

/** @internal */
export const PostV2ProxyImagesEditsRequestBody$outboundSchema: z.ZodType<
  PostV2ProxyImagesEditsRequestBody$Outbound,
  z.ZodTypeDef,
  PostV2ProxyImagesEditsRequestBody
> = z.object({
  model: z.string(),
  image: z.union([z.any(), z.array(z.any())]).optional(),
  prompt: z.string(),
  n: z.nullable(z.number().int().default(1)),
  size: z.nullable(z.string()).optional(),
  responseFormat: z.nullable(
    PostV2ProxyImagesEditsResponseFormat$outboundSchema.default("url"),
  ),
  user: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    responseFormat: "response_format",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostV2ProxyImagesEditsRequestBody$ {
  /** @deprecated use `PostV2ProxyImagesEditsRequestBody$inboundSchema` instead. */
  export const inboundSchema = PostV2ProxyImagesEditsRequestBody$inboundSchema;
  /** @deprecated use `PostV2ProxyImagesEditsRequestBody$outboundSchema` instead. */
  export const outboundSchema =
    PostV2ProxyImagesEditsRequestBody$outboundSchema;
  /** @deprecated use `PostV2ProxyImagesEditsRequestBody$Outbound` instead. */
  export type Outbound = PostV2ProxyImagesEditsRequestBody$Outbound;
}

export function postV2ProxyImagesEditsRequestBodyToJSON(
  postV2ProxyImagesEditsRequestBody: PostV2ProxyImagesEditsRequestBody,
): string {
  return JSON.stringify(
    PostV2ProxyImagesEditsRequestBody$outboundSchema.parse(
      postV2ProxyImagesEditsRequestBody,
    ),
  );
}

export function postV2ProxyImagesEditsRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<PostV2ProxyImagesEditsRequestBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PostV2ProxyImagesEditsRequestBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PostV2ProxyImagesEditsRequestBody' from JSON`,
  );
}

/** @internal */
export const PostV2ProxyImagesEditsData$inboundSchema: z.ZodType<
  PostV2ProxyImagesEditsData,
  z.ZodTypeDef,
  unknown
> = z.object({
  b64_json: z.string().optional(),
  url: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "b64_json": "b64Json",
  });
});

/** @internal */
export type PostV2ProxyImagesEditsData$Outbound = {
  b64_json?: string | undefined;
  url?: string | undefined;
};

/** @internal */
export const PostV2ProxyImagesEditsData$outboundSchema: z.ZodType<
  PostV2ProxyImagesEditsData$Outbound,
  z.ZodTypeDef,
  PostV2ProxyImagesEditsData
> = z.object({
  b64Json: z.string().optional(),
  url: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    b64Json: "b64_json",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostV2ProxyImagesEditsData$ {
  /** @deprecated use `PostV2ProxyImagesEditsData$inboundSchema` instead. */
  export const inboundSchema = PostV2ProxyImagesEditsData$inboundSchema;
  /** @deprecated use `PostV2ProxyImagesEditsData$outboundSchema` instead. */
  export const outboundSchema = PostV2ProxyImagesEditsData$outboundSchema;
  /** @deprecated use `PostV2ProxyImagesEditsData$Outbound` instead. */
  export type Outbound = PostV2ProxyImagesEditsData$Outbound;
}

export function postV2ProxyImagesEditsDataToJSON(
  postV2ProxyImagesEditsData: PostV2ProxyImagesEditsData,
): string {
  return JSON.stringify(
    PostV2ProxyImagesEditsData$outboundSchema.parse(postV2ProxyImagesEditsData),
  );
}

export function postV2ProxyImagesEditsDataFromJSON(
  jsonString: string,
): SafeParseResult<PostV2ProxyImagesEditsData, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PostV2ProxyImagesEditsData$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PostV2ProxyImagesEditsData' from JSON`,
  );
}

/** @internal */
export const PostV2ProxyImagesEditsInputTokensDetails$inboundSchema: z.ZodType<
  PostV2ProxyImagesEditsInputTokensDetails,
  z.ZodTypeDef,
  unknown
> = z.object({
  text_tokens: z.number(),
  image_tokens: z.number(),
}).transform((v) => {
  return remap$(v, {
    "text_tokens": "textTokens",
    "image_tokens": "imageTokens",
  });
});

/** @internal */
export type PostV2ProxyImagesEditsInputTokensDetails$Outbound = {
  text_tokens: number;
  image_tokens: number;
};

/** @internal */
export const PostV2ProxyImagesEditsInputTokensDetails$outboundSchema: z.ZodType<
  PostV2ProxyImagesEditsInputTokensDetails$Outbound,
  z.ZodTypeDef,
  PostV2ProxyImagesEditsInputTokensDetails
> = z.object({
  textTokens: z.number(),
  imageTokens: z.number(),
}).transform((v) => {
  return remap$(v, {
    textTokens: "text_tokens",
    imageTokens: "image_tokens",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostV2ProxyImagesEditsInputTokensDetails$ {
  /** @deprecated use `PostV2ProxyImagesEditsInputTokensDetails$inboundSchema` instead. */
  export const inboundSchema =
    PostV2ProxyImagesEditsInputTokensDetails$inboundSchema;
  /** @deprecated use `PostV2ProxyImagesEditsInputTokensDetails$outboundSchema` instead. */
  export const outboundSchema =
    PostV2ProxyImagesEditsInputTokensDetails$outboundSchema;
  /** @deprecated use `PostV2ProxyImagesEditsInputTokensDetails$Outbound` instead. */
  export type Outbound = PostV2ProxyImagesEditsInputTokensDetails$Outbound;
}

export function postV2ProxyImagesEditsInputTokensDetailsToJSON(
  postV2ProxyImagesEditsInputTokensDetails:
    PostV2ProxyImagesEditsInputTokensDetails,
): string {
  return JSON.stringify(
    PostV2ProxyImagesEditsInputTokensDetails$outboundSchema.parse(
      postV2ProxyImagesEditsInputTokensDetails,
    ),
  );
}

export function postV2ProxyImagesEditsInputTokensDetailsFromJSON(
  jsonString: string,
): SafeParseResult<
  PostV2ProxyImagesEditsInputTokensDetails,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PostV2ProxyImagesEditsInputTokensDetails$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'PostV2ProxyImagesEditsInputTokensDetails' from JSON`,
  );
}

/** @internal */
export const PostV2ProxyImagesEditsUsage$inboundSchema: z.ZodType<
  PostV2ProxyImagesEditsUsage,
  z.ZodTypeDef,
  unknown
> = z.object({
  total_tokens: z.number(),
  input_tokens: z.number(),
  output_tokens: z.number(),
  input_tokens_details: z.lazy(() =>
    PostV2ProxyImagesEditsInputTokensDetails$inboundSchema
  ),
}).transform((v) => {
  return remap$(v, {
    "total_tokens": "totalTokens",
    "input_tokens": "inputTokens",
    "output_tokens": "outputTokens",
    "input_tokens_details": "inputTokensDetails",
  });
});

/** @internal */
export type PostV2ProxyImagesEditsUsage$Outbound = {
  total_tokens: number;
  input_tokens: number;
  output_tokens: number;
  input_tokens_details: PostV2ProxyImagesEditsInputTokensDetails$Outbound;
};

/** @internal */
export const PostV2ProxyImagesEditsUsage$outboundSchema: z.ZodType<
  PostV2ProxyImagesEditsUsage$Outbound,
  z.ZodTypeDef,
  PostV2ProxyImagesEditsUsage
> = z.object({
  totalTokens: z.number(),
  inputTokens: z.number(),
  outputTokens: z.number(),
  inputTokensDetails: z.lazy(() =>
    PostV2ProxyImagesEditsInputTokensDetails$outboundSchema
  ),
}).transform((v) => {
  return remap$(v, {
    totalTokens: "total_tokens",
    inputTokens: "input_tokens",
    outputTokens: "output_tokens",
    inputTokensDetails: "input_tokens_details",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostV2ProxyImagesEditsUsage$ {
  /** @deprecated use `PostV2ProxyImagesEditsUsage$inboundSchema` instead. */
  export const inboundSchema = PostV2ProxyImagesEditsUsage$inboundSchema;
  /** @deprecated use `PostV2ProxyImagesEditsUsage$outboundSchema` instead. */
  export const outboundSchema = PostV2ProxyImagesEditsUsage$outboundSchema;
  /** @deprecated use `PostV2ProxyImagesEditsUsage$Outbound` instead. */
  export type Outbound = PostV2ProxyImagesEditsUsage$Outbound;
}

export function postV2ProxyImagesEditsUsageToJSON(
  postV2ProxyImagesEditsUsage: PostV2ProxyImagesEditsUsage,
): string {
  return JSON.stringify(
    PostV2ProxyImagesEditsUsage$outboundSchema.parse(
      postV2ProxyImagesEditsUsage,
    ),
  );
}

export function postV2ProxyImagesEditsUsageFromJSON(
  jsonString: string,
): SafeParseResult<PostV2ProxyImagesEditsUsage, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PostV2ProxyImagesEditsUsage$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PostV2ProxyImagesEditsUsage' from JSON`,
  );
}

/** @internal */
export const PostV2ProxyImagesEditsResponseBody$inboundSchema: z.ZodType<
  PostV2ProxyImagesEditsResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  created: z.number(),
  output_format: z.string().optional(),
  size: z.string().optional(),
  quality: z.string().optional(),
  data: z.array(z.lazy(() => PostV2ProxyImagesEditsData$inboundSchema)),
  usage: z.lazy(() => PostV2ProxyImagesEditsUsage$inboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    "output_format": "outputFormat",
  });
});

/** @internal */
export type PostV2ProxyImagesEditsResponseBody$Outbound = {
  created: number;
  output_format?: string | undefined;
  size?: string | undefined;
  quality?: string | undefined;
  data: Array<PostV2ProxyImagesEditsData$Outbound>;
  usage?: PostV2ProxyImagesEditsUsage$Outbound | undefined;
};

/** @internal */
export const PostV2ProxyImagesEditsResponseBody$outboundSchema: z.ZodType<
  PostV2ProxyImagesEditsResponseBody$Outbound,
  z.ZodTypeDef,
  PostV2ProxyImagesEditsResponseBody
> = z.object({
  created: z.number(),
  outputFormat: z.string().optional(),
  size: z.string().optional(),
  quality: z.string().optional(),
  data: z.array(z.lazy(() => PostV2ProxyImagesEditsData$outboundSchema)),
  usage: z.lazy(() => PostV2ProxyImagesEditsUsage$outboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    outputFormat: "output_format",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostV2ProxyImagesEditsResponseBody$ {
  /** @deprecated use `PostV2ProxyImagesEditsResponseBody$inboundSchema` instead. */
  export const inboundSchema = PostV2ProxyImagesEditsResponseBody$inboundSchema;
  /** @deprecated use `PostV2ProxyImagesEditsResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    PostV2ProxyImagesEditsResponseBody$outboundSchema;
  /** @deprecated use `PostV2ProxyImagesEditsResponseBody$Outbound` instead. */
  export type Outbound = PostV2ProxyImagesEditsResponseBody$Outbound;
}

export function postV2ProxyImagesEditsResponseBodyToJSON(
  postV2ProxyImagesEditsResponseBody: PostV2ProxyImagesEditsResponseBody,
): string {
  return JSON.stringify(
    PostV2ProxyImagesEditsResponseBody$outboundSchema.parse(
      postV2ProxyImagesEditsResponseBody,
    ),
  );
}

export function postV2ProxyImagesEditsResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<PostV2ProxyImagesEditsResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      PostV2ProxyImagesEditsResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PostV2ProxyImagesEditsResponseBody' from JSON`,
  );
}
