/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type GetAgentRequest = {
  /**
   * The ID of the agent to retrieve
   */
  id: string;
};

/**
 * The status of the agent. `Live` is the latest version of the agent. `Draft` is a version that is not yet published. `Pending` is a version that is pending approval. `Published` is a version that was live and has been replaced by a new version.
 */
export const GetAgentStatus = {
  Live: "live",
  Draft: "draft",
  Pending: "pending",
  Published: "published",
} as const;
/**
 * The status of the agent. `Live` is the latest version of the agent. `Draft` is a version that is not yet published. `Pending` is a version that is pending approval. `Published` is a version that was live and has been replaced by a new version.
 */
export type GetAgentStatus = ClosedEnum<typeof GetAgentStatus>;

/**
 * If all, the agent will require approval for all tools. If respect_tool, the agent will require approval for tools that have the requires_approval flag set to true. If none, the agent will not require approval for any tools.
 */
export const GetAgentToolApprovalRequired = {
  All: "all",
  RespectTool: "respect_tool",
  None: "none",
} as const;
/**
 * If all, the agent will require approval for all tools. If respect_tool, the agent will require approval for tools that have the requires_approval flag set to true. If none, the agent will not require approval for any tools.
 */
export type GetAgentToolApprovalRequired = ClosedEnum<
  typeof GetAgentToolApprovalRequired
>;

export type Conditions = {
  /**
   * The argument of the tool call to evaluate
   */
  condition: string;
  /**
   * The operator to use
   */
  operator: string;
  /**
   * The value to compare against
   */
  value: string;
};

export type GetAgentTools = {
  /**
   * The id of the resource
   */
  id: string;
  actionType: string;
  displayName?: string | undefined;
  requiresApproval: boolean;
  conditions?: Array<Conditions> | undefined;
  /**
   * The id of the resource
   */
  mcpServer?: string | undefined;
  /**
   * Tool execution timeout in seconds (default: 2 minutes, max: 10 minutes)
   */
  timeout?: number | undefined;
};

export type GetAgentSettings = {
  maxIterations?: number | undefined;
  /**
   * Max execution time in seconds
   */
  maxExecutionTime: number;
  /**
   * If all, the agent will require approval for all tools. If respect_tool, the agent will require approval for tools that have the requires_approval flag set to true. If none, the agent will not require approval for any tools.
   */
  toolApprovalRequired?: GetAgentToolApprovalRequired | undefined;
  tools: Array<GetAgentTools>;
};

export type GetAgentModel = {
  /**
   * The database ID of the primary model
   */
  id: string;
  /**
   * Optional integration ID for custom model configurations
   */
  integrationId?: string | undefined;
  /**
   * Optional array of fallback model IDs that will be used automatically in order if the primary model fails
   */
  fallbackModels?: Array<string> | undefined;
  /**
   * Maximum number of tokens for model responses
   */
  maxTokens?: number | undefined;
  /**
   * Temperature setting for model responses
   */
  temperature?: number | undefined;
};

export type GetAgentTeamOfAgents = {
  id: string;
  /**
   * The role of the agent in this context. This is used to give extra information to the leader to help it decide which agent to hand off to.
   */
  role?: string | undefined;
};

export type Metrics = {
  totalCost?: number | undefined;
};

export const GetAgentConfigurationType = {
  Query: "query",
} as const;
export type GetAgentConfigurationType = ClosedEnum<
  typeof GetAgentConfigurationType
>;

export type Configuration2 = {
  type: GetAgentConfigurationType;
  query: string;
};

export const ConfigurationType = {
  LastUserMessage: "last_user_message",
} as const;
export type ConfigurationType = ClosedEnum<typeof ConfigurationType>;

export type Configuration1 = {
  type: ConfigurationType;
};

/**
 * Defines the configuration settings which can either be for a user message or a text entry.
 */
export type Configuration = Configuration2 | Configuration1;

export type KnowledgeBases = {
  /**
   * The id of the resource
   */
  id?: string | undefined;
  /**
   * The id of the resource
   */
  knowledgeId: string;
  /**
   * Defines the configuration settings which can either be for a user message or a text entry.
   */
  configuration: Configuration2 | Configuration1;
};

export const HiddenPanels = {
  Model: "model",
  Tools: "tools",
  KnowledgeBases: "knowledge_bases",
  Variables: "variables",
  RuntimeConstraints: "runtime_constraints",
} as const;
export type HiddenPanels = ClosedEnum<typeof HiddenPanels>;

/**
 * Agent retrieved successfully
 */
export type GetAgentResponseBody = {
  id: string;
  key: string;
  workspaceId: string;
  projectId: string;
  createdById?: string | undefined;
  updatedById?: string | undefined;
  created?: string | undefined;
  updated?: string | undefined;
  role: string;
  description: string;
  systemPrompt?: string | undefined;
  instructions: string;
  /**
   * Optional URL to an icon for the agent
   */
  iconUrl?: string | undefined;
  /**
   * The status of the agent. `Live` is the latest version of the agent. `Draft` is a version that is not yet published. `Pending` is a version that is pending approval. `Published` is a version that was live and has been replaced by a new version.
   */
  status: GetAgentStatus;
  settings?: GetAgentSettings | undefined;
  model: GetAgentModel;
  versionHash?: string | undefined;
  /**
   * The path where the entity is stored in the project structure. The first element of the path always represents the project name. Any subsequent path element after the project will be created as a folder in the project if it does not exists.
   */
  path: string;
  memoryStores: Array<string>;
  /**
   * The agents that are accessible to this orchestrator. The main agent can hand off to these agents to perform tasks.
   */
  teamOfAgents: Array<GetAgentTeamOfAgents>;
  metrics?: Metrics | undefined;
  /**
   * Extracted variables from agent instructions
   */
  variables?: { [k: string]: any } | undefined;
  /**
   * Agent knowledge bases reference
   */
  knowledgeBases?: Array<KnowledgeBases> | undefined;
  /**
   * List of hidden collapsed panels in configuration. Duplicates are not allowed.
   */
  hiddenPanels?: Array<HiddenPanels> | undefined;
};

/** @internal */
export const GetAgentRequest$inboundSchema: z.ZodType<
  GetAgentRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
});

/** @internal */
export type GetAgentRequest$Outbound = {
  id: string;
};

/** @internal */
export const GetAgentRequest$outboundSchema: z.ZodType<
  GetAgentRequest$Outbound,
  z.ZodTypeDef,
  GetAgentRequest
> = z.object({
  id: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAgentRequest$ {
  /** @deprecated use `GetAgentRequest$inboundSchema` instead. */
  export const inboundSchema = GetAgentRequest$inboundSchema;
  /** @deprecated use `GetAgentRequest$outboundSchema` instead. */
  export const outboundSchema = GetAgentRequest$outboundSchema;
  /** @deprecated use `GetAgentRequest$Outbound` instead. */
  export type Outbound = GetAgentRequest$Outbound;
}

export function getAgentRequestToJSON(
  getAgentRequest: GetAgentRequest,
): string {
  return JSON.stringify(GetAgentRequest$outboundSchema.parse(getAgentRequest));
}

export function getAgentRequestFromJSON(
  jsonString: string,
): SafeParseResult<GetAgentRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetAgentRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetAgentRequest' from JSON`,
  );
}

/** @internal */
export const GetAgentStatus$inboundSchema: z.ZodNativeEnum<
  typeof GetAgentStatus
> = z.nativeEnum(GetAgentStatus);

/** @internal */
export const GetAgentStatus$outboundSchema: z.ZodNativeEnum<
  typeof GetAgentStatus
> = GetAgentStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAgentStatus$ {
  /** @deprecated use `GetAgentStatus$inboundSchema` instead. */
  export const inboundSchema = GetAgentStatus$inboundSchema;
  /** @deprecated use `GetAgentStatus$outboundSchema` instead. */
  export const outboundSchema = GetAgentStatus$outboundSchema;
}

/** @internal */
export const GetAgentToolApprovalRequired$inboundSchema: z.ZodNativeEnum<
  typeof GetAgentToolApprovalRequired
> = z.nativeEnum(GetAgentToolApprovalRequired);

/** @internal */
export const GetAgentToolApprovalRequired$outboundSchema: z.ZodNativeEnum<
  typeof GetAgentToolApprovalRequired
> = GetAgentToolApprovalRequired$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAgentToolApprovalRequired$ {
  /** @deprecated use `GetAgentToolApprovalRequired$inboundSchema` instead. */
  export const inboundSchema = GetAgentToolApprovalRequired$inboundSchema;
  /** @deprecated use `GetAgentToolApprovalRequired$outboundSchema` instead. */
  export const outboundSchema = GetAgentToolApprovalRequired$outboundSchema;
}

/** @internal */
export const Conditions$inboundSchema: z.ZodType<
  Conditions,
  z.ZodTypeDef,
  unknown
> = z.object({
  condition: z.string(),
  operator: z.string(),
  value: z.string(),
});

/** @internal */
export type Conditions$Outbound = {
  condition: string;
  operator: string;
  value: string;
};

/** @internal */
export const Conditions$outboundSchema: z.ZodType<
  Conditions$Outbound,
  z.ZodTypeDef,
  Conditions
> = z.object({
  condition: z.string(),
  operator: z.string(),
  value: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Conditions$ {
  /** @deprecated use `Conditions$inboundSchema` instead. */
  export const inboundSchema = Conditions$inboundSchema;
  /** @deprecated use `Conditions$outboundSchema` instead. */
  export const outboundSchema = Conditions$outboundSchema;
  /** @deprecated use `Conditions$Outbound` instead. */
  export type Outbound = Conditions$Outbound;
}

export function conditionsToJSON(conditions: Conditions): string {
  return JSON.stringify(Conditions$outboundSchema.parse(conditions));
}

export function conditionsFromJSON(
  jsonString: string,
): SafeParseResult<Conditions, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Conditions$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Conditions' from JSON`,
  );
}

/** @internal */
export const GetAgentTools$inboundSchema: z.ZodType<
  GetAgentTools,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  action_type: z.string(),
  display_name: z.string().optional(),
  requires_approval: z.boolean(),
  conditions: z.array(z.lazy(() => Conditions$inboundSchema)).optional(),
  mcpServer: z.string().optional(),
  timeout: z.number().default(120),
}).transform((v) => {
  return remap$(v, {
    "action_type": "actionType",
    "display_name": "displayName",
    "requires_approval": "requiresApproval",
  });
});

/** @internal */
export type GetAgentTools$Outbound = {
  id: string;
  action_type: string;
  display_name?: string | undefined;
  requires_approval: boolean;
  conditions?: Array<Conditions$Outbound> | undefined;
  mcpServer?: string | undefined;
  timeout: number;
};

/** @internal */
export const GetAgentTools$outboundSchema: z.ZodType<
  GetAgentTools$Outbound,
  z.ZodTypeDef,
  GetAgentTools
> = z.object({
  id: z.string(),
  actionType: z.string(),
  displayName: z.string().optional(),
  requiresApproval: z.boolean(),
  conditions: z.array(z.lazy(() => Conditions$outboundSchema)).optional(),
  mcpServer: z.string().optional(),
  timeout: z.number().default(120),
}).transform((v) => {
  return remap$(v, {
    actionType: "action_type",
    displayName: "display_name",
    requiresApproval: "requires_approval",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAgentTools$ {
  /** @deprecated use `GetAgentTools$inboundSchema` instead. */
  export const inboundSchema = GetAgentTools$inboundSchema;
  /** @deprecated use `GetAgentTools$outboundSchema` instead. */
  export const outboundSchema = GetAgentTools$outboundSchema;
  /** @deprecated use `GetAgentTools$Outbound` instead. */
  export type Outbound = GetAgentTools$Outbound;
}

export function getAgentToolsToJSON(getAgentTools: GetAgentTools): string {
  return JSON.stringify(GetAgentTools$outboundSchema.parse(getAgentTools));
}

export function getAgentToolsFromJSON(
  jsonString: string,
): SafeParseResult<GetAgentTools, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetAgentTools$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetAgentTools' from JSON`,
  );
}

/** @internal */
export const GetAgentSettings$inboundSchema: z.ZodType<
  GetAgentSettings,
  z.ZodTypeDef,
  unknown
> = z.object({
  max_iterations: z.number().int().default(10),
  max_execution_time: z.number().int(),
  tool_approval_required: GetAgentToolApprovalRequired$inboundSchema.default(
    "respect_tool",
  ),
  tools: z.array(z.lazy(() => GetAgentTools$inboundSchema)),
}).transform((v) => {
  return remap$(v, {
    "max_iterations": "maxIterations",
    "max_execution_time": "maxExecutionTime",
    "tool_approval_required": "toolApprovalRequired",
  });
});

/** @internal */
export type GetAgentSettings$Outbound = {
  max_iterations: number;
  max_execution_time: number;
  tool_approval_required: string;
  tools: Array<GetAgentTools$Outbound>;
};

/** @internal */
export const GetAgentSettings$outboundSchema: z.ZodType<
  GetAgentSettings$Outbound,
  z.ZodTypeDef,
  GetAgentSettings
> = z.object({
  maxIterations: z.number().int().default(10),
  maxExecutionTime: z.number().int(),
  toolApprovalRequired: GetAgentToolApprovalRequired$outboundSchema.default(
    "respect_tool",
  ),
  tools: z.array(z.lazy(() => GetAgentTools$outboundSchema)),
}).transform((v) => {
  return remap$(v, {
    maxIterations: "max_iterations",
    maxExecutionTime: "max_execution_time",
    toolApprovalRequired: "tool_approval_required",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAgentSettings$ {
  /** @deprecated use `GetAgentSettings$inboundSchema` instead. */
  export const inboundSchema = GetAgentSettings$inboundSchema;
  /** @deprecated use `GetAgentSettings$outboundSchema` instead. */
  export const outboundSchema = GetAgentSettings$outboundSchema;
  /** @deprecated use `GetAgentSettings$Outbound` instead. */
  export type Outbound = GetAgentSettings$Outbound;
}

export function getAgentSettingsToJSON(
  getAgentSettings: GetAgentSettings,
): string {
  return JSON.stringify(
    GetAgentSettings$outboundSchema.parse(getAgentSettings),
  );
}

export function getAgentSettingsFromJSON(
  jsonString: string,
): SafeParseResult<GetAgentSettings, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetAgentSettings$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetAgentSettings' from JSON`,
  );
}

/** @internal */
export const GetAgentModel$inboundSchema: z.ZodType<
  GetAgentModel,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  integration_id: z.string().optional(),
  fallback_models: z.array(z.string()).optional(),
  max_tokens: z.number().int().optional(),
  temperature: z.number().optional(),
}).transform((v) => {
  return remap$(v, {
    "integration_id": "integrationId",
    "fallback_models": "fallbackModels",
    "max_tokens": "maxTokens",
  });
});

/** @internal */
export type GetAgentModel$Outbound = {
  id: string;
  integration_id?: string | undefined;
  fallback_models?: Array<string> | undefined;
  max_tokens?: number | undefined;
  temperature?: number | undefined;
};

/** @internal */
export const GetAgentModel$outboundSchema: z.ZodType<
  GetAgentModel$Outbound,
  z.ZodTypeDef,
  GetAgentModel
> = z.object({
  id: z.string(),
  integrationId: z.string().optional(),
  fallbackModels: z.array(z.string()).optional(),
  maxTokens: z.number().int().optional(),
  temperature: z.number().optional(),
}).transform((v) => {
  return remap$(v, {
    integrationId: "integration_id",
    fallbackModels: "fallback_models",
    maxTokens: "max_tokens",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAgentModel$ {
  /** @deprecated use `GetAgentModel$inboundSchema` instead. */
  export const inboundSchema = GetAgentModel$inboundSchema;
  /** @deprecated use `GetAgentModel$outboundSchema` instead. */
  export const outboundSchema = GetAgentModel$outboundSchema;
  /** @deprecated use `GetAgentModel$Outbound` instead. */
  export type Outbound = GetAgentModel$Outbound;
}

export function getAgentModelToJSON(getAgentModel: GetAgentModel): string {
  return JSON.stringify(GetAgentModel$outboundSchema.parse(getAgentModel));
}

export function getAgentModelFromJSON(
  jsonString: string,
): SafeParseResult<GetAgentModel, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetAgentModel$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetAgentModel' from JSON`,
  );
}

/** @internal */
export const GetAgentTeamOfAgents$inboundSchema: z.ZodType<
  GetAgentTeamOfAgents,
  z.ZodTypeDef,
  unknown
> = z.object({
  _id: z.string(),
  role: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "_id": "id",
  });
});

/** @internal */
export type GetAgentTeamOfAgents$Outbound = {
  _id: string;
  role?: string | undefined;
};

/** @internal */
export const GetAgentTeamOfAgents$outboundSchema: z.ZodType<
  GetAgentTeamOfAgents$Outbound,
  z.ZodTypeDef,
  GetAgentTeamOfAgents
> = z.object({
  id: z.string(),
  role: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    id: "_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAgentTeamOfAgents$ {
  /** @deprecated use `GetAgentTeamOfAgents$inboundSchema` instead. */
  export const inboundSchema = GetAgentTeamOfAgents$inboundSchema;
  /** @deprecated use `GetAgentTeamOfAgents$outboundSchema` instead. */
  export const outboundSchema = GetAgentTeamOfAgents$outboundSchema;
  /** @deprecated use `GetAgentTeamOfAgents$Outbound` instead. */
  export type Outbound = GetAgentTeamOfAgents$Outbound;
}

export function getAgentTeamOfAgentsToJSON(
  getAgentTeamOfAgents: GetAgentTeamOfAgents,
): string {
  return JSON.stringify(
    GetAgentTeamOfAgents$outboundSchema.parse(getAgentTeamOfAgents),
  );
}

export function getAgentTeamOfAgentsFromJSON(
  jsonString: string,
): SafeParseResult<GetAgentTeamOfAgents, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetAgentTeamOfAgents$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetAgentTeamOfAgents' from JSON`,
  );
}

/** @internal */
export const Metrics$inboundSchema: z.ZodType<Metrics, z.ZodTypeDef, unknown> =
  z.object({
    total_cost: z.number().default(0),
  }).transform((v) => {
    return remap$(v, {
      "total_cost": "totalCost",
    });
  });

/** @internal */
export type Metrics$Outbound = {
  total_cost: number;
};

/** @internal */
export const Metrics$outboundSchema: z.ZodType<
  Metrics$Outbound,
  z.ZodTypeDef,
  Metrics
> = z.object({
  totalCost: z.number().default(0),
}).transform((v) => {
  return remap$(v, {
    totalCost: "total_cost",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Metrics$ {
  /** @deprecated use `Metrics$inboundSchema` instead. */
  export const inboundSchema = Metrics$inboundSchema;
  /** @deprecated use `Metrics$outboundSchema` instead. */
  export const outboundSchema = Metrics$outboundSchema;
  /** @deprecated use `Metrics$Outbound` instead. */
  export type Outbound = Metrics$Outbound;
}

export function metricsToJSON(metrics: Metrics): string {
  return JSON.stringify(Metrics$outboundSchema.parse(metrics));
}

export function metricsFromJSON(
  jsonString: string,
): SafeParseResult<Metrics, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Metrics$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Metrics' from JSON`,
  );
}

/** @internal */
export const GetAgentConfigurationType$inboundSchema: z.ZodNativeEnum<
  typeof GetAgentConfigurationType
> = z.nativeEnum(GetAgentConfigurationType);

/** @internal */
export const GetAgentConfigurationType$outboundSchema: z.ZodNativeEnum<
  typeof GetAgentConfigurationType
> = GetAgentConfigurationType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAgentConfigurationType$ {
  /** @deprecated use `GetAgentConfigurationType$inboundSchema` instead. */
  export const inboundSchema = GetAgentConfigurationType$inboundSchema;
  /** @deprecated use `GetAgentConfigurationType$outboundSchema` instead. */
  export const outboundSchema = GetAgentConfigurationType$outboundSchema;
}

/** @internal */
export const Configuration2$inboundSchema: z.ZodType<
  Configuration2,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: GetAgentConfigurationType$inboundSchema,
  query: z.string(),
});

/** @internal */
export type Configuration2$Outbound = {
  type: string;
  query: string;
};

/** @internal */
export const Configuration2$outboundSchema: z.ZodType<
  Configuration2$Outbound,
  z.ZodTypeDef,
  Configuration2
> = z.object({
  type: GetAgentConfigurationType$outboundSchema,
  query: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Configuration2$ {
  /** @deprecated use `Configuration2$inboundSchema` instead. */
  export const inboundSchema = Configuration2$inboundSchema;
  /** @deprecated use `Configuration2$outboundSchema` instead. */
  export const outboundSchema = Configuration2$outboundSchema;
  /** @deprecated use `Configuration2$Outbound` instead. */
  export type Outbound = Configuration2$Outbound;
}

export function configuration2ToJSON(configuration2: Configuration2): string {
  return JSON.stringify(Configuration2$outboundSchema.parse(configuration2));
}

export function configuration2FromJSON(
  jsonString: string,
): SafeParseResult<Configuration2, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Configuration2$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Configuration2' from JSON`,
  );
}

/** @internal */
export const ConfigurationType$inboundSchema: z.ZodNativeEnum<
  typeof ConfigurationType
> = z.nativeEnum(ConfigurationType);

/** @internal */
export const ConfigurationType$outboundSchema: z.ZodNativeEnum<
  typeof ConfigurationType
> = ConfigurationType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ConfigurationType$ {
  /** @deprecated use `ConfigurationType$inboundSchema` instead. */
  export const inboundSchema = ConfigurationType$inboundSchema;
  /** @deprecated use `ConfigurationType$outboundSchema` instead. */
  export const outboundSchema = ConfigurationType$outboundSchema;
}

/** @internal */
export const Configuration1$inboundSchema: z.ZodType<
  Configuration1,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: ConfigurationType$inboundSchema,
});

/** @internal */
export type Configuration1$Outbound = {
  type: string;
};

/** @internal */
export const Configuration1$outboundSchema: z.ZodType<
  Configuration1$Outbound,
  z.ZodTypeDef,
  Configuration1
> = z.object({
  type: ConfigurationType$outboundSchema,
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Configuration1$ {
  /** @deprecated use `Configuration1$inboundSchema` instead. */
  export const inboundSchema = Configuration1$inboundSchema;
  /** @deprecated use `Configuration1$outboundSchema` instead. */
  export const outboundSchema = Configuration1$outboundSchema;
  /** @deprecated use `Configuration1$Outbound` instead. */
  export type Outbound = Configuration1$Outbound;
}

export function configuration1ToJSON(configuration1: Configuration1): string {
  return JSON.stringify(Configuration1$outboundSchema.parse(configuration1));
}

export function configuration1FromJSON(
  jsonString: string,
): SafeParseResult<Configuration1, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Configuration1$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Configuration1' from JSON`,
  );
}

/** @internal */
export const Configuration$inboundSchema: z.ZodType<
  Configuration,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => Configuration2$inboundSchema),
  z.lazy(() => Configuration1$inboundSchema),
]);

/** @internal */
export type Configuration$Outbound =
  | Configuration2$Outbound
  | Configuration1$Outbound;

/** @internal */
export const Configuration$outboundSchema: z.ZodType<
  Configuration$Outbound,
  z.ZodTypeDef,
  Configuration
> = z.union([
  z.lazy(() => Configuration2$outboundSchema),
  z.lazy(() => Configuration1$outboundSchema),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Configuration$ {
  /** @deprecated use `Configuration$inboundSchema` instead. */
  export const inboundSchema = Configuration$inboundSchema;
  /** @deprecated use `Configuration$outboundSchema` instead. */
  export const outboundSchema = Configuration$outboundSchema;
  /** @deprecated use `Configuration$Outbound` instead. */
  export type Outbound = Configuration$Outbound;
}

export function configurationToJSON(configuration: Configuration): string {
  return JSON.stringify(Configuration$outboundSchema.parse(configuration));
}

export function configurationFromJSON(
  jsonString: string,
): SafeParseResult<Configuration, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Configuration$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Configuration' from JSON`,
  );
}

/** @internal */
export const KnowledgeBases$inboundSchema: z.ZodType<
  KnowledgeBases,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string().default("01K4SD7KQXPYM7FAYZD01A97T8"),
  knowledge_id: z.string(),
  configuration: z.union([
    z.lazy(() => Configuration2$inboundSchema),
    z.lazy(() => Configuration1$inboundSchema),
  ]),
}).transform((v) => {
  return remap$(v, {
    "knowledge_id": "knowledgeId",
  });
});

/** @internal */
export type KnowledgeBases$Outbound = {
  id: string;
  knowledge_id: string;
  configuration: Configuration2$Outbound | Configuration1$Outbound;
};

/** @internal */
export const KnowledgeBases$outboundSchema: z.ZodType<
  KnowledgeBases$Outbound,
  z.ZodTypeDef,
  KnowledgeBases
> = z.object({
  id: z.string().default("01K4SD7KQXPYM7FAYZD01A97T8"),
  knowledgeId: z.string(),
  configuration: z.union([
    z.lazy(() => Configuration2$outboundSchema),
    z.lazy(() => Configuration1$outboundSchema),
  ]),
}).transform((v) => {
  return remap$(v, {
    knowledgeId: "knowledge_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace KnowledgeBases$ {
  /** @deprecated use `KnowledgeBases$inboundSchema` instead. */
  export const inboundSchema = KnowledgeBases$inboundSchema;
  /** @deprecated use `KnowledgeBases$outboundSchema` instead. */
  export const outboundSchema = KnowledgeBases$outboundSchema;
  /** @deprecated use `KnowledgeBases$Outbound` instead. */
  export type Outbound = KnowledgeBases$Outbound;
}

export function knowledgeBasesToJSON(knowledgeBases: KnowledgeBases): string {
  return JSON.stringify(KnowledgeBases$outboundSchema.parse(knowledgeBases));
}

export function knowledgeBasesFromJSON(
  jsonString: string,
): SafeParseResult<KnowledgeBases, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => KnowledgeBases$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'KnowledgeBases' from JSON`,
  );
}

/** @internal */
export const HiddenPanels$inboundSchema: z.ZodNativeEnum<typeof HiddenPanels> =
  z.nativeEnum(HiddenPanels);

/** @internal */
export const HiddenPanels$outboundSchema: z.ZodNativeEnum<typeof HiddenPanels> =
  HiddenPanels$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HiddenPanels$ {
  /** @deprecated use `HiddenPanels$inboundSchema` instead. */
  export const inboundSchema = HiddenPanels$inboundSchema;
  /** @deprecated use `HiddenPanels$outboundSchema` instead. */
  export const outboundSchema = HiddenPanels$outboundSchema;
}

/** @internal */
export const GetAgentResponseBody$inboundSchema: z.ZodType<
  GetAgentResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  _id: z.string(),
  key: z.string(),
  workspace_id: z.string(),
  project_id: z.string(),
  created_by_id: z.string().optional(),
  updated_by_id: z.string().optional(),
  created: z.string().optional(),
  updated: z.string().optional(),
  role: z.string(),
  description: z.string(),
  system_prompt: z.string().optional(),
  instructions: z.string(),
  iconUrl: z.string().optional(),
  status: GetAgentStatus$inboundSchema,
  settings: z.lazy(() => GetAgentSettings$inboundSchema).optional(),
  model: z.lazy(() => GetAgentModel$inboundSchema),
  version_hash: z.string().optional(),
  path: z.string(),
  memory_stores: z.array(z.string()),
  team_of_agents: z.array(z.lazy(() => GetAgentTeamOfAgents$inboundSchema)),
  metrics: z.lazy(() => Metrics$inboundSchema).optional(),
  variables: z.record(z.any()).optional(),
  knowledge_bases: z.array(z.lazy(() => KnowledgeBases$inboundSchema))
    .optional(),
  hidden_panels: z.array(HiddenPanels$inboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    "_id": "id",
    "workspace_id": "workspaceId",
    "project_id": "projectId",
    "created_by_id": "createdById",
    "updated_by_id": "updatedById",
    "system_prompt": "systemPrompt",
    "version_hash": "versionHash",
    "memory_stores": "memoryStores",
    "team_of_agents": "teamOfAgents",
    "knowledge_bases": "knowledgeBases",
    "hidden_panels": "hiddenPanels",
  });
});

/** @internal */
export type GetAgentResponseBody$Outbound = {
  _id: string;
  key: string;
  workspace_id: string;
  project_id: string;
  created_by_id?: string | undefined;
  updated_by_id?: string | undefined;
  created?: string | undefined;
  updated?: string | undefined;
  role: string;
  description: string;
  system_prompt?: string | undefined;
  instructions: string;
  iconUrl?: string | undefined;
  status: string;
  settings?: GetAgentSettings$Outbound | undefined;
  model: GetAgentModel$Outbound;
  version_hash?: string | undefined;
  path: string;
  memory_stores: Array<string>;
  team_of_agents: Array<GetAgentTeamOfAgents$Outbound>;
  metrics?: Metrics$Outbound | undefined;
  variables?: { [k: string]: any } | undefined;
  knowledge_bases?: Array<KnowledgeBases$Outbound> | undefined;
  hidden_panels?: Array<string> | undefined;
};

/** @internal */
export const GetAgentResponseBody$outboundSchema: z.ZodType<
  GetAgentResponseBody$Outbound,
  z.ZodTypeDef,
  GetAgentResponseBody
> = z.object({
  id: z.string(),
  key: z.string(),
  workspaceId: z.string(),
  projectId: z.string(),
  createdById: z.string().optional(),
  updatedById: z.string().optional(),
  created: z.string().optional(),
  updated: z.string().optional(),
  role: z.string(),
  description: z.string(),
  systemPrompt: z.string().optional(),
  instructions: z.string(),
  iconUrl: z.string().optional(),
  status: GetAgentStatus$outboundSchema,
  settings: z.lazy(() => GetAgentSettings$outboundSchema).optional(),
  model: z.lazy(() => GetAgentModel$outboundSchema),
  versionHash: z.string().optional(),
  path: z.string(),
  memoryStores: z.array(z.string()),
  teamOfAgents: z.array(z.lazy(() => GetAgentTeamOfAgents$outboundSchema)),
  metrics: z.lazy(() => Metrics$outboundSchema).optional(),
  variables: z.record(z.any()).optional(),
  knowledgeBases: z.array(z.lazy(() => KnowledgeBases$outboundSchema))
    .optional(),
  hiddenPanels: z.array(HiddenPanels$outboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    id: "_id",
    workspaceId: "workspace_id",
    projectId: "project_id",
    createdById: "created_by_id",
    updatedById: "updated_by_id",
    systemPrompt: "system_prompt",
    versionHash: "version_hash",
    memoryStores: "memory_stores",
    teamOfAgents: "team_of_agents",
    knowledgeBases: "knowledge_bases",
    hiddenPanels: "hidden_panels",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAgentResponseBody$ {
  /** @deprecated use `GetAgentResponseBody$inboundSchema` instead. */
  export const inboundSchema = GetAgentResponseBody$inboundSchema;
  /** @deprecated use `GetAgentResponseBody$outboundSchema` instead. */
  export const outboundSchema = GetAgentResponseBody$outboundSchema;
  /** @deprecated use `GetAgentResponseBody$Outbound` instead. */
  export type Outbound = GetAgentResponseBody$Outbound;
}

export function getAgentResponseBodyToJSON(
  getAgentResponseBody: GetAgentResponseBody,
): string {
  return JSON.stringify(
    GetAgentResponseBody$outboundSchema.parse(getAgentResponseBody),
  );
}

export function getAgentResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<GetAgentResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetAgentResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetAgentResponseBody' from JSON`,
  );
}
