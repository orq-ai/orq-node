/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * Budget entity type - only contact budgets supported
 */
export const CreateBudgetType = {
  Contact: "contact",
} as const;
/**
 * Budget entity type - only contact budgets supported
 */
export type CreateBudgetType = ClosedEnum<typeof CreateBudgetType>;

/**
 * Budget period type
 */
export const Period = {
  Daily: "daily",
  Weekly: "weekly",
  Monthly: "monthly",
  Yearly: "yearly",
} as const;
/**
 * Budget period type
 */
export type Period = ClosedEnum<typeof Period>;

export type CreateBudgetRequestBody = {
  /**
   * Budget entity type - only contact budgets supported
   */
  type: CreateBudgetType;
  /**
   * Contact external ID
   */
  entityId: string;
  /**
   * Budget period type
   */
  period: Period;
  /**
   * Budget amount in USD for the specified period
   */
  amount: number;
};

/**
 * Budget entity type
 */
export const CreateBudgetBudgetsType = {
  ApiKey: "api_key",
  Contact: "contact",
  Workspace: "workspace",
} as const;
/**
 * Budget entity type
 */
export type CreateBudgetBudgetsType = ClosedEnum<
  typeof CreateBudgetBudgetsType
>;

/**
 * Budget period type
 */
export const CreateBudgetPeriod = {
  Daily: "daily",
  Weekly: "weekly",
  Monthly: "monthly",
  Yearly: "yearly",
} as const;
/**
 * Budget period type
 */
export type CreateBudgetPeriod = ClosedEnum<typeof CreateBudgetPeriod>;

/**
 * Budget configuration
 */
export type CreateBudgetBudget = {
  /**
   * Budget period type
   */
  period: CreateBudgetPeriod;
  /**
   * Budget amount in USD for the specified period
   */
  amount: number;
};

export type Consumption = {
  /**
   * Current period consumption in USD
   */
  currentAmount: number;
  /**
   * Remaining budget (amount - current_amount)
   */
  remainingAmount: number;
  /**
   * When the current period started
   */
  periodStart: string | null;
  /**
   * When the current period will reset
   */
  periodEnd: string | null;
};

/**
 * Budget configuration details
 */
export type CreateBudgetResponseBody = {
  /**
   * Unique ULID for the budget configuration
   */
  id: string;
  /**
   * Budget entity type
   */
  type: CreateBudgetBudgetsType;
  /**
   * Contact external identifier (present when type is "contact")
   */
  contactId?: string | undefined;
  /**
   * API Key identifier (present when type is "api_key")
   */
  apiKeyId?: string | undefined;
  /**
   * Budget configuration
   */
  budget: CreateBudgetBudget;
  /**
   * Whether this budget configuration is currently active
   */
  isActive: boolean;
  consumption?: Consumption | undefined;
  /**
   * The date and time the resource was created
   */
  created?: Date | undefined;
  /**
   * The date and time the resource was last updated
   */
  updated?: Date | undefined;
};

/** @internal */
export const CreateBudgetType$inboundSchema: z.ZodNativeEnum<
  typeof CreateBudgetType
> = z.nativeEnum(CreateBudgetType);

/** @internal */
export const CreateBudgetType$outboundSchema: z.ZodNativeEnum<
  typeof CreateBudgetType
> = CreateBudgetType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateBudgetType$ {
  /** @deprecated use `CreateBudgetType$inboundSchema` instead. */
  export const inboundSchema = CreateBudgetType$inboundSchema;
  /** @deprecated use `CreateBudgetType$outboundSchema` instead. */
  export const outboundSchema = CreateBudgetType$outboundSchema;
}

/** @internal */
export const Period$inboundSchema: z.ZodNativeEnum<typeof Period> = z
  .nativeEnum(Period);

/** @internal */
export const Period$outboundSchema: z.ZodNativeEnum<typeof Period> =
  Period$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Period$ {
  /** @deprecated use `Period$inboundSchema` instead. */
  export const inboundSchema = Period$inboundSchema;
  /** @deprecated use `Period$outboundSchema` instead. */
  export const outboundSchema = Period$outboundSchema;
}

/** @internal */
export const CreateBudgetRequestBody$inboundSchema: z.ZodType<
  CreateBudgetRequestBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: CreateBudgetType$inboundSchema,
  entity_id: z.string(),
  period: Period$inboundSchema,
  amount: z.number(),
}).transform((v) => {
  return remap$(v, {
    "entity_id": "entityId",
  });
});

/** @internal */
export type CreateBudgetRequestBody$Outbound = {
  type: string;
  entity_id: string;
  period: string;
  amount: number;
};

/** @internal */
export const CreateBudgetRequestBody$outboundSchema: z.ZodType<
  CreateBudgetRequestBody$Outbound,
  z.ZodTypeDef,
  CreateBudgetRequestBody
> = z.object({
  type: CreateBudgetType$outboundSchema,
  entityId: z.string(),
  period: Period$outboundSchema,
  amount: z.number(),
}).transform((v) => {
  return remap$(v, {
    entityId: "entity_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateBudgetRequestBody$ {
  /** @deprecated use `CreateBudgetRequestBody$inboundSchema` instead. */
  export const inboundSchema = CreateBudgetRequestBody$inboundSchema;
  /** @deprecated use `CreateBudgetRequestBody$outboundSchema` instead. */
  export const outboundSchema = CreateBudgetRequestBody$outboundSchema;
  /** @deprecated use `CreateBudgetRequestBody$Outbound` instead. */
  export type Outbound = CreateBudgetRequestBody$Outbound;
}

export function createBudgetRequestBodyToJSON(
  createBudgetRequestBody: CreateBudgetRequestBody,
): string {
  return JSON.stringify(
    CreateBudgetRequestBody$outboundSchema.parse(createBudgetRequestBody),
  );
}

export function createBudgetRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<CreateBudgetRequestBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateBudgetRequestBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateBudgetRequestBody' from JSON`,
  );
}

/** @internal */
export const CreateBudgetBudgetsType$inboundSchema: z.ZodNativeEnum<
  typeof CreateBudgetBudgetsType
> = z.nativeEnum(CreateBudgetBudgetsType);

/** @internal */
export const CreateBudgetBudgetsType$outboundSchema: z.ZodNativeEnum<
  typeof CreateBudgetBudgetsType
> = CreateBudgetBudgetsType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateBudgetBudgetsType$ {
  /** @deprecated use `CreateBudgetBudgetsType$inboundSchema` instead. */
  export const inboundSchema = CreateBudgetBudgetsType$inboundSchema;
  /** @deprecated use `CreateBudgetBudgetsType$outboundSchema` instead. */
  export const outboundSchema = CreateBudgetBudgetsType$outboundSchema;
}

/** @internal */
export const CreateBudgetPeriod$inboundSchema: z.ZodNativeEnum<
  typeof CreateBudgetPeriod
> = z.nativeEnum(CreateBudgetPeriod);

/** @internal */
export const CreateBudgetPeriod$outboundSchema: z.ZodNativeEnum<
  typeof CreateBudgetPeriod
> = CreateBudgetPeriod$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateBudgetPeriod$ {
  /** @deprecated use `CreateBudgetPeriod$inboundSchema` instead. */
  export const inboundSchema = CreateBudgetPeriod$inboundSchema;
  /** @deprecated use `CreateBudgetPeriod$outboundSchema` instead. */
  export const outboundSchema = CreateBudgetPeriod$outboundSchema;
}

/** @internal */
export const CreateBudgetBudget$inboundSchema: z.ZodType<
  CreateBudgetBudget,
  z.ZodTypeDef,
  unknown
> = z.object({
  period: CreateBudgetPeriod$inboundSchema,
  amount: z.number(),
});

/** @internal */
export type CreateBudgetBudget$Outbound = {
  period: string;
  amount: number;
};

/** @internal */
export const CreateBudgetBudget$outboundSchema: z.ZodType<
  CreateBudgetBudget$Outbound,
  z.ZodTypeDef,
  CreateBudgetBudget
> = z.object({
  period: CreateBudgetPeriod$outboundSchema,
  amount: z.number(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateBudgetBudget$ {
  /** @deprecated use `CreateBudgetBudget$inboundSchema` instead. */
  export const inboundSchema = CreateBudgetBudget$inboundSchema;
  /** @deprecated use `CreateBudgetBudget$outboundSchema` instead. */
  export const outboundSchema = CreateBudgetBudget$outboundSchema;
  /** @deprecated use `CreateBudgetBudget$Outbound` instead. */
  export type Outbound = CreateBudgetBudget$Outbound;
}

export function createBudgetBudgetToJSON(
  createBudgetBudget: CreateBudgetBudget,
): string {
  return JSON.stringify(
    CreateBudgetBudget$outboundSchema.parse(createBudgetBudget),
  );
}

export function createBudgetBudgetFromJSON(
  jsonString: string,
): SafeParseResult<CreateBudgetBudget, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateBudgetBudget$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateBudgetBudget' from JSON`,
  );
}

/** @internal */
export const Consumption$inboundSchema: z.ZodType<
  Consumption,
  z.ZodTypeDef,
  unknown
> = z.object({
  current_amount: z.number(),
  remaining_amount: z.number(),
  period_start: z.nullable(z.string()),
  period_end: z.nullable(z.string()),
}).transform((v) => {
  return remap$(v, {
    "current_amount": "currentAmount",
    "remaining_amount": "remainingAmount",
    "period_start": "periodStart",
    "period_end": "periodEnd",
  });
});

/** @internal */
export type Consumption$Outbound = {
  current_amount: number;
  remaining_amount: number;
  period_start: string | null;
  period_end: string | null;
};

/** @internal */
export const Consumption$outboundSchema: z.ZodType<
  Consumption$Outbound,
  z.ZodTypeDef,
  Consumption
> = z.object({
  currentAmount: z.number(),
  remainingAmount: z.number(),
  periodStart: z.nullable(z.string()),
  periodEnd: z.nullable(z.string()),
}).transform((v) => {
  return remap$(v, {
    currentAmount: "current_amount",
    remainingAmount: "remaining_amount",
    periodStart: "period_start",
    periodEnd: "period_end",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Consumption$ {
  /** @deprecated use `Consumption$inboundSchema` instead. */
  export const inboundSchema = Consumption$inboundSchema;
  /** @deprecated use `Consumption$outboundSchema` instead. */
  export const outboundSchema = Consumption$outboundSchema;
  /** @deprecated use `Consumption$Outbound` instead. */
  export type Outbound = Consumption$Outbound;
}

export function consumptionToJSON(consumption: Consumption): string {
  return JSON.stringify(Consumption$outboundSchema.parse(consumption));
}

export function consumptionFromJSON(
  jsonString: string,
): SafeParseResult<Consumption, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Consumption$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Consumption' from JSON`,
  );
}

/** @internal */
export const CreateBudgetResponseBody$inboundSchema: z.ZodType<
  CreateBudgetResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  _id: z.string(),
  type: CreateBudgetBudgetsType$inboundSchema,
  contact_id: z.string().optional(),
  api_key_id: z.string().optional(),
  budget: z.lazy(() => CreateBudgetBudget$inboundSchema),
  is_active: z.boolean(),
  consumption: z.lazy(() => Consumption$inboundSchema).optional(),
  created: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
  updated: z.string().datetime({ offset: true }).default(
    "2025-08-19T12:28:47.558Z",
  ).transform(v => new Date(v)),
}).transform((v) => {
  return remap$(v, {
    "_id": "id",
    "contact_id": "contactId",
    "api_key_id": "apiKeyId",
    "is_active": "isActive",
  });
});

/** @internal */
export type CreateBudgetResponseBody$Outbound = {
  _id: string;
  type: string;
  contact_id?: string | undefined;
  api_key_id?: string | undefined;
  budget: CreateBudgetBudget$Outbound;
  is_active: boolean;
  consumption?: Consumption$Outbound | undefined;
  created?: string | undefined;
  updated: string;
};

/** @internal */
export const CreateBudgetResponseBody$outboundSchema: z.ZodType<
  CreateBudgetResponseBody$Outbound,
  z.ZodTypeDef,
  CreateBudgetResponseBody
> = z.object({
  id: z.string(),
  type: CreateBudgetBudgetsType$outboundSchema,
  contactId: z.string().optional(),
  apiKeyId: z.string().optional(),
  budget: z.lazy(() => CreateBudgetBudget$outboundSchema),
  isActive: z.boolean(),
  consumption: z.lazy(() => Consumption$outboundSchema).optional(),
  created: z.date().transform(v => v.toISOString()).optional(),
  updated: z.date().default(() => new Date("2025-08-19T12:28:47.558Z"))
    .transform(v => v.toISOString()),
}).transform((v) => {
  return remap$(v, {
    id: "_id",
    contactId: "contact_id",
    apiKeyId: "api_key_id",
    isActive: "is_active",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateBudgetResponseBody$ {
  /** @deprecated use `CreateBudgetResponseBody$inboundSchema` instead. */
  export const inboundSchema = CreateBudgetResponseBody$inboundSchema;
  /** @deprecated use `CreateBudgetResponseBody$outboundSchema` instead. */
  export const outboundSchema = CreateBudgetResponseBody$outboundSchema;
  /** @deprecated use `CreateBudgetResponseBody$Outbound` instead. */
  export type Outbound = CreateBudgetResponseBody$Outbound;
}

export function createBudgetResponseBodyToJSON(
  createBudgetResponseBody: CreateBudgetResponseBody,
): string {
  return JSON.stringify(
    CreateBudgetResponseBody$outboundSchema.parse(createBudgetResponseBody),
  );
}

export function createBudgetResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<CreateBudgetResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateBudgetResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateBudgetResponseBody' from JSON`,
  );
}
