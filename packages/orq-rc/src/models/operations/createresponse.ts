/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { EventStream } from "../../lib/event-streams.js";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * The effort level for reasoning (o3-mini model only)
 */
export const Effort = {
  Low: "low",
  Medium: "medium",
  High: "high",
} as const;
/**
 * The effort level for reasoning (o3-mini model only)
 */
export type Effort = ClosedEnum<typeof Effort>;

/**
 * Configuration for reasoning models
 */
export type Reasoning = {
  /**
   * The effort level for reasoning (o3-mini model only)
   */
  effort?: Effort | undefined;
};

/**
 * Ensures the response matches a supplied JSON schema
 */
export const CreateResponseFormatProxyType = {
  JsonSchema: "json_schema",
} as const;
/**
 * Ensures the response matches a supplied JSON schema
 */
export type CreateResponseFormatProxyType = ClosedEnum<
  typeof CreateResponseFormatProxyType
>;

export type Format3 = {
  /**
   * Ensures the response matches a supplied JSON schema
   */
  type: CreateResponseFormatProxyType;
  /**
   * The name of the response format. Must be a-z, A-Z, 0-9, or contain underscores and dashes, with a maximum length of 64.
   */
  name: string;
  /**
   * A description of what the response format is for, used by the model to determine how to respond in the format.
   */
  description?: string | undefined;
  /**
   * The JSON schema to validate the response against
   */
  schema: { [k: string]: any };
  /**
   * Whether to enable strict `schema` adherence when generating the output. If set to true, the model will always follow the exact schema defined in the schema field. Only a subset of JSON Schema is supported when `strict` is `true`
   */
  strict?: boolean | null | undefined;
};

/**
 * Ensures the response is a valid JSON object
 */
export const CreateResponseFormatType = {
  JsonObject: "json_object",
} as const;
/**
 * Ensures the response is a valid JSON object
 */
export type CreateResponseFormatType = ClosedEnum<
  typeof CreateResponseFormatType
>;

export type Format2 = {
  /**
   * Ensures the response is a valid JSON object
   */
  type: CreateResponseFormatType;
};

/**
 * Plain text response format
 */
export const FormatType = {
  Text: "text",
} as const;
/**
 * Plain text response format
 */
export type FormatType = ClosedEnum<typeof FormatType>;

export type Format1 = {
  /**
   * Plain text response format
   */
  type: FormatType;
};

export type CreateResponseFormat = Format3 | Format1 | Format2;

export type Text = {
  format: Format3 | Format1 | Format2;
};

/**
 * The type of input item
 */
export const CreateResponse2ProxyRequestRequestBodyInputType = {
  FunctionCall: "function_call",
} as const;
/**
 * The type of input item
 */
export type CreateResponse2ProxyRequestRequestBodyInputType = ClosedEnum<
  typeof CreateResponse2ProxyRequestRequestBodyInputType
>;

/**
 * Represents a function tool call, provided as input to the model.
 */
export type CreateResponse2Proxy3 = {
  /**
   * The type of input item
   */
  type: CreateResponse2ProxyRequestRequestBodyInputType;
  /**
   * The ID of the function call
   */
  callId: string;
  /**
   * The unique identifier for this function call
   */
  id: string;
  /**
   * The name of the function being called
   */
  name: string;
  /**
   * The arguments to the function as a JSON string
   */
  arguments: string;
  /**
   * The status of the function call
   */
  status: string;
};

/**
 * The type of input item
 */
export const CreateResponse2ProxyRequestRequestBodyType = {
  FunctionCallOutput: "function_call_output",
} as const;
/**
 * The type of input item
 */
export type CreateResponse2ProxyRequestRequestBodyType = ClosedEnum<
  typeof CreateResponse2ProxyRequestRequestBodyType
>;

/**
 * Represents the output of a function tool call, provided as input to the model.
 */
export type CreateResponse2Proxy2 = {
  /**
   * The type of input item
   */
  type: CreateResponse2ProxyRequestRequestBodyType;
  /**
   * The ID of the function call this output is for
   */
  callId: string;
  /**
   * The output from the function call
   */
  output: string;
};

/**
 * The role of the message author
 */
export const TwoRole = {
  User: "user",
  Assistant: "assistant",
  System: "system",
  Developer: "developer",
} as const;
/**
 * The role of the message author
 */
export type TwoRole = ClosedEnum<typeof TwoRole>;

/**
 * The type of input content part
 */
export const CreateResponse2ProxyRequestType = {
  InputFile: "input_file",
} as const;
/**
 * The type of input content part
 */
export type CreateResponse2ProxyRequestType = ClosedEnum<
  typeof CreateResponse2ProxyRequestType
>;

/**
 * A file input content part.
 */
export type CreateResponse23 = {
  /**
   * The type of input content part
   */
  type: CreateResponse2ProxyRequestType;
  /**
   * Base64 encoded file data
   */
  fileData?: string | undefined;
  /**
   * File ID from the Files API
   */
  fileId?: string | undefined;
  /**
   * Name of the file
   */
  filename?: string | undefined;
  /**
   * URL of the file to fetch
   */
  fileUrl?: string | undefined;
};

/**
 * The type of input content part
 */
export const CreateResponse2ProxyType = {
  InputImage: "input_image",
} as const;
/**
 * The type of input content part
 */
export type CreateResponse2ProxyType = ClosedEnum<
  typeof CreateResponse2ProxyType
>;

/**
 * Level of detail for image analysis
 */
export const CreateResponse2Detail = {
  High: "high",
  Low: "low",
  Auto: "auto",
} as const;
/**
 * Level of detail for image analysis
 */
export type CreateResponse2Detail = ClosedEnum<typeof CreateResponse2Detail>;

/**
 * An image input content part.
 */
export type CreateResponse22 = {
  /**
   * The type of input content part
   */
  type: CreateResponse2ProxyType;
  /**
   * Level of detail for image analysis
   */
  detail?: CreateResponse2Detail | undefined;
  /**
   * File ID for the image
   */
  fileId?: string | null | undefined;
  /**
   * URL of the image (can be http URL or data URL)
   */
  imageUrl?: string | null | undefined;
};

/**
 * The type of input content
 */
export const CreateResponse2Type = {
  InputText: "input_text",
} as const;
/**
 * The type of input content
 */
export type CreateResponse2Type = ClosedEnum<typeof CreateResponse2Type>;

/**
 * A text input content part
 */
export type CreateResponse2Proxy1 = {
  /**
   * The type of input content
   */
  type: CreateResponse2Type;
  /**
   * The text content
   */
  text: string;
};

export type CreateResponseContent2 =
  | CreateResponse2Proxy1
  | CreateResponse22
  | CreateResponse23;

/**
 * The content of the message, either a string or an array of content parts
 */
export type TwoContent =
  | string
  | Array<CreateResponse2Proxy1 | CreateResponse22 | CreateResponse23>;

/**
 * Represents a message in the conversation, with a role and content (string or rich content parts).
 */
export type CreateResponse21 = {
  /**
   * The role of the message author
   */
  role: TwoRole;
  /**
   * The content of the message, either a string or an array of content parts
   */
  content:
    | string
    | Array<CreateResponse2Proxy1 | CreateResponse22 | CreateResponse23>;
};

export type Input2 =
  | CreateResponse2Proxy3
  | CreateResponse2Proxy2
  | CreateResponse21;

/**
 * The actual user input(s) for the model. Can be a simple string, or an array of structured input items (messages, tool outputs) representing a conversation history or complex input.
 */
export type CreateResponseInput =
  | string
  | Array<CreateResponse2Proxy3 | CreateResponse2Proxy2 | CreateResponse21>;

export const Include = {
  CodeInterpreterCallOutputs: "code_interpreter_call.outputs",
  ComputerCallOutputOutputImageUrl: "computer_call_output.output.image_url",
  FileSearchCallResults: "file_search_call.results",
  MessageInputImageImageUrl: "message.input_image.image_url",
  MessageOutputTextLogprobs: "message.output_text.logprobs",
  ReasoningEncryptedContent: "reasoning.encrypted_content",
} as const;
export type Include = ClosedEnum<typeof Include>;

/**
 * The type of tool
 */
export const CreateResponseToolsProxyRequestRequestBodyType = {
  FileSearch: "file_search",
} as const;
/**
 * The type of tool
 */
export type CreateResponseToolsProxyRequestRequestBodyType = ClosedEnum<
  typeof CreateResponseToolsProxyRequestRequestBodyType
>;

/**
 * The ranking algorithm
 */
export const Ranker = {
  Auto: "auto",
  Default20240821: "default_2024_08_21",
} as const;
/**
 * The ranking algorithm
 */
export type Ranker = ClosedEnum<typeof Ranker>;

/**
 * Options for ranking search results
 */
export type RankingOptions = {
  /**
   * The ranking algorithm
   */
  ranker?: Ranker | undefined;
  /**
   * Minimum relevance score
   */
  scoreThreshold?: number | undefined;
};

/**
 * Configuration for file search tool
 */
export type Tools3 = {
  /**
   * The type of tool
   */
  type: CreateResponseToolsProxyRequestRequestBodyType;
  /**
   * The vector stores to search
   */
  vectorStoreIds?: Array<string> | undefined;
  /**
   * Maximum number of results to return
   */
  maxNumResults?: number | undefined;
  /**
   * Filters to apply to the search
   */
  filters?: any | undefined;
  /**
   * Options for ranking search results
   */
  rankingOptions?: RankingOptions | undefined;
};

/**
 * The type of tool
 */
export const CreateResponseToolsProxyType = {
  WebSearchPreview: "web_search_preview",
} as const;
/**
 * The type of tool
 */
export type CreateResponseToolsProxyType = ClosedEnum<
  typeof CreateResponseToolsProxyType
>;

/**
 * Amount of context to retrieve for each search result
 */
export const SearchContextSize = {
  Small: "small",
  Medium: "medium",
  Large: "large",
} as const;
/**
 * Amount of context to retrieve for each search result
 */
export type SearchContextSize = ClosedEnum<typeof SearchContextSize>;

/**
 * The type of location
 */
export const CreateResponseToolsProxyRequestType = {
  Approximate: "approximate",
  Exact: "exact",
} as const;
/**
 * The type of location
 */
export type CreateResponseToolsProxyRequestType = ClosedEnum<
  typeof CreateResponseToolsProxyRequestType
>;

/**
 * User location for search localization
 */
export type UserLocation = {
  /**
   * The type of location
   */
  type?: CreateResponseToolsProxyRequestType | undefined;
  /**
   * The city name
   */
  city?: string | null | undefined;
  /**
   * The country code
   */
  country?: string | undefined;
  /**
   * The region/state
   */
  region?: string | null | undefined;
  /**
   * The timezone
   */
  timezone?: string | null | undefined;
};

/**
 * Configuration for web search tool
 */
export type Tools2 = {
  /**
   * The type of tool
   */
  type: CreateResponseToolsProxyType;
  /**
   * List of domains to restrict search to
   */
  domains?: Array<string> | undefined;
  /**
   * Amount of context to retrieve for each search result
   */
  searchContextSize?: SearchContextSize | undefined;
  /**
   * User location for search localization
   */
  userLocation?: UserLocation | undefined;
};

/**
 * The type of tool
 */
export const ToolsType = {
  Function: "function",
} as const;
/**
 * The type of tool
 */
export type ToolsType = ClosedEnum<typeof ToolsType>;

/**
 * The type of the parameters object
 */
export const CreateResponseToolsType = {
  Object: "object",
} as const;
/**
 * The type of the parameters object
 */
export type CreateResponseToolsType = ClosedEnum<
  typeof CreateResponseToolsType
>;

export type Properties = {
  type: string;
  description?: string | undefined;
  enum?: Array<string> | undefined;
};

/**
 * The parameters the function accepts
 */
export type ToolsParameters = {
  /**
   * The type of the parameters object
   */
  type: CreateResponseToolsType;
  /**
   * The parameters the function accepts, described as a JSON Schema object
   */
  properties: { [k: string]: Properties };
  /**
   * List of required parameter names
   */
  required?: Array<string> | undefined;
  /**
   * Whether to allow properties not defined in the schema
   */
  additionalProperties?: boolean | undefined;
};

/**
 * A function tool definition
 */
export type Tools1 = {
  /**
   * The type of tool
   */
  type: ToolsType;
  /**
   * The name of the function to be called
   */
  name: string;
  /**
   * A description of what the function does
   */
  description?: string | null | undefined;
  /**
   * The parameters the function accepts
   */
  parameters: ToolsParameters;
  /**
   * Whether to enable strict schema adherence when generating function calls
   */
  strict?: boolean | undefined;
};

export type CreateResponseTools = Tools1 | Tools2 | Tools3;

export const CreateResponseToolChoiceProxyRequestType = {
  Mcp: "mcp",
} as const;
export type CreateResponseToolChoiceProxyRequestType = ClosedEnum<
  typeof CreateResponseToolChoiceProxyRequestType
>;

export type ToolChoice4 = {
  type: CreateResponseToolChoiceProxyRequestType;
  serverLabel: string;
  name?: string | null | undefined;
};

export const CreateResponseToolChoiceProxyType = {
  Function: "function",
} as const;
export type CreateResponseToolChoiceProxyType = ClosedEnum<
  typeof CreateResponseToolChoiceProxyType
>;

export type ToolChoice3 = {
  type: CreateResponseToolChoiceProxyType;
  name: string;
};

export const CreateResponseToolChoiceType = {
  FileSearch: "file_search",
  WebSearchPreview: "web_search_preview",
  ComputerUsePreview: "computer_use_preview",
  CodeInterpreter: "code_interpreter",
  ImageGeneration: "image_generation",
} as const;
export type CreateResponseToolChoiceType = ClosedEnum<
  typeof CreateResponseToolChoiceType
>;

export type CreateResponseToolChoice2 = {
  type: CreateResponseToolChoiceType;
};

/**
 * Controls which (if any) tool is called by the model. `none` means the model will not call any tool. `auto` means the model can pick between generating a message or calling a tool. `required` means the model must call a tool.
 */
export const CreateResponseToolChoice1 = {
  None: "none",
  Auto: "auto",
  Required: "required",
} as const;
/**
 * Controls which (if any) tool is called by the model. `none` means the model will not call any tool. `auto` means the model can pick between generating a message or calling a tool. `required` means the model must call a tool.
 */
export type CreateResponseToolChoice1 = ClosedEnum<
  typeof CreateResponseToolChoice1
>;

/**
 * How the model should select which tool (or tools) to use when generating a response. Can be a string (`none`, `auto`, `required`) or an object to force a specific tool.
 */
export type CreateResponseToolChoice =
  | ToolChoice3
  | ToolChoice4
  | CreateResponseToolChoice2
  | CreateResponseToolChoice1;

export type CreateResponseRequestBody = {
  /**
   * ID of the model to use. You can use the List models API to see all of your available models.
   */
  model: string;
  /**
   * Developer-defined key-value pairs that will be included in response objects
   */
  metadata?: { [k: string]: string } | undefined;
  /**
   * What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic.
   */
  temperature?: number | null | undefined;
  /**
   * An alternative to sampling with temperature, called nucleus sampling, where the model considers the results of the tokens with top_p probability mass. So 0.1 means only the tokens comprising the top 10% probability mass are considered.
   */
  topP?: number | null | undefined;
  /**
   * The ID of a previous response to continue the conversation from. The model will have access to the previous response context.
   */
  previousResponseId?: string | null | undefined;
  /**
   * Developer-provided instructions that the model should follow. Overwrites the default system message.
   */
  instructions?: string | null | undefined;
  /**
   * Configuration for reasoning models
   */
  reasoning?: Reasoning | null | undefined;
  /**
   * The maximum number of tokens that can be generated in the response
   */
  maxOutputTokens?: number | null | undefined;
  text?: Text | null | undefined;
  /**
   * The actual user input(s) for the model. Can be a simple string, or an array of structured input items (messages, tool outputs) representing a conversation history or complex input.
   */
  input:
    | string
    | Array<CreateResponse2Proxy3 | CreateResponse2Proxy2 | CreateResponse21>;
  /**
   * Specifies which (potentially large) fields to include in the response. By default, the results of Code Interpreter and file searches are excluded. Available options:
   *
   * @remarks
   * - code_interpreter_call.outputs: Include the outputs of Code Interpreter tool calls
   * - computer_call_output.output.image_url: Include the image URLs from computer use tool calls
   * - file_search_call.results: Include the results of file search tool calls
   * - message.input_image.image_url: Include URLs of input images
   * - message.output_text.logprobs: Include log probabilities for output text (when logprobs is enabled)
   * - reasoning.encrypted_content: Include encrypted reasoning content for reasoning models
   */
  include?: Array<Include> | null | undefined;
  /**
   * Whether to enable parallel function calling during tool use.
   */
  parallelToolCalls?: boolean | null | undefined;
  /**
   * Whether to store this response for use in distillations or evals.
   */
  store?: boolean | null | undefined;
  /**
   * A list of tools the model may call. Use this to provide a list of functions the model may generate JSON inputs for.
   */
  tools?: Array<Tools1 | Tools2 | Tools3> | undefined;
  /**
   * How the model should select which tool (or tools) to use when generating a response. Can be a string (`none`, `auto`, `required`) or an object to force a specific tool.
   */
  toolChoice?:
    | ToolChoice3
    | ToolChoice4
    | CreateResponseToolChoice2
    | CreateResponseToolChoice1
    | undefined;
  stream?: boolean | undefined;
};

/**
 * One server-sent event emitted while the response streams
 */
export type CreateResponseData = {
  /**
   * The type of streaming event
   */
  type: string;
};

/**
 * One server-sent event emitted while the response streams
 */
export type CreateResponseProxyResponseBody = {
  /**
   * One server-sent event emitted while the response streams
   */
  data?: CreateResponseData | undefined;
};

/**
 * The object type, which is always "response"
 */
export const CreateResponseObject = {
  Response: "response",
} as const;
/**
 * The object type, which is always "response"
 */
export type CreateResponseObject = ClosedEnum<typeof CreateResponseObject>;

/**
 * The status of the response
 */
export const CreateResponseStatus = {
  Completed: "completed",
  Failed: "failed",
  InProgress: "in_progress",
  Incomplete: "incomplete",
} as const;
/**
 * The status of the response
 */
export type CreateResponseStatus = ClosedEnum<typeof CreateResponseStatus>;

/**
 * The error that occurred, if any
 */
export type ErrorT = {
  /**
   * The error code
   */
  code: string;
  /**
   * The error message
   */
  message: string;
};

/**
 * The reason the response is incomplete
 */
export const Reason = {
  MaxOutputTokens: "max_output_tokens",
  ContentFilter: "content_filter",
} as const;
/**
 * The reason the response is incomplete
 */
export type Reason = ClosedEnum<typeof Reason>;

/**
 * Details about why the response is incomplete
 */
export type IncompleteDetails = {
  /**
   * The reason the response is incomplete
   */
  reason: Reason;
};

/**
 * The type of output item
 */
export const CreateResponseOutputProxyResponseType = {
  FunctionCall: "function_call",
} as const;
/**
 * The type of output item
 */
export type CreateResponseOutputProxyResponseType = ClosedEnum<
  typeof CreateResponseOutputProxyResponseType
>;

/**
 * The status of the function call
 */
export const CreateResponseOutputProxyResponseStatus = {
  InProgress: "in_progress",
  Completed: "completed",
  Incomplete: "incomplete",
  Failed: "failed",
} as const;
/**
 * The status of the function call
 */
export type CreateResponseOutputProxyResponseStatus = ClosedEnum<
  typeof CreateResponseOutputProxyResponseStatus
>;

/**
 * A function tool call output
 */
export type Output4 = {
  /**
   * The unique identifier for this output item
   */
  id: string;
  /**
   * The type of output item
   */
  type: CreateResponseOutputProxyResponseType;
  /**
   * The ID of the function call
   */
  callId: string;
  /**
   * The name of the function being called
   */
  name: string;
  /**
   * The arguments to the function as a JSON string
   */
  arguments: string;
  /**
   * The status of the function call
   */
  status: CreateResponseOutputProxyResponseStatus;
};

/**
 * The type of output item
 */
export const CreateResponseOutputProxyType = {
  FileSearchCall: "file_search_call",
} as const;
/**
 * The type of output item
 */
export type CreateResponseOutputProxyType = ClosedEnum<
  typeof CreateResponseOutputProxyType
>;

/**
 * The status of the file search
 */
export const CreateResponseOutputProxyStatus = {
  InProgress: "in_progress",
  Completed: "completed",
  Incomplete: "incomplete",
  Failed: "failed",
} as const;
/**
 * The status of the file search
 */
export type CreateResponseOutputProxyStatus = ClosedEnum<
  typeof CreateResponseOutputProxyStatus
>;

/**
 * A file search tool call output
 */
export type Output3 = {
  /**
   * The unique identifier for this output item
   */
  id: string;
  /**
   * The type of output item
   */
  type: CreateResponseOutputProxyType;
  /**
   * The status of the file search
   */
  status: CreateResponseOutputProxyStatus;
  /**
   * The search queries used
   */
  queries?: Array<string> | undefined;
  /**
   * The file search results
   */
  results?: any | undefined;
};

/**
 * The type of output item
 */
export const CreateResponseOutputType = {
  WebSearchCall: "web_search_call",
} as const;
/**
 * The type of output item
 */
export type CreateResponseOutputType = ClosedEnum<
  typeof CreateResponseOutputType
>;

/**
 * The status of the web search
 */
export const CreateResponseOutputStatus = {
  InProgress: "in_progress",
  Completed: "completed",
  Incomplete: "incomplete",
  Failed: "failed",
} as const;
/**
 * The status of the web search
 */
export type CreateResponseOutputStatus = ClosedEnum<
  typeof CreateResponseOutputStatus
>;

/**
 * A web search tool call output
 */
export type Output2 = {
  /**
   * The unique identifier for this output item
   */
  id: string;
  /**
   * The type of output item
   */
  type: CreateResponseOutputType;
  /**
   * The status of the web search
   */
  status: CreateResponseOutputStatus;
};

/**
 * The type of output item
 */
export const OutputType = {
  Message: "message",
} as const;
/**
 * The type of output item
 */
export type OutputType = ClosedEnum<typeof OutputType>;

/**
 * The role of the message author
 */
export const OutputRole = {
  Assistant: "assistant",
} as const;
/**
 * The role of the message author
 */
export type OutputRole = ClosedEnum<typeof OutputRole>;

/**
 * The status of the message
 */
export const OutputStatus = {
  InProgress: "in_progress",
  Completed: "completed",
  Incomplete: "incomplete",
  Failed: "failed",
} as const;
/**
 * The status of the message
 */
export type OutputStatus = ClosedEnum<typeof OutputStatus>;

/**
 * The type of content part
 */
export const ContentType = {
  OutputText: "output_text",
} as const;
/**
 * The type of content part
 */
export type ContentType = ClosedEnum<typeof ContentType>;

export const CreateResponseAnnotationsProxyType = {
  FileCitation: "file_citation",
} as const;
export type CreateResponseAnnotationsProxyType = ClosedEnum<
  typeof CreateResponseAnnotationsProxyType
>;

/**
 * A citation to a file
 */
export type CreateResponseAnnotations2 = {
  type: CreateResponseAnnotationsProxyType;
  /**
   * The index in the text where the citation appears
   */
  index: number;
  /**
   * The ID of the file being cited
   */
  fileId: string;
  /**
   * The name of the file being cited
   */
  filename: string;
};

export const CreateResponseAnnotationsType = {
  UrlCitation: "url_citation",
} as const;
export type CreateResponseAnnotationsType = ClosedEnum<
  typeof CreateResponseAnnotationsType
>;

/**
 * A citation to a URL
 */
export type CreateResponseAnnotations1 = {
  type: CreateResponseAnnotationsType;
  /**
   * The start index of the citation in the text
   */
  startIndex: number;
  /**
   * The end index of the citation in the text
   */
  endIndex: number;
  /**
   * The URL being cited
   */
  url: string;
  /**
   * The title of the cited resource
   */
  title: string;
};

/**
 * An annotation in the output text
 */
export type ContentAnnotations =
  | CreateResponseAnnotations1
  | CreateResponseAnnotations2;

/**
 * Text output from the model
 */
export type Content1 = {
  /**
   * The type of content part
   */
  type: ContentType;
  /**
   * The text content
   */
  text: string;
  /**
   * Annotations in the text such as citations
   */
  annotations?:
    | Array<CreateResponseAnnotations1 | CreateResponseAnnotations2>
    | undefined;
  /**
   * Log probabilities of the output tokens if requested
   */
  logprobs?: Array<any> | undefined;
};

export type OutputContent = Content1;

/**
 * An assistant message output
 */
export type Output1 = {
  /**
   * The unique identifier for this message
   */
  id: string;
  /**
   * The type of output item
   */
  type: OutputType;
  /**
   * The role of the message author
   */
  role: OutputRole;
  /**
   * The status of the message
   */
  status: OutputStatus;
  /**
   * The content parts of the message
   */
  content?: Array<Content1> | undefined;
};

export type Output = Output4 | Output1 | Output2 | Output3;

/**
 * Breakdown of input token usage
 */
export type CreateResponseInputTokensDetails = {
  /**
   * Number of tokens from cache
   */
  cachedTokens?: number | undefined;
};

/**
 * Breakdown of output token usage
 */
export type OutputTokensDetails = {
  /**
   * Number of tokens used for reasoning (o3 models)
   */
  reasoningTokens?: number | undefined;
  /**
   * Number of tokens generated by automatic prediction that were accepted
   */
  acceptedPredictionTokens?: number | undefined;
  /**
   * Number of tokens generated by automatic prediction that were rejected
   */
  rejectedPredictionTokens?: number | undefined;
};

/**
 * Usage statistics for the response
 */
export type CreateResponseUsage = {
  /**
   * Number of tokens in the input
   */
  inputTokens?: number | undefined;
  /**
   * Number of tokens in the generated output
   */
  outputTokens?: number | undefined;
  /**
   * Total number of tokens used in the request (input + output)
   */
  totalTokens?: number | undefined;
  /**
   * Breakdown of input token usage
   */
  inputTokensDetails?: CreateResponseInputTokensDetails | undefined;
  /**
   * Breakdown of output token usage
   */
  outputTokensDetails?: OutputTokensDetails | undefined;
};

export const CreateResponseToolChoiceProxyResponseType = {
  Function: "function",
} as const;
export type CreateResponseToolChoiceProxyResponseType = ClosedEnum<
  typeof CreateResponseToolChoiceProxyResponseType
>;

export type CreateResponseToolChoiceFunction = {
  name: string;
};

export type CreateResponseToolChoiceProxy2 = {
  type: CreateResponseToolChoiceProxyResponseType;
  function: CreateResponseToolChoiceFunction;
};

export const CreateResponseToolChoiceProxy1 = {
  None: "none",
  Auto: "auto",
  Required: "required",
} as const;
export type CreateResponseToolChoiceProxy1 = ClosedEnum<
  typeof CreateResponseToolChoiceProxy1
>;

/**
 * Controls which (if any) tool is called by the model
 */
export type CreateResponseProxyToolChoice =
  | CreateResponseToolChoiceProxy2
  | CreateResponseToolChoiceProxy1;

/**
 * The type of tool
 */
export const CreateResponseToolsProxyResponse200ApplicationJSONType = {
  FileSearch: "file_search",
} as const;
/**
 * The type of tool
 */
export type CreateResponseToolsProxyResponse200ApplicationJSONType = ClosedEnum<
  typeof CreateResponseToolsProxyResponse200ApplicationJSONType
>;

/**
 * The ranking algorithm
 */
export const ToolsRanker = {
  Auto: "auto",
  Default20240821: "default_2024_08_21",
} as const;
/**
 * The ranking algorithm
 */
export type ToolsRanker = ClosedEnum<typeof ToolsRanker>;

/**
 * Options for ranking search results
 */
export type ToolsRankingOptions = {
  /**
   * The ranking algorithm
   */
  ranker?: ToolsRanker | undefined;
  /**
   * Minimum relevance score
   */
  scoreThreshold?: number | undefined;
};

/**
 * Configuration for file search tool
 */
export type CreateResponseTools3 = {
  /**
   * The type of tool
   */
  type: CreateResponseToolsProxyResponse200ApplicationJSONType;
  /**
   * The vector stores to search
   */
  vectorStoreIds?: Array<string> | undefined;
  /**
   * Maximum number of results to return
   */
  maxNumResults?: number | undefined;
  /**
   * Filters to apply to the search
   */
  filters?: any | undefined;
  /**
   * Options for ranking search results
   */
  rankingOptions?: ToolsRankingOptions | undefined;
};

/**
 * The type of tool
 */
export const CreateResponseToolsProxyResponse200Type = {
  WebSearchPreview: "web_search_preview",
} as const;
/**
 * The type of tool
 */
export type CreateResponseToolsProxyResponse200Type = ClosedEnum<
  typeof CreateResponseToolsProxyResponse200Type
>;

/**
 * Amount of context to retrieve for each search result
 */
export const ToolsSearchContextSize = {
  Small: "small",
  Medium: "medium",
  Large: "large",
} as const;
/**
 * Amount of context to retrieve for each search result
 */
export type ToolsSearchContextSize = ClosedEnum<typeof ToolsSearchContextSize>;

/**
 * The type of location
 */
export const CreateResponseToolsProxyResponse200ApplicationJSONResponseBodyType =
  {
    Approximate: "approximate",
    Exact: "exact",
  } as const;
/**
 * The type of location
 */
export type CreateResponseToolsProxyResponse200ApplicationJSONResponseBodyType =
  ClosedEnum<
    typeof CreateResponseToolsProxyResponse200ApplicationJSONResponseBodyType
  >;

/**
 * User location for search localization
 */
export type ToolsUserLocation = {
  /**
   * The type of location
   */
  type?:
    | CreateResponseToolsProxyResponse200ApplicationJSONResponseBodyType
    | undefined;
  /**
   * The city name
   */
  city?: string | null | undefined;
  /**
   * The country code
   */
  country?: string | undefined;
  /**
   * The region/state
   */
  region?: string | null | undefined;
  /**
   * The timezone
   */
  timezone?: string | null | undefined;
};

/**
 * Configuration for web search tool
 */
export type CreateResponseTools2 = {
  /**
   * The type of tool
   */
  type: CreateResponseToolsProxyResponse200Type;
  /**
   * List of domains to restrict search to
   */
  domains?: Array<string> | undefined;
  /**
   * Amount of context to retrieve for each search result
   */
  searchContextSize?: ToolsSearchContextSize | undefined;
  /**
   * User location for search localization
   */
  userLocation?: ToolsUserLocation | undefined;
};

/**
 * The type of tool
 */
export const CreateResponseToolsProxyResponseType = {
  Function: "function",
} as const;
/**
 * The type of tool
 */
export type CreateResponseToolsProxyResponseType = ClosedEnum<
  typeof CreateResponseToolsProxyResponseType
>;

/**
 * The type of the parameters object
 */
export const CreateResponseToolsProxyResponse200ApplicationJSONResponseBody1Type =
  {
    Object: "object",
  } as const;
/**
 * The type of the parameters object
 */
export type CreateResponseToolsProxyResponse200ApplicationJSONResponseBody1Type =
  ClosedEnum<
    typeof CreateResponseToolsProxyResponse200ApplicationJSONResponseBody1Type
  >;

export type ToolsProperties = {
  type: string;
  description?: string | undefined;
  enum?: Array<string> | undefined;
};

/**
 * The parameters the function accepts
 */
export type CreateResponseToolsParameters = {
  /**
   * The type of the parameters object
   */
  type: CreateResponseToolsProxyResponse200ApplicationJSONResponseBody1Type;
  /**
   * The parameters the function accepts, described as a JSON Schema object
   */
  properties: { [k: string]: ToolsProperties };
  /**
   * List of required parameter names
   */
  required?: Array<string> | undefined;
  /**
   * Whether to allow properties not defined in the schema
   */
  additionalProperties?: boolean | undefined;
};

/**
 * A function tool definition
 */
export type CreateResponseTools1 = {
  /**
   * The type of tool
   */
  type: CreateResponseToolsProxyResponseType;
  /**
   * The name of the function to be called
   */
  name: string;
  /**
   * A description of what the function does
   */
  description?: string | null | undefined;
  /**
   * The parameters the function accepts
   */
  parameters: CreateResponseToolsParameters;
  /**
   * Whether to enable strict schema adherence when generating function calls
   */
  strict?: boolean | undefined;
};

export type CreateResponseProxyTools =
  | CreateResponseTools1
  | CreateResponseTools2
  | CreateResponseTools3;

export type CreateResponseReasoning = {
  effort?: string | null | undefined;
  summary?: string | null | undefined;
};

/**
 * Ensures the response matches a supplied JSON schema
 */
export const CreateResponseFormatProxyResponse200ApplicationJSONType = {
  JsonSchema: "json_schema",
} as const;
/**
 * Ensures the response matches a supplied JSON schema
 */
export type CreateResponseFormatProxyResponse200ApplicationJSONType =
  ClosedEnum<typeof CreateResponseFormatProxyResponse200ApplicationJSONType>;

export type CreateResponseFormat3 = {
  /**
   * Ensures the response matches a supplied JSON schema
   */
  type: CreateResponseFormatProxyResponse200ApplicationJSONType;
  /**
   * The name of the response format. Must be a-z, A-Z, 0-9, or contain underscores and dashes, with a maximum length of 64.
   */
  name: string;
  /**
   * A description of what the response format is for, used by the model to determine how to respond in the format.
   */
  description?: string | undefined;
  /**
   * The JSON schema to validate the response against
   */
  schema: { [k: string]: any };
  /**
   * Whether to enable strict `schema` adherence when generating the output. If set to true, the model will always follow the exact schema defined in the schema field. Only a subset of JSON Schema is supported when `strict` is `true`
   */
  strict?: boolean | null | undefined;
};

/**
 * Ensures the response is a valid JSON object
 */
export const CreateResponseFormatProxyResponse200Type = {
  JsonObject: "json_object",
} as const;
/**
 * Ensures the response is a valid JSON object
 */
export type CreateResponseFormatProxyResponse200Type = ClosedEnum<
  typeof CreateResponseFormatProxyResponse200Type
>;

export type CreateResponseFormat2 = {
  /**
   * Ensures the response is a valid JSON object
   */
  type: CreateResponseFormatProxyResponse200Type;
};

/**
 * Plain text response format
 */
export const CreateResponseFormatProxyResponseType = {
  Text: "text",
} as const;
/**
 * Plain text response format
 */
export type CreateResponseFormatProxyResponseType = ClosedEnum<
  typeof CreateResponseFormatProxyResponseType
>;

export type CreateResponseFormat1 = {
  /**
   * Plain text response format
   */
  type: CreateResponseFormatProxyResponseType;
};

export type CreateResponseProxyFormat =
  | CreateResponseFormat3
  | CreateResponseFormat1
  | CreateResponseFormat2;

export type CreateResponseText = {
  format: CreateResponseFormat3 | CreateResponseFormat1 | CreateResponseFormat2;
};

/**
 * Controls how the model handles inputs longer than the maximum token length
 */
export const Truncation = {
  Auto: "auto",
  Disabled: "disabled",
} as const;
/**
 * Controls how the model handles inputs longer than the maximum token length
 */
export type Truncation = ClosedEnum<typeof Truncation>;

/**
 * The service tier used for processing the request
 */
export const ServiceTier = {
  Auto: "auto",
  Default: "default",
} as const;
/**
 * The service tier used for processing the request
 */
export type ServiceTier = ClosedEnum<typeof ServiceTier>;

/**
 * Represents the completed model response returned when `stream` is false
 */
export type CreateResponseResponseBody = {
  /**
   * The unique identifier for the response
   */
  id: string;
  /**
   * The object type, which is always "response"
   */
  object: CreateResponseObject;
  /**
   * The Unix timestamp (in seconds) of when the response was created
   */
  createdAt: number;
  /**
   * The status of the response
   */
  status: CreateResponseStatus;
  /**
   * The error that occurred, if any
   */
  error: ErrorT | null;
  /**
   * Details about why the response is incomplete
   */
  incompleteDetails: IncompleteDetails | null;
  /**
   * The model used to generate the response
   */
  model: string;
  /**
   * The instructions provided for the response
   */
  instructions?: string | null | undefined;
  /**
   * The list of output items generated by the model
   */
  output: Array<Output4 | Output1 | Output2 | Output3>;
  /**
   * A convenience field with the concatenated text from all text content parts
   */
  outputText?: string | null | undefined;
  /**
   * Usage statistics for the response
   */
  usage?: CreateResponseUsage | undefined;
  temperature?: number | null | undefined;
  topP?: number | null | undefined;
  maxOutputTokens?: number | null | undefined;
  parallelToolCalls: boolean;
  previousResponseId?: string | null | undefined;
  metadata?: { [k: string]: string } | undefined;
  /**
   * Controls which (if any) tool is called by the model
   */
  toolChoice?:
    | CreateResponseToolChoiceProxy2
    | CreateResponseToolChoiceProxy1
    | undefined;
  tools?:
    | Array<CreateResponseTools1 | CreateResponseTools2 | CreateResponseTools3>
    | undefined;
  reasoning?: CreateResponseReasoning | null | undefined;
  store?: boolean | undefined;
  text?: CreateResponseText | undefined;
  /**
   * Controls how the model handles inputs longer than the maximum token length
   */
  truncation?: Truncation | null | undefined;
  /**
   * A unique identifier representing your end-user
   */
  user?: string | null | undefined;
  /**
   * The service tier used for processing the request
   */
  serviceTier?: ServiceTier | null | undefined;
  /**
   * Whether the response was processed in the background
   */
  background?: boolean | null | undefined;
  /**
   * The number of top log probabilities to return for each output token
   */
  topLogprobs?: number | null | undefined;
  /**
   * Whether to return log probabilities of the output tokens
   */
  logprobs?: boolean | null | undefined;
};

export type CreateResponseResponse =
  | CreateResponseResponseBody
  | EventStream<CreateResponseProxyResponseBody>;

/** @internal */
export const Effort$inboundSchema: z.ZodNativeEnum<typeof Effort> = z
  .nativeEnum(Effort);

/** @internal */
export const Effort$outboundSchema: z.ZodNativeEnum<typeof Effort> =
  Effort$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Effort$ {
  /** @deprecated use `Effort$inboundSchema` instead. */
  export const inboundSchema = Effort$inboundSchema;
  /** @deprecated use `Effort$outboundSchema` instead. */
  export const outboundSchema = Effort$outboundSchema;
}

/** @internal */
export const Reasoning$inboundSchema: z.ZodType<
  Reasoning,
  z.ZodTypeDef,
  unknown
> = z.object({
  effort: Effort$inboundSchema.optional(),
});

/** @internal */
export type Reasoning$Outbound = {
  effort?: string | undefined;
};

/** @internal */
export const Reasoning$outboundSchema: z.ZodType<
  Reasoning$Outbound,
  z.ZodTypeDef,
  Reasoning
> = z.object({
  effort: Effort$outboundSchema.optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Reasoning$ {
  /** @deprecated use `Reasoning$inboundSchema` instead. */
  export const inboundSchema = Reasoning$inboundSchema;
  /** @deprecated use `Reasoning$outboundSchema` instead. */
  export const outboundSchema = Reasoning$outboundSchema;
  /** @deprecated use `Reasoning$Outbound` instead. */
  export type Outbound = Reasoning$Outbound;
}

export function reasoningToJSON(reasoning: Reasoning): string {
  return JSON.stringify(Reasoning$outboundSchema.parse(reasoning));
}

export function reasoningFromJSON(
  jsonString: string,
): SafeParseResult<Reasoning, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Reasoning$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Reasoning' from JSON`,
  );
}

/** @internal */
export const CreateResponseFormatProxyType$inboundSchema: z.ZodNativeEnum<
  typeof CreateResponseFormatProxyType
> = z.nativeEnum(CreateResponseFormatProxyType);

/** @internal */
export const CreateResponseFormatProxyType$outboundSchema: z.ZodNativeEnum<
  typeof CreateResponseFormatProxyType
> = CreateResponseFormatProxyType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateResponseFormatProxyType$ {
  /** @deprecated use `CreateResponseFormatProxyType$inboundSchema` instead. */
  export const inboundSchema = CreateResponseFormatProxyType$inboundSchema;
  /** @deprecated use `CreateResponseFormatProxyType$outboundSchema` instead. */
  export const outboundSchema = CreateResponseFormatProxyType$outboundSchema;
}

/** @internal */
export const Format3$inboundSchema: z.ZodType<Format3, z.ZodTypeDef, unknown> =
  z.object({
    type: CreateResponseFormatProxyType$inboundSchema,
    name: z.string(),
    description: z.string().optional(),
    schema: z.record(z.any()),
    strict: z.nullable(z.boolean().default(true)),
  });

/** @internal */
export type Format3$Outbound = {
  type: string;
  name: string;
  description?: string | undefined;
  schema: { [k: string]: any };
  strict: boolean | null;
};

/** @internal */
export const Format3$outboundSchema: z.ZodType<
  Format3$Outbound,
  z.ZodTypeDef,
  Format3
> = z.object({
  type: CreateResponseFormatProxyType$outboundSchema,
  name: z.string(),
  description: z.string().optional(),
  schema: z.record(z.any()),
  strict: z.nullable(z.boolean().default(true)),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Format3$ {
  /** @deprecated use `Format3$inboundSchema` instead. */
  export const inboundSchema = Format3$inboundSchema;
  /** @deprecated use `Format3$outboundSchema` instead. */
  export const outboundSchema = Format3$outboundSchema;
  /** @deprecated use `Format3$Outbound` instead. */
  export type Outbound = Format3$Outbound;
}

export function format3ToJSON(format3: Format3): string {
  return JSON.stringify(Format3$outboundSchema.parse(format3));
}

export function format3FromJSON(
  jsonString: string,
): SafeParseResult<Format3, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Format3$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Format3' from JSON`,
  );
}

/** @internal */
export const CreateResponseFormatType$inboundSchema: z.ZodNativeEnum<
  typeof CreateResponseFormatType
> = z.nativeEnum(CreateResponseFormatType);

/** @internal */
export const CreateResponseFormatType$outboundSchema: z.ZodNativeEnum<
  typeof CreateResponseFormatType
> = CreateResponseFormatType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateResponseFormatType$ {
  /** @deprecated use `CreateResponseFormatType$inboundSchema` instead. */
  export const inboundSchema = CreateResponseFormatType$inboundSchema;
  /** @deprecated use `CreateResponseFormatType$outboundSchema` instead. */
  export const outboundSchema = CreateResponseFormatType$outboundSchema;
}

/** @internal */
export const Format2$inboundSchema: z.ZodType<Format2, z.ZodTypeDef, unknown> =
  z.object({
    type: CreateResponseFormatType$inboundSchema,
  });

/** @internal */
export type Format2$Outbound = {
  type: string;
};

/** @internal */
export const Format2$outboundSchema: z.ZodType<
  Format2$Outbound,
  z.ZodTypeDef,
  Format2
> = z.object({
  type: CreateResponseFormatType$outboundSchema,
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Format2$ {
  /** @deprecated use `Format2$inboundSchema` instead. */
  export const inboundSchema = Format2$inboundSchema;
  /** @deprecated use `Format2$outboundSchema` instead. */
  export const outboundSchema = Format2$outboundSchema;
  /** @deprecated use `Format2$Outbound` instead. */
  export type Outbound = Format2$Outbound;
}

export function format2ToJSON(format2: Format2): string {
  return JSON.stringify(Format2$outboundSchema.parse(format2));
}

export function format2FromJSON(
  jsonString: string,
): SafeParseResult<Format2, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Format2$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Format2' from JSON`,
  );
}

/** @internal */
export const FormatType$inboundSchema: z.ZodNativeEnum<typeof FormatType> = z
  .nativeEnum(FormatType);

/** @internal */
export const FormatType$outboundSchema: z.ZodNativeEnum<typeof FormatType> =
  FormatType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FormatType$ {
  /** @deprecated use `FormatType$inboundSchema` instead. */
  export const inboundSchema = FormatType$inboundSchema;
  /** @deprecated use `FormatType$outboundSchema` instead. */
  export const outboundSchema = FormatType$outboundSchema;
}

/** @internal */
export const Format1$inboundSchema: z.ZodType<Format1, z.ZodTypeDef, unknown> =
  z.object({
    type: FormatType$inboundSchema,
  });

/** @internal */
export type Format1$Outbound = {
  type: string;
};

/** @internal */
export const Format1$outboundSchema: z.ZodType<
  Format1$Outbound,
  z.ZodTypeDef,
  Format1
> = z.object({
  type: FormatType$outboundSchema,
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Format1$ {
  /** @deprecated use `Format1$inboundSchema` instead. */
  export const inboundSchema = Format1$inboundSchema;
  /** @deprecated use `Format1$outboundSchema` instead. */
  export const outboundSchema = Format1$outboundSchema;
  /** @deprecated use `Format1$Outbound` instead. */
  export type Outbound = Format1$Outbound;
}

export function format1ToJSON(format1: Format1): string {
  return JSON.stringify(Format1$outboundSchema.parse(format1));
}

export function format1FromJSON(
  jsonString: string,
): SafeParseResult<Format1, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Format1$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Format1' from JSON`,
  );
}

/** @internal */
export const CreateResponseFormat$inboundSchema: z.ZodType<
  CreateResponseFormat,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => Format3$inboundSchema),
  z.lazy(() => Format1$inboundSchema),
  z.lazy(() => Format2$inboundSchema),
]);

/** @internal */
export type CreateResponseFormat$Outbound =
  | Format3$Outbound
  | Format1$Outbound
  | Format2$Outbound;

/** @internal */
export const CreateResponseFormat$outboundSchema: z.ZodType<
  CreateResponseFormat$Outbound,
  z.ZodTypeDef,
  CreateResponseFormat
> = z.union([
  z.lazy(() => Format3$outboundSchema),
  z.lazy(() => Format1$outboundSchema),
  z.lazy(() => Format2$outboundSchema),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateResponseFormat$ {
  /** @deprecated use `CreateResponseFormat$inboundSchema` instead. */
  export const inboundSchema = CreateResponseFormat$inboundSchema;
  /** @deprecated use `CreateResponseFormat$outboundSchema` instead. */
  export const outboundSchema = CreateResponseFormat$outboundSchema;
  /** @deprecated use `CreateResponseFormat$Outbound` instead. */
  export type Outbound = CreateResponseFormat$Outbound;
}

export function createResponseFormatToJSON(
  createResponseFormat: CreateResponseFormat,
): string {
  return JSON.stringify(
    CreateResponseFormat$outboundSchema.parse(createResponseFormat),
  );
}

export function createResponseFormatFromJSON(
  jsonString: string,
): SafeParseResult<CreateResponseFormat, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateResponseFormat$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateResponseFormat' from JSON`,
  );
}

/** @internal */
export const Text$inboundSchema: z.ZodType<Text, z.ZodTypeDef, unknown> = z
  .object({
    format: z.union([
      z.lazy(() => Format3$inboundSchema),
      z.lazy(() => Format1$inboundSchema),
      z.lazy(() => Format2$inboundSchema),
    ]),
  });

/** @internal */
export type Text$Outbound = {
  format: Format3$Outbound | Format1$Outbound | Format2$Outbound;
};

/** @internal */
export const Text$outboundSchema: z.ZodType<Text$Outbound, z.ZodTypeDef, Text> =
  z.object({
    format: z.union([
      z.lazy(() => Format3$outboundSchema),
      z.lazy(() => Format1$outboundSchema),
      z.lazy(() => Format2$outboundSchema),
    ]),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Text$ {
  /** @deprecated use `Text$inboundSchema` instead. */
  export const inboundSchema = Text$inboundSchema;
  /** @deprecated use `Text$outboundSchema` instead. */
  export const outboundSchema = Text$outboundSchema;
  /** @deprecated use `Text$Outbound` instead. */
  export type Outbound = Text$Outbound;
}

export function textToJSON(text: Text): string {
  return JSON.stringify(Text$outboundSchema.parse(text));
}

export function textFromJSON(
  jsonString: string,
): SafeParseResult<Text, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Text$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Text' from JSON`,
  );
}

/** @internal */
export const CreateResponse2ProxyRequestRequestBodyInputType$inboundSchema:
  z.ZodNativeEnum<typeof CreateResponse2ProxyRequestRequestBodyInputType> = z
    .nativeEnum(CreateResponse2ProxyRequestRequestBodyInputType);

/** @internal */
export const CreateResponse2ProxyRequestRequestBodyInputType$outboundSchema:
  z.ZodNativeEnum<typeof CreateResponse2ProxyRequestRequestBodyInputType> =
    CreateResponse2ProxyRequestRequestBodyInputType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateResponse2ProxyRequestRequestBodyInputType$ {
  /** @deprecated use `CreateResponse2ProxyRequestRequestBodyInputType$inboundSchema` instead. */
  export const inboundSchema =
    CreateResponse2ProxyRequestRequestBodyInputType$inboundSchema;
  /** @deprecated use `CreateResponse2ProxyRequestRequestBodyInputType$outboundSchema` instead. */
  export const outboundSchema =
    CreateResponse2ProxyRequestRequestBodyInputType$outboundSchema;
}

/** @internal */
export const CreateResponse2Proxy3$inboundSchema: z.ZodType<
  CreateResponse2Proxy3,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: CreateResponse2ProxyRequestRequestBodyInputType$inboundSchema,
  call_id: z.string(),
  id: z.string(),
  name: z.string(),
  arguments: z.string(),
  status: z.string(),
}).transform((v) => {
  return remap$(v, {
    "call_id": "callId",
  });
});

/** @internal */
export type CreateResponse2Proxy3$Outbound = {
  type: string;
  call_id: string;
  id: string;
  name: string;
  arguments: string;
  status: string;
};

/** @internal */
export const CreateResponse2Proxy3$outboundSchema: z.ZodType<
  CreateResponse2Proxy3$Outbound,
  z.ZodTypeDef,
  CreateResponse2Proxy3
> = z.object({
  type: CreateResponse2ProxyRequestRequestBodyInputType$outboundSchema,
  callId: z.string(),
  id: z.string(),
  name: z.string(),
  arguments: z.string(),
  status: z.string(),
}).transform((v) => {
  return remap$(v, {
    callId: "call_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateResponse2Proxy3$ {
  /** @deprecated use `CreateResponse2Proxy3$inboundSchema` instead. */
  export const inboundSchema = CreateResponse2Proxy3$inboundSchema;
  /** @deprecated use `CreateResponse2Proxy3$outboundSchema` instead. */
  export const outboundSchema = CreateResponse2Proxy3$outboundSchema;
  /** @deprecated use `CreateResponse2Proxy3$Outbound` instead. */
  export type Outbound = CreateResponse2Proxy3$Outbound;
}

export function createResponse2Proxy3ToJSON(
  createResponse2Proxy3: CreateResponse2Proxy3,
): string {
  return JSON.stringify(
    CreateResponse2Proxy3$outboundSchema.parse(createResponse2Proxy3),
  );
}

export function createResponse2Proxy3FromJSON(
  jsonString: string,
): SafeParseResult<CreateResponse2Proxy3, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateResponse2Proxy3$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateResponse2Proxy3' from JSON`,
  );
}

/** @internal */
export const CreateResponse2ProxyRequestRequestBodyType$inboundSchema:
  z.ZodNativeEnum<typeof CreateResponse2ProxyRequestRequestBodyType> = z
    .nativeEnum(CreateResponse2ProxyRequestRequestBodyType);

/** @internal */
export const CreateResponse2ProxyRequestRequestBodyType$outboundSchema:
  z.ZodNativeEnum<typeof CreateResponse2ProxyRequestRequestBodyType> =
    CreateResponse2ProxyRequestRequestBodyType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateResponse2ProxyRequestRequestBodyType$ {
  /** @deprecated use `CreateResponse2ProxyRequestRequestBodyType$inboundSchema` instead. */
  export const inboundSchema =
    CreateResponse2ProxyRequestRequestBodyType$inboundSchema;
  /** @deprecated use `CreateResponse2ProxyRequestRequestBodyType$outboundSchema` instead. */
  export const outboundSchema =
    CreateResponse2ProxyRequestRequestBodyType$outboundSchema;
}

/** @internal */
export const CreateResponse2Proxy2$inboundSchema: z.ZodType<
  CreateResponse2Proxy2,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: CreateResponse2ProxyRequestRequestBodyType$inboundSchema,
  call_id: z.string(),
  output: z.string(),
}).transform((v) => {
  return remap$(v, {
    "call_id": "callId",
  });
});

/** @internal */
export type CreateResponse2Proxy2$Outbound = {
  type: string;
  call_id: string;
  output: string;
};

/** @internal */
export const CreateResponse2Proxy2$outboundSchema: z.ZodType<
  CreateResponse2Proxy2$Outbound,
  z.ZodTypeDef,
  CreateResponse2Proxy2
> = z.object({
  type: CreateResponse2ProxyRequestRequestBodyType$outboundSchema,
  callId: z.string(),
  output: z.string(),
}).transform((v) => {
  return remap$(v, {
    callId: "call_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateResponse2Proxy2$ {
  /** @deprecated use `CreateResponse2Proxy2$inboundSchema` instead. */
  export const inboundSchema = CreateResponse2Proxy2$inboundSchema;
  /** @deprecated use `CreateResponse2Proxy2$outboundSchema` instead. */
  export const outboundSchema = CreateResponse2Proxy2$outboundSchema;
  /** @deprecated use `CreateResponse2Proxy2$Outbound` instead. */
  export type Outbound = CreateResponse2Proxy2$Outbound;
}

export function createResponse2Proxy2ToJSON(
  createResponse2Proxy2: CreateResponse2Proxy2,
): string {
  return JSON.stringify(
    CreateResponse2Proxy2$outboundSchema.parse(createResponse2Proxy2),
  );
}

export function createResponse2Proxy2FromJSON(
  jsonString: string,
): SafeParseResult<CreateResponse2Proxy2, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateResponse2Proxy2$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateResponse2Proxy2' from JSON`,
  );
}

/** @internal */
export const TwoRole$inboundSchema: z.ZodNativeEnum<typeof TwoRole> = z
  .nativeEnum(TwoRole);

/** @internal */
export const TwoRole$outboundSchema: z.ZodNativeEnum<typeof TwoRole> =
  TwoRole$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TwoRole$ {
  /** @deprecated use `TwoRole$inboundSchema` instead. */
  export const inboundSchema = TwoRole$inboundSchema;
  /** @deprecated use `TwoRole$outboundSchema` instead. */
  export const outboundSchema = TwoRole$outboundSchema;
}

/** @internal */
export const CreateResponse2ProxyRequestType$inboundSchema: z.ZodNativeEnum<
  typeof CreateResponse2ProxyRequestType
> = z.nativeEnum(CreateResponse2ProxyRequestType);

/** @internal */
export const CreateResponse2ProxyRequestType$outboundSchema: z.ZodNativeEnum<
  typeof CreateResponse2ProxyRequestType
> = CreateResponse2ProxyRequestType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateResponse2ProxyRequestType$ {
  /** @deprecated use `CreateResponse2ProxyRequestType$inboundSchema` instead. */
  export const inboundSchema = CreateResponse2ProxyRequestType$inboundSchema;
  /** @deprecated use `CreateResponse2ProxyRequestType$outboundSchema` instead. */
  export const outboundSchema = CreateResponse2ProxyRequestType$outboundSchema;
}

/** @internal */
export const CreateResponse23$inboundSchema: z.ZodType<
  CreateResponse23,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: CreateResponse2ProxyRequestType$inboundSchema,
  file_data: z.string().optional(),
  file_id: z.string().optional(),
  filename: z.string().optional(),
  file_url: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "file_data": "fileData",
    "file_id": "fileId",
    "file_url": "fileUrl",
  });
});

/** @internal */
export type CreateResponse23$Outbound = {
  type: string;
  file_data?: string | undefined;
  file_id?: string | undefined;
  filename?: string | undefined;
  file_url?: string | undefined;
};

/** @internal */
export const CreateResponse23$outboundSchema: z.ZodType<
  CreateResponse23$Outbound,
  z.ZodTypeDef,
  CreateResponse23
> = z.object({
  type: CreateResponse2ProxyRequestType$outboundSchema,
  fileData: z.string().optional(),
  fileId: z.string().optional(),
  filename: z.string().optional(),
  fileUrl: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    fileData: "file_data",
    fileId: "file_id",
    fileUrl: "file_url",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateResponse23$ {
  /** @deprecated use `CreateResponse23$inboundSchema` instead. */
  export const inboundSchema = CreateResponse23$inboundSchema;
  /** @deprecated use `CreateResponse23$outboundSchema` instead. */
  export const outboundSchema = CreateResponse23$outboundSchema;
  /** @deprecated use `CreateResponse23$Outbound` instead. */
  export type Outbound = CreateResponse23$Outbound;
}

export function createResponse23ToJSON(
  createResponse23: CreateResponse23,
): string {
  return JSON.stringify(
    CreateResponse23$outboundSchema.parse(createResponse23),
  );
}

export function createResponse23FromJSON(
  jsonString: string,
): SafeParseResult<CreateResponse23, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateResponse23$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateResponse23' from JSON`,
  );
}

/** @internal */
export const CreateResponse2ProxyType$inboundSchema: z.ZodNativeEnum<
  typeof CreateResponse2ProxyType
> = z.nativeEnum(CreateResponse2ProxyType);

/** @internal */
export const CreateResponse2ProxyType$outboundSchema: z.ZodNativeEnum<
  typeof CreateResponse2ProxyType
> = CreateResponse2ProxyType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateResponse2ProxyType$ {
  /** @deprecated use `CreateResponse2ProxyType$inboundSchema` instead. */
  export const inboundSchema = CreateResponse2ProxyType$inboundSchema;
  /** @deprecated use `CreateResponse2ProxyType$outboundSchema` instead. */
  export const outboundSchema = CreateResponse2ProxyType$outboundSchema;
}

/** @internal */
export const CreateResponse2Detail$inboundSchema: z.ZodNativeEnum<
  typeof CreateResponse2Detail
> = z.nativeEnum(CreateResponse2Detail);

/** @internal */
export const CreateResponse2Detail$outboundSchema: z.ZodNativeEnum<
  typeof CreateResponse2Detail
> = CreateResponse2Detail$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateResponse2Detail$ {
  /** @deprecated use `CreateResponse2Detail$inboundSchema` instead. */
  export const inboundSchema = CreateResponse2Detail$inboundSchema;
  /** @deprecated use `CreateResponse2Detail$outboundSchema` instead. */
  export const outboundSchema = CreateResponse2Detail$outboundSchema;
}

/** @internal */
export const CreateResponse22$inboundSchema: z.ZodType<
  CreateResponse22,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: CreateResponse2ProxyType$inboundSchema,
  detail: CreateResponse2Detail$inboundSchema.default("auto"),
  file_id: z.nullable(z.string()).optional(),
  image_url: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    "file_id": "fileId",
    "image_url": "imageUrl",
  });
});

/** @internal */
export type CreateResponse22$Outbound = {
  type: string;
  detail: string;
  file_id?: string | null | undefined;
  image_url?: string | null | undefined;
};

/** @internal */
export const CreateResponse22$outboundSchema: z.ZodType<
  CreateResponse22$Outbound,
  z.ZodTypeDef,
  CreateResponse22
> = z.object({
  type: CreateResponse2ProxyType$outboundSchema,
  detail: CreateResponse2Detail$outboundSchema.default("auto"),
  fileId: z.nullable(z.string()).optional(),
  imageUrl: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    fileId: "file_id",
    imageUrl: "image_url",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateResponse22$ {
  /** @deprecated use `CreateResponse22$inboundSchema` instead. */
  export const inboundSchema = CreateResponse22$inboundSchema;
  /** @deprecated use `CreateResponse22$outboundSchema` instead. */
  export const outboundSchema = CreateResponse22$outboundSchema;
  /** @deprecated use `CreateResponse22$Outbound` instead. */
  export type Outbound = CreateResponse22$Outbound;
}

export function createResponse22ToJSON(
  createResponse22: CreateResponse22,
): string {
  return JSON.stringify(
    CreateResponse22$outboundSchema.parse(createResponse22),
  );
}

export function createResponse22FromJSON(
  jsonString: string,
): SafeParseResult<CreateResponse22, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateResponse22$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateResponse22' from JSON`,
  );
}

/** @internal */
export const CreateResponse2Type$inboundSchema: z.ZodNativeEnum<
  typeof CreateResponse2Type
> = z.nativeEnum(CreateResponse2Type);

/** @internal */
export const CreateResponse2Type$outboundSchema: z.ZodNativeEnum<
  typeof CreateResponse2Type
> = CreateResponse2Type$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateResponse2Type$ {
  /** @deprecated use `CreateResponse2Type$inboundSchema` instead. */
  export const inboundSchema = CreateResponse2Type$inboundSchema;
  /** @deprecated use `CreateResponse2Type$outboundSchema` instead. */
  export const outboundSchema = CreateResponse2Type$outboundSchema;
}

/** @internal */
export const CreateResponse2Proxy1$inboundSchema: z.ZodType<
  CreateResponse2Proxy1,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: CreateResponse2Type$inboundSchema,
  text: z.string(),
});

/** @internal */
export type CreateResponse2Proxy1$Outbound = {
  type: string;
  text: string;
};

/** @internal */
export const CreateResponse2Proxy1$outboundSchema: z.ZodType<
  CreateResponse2Proxy1$Outbound,
  z.ZodTypeDef,
  CreateResponse2Proxy1
> = z.object({
  type: CreateResponse2Type$outboundSchema,
  text: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateResponse2Proxy1$ {
  /** @deprecated use `CreateResponse2Proxy1$inboundSchema` instead. */
  export const inboundSchema = CreateResponse2Proxy1$inboundSchema;
  /** @deprecated use `CreateResponse2Proxy1$outboundSchema` instead. */
  export const outboundSchema = CreateResponse2Proxy1$outboundSchema;
  /** @deprecated use `CreateResponse2Proxy1$Outbound` instead. */
  export type Outbound = CreateResponse2Proxy1$Outbound;
}

export function createResponse2Proxy1ToJSON(
  createResponse2Proxy1: CreateResponse2Proxy1,
): string {
  return JSON.stringify(
    CreateResponse2Proxy1$outboundSchema.parse(createResponse2Proxy1),
  );
}

export function createResponse2Proxy1FromJSON(
  jsonString: string,
): SafeParseResult<CreateResponse2Proxy1, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateResponse2Proxy1$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateResponse2Proxy1' from JSON`,
  );
}

/** @internal */
export const CreateResponseContent2$inboundSchema: z.ZodType<
  CreateResponseContent2,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => CreateResponse2Proxy1$inboundSchema),
  z.lazy(() => CreateResponse22$inboundSchema),
  z.lazy(() => CreateResponse23$inboundSchema),
]);

/** @internal */
export type CreateResponseContent2$Outbound =
  | CreateResponse2Proxy1$Outbound
  | CreateResponse22$Outbound
  | CreateResponse23$Outbound;

/** @internal */
export const CreateResponseContent2$outboundSchema: z.ZodType<
  CreateResponseContent2$Outbound,
  z.ZodTypeDef,
  CreateResponseContent2
> = z.union([
  z.lazy(() => CreateResponse2Proxy1$outboundSchema),
  z.lazy(() => CreateResponse22$outboundSchema),
  z.lazy(() => CreateResponse23$outboundSchema),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateResponseContent2$ {
  /** @deprecated use `CreateResponseContent2$inboundSchema` instead. */
  export const inboundSchema = CreateResponseContent2$inboundSchema;
  /** @deprecated use `CreateResponseContent2$outboundSchema` instead. */
  export const outboundSchema = CreateResponseContent2$outboundSchema;
  /** @deprecated use `CreateResponseContent2$Outbound` instead. */
  export type Outbound = CreateResponseContent2$Outbound;
}

export function createResponseContent2ToJSON(
  createResponseContent2: CreateResponseContent2,
): string {
  return JSON.stringify(
    CreateResponseContent2$outboundSchema.parse(createResponseContent2),
  );
}

export function createResponseContent2FromJSON(
  jsonString: string,
): SafeParseResult<CreateResponseContent2, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateResponseContent2$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateResponseContent2' from JSON`,
  );
}

/** @internal */
export const TwoContent$inboundSchema: z.ZodType<
  TwoContent,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.string(),
  z.array(z.union([
    z.lazy(() => CreateResponse2Proxy1$inboundSchema),
    z.lazy(() => CreateResponse22$inboundSchema),
    z.lazy(() => CreateResponse23$inboundSchema),
  ])),
]);

/** @internal */
export type TwoContent$Outbound =
  | string
  | Array<
    | CreateResponse2Proxy1$Outbound
    | CreateResponse22$Outbound
    | CreateResponse23$Outbound
  >;

/** @internal */
export const TwoContent$outboundSchema: z.ZodType<
  TwoContent$Outbound,
  z.ZodTypeDef,
  TwoContent
> = z.union([
  z.string(),
  z.array(z.union([
    z.lazy(() => CreateResponse2Proxy1$outboundSchema),
    z.lazy(() => CreateResponse22$outboundSchema),
    z.lazy(() => CreateResponse23$outboundSchema),
  ])),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TwoContent$ {
  /** @deprecated use `TwoContent$inboundSchema` instead. */
  export const inboundSchema = TwoContent$inboundSchema;
  /** @deprecated use `TwoContent$outboundSchema` instead. */
  export const outboundSchema = TwoContent$outboundSchema;
  /** @deprecated use `TwoContent$Outbound` instead. */
  export type Outbound = TwoContent$Outbound;
}

export function twoContentToJSON(twoContent: TwoContent): string {
  return JSON.stringify(TwoContent$outboundSchema.parse(twoContent));
}

export function twoContentFromJSON(
  jsonString: string,
): SafeParseResult<TwoContent, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => TwoContent$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TwoContent' from JSON`,
  );
}

/** @internal */
export const CreateResponse21$inboundSchema: z.ZodType<
  CreateResponse21,
  z.ZodTypeDef,
  unknown
> = z.object({
  role: TwoRole$inboundSchema,
  content: z.union([
    z.string(),
    z.array(z.union([
      z.lazy(() => CreateResponse2Proxy1$inboundSchema),
      z.lazy(() => CreateResponse22$inboundSchema),
      z.lazy(() => CreateResponse23$inboundSchema),
    ])),
  ]),
});

/** @internal */
export type CreateResponse21$Outbound = {
  role: string;
  content:
    | string
    | Array<
      | CreateResponse2Proxy1$Outbound
      | CreateResponse22$Outbound
      | CreateResponse23$Outbound
    >;
};

/** @internal */
export const CreateResponse21$outboundSchema: z.ZodType<
  CreateResponse21$Outbound,
  z.ZodTypeDef,
  CreateResponse21
> = z.object({
  role: TwoRole$outboundSchema,
  content: z.union([
    z.string(),
    z.array(z.union([
      z.lazy(() => CreateResponse2Proxy1$outboundSchema),
      z.lazy(() => CreateResponse22$outboundSchema),
      z.lazy(() => CreateResponse23$outboundSchema),
    ])),
  ]),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateResponse21$ {
  /** @deprecated use `CreateResponse21$inboundSchema` instead. */
  export const inboundSchema = CreateResponse21$inboundSchema;
  /** @deprecated use `CreateResponse21$outboundSchema` instead. */
  export const outboundSchema = CreateResponse21$outboundSchema;
  /** @deprecated use `CreateResponse21$Outbound` instead. */
  export type Outbound = CreateResponse21$Outbound;
}

export function createResponse21ToJSON(
  createResponse21: CreateResponse21,
): string {
  return JSON.stringify(
    CreateResponse21$outboundSchema.parse(createResponse21),
  );
}

export function createResponse21FromJSON(
  jsonString: string,
): SafeParseResult<CreateResponse21, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateResponse21$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateResponse21' from JSON`,
  );
}

/** @internal */
export const Input2$inboundSchema: z.ZodType<Input2, z.ZodTypeDef, unknown> = z
  .union([
    z.lazy(() => CreateResponse2Proxy3$inboundSchema),
    z.lazy(() => CreateResponse2Proxy2$inboundSchema),
    z.lazy(() => CreateResponse21$inboundSchema),
  ]);

/** @internal */
export type Input2$Outbound =
  | CreateResponse2Proxy3$Outbound
  | CreateResponse2Proxy2$Outbound
  | CreateResponse21$Outbound;

/** @internal */
export const Input2$outboundSchema: z.ZodType<
  Input2$Outbound,
  z.ZodTypeDef,
  Input2
> = z.union([
  z.lazy(() => CreateResponse2Proxy3$outboundSchema),
  z.lazy(() => CreateResponse2Proxy2$outboundSchema),
  z.lazy(() => CreateResponse21$outboundSchema),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Input2$ {
  /** @deprecated use `Input2$inboundSchema` instead. */
  export const inboundSchema = Input2$inboundSchema;
  /** @deprecated use `Input2$outboundSchema` instead. */
  export const outboundSchema = Input2$outboundSchema;
  /** @deprecated use `Input2$Outbound` instead. */
  export type Outbound = Input2$Outbound;
}

export function input2ToJSON(input2: Input2): string {
  return JSON.stringify(Input2$outboundSchema.parse(input2));
}

export function input2FromJSON(
  jsonString: string,
): SafeParseResult<Input2, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Input2$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Input2' from JSON`,
  );
}

/** @internal */
export const CreateResponseInput$inboundSchema: z.ZodType<
  CreateResponseInput,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.string(),
  z.array(z.union([
    z.lazy(() => CreateResponse2Proxy3$inboundSchema),
    z.lazy(() => CreateResponse2Proxy2$inboundSchema),
    z.lazy(() => CreateResponse21$inboundSchema),
  ])),
]);

/** @internal */
export type CreateResponseInput$Outbound =
  | string
  | Array<
    | CreateResponse2Proxy3$Outbound
    | CreateResponse2Proxy2$Outbound
    | CreateResponse21$Outbound
  >;

/** @internal */
export const CreateResponseInput$outboundSchema: z.ZodType<
  CreateResponseInput$Outbound,
  z.ZodTypeDef,
  CreateResponseInput
> = z.union([
  z.string(),
  z.array(z.union([
    z.lazy(() => CreateResponse2Proxy3$outboundSchema),
    z.lazy(() => CreateResponse2Proxy2$outboundSchema),
    z.lazy(() => CreateResponse21$outboundSchema),
  ])),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateResponseInput$ {
  /** @deprecated use `CreateResponseInput$inboundSchema` instead. */
  export const inboundSchema = CreateResponseInput$inboundSchema;
  /** @deprecated use `CreateResponseInput$outboundSchema` instead. */
  export const outboundSchema = CreateResponseInput$outboundSchema;
  /** @deprecated use `CreateResponseInput$Outbound` instead. */
  export type Outbound = CreateResponseInput$Outbound;
}

export function createResponseInputToJSON(
  createResponseInput: CreateResponseInput,
): string {
  return JSON.stringify(
    CreateResponseInput$outboundSchema.parse(createResponseInput),
  );
}

export function createResponseInputFromJSON(
  jsonString: string,
): SafeParseResult<CreateResponseInput, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateResponseInput$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateResponseInput' from JSON`,
  );
}

/** @internal */
export const Include$inboundSchema: z.ZodNativeEnum<typeof Include> = z
  .nativeEnum(Include);

/** @internal */
export const Include$outboundSchema: z.ZodNativeEnum<typeof Include> =
  Include$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Include$ {
  /** @deprecated use `Include$inboundSchema` instead. */
  export const inboundSchema = Include$inboundSchema;
  /** @deprecated use `Include$outboundSchema` instead. */
  export const outboundSchema = Include$outboundSchema;
}

/** @internal */
export const CreateResponseToolsProxyRequestRequestBodyType$inboundSchema:
  z.ZodNativeEnum<typeof CreateResponseToolsProxyRequestRequestBodyType> = z
    .nativeEnum(CreateResponseToolsProxyRequestRequestBodyType);

/** @internal */
export const CreateResponseToolsProxyRequestRequestBodyType$outboundSchema:
  z.ZodNativeEnum<typeof CreateResponseToolsProxyRequestRequestBodyType> =
    CreateResponseToolsProxyRequestRequestBodyType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateResponseToolsProxyRequestRequestBodyType$ {
  /** @deprecated use `CreateResponseToolsProxyRequestRequestBodyType$inboundSchema` instead. */
  export const inboundSchema =
    CreateResponseToolsProxyRequestRequestBodyType$inboundSchema;
  /** @deprecated use `CreateResponseToolsProxyRequestRequestBodyType$outboundSchema` instead. */
  export const outboundSchema =
    CreateResponseToolsProxyRequestRequestBodyType$outboundSchema;
}

/** @internal */
export const Ranker$inboundSchema: z.ZodNativeEnum<typeof Ranker> = z
  .nativeEnum(Ranker);

/** @internal */
export const Ranker$outboundSchema: z.ZodNativeEnum<typeof Ranker> =
  Ranker$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Ranker$ {
  /** @deprecated use `Ranker$inboundSchema` instead. */
  export const inboundSchema = Ranker$inboundSchema;
  /** @deprecated use `Ranker$outboundSchema` instead. */
  export const outboundSchema = Ranker$outboundSchema;
}

/** @internal */
export const RankingOptions$inboundSchema: z.ZodType<
  RankingOptions,
  z.ZodTypeDef,
  unknown
> = z.object({
  ranker: Ranker$inboundSchema.default("auto"),
  score_threshold: z.number().default(0),
}).transform((v) => {
  return remap$(v, {
    "score_threshold": "scoreThreshold",
  });
});

/** @internal */
export type RankingOptions$Outbound = {
  ranker: string;
  score_threshold: number;
};

/** @internal */
export const RankingOptions$outboundSchema: z.ZodType<
  RankingOptions$Outbound,
  z.ZodTypeDef,
  RankingOptions
> = z.object({
  ranker: Ranker$outboundSchema.default("auto"),
  scoreThreshold: z.number().default(0),
}).transform((v) => {
  return remap$(v, {
    scoreThreshold: "score_threshold",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RankingOptions$ {
  /** @deprecated use `RankingOptions$inboundSchema` instead. */
  export const inboundSchema = RankingOptions$inboundSchema;
  /** @deprecated use `RankingOptions$outboundSchema` instead. */
  export const outboundSchema = RankingOptions$outboundSchema;
  /** @deprecated use `RankingOptions$Outbound` instead. */
  export type Outbound = RankingOptions$Outbound;
}

export function rankingOptionsToJSON(rankingOptions: RankingOptions): string {
  return JSON.stringify(RankingOptions$outboundSchema.parse(rankingOptions));
}

export function rankingOptionsFromJSON(
  jsonString: string,
): SafeParseResult<RankingOptions, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => RankingOptions$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RankingOptions' from JSON`,
  );
}

/** @internal */
export const Tools3$inboundSchema: z.ZodType<Tools3, z.ZodTypeDef, unknown> = z
  .object({
    type: CreateResponseToolsProxyRequestRequestBodyType$inboundSchema,
    vector_store_ids: z.array(z.string()).optional(),
    max_num_results: z.number().int().default(20),
    filters: z.any().optional(),
    ranking_options: z.lazy(() => RankingOptions$inboundSchema).optional(),
  }).transform((v) => {
    return remap$(v, {
      "vector_store_ids": "vectorStoreIds",
      "max_num_results": "maxNumResults",
      "ranking_options": "rankingOptions",
    });
  });

/** @internal */
export type Tools3$Outbound = {
  type: string;
  vector_store_ids?: Array<string> | undefined;
  max_num_results: number;
  filters?: any | undefined;
  ranking_options?: RankingOptions$Outbound | undefined;
};

/** @internal */
export const Tools3$outboundSchema: z.ZodType<
  Tools3$Outbound,
  z.ZodTypeDef,
  Tools3
> = z.object({
  type: CreateResponseToolsProxyRequestRequestBodyType$outboundSchema,
  vectorStoreIds: z.array(z.string()).optional(),
  maxNumResults: z.number().int().default(20),
  filters: z.any().optional(),
  rankingOptions: z.lazy(() => RankingOptions$outboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    vectorStoreIds: "vector_store_ids",
    maxNumResults: "max_num_results",
    rankingOptions: "ranking_options",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Tools3$ {
  /** @deprecated use `Tools3$inboundSchema` instead. */
  export const inboundSchema = Tools3$inboundSchema;
  /** @deprecated use `Tools3$outboundSchema` instead. */
  export const outboundSchema = Tools3$outboundSchema;
  /** @deprecated use `Tools3$Outbound` instead. */
  export type Outbound = Tools3$Outbound;
}

export function tools3ToJSON(tools3: Tools3): string {
  return JSON.stringify(Tools3$outboundSchema.parse(tools3));
}

export function tools3FromJSON(
  jsonString: string,
): SafeParseResult<Tools3, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Tools3$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Tools3' from JSON`,
  );
}

/** @internal */
export const CreateResponseToolsProxyType$inboundSchema: z.ZodNativeEnum<
  typeof CreateResponseToolsProxyType
> = z.nativeEnum(CreateResponseToolsProxyType);

/** @internal */
export const CreateResponseToolsProxyType$outboundSchema: z.ZodNativeEnum<
  typeof CreateResponseToolsProxyType
> = CreateResponseToolsProxyType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateResponseToolsProxyType$ {
  /** @deprecated use `CreateResponseToolsProxyType$inboundSchema` instead. */
  export const inboundSchema = CreateResponseToolsProxyType$inboundSchema;
  /** @deprecated use `CreateResponseToolsProxyType$outboundSchema` instead. */
  export const outboundSchema = CreateResponseToolsProxyType$outboundSchema;
}

/** @internal */
export const SearchContextSize$inboundSchema: z.ZodNativeEnum<
  typeof SearchContextSize
> = z.nativeEnum(SearchContextSize);

/** @internal */
export const SearchContextSize$outboundSchema: z.ZodNativeEnum<
  typeof SearchContextSize
> = SearchContextSize$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SearchContextSize$ {
  /** @deprecated use `SearchContextSize$inboundSchema` instead. */
  export const inboundSchema = SearchContextSize$inboundSchema;
  /** @deprecated use `SearchContextSize$outboundSchema` instead. */
  export const outboundSchema = SearchContextSize$outboundSchema;
}

/** @internal */
export const CreateResponseToolsProxyRequestType$inboundSchema: z.ZodNativeEnum<
  typeof CreateResponseToolsProxyRequestType
> = z.nativeEnum(CreateResponseToolsProxyRequestType);

/** @internal */
export const CreateResponseToolsProxyRequestType$outboundSchema:
  z.ZodNativeEnum<typeof CreateResponseToolsProxyRequestType> =
    CreateResponseToolsProxyRequestType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateResponseToolsProxyRequestType$ {
  /** @deprecated use `CreateResponseToolsProxyRequestType$inboundSchema` instead. */
  export const inboundSchema =
    CreateResponseToolsProxyRequestType$inboundSchema;
  /** @deprecated use `CreateResponseToolsProxyRequestType$outboundSchema` instead. */
  export const outboundSchema =
    CreateResponseToolsProxyRequestType$outboundSchema;
}

/** @internal */
export const UserLocation$inboundSchema: z.ZodType<
  UserLocation,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: CreateResponseToolsProxyRequestType$inboundSchema.optional(),
  city: z.nullable(z.string()).optional(),
  country: z.string().optional(),
  region: z.nullable(z.string()).optional(),
  timezone: z.nullable(z.string()).optional(),
});

/** @internal */
export type UserLocation$Outbound = {
  type?: string | undefined;
  city?: string | null | undefined;
  country?: string | undefined;
  region?: string | null | undefined;
  timezone?: string | null | undefined;
};

/** @internal */
export const UserLocation$outboundSchema: z.ZodType<
  UserLocation$Outbound,
  z.ZodTypeDef,
  UserLocation
> = z.object({
  type: CreateResponseToolsProxyRequestType$outboundSchema.optional(),
  city: z.nullable(z.string()).optional(),
  country: z.string().optional(),
  region: z.nullable(z.string()).optional(),
  timezone: z.nullable(z.string()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UserLocation$ {
  /** @deprecated use `UserLocation$inboundSchema` instead. */
  export const inboundSchema = UserLocation$inboundSchema;
  /** @deprecated use `UserLocation$outboundSchema` instead. */
  export const outboundSchema = UserLocation$outboundSchema;
  /** @deprecated use `UserLocation$Outbound` instead. */
  export type Outbound = UserLocation$Outbound;
}

export function userLocationToJSON(userLocation: UserLocation): string {
  return JSON.stringify(UserLocation$outboundSchema.parse(userLocation));
}

export function userLocationFromJSON(
  jsonString: string,
): SafeParseResult<UserLocation, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UserLocation$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UserLocation' from JSON`,
  );
}

/** @internal */
export const Tools2$inboundSchema: z.ZodType<Tools2, z.ZodTypeDef, unknown> = z
  .object({
    type: CreateResponseToolsProxyType$inboundSchema,
    domains: z.array(z.string()).optional(),
    search_context_size: SearchContextSize$inboundSchema.default("medium"),
    user_location: z.lazy(() => UserLocation$inboundSchema).optional(),
  }).transform((v) => {
    return remap$(v, {
      "search_context_size": "searchContextSize",
      "user_location": "userLocation",
    });
  });

/** @internal */
export type Tools2$Outbound = {
  type: string;
  domains?: Array<string> | undefined;
  search_context_size: string;
  user_location?: UserLocation$Outbound | undefined;
};

/** @internal */
export const Tools2$outboundSchema: z.ZodType<
  Tools2$Outbound,
  z.ZodTypeDef,
  Tools2
> = z.object({
  type: CreateResponseToolsProxyType$outboundSchema,
  domains: z.array(z.string()).optional(),
  searchContextSize: SearchContextSize$outboundSchema.default("medium"),
  userLocation: z.lazy(() => UserLocation$outboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    searchContextSize: "search_context_size",
    userLocation: "user_location",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Tools2$ {
  /** @deprecated use `Tools2$inboundSchema` instead. */
  export const inboundSchema = Tools2$inboundSchema;
  /** @deprecated use `Tools2$outboundSchema` instead. */
  export const outboundSchema = Tools2$outboundSchema;
  /** @deprecated use `Tools2$Outbound` instead. */
  export type Outbound = Tools2$Outbound;
}

export function tools2ToJSON(tools2: Tools2): string {
  return JSON.stringify(Tools2$outboundSchema.parse(tools2));
}

export function tools2FromJSON(
  jsonString: string,
): SafeParseResult<Tools2, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Tools2$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Tools2' from JSON`,
  );
}

/** @internal */
export const ToolsType$inboundSchema: z.ZodNativeEnum<typeof ToolsType> = z
  .nativeEnum(ToolsType);

/** @internal */
export const ToolsType$outboundSchema: z.ZodNativeEnum<typeof ToolsType> =
  ToolsType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ToolsType$ {
  /** @deprecated use `ToolsType$inboundSchema` instead. */
  export const inboundSchema = ToolsType$inboundSchema;
  /** @deprecated use `ToolsType$outboundSchema` instead. */
  export const outboundSchema = ToolsType$outboundSchema;
}

/** @internal */
export const CreateResponseToolsType$inboundSchema: z.ZodNativeEnum<
  typeof CreateResponseToolsType
> = z.nativeEnum(CreateResponseToolsType);

/** @internal */
export const CreateResponseToolsType$outboundSchema: z.ZodNativeEnum<
  typeof CreateResponseToolsType
> = CreateResponseToolsType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateResponseToolsType$ {
  /** @deprecated use `CreateResponseToolsType$inboundSchema` instead. */
  export const inboundSchema = CreateResponseToolsType$inboundSchema;
  /** @deprecated use `CreateResponseToolsType$outboundSchema` instead. */
  export const outboundSchema = CreateResponseToolsType$outboundSchema;
}

/** @internal */
export const Properties$inboundSchema: z.ZodType<
  Properties,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: z.string(),
  description: z.string().optional(),
  enum: z.array(z.string()).optional(),
});

/** @internal */
export type Properties$Outbound = {
  type: string;
  description?: string | undefined;
  enum?: Array<string> | undefined;
};

/** @internal */
export const Properties$outboundSchema: z.ZodType<
  Properties$Outbound,
  z.ZodTypeDef,
  Properties
> = z.object({
  type: z.string(),
  description: z.string().optional(),
  enum: z.array(z.string()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Properties$ {
  /** @deprecated use `Properties$inboundSchema` instead. */
  export const inboundSchema = Properties$inboundSchema;
  /** @deprecated use `Properties$outboundSchema` instead. */
  export const outboundSchema = Properties$outboundSchema;
  /** @deprecated use `Properties$Outbound` instead. */
  export type Outbound = Properties$Outbound;
}

export function propertiesToJSON(properties: Properties): string {
  return JSON.stringify(Properties$outboundSchema.parse(properties));
}

export function propertiesFromJSON(
  jsonString: string,
): SafeParseResult<Properties, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Properties$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Properties' from JSON`,
  );
}

/** @internal */
export const ToolsParameters$inboundSchema: z.ZodType<
  ToolsParameters,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: CreateResponseToolsType$inboundSchema,
  properties: z.record(z.lazy(() => Properties$inboundSchema)),
  required: z.array(z.string()).optional(),
  additionalProperties: z.boolean().optional(),
});

/** @internal */
export type ToolsParameters$Outbound = {
  type: string;
  properties: { [k: string]: Properties$Outbound };
  required?: Array<string> | undefined;
  additionalProperties?: boolean | undefined;
};

/** @internal */
export const ToolsParameters$outboundSchema: z.ZodType<
  ToolsParameters$Outbound,
  z.ZodTypeDef,
  ToolsParameters
> = z.object({
  type: CreateResponseToolsType$outboundSchema,
  properties: z.record(z.lazy(() => Properties$outboundSchema)),
  required: z.array(z.string()).optional(),
  additionalProperties: z.boolean().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ToolsParameters$ {
  /** @deprecated use `ToolsParameters$inboundSchema` instead. */
  export const inboundSchema = ToolsParameters$inboundSchema;
  /** @deprecated use `ToolsParameters$outboundSchema` instead. */
  export const outboundSchema = ToolsParameters$outboundSchema;
  /** @deprecated use `ToolsParameters$Outbound` instead. */
  export type Outbound = ToolsParameters$Outbound;
}

export function toolsParametersToJSON(
  toolsParameters: ToolsParameters,
): string {
  return JSON.stringify(ToolsParameters$outboundSchema.parse(toolsParameters));
}

export function toolsParametersFromJSON(
  jsonString: string,
): SafeParseResult<ToolsParameters, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ToolsParameters$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ToolsParameters' from JSON`,
  );
}

/** @internal */
export const Tools1$inboundSchema: z.ZodType<Tools1, z.ZodTypeDef, unknown> = z
  .object({
    type: ToolsType$inboundSchema,
    name: z.string(),
    description: z.nullable(z.string()).optional(),
    parameters: z.lazy(() => ToolsParameters$inboundSchema),
    strict: z.boolean().default(true),
  });

/** @internal */
export type Tools1$Outbound = {
  type: string;
  name: string;
  description?: string | null | undefined;
  parameters: ToolsParameters$Outbound;
  strict: boolean;
};

/** @internal */
export const Tools1$outboundSchema: z.ZodType<
  Tools1$Outbound,
  z.ZodTypeDef,
  Tools1
> = z.object({
  type: ToolsType$outboundSchema,
  name: z.string(),
  description: z.nullable(z.string()).optional(),
  parameters: z.lazy(() => ToolsParameters$outboundSchema),
  strict: z.boolean().default(true),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Tools1$ {
  /** @deprecated use `Tools1$inboundSchema` instead. */
  export const inboundSchema = Tools1$inboundSchema;
  /** @deprecated use `Tools1$outboundSchema` instead. */
  export const outboundSchema = Tools1$outboundSchema;
  /** @deprecated use `Tools1$Outbound` instead. */
  export type Outbound = Tools1$Outbound;
}

export function tools1ToJSON(tools1: Tools1): string {
  return JSON.stringify(Tools1$outboundSchema.parse(tools1));
}

export function tools1FromJSON(
  jsonString: string,
): SafeParseResult<Tools1, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Tools1$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Tools1' from JSON`,
  );
}

/** @internal */
export const CreateResponseTools$inboundSchema: z.ZodType<
  CreateResponseTools,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => Tools1$inboundSchema),
  z.lazy(() => Tools2$inboundSchema),
  z.lazy(() => Tools3$inboundSchema),
]);

/** @internal */
export type CreateResponseTools$Outbound =
  | Tools1$Outbound
  | Tools2$Outbound
  | Tools3$Outbound;

/** @internal */
export const CreateResponseTools$outboundSchema: z.ZodType<
  CreateResponseTools$Outbound,
  z.ZodTypeDef,
  CreateResponseTools
> = z.union([
  z.lazy(() => Tools1$outboundSchema),
  z.lazy(() => Tools2$outboundSchema),
  z.lazy(() => Tools3$outboundSchema),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateResponseTools$ {
  /** @deprecated use `CreateResponseTools$inboundSchema` instead. */
  export const inboundSchema = CreateResponseTools$inboundSchema;
  /** @deprecated use `CreateResponseTools$outboundSchema` instead. */
  export const outboundSchema = CreateResponseTools$outboundSchema;
  /** @deprecated use `CreateResponseTools$Outbound` instead. */
  export type Outbound = CreateResponseTools$Outbound;
}

export function createResponseToolsToJSON(
  createResponseTools: CreateResponseTools,
): string {
  return JSON.stringify(
    CreateResponseTools$outboundSchema.parse(createResponseTools),
  );
}

export function createResponseToolsFromJSON(
  jsonString: string,
): SafeParseResult<CreateResponseTools, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateResponseTools$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateResponseTools' from JSON`,
  );
}

/** @internal */
export const CreateResponseToolChoiceProxyRequestType$inboundSchema:
  z.ZodNativeEnum<typeof CreateResponseToolChoiceProxyRequestType> = z
    .nativeEnum(CreateResponseToolChoiceProxyRequestType);

/** @internal */
export const CreateResponseToolChoiceProxyRequestType$outboundSchema:
  z.ZodNativeEnum<typeof CreateResponseToolChoiceProxyRequestType> =
    CreateResponseToolChoiceProxyRequestType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateResponseToolChoiceProxyRequestType$ {
  /** @deprecated use `CreateResponseToolChoiceProxyRequestType$inboundSchema` instead. */
  export const inboundSchema =
    CreateResponseToolChoiceProxyRequestType$inboundSchema;
  /** @deprecated use `CreateResponseToolChoiceProxyRequestType$outboundSchema` instead. */
  export const outboundSchema =
    CreateResponseToolChoiceProxyRequestType$outboundSchema;
}

/** @internal */
export const ToolChoice4$inboundSchema: z.ZodType<
  ToolChoice4,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: CreateResponseToolChoiceProxyRequestType$inboundSchema,
  server_label: z.string(),
  name: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    "server_label": "serverLabel",
  });
});

/** @internal */
export type ToolChoice4$Outbound = {
  type: string;
  server_label: string;
  name?: string | null | undefined;
};

/** @internal */
export const ToolChoice4$outboundSchema: z.ZodType<
  ToolChoice4$Outbound,
  z.ZodTypeDef,
  ToolChoice4
> = z.object({
  type: CreateResponseToolChoiceProxyRequestType$outboundSchema,
  serverLabel: z.string(),
  name: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    serverLabel: "server_label",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ToolChoice4$ {
  /** @deprecated use `ToolChoice4$inboundSchema` instead. */
  export const inboundSchema = ToolChoice4$inboundSchema;
  /** @deprecated use `ToolChoice4$outboundSchema` instead. */
  export const outboundSchema = ToolChoice4$outboundSchema;
  /** @deprecated use `ToolChoice4$Outbound` instead. */
  export type Outbound = ToolChoice4$Outbound;
}

export function toolChoice4ToJSON(toolChoice4: ToolChoice4): string {
  return JSON.stringify(ToolChoice4$outboundSchema.parse(toolChoice4));
}

export function toolChoice4FromJSON(
  jsonString: string,
): SafeParseResult<ToolChoice4, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ToolChoice4$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ToolChoice4' from JSON`,
  );
}

/** @internal */
export const CreateResponseToolChoiceProxyType$inboundSchema: z.ZodNativeEnum<
  typeof CreateResponseToolChoiceProxyType
> = z.nativeEnum(CreateResponseToolChoiceProxyType);

/** @internal */
export const CreateResponseToolChoiceProxyType$outboundSchema: z.ZodNativeEnum<
  typeof CreateResponseToolChoiceProxyType
> = CreateResponseToolChoiceProxyType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateResponseToolChoiceProxyType$ {
  /** @deprecated use `CreateResponseToolChoiceProxyType$inboundSchema` instead. */
  export const inboundSchema = CreateResponseToolChoiceProxyType$inboundSchema;
  /** @deprecated use `CreateResponseToolChoiceProxyType$outboundSchema` instead. */
  export const outboundSchema =
    CreateResponseToolChoiceProxyType$outboundSchema;
}

/** @internal */
export const ToolChoice3$inboundSchema: z.ZodType<
  ToolChoice3,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: CreateResponseToolChoiceProxyType$inboundSchema,
  name: z.string(),
});

/** @internal */
export type ToolChoice3$Outbound = {
  type: string;
  name: string;
};

/** @internal */
export const ToolChoice3$outboundSchema: z.ZodType<
  ToolChoice3$Outbound,
  z.ZodTypeDef,
  ToolChoice3
> = z.object({
  type: CreateResponseToolChoiceProxyType$outboundSchema,
  name: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ToolChoice3$ {
  /** @deprecated use `ToolChoice3$inboundSchema` instead. */
  export const inboundSchema = ToolChoice3$inboundSchema;
  /** @deprecated use `ToolChoice3$outboundSchema` instead. */
  export const outboundSchema = ToolChoice3$outboundSchema;
  /** @deprecated use `ToolChoice3$Outbound` instead. */
  export type Outbound = ToolChoice3$Outbound;
}

export function toolChoice3ToJSON(toolChoice3: ToolChoice3): string {
  return JSON.stringify(ToolChoice3$outboundSchema.parse(toolChoice3));
}

export function toolChoice3FromJSON(
  jsonString: string,
): SafeParseResult<ToolChoice3, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ToolChoice3$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ToolChoice3' from JSON`,
  );
}

/** @internal */
export const CreateResponseToolChoiceType$inboundSchema: z.ZodNativeEnum<
  typeof CreateResponseToolChoiceType
> = z.nativeEnum(CreateResponseToolChoiceType);

/** @internal */
export const CreateResponseToolChoiceType$outboundSchema: z.ZodNativeEnum<
  typeof CreateResponseToolChoiceType
> = CreateResponseToolChoiceType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateResponseToolChoiceType$ {
  /** @deprecated use `CreateResponseToolChoiceType$inboundSchema` instead. */
  export const inboundSchema = CreateResponseToolChoiceType$inboundSchema;
  /** @deprecated use `CreateResponseToolChoiceType$outboundSchema` instead. */
  export const outboundSchema = CreateResponseToolChoiceType$outboundSchema;
}

/** @internal */
export const CreateResponseToolChoice2$inboundSchema: z.ZodType<
  CreateResponseToolChoice2,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: CreateResponseToolChoiceType$inboundSchema,
});

/** @internal */
export type CreateResponseToolChoice2$Outbound = {
  type: string;
};

/** @internal */
export const CreateResponseToolChoice2$outboundSchema: z.ZodType<
  CreateResponseToolChoice2$Outbound,
  z.ZodTypeDef,
  CreateResponseToolChoice2
> = z.object({
  type: CreateResponseToolChoiceType$outboundSchema,
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateResponseToolChoice2$ {
  /** @deprecated use `CreateResponseToolChoice2$inboundSchema` instead. */
  export const inboundSchema = CreateResponseToolChoice2$inboundSchema;
  /** @deprecated use `CreateResponseToolChoice2$outboundSchema` instead. */
  export const outboundSchema = CreateResponseToolChoice2$outboundSchema;
  /** @deprecated use `CreateResponseToolChoice2$Outbound` instead. */
  export type Outbound = CreateResponseToolChoice2$Outbound;
}

export function createResponseToolChoice2ToJSON(
  createResponseToolChoice2: CreateResponseToolChoice2,
): string {
  return JSON.stringify(
    CreateResponseToolChoice2$outboundSchema.parse(createResponseToolChoice2),
  );
}

export function createResponseToolChoice2FromJSON(
  jsonString: string,
): SafeParseResult<CreateResponseToolChoice2, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateResponseToolChoice2$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateResponseToolChoice2' from JSON`,
  );
}

/** @internal */
export const CreateResponseToolChoice1$inboundSchema: z.ZodNativeEnum<
  typeof CreateResponseToolChoice1
> = z.nativeEnum(CreateResponseToolChoice1);

/** @internal */
export const CreateResponseToolChoice1$outboundSchema: z.ZodNativeEnum<
  typeof CreateResponseToolChoice1
> = CreateResponseToolChoice1$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateResponseToolChoice1$ {
  /** @deprecated use `CreateResponseToolChoice1$inboundSchema` instead. */
  export const inboundSchema = CreateResponseToolChoice1$inboundSchema;
  /** @deprecated use `CreateResponseToolChoice1$outboundSchema` instead. */
  export const outboundSchema = CreateResponseToolChoice1$outboundSchema;
}

/** @internal */
export const CreateResponseToolChoice$inboundSchema: z.ZodType<
  CreateResponseToolChoice,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => ToolChoice3$inboundSchema),
  z.lazy(() => ToolChoice4$inboundSchema),
  z.lazy(() => CreateResponseToolChoice2$inboundSchema),
  CreateResponseToolChoice1$inboundSchema,
]);

/** @internal */
export type CreateResponseToolChoice$Outbound =
  | ToolChoice3$Outbound
  | ToolChoice4$Outbound
  | CreateResponseToolChoice2$Outbound
  | string;

/** @internal */
export const CreateResponseToolChoice$outboundSchema: z.ZodType<
  CreateResponseToolChoice$Outbound,
  z.ZodTypeDef,
  CreateResponseToolChoice
> = z.union([
  z.lazy(() => ToolChoice3$outboundSchema),
  z.lazy(() => ToolChoice4$outboundSchema),
  z.lazy(() => CreateResponseToolChoice2$outboundSchema),
  CreateResponseToolChoice1$outboundSchema,
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateResponseToolChoice$ {
  /** @deprecated use `CreateResponseToolChoice$inboundSchema` instead. */
  export const inboundSchema = CreateResponseToolChoice$inboundSchema;
  /** @deprecated use `CreateResponseToolChoice$outboundSchema` instead. */
  export const outboundSchema = CreateResponseToolChoice$outboundSchema;
  /** @deprecated use `CreateResponseToolChoice$Outbound` instead. */
  export type Outbound = CreateResponseToolChoice$Outbound;
}

export function createResponseToolChoiceToJSON(
  createResponseToolChoice: CreateResponseToolChoice,
): string {
  return JSON.stringify(
    CreateResponseToolChoice$outboundSchema.parse(createResponseToolChoice),
  );
}

export function createResponseToolChoiceFromJSON(
  jsonString: string,
): SafeParseResult<CreateResponseToolChoice, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateResponseToolChoice$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateResponseToolChoice' from JSON`,
  );
}

/** @internal */
export const CreateResponseRequestBody$inboundSchema: z.ZodType<
  CreateResponseRequestBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  model: z.string(),
  metadata: z.record(z.string()).optional(),
  temperature: z.nullable(z.number()).optional(),
  top_p: z.nullable(z.number()).optional(),
  previous_response_id: z.nullable(z.string()).optional(),
  instructions: z.nullable(z.string()).optional(),
  reasoning: z.nullable(z.lazy(() => Reasoning$inboundSchema)).optional(),
  max_output_tokens: z.nullable(z.number().int()).optional(),
  text: z.nullable(z.lazy(() => Text$inboundSchema)).optional(),
  input: z.union([
    z.string(),
    z.array(z.union([
      z.lazy(() => CreateResponse2Proxy3$inboundSchema),
      z.lazy(() => CreateResponse2Proxy2$inboundSchema),
      z.lazy(() => CreateResponse21$inboundSchema),
    ])),
  ]),
  include: z.nullable(z.array(Include$inboundSchema)).optional(),
  parallel_tool_calls: z.nullable(z.boolean()).optional(),
  store: z.nullable(z.boolean().default(true)),
  tools: z.array(
    z.union([
      z.lazy(() => Tools1$inboundSchema),
      z.lazy(() => Tools2$inboundSchema),
      z.lazy(() => Tools3$inboundSchema),
    ]),
  ).optional(),
  tool_choice: z.union([
    z.lazy(() => ToolChoice3$inboundSchema),
    z.lazy(() => ToolChoice4$inboundSchema),
    z.lazy(() => CreateResponseToolChoice2$inboundSchema),
    CreateResponseToolChoice1$inboundSchema,
  ]).optional(),
  stream: z.boolean().default(false),
}).transform((v) => {
  return remap$(v, {
    "top_p": "topP",
    "previous_response_id": "previousResponseId",
    "max_output_tokens": "maxOutputTokens",
    "parallel_tool_calls": "parallelToolCalls",
    "tool_choice": "toolChoice",
  });
});

/** @internal */
export type CreateResponseRequestBody$Outbound = {
  model: string;
  metadata?: { [k: string]: string } | undefined;
  temperature?: number | null | undefined;
  top_p?: number | null | undefined;
  previous_response_id?: string | null | undefined;
  instructions?: string | null | undefined;
  reasoning?: Reasoning$Outbound | null | undefined;
  max_output_tokens?: number | null | undefined;
  text?: Text$Outbound | null | undefined;
  input:
    | string
    | Array<
      | CreateResponse2Proxy3$Outbound
      | CreateResponse2Proxy2$Outbound
      | CreateResponse21$Outbound
    >;
  include?: Array<string> | null | undefined;
  parallel_tool_calls?: boolean | null | undefined;
  store: boolean | null;
  tools?:
    | Array<Tools1$Outbound | Tools2$Outbound | Tools3$Outbound>
    | undefined;
  tool_choice?:
    | ToolChoice3$Outbound
    | ToolChoice4$Outbound
    | CreateResponseToolChoice2$Outbound
    | string
    | undefined;
  stream: boolean;
};

/** @internal */
export const CreateResponseRequestBody$outboundSchema: z.ZodType<
  CreateResponseRequestBody$Outbound,
  z.ZodTypeDef,
  CreateResponseRequestBody
> = z.object({
  model: z.string(),
  metadata: z.record(z.string()).optional(),
  temperature: z.nullable(z.number()).optional(),
  topP: z.nullable(z.number()).optional(),
  previousResponseId: z.nullable(z.string()).optional(),
  instructions: z.nullable(z.string()).optional(),
  reasoning: z.nullable(z.lazy(() => Reasoning$outboundSchema)).optional(),
  maxOutputTokens: z.nullable(z.number().int()).optional(),
  text: z.nullable(z.lazy(() => Text$outboundSchema)).optional(),
  input: z.union([
    z.string(),
    z.array(z.union([
      z.lazy(() => CreateResponse2Proxy3$outboundSchema),
      z.lazy(() => CreateResponse2Proxy2$outboundSchema),
      z.lazy(() => CreateResponse21$outboundSchema),
    ])),
  ]),
  include: z.nullable(z.array(Include$outboundSchema)).optional(),
  parallelToolCalls: z.nullable(z.boolean()).optional(),
  store: z.nullable(z.boolean().default(true)),
  tools: z.array(
    z.union([
      z.lazy(() => Tools1$outboundSchema),
      z.lazy(() => Tools2$outboundSchema),
      z.lazy(() => Tools3$outboundSchema),
    ]),
  ).optional(),
  toolChoice: z.union([
    z.lazy(() => ToolChoice3$outboundSchema),
    z.lazy(() => ToolChoice4$outboundSchema),
    z.lazy(() => CreateResponseToolChoice2$outboundSchema),
    CreateResponseToolChoice1$outboundSchema,
  ]).optional(),
  stream: z.boolean().default(false),
}).transform((v) => {
  return remap$(v, {
    topP: "top_p",
    previousResponseId: "previous_response_id",
    maxOutputTokens: "max_output_tokens",
    parallelToolCalls: "parallel_tool_calls",
    toolChoice: "tool_choice",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateResponseRequestBody$ {
  /** @deprecated use `CreateResponseRequestBody$inboundSchema` instead. */
  export const inboundSchema = CreateResponseRequestBody$inboundSchema;
  /** @deprecated use `CreateResponseRequestBody$outboundSchema` instead. */
  export const outboundSchema = CreateResponseRequestBody$outboundSchema;
  /** @deprecated use `CreateResponseRequestBody$Outbound` instead. */
  export type Outbound = CreateResponseRequestBody$Outbound;
}

export function createResponseRequestBodyToJSON(
  createResponseRequestBody: CreateResponseRequestBody,
): string {
  return JSON.stringify(
    CreateResponseRequestBody$outboundSchema.parse(createResponseRequestBody),
  );
}

export function createResponseRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<CreateResponseRequestBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateResponseRequestBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateResponseRequestBody' from JSON`,
  );
}

/** @internal */
export const CreateResponseData$inboundSchema: z.ZodType<
  CreateResponseData,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: z.string(),
});

/** @internal */
export type CreateResponseData$Outbound = {
  type: string;
};

/** @internal */
export const CreateResponseData$outboundSchema: z.ZodType<
  CreateResponseData$Outbound,
  z.ZodTypeDef,
  CreateResponseData
> = z.object({
  type: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateResponseData$ {
  /** @deprecated use `CreateResponseData$inboundSchema` instead. */
  export const inboundSchema = CreateResponseData$inboundSchema;
  /** @deprecated use `CreateResponseData$outboundSchema` instead. */
  export const outboundSchema = CreateResponseData$outboundSchema;
  /** @deprecated use `CreateResponseData$Outbound` instead. */
  export type Outbound = CreateResponseData$Outbound;
}

export function createResponseDataToJSON(
  createResponseData: CreateResponseData,
): string {
  return JSON.stringify(
    CreateResponseData$outboundSchema.parse(createResponseData),
  );
}

export function createResponseDataFromJSON(
  jsonString: string,
): SafeParseResult<CreateResponseData, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateResponseData$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateResponseData' from JSON`,
  );
}

/** @internal */
export const CreateResponseProxyResponseBody$inboundSchema: z.ZodType<
  CreateResponseProxyResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  data: z.string().transform((v, ctx) => {
    try {
      return JSON.parse(v);
    } catch (err) {
      ctx.addIssue({
        code: z.ZodIssueCode.custom,
        message: `malformed json: ${err}`,
      });
      return z.NEVER;
    }
  }).pipe(z.lazy(() => CreateResponseData$inboundSchema).optional()),
});

/** @internal */
export type CreateResponseProxyResponseBody$Outbound = {
  data?: CreateResponseData$Outbound | undefined;
};

/** @internal */
export const CreateResponseProxyResponseBody$outboundSchema: z.ZodType<
  CreateResponseProxyResponseBody$Outbound,
  z.ZodTypeDef,
  CreateResponseProxyResponseBody
> = z.object({
  data: z.lazy(() => CreateResponseData$outboundSchema).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateResponseProxyResponseBody$ {
  /** @deprecated use `CreateResponseProxyResponseBody$inboundSchema` instead. */
  export const inboundSchema = CreateResponseProxyResponseBody$inboundSchema;
  /** @deprecated use `CreateResponseProxyResponseBody$outboundSchema` instead. */
  export const outboundSchema = CreateResponseProxyResponseBody$outboundSchema;
  /** @deprecated use `CreateResponseProxyResponseBody$Outbound` instead. */
  export type Outbound = CreateResponseProxyResponseBody$Outbound;
}

export function createResponseProxyResponseBodyToJSON(
  createResponseProxyResponseBody: CreateResponseProxyResponseBody,
): string {
  return JSON.stringify(
    CreateResponseProxyResponseBody$outboundSchema.parse(
      createResponseProxyResponseBody,
    ),
  );
}

export function createResponseProxyResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<CreateResponseProxyResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateResponseProxyResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateResponseProxyResponseBody' from JSON`,
  );
}

/** @internal */
export const CreateResponseObject$inboundSchema: z.ZodNativeEnum<
  typeof CreateResponseObject
> = z.nativeEnum(CreateResponseObject);

/** @internal */
export const CreateResponseObject$outboundSchema: z.ZodNativeEnum<
  typeof CreateResponseObject
> = CreateResponseObject$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateResponseObject$ {
  /** @deprecated use `CreateResponseObject$inboundSchema` instead. */
  export const inboundSchema = CreateResponseObject$inboundSchema;
  /** @deprecated use `CreateResponseObject$outboundSchema` instead. */
  export const outboundSchema = CreateResponseObject$outboundSchema;
}

/** @internal */
export const CreateResponseStatus$inboundSchema: z.ZodNativeEnum<
  typeof CreateResponseStatus
> = z.nativeEnum(CreateResponseStatus);

/** @internal */
export const CreateResponseStatus$outboundSchema: z.ZodNativeEnum<
  typeof CreateResponseStatus
> = CreateResponseStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateResponseStatus$ {
  /** @deprecated use `CreateResponseStatus$inboundSchema` instead. */
  export const inboundSchema = CreateResponseStatus$inboundSchema;
  /** @deprecated use `CreateResponseStatus$outboundSchema` instead. */
  export const outboundSchema = CreateResponseStatus$outboundSchema;
}

/** @internal */
export const ErrorT$inboundSchema: z.ZodType<ErrorT, z.ZodTypeDef, unknown> = z
  .object({
    code: z.string(),
    message: z.string(),
  });

/** @internal */
export type ErrorT$Outbound = {
  code: string;
  message: string;
};

/** @internal */
export const ErrorT$outboundSchema: z.ZodType<
  ErrorT$Outbound,
  z.ZodTypeDef,
  ErrorT
> = z.object({
  code: z.string(),
  message: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ErrorT$ {
  /** @deprecated use `ErrorT$inboundSchema` instead. */
  export const inboundSchema = ErrorT$inboundSchema;
  /** @deprecated use `ErrorT$outboundSchema` instead. */
  export const outboundSchema = ErrorT$outboundSchema;
  /** @deprecated use `ErrorT$Outbound` instead. */
  export type Outbound = ErrorT$Outbound;
}

export function errorToJSON(errorT: ErrorT): string {
  return JSON.stringify(ErrorT$outboundSchema.parse(errorT));
}

export function errorFromJSON(
  jsonString: string,
): SafeParseResult<ErrorT, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ErrorT$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ErrorT' from JSON`,
  );
}

/** @internal */
export const Reason$inboundSchema: z.ZodNativeEnum<typeof Reason> = z
  .nativeEnum(Reason);

/** @internal */
export const Reason$outboundSchema: z.ZodNativeEnum<typeof Reason> =
  Reason$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Reason$ {
  /** @deprecated use `Reason$inboundSchema` instead. */
  export const inboundSchema = Reason$inboundSchema;
  /** @deprecated use `Reason$outboundSchema` instead. */
  export const outboundSchema = Reason$outboundSchema;
}

/** @internal */
export const IncompleteDetails$inboundSchema: z.ZodType<
  IncompleteDetails,
  z.ZodTypeDef,
  unknown
> = z.object({
  reason: Reason$inboundSchema,
});

/** @internal */
export type IncompleteDetails$Outbound = {
  reason: string;
};

/** @internal */
export const IncompleteDetails$outboundSchema: z.ZodType<
  IncompleteDetails$Outbound,
  z.ZodTypeDef,
  IncompleteDetails
> = z.object({
  reason: Reason$outboundSchema,
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace IncompleteDetails$ {
  /** @deprecated use `IncompleteDetails$inboundSchema` instead. */
  export const inboundSchema = IncompleteDetails$inboundSchema;
  /** @deprecated use `IncompleteDetails$outboundSchema` instead. */
  export const outboundSchema = IncompleteDetails$outboundSchema;
  /** @deprecated use `IncompleteDetails$Outbound` instead. */
  export type Outbound = IncompleteDetails$Outbound;
}

export function incompleteDetailsToJSON(
  incompleteDetails: IncompleteDetails,
): string {
  return JSON.stringify(
    IncompleteDetails$outboundSchema.parse(incompleteDetails),
  );
}

export function incompleteDetailsFromJSON(
  jsonString: string,
): SafeParseResult<IncompleteDetails, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => IncompleteDetails$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'IncompleteDetails' from JSON`,
  );
}

/** @internal */
export const CreateResponseOutputProxyResponseType$inboundSchema:
  z.ZodNativeEnum<typeof CreateResponseOutputProxyResponseType> = z.nativeEnum(
    CreateResponseOutputProxyResponseType,
  );

/** @internal */
export const CreateResponseOutputProxyResponseType$outboundSchema:
  z.ZodNativeEnum<typeof CreateResponseOutputProxyResponseType> =
    CreateResponseOutputProxyResponseType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateResponseOutputProxyResponseType$ {
  /** @deprecated use `CreateResponseOutputProxyResponseType$inboundSchema` instead. */
  export const inboundSchema =
    CreateResponseOutputProxyResponseType$inboundSchema;
  /** @deprecated use `CreateResponseOutputProxyResponseType$outboundSchema` instead. */
  export const outboundSchema =
    CreateResponseOutputProxyResponseType$outboundSchema;
}

/** @internal */
export const CreateResponseOutputProxyResponseStatus$inboundSchema:
  z.ZodNativeEnum<typeof CreateResponseOutputProxyResponseStatus> = z
    .nativeEnum(CreateResponseOutputProxyResponseStatus);

/** @internal */
export const CreateResponseOutputProxyResponseStatus$outboundSchema:
  z.ZodNativeEnum<typeof CreateResponseOutputProxyResponseStatus> =
    CreateResponseOutputProxyResponseStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateResponseOutputProxyResponseStatus$ {
  /** @deprecated use `CreateResponseOutputProxyResponseStatus$inboundSchema` instead. */
  export const inboundSchema =
    CreateResponseOutputProxyResponseStatus$inboundSchema;
  /** @deprecated use `CreateResponseOutputProxyResponseStatus$outboundSchema` instead. */
  export const outboundSchema =
    CreateResponseOutputProxyResponseStatus$outboundSchema;
}

/** @internal */
export const Output4$inboundSchema: z.ZodType<Output4, z.ZodTypeDef, unknown> =
  z.object({
    id: z.string(),
    type: CreateResponseOutputProxyResponseType$inboundSchema,
    call_id: z.string(),
    name: z.string(),
    arguments: z.string(),
    status: CreateResponseOutputProxyResponseStatus$inboundSchema,
  }).transform((v) => {
    return remap$(v, {
      "call_id": "callId",
    });
  });

/** @internal */
export type Output4$Outbound = {
  id: string;
  type: string;
  call_id: string;
  name: string;
  arguments: string;
  status: string;
};

/** @internal */
export const Output4$outboundSchema: z.ZodType<
  Output4$Outbound,
  z.ZodTypeDef,
  Output4
> = z.object({
  id: z.string(),
  type: CreateResponseOutputProxyResponseType$outboundSchema,
  callId: z.string(),
  name: z.string(),
  arguments: z.string(),
  status: CreateResponseOutputProxyResponseStatus$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    callId: "call_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Output4$ {
  /** @deprecated use `Output4$inboundSchema` instead. */
  export const inboundSchema = Output4$inboundSchema;
  /** @deprecated use `Output4$outboundSchema` instead. */
  export const outboundSchema = Output4$outboundSchema;
  /** @deprecated use `Output4$Outbound` instead. */
  export type Outbound = Output4$Outbound;
}

export function output4ToJSON(output4: Output4): string {
  return JSON.stringify(Output4$outboundSchema.parse(output4));
}

export function output4FromJSON(
  jsonString: string,
): SafeParseResult<Output4, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Output4$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Output4' from JSON`,
  );
}

/** @internal */
export const CreateResponseOutputProxyType$inboundSchema: z.ZodNativeEnum<
  typeof CreateResponseOutputProxyType
> = z.nativeEnum(CreateResponseOutputProxyType);

/** @internal */
export const CreateResponseOutputProxyType$outboundSchema: z.ZodNativeEnum<
  typeof CreateResponseOutputProxyType
> = CreateResponseOutputProxyType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateResponseOutputProxyType$ {
  /** @deprecated use `CreateResponseOutputProxyType$inboundSchema` instead. */
  export const inboundSchema = CreateResponseOutputProxyType$inboundSchema;
  /** @deprecated use `CreateResponseOutputProxyType$outboundSchema` instead. */
  export const outboundSchema = CreateResponseOutputProxyType$outboundSchema;
}

/** @internal */
export const CreateResponseOutputProxyStatus$inboundSchema: z.ZodNativeEnum<
  typeof CreateResponseOutputProxyStatus
> = z.nativeEnum(CreateResponseOutputProxyStatus);

/** @internal */
export const CreateResponseOutputProxyStatus$outboundSchema: z.ZodNativeEnum<
  typeof CreateResponseOutputProxyStatus
> = CreateResponseOutputProxyStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateResponseOutputProxyStatus$ {
  /** @deprecated use `CreateResponseOutputProxyStatus$inboundSchema` instead. */
  export const inboundSchema = CreateResponseOutputProxyStatus$inboundSchema;
  /** @deprecated use `CreateResponseOutputProxyStatus$outboundSchema` instead. */
  export const outboundSchema = CreateResponseOutputProxyStatus$outboundSchema;
}

/** @internal */
export const Output3$inboundSchema: z.ZodType<Output3, z.ZodTypeDef, unknown> =
  z.object({
    id: z.string(),
    type: CreateResponseOutputProxyType$inboundSchema,
    status: CreateResponseOutputProxyStatus$inboundSchema,
    queries: z.array(z.string()).optional(),
    results: z.any().optional(),
  });

/** @internal */
export type Output3$Outbound = {
  id: string;
  type: string;
  status: string;
  queries?: Array<string> | undefined;
  results?: any | undefined;
};

/** @internal */
export const Output3$outboundSchema: z.ZodType<
  Output3$Outbound,
  z.ZodTypeDef,
  Output3
> = z.object({
  id: z.string(),
  type: CreateResponseOutputProxyType$outboundSchema,
  status: CreateResponseOutputProxyStatus$outboundSchema,
  queries: z.array(z.string()).optional(),
  results: z.any().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Output3$ {
  /** @deprecated use `Output3$inboundSchema` instead. */
  export const inboundSchema = Output3$inboundSchema;
  /** @deprecated use `Output3$outboundSchema` instead. */
  export const outboundSchema = Output3$outboundSchema;
  /** @deprecated use `Output3$Outbound` instead. */
  export type Outbound = Output3$Outbound;
}

export function output3ToJSON(output3: Output3): string {
  return JSON.stringify(Output3$outboundSchema.parse(output3));
}

export function output3FromJSON(
  jsonString: string,
): SafeParseResult<Output3, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Output3$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Output3' from JSON`,
  );
}

/** @internal */
export const CreateResponseOutputType$inboundSchema: z.ZodNativeEnum<
  typeof CreateResponseOutputType
> = z.nativeEnum(CreateResponseOutputType);

/** @internal */
export const CreateResponseOutputType$outboundSchema: z.ZodNativeEnum<
  typeof CreateResponseOutputType
> = CreateResponseOutputType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateResponseOutputType$ {
  /** @deprecated use `CreateResponseOutputType$inboundSchema` instead. */
  export const inboundSchema = CreateResponseOutputType$inboundSchema;
  /** @deprecated use `CreateResponseOutputType$outboundSchema` instead. */
  export const outboundSchema = CreateResponseOutputType$outboundSchema;
}

/** @internal */
export const CreateResponseOutputStatus$inboundSchema: z.ZodNativeEnum<
  typeof CreateResponseOutputStatus
> = z.nativeEnum(CreateResponseOutputStatus);

/** @internal */
export const CreateResponseOutputStatus$outboundSchema: z.ZodNativeEnum<
  typeof CreateResponseOutputStatus
> = CreateResponseOutputStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateResponseOutputStatus$ {
  /** @deprecated use `CreateResponseOutputStatus$inboundSchema` instead. */
  export const inboundSchema = CreateResponseOutputStatus$inboundSchema;
  /** @deprecated use `CreateResponseOutputStatus$outboundSchema` instead. */
  export const outboundSchema = CreateResponseOutputStatus$outboundSchema;
}

/** @internal */
export const Output2$inboundSchema: z.ZodType<Output2, z.ZodTypeDef, unknown> =
  z.object({
    id: z.string(),
    type: CreateResponseOutputType$inboundSchema,
    status: CreateResponseOutputStatus$inboundSchema,
  });

/** @internal */
export type Output2$Outbound = {
  id: string;
  type: string;
  status: string;
};

/** @internal */
export const Output2$outboundSchema: z.ZodType<
  Output2$Outbound,
  z.ZodTypeDef,
  Output2
> = z.object({
  id: z.string(),
  type: CreateResponseOutputType$outboundSchema,
  status: CreateResponseOutputStatus$outboundSchema,
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Output2$ {
  /** @deprecated use `Output2$inboundSchema` instead. */
  export const inboundSchema = Output2$inboundSchema;
  /** @deprecated use `Output2$outboundSchema` instead. */
  export const outboundSchema = Output2$outboundSchema;
  /** @deprecated use `Output2$Outbound` instead. */
  export type Outbound = Output2$Outbound;
}

export function output2ToJSON(output2: Output2): string {
  return JSON.stringify(Output2$outboundSchema.parse(output2));
}

export function output2FromJSON(
  jsonString: string,
): SafeParseResult<Output2, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Output2$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Output2' from JSON`,
  );
}

/** @internal */
export const OutputType$inboundSchema: z.ZodNativeEnum<typeof OutputType> = z
  .nativeEnum(OutputType);

/** @internal */
export const OutputType$outboundSchema: z.ZodNativeEnum<typeof OutputType> =
  OutputType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OutputType$ {
  /** @deprecated use `OutputType$inboundSchema` instead. */
  export const inboundSchema = OutputType$inboundSchema;
  /** @deprecated use `OutputType$outboundSchema` instead. */
  export const outboundSchema = OutputType$outboundSchema;
}

/** @internal */
export const OutputRole$inboundSchema: z.ZodNativeEnum<typeof OutputRole> = z
  .nativeEnum(OutputRole);

/** @internal */
export const OutputRole$outboundSchema: z.ZodNativeEnum<typeof OutputRole> =
  OutputRole$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OutputRole$ {
  /** @deprecated use `OutputRole$inboundSchema` instead. */
  export const inboundSchema = OutputRole$inboundSchema;
  /** @deprecated use `OutputRole$outboundSchema` instead. */
  export const outboundSchema = OutputRole$outboundSchema;
}

/** @internal */
export const OutputStatus$inboundSchema: z.ZodNativeEnum<typeof OutputStatus> =
  z.nativeEnum(OutputStatus);

/** @internal */
export const OutputStatus$outboundSchema: z.ZodNativeEnum<typeof OutputStatus> =
  OutputStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OutputStatus$ {
  /** @deprecated use `OutputStatus$inboundSchema` instead. */
  export const inboundSchema = OutputStatus$inboundSchema;
  /** @deprecated use `OutputStatus$outboundSchema` instead. */
  export const outboundSchema = OutputStatus$outboundSchema;
}

/** @internal */
export const ContentType$inboundSchema: z.ZodNativeEnum<typeof ContentType> = z
  .nativeEnum(ContentType);

/** @internal */
export const ContentType$outboundSchema: z.ZodNativeEnum<typeof ContentType> =
  ContentType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ContentType$ {
  /** @deprecated use `ContentType$inboundSchema` instead. */
  export const inboundSchema = ContentType$inboundSchema;
  /** @deprecated use `ContentType$outboundSchema` instead. */
  export const outboundSchema = ContentType$outboundSchema;
}

/** @internal */
export const CreateResponseAnnotationsProxyType$inboundSchema: z.ZodNativeEnum<
  typeof CreateResponseAnnotationsProxyType
> = z.nativeEnum(CreateResponseAnnotationsProxyType);

/** @internal */
export const CreateResponseAnnotationsProxyType$outboundSchema: z.ZodNativeEnum<
  typeof CreateResponseAnnotationsProxyType
> = CreateResponseAnnotationsProxyType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateResponseAnnotationsProxyType$ {
  /** @deprecated use `CreateResponseAnnotationsProxyType$inboundSchema` instead. */
  export const inboundSchema = CreateResponseAnnotationsProxyType$inboundSchema;
  /** @deprecated use `CreateResponseAnnotationsProxyType$outboundSchema` instead. */
  export const outboundSchema =
    CreateResponseAnnotationsProxyType$outboundSchema;
}

/** @internal */
export const CreateResponseAnnotations2$inboundSchema: z.ZodType<
  CreateResponseAnnotations2,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: CreateResponseAnnotationsProxyType$inboundSchema,
  index: z.number(),
  file_id: z.string(),
  filename: z.string(),
}).transform((v) => {
  return remap$(v, {
    "file_id": "fileId",
  });
});

/** @internal */
export type CreateResponseAnnotations2$Outbound = {
  type: string;
  index: number;
  file_id: string;
  filename: string;
};

/** @internal */
export const CreateResponseAnnotations2$outboundSchema: z.ZodType<
  CreateResponseAnnotations2$Outbound,
  z.ZodTypeDef,
  CreateResponseAnnotations2
> = z.object({
  type: CreateResponseAnnotationsProxyType$outboundSchema,
  index: z.number(),
  fileId: z.string(),
  filename: z.string(),
}).transform((v) => {
  return remap$(v, {
    fileId: "file_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateResponseAnnotations2$ {
  /** @deprecated use `CreateResponseAnnotations2$inboundSchema` instead. */
  export const inboundSchema = CreateResponseAnnotations2$inboundSchema;
  /** @deprecated use `CreateResponseAnnotations2$outboundSchema` instead. */
  export const outboundSchema = CreateResponseAnnotations2$outboundSchema;
  /** @deprecated use `CreateResponseAnnotations2$Outbound` instead. */
  export type Outbound = CreateResponseAnnotations2$Outbound;
}

export function createResponseAnnotations2ToJSON(
  createResponseAnnotations2: CreateResponseAnnotations2,
): string {
  return JSON.stringify(
    CreateResponseAnnotations2$outboundSchema.parse(createResponseAnnotations2),
  );
}

export function createResponseAnnotations2FromJSON(
  jsonString: string,
): SafeParseResult<CreateResponseAnnotations2, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateResponseAnnotations2$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateResponseAnnotations2' from JSON`,
  );
}

/** @internal */
export const CreateResponseAnnotationsType$inboundSchema: z.ZodNativeEnum<
  typeof CreateResponseAnnotationsType
> = z.nativeEnum(CreateResponseAnnotationsType);

/** @internal */
export const CreateResponseAnnotationsType$outboundSchema: z.ZodNativeEnum<
  typeof CreateResponseAnnotationsType
> = CreateResponseAnnotationsType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateResponseAnnotationsType$ {
  /** @deprecated use `CreateResponseAnnotationsType$inboundSchema` instead. */
  export const inboundSchema = CreateResponseAnnotationsType$inboundSchema;
  /** @deprecated use `CreateResponseAnnotationsType$outboundSchema` instead. */
  export const outboundSchema = CreateResponseAnnotationsType$outboundSchema;
}

/** @internal */
export const CreateResponseAnnotations1$inboundSchema: z.ZodType<
  CreateResponseAnnotations1,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: CreateResponseAnnotationsType$inboundSchema,
  start_index: z.number(),
  end_index: z.number(),
  url: z.string(),
  title: z.string(),
}).transform((v) => {
  return remap$(v, {
    "start_index": "startIndex",
    "end_index": "endIndex",
  });
});

/** @internal */
export type CreateResponseAnnotations1$Outbound = {
  type: string;
  start_index: number;
  end_index: number;
  url: string;
  title: string;
};

/** @internal */
export const CreateResponseAnnotations1$outboundSchema: z.ZodType<
  CreateResponseAnnotations1$Outbound,
  z.ZodTypeDef,
  CreateResponseAnnotations1
> = z.object({
  type: CreateResponseAnnotationsType$outboundSchema,
  startIndex: z.number(),
  endIndex: z.number(),
  url: z.string(),
  title: z.string(),
}).transform((v) => {
  return remap$(v, {
    startIndex: "start_index",
    endIndex: "end_index",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateResponseAnnotations1$ {
  /** @deprecated use `CreateResponseAnnotations1$inboundSchema` instead. */
  export const inboundSchema = CreateResponseAnnotations1$inboundSchema;
  /** @deprecated use `CreateResponseAnnotations1$outboundSchema` instead. */
  export const outboundSchema = CreateResponseAnnotations1$outboundSchema;
  /** @deprecated use `CreateResponseAnnotations1$Outbound` instead. */
  export type Outbound = CreateResponseAnnotations1$Outbound;
}

export function createResponseAnnotations1ToJSON(
  createResponseAnnotations1: CreateResponseAnnotations1,
): string {
  return JSON.stringify(
    CreateResponseAnnotations1$outboundSchema.parse(createResponseAnnotations1),
  );
}

export function createResponseAnnotations1FromJSON(
  jsonString: string,
): SafeParseResult<CreateResponseAnnotations1, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateResponseAnnotations1$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateResponseAnnotations1' from JSON`,
  );
}

/** @internal */
export const ContentAnnotations$inboundSchema: z.ZodType<
  ContentAnnotations,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => CreateResponseAnnotations1$inboundSchema),
  z.lazy(() => CreateResponseAnnotations2$inboundSchema),
]);

/** @internal */
export type ContentAnnotations$Outbound =
  | CreateResponseAnnotations1$Outbound
  | CreateResponseAnnotations2$Outbound;

/** @internal */
export const ContentAnnotations$outboundSchema: z.ZodType<
  ContentAnnotations$Outbound,
  z.ZodTypeDef,
  ContentAnnotations
> = z.union([
  z.lazy(() => CreateResponseAnnotations1$outboundSchema),
  z.lazy(() => CreateResponseAnnotations2$outboundSchema),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ContentAnnotations$ {
  /** @deprecated use `ContentAnnotations$inboundSchema` instead. */
  export const inboundSchema = ContentAnnotations$inboundSchema;
  /** @deprecated use `ContentAnnotations$outboundSchema` instead. */
  export const outboundSchema = ContentAnnotations$outboundSchema;
  /** @deprecated use `ContentAnnotations$Outbound` instead. */
  export type Outbound = ContentAnnotations$Outbound;
}

export function contentAnnotationsToJSON(
  contentAnnotations: ContentAnnotations,
): string {
  return JSON.stringify(
    ContentAnnotations$outboundSchema.parse(contentAnnotations),
  );
}

export function contentAnnotationsFromJSON(
  jsonString: string,
): SafeParseResult<ContentAnnotations, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ContentAnnotations$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ContentAnnotations' from JSON`,
  );
}

/** @internal */
export const Content1$inboundSchema: z.ZodType<
  Content1,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: ContentType$inboundSchema,
  text: z.string(),
  annotations: z.array(
    z.union([
      z.lazy(() => CreateResponseAnnotations1$inboundSchema),
      z.lazy(() => CreateResponseAnnotations2$inboundSchema),
    ]),
  ).optional(),
  logprobs: z.array(z.any()).optional(),
});

/** @internal */
export type Content1$Outbound = {
  type: string;
  text: string;
  annotations?:
    | Array<
      CreateResponseAnnotations1$Outbound | CreateResponseAnnotations2$Outbound
    >
    | undefined;
  logprobs?: Array<any> | undefined;
};

/** @internal */
export const Content1$outboundSchema: z.ZodType<
  Content1$Outbound,
  z.ZodTypeDef,
  Content1
> = z.object({
  type: ContentType$outboundSchema,
  text: z.string(),
  annotations: z.array(
    z.union([
      z.lazy(() => CreateResponseAnnotations1$outboundSchema),
      z.lazy(() => CreateResponseAnnotations2$outboundSchema),
    ]),
  ).optional(),
  logprobs: z.array(z.any()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Content1$ {
  /** @deprecated use `Content1$inboundSchema` instead. */
  export const inboundSchema = Content1$inboundSchema;
  /** @deprecated use `Content1$outboundSchema` instead. */
  export const outboundSchema = Content1$outboundSchema;
  /** @deprecated use `Content1$Outbound` instead. */
  export type Outbound = Content1$Outbound;
}

export function content1ToJSON(content1: Content1): string {
  return JSON.stringify(Content1$outboundSchema.parse(content1));
}

export function content1FromJSON(
  jsonString: string,
): SafeParseResult<Content1, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Content1$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Content1' from JSON`,
  );
}

/** @internal */
export const OutputContent$inboundSchema: z.ZodType<
  OutputContent,
  z.ZodTypeDef,
  unknown
> = z.lazy(() => Content1$inboundSchema);

/** @internal */
export type OutputContent$Outbound = Content1$Outbound;

/** @internal */
export const OutputContent$outboundSchema: z.ZodType<
  OutputContent$Outbound,
  z.ZodTypeDef,
  OutputContent
> = z.lazy(() => Content1$outboundSchema);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OutputContent$ {
  /** @deprecated use `OutputContent$inboundSchema` instead. */
  export const inboundSchema = OutputContent$inboundSchema;
  /** @deprecated use `OutputContent$outboundSchema` instead. */
  export const outboundSchema = OutputContent$outboundSchema;
  /** @deprecated use `OutputContent$Outbound` instead. */
  export type Outbound = OutputContent$Outbound;
}

export function outputContentToJSON(outputContent: OutputContent): string {
  return JSON.stringify(OutputContent$outboundSchema.parse(outputContent));
}

export function outputContentFromJSON(
  jsonString: string,
): SafeParseResult<OutputContent, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => OutputContent$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'OutputContent' from JSON`,
  );
}

/** @internal */
export const Output1$inboundSchema: z.ZodType<Output1, z.ZodTypeDef, unknown> =
  z.object({
    id: z.string(),
    type: OutputType$inboundSchema,
    role: OutputRole$inboundSchema,
    status: OutputStatus$inboundSchema,
    content: z.array(z.lazy(() => Content1$inboundSchema)).optional(),
  });

/** @internal */
export type Output1$Outbound = {
  id: string;
  type: string;
  role: string;
  status: string;
  content?: Array<Content1$Outbound> | undefined;
};

/** @internal */
export const Output1$outboundSchema: z.ZodType<
  Output1$Outbound,
  z.ZodTypeDef,
  Output1
> = z.object({
  id: z.string(),
  type: OutputType$outboundSchema,
  role: OutputRole$outboundSchema,
  status: OutputStatus$outboundSchema,
  content: z.array(z.lazy(() => Content1$outboundSchema)).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Output1$ {
  /** @deprecated use `Output1$inboundSchema` instead. */
  export const inboundSchema = Output1$inboundSchema;
  /** @deprecated use `Output1$outboundSchema` instead. */
  export const outboundSchema = Output1$outboundSchema;
  /** @deprecated use `Output1$Outbound` instead. */
  export type Outbound = Output1$Outbound;
}

export function output1ToJSON(output1: Output1): string {
  return JSON.stringify(Output1$outboundSchema.parse(output1));
}

export function output1FromJSON(
  jsonString: string,
): SafeParseResult<Output1, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Output1$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Output1' from JSON`,
  );
}

/** @internal */
export const Output$inboundSchema: z.ZodType<Output, z.ZodTypeDef, unknown> = z
  .union([
    z.lazy(() => Output4$inboundSchema),
    z.lazy(() => Output1$inboundSchema),
    z.lazy(() => Output2$inboundSchema),
    z.lazy(() => Output3$inboundSchema),
  ]);

/** @internal */
export type Output$Outbound =
  | Output4$Outbound
  | Output1$Outbound
  | Output2$Outbound
  | Output3$Outbound;

/** @internal */
export const Output$outboundSchema: z.ZodType<
  Output$Outbound,
  z.ZodTypeDef,
  Output
> = z.union([
  z.lazy(() => Output4$outboundSchema),
  z.lazy(() => Output1$outboundSchema),
  z.lazy(() => Output2$outboundSchema),
  z.lazy(() => Output3$outboundSchema),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Output$ {
  /** @deprecated use `Output$inboundSchema` instead. */
  export const inboundSchema = Output$inboundSchema;
  /** @deprecated use `Output$outboundSchema` instead. */
  export const outboundSchema = Output$outboundSchema;
  /** @deprecated use `Output$Outbound` instead. */
  export type Outbound = Output$Outbound;
}

export function outputToJSON(output: Output): string {
  return JSON.stringify(Output$outboundSchema.parse(output));
}

export function outputFromJSON(
  jsonString: string,
): SafeParseResult<Output, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Output$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Output' from JSON`,
  );
}

/** @internal */
export const CreateResponseInputTokensDetails$inboundSchema: z.ZodType<
  CreateResponseInputTokensDetails,
  z.ZodTypeDef,
  unknown
> = z.object({
  cached_tokens: z.number().int().optional(),
}).transform((v) => {
  return remap$(v, {
    "cached_tokens": "cachedTokens",
  });
});

/** @internal */
export type CreateResponseInputTokensDetails$Outbound = {
  cached_tokens?: number | undefined;
};

/** @internal */
export const CreateResponseInputTokensDetails$outboundSchema: z.ZodType<
  CreateResponseInputTokensDetails$Outbound,
  z.ZodTypeDef,
  CreateResponseInputTokensDetails
> = z.object({
  cachedTokens: z.number().int().optional(),
}).transform((v) => {
  return remap$(v, {
    cachedTokens: "cached_tokens",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateResponseInputTokensDetails$ {
  /** @deprecated use `CreateResponseInputTokensDetails$inboundSchema` instead. */
  export const inboundSchema = CreateResponseInputTokensDetails$inboundSchema;
  /** @deprecated use `CreateResponseInputTokensDetails$outboundSchema` instead. */
  export const outboundSchema = CreateResponseInputTokensDetails$outboundSchema;
  /** @deprecated use `CreateResponseInputTokensDetails$Outbound` instead. */
  export type Outbound = CreateResponseInputTokensDetails$Outbound;
}

export function createResponseInputTokensDetailsToJSON(
  createResponseInputTokensDetails: CreateResponseInputTokensDetails,
): string {
  return JSON.stringify(
    CreateResponseInputTokensDetails$outboundSchema.parse(
      createResponseInputTokensDetails,
    ),
  );
}

export function createResponseInputTokensDetailsFromJSON(
  jsonString: string,
): SafeParseResult<CreateResponseInputTokensDetails, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateResponseInputTokensDetails$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateResponseInputTokensDetails' from JSON`,
  );
}

/** @internal */
export const OutputTokensDetails$inboundSchema: z.ZodType<
  OutputTokensDetails,
  z.ZodTypeDef,
  unknown
> = z.object({
  reasoning_tokens: z.number().int().optional(),
  accepted_prediction_tokens: z.number().int().optional(),
  rejected_prediction_tokens: z.number().int().optional(),
}).transform((v) => {
  return remap$(v, {
    "reasoning_tokens": "reasoningTokens",
    "accepted_prediction_tokens": "acceptedPredictionTokens",
    "rejected_prediction_tokens": "rejectedPredictionTokens",
  });
});

/** @internal */
export type OutputTokensDetails$Outbound = {
  reasoning_tokens?: number | undefined;
  accepted_prediction_tokens?: number | undefined;
  rejected_prediction_tokens?: number | undefined;
};

/** @internal */
export const OutputTokensDetails$outboundSchema: z.ZodType<
  OutputTokensDetails$Outbound,
  z.ZodTypeDef,
  OutputTokensDetails
> = z.object({
  reasoningTokens: z.number().int().optional(),
  acceptedPredictionTokens: z.number().int().optional(),
  rejectedPredictionTokens: z.number().int().optional(),
}).transform((v) => {
  return remap$(v, {
    reasoningTokens: "reasoning_tokens",
    acceptedPredictionTokens: "accepted_prediction_tokens",
    rejectedPredictionTokens: "rejected_prediction_tokens",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OutputTokensDetails$ {
  /** @deprecated use `OutputTokensDetails$inboundSchema` instead. */
  export const inboundSchema = OutputTokensDetails$inboundSchema;
  /** @deprecated use `OutputTokensDetails$outboundSchema` instead. */
  export const outboundSchema = OutputTokensDetails$outboundSchema;
  /** @deprecated use `OutputTokensDetails$Outbound` instead. */
  export type Outbound = OutputTokensDetails$Outbound;
}

export function outputTokensDetailsToJSON(
  outputTokensDetails: OutputTokensDetails,
): string {
  return JSON.stringify(
    OutputTokensDetails$outboundSchema.parse(outputTokensDetails),
  );
}

export function outputTokensDetailsFromJSON(
  jsonString: string,
): SafeParseResult<OutputTokensDetails, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => OutputTokensDetails$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'OutputTokensDetails' from JSON`,
  );
}

/** @internal */
export const CreateResponseUsage$inboundSchema: z.ZodType<
  CreateResponseUsage,
  z.ZodTypeDef,
  unknown
> = z.object({
  input_tokens: z.number().optional(),
  output_tokens: z.number().optional(),
  total_tokens: z.number().optional(),
  input_tokens_details: z.lazy(() =>
    CreateResponseInputTokensDetails$inboundSchema
  ).optional(),
  output_tokens_details: z.lazy(() => OutputTokensDetails$inboundSchema)
    .optional(),
}).transform((v) => {
  return remap$(v, {
    "input_tokens": "inputTokens",
    "output_tokens": "outputTokens",
    "total_tokens": "totalTokens",
    "input_tokens_details": "inputTokensDetails",
    "output_tokens_details": "outputTokensDetails",
  });
});

/** @internal */
export type CreateResponseUsage$Outbound = {
  input_tokens?: number | undefined;
  output_tokens?: number | undefined;
  total_tokens?: number | undefined;
  input_tokens_details?: CreateResponseInputTokensDetails$Outbound | undefined;
  output_tokens_details?: OutputTokensDetails$Outbound | undefined;
};

/** @internal */
export const CreateResponseUsage$outboundSchema: z.ZodType<
  CreateResponseUsage$Outbound,
  z.ZodTypeDef,
  CreateResponseUsage
> = z.object({
  inputTokens: z.number().optional(),
  outputTokens: z.number().optional(),
  totalTokens: z.number().optional(),
  inputTokensDetails: z.lazy(() =>
    CreateResponseInputTokensDetails$outboundSchema
  ).optional(),
  outputTokensDetails: z.lazy(() => OutputTokensDetails$outboundSchema)
    .optional(),
}).transform((v) => {
  return remap$(v, {
    inputTokens: "input_tokens",
    outputTokens: "output_tokens",
    totalTokens: "total_tokens",
    inputTokensDetails: "input_tokens_details",
    outputTokensDetails: "output_tokens_details",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateResponseUsage$ {
  /** @deprecated use `CreateResponseUsage$inboundSchema` instead. */
  export const inboundSchema = CreateResponseUsage$inboundSchema;
  /** @deprecated use `CreateResponseUsage$outboundSchema` instead. */
  export const outboundSchema = CreateResponseUsage$outboundSchema;
  /** @deprecated use `CreateResponseUsage$Outbound` instead. */
  export type Outbound = CreateResponseUsage$Outbound;
}

export function createResponseUsageToJSON(
  createResponseUsage: CreateResponseUsage,
): string {
  return JSON.stringify(
    CreateResponseUsage$outboundSchema.parse(createResponseUsage),
  );
}

export function createResponseUsageFromJSON(
  jsonString: string,
): SafeParseResult<CreateResponseUsage, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateResponseUsage$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateResponseUsage' from JSON`,
  );
}

/** @internal */
export const CreateResponseToolChoiceProxyResponseType$inboundSchema:
  z.ZodNativeEnum<typeof CreateResponseToolChoiceProxyResponseType> = z
    .nativeEnum(CreateResponseToolChoiceProxyResponseType);

/** @internal */
export const CreateResponseToolChoiceProxyResponseType$outboundSchema:
  z.ZodNativeEnum<typeof CreateResponseToolChoiceProxyResponseType> =
    CreateResponseToolChoiceProxyResponseType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateResponseToolChoiceProxyResponseType$ {
  /** @deprecated use `CreateResponseToolChoiceProxyResponseType$inboundSchema` instead. */
  export const inboundSchema =
    CreateResponseToolChoiceProxyResponseType$inboundSchema;
  /** @deprecated use `CreateResponseToolChoiceProxyResponseType$outboundSchema` instead. */
  export const outboundSchema =
    CreateResponseToolChoiceProxyResponseType$outboundSchema;
}

/** @internal */
export const CreateResponseToolChoiceFunction$inboundSchema: z.ZodType<
  CreateResponseToolChoiceFunction,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.string(),
});

/** @internal */
export type CreateResponseToolChoiceFunction$Outbound = {
  name: string;
};

/** @internal */
export const CreateResponseToolChoiceFunction$outboundSchema: z.ZodType<
  CreateResponseToolChoiceFunction$Outbound,
  z.ZodTypeDef,
  CreateResponseToolChoiceFunction
> = z.object({
  name: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateResponseToolChoiceFunction$ {
  /** @deprecated use `CreateResponseToolChoiceFunction$inboundSchema` instead. */
  export const inboundSchema = CreateResponseToolChoiceFunction$inboundSchema;
  /** @deprecated use `CreateResponseToolChoiceFunction$outboundSchema` instead. */
  export const outboundSchema = CreateResponseToolChoiceFunction$outboundSchema;
  /** @deprecated use `CreateResponseToolChoiceFunction$Outbound` instead. */
  export type Outbound = CreateResponseToolChoiceFunction$Outbound;
}

export function createResponseToolChoiceFunctionToJSON(
  createResponseToolChoiceFunction: CreateResponseToolChoiceFunction,
): string {
  return JSON.stringify(
    CreateResponseToolChoiceFunction$outboundSchema.parse(
      createResponseToolChoiceFunction,
    ),
  );
}

export function createResponseToolChoiceFunctionFromJSON(
  jsonString: string,
): SafeParseResult<CreateResponseToolChoiceFunction, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateResponseToolChoiceFunction$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateResponseToolChoiceFunction' from JSON`,
  );
}

/** @internal */
export const CreateResponseToolChoiceProxy2$inboundSchema: z.ZodType<
  CreateResponseToolChoiceProxy2,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: CreateResponseToolChoiceProxyResponseType$inboundSchema,
  function: z.lazy(() => CreateResponseToolChoiceFunction$inboundSchema),
});

/** @internal */
export type CreateResponseToolChoiceProxy2$Outbound = {
  type: string;
  function: CreateResponseToolChoiceFunction$Outbound;
};

/** @internal */
export const CreateResponseToolChoiceProxy2$outboundSchema: z.ZodType<
  CreateResponseToolChoiceProxy2$Outbound,
  z.ZodTypeDef,
  CreateResponseToolChoiceProxy2
> = z.object({
  type: CreateResponseToolChoiceProxyResponseType$outboundSchema,
  function: z.lazy(() => CreateResponseToolChoiceFunction$outboundSchema),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateResponseToolChoiceProxy2$ {
  /** @deprecated use `CreateResponseToolChoiceProxy2$inboundSchema` instead. */
  export const inboundSchema = CreateResponseToolChoiceProxy2$inboundSchema;
  /** @deprecated use `CreateResponseToolChoiceProxy2$outboundSchema` instead. */
  export const outboundSchema = CreateResponseToolChoiceProxy2$outboundSchema;
  /** @deprecated use `CreateResponseToolChoiceProxy2$Outbound` instead. */
  export type Outbound = CreateResponseToolChoiceProxy2$Outbound;
}

export function createResponseToolChoiceProxy2ToJSON(
  createResponseToolChoiceProxy2: CreateResponseToolChoiceProxy2,
): string {
  return JSON.stringify(
    CreateResponseToolChoiceProxy2$outboundSchema.parse(
      createResponseToolChoiceProxy2,
    ),
  );
}

export function createResponseToolChoiceProxy2FromJSON(
  jsonString: string,
): SafeParseResult<CreateResponseToolChoiceProxy2, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateResponseToolChoiceProxy2$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateResponseToolChoiceProxy2' from JSON`,
  );
}

/** @internal */
export const CreateResponseToolChoiceProxy1$inboundSchema: z.ZodNativeEnum<
  typeof CreateResponseToolChoiceProxy1
> = z.nativeEnum(CreateResponseToolChoiceProxy1);

/** @internal */
export const CreateResponseToolChoiceProxy1$outboundSchema: z.ZodNativeEnum<
  typeof CreateResponseToolChoiceProxy1
> = CreateResponseToolChoiceProxy1$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateResponseToolChoiceProxy1$ {
  /** @deprecated use `CreateResponseToolChoiceProxy1$inboundSchema` instead. */
  export const inboundSchema = CreateResponseToolChoiceProxy1$inboundSchema;
  /** @deprecated use `CreateResponseToolChoiceProxy1$outboundSchema` instead. */
  export const outboundSchema = CreateResponseToolChoiceProxy1$outboundSchema;
}

/** @internal */
export const CreateResponseProxyToolChoice$inboundSchema: z.ZodType<
  CreateResponseProxyToolChoice,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => CreateResponseToolChoiceProxy2$inboundSchema),
  CreateResponseToolChoiceProxy1$inboundSchema,
]);

/** @internal */
export type CreateResponseProxyToolChoice$Outbound =
  | CreateResponseToolChoiceProxy2$Outbound
  | string;

/** @internal */
export const CreateResponseProxyToolChoice$outboundSchema: z.ZodType<
  CreateResponseProxyToolChoice$Outbound,
  z.ZodTypeDef,
  CreateResponseProxyToolChoice
> = z.union([
  z.lazy(() => CreateResponseToolChoiceProxy2$outboundSchema),
  CreateResponseToolChoiceProxy1$outboundSchema,
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateResponseProxyToolChoice$ {
  /** @deprecated use `CreateResponseProxyToolChoice$inboundSchema` instead. */
  export const inboundSchema = CreateResponseProxyToolChoice$inboundSchema;
  /** @deprecated use `CreateResponseProxyToolChoice$outboundSchema` instead. */
  export const outboundSchema = CreateResponseProxyToolChoice$outboundSchema;
  /** @deprecated use `CreateResponseProxyToolChoice$Outbound` instead. */
  export type Outbound = CreateResponseProxyToolChoice$Outbound;
}

export function createResponseProxyToolChoiceToJSON(
  createResponseProxyToolChoice: CreateResponseProxyToolChoice,
): string {
  return JSON.stringify(
    CreateResponseProxyToolChoice$outboundSchema.parse(
      createResponseProxyToolChoice,
    ),
  );
}

export function createResponseProxyToolChoiceFromJSON(
  jsonString: string,
): SafeParseResult<CreateResponseProxyToolChoice, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateResponseProxyToolChoice$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateResponseProxyToolChoice' from JSON`,
  );
}

/** @internal */
export const CreateResponseToolsProxyResponse200ApplicationJSONType$inboundSchema:
  z.ZodNativeEnum<
    typeof CreateResponseToolsProxyResponse200ApplicationJSONType
  > = z.nativeEnum(CreateResponseToolsProxyResponse200ApplicationJSONType);

/** @internal */
export const CreateResponseToolsProxyResponse200ApplicationJSONType$outboundSchema:
  z.ZodNativeEnum<
    typeof CreateResponseToolsProxyResponse200ApplicationJSONType
  > = CreateResponseToolsProxyResponse200ApplicationJSONType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateResponseToolsProxyResponse200ApplicationJSONType$ {
  /** @deprecated use `CreateResponseToolsProxyResponse200ApplicationJSONType$inboundSchema` instead. */
  export const inboundSchema =
    CreateResponseToolsProxyResponse200ApplicationJSONType$inboundSchema;
  /** @deprecated use `CreateResponseToolsProxyResponse200ApplicationJSONType$outboundSchema` instead. */
  export const outboundSchema =
    CreateResponseToolsProxyResponse200ApplicationJSONType$outboundSchema;
}

/** @internal */
export const ToolsRanker$inboundSchema: z.ZodNativeEnum<typeof ToolsRanker> = z
  .nativeEnum(ToolsRanker);

/** @internal */
export const ToolsRanker$outboundSchema: z.ZodNativeEnum<typeof ToolsRanker> =
  ToolsRanker$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ToolsRanker$ {
  /** @deprecated use `ToolsRanker$inboundSchema` instead. */
  export const inboundSchema = ToolsRanker$inboundSchema;
  /** @deprecated use `ToolsRanker$outboundSchema` instead. */
  export const outboundSchema = ToolsRanker$outboundSchema;
}

/** @internal */
export const ToolsRankingOptions$inboundSchema: z.ZodType<
  ToolsRankingOptions,
  z.ZodTypeDef,
  unknown
> = z.object({
  ranker: ToolsRanker$inboundSchema.default("auto"),
  score_threshold: z.number().default(0),
}).transform((v) => {
  return remap$(v, {
    "score_threshold": "scoreThreshold",
  });
});

/** @internal */
export type ToolsRankingOptions$Outbound = {
  ranker: string;
  score_threshold: number;
};

/** @internal */
export const ToolsRankingOptions$outboundSchema: z.ZodType<
  ToolsRankingOptions$Outbound,
  z.ZodTypeDef,
  ToolsRankingOptions
> = z.object({
  ranker: ToolsRanker$outboundSchema.default("auto"),
  scoreThreshold: z.number().default(0),
}).transform((v) => {
  return remap$(v, {
    scoreThreshold: "score_threshold",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ToolsRankingOptions$ {
  /** @deprecated use `ToolsRankingOptions$inboundSchema` instead. */
  export const inboundSchema = ToolsRankingOptions$inboundSchema;
  /** @deprecated use `ToolsRankingOptions$outboundSchema` instead. */
  export const outboundSchema = ToolsRankingOptions$outboundSchema;
  /** @deprecated use `ToolsRankingOptions$Outbound` instead. */
  export type Outbound = ToolsRankingOptions$Outbound;
}

export function toolsRankingOptionsToJSON(
  toolsRankingOptions: ToolsRankingOptions,
): string {
  return JSON.stringify(
    ToolsRankingOptions$outboundSchema.parse(toolsRankingOptions),
  );
}

export function toolsRankingOptionsFromJSON(
  jsonString: string,
): SafeParseResult<ToolsRankingOptions, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ToolsRankingOptions$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ToolsRankingOptions' from JSON`,
  );
}

/** @internal */
export const CreateResponseTools3$inboundSchema: z.ZodType<
  CreateResponseTools3,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: CreateResponseToolsProxyResponse200ApplicationJSONType$inboundSchema,
  vector_store_ids: z.array(z.string()).optional(),
  max_num_results: z.number().int().default(20),
  filters: z.any().optional(),
  ranking_options: z.lazy(() => ToolsRankingOptions$inboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    "vector_store_ids": "vectorStoreIds",
    "max_num_results": "maxNumResults",
    "ranking_options": "rankingOptions",
  });
});

/** @internal */
export type CreateResponseTools3$Outbound = {
  type: string;
  vector_store_ids?: Array<string> | undefined;
  max_num_results: number;
  filters?: any | undefined;
  ranking_options?: ToolsRankingOptions$Outbound | undefined;
};

/** @internal */
export const CreateResponseTools3$outboundSchema: z.ZodType<
  CreateResponseTools3$Outbound,
  z.ZodTypeDef,
  CreateResponseTools3
> = z.object({
  type: CreateResponseToolsProxyResponse200ApplicationJSONType$outboundSchema,
  vectorStoreIds: z.array(z.string()).optional(),
  maxNumResults: z.number().int().default(20),
  filters: z.any().optional(),
  rankingOptions: z.lazy(() => ToolsRankingOptions$outboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    vectorStoreIds: "vector_store_ids",
    maxNumResults: "max_num_results",
    rankingOptions: "ranking_options",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateResponseTools3$ {
  /** @deprecated use `CreateResponseTools3$inboundSchema` instead. */
  export const inboundSchema = CreateResponseTools3$inboundSchema;
  /** @deprecated use `CreateResponseTools3$outboundSchema` instead. */
  export const outboundSchema = CreateResponseTools3$outboundSchema;
  /** @deprecated use `CreateResponseTools3$Outbound` instead. */
  export type Outbound = CreateResponseTools3$Outbound;
}

export function createResponseTools3ToJSON(
  createResponseTools3: CreateResponseTools3,
): string {
  return JSON.stringify(
    CreateResponseTools3$outboundSchema.parse(createResponseTools3),
  );
}

export function createResponseTools3FromJSON(
  jsonString: string,
): SafeParseResult<CreateResponseTools3, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateResponseTools3$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateResponseTools3' from JSON`,
  );
}

/** @internal */
export const CreateResponseToolsProxyResponse200Type$inboundSchema:
  z.ZodNativeEnum<typeof CreateResponseToolsProxyResponse200Type> = z
    .nativeEnum(CreateResponseToolsProxyResponse200Type);

/** @internal */
export const CreateResponseToolsProxyResponse200Type$outboundSchema:
  z.ZodNativeEnum<typeof CreateResponseToolsProxyResponse200Type> =
    CreateResponseToolsProxyResponse200Type$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateResponseToolsProxyResponse200Type$ {
  /** @deprecated use `CreateResponseToolsProxyResponse200Type$inboundSchema` instead. */
  export const inboundSchema =
    CreateResponseToolsProxyResponse200Type$inboundSchema;
  /** @deprecated use `CreateResponseToolsProxyResponse200Type$outboundSchema` instead. */
  export const outboundSchema =
    CreateResponseToolsProxyResponse200Type$outboundSchema;
}

/** @internal */
export const ToolsSearchContextSize$inboundSchema: z.ZodNativeEnum<
  typeof ToolsSearchContextSize
> = z.nativeEnum(ToolsSearchContextSize);

/** @internal */
export const ToolsSearchContextSize$outboundSchema: z.ZodNativeEnum<
  typeof ToolsSearchContextSize
> = ToolsSearchContextSize$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ToolsSearchContextSize$ {
  /** @deprecated use `ToolsSearchContextSize$inboundSchema` instead. */
  export const inboundSchema = ToolsSearchContextSize$inboundSchema;
  /** @deprecated use `ToolsSearchContextSize$outboundSchema` instead. */
  export const outboundSchema = ToolsSearchContextSize$outboundSchema;
}

/** @internal */
export const CreateResponseToolsProxyResponse200ApplicationJSONResponseBodyType$inboundSchema:
  z.ZodNativeEnum<
    typeof CreateResponseToolsProxyResponse200ApplicationJSONResponseBodyType
  > = z.nativeEnum(
    CreateResponseToolsProxyResponse200ApplicationJSONResponseBodyType,
  );

/** @internal */
export const CreateResponseToolsProxyResponse200ApplicationJSONResponseBodyType$outboundSchema:
  z.ZodNativeEnum<
    typeof CreateResponseToolsProxyResponse200ApplicationJSONResponseBodyType
  > =
    CreateResponseToolsProxyResponse200ApplicationJSONResponseBodyType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateResponseToolsProxyResponse200ApplicationJSONResponseBodyType$ {
  /** @deprecated use `CreateResponseToolsProxyResponse200ApplicationJSONResponseBodyType$inboundSchema` instead. */
  export const inboundSchema =
    CreateResponseToolsProxyResponse200ApplicationJSONResponseBodyType$inboundSchema;
  /** @deprecated use `CreateResponseToolsProxyResponse200ApplicationJSONResponseBodyType$outboundSchema` instead. */
  export const outboundSchema =
    CreateResponseToolsProxyResponse200ApplicationJSONResponseBodyType$outboundSchema;
}

/** @internal */
export const ToolsUserLocation$inboundSchema: z.ZodType<
  ToolsUserLocation,
  z.ZodTypeDef,
  unknown
> = z.object({
  type:
    CreateResponseToolsProxyResponse200ApplicationJSONResponseBodyType$inboundSchema
      .optional(),
  city: z.nullable(z.string()).optional(),
  country: z.string().optional(),
  region: z.nullable(z.string()).optional(),
  timezone: z.nullable(z.string()).optional(),
});

/** @internal */
export type ToolsUserLocation$Outbound = {
  type?: string | undefined;
  city?: string | null | undefined;
  country?: string | undefined;
  region?: string | null | undefined;
  timezone?: string | null | undefined;
};

/** @internal */
export const ToolsUserLocation$outboundSchema: z.ZodType<
  ToolsUserLocation$Outbound,
  z.ZodTypeDef,
  ToolsUserLocation
> = z.object({
  type:
    CreateResponseToolsProxyResponse200ApplicationJSONResponseBodyType$outboundSchema
      .optional(),
  city: z.nullable(z.string()).optional(),
  country: z.string().optional(),
  region: z.nullable(z.string()).optional(),
  timezone: z.nullable(z.string()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ToolsUserLocation$ {
  /** @deprecated use `ToolsUserLocation$inboundSchema` instead. */
  export const inboundSchema = ToolsUserLocation$inboundSchema;
  /** @deprecated use `ToolsUserLocation$outboundSchema` instead. */
  export const outboundSchema = ToolsUserLocation$outboundSchema;
  /** @deprecated use `ToolsUserLocation$Outbound` instead. */
  export type Outbound = ToolsUserLocation$Outbound;
}

export function toolsUserLocationToJSON(
  toolsUserLocation: ToolsUserLocation,
): string {
  return JSON.stringify(
    ToolsUserLocation$outboundSchema.parse(toolsUserLocation),
  );
}

export function toolsUserLocationFromJSON(
  jsonString: string,
): SafeParseResult<ToolsUserLocation, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ToolsUserLocation$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ToolsUserLocation' from JSON`,
  );
}

/** @internal */
export const CreateResponseTools2$inboundSchema: z.ZodType<
  CreateResponseTools2,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: CreateResponseToolsProxyResponse200Type$inboundSchema,
  domains: z.array(z.string()).optional(),
  search_context_size: ToolsSearchContextSize$inboundSchema.default("medium"),
  user_location: z.lazy(() => ToolsUserLocation$inboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    "search_context_size": "searchContextSize",
    "user_location": "userLocation",
  });
});

/** @internal */
export type CreateResponseTools2$Outbound = {
  type: string;
  domains?: Array<string> | undefined;
  search_context_size: string;
  user_location?: ToolsUserLocation$Outbound | undefined;
};

/** @internal */
export const CreateResponseTools2$outboundSchema: z.ZodType<
  CreateResponseTools2$Outbound,
  z.ZodTypeDef,
  CreateResponseTools2
> = z.object({
  type: CreateResponseToolsProxyResponse200Type$outboundSchema,
  domains: z.array(z.string()).optional(),
  searchContextSize: ToolsSearchContextSize$outboundSchema.default("medium"),
  userLocation: z.lazy(() => ToolsUserLocation$outboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    searchContextSize: "search_context_size",
    userLocation: "user_location",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateResponseTools2$ {
  /** @deprecated use `CreateResponseTools2$inboundSchema` instead. */
  export const inboundSchema = CreateResponseTools2$inboundSchema;
  /** @deprecated use `CreateResponseTools2$outboundSchema` instead. */
  export const outboundSchema = CreateResponseTools2$outboundSchema;
  /** @deprecated use `CreateResponseTools2$Outbound` instead. */
  export type Outbound = CreateResponseTools2$Outbound;
}

export function createResponseTools2ToJSON(
  createResponseTools2: CreateResponseTools2,
): string {
  return JSON.stringify(
    CreateResponseTools2$outboundSchema.parse(createResponseTools2),
  );
}

export function createResponseTools2FromJSON(
  jsonString: string,
): SafeParseResult<CreateResponseTools2, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateResponseTools2$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateResponseTools2' from JSON`,
  );
}

/** @internal */
export const CreateResponseToolsProxyResponseType$inboundSchema:
  z.ZodNativeEnum<typeof CreateResponseToolsProxyResponseType> = z.nativeEnum(
    CreateResponseToolsProxyResponseType,
  );

/** @internal */
export const CreateResponseToolsProxyResponseType$outboundSchema:
  z.ZodNativeEnum<typeof CreateResponseToolsProxyResponseType> =
    CreateResponseToolsProxyResponseType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateResponseToolsProxyResponseType$ {
  /** @deprecated use `CreateResponseToolsProxyResponseType$inboundSchema` instead. */
  export const inboundSchema =
    CreateResponseToolsProxyResponseType$inboundSchema;
  /** @deprecated use `CreateResponseToolsProxyResponseType$outboundSchema` instead. */
  export const outboundSchema =
    CreateResponseToolsProxyResponseType$outboundSchema;
}

/** @internal */
export const CreateResponseToolsProxyResponse200ApplicationJSONResponseBody1Type$inboundSchema:
  z.ZodNativeEnum<
    typeof CreateResponseToolsProxyResponse200ApplicationJSONResponseBody1Type
  > = z.nativeEnum(
    CreateResponseToolsProxyResponse200ApplicationJSONResponseBody1Type,
  );

/** @internal */
export const CreateResponseToolsProxyResponse200ApplicationJSONResponseBody1Type$outboundSchema:
  z.ZodNativeEnum<
    typeof CreateResponseToolsProxyResponse200ApplicationJSONResponseBody1Type
  > =
    CreateResponseToolsProxyResponse200ApplicationJSONResponseBody1Type$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateResponseToolsProxyResponse200ApplicationJSONResponseBody1Type$ {
  /** @deprecated use `CreateResponseToolsProxyResponse200ApplicationJSONResponseBody1Type$inboundSchema` instead. */
  export const inboundSchema =
    CreateResponseToolsProxyResponse200ApplicationJSONResponseBody1Type$inboundSchema;
  /** @deprecated use `CreateResponseToolsProxyResponse200ApplicationJSONResponseBody1Type$outboundSchema` instead. */
  export const outboundSchema =
    CreateResponseToolsProxyResponse200ApplicationJSONResponseBody1Type$outboundSchema;
}

/** @internal */
export const ToolsProperties$inboundSchema: z.ZodType<
  ToolsProperties,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: z.string(),
  description: z.string().optional(),
  enum: z.array(z.string()).optional(),
});

/** @internal */
export type ToolsProperties$Outbound = {
  type: string;
  description?: string | undefined;
  enum?: Array<string> | undefined;
};

/** @internal */
export const ToolsProperties$outboundSchema: z.ZodType<
  ToolsProperties$Outbound,
  z.ZodTypeDef,
  ToolsProperties
> = z.object({
  type: z.string(),
  description: z.string().optional(),
  enum: z.array(z.string()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ToolsProperties$ {
  /** @deprecated use `ToolsProperties$inboundSchema` instead. */
  export const inboundSchema = ToolsProperties$inboundSchema;
  /** @deprecated use `ToolsProperties$outboundSchema` instead. */
  export const outboundSchema = ToolsProperties$outboundSchema;
  /** @deprecated use `ToolsProperties$Outbound` instead. */
  export type Outbound = ToolsProperties$Outbound;
}

export function toolsPropertiesToJSON(
  toolsProperties: ToolsProperties,
): string {
  return JSON.stringify(ToolsProperties$outboundSchema.parse(toolsProperties));
}

export function toolsPropertiesFromJSON(
  jsonString: string,
): SafeParseResult<ToolsProperties, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ToolsProperties$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ToolsProperties' from JSON`,
  );
}

/** @internal */
export const CreateResponseToolsParameters$inboundSchema: z.ZodType<
  CreateResponseToolsParameters,
  z.ZodTypeDef,
  unknown
> = z.object({
  type:
    CreateResponseToolsProxyResponse200ApplicationJSONResponseBody1Type$inboundSchema,
  properties: z.record(z.lazy(() => ToolsProperties$inboundSchema)),
  required: z.array(z.string()).optional(),
  additionalProperties: z.boolean().optional(),
});

/** @internal */
export type CreateResponseToolsParameters$Outbound = {
  type: string;
  properties: { [k: string]: ToolsProperties$Outbound };
  required?: Array<string> | undefined;
  additionalProperties?: boolean | undefined;
};

/** @internal */
export const CreateResponseToolsParameters$outboundSchema: z.ZodType<
  CreateResponseToolsParameters$Outbound,
  z.ZodTypeDef,
  CreateResponseToolsParameters
> = z.object({
  type:
    CreateResponseToolsProxyResponse200ApplicationJSONResponseBody1Type$outboundSchema,
  properties: z.record(z.lazy(() => ToolsProperties$outboundSchema)),
  required: z.array(z.string()).optional(),
  additionalProperties: z.boolean().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateResponseToolsParameters$ {
  /** @deprecated use `CreateResponseToolsParameters$inboundSchema` instead. */
  export const inboundSchema = CreateResponseToolsParameters$inboundSchema;
  /** @deprecated use `CreateResponseToolsParameters$outboundSchema` instead. */
  export const outboundSchema = CreateResponseToolsParameters$outboundSchema;
  /** @deprecated use `CreateResponseToolsParameters$Outbound` instead. */
  export type Outbound = CreateResponseToolsParameters$Outbound;
}

export function createResponseToolsParametersToJSON(
  createResponseToolsParameters: CreateResponseToolsParameters,
): string {
  return JSON.stringify(
    CreateResponseToolsParameters$outboundSchema.parse(
      createResponseToolsParameters,
    ),
  );
}

export function createResponseToolsParametersFromJSON(
  jsonString: string,
): SafeParseResult<CreateResponseToolsParameters, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateResponseToolsParameters$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateResponseToolsParameters' from JSON`,
  );
}

/** @internal */
export const CreateResponseTools1$inboundSchema: z.ZodType<
  CreateResponseTools1,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: CreateResponseToolsProxyResponseType$inboundSchema,
  name: z.string(),
  description: z.nullable(z.string()).optional(),
  parameters: z.lazy(() => CreateResponseToolsParameters$inboundSchema),
  strict: z.boolean().default(true),
});

/** @internal */
export type CreateResponseTools1$Outbound = {
  type: string;
  name: string;
  description?: string | null | undefined;
  parameters: CreateResponseToolsParameters$Outbound;
  strict: boolean;
};

/** @internal */
export const CreateResponseTools1$outboundSchema: z.ZodType<
  CreateResponseTools1$Outbound,
  z.ZodTypeDef,
  CreateResponseTools1
> = z.object({
  type: CreateResponseToolsProxyResponseType$outboundSchema,
  name: z.string(),
  description: z.nullable(z.string()).optional(),
  parameters: z.lazy(() => CreateResponseToolsParameters$outboundSchema),
  strict: z.boolean().default(true),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateResponseTools1$ {
  /** @deprecated use `CreateResponseTools1$inboundSchema` instead. */
  export const inboundSchema = CreateResponseTools1$inboundSchema;
  /** @deprecated use `CreateResponseTools1$outboundSchema` instead. */
  export const outboundSchema = CreateResponseTools1$outboundSchema;
  /** @deprecated use `CreateResponseTools1$Outbound` instead. */
  export type Outbound = CreateResponseTools1$Outbound;
}

export function createResponseTools1ToJSON(
  createResponseTools1: CreateResponseTools1,
): string {
  return JSON.stringify(
    CreateResponseTools1$outboundSchema.parse(createResponseTools1),
  );
}

export function createResponseTools1FromJSON(
  jsonString: string,
): SafeParseResult<CreateResponseTools1, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateResponseTools1$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateResponseTools1' from JSON`,
  );
}

/** @internal */
export const CreateResponseProxyTools$inboundSchema: z.ZodType<
  CreateResponseProxyTools,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => CreateResponseTools1$inboundSchema),
  z.lazy(() => CreateResponseTools2$inboundSchema),
  z.lazy(() => CreateResponseTools3$inboundSchema),
]);

/** @internal */
export type CreateResponseProxyTools$Outbound =
  | CreateResponseTools1$Outbound
  | CreateResponseTools2$Outbound
  | CreateResponseTools3$Outbound;

/** @internal */
export const CreateResponseProxyTools$outboundSchema: z.ZodType<
  CreateResponseProxyTools$Outbound,
  z.ZodTypeDef,
  CreateResponseProxyTools
> = z.union([
  z.lazy(() => CreateResponseTools1$outboundSchema),
  z.lazy(() => CreateResponseTools2$outboundSchema),
  z.lazy(() => CreateResponseTools3$outboundSchema),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateResponseProxyTools$ {
  /** @deprecated use `CreateResponseProxyTools$inboundSchema` instead. */
  export const inboundSchema = CreateResponseProxyTools$inboundSchema;
  /** @deprecated use `CreateResponseProxyTools$outboundSchema` instead. */
  export const outboundSchema = CreateResponseProxyTools$outboundSchema;
  /** @deprecated use `CreateResponseProxyTools$Outbound` instead. */
  export type Outbound = CreateResponseProxyTools$Outbound;
}

export function createResponseProxyToolsToJSON(
  createResponseProxyTools: CreateResponseProxyTools,
): string {
  return JSON.stringify(
    CreateResponseProxyTools$outboundSchema.parse(createResponseProxyTools),
  );
}

export function createResponseProxyToolsFromJSON(
  jsonString: string,
): SafeParseResult<CreateResponseProxyTools, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateResponseProxyTools$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateResponseProxyTools' from JSON`,
  );
}

/** @internal */
export const CreateResponseReasoning$inboundSchema: z.ZodType<
  CreateResponseReasoning,
  z.ZodTypeDef,
  unknown
> = z.object({
  effort: z.nullable(z.string()).optional(),
  summary: z.nullable(z.string()).optional(),
});

/** @internal */
export type CreateResponseReasoning$Outbound = {
  effort?: string | null | undefined;
  summary?: string | null | undefined;
};

/** @internal */
export const CreateResponseReasoning$outboundSchema: z.ZodType<
  CreateResponseReasoning$Outbound,
  z.ZodTypeDef,
  CreateResponseReasoning
> = z.object({
  effort: z.nullable(z.string()).optional(),
  summary: z.nullable(z.string()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateResponseReasoning$ {
  /** @deprecated use `CreateResponseReasoning$inboundSchema` instead. */
  export const inboundSchema = CreateResponseReasoning$inboundSchema;
  /** @deprecated use `CreateResponseReasoning$outboundSchema` instead. */
  export const outboundSchema = CreateResponseReasoning$outboundSchema;
  /** @deprecated use `CreateResponseReasoning$Outbound` instead. */
  export type Outbound = CreateResponseReasoning$Outbound;
}

export function createResponseReasoningToJSON(
  createResponseReasoning: CreateResponseReasoning,
): string {
  return JSON.stringify(
    CreateResponseReasoning$outboundSchema.parse(createResponseReasoning),
  );
}

export function createResponseReasoningFromJSON(
  jsonString: string,
): SafeParseResult<CreateResponseReasoning, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateResponseReasoning$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateResponseReasoning' from JSON`,
  );
}

/** @internal */
export const CreateResponseFormatProxyResponse200ApplicationJSONType$inboundSchema:
  z.ZodNativeEnum<
    typeof CreateResponseFormatProxyResponse200ApplicationJSONType
  > = z.nativeEnum(CreateResponseFormatProxyResponse200ApplicationJSONType);

/** @internal */
export const CreateResponseFormatProxyResponse200ApplicationJSONType$outboundSchema:
  z.ZodNativeEnum<
    typeof CreateResponseFormatProxyResponse200ApplicationJSONType
  > = CreateResponseFormatProxyResponse200ApplicationJSONType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateResponseFormatProxyResponse200ApplicationJSONType$ {
  /** @deprecated use `CreateResponseFormatProxyResponse200ApplicationJSONType$inboundSchema` instead. */
  export const inboundSchema =
    CreateResponseFormatProxyResponse200ApplicationJSONType$inboundSchema;
  /** @deprecated use `CreateResponseFormatProxyResponse200ApplicationJSONType$outboundSchema` instead. */
  export const outboundSchema =
    CreateResponseFormatProxyResponse200ApplicationJSONType$outboundSchema;
}

/** @internal */
export const CreateResponseFormat3$inboundSchema: z.ZodType<
  CreateResponseFormat3,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: CreateResponseFormatProxyResponse200ApplicationJSONType$inboundSchema,
  name: z.string(),
  description: z.string().optional(),
  schema: z.record(z.any()),
  strict: z.nullable(z.boolean().default(true)),
});

/** @internal */
export type CreateResponseFormat3$Outbound = {
  type: string;
  name: string;
  description?: string | undefined;
  schema: { [k: string]: any };
  strict: boolean | null;
};

/** @internal */
export const CreateResponseFormat3$outboundSchema: z.ZodType<
  CreateResponseFormat3$Outbound,
  z.ZodTypeDef,
  CreateResponseFormat3
> = z.object({
  type: CreateResponseFormatProxyResponse200ApplicationJSONType$outboundSchema,
  name: z.string(),
  description: z.string().optional(),
  schema: z.record(z.any()),
  strict: z.nullable(z.boolean().default(true)),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateResponseFormat3$ {
  /** @deprecated use `CreateResponseFormat3$inboundSchema` instead. */
  export const inboundSchema = CreateResponseFormat3$inboundSchema;
  /** @deprecated use `CreateResponseFormat3$outboundSchema` instead. */
  export const outboundSchema = CreateResponseFormat3$outboundSchema;
  /** @deprecated use `CreateResponseFormat3$Outbound` instead. */
  export type Outbound = CreateResponseFormat3$Outbound;
}

export function createResponseFormat3ToJSON(
  createResponseFormat3: CreateResponseFormat3,
): string {
  return JSON.stringify(
    CreateResponseFormat3$outboundSchema.parse(createResponseFormat3),
  );
}

export function createResponseFormat3FromJSON(
  jsonString: string,
): SafeParseResult<CreateResponseFormat3, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateResponseFormat3$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateResponseFormat3' from JSON`,
  );
}

/** @internal */
export const CreateResponseFormatProxyResponse200Type$inboundSchema:
  z.ZodNativeEnum<typeof CreateResponseFormatProxyResponse200Type> = z
    .nativeEnum(CreateResponseFormatProxyResponse200Type);

/** @internal */
export const CreateResponseFormatProxyResponse200Type$outboundSchema:
  z.ZodNativeEnum<typeof CreateResponseFormatProxyResponse200Type> =
    CreateResponseFormatProxyResponse200Type$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateResponseFormatProxyResponse200Type$ {
  /** @deprecated use `CreateResponseFormatProxyResponse200Type$inboundSchema` instead. */
  export const inboundSchema =
    CreateResponseFormatProxyResponse200Type$inboundSchema;
  /** @deprecated use `CreateResponseFormatProxyResponse200Type$outboundSchema` instead. */
  export const outboundSchema =
    CreateResponseFormatProxyResponse200Type$outboundSchema;
}

/** @internal */
export const CreateResponseFormat2$inboundSchema: z.ZodType<
  CreateResponseFormat2,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: CreateResponseFormatProxyResponse200Type$inboundSchema,
});

/** @internal */
export type CreateResponseFormat2$Outbound = {
  type: string;
};

/** @internal */
export const CreateResponseFormat2$outboundSchema: z.ZodType<
  CreateResponseFormat2$Outbound,
  z.ZodTypeDef,
  CreateResponseFormat2
> = z.object({
  type: CreateResponseFormatProxyResponse200Type$outboundSchema,
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateResponseFormat2$ {
  /** @deprecated use `CreateResponseFormat2$inboundSchema` instead. */
  export const inboundSchema = CreateResponseFormat2$inboundSchema;
  /** @deprecated use `CreateResponseFormat2$outboundSchema` instead. */
  export const outboundSchema = CreateResponseFormat2$outboundSchema;
  /** @deprecated use `CreateResponseFormat2$Outbound` instead. */
  export type Outbound = CreateResponseFormat2$Outbound;
}

export function createResponseFormat2ToJSON(
  createResponseFormat2: CreateResponseFormat2,
): string {
  return JSON.stringify(
    CreateResponseFormat2$outboundSchema.parse(createResponseFormat2),
  );
}

export function createResponseFormat2FromJSON(
  jsonString: string,
): SafeParseResult<CreateResponseFormat2, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateResponseFormat2$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateResponseFormat2' from JSON`,
  );
}

/** @internal */
export const CreateResponseFormatProxyResponseType$inboundSchema:
  z.ZodNativeEnum<typeof CreateResponseFormatProxyResponseType> = z.nativeEnum(
    CreateResponseFormatProxyResponseType,
  );

/** @internal */
export const CreateResponseFormatProxyResponseType$outboundSchema:
  z.ZodNativeEnum<typeof CreateResponseFormatProxyResponseType> =
    CreateResponseFormatProxyResponseType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateResponseFormatProxyResponseType$ {
  /** @deprecated use `CreateResponseFormatProxyResponseType$inboundSchema` instead. */
  export const inboundSchema =
    CreateResponseFormatProxyResponseType$inboundSchema;
  /** @deprecated use `CreateResponseFormatProxyResponseType$outboundSchema` instead. */
  export const outboundSchema =
    CreateResponseFormatProxyResponseType$outboundSchema;
}

/** @internal */
export const CreateResponseFormat1$inboundSchema: z.ZodType<
  CreateResponseFormat1,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: CreateResponseFormatProxyResponseType$inboundSchema,
});

/** @internal */
export type CreateResponseFormat1$Outbound = {
  type: string;
};

/** @internal */
export const CreateResponseFormat1$outboundSchema: z.ZodType<
  CreateResponseFormat1$Outbound,
  z.ZodTypeDef,
  CreateResponseFormat1
> = z.object({
  type: CreateResponseFormatProxyResponseType$outboundSchema,
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateResponseFormat1$ {
  /** @deprecated use `CreateResponseFormat1$inboundSchema` instead. */
  export const inboundSchema = CreateResponseFormat1$inboundSchema;
  /** @deprecated use `CreateResponseFormat1$outboundSchema` instead. */
  export const outboundSchema = CreateResponseFormat1$outboundSchema;
  /** @deprecated use `CreateResponseFormat1$Outbound` instead. */
  export type Outbound = CreateResponseFormat1$Outbound;
}

export function createResponseFormat1ToJSON(
  createResponseFormat1: CreateResponseFormat1,
): string {
  return JSON.stringify(
    CreateResponseFormat1$outboundSchema.parse(createResponseFormat1),
  );
}

export function createResponseFormat1FromJSON(
  jsonString: string,
): SafeParseResult<CreateResponseFormat1, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateResponseFormat1$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateResponseFormat1' from JSON`,
  );
}

/** @internal */
export const CreateResponseProxyFormat$inboundSchema: z.ZodType<
  CreateResponseProxyFormat,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => CreateResponseFormat3$inboundSchema),
  z.lazy(() => CreateResponseFormat1$inboundSchema),
  z.lazy(() => CreateResponseFormat2$inboundSchema),
]);

/** @internal */
export type CreateResponseProxyFormat$Outbound =
  | CreateResponseFormat3$Outbound
  | CreateResponseFormat1$Outbound
  | CreateResponseFormat2$Outbound;

/** @internal */
export const CreateResponseProxyFormat$outboundSchema: z.ZodType<
  CreateResponseProxyFormat$Outbound,
  z.ZodTypeDef,
  CreateResponseProxyFormat
> = z.union([
  z.lazy(() => CreateResponseFormat3$outboundSchema),
  z.lazy(() => CreateResponseFormat1$outboundSchema),
  z.lazy(() => CreateResponseFormat2$outboundSchema),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateResponseProxyFormat$ {
  /** @deprecated use `CreateResponseProxyFormat$inboundSchema` instead. */
  export const inboundSchema = CreateResponseProxyFormat$inboundSchema;
  /** @deprecated use `CreateResponseProxyFormat$outboundSchema` instead. */
  export const outboundSchema = CreateResponseProxyFormat$outboundSchema;
  /** @deprecated use `CreateResponseProxyFormat$Outbound` instead. */
  export type Outbound = CreateResponseProxyFormat$Outbound;
}

export function createResponseProxyFormatToJSON(
  createResponseProxyFormat: CreateResponseProxyFormat,
): string {
  return JSON.stringify(
    CreateResponseProxyFormat$outboundSchema.parse(createResponseProxyFormat),
  );
}

export function createResponseProxyFormatFromJSON(
  jsonString: string,
): SafeParseResult<CreateResponseProxyFormat, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateResponseProxyFormat$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateResponseProxyFormat' from JSON`,
  );
}

/** @internal */
export const CreateResponseText$inboundSchema: z.ZodType<
  CreateResponseText,
  z.ZodTypeDef,
  unknown
> = z.object({
  format: z.union([
    z.lazy(() => CreateResponseFormat3$inboundSchema),
    z.lazy(() => CreateResponseFormat1$inboundSchema),
    z.lazy(() => CreateResponseFormat2$inboundSchema),
  ]),
});

/** @internal */
export type CreateResponseText$Outbound = {
  format:
    | CreateResponseFormat3$Outbound
    | CreateResponseFormat1$Outbound
    | CreateResponseFormat2$Outbound;
};

/** @internal */
export const CreateResponseText$outboundSchema: z.ZodType<
  CreateResponseText$Outbound,
  z.ZodTypeDef,
  CreateResponseText
> = z.object({
  format: z.union([
    z.lazy(() => CreateResponseFormat3$outboundSchema),
    z.lazy(() => CreateResponseFormat1$outboundSchema),
    z.lazy(() => CreateResponseFormat2$outboundSchema),
  ]),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateResponseText$ {
  /** @deprecated use `CreateResponseText$inboundSchema` instead. */
  export const inboundSchema = CreateResponseText$inboundSchema;
  /** @deprecated use `CreateResponseText$outboundSchema` instead. */
  export const outboundSchema = CreateResponseText$outboundSchema;
  /** @deprecated use `CreateResponseText$Outbound` instead. */
  export type Outbound = CreateResponseText$Outbound;
}

export function createResponseTextToJSON(
  createResponseText: CreateResponseText,
): string {
  return JSON.stringify(
    CreateResponseText$outboundSchema.parse(createResponseText),
  );
}

export function createResponseTextFromJSON(
  jsonString: string,
): SafeParseResult<CreateResponseText, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateResponseText$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateResponseText' from JSON`,
  );
}

/** @internal */
export const Truncation$inboundSchema: z.ZodNativeEnum<typeof Truncation> = z
  .nativeEnum(Truncation);

/** @internal */
export const Truncation$outboundSchema: z.ZodNativeEnum<typeof Truncation> =
  Truncation$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Truncation$ {
  /** @deprecated use `Truncation$inboundSchema` instead. */
  export const inboundSchema = Truncation$inboundSchema;
  /** @deprecated use `Truncation$outboundSchema` instead. */
  export const outboundSchema = Truncation$outboundSchema;
}

/** @internal */
export const ServiceTier$inboundSchema: z.ZodNativeEnum<typeof ServiceTier> = z
  .nativeEnum(ServiceTier);

/** @internal */
export const ServiceTier$outboundSchema: z.ZodNativeEnum<typeof ServiceTier> =
  ServiceTier$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ServiceTier$ {
  /** @deprecated use `ServiceTier$inboundSchema` instead. */
  export const inboundSchema = ServiceTier$inboundSchema;
  /** @deprecated use `ServiceTier$outboundSchema` instead. */
  export const outboundSchema = ServiceTier$outboundSchema;
}

/** @internal */
export const CreateResponseResponseBody$inboundSchema: z.ZodType<
  CreateResponseResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  object: CreateResponseObject$inboundSchema,
  created_at: z.number(),
  status: CreateResponseStatus$inboundSchema,
  error: z.nullable(z.lazy(() => ErrorT$inboundSchema)),
  incomplete_details: z.nullable(z.lazy(() => IncompleteDetails$inboundSchema)),
  model: z.string(),
  instructions: z.nullable(z.string()).optional(),
  output: z.array(
    z.union([
      z.lazy(() => Output4$inboundSchema),
      z.lazy(() => Output1$inboundSchema),
      z.lazy(() => Output2$inboundSchema),
      z.lazy(() => Output3$inboundSchema),
    ]),
  ),
  output_text: z.nullable(z.string()).optional(),
  usage: z.lazy(() => CreateResponseUsage$inboundSchema).optional(),
  temperature: z.nullable(z.number()).optional(),
  top_p: z.nullable(z.number()).optional(),
  max_output_tokens: z.nullable(z.number().int()).optional(),
  parallel_tool_calls: z.boolean(),
  previous_response_id: z.nullable(z.string()).optional(),
  metadata: z.record(z.string()).optional(),
  tool_choice: z.union([
    z.lazy(() => CreateResponseToolChoiceProxy2$inboundSchema),
    CreateResponseToolChoiceProxy1$inboundSchema,
  ]).optional(),
  tools: z.array(
    z.union([
      z.lazy(() => CreateResponseTools1$inboundSchema),
      z.lazy(() => CreateResponseTools2$inboundSchema),
      z.lazy(() => CreateResponseTools3$inboundSchema),
    ]),
  ).optional(),
  reasoning: z.nullable(z.lazy(() => CreateResponseReasoning$inboundSchema))
    .optional(),
  store: z.boolean().optional(),
  text: z.lazy(() => CreateResponseText$inboundSchema).optional(),
  truncation: z.nullable(Truncation$inboundSchema.default("disabled")),
  user: z.nullable(z.string()).optional(),
  service_tier: z.nullable(ServiceTier$inboundSchema).optional(),
  background: z.nullable(z.boolean()).optional(),
  top_logprobs: z.nullable(z.number().int()).optional(),
  logprobs: z.nullable(z.boolean()).optional(),
}).transform((v) => {
  return remap$(v, {
    "created_at": "createdAt",
    "incomplete_details": "incompleteDetails",
    "output_text": "outputText",
    "top_p": "topP",
    "max_output_tokens": "maxOutputTokens",
    "parallel_tool_calls": "parallelToolCalls",
    "previous_response_id": "previousResponseId",
    "tool_choice": "toolChoice",
    "service_tier": "serviceTier",
    "top_logprobs": "topLogprobs",
  });
});

/** @internal */
export type CreateResponseResponseBody$Outbound = {
  id: string;
  object: string;
  created_at: number;
  status: string;
  error: ErrorT$Outbound | null;
  incomplete_details: IncompleteDetails$Outbound | null;
  model: string;
  instructions?: string | null | undefined;
  output: Array<
    Output4$Outbound | Output1$Outbound | Output2$Outbound | Output3$Outbound
  >;
  output_text?: string | null | undefined;
  usage?: CreateResponseUsage$Outbound | undefined;
  temperature?: number | null | undefined;
  top_p?: number | null | undefined;
  max_output_tokens?: number | null | undefined;
  parallel_tool_calls: boolean;
  previous_response_id?: string | null | undefined;
  metadata?: { [k: string]: string } | undefined;
  tool_choice?: CreateResponseToolChoiceProxy2$Outbound | string | undefined;
  tools?:
    | Array<
      | CreateResponseTools1$Outbound
      | CreateResponseTools2$Outbound
      | CreateResponseTools3$Outbound
    >
    | undefined;
  reasoning?: CreateResponseReasoning$Outbound | null | undefined;
  store?: boolean | undefined;
  text?: CreateResponseText$Outbound | undefined;
  truncation: string | null;
  user?: string | null | undefined;
  service_tier?: string | null | undefined;
  background?: boolean | null | undefined;
  top_logprobs?: number | null | undefined;
  logprobs?: boolean | null | undefined;
};

/** @internal */
export const CreateResponseResponseBody$outboundSchema: z.ZodType<
  CreateResponseResponseBody$Outbound,
  z.ZodTypeDef,
  CreateResponseResponseBody
> = z.object({
  id: z.string(),
  object: CreateResponseObject$outboundSchema,
  createdAt: z.number(),
  status: CreateResponseStatus$outboundSchema,
  error: z.nullable(z.lazy(() => ErrorT$outboundSchema)),
  incompleteDetails: z.nullable(z.lazy(() => IncompleteDetails$outboundSchema)),
  model: z.string(),
  instructions: z.nullable(z.string()).optional(),
  output: z.array(
    z.union([
      z.lazy(() => Output4$outboundSchema),
      z.lazy(() => Output1$outboundSchema),
      z.lazy(() => Output2$outboundSchema),
      z.lazy(() => Output3$outboundSchema),
    ]),
  ),
  outputText: z.nullable(z.string()).optional(),
  usage: z.lazy(() => CreateResponseUsage$outboundSchema).optional(),
  temperature: z.nullable(z.number()).optional(),
  topP: z.nullable(z.number()).optional(),
  maxOutputTokens: z.nullable(z.number().int()).optional(),
  parallelToolCalls: z.boolean(),
  previousResponseId: z.nullable(z.string()).optional(),
  metadata: z.record(z.string()).optional(),
  toolChoice: z.union([
    z.lazy(() => CreateResponseToolChoiceProxy2$outboundSchema),
    CreateResponseToolChoiceProxy1$outboundSchema,
  ]).optional(),
  tools: z.array(
    z.union([
      z.lazy(() => CreateResponseTools1$outboundSchema),
      z.lazy(() => CreateResponseTools2$outboundSchema),
      z.lazy(() => CreateResponseTools3$outboundSchema),
    ]),
  ).optional(),
  reasoning: z.nullable(z.lazy(() => CreateResponseReasoning$outboundSchema))
    .optional(),
  store: z.boolean().optional(),
  text: z.lazy(() => CreateResponseText$outboundSchema).optional(),
  truncation: z.nullable(Truncation$outboundSchema.default("disabled")),
  user: z.nullable(z.string()).optional(),
  serviceTier: z.nullable(ServiceTier$outboundSchema).optional(),
  background: z.nullable(z.boolean()).optional(),
  topLogprobs: z.nullable(z.number().int()).optional(),
  logprobs: z.nullable(z.boolean()).optional(),
}).transform((v) => {
  return remap$(v, {
    createdAt: "created_at",
    incompleteDetails: "incomplete_details",
    outputText: "output_text",
    topP: "top_p",
    maxOutputTokens: "max_output_tokens",
    parallelToolCalls: "parallel_tool_calls",
    previousResponseId: "previous_response_id",
    toolChoice: "tool_choice",
    serviceTier: "service_tier",
    topLogprobs: "top_logprobs",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateResponseResponseBody$ {
  /** @deprecated use `CreateResponseResponseBody$inboundSchema` instead. */
  export const inboundSchema = CreateResponseResponseBody$inboundSchema;
  /** @deprecated use `CreateResponseResponseBody$outboundSchema` instead. */
  export const outboundSchema = CreateResponseResponseBody$outboundSchema;
  /** @deprecated use `CreateResponseResponseBody$Outbound` instead. */
  export type Outbound = CreateResponseResponseBody$Outbound;
}

export function createResponseResponseBodyToJSON(
  createResponseResponseBody: CreateResponseResponseBody,
): string {
  return JSON.stringify(
    CreateResponseResponseBody$outboundSchema.parse(createResponseResponseBody),
  );
}

export function createResponseResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<CreateResponseResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateResponseResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateResponseResponseBody' from JSON`,
  );
}

/** @internal */
export const CreateResponseResponse$inboundSchema: z.ZodType<
  CreateResponseResponse,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => CreateResponseResponseBody$inboundSchema),
  z.instanceof(ReadableStream<Uint8Array>).transform(stream => {
    return new EventStream(stream, rawEvent => {
      return {
        value: z.lazy(() => CreateResponseProxyResponseBody$inboundSchema)
          .parse(rawEvent),
      };
    });
  }),
]);

/** @internal */
export type CreateResponseResponse$Outbound =
  | CreateResponseResponseBody$Outbound
  | never;

/** @internal */
export const CreateResponseResponse$outboundSchema: z.ZodType<
  CreateResponseResponse$Outbound,
  z.ZodTypeDef,
  CreateResponseResponse
> = z.union([
  z.lazy(() => CreateResponseResponseBody$outboundSchema),
  z.never(),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateResponseResponse$ {
  /** @deprecated use `CreateResponseResponse$inboundSchema` instead. */
  export const inboundSchema = CreateResponseResponse$inboundSchema;
  /** @deprecated use `CreateResponseResponse$outboundSchema` instead. */
  export const outboundSchema = CreateResponseResponse$outboundSchema;
  /** @deprecated use `CreateResponseResponse$Outbound` instead. */
  export type Outbound = CreateResponseResponse$Outbound;
}

export function createResponseResponseToJSON(
  createResponseResponse: CreateResponseResponse,
): string {
  return JSON.stringify(
    CreateResponseResponse$outboundSchema.parse(createResponseResponse),
  );
}

export function createResponseResponseFromJSON(
  jsonString: string,
): SafeParseResult<CreateResponseResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateResponseResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateResponseResponse' from JSON`,
  );
}
