/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type ListChunksPaginatedRequestBody = {
  /**
   * Search query to find chunks by text content
   */
  q?: string | undefined;
  /**
   * Filter chunks by enabled status
   */
  enabled?: boolean | undefined;
  /**
   * Filter chunks by processing status
   */
  status?: string | undefined;
  limit?: number | undefined;
  page?: number | undefined;
};

export type ListChunksPaginatedRequest = {
  /**
   * The unique identifier of the knowledge base
   */
  knowledgeId: string;
  /**
   * The unique identifier of the datasource.
   */
  datasourceId: string;
  requestBody?: ListChunksPaginatedRequestBody | undefined;
};

export const ListChunksPaginatedObject = {
  List: "list",
} as const;
export type ListChunksPaginatedObject = ClosedEnum<
  typeof ListChunksPaginatedObject
>;

export type ListChunksPaginatedMetadata = string | number | boolean;

/**
 * The status of the chunk
 */
export const ListChunksPaginatedStatus = {
  Pending: "pending",
  Processing: "processing",
  Completed: "completed",
  Failed: "failed",
  Queued: "queued",
} as const;
/**
 * The status of the chunk
 */
export type ListChunksPaginatedStatus = ClosedEnum<
  typeof ListChunksPaginatedStatus
>;

export type ListChunksPaginatedData = {
  /**
   * The unique identifier of the chunk
   */
  id: string;
  /**
   * The text content of the chunk
   */
  text: string;
  /**
   * Metadata of the chunk. Can include `page_number` or any other key-value pairs
   */
  metadata?: { [k: string]: string | number | boolean } | undefined;
  /**
   * Whether the chunk is enabled
   */
  enabled: boolean;
  /**
   * The status of the chunk
   */
  status: ListChunksPaginatedStatus;
  /**
   * The date and time the chunk was created
   */
  created: string;
  /**
   * The date and time the chunk was updated
   */
  updated: string;
  /**
   * The unique identifier of the user who created the chunk
   */
  createdById?: string | null | undefined;
  /**
   * The unique identifier of the user who updated the chunk
   */
  updateById?: string | null | undefined;
};

/**
 * Chunks successfully retrieved
 */
export type ListChunksPaginatedResponseBody = {
  object: ListChunksPaginatedObject;
  data: Array<ListChunksPaginatedData>;
  hasMore: boolean;
};

/** @internal */
export const ListChunksPaginatedRequestBody$inboundSchema: z.ZodType<
  ListChunksPaginatedRequestBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  q: z.string().default(""),
  enabled: z.boolean().optional(),
  status: z.string().optional(),
  limit: z.number().int().default(100),
  page: z.number().int().default(1),
});

/** @internal */
export type ListChunksPaginatedRequestBody$Outbound = {
  q: string;
  enabled?: boolean | undefined;
  status?: string | undefined;
  limit: number;
  page: number;
};

/** @internal */
export const ListChunksPaginatedRequestBody$outboundSchema: z.ZodType<
  ListChunksPaginatedRequestBody$Outbound,
  z.ZodTypeDef,
  ListChunksPaginatedRequestBody
> = z.object({
  q: z.string().default(""),
  enabled: z.boolean().optional(),
  status: z.string().optional(),
  limit: z.number().int().default(100),
  page: z.number().int().default(1),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListChunksPaginatedRequestBody$ {
  /** @deprecated use `ListChunksPaginatedRequestBody$inboundSchema` instead. */
  export const inboundSchema = ListChunksPaginatedRequestBody$inboundSchema;
  /** @deprecated use `ListChunksPaginatedRequestBody$outboundSchema` instead. */
  export const outboundSchema = ListChunksPaginatedRequestBody$outboundSchema;
  /** @deprecated use `ListChunksPaginatedRequestBody$Outbound` instead. */
  export type Outbound = ListChunksPaginatedRequestBody$Outbound;
}

export function listChunksPaginatedRequestBodyToJSON(
  listChunksPaginatedRequestBody: ListChunksPaginatedRequestBody,
): string {
  return JSON.stringify(
    ListChunksPaginatedRequestBody$outboundSchema.parse(
      listChunksPaginatedRequestBody,
    ),
  );
}

export function listChunksPaginatedRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<ListChunksPaginatedRequestBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListChunksPaginatedRequestBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListChunksPaginatedRequestBody' from JSON`,
  );
}

/** @internal */
export const ListChunksPaginatedRequest$inboundSchema: z.ZodType<
  ListChunksPaginatedRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  knowledge_id: z.string(),
  datasource_id: z.string(),
  RequestBody: z.lazy(() => ListChunksPaginatedRequestBody$inboundSchema)
    .optional(),
}).transform((v) => {
  return remap$(v, {
    "knowledge_id": "knowledgeId",
    "datasource_id": "datasourceId",
    "RequestBody": "requestBody",
  });
});

/** @internal */
export type ListChunksPaginatedRequest$Outbound = {
  knowledge_id: string;
  datasource_id: string;
  RequestBody?: ListChunksPaginatedRequestBody$Outbound | undefined;
};

/** @internal */
export const ListChunksPaginatedRequest$outboundSchema: z.ZodType<
  ListChunksPaginatedRequest$Outbound,
  z.ZodTypeDef,
  ListChunksPaginatedRequest
> = z.object({
  knowledgeId: z.string(),
  datasourceId: z.string(),
  requestBody: z.lazy(() => ListChunksPaginatedRequestBody$outboundSchema)
    .optional(),
}).transform((v) => {
  return remap$(v, {
    knowledgeId: "knowledge_id",
    datasourceId: "datasource_id",
    requestBody: "RequestBody",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListChunksPaginatedRequest$ {
  /** @deprecated use `ListChunksPaginatedRequest$inboundSchema` instead. */
  export const inboundSchema = ListChunksPaginatedRequest$inboundSchema;
  /** @deprecated use `ListChunksPaginatedRequest$outboundSchema` instead. */
  export const outboundSchema = ListChunksPaginatedRequest$outboundSchema;
  /** @deprecated use `ListChunksPaginatedRequest$Outbound` instead. */
  export type Outbound = ListChunksPaginatedRequest$Outbound;
}

export function listChunksPaginatedRequestToJSON(
  listChunksPaginatedRequest: ListChunksPaginatedRequest,
): string {
  return JSON.stringify(
    ListChunksPaginatedRequest$outboundSchema.parse(listChunksPaginatedRequest),
  );
}

export function listChunksPaginatedRequestFromJSON(
  jsonString: string,
): SafeParseResult<ListChunksPaginatedRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListChunksPaginatedRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListChunksPaginatedRequest' from JSON`,
  );
}

/** @internal */
export const ListChunksPaginatedObject$inboundSchema: z.ZodNativeEnum<
  typeof ListChunksPaginatedObject
> = z.nativeEnum(ListChunksPaginatedObject);

/** @internal */
export const ListChunksPaginatedObject$outboundSchema: z.ZodNativeEnum<
  typeof ListChunksPaginatedObject
> = ListChunksPaginatedObject$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListChunksPaginatedObject$ {
  /** @deprecated use `ListChunksPaginatedObject$inboundSchema` instead. */
  export const inboundSchema = ListChunksPaginatedObject$inboundSchema;
  /** @deprecated use `ListChunksPaginatedObject$outboundSchema` instead. */
  export const outboundSchema = ListChunksPaginatedObject$outboundSchema;
}

/** @internal */
export const ListChunksPaginatedMetadata$inboundSchema: z.ZodType<
  ListChunksPaginatedMetadata,
  z.ZodTypeDef,
  unknown
> = z.union([z.string(), z.number(), z.boolean()]);

/** @internal */
export type ListChunksPaginatedMetadata$Outbound = string | number | boolean;

/** @internal */
export const ListChunksPaginatedMetadata$outboundSchema: z.ZodType<
  ListChunksPaginatedMetadata$Outbound,
  z.ZodTypeDef,
  ListChunksPaginatedMetadata
> = z.union([z.string(), z.number(), z.boolean()]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListChunksPaginatedMetadata$ {
  /** @deprecated use `ListChunksPaginatedMetadata$inboundSchema` instead. */
  export const inboundSchema = ListChunksPaginatedMetadata$inboundSchema;
  /** @deprecated use `ListChunksPaginatedMetadata$outboundSchema` instead. */
  export const outboundSchema = ListChunksPaginatedMetadata$outboundSchema;
  /** @deprecated use `ListChunksPaginatedMetadata$Outbound` instead. */
  export type Outbound = ListChunksPaginatedMetadata$Outbound;
}

export function listChunksPaginatedMetadataToJSON(
  listChunksPaginatedMetadata: ListChunksPaginatedMetadata,
): string {
  return JSON.stringify(
    ListChunksPaginatedMetadata$outboundSchema.parse(
      listChunksPaginatedMetadata,
    ),
  );
}

export function listChunksPaginatedMetadataFromJSON(
  jsonString: string,
): SafeParseResult<ListChunksPaginatedMetadata, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListChunksPaginatedMetadata$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListChunksPaginatedMetadata' from JSON`,
  );
}

/** @internal */
export const ListChunksPaginatedStatus$inboundSchema: z.ZodNativeEnum<
  typeof ListChunksPaginatedStatus
> = z.nativeEnum(ListChunksPaginatedStatus);

/** @internal */
export const ListChunksPaginatedStatus$outboundSchema: z.ZodNativeEnum<
  typeof ListChunksPaginatedStatus
> = ListChunksPaginatedStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListChunksPaginatedStatus$ {
  /** @deprecated use `ListChunksPaginatedStatus$inboundSchema` instead. */
  export const inboundSchema = ListChunksPaginatedStatus$inboundSchema;
  /** @deprecated use `ListChunksPaginatedStatus$outboundSchema` instead. */
  export const outboundSchema = ListChunksPaginatedStatus$outboundSchema;
}

/** @internal */
export const ListChunksPaginatedData$inboundSchema: z.ZodType<
  ListChunksPaginatedData,
  z.ZodTypeDef,
  unknown
> = z.object({
  _id: z.string(),
  text: z.string(),
  metadata: z.record(z.union([z.string(), z.number(), z.boolean()])).optional(),
  enabled: z.boolean(),
  status: ListChunksPaginatedStatus$inboundSchema,
  created: z.string(),
  updated: z.string(),
  created_by_id: z.nullable(z.string()).optional(),
  update_by_id: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    "_id": "id",
    "created_by_id": "createdById",
    "update_by_id": "updateById",
  });
});

/** @internal */
export type ListChunksPaginatedData$Outbound = {
  _id: string;
  text: string;
  metadata?: { [k: string]: string | number | boolean } | undefined;
  enabled: boolean;
  status: string;
  created: string;
  updated: string;
  created_by_id?: string | null | undefined;
  update_by_id?: string | null | undefined;
};

/** @internal */
export const ListChunksPaginatedData$outboundSchema: z.ZodType<
  ListChunksPaginatedData$Outbound,
  z.ZodTypeDef,
  ListChunksPaginatedData
> = z.object({
  id: z.string(),
  text: z.string(),
  metadata: z.record(z.union([z.string(), z.number(), z.boolean()])).optional(),
  enabled: z.boolean(),
  status: ListChunksPaginatedStatus$outboundSchema,
  created: z.string(),
  updated: z.string(),
  createdById: z.nullable(z.string()).optional(),
  updateById: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    id: "_id",
    createdById: "created_by_id",
    updateById: "update_by_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListChunksPaginatedData$ {
  /** @deprecated use `ListChunksPaginatedData$inboundSchema` instead. */
  export const inboundSchema = ListChunksPaginatedData$inboundSchema;
  /** @deprecated use `ListChunksPaginatedData$outboundSchema` instead. */
  export const outboundSchema = ListChunksPaginatedData$outboundSchema;
  /** @deprecated use `ListChunksPaginatedData$Outbound` instead. */
  export type Outbound = ListChunksPaginatedData$Outbound;
}

export function listChunksPaginatedDataToJSON(
  listChunksPaginatedData: ListChunksPaginatedData,
): string {
  return JSON.stringify(
    ListChunksPaginatedData$outboundSchema.parse(listChunksPaginatedData),
  );
}

export function listChunksPaginatedDataFromJSON(
  jsonString: string,
): SafeParseResult<ListChunksPaginatedData, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListChunksPaginatedData$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListChunksPaginatedData' from JSON`,
  );
}

/** @internal */
export const ListChunksPaginatedResponseBody$inboundSchema: z.ZodType<
  ListChunksPaginatedResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  object: ListChunksPaginatedObject$inboundSchema,
  data: z.array(z.lazy(() => ListChunksPaginatedData$inboundSchema)),
  has_more: z.boolean(),
}).transform((v) => {
  return remap$(v, {
    "has_more": "hasMore",
  });
});

/** @internal */
export type ListChunksPaginatedResponseBody$Outbound = {
  object: string;
  data: Array<ListChunksPaginatedData$Outbound>;
  has_more: boolean;
};

/** @internal */
export const ListChunksPaginatedResponseBody$outboundSchema: z.ZodType<
  ListChunksPaginatedResponseBody$Outbound,
  z.ZodTypeDef,
  ListChunksPaginatedResponseBody
> = z.object({
  object: ListChunksPaginatedObject$outboundSchema,
  data: z.array(z.lazy(() => ListChunksPaginatedData$outboundSchema)),
  hasMore: z.boolean(),
}).transform((v) => {
  return remap$(v, {
    hasMore: "has_more",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListChunksPaginatedResponseBody$ {
  /** @deprecated use `ListChunksPaginatedResponseBody$inboundSchema` instead. */
  export const inboundSchema = ListChunksPaginatedResponseBody$inboundSchema;
  /** @deprecated use `ListChunksPaginatedResponseBody$outboundSchema` instead. */
  export const outboundSchema = ListChunksPaginatedResponseBody$outboundSchema;
  /** @deprecated use `ListChunksPaginatedResponseBody$Outbound` instead. */
  export type Outbound = ListChunksPaginatedResponseBody$Outbound;
}

export function listChunksPaginatedResponseBodyToJSON(
  listChunksPaginatedResponseBody: ListChunksPaginatedResponseBody,
): string {
  return JSON.stringify(
    ListChunksPaginatedResponseBody$outboundSchema.parse(
      listChunksPaginatedResponseBody,
    ),
  );
}

export function listChunksPaginatedResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<ListChunksPaginatedResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListChunksPaginatedResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListChunksPaginatedResponseBody' from JSON`,
  );
}
