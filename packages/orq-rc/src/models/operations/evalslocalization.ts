/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type EvalsLocalizationRequestBody = {
  query: string;
  output: string;
  model: string;
};

export type EvalsLocalizationEvalsValue = number | boolean | string;

export type EvalsLocalizationOriginalValue = number | boolean | string;

export type EvalsLocalizationValue = {
  value: number | boolean | string;
  explanation?: string | null | undefined;
  originalValue?: number | boolean | string | null | undefined;
  originalExplanation?: string | null | undefined;
};

/**
 * Returns the result of the evaluator run
 */
export type EvalsLocalizationResponseBody = {
  value: EvalsLocalizationValue | null;
};

/** @internal */
export const EvalsLocalizationRequestBody$inboundSchema: z.ZodType<
  EvalsLocalizationRequestBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  query: z.string(),
  output: z.string(),
  model: z.string(),
});

/** @internal */
export type EvalsLocalizationRequestBody$Outbound = {
  query: string;
  output: string;
  model: string;
};

/** @internal */
export const EvalsLocalizationRequestBody$outboundSchema: z.ZodType<
  EvalsLocalizationRequestBody$Outbound,
  z.ZodTypeDef,
  EvalsLocalizationRequestBody
> = z.object({
  query: z.string(),
  output: z.string(),
  model: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EvalsLocalizationRequestBody$ {
  /** @deprecated use `EvalsLocalizationRequestBody$inboundSchema` instead. */
  export const inboundSchema = EvalsLocalizationRequestBody$inboundSchema;
  /** @deprecated use `EvalsLocalizationRequestBody$outboundSchema` instead. */
  export const outboundSchema = EvalsLocalizationRequestBody$outboundSchema;
  /** @deprecated use `EvalsLocalizationRequestBody$Outbound` instead. */
  export type Outbound = EvalsLocalizationRequestBody$Outbound;
}

export function evalsLocalizationRequestBodyToJSON(
  evalsLocalizationRequestBody: EvalsLocalizationRequestBody,
): string {
  return JSON.stringify(
    EvalsLocalizationRequestBody$outboundSchema.parse(
      evalsLocalizationRequestBody,
    ),
  );
}

export function evalsLocalizationRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<EvalsLocalizationRequestBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => EvalsLocalizationRequestBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'EvalsLocalizationRequestBody' from JSON`,
  );
}

/** @internal */
export const EvalsLocalizationEvalsValue$inboundSchema: z.ZodType<
  EvalsLocalizationEvalsValue,
  z.ZodTypeDef,
  unknown
> = z.union([z.number(), z.boolean(), z.string()]);

/** @internal */
export type EvalsLocalizationEvalsValue$Outbound = number | boolean | string;

/** @internal */
export const EvalsLocalizationEvalsValue$outboundSchema: z.ZodType<
  EvalsLocalizationEvalsValue$Outbound,
  z.ZodTypeDef,
  EvalsLocalizationEvalsValue
> = z.union([z.number(), z.boolean(), z.string()]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EvalsLocalizationEvalsValue$ {
  /** @deprecated use `EvalsLocalizationEvalsValue$inboundSchema` instead. */
  export const inboundSchema = EvalsLocalizationEvalsValue$inboundSchema;
  /** @deprecated use `EvalsLocalizationEvalsValue$outboundSchema` instead. */
  export const outboundSchema = EvalsLocalizationEvalsValue$outboundSchema;
  /** @deprecated use `EvalsLocalizationEvalsValue$Outbound` instead. */
  export type Outbound = EvalsLocalizationEvalsValue$Outbound;
}

export function evalsLocalizationEvalsValueToJSON(
  evalsLocalizationEvalsValue: EvalsLocalizationEvalsValue,
): string {
  return JSON.stringify(
    EvalsLocalizationEvalsValue$outboundSchema.parse(
      evalsLocalizationEvalsValue,
    ),
  );
}

export function evalsLocalizationEvalsValueFromJSON(
  jsonString: string,
): SafeParseResult<EvalsLocalizationEvalsValue, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => EvalsLocalizationEvalsValue$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'EvalsLocalizationEvalsValue' from JSON`,
  );
}

/** @internal */
export const EvalsLocalizationOriginalValue$inboundSchema: z.ZodType<
  EvalsLocalizationOriginalValue,
  z.ZodTypeDef,
  unknown
> = z.union([z.number(), z.boolean(), z.string()]);

/** @internal */
export type EvalsLocalizationOriginalValue$Outbound = number | boolean | string;

/** @internal */
export const EvalsLocalizationOriginalValue$outboundSchema: z.ZodType<
  EvalsLocalizationOriginalValue$Outbound,
  z.ZodTypeDef,
  EvalsLocalizationOriginalValue
> = z.union([z.number(), z.boolean(), z.string()]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EvalsLocalizationOriginalValue$ {
  /** @deprecated use `EvalsLocalizationOriginalValue$inboundSchema` instead. */
  export const inboundSchema = EvalsLocalizationOriginalValue$inboundSchema;
  /** @deprecated use `EvalsLocalizationOriginalValue$outboundSchema` instead. */
  export const outboundSchema = EvalsLocalizationOriginalValue$outboundSchema;
  /** @deprecated use `EvalsLocalizationOriginalValue$Outbound` instead. */
  export type Outbound = EvalsLocalizationOriginalValue$Outbound;
}

export function evalsLocalizationOriginalValueToJSON(
  evalsLocalizationOriginalValue: EvalsLocalizationOriginalValue,
): string {
  return JSON.stringify(
    EvalsLocalizationOriginalValue$outboundSchema.parse(
      evalsLocalizationOriginalValue,
    ),
  );
}

export function evalsLocalizationOriginalValueFromJSON(
  jsonString: string,
): SafeParseResult<EvalsLocalizationOriginalValue, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => EvalsLocalizationOriginalValue$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'EvalsLocalizationOriginalValue' from JSON`,
  );
}

/** @internal */
export const EvalsLocalizationValue$inboundSchema: z.ZodType<
  EvalsLocalizationValue,
  z.ZodTypeDef,
  unknown
> = z.object({
  value: z.union([z.number(), z.boolean(), z.string()]),
  explanation: z.nullable(z.string()).optional(),
  original_value: z.nullable(z.union([z.number(), z.boolean(), z.string()]))
    .optional(),
  original_explanation: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    "original_value": "originalValue",
    "original_explanation": "originalExplanation",
  });
});

/** @internal */
export type EvalsLocalizationValue$Outbound = {
  value: number | boolean | string;
  explanation?: string | null | undefined;
  original_value?: number | boolean | string | null | undefined;
  original_explanation?: string | null | undefined;
};

/** @internal */
export const EvalsLocalizationValue$outboundSchema: z.ZodType<
  EvalsLocalizationValue$Outbound,
  z.ZodTypeDef,
  EvalsLocalizationValue
> = z.object({
  value: z.union([z.number(), z.boolean(), z.string()]),
  explanation: z.nullable(z.string()).optional(),
  originalValue: z.nullable(z.union([z.number(), z.boolean(), z.string()]))
    .optional(),
  originalExplanation: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    originalValue: "original_value",
    originalExplanation: "original_explanation",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EvalsLocalizationValue$ {
  /** @deprecated use `EvalsLocalizationValue$inboundSchema` instead. */
  export const inboundSchema = EvalsLocalizationValue$inboundSchema;
  /** @deprecated use `EvalsLocalizationValue$outboundSchema` instead. */
  export const outboundSchema = EvalsLocalizationValue$outboundSchema;
  /** @deprecated use `EvalsLocalizationValue$Outbound` instead. */
  export type Outbound = EvalsLocalizationValue$Outbound;
}

export function evalsLocalizationValueToJSON(
  evalsLocalizationValue: EvalsLocalizationValue,
): string {
  return JSON.stringify(
    EvalsLocalizationValue$outboundSchema.parse(evalsLocalizationValue),
  );
}

export function evalsLocalizationValueFromJSON(
  jsonString: string,
): SafeParseResult<EvalsLocalizationValue, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => EvalsLocalizationValue$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'EvalsLocalizationValue' from JSON`,
  );
}

/** @internal */
export const EvalsLocalizationResponseBody$inboundSchema: z.ZodType<
  EvalsLocalizationResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  value: z.nullable(z.lazy(() => EvalsLocalizationValue$inboundSchema)),
});

/** @internal */
export type EvalsLocalizationResponseBody$Outbound = {
  value: EvalsLocalizationValue$Outbound | null;
};

/** @internal */
export const EvalsLocalizationResponseBody$outboundSchema: z.ZodType<
  EvalsLocalizationResponseBody$Outbound,
  z.ZodTypeDef,
  EvalsLocalizationResponseBody
> = z.object({
  value: z.nullable(z.lazy(() => EvalsLocalizationValue$outboundSchema)),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EvalsLocalizationResponseBody$ {
  /** @deprecated use `EvalsLocalizationResponseBody$inboundSchema` instead. */
  export const inboundSchema = EvalsLocalizationResponseBody$inboundSchema;
  /** @deprecated use `EvalsLocalizationResponseBody$outboundSchema` instead. */
  export const outboundSchema = EvalsLocalizationResponseBody$outboundSchema;
  /** @deprecated use `EvalsLocalizationResponseBody$Outbound` instead. */
  export type Outbound = EvalsLocalizationResponseBody$Outbound;
}

export function evalsLocalizationResponseBodyToJSON(
  evalsLocalizationResponseBody: EvalsLocalizationResponseBody,
): string {
  return JSON.stringify(
    EvalsLocalizationResponseBody$outboundSchema.parse(
      evalsLocalizationResponseBody,
    ),
  );
}

export function evalsLocalizationResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<EvalsLocalizationResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => EvalsLocalizationResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'EvalsLocalizationResponseBody' from JSON`,
  );
}
