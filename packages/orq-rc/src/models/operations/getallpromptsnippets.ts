/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type GetAllPromptSnippetsGlobals = {
  contactId?: string | undefined;
};

export type GetAllPromptSnippetsRequest = {
  /**
   * A limit on the number of objects to be returned. Limit can range between 1 and 50, and the default is 10
   */
  limit?: number | undefined;
  /**
   * A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 20 objects, ending with `01JJ1HDHN79XAS7A01WB3HYSDB`, your subsequent call can include `after=01JJ1HDHN79XAS7A01WB3HYSDB` in order to fetch the next page of the list.
   */
  startingAfter?: string | undefined;
  /**
   * A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 20 objects, starting with `01JJ1HDHN79XAS7A01WB3HYSDB`, your subsequent call can include `before=01JJ1HDHN79XAS7A01WB3HYSDB` in order to fetch the previous page of the list.
   */
  endingBefore?: string | undefined;
};

export const GetAllPromptSnippetsObject = {
  List: "list",
} as const;
export type GetAllPromptSnippetsObject = ClosedEnum<
  typeof GetAllPromptSnippetsObject
>;

export const GetAllPromptSnippetsOwner2 = {
  Vendor: "vendor",
} as const;
export type GetAllPromptSnippetsOwner2 = ClosedEnum<
  typeof GetAllPromptSnippetsOwner2
>;

export type GetAllPromptSnippetsOwner = string | GetAllPromptSnippetsOwner2;

/**
 * The type of the model
 */
export const GetAllPromptSnippetsModelType = {
  Chat: "chat",
  Completion: "completion",
  Embedding: "embedding",
  Vision: "vision",
  Image: "image",
  Tts: "tts",
  Stt: "stt",
  Rerank: "rerank",
  Moderations: "moderations",
} as const;
/**
 * The type of the model
 */
export type GetAllPromptSnippetsModelType = ClosedEnum<
  typeof GetAllPromptSnippetsModelType
>;

/**
 * Only supported on `image` models.
 */
export const GetAllPromptSnippetsFormat = {
  Url: "url",
  B64Json: "b64_json",
  Text: "text",
  JsonObject: "json_object",
} as const;
/**
 * Only supported on `image` models.
 */
export type GetAllPromptSnippetsFormat = ClosedEnum<
  typeof GetAllPromptSnippetsFormat
>;

/**
 * Only supported on `image` models.
 */
export const GetAllPromptSnippetsQuality = {
  Standard: "standard",
  Hd: "hd",
} as const;
/**
 * Only supported on `image` models.
 */
export type GetAllPromptSnippetsQuality = ClosedEnum<
  typeof GetAllPromptSnippetsQuality
>;

export const GetAllPromptSnippetsResponseFormatPromptSnippetsType = {
  JsonObject: "json_object",
} as const;
export type GetAllPromptSnippetsResponseFormatPromptSnippetsType = ClosedEnum<
  typeof GetAllPromptSnippetsResponseFormatPromptSnippetsType
>;

export type GetAllPromptSnippetsResponseFormat2 = {
  type: GetAllPromptSnippetsResponseFormatPromptSnippetsType;
};

export const GetAllPromptSnippetsResponseFormatType = {
  JsonSchema: "json_schema",
} as const;
export type GetAllPromptSnippetsResponseFormatType = ClosedEnum<
  typeof GetAllPromptSnippetsResponseFormatType
>;

export type GetAllPromptSnippetsResponseFormatJsonSchema = {
  name: string;
  strict: boolean;
  schema: { [k: string]: any };
};

export type GetAllPromptSnippetsResponseFormat1 = {
  type: GetAllPromptSnippetsResponseFormatType;
  jsonSchema: GetAllPromptSnippetsResponseFormatJsonSchema;
};

/**
 * An object specifying the format that the model must output.
 *
 * @remarks
 *
 *  Setting to `{ "type": "json_schema", "json_schema": {...} }` enables Structured Outputs which ensures the model will match your supplied JSON schema
 *
 *  Setting to `{ "type": "json_object" }` enables JSON mode, which ensures the message the model generates is valid JSON.
 *
 * Important: when using JSON mode, you must also instruct the model to produce JSON yourself via a system or user message. Without this, the model may generate an unending stream of whitespace until the generation reaches the token limit, resulting in a long-running and seemingly "stuck" request. Also note that the message content may be partially cut off if finish_reason="length", which indicates the generation exceeded max_tokens or the conversation exceeded the max context length.
 */
export type GetAllPromptSnippetsResponseFormat =
  | GetAllPromptSnippetsResponseFormat2
  | GetAllPromptSnippetsResponseFormat1;

/**
 * The version of photoReal to use. Must be v1 or v2. Only available for `leonardoai` provider
 */
export const GetAllPromptSnippetsPhotoRealVersion = {
  V1: "v1",
  V2: "v2",
} as const;
/**
 * The version of photoReal to use. Must be v1 or v2. Only available for `leonardoai` provider
 */
export type GetAllPromptSnippetsPhotoRealVersion = ClosedEnum<
  typeof GetAllPromptSnippetsPhotoRealVersion
>;

/**
 * The format to return the embeddings
 */
export const GetAllPromptSnippetsEncodingFormat = {
  Float: "float",
  Base64: "base64",
} as const;
/**
 * The format to return the embeddings
 */
export type GetAllPromptSnippetsEncodingFormat = ClosedEnum<
  typeof GetAllPromptSnippetsEncodingFormat
>;

/**
 * Constrains effort on reasoning for reasoning models. Reducing reasoning effort can result in faster responses and fewer tokens used on reasoning in a response.
 */
export const GetAllPromptSnippetsReasoningEffort = {
  Low: "low",
  Medium: "medium",
  High: "high",
} as const;
/**
 * Constrains effort on reasoning for reasoning models. Reducing reasoning effort can result in faster responses and fewer tokens used on reasoning in a response.
 */
export type GetAllPromptSnippetsReasoningEffort = ClosedEnum<
  typeof GetAllPromptSnippetsReasoningEffort
>;

/**
 * Model Parameters: Not all parameters apply to every model
 */
export type GetAllPromptSnippetsModelParameters = {
  /**
   * Only supported on `chat` and `completion` models.
   */
  temperature?: number | undefined;
  /**
   * Only supported on `chat` and `completion` models.
   */
  maxTokens?: number | undefined;
  /**
   * Only supported on `chat` and `completion` models.
   */
  topK?: number | undefined;
  /**
   * Only supported on `chat` and `completion` models.
   */
  topP?: number | undefined;
  /**
   * Only supported on `chat` and `completion` models.
   */
  frequencyPenalty?: number | undefined;
  /**
   * Only supported on `chat` and `completion` models.
   */
  presencePenalty?: number | undefined;
  /**
   * Only supported on `image` models.
   */
  numImages?: number | undefined;
  /**
   * Best effort deterministic seed for the model. Currently only OpenAI models support these
   */
  seed?: number | undefined;
  /**
   * Only supported on `image` models.
   */
  format?: GetAllPromptSnippetsFormat | undefined;
  /**
   * Only supported on `image` models.
   */
  dimensions?: string | undefined;
  /**
   * Only supported on `image` models.
   */
  quality?: GetAllPromptSnippetsQuality | undefined;
  /**
   * Only supported on `image` models.
   */
  style?: string | undefined;
  /**
   * An object specifying the format that the model must output.
   *
   * @remarks
   *
   *  Setting to `{ "type": "json_schema", "json_schema": {...} }` enables Structured Outputs which ensures the model will match your supplied JSON schema
   *
   *  Setting to `{ "type": "json_object" }` enables JSON mode, which ensures the message the model generates is valid JSON.
   *
   * Important: when using JSON mode, you must also instruct the model to produce JSON yourself via a system or user message. Without this, the model may generate an unending stream of whitespace until the generation reaches the token limit, resulting in a long-running and seemingly "stuck" request. Also note that the message content may be partially cut off if finish_reason="length", which indicates the generation exceeded max_tokens or the conversation exceeded the max context length.
   */
  responseFormat?:
    | GetAllPromptSnippetsResponseFormat2
    | GetAllPromptSnippetsResponseFormat1
    | null
    | undefined;
  /**
   * The version of photoReal to use. Must be v1 or v2. Only available for `leonardoai` provider
   */
  photoRealVersion?: GetAllPromptSnippetsPhotoRealVersion | undefined;
  /**
   * The format to return the embeddings
   */
  encodingFormat?: GetAllPromptSnippetsEncodingFormat | undefined;
  /**
   * Constrains effort on reasoning for reasoning models. Reducing reasoning effort can result in faster responses and fewer tokens used on reasoning in a response.
   */
  reasoningEffort?: GetAllPromptSnippetsReasoningEffort | undefined;
};

export const GetAllPromptSnippetsProvider = {
  Cohere: "cohere",
  Openai: "openai",
  Anthropic: "anthropic",
  Huggingface: "huggingface",
  Replicate: "replicate",
  Google: "google",
  GoogleAi: "google-ai",
  Azure: "azure",
  Aws: "aws",
  Anyscale: "anyscale",
  Perplexity: "perplexity",
  Groq: "groq",
  Fal: "fal",
  Leonardoai: "leonardoai",
  Nvidia: "nvidia",
  Jina: "jina",
  Togetherai: "togetherai",
  Elevenlabs: "elevenlabs",
} as const;
export type GetAllPromptSnippetsProvider = ClosedEnum<
  typeof GetAllPromptSnippetsProvider
>;

/**
 * The role of the prompt message
 */
export const GetAllPromptSnippetsRole = {
  System: "system",
  Assistant: "assistant",
  User: "user",
  Exception: "exception",
  Tool: "tool",
  Prompt: "prompt",
  Correction: "correction",
  ExpectedOutput: "expected_output",
} as const;
/**
 * The role of the prompt message
 */
export type GetAllPromptSnippetsRole = ClosedEnum<
  typeof GetAllPromptSnippetsRole
>;

export const GetAllPromptSnippets2PromptSnippetsType = {
  ImageUrl: "image_url",
} as const;
export type GetAllPromptSnippets2PromptSnippetsType = ClosedEnum<
  typeof GetAllPromptSnippets2PromptSnippetsType
>;

export type GetAllPromptSnippets2ImageUrl = {
  /**
   * The orq.ai id of the image
   */
  id?: string | undefined;
  /**
   * Either a URL of the image or the base64 encoded data URI.
   */
  url: string;
  /**
   * Specifies the detail level of the image. Currently only supported with OpenAI models
   */
  detail?: string | undefined;
};

/**
 * The image part of the prompt message. Only supported with vision models.
 */
export type GetAllPromptSnippets22 = {
  type: GetAllPromptSnippets2PromptSnippetsType;
  imageUrl: GetAllPromptSnippets2ImageUrl;
};

export const GetAllPromptSnippets2Type = {
  Text: "text",
} as const;
export type GetAllPromptSnippets2Type = ClosedEnum<
  typeof GetAllPromptSnippets2Type
>;

/**
 * Text content part of a prompt message
 */
export type GetAllPromptSnippets21 = {
  type: GetAllPromptSnippets2Type;
  text: string;
};

export type GetAllPromptSnippetsContent2 =
  | GetAllPromptSnippets21
  | GetAllPromptSnippets22;

/**
 * The contents of the user message. Either the text content of the message or an array of content parts with a defined type, each can be of type `text` or `image_url` when passing in images. You can pass multiple images by adding multiple `image_url` content parts.
 */
export type GetAllPromptSnippetsContent =
  | string
  | Array<GetAllPromptSnippets21 | GetAllPromptSnippets22>;

export const GetAllPromptSnippetsPromptSnippetsType = {
  Function: "function",
} as const;
export type GetAllPromptSnippetsPromptSnippetsType = ClosedEnum<
  typeof GetAllPromptSnippetsPromptSnippetsType
>;

export type GetAllPromptSnippetsFunction = {
  name: string;
  /**
   * JSON string arguments for the functions
   */
  arguments: string;
};

export type GetAllPromptSnippetsToolCalls = {
  id?: string | undefined;
  index?: number | undefined;
  type: GetAllPromptSnippetsPromptSnippetsType;
  function: GetAllPromptSnippetsFunction;
};

export type GetAllPromptSnippetsMessages = {
  /**
   * The role of the prompt message
   */
  role: GetAllPromptSnippetsRole;
  /**
   * The contents of the user message. Either the text content of the message or an array of content parts with a defined type, each can be of type `text` or `image_url` when passing in images. You can pass multiple images by adding multiple `image_url` content parts.
   */
  content: string | Array<GetAllPromptSnippets21 | GetAllPromptSnippets22>;
  toolCalls?: Array<GetAllPromptSnippetsToolCalls> | undefined;
};

/**
 * A list of messages compatible with the openAI schema
 */
export type GetAllPromptSnippetsPromptConfig = {
  stream?: boolean | undefined;
  model?: string | undefined;
  /**
   * The id of the resource
   */
  modelDbId?: string | undefined;
  /**
   * The type of the model
   */
  modelType?: GetAllPromptSnippetsModelType | undefined;
  /**
   * Model Parameters: Not all parameters apply to every model
   */
  modelParameters?: GetAllPromptSnippetsModelParameters | undefined;
  provider?: GetAllPromptSnippetsProvider | undefined;
  /**
   * The id of the resource
   */
  integrationId?: string | null | undefined;
  version?: string | undefined;
  messages: Array<GetAllPromptSnippetsMessages>;
};

export const GetAllPromptSnippetsUseCases = {
  Agents: "Agents",
  AgentsSimulations: "Agents simulations",
  APIInteraction: "API interaction",
  AutonomousAgents: "Autonomous Agents",
  Chatbots: "Chatbots",
  Classification: "Classification",
  CodeUnderstanding: "Code understanding",
  CodeWriting: "Code writing",
  DocumentsQA: "Documents QA",
  Conversation: "Conversation",
  Extraction: "Extraction",
  MultiModal: "Multi-modal",
  SelfChecking: "Self-checking",
  Sql: "SQL",
  Summarization: "Summarization",
  Tagging: "Tagging",
} as const;
export type GetAllPromptSnippetsUseCases = ClosedEnum<
  typeof GetAllPromptSnippetsUseCases
>;

/**
 * The language that the prompt is written in. Use this field to categorize the prompt for your own purpose
 */
export const GetAllPromptSnippetsLanguage = {
  Chinese: "Chinese",
  Dutch: "Dutch",
  English: "English",
  French: "French",
  German: "German",
  Russian: "Russian",
  Spanish: "Spanish",
} as const;
/**
 * The language that the prompt is written in. Use this field to categorize the prompt for your own purpose
 */
export type GetAllPromptSnippetsLanguage = ClosedEnum<
  typeof GetAllPromptSnippetsLanguage
>;

export type GetAllPromptSnippetsMetadata = {
  /**
   * A list of use cases that the prompt is meant to be used for. Use this field to categorize the prompt for your own purpose
   */
  useCases?: Array<GetAllPromptSnippetsUseCases> | undefined;
  /**
   * The language that the prompt is written in. Use this field to categorize the prompt for your own purpose
   */
  language?: GetAllPromptSnippetsLanguage | undefined;
};

export const GetAllPromptSnippetsType = {
  Snippet: "snippet",
} as const;
export type GetAllPromptSnippetsType = ClosedEnum<
  typeof GetAllPromptSnippetsType
>;

/**
 * The type of the model
 */
export const GetAllPromptSnippetsPromptSnippetsModelType = {
  Chat: "chat",
  Completion: "completion",
  Embedding: "embedding",
  Vision: "vision",
  Image: "image",
  Tts: "tts",
  Stt: "stt",
  Rerank: "rerank",
  Moderations: "moderations",
} as const;
/**
 * The type of the model
 */
export type GetAllPromptSnippetsPromptSnippetsModelType = ClosedEnum<
  typeof GetAllPromptSnippetsPromptSnippetsModelType
>;

/**
 * Only supported on `image` models.
 */
export const GetAllPromptSnippetsPromptSnippetsFormat = {
  Url: "url",
  B64Json: "b64_json",
  Text: "text",
  JsonObject: "json_object",
} as const;
/**
 * Only supported on `image` models.
 */
export type GetAllPromptSnippetsPromptSnippetsFormat = ClosedEnum<
  typeof GetAllPromptSnippetsPromptSnippetsFormat
>;

/**
 * Only supported on `image` models.
 */
export const GetAllPromptSnippetsPromptSnippetsQuality = {
  Standard: "standard",
  Hd: "hd",
} as const;
/**
 * Only supported on `image` models.
 */
export type GetAllPromptSnippetsPromptSnippetsQuality = ClosedEnum<
  typeof GetAllPromptSnippetsPromptSnippetsQuality
>;

export const GetAllPromptSnippetsResponseFormatPromptSnippetsResponse200Type = {
  JsonObject: "json_object",
} as const;
export type GetAllPromptSnippetsResponseFormatPromptSnippetsResponse200Type =
  ClosedEnum<
    typeof GetAllPromptSnippetsResponseFormatPromptSnippetsResponse200Type
  >;

export type GetAllPromptSnippetsResponseFormatPromptSnippets2 = {
  type: GetAllPromptSnippetsResponseFormatPromptSnippetsResponse200Type;
};

export const GetAllPromptSnippetsResponseFormatPromptSnippetsResponseType = {
  JsonSchema: "json_schema",
} as const;
export type GetAllPromptSnippetsResponseFormatPromptSnippetsResponseType =
  ClosedEnum<
    typeof GetAllPromptSnippetsResponseFormatPromptSnippetsResponseType
  >;

export type GetAllPromptSnippetsResponseFormatPromptSnippetsJsonSchema = {
  name: string;
  strict: boolean;
  schema: { [k: string]: any };
};

export type GetAllPromptSnippetsResponseFormatPromptSnippets1 = {
  type: GetAllPromptSnippetsResponseFormatPromptSnippetsResponseType;
  jsonSchema: GetAllPromptSnippetsResponseFormatPromptSnippetsJsonSchema;
};

/**
 * An object specifying the format that the model must output.
 *
 * @remarks
 *
 *  Setting to `{ "type": "json_schema", "json_schema": {...} }` enables Structured Outputs which ensures the model will match your supplied JSON schema
 *
 *  Setting to `{ "type": "json_object" }` enables JSON mode, which ensures the message the model generates is valid JSON.
 *
 * Important: when using JSON mode, you must also instruct the model to produce JSON yourself via a system or user message. Without this, the model may generate an unending stream of whitespace until the generation reaches the token limit, resulting in a long-running and seemingly "stuck" request. Also note that the message content may be partially cut off if finish_reason="length", which indicates the generation exceeded max_tokens or the conversation exceeded the max context length.
 */
export type GetAllPromptSnippetsPromptSnippetsResponseFormat =
  | GetAllPromptSnippetsResponseFormatPromptSnippets2
  | GetAllPromptSnippetsResponseFormatPromptSnippets1;

/**
 * The version of photoReal to use. Must be v1 or v2. Only available for `leonardoai` provider
 */
export const GetAllPromptSnippetsPromptSnippetsPhotoRealVersion = {
  V1: "v1",
  V2: "v2",
} as const;
/**
 * The version of photoReal to use. Must be v1 or v2. Only available for `leonardoai` provider
 */
export type GetAllPromptSnippetsPromptSnippetsPhotoRealVersion = ClosedEnum<
  typeof GetAllPromptSnippetsPromptSnippetsPhotoRealVersion
>;

/**
 * The format to return the embeddings
 */
export const GetAllPromptSnippetsPromptSnippetsEncodingFormat = {
  Float: "float",
  Base64: "base64",
} as const;
/**
 * The format to return the embeddings
 */
export type GetAllPromptSnippetsPromptSnippetsEncodingFormat = ClosedEnum<
  typeof GetAllPromptSnippetsPromptSnippetsEncodingFormat
>;

/**
 * Constrains effort on reasoning for reasoning models. Reducing reasoning effort can result in faster responses and fewer tokens used on reasoning in a response.
 */
export const GetAllPromptSnippetsPromptSnippetsReasoningEffort = {
  Low: "low",
  Medium: "medium",
  High: "high",
} as const;
/**
 * Constrains effort on reasoning for reasoning models. Reducing reasoning effort can result in faster responses and fewer tokens used on reasoning in a response.
 */
export type GetAllPromptSnippetsPromptSnippetsReasoningEffort = ClosedEnum<
  typeof GetAllPromptSnippetsPromptSnippetsReasoningEffort
>;

/**
 * Model Parameters: Not all parameters apply to every model
 */
export type GetAllPromptSnippetsPromptSnippetsModelParameters = {
  /**
   * Only supported on `chat` and `completion` models.
   */
  temperature?: number | undefined;
  /**
   * Only supported on `chat` and `completion` models.
   */
  maxTokens?: number | undefined;
  /**
   * Only supported on `chat` and `completion` models.
   */
  topK?: number | undefined;
  /**
   * Only supported on `chat` and `completion` models.
   */
  topP?: number | undefined;
  /**
   * Only supported on `chat` and `completion` models.
   */
  frequencyPenalty?: number | undefined;
  /**
   * Only supported on `chat` and `completion` models.
   */
  presencePenalty?: number | undefined;
  /**
   * Only supported on `image` models.
   */
  numImages?: number | undefined;
  /**
   * Best effort deterministic seed for the model. Currently only OpenAI models support these
   */
  seed?: number | undefined;
  /**
   * Only supported on `image` models.
   */
  format?: GetAllPromptSnippetsPromptSnippetsFormat | undefined;
  /**
   * Only supported on `image` models.
   */
  dimensions?: string | undefined;
  /**
   * Only supported on `image` models.
   */
  quality?: GetAllPromptSnippetsPromptSnippetsQuality | undefined;
  /**
   * Only supported on `image` models.
   */
  style?: string | undefined;
  /**
   * An object specifying the format that the model must output.
   *
   * @remarks
   *
   *  Setting to `{ "type": "json_schema", "json_schema": {...} }` enables Structured Outputs which ensures the model will match your supplied JSON schema
   *
   *  Setting to `{ "type": "json_object" }` enables JSON mode, which ensures the message the model generates is valid JSON.
   *
   * Important: when using JSON mode, you must also instruct the model to produce JSON yourself via a system or user message. Without this, the model may generate an unending stream of whitespace until the generation reaches the token limit, resulting in a long-running and seemingly "stuck" request. Also note that the message content may be partially cut off if finish_reason="length", which indicates the generation exceeded max_tokens or the conversation exceeded the max context length.
   */
  responseFormat?:
    | GetAllPromptSnippetsResponseFormatPromptSnippets2
    | GetAllPromptSnippetsResponseFormatPromptSnippets1
    | null
    | undefined;
  /**
   * The version of photoReal to use. Must be v1 or v2. Only available for `leonardoai` provider
   */
  photoRealVersion?:
    | GetAllPromptSnippetsPromptSnippetsPhotoRealVersion
    | undefined;
  /**
   * The format to return the embeddings
   */
  encodingFormat?: GetAllPromptSnippetsPromptSnippetsEncodingFormat | undefined;
  /**
   * Constrains effort on reasoning for reasoning models. Reducing reasoning effort can result in faster responses and fewer tokens used on reasoning in a response.
   */
  reasoningEffort?:
    | GetAllPromptSnippetsPromptSnippetsReasoningEffort
    | undefined;
};

export const GetAllPromptSnippetsPromptSnippetsProvider = {
  Cohere: "cohere",
  Openai: "openai",
  Anthropic: "anthropic",
  Huggingface: "huggingface",
  Replicate: "replicate",
  Google: "google",
  GoogleAi: "google-ai",
  Azure: "azure",
  Aws: "aws",
  Anyscale: "anyscale",
  Perplexity: "perplexity",
  Groq: "groq",
  Fal: "fal",
  Leonardoai: "leonardoai",
  Nvidia: "nvidia",
  Jina: "jina",
  Togetherai: "togetherai",
  Elevenlabs: "elevenlabs",
} as const;
export type GetAllPromptSnippetsPromptSnippetsProvider = ClosedEnum<
  typeof GetAllPromptSnippetsPromptSnippetsProvider
>;

/**
 * The role of the prompt message
 */
export const GetAllPromptSnippetsPromptSnippetsRole = {
  System: "system",
  Assistant: "assistant",
  User: "user",
  Exception: "exception",
  Tool: "tool",
  Prompt: "prompt",
  Correction: "correction",
  ExpectedOutput: "expected_output",
} as const;
/**
 * The role of the prompt message
 */
export type GetAllPromptSnippetsPromptSnippetsRole = ClosedEnum<
  typeof GetAllPromptSnippetsPromptSnippetsRole
>;

export const GetAllPromptSnippets2PromptSnippetsResponse200Type = {
  ImageUrl: "image_url",
} as const;
export type GetAllPromptSnippets2PromptSnippetsResponse200Type = ClosedEnum<
  typeof GetAllPromptSnippets2PromptSnippetsResponse200Type
>;

export type GetAllPromptSnippets2PromptSnippetsImageUrl = {
  /**
   * The orq.ai id of the image
   */
  id?: string | undefined;
  /**
   * Either a URL of the image or the base64 encoded data URI.
   */
  url: string;
  /**
   * Specifies the detail level of the image. Currently only supported with OpenAI models
   */
  detail?: string | undefined;
};

/**
 * The image part of the prompt message. Only supported with vision models.
 */
export type GetAllPromptSnippets2PromptSnippets2 = {
  type: GetAllPromptSnippets2PromptSnippetsResponse200Type;
  imageUrl: GetAllPromptSnippets2PromptSnippetsImageUrl;
};

export const GetAllPromptSnippets2PromptSnippetsResponseType = {
  Text: "text",
} as const;
export type GetAllPromptSnippets2PromptSnippetsResponseType = ClosedEnum<
  typeof GetAllPromptSnippets2PromptSnippetsResponseType
>;

/**
 * Text content part of a prompt message
 */
export type GetAllPromptSnippets2PromptSnippets1 = {
  type: GetAllPromptSnippets2PromptSnippetsResponseType;
  text: string;
};

export type GetAllPromptSnippetsContentPromptSnippets2 =
  | GetAllPromptSnippets2PromptSnippets1
  | GetAllPromptSnippets2PromptSnippets2;

/**
 * The contents of the user message. Either the text content of the message or an array of content parts with a defined type, each can be of type `text` or `image_url` when passing in images. You can pass multiple images by adding multiple `image_url` content parts.
 */
export type GetAllPromptSnippetsPromptSnippetsContent =
  | string
  | Array<
    GetAllPromptSnippets2PromptSnippets1 | GetAllPromptSnippets2PromptSnippets2
  >;

export const GetAllPromptSnippetsPromptSnippetsResponseType = {
  Function: "function",
} as const;
export type GetAllPromptSnippetsPromptSnippetsResponseType = ClosedEnum<
  typeof GetAllPromptSnippetsPromptSnippetsResponseType
>;

export type GetAllPromptSnippetsPromptSnippetsFunction = {
  name: string;
  /**
   * JSON string arguments for the functions
   */
  arguments: string;
};

export type GetAllPromptSnippetsPromptSnippetsToolCalls = {
  id?: string | undefined;
  index?: number | undefined;
  type: GetAllPromptSnippetsPromptSnippetsResponseType;
  function: GetAllPromptSnippetsPromptSnippetsFunction;
};

export type GetAllPromptSnippetsPromptSnippetsMessages = {
  /**
   * The role of the prompt message
   */
  role: GetAllPromptSnippetsPromptSnippetsRole;
  /**
   * The contents of the user message. Either the text content of the message or an array of content parts with a defined type, each can be of type `text` or `image_url` when passing in images. You can pass multiple images by adding multiple `image_url` content parts.
   */
  content:
    | string
    | Array<
      | GetAllPromptSnippets2PromptSnippets1
      | GetAllPromptSnippets2PromptSnippets2
    >;
  toolCalls?: Array<GetAllPromptSnippetsPromptSnippetsToolCalls> | undefined;
};

/**
 * A list of messages compatible with the openAI schema
 */
export type GetAllPromptSnippetsPromptSnippetsPromptConfig = {
  stream?: boolean | undefined;
  model?: string | undefined;
  /**
   * The id of the resource
   */
  modelDbId?: string | undefined;
  /**
   * The type of the model
   */
  modelType?: GetAllPromptSnippetsPromptSnippetsModelType | undefined;
  /**
   * Model Parameters: Not all parameters apply to every model
   */
  modelParameters?:
    | GetAllPromptSnippetsPromptSnippetsModelParameters
    | undefined;
  provider?: GetAllPromptSnippetsPromptSnippetsProvider | undefined;
  /**
   * The id of the resource
   */
  integrationId?: string | null | undefined;
  version?: string | undefined;
  messages: Array<GetAllPromptSnippetsPromptSnippetsMessages>;
};

export const GetAllPromptSnippetsPromptSnippetsUseCases = {
  Agents: "Agents",
  AgentsSimulations: "Agents simulations",
  APIInteraction: "API interaction",
  AutonomousAgents: "Autonomous Agents",
  Chatbots: "Chatbots",
  Classification: "Classification",
  CodeUnderstanding: "Code understanding",
  CodeWriting: "Code writing",
  DocumentsQA: "Documents QA",
  Conversation: "Conversation",
  Extraction: "Extraction",
  MultiModal: "Multi-modal",
  SelfChecking: "Self-checking",
  Sql: "SQL",
  Summarization: "Summarization",
  Tagging: "Tagging",
} as const;
export type GetAllPromptSnippetsPromptSnippetsUseCases = ClosedEnum<
  typeof GetAllPromptSnippetsPromptSnippetsUseCases
>;

/**
 * The language that the prompt is written in. Use this field to categorize the prompt for your own purpose
 */
export const GetAllPromptSnippetsPromptSnippetsLanguage = {
  Chinese: "Chinese",
  Dutch: "Dutch",
  English: "English",
  French: "French",
  German: "German",
  Russian: "Russian",
  Spanish: "Spanish",
} as const;
/**
 * The language that the prompt is written in. Use this field to categorize the prompt for your own purpose
 */
export type GetAllPromptSnippetsPromptSnippetsLanguage = ClosedEnum<
  typeof GetAllPromptSnippetsPromptSnippetsLanguage
>;

export type GetAllPromptSnippetsPromptSnippetsMetadata = {
  /**
   * A list of use cases that the prompt is meant to be used for. Use this field to categorize the prompt for your own purpose
   */
  useCases?: Array<GetAllPromptSnippetsPromptSnippetsUseCases> | undefined;
  /**
   * The language that the prompt is written in. Use this field to categorize the prompt for your own purpose
   */
  language?: GetAllPromptSnippetsPromptSnippetsLanguage | undefined;
};

/**
 * Prompt version model returned from the API
 */
export type GetAllPromptSnippetsVersions = {
  id: string;
  /**
   * The prompt snippet’s description, meant to be displayable in the UI. Use this field to optionally store a long form explanation of the prompt for your own purpose
   */
  description?: string | null | undefined;
  /**
   * A list of messages compatible with the openAI schema
   */
  promptConfig: GetAllPromptSnippetsPromptSnippetsPromptConfig;
  metadata: GetAllPromptSnippetsPromptSnippetsMetadata;
  createdById: string;
  updatedById: string;
  timestamp: string;
};

/**
 * Prompt snippet model returned from the API
 */
export type GetAllPromptSnippetsData = {
  id: string;
  owner: string | GetAllPromptSnippetsOwner2;
  domainId: string;
  key: string;
  /**
   * The prompt snippet’s description, meant to be displayable in the UI. Use this field to optionally store a long form explanation of the prompt for your own purpose
   */
  description?: string | null | undefined;
  /**
   * A list of messages compatible with the openAI schema
   */
  promptConfig: GetAllPromptSnippetsPromptConfig;
  metadata: GetAllPromptSnippetsMetadata;
  createdById: string;
  updatedById: string;
  /**
   * The date and time the resource was created
   */
  created?: Date | undefined;
  /**
   * The date and time the resource was last updated
   */
  updated?: Date | undefined;
  type: GetAllPromptSnippetsType;
  versions: Array<GetAllPromptSnippetsVersions>;
};

/**
 * Prompt snippets retrieved.
 */
export type GetAllPromptSnippetsResponseBody = {
  object: GetAllPromptSnippetsObject;
  data: Array<GetAllPromptSnippetsData>;
  hasMore: boolean;
};

/** @internal */
export const GetAllPromptSnippetsGlobals$inboundSchema: z.ZodType<
  GetAllPromptSnippetsGlobals,
  z.ZodTypeDef,
  unknown
> = z.object({
  contactId: z.string().optional(),
});

/** @internal */
export type GetAllPromptSnippetsGlobals$Outbound = {
  contactId?: string | undefined;
};

/** @internal */
export const GetAllPromptSnippetsGlobals$outboundSchema: z.ZodType<
  GetAllPromptSnippetsGlobals$Outbound,
  z.ZodTypeDef,
  GetAllPromptSnippetsGlobals
> = z.object({
  contactId: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPromptSnippetsGlobals$ {
  /** @deprecated use `GetAllPromptSnippetsGlobals$inboundSchema` instead. */
  export const inboundSchema = GetAllPromptSnippetsGlobals$inboundSchema;
  /** @deprecated use `GetAllPromptSnippetsGlobals$outboundSchema` instead. */
  export const outboundSchema = GetAllPromptSnippetsGlobals$outboundSchema;
  /** @deprecated use `GetAllPromptSnippetsGlobals$Outbound` instead. */
  export type Outbound = GetAllPromptSnippetsGlobals$Outbound;
}

export function getAllPromptSnippetsGlobalsToJSON(
  getAllPromptSnippetsGlobals: GetAllPromptSnippetsGlobals,
): string {
  return JSON.stringify(
    GetAllPromptSnippetsGlobals$outboundSchema.parse(
      getAllPromptSnippetsGlobals,
    ),
  );
}

export function getAllPromptSnippetsGlobalsFromJSON(
  jsonString: string,
): SafeParseResult<GetAllPromptSnippetsGlobals, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetAllPromptSnippetsGlobals$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetAllPromptSnippetsGlobals' from JSON`,
  );
}

/** @internal */
export const GetAllPromptSnippetsRequest$inboundSchema: z.ZodType<
  GetAllPromptSnippetsRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  limit: z.number().default(10),
  starting_after: z.string().optional(),
  ending_before: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "starting_after": "startingAfter",
    "ending_before": "endingBefore",
  });
});

/** @internal */
export type GetAllPromptSnippetsRequest$Outbound = {
  limit: number;
  starting_after?: string | undefined;
  ending_before?: string | undefined;
};

/** @internal */
export const GetAllPromptSnippetsRequest$outboundSchema: z.ZodType<
  GetAllPromptSnippetsRequest$Outbound,
  z.ZodTypeDef,
  GetAllPromptSnippetsRequest
> = z.object({
  limit: z.number().default(10),
  startingAfter: z.string().optional(),
  endingBefore: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    startingAfter: "starting_after",
    endingBefore: "ending_before",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPromptSnippetsRequest$ {
  /** @deprecated use `GetAllPromptSnippetsRequest$inboundSchema` instead. */
  export const inboundSchema = GetAllPromptSnippetsRequest$inboundSchema;
  /** @deprecated use `GetAllPromptSnippetsRequest$outboundSchema` instead. */
  export const outboundSchema = GetAllPromptSnippetsRequest$outboundSchema;
  /** @deprecated use `GetAllPromptSnippetsRequest$Outbound` instead. */
  export type Outbound = GetAllPromptSnippetsRequest$Outbound;
}

export function getAllPromptSnippetsRequestToJSON(
  getAllPromptSnippetsRequest: GetAllPromptSnippetsRequest,
): string {
  return JSON.stringify(
    GetAllPromptSnippetsRequest$outboundSchema.parse(
      getAllPromptSnippetsRequest,
    ),
  );
}

export function getAllPromptSnippetsRequestFromJSON(
  jsonString: string,
): SafeParseResult<GetAllPromptSnippetsRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetAllPromptSnippetsRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetAllPromptSnippetsRequest' from JSON`,
  );
}

/** @internal */
export const GetAllPromptSnippetsObject$inboundSchema: z.ZodNativeEnum<
  typeof GetAllPromptSnippetsObject
> = z.nativeEnum(GetAllPromptSnippetsObject);

/** @internal */
export const GetAllPromptSnippetsObject$outboundSchema: z.ZodNativeEnum<
  typeof GetAllPromptSnippetsObject
> = GetAllPromptSnippetsObject$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPromptSnippetsObject$ {
  /** @deprecated use `GetAllPromptSnippetsObject$inboundSchema` instead. */
  export const inboundSchema = GetAllPromptSnippetsObject$inboundSchema;
  /** @deprecated use `GetAllPromptSnippetsObject$outboundSchema` instead. */
  export const outboundSchema = GetAllPromptSnippetsObject$outboundSchema;
}

/** @internal */
export const GetAllPromptSnippetsOwner2$inboundSchema: z.ZodNativeEnum<
  typeof GetAllPromptSnippetsOwner2
> = z.nativeEnum(GetAllPromptSnippetsOwner2);

/** @internal */
export const GetAllPromptSnippetsOwner2$outboundSchema: z.ZodNativeEnum<
  typeof GetAllPromptSnippetsOwner2
> = GetAllPromptSnippetsOwner2$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPromptSnippetsOwner2$ {
  /** @deprecated use `GetAllPromptSnippetsOwner2$inboundSchema` instead. */
  export const inboundSchema = GetAllPromptSnippetsOwner2$inboundSchema;
  /** @deprecated use `GetAllPromptSnippetsOwner2$outboundSchema` instead. */
  export const outboundSchema = GetAllPromptSnippetsOwner2$outboundSchema;
}

/** @internal */
export const GetAllPromptSnippetsOwner$inboundSchema: z.ZodType<
  GetAllPromptSnippetsOwner,
  z.ZodTypeDef,
  unknown
> = z.union([z.string(), GetAllPromptSnippetsOwner2$inboundSchema]);

/** @internal */
export type GetAllPromptSnippetsOwner$Outbound = string | string;

/** @internal */
export const GetAllPromptSnippetsOwner$outboundSchema: z.ZodType<
  GetAllPromptSnippetsOwner$Outbound,
  z.ZodTypeDef,
  GetAllPromptSnippetsOwner
> = z.union([z.string(), GetAllPromptSnippetsOwner2$outboundSchema]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPromptSnippetsOwner$ {
  /** @deprecated use `GetAllPromptSnippetsOwner$inboundSchema` instead. */
  export const inboundSchema = GetAllPromptSnippetsOwner$inboundSchema;
  /** @deprecated use `GetAllPromptSnippetsOwner$outboundSchema` instead. */
  export const outboundSchema = GetAllPromptSnippetsOwner$outboundSchema;
  /** @deprecated use `GetAllPromptSnippetsOwner$Outbound` instead. */
  export type Outbound = GetAllPromptSnippetsOwner$Outbound;
}

export function getAllPromptSnippetsOwnerToJSON(
  getAllPromptSnippetsOwner: GetAllPromptSnippetsOwner,
): string {
  return JSON.stringify(
    GetAllPromptSnippetsOwner$outboundSchema.parse(getAllPromptSnippetsOwner),
  );
}

export function getAllPromptSnippetsOwnerFromJSON(
  jsonString: string,
): SafeParseResult<GetAllPromptSnippetsOwner, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetAllPromptSnippetsOwner$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetAllPromptSnippetsOwner' from JSON`,
  );
}

/** @internal */
export const GetAllPromptSnippetsModelType$inboundSchema: z.ZodNativeEnum<
  typeof GetAllPromptSnippetsModelType
> = z.nativeEnum(GetAllPromptSnippetsModelType);

/** @internal */
export const GetAllPromptSnippetsModelType$outboundSchema: z.ZodNativeEnum<
  typeof GetAllPromptSnippetsModelType
> = GetAllPromptSnippetsModelType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPromptSnippetsModelType$ {
  /** @deprecated use `GetAllPromptSnippetsModelType$inboundSchema` instead. */
  export const inboundSchema = GetAllPromptSnippetsModelType$inboundSchema;
  /** @deprecated use `GetAllPromptSnippetsModelType$outboundSchema` instead. */
  export const outboundSchema = GetAllPromptSnippetsModelType$outboundSchema;
}

/** @internal */
export const GetAllPromptSnippetsFormat$inboundSchema: z.ZodNativeEnum<
  typeof GetAllPromptSnippetsFormat
> = z.nativeEnum(GetAllPromptSnippetsFormat);

/** @internal */
export const GetAllPromptSnippetsFormat$outboundSchema: z.ZodNativeEnum<
  typeof GetAllPromptSnippetsFormat
> = GetAllPromptSnippetsFormat$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPromptSnippetsFormat$ {
  /** @deprecated use `GetAllPromptSnippetsFormat$inboundSchema` instead. */
  export const inboundSchema = GetAllPromptSnippetsFormat$inboundSchema;
  /** @deprecated use `GetAllPromptSnippetsFormat$outboundSchema` instead. */
  export const outboundSchema = GetAllPromptSnippetsFormat$outboundSchema;
}

/** @internal */
export const GetAllPromptSnippetsQuality$inboundSchema: z.ZodNativeEnum<
  typeof GetAllPromptSnippetsQuality
> = z.nativeEnum(GetAllPromptSnippetsQuality);

/** @internal */
export const GetAllPromptSnippetsQuality$outboundSchema: z.ZodNativeEnum<
  typeof GetAllPromptSnippetsQuality
> = GetAllPromptSnippetsQuality$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPromptSnippetsQuality$ {
  /** @deprecated use `GetAllPromptSnippetsQuality$inboundSchema` instead. */
  export const inboundSchema = GetAllPromptSnippetsQuality$inboundSchema;
  /** @deprecated use `GetAllPromptSnippetsQuality$outboundSchema` instead. */
  export const outboundSchema = GetAllPromptSnippetsQuality$outboundSchema;
}

/** @internal */
export const GetAllPromptSnippetsResponseFormatPromptSnippetsType$inboundSchema:
  z.ZodNativeEnum<typeof GetAllPromptSnippetsResponseFormatPromptSnippetsType> =
    z.nativeEnum(GetAllPromptSnippetsResponseFormatPromptSnippetsType);

/** @internal */
export const GetAllPromptSnippetsResponseFormatPromptSnippetsType$outboundSchema:
  z.ZodNativeEnum<typeof GetAllPromptSnippetsResponseFormatPromptSnippetsType> =
    GetAllPromptSnippetsResponseFormatPromptSnippetsType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPromptSnippetsResponseFormatPromptSnippetsType$ {
  /** @deprecated use `GetAllPromptSnippetsResponseFormatPromptSnippetsType$inboundSchema` instead. */
  export const inboundSchema =
    GetAllPromptSnippetsResponseFormatPromptSnippetsType$inboundSchema;
  /** @deprecated use `GetAllPromptSnippetsResponseFormatPromptSnippetsType$outboundSchema` instead. */
  export const outboundSchema =
    GetAllPromptSnippetsResponseFormatPromptSnippetsType$outboundSchema;
}

/** @internal */
export const GetAllPromptSnippetsResponseFormat2$inboundSchema: z.ZodType<
  GetAllPromptSnippetsResponseFormat2,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: GetAllPromptSnippetsResponseFormatPromptSnippetsType$inboundSchema,
});

/** @internal */
export type GetAllPromptSnippetsResponseFormat2$Outbound = {
  type: string;
};

/** @internal */
export const GetAllPromptSnippetsResponseFormat2$outboundSchema: z.ZodType<
  GetAllPromptSnippetsResponseFormat2$Outbound,
  z.ZodTypeDef,
  GetAllPromptSnippetsResponseFormat2
> = z.object({
  type: GetAllPromptSnippetsResponseFormatPromptSnippetsType$outboundSchema,
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPromptSnippetsResponseFormat2$ {
  /** @deprecated use `GetAllPromptSnippetsResponseFormat2$inboundSchema` instead. */
  export const inboundSchema =
    GetAllPromptSnippetsResponseFormat2$inboundSchema;
  /** @deprecated use `GetAllPromptSnippetsResponseFormat2$outboundSchema` instead. */
  export const outboundSchema =
    GetAllPromptSnippetsResponseFormat2$outboundSchema;
  /** @deprecated use `GetAllPromptSnippetsResponseFormat2$Outbound` instead. */
  export type Outbound = GetAllPromptSnippetsResponseFormat2$Outbound;
}

export function getAllPromptSnippetsResponseFormat2ToJSON(
  getAllPromptSnippetsResponseFormat2: GetAllPromptSnippetsResponseFormat2,
): string {
  return JSON.stringify(
    GetAllPromptSnippetsResponseFormat2$outboundSchema.parse(
      getAllPromptSnippetsResponseFormat2,
    ),
  );
}

export function getAllPromptSnippetsResponseFormat2FromJSON(
  jsonString: string,
): SafeParseResult<GetAllPromptSnippetsResponseFormat2, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      GetAllPromptSnippetsResponseFormat2$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetAllPromptSnippetsResponseFormat2' from JSON`,
  );
}

/** @internal */
export const GetAllPromptSnippetsResponseFormatType$inboundSchema:
  z.ZodNativeEnum<typeof GetAllPromptSnippetsResponseFormatType> = z.nativeEnum(
    GetAllPromptSnippetsResponseFormatType,
  );

/** @internal */
export const GetAllPromptSnippetsResponseFormatType$outboundSchema:
  z.ZodNativeEnum<typeof GetAllPromptSnippetsResponseFormatType> =
    GetAllPromptSnippetsResponseFormatType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPromptSnippetsResponseFormatType$ {
  /** @deprecated use `GetAllPromptSnippetsResponseFormatType$inboundSchema` instead. */
  export const inboundSchema =
    GetAllPromptSnippetsResponseFormatType$inboundSchema;
  /** @deprecated use `GetAllPromptSnippetsResponseFormatType$outboundSchema` instead. */
  export const outboundSchema =
    GetAllPromptSnippetsResponseFormatType$outboundSchema;
}

/** @internal */
export const GetAllPromptSnippetsResponseFormatJsonSchema$inboundSchema:
  z.ZodType<
    GetAllPromptSnippetsResponseFormatJsonSchema,
    z.ZodTypeDef,
    unknown
  > = z.object({
    name: z.string(),
    strict: z.boolean(),
    schema: z.record(z.any()),
  });

/** @internal */
export type GetAllPromptSnippetsResponseFormatJsonSchema$Outbound = {
  name: string;
  strict: boolean;
  schema: { [k: string]: any };
};

/** @internal */
export const GetAllPromptSnippetsResponseFormatJsonSchema$outboundSchema:
  z.ZodType<
    GetAllPromptSnippetsResponseFormatJsonSchema$Outbound,
    z.ZodTypeDef,
    GetAllPromptSnippetsResponseFormatJsonSchema
  > = z.object({
    name: z.string(),
    strict: z.boolean(),
    schema: z.record(z.any()),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPromptSnippetsResponseFormatJsonSchema$ {
  /** @deprecated use `GetAllPromptSnippetsResponseFormatJsonSchema$inboundSchema` instead. */
  export const inboundSchema =
    GetAllPromptSnippetsResponseFormatJsonSchema$inboundSchema;
  /** @deprecated use `GetAllPromptSnippetsResponseFormatJsonSchema$outboundSchema` instead. */
  export const outboundSchema =
    GetAllPromptSnippetsResponseFormatJsonSchema$outboundSchema;
  /** @deprecated use `GetAllPromptSnippetsResponseFormatJsonSchema$Outbound` instead. */
  export type Outbound = GetAllPromptSnippetsResponseFormatJsonSchema$Outbound;
}

export function getAllPromptSnippetsResponseFormatJsonSchemaToJSON(
  getAllPromptSnippetsResponseFormatJsonSchema:
    GetAllPromptSnippetsResponseFormatJsonSchema,
): string {
  return JSON.stringify(
    GetAllPromptSnippetsResponseFormatJsonSchema$outboundSchema.parse(
      getAllPromptSnippetsResponseFormatJsonSchema,
    ),
  );
}

export function getAllPromptSnippetsResponseFormatJsonSchemaFromJSON(
  jsonString: string,
): SafeParseResult<
  GetAllPromptSnippetsResponseFormatJsonSchema,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetAllPromptSnippetsResponseFormatJsonSchema$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'GetAllPromptSnippetsResponseFormatJsonSchema' from JSON`,
  );
}

/** @internal */
export const GetAllPromptSnippetsResponseFormat1$inboundSchema: z.ZodType<
  GetAllPromptSnippetsResponseFormat1,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: GetAllPromptSnippetsResponseFormatType$inboundSchema,
  json_schema: z.lazy(() =>
    GetAllPromptSnippetsResponseFormatJsonSchema$inboundSchema
  ),
}).transform((v) => {
  return remap$(v, {
    "json_schema": "jsonSchema",
  });
});

/** @internal */
export type GetAllPromptSnippetsResponseFormat1$Outbound = {
  type: string;
  json_schema: GetAllPromptSnippetsResponseFormatJsonSchema$Outbound;
};

/** @internal */
export const GetAllPromptSnippetsResponseFormat1$outboundSchema: z.ZodType<
  GetAllPromptSnippetsResponseFormat1$Outbound,
  z.ZodTypeDef,
  GetAllPromptSnippetsResponseFormat1
> = z.object({
  type: GetAllPromptSnippetsResponseFormatType$outboundSchema,
  jsonSchema: z.lazy(() =>
    GetAllPromptSnippetsResponseFormatJsonSchema$outboundSchema
  ),
}).transform((v) => {
  return remap$(v, {
    jsonSchema: "json_schema",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPromptSnippetsResponseFormat1$ {
  /** @deprecated use `GetAllPromptSnippetsResponseFormat1$inboundSchema` instead. */
  export const inboundSchema =
    GetAllPromptSnippetsResponseFormat1$inboundSchema;
  /** @deprecated use `GetAllPromptSnippetsResponseFormat1$outboundSchema` instead. */
  export const outboundSchema =
    GetAllPromptSnippetsResponseFormat1$outboundSchema;
  /** @deprecated use `GetAllPromptSnippetsResponseFormat1$Outbound` instead. */
  export type Outbound = GetAllPromptSnippetsResponseFormat1$Outbound;
}

export function getAllPromptSnippetsResponseFormat1ToJSON(
  getAllPromptSnippetsResponseFormat1: GetAllPromptSnippetsResponseFormat1,
): string {
  return JSON.stringify(
    GetAllPromptSnippetsResponseFormat1$outboundSchema.parse(
      getAllPromptSnippetsResponseFormat1,
    ),
  );
}

export function getAllPromptSnippetsResponseFormat1FromJSON(
  jsonString: string,
): SafeParseResult<GetAllPromptSnippetsResponseFormat1, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      GetAllPromptSnippetsResponseFormat1$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetAllPromptSnippetsResponseFormat1' from JSON`,
  );
}

/** @internal */
export const GetAllPromptSnippetsResponseFormat$inboundSchema: z.ZodType<
  GetAllPromptSnippetsResponseFormat,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => GetAllPromptSnippetsResponseFormat2$inboundSchema),
  z.lazy(() => GetAllPromptSnippetsResponseFormat1$inboundSchema),
]);

/** @internal */
export type GetAllPromptSnippetsResponseFormat$Outbound =
  | GetAllPromptSnippetsResponseFormat2$Outbound
  | GetAllPromptSnippetsResponseFormat1$Outbound;

/** @internal */
export const GetAllPromptSnippetsResponseFormat$outboundSchema: z.ZodType<
  GetAllPromptSnippetsResponseFormat$Outbound,
  z.ZodTypeDef,
  GetAllPromptSnippetsResponseFormat
> = z.union([
  z.lazy(() => GetAllPromptSnippetsResponseFormat2$outboundSchema),
  z.lazy(() => GetAllPromptSnippetsResponseFormat1$outboundSchema),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPromptSnippetsResponseFormat$ {
  /** @deprecated use `GetAllPromptSnippetsResponseFormat$inboundSchema` instead. */
  export const inboundSchema = GetAllPromptSnippetsResponseFormat$inboundSchema;
  /** @deprecated use `GetAllPromptSnippetsResponseFormat$outboundSchema` instead. */
  export const outboundSchema =
    GetAllPromptSnippetsResponseFormat$outboundSchema;
  /** @deprecated use `GetAllPromptSnippetsResponseFormat$Outbound` instead. */
  export type Outbound = GetAllPromptSnippetsResponseFormat$Outbound;
}

export function getAllPromptSnippetsResponseFormatToJSON(
  getAllPromptSnippetsResponseFormat: GetAllPromptSnippetsResponseFormat,
): string {
  return JSON.stringify(
    GetAllPromptSnippetsResponseFormat$outboundSchema.parse(
      getAllPromptSnippetsResponseFormat,
    ),
  );
}

export function getAllPromptSnippetsResponseFormatFromJSON(
  jsonString: string,
): SafeParseResult<GetAllPromptSnippetsResponseFormat, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      GetAllPromptSnippetsResponseFormat$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetAllPromptSnippetsResponseFormat' from JSON`,
  );
}

/** @internal */
export const GetAllPromptSnippetsPhotoRealVersion$inboundSchema:
  z.ZodNativeEnum<typeof GetAllPromptSnippetsPhotoRealVersion> = z.nativeEnum(
    GetAllPromptSnippetsPhotoRealVersion,
  );

/** @internal */
export const GetAllPromptSnippetsPhotoRealVersion$outboundSchema:
  z.ZodNativeEnum<typeof GetAllPromptSnippetsPhotoRealVersion> =
    GetAllPromptSnippetsPhotoRealVersion$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPromptSnippetsPhotoRealVersion$ {
  /** @deprecated use `GetAllPromptSnippetsPhotoRealVersion$inboundSchema` instead. */
  export const inboundSchema =
    GetAllPromptSnippetsPhotoRealVersion$inboundSchema;
  /** @deprecated use `GetAllPromptSnippetsPhotoRealVersion$outboundSchema` instead. */
  export const outboundSchema =
    GetAllPromptSnippetsPhotoRealVersion$outboundSchema;
}

/** @internal */
export const GetAllPromptSnippetsEncodingFormat$inboundSchema: z.ZodNativeEnum<
  typeof GetAllPromptSnippetsEncodingFormat
> = z.nativeEnum(GetAllPromptSnippetsEncodingFormat);

/** @internal */
export const GetAllPromptSnippetsEncodingFormat$outboundSchema: z.ZodNativeEnum<
  typeof GetAllPromptSnippetsEncodingFormat
> = GetAllPromptSnippetsEncodingFormat$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPromptSnippetsEncodingFormat$ {
  /** @deprecated use `GetAllPromptSnippetsEncodingFormat$inboundSchema` instead. */
  export const inboundSchema = GetAllPromptSnippetsEncodingFormat$inboundSchema;
  /** @deprecated use `GetAllPromptSnippetsEncodingFormat$outboundSchema` instead. */
  export const outboundSchema =
    GetAllPromptSnippetsEncodingFormat$outboundSchema;
}

/** @internal */
export const GetAllPromptSnippetsReasoningEffort$inboundSchema: z.ZodNativeEnum<
  typeof GetAllPromptSnippetsReasoningEffort
> = z.nativeEnum(GetAllPromptSnippetsReasoningEffort);

/** @internal */
export const GetAllPromptSnippetsReasoningEffort$outboundSchema:
  z.ZodNativeEnum<typeof GetAllPromptSnippetsReasoningEffort> =
    GetAllPromptSnippetsReasoningEffort$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPromptSnippetsReasoningEffort$ {
  /** @deprecated use `GetAllPromptSnippetsReasoningEffort$inboundSchema` instead. */
  export const inboundSchema =
    GetAllPromptSnippetsReasoningEffort$inboundSchema;
  /** @deprecated use `GetAllPromptSnippetsReasoningEffort$outboundSchema` instead. */
  export const outboundSchema =
    GetAllPromptSnippetsReasoningEffort$outboundSchema;
}

/** @internal */
export const GetAllPromptSnippetsModelParameters$inboundSchema: z.ZodType<
  GetAllPromptSnippetsModelParameters,
  z.ZodTypeDef,
  unknown
> = z.object({
  temperature: z.number().optional(),
  maxTokens: z.number().optional(),
  topK: z.number().optional(),
  topP: z.number().optional(),
  frequencyPenalty: z.number().optional(),
  presencePenalty: z.number().optional(),
  numImages: z.number().optional(),
  seed: z.number().optional(),
  format: GetAllPromptSnippetsFormat$inboundSchema.optional(),
  dimensions: z.string().optional(),
  quality: GetAllPromptSnippetsQuality$inboundSchema.optional(),
  style: z.string().optional(),
  responseFormat: z.nullable(
    z.union([
      z.lazy(() => GetAllPromptSnippetsResponseFormat2$inboundSchema),
      z.lazy(() => GetAllPromptSnippetsResponseFormat1$inboundSchema),
    ]),
  ).optional(),
  photoRealVersion: GetAllPromptSnippetsPhotoRealVersion$inboundSchema
    .optional(),
  encoding_format: GetAllPromptSnippetsEncodingFormat$inboundSchema.optional(),
  reasoningEffort: GetAllPromptSnippetsReasoningEffort$inboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    "encoding_format": "encodingFormat",
  });
});

/** @internal */
export type GetAllPromptSnippetsModelParameters$Outbound = {
  temperature?: number | undefined;
  maxTokens?: number | undefined;
  topK?: number | undefined;
  topP?: number | undefined;
  frequencyPenalty?: number | undefined;
  presencePenalty?: number | undefined;
  numImages?: number | undefined;
  seed?: number | undefined;
  format?: string | undefined;
  dimensions?: string | undefined;
  quality?: string | undefined;
  style?: string | undefined;
  responseFormat?:
    | GetAllPromptSnippetsResponseFormat2$Outbound
    | GetAllPromptSnippetsResponseFormat1$Outbound
    | null
    | undefined;
  photoRealVersion?: string | undefined;
  encoding_format?: string | undefined;
  reasoningEffort?: string | undefined;
};

/** @internal */
export const GetAllPromptSnippetsModelParameters$outboundSchema: z.ZodType<
  GetAllPromptSnippetsModelParameters$Outbound,
  z.ZodTypeDef,
  GetAllPromptSnippetsModelParameters
> = z.object({
  temperature: z.number().optional(),
  maxTokens: z.number().optional(),
  topK: z.number().optional(),
  topP: z.number().optional(),
  frequencyPenalty: z.number().optional(),
  presencePenalty: z.number().optional(),
  numImages: z.number().optional(),
  seed: z.number().optional(),
  format: GetAllPromptSnippetsFormat$outboundSchema.optional(),
  dimensions: z.string().optional(),
  quality: GetAllPromptSnippetsQuality$outboundSchema.optional(),
  style: z.string().optional(),
  responseFormat: z.nullable(
    z.union([
      z.lazy(() => GetAllPromptSnippetsResponseFormat2$outboundSchema),
      z.lazy(() => GetAllPromptSnippetsResponseFormat1$outboundSchema),
    ]),
  ).optional(),
  photoRealVersion: GetAllPromptSnippetsPhotoRealVersion$outboundSchema
    .optional(),
  encodingFormat: GetAllPromptSnippetsEncodingFormat$outboundSchema.optional(),
  reasoningEffort: GetAllPromptSnippetsReasoningEffort$outboundSchema
    .optional(),
}).transform((v) => {
  return remap$(v, {
    encodingFormat: "encoding_format",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPromptSnippetsModelParameters$ {
  /** @deprecated use `GetAllPromptSnippetsModelParameters$inboundSchema` instead. */
  export const inboundSchema =
    GetAllPromptSnippetsModelParameters$inboundSchema;
  /** @deprecated use `GetAllPromptSnippetsModelParameters$outboundSchema` instead. */
  export const outboundSchema =
    GetAllPromptSnippetsModelParameters$outboundSchema;
  /** @deprecated use `GetAllPromptSnippetsModelParameters$Outbound` instead. */
  export type Outbound = GetAllPromptSnippetsModelParameters$Outbound;
}

export function getAllPromptSnippetsModelParametersToJSON(
  getAllPromptSnippetsModelParameters: GetAllPromptSnippetsModelParameters,
): string {
  return JSON.stringify(
    GetAllPromptSnippetsModelParameters$outboundSchema.parse(
      getAllPromptSnippetsModelParameters,
    ),
  );
}

export function getAllPromptSnippetsModelParametersFromJSON(
  jsonString: string,
): SafeParseResult<GetAllPromptSnippetsModelParameters, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      GetAllPromptSnippetsModelParameters$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetAllPromptSnippetsModelParameters' from JSON`,
  );
}

/** @internal */
export const GetAllPromptSnippetsProvider$inboundSchema: z.ZodNativeEnum<
  typeof GetAllPromptSnippetsProvider
> = z.nativeEnum(GetAllPromptSnippetsProvider);

/** @internal */
export const GetAllPromptSnippetsProvider$outboundSchema: z.ZodNativeEnum<
  typeof GetAllPromptSnippetsProvider
> = GetAllPromptSnippetsProvider$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPromptSnippetsProvider$ {
  /** @deprecated use `GetAllPromptSnippetsProvider$inboundSchema` instead. */
  export const inboundSchema = GetAllPromptSnippetsProvider$inboundSchema;
  /** @deprecated use `GetAllPromptSnippetsProvider$outboundSchema` instead. */
  export const outboundSchema = GetAllPromptSnippetsProvider$outboundSchema;
}

/** @internal */
export const GetAllPromptSnippetsRole$inboundSchema: z.ZodNativeEnum<
  typeof GetAllPromptSnippetsRole
> = z.nativeEnum(GetAllPromptSnippetsRole);

/** @internal */
export const GetAllPromptSnippetsRole$outboundSchema: z.ZodNativeEnum<
  typeof GetAllPromptSnippetsRole
> = GetAllPromptSnippetsRole$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPromptSnippetsRole$ {
  /** @deprecated use `GetAllPromptSnippetsRole$inboundSchema` instead. */
  export const inboundSchema = GetAllPromptSnippetsRole$inboundSchema;
  /** @deprecated use `GetAllPromptSnippetsRole$outboundSchema` instead. */
  export const outboundSchema = GetAllPromptSnippetsRole$outboundSchema;
}

/** @internal */
export const GetAllPromptSnippets2PromptSnippetsType$inboundSchema:
  z.ZodNativeEnum<typeof GetAllPromptSnippets2PromptSnippetsType> = z
    .nativeEnum(GetAllPromptSnippets2PromptSnippetsType);

/** @internal */
export const GetAllPromptSnippets2PromptSnippetsType$outboundSchema:
  z.ZodNativeEnum<typeof GetAllPromptSnippets2PromptSnippetsType> =
    GetAllPromptSnippets2PromptSnippetsType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPromptSnippets2PromptSnippetsType$ {
  /** @deprecated use `GetAllPromptSnippets2PromptSnippetsType$inboundSchema` instead. */
  export const inboundSchema =
    GetAllPromptSnippets2PromptSnippetsType$inboundSchema;
  /** @deprecated use `GetAllPromptSnippets2PromptSnippetsType$outboundSchema` instead. */
  export const outboundSchema =
    GetAllPromptSnippets2PromptSnippetsType$outboundSchema;
}

/** @internal */
export const GetAllPromptSnippets2ImageUrl$inboundSchema: z.ZodType<
  GetAllPromptSnippets2ImageUrl,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string().optional(),
  url: z.string(),
  detail: z.string().optional(),
});

/** @internal */
export type GetAllPromptSnippets2ImageUrl$Outbound = {
  id?: string | undefined;
  url: string;
  detail?: string | undefined;
};

/** @internal */
export const GetAllPromptSnippets2ImageUrl$outboundSchema: z.ZodType<
  GetAllPromptSnippets2ImageUrl$Outbound,
  z.ZodTypeDef,
  GetAllPromptSnippets2ImageUrl
> = z.object({
  id: z.string().optional(),
  url: z.string(),
  detail: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPromptSnippets2ImageUrl$ {
  /** @deprecated use `GetAllPromptSnippets2ImageUrl$inboundSchema` instead. */
  export const inboundSchema = GetAllPromptSnippets2ImageUrl$inboundSchema;
  /** @deprecated use `GetAllPromptSnippets2ImageUrl$outboundSchema` instead. */
  export const outboundSchema = GetAllPromptSnippets2ImageUrl$outboundSchema;
  /** @deprecated use `GetAllPromptSnippets2ImageUrl$Outbound` instead. */
  export type Outbound = GetAllPromptSnippets2ImageUrl$Outbound;
}

export function getAllPromptSnippets2ImageUrlToJSON(
  getAllPromptSnippets2ImageUrl: GetAllPromptSnippets2ImageUrl,
): string {
  return JSON.stringify(
    GetAllPromptSnippets2ImageUrl$outboundSchema.parse(
      getAllPromptSnippets2ImageUrl,
    ),
  );
}

export function getAllPromptSnippets2ImageUrlFromJSON(
  jsonString: string,
): SafeParseResult<GetAllPromptSnippets2ImageUrl, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetAllPromptSnippets2ImageUrl$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetAllPromptSnippets2ImageUrl' from JSON`,
  );
}

/** @internal */
export const GetAllPromptSnippets22$inboundSchema: z.ZodType<
  GetAllPromptSnippets22,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: GetAllPromptSnippets2PromptSnippetsType$inboundSchema,
  image_url: z.lazy(() => GetAllPromptSnippets2ImageUrl$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "image_url": "imageUrl",
  });
});

/** @internal */
export type GetAllPromptSnippets22$Outbound = {
  type: string;
  image_url: GetAllPromptSnippets2ImageUrl$Outbound;
};

/** @internal */
export const GetAllPromptSnippets22$outboundSchema: z.ZodType<
  GetAllPromptSnippets22$Outbound,
  z.ZodTypeDef,
  GetAllPromptSnippets22
> = z.object({
  type: GetAllPromptSnippets2PromptSnippetsType$outboundSchema,
  imageUrl: z.lazy(() => GetAllPromptSnippets2ImageUrl$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    imageUrl: "image_url",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPromptSnippets22$ {
  /** @deprecated use `GetAllPromptSnippets22$inboundSchema` instead. */
  export const inboundSchema = GetAllPromptSnippets22$inboundSchema;
  /** @deprecated use `GetAllPromptSnippets22$outboundSchema` instead. */
  export const outboundSchema = GetAllPromptSnippets22$outboundSchema;
  /** @deprecated use `GetAllPromptSnippets22$Outbound` instead. */
  export type Outbound = GetAllPromptSnippets22$Outbound;
}

export function getAllPromptSnippets22ToJSON(
  getAllPromptSnippets22: GetAllPromptSnippets22,
): string {
  return JSON.stringify(
    GetAllPromptSnippets22$outboundSchema.parse(getAllPromptSnippets22),
  );
}

export function getAllPromptSnippets22FromJSON(
  jsonString: string,
): SafeParseResult<GetAllPromptSnippets22, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetAllPromptSnippets22$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetAllPromptSnippets22' from JSON`,
  );
}

/** @internal */
export const GetAllPromptSnippets2Type$inboundSchema: z.ZodNativeEnum<
  typeof GetAllPromptSnippets2Type
> = z.nativeEnum(GetAllPromptSnippets2Type);

/** @internal */
export const GetAllPromptSnippets2Type$outboundSchema: z.ZodNativeEnum<
  typeof GetAllPromptSnippets2Type
> = GetAllPromptSnippets2Type$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPromptSnippets2Type$ {
  /** @deprecated use `GetAllPromptSnippets2Type$inboundSchema` instead. */
  export const inboundSchema = GetAllPromptSnippets2Type$inboundSchema;
  /** @deprecated use `GetAllPromptSnippets2Type$outboundSchema` instead. */
  export const outboundSchema = GetAllPromptSnippets2Type$outboundSchema;
}

/** @internal */
export const GetAllPromptSnippets21$inboundSchema: z.ZodType<
  GetAllPromptSnippets21,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: GetAllPromptSnippets2Type$inboundSchema,
  text: z.string(),
});

/** @internal */
export type GetAllPromptSnippets21$Outbound = {
  type: string;
  text: string;
};

/** @internal */
export const GetAllPromptSnippets21$outboundSchema: z.ZodType<
  GetAllPromptSnippets21$Outbound,
  z.ZodTypeDef,
  GetAllPromptSnippets21
> = z.object({
  type: GetAllPromptSnippets2Type$outboundSchema,
  text: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPromptSnippets21$ {
  /** @deprecated use `GetAllPromptSnippets21$inboundSchema` instead. */
  export const inboundSchema = GetAllPromptSnippets21$inboundSchema;
  /** @deprecated use `GetAllPromptSnippets21$outboundSchema` instead. */
  export const outboundSchema = GetAllPromptSnippets21$outboundSchema;
  /** @deprecated use `GetAllPromptSnippets21$Outbound` instead. */
  export type Outbound = GetAllPromptSnippets21$Outbound;
}

export function getAllPromptSnippets21ToJSON(
  getAllPromptSnippets21: GetAllPromptSnippets21,
): string {
  return JSON.stringify(
    GetAllPromptSnippets21$outboundSchema.parse(getAllPromptSnippets21),
  );
}

export function getAllPromptSnippets21FromJSON(
  jsonString: string,
): SafeParseResult<GetAllPromptSnippets21, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetAllPromptSnippets21$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetAllPromptSnippets21' from JSON`,
  );
}

/** @internal */
export const GetAllPromptSnippetsContent2$inboundSchema: z.ZodType<
  GetAllPromptSnippetsContent2,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => GetAllPromptSnippets21$inboundSchema),
  z.lazy(() => GetAllPromptSnippets22$inboundSchema),
]);

/** @internal */
export type GetAllPromptSnippetsContent2$Outbound =
  | GetAllPromptSnippets21$Outbound
  | GetAllPromptSnippets22$Outbound;

/** @internal */
export const GetAllPromptSnippetsContent2$outboundSchema: z.ZodType<
  GetAllPromptSnippetsContent2$Outbound,
  z.ZodTypeDef,
  GetAllPromptSnippetsContent2
> = z.union([
  z.lazy(() => GetAllPromptSnippets21$outboundSchema),
  z.lazy(() => GetAllPromptSnippets22$outboundSchema),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPromptSnippetsContent2$ {
  /** @deprecated use `GetAllPromptSnippetsContent2$inboundSchema` instead. */
  export const inboundSchema = GetAllPromptSnippetsContent2$inboundSchema;
  /** @deprecated use `GetAllPromptSnippetsContent2$outboundSchema` instead. */
  export const outboundSchema = GetAllPromptSnippetsContent2$outboundSchema;
  /** @deprecated use `GetAllPromptSnippetsContent2$Outbound` instead. */
  export type Outbound = GetAllPromptSnippetsContent2$Outbound;
}

export function getAllPromptSnippetsContent2ToJSON(
  getAllPromptSnippetsContent2: GetAllPromptSnippetsContent2,
): string {
  return JSON.stringify(
    GetAllPromptSnippetsContent2$outboundSchema.parse(
      getAllPromptSnippetsContent2,
    ),
  );
}

export function getAllPromptSnippetsContent2FromJSON(
  jsonString: string,
): SafeParseResult<GetAllPromptSnippetsContent2, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetAllPromptSnippetsContent2$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetAllPromptSnippetsContent2' from JSON`,
  );
}

/** @internal */
export const GetAllPromptSnippetsContent$inboundSchema: z.ZodType<
  GetAllPromptSnippetsContent,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.string(),
  z.array(z.union([
    z.lazy(() => GetAllPromptSnippets21$inboundSchema),
    z.lazy(() => GetAllPromptSnippets22$inboundSchema),
  ])),
]);

/** @internal */
export type GetAllPromptSnippetsContent$Outbound =
  | string
  | Array<GetAllPromptSnippets21$Outbound | GetAllPromptSnippets22$Outbound>;

/** @internal */
export const GetAllPromptSnippetsContent$outboundSchema: z.ZodType<
  GetAllPromptSnippetsContent$Outbound,
  z.ZodTypeDef,
  GetAllPromptSnippetsContent
> = z.union([
  z.string(),
  z.array(z.union([
    z.lazy(() => GetAllPromptSnippets21$outboundSchema),
    z.lazy(() => GetAllPromptSnippets22$outboundSchema),
  ])),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPromptSnippetsContent$ {
  /** @deprecated use `GetAllPromptSnippetsContent$inboundSchema` instead. */
  export const inboundSchema = GetAllPromptSnippetsContent$inboundSchema;
  /** @deprecated use `GetAllPromptSnippetsContent$outboundSchema` instead. */
  export const outboundSchema = GetAllPromptSnippetsContent$outboundSchema;
  /** @deprecated use `GetAllPromptSnippetsContent$Outbound` instead. */
  export type Outbound = GetAllPromptSnippetsContent$Outbound;
}

export function getAllPromptSnippetsContentToJSON(
  getAllPromptSnippetsContent: GetAllPromptSnippetsContent,
): string {
  return JSON.stringify(
    GetAllPromptSnippetsContent$outboundSchema.parse(
      getAllPromptSnippetsContent,
    ),
  );
}

export function getAllPromptSnippetsContentFromJSON(
  jsonString: string,
): SafeParseResult<GetAllPromptSnippetsContent, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetAllPromptSnippetsContent$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetAllPromptSnippetsContent' from JSON`,
  );
}

/** @internal */
export const GetAllPromptSnippetsPromptSnippetsType$inboundSchema:
  z.ZodNativeEnum<typeof GetAllPromptSnippetsPromptSnippetsType> = z.nativeEnum(
    GetAllPromptSnippetsPromptSnippetsType,
  );

/** @internal */
export const GetAllPromptSnippetsPromptSnippetsType$outboundSchema:
  z.ZodNativeEnum<typeof GetAllPromptSnippetsPromptSnippetsType> =
    GetAllPromptSnippetsPromptSnippetsType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPromptSnippetsPromptSnippetsType$ {
  /** @deprecated use `GetAllPromptSnippetsPromptSnippetsType$inboundSchema` instead. */
  export const inboundSchema =
    GetAllPromptSnippetsPromptSnippetsType$inboundSchema;
  /** @deprecated use `GetAllPromptSnippetsPromptSnippetsType$outboundSchema` instead. */
  export const outboundSchema =
    GetAllPromptSnippetsPromptSnippetsType$outboundSchema;
}

/** @internal */
export const GetAllPromptSnippetsFunction$inboundSchema: z.ZodType<
  GetAllPromptSnippetsFunction,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.string(),
  arguments: z.string(),
});

/** @internal */
export type GetAllPromptSnippetsFunction$Outbound = {
  name: string;
  arguments: string;
};

/** @internal */
export const GetAllPromptSnippetsFunction$outboundSchema: z.ZodType<
  GetAllPromptSnippetsFunction$Outbound,
  z.ZodTypeDef,
  GetAllPromptSnippetsFunction
> = z.object({
  name: z.string(),
  arguments: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPromptSnippetsFunction$ {
  /** @deprecated use `GetAllPromptSnippetsFunction$inboundSchema` instead. */
  export const inboundSchema = GetAllPromptSnippetsFunction$inboundSchema;
  /** @deprecated use `GetAllPromptSnippetsFunction$outboundSchema` instead. */
  export const outboundSchema = GetAllPromptSnippetsFunction$outboundSchema;
  /** @deprecated use `GetAllPromptSnippetsFunction$Outbound` instead. */
  export type Outbound = GetAllPromptSnippetsFunction$Outbound;
}

export function getAllPromptSnippetsFunctionToJSON(
  getAllPromptSnippetsFunction: GetAllPromptSnippetsFunction,
): string {
  return JSON.stringify(
    GetAllPromptSnippetsFunction$outboundSchema.parse(
      getAllPromptSnippetsFunction,
    ),
  );
}

export function getAllPromptSnippetsFunctionFromJSON(
  jsonString: string,
): SafeParseResult<GetAllPromptSnippetsFunction, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetAllPromptSnippetsFunction$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetAllPromptSnippetsFunction' from JSON`,
  );
}

/** @internal */
export const GetAllPromptSnippetsToolCalls$inboundSchema: z.ZodType<
  GetAllPromptSnippetsToolCalls,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string().optional(),
  index: z.number().optional(),
  type: GetAllPromptSnippetsPromptSnippetsType$inboundSchema,
  function: z.lazy(() => GetAllPromptSnippetsFunction$inboundSchema),
});

/** @internal */
export type GetAllPromptSnippetsToolCalls$Outbound = {
  id?: string | undefined;
  index?: number | undefined;
  type: string;
  function: GetAllPromptSnippetsFunction$Outbound;
};

/** @internal */
export const GetAllPromptSnippetsToolCalls$outboundSchema: z.ZodType<
  GetAllPromptSnippetsToolCalls$Outbound,
  z.ZodTypeDef,
  GetAllPromptSnippetsToolCalls
> = z.object({
  id: z.string().optional(),
  index: z.number().optional(),
  type: GetAllPromptSnippetsPromptSnippetsType$outboundSchema,
  function: z.lazy(() => GetAllPromptSnippetsFunction$outboundSchema),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPromptSnippetsToolCalls$ {
  /** @deprecated use `GetAllPromptSnippetsToolCalls$inboundSchema` instead. */
  export const inboundSchema = GetAllPromptSnippetsToolCalls$inboundSchema;
  /** @deprecated use `GetAllPromptSnippetsToolCalls$outboundSchema` instead. */
  export const outboundSchema = GetAllPromptSnippetsToolCalls$outboundSchema;
  /** @deprecated use `GetAllPromptSnippetsToolCalls$Outbound` instead. */
  export type Outbound = GetAllPromptSnippetsToolCalls$Outbound;
}

export function getAllPromptSnippetsToolCallsToJSON(
  getAllPromptSnippetsToolCalls: GetAllPromptSnippetsToolCalls,
): string {
  return JSON.stringify(
    GetAllPromptSnippetsToolCalls$outboundSchema.parse(
      getAllPromptSnippetsToolCalls,
    ),
  );
}

export function getAllPromptSnippetsToolCallsFromJSON(
  jsonString: string,
): SafeParseResult<GetAllPromptSnippetsToolCalls, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetAllPromptSnippetsToolCalls$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetAllPromptSnippetsToolCalls' from JSON`,
  );
}

/** @internal */
export const GetAllPromptSnippetsMessages$inboundSchema: z.ZodType<
  GetAllPromptSnippetsMessages,
  z.ZodTypeDef,
  unknown
> = z.object({
  role: GetAllPromptSnippetsRole$inboundSchema,
  content: z.union([
    z.string(),
    z.array(z.union([
      z.lazy(() => GetAllPromptSnippets21$inboundSchema),
      z.lazy(() => GetAllPromptSnippets22$inboundSchema),
    ])),
  ]),
  tool_calls: z.array(z.lazy(() => GetAllPromptSnippetsToolCalls$inboundSchema))
    .optional(),
}).transform((v) => {
  return remap$(v, {
    "tool_calls": "toolCalls",
  });
});

/** @internal */
export type GetAllPromptSnippetsMessages$Outbound = {
  role: string;
  content:
    | string
    | Array<GetAllPromptSnippets21$Outbound | GetAllPromptSnippets22$Outbound>;
  tool_calls?: Array<GetAllPromptSnippetsToolCalls$Outbound> | undefined;
};

/** @internal */
export const GetAllPromptSnippetsMessages$outboundSchema: z.ZodType<
  GetAllPromptSnippetsMessages$Outbound,
  z.ZodTypeDef,
  GetAllPromptSnippetsMessages
> = z.object({
  role: GetAllPromptSnippetsRole$outboundSchema,
  content: z.union([
    z.string(),
    z.array(z.union([
      z.lazy(() => GetAllPromptSnippets21$outboundSchema),
      z.lazy(() => GetAllPromptSnippets22$outboundSchema),
    ])),
  ]),
  toolCalls: z.array(z.lazy(() => GetAllPromptSnippetsToolCalls$outboundSchema))
    .optional(),
}).transform((v) => {
  return remap$(v, {
    toolCalls: "tool_calls",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPromptSnippetsMessages$ {
  /** @deprecated use `GetAllPromptSnippetsMessages$inboundSchema` instead. */
  export const inboundSchema = GetAllPromptSnippetsMessages$inboundSchema;
  /** @deprecated use `GetAllPromptSnippetsMessages$outboundSchema` instead. */
  export const outboundSchema = GetAllPromptSnippetsMessages$outboundSchema;
  /** @deprecated use `GetAllPromptSnippetsMessages$Outbound` instead. */
  export type Outbound = GetAllPromptSnippetsMessages$Outbound;
}

export function getAllPromptSnippetsMessagesToJSON(
  getAllPromptSnippetsMessages: GetAllPromptSnippetsMessages,
): string {
  return JSON.stringify(
    GetAllPromptSnippetsMessages$outboundSchema.parse(
      getAllPromptSnippetsMessages,
    ),
  );
}

export function getAllPromptSnippetsMessagesFromJSON(
  jsonString: string,
): SafeParseResult<GetAllPromptSnippetsMessages, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetAllPromptSnippetsMessages$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetAllPromptSnippetsMessages' from JSON`,
  );
}

/** @internal */
export const GetAllPromptSnippetsPromptConfig$inboundSchema: z.ZodType<
  GetAllPromptSnippetsPromptConfig,
  z.ZodTypeDef,
  unknown
> = z.object({
  stream: z.boolean().optional(),
  model: z.string().optional(),
  model_db_id: z.string().optional(),
  model_type: GetAllPromptSnippetsModelType$inboundSchema.optional(),
  model_parameters: z.lazy(() =>
    GetAllPromptSnippetsModelParameters$inboundSchema
  ).optional(),
  provider: GetAllPromptSnippetsProvider$inboundSchema.optional(),
  integration_id: z.nullable(z.string()).optional(),
  version: z.string().optional(),
  messages: z.array(z.lazy(() => GetAllPromptSnippetsMessages$inboundSchema)),
}).transform((v) => {
  return remap$(v, {
    "model_db_id": "modelDbId",
    "model_type": "modelType",
    "model_parameters": "modelParameters",
    "integration_id": "integrationId",
  });
});

/** @internal */
export type GetAllPromptSnippetsPromptConfig$Outbound = {
  stream?: boolean | undefined;
  model?: string | undefined;
  model_db_id?: string | undefined;
  model_type?: string | undefined;
  model_parameters?: GetAllPromptSnippetsModelParameters$Outbound | undefined;
  provider?: string | undefined;
  integration_id?: string | null | undefined;
  version?: string | undefined;
  messages: Array<GetAllPromptSnippetsMessages$Outbound>;
};

/** @internal */
export const GetAllPromptSnippetsPromptConfig$outboundSchema: z.ZodType<
  GetAllPromptSnippetsPromptConfig$Outbound,
  z.ZodTypeDef,
  GetAllPromptSnippetsPromptConfig
> = z.object({
  stream: z.boolean().optional(),
  model: z.string().optional(),
  modelDbId: z.string().optional(),
  modelType: GetAllPromptSnippetsModelType$outboundSchema.optional(),
  modelParameters: z.lazy(() =>
    GetAllPromptSnippetsModelParameters$outboundSchema
  ).optional(),
  provider: GetAllPromptSnippetsProvider$outboundSchema.optional(),
  integrationId: z.nullable(z.string()).optional(),
  version: z.string().optional(),
  messages: z.array(z.lazy(() => GetAllPromptSnippetsMessages$outboundSchema)),
}).transform((v) => {
  return remap$(v, {
    modelDbId: "model_db_id",
    modelType: "model_type",
    modelParameters: "model_parameters",
    integrationId: "integration_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPromptSnippetsPromptConfig$ {
  /** @deprecated use `GetAllPromptSnippetsPromptConfig$inboundSchema` instead. */
  export const inboundSchema = GetAllPromptSnippetsPromptConfig$inboundSchema;
  /** @deprecated use `GetAllPromptSnippetsPromptConfig$outboundSchema` instead. */
  export const outboundSchema = GetAllPromptSnippetsPromptConfig$outboundSchema;
  /** @deprecated use `GetAllPromptSnippetsPromptConfig$Outbound` instead. */
  export type Outbound = GetAllPromptSnippetsPromptConfig$Outbound;
}

export function getAllPromptSnippetsPromptConfigToJSON(
  getAllPromptSnippetsPromptConfig: GetAllPromptSnippetsPromptConfig,
): string {
  return JSON.stringify(
    GetAllPromptSnippetsPromptConfig$outboundSchema.parse(
      getAllPromptSnippetsPromptConfig,
    ),
  );
}

export function getAllPromptSnippetsPromptConfigFromJSON(
  jsonString: string,
): SafeParseResult<GetAllPromptSnippetsPromptConfig, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetAllPromptSnippetsPromptConfig$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetAllPromptSnippetsPromptConfig' from JSON`,
  );
}

/** @internal */
export const GetAllPromptSnippetsUseCases$inboundSchema: z.ZodNativeEnum<
  typeof GetAllPromptSnippetsUseCases
> = z.nativeEnum(GetAllPromptSnippetsUseCases);

/** @internal */
export const GetAllPromptSnippetsUseCases$outboundSchema: z.ZodNativeEnum<
  typeof GetAllPromptSnippetsUseCases
> = GetAllPromptSnippetsUseCases$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPromptSnippetsUseCases$ {
  /** @deprecated use `GetAllPromptSnippetsUseCases$inboundSchema` instead. */
  export const inboundSchema = GetAllPromptSnippetsUseCases$inboundSchema;
  /** @deprecated use `GetAllPromptSnippetsUseCases$outboundSchema` instead. */
  export const outboundSchema = GetAllPromptSnippetsUseCases$outboundSchema;
}

/** @internal */
export const GetAllPromptSnippetsLanguage$inboundSchema: z.ZodNativeEnum<
  typeof GetAllPromptSnippetsLanguage
> = z.nativeEnum(GetAllPromptSnippetsLanguage);

/** @internal */
export const GetAllPromptSnippetsLanguage$outboundSchema: z.ZodNativeEnum<
  typeof GetAllPromptSnippetsLanguage
> = GetAllPromptSnippetsLanguage$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPromptSnippetsLanguage$ {
  /** @deprecated use `GetAllPromptSnippetsLanguage$inboundSchema` instead. */
  export const inboundSchema = GetAllPromptSnippetsLanguage$inboundSchema;
  /** @deprecated use `GetAllPromptSnippetsLanguage$outboundSchema` instead. */
  export const outboundSchema = GetAllPromptSnippetsLanguage$outboundSchema;
}

/** @internal */
export const GetAllPromptSnippetsMetadata$inboundSchema: z.ZodType<
  GetAllPromptSnippetsMetadata,
  z.ZodTypeDef,
  unknown
> = z.object({
  use_cases: z.array(GetAllPromptSnippetsUseCases$inboundSchema).optional(),
  language: GetAllPromptSnippetsLanguage$inboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    "use_cases": "useCases",
  });
});

/** @internal */
export type GetAllPromptSnippetsMetadata$Outbound = {
  use_cases?: Array<string> | undefined;
  language?: string | undefined;
};

/** @internal */
export const GetAllPromptSnippetsMetadata$outboundSchema: z.ZodType<
  GetAllPromptSnippetsMetadata$Outbound,
  z.ZodTypeDef,
  GetAllPromptSnippetsMetadata
> = z.object({
  useCases: z.array(GetAllPromptSnippetsUseCases$outboundSchema).optional(),
  language: GetAllPromptSnippetsLanguage$outboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    useCases: "use_cases",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPromptSnippetsMetadata$ {
  /** @deprecated use `GetAllPromptSnippetsMetadata$inboundSchema` instead. */
  export const inboundSchema = GetAllPromptSnippetsMetadata$inboundSchema;
  /** @deprecated use `GetAllPromptSnippetsMetadata$outboundSchema` instead. */
  export const outboundSchema = GetAllPromptSnippetsMetadata$outboundSchema;
  /** @deprecated use `GetAllPromptSnippetsMetadata$Outbound` instead. */
  export type Outbound = GetAllPromptSnippetsMetadata$Outbound;
}

export function getAllPromptSnippetsMetadataToJSON(
  getAllPromptSnippetsMetadata: GetAllPromptSnippetsMetadata,
): string {
  return JSON.stringify(
    GetAllPromptSnippetsMetadata$outboundSchema.parse(
      getAllPromptSnippetsMetadata,
    ),
  );
}

export function getAllPromptSnippetsMetadataFromJSON(
  jsonString: string,
): SafeParseResult<GetAllPromptSnippetsMetadata, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetAllPromptSnippetsMetadata$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetAllPromptSnippetsMetadata' from JSON`,
  );
}

/** @internal */
export const GetAllPromptSnippetsType$inboundSchema: z.ZodNativeEnum<
  typeof GetAllPromptSnippetsType
> = z.nativeEnum(GetAllPromptSnippetsType);

/** @internal */
export const GetAllPromptSnippetsType$outboundSchema: z.ZodNativeEnum<
  typeof GetAllPromptSnippetsType
> = GetAllPromptSnippetsType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPromptSnippetsType$ {
  /** @deprecated use `GetAllPromptSnippetsType$inboundSchema` instead. */
  export const inboundSchema = GetAllPromptSnippetsType$inboundSchema;
  /** @deprecated use `GetAllPromptSnippetsType$outboundSchema` instead. */
  export const outboundSchema = GetAllPromptSnippetsType$outboundSchema;
}

/** @internal */
export const GetAllPromptSnippetsPromptSnippetsModelType$inboundSchema:
  z.ZodNativeEnum<typeof GetAllPromptSnippetsPromptSnippetsModelType> = z
    .nativeEnum(GetAllPromptSnippetsPromptSnippetsModelType);

/** @internal */
export const GetAllPromptSnippetsPromptSnippetsModelType$outboundSchema:
  z.ZodNativeEnum<typeof GetAllPromptSnippetsPromptSnippetsModelType> =
    GetAllPromptSnippetsPromptSnippetsModelType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPromptSnippetsPromptSnippetsModelType$ {
  /** @deprecated use `GetAllPromptSnippetsPromptSnippetsModelType$inboundSchema` instead. */
  export const inboundSchema =
    GetAllPromptSnippetsPromptSnippetsModelType$inboundSchema;
  /** @deprecated use `GetAllPromptSnippetsPromptSnippetsModelType$outboundSchema` instead. */
  export const outboundSchema =
    GetAllPromptSnippetsPromptSnippetsModelType$outboundSchema;
}

/** @internal */
export const GetAllPromptSnippetsPromptSnippetsFormat$inboundSchema:
  z.ZodNativeEnum<typeof GetAllPromptSnippetsPromptSnippetsFormat> = z
    .nativeEnum(GetAllPromptSnippetsPromptSnippetsFormat);

/** @internal */
export const GetAllPromptSnippetsPromptSnippetsFormat$outboundSchema:
  z.ZodNativeEnum<typeof GetAllPromptSnippetsPromptSnippetsFormat> =
    GetAllPromptSnippetsPromptSnippetsFormat$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPromptSnippetsPromptSnippetsFormat$ {
  /** @deprecated use `GetAllPromptSnippetsPromptSnippetsFormat$inboundSchema` instead. */
  export const inboundSchema =
    GetAllPromptSnippetsPromptSnippetsFormat$inboundSchema;
  /** @deprecated use `GetAllPromptSnippetsPromptSnippetsFormat$outboundSchema` instead. */
  export const outboundSchema =
    GetAllPromptSnippetsPromptSnippetsFormat$outboundSchema;
}

/** @internal */
export const GetAllPromptSnippetsPromptSnippetsQuality$inboundSchema:
  z.ZodNativeEnum<typeof GetAllPromptSnippetsPromptSnippetsQuality> = z
    .nativeEnum(GetAllPromptSnippetsPromptSnippetsQuality);

/** @internal */
export const GetAllPromptSnippetsPromptSnippetsQuality$outboundSchema:
  z.ZodNativeEnum<typeof GetAllPromptSnippetsPromptSnippetsQuality> =
    GetAllPromptSnippetsPromptSnippetsQuality$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPromptSnippetsPromptSnippetsQuality$ {
  /** @deprecated use `GetAllPromptSnippetsPromptSnippetsQuality$inboundSchema` instead. */
  export const inboundSchema =
    GetAllPromptSnippetsPromptSnippetsQuality$inboundSchema;
  /** @deprecated use `GetAllPromptSnippetsPromptSnippetsQuality$outboundSchema` instead. */
  export const outboundSchema =
    GetAllPromptSnippetsPromptSnippetsQuality$outboundSchema;
}

/** @internal */
export const GetAllPromptSnippetsResponseFormatPromptSnippetsResponse200Type$inboundSchema:
  z.ZodNativeEnum<
    typeof GetAllPromptSnippetsResponseFormatPromptSnippetsResponse200Type
  > = z.nativeEnum(
    GetAllPromptSnippetsResponseFormatPromptSnippetsResponse200Type,
  );

/** @internal */
export const GetAllPromptSnippetsResponseFormatPromptSnippetsResponse200Type$outboundSchema:
  z.ZodNativeEnum<
    typeof GetAllPromptSnippetsResponseFormatPromptSnippetsResponse200Type
  > =
    GetAllPromptSnippetsResponseFormatPromptSnippetsResponse200Type$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPromptSnippetsResponseFormatPromptSnippetsResponse200Type$ {
  /** @deprecated use `GetAllPromptSnippetsResponseFormatPromptSnippetsResponse200Type$inboundSchema` instead. */
  export const inboundSchema =
    GetAllPromptSnippetsResponseFormatPromptSnippetsResponse200Type$inboundSchema;
  /** @deprecated use `GetAllPromptSnippetsResponseFormatPromptSnippetsResponse200Type$outboundSchema` instead. */
  export const outboundSchema =
    GetAllPromptSnippetsResponseFormatPromptSnippetsResponse200Type$outboundSchema;
}

/** @internal */
export const GetAllPromptSnippetsResponseFormatPromptSnippets2$inboundSchema:
  z.ZodType<
    GetAllPromptSnippetsResponseFormatPromptSnippets2,
    z.ZodTypeDef,
    unknown
  > = z.object({
    type:
      GetAllPromptSnippetsResponseFormatPromptSnippetsResponse200Type$inboundSchema,
  });

/** @internal */
export type GetAllPromptSnippetsResponseFormatPromptSnippets2$Outbound = {
  type: string;
};

/** @internal */
export const GetAllPromptSnippetsResponseFormatPromptSnippets2$outboundSchema:
  z.ZodType<
    GetAllPromptSnippetsResponseFormatPromptSnippets2$Outbound,
    z.ZodTypeDef,
    GetAllPromptSnippetsResponseFormatPromptSnippets2
  > = z.object({
    type:
      GetAllPromptSnippetsResponseFormatPromptSnippetsResponse200Type$outboundSchema,
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPromptSnippetsResponseFormatPromptSnippets2$ {
  /** @deprecated use `GetAllPromptSnippetsResponseFormatPromptSnippets2$inboundSchema` instead. */
  export const inboundSchema =
    GetAllPromptSnippetsResponseFormatPromptSnippets2$inboundSchema;
  /** @deprecated use `GetAllPromptSnippetsResponseFormatPromptSnippets2$outboundSchema` instead. */
  export const outboundSchema =
    GetAllPromptSnippetsResponseFormatPromptSnippets2$outboundSchema;
  /** @deprecated use `GetAllPromptSnippetsResponseFormatPromptSnippets2$Outbound` instead. */
  export type Outbound =
    GetAllPromptSnippetsResponseFormatPromptSnippets2$Outbound;
}

export function getAllPromptSnippetsResponseFormatPromptSnippets2ToJSON(
  getAllPromptSnippetsResponseFormatPromptSnippets2:
    GetAllPromptSnippetsResponseFormatPromptSnippets2,
): string {
  return JSON.stringify(
    GetAllPromptSnippetsResponseFormatPromptSnippets2$outboundSchema.parse(
      getAllPromptSnippetsResponseFormatPromptSnippets2,
    ),
  );
}

export function getAllPromptSnippetsResponseFormatPromptSnippets2FromJSON(
  jsonString: string,
): SafeParseResult<
  GetAllPromptSnippetsResponseFormatPromptSnippets2,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetAllPromptSnippetsResponseFormatPromptSnippets2$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'GetAllPromptSnippetsResponseFormatPromptSnippets2' from JSON`,
  );
}

/** @internal */
export const GetAllPromptSnippetsResponseFormatPromptSnippetsResponseType$inboundSchema:
  z.ZodNativeEnum<
    typeof GetAllPromptSnippetsResponseFormatPromptSnippetsResponseType
  > = z.nativeEnum(
    GetAllPromptSnippetsResponseFormatPromptSnippetsResponseType,
  );

/** @internal */
export const GetAllPromptSnippetsResponseFormatPromptSnippetsResponseType$outboundSchema:
  z.ZodNativeEnum<
    typeof GetAllPromptSnippetsResponseFormatPromptSnippetsResponseType
  > =
    GetAllPromptSnippetsResponseFormatPromptSnippetsResponseType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPromptSnippetsResponseFormatPromptSnippetsResponseType$ {
  /** @deprecated use `GetAllPromptSnippetsResponseFormatPromptSnippetsResponseType$inboundSchema` instead. */
  export const inboundSchema =
    GetAllPromptSnippetsResponseFormatPromptSnippetsResponseType$inboundSchema;
  /** @deprecated use `GetAllPromptSnippetsResponseFormatPromptSnippetsResponseType$outboundSchema` instead. */
  export const outboundSchema =
    GetAllPromptSnippetsResponseFormatPromptSnippetsResponseType$outboundSchema;
}

/** @internal */
export const GetAllPromptSnippetsResponseFormatPromptSnippetsJsonSchema$inboundSchema:
  z.ZodType<
    GetAllPromptSnippetsResponseFormatPromptSnippetsJsonSchema,
    z.ZodTypeDef,
    unknown
  > = z.object({
    name: z.string(),
    strict: z.boolean(),
    schema: z.record(z.any()),
  });

/** @internal */
export type GetAllPromptSnippetsResponseFormatPromptSnippetsJsonSchema$Outbound =
  {
    name: string;
    strict: boolean;
    schema: { [k: string]: any };
  };

/** @internal */
export const GetAllPromptSnippetsResponseFormatPromptSnippetsJsonSchema$outboundSchema:
  z.ZodType<
    GetAllPromptSnippetsResponseFormatPromptSnippetsJsonSchema$Outbound,
    z.ZodTypeDef,
    GetAllPromptSnippetsResponseFormatPromptSnippetsJsonSchema
  > = z.object({
    name: z.string(),
    strict: z.boolean(),
    schema: z.record(z.any()),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPromptSnippetsResponseFormatPromptSnippetsJsonSchema$ {
  /** @deprecated use `GetAllPromptSnippetsResponseFormatPromptSnippetsJsonSchema$inboundSchema` instead. */
  export const inboundSchema =
    GetAllPromptSnippetsResponseFormatPromptSnippetsJsonSchema$inboundSchema;
  /** @deprecated use `GetAllPromptSnippetsResponseFormatPromptSnippetsJsonSchema$outboundSchema` instead. */
  export const outboundSchema =
    GetAllPromptSnippetsResponseFormatPromptSnippetsJsonSchema$outboundSchema;
  /** @deprecated use `GetAllPromptSnippetsResponseFormatPromptSnippetsJsonSchema$Outbound` instead. */
  export type Outbound =
    GetAllPromptSnippetsResponseFormatPromptSnippetsJsonSchema$Outbound;
}

export function getAllPromptSnippetsResponseFormatPromptSnippetsJsonSchemaToJSON(
  getAllPromptSnippetsResponseFormatPromptSnippetsJsonSchema:
    GetAllPromptSnippetsResponseFormatPromptSnippetsJsonSchema,
): string {
  return JSON.stringify(
    GetAllPromptSnippetsResponseFormatPromptSnippetsJsonSchema$outboundSchema
      .parse(getAllPromptSnippetsResponseFormatPromptSnippetsJsonSchema),
  );
}

export function getAllPromptSnippetsResponseFormatPromptSnippetsJsonSchemaFromJSON(
  jsonString: string,
): SafeParseResult<
  GetAllPromptSnippetsResponseFormatPromptSnippetsJsonSchema,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetAllPromptSnippetsResponseFormatPromptSnippetsJsonSchema$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'GetAllPromptSnippetsResponseFormatPromptSnippetsJsonSchema' from JSON`,
  );
}

/** @internal */
export const GetAllPromptSnippetsResponseFormatPromptSnippets1$inboundSchema:
  z.ZodType<
    GetAllPromptSnippetsResponseFormatPromptSnippets1,
    z.ZodTypeDef,
    unknown
  > = z.object({
    type:
      GetAllPromptSnippetsResponseFormatPromptSnippetsResponseType$inboundSchema,
    json_schema: z.lazy(() =>
      GetAllPromptSnippetsResponseFormatPromptSnippetsJsonSchema$inboundSchema
    ),
  }).transform((v) => {
    return remap$(v, {
      "json_schema": "jsonSchema",
    });
  });

/** @internal */
export type GetAllPromptSnippetsResponseFormatPromptSnippets1$Outbound = {
  type: string;
  json_schema:
    GetAllPromptSnippetsResponseFormatPromptSnippetsJsonSchema$Outbound;
};

/** @internal */
export const GetAllPromptSnippetsResponseFormatPromptSnippets1$outboundSchema:
  z.ZodType<
    GetAllPromptSnippetsResponseFormatPromptSnippets1$Outbound,
    z.ZodTypeDef,
    GetAllPromptSnippetsResponseFormatPromptSnippets1
  > = z.object({
    type:
      GetAllPromptSnippetsResponseFormatPromptSnippetsResponseType$outboundSchema,
    jsonSchema: z.lazy(() =>
      GetAllPromptSnippetsResponseFormatPromptSnippetsJsonSchema$outboundSchema
    ),
  }).transform((v) => {
    return remap$(v, {
      jsonSchema: "json_schema",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPromptSnippetsResponseFormatPromptSnippets1$ {
  /** @deprecated use `GetAllPromptSnippetsResponseFormatPromptSnippets1$inboundSchema` instead. */
  export const inboundSchema =
    GetAllPromptSnippetsResponseFormatPromptSnippets1$inboundSchema;
  /** @deprecated use `GetAllPromptSnippetsResponseFormatPromptSnippets1$outboundSchema` instead. */
  export const outboundSchema =
    GetAllPromptSnippetsResponseFormatPromptSnippets1$outboundSchema;
  /** @deprecated use `GetAllPromptSnippetsResponseFormatPromptSnippets1$Outbound` instead. */
  export type Outbound =
    GetAllPromptSnippetsResponseFormatPromptSnippets1$Outbound;
}

export function getAllPromptSnippetsResponseFormatPromptSnippets1ToJSON(
  getAllPromptSnippetsResponseFormatPromptSnippets1:
    GetAllPromptSnippetsResponseFormatPromptSnippets1,
): string {
  return JSON.stringify(
    GetAllPromptSnippetsResponseFormatPromptSnippets1$outboundSchema.parse(
      getAllPromptSnippetsResponseFormatPromptSnippets1,
    ),
  );
}

export function getAllPromptSnippetsResponseFormatPromptSnippets1FromJSON(
  jsonString: string,
): SafeParseResult<
  GetAllPromptSnippetsResponseFormatPromptSnippets1,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetAllPromptSnippetsResponseFormatPromptSnippets1$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'GetAllPromptSnippetsResponseFormatPromptSnippets1' from JSON`,
  );
}

/** @internal */
export const GetAllPromptSnippetsPromptSnippetsResponseFormat$inboundSchema:
  z.ZodType<
    GetAllPromptSnippetsPromptSnippetsResponseFormat,
    z.ZodTypeDef,
    unknown
  > = z.union([
    z.lazy(() =>
      GetAllPromptSnippetsResponseFormatPromptSnippets2$inboundSchema
    ),
    z.lazy(() =>
      GetAllPromptSnippetsResponseFormatPromptSnippets1$inboundSchema
    ),
  ]);

/** @internal */
export type GetAllPromptSnippetsPromptSnippetsResponseFormat$Outbound =
  | GetAllPromptSnippetsResponseFormatPromptSnippets2$Outbound
  | GetAllPromptSnippetsResponseFormatPromptSnippets1$Outbound;

/** @internal */
export const GetAllPromptSnippetsPromptSnippetsResponseFormat$outboundSchema:
  z.ZodType<
    GetAllPromptSnippetsPromptSnippetsResponseFormat$Outbound,
    z.ZodTypeDef,
    GetAllPromptSnippetsPromptSnippetsResponseFormat
  > = z.union([
    z.lazy(() =>
      GetAllPromptSnippetsResponseFormatPromptSnippets2$outboundSchema
    ),
    z.lazy(() =>
      GetAllPromptSnippetsResponseFormatPromptSnippets1$outboundSchema
    ),
  ]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPromptSnippetsPromptSnippetsResponseFormat$ {
  /** @deprecated use `GetAllPromptSnippetsPromptSnippetsResponseFormat$inboundSchema` instead. */
  export const inboundSchema =
    GetAllPromptSnippetsPromptSnippetsResponseFormat$inboundSchema;
  /** @deprecated use `GetAllPromptSnippetsPromptSnippetsResponseFormat$outboundSchema` instead. */
  export const outboundSchema =
    GetAllPromptSnippetsPromptSnippetsResponseFormat$outboundSchema;
  /** @deprecated use `GetAllPromptSnippetsPromptSnippetsResponseFormat$Outbound` instead. */
  export type Outbound =
    GetAllPromptSnippetsPromptSnippetsResponseFormat$Outbound;
}

export function getAllPromptSnippetsPromptSnippetsResponseFormatToJSON(
  getAllPromptSnippetsPromptSnippetsResponseFormat:
    GetAllPromptSnippetsPromptSnippetsResponseFormat,
): string {
  return JSON.stringify(
    GetAllPromptSnippetsPromptSnippetsResponseFormat$outboundSchema.parse(
      getAllPromptSnippetsPromptSnippetsResponseFormat,
    ),
  );
}

export function getAllPromptSnippetsPromptSnippetsResponseFormatFromJSON(
  jsonString: string,
): SafeParseResult<
  GetAllPromptSnippetsPromptSnippetsResponseFormat,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetAllPromptSnippetsPromptSnippetsResponseFormat$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'GetAllPromptSnippetsPromptSnippetsResponseFormat' from JSON`,
  );
}

/** @internal */
export const GetAllPromptSnippetsPromptSnippetsPhotoRealVersion$inboundSchema:
  z.ZodNativeEnum<typeof GetAllPromptSnippetsPromptSnippetsPhotoRealVersion> = z
    .nativeEnum(GetAllPromptSnippetsPromptSnippetsPhotoRealVersion);

/** @internal */
export const GetAllPromptSnippetsPromptSnippetsPhotoRealVersion$outboundSchema:
  z.ZodNativeEnum<typeof GetAllPromptSnippetsPromptSnippetsPhotoRealVersion> =
    GetAllPromptSnippetsPromptSnippetsPhotoRealVersion$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPromptSnippetsPromptSnippetsPhotoRealVersion$ {
  /** @deprecated use `GetAllPromptSnippetsPromptSnippetsPhotoRealVersion$inboundSchema` instead. */
  export const inboundSchema =
    GetAllPromptSnippetsPromptSnippetsPhotoRealVersion$inboundSchema;
  /** @deprecated use `GetAllPromptSnippetsPromptSnippetsPhotoRealVersion$outboundSchema` instead. */
  export const outboundSchema =
    GetAllPromptSnippetsPromptSnippetsPhotoRealVersion$outboundSchema;
}

/** @internal */
export const GetAllPromptSnippetsPromptSnippetsEncodingFormat$inboundSchema:
  z.ZodNativeEnum<typeof GetAllPromptSnippetsPromptSnippetsEncodingFormat> = z
    .nativeEnum(GetAllPromptSnippetsPromptSnippetsEncodingFormat);

/** @internal */
export const GetAllPromptSnippetsPromptSnippetsEncodingFormat$outboundSchema:
  z.ZodNativeEnum<typeof GetAllPromptSnippetsPromptSnippetsEncodingFormat> =
    GetAllPromptSnippetsPromptSnippetsEncodingFormat$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPromptSnippetsPromptSnippetsEncodingFormat$ {
  /** @deprecated use `GetAllPromptSnippetsPromptSnippetsEncodingFormat$inboundSchema` instead. */
  export const inboundSchema =
    GetAllPromptSnippetsPromptSnippetsEncodingFormat$inboundSchema;
  /** @deprecated use `GetAllPromptSnippetsPromptSnippetsEncodingFormat$outboundSchema` instead. */
  export const outboundSchema =
    GetAllPromptSnippetsPromptSnippetsEncodingFormat$outboundSchema;
}

/** @internal */
export const GetAllPromptSnippetsPromptSnippetsReasoningEffort$inboundSchema:
  z.ZodNativeEnum<typeof GetAllPromptSnippetsPromptSnippetsReasoningEffort> = z
    .nativeEnum(GetAllPromptSnippetsPromptSnippetsReasoningEffort);

/** @internal */
export const GetAllPromptSnippetsPromptSnippetsReasoningEffort$outboundSchema:
  z.ZodNativeEnum<typeof GetAllPromptSnippetsPromptSnippetsReasoningEffort> =
    GetAllPromptSnippetsPromptSnippetsReasoningEffort$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPromptSnippetsPromptSnippetsReasoningEffort$ {
  /** @deprecated use `GetAllPromptSnippetsPromptSnippetsReasoningEffort$inboundSchema` instead. */
  export const inboundSchema =
    GetAllPromptSnippetsPromptSnippetsReasoningEffort$inboundSchema;
  /** @deprecated use `GetAllPromptSnippetsPromptSnippetsReasoningEffort$outboundSchema` instead. */
  export const outboundSchema =
    GetAllPromptSnippetsPromptSnippetsReasoningEffort$outboundSchema;
}

/** @internal */
export const GetAllPromptSnippetsPromptSnippetsModelParameters$inboundSchema:
  z.ZodType<
    GetAllPromptSnippetsPromptSnippetsModelParameters,
    z.ZodTypeDef,
    unknown
  > = z.object({
    temperature: z.number().optional(),
    maxTokens: z.number().optional(),
    topK: z.number().optional(),
    topP: z.number().optional(),
    frequencyPenalty: z.number().optional(),
    presencePenalty: z.number().optional(),
    numImages: z.number().optional(),
    seed: z.number().optional(),
    format: GetAllPromptSnippetsPromptSnippetsFormat$inboundSchema.optional(),
    dimensions: z.string().optional(),
    quality: GetAllPromptSnippetsPromptSnippetsQuality$inboundSchema.optional(),
    style: z.string().optional(),
    responseFormat: z.nullable(
      z.union([
        z.lazy(() =>
          GetAllPromptSnippetsResponseFormatPromptSnippets2$inboundSchema
        ),
        z.lazy(() =>
          GetAllPromptSnippetsResponseFormatPromptSnippets1$inboundSchema
        ),
      ]),
    ).optional(),
    photoRealVersion:
      GetAllPromptSnippetsPromptSnippetsPhotoRealVersion$inboundSchema
        .optional(),
    encoding_format:
      GetAllPromptSnippetsPromptSnippetsEncodingFormat$inboundSchema.optional(),
    reasoningEffort:
      GetAllPromptSnippetsPromptSnippetsReasoningEffort$inboundSchema
        .optional(),
  }).transform((v) => {
    return remap$(v, {
      "encoding_format": "encodingFormat",
    });
  });

/** @internal */
export type GetAllPromptSnippetsPromptSnippetsModelParameters$Outbound = {
  temperature?: number | undefined;
  maxTokens?: number | undefined;
  topK?: number | undefined;
  topP?: number | undefined;
  frequencyPenalty?: number | undefined;
  presencePenalty?: number | undefined;
  numImages?: number | undefined;
  seed?: number | undefined;
  format?: string | undefined;
  dimensions?: string | undefined;
  quality?: string | undefined;
  style?: string | undefined;
  responseFormat?:
    | GetAllPromptSnippetsResponseFormatPromptSnippets2$Outbound
    | GetAllPromptSnippetsResponseFormatPromptSnippets1$Outbound
    | null
    | undefined;
  photoRealVersion?: string | undefined;
  encoding_format?: string | undefined;
  reasoningEffort?: string | undefined;
};

/** @internal */
export const GetAllPromptSnippetsPromptSnippetsModelParameters$outboundSchema:
  z.ZodType<
    GetAllPromptSnippetsPromptSnippetsModelParameters$Outbound,
    z.ZodTypeDef,
    GetAllPromptSnippetsPromptSnippetsModelParameters
  > = z.object({
    temperature: z.number().optional(),
    maxTokens: z.number().optional(),
    topK: z.number().optional(),
    topP: z.number().optional(),
    frequencyPenalty: z.number().optional(),
    presencePenalty: z.number().optional(),
    numImages: z.number().optional(),
    seed: z.number().optional(),
    format: GetAllPromptSnippetsPromptSnippetsFormat$outboundSchema.optional(),
    dimensions: z.string().optional(),
    quality: GetAllPromptSnippetsPromptSnippetsQuality$outboundSchema
      .optional(),
    style: z.string().optional(),
    responseFormat: z.nullable(
      z.union([
        z.lazy(() =>
          GetAllPromptSnippetsResponseFormatPromptSnippets2$outboundSchema
        ),
        z.lazy(() =>
          GetAllPromptSnippetsResponseFormatPromptSnippets1$outboundSchema
        ),
      ]),
    ).optional(),
    photoRealVersion:
      GetAllPromptSnippetsPromptSnippetsPhotoRealVersion$outboundSchema
        .optional(),
    encodingFormat:
      GetAllPromptSnippetsPromptSnippetsEncodingFormat$outboundSchema
        .optional(),
    reasoningEffort:
      GetAllPromptSnippetsPromptSnippetsReasoningEffort$outboundSchema
        .optional(),
  }).transform((v) => {
    return remap$(v, {
      encodingFormat: "encoding_format",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPromptSnippetsPromptSnippetsModelParameters$ {
  /** @deprecated use `GetAllPromptSnippetsPromptSnippetsModelParameters$inboundSchema` instead. */
  export const inboundSchema =
    GetAllPromptSnippetsPromptSnippetsModelParameters$inboundSchema;
  /** @deprecated use `GetAllPromptSnippetsPromptSnippetsModelParameters$outboundSchema` instead. */
  export const outboundSchema =
    GetAllPromptSnippetsPromptSnippetsModelParameters$outboundSchema;
  /** @deprecated use `GetAllPromptSnippetsPromptSnippetsModelParameters$Outbound` instead. */
  export type Outbound =
    GetAllPromptSnippetsPromptSnippetsModelParameters$Outbound;
}

export function getAllPromptSnippetsPromptSnippetsModelParametersToJSON(
  getAllPromptSnippetsPromptSnippetsModelParameters:
    GetAllPromptSnippetsPromptSnippetsModelParameters,
): string {
  return JSON.stringify(
    GetAllPromptSnippetsPromptSnippetsModelParameters$outboundSchema.parse(
      getAllPromptSnippetsPromptSnippetsModelParameters,
    ),
  );
}

export function getAllPromptSnippetsPromptSnippetsModelParametersFromJSON(
  jsonString: string,
): SafeParseResult<
  GetAllPromptSnippetsPromptSnippetsModelParameters,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetAllPromptSnippetsPromptSnippetsModelParameters$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'GetAllPromptSnippetsPromptSnippetsModelParameters' from JSON`,
  );
}

/** @internal */
export const GetAllPromptSnippetsPromptSnippetsProvider$inboundSchema:
  z.ZodNativeEnum<typeof GetAllPromptSnippetsPromptSnippetsProvider> = z
    .nativeEnum(GetAllPromptSnippetsPromptSnippetsProvider);

/** @internal */
export const GetAllPromptSnippetsPromptSnippetsProvider$outboundSchema:
  z.ZodNativeEnum<typeof GetAllPromptSnippetsPromptSnippetsProvider> =
    GetAllPromptSnippetsPromptSnippetsProvider$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPromptSnippetsPromptSnippetsProvider$ {
  /** @deprecated use `GetAllPromptSnippetsPromptSnippetsProvider$inboundSchema` instead. */
  export const inboundSchema =
    GetAllPromptSnippetsPromptSnippetsProvider$inboundSchema;
  /** @deprecated use `GetAllPromptSnippetsPromptSnippetsProvider$outboundSchema` instead. */
  export const outboundSchema =
    GetAllPromptSnippetsPromptSnippetsProvider$outboundSchema;
}

/** @internal */
export const GetAllPromptSnippetsPromptSnippetsRole$inboundSchema:
  z.ZodNativeEnum<typeof GetAllPromptSnippetsPromptSnippetsRole> = z.nativeEnum(
    GetAllPromptSnippetsPromptSnippetsRole,
  );

/** @internal */
export const GetAllPromptSnippetsPromptSnippetsRole$outboundSchema:
  z.ZodNativeEnum<typeof GetAllPromptSnippetsPromptSnippetsRole> =
    GetAllPromptSnippetsPromptSnippetsRole$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPromptSnippetsPromptSnippetsRole$ {
  /** @deprecated use `GetAllPromptSnippetsPromptSnippetsRole$inboundSchema` instead. */
  export const inboundSchema =
    GetAllPromptSnippetsPromptSnippetsRole$inboundSchema;
  /** @deprecated use `GetAllPromptSnippetsPromptSnippetsRole$outboundSchema` instead. */
  export const outboundSchema =
    GetAllPromptSnippetsPromptSnippetsRole$outboundSchema;
}

/** @internal */
export const GetAllPromptSnippets2PromptSnippetsResponse200Type$inboundSchema:
  z.ZodNativeEnum<typeof GetAllPromptSnippets2PromptSnippetsResponse200Type> = z
    .nativeEnum(GetAllPromptSnippets2PromptSnippetsResponse200Type);

/** @internal */
export const GetAllPromptSnippets2PromptSnippetsResponse200Type$outboundSchema:
  z.ZodNativeEnum<typeof GetAllPromptSnippets2PromptSnippetsResponse200Type> =
    GetAllPromptSnippets2PromptSnippetsResponse200Type$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPromptSnippets2PromptSnippetsResponse200Type$ {
  /** @deprecated use `GetAllPromptSnippets2PromptSnippetsResponse200Type$inboundSchema` instead. */
  export const inboundSchema =
    GetAllPromptSnippets2PromptSnippetsResponse200Type$inboundSchema;
  /** @deprecated use `GetAllPromptSnippets2PromptSnippetsResponse200Type$outboundSchema` instead. */
  export const outboundSchema =
    GetAllPromptSnippets2PromptSnippetsResponse200Type$outboundSchema;
}

/** @internal */
export const GetAllPromptSnippets2PromptSnippetsImageUrl$inboundSchema:
  z.ZodType<
    GetAllPromptSnippets2PromptSnippetsImageUrl,
    z.ZodTypeDef,
    unknown
  > = z.object({
    id: z.string().optional(),
    url: z.string(),
    detail: z.string().optional(),
  });

/** @internal */
export type GetAllPromptSnippets2PromptSnippetsImageUrl$Outbound = {
  id?: string | undefined;
  url: string;
  detail?: string | undefined;
};

/** @internal */
export const GetAllPromptSnippets2PromptSnippetsImageUrl$outboundSchema:
  z.ZodType<
    GetAllPromptSnippets2PromptSnippetsImageUrl$Outbound,
    z.ZodTypeDef,
    GetAllPromptSnippets2PromptSnippetsImageUrl
  > = z.object({
    id: z.string().optional(),
    url: z.string(),
    detail: z.string().optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPromptSnippets2PromptSnippetsImageUrl$ {
  /** @deprecated use `GetAllPromptSnippets2PromptSnippetsImageUrl$inboundSchema` instead. */
  export const inboundSchema =
    GetAllPromptSnippets2PromptSnippetsImageUrl$inboundSchema;
  /** @deprecated use `GetAllPromptSnippets2PromptSnippetsImageUrl$outboundSchema` instead. */
  export const outboundSchema =
    GetAllPromptSnippets2PromptSnippetsImageUrl$outboundSchema;
  /** @deprecated use `GetAllPromptSnippets2PromptSnippetsImageUrl$Outbound` instead. */
  export type Outbound = GetAllPromptSnippets2PromptSnippetsImageUrl$Outbound;
}

export function getAllPromptSnippets2PromptSnippetsImageUrlToJSON(
  getAllPromptSnippets2PromptSnippetsImageUrl:
    GetAllPromptSnippets2PromptSnippetsImageUrl,
): string {
  return JSON.stringify(
    GetAllPromptSnippets2PromptSnippetsImageUrl$outboundSchema.parse(
      getAllPromptSnippets2PromptSnippetsImageUrl,
    ),
  );
}

export function getAllPromptSnippets2PromptSnippetsImageUrlFromJSON(
  jsonString: string,
): SafeParseResult<
  GetAllPromptSnippets2PromptSnippetsImageUrl,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetAllPromptSnippets2PromptSnippetsImageUrl$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'GetAllPromptSnippets2PromptSnippetsImageUrl' from JSON`,
  );
}

/** @internal */
export const GetAllPromptSnippets2PromptSnippets2$inboundSchema: z.ZodType<
  GetAllPromptSnippets2PromptSnippets2,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: GetAllPromptSnippets2PromptSnippetsResponse200Type$inboundSchema,
  image_url: z.lazy(() =>
    GetAllPromptSnippets2PromptSnippetsImageUrl$inboundSchema
  ),
}).transform((v) => {
  return remap$(v, {
    "image_url": "imageUrl",
  });
});

/** @internal */
export type GetAllPromptSnippets2PromptSnippets2$Outbound = {
  type: string;
  image_url: GetAllPromptSnippets2PromptSnippetsImageUrl$Outbound;
};

/** @internal */
export const GetAllPromptSnippets2PromptSnippets2$outboundSchema: z.ZodType<
  GetAllPromptSnippets2PromptSnippets2$Outbound,
  z.ZodTypeDef,
  GetAllPromptSnippets2PromptSnippets2
> = z.object({
  type: GetAllPromptSnippets2PromptSnippetsResponse200Type$outboundSchema,
  imageUrl: z.lazy(() =>
    GetAllPromptSnippets2PromptSnippetsImageUrl$outboundSchema
  ),
}).transform((v) => {
  return remap$(v, {
    imageUrl: "image_url",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPromptSnippets2PromptSnippets2$ {
  /** @deprecated use `GetAllPromptSnippets2PromptSnippets2$inboundSchema` instead. */
  export const inboundSchema =
    GetAllPromptSnippets2PromptSnippets2$inboundSchema;
  /** @deprecated use `GetAllPromptSnippets2PromptSnippets2$outboundSchema` instead. */
  export const outboundSchema =
    GetAllPromptSnippets2PromptSnippets2$outboundSchema;
  /** @deprecated use `GetAllPromptSnippets2PromptSnippets2$Outbound` instead. */
  export type Outbound = GetAllPromptSnippets2PromptSnippets2$Outbound;
}

export function getAllPromptSnippets2PromptSnippets2ToJSON(
  getAllPromptSnippets2PromptSnippets2: GetAllPromptSnippets2PromptSnippets2,
): string {
  return JSON.stringify(
    GetAllPromptSnippets2PromptSnippets2$outboundSchema.parse(
      getAllPromptSnippets2PromptSnippets2,
    ),
  );
}

export function getAllPromptSnippets2PromptSnippets2FromJSON(
  jsonString: string,
): SafeParseResult<GetAllPromptSnippets2PromptSnippets2, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      GetAllPromptSnippets2PromptSnippets2$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetAllPromptSnippets2PromptSnippets2' from JSON`,
  );
}

/** @internal */
export const GetAllPromptSnippets2PromptSnippetsResponseType$inboundSchema:
  z.ZodNativeEnum<typeof GetAllPromptSnippets2PromptSnippetsResponseType> = z
    .nativeEnum(GetAllPromptSnippets2PromptSnippetsResponseType);

/** @internal */
export const GetAllPromptSnippets2PromptSnippetsResponseType$outboundSchema:
  z.ZodNativeEnum<typeof GetAllPromptSnippets2PromptSnippetsResponseType> =
    GetAllPromptSnippets2PromptSnippetsResponseType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPromptSnippets2PromptSnippetsResponseType$ {
  /** @deprecated use `GetAllPromptSnippets2PromptSnippetsResponseType$inboundSchema` instead. */
  export const inboundSchema =
    GetAllPromptSnippets2PromptSnippetsResponseType$inboundSchema;
  /** @deprecated use `GetAllPromptSnippets2PromptSnippetsResponseType$outboundSchema` instead. */
  export const outboundSchema =
    GetAllPromptSnippets2PromptSnippetsResponseType$outboundSchema;
}

/** @internal */
export const GetAllPromptSnippets2PromptSnippets1$inboundSchema: z.ZodType<
  GetAllPromptSnippets2PromptSnippets1,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: GetAllPromptSnippets2PromptSnippetsResponseType$inboundSchema,
  text: z.string(),
});

/** @internal */
export type GetAllPromptSnippets2PromptSnippets1$Outbound = {
  type: string;
  text: string;
};

/** @internal */
export const GetAllPromptSnippets2PromptSnippets1$outboundSchema: z.ZodType<
  GetAllPromptSnippets2PromptSnippets1$Outbound,
  z.ZodTypeDef,
  GetAllPromptSnippets2PromptSnippets1
> = z.object({
  type: GetAllPromptSnippets2PromptSnippetsResponseType$outboundSchema,
  text: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPromptSnippets2PromptSnippets1$ {
  /** @deprecated use `GetAllPromptSnippets2PromptSnippets1$inboundSchema` instead. */
  export const inboundSchema =
    GetAllPromptSnippets2PromptSnippets1$inboundSchema;
  /** @deprecated use `GetAllPromptSnippets2PromptSnippets1$outboundSchema` instead. */
  export const outboundSchema =
    GetAllPromptSnippets2PromptSnippets1$outboundSchema;
  /** @deprecated use `GetAllPromptSnippets2PromptSnippets1$Outbound` instead. */
  export type Outbound = GetAllPromptSnippets2PromptSnippets1$Outbound;
}

export function getAllPromptSnippets2PromptSnippets1ToJSON(
  getAllPromptSnippets2PromptSnippets1: GetAllPromptSnippets2PromptSnippets1,
): string {
  return JSON.stringify(
    GetAllPromptSnippets2PromptSnippets1$outboundSchema.parse(
      getAllPromptSnippets2PromptSnippets1,
    ),
  );
}

export function getAllPromptSnippets2PromptSnippets1FromJSON(
  jsonString: string,
): SafeParseResult<GetAllPromptSnippets2PromptSnippets1, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      GetAllPromptSnippets2PromptSnippets1$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetAllPromptSnippets2PromptSnippets1' from JSON`,
  );
}

/** @internal */
export const GetAllPromptSnippetsContentPromptSnippets2$inboundSchema:
  z.ZodType<GetAllPromptSnippetsContentPromptSnippets2, z.ZodTypeDef, unknown> =
    z.union([
      z.lazy(() => GetAllPromptSnippets2PromptSnippets1$inboundSchema),
      z.lazy(() => GetAllPromptSnippets2PromptSnippets2$inboundSchema),
    ]);

/** @internal */
export type GetAllPromptSnippetsContentPromptSnippets2$Outbound =
  | GetAllPromptSnippets2PromptSnippets1$Outbound
  | GetAllPromptSnippets2PromptSnippets2$Outbound;

/** @internal */
export const GetAllPromptSnippetsContentPromptSnippets2$outboundSchema:
  z.ZodType<
    GetAllPromptSnippetsContentPromptSnippets2$Outbound,
    z.ZodTypeDef,
    GetAllPromptSnippetsContentPromptSnippets2
  > = z.union([
    z.lazy(() => GetAllPromptSnippets2PromptSnippets1$outboundSchema),
    z.lazy(() => GetAllPromptSnippets2PromptSnippets2$outboundSchema),
  ]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPromptSnippetsContentPromptSnippets2$ {
  /** @deprecated use `GetAllPromptSnippetsContentPromptSnippets2$inboundSchema` instead. */
  export const inboundSchema =
    GetAllPromptSnippetsContentPromptSnippets2$inboundSchema;
  /** @deprecated use `GetAllPromptSnippetsContentPromptSnippets2$outboundSchema` instead. */
  export const outboundSchema =
    GetAllPromptSnippetsContentPromptSnippets2$outboundSchema;
  /** @deprecated use `GetAllPromptSnippetsContentPromptSnippets2$Outbound` instead. */
  export type Outbound = GetAllPromptSnippetsContentPromptSnippets2$Outbound;
}

export function getAllPromptSnippetsContentPromptSnippets2ToJSON(
  getAllPromptSnippetsContentPromptSnippets2:
    GetAllPromptSnippetsContentPromptSnippets2,
): string {
  return JSON.stringify(
    GetAllPromptSnippetsContentPromptSnippets2$outboundSchema.parse(
      getAllPromptSnippetsContentPromptSnippets2,
    ),
  );
}

export function getAllPromptSnippetsContentPromptSnippets2FromJSON(
  jsonString: string,
): SafeParseResult<
  GetAllPromptSnippetsContentPromptSnippets2,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetAllPromptSnippetsContentPromptSnippets2$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'GetAllPromptSnippetsContentPromptSnippets2' from JSON`,
  );
}

/** @internal */
export const GetAllPromptSnippetsPromptSnippetsContent$inboundSchema: z.ZodType<
  GetAllPromptSnippetsPromptSnippetsContent,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.string(),
  z.array(z.union([
    z.lazy(() => GetAllPromptSnippets2PromptSnippets1$inboundSchema),
    z.lazy(() => GetAllPromptSnippets2PromptSnippets2$inboundSchema),
  ])),
]);

/** @internal */
export type GetAllPromptSnippetsPromptSnippetsContent$Outbound =
  | string
  | Array<
    | GetAllPromptSnippets2PromptSnippets1$Outbound
    | GetAllPromptSnippets2PromptSnippets2$Outbound
  >;

/** @internal */
export const GetAllPromptSnippetsPromptSnippetsContent$outboundSchema:
  z.ZodType<
    GetAllPromptSnippetsPromptSnippetsContent$Outbound,
    z.ZodTypeDef,
    GetAllPromptSnippetsPromptSnippetsContent
  > = z.union([
    z.string(),
    z.array(z.union([
      z.lazy(() => GetAllPromptSnippets2PromptSnippets1$outboundSchema),
      z.lazy(() => GetAllPromptSnippets2PromptSnippets2$outboundSchema),
    ])),
  ]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPromptSnippetsPromptSnippetsContent$ {
  /** @deprecated use `GetAllPromptSnippetsPromptSnippetsContent$inboundSchema` instead. */
  export const inboundSchema =
    GetAllPromptSnippetsPromptSnippetsContent$inboundSchema;
  /** @deprecated use `GetAllPromptSnippetsPromptSnippetsContent$outboundSchema` instead. */
  export const outboundSchema =
    GetAllPromptSnippetsPromptSnippetsContent$outboundSchema;
  /** @deprecated use `GetAllPromptSnippetsPromptSnippetsContent$Outbound` instead. */
  export type Outbound = GetAllPromptSnippetsPromptSnippetsContent$Outbound;
}

export function getAllPromptSnippetsPromptSnippetsContentToJSON(
  getAllPromptSnippetsPromptSnippetsContent:
    GetAllPromptSnippetsPromptSnippetsContent,
): string {
  return JSON.stringify(
    GetAllPromptSnippetsPromptSnippetsContent$outboundSchema.parse(
      getAllPromptSnippetsPromptSnippetsContent,
    ),
  );
}

export function getAllPromptSnippetsPromptSnippetsContentFromJSON(
  jsonString: string,
): SafeParseResult<
  GetAllPromptSnippetsPromptSnippetsContent,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetAllPromptSnippetsPromptSnippetsContent$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'GetAllPromptSnippetsPromptSnippetsContent' from JSON`,
  );
}

/** @internal */
export const GetAllPromptSnippetsPromptSnippetsResponseType$inboundSchema:
  z.ZodNativeEnum<typeof GetAllPromptSnippetsPromptSnippetsResponseType> = z
    .nativeEnum(GetAllPromptSnippetsPromptSnippetsResponseType);

/** @internal */
export const GetAllPromptSnippetsPromptSnippetsResponseType$outboundSchema:
  z.ZodNativeEnum<typeof GetAllPromptSnippetsPromptSnippetsResponseType> =
    GetAllPromptSnippetsPromptSnippetsResponseType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPromptSnippetsPromptSnippetsResponseType$ {
  /** @deprecated use `GetAllPromptSnippetsPromptSnippetsResponseType$inboundSchema` instead. */
  export const inboundSchema =
    GetAllPromptSnippetsPromptSnippetsResponseType$inboundSchema;
  /** @deprecated use `GetAllPromptSnippetsPromptSnippetsResponseType$outboundSchema` instead. */
  export const outboundSchema =
    GetAllPromptSnippetsPromptSnippetsResponseType$outboundSchema;
}

/** @internal */
export const GetAllPromptSnippetsPromptSnippetsFunction$inboundSchema:
  z.ZodType<GetAllPromptSnippetsPromptSnippetsFunction, z.ZodTypeDef, unknown> =
    z.object({
      name: z.string(),
      arguments: z.string(),
    });

/** @internal */
export type GetAllPromptSnippetsPromptSnippetsFunction$Outbound = {
  name: string;
  arguments: string;
};

/** @internal */
export const GetAllPromptSnippetsPromptSnippetsFunction$outboundSchema:
  z.ZodType<
    GetAllPromptSnippetsPromptSnippetsFunction$Outbound,
    z.ZodTypeDef,
    GetAllPromptSnippetsPromptSnippetsFunction
  > = z.object({
    name: z.string(),
    arguments: z.string(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPromptSnippetsPromptSnippetsFunction$ {
  /** @deprecated use `GetAllPromptSnippetsPromptSnippetsFunction$inboundSchema` instead. */
  export const inboundSchema =
    GetAllPromptSnippetsPromptSnippetsFunction$inboundSchema;
  /** @deprecated use `GetAllPromptSnippetsPromptSnippetsFunction$outboundSchema` instead. */
  export const outboundSchema =
    GetAllPromptSnippetsPromptSnippetsFunction$outboundSchema;
  /** @deprecated use `GetAllPromptSnippetsPromptSnippetsFunction$Outbound` instead. */
  export type Outbound = GetAllPromptSnippetsPromptSnippetsFunction$Outbound;
}

export function getAllPromptSnippetsPromptSnippetsFunctionToJSON(
  getAllPromptSnippetsPromptSnippetsFunction:
    GetAllPromptSnippetsPromptSnippetsFunction,
): string {
  return JSON.stringify(
    GetAllPromptSnippetsPromptSnippetsFunction$outboundSchema.parse(
      getAllPromptSnippetsPromptSnippetsFunction,
    ),
  );
}

export function getAllPromptSnippetsPromptSnippetsFunctionFromJSON(
  jsonString: string,
): SafeParseResult<
  GetAllPromptSnippetsPromptSnippetsFunction,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetAllPromptSnippetsPromptSnippetsFunction$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'GetAllPromptSnippetsPromptSnippetsFunction' from JSON`,
  );
}

/** @internal */
export const GetAllPromptSnippetsPromptSnippetsToolCalls$inboundSchema:
  z.ZodType<
    GetAllPromptSnippetsPromptSnippetsToolCalls,
    z.ZodTypeDef,
    unknown
  > = z.object({
    id: z.string().optional(),
    index: z.number().optional(),
    type: GetAllPromptSnippetsPromptSnippetsResponseType$inboundSchema,
    function: z.lazy(() =>
      GetAllPromptSnippetsPromptSnippetsFunction$inboundSchema
    ),
  });

/** @internal */
export type GetAllPromptSnippetsPromptSnippetsToolCalls$Outbound = {
  id?: string | undefined;
  index?: number | undefined;
  type: string;
  function: GetAllPromptSnippetsPromptSnippetsFunction$Outbound;
};

/** @internal */
export const GetAllPromptSnippetsPromptSnippetsToolCalls$outboundSchema:
  z.ZodType<
    GetAllPromptSnippetsPromptSnippetsToolCalls$Outbound,
    z.ZodTypeDef,
    GetAllPromptSnippetsPromptSnippetsToolCalls
  > = z.object({
    id: z.string().optional(),
    index: z.number().optional(),
    type: GetAllPromptSnippetsPromptSnippetsResponseType$outboundSchema,
    function: z.lazy(() =>
      GetAllPromptSnippetsPromptSnippetsFunction$outboundSchema
    ),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPromptSnippetsPromptSnippetsToolCalls$ {
  /** @deprecated use `GetAllPromptSnippetsPromptSnippetsToolCalls$inboundSchema` instead. */
  export const inboundSchema =
    GetAllPromptSnippetsPromptSnippetsToolCalls$inboundSchema;
  /** @deprecated use `GetAllPromptSnippetsPromptSnippetsToolCalls$outboundSchema` instead. */
  export const outboundSchema =
    GetAllPromptSnippetsPromptSnippetsToolCalls$outboundSchema;
  /** @deprecated use `GetAllPromptSnippetsPromptSnippetsToolCalls$Outbound` instead. */
  export type Outbound = GetAllPromptSnippetsPromptSnippetsToolCalls$Outbound;
}

export function getAllPromptSnippetsPromptSnippetsToolCallsToJSON(
  getAllPromptSnippetsPromptSnippetsToolCalls:
    GetAllPromptSnippetsPromptSnippetsToolCalls,
): string {
  return JSON.stringify(
    GetAllPromptSnippetsPromptSnippetsToolCalls$outboundSchema.parse(
      getAllPromptSnippetsPromptSnippetsToolCalls,
    ),
  );
}

export function getAllPromptSnippetsPromptSnippetsToolCallsFromJSON(
  jsonString: string,
): SafeParseResult<
  GetAllPromptSnippetsPromptSnippetsToolCalls,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetAllPromptSnippetsPromptSnippetsToolCalls$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'GetAllPromptSnippetsPromptSnippetsToolCalls' from JSON`,
  );
}

/** @internal */
export const GetAllPromptSnippetsPromptSnippetsMessages$inboundSchema:
  z.ZodType<GetAllPromptSnippetsPromptSnippetsMessages, z.ZodTypeDef, unknown> =
    z.object({
      role: GetAllPromptSnippetsPromptSnippetsRole$inboundSchema,
      content: z.union([
        z.string(),
        z.array(z.union([
          z.lazy(() => GetAllPromptSnippets2PromptSnippets1$inboundSchema),
          z.lazy(() => GetAllPromptSnippets2PromptSnippets2$inboundSchema),
        ])),
      ]),
      tool_calls: z.array(
        z.lazy(() => GetAllPromptSnippetsPromptSnippetsToolCalls$inboundSchema),
      ).optional(),
    }).transform((v) => {
      return remap$(v, {
        "tool_calls": "toolCalls",
      });
    });

/** @internal */
export type GetAllPromptSnippetsPromptSnippetsMessages$Outbound = {
  role: string;
  content:
    | string
    | Array<
      | GetAllPromptSnippets2PromptSnippets1$Outbound
      | GetAllPromptSnippets2PromptSnippets2$Outbound
    >;
  tool_calls?:
    | Array<GetAllPromptSnippetsPromptSnippetsToolCalls$Outbound>
    | undefined;
};

/** @internal */
export const GetAllPromptSnippetsPromptSnippetsMessages$outboundSchema:
  z.ZodType<
    GetAllPromptSnippetsPromptSnippetsMessages$Outbound,
    z.ZodTypeDef,
    GetAllPromptSnippetsPromptSnippetsMessages
  > = z.object({
    role: GetAllPromptSnippetsPromptSnippetsRole$outboundSchema,
    content: z.union([
      z.string(),
      z.array(z.union([
        z.lazy(() => GetAllPromptSnippets2PromptSnippets1$outboundSchema),
        z.lazy(() => GetAllPromptSnippets2PromptSnippets2$outboundSchema),
      ])),
    ]),
    toolCalls: z.array(
      z.lazy(() => GetAllPromptSnippetsPromptSnippetsToolCalls$outboundSchema),
    ).optional(),
  }).transform((v) => {
    return remap$(v, {
      toolCalls: "tool_calls",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPromptSnippetsPromptSnippetsMessages$ {
  /** @deprecated use `GetAllPromptSnippetsPromptSnippetsMessages$inboundSchema` instead. */
  export const inboundSchema =
    GetAllPromptSnippetsPromptSnippetsMessages$inboundSchema;
  /** @deprecated use `GetAllPromptSnippetsPromptSnippetsMessages$outboundSchema` instead. */
  export const outboundSchema =
    GetAllPromptSnippetsPromptSnippetsMessages$outboundSchema;
  /** @deprecated use `GetAllPromptSnippetsPromptSnippetsMessages$Outbound` instead. */
  export type Outbound = GetAllPromptSnippetsPromptSnippetsMessages$Outbound;
}

export function getAllPromptSnippetsPromptSnippetsMessagesToJSON(
  getAllPromptSnippetsPromptSnippetsMessages:
    GetAllPromptSnippetsPromptSnippetsMessages,
): string {
  return JSON.stringify(
    GetAllPromptSnippetsPromptSnippetsMessages$outboundSchema.parse(
      getAllPromptSnippetsPromptSnippetsMessages,
    ),
  );
}

export function getAllPromptSnippetsPromptSnippetsMessagesFromJSON(
  jsonString: string,
): SafeParseResult<
  GetAllPromptSnippetsPromptSnippetsMessages,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetAllPromptSnippetsPromptSnippetsMessages$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'GetAllPromptSnippetsPromptSnippetsMessages' from JSON`,
  );
}

/** @internal */
export const GetAllPromptSnippetsPromptSnippetsPromptConfig$inboundSchema:
  z.ZodType<
    GetAllPromptSnippetsPromptSnippetsPromptConfig,
    z.ZodTypeDef,
    unknown
  > = z.object({
    stream: z.boolean().optional(),
    model: z.string().optional(),
    model_db_id: z.string().optional(),
    model_type: GetAllPromptSnippetsPromptSnippetsModelType$inboundSchema
      .optional(),
    model_parameters: z.lazy(() =>
      GetAllPromptSnippetsPromptSnippetsModelParameters$inboundSchema
    ).optional(),
    provider: GetAllPromptSnippetsPromptSnippetsProvider$inboundSchema
      .optional(),
    integration_id: z.nullable(z.string()).optional(),
    version: z.string().optional(),
    messages: z.array(
      z.lazy(() => GetAllPromptSnippetsPromptSnippetsMessages$inboundSchema),
    ),
  }).transform((v) => {
    return remap$(v, {
      "model_db_id": "modelDbId",
      "model_type": "modelType",
      "model_parameters": "modelParameters",
      "integration_id": "integrationId",
    });
  });

/** @internal */
export type GetAllPromptSnippetsPromptSnippetsPromptConfig$Outbound = {
  stream?: boolean | undefined;
  model?: string | undefined;
  model_db_id?: string | undefined;
  model_type?: string | undefined;
  model_parameters?:
    | GetAllPromptSnippetsPromptSnippetsModelParameters$Outbound
    | undefined;
  provider?: string | undefined;
  integration_id?: string | null | undefined;
  version?: string | undefined;
  messages: Array<GetAllPromptSnippetsPromptSnippetsMessages$Outbound>;
};

/** @internal */
export const GetAllPromptSnippetsPromptSnippetsPromptConfig$outboundSchema:
  z.ZodType<
    GetAllPromptSnippetsPromptSnippetsPromptConfig$Outbound,
    z.ZodTypeDef,
    GetAllPromptSnippetsPromptSnippetsPromptConfig
  > = z.object({
    stream: z.boolean().optional(),
    model: z.string().optional(),
    modelDbId: z.string().optional(),
    modelType: GetAllPromptSnippetsPromptSnippetsModelType$outboundSchema
      .optional(),
    modelParameters: z.lazy(() =>
      GetAllPromptSnippetsPromptSnippetsModelParameters$outboundSchema
    ).optional(),
    provider: GetAllPromptSnippetsPromptSnippetsProvider$outboundSchema
      .optional(),
    integrationId: z.nullable(z.string()).optional(),
    version: z.string().optional(),
    messages: z.array(
      z.lazy(() => GetAllPromptSnippetsPromptSnippetsMessages$outboundSchema),
    ),
  }).transform((v) => {
    return remap$(v, {
      modelDbId: "model_db_id",
      modelType: "model_type",
      modelParameters: "model_parameters",
      integrationId: "integration_id",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPromptSnippetsPromptSnippetsPromptConfig$ {
  /** @deprecated use `GetAllPromptSnippetsPromptSnippetsPromptConfig$inboundSchema` instead. */
  export const inboundSchema =
    GetAllPromptSnippetsPromptSnippetsPromptConfig$inboundSchema;
  /** @deprecated use `GetAllPromptSnippetsPromptSnippetsPromptConfig$outboundSchema` instead. */
  export const outboundSchema =
    GetAllPromptSnippetsPromptSnippetsPromptConfig$outboundSchema;
  /** @deprecated use `GetAllPromptSnippetsPromptSnippetsPromptConfig$Outbound` instead. */
  export type Outbound =
    GetAllPromptSnippetsPromptSnippetsPromptConfig$Outbound;
}

export function getAllPromptSnippetsPromptSnippetsPromptConfigToJSON(
  getAllPromptSnippetsPromptSnippetsPromptConfig:
    GetAllPromptSnippetsPromptSnippetsPromptConfig,
): string {
  return JSON.stringify(
    GetAllPromptSnippetsPromptSnippetsPromptConfig$outboundSchema.parse(
      getAllPromptSnippetsPromptSnippetsPromptConfig,
    ),
  );
}

export function getAllPromptSnippetsPromptSnippetsPromptConfigFromJSON(
  jsonString: string,
): SafeParseResult<
  GetAllPromptSnippetsPromptSnippetsPromptConfig,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetAllPromptSnippetsPromptSnippetsPromptConfig$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'GetAllPromptSnippetsPromptSnippetsPromptConfig' from JSON`,
  );
}

/** @internal */
export const GetAllPromptSnippetsPromptSnippetsUseCases$inboundSchema:
  z.ZodNativeEnum<typeof GetAllPromptSnippetsPromptSnippetsUseCases> = z
    .nativeEnum(GetAllPromptSnippetsPromptSnippetsUseCases);

/** @internal */
export const GetAllPromptSnippetsPromptSnippetsUseCases$outboundSchema:
  z.ZodNativeEnum<typeof GetAllPromptSnippetsPromptSnippetsUseCases> =
    GetAllPromptSnippetsPromptSnippetsUseCases$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPromptSnippetsPromptSnippetsUseCases$ {
  /** @deprecated use `GetAllPromptSnippetsPromptSnippetsUseCases$inboundSchema` instead. */
  export const inboundSchema =
    GetAllPromptSnippetsPromptSnippetsUseCases$inboundSchema;
  /** @deprecated use `GetAllPromptSnippetsPromptSnippetsUseCases$outboundSchema` instead. */
  export const outboundSchema =
    GetAllPromptSnippetsPromptSnippetsUseCases$outboundSchema;
}

/** @internal */
export const GetAllPromptSnippetsPromptSnippetsLanguage$inboundSchema:
  z.ZodNativeEnum<typeof GetAllPromptSnippetsPromptSnippetsLanguage> = z
    .nativeEnum(GetAllPromptSnippetsPromptSnippetsLanguage);

/** @internal */
export const GetAllPromptSnippetsPromptSnippetsLanguage$outboundSchema:
  z.ZodNativeEnum<typeof GetAllPromptSnippetsPromptSnippetsLanguage> =
    GetAllPromptSnippetsPromptSnippetsLanguage$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPromptSnippetsPromptSnippetsLanguage$ {
  /** @deprecated use `GetAllPromptSnippetsPromptSnippetsLanguage$inboundSchema` instead. */
  export const inboundSchema =
    GetAllPromptSnippetsPromptSnippetsLanguage$inboundSchema;
  /** @deprecated use `GetAllPromptSnippetsPromptSnippetsLanguage$outboundSchema` instead. */
  export const outboundSchema =
    GetAllPromptSnippetsPromptSnippetsLanguage$outboundSchema;
}

/** @internal */
export const GetAllPromptSnippetsPromptSnippetsMetadata$inboundSchema:
  z.ZodType<GetAllPromptSnippetsPromptSnippetsMetadata, z.ZodTypeDef, unknown> =
    z.object({
      use_cases: z.array(
        GetAllPromptSnippetsPromptSnippetsUseCases$inboundSchema,
      ).optional(),
      language: GetAllPromptSnippetsPromptSnippetsLanguage$inboundSchema
        .optional(),
    }).transform((v) => {
      return remap$(v, {
        "use_cases": "useCases",
      });
    });

/** @internal */
export type GetAllPromptSnippetsPromptSnippetsMetadata$Outbound = {
  use_cases?: Array<string> | undefined;
  language?: string | undefined;
};

/** @internal */
export const GetAllPromptSnippetsPromptSnippetsMetadata$outboundSchema:
  z.ZodType<
    GetAllPromptSnippetsPromptSnippetsMetadata$Outbound,
    z.ZodTypeDef,
    GetAllPromptSnippetsPromptSnippetsMetadata
  > = z.object({
    useCases: z.array(GetAllPromptSnippetsPromptSnippetsUseCases$outboundSchema)
      .optional(),
    language: GetAllPromptSnippetsPromptSnippetsLanguage$outboundSchema
      .optional(),
  }).transform((v) => {
    return remap$(v, {
      useCases: "use_cases",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPromptSnippetsPromptSnippetsMetadata$ {
  /** @deprecated use `GetAllPromptSnippetsPromptSnippetsMetadata$inboundSchema` instead. */
  export const inboundSchema =
    GetAllPromptSnippetsPromptSnippetsMetadata$inboundSchema;
  /** @deprecated use `GetAllPromptSnippetsPromptSnippetsMetadata$outboundSchema` instead. */
  export const outboundSchema =
    GetAllPromptSnippetsPromptSnippetsMetadata$outboundSchema;
  /** @deprecated use `GetAllPromptSnippetsPromptSnippetsMetadata$Outbound` instead. */
  export type Outbound = GetAllPromptSnippetsPromptSnippetsMetadata$Outbound;
}

export function getAllPromptSnippetsPromptSnippetsMetadataToJSON(
  getAllPromptSnippetsPromptSnippetsMetadata:
    GetAllPromptSnippetsPromptSnippetsMetadata,
): string {
  return JSON.stringify(
    GetAllPromptSnippetsPromptSnippetsMetadata$outboundSchema.parse(
      getAllPromptSnippetsPromptSnippetsMetadata,
    ),
  );
}

export function getAllPromptSnippetsPromptSnippetsMetadataFromJSON(
  jsonString: string,
): SafeParseResult<
  GetAllPromptSnippetsPromptSnippetsMetadata,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetAllPromptSnippetsPromptSnippetsMetadata$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'GetAllPromptSnippetsPromptSnippetsMetadata' from JSON`,
  );
}

/** @internal */
export const GetAllPromptSnippetsVersions$inboundSchema: z.ZodType<
  GetAllPromptSnippetsVersions,
  z.ZodTypeDef,
  unknown
> = z.object({
  _id: z.string(),
  description: z.nullable(z.string()).optional(),
  prompt_config: z.lazy(() =>
    GetAllPromptSnippetsPromptSnippetsPromptConfig$inboundSchema
  ),
  metadata: z.lazy(() =>
    GetAllPromptSnippetsPromptSnippetsMetadata$inboundSchema
  ),
  created_by_id: z.string(),
  updated_by_id: z.string(),
  timestamp: z.string(),
}).transform((v) => {
  return remap$(v, {
    "_id": "id",
    "prompt_config": "promptConfig",
    "created_by_id": "createdById",
    "updated_by_id": "updatedById",
  });
});

/** @internal */
export type GetAllPromptSnippetsVersions$Outbound = {
  _id: string;
  description?: string | null | undefined;
  prompt_config: GetAllPromptSnippetsPromptSnippetsPromptConfig$Outbound;
  metadata: GetAllPromptSnippetsPromptSnippetsMetadata$Outbound;
  created_by_id: string;
  updated_by_id: string;
  timestamp: string;
};

/** @internal */
export const GetAllPromptSnippetsVersions$outboundSchema: z.ZodType<
  GetAllPromptSnippetsVersions$Outbound,
  z.ZodTypeDef,
  GetAllPromptSnippetsVersions
> = z.object({
  id: z.string(),
  description: z.nullable(z.string()).optional(),
  promptConfig: z.lazy(() =>
    GetAllPromptSnippetsPromptSnippetsPromptConfig$outboundSchema
  ),
  metadata: z.lazy(() =>
    GetAllPromptSnippetsPromptSnippetsMetadata$outboundSchema
  ),
  createdById: z.string(),
  updatedById: z.string(),
  timestamp: z.string(),
}).transform((v) => {
  return remap$(v, {
    id: "_id",
    promptConfig: "prompt_config",
    createdById: "created_by_id",
    updatedById: "updated_by_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPromptSnippetsVersions$ {
  /** @deprecated use `GetAllPromptSnippetsVersions$inboundSchema` instead. */
  export const inboundSchema = GetAllPromptSnippetsVersions$inboundSchema;
  /** @deprecated use `GetAllPromptSnippetsVersions$outboundSchema` instead. */
  export const outboundSchema = GetAllPromptSnippetsVersions$outboundSchema;
  /** @deprecated use `GetAllPromptSnippetsVersions$Outbound` instead. */
  export type Outbound = GetAllPromptSnippetsVersions$Outbound;
}

export function getAllPromptSnippetsVersionsToJSON(
  getAllPromptSnippetsVersions: GetAllPromptSnippetsVersions,
): string {
  return JSON.stringify(
    GetAllPromptSnippetsVersions$outboundSchema.parse(
      getAllPromptSnippetsVersions,
    ),
  );
}

export function getAllPromptSnippetsVersionsFromJSON(
  jsonString: string,
): SafeParseResult<GetAllPromptSnippetsVersions, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetAllPromptSnippetsVersions$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetAllPromptSnippetsVersions' from JSON`,
  );
}

/** @internal */
export const GetAllPromptSnippetsData$inboundSchema: z.ZodType<
  GetAllPromptSnippetsData,
  z.ZodTypeDef,
  unknown
> = z.object({
  _id: z.string(),
  owner: z.union([z.string(), GetAllPromptSnippetsOwner2$inboundSchema]),
  domain_id: z.string(),
  key: z.string(),
  description: z.nullable(z.string()).optional(),
  prompt_config: z.lazy(() => GetAllPromptSnippetsPromptConfig$inboundSchema),
  metadata: z.lazy(() => GetAllPromptSnippetsMetadata$inboundSchema),
  created_by_id: z.string(),
  updated_by_id: z.string(),
  created: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
  updated: z.string().datetime({ offset: true }).default(
    "2025-02-10T15:50:12.206Z",
  ).transform(v => new Date(v)),
  type: GetAllPromptSnippetsType$inboundSchema,
  versions: z.array(z.lazy(() => GetAllPromptSnippetsVersions$inboundSchema)),
}).transform((v) => {
  return remap$(v, {
    "_id": "id",
    "domain_id": "domainId",
    "prompt_config": "promptConfig",
    "created_by_id": "createdById",
    "updated_by_id": "updatedById",
  });
});

/** @internal */
export type GetAllPromptSnippetsData$Outbound = {
  _id: string;
  owner: string | string;
  domain_id: string;
  key: string;
  description?: string | null | undefined;
  prompt_config: GetAllPromptSnippetsPromptConfig$Outbound;
  metadata: GetAllPromptSnippetsMetadata$Outbound;
  created_by_id: string;
  updated_by_id: string;
  created?: string | undefined;
  updated: string;
  type: string;
  versions: Array<GetAllPromptSnippetsVersions$Outbound>;
};

/** @internal */
export const GetAllPromptSnippetsData$outboundSchema: z.ZodType<
  GetAllPromptSnippetsData$Outbound,
  z.ZodTypeDef,
  GetAllPromptSnippetsData
> = z.object({
  id: z.string(),
  owner: z.union([z.string(), GetAllPromptSnippetsOwner2$outboundSchema]),
  domainId: z.string(),
  key: z.string(),
  description: z.nullable(z.string()).optional(),
  promptConfig: z.lazy(() => GetAllPromptSnippetsPromptConfig$outboundSchema),
  metadata: z.lazy(() => GetAllPromptSnippetsMetadata$outboundSchema),
  createdById: z.string(),
  updatedById: z.string(),
  created: z.date().transform(v => v.toISOString()).optional(),
  updated: z.date().default(() => new Date("2025-02-10T15:50:12.206Z"))
    .transform(v => v.toISOString()),
  type: GetAllPromptSnippetsType$outboundSchema,
  versions: z.array(z.lazy(() => GetAllPromptSnippetsVersions$outboundSchema)),
}).transform((v) => {
  return remap$(v, {
    id: "_id",
    domainId: "domain_id",
    promptConfig: "prompt_config",
    createdById: "created_by_id",
    updatedById: "updated_by_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPromptSnippetsData$ {
  /** @deprecated use `GetAllPromptSnippetsData$inboundSchema` instead. */
  export const inboundSchema = GetAllPromptSnippetsData$inboundSchema;
  /** @deprecated use `GetAllPromptSnippetsData$outboundSchema` instead. */
  export const outboundSchema = GetAllPromptSnippetsData$outboundSchema;
  /** @deprecated use `GetAllPromptSnippetsData$Outbound` instead. */
  export type Outbound = GetAllPromptSnippetsData$Outbound;
}

export function getAllPromptSnippetsDataToJSON(
  getAllPromptSnippetsData: GetAllPromptSnippetsData,
): string {
  return JSON.stringify(
    GetAllPromptSnippetsData$outboundSchema.parse(getAllPromptSnippetsData),
  );
}

export function getAllPromptSnippetsDataFromJSON(
  jsonString: string,
): SafeParseResult<GetAllPromptSnippetsData, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetAllPromptSnippetsData$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetAllPromptSnippetsData' from JSON`,
  );
}

/** @internal */
export const GetAllPromptSnippetsResponseBody$inboundSchema: z.ZodType<
  GetAllPromptSnippetsResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  object: GetAllPromptSnippetsObject$inboundSchema,
  data: z.array(z.lazy(() => GetAllPromptSnippetsData$inboundSchema)),
  has_more: z.boolean(),
}).transform((v) => {
  return remap$(v, {
    "has_more": "hasMore",
  });
});

/** @internal */
export type GetAllPromptSnippetsResponseBody$Outbound = {
  object: string;
  data: Array<GetAllPromptSnippetsData$Outbound>;
  has_more: boolean;
};

/** @internal */
export const GetAllPromptSnippetsResponseBody$outboundSchema: z.ZodType<
  GetAllPromptSnippetsResponseBody$Outbound,
  z.ZodTypeDef,
  GetAllPromptSnippetsResponseBody
> = z.object({
  object: GetAllPromptSnippetsObject$outboundSchema,
  data: z.array(z.lazy(() => GetAllPromptSnippetsData$outboundSchema)),
  hasMore: z.boolean(),
}).transform((v) => {
  return remap$(v, {
    hasMore: "has_more",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPromptSnippetsResponseBody$ {
  /** @deprecated use `GetAllPromptSnippetsResponseBody$inboundSchema` instead. */
  export const inboundSchema = GetAllPromptSnippetsResponseBody$inboundSchema;
  /** @deprecated use `GetAllPromptSnippetsResponseBody$outboundSchema` instead. */
  export const outboundSchema = GetAllPromptSnippetsResponseBody$outboundSchema;
  /** @deprecated use `GetAllPromptSnippetsResponseBody$Outbound` instead. */
  export type Outbound = GetAllPromptSnippetsResponseBody$Outbound;
}

export function getAllPromptSnippetsResponseBodyToJSON(
  getAllPromptSnippetsResponseBody: GetAllPromptSnippetsResponseBody,
): string {
  return JSON.stringify(
    GetAllPromptSnippetsResponseBody$outboundSchema.parse(
      getAllPromptSnippetsResponseBody,
    ),
  );
}

export function getAllPromptSnippetsResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<GetAllPromptSnippetsResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetAllPromptSnippetsResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetAllPromptSnippetsResponseBody' from JSON`,
  );
}
