/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type GetAgentTaskRequest = {
  agentKey: string;
  taskId: string;
};

export const GetAgentTaskKind = {
  Task: "task",
} as const;
export type GetAgentTaskKind = ClosedEnum<typeof GetAgentTaskKind>;

export type GetAgentTaskStatus = {
  state: string;
  timestamp?: string | undefined;
  message?: any | undefined;
};

/**
 * Agent task retrieved
 */
export type GetAgentTaskResponseBody = {
  id: string;
  contextId: string;
  kind: GetAgentTaskKind;
  status: GetAgentTaskStatus;
  history: Array<any>;
  artifacts?: Array<any> | undefined;
  metadata?: { [k: string]: any } | undefined;
};

/** @internal */
export const GetAgentTaskRequest$inboundSchema: z.ZodType<
  GetAgentTaskRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  agent_key: z.string(),
  task_id: z.string(),
}).transform((v) => {
  return remap$(v, {
    "agent_key": "agentKey",
    "task_id": "taskId",
  });
});

/** @internal */
export type GetAgentTaskRequest$Outbound = {
  agent_key: string;
  task_id: string;
};

/** @internal */
export const GetAgentTaskRequest$outboundSchema: z.ZodType<
  GetAgentTaskRequest$Outbound,
  z.ZodTypeDef,
  GetAgentTaskRequest
> = z.object({
  agentKey: z.string(),
  taskId: z.string(),
}).transform((v) => {
  return remap$(v, {
    agentKey: "agent_key",
    taskId: "task_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAgentTaskRequest$ {
  /** @deprecated use `GetAgentTaskRequest$inboundSchema` instead. */
  export const inboundSchema = GetAgentTaskRequest$inboundSchema;
  /** @deprecated use `GetAgentTaskRequest$outboundSchema` instead. */
  export const outboundSchema = GetAgentTaskRequest$outboundSchema;
  /** @deprecated use `GetAgentTaskRequest$Outbound` instead. */
  export type Outbound = GetAgentTaskRequest$Outbound;
}

export function getAgentTaskRequestToJSON(
  getAgentTaskRequest: GetAgentTaskRequest,
): string {
  return JSON.stringify(
    GetAgentTaskRequest$outboundSchema.parse(getAgentTaskRequest),
  );
}

export function getAgentTaskRequestFromJSON(
  jsonString: string,
): SafeParseResult<GetAgentTaskRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetAgentTaskRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetAgentTaskRequest' from JSON`,
  );
}

/** @internal */
export const GetAgentTaskKind$inboundSchema: z.ZodNativeEnum<
  typeof GetAgentTaskKind
> = z.nativeEnum(GetAgentTaskKind);

/** @internal */
export const GetAgentTaskKind$outboundSchema: z.ZodNativeEnum<
  typeof GetAgentTaskKind
> = GetAgentTaskKind$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAgentTaskKind$ {
  /** @deprecated use `GetAgentTaskKind$inboundSchema` instead. */
  export const inboundSchema = GetAgentTaskKind$inboundSchema;
  /** @deprecated use `GetAgentTaskKind$outboundSchema` instead. */
  export const outboundSchema = GetAgentTaskKind$outboundSchema;
}

/** @internal */
export const GetAgentTaskStatus$inboundSchema: z.ZodType<
  GetAgentTaskStatus,
  z.ZodTypeDef,
  unknown
> = z.object({
  state: z.string(),
  timestamp: z.string().optional(),
  message: z.any().optional(),
});

/** @internal */
export type GetAgentTaskStatus$Outbound = {
  state: string;
  timestamp?: string | undefined;
  message?: any | undefined;
};

/** @internal */
export const GetAgentTaskStatus$outboundSchema: z.ZodType<
  GetAgentTaskStatus$Outbound,
  z.ZodTypeDef,
  GetAgentTaskStatus
> = z.object({
  state: z.string(),
  timestamp: z.string().optional(),
  message: z.any().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAgentTaskStatus$ {
  /** @deprecated use `GetAgentTaskStatus$inboundSchema` instead. */
  export const inboundSchema = GetAgentTaskStatus$inboundSchema;
  /** @deprecated use `GetAgentTaskStatus$outboundSchema` instead. */
  export const outboundSchema = GetAgentTaskStatus$outboundSchema;
  /** @deprecated use `GetAgentTaskStatus$Outbound` instead. */
  export type Outbound = GetAgentTaskStatus$Outbound;
}

export function getAgentTaskStatusToJSON(
  getAgentTaskStatus: GetAgentTaskStatus,
): string {
  return JSON.stringify(
    GetAgentTaskStatus$outboundSchema.parse(getAgentTaskStatus),
  );
}

export function getAgentTaskStatusFromJSON(
  jsonString: string,
): SafeParseResult<GetAgentTaskStatus, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetAgentTaskStatus$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetAgentTaskStatus' from JSON`,
  );
}

/** @internal */
export const GetAgentTaskResponseBody$inboundSchema: z.ZodType<
  GetAgentTaskResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  contextId: z.string(),
  kind: GetAgentTaskKind$inboundSchema,
  status: z.lazy(() => GetAgentTaskStatus$inboundSchema),
  history: z.array(z.any()),
  artifacts: z.array(z.any()).optional(),
  metadata: z.record(z.any()).optional(),
});

/** @internal */
export type GetAgentTaskResponseBody$Outbound = {
  id: string;
  contextId: string;
  kind: string;
  status: GetAgentTaskStatus$Outbound;
  history: Array<any>;
  artifacts?: Array<any> | undefined;
  metadata?: { [k: string]: any } | undefined;
};

/** @internal */
export const GetAgentTaskResponseBody$outboundSchema: z.ZodType<
  GetAgentTaskResponseBody$Outbound,
  z.ZodTypeDef,
  GetAgentTaskResponseBody
> = z.object({
  id: z.string(),
  contextId: z.string(),
  kind: GetAgentTaskKind$outboundSchema,
  status: z.lazy(() => GetAgentTaskStatus$outboundSchema),
  history: z.array(z.any()),
  artifacts: z.array(z.any()).optional(),
  metadata: z.record(z.any()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAgentTaskResponseBody$ {
  /** @deprecated use `GetAgentTaskResponseBody$inboundSchema` instead. */
  export const inboundSchema = GetAgentTaskResponseBody$inboundSchema;
  /** @deprecated use `GetAgentTaskResponseBody$outboundSchema` instead. */
  export const outboundSchema = GetAgentTaskResponseBody$outboundSchema;
  /** @deprecated use `GetAgentTaskResponseBody$Outbound` instead. */
  export type Outbound = GetAgentTaskResponseBody$Outbound;
}

export function getAgentTaskResponseBodyToJSON(
  getAgentTaskResponseBody: GetAgentTaskResponseBody,
): string {
  return JSON.stringify(
    GetAgentTaskResponseBody$outboundSchema.parse(getAgentTaskResponseBody),
  );
}

export function getAgentTaskResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<GetAgentTaskResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetAgentTaskResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetAgentTaskResponseBody' from JSON`,
  );
}
