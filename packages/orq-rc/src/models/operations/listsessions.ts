/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type Pagination = {
  page?: number | undefined;
  limit?: number | undefined;
  lastId?: string | null | undefined;
  firstId?: string | null | undefined;
};

/**
 * The direction to sort by
 */
export const Direction = {
  Asc: "asc",
  Desc: "desc",
} as const;
/**
 * The direction to sort by
 */
export type Direction = ClosedEnum<typeof Direction>;

export type SortingProps = {
  /**
   * The path to sort by
   */
  key: string;
  /**
   * The direction to sort by
   */
  direction?: Direction | undefined;
};

export const Operator = {
  And: "and",
  Or: "or",
} as const;
export type Operator = ClosedEnum<typeof Operator>;

export const ListSessionsFiltersSessionsRequestRequestBodyQuery8Operator = {
  Is: "is",
} as const;
export type ListSessionsFiltersSessionsRequestRequestBodyQuery8Operator =
  ClosedEnum<
    typeof ListSessionsFiltersSessionsRequestRequestBodyQuery8Operator
  >;

export const ListSessionsFiltersSessionsRequestRequestBodyQuery8Type = {
  String: "string",
  MultiValueArray: "multi-value-array",
  SingleValueArray: "single-value-array",
  Number: "number",
  Date: "date",
  Object: "object",
  Boolean: "boolean",
  Evaluator: "evaluator",
} as const;
export type ListSessionsFiltersSessionsRequestRequestBodyQuery8Type =
  ClosedEnum<typeof ListSessionsFiltersSessionsRequestRequestBodyQuery8Type>;

export const ListSessionsHideOperatorsSessionsRequestRequestBodyQueryFilters85 =
  {
    Is: "is",
    IsBefore: "is_before",
    IsOnOrBefore: "is_on_or_before",
    IsBetween: "is_between",
    IsRelativeToday: "is_relative_today",
    IsRelativeTime: "is_relative_time",
    IsEmpty: "is_empty",
    IsNotEmpty: "is_not_empty",
  } as const;
export type ListSessionsHideOperatorsSessionsRequestRequestBodyQueryFilters85 =
  ClosedEnum<
    typeof ListSessionsHideOperatorsSessionsRequestRequestBodyQueryFilters85
  >;

export const ListSessionsHideOperatorsSessionsRequestRequestBodyQueryFilters84 =
  {
    Contains: "contains",
    DoesNotContain: "does_not_contain",
    IsEmpty: "is_empty",
    IsNotEmpty: "is_not_empty",
  } as const;
export type ListSessionsHideOperatorsSessionsRequestRequestBodyQueryFilters84 =
  ClosedEnum<
    typeof ListSessionsHideOperatorsSessionsRequestRequestBodyQueryFilters84
  >;

export const ListSessionsHideOperatorsSessionsRequestRequestBodyQueryFilters83 =
  {
    Is: "is",
    IsNot: "is_not",
    IsEmpty: "is_empty",
    IsNotEmpty: "is_not_empty",
  } as const;
export type ListSessionsHideOperatorsSessionsRequestRequestBodyQueryFilters83 =
  ClosedEnum<
    typeof ListSessionsHideOperatorsSessionsRequestRequestBodyQueryFilters83
  >;

export const ListSessionsHideOperatorsSessionsRequestRequestBodyQueryFilters82 =
  {
    Equals: "equals",
    IsNotEqual: "is_not_equal",
    IsGreaterThan: "is_greater_than",
    IsLessThan: "is_less_than",
    IsGreaterThanOrEqualTo: "is_greater_than_or_equal_to",
    IsLessThanOrEqualTo: "is_less_than_or_equal_to",
    IsBetween: "is_between",
    IsEmpty: "is_empty",
    IsNotEmpty: "is_not_empty",
  } as const;
export type ListSessionsHideOperatorsSessionsRequestRequestBodyQueryFilters82 =
  ClosedEnum<
    typeof ListSessionsHideOperatorsSessionsRequestRequestBodyQueryFilters82
  >;

export const ListSessionsHideOperatorsSessionsRequestRequestBodyQueryFilters81 =
  {
    Is: "is",
    IsNot: "is_not",
    Contains: "contains",
    DoesNotContain: "does_not_contain",
    StartsWith: "starts_with",
    EndsWith: "ends_with",
    IsEmpty: "is_empty",
    IsNotEmpty: "is_not_empty",
  } as const;
export type ListSessionsHideOperatorsSessionsRequestRequestBodyQueryFilters81 =
  ClosedEnum<
    typeof ListSessionsHideOperatorsSessionsRequestRequestBodyQueryFilters81
  >;

export type ListSessionsFiltersSessionsRequestRequestBodyQuery8HideOperators =
  | ListSessionsHideOperatorsSessionsRequestRequestBodyQueryFilters81
  | ListSessionsHideOperatorsSessionsRequestRequestBodyQueryFilters82
  | ListSessionsHideOperatorsSessionsRequestRequestBodyQueryFilters83
  | ListSessionsHideOperatorsSessionsRequestRequestBodyQueryFilters84
  | ListSessionsHideOperatorsSessionsRequestRequestBodyQueryFilters85;

export type Filters8 = {
  operator: ListSessionsFiltersSessionsRequestRequestBodyQuery8Operator;
  value?: boolean | undefined;
  type: ListSessionsFiltersSessionsRequestRequestBodyQuery8Type;
  name: string;
  path: string;
  hideOperators?:
    | Array<
      | ListSessionsHideOperatorsSessionsRequestRequestBodyQueryFilters81
      | ListSessionsHideOperatorsSessionsRequestRequestBodyQueryFilters82
      | ListSessionsHideOperatorsSessionsRequestRequestBodyQueryFilters83
      | ListSessionsHideOperatorsSessionsRequestRequestBodyQueryFilters84
      | ListSessionsHideOperatorsSessionsRequestRequestBodyQueryFilters85
    >
    | undefined;
};

export const ListSessionsOperator2 = {
  Equals: "equals",
  IsNotEqual: "is_not_equal",
  IsGreaterThan: "is_greater_than",
  IsLessThan: "is_less_than",
  IsGreaterThanOrEqualTo: "is_greater_than_or_equal_to",
  IsLessThanOrEqualTo: "is_less_than_or_equal_to",
  IsBetween: "is_between",
  IsEmpty: "is_empty",
  IsNotEmpty: "is_not_empty",
} as const;
export type ListSessionsOperator2 = ClosedEnum<typeof ListSessionsOperator2>;

export const ListSessionsOperator1 = {
  Is: "is",
} as const;
export type ListSessionsOperator1 = ClosedEnum<typeof ListSessionsOperator1>;

export type ListSessionsFiltersSessionsRequestRequestBodyQuery7Operator =
  | ListSessionsOperator1
  | ListSessionsOperator2;

export const ListSessionsFiltersSessionsRequestRequestBodyQuery7Type = {
  String: "string",
  MultiValueArray: "multi-value-array",
  SingleValueArray: "single-value-array",
  Number: "number",
  Date: "date",
  Object: "object",
  Boolean: "boolean",
  Evaluator: "evaluator",
} as const;
export type ListSessionsFiltersSessionsRequestRequestBodyQuery7Type =
  ClosedEnum<typeof ListSessionsFiltersSessionsRequestRequestBodyQuery7Type>;

export const ListSessionsFiltersSessionsRequestRequestBodyQuery7OptionsType = {
  String: "string",
  MultiValueArray: "multi-value-array",
  SingleValueArray: "single-value-array",
  Number: "number",
  Date: "date",
  Object: "object",
  Boolean: "boolean",
  Evaluator: "evaluator",
} as const;
export type ListSessionsFiltersSessionsRequestRequestBodyQuery7OptionsType =
  ClosedEnum<
    typeof ListSessionsFiltersSessionsRequestRequestBodyQuery7OptionsType
  >;

export const ListSessionsHideOperatorsSessionsRequestRequestBodyQueryFilters75 =
  {
    Is: "is",
    IsBefore: "is_before",
    IsOnOrBefore: "is_on_or_before",
    IsBetween: "is_between",
    IsRelativeToday: "is_relative_today",
    IsRelativeTime: "is_relative_time",
    IsEmpty: "is_empty",
    IsNotEmpty: "is_not_empty",
  } as const;
export type ListSessionsHideOperatorsSessionsRequestRequestBodyQueryFilters75 =
  ClosedEnum<
    typeof ListSessionsHideOperatorsSessionsRequestRequestBodyQueryFilters75
  >;

export const ListSessionsHideOperatorsSessionsRequestRequestBodyQueryFilters74 =
  {
    Contains: "contains",
    DoesNotContain: "does_not_contain",
    IsEmpty: "is_empty",
    IsNotEmpty: "is_not_empty",
  } as const;
export type ListSessionsHideOperatorsSessionsRequestRequestBodyQueryFilters74 =
  ClosedEnum<
    typeof ListSessionsHideOperatorsSessionsRequestRequestBodyQueryFilters74
  >;

export const ListSessionsHideOperatorsSessionsRequestRequestBodyQueryFilters73 =
  {
    Is: "is",
    IsNot: "is_not",
    IsEmpty: "is_empty",
    IsNotEmpty: "is_not_empty",
  } as const;
export type ListSessionsHideOperatorsSessionsRequestRequestBodyQueryFilters73 =
  ClosedEnum<
    typeof ListSessionsHideOperatorsSessionsRequestRequestBodyQueryFilters73
  >;

export const ListSessionsHideOperatorsSessionsRequestRequestBodyQueryFilters72 =
  {
    Equals: "equals",
    IsNotEqual: "is_not_equal",
    IsGreaterThan: "is_greater_than",
    IsLessThan: "is_less_than",
    IsGreaterThanOrEqualTo: "is_greater_than_or_equal_to",
    IsLessThanOrEqualTo: "is_less_than_or_equal_to",
    IsBetween: "is_between",
    IsEmpty: "is_empty",
    IsNotEmpty: "is_not_empty",
  } as const;
export type ListSessionsHideOperatorsSessionsRequestRequestBodyQueryFilters72 =
  ClosedEnum<
    typeof ListSessionsHideOperatorsSessionsRequestRequestBodyQueryFilters72
  >;

export const ListSessionsHideOperatorsSessionsRequestRequestBodyQueryFilters71 =
  {
    Is: "is",
    IsNot: "is_not",
    Contains: "contains",
    DoesNotContain: "does_not_contain",
    StartsWith: "starts_with",
    EndsWith: "ends_with",
    IsEmpty: "is_empty",
    IsNotEmpty: "is_not_empty",
  } as const;
export type ListSessionsHideOperatorsSessionsRequestRequestBodyQueryFilters71 =
  ClosedEnum<
    typeof ListSessionsHideOperatorsSessionsRequestRequestBodyQueryFilters71
  >;

export type ListSessionsFiltersSessionsRequestRequestBodyQuery7HideOperators =
  | ListSessionsHideOperatorsSessionsRequestRequestBodyQueryFilters71
  | ListSessionsHideOperatorsSessionsRequestRequestBodyQueryFilters72
  | ListSessionsHideOperatorsSessionsRequestRequestBodyQueryFilters73
  | ListSessionsHideOperatorsSessionsRequestRequestBodyQueryFilters74
  | ListSessionsHideOperatorsSessionsRequestRequestBodyQueryFilters75;

export const EvaluatorType = {
  FunctionEval: "function_eval",
  HttpEval: "http_eval",
  JsonSchema: "json_schema",
  LlmEval: "llm_eval",
  PythonEval: "python_eval",
  Ragas: "ragas",
  TypescriptEval: "typescript_eval",
} as const;
export type EvaluatorType = ClosedEnum<typeof EvaluatorType>;

export const EvaluatorOutputType = {
  Boolean: "boolean",
  Number: "number",
  String: "string",
  Enum: "enum",
} as const;
export type EvaluatorOutputType = ClosedEnum<typeof EvaluatorOutputType>;

export type ListSessionsFiltersSessionsOptions = {
  name: string;
  path: string;
  type: ListSessionsFiltersSessionsRequestRequestBodyQuery7OptionsType;
  hideOperators?:
    | Array<
      | ListSessionsHideOperatorsSessionsRequestRequestBodyQueryFilters71
      | ListSessionsHideOperatorsSessionsRequestRequestBodyQueryFilters72
      | ListSessionsHideOperatorsSessionsRequestRequestBodyQueryFilters73
      | ListSessionsHideOperatorsSessionsRequestRequestBodyQueryFilters74
      | ListSessionsHideOperatorsSessionsRequestRequestBodyQueryFilters75
    >
    | undefined;
  id: string;
  evaluatorId: string;
  evaluatorType: EvaluatorType;
  evaluatorOutputType: EvaluatorOutputType;
};

export const ListSessionsHideOperatorsSessionsRequestRequestBodyQueryFilters76 =
  {
    Is: "is",
    IsBefore: "is_before",
    IsOnOrBefore: "is_on_or_before",
    IsBetween: "is_between",
    IsRelativeToday: "is_relative_today",
    IsRelativeTime: "is_relative_time",
    IsEmpty: "is_empty",
    IsNotEmpty: "is_not_empty",
  } as const;
export type ListSessionsHideOperatorsSessionsRequestRequestBodyQueryFilters76 =
  ClosedEnum<
    typeof ListSessionsHideOperatorsSessionsRequestRequestBodyQueryFilters76
  >;

export const ListSessionsHideOperatorsSessionsRequestRequestBodyQueryFilters77 =
  {
    Contains: "contains",
    DoesNotContain: "does_not_contain",
    IsEmpty: "is_empty",
    IsNotEmpty: "is_not_empty",
  } as const;
export type ListSessionsHideOperatorsSessionsRequestRequestBodyQueryFilters77 =
  ClosedEnum<
    typeof ListSessionsHideOperatorsSessionsRequestRequestBodyQueryFilters77
  >;

export const ListSessionsHideOperatorsSessionsRequestRequestBodyQueryFilters78 =
  {
    Is: "is",
    IsNot: "is_not",
    IsEmpty: "is_empty",
    IsNotEmpty: "is_not_empty",
  } as const;
export type ListSessionsHideOperatorsSessionsRequestRequestBodyQueryFilters78 =
  ClosedEnum<
    typeof ListSessionsHideOperatorsSessionsRequestRequestBodyQueryFilters78
  >;

export const ListSessionsHideOperatorsSessionsRequestRequestBodyQueryFilters79 =
  {
    Equals: "equals",
    IsNotEqual: "is_not_equal",
    IsGreaterThan: "is_greater_than",
    IsLessThan: "is_less_than",
    IsGreaterThanOrEqualTo: "is_greater_than_or_equal_to",
    IsLessThanOrEqualTo: "is_less_than_or_equal_to",
    IsBetween: "is_between",
    IsEmpty: "is_empty",
    IsNotEmpty: "is_not_empty",
  } as const;
export type ListSessionsHideOperatorsSessionsRequestRequestBodyQueryFilters79 =
  ClosedEnum<
    typeof ListSessionsHideOperatorsSessionsRequestRequestBodyQueryFilters79
  >;

export const ListSessionsHideOperatorsSessionsRequestRequestBodyQueryFilters710 =
  {
    Is: "is",
    IsNot: "is_not",
    Contains: "contains",
    DoesNotContain: "does_not_contain",
    StartsWith: "starts_with",
    EndsWith: "ends_with",
    IsEmpty: "is_empty",
    IsNotEmpty: "is_not_empty",
  } as const;
export type ListSessionsHideOperatorsSessionsRequestRequestBodyQueryFilters710 =
  ClosedEnum<
    typeof ListSessionsHideOperatorsSessionsRequestRequestBodyQueryFilters710
  >;

export type ListSessionsFiltersSessionsRequestRequestBodyQuery7HideOperators1 =
  | ListSessionsHideOperatorsSessionsRequestRequestBodyQueryFilters710
  | ListSessionsHideOperatorsSessionsRequestRequestBodyQueryFilters79
  | ListSessionsHideOperatorsSessionsRequestRequestBodyQueryFilters78
  | ListSessionsHideOperatorsSessionsRequestRequestBodyQueryFilters77
  | ListSessionsHideOperatorsSessionsRequestRequestBodyQueryFilters76;

export type Filters7 = {
  operator: ListSessionsOperator1 | ListSessionsOperator2;
  value?: any | null | undefined;
  type: ListSessionsFiltersSessionsRequestRequestBodyQuery7Type;
  selectedOptionId: string | null;
  options: Array<ListSessionsFiltersSessionsOptions>;
  name: string;
  path: string;
  hideOperators?:
    | Array<
      | ListSessionsHideOperatorsSessionsRequestRequestBodyQueryFilters710
      | ListSessionsHideOperatorsSessionsRequestRequestBodyQueryFilters79
      | ListSessionsHideOperatorsSessionsRequestRequestBodyQueryFilters78
      | ListSessionsHideOperatorsSessionsRequestRequestBodyQueryFilters77
      | ListSessionsHideOperatorsSessionsRequestRequestBodyQueryFilters76
    >
    | undefined;
};

export const Operator5 = {
  Equals: "equals",
  IsNotEqual: "is_not_equal",
  IsGreaterThan: "is_greater_than",
  IsLessThan: "is_less_than",
  IsGreaterThanOrEqualTo: "is_greater_than_or_equal_to",
  IsLessThanOrEqualTo: "is_less_than_or_equal_to",
  IsBetween: "is_between",
  IsEmpty: "is_empty",
  IsNotEmpty: "is_not_empty",
} as const;
export type Operator5 = ClosedEnum<typeof Operator5>;

export const Operator4 = {
  Is: "is",
  IsBefore: "is_before",
  IsOnOrBefore: "is_on_or_before",
  IsBetween: "is_between",
  IsRelativeToday: "is_relative_today",
  IsRelativeTime: "is_relative_time",
  IsEmpty: "is_empty",
  IsNotEmpty: "is_not_empty",
} as const;
export type Operator4 = ClosedEnum<typeof Operator4>;

export const Operator3 = {
  Contains: "contains",
  DoesNotContain: "does_not_contain",
  IsEmpty: "is_empty",
  IsNotEmpty: "is_not_empty",
} as const;
export type Operator3 = ClosedEnum<typeof Operator3>;

export const Operator2 = {
  Is: "is",
  IsNot: "is_not",
  IsEmpty: "is_empty",
  IsNotEmpty: "is_not_empty",
} as const;
export type Operator2 = ClosedEnum<typeof Operator2>;

export const Operator1 = {
  Is: "is",
  IsNot: "is_not",
  Contains: "contains",
  DoesNotContain: "does_not_contain",
  StartsWith: "starts_with",
  EndsWith: "ends_with",
  IsEmpty: "is_empty",
  IsNotEmpty: "is_not_empty",
} as const;
export type Operator1 = ClosedEnum<typeof Operator1>;

export type ListSessionsFiltersSessionsRequestRequestBodyQueryOperator =
  | Operator1
  | Operator2
  | Operator3
  | Operator4
  | Operator5;

export const ListSessionsFiltersSessionsRequestRequestBodyQueryType = {
  String: "string",
  MultiValueArray: "multi-value-array",
  SingleValueArray: "single-value-array",
  Number: "number",
  Date: "date",
  Object: "object",
  Boolean: "boolean",
  Evaluator: "evaluator",
} as const;
export type ListSessionsFiltersSessionsRequestRequestBodyQueryType = ClosedEnum<
  typeof ListSessionsFiltersSessionsRequestRequestBodyQueryType
>;

export const ListSessionsFiltersSessionsRequestRequestBodyQuery6Type = {
  String: "string",
  MultiValueArray: "multi-value-array",
  SingleValueArray: "single-value-array",
  Number: "number",
  Date: "date",
  Object: "object",
  Boolean: "boolean",
  Evaluator: "evaluator",
} as const;
export type ListSessionsFiltersSessionsRequestRequestBodyQuery6Type =
  ClosedEnum<typeof ListSessionsFiltersSessionsRequestRequestBodyQuery6Type>;

export const ListSessionsHideOperatorsSessionsRequestRequestBodyQuery5 = {
  Is: "is",
  IsBefore: "is_before",
  IsOnOrBefore: "is_on_or_before",
  IsBetween: "is_between",
  IsRelativeToday: "is_relative_today",
  IsRelativeTime: "is_relative_time",
  IsEmpty: "is_empty",
  IsNotEmpty: "is_not_empty",
} as const;
export type ListSessionsHideOperatorsSessionsRequestRequestBodyQuery5 =
  ClosedEnum<typeof ListSessionsHideOperatorsSessionsRequestRequestBodyQuery5>;

export const ListSessionsHideOperatorsSessionsRequestRequestBodyQuery4 = {
  Contains: "contains",
  DoesNotContain: "does_not_contain",
  IsEmpty: "is_empty",
  IsNotEmpty: "is_not_empty",
} as const;
export type ListSessionsHideOperatorsSessionsRequestRequestBodyQuery4 =
  ClosedEnum<typeof ListSessionsHideOperatorsSessionsRequestRequestBodyQuery4>;

export const ListSessionsHideOperatorsSessionsRequestRequestBodyQuery3 = {
  Is: "is",
  IsNot: "is_not",
  IsEmpty: "is_empty",
  IsNotEmpty: "is_not_empty",
} as const;
export type ListSessionsHideOperatorsSessionsRequestRequestBodyQuery3 =
  ClosedEnum<typeof ListSessionsHideOperatorsSessionsRequestRequestBodyQuery3>;

export const ListSessionsHideOperatorsSessionsRequestRequestBodyQuery2 = {
  Equals: "equals",
  IsNotEqual: "is_not_equal",
  IsGreaterThan: "is_greater_than",
  IsLessThan: "is_less_than",
  IsGreaterThanOrEqualTo: "is_greater_than_or_equal_to",
  IsLessThanOrEqualTo: "is_less_than_or_equal_to",
  IsBetween: "is_between",
  IsEmpty: "is_empty",
  IsNotEmpty: "is_not_empty",
} as const;
export type ListSessionsHideOperatorsSessionsRequestRequestBodyQuery2 =
  ClosedEnum<typeof ListSessionsHideOperatorsSessionsRequestRequestBodyQuery2>;

export const ListSessionsHideOperatorsSessionsRequestRequestBodyQuery1 = {
  Is: "is",
  IsNot: "is_not",
  Contains: "contains",
  DoesNotContain: "does_not_contain",
  StartsWith: "starts_with",
  EndsWith: "ends_with",
  IsEmpty: "is_empty",
  IsNotEmpty: "is_not_empty",
} as const;
export type ListSessionsHideOperatorsSessionsRequestRequestBodyQuery1 =
  ClosedEnum<typeof ListSessionsHideOperatorsSessionsRequestRequestBodyQuery1>;

export type ListSessionsFiltersSessionsRequestRequestBodyHideOperators =
  | ListSessionsHideOperatorsSessionsRequestRequestBodyQuery1
  | ListSessionsHideOperatorsSessionsRequestRequestBodyQuery2
  | ListSessionsHideOperatorsSessionsRequestRequestBodyQuery3
  | ListSessionsHideOperatorsSessionsRequestRequestBodyQuery4
  | ListSessionsHideOperatorsSessionsRequestRequestBodyQuery5;

export type ListSessionsFiltersOptions = {
  name: string;
  path: string;
  type: ListSessionsFiltersSessionsRequestRequestBodyQuery6Type;
  hideOperators?:
    | Array<
      | ListSessionsHideOperatorsSessionsRequestRequestBodyQuery1
      | ListSessionsHideOperatorsSessionsRequestRequestBodyQuery2
      | ListSessionsHideOperatorsSessionsRequestRequestBodyQuery3
      | ListSessionsHideOperatorsSessionsRequestRequestBodyQuery4
      | ListSessionsHideOperatorsSessionsRequestRequestBodyQuery5
    >
    | undefined;
  id: string;
};

export const ListSessionsHideOperatorsSessionsRequestRequestBodyQueryFilters5 =
  {
    Is: "is",
    IsBefore: "is_before",
    IsOnOrBefore: "is_on_or_before",
    IsBetween: "is_between",
    IsRelativeToday: "is_relative_today",
    IsRelativeTime: "is_relative_time",
    IsEmpty: "is_empty",
    IsNotEmpty: "is_not_empty",
  } as const;
export type ListSessionsHideOperatorsSessionsRequestRequestBodyQueryFilters5 =
  ClosedEnum<
    typeof ListSessionsHideOperatorsSessionsRequestRequestBodyQueryFilters5
  >;

export const ListSessionsHideOperatorsSessionsRequestRequestBodyQueryFilters4 =
  {
    Contains: "contains",
    DoesNotContain: "does_not_contain",
    IsEmpty: "is_empty",
    IsNotEmpty: "is_not_empty",
  } as const;
export type ListSessionsHideOperatorsSessionsRequestRequestBodyQueryFilters4 =
  ClosedEnum<
    typeof ListSessionsHideOperatorsSessionsRequestRequestBodyQueryFilters4
  >;

export const ListSessionsHideOperatorsSessionsRequestRequestBodyQueryFilters3 =
  {
    Is: "is",
    IsNot: "is_not",
    IsEmpty: "is_empty",
    IsNotEmpty: "is_not_empty",
  } as const;
export type ListSessionsHideOperatorsSessionsRequestRequestBodyQueryFilters3 =
  ClosedEnum<
    typeof ListSessionsHideOperatorsSessionsRequestRequestBodyQueryFilters3
  >;

export const ListSessionsHideOperatorsSessionsRequestRequestBodyQueryFilters2 =
  {
    Equals: "equals",
    IsNotEqual: "is_not_equal",
    IsGreaterThan: "is_greater_than",
    IsLessThan: "is_less_than",
    IsGreaterThanOrEqualTo: "is_greater_than_or_equal_to",
    IsLessThanOrEqualTo: "is_less_than_or_equal_to",
    IsBetween: "is_between",
    IsEmpty: "is_empty",
    IsNotEmpty: "is_not_empty",
  } as const;
export type ListSessionsHideOperatorsSessionsRequestRequestBodyQueryFilters2 =
  ClosedEnum<
    typeof ListSessionsHideOperatorsSessionsRequestRequestBodyQueryFilters2
  >;

export const ListSessionsHideOperatorsSessionsRequestRequestBodyQueryFilters1 =
  {
    Is: "is",
    IsNot: "is_not",
    Contains: "contains",
    DoesNotContain: "does_not_contain",
    StartsWith: "starts_with",
    EndsWith: "ends_with",
    IsEmpty: "is_empty",
    IsNotEmpty: "is_not_empty",
  } as const;
export type ListSessionsHideOperatorsSessionsRequestRequestBodyQueryFilters1 =
  ClosedEnum<
    typeof ListSessionsHideOperatorsSessionsRequestRequestBodyQueryFilters1
  >;

export type ListSessionsFiltersSessionsRequestRequestBodyQueryHideOperators =
  | ListSessionsHideOperatorsSessionsRequestRequestBodyQueryFilters1
  | ListSessionsHideOperatorsSessionsRequestRequestBodyQueryFilters2
  | ListSessionsHideOperatorsSessionsRequestRequestBodyQueryFilters3
  | ListSessionsHideOperatorsSessionsRequestRequestBodyQueryFilters4
  | ListSessionsHideOperatorsSessionsRequestRequestBodyQueryFilters5;

export type Filters6 = {
  operator: Operator1 | Operator2 | Operator3 | Operator4 | Operator5;
  value?: any | null | undefined;
  type: ListSessionsFiltersSessionsRequestRequestBodyQueryType;
  options: Array<ListSessionsFiltersOptions>;
  selectedOptionId: string | null;
  name: string;
  path: string;
  hideOperators?:
    | Array<
      | ListSessionsHideOperatorsSessionsRequestRequestBodyQueryFilters1
      | ListSessionsHideOperatorsSessionsRequestRequestBodyQueryFilters2
      | ListSessionsHideOperatorsSessionsRequestRequestBodyQueryFilters3
      | ListSessionsHideOperatorsSessionsRequestRequestBodyQueryFilters4
      | ListSessionsHideOperatorsSessionsRequestRequestBodyQueryFilters5
    >
    | undefined;
};

export const ListSessionsFiltersSessionsRequestRequestBodyOperator = {
  Is: "is",
  IsNot: "is_not",
  Contains: "contains",
  DoesNotContain: "does_not_contain",
  StartsWith: "starts_with",
  EndsWith: "ends_with",
  IsEmpty: "is_empty",
  IsNotEmpty: "is_not_empty",
} as const;
export type ListSessionsFiltersSessionsRequestRequestBodyOperator = ClosedEnum<
  typeof ListSessionsFiltersSessionsRequestRequestBodyOperator
>;

export const ListSessionsFiltersSessionsRequestRequestBodyType = {
  String: "string",
  MultiValueArray: "multi-value-array",
  SingleValueArray: "single-value-array",
  Number: "number",
  Date: "date",
  Object: "object",
  Boolean: "boolean",
  Evaluator: "evaluator",
} as const;
export type ListSessionsFiltersSessionsRequestRequestBodyType = ClosedEnum<
  typeof ListSessionsFiltersSessionsRequestRequestBodyType
>;

export const ListSessionsHideOperatorsSessionsRequestRequestBody5 = {
  Is: "is",
  IsBefore: "is_before",
  IsOnOrBefore: "is_on_or_before",
  IsBetween: "is_between",
  IsRelativeToday: "is_relative_today",
  IsRelativeTime: "is_relative_time",
  IsEmpty: "is_empty",
  IsNotEmpty: "is_not_empty",
} as const;
export type ListSessionsHideOperatorsSessionsRequestRequestBody5 = ClosedEnum<
  typeof ListSessionsHideOperatorsSessionsRequestRequestBody5
>;

export const ListSessionsHideOperatorsSessionsRequestRequestBody4 = {
  Contains: "contains",
  DoesNotContain: "does_not_contain",
  IsEmpty: "is_empty",
  IsNotEmpty: "is_not_empty",
} as const;
export type ListSessionsHideOperatorsSessionsRequestRequestBody4 = ClosedEnum<
  typeof ListSessionsHideOperatorsSessionsRequestRequestBody4
>;

export const ListSessionsHideOperatorsSessionsRequestRequestBody3 = {
  Is: "is",
  IsNot: "is_not",
  IsEmpty: "is_empty",
  IsNotEmpty: "is_not_empty",
} as const;
export type ListSessionsHideOperatorsSessionsRequestRequestBody3 = ClosedEnum<
  typeof ListSessionsHideOperatorsSessionsRequestRequestBody3
>;

export const ListSessionsHideOperatorsSessionsRequestRequestBody2 = {
  Equals: "equals",
  IsNotEqual: "is_not_equal",
  IsGreaterThan: "is_greater_than",
  IsLessThan: "is_less_than",
  IsGreaterThanOrEqualTo: "is_greater_than_or_equal_to",
  IsLessThanOrEqualTo: "is_less_than_or_equal_to",
  IsBetween: "is_between",
  IsEmpty: "is_empty",
  IsNotEmpty: "is_not_empty",
} as const;
export type ListSessionsHideOperatorsSessionsRequestRequestBody2 = ClosedEnum<
  typeof ListSessionsHideOperatorsSessionsRequestRequestBody2
>;

export const ListSessionsHideOperatorsSessionsRequestRequestBody1 = {
  Is: "is",
  IsNot: "is_not",
  Contains: "contains",
  DoesNotContain: "does_not_contain",
  StartsWith: "starts_with",
  EndsWith: "ends_with",
  IsEmpty: "is_empty",
  IsNotEmpty: "is_not_empty",
} as const;
export type ListSessionsHideOperatorsSessionsRequestRequestBody1 = ClosedEnum<
  typeof ListSessionsHideOperatorsSessionsRequestRequestBody1
>;

export type ListSessionsFiltersSessionsRequestHideOperators =
  | ListSessionsHideOperatorsSessionsRequestRequestBody1
  | ListSessionsHideOperatorsSessionsRequestRequestBody2
  | ListSessionsHideOperatorsSessionsRequestRequestBody3
  | ListSessionsHideOperatorsSessionsRequestRequestBody4
  | ListSessionsHideOperatorsSessionsRequestRequestBody5;

export type Filters5 = {
  operator: ListSessionsFiltersSessionsRequestRequestBodyOperator;
  value: string | null;
  type: ListSessionsFiltersSessionsRequestRequestBodyType;
  name: string;
  path: string;
  hideOperators?:
    | Array<
      | ListSessionsHideOperatorsSessionsRequestRequestBody1
      | ListSessionsHideOperatorsSessionsRequestRequestBody2
      | ListSessionsHideOperatorsSessionsRequestRequestBody3
      | ListSessionsHideOperatorsSessionsRequestRequestBody4
      | ListSessionsHideOperatorsSessionsRequestRequestBody5
    >
    | undefined;
};

export const ListSessionsFiltersSessionsRequestOperator = {
  Equals: "equals",
  IsNotEqual: "is_not_equal",
  IsGreaterThan: "is_greater_than",
  IsLessThan: "is_less_than",
  IsGreaterThanOrEqualTo: "is_greater_than_or_equal_to",
  IsLessThanOrEqualTo: "is_less_than_or_equal_to",
  IsBetween: "is_between",
  IsEmpty: "is_empty",
  IsNotEmpty: "is_not_empty",
} as const;
export type ListSessionsFiltersSessionsRequestOperator = ClosedEnum<
  typeof ListSessionsFiltersSessionsRequestOperator
>;

export type ListSessionsFiltersValue = number | Array<number>;

export const ListSessionsFiltersSessionsRequestType = {
  String: "string",
  MultiValueArray: "multi-value-array",
  SingleValueArray: "single-value-array",
  Number: "number",
  Date: "date",
  Object: "object",
  Boolean: "boolean",
  Evaluator: "evaluator",
} as const;
export type ListSessionsFiltersSessionsRequestType = ClosedEnum<
  typeof ListSessionsFiltersSessionsRequestType
>;

export const ListSessionsHideOperatorsSessionsRequest5 = {
  Is: "is",
  IsBefore: "is_before",
  IsOnOrBefore: "is_on_or_before",
  IsBetween: "is_between",
  IsRelativeToday: "is_relative_today",
  IsRelativeTime: "is_relative_time",
  IsEmpty: "is_empty",
  IsNotEmpty: "is_not_empty",
} as const;
export type ListSessionsHideOperatorsSessionsRequest5 = ClosedEnum<
  typeof ListSessionsHideOperatorsSessionsRequest5
>;

export const ListSessionsHideOperatorsSessionsRequest4 = {
  Contains: "contains",
  DoesNotContain: "does_not_contain",
  IsEmpty: "is_empty",
  IsNotEmpty: "is_not_empty",
} as const;
export type ListSessionsHideOperatorsSessionsRequest4 = ClosedEnum<
  typeof ListSessionsHideOperatorsSessionsRequest4
>;

export const ListSessionsHideOperatorsSessionsRequest3 = {
  Is: "is",
  IsNot: "is_not",
  IsEmpty: "is_empty",
  IsNotEmpty: "is_not_empty",
} as const;
export type ListSessionsHideOperatorsSessionsRequest3 = ClosedEnum<
  typeof ListSessionsHideOperatorsSessionsRequest3
>;

export const ListSessionsHideOperatorsSessionsRequest2 = {
  Equals: "equals",
  IsNotEqual: "is_not_equal",
  IsGreaterThan: "is_greater_than",
  IsLessThan: "is_less_than",
  IsGreaterThanOrEqualTo: "is_greater_than_or_equal_to",
  IsLessThanOrEqualTo: "is_less_than_or_equal_to",
  IsBetween: "is_between",
  IsEmpty: "is_empty",
  IsNotEmpty: "is_not_empty",
} as const;
export type ListSessionsHideOperatorsSessionsRequest2 = ClosedEnum<
  typeof ListSessionsHideOperatorsSessionsRequest2
>;

export const ListSessionsHideOperatorsSessionsRequest1 = {
  Is: "is",
  IsNot: "is_not",
  Contains: "contains",
  DoesNotContain: "does_not_contain",
  StartsWith: "starts_with",
  EndsWith: "ends_with",
  IsEmpty: "is_empty",
  IsNotEmpty: "is_not_empty",
} as const;
export type ListSessionsHideOperatorsSessionsRequest1 = ClosedEnum<
  typeof ListSessionsHideOperatorsSessionsRequest1
>;

export type ListSessionsFiltersSessionsHideOperators =
  | ListSessionsHideOperatorsSessionsRequest1
  | ListSessionsHideOperatorsSessionsRequest2
  | ListSessionsHideOperatorsSessionsRequest3
  | ListSessionsHideOperatorsSessionsRequest4
  | ListSessionsHideOperatorsSessionsRequest5;

export type Filters4 = {
  operator: ListSessionsFiltersSessionsRequestOperator;
  value: number | Array<number> | null;
  type: ListSessionsFiltersSessionsRequestType;
  name: string;
  path: string;
  hideOperators?:
    | Array<
      | ListSessionsHideOperatorsSessionsRequest1
      | ListSessionsHideOperatorsSessionsRequest2
      | ListSessionsHideOperatorsSessionsRequest3
      | ListSessionsHideOperatorsSessionsRequest4
      | ListSessionsHideOperatorsSessionsRequest5
    >
    | undefined;
};

export const ListSessionsFiltersSessionsOperator = {
  Is: "is",
  IsBefore: "is_before",
  IsOnOrBefore: "is_on_or_before",
  IsBetween: "is_between",
  IsRelativeToday: "is_relative_today",
  IsRelativeTime: "is_relative_time",
  IsEmpty: "is_empty",
  IsNotEmpty: "is_not_empty",
} as const;
export type ListSessionsFiltersSessionsOperator = ClosedEnum<
  typeof ListSessionsFiltersSessionsOperator
>;

export const Unit2 = {
  HoursAgo: "hours_ago",
  MinutesAgo: "minutes_ago",
} as const;
export type Unit2 = ClosedEnum<typeof Unit2>;

export const Unit1 = {
  Day: "day",
  Week: "week",
  Month: "month",
  Year: "year",
} as const;
export type Unit1 = ClosedEnum<typeof Unit1>;

export type Unit = Unit1 | Unit2;

export const RelativeTime = {
  Today: "today",
  Yesterday: "yesterday",
  OneWeekAgo: "one_week_ago",
  OneMonthAgo: "one_month_ago",
  CustomDate: "custom_date",
} as const;
export type RelativeTime = ClosedEnum<typeof RelativeTime>;

export const FiltersDirection = {
  Present: "present",
  Past: "past",
} as const;
export type FiltersDirection = ClosedEnum<typeof FiltersDirection>;

export type Criteria = {
  unit?: Unit1 | Unit2 | undefined;
  count?: number | null | undefined;
  relativeTime?: RelativeTime | undefined;
  customDate?: string | null | undefined;
  direction?: FiltersDirection | undefined;
  startDate?: string | null | undefined;
  endDate?: string | null | undefined;
};

export const Mode = {
  Date: "date",
  Datetime: "datetime",
} as const;
export type Mode = ClosedEnum<typeof Mode>;

export type FiltersValue = {
  criteria: Criteria | null;
  mode: Mode;
};

export const ListSessionsFiltersSessionsType = {
  String: "string",
  MultiValueArray: "multi-value-array",
  SingleValueArray: "single-value-array",
  Number: "number",
  Date: "date",
  Object: "object",
  Boolean: "boolean",
  Evaluator: "evaluator",
} as const;
export type ListSessionsFiltersSessionsType = ClosedEnum<
  typeof ListSessionsFiltersSessionsType
>;

export const ListSessionsHideOperatorsSessions5 = {
  Is: "is",
  IsBefore: "is_before",
  IsOnOrBefore: "is_on_or_before",
  IsBetween: "is_between",
  IsRelativeToday: "is_relative_today",
  IsRelativeTime: "is_relative_time",
  IsEmpty: "is_empty",
  IsNotEmpty: "is_not_empty",
} as const;
export type ListSessionsHideOperatorsSessions5 = ClosedEnum<
  typeof ListSessionsHideOperatorsSessions5
>;

export const ListSessionsHideOperatorsSessions4 = {
  Contains: "contains",
  DoesNotContain: "does_not_contain",
  IsEmpty: "is_empty",
  IsNotEmpty: "is_not_empty",
} as const;
export type ListSessionsHideOperatorsSessions4 = ClosedEnum<
  typeof ListSessionsHideOperatorsSessions4
>;

export const ListSessionsHideOperatorsSessions3 = {
  Is: "is",
  IsNot: "is_not",
  IsEmpty: "is_empty",
  IsNotEmpty: "is_not_empty",
} as const;
export type ListSessionsHideOperatorsSessions3 = ClosedEnum<
  typeof ListSessionsHideOperatorsSessions3
>;

export const ListSessionsHideOperatorsSessions2 = {
  Equals: "equals",
  IsNotEqual: "is_not_equal",
  IsGreaterThan: "is_greater_than",
  IsLessThan: "is_less_than",
  IsGreaterThanOrEqualTo: "is_greater_than_or_equal_to",
  IsLessThanOrEqualTo: "is_less_than_or_equal_to",
  IsBetween: "is_between",
  IsEmpty: "is_empty",
  IsNotEmpty: "is_not_empty",
} as const;
export type ListSessionsHideOperatorsSessions2 = ClosedEnum<
  typeof ListSessionsHideOperatorsSessions2
>;

export const ListSessionsHideOperatorsSessions1 = {
  Is: "is",
  IsNot: "is_not",
  Contains: "contains",
  DoesNotContain: "does_not_contain",
  StartsWith: "starts_with",
  EndsWith: "ends_with",
  IsEmpty: "is_empty",
  IsNotEmpty: "is_not_empty",
} as const;
export type ListSessionsHideOperatorsSessions1 = ClosedEnum<
  typeof ListSessionsHideOperatorsSessions1
>;

export type ListSessionsFiltersHideOperators =
  | ListSessionsHideOperatorsSessions1
  | ListSessionsHideOperatorsSessions2
  | ListSessionsHideOperatorsSessions3
  | ListSessionsHideOperatorsSessions4
  | ListSessionsHideOperatorsSessions5;

export type Filters3 = {
  operator: ListSessionsFiltersSessionsOperator;
  value: FiltersValue;
  type: ListSessionsFiltersSessionsType;
  name: string;
  path: string;
  hideOperators?:
    | Array<
      | ListSessionsHideOperatorsSessions1
      | ListSessionsHideOperatorsSessions2
      | ListSessionsHideOperatorsSessions3
      | ListSessionsHideOperatorsSessions4
      | ListSessionsHideOperatorsSessions5
    >
    | undefined;
};

export const ListSessionsFiltersOperator = {
  Contains: "contains",
  DoesNotContain: "does_not_contain",
  IsEmpty: "is_empty",
  IsNotEmpty: "is_not_empty",
} as const;
export type ListSessionsFiltersOperator = ClosedEnum<
  typeof ListSessionsFiltersOperator
>;

export const ListSessionsFiltersType = {
  String: "string",
  MultiValueArray: "multi-value-array",
  SingleValueArray: "single-value-array",
  Number: "number",
  Date: "date",
  Object: "object",
  Boolean: "boolean",
  Evaluator: "evaluator",
} as const;
export type ListSessionsFiltersType = ClosedEnum<
  typeof ListSessionsFiltersType
>;

export type FiltersOptions = string | number;

export type FiltersOptionsMap = string | number;

export const ListSessionsHideOperators5 = {
  Is: "is",
  IsBefore: "is_before",
  IsOnOrBefore: "is_on_or_before",
  IsBetween: "is_between",
  IsRelativeToday: "is_relative_today",
  IsRelativeTime: "is_relative_time",
  IsEmpty: "is_empty",
  IsNotEmpty: "is_not_empty",
} as const;
export type ListSessionsHideOperators5 = ClosedEnum<
  typeof ListSessionsHideOperators5
>;

export const ListSessionsHideOperators4 = {
  Contains: "contains",
  DoesNotContain: "does_not_contain",
  IsEmpty: "is_empty",
  IsNotEmpty: "is_not_empty",
} as const;
export type ListSessionsHideOperators4 = ClosedEnum<
  typeof ListSessionsHideOperators4
>;

export const ListSessionsHideOperators3 = {
  Is: "is",
  IsNot: "is_not",
  IsEmpty: "is_empty",
  IsNotEmpty: "is_not_empty",
} as const;
export type ListSessionsHideOperators3 = ClosedEnum<
  typeof ListSessionsHideOperators3
>;

export const ListSessionsHideOperators2 = {
  Equals: "equals",
  IsNotEqual: "is_not_equal",
  IsGreaterThan: "is_greater_than",
  IsLessThan: "is_less_than",
  IsGreaterThanOrEqualTo: "is_greater_than_or_equal_to",
  IsLessThanOrEqualTo: "is_less_than_or_equal_to",
  IsBetween: "is_between",
  IsEmpty: "is_empty",
  IsNotEmpty: "is_not_empty",
} as const;
export type ListSessionsHideOperators2 = ClosedEnum<
  typeof ListSessionsHideOperators2
>;

export const ListSessionsHideOperators1 = {
  Is: "is",
  IsNot: "is_not",
  Contains: "contains",
  DoesNotContain: "does_not_contain",
  StartsWith: "starts_with",
  EndsWith: "ends_with",
  IsEmpty: "is_empty",
  IsNotEmpty: "is_not_empty",
} as const;
export type ListSessionsHideOperators1 = ClosedEnum<
  typeof ListSessionsHideOperators1
>;

export type FiltersHideOperators =
  | ListSessionsHideOperators1
  | ListSessionsHideOperators2
  | ListSessionsHideOperators3
  | ListSessionsHideOperators4
  | ListSessionsHideOperators5;

export type Filters2 = {
  operator: ListSessionsFiltersOperator;
  value: Array<any> | null;
  type: ListSessionsFiltersType;
  options: Array<string | number>;
  optionsMap?: { [k: string]: string | number } | null | undefined;
  imageUrlMap?: { [k: string]: string } | undefined;
  name: string;
  path: string;
  hideOperators?:
    | Array<
      | ListSessionsHideOperators1
      | ListSessionsHideOperators2
      | ListSessionsHideOperators3
      | ListSessionsHideOperators4
      | ListSessionsHideOperators5
    >
    | undefined;
};

export const FiltersOperator = {
  Is: "is",
  IsNot: "is_not",
  IsEmpty: "is_empty",
  IsNotEmpty: "is_not_empty",
} as const;
export type FiltersOperator = ClosedEnum<typeof FiltersOperator>;

export const FiltersType = {
  String: "string",
  MultiValueArray: "multi-value-array",
  SingleValueArray: "single-value-array",
  Number: "number",
  Date: "date",
  Object: "object",
  Boolean: "boolean",
  Evaluator: "evaluator",
} as const;
export type FiltersType = ClosedEnum<typeof FiltersType>;

export type Options = string | number;

export type OptionsMap = string | number;

export const HideOperators5 = {
  Is: "is",
  IsBefore: "is_before",
  IsOnOrBefore: "is_on_or_before",
  IsBetween: "is_between",
  IsRelativeToday: "is_relative_today",
  IsRelativeTime: "is_relative_time",
  IsEmpty: "is_empty",
  IsNotEmpty: "is_not_empty",
} as const;
export type HideOperators5 = ClosedEnum<typeof HideOperators5>;

export const HideOperators4 = {
  Contains: "contains",
  DoesNotContain: "does_not_contain",
  IsEmpty: "is_empty",
  IsNotEmpty: "is_not_empty",
} as const;
export type HideOperators4 = ClosedEnum<typeof HideOperators4>;

export const HideOperators3 = {
  Is: "is",
  IsNot: "is_not",
  IsEmpty: "is_empty",
  IsNotEmpty: "is_not_empty",
} as const;
export type HideOperators3 = ClosedEnum<typeof HideOperators3>;

export const HideOperators2 = {
  Equals: "equals",
  IsNotEqual: "is_not_equal",
  IsGreaterThan: "is_greater_than",
  IsLessThan: "is_less_than",
  IsGreaterThanOrEqualTo: "is_greater_than_or_equal_to",
  IsLessThanOrEqualTo: "is_less_than_or_equal_to",
  IsBetween: "is_between",
  IsEmpty: "is_empty",
  IsNotEmpty: "is_not_empty",
} as const;
export type HideOperators2 = ClosedEnum<typeof HideOperators2>;

export const HideOperators1 = {
  Is: "is",
  IsNot: "is_not",
  Contains: "contains",
  DoesNotContain: "does_not_contain",
  StartsWith: "starts_with",
  EndsWith: "ends_with",
  IsEmpty: "is_empty",
  IsNotEmpty: "is_not_empty",
} as const;
export type HideOperators1 = ClosedEnum<typeof HideOperators1>;

export type HideOperators =
  | HideOperators1
  | HideOperators2
  | HideOperators3
  | HideOperators4
  | HideOperators5;

export type Filters1 = {
  operator: FiltersOperator;
  value?: any | undefined;
  type: FiltersType;
  options: Array<string | number>;
  optionsMap?: { [k: string]: string | number } | null | undefined;
  imageUrlMap?: { [k: string]: string } | undefined;
  name: string;
  path: string;
  hideOperators?:
    | Array<
      | HideOperators1
      | HideOperators2
      | HideOperators3
      | HideOperators4
      | HideOperators5
    >
    | undefined;
};

export type Filters =
  | Filters3
  | Filters4
  | Filters5
  | Filters8
  | Filters6
  | Filters7
  | Filters1
  | Filters2;

export type Query = {
  search?: string | undefined;
  operator: Operator;
  filters?:
    | Array<
      | Filters3
      | Filters4
      | Filters5
      | Filters8
      | Filters6
      | Filters7
      | Filters1
      | Filters2
    >
    | undefined;
};

export const ListSessionsFiltersSessionsRequestRequestBody4Type = {
  StringArray: "string_array",
} as const;
export type ListSessionsFiltersSessionsRequestRequestBody4Type = ClosedEnum<
  typeof ListSessionsFiltersSessionsRequestRequestBody4Type
>;

export const ListSessionsFiltersSessionsRequestRequestBody4Operator = {
  In: "in",
} as const;
export type ListSessionsFiltersSessionsRequestRequestBody4Operator = ClosedEnum<
  typeof ListSessionsFiltersSessionsRequestRequestBody4Operator
>;

export type ListSessionsFilters4 = {
  type: ListSessionsFiltersSessionsRequestRequestBody4Type;
  operator: ListSessionsFiltersSessionsRequestRequestBody4Operator;
  values: Array<string>;
  path: string;
};

export const ListSessionsFiltersSessionsRequestRequestBody3Type = {
  String: "string",
} as const;
export type ListSessionsFiltersSessionsRequestRequestBody3Type = ClosedEnum<
  typeof ListSessionsFiltersSessionsRequestRequestBody3Type
>;

export const ListSessionsFiltersSessionsRequestRequestBody3Operator = {
  Contains: "contains",
  Equals: "equals",
} as const;
export type ListSessionsFiltersSessionsRequestRequestBody3Operator = ClosedEnum<
  typeof ListSessionsFiltersSessionsRequestRequestBody3Operator
>;

export type ListSessionsFilters3 = {
  type: ListSessionsFiltersSessionsRequestRequestBody3Type;
  operator: ListSessionsFiltersSessionsRequestRequestBody3Operator;
  value: string;
  path: string;
};

export const ListSessionsFiltersSessionsRequestRequestBody2Type = {
  Search: "search",
} as const;
export type ListSessionsFiltersSessionsRequestRequestBody2Type = ClosedEnum<
  typeof ListSessionsFiltersSessionsRequestRequestBody2Type
>;

export type ListSessionsFilters2 = {
  type: ListSessionsFiltersSessionsRequestRequestBody2Type;
  value: string;
  searchPaths: Array<string>;
};

export const ListSessionsFiltersSessionsRequestRequestBody1Type = {
  Id: "id",
} as const;
export type ListSessionsFiltersSessionsRequestRequestBody1Type = ClosedEnum<
  typeof ListSessionsFiltersSessionsRequestRequestBody1Type
>;

export type ListSessionsFilters1 = {
  type: ListSessionsFiltersSessionsRequestRequestBody1Type;
  id: string;
  path: string;
};

export type ListSessionsFilters =
  | ListSessionsFilters1
  | ListSessionsFilters2
  | ListSessionsFilters3
  | ListSessionsFilters4;

export type ListSessionsRequestBody = {
  pagination?: Pagination | undefined;
  sortingProps?: Array<SortingProps> | undefined;
  query?: Query | undefined;
  filters: Array<
    | ListSessionsFilters1
    | ListSessionsFilters2
    | ListSessionsFilters3
    | ListSessionsFilters4
  >;
  includedFields?: { [k: string]: string } | undefined;
};

export const ListSessionsObject = {
  List: "list",
} as const;
export type ListSessionsObject = ClosedEnum<typeof ListSessionsObject>;

export type ListSessionsBilling = {
  /**
   * Total cost of the session
   */
  inputCost: number;
  /**
   * Total cost of the session
   */
  outputCost: number;
  /**
   * Total usage of the session
   */
  totalCost: number;
};

export type ListSessionsUsage = {
  /**
   * Total input tokens of the session
   */
  promptTokens: number;
  /**
   * Total output tokens of the session
   */
  completionTokens: number;
  /**
   * Total tokens of the session
   */
  totalTokens: number;
};

export type ListSessionsData = {
  id: string;
  externalId: string;
  /**
   * Duration of the session in ms
   */
  duration: number;
  /**
   * List of contact ids
   */
  contactIds: Array<string>;
  billing: ListSessionsBilling;
  usage: ListSessionsUsage;
  /**
   * Total traces of the session
   */
  tracesCount: number;
  tags: Array<string>;
  /**
   * The workspace id
   */
  workspaceId: string;
  /**
   * The project id
   */
  projectId?: string | null | undefined;
  /**
   * The time when the session was created
   */
  startedAt?: Date | undefined;
  /**
   * The time when the session was updated
   */
  updatedAt?: Date | undefined;
};

/**
 * Sessions retrieved successfully.
 */
export type ListSessionsResponseBody = {
  object: ListSessionsObject;
  data: Array<ListSessionsData>;
  hasMore: boolean;
};

/** @internal */
export const Pagination$inboundSchema: z.ZodType<
  Pagination,
  z.ZodTypeDef,
  unknown
> = z.object({
  page: z.number().optional(),
  limit: z.number().default(50),
  lastId: z.nullable(z.string()).optional(),
  firstId: z.nullable(z.string()).optional(),
});

/** @internal */
export type Pagination$Outbound = {
  page?: number | undefined;
  limit: number;
  lastId?: string | null | undefined;
  firstId?: string | null | undefined;
};

/** @internal */
export const Pagination$outboundSchema: z.ZodType<
  Pagination$Outbound,
  z.ZodTypeDef,
  Pagination
> = z.object({
  page: z.number().optional(),
  limit: z.number().default(50),
  lastId: z.nullable(z.string()).optional(),
  firstId: z.nullable(z.string()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Pagination$ {
  /** @deprecated use `Pagination$inboundSchema` instead. */
  export const inboundSchema = Pagination$inboundSchema;
  /** @deprecated use `Pagination$outboundSchema` instead. */
  export const outboundSchema = Pagination$outboundSchema;
  /** @deprecated use `Pagination$Outbound` instead. */
  export type Outbound = Pagination$Outbound;
}

export function paginationToJSON(pagination: Pagination): string {
  return JSON.stringify(Pagination$outboundSchema.parse(pagination));
}

export function paginationFromJSON(
  jsonString: string,
): SafeParseResult<Pagination, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Pagination$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Pagination' from JSON`,
  );
}

/** @internal */
export const Direction$inboundSchema: z.ZodNativeEnum<typeof Direction> = z
  .nativeEnum(Direction);

/** @internal */
export const Direction$outboundSchema: z.ZodNativeEnum<typeof Direction> =
  Direction$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Direction$ {
  /** @deprecated use `Direction$inboundSchema` instead. */
  export const inboundSchema = Direction$inboundSchema;
  /** @deprecated use `Direction$outboundSchema` instead. */
  export const outboundSchema = Direction$outboundSchema;
}

/** @internal */
export const SortingProps$inboundSchema: z.ZodType<
  SortingProps,
  z.ZodTypeDef,
  unknown
> = z.object({
  key: z.string(),
  direction: Direction$inboundSchema.optional(),
});

/** @internal */
export type SortingProps$Outbound = {
  key: string;
  direction?: string | undefined;
};

/** @internal */
export const SortingProps$outboundSchema: z.ZodType<
  SortingProps$Outbound,
  z.ZodTypeDef,
  SortingProps
> = z.object({
  key: z.string(),
  direction: Direction$outboundSchema.optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SortingProps$ {
  /** @deprecated use `SortingProps$inboundSchema` instead. */
  export const inboundSchema = SortingProps$inboundSchema;
  /** @deprecated use `SortingProps$outboundSchema` instead. */
  export const outboundSchema = SortingProps$outboundSchema;
  /** @deprecated use `SortingProps$Outbound` instead. */
  export type Outbound = SortingProps$Outbound;
}

export function sortingPropsToJSON(sortingProps: SortingProps): string {
  return JSON.stringify(SortingProps$outboundSchema.parse(sortingProps));
}

export function sortingPropsFromJSON(
  jsonString: string,
): SafeParseResult<SortingProps, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => SortingProps$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SortingProps' from JSON`,
  );
}

/** @internal */
export const Operator$inboundSchema: z.ZodNativeEnum<typeof Operator> = z
  .nativeEnum(Operator);

/** @internal */
export const Operator$outboundSchema: z.ZodNativeEnum<typeof Operator> =
  Operator$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Operator$ {
  /** @deprecated use `Operator$inboundSchema` instead. */
  export const inboundSchema = Operator$inboundSchema;
  /** @deprecated use `Operator$outboundSchema` instead. */
  export const outboundSchema = Operator$outboundSchema;
}

/** @internal */
export const ListSessionsFiltersSessionsRequestRequestBodyQuery8Operator$inboundSchema:
  z.ZodNativeEnum<
    typeof ListSessionsFiltersSessionsRequestRequestBodyQuery8Operator
  > = z.nativeEnum(ListSessionsFiltersSessionsRequestRequestBodyQuery8Operator);

/** @internal */
export const ListSessionsFiltersSessionsRequestRequestBodyQuery8Operator$outboundSchema:
  z.ZodNativeEnum<
    typeof ListSessionsFiltersSessionsRequestRequestBodyQuery8Operator
  > = ListSessionsFiltersSessionsRequestRequestBodyQuery8Operator$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListSessionsFiltersSessionsRequestRequestBodyQuery8Operator$ {
  /** @deprecated use `ListSessionsFiltersSessionsRequestRequestBodyQuery8Operator$inboundSchema` instead. */
  export const inboundSchema =
    ListSessionsFiltersSessionsRequestRequestBodyQuery8Operator$inboundSchema;
  /** @deprecated use `ListSessionsFiltersSessionsRequestRequestBodyQuery8Operator$outboundSchema` instead. */
  export const outboundSchema =
    ListSessionsFiltersSessionsRequestRequestBodyQuery8Operator$outboundSchema;
}

/** @internal */
export const ListSessionsFiltersSessionsRequestRequestBodyQuery8Type$inboundSchema:
  z.ZodNativeEnum<
    typeof ListSessionsFiltersSessionsRequestRequestBodyQuery8Type
  > = z.nativeEnum(ListSessionsFiltersSessionsRequestRequestBodyQuery8Type);

/** @internal */
export const ListSessionsFiltersSessionsRequestRequestBodyQuery8Type$outboundSchema:
  z.ZodNativeEnum<
    typeof ListSessionsFiltersSessionsRequestRequestBodyQuery8Type
  > = ListSessionsFiltersSessionsRequestRequestBodyQuery8Type$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListSessionsFiltersSessionsRequestRequestBodyQuery8Type$ {
  /** @deprecated use `ListSessionsFiltersSessionsRequestRequestBodyQuery8Type$inboundSchema` instead. */
  export const inboundSchema =
    ListSessionsFiltersSessionsRequestRequestBodyQuery8Type$inboundSchema;
  /** @deprecated use `ListSessionsFiltersSessionsRequestRequestBodyQuery8Type$outboundSchema` instead. */
  export const outboundSchema =
    ListSessionsFiltersSessionsRequestRequestBodyQuery8Type$outboundSchema;
}

/** @internal */
export const ListSessionsHideOperatorsSessionsRequestRequestBodyQueryFilters85$inboundSchema:
  z.ZodNativeEnum<
    typeof ListSessionsHideOperatorsSessionsRequestRequestBodyQueryFilters85
  > = z.nativeEnum(
    ListSessionsHideOperatorsSessionsRequestRequestBodyQueryFilters85,
  );

/** @internal */
export const ListSessionsHideOperatorsSessionsRequestRequestBodyQueryFilters85$outboundSchema:
  z.ZodNativeEnum<
    typeof ListSessionsHideOperatorsSessionsRequestRequestBodyQueryFilters85
  > =
    ListSessionsHideOperatorsSessionsRequestRequestBodyQueryFilters85$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListSessionsHideOperatorsSessionsRequestRequestBodyQueryFilters85$ {
  /** @deprecated use `ListSessionsHideOperatorsSessionsRequestRequestBodyQueryFilters85$inboundSchema` instead. */
  export const inboundSchema =
    ListSessionsHideOperatorsSessionsRequestRequestBodyQueryFilters85$inboundSchema;
  /** @deprecated use `ListSessionsHideOperatorsSessionsRequestRequestBodyQueryFilters85$outboundSchema` instead. */
  export const outboundSchema =
    ListSessionsHideOperatorsSessionsRequestRequestBodyQueryFilters85$outboundSchema;
}

/** @internal */
export const ListSessionsHideOperatorsSessionsRequestRequestBodyQueryFilters84$inboundSchema:
  z.ZodNativeEnum<
    typeof ListSessionsHideOperatorsSessionsRequestRequestBodyQueryFilters84
  > = z.nativeEnum(
    ListSessionsHideOperatorsSessionsRequestRequestBodyQueryFilters84,
  );

/** @internal */
export const ListSessionsHideOperatorsSessionsRequestRequestBodyQueryFilters84$outboundSchema:
  z.ZodNativeEnum<
    typeof ListSessionsHideOperatorsSessionsRequestRequestBodyQueryFilters84
  > =
    ListSessionsHideOperatorsSessionsRequestRequestBodyQueryFilters84$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListSessionsHideOperatorsSessionsRequestRequestBodyQueryFilters84$ {
  /** @deprecated use `ListSessionsHideOperatorsSessionsRequestRequestBodyQueryFilters84$inboundSchema` instead. */
  export const inboundSchema =
    ListSessionsHideOperatorsSessionsRequestRequestBodyQueryFilters84$inboundSchema;
  /** @deprecated use `ListSessionsHideOperatorsSessionsRequestRequestBodyQueryFilters84$outboundSchema` instead. */
  export const outboundSchema =
    ListSessionsHideOperatorsSessionsRequestRequestBodyQueryFilters84$outboundSchema;
}

/** @internal */
export const ListSessionsHideOperatorsSessionsRequestRequestBodyQueryFilters83$inboundSchema:
  z.ZodNativeEnum<
    typeof ListSessionsHideOperatorsSessionsRequestRequestBodyQueryFilters83
  > = z.nativeEnum(
    ListSessionsHideOperatorsSessionsRequestRequestBodyQueryFilters83,
  );

/** @internal */
export const ListSessionsHideOperatorsSessionsRequestRequestBodyQueryFilters83$outboundSchema:
  z.ZodNativeEnum<
    typeof ListSessionsHideOperatorsSessionsRequestRequestBodyQueryFilters83
  > =
    ListSessionsHideOperatorsSessionsRequestRequestBodyQueryFilters83$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListSessionsHideOperatorsSessionsRequestRequestBodyQueryFilters83$ {
  /** @deprecated use `ListSessionsHideOperatorsSessionsRequestRequestBodyQueryFilters83$inboundSchema` instead. */
  export const inboundSchema =
    ListSessionsHideOperatorsSessionsRequestRequestBodyQueryFilters83$inboundSchema;
  /** @deprecated use `ListSessionsHideOperatorsSessionsRequestRequestBodyQueryFilters83$outboundSchema` instead. */
  export const outboundSchema =
    ListSessionsHideOperatorsSessionsRequestRequestBodyQueryFilters83$outboundSchema;
}

/** @internal */
export const ListSessionsHideOperatorsSessionsRequestRequestBodyQueryFilters82$inboundSchema:
  z.ZodNativeEnum<
    typeof ListSessionsHideOperatorsSessionsRequestRequestBodyQueryFilters82
  > = z.nativeEnum(
    ListSessionsHideOperatorsSessionsRequestRequestBodyQueryFilters82,
  );

/** @internal */
export const ListSessionsHideOperatorsSessionsRequestRequestBodyQueryFilters82$outboundSchema:
  z.ZodNativeEnum<
    typeof ListSessionsHideOperatorsSessionsRequestRequestBodyQueryFilters82
  > =
    ListSessionsHideOperatorsSessionsRequestRequestBodyQueryFilters82$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListSessionsHideOperatorsSessionsRequestRequestBodyQueryFilters82$ {
  /** @deprecated use `ListSessionsHideOperatorsSessionsRequestRequestBodyQueryFilters82$inboundSchema` instead. */
  export const inboundSchema =
    ListSessionsHideOperatorsSessionsRequestRequestBodyQueryFilters82$inboundSchema;
  /** @deprecated use `ListSessionsHideOperatorsSessionsRequestRequestBodyQueryFilters82$outboundSchema` instead. */
  export const outboundSchema =
    ListSessionsHideOperatorsSessionsRequestRequestBodyQueryFilters82$outboundSchema;
}

/** @internal */
export const ListSessionsHideOperatorsSessionsRequestRequestBodyQueryFilters81$inboundSchema:
  z.ZodNativeEnum<
    typeof ListSessionsHideOperatorsSessionsRequestRequestBodyQueryFilters81
  > = z.nativeEnum(
    ListSessionsHideOperatorsSessionsRequestRequestBodyQueryFilters81,
  );

/** @internal */
export const ListSessionsHideOperatorsSessionsRequestRequestBodyQueryFilters81$outboundSchema:
  z.ZodNativeEnum<
    typeof ListSessionsHideOperatorsSessionsRequestRequestBodyQueryFilters81
  > =
    ListSessionsHideOperatorsSessionsRequestRequestBodyQueryFilters81$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListSessionsHideOperatorsSessionsRequestRequestBodyQueryFilters81$ {
  /** @deprecated use `ListSessionsHideOperatorsSessionsRequestRequestBodyQueryFilters81$inboundSchema` instead. */
  export const inboundSchema =
    ListSessionsHideOperatorsSessionsRequestRequestBodyQueryFilters81$inboundSchema;
  /** @deprecated use `ListSessionsHideOperatorsSessionsRequestRequestBodyQueryFilters81$outboundSchema` instead. */
  export const outboundSchema =
    ListSessionsHideOperatorsSessionsRequestRequestBodyQueryFilters81$outboundSchema;
}

/** @internal */
export const ListSessionsFiltersSessionsRequestRequestBodyQuery8HideOperators$inboundSchema:
  z.ZodType<
    ListSessionsFiltersSessionsRequestRequestBodyQuery8HideOperators,
    z.ZodTypeDef,
    unknown
  > = z.union([
    ListSessionsHideOperatorsSessionsRequestRequestBodyQueryFilters81$inboundSchema,
    ListSessionsHideOperatorsSessionsRequestRequestBodyQueryFilters82$inboundSchema,
    ListSessionsHideOperatorsSessionsRequestRequestBodyQueryFilters83$inboundSchema,
    ListSessionsHideOperatorsSessionsRequestRequestBodyQueryFilters84$inboundSchema,
    ListSessionsHideOperatorsSessionsRequestRequestBodyQueryFilters85$inboundSchema,
  ]);

/** @internal */
export type ListSessionsFiltersSessionsRequestRequestBodyQuery8HideOperators$Outbound =
  | string
  | string
  | string
  | string
  | string;

/** @internal */
export const ListSessionsFiltersSessionsRequestRequestBodyQuery8HideOperators$outboundSchema:
  z.ZodType<
    ListSessionsFiltersSessionsRequestRequestBodyQuery8HideOperators$Outbound,
    z.ZodTypeDef,
    ListSessionsFiltersSessionsRequestRequestBodyQuery8HideOperators
  > = z.union([
    ListSessionsHideOperatorsSessionsRequestRequestBodyQueryFilters81$outboundSchema,
    ListSessionsHideOperatorsSessionsRequestRequestBodyQueryFilters82$outboundSchema,
    ListSessionsHideOperatorsSessionsRequestRequestBodyQueryFilters83$outboundSchema,
    ListSessionsHideOperatorsSessionsRequestRequestBodyQueryFilters84$outboundSchema,
    ListSessionsHideOperatorsSessionsRequestRequestBodyQueryFilters85$outboundSchema,
  ]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListSessionsFiltersSessionsRequestRequestBodyQuery8HideOperators$ {
  /** @deprecated use `ListSessionsFiltersSessionsRequestRequestBodyQuery8HideOperators$inboundSchema` instead. */
  export const inboundSchema =
    ListSessionsFiltersSessionsRequestRequestBodyQuery8HideOperators$inboundSchema;
  /** @deprecated use `ListSessionsFiltersSessionsRequestRequestBodyQuery8HideOperators$outboundSchema` instead. */
  export const outboundSchema =
    ListSessionsFiltersSessionsRequestRequestBodyQuery8HideOperators$outboundSchema;
  /** @deprecated use `ListSessionsFiltersSessionsRequestRequestBodyQuery8HideOperators$Outbound` instead. */
  export type Outbound =
    ListSessionsFiltersSessionsRequestRequestBodyQuery8HideOperators$Outbound;
}

export function listSessionsFiltersSessionsRequestRequestBodyQuery8HideOperatorsToJSON(
  listSessionsFiltersSessionsRequestRequestBodyQuery8HideOperators:
    ListSessionsFiltersSessionsRequestRequestBodyQuery8HideOperators,
): string {
  return JSON.stringify(
    ListSessionsFiltersSessionsRequestRequestBodyQuery8HideOperators$outboundSchema
      .parse(listSessionsFiltersSessionsRequestRequestBodyQuery8HideOperators),
  );
}

export function listSessionsFiltersSessionsRequestRequestBodyQuery8HideOperatorsFromJSON(
  jsonString: string,
): SafeParseResult<
  ListSessionsFiltersSessionsRequestRequestBodyQuery8HideOperators,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      ListSessionsFiltersSessionsRequestRequestBodyQuery8HideOperators$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'ListSessionsFiltersSessionsRequestRequestBodyQuery8HideOperators' from JSON`,
  );
}

/** @internal */
export const Filters8$inboundSchema: z.ZodType<
  Filters8,
  z.ZodTypeDef,
  unknown
> = z.object({
  operator:
    ListSessionsFiltersSessionsRequestRequestBodyQuery8Operator$inboundSchema,
  value: z.boolean().default(false),
  type: ListSessionsFiltersSessionsRequestRequestBodyQuery8Type$inboundSchema,
  name: z.string(),
  path: z.string(),
  hideOperators: z.array(
    z.union([
      ListSessionsHideOperatorsSessionsRequestRequestBodyQueryFilters81$inboundSchema,
      ListSessionsHideOperatorsSessionsRequestRequestBodyQueryFilters82$inboundSchema,
      ListSessionsHideOperatorsSessionsRequestRequestBodyQueryFilters83$inboundSchema,
      ListSessionsHideOperatorsSessionsRequestRequestBodyQueryFilters84$inboundSchema,
      ListSessionsHideOperatorsSessionsRequestRequestBodyQueryFilters85$inboundSchema,
    ]),
  ).optional(),
});

/** @internal */
export type Filters8$Outbound = {
  operator: string;
  value: boolean;
  type: string;
  name: string;
  path: string;
  hideOperators?: Array<string | string | string | string | string> | undefined;
};

/** @internal */
export const Filters8$outboundSchema: z.ZodType<
  Filters8$Outbound,
  z.ZodTypeDef,
  Filters8
> = z.object({
  operator:
    ListSessionsFiltersSessionsRequestRequestBodyQuery8Operator$outboundSchema,
  value: z.boolean().default(false),
  type: ListSessionsFiltersSessionsRequestRequestBodyQuery8Type$outboundSchema,
  name: z.string(),
  path: z.string(),
  hideOperators: z.array(
    z.union([
      ListSessionsHideOperatorsSessionsRequestRequestBodyQueryFilters81$outboundSchema,
      ListSessionsHideOperatorsSessionsRequestRequestBodyQueryFilters82$outboundSchema,
      ListSessionsHideOperatorsSessionsRequestRequestBodyQueryFilters83$outboundSchema,
      ListSessionsHideOperatorsSessionsRequestRequestBodyQueryFilters84$outboundSchema,
      ListSessionsHideOperatorsSessionsRequestRequestBodyQueryFilters85$outboundSchema,
    ]),
  ).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Filters8$ {
  /** @deprecated use `Filters8$inboundSchema` instead. */
  export const inboundSchema = Filters8$inboundSchema;
  /** @deprecated use `Filters8$outboundSchema` instead. */
  export const outboundSchema = Filters8$outboundSchema;
  /** @deprecated use `Filters8$Outbound` instead. */
  export type Outbound = Filters8$Outbound;
}

export function filters8ToJSON(filters8: Filters8): string {
  return JSON.stringify(Filters8$outboundSchema.parse(filters8));
}

export function filters8FromJSON(
  jsonString: string,
): SafeParseResult<Filters8, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Filters8$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Filters8' from JSON`,
  );
}

/** @internal */
export const ListSessionsOperator2$inboundSchema: z.ZodNativeEnum<
  typeof ListSessionsOperator2
> = z.nativeEnum(ListSessionsOperator2);

/** @internal */
export const ListSessionsOperator2$outboundSchema: z.ZodNativeEnum<
  typeof ListSessionsOperator2
> = ListSessionsOperator2$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListSessionsOperator2$ {
  /** @deprecated use `ListSessionsOperator2$inboundSchema` instead. */
  export const inboundSchema = ListSessionsOperator2$inboundSchema;
  /** @deprecated use `ListSessionsOperator2$outboundSchema` instead. */
  export const outboundSchema = ListSessionsOperator2$outboundSchema;
}

/** @internal */
export const ListSessionsOperator1$inboundSchema: z.ZodNativeEnum<
  typeof ListSessionsOperator1
> = z.nativeEnum(ListSessionsOperator1);

/** @internal */
export const ListSessionsOperator1$outboundSchema: z.ZodNativeEnum<
  typeof ListSessionsOperator1
> = ListSessionsOperator1$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListSessionsOperator1$ {
  /** @deprecated use `ListSessionsOperator1$inboundSchema` instead. */
  export const inboundSchema = ListSessionsOperator1$inboundSchema;
  /** @deprecated use `ListSessionsOperator1$outboundSchema` instead. */
  export const outboundSchema = ListSessionsOperator1$outboundSchema;
}

/** @internal */
export const ListSessionsFiltersSessionsRequestRequestBodyQuery7Operator$inboundSchema:
  z.ZodType<
    ListSessionsFiltersSessionsRequestRequestBodyQuery7Operator,
    z.ZodTypeDef,
    unknown
  > = z.union([
    ListSessionsOperator1$inboundSchema,
    ListSessionsOperator2$inboundSchema,
  ]);

/** @internal */
export type ListSessionsFiltersSessionsRequestRequestBodyQuery7Operator$Outbound =
  | string
  | string;

/** @internal */
export const ListSessionsFiltersSessionsRequestRequestBodyQuery7Operator$outboundSchema:
  z.ZodType<
    ListSessionsFiltersSessionsRequestRequestBodyQuery7Operator$Outbound,
    z.ZodTypeDef,
    ListSessionsFiltersSessionsRequestRequestBodyQuery7Operator
  > = z.union([
    ListSessionsOperator1$outboundSchema,
    ListSessionsOperator2$outboundSchema,
  ]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListSessionsFiltersSessionsRequestRequestBodyQuery7Operator$ {
  /** @deprecated use `ListSessionsFiltersSessionsRequestRequestBodyQuery7Operator$inboundSchema` instead. */
  export const inboundSchema =
    ListSessionsFiltersSessionsRequestRequestBodyQuery7Operator$inboundSchema;
  /** @deprecated use `ListSessionsFiltersSessionsRequestRequestBodyQuery7Operator$outboundSchema` instead. */
  export const outboundSchema =
    ListSessionsFiltersSessionsRequestRequestBodyQuery7Operator$outboundSchema;
  /** @deprecated use `ListSessionsFiltersSessionsRequestRequestBodyQuery7Operator$Outbound` instead. */
  export type Outbound =
    ListSessionsFiltersSessionsRequestRequestBodyQuery7Operator$Outbound;
}

export function listSessionsFiltersSessionsRequestRequestBodyQuery7OperatorToJSON(
  listSessionsFiltersSessionsRequestRequestBodyQuery7Operator:
    ListSessionsFiltersSessionsRequestRequestBodyQuery7Operator,
): string {
  return JSON.stringify(
    ListSessionsFiltersSessionsRequestRequestBodyQuery7Operator$outboundSchema
      .parse(listSessionsFiltersSessionsRequestRequestBodyQuery7Operator),
  );
}

export function listSessionsFiltersSessionsRequestRequestBodyQuery7OperatorFromJSON(
  jsonString: string,
): SafeParseResult<
  ListSessionsFiltersSessionsRequestRequestBodyQuery7Operator,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      ListSessionsFiltersSessionsRequestRequestBodyQuery7Operator$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'ListSessionsFiltersSessionsRequestRequestBodyQuery7Operator' from JSON`,
  );
}

/** @internal */
export const ListSessionsFiltersSessionsRequestRequestBodyQuery7Type$inboundSchema:
  z.ZodNativeEnum<
    typeof ListSessionsFiltersSessionsRequestRequestBodyQuery7Type
  > = z.nativeEnum(ListSessionsFiltersSessionsRequestRequestBodyQuery7Type);

/** @internal */
export const ListSessionsFiltersSessionsRequestRequestBodyQuery7Type$outboundSchema:
  z.ZodNativeEnum<
    typeof ListSessionsFiltersSessionsRequestRequestBodyQuery7Type
  > = ListSessionsFiltersSessionsRequestRequestBodyQuery7Type$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListSessionsFiltersSessionsRequestRequestBodyQuery7Type$ {
  /** @deprecated use `ListSessionsFiltersSessionsRequestRequestBodyQuery7Type$inboundSchema` instead. */
  export const inboundSchema =
    ListSessionsFiltersSessionsRequestRequestBodyQuery7Type$inboundSchema;
  /** @deprecated use `ListSessionsFiltersSessionsRequestRequestBodyQuery7Type$outboundSchema` instead. */
  export const outboundSchema =
    ListSessionsFiltersSessionsRequestRequestBodyQuery7Type$outboundSchema;
}

/** @internal */
export const ListSessionsFiltersSessionsRequestRequestBodyQuery7OptionsType$inboundSchema:
  z.ZodNativeEnum<
    typeof ListSessionsFiltersSessionsRequestRequestBodyQuery7OptionsType
  > = z.nativeEnum(
    ListSessionsFiltersSessionsRequestRequestBodyQuery7OptionsType,
  );

/** @internal */
export const ListSessionsFiltersSessionsRequestRequestBodyQuery7OptionsType$outboundSchema:
  z.ZodNativeEnum<
    typeof ListSessionsFiltersSessionsRequestRequestBodyQuery7OptionsType
  > =
    ListSessionsFiltersSessionsRequestRequestBodyQuery7OptionsType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListSessionsFiltersSessionsRequestRequestBodyQuery7OptionsType$ {
  /** @deprecated use `ListSessionsFiltersSessionsRequestRequestBodyQuery7OptionsType$inboundSchema` instead. */
  export const inboundSchema =
    ListSessionsFiltersSessionsRequestRequestBodyQuery7OptionsType$inboundSchema;
  /** @deprecated use `ListSessionsFiltersSessionsRequestRequestBodyQuery7OptionsType$outboundSchema` instead. */
  export const outboundSchema =
    ListSessionsFiltersSessionsRequestRequestBodyQuery7OptionsType$outboundSchema;
}

/** @internal */
export const ListSessionsHideOperatorsSessionsRequestRequestBodyQueryFilters75$inboundSchema:
  z.ZodNativeEnum<
    typeof ListSessionsHideOperatorsSessionsRequestRequestBodyQueryFilters75
  > = z.nativeEnum(
    ListSessionsHideOperatorsSessionsRequestRequestBodyQueryFilters75,
  );

/** @internal */
export const ListSessionsHideOperatorsSessionsRequestRequestBodyQueryFilters75$outboundSchema:
  z.ZodNativeEnum<
    typeof ListSessionsHideOperatorsSessionsRequestRequestBodyQueryFilters75
  > =
    ListSessionsHideOperatorsSessionsRequestRequestBodyQueryFilters75$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListSessionsHideOperatorsSessionsRequestRequestBodyQueryFilters75$ {
  /** @deprecated use `ListSessionsHideOperatorsSessionsRequestRequestBodyQueryFilters75$inboundSchema` instead. */
  export const inboundSchema =
    ListSessionsHideOperatorsSessionsRequestRequestBodyQueryFilters75$inboundSchema;
  /** @deprecated use `ListSessionsHideOperatorsSessionsRequestRequestBodyQueryFilters75$outboundSchema` instead. */
  export const outboundSchema =
    ListSessionsHideOperatorsSessionsRequestRequestBodyQueryFilters75$outboundSchema;
}

/** @internal */
export const ListSessionsHideOperatorsSessionsRequestRequestBodyQueryFilters74$inboundSchema:
  z.ZodNativeEnum<
    typeof ListSessionsHideOperatorsSessionsRequestRequestBodyQueryFilters74
  > = z.nativeEnum(
    ListSessionsHideOperatorsSessionsRequestRequestBodyQueryFilters74,
  );

/** @internal */
export const ListSessionsHideOperatorsSessionsRequestRequestBodyQueryFilters74$outboundSchema:
  z.ZodNativeEnum<
    typeof ListSessionsHideOperatorsSessionsRequestRequestBodyQueryFilters74
  > =
    ListSessionsHideOperatorsSessionsRequestRequestBodyQueryFilters74$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListSessionsHideOperatorsSessionsRequestRequestBodyQueryFilters74$ {
  /** @deprecated use `ListSessionsHideOperatorsSessionsRequestRequestBodyQueryFilters74$inboundSchema` instead. */
  export const inboundSchema =
    ListSessionsHideOperatorsSessionsRequestRequestBodyQueryFilters74$inboundSchema;
  /** @deprecated use `ListSessionsHideOperatorsSessionsRequestRequestBodyQueryFilters74$outboundSchema` instead. */
  export const outboundSchema =
    ListSessionsHideOperatorsSessionsRequestRequestBodyQueryFilters74$outboundSchema;
}

/** @internal */
export const ListSessionsHideOperatorsSessionsRequestRequestBodyQueryFilters73$inboundSchema:
  z.ZodNativeEnum<
    typeof ListSessionsHideOperatorsSessionsRequestRequestBodyQueryFilters73
  > = z.nativeEnum(
    ListSessionsHideOperatorsSessionsRequestRequestBodyQueryFilters73,
  );

/** @internal */
export const ListSessionsHideOperatorsSessionsRequestRequestBodyQueryFilters73$outboundSchema:
  z.ZodNativeEnum<
    typeof ListSessionsHideOperatorsSessionsRequestRequestBodyQueryFilters73
  > =
    ListSessionsHideOperatorsSessionsRequestRequestBodyQueryFilters73$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListSessionsHideOperatorsSessionsRequestRequestBodyQueryFilters73$ {
  /** @deprecated use `ListSessionsHideOperatorsSessionsRequestRequestBodyQueryFilters73$inboundSchema` instead. */
  export const inboundSchema =
    ListSessionsHideOperatorsSessionsRequestRequestBodyQueryFilters73$inboundSchema;
  /** @deprecated use `ListSessionsHideOperatorsSessionsRequestRequestBodyQueryFilters73$outboundSchema` instead. */
  export const outboundSchema =
    ListSessionsHideOperatorsSessionsRequestRequestBodyQueryFilters73$outboundSchema;
}

/** @internal */
export const ListSessionsHideOperatorsSessionsRequestRequestBodyQueryFilters72$inboundSchema:
  z.ZodNativeEnum<
    typeof ListSessionsHideOperatorsSessionsRequestRequestBodyQueryFilters72
  > = z.nativeEnum(
    ListSessionsHideOperatorsSessionsRequestRequestBodyQueryFilters72,
  );

/** @internal */
export const ListSessionsHideOperatorsSessionsRequestRequestBodyQueryFilters72$outboundSchema:
  z.ZodNativeEnum<
    typeof ListSessionsHideOperatorsSessionsRequestRequestBodyQueryFilters72
  > =
    ListSessionsHideOperatorsSessionsRequestRequestBodyQueryFilters72$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListSessionsHideOperatorsSessionsRequestRequestBodyQueryFilters72$ {
  /** @deprecated use `ListSessionsHideOperatorsSessionsRequestRequestBodyQueryFilters72$inboundSchema` instead. */
  export const inboundSchema =
    ListSessionsHideOperatorsSessionsRequestRequestBodyQueryFilters72$inboundSchema;
  /** @deprecated use `ListSessionsHideOperatorsSessionsRequestRequestBodyQueryFilters72$outboundSchema` instead. */
  export const outboundSchema =
    ListSessionsHideOperatorsSessionsRequestRequestBodyQueryFilters72$outboundSchema;
}

/** @internal */
export const ListSessionsHideOperatorsSessionsRequestRequestBodyQueryFilters71$inboundSchema:
  z.ZodNativeEnum<
    typeof ListSessionsHideOperatorsSessionsRequestRequestBodyQueryFilters71
  > = z.nativeEnum(
    ListSessionsHideOperatorsSessionsRequestRequestBodyQueryFilters71,
  );

/** @internal */
export const ListSessionsHideOperatorsSessionsRequestRequestBodyQueryFilters71$outboundSchema:
  z.ZodNativeEnum<
    typeof ListSessionsHideOperatorsSessionsRequestRequestBodyQueryFilters71
  > =
    ListSessionsHideOperatorsSessionsRequestRequestBodyQueryFilters71$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListSessionsHideOperatorsSessionsRequestRequestBodyQueryFilters71$ {
  /** @deprecated use `ListSessionsHideOperatorsSessionsRequestRequestBodyQueryFilters71$inboundSchema` instead. */
  export const inboundSchema =
    ListSessionsHideOperatorsSessionsRequestRequestBodyQueryFilters71$inboundSchema;
  /** @deprecated use `ListSessionsHideOperatorsSessionsRequestRequestBodyQueryFilters71$outboundSchema` instead. */
  export const outboundSchema =
    ListSessionsHideOperatorsSessionsRequestRequestBodyQueryFilters71$outboundSchema;
}

/** @internal */
export const ListSessionsFiltersSessionsRequestRequestBodyQuery7HideOperators$inboundSchema:
  z.ZodType<
    ListSessionsFiltersSessionsRequestRequestBodyQuery7HideOperators,
    z.ZodTypeDef,
    unknown
  > = z.union([
    ListSessionsHideOperatorsSessionsRequestRequestBodyQueryFilters71$inboundSchema,
    ListSessionsHideOperatorsSessionsRequestRequestBodyQueryFilters72$inboundSchema,
    ListSessionsHideOperatorsSessionsRequestRequestBodyQueryFilters73$inboundSchema,
    ListSessionsHideOperatorsSessionsRequestRequestBodyQueryFilters74$inboundSchema,
    ListSessionsHideOperatorsSessionsRequestRequestBodyQueryFilters75$inboundSchema,
  ]);

/** @internal */
export type ListSessionsFiltersSessionsRequestRequestBodyQuery7HideOperators$Outbound =
  | string
  | string
  | string
  | string
  | string;

/** @internal */
export const ListSessionsFiltersSessionsRequestRequestBodyQuery7HideOperators$outboundSchema:
  z.ZodType<
    ListSessionsFiltersSessionsRequestRequestBodyQuery7HideOperators$Outbound,
    z.ZodTypeDef,
    ListSessionsFiltersSessionsRequestRequestBodyQuery7HideOperators
  > = z.union([
    ListSessionsHideOperatorsSessionsRequestRequestBodyQueryFilters71$outboundSchema,
    ListSessionsHideOperatorsSessionsRequestRequestBodyQueryFilters72$outboundSchema,
    ListSessionsHideOperatorsSessionsRequestRequestBodyQueryFilters73$outboundSchema,
    ListSessionsHideOperatorsSessionsRequestRequestBodyQueryFilters74$outboundSchema,
    ListSessionsHideOperatorsSessionsRequestRequestBodyQueryFilters75$outboundSchema,
  ]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListSessionsFiltersSessionsRequestRequestBodyQuery7HideOperators$ {
  /** @deprecated use `ListSessionsFiltersSessionsRequestRequestBodyQuery7HideOperators$inboundSchema` instead. */
  export const inboundSchema =
    ListSessionsFiltersSessionsRequestRequestBodyQuery7HideOperators$inboundSchema;
  /** @deprecated use `ListSessionsFiltersSessionsRequestRequestBodyQuery7HideOperators$outboundSchema` instead. */
  export const outboundSchema =
    ListSessionsFiltersSessionsRequestRequestBodyQuery7HideOperators$outboundSchema;
  /** @deprecated use `ListSessionsFiltersSessionsRequestRequestBodyQuery7HideOperators$Outbound` instead. */
  export type Outbound =
    ListSessionsFiltersSessionsRequestRequestBodyQuery7HideOperators$Outbound;
}

export function listSessionsFiltersSessionsRequestRequestBodyQuery7HideOperatorsToJSON(
  listSessionsFiltersSessionsRequestRequestBodyQuery7HideOperators:
    ListSessionsFiltersSessionsRequestRequestBodyQuery7HideOperators,
): string {
  return JSON.stringify(
    ListSessionsFiltersSessionsRequestRequestBodyQuery7HideOperators$outboundSchema
      .parse(listSessionsFiltersSessionsRequestRequestBodyQuery7HideOperators),
  );
}

export function listSessionsFiltersSessionsRequestRequestBodyQuery7HideOperatorsFromJSON(
  jsonString: string,
): SafeParseResult<
  ListSessionsFiltersSessionsRequestRequestBodyQuery7HideOperators,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      ListSessionsFiltersSessionsRequestRequestBodyQuery7HideOperators$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'ListSessionsFiltersSessionsRequestRequestBodyQuery7HideOperators' from JSON`,
  );
}

/** @internal */
export const EvaluatorType$inboundSchema: z.ZodNativeEnum<
  typeof EvaluatorType
> = z.nativeEnum(EvaluatorType);

/** @internal */
export const EvaluatorType$outboundSchema: z.ZodNativeEnum<
  typeof EvaluatorType
> = EvaluatorType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EvaluatorType$ {
  /** @deprecated use `EvaluatorType$inboundSchema` instead. */
  export const inboundSchema = EvaluatorType$inboundSchema;
  /** @deprecated use `EvaluatorType$outboundSchema` instead. */
  export const outboundSchema = EvaluatorType$outboundSchema;
}

/** @internal */
export const EvaluatorOutputType$inboundSchema: z.ZodNativeEnum<
  typeof EvaluatorOutputType
> = z.nativeEnum(EvaluatorOutputType);

/** @internal */
export const EvaluatorOutputType$outboundSchema: z.ZodNativeEnum<
  typeof EvaluatorOutputType
> = EvaluatorOutputType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EvaluatorOutputType$ {
  /** @deprecated use `EvaluatorOutputType$inboundSchema` instead. */
  export const inboundSchema = EvaluatorOutputType$inboundSchema;
  /** @deprecated use `EvaluatorOutputType$outboundSchema` instead. */
  export const outboundSchema = EvaluatorOutputType$outboundSchema;
}

/** @internal */
export const ListSessionsFiltersSessionsOptions$inboundSchema: z.ZodType<
  ListSessionsFiltersSessionsOptions,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.string(),
  path: z.string(),
  type:
    ListSessionsFiltersSessionsRequestRequestBodyQuery7OptionsType$inboundSchema,
  hideOperators: z.array(
    z.union([
      ListSessionsHideOperatorsSessionsRequestRequestBodyQueryFilters71$inboundSchema,
      ListSessionsHideOperatorsSessionsRequestRequestBodyQueryFilters72$inboundSchema,
      ListSessionsHideOperatorsSessionsRequestRequestBodyQueryFilters73$inboundSchema,
      ListSessionsHideOperatorsSessionsRequestRequestBodyQueryFilters74$inboundSchema,
      ListSessionsHideOperatorsSessionsRequestRequestBodyQueryFilters75$inboundSchema,
    ]),
  ).optional(),
  id: z.string(),
  evaluatorId: z.string(),
  evaluatorType: EvaluatorType$inboundSchema,
  evaluatorOutputType: EvaluatorOutputType$inboundSchema,
});

/** @internal */
export type ListSessionsFiltersSessionsOptions$Outbound = {
  name: string;
  path: string;
  type: string;
  hideOperators?: Array<string | string | string | string | string> | undefined;
  id: string;
  evaluatorId: string;
  evaluatorType: string;
  evaluatorOutputType: string;
};

/** @internal */
export const ListSessionsFiltersSessionsOptions$outboundSchema: z.ZodType<
  ListSessionsFiltersSessionsOptions$Outbound,
  z.ZodTypeDef,
  ListSessionsFiltersSessionsOptions
> = z.object({
  name: z.string(),
  path: z.string(),
  type:
    ListSessionsFiltersSessionsRequestRequestBodyQuery7OptionsType$outboundSchema,
  hideOperators: z.array(
    z.union([
      ListSessionsHideOperatorsSessionsRequestRequestBodyQueryFilters71$outboundSchema,
      ListSessionsHideOperatorsSessionsRequestRequestBodyQueryFilters72$outboundSchema,
      ListSessionsHideOperatorsSessionsRequestRequestBodyQueryFilters73$outboundSchema,
      ListSessionsHideOperatorsSessionsRequestRequestBodyQueryFilters74$outboundSchema,
      ListSessionsHideOperatorsSessionsRequestRequestBodyQueryFilters75$outboundSchema,
    ]),
  ).optional(),
  id: z.string(),
  evaluatorId: z.string(),
  evaluatorType: EvaluatorType$outboundSchema,
  evaluatorOutputType: EvaluatorOutputType$outboundSchema,
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListSessionsFiltersSessionsOptions$ {
  /** @deprecated use `ListSessionsFiltersSessionsOptions$inboundSchema` instead. */
  export const inboundSchema = ListSessionsFiltersSessionsOptions$inboundSchema;
  /** @deprecated use `ListSessionsFiltersSessionsOptions$outboundSchema` instead. */
  export const outboundSchema =
    ListSessionsFiltersSessionsOptions$outboundSchema;
  /** @deprecated use `ListSessionsFiltersSessionsOptions$Outbound` instead. */
  export type Outbound = ListSessionsFiltersSessionsOptions$Outbound;
}

export function listSessionsFiltersSessionsOptionsToJSON(
  listSessionsFiltersSessionsOptions: ListSessionsFiltersSessionsOptions,
): string {
  return JSON.stringify(
    ListSessionsFiltersSessionsOptions$outboundSchema.parse(
      listSessionsFiltersSessionsOptions,
    ),
  );
}

export function listSessionsFiltersSessionsOptionsFromJSON(
  jsonString: string,
): SafeParseResult<ListSessionsFiltersSessionsOptions, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      ListSessionsFiltersSessionsOptions$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListSessionsFiltersSessionsOptions' from JSON`,
  );
}

/** @internal */
export const ListSessionsHideOperatorsSessionsRequestRequestBodyQueryFilters76$inboundSchema:
  z.ZodNativeEnum<
    typeof ListSessionsHideOperatorsSessionsRequestRequestBodyQueryFilters76
  > = z.nativeEnum(
    ListSessionsHideOperatorsSessionsRequestRequestBodyQueryFilters76,
  );

/** @internal */
export const ListSessionsHideOperatorsSessionsRequestRequestBodyQueryFilters76$outboundSchema:
  z.ZodNativeEnum<
    typeof ListSessionsHideOperatorsSessionsRequestRequestBodyQueryFilters76
  > =
    ListSessionsHideOperatorsSessionsRequestRequestBodyQueryFilters76$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListSessionsHideOperatorsSessionsRequestRequestBodyQueryFilters76$ {
  /** @deprecated use `ListSessionsHideOperatorsSessionsRequestRequestBodyQueryFilters76$inboundSchema` instead. */
  export const inboundSchema =
    ListSessionsHideOperatorsSessionsRequestRequestBodyQueryFilters76$inboundSchema;
  /** @deprecated use `ListSessionsHideOperatorsSessionsRequestRequestBodyQueryFilters76$outboundSchema` instead. */
  export const outboundSchema =
    ListSessionsHideOperatorsSessionsRequestRequestBodyQueryFilters76$outboundSchema;
}

/** @internal */
export const ListSessionsHideOperatorsSessionsRequestRequestBodyQueryFilters77$inboundSchema:
  z.ZodNativeEnum<
    typeof ListSessionsHideOperatorsSessionsRequestRequestBodyQueryFilters77
  > = z.nativeEnum(
    ListSessionsHideOperatorsSessionsRequestRequestBodyQueryFilters77,
  );

/** @internal */
export const ListSessionsHideOperatorsSessionsRequestRequestBodyQueryFilters77$outboundSchema:
  z.ZodNativeEnum<
    typeof ListSessionsHideOperatorsSessionsRequestRequestBodyQueryFilters77
  > =
    ListSessionsHideOperatorsSessionsRequestRequestBodyQueryFilters77$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListSessionsHideOperatorsSessionsRequestRequestBodyQueryFilters77$ {
  /** @deprecated use `ListSessionsHideOperatorsSessionsRequestRequestBodyQueryFilters77$inboundSchema` instead. */
  export const inboundSchema =
    ListSessionsHideOperatorsSessionsRequestRequestBodyQueryFilters77$inboundSchema;
  /** @deprecated use `ListSessionsHideOperatorsSessionsRequestRequestBodyQueryFilters77$outboundSchema` instead. */
  export const outboundSchema =
    ListSessionsHideOperatorsSessionsRequestRequestBodyQueryFilters77$outboundSchema;
}

/** @internal */
export const ListSessionsHideOperatorsSessionsRequestRequestBodyQueryFilters78$inboundSchema:
  z.ZodNativeEnum<
    typeof ListSessionsHideOperatorsSessionsRequestRequestBodyQueryFilters78
  > = z.nativeEnum(
    ListSessionsHideOperatorsSessionsRequestRequestBodyQueryFilters78,
  );

/** @internal */
export const ListSessionsHideOperatorsSessionsRequestRequestBodyQueryFilters78$outboundSchema:
  z.ZodNativeEnum<
    typeof ListSessionsHideOperatorsSessionsRequestRequestBodyQueryFilters78
  > =
    ListSessionsHideOperatorsSessionsRequestRequestBodyQueryFilters78$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListSessionsHideOperatorsSessionsRequestRequestBodyQueryFilters78$ {
  /** @deprecated use `ListSessionsHideOperatorsSessionsRequestRequestBodyQueryFilters78$inboundSchema` instead. */
  export const inboundSchema =
    ListSessionsHideOperatorsSessionsRequestRequestBodyQueryFilters78$inboundSchema;
  /** @deprecated use `ListSessionsHideOperatorsSessionsRequestRequestBodyQueryFilters78$outboundSchema` instead. */
  export const outboundSchema =
    ListSessionsHideOperatorsSessionsRequestRequestBodyQueryFilters78$outboundSchema;
}

/** @internal */
export const ListSessionsHideOperatorsSessionsRequestRequestBodyQueryFilters79$inboundSchema:
  z.ZodNativeEnum<
    typeof ListSessionsHideOperatorsSessionsRequestRequestBodyQueryFilters79
  > = z.nativeEnum(
    ListSessionsHideOperatorsSessionsRequestRequestBodyQueryFilters79,
  );

/** @internal */
export const ListSessionsHideOperatorsSessionsRequestRequestBodyQueryFilters79$outboundSchema:
  z.ZodNativeEnum<
    typeof ListSessionsHideOperatorsSessionsRequestRequestBodyQueryFilters79
  > =
    ListSessionsHideOperatorsSessionsRequestRequestBodyQueryFilters79$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListSessionsHideOperatorsSessionsRequestRequestBodyQueryFilters79$ {
  /** @deprecated use `ListSessionsHideOperatorsSessionsRequestRequestBodyQueryFilters79$inboundSchema` instead. */
  export const inboundSchema =
    ListSessionsHideOperatorsSessionsRequestRequestBodyQueryFilters79$inboundSchema;
  /** @deprecated use `ListSessionsHideOperatorsSessionsRequestRequestBodyQueryFilters79$outboundSchema` instead. */
  export const outboundSchema =
    ListSessionsHideOperatorsSessionsRequestRequestBodyQueryFilters79$outboundSchema;
}

/** @internal */
export const ListSessionsHideOperatorsSessionsRequestRequestBodyQueryFilters710$inboundSchema:
  z.ZodNativeEnum<
    typeof ListSessionsHideOperatorsSessionsRequestRequestBodyQueryFilters710
  > = z.nativeEnum(
    ListSessionsHideOperatorsSessionsRequestRequestBodyQueryFilters710,
  );

/** @internal */
export const ListSessionsHideOperatorsSessionsRequestRequestBodyQueryFilters710$outboundSchema:
  z.ZodNativeEnum<
    typeof ListSessionsHideOperatorsSessionsRequestRequestBodyQueryFilters710
  > =
    ListSessionsHideOperatorsSessionsRequestRequestBodyQueryFilters710$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListSessionsHideOperatorsSessionsRequestRequestBodyQueryFilters710$ {
  /** @deprecated use `ListSessionsHideOperatorsSessionsRequestRequestBodyQueryFilters710$inboundSchema` instead. */
  export const inboundSchema =
    ListSessionsHideOperatorsSessionsRequestRequestBodyQueryFilters710$inboundSchema;
  /** @deprecated use `ListSessionsHideOperatorsSessionsRequestRequestBodyQueryFilters710$outboundSchema` instead. */
  export const outboundSchema =
    ListSessionsHideOperatorsSessionsRequestRequestBodyQueryFilters710$outboundSchema;
}

/** @internal */
export const ListSessionsFiltersSessionsRequestRequestBodyQuery7HideOperators1$inboundSchema:
  z.ZodType<
    ListSessionsFiltersSessionsRequestRequestBodyQuery7HideOperators1,
    z.ZodTypeDef,
    unknown
  > = z.union([
    ListSessionsHideOperatorsSessionsRequestRequestBodyQueryFilters710$inboundSchema,
    ListSessionsHideOperatorsSessionsRequestRequestBodyQueryFilters79$inboundSchema,
    ListSessionsHideOperatorsSessionsRequestRequestBodyQueryFilters78$inboundSchema,
    ListSessionsHideOperatorsSessionsRequestRequestBodyQueryFilters77$inboundSchema,
    ListSessionsHideOperatorsSessionsRequestRequestBodyQueryFilters76$inboundSchema,
  ]);

/** @internal */
export type ListSessionsFiltersSessionsRequestRequestBodyQuery7HideOperators1$Outbound =
  | string
  | string
  | string
  | string
  | string;

/** @internal */
export const ListSessionsFiltersSessionsRequestRequestBodyQuery7HideOperators1$outboundSchema:
  z.ZodType<
    ListSessionsFiltersSessionsRequestRequestBodyQuery7HideOperators1$Outbound,
    z.ZodTypeDef,
    ListSessionsFiltersSessionsRequestRequestBodyQuery7HideOperators1
  > = z.union([
    ListSessionsHideOperatorsSessionsRequestRequestBodyQueryFilters710$outboundSchema,
    ListSessionsHideOperatorsSessionsRequestRequestBodyQueryFilters79$outboundSchema,
    ListSessionsHideOperatorsSessionsRequestRequestBodyQueryFilters78$outboundSchema,
    ListSessionsHideOperatorsSessionsRequestRequestBodyQueryFilters77$outboundSchema,
    ListSessionsHideOperatorsSessionsRequestRequestBodyQueryFilters76$outboundSchema,
  ]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListSessionsFiltersSessionsRequestRequestBodyQuery7HideOperators1$ {
  /** @deprecated use `ListSessionsFiltersSessionsRequestRequestBodyQuery7HideOperators1$inboundSchema` instead. */
  export const inboundSchema =
    ListSessionsFiltersSessionsRequestRequestBodyQuery7HideOperators1$inboundSchema;
  /** @deprecated use `ListSessionsFiltersSessionsRequestRequestBodyQuery7HideOperators1$outboundSchema` instead. */
  export const outboundSchema =
    ListSessionsFiltersSessionsRequestRequestBodyQuery7HideOperators1$outboundSchema;
  /** @deprecated use `ListSessionsFiltersSessionsRequestRequestBodyQuery7HideOperators1$Outbound` instead. */
  export type Outbound =
    ListSessionsFiltersSessionsRequestRequestBodyQuery7HideOperators1$Outbound;
}

export function listSessionsFiltersSessionsRequestRequestBodyQuery7HideOperators1ToJSON(
  listSessionsFiltersSessionsRequestRequestBodyQuery7HideOperators1:
    ListSessionsFiltersSessionsRequestRequestBodyQuery7HideOperators1,
): string {
  return JSON.stringify(
    ListSessionsFiltersSessionsRequestRequestBodyQuery7HideOperators1$outboundSchema
      .parse(listSessionsFiltersSessionsRequestRequestBodyQuery7HideOperators1),
  );
}

export function listSessionsFiltersSessionsRequestRequestBodyQuery7HideOperators1FromJSON(
  jsonString: string,
): SafeParseResult<
  ListSessionsFiltersSessionsRequestRequestBodyQuery7HideOperators1,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      ListSessionsFiltersSessionsRequestRequestBodyQuery7HideOperators1$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'ListSessionsFiltersSessionsRequestRequestBodyQuery7HideOperators1' from JSON`,
  );
}

/** @internal */
export const Filters7$inboundSchema: z.ZodType<
  Filters7,
  z.ZodTypeDef,
  unknown
> = z.object({
  operator: z.union([
    ListSessionsOperator1$inboundSchema,
    ListSessionsOperator2$inboundSchema,
  ]),
  value: z.nullable(z.any()).optional(),
  type: ListSessionsFiltersSessionsRequestRequestBodyQuery7Type$inboundSchema,
  selectedOptionId: z.nullable(z.string()),
  options: z.array(
    z.lazy(() => ListSessionsFiltersSessionsOptions$inboundSchema),
  ),
  name: z.string(),
  path: z.string(),
  hideOperators: z.array(
    z.union([
      ListSessionsHideOperatorsSessionsRequestRequestBodyQueryFilters710$inboundSchema,
      ListSessionsHideOperatorsSessionsRequestRequestBodyQueryFilters79$inboundSchema,
      ListSessionsHideOperatorsSessionsRequestRequestBodyQueryFilters78$inboundSchema,
      ListSessionsHideOperatorsSessionsRequestRequestBodyQueryFilters77$inboundSchema,
      ListSessionsHideOperatorsSessionsRequestRequestBodyQueryFilters76$inboundSchema,
    ]),
  ).optional(),
});

/** @internal */
export type Filters7$Outbound = {
  operator: string | string;
  value?: any | null | undefined;
  type: string;
  selectedOptionId: string | null;
  options: Array<ListSessionsFiltersSessionsOptions$Outbound>;
  name: string;
  path: string;
  hideOperators?: Array<string | string | string | string | string> | undefined;
};

/** @internal */
export const Filters7$outboundSchema: z.ZodType<
  Filters7$Outbound,
  z.ZodTypeDef,
  Filters7
> = z.object({
  operator: z.union([
    ListSessionsOperator1$outboundSchema,
    ListSessionsOperator2$outboundSchema,
  ]),
  value: z.nullable(z.any()).optional(),
  type: ListSessionsFiltersSessionsRequestRequestBodyQuery7Type$outboundSchema,
  selectedOptionId: z.nullable(z.string()),
  options: z.array(
    z.lazy(() => ListSessionsFiltersSessionsOptions$outboundSchema),
  ),
  name: z.string(),
  path: z.string(),
  hideOperators: z.array(
    z.union([
      ListSessionsHideOperatorsSessionsRequestRequestBodyQueryFilters710$outboundSchema,
      ListSessionsHideOperatorsSessionsRequestRequestBodyQueryFilters79$outboundSchema,
      ListSessionsHideOperatorsSessionsRequestRequestBodyQueryFilters78$outboundSchema,
      ListSessionsHideOperatorsSessionsRequestRequestBodyQueryFilters77$outboundSchema,
      ListSessionsHideOperatorsSessionsRequestRequestBodyQueryFilters76$outboundSchema,
    ]),
  ).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Filters7$ {
  /** @deprecated use `Filters7$inboundSchema` instead. */
  export const inboundSchema = Filters7$inboundSchema;
  /** @deprecated use `Filters7$outboundSchema` instead. */
  export const outboundSchema = Filters7$outboundSchema;
  /** @deprecated use `Filters7$Outbound` instead. */
  export type Outbound = Filters7$Outbound;
}

export function filters7ToJSON(filters7: Filters7): string {
  return JSON.stringify(Filters7$outboundSchema.parse(filters7));
}

export function filters7FromJSON(
  jsonString: string,
): SafeParseResult<Filters7, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Filters7$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Filters7' from JSON`,
  );
}

/** @internal */
export const Operator5$inboundSchema: z.ZodNativeEnum<typeof Operator5> = z
  .nativeEnum(Operator5);

/** @internal */
export const Operator5$outboundSchema: z.ZodNativeEnum<typeof Operator5> =
  Operator5$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Operator5$ {
  /** @deprecated use `Operator5$inboundSchema` instead. */
  export const inboundSchema = Operator5$inboundSchema;
  /** @deprecated use `Operator5$outboundSchema` instead. */
  export const outboundSchema = Operator5$outboundSchema;
}

/** @internal */
export const Operator4$inboundSchema: z.ZodNativeEnum<typeof Operator4> = z
  .nativeEnum(Operator4);

/** @internal */
export const Operator4$outboundSchema: z.ZodNativeEnum<typeof Operator4> =
  Operator4$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Operator4$ {
  /** @deprecated use `Operator4$inboundSchema` instead. */
  export const inboundSchema = Operator4$inboundSchema;
  /** @deprecated use `Operator4$outboundSchema` instead. */
  export const outboundSchema = Operator4$outboundSchema;
}

/** @internal */
export const Operator3$inboundSchema: z.ZodNativeEnum<typeof Operator3> = z
  .nativeEnum(Operator3);

/** @internal */
export const Operator3$outboundSchema: z.ZodNativeEnum<typeof Operator3> =
  Operator3$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Operator3$ {
  /** @deprecated use `Operator3$inboundSchema` instead. */
  export const inboundSchema = Operator3$inboundSchema;
  /** @deprecated use `Operator3$outboundSchema` instead. */
  export const outboundSchema = Operator3$outboundSchema;
}

/** @internal */
export const Operator2$inboundSchema: z.ZodNativeEnum<typeof Operator2> = z
  .nativeEnum(Operator2);

/** @internal */
export const Operator2$outboundSchema: z.ZodNativeEnum<typeof Operator2> =
  Operator2$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Operator2$ {
  /** @deprecated use `Operator2$inboundSchema` instead. */
  export const inboundSchema = Operator2$inboundSchema;
  /** @deprecated use `Operator2$outboundSchema` instead. */
  export const outboundSchema = Operator2$outboundSchema;
}

/** @internal */
export const Operator1$inboundSchema: z.ZodNativeEnum<typeof Operator1> = z
  .nativeEnum(Operator1);

/** @internal */
export const Operator1$outboundSchema: z.ZodNativeEnum<typeof Operator1> =
  Operator1$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Operator1$ {
  /** @deprecated use `Operator1$inboundSchema` instead. */
  export const inboundSchema = Operator1$inboundSchema;
  /** @deprecated use `Operator1$outboundSchema` instead. */
  export const outboundSchema = Operator1$outboundSchema;
}

/** @internal */
export const ListSessionsFiltersSessionsRequestRequestBodyQueryOperator$inboundSchema:
  z.ZodType<
    ListSessionsFiltersSessionsRequestRequestBodyQueryOperator,
    z.ZodTypeDef,
    unknown
  > = z.union([
    Operator1$inboundSchema,
    Operator2$inboundSchema,
    Operator3$inboundSchema,
    Operator4$inboundSchema,
    Operator5$inboundSchema,
  ]);

/** @internal */
export type ListSessionsFiltersSessionsRequestRequestBodyQueryOperator$Outbound =
  | string
  | string
  | string
  | string
  | string;

/** @internal */
export const ListSessionsFiltersSessionsRequestRequestBodyQueryOperator$outboundSchema:
  z.ZodType<
    ListSessionsFiltersSessionsRequestRequestBodyQueryOperator$Outbound,
    z.ZodTypeDef,
    ListSessionsFiltersSessionsRequestRequestBodyQueryOperator
  > = z.union([
    Operator1$outboundSchema,
    Operator2$outboundSchema,
    Operator3$outboundSchema,
    Operator4$outboundSchema,
    Operator5$outboundSchema,
  ]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListSessionsFiltersSessionsRequestRequestBodyQueryOperator$ {
  /** @deprecated use `ListSessionsFiltersSessionsRequestRequestBodyQueryOperator$inboundSchema` instead. */
  export const inboundSchema =
    ListSessionsFiltersSessionsRequestRequestBodyQueryOperator$inboundSchema;
  /** @deprecated use `ListSessionsFiltersSessionsRequestRequestBodyQueryOperator$outboundSchema` instead. */
  export const outboundSchema =
    ListSessionsFiltersSessionsRequestRequestBodyQueryOperator$outboundSchema;
  /** @deprecated use `ListSessionsFiltersSessionsRequestRequestBodyQueryOperator$Outbound` instead. */
  export type Outbound =
    ListSessionsFiltersSessionsRequestRequestBodyQueryOperator$Outbound;
}

export function listSessionsFiltersSessionsRequestRequestBodyQueryOperatorToJSON(
  listSessionsFiltersSessionsRequestRequestBodyQueryOperator:
    ListSessionsFiltersSessionsRequestRequestBodyQueryOperator,
): string {
  return JSON.stringify(
    ListSessionsFiltersSessionsRequestRequestBodyQueryOperator$outboundSchema
      .parse(listSessionsFiltersSessionsRequestRequestBodyQueryOperator),
  );
}

export function listSessionsFiltersSessionsRequestRequestBodyQueryOperatorFromJSON(
  jsonString: string,
): SafeParseResult<
  ListSessionsFiltersSessionsRequestRequestBodyQueryOperator,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      ListSessionsFiltersSessionsRequestRequestBodyQueryOperator$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'ListSessionsFiltersSessionsRequestRequestBodyQueryOperator' from JSON`,
  );
}

/** @internal */
export const ListSessionsFiltersSessionsRequestRequestBodyQueryType$inboundSchema:
  z.ZodNativeEnum<
    typeof ListSessionsFiltersSessionsRequestRequestBodyQueryType
  > = z.nativeEnum(ListSessionsFiltersSessionsRequestRequestBodyQueryType);

/** @internal */
export const ListSessionsFiltersSessionsRequestRequestBodyQueryType$outboundSchema:
  z.ZodNativeEnum<
    typeof ListSessionsFiltersSessionsRequestRequestBodyQueryType
  > = ListSessionsFiltersSessionsRequestRequestBodyQueryType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListSessionsFiltersSessionsRequestRequestBodyQueryType$ {
  /** @deprecated use `ListSessionsFiltersSessionsRequestRequestBodyQueryType$inboundSchema` instead. */
  export const inboundSchema =
    ListSessionsFiltersSessionsRequestRequestBodyQueryType$inboundSchema;
  /** @deprecated use `ListSessionsFiltersSessionsRequestRequestBodyQueryType$outboundSchema` instead. */
  export const outboundSchema =
    ListSessionsFiltersSessionsRequestRequestBodyQueryType$outboundSchema;
}

/** @internal */
export const ListSessionsFiltersSessionsRequestRequestBodyQuery6Type$inboundSchema:
  z.ZodNativeEnum<
    typeof ListSessionsFiltersSessionsRequestRequestBodyQuery6Type
  > = z.nativeEnum(ListSessionsFiltersSessionsRequestRequestBodyQuery6Type);

/** @internal */
export const ListSessionsFiltersSessionsRequestRequestBodyQuery6Type$outboundSchema:
  z.ZodNativeEnum<
    typeof ListSessionsFiltersSessionsRequestRequestBodyQuery6Type
  > = ListSessionsFiltersSessionsRequestRequestBodyQuery6Type$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListSessionsFiltersSessionsRequestRequestBodyQuery6Type$ {
  /** @deprecated use `ListSessionsFiltersSessionsRequestRequestBodyQuery6Type$inboundSchema` instead. */
  export const inboundSchema =
    ListSessionsFiltersSessionsRequestRequestBodyQuery6Type$inboundSchema;
  /** @deprecated use `ListSessionsFiltersSessionsRequestRequestBodyQuery6Type$outboundSchema` instead. */
  export const outboundSchema =
    ListSessionsFiltersSessionsRequestRequestBodyQuery6Type$outboundSchema;
}

/** @internal */
export const ListSessionsHideOperatorsSessionsRequestRequestBodyQuery5$inboundSchema:
  z.ZodNativeEnum<
    typeof ListSessionsHideOperatorsSessionsRequestRequestBodyQuery5
  > = z.nativeEnum(ListSessionsHideOperatorsSessionsRequestRequestBodyQuery5);

/** @internal */
export const ListSessionsHideOperatorsSessionsRequestRequestBodyQuery5$outboundSchema:
  z.ZodNativeEnum<
    typeof ListSessionsHideOperatorsSessionsRequestRequestBodyQuery5
  > = ListSessionsHideOperatorsSessionsRequestRequestBodyQuery5$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListSessionsHideOperatorsSessionsRequestRequestBodyQuery5$ {
  /** @deprecated use `ListSessionsHideOperatorsSessionsRequestRequestBodyQuery5$inboundSchema` instead. */
  export const inboundSchema =
    ListSessionsHideOperatorsSessionsRequestRequestBodyQuery5$inboundSchema;
  /** @deprecated use `ListSessionsHideOperatorsSessionsRequestRequestBodyQuery5$outboundSchema` instead. */
  export const outboundSchema =
    ListSessionsHideOperatorsSessionsRequestRequestBodyQuery5$outboundSchema;
}

/** @internal */
export const ListSessionsHideOperatorsSessionsRequestRequestBodyQuery4$inboundSchema:
  z.ZodNativeEnum<
    typeof ListSessionsHideOperatorsSessionsRequestRequestBodyQuery4
  > = z.nativeEnum(ListSessionsHideOperatorsSessionsRequestRequestBodyQuery4);

/** @internal */
export const ListSessionsHideOperatorsSessionsRequestRequestBodyQuery4$outboundSchema:
  z.ZodNativeEnum<
    typeof ListSessionsHideOperatorsSessionsRequestRequestBodyQuery4
  > = ListSessionsHideOperatorsSessionsRequestRequestBodyQuery4$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListSessionsHideOperatorsSessionsRequestRequestBodyQuery4$ {
  /** @deprecated use `ListSessionsHideOperatorsSessionsRequestRequestBodyQuery4$inboundSchema` instead. */
  export const inboundSchema =
    ListSessionsHideOperatorsSessionsRequestRequestBodyQuery4$inboundSchema;
  /** @deprecated use `ListSessionsHideOperatorsSessionsRequestRequestBodyQuery4$outboundSchema` instead. */
  export const outboundSchema =
    ListSessionsHideOperatorsSessionsRequestRequestBodyQuery4$outboundSchema;
}

/** @internal */
export const ListSessionsHideOperatorsSessionsRequestRequestBodyQuery3$inboundSchema:
  z.ZodNativeEnum<
    typeof ListSessionsHideOperatorsSessionsRequestRequestBodyQuery3
  > = z.nativeEnum(ListSessionsHideOperatorsSessionsRequestRequestBodyQuery3);

/** @internal */
export const ListSessionsHideOperatorsSessionsRequestRequestBodyQuery3$outboundSchema:
  z.ZodNativeEnum<
    typeof ListSessionsHideOperatorsSessionsRequestRequestBodyQuery3
  > = ListSessionsHideOperatorsSessionsRequestRequestBodyQuery3$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListSessionsHideOperatorsSessionsRequestRequestBodyQuery3$ {
  /** @deprecated use `ListSessionsHideOperatorsSessionsRequestRequestBodyQuery3$inboundSchema` instead. */
  export const inboundSchema =
    ListSessionsHideOperatorsSessionsRequestRequestBodyQuery3$inboundSchema;
  /** @deprecated use `ListSessionsHideOperatorsSessionsRequestRequestBodyQuery3$outboundSchema` instead. */
  export const outboundSchema =
    ListSessionsHideOperatorsSessionsRequestRequestBodyQuery3$outboundSchema;
}

/** @internal */
export const ListSessionsHideOperatorsSessionsRequestRequestBodyQuery2$inboundSchema:
  z.ZodNativeEnum<
    typeof ListSessionsHideOperatorsSessionsRequestRequestBodyQuery2
  > = z.nativeEnum(ListSessionsHideOperatorsSessionsRequestRequestBodyQuery2);

/** @internal */
export const ListSessionsHideOperatorsSessionsRequestRequestBodyQuery2$outboundSchema:
  z.ZodNativeEnum<
    typeof ListSessionsHideOperatorsSessionsRequestRequestBodyQuery2
  > = ListSessionsHideOperatorsSessionsRequestRequestBodyQuery2$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListSessionsHideOperatorsSessionsRequestRequestBodyQuery2$ {
  /** @deprecated use `ListSessionsHideOperatorsSessionsRequestRequestBodyQuery2$inboundSchema` instead. */
  export const inboundSchema =
    ListSessionsHideOperatorsSessionsRequestRequestBodyQuery2$inboundSchema;
  /** @deprecated use `ListSessionsHideOperatorsSessionsRequestRequestBodyQuery2$outboundSchema` instead. */
  export const outboundSchema =
    ListSessionsHideOperatorsSessionsRequestRequestBodyQuery2$outboundSchema;
}

/** @internal */
export const ListSessionsHideOperatorsSessionsRequestRequestBodyQuery1$inboundSchema:
  z.ZodNativeEnum<
    typeof ListSessionsHideOperatorsSessionsRequestRequestBodyQuery1
  > = z.nativeEnum(ListSessionsHideOperatorsSessionsRequestRequestBodyQuery1);

/** @internal */
export const ListSessionsHideOperatorsSessionsRequestRequestBodyQuery1$outboundSchema:
  z.ZodNativeEnum<
    typeof ListSessionsHideOperatorsSessionsRequestRequestBodyQuery1
  > = ListSessionsHideOperatorsSessionsRequestRequestBodyQuery1$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListSessionsHideOperatorsSessionsRequestRequestBodyQuery1$ {
  /** @deprecated use `ListSessionsHideOperatorsSessionsRequestRequestBodyQuery1$inboundSchema` instead. */
  export const inboundSchema =
    ListSessionsHideOperatorsSessionsRequestRequestBodyQuery1$inboundSchema;
  /** @deprecated use `ListSessionsHideOperatorsSessionsRequestRequestBodyQuery1$outboundSchema` instead. */
  export const outboundSchema =
    ListSessionsHideOperatorsSessionsRequestRequestBodyQuery1$outboundSchema;
}

/** @internal */
export const ListSessionsFiltersSessionsRequestRequestBodyHideOperators$inboundSchema:
  z.ZodType<
    ListSessionsFiltersSessionsRequestRequestBodyHideOperators,
    z.ZodTypeDef,
    unknown
  > = z.union([
    ListSessionsHideOperatorsSessionsRequestRequestBodyQuery1$inboundSchema,
    ListSessionsHideOperatorsSessionsRequestRequestBodyQuery2$inboundSchema,
    ListSessionsHideOperatorsSessionsRequestRequestBodyQuery3$inboundSchema,
    ListSessionsHideOperatorsSessionsRequestRequestBodyQuery4$inboundSchema,
    ListSessionsHideOperatorsSessionsRequestRequestBodyQuery5$inboundSchema,
  ]);

/** @internal */
export type ListSessionsFiltersSessionsRequestRequestBodyHideOperators$Outbound =
  | string
  | string
  | string
  | string
  | string;

/** @internal */
export const ListSessionsFiltersSessionsRequestRequestBodyHideOperators$outboundSchema:
  z.ZodType<
    ListSessionsFiltersSessionsRequestRequestBodyHideOperators$Outbound,
    z.ZodTypeDef,
    ListSessionsFiltersSessionsRequestRequestBodyHideOperators
  > = z.union([
    ListSessionsHideOperatorsSessionsRequestRequestBodyQuery1$outboundSchema,
    ListSessionsHideOperatorsSessionsRequestRequestBodyQuery2$outboundSchema,
    ListSessionsHideOperatorsSessionsRequestRequestBodyQuery3$outboundSchema,
    ListSessionsHideOperatorsSessionsRequestRequestBodyQuery4$outboundSchema,
    ListSessionsHideOperatorsSessionsRequestRequestBodyQuery5$outboundSchema,
  ]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListSessionsFiltersSessionsRequestRequestBodyHideOperators$ {
  /** @deprecated use `ListSessionsFiltersSessionsRequestRequestBodyHideOperators$inboundSchema` instead. */
  export const inboundSchema =
    ListSessionsFiltersSessionsRequestRequestBodyHideOperators$inboundSchema;
  /** @deprecated use `ListSessionsFiltersSessionsRequestRequestBodyHideOperators$outboundSchema` instead. */
  export const outboundSchema =
    ListSessionsFiltersSessionsRequestRequestBodyHideOperators$outboundSchema;
  /** @deprecated use `ListSessionsFiltersSessionsRequestRequestBodyHideOperators$Outbound` instead. */
  export type Outbound =
    ListSessionsFiltersSessionsRequestRequestBodyHideOperators$Outbound;
}

export function listSessionsFiltersSessionsRequestRequestBodyHideOperatorsToJSON(
  listSessionsFiltersSessionsRequestRequestBodyHideOperators:
    ListSessionsFiltersSessionsRequestRequestBodyHideOperators,
): string {
  return JSON.stringify(
    ListSessionsFiltersSessionsRequestRequestBodyHideOperators$outboundSchema
      .parse(listSessionsFiltersSessionsRequestRequestBodyHideOperators),
  );
}

export function listSessionsFiltersSessionsRequestRequestBodyHideOperatorsFromJSON(
  jsonString: string,
): SafeParseResult<
  ListSessionsFiltersSessionsRequestRequestBodyHideOperators,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      ListSessionsFiltersSessionsRequestRequestBodyHideOperators$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'ListSessionsFiltersSessionsRequestRequestBodyHideOperators' from JSON`,
  );
}

/** @internal */
export const ListSessionsFiltersOptions$inboundSchema: z.ZodType<
  ListSessionsFiltersOptions,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.string(),
  path: z.string(),
  type: ListSessionsFiltersSessionsRequestRequestBodyQuery6Type$inboundSchema,
  hideOperators: z.array(
    z.union([
      ListSessionsHideOperatorsSessionsRequestRequestBodyQuery1$inboundSchema,
      ListSessionsHideOperatorsSessionsRequestRequestBodyQuery2$inboundSchema,
      ListSessionsHideOperatorsSessionsRequestRequestBodyQuery3$inboundSchema,
      ListSessionsHideOperatorsSessionsRequestRequestBodyQuery4$inboundSchema,
      ListSessionsHideOperatorsSessionsRequestRequestBodyQuery5$inboundSchema,
    ]),
  ).optional(),
  id: z.string(),
});

/** @internal */
export type ListSessionsFiltersOptions$Outbound = {
  name: string;
  path: string;
  type: string;
  hideOperators?: Array<string | string | string | string | string> | undefined;
  id: string;
};

/** @internal */
export const ListSessionsFiltersOptions$outboundSchema: z.ZodType<
  ListSessionsFiltersOptions$Outbound,
  z.ZodTypeDef,
  ListSessionsFiltersOptions
> = z.object({
  name: z.string(),
  path: z.string(),
  type: ListSessionsFiltersSessionsRequestRequestBodyQuery6Type$outboundSchema,
  hideOperators: z.array(
    z.union([
      ListSessionsHideOperatorsSessionsRequestRequestBodyQuery1$outboundSchema,
      ListSessionsHideOperatorsSessionsRequestRequestBodyQuery2$outboundSchema,
      ListSessionsHideOperatorsSessionsRequestRequestBodyQuery3$outboundSchema,
      ListSessionsHideOperatorsSessionsRequestRequestBodyQuery4$outboundSchema,
      ListSessionsHideOperatorsSessionsRequestRequestBodyQuery5$outboundSchema,
    ]),
  ).optional(),
  id: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListSessionsFiltersOptions$ {
  /** @deprecated use `ListSessionsFiltersOptions$inboundSchema` instead. */
  export const inboundSchema = ListSessionsFiltersOptions$inboundSchema;
  /** @deprecated use `ListSessionsFiltersOptions$outboundSchema` instead. */
  export const outboundSchema = ListSessionsFiltersOptions$outboundSchema;
  /** @deprecated use `ListSessionsFiltersOptions$Outbound` instead. */
  export type Outbound = ListSessionsFiltersOptions$Outbound;
}

export function listSessionsFiltersOptionsToJSON(
  listSessionsFiltersOptions: ListSessionsFiltersOptions,
): string {
  return JSON.stringify(
    ListSessionsFiltersOptions$outboundSchema.parse(listSessionsFiltersOptions),
  );
}

export function listSessionsFiltersOptionsFromJSON(
  jsonString: string,
): SafeParseResult<ListSessionsFiltersOptions, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListSessionsFiltersOptions$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListSessionsFiltersOptions' from JSON`,
  );
}

/** @internal */
export const ListSessionsHideOperatorsSessionsRequestRequestBodyQueryFilters5$inboundSchema:
  z.ZodNativeEnum<
    typeof ListSessionsHideOperatorsSessionsRequestRequestBodyQueryFilters5
  > = z.nativeEnum(
    ListSessionsHideOperatorsSessionsRequestRequestBodyQueryFilters5,
  );

/** @internal */
export const ListSessionsHideOperatorsSessionsRequestRequestBodyQueryFilters5$outboundSchema:
  z.ZodNativeEnum<
    typeof ListSessionsHideOperatorsSessionsRequestRequestBodyQueryFilters5
  > =
    ListSessionsHideOperatorsSessionsRequestRequestBodyQueryFilters5$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListSessionsHideOperatorsSessionsRequestRequestBodyQueryFilters5$ {
  /** @deprecated use `ListSessionsHideOperatorsSessionsRequestRequestBodyQueryFilters5$inboundSchema` instead. */
  export const inboundSchema =
    ListSessionsHideOperatorsSessionsRequestRequestBodyQueryFilters5$inboundSchema;
  /** @deprecated use `ListSessionsHideOperatorsSessionsRequestRequestBodyQueryFilters5$outboundSchema` instead. */
  export const outboundSchema =
    ListSessionsHideOperatorsSessionsRequestRequestBodyQueryFilters5$outboundSchema;
}

/** @internal */
export const ListSessionsHideOperatorsSessionsRequestRequestBodyQueryFilters4$inboundSchema:
  z.ZodNativeEnum<
    typeof ListSessionsHideOperatorsSessionsRequestRequestBodyQueryFilters4
  > = z.nativeEnum(
    ListSessionsHideOperatorsSessionsRequestRequestBodyQueryFilters4,
  );

/** @internal */
export const ListSessionsHideOperatorsSessionsRequestRequestBodyQueryFilters4$outboundSchema:
  z.ZodNativeEnum<
    typeof ListSessionsHideOperatorsSessionsRequestRequestBodyQueryFilters4
  > =
    ListSessionsHideOperatorsSessionsRequestRequestBodyQueryFilters4$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListSessionsHideOperatorsSessionsRequestRequestBodyQueryFilters4$ {
  /** @deprecated use `ListSessionsHideOperatorsSessionsRequestRequestBodyQueryFilters4$inboundSchema` instead. */
  export const inboundSchema =
    ListSessionsHideOperatorsSessionsRequestRequestBodyQueryFilters4$inboundSchema;
  /** @deprecated use `ListSessionsHideOperatorsSessionsRequestRequestBodyQueryFilters4$outboundSchema` instead. */
  export const outboundSchema =
    ListSessionsHideOperatorsSessionsRequestRequestBodyQueryFilters4$outboundSchema;
}

/** @internal */
export const ListSessionsHideOperatorsSessionsRequestRequestBodyQueryFilters3$inboundSchema:
  z.ZodNativeEnum<
    typeof ListSessionsHideOperatorsSessionsRequestRequestBodyQueryFilters3
  > = z.nativeEnum(
    ListSessionsHideOperatorsSessionsRequestRequestBodyQueryFilters3,
  );

/** @internal */
export const ListSessionsHideOperatorsSessionsRequestRequestBodyQueryFilters3$outboundSchema:
  z.ZodNativeEnum<
    typeof ListSessionsHideOperatorsSessionsRequestRequestBodyQueryFilters3
  > =
    ListSessionsHideOperatorsSessionsRequestRequestBodyQueryFilters3$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListSessionsHideOperatorsSessionsRequestRequestBodyQueryFilters3$ {
  /** @deprecated use `ListSessionsHideOperatorsSessionsRequestRequestBodyQueryFilters3$inboundSchema` instead. */
  export const inboundSchema =
    ListSessionsHideOperatorsSessionsRequestRequestBodyQueryFilters3$inboundSchema;
  /** @deprecated use `ListSessionsHideOperatorsSessionsRequestRequestBodyQueryFilters3$outboundSchema` instead. */
  export const outboundSchema =
    ListSessionsHideOperatorsSessionsRequestRequestBodyQueryFilters3$outboundSchema;
}

/** @internal */
export const ListSessionsHideOperatorsSessionsRequestRequestBodyQueryFilters2$inboundSchema:
  z.ZodNativeEnum<
    typeof ListSessionsHideOperatorsSessionsRequestRequestBodyQueryFilters2
  > = z.nativeEnum(
    ListSessionsHideOperatorsSessionsRequestRequestBodyQueryFilters2,
  );

/** @internal */
export const ListSessionsHideOperatorsSessionsRequestRequestBodyQueryFilters2$outboundSchema:
  z.ZodNativeEnum<
    typeof ListSessionsHideOperatorsSessionsRequestRequestBodyQueryFilters2
  > =
    ListSessionsHideOperatorsSessionsRequestRequestBodyQueryFilters2$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListSessionsHideOperatorsSessionsRequestRequestBodyQueryFilters2$ {
  /** @deprecated use `ListSessionsHideOperatorsSessionsRequestRequestBodyQueryFilters2$inboundSchema` instead. */
  export const inboundSchema =
    ListSessionsHideOperatorsSessionsRequestRequestBodyQueryFilters2$inboundSchema;
  /** @deprecated use `ListSessionsHideOperatorsSessionsRequestRequestBodyQueryFilters2$outboundSchema` instead. */
  export const outboundSchema =
    ListSessionsHideOperatorsSessionsRequestRequestBodyQueryFilters2$outboundSchema;
}

/** @internal */
export const ListSessionsHideOperatorsSessionsRequestRequestBodyQueryFilters1$inboundSchema:
  z.ZodNativeEnum<
    typeof ListSessionsHideOperatorsSessionsRequestRequestBodyQueryFilters1
  > = z.nativeEnum(
    ListSessionsHideOperatorsSessionsRequestRequestBodyQueryFilters1,
  );

/** @internal */
export const ListSessionsHideOperatorsSessionsRequestRequestBodyQueryFilters1$outboundSchema:
  z.ZodNativeEnum<
    typeof ListSessionsHideOperatorsSessionsRequestRequestBodyQueryFilters1
  > =
    ListSessionsHideOperatorsSessionsRequestRequestBodyQueryFilters1$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListSessionsHideOperatorsSessionsRequestRequestBodyQueryFilters1$ {
  /** @deprecated use `ListSessionsHideOperatorsSessionsRequestRequestBodyQueryFilters1$inboundSchema` instead. */
  export const inboundSchema =
    ListSessionsHideOperatorsSessionsRequestRequestBodyQueryFilters1$inboundSchema;
  /** @deprecated use `ListSessionsHideOperatorsSessionsRequestRequestBodyQueryFilters1$outboundSchema` instead. */
  export const outboundSchema =
    ListSessionsHideOperatorsSessionsRequestRequestBodyQueryFilters1$outboundSchema;
}

/** @internal */
export const ListSessionsFiltersSessionsRequestRequestBodyQueryHideOperators$inboundSchema:
  z.ZodType<
    ListSessionsFiltersSessionsRequestRequestBodyQueryHideOperators,
    z.ZodTypeDef,
    unknown
  > = z.union([
    ListSessionsHideOperatorsSessionsRequestRequestBodyQueryFilters1$inboundSchema,
    ListSessionsHideOperatorsSessionsRequestRequestBodyQueryFilters2$inboundSchema,
    ListSessionsHideOperatorsSessionsRequestRequestBodyQueryFilters3$inboundSchema,
    ListSessionsHideOperatorsSessionsRequestRequestBodyQueryFilters4$inboundSchema,
    ListSessionsHideOperatorsSessionsRequestRequestBodyQueryFilters5$inboundSchema,
  ]);

/** @internal */
export type ListSessionsFiltersSessionsRequestRequestBodyQueryHideOperators$Outbound =
  | string
  | string
  | string
  | string
  | string;

/** @internal */
export const ListSessionsFiltersSessionsRequestRequestBodyQueryHideOperators$outboundSchema:
  z.ZodType<
    ListSessionsFiltersSessionsRequestRequestBodyQueryHideOperators$Outbound,
    z.ZodTypeDef,
    ListSessionsFiltersSessionsRequestRequestBodyQueryHideOperators
  > = z.union([
    ListSessionsHideOperatorsSessionsRequestRequestBodyQueryFilters1$outboundSchema,
    ListSessionsHideOperatorsSessionsRequestRequestBodyQueryFilters2$outboundSchema,
    ListSessionsHideOperatorsSessionsRequestRequestBodyQueryFilters3$outboundSchema,
    ListSessionsHideOperatorsSessionsRequestRequestBodyQueryFilters4$outboundSchema,
    ListSessionsHideOperatorsSessionsRequestRequestBodyQueryFilters5$outboundSchema,
  ]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListSessionsFiltersSessionsRequestRequestBodyQueryHideOperators$ {
  /** @deprecated use `ListSessionsFiltersSessionsRequestRequestBodyQueryHideOperators$inboundSchema` instead. */
  export const inboundSchema =
    ListSessionsFiltersSessionsRequestRequestBodyQueryHideOperators$inboundSchema;
  /** @deprecated use `ListSessionsFiltersSessionsRequestRequestBodyQueryHideOperators$outboundSchema` instead. */
  export const outboundSchema =
    ListSessionsFiltersSessionsRequestRequestBodyQueryHideOperators$outboundSchema;
  /** @deprecated use `ListSessionsFiltersSessionsRequestRequestBodyQueryHideOperators$Outbound` instead. */
  export type Outbound =
    ListSessionsFiltersSessionsRequestRequestBodyQueryHideOperators$Outbound;
}

export function listSessionsFiltersSessionsRequestRequestBodyQueryHideOperatorsToJSON(
  listSessionsFiltersSessionsRequestRequestBodyQueryHideOperators:
    ListSessionsFiltersSessionsRequestRequestBodyQueryHideOperators,
): string {
  return JSON.stringify(
    ListSessionsFiltersSessionsRequestRequestBodyQueryHideOperators$outboundSchema
      .parse(listSessionsFiltersSessionsRequestRequestBodyQueryHideOperators),
  );
}

export function listSessionsFiltersSessionsRequestRequestBodyQueryHideOperatorsFromJSON(
  jsonString: string,
): SafeParseResult<
  ListSessionsFiltersSessionsRequestRequestBodyQueryHideOperators,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      ListSessionsFiltersSessionsRequestRequestBodyQueryHideOperators$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'ListSessionsFiltersSessionsRequestRequestBodyQueryHideOperators' from JSON`,
  );
}

/** @internal */
export const Filters6$inboundSchema: z.ZodType<
  Filters6,
  z.ZodTypeDef,
  unknown
> = z.object({
  operator: z.union([
    Operator1$inboundSchema,
    Operator2$inboundSchema,
    Operator3$inboundSchema,
    Operator4$inboundSchema,
    Operator5$inboundSchema,
  ]),
  value: z.nullable(z.any()).optional(),
  type: ListSessionsFiltersSessionsRequestRequestBodyQueryType$inboundSchema,
  options: z.array(z.lazy(() => ListSessionsFiltersOptions$inboundSchema)),
  selectedOptionId: z.nullable(z.string()),
  name: z.string(),
  path: z.string(),
  hideOperators: z.array(
    z.union([
      ListSessionsHideOperatorsSessionsRequestRequestBodyQueryFilters1$inboundSchema,
      ListSessionsHideOperatorsSessionsRequestRequestBodyQueryFilters2$inboundSchema,
      ListSessionsHideOperatorsSessionsRequestRequestBodyQueryFilters3$inboundSchema,
      ListSessionsHideOperatorsSessionsRequestRequestBodyQueryFilters4$inboundSchema,
      ListSessionsHideOperatorsSessionsRequestRequestBodyQueryFilters5$inboundSchema,
    ]),
  ).optional(),
});

/** @internal */
export type Filters6$Outbound = {
  operator: string | string | string | string | string;
  value?: any | null | undefined;
  type: string;
  options: Array<ListSessionsFiltersOptions$Outbound>;
  selectedOptionId: string | null;
  name: string;
  path: string;
  hideOperators?: Array<string | string | string | string | string> | undefined;
};

/** @internal */
export const Filters6$outboundSchema: z.ZodType<
  Filters6$Outbound,
  z.ZodTypeDef,
  Filters6
> = z.object({
  operator: z.union([
    Operator1$outboundSchema,
    Operator2$outboundSchema,
    Operator3$outboundSchema,
    Operator4$outboundSchema,
    Operator5$outboundSchema,
  ]),
  value: z.nullable(z.any()).optional(),
  type: ListSessionsFiltersSessionsRequestRequestBodyQueryType$outboundSchema,
  options: z.array(z.lazy(() => ListSessionsFiltersOptions$outboundSchema)),
  selectedOptionId: z.nullable(z.string()),
  name: z.string(),
  path: z.string(),
  hideOperators: z.array(
    z.union([
      ListSessionsHideOperatorsSessionsRequestRequestBodyQueryFilters1$outboundSchema,
      ListSessionsHideOperatorsSessionsRequestRequestBodyQueryFilters2$outboundSchema,
      ListSessionsHideOperatorsSessionsRequestRequestBodyQueryFilters3$outboundSchema,
      ListSessionsHideOperatorsSessionsRequestRequestBodyQueryFilters4$outboundSchema,
      ListSessionsHideOperatorsSessionsRequestRequestBodyQueryFilters5$outboundSchema,
    ]),
  ).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Filters6$ {
  /** @deprecated use `Filters6$inboundSchema` instead. */
  export const inboundSchema = Filters6$inboundSchema;
  /** @deprecated use `Filters6$outboundSchema` instead. */
  export const outboundSchema = Filters6$outboundSchema;
  /** @deprecated use `Filters6$Outbound` instead. */
  export type Outbound = Filters6$Outbound;
}

export function filters6ToJSON(filters6: Filters6): string {
  return JSON.stringify(Filters6$outboundSchema.parse(filters6));
}

export function filters6FromJSON(
  jsonString: string,
): SafeParseResult<Filters6, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Filters6$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Filters6' from JSON`,
  );
}

/** @internal */
export const ListSessionsFiltersSessionsRequestRequestBodyOperator$inboundSchema:
  z.ZodNativeEnum<
    typeof ListSessionsFiltersSessionsRequestRequestBodyOperator
  > = z.nativeEnum(ListSessionsFiltersSessionsRequestRequestBodyOperator);

/** @internal */
export const ListSessionsFiltersSessionsRequestRequestBodyOperator$outboundSchema:
  z.ZodNativeEnum<
    typeof ListSessionsFiltersSessionsRequestRequestBodyOperator
  > = ListSessionsFiltersSessionsRequestRequestBodyOperator$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListSessionsFiltersSessionsRequestRequestBodyOperator$ {
  /** @deprecated use `ListSessionsFiltersSessionsRequestRequestBodyOperator$inboundSchema` instead. */
  export const inboundSchema =
    ListSessionsFiltersSessionsRequestRequestBodyOperator$inboundSchema;
  /** @deprecated use `ListSessionsFiltersSessionsRequestRequestBodyOperator$outboundSchema` instead. */
  export const outboundSchema =
    ListSessionsFiltersSessionsRequestRequestBodyOperator$outboundSchema;
}

/** @internal */
export const ListSessionsFiltersSessionsRequestRequestBodyType$inboundSchema:
  z.ZodNativeEnum<typeof ListSessionsFiltersSessionsRequestRequestBodyType> = z
    .nativeEnum(ListSessionsFiltersSessionsRequestRequestBodyType);

/** @internal */
export const ListSessionsFiltersSessionsRequestRequestBodyType$outboundSchema:
  z.ZodNativeEnum<typeof ListSessionsFiltersSessionsRequestRequestBodyType> =
    ListSessionsFiltersSessionsRequestRequestBodyType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListSessionsFiltersSessionsRequestRequestBodyType$ {
  /** @deprecated use `ListSessionsFiltersSessionsRequestRequestBodyType$inboundSchema` instead. */
  export const inboundSchema =
    ListSessionsFiltersSessionsRequestRequestBodyType$inboundSchema;
  /** @deprecated use `ListSessionsFiltersSessionsRequestRequestBodyType$outboundSchema` instead. */
  export const outboundSchema =
    ListSessionsFiltersSessionsRequestRequestBodyType$outboundSchema;
}

/** @internal */
export const ListSessionsHideOperatorsSessionsRequestRequestBody5$inboundSchema:
  z.ZodNativeEnum<typeof ListSessionsHideOperatorsSessionsRequestRequestBody5> =
    z.nativeEnum(ListSessionsHideOperatorsSessionsRequestRequestBody5);

/** @internal */
export const ListSessionsHideOperatorsSessionsRequestRequestBody5$outboundSchema:
  z.ZodNativeEnum<typeof ListSessionsHideOperatorsSessionsRequestRequestBody5> =
    ListSessionsHideOperatorsSessionsRequestRequestBody5$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListSessionsHideOperatorsSessionsRequestRequestBody5$ {
  /** @deprecated use `ListSessionsHideOperatorsSessionsRequestRequestBody5$inboundSchema` instead. */
  export const inboundSchema =
    ListSessionsHideOperatorsSessionsRequestRequestBody5$inboundSchema;
  /** @deprecated use `ListSessionsHideOperatorsSessionsRequestRequestBody5$outboundSchema` instead. */
  export const outboundSchema =
    ListSessionsHideOperatorsSessionsRequestRequestBody5$outboundSchema;
}

/** @internal */
export const ListSessionsHideOperatorsSessionsRequestRequestBody4$inboundSchema:
  z.ZodNativeEnum<typeof ListSessionsHideOperatorsSessionsRequestRequestBody4> =
    z.nativeEnum(ListSessionsHideOperatorsSessionsRequestRequestBody4);

/** @internal */
export const ListSessionsHideOperatorsSessionsRequestRequestBody4$outboundSchema:
  z.ZodNativeEnum<typeof ListSessionsHideOperatorsSessionsRequestRequestBody4> =
    ListSessionsHideOperatorsSessionsRequestRequestBody4$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListSessionsHideOperatorsSessionsRequestRequestBody4$ {
  /** @deprecated use `ListSessionsHideOperatorsSessionsRequestRequestBody4$inboundSchema` instead. */
  export const inboundSchema =
    ListSessionsHideOperatorsSessionsRequestRequestBody4$inboundSchema;
  /** @deprecated use `ListSessionsHideOperatorsSessionsRequestRequestBody4$outboundSchema` instead. */
  export const outboundSchema =
    ListSessionsHideOperatorsSessionsRequestRequestBody4$outboundSchema;
}

/** @internal */
export const ListSessionsHideOperatorsSessionsRequestRequestBody3$inboundSchema:
  z.ZodNativeEnum<typeof ListSessionsHideOperatorsSessionsRequestRequestBody3> =
    z.nativeEnum(ListSessionsHideOperatorsSessionsRequestRequestBody3);

/** @internal */
export const ListSessionsHideOperatorsSessionsRequestRequestBody3$outboundSchema:
  z.ZodNativeEnum<typeof ListSessionsHideOperatorsSessionsRequestRequestBody3> =
    ListSessionsHideOperatorsSessionsRequestRequestBody3$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListSessionsHideOperatorsSessionsRequestRequestBody3$ {
  /** @deprecated use `ListSessionsHideOperatorsSessionsRequestRequestBody3$inboundSchema` instead. */
  export const inboundSchema =
    ListSessionsHideOperatorsSessionsRequestRequestBody3$inboundSchema;
  /** @deprecated use `ListSessionsHideOperatorsSessionsRequestRequestBody3$outboundSchema` instead. */
  export const outboundSchema =
    ListSessionsHideOperatorsSessionsRequestRequestBody3$outboundSchema;
}

/** @internal */
export const ListSessionsHideOperatorsSessionsRequestRequestBody2$inboundSchema:
  z.ZodNativeEnum<typeof ListSessionsHideOperatorsSessionsRequestRequestBody2> =
    z.nativeEnum(ListSessionsHideOperatorsSessionsRequestRequestBody2);

/** @internal */
export const ListSessionsHideOperatorsSessionsRequestRequestBody2$outboundSchema:
  z.ZodNativeEnum<typeof ListSessionsHideOperatorsSessionsRequestRequestBody2> =
    ListSessionsHideOperatorsSessionsRequestRequestBody2$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListSessionsHideOperatorsSessionsRequestRequestBody2$ {
  /** @deprecated use `ListSessionsHideOperatorsSessionsRequestRequestBody2$inboundSchema` instead. */
  export const inboundSchema =
    ListSessionsHideOperatorsSessionsRequestRequestBody2$inboundSchema;
  /** @deprecated use `ListSessionsHideOperatorsSessionsRequestRequestBody2$outboundSchema` instead. */
  export const outboundSchema =
    ListSessionsHideOperatorsSessionsRequestRequestBody2$outboundSchema;
}

/** @internal */
export const ListSessionsHideOperatorsSessionsRequestRequestBody1$inboundSchema:
  z.ZodNativeEnum<typeof ListSessionsHideOperatorsSessionsRequestRequestBody1> =
    z.nativeEnum(ListSessionsHideOperatorsSessionsRequestRequestBody1);

/** @internal */
export const ListSessionsHideOperatorsSessionsRequestRequestBody1$outboundSchema:
  z.ZodNativeEnum<typeof ListSessionsHideOperatorsSessionsRequestRequestBody1> =
    ListSessionsHideOperatorsSessionsRequestRequestBody1$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListSessionsHideOperatorsSessionsRequestRequestBody1$ {
  /** @deprecated use `ListSessionsHideOperatorsSessionsRequestRequestBody1$inboundSchema` instead. */
  export const inboundSchema =
    ListSessionsHideOperatorsSessionsRequestRequestBody1$inboundSchema;
  /** @deprecated use `ListSessionsHideOperatorsSessionsRequestRequestBody1$outboundSchema` instead. */
  export const outboundSchema =
    ListSessionsHideOperatorsSessionsRequestRequestBody1$outboundSchema;
}

/** @internal */
export const ListSessionsFiltersSessionsRequestHideOperators$inboundSchema:
  z.ZodType<
    ListSessionsFiltersSessionsRequestHideOperators,
    z.ZodTypeDef,
    unknown
  > = z.union([
    ListSessionsHideOperatorsSessionsRequestRequestBody1$inboundSchema,
    ListSessionsHideOperatorsSessionsRequestRequestBody2$inboundSchema,
    ListSessionsHideOperatorsSessionsRequestRequestBody3$inboundSchema,
    ListSessionsHideOperatorsSessionsRequestRequestBody4$inboundSchema,
    ListSessionsHideOperatorsSessionsRequestRequestBody5$inboundSchema,
  ]);

/** @internal */
export type ListSessionsFiltersSessionsRequestHideOperators$Outbound =
  | string
  | string
  | string
  | string
  | string;

/** @internal */
export const ListSessionsFiltersSessionsRequestHideOperators$outboundSchema:
  z.ZodType<
    ListSessionsFiltersSessionsRequestHideOperators$Outbound,
    z.ZodTypeDef,
    ListSessionsFiltersSessionsRequestHideOperators
  > = z.union([
    ListSessionsHideOperatorsSessionsRequestRequestBody1$outboundSchema,
    ListSessionsHideOperatorsSessionsRequestRequestBody2$outboundSchema,
    ListSessionsHideOperatorsSessionsRequestRequestBody3$outboundSchema,
    ListSessionsHideOperatorsSessionsRequestRequestBody4$outboundSchema,
    ListSessionsHideOperatorsSessionsRequestRequestBody5$outboundSchema,
  ]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListSessionsFiltersSessionsRequestHideOperators$ {
  /** @deprecated use `ListSessionsFiltersSessionsRequestHideOperators$inboundSchema` instead. */
  export const inboundSchema =
    ListSessionsFiltersSessionsRequestHideOperators$inboundSchema;
  /** @deprecated use `ListSessionsFiltersSessionsRequestHideOperators$outboundSchema` instead. */
  export const outboundSchema =
    ListSessionsFiltersSessionsRequestHideOperators$outboundSchema;
  /** @deprecated use `ListSessionsFiltersSessionsRequestHideOperators$Outbound` instead. */
  export type Outbound =
    ListSessionsFiltersSessionsRequestHideOperators$Outbound;
}

export function listSessionsFiltersSessionsRequestHideOperatorsToJSON(
  listSessionsFiltersSessionsRequestHideOperators:
    ListSessionsFiltersSessionsRequestHideOperators,
): string {
  return JSON.stringify(
    ListSessionsFiltersSessionsRequestHideOperators$outboundSchema.parse(
      listSessionsFiltersSessionsRequestHideOperators,
    ),
  );
}

export function listSessionsFiltersSessionsRequestHideOperatorsFromJSON(
  jsonString: string,
): SafeParseResult<
  ListSessionsFiltersSessionsRequestHideOperators,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      ListSessionsFiltersSessionsRequestHideOperators$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'ListSessionsFiltersSessionsRequestHideOperators' from JSON`,
  );
}

/** @internal */
export const Filters5$inboundSchema: z.ZodType<
  Filters5,
  z.ZodTypeDef,
  unknown
> = z.object({
  operator: ListSessionsFiltersSessionsRequestRequestBodyOperator$inboundSchema,
  value: z.nullable(z.string()),
  type: ListSessionsFiltersSessionsRequestRequestBodyType$inboundSchema,
  name: z.string(),
  path: z.string(),
  hideOperators: z.array(
    z.union([
      ListSessionsHideOperatorsSessionsRequestRequestBody1$inboundSchema,
      ListSessionsHideOperatorsSessionsRequestRequestBody2$inboundSchema,
      ListSessionsHideOperatorsSessionsRequestRequestBody3$inboundSchema,
      ListSessionsHideOperatorsSessionsRequestRequestBody4$inboundSchema,
      ListSessionsHideOperatorsSessionsRequestRequestBody5$inboundSchema,
    ]),
  ).optional(),
});

/** @internal */
export type Filters5$Outbound = {
  operator: string;
  value: string | null;
  type: string;
  name: string;
  path: string;
  hideOperators?: Array<string | string | string | string | string> | undefined;
};

/** @internal */
export const Filters5$outboundSchema: z.ZodType<
  Filters5$Outbound,
  z.ZodTypeDef,
  Filters5
> = z.object({
  operator:
    ListSessionsFiltersSessionsRequestRequestBodyOperator$outboundSchema,
  value: z.nullable(z.string()),
  type: ListSessionsFiltersSessionsRequestRequestBodyType$outboundSchema,
  name: z.string(),
  path: z.string(),
  hideOperators: z.array(
    z.union([
      ListSessionsHideOperatorsSessionsRequestRequestBody1$outboundSchema,
      ListSessionsHideOperatorsSessionsRequestRequestBody2$outboundSchema,
      ListSessionsHideOperatorsSessionsRequestRequestBody3$outboundSchema,
      ListSessionsHideOperatorsSessionsRequestRequestBody4$outboundSchema,
      ListSessionsHideOperatorsSessionsRequestRequestBody5$outboundSchema,
    ]),
  ).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Filters5$ {
  /** @deprecated use `Filters5$inboundSchema` instead. */
  export const inboundSchema = Filters5$inboundSchema;
  /** @deprecated use `Filters5$outboundSchema` instead. */
  export const outboundSchema = Filters5$outboundSchema;
  /** @deprecated use `Filters5$Outbound` instead. */
  export type Outbound = Filters5$Outbound;
}

export function filters5ToJSON(filters5: Filters5): string {
  return JSON.stringify(Filters5$outboundSchema.parse(filters5));
}

export function filters5FromJSON(
  jsonString: string,
): SafeParseResult<Filters5, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Filters5$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Filters5' from JSON`,
  );
}

/** @internal */
export const ListSessionsFiltersSessionsRequestOperator$inboundSchema:
  z.ZodNativeEnum<typeof ListSessionsFiltersSessionsRequestOperator> = z
    .nativeEnum(ListSessionsFiltersSessionsRequestOperator);

/** @internal */
export const ListSessionsFiltersSessionsRequestOperator$outboundSchema:
  z.ZodNativeEnum<typeof ListSessionsFiltersSessionsRequestOperator> =
    ListSessionsFiltersSessionsRequestOperator$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListSessionsFiltersSessionsRequestOperator$ {
  /** @deprecated use `ListSessionsFiltersSessionsRequestOperator$inboundSchema` instead. */
  export const inboundSchema =
    ListSessionsFiltersSessionsRequestOperator$inboundSchema;
  /** @deprecated use `ListSessionsFiltersSessionsRequestOperator$outboundSchema` instead. */
  export const outboundSchema =
    ListSessionsFiltersSessionsRequestOperator$outboundSchema;
}

/** @internal */
export const ListSessionsFiltersValue$inboundSchema: z.ZodType<
  ListSessionsFiltersValue,
  z.ZodTypeDef,
  unknown
> = z.union([z.number(), z.array(z.number())]);

/** @internal */
export type ListSessionsFiltersValue$Outbound = number | Array<number>;

/** @internal */
export const ListSessionsFiltersValue$outboundSchema: z.ZodType<
  ListSessionsFiltersValue$Outbound,
  z.ZodTypeDef,
  ListSessionsFiltersValue
> = z.union([z.number(), z.array(z.number())]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListSessionsFiltersValue$ {
  /** @deprecated use `ListSessionsFiltersValue$inboundSchema` instead. */
  export const inboundSchema = ListSessionsFiltersValue$inboundSchema;
  /** @deprecated use `ListSessionsFiltersValue$outboundSchema` instead. */
  export const outboundSchema = ListSessionsFiltersValue$outboundSchema;
  /** @deprecated use `ListSessionsFiltersValue$Outbound` instead. */
  export type Outbound = ListSessionsFiltersValue$Outbound;
}

export function listSessionsFiltersValueToJSON(
  listSessionsFiltersValue: ListSessionsFiltersValue,
): string {
  return JSON.stringify(
    ListSessionsFiltersValue$outboundSchema.parse(listSessionsFiltersValue),
  );
}

export function listSessionsFiltersValueFromJSON(
  jsonString: string,
): SafeParseResult<ListSessionsFiltersValue, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListSessionsFiltersValue$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListSessionsFiltersValue' from JSON`,
  );
}

/** @internal */
export const ListSessionsFiltersSessionsRequestType$inboundSchema:
  z.ZodNativeEnum<typeof ListSessionsFiltersSessionsRequestType> = z.nativeEnum(
    ListSessionsFiltersSessionsRequestType,
  );

/** @internal */
export const ListSessionsFiltersSessionsRequestType$outboundSchema:
  z.ZodNativeEnum<typeof ListSessionsFiltersSessionsRequestType> =
    ListSessionsFiltersSessionsRequestType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListSessionsFiltersSessionsRequestType$ {
  /** @deprecated use `ListSessionsFiltersSessionsRequestType$inboundSchema` instead. */
  export const inboundSchema =
    ListSessionsFiltersSessionsRequestType$inboundSchema;
  /** @deprecated use `ListSessionsFiltersSessionsRequestType$outboundSchema` instead. */
  export const outboundSchema =
    ListSessionsFiltersSessionsRequestType$outboundSchema;
}

/** @internal */
export const ListSessionsHideOperatorsSessionsRequest5$inboundSchema:
  z.ZodNativeEnum<typeof ListSessionsHideOperatorsSessionsRequest5> = z
    .nativeEnum(ListSessionsHideOperatorsSessionsRequest5);

/** @internal */
export const ListSessionsHideOperatorsSessionsRequest5$outboundSchema:
  z.ZodNativeEnum<typeof ListSessionsHideOperatorsSessionsRequest5> =
    ListSessionsHideOperatorsSessionsRequest5$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListSessionsHideOperatorsSessionsRequest5$ {
  /** @deprecated use `ListSessionsHideOperatorsSessionsRequest5$inboundSchema` instead. */
  export const inboundSchema =
    ListSessionsHideOperatorsSessionsRequest5$inboundSchema;
  /** @deprecated use `ListSessionsHideOperatorsSessionsRequest5$outboundSchema` instead. */
  export const outboundSchema =
    ListSessionsHideOperatorsSessionsRequest5$outboundSchema;
}

/** @internal */
export const ListSessionsHideOperatorsSessionsRequest4$inboundSchema:
  z.ZodNativeEnum<typeof ListSessionsHideOperatorsSessionsRequest4> = z
    .nativeEnum(ListSessionsHideOperatorsSessionsRequest4);

/** @internal */
export const ListSessionsHideOperatorsSessionsRequest4$outboundSchema:
  z.ZodNativeEnum<typeof ListSessionsHideOperatorsSessionsRequest4> =
    ListSessionsHideOperatorsSessionsRequest4$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListSessionsHideOperatorsSessionsRequest4$ {
  /** @deprecated use `ListSessionsHideOperatorsSessionsRequest4$inboundSchema` instead. */
  export const inboundSchema =
    ListSessionsHideOperatorsSessionsRequest4$inboundSchema;
  /** @deprecated use `ListSessionsHideOperatorsSessionsRequest4$outboundSchema` instead. */
  export const outboundSchema =
    ListSessionsHideOperatorsSessionsRequest4$outboundSchema;
}

/** @internal */
export const ListSessionsHideOperatorsSessionsRequest3$inboundSchema:
  z.ZodNativeEnum<typeof ListSessionsHideOperatorsSessionsRequest3> = z
    .nativeEnum(ListSessionsHideOperatorsSessionsRequest3);

/** @internal */
export const ListSessionsHideOperatorsSessionsRequest3$outboundSchema:
  z.ZodNativeEnum<typeof ListSessionsHideOperatorsSessionsRequest3> =
    ListSessionsHideOperatorsSessionsRequest3$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListSessionsHideOperatorsSessionsRequest3$ {
  /** @deprecated use `ListSessionsHideOperatorsSessionsRequest3$inboundSchema` instead. */
  export const inboundSchema =
    ListSessionsHideOperatorsSessionsRequest3$inboundSchema;
  /** @deprecated use `ListSessionsHideOperatorsSessionsRequest3$outboundSchema` instead. */
  export const outboundSchema =
    ListSessionsHideOperatorsSessionsRequest3$outboundSchema;
}

/** @internal */
export const ListSessionsHideOperatorsSessionsRequest2$inboundSchema:
  z.ZodNativeEnum<typeof ListSessionsHideOperatorsSessionsRequest2> = z
    .nativeEnum(ListSessionsHideOperatorsSessionsRequest2);

/** @internal */
export const ListSessionsHideOperatorsSessionsRequest2$outboundSchema:
  z.ZodNativeEnum<typeof ListSessionsHideOperatorsSessionsRequest2> =
    ListSessionsHideOperatorsSessionsRequest2$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListSessionsHideOperatorsSessionsRequest2$ {
  /** @deprecated use `ListSessionsHideOperatorsSessionsRequest2$inboundSchema` instead. */
  export const inboundSchema =
    ListSessionsHideOperatorsSessionsRequest2$inboundSchema;
  /** @deprecated use `ListSessionsHideOperatorsSessionsRequest2$outboundSchema` instead. */
  export const outboundSchema =
    ListSessionsHideOperatorsSessionsRequest2$outboundSchema;
}

/** @internal */
export const ListSessionsHideOperatorsSessionsRequest1$inboundSchema:
  z.ZodNativeEnum<typeof ListSessionsHideOperatorsSessionsRequest1> = z
    .nativeEnum(ListSessionsHideOperatorsSessionsRequest1);

/** @internal */
export const ListSessionsHideOperatorsSessionsRequest1$outboundSchema:
  z.ZodNativeEnum<typeof ListSessionsHideOperatorsSessionsRequest1> =
    ListSessionsHideOperatorsSessionsRequest1$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListSessionsHideOperatorsSessionsRequest1$ {
  /** @deprecated use `ListSessionsHideOperatorsSessionsRequest1$inboundSchema` instead. */
  export const inboundSchema =
    ListSessionsHideOperatorsSessionsRequest1$inboundSchema;
  /** @deprecated use `ListSessionsHideOperatorsSessionsRequest1$outboundSchema` instead. */
  export const outboundSchema =
    ListSessionsHideOperatorsSessionsRequest1$outboundSchema;
}

/** @internal */
export const ListSessionsFiltersSessionsHideOperators$inboundSchema: z.ZodType<
  ListSessionsFiltersSessionsHideOperators,
  z.ZodTypeDef,
  unknown
> = z.union([
  ListSessionsHideOperatorsSessionsRequest1$inboundSchema,
  ListSessionsHideOperatorsSessionsRequest2$inboundSchema,
  ListSessionsHideOperatorsSessionsRequest3$inboundSchema,
  ListSessionsHideOperatorsSessionsRequest4$inboundSchema,
  ListSessionsHideOperatorsSessionsRequest5$inboundSchema,
]);

/** @internal */
export type ListSessionsFiltersSessionsHideOperators$Outbound =
  | string
  | string
  | string
  | string
  | string;

/** @internal */
export const ListSessionsFiltersSessionsHideOperators$outboundSchema: z.ZodType<
  ListSessionsFiltersSessionsHideOperators$Outbound,
  z.ZodTypeDef,
  ListSessionsFiltersSessionsHideOperators
> = z.union([
  ListSessionsHideOperatorsSessionsRequest1$outboundSchema,
  ListSessionsHideOperatorsSessionsRequest2$outboundSchema,
  ListSessionsHideOperatorsSessionsRequest3$outboundSchema,
  ListSessionsHideOperatorsSessionsRequest4$outboundSchema,
  ListSessionsHideOperatorsSessionsRequest5$outboundSchema,
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListSessionsFiltersSessionsHideOperators$ {
  /** @deprecated use `ListSessionsFiltersSessionsHideOperators$inboundSchema` instead. */
  export const inboundSchema =
    ListSessionsFiltersSessionsHideOperators$inboundSchema;
  /** @deprecated use `ListSessionsFiltersSessionsHideOperators$outboundSchema` instead. */
  export const outboundSchema =
    ListSessionsFiltersSessionsHideOperators$outboundSchema;
  /** @deprecated use `ListSessionsFiltersSessionsHideOperators$Outbound` instead. */
  export type Outbound = ListSessionsFiltersSessionsHideOperators$Outbound;
}

export function listSessionsFiltersSessionsHideOperatorsToJSON(
  listSessionsFiltersSessionsHideOperators:
    ListSessionsFiltersSessionsHideOperators,
): string {
  return JSON.stringify(
    ListSessionsFiltersSessionsHideOperators$outboundSchema.parse(
      listSessionsFiltersSessionsHideOperators,
    ),
  );
}

export function listSessionsFiltersSessionsHideOperatorsFromJSON(
  jsonString: string,
): SafeParseResult<
  ListSessionsFiltersSessionsHideOperators,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      ListSessionsFiltersSessionsHideOperators$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'ListSessionsFiltersSessionsHideOperators' from JSON`,
  );
}

/** @internal */
export const Filters4$inboundSchema: z.ZodType<
  Filters4,
  z.ZodTypeDef,
  unknown
> = z.object({
  operator: ListSessionsFiltersSessionsRequestOperator$inboundSchema,
  value: z.nullable(z.union([z.number(), z.array(z.number())])),
  type: ListSessionsFiltersSessionsRequestType$inboundSchema,
  name: z.string(),
  path: z.string(),
  hideOperators: z.array(
    z.union([
      ListSessionsHideOperatorsSessionsRequest1$inboundSchema,
      ListSessionsHideOperatorsSessionsRequest2$inboundSchema,
      ListSessionsHideOperatorsSessionsRequest3$inboundSchema,
      ListSessionsHideOperatorsSessionsRequest4$inboundSchema,
      ListSessionsHideOperatorsSessionsRequest5$inboundSchema,
    ]),
  ).optional(),
});

/** @internal */
export type Filters4$Outbound = {
  operator: string;
  value: number | Array<number> | null;
  type: string;
  name: string;
  path: string;
  hideOperators?: Array<string | string | string | string | string> | undefined;
};

/** @internal */
export const Filters4$outboundSchema: z.ZodType<
  Filters4$Outbound,
  z.ZodTypeDef,
  Filters4
> = z.object({
  operator: ListSessionsFiltersSessionsRequestOperator$outboundSchema,
  value: z.nullable(z.union([z.number(), z.array(z.number())])),
  type: ListSessionsFiltersSessionsRequestType$outboundSchema,
  name: z.string(),
  path: z.string(),
  hideOperators: z.array(
    z.union([
      ListSessionsHideOperatorsSessionsRequest1$outboundSchema,
      ListSessionsHideOperatorsSessionsRequest2$outboundSchema,
      ListSessionsHideOperatorsSessionsRequest3$outboundSchema,
      ListSessionsHideOperatorsSessionsRequest4$outboundSchema,
      ListSessionsHideOperatorsSessionsRequest5$outboundSchema,
    ]),
  ).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Filters4$ {
  /** @deprecated use `Filters4$inboundSchema` instead. */
  export const inboundSchema = Filters4$inboundSchema;
  /** @deprecated use `Filters4$outboundSchema` instead. */
  export const outboundSchema = Filters4$outboundSchema;
  /** @deprecated use `Filters4$Outbound` instead. */
  export type Outbound = Filters4$Outbound;
}

export function filters4ToJSON(filters4: Filters4): string {
  return JSON.stringify(Filters4$outboundSchema.parse(filters4));
}

export function filters4FromJSON(
  jsonString: string,
): SafeParseResult<Filters4, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Filters4$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Filters4' from JSON`,
  );
}

/** @internal */
export const ListSessionsFiltersSessionsOperator$inboundSchema: z.ZodNativeEnum<
  typeof ListSessionsFiltersSessionsOperator
> = z.nativeEnum(ListSessionsFiltersSessionsOperator);

/** @internal */
export const ListSessionsFiltersSessionsOperator$outboundSchema:
  z.ZodNativeEnum<typeof ListSessionsFiltersSessionsOperator> =
    ListSessionsFiltersSessionsOperator$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListSessionsFiltersSessionsOperator$ {
  /** @deprecated use `ListSessionsFiltersSessionsOperator$inboundSchema` instead. */
  export const inboundSchema =
    ListSessionsFiltersSessionsOperator$inboundSchema;
  /** @deprecated use `ListSessionsFiltersSessionsOperator$outboundSchema` instead. */
  export const outboundSchema =
    ListSessionsFiltersSessionsOperator$outboundSchema;
}

/** @internal */
export const Unit2$inboundSchema: z.ZodNativeEnum<typeof Unit2> = z.nativeEnum(
  Unit2,
);

/** @internal */
export const Unit2$outboundSchema: z.ZodNativeEnum<typeof Unit2> =
  Unit2$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Unit2$ {
  /** @deprecated use `Unit2$inboundSchema` instead. */
  export const inboundSchema = Unit2$inboundSchema;
  /** @deprecated use `Unit2$outboundSchema` instead. */
  export const outboundSchema = Unit2$outboundSchema;
}

/** @internal */
export const Unit1$inboundSchema: z.ZodNativeEnum<typeof Unit1> = z.nativeEnum(
  Unit1,
);

/** @internal */
export const Unit1$outboundSchema: z.ZodNativeEnum<typeof Unit1> =
  Unit1$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Unit1$ {
  /** @deprecated use `Unit1$inboundSchema` instead. */
  export const inboundSchema = Unit1$inboundSchema;
  /** @deprecated use `Unit1$outboundSchema` instead. */
  export const outboundSchema = Unit1$outboundSchema;
}

/** @internal */
export const Unit$inboundSchema: z.ZodType<Unit, z.ZodTypeDef, unknown> = z
  .union([Unit1$inboundSchema, Unit2$inboundSchema]);

/** @internal */
export type Unit$Outbound = string | string;

/** @internal */
export const Unit$outboundSchema: z.ZodType<Unit$Outbound, z.ZodTypeDef, Unit> =
  z.union([Unit1$outboundSchema, Unit2$outboundSchema]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Unit$ {
  /** @deprecated use `Unit$inboundSchema` instead. */
  export const inboundSchema = Unit$inboundSchema;
  /** @deprecated use `Unit$outboundSchema` instead. */
  export const outboundSchema = Unit$outboundSchema;
  /** @deprecated use `Unit$Outbound` instead. */
  export type Outbound = Unit$Outbound;
}

export function unitToJSON(unit: Unit): string {
  return JSON.stringify(Unit$outboundSchema.parse(unit));
}

export function unitFromJSON(
  jsonString: string,
): SafeParseResult<Unit, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Unit$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Unit' from JSON`,
  );
}

/** @internal */
export const RelativeTime$inboundSchema: z.ZodNativeEnum<typeof RelativeTime> =
  z.nativeEnum(RelativeTime);

/** @internal */
export const RelativeTime$outboundSchema: z.ZodNativeEnum<typeof RelativeTime> =
  RelativeTime$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RelativeTime$ {
  /** @deprecated use `RelativeTime$inboundSchema` instead. */
  export const inboundSchema = RelativeTime$inboundSchema;
  /** @deprecated use `RelativeTime$outboundSchema` instead. */
  export const outboundSchema = RelativeTime$outboundSchema;
}

/** @internal */
export const FiltersDirection$inboundSchema: z.ZodNativeEnum<
  typeof FiltersDirection
> = z.nativeEnum(FiltersDirection);

/** @internal */
export const FiltersDirection$outboundSchema: z.ZodNativeEnum<
  typeof FiltersDirection
> = FiltersDirection$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FiltersDirection$ {
  /** @deprecated use `FiltersDirection$inboundSchema` instead. */
  export const inboundSchema = FiltersDirection$inboundSchema;
  /** @deprecated use `FiltersDirection$outboundSchema` instead. */
  export const outboundSchema = FiltersDirection$outboundSchema;
}

/** @internal */
export const Criteria$inboundSchema: z.ZodType<
  Criteria,
  z.ZodTypeDef,
  unknown
> = z.object({
  unit: z.union([Unit1$inboundSchema, Unit2$inboundSchema]).optional(),
  count: z.nullable(z.number()).optional(),
  relativeTime: RelativeTime$inboundSchema.optional(),
  customDate: z.nullable(z.string()).optional(),
  direction: FiltersDirection$inboundSchema.optional(),
  startDate: z.nullable(z.string()).optional(),
  endDate: z.nullable(z.string()).optional(),
});

/** @internal */
export type Criteria$Outbound = {
  unit?: string | string | undefined;
  count?: number | null | undefined;
  relativeTime?: string | undefined;
  customDate?: string | null | undefined;
  direction?: string | undefined;
  startDate?: string | null | undefined;
  endDate?: string | null | undefined;
};

/** @internal */
export const Criteria$outboundSchema: z.ZodType<
  Criteria$Outbound,
  z.ZodTypeDef,
  Criteria
> = z.object({
  unit: z.union([Unit1$outboundSchema, Unit2$outboundSchema]).optional(),
  count: z.nullable(z.number()).optional(),
  relativeTime: RelativeTime$outboundSchema.optional(),
  customDate: z.nullable(z.string()).optional(),
  direction: FiltersDirection$outboundSchema.optional(),
  startDate: z.nullable(z.string()).optional(),
  endDate: z.nullable(z.string()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Criteria$ {
  /** @deprecated use `Criteria$inboundSchema` instead. */
  export const inboundSchema = Criteria$inboundSchema;
  /** @deprecated use `Criteria$outboundSchema` instead. */
  export const outboundSchema = Criteria$outboundSchema;
  /** @deprecated use `Criteria$Outbound` instead. */
  export type Outbound = Criteria$Outbound;
}

export function criteriaToJSON(criteria: Criteria): string {
  return JSON.stringify(Criteria$outboundSchema.parse(criteria));
}

export function criteriaFromJSON(
  jsonString: string,
): SafeParseResult<Criteria, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Criteria$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Criteria' from JSON`,
  );
}

/** @internal */
export const Mode$inboundSchema: z.ZodNativeEnum<typeof Mode> = z.nativeEnum(
  Mode,
);

/** @internal */
export const Mode$outboundSchema: z.ZodNativeEnum<typeof Mode> =
  Mode$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Mode$ {
  /** @deprecated use `Mode$inboundSchema` instead. */
  export const inboundSchema = Mode$inboundSchema;
  /** @deprecated use `Mode$outboundSchema` instead. */
  export const outboundSchema = Mode$outboundSchema;
}

/** @internal */
export const FiltersValue$inboundSchema: z.ZodType<
  FiltersValue,
  z.ZodTypeDef,
  unknown
> = z.object({
  criteria: z.nullable(z.lazy(() => Criteria$inboundSchema)),
  mode: Mode$inboundSchema,
});

/** @internal */
export type FiltersValue$Outbound = {
  criteria: Criteria$Outbound | null;
  mode: string;
};

/** @internal */
export const FiltersValue$outboundSchema: z.ZodType<
  FiltersValue$Outbound,
  z.ZodTypeDef,
  FiltersValue
> = z.object({
  criteria: z.nullable(z.lazy(() => Criteria$outboundSchema)),
  mode: Mode$outboundSchema,
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FiltersValue$ {
  /** @deprecated use `FiltersValue$inboundSchema` instead. */
  export const inboundSchema = FiltersValue$inboundSchema;
  /** @deprecated use `FiltersValue$outboundSchema` instead. */
  export const outboundSchema = FiltersValue$outboundSchema;
  /** @deprecated use `FiltersValue$Outbound` instead. */
  export type Outbound = FiltersValue$Outbound;
}

export function filtersValueToJSON(filtersValue: FiltersValue): string {
  return JSON.stringify(FiltersValue$outboundSchema.parse(filtersValue));
}

export function filtersValueFromJSON(
  jsonString: string,
): SafeParseResult<FiltersValue, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => FiltersValue$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'FiltersValue' from JSON`,
  );
}

/** @internal */
export const ListSessionsFiltersSessionsType$inboundSchema: z.ZodNativeEnum<
  typeof ListSessionsFiltersSessionsType
> = z.nativeEnum(ListSessionsFiltersSessionsType);

/** @internal */
export const ListSessionsFiltersSessionsType$outboundSchema: z.ZodNativeEnum<
  typeof ListSessionsFiltersSessionsType
> = ListSessionsFiltersSessionsType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListSessionsFiltersSessionsType$ {
  /** @deprecated use `ListSessionsFiltersSessionsType$inboundSchema` instead. */
  export const inboundSchema = ListSessionsFiltersSessionsType$inboundSchema;
  /** @deprecated use `ListSessionsFiltersSessionsType$outboundSchema` instead. */
  export const outboundSchema = ListSessionsFiltersSessionsType$outboundSchema;
}

/** @internal */
export const ListSessionsHideOperatorsSessions5$inboundSchema: z.ZodNativeEnum<
  typeof ListSessionsHideOperatorsSessions5
> = z.nativeEnum(ListSessionsHideOperatorsSessions5);

/** @internal */
export const ListSessionsHideOperatorsSessions5$outboundSchema: z.ZodNativeEnum<
  typeof ListSessionsHideOperatorsSessions5
> = ListSessionsHideOperatorsSessions5$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListSessionsHideOperatorsSessions5$ {
  /** @deprecated use `ListSessionsHideOperatorsSessions5$inboundSchema` instead. */
  export const inboundSchema = ListSessionsHideOperatorsSessions5$inboundSchema;
  /** @deprecated use `ListSessionsHideOperatorsSessions5$outboundSchema` instead. */
  export const outboundSchema =
    ListSessionsHideOperatorsSessions5$outboundSchema;
}

/** @internal */
export const ListSessionsHideOperatorsSessions4$inboundSchema: z.ZodNativeEnum<
  typeof ListSessionsHideOperatorsSessions4
> = z.nativeEnum(ListSessionsHideOperatorsSessions4);

/** @internal */
export const ListSessionsHideOperatorsSessions4$outboundSchema: z.ZodNativeEnum<
  typeof ListSessionsHideOperatorsSessions4
> = ListSessionsHideOperatorsSessions4$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListSessionsHideOperatorsSessions4$ {
  /** @deprecated use `ListSessionsHideOperatorsSessions4$inboundSchema` instead. */
  export const inboundSchema = ListSessionsHideOperatorsSessions4$inboundSchema;
  /** @deprecated use `ListSessionsHideOperatorsSessions4$outboundSchema` instead. */
  export const outboundSchema =
    ListSessionsHideOperatorsSessions4$outboundSchema;
}

/** @internal */
export const ListSessionsHideOperatorsSessions3$inboundSchema: z.ZodNativeEnum<
  typeof ListSessionsHideOperatorsSessions3
> = z.nativeEnum(ListSessionsHideOperatorsSessions3);

/** @internal */
export const ListSessionsHideOperatorsSessions3$outboundSchema: z.ZodNativeEnum<
  typeof ListSessionsHideOperatorsSessions3
> = ListSessionsHideOperatorsSessions3$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListSessionsHideOperatorsSessions3$ {
  /** @deprecated use `ListSessionsHideOperatorsSessions3$inboundSchema` instead. */
  export const inboundSchema = ListSessionsHideOperatorsSessions3$inboundSchema;
  /** @deprecated use `ListSessionsHideOperatorsSessions3$outboundSchema` instead. */
  export const outboundSchema =
    ListSessionsHideOperatorsSessions3$outboundSchema;
}

/** @internal */
export const ListSessionsHideOperatorsSessions2$inboundSchema: z.ZodNativeEnum<
  typeof ListSessionsHideOperatorsSessions2
> = z.nativeEnum(ListSessionsHideOperatorsSessions2);

/** @internal */
export const ListSessionsHideOperatorsSessions2$outboundSchema: z.ZodNativeEnum<
  typeof ListSessionsHideOperatorsSessions2
> = ListSessionsHideOperatorsSessions2$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListSessionsHideOperatorsSessions2$ {
  /** @deprecated use `ListSessionsHideOperatorsSessions2$inboundSchema` instead. */
  export const inboundSchema = ListSessionsHideOperatorsSessions2$inboundSchema;
  /** @deprecated use `ListSessionsHideOperatorsSessions2$outboundSchema` instead. */
  export const outboundSchema =
    ListSessionsHideOperatorsSessions2$outboundSchema;
}

/** @internal */
export const ListSessionsHideOperatorsSessions1$inboundSchema: z.ZodNativeEnum<
  typeof ListSessionsHideOperatorsSessions1
> = z.nativeEnum(ListSessionsHideOperatorsSessions1);

/** @internal */
export const ListSessionsHideOperatorsSessions1$outboundSchema: z.ZodNativeEnum<
  typeof ListSessionsHideOperatorsSessions1
> = ListSessionsHideOperatorsSessions1$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListSessionsHideOperatorsSessions1$ {
  /** @deprecated use `ListSessionsHideOperatorsSessions1$inboundSchema` instead. */
  export const inboundSchema = ListSessionsHideOperatorsSessions1$inboundSchema;
  /** @deprecated use `ListSessionsHideOperatorsSessions1$outboundSchema` instead. */
  export const outboundSchema =
    ListSessionsHideOperatorsSessions1$outboundSchema;
}

/** @internal */
export const ListSessionsFiltersHideOperators$inboundSchema: z.ZodType<
  ListSessionsFiltersHideOperators,
  z.ZodTypeDef,
  unknown
> = z.union([
  ListSessionsHideOperatorsSessions1$inboundSchema,
  ListSessionsHideOperatorsSessions2$inboundSchema,
  ListSessionsHideOperatorsSessions3$inboundSchema,
  ListSessionsHideOperatorsSessions4$inboundSchema,
  ListSessionsHideOperatorsSessions5$inboundSchema,
]);

/** @internal */
export type ListSessionsFiltersHideOperators$Outbound =
  | string
  | string
  | string
  | string
  | string;

/** @internal */
export const ListSessionsFiltersHideOperators$outboundSchema: z.ZodType<
  ListSessionsFiltersHideOperators$Outbound,
  z.ZodTypeDef,
  ListSessionsFiltersHideOperators
> = z.union([
  ListSessionsHideOperatorsSessions1$outboundSchema,
  ListSessionsHideOperatorsSessions2$outboundSchema,
  ListSessionsHideOperatorsSessions3$outboundSchema,
  ListSessionsHideOperatorsSessions4$outboundSchema,
  ListSessionsHideOperatorsSessions5$outboundSchema,
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListSessionsFiltersHideOperators$ {
  /** @deprecated use `ListSessionsFiltersHideOperators$inboundSchema` instead. */
  export const inboundSchema = ListSessionsFiltersHideOperators$inboundSchema;
  /** @deprecated use `ListSessionsFiltersHideOperators$outboundSchema` instead. */
  export const outboundSchema = ListSessionsFiltersHideOperators$outboundSchema;
  /** @deprecated use `ListSessionsFiltersHideOperators$Outbound` instead. */
  export type Outbound = ListSessionsFiltersHideOperators$Outbound;
}

export function listSessionsFiltersHideOperatorsToJSON(
  listSessionsFiltersHideOperators: ListSessionsFiltersHideOperators,
): string {
  return JSON.stringify(
    ListSessionsFiltersHideOperators$outboundSchema.parse(
      listSessionsFiltersHideOperators,
    ),
  );
}

export function listSessionsFiltersHideOperatorsFromJSON(
  jsonString: string,
): SafeParseResult<ListSessionsFiltersHideOperators, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListSessionsFiltersHideOperators$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListSessionsFiltersHideOperators' from JSON`,
  );
}

/** @internal */
export const Filters3$inboundSchema: z.ZodType<
  Filters3,
  z.ZodTypeDef,
  unknown
> = z.object({
  operator: ListSessionsFiltersSessionsOperator$inboundSchema,
  value: z.lazy(() => FiltersValue$inboundSchema),
  type: ListSessionsFiltersSessionsType$inboundSchema,
  name: z.string(),
  path: z.string(),
  hideOperators: z.array(
    z.union([
      ListSessionsHideOperatorsSessions1$inboundSchema,
      ListSessionsHideOperatorsSessions2$inboundSchema,
      ListSessionsHideOperatorsSessions3$inboundSchema,
      ListSessionsHideOperatorsSessions4$inboundSchema,
      ListSessionsHideOperatorsSessions5$inboundSchema,
    ]),
  ).optional(),
});

/** @internal */
export type Filters3$Outbound = {
  operator: string;
  value: FiltersValue$Outbound;
  type: string;
  name: string;
  path: string;
  hideOperators?: Array<string | string | string | string | string> | undefined;
};

/** @internal */
export const Filters3$outboundSchema: z.ZodType<
  Filters3$Outbound,
  z.ZodTypeDef,
  Filters3
> = z.object({
  operator: ListSessionsFiltersSessionsOperator$outboundSchema,
  value: z.lazy(() => FiltersValue$outboundSchema),
  type: ListSessionsFiltersSessionsType$outboundSchema,
  name: z.string(),
  path: z.string(),
  hideOperators: z.array(
    z.union([
      ListSessionsHideOperatorsSessions1$outboundSchema,
      ListSessionsHideOperatorsSessions2$outboundSchema,
      ListSessionsHideOperatorsSessions3$outboundSchema,
      ListSessionsHideOperatorsSessions4$outboundSchema,
      ListSessionsHideOperatorsSessions5$outboundSchema,
    ]),
  ).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Filters3$ {
  /** @deprecated use `Filters3$inboundSchema` instead. */
  export const inboundSchema = Filters3$inboundSchema;
  /** @deprecated use `Filters3$outboundSchema` instead. */
  export const outboundSchema = Filters3$outboundSchema;
  /** @deprecated use `Filters3$Outbound` instead. */
  export type Outbound = Filters3$Outbound;
}

export function filters3ToJSON(filters3: Filters3): string {
  return JSON.stringify(Filters3$outboundSchema.parse(filters3));
}

export function filters3FromJSON(
  jsonString: string,
): SafeParseResult<Filters3, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Filters3$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Filters3' from JSON`,
  );
}

/** @internal */
export const ListSessionsFiltersOperator$inboundSchema: z.ZodNativeEnum<
  typeof ListSessionsFiltersOperator
> = z.nativeEnum(ListSessionsFiltersOperator);

/** @internal */
export const ListSessionsFiltersOperator$outboundSchema: z.ZodNativeEnum<
  typeof ListSessionsFiltersOperator
> = ListSessionsFiltersOperator$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListSessionsFiltersOperator$ {
  /** @deprecated use `ListSessionsFiltersOperator$inboundSchema` instead. */
  export const inboundSchema = ListSessionsFiltersOperator$inboundSchema;
  /** @deprecated use `ListSessionsFiltersOperator$outboundSchema` instead. */
  export const outboundSchema = ListSessionsFiltersOperator$outboundSchema;
}

/** @internal */
export const ListSessionsFiltersType$inboundSchema: z.ZodNativeEnum<
  typeof ListSessionsFiltersType
> = z.nativeEnum(ListSessionsFiltersType);

/** @internal */
export const ListSessionsFiltersType$outboundSchema: z.ZodNativeEnum<
  typeof ListSessionsFiltersType
> = ListSessionsFiltersType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListSessionsFiltersType$ {
  /** @deprecated use `ListSessionsFiltersType$inboundSchema` instead. */
  export const inboundSchema = ListSessionsFiltersType$inboundSchema;
  /** @deprecated use `ListSessionsFiltersType$outboundSchema` instead. */
  export const outboundSchema = ListSessionsFiltersType$outboundSchema;
}

/** @internal */
export const FiltersOptions$inboundSchema: z.ZodType<
  FiltersOptions,
  z.ZodTypeDef,
  unknown
> = z.union([z.string(), z.number()]);

/** @internal */
export type FiltersOptions$Outbound = string | number;

/** @internal */
export const FiltersOptions$outboundSchema: z.ZodType<
  FiltersOptions$Outbound,
  z.ZodTypeDef,
  FiltersOptions
> = z.union([z.string(), z.number()]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FiltersOptions$ {
  /** @deprecated use `FiltersOptions$inboundSchema` instead. */
  export const inboundSchema = FiltersOptions$inboundSchema;
  /** @deprecated use `FiltersOptions$outboundSchema` instead. */
  export const outboundSchema = FiltersOptions$outboundSchema;
  /** @deprecated use `FiltersOptions$Outbound` instead. */
  export type Outbound = FiltersOptions$Outbound;
}

export function filtersOptionsToJSON(filtersOptions: FiltersOptions): string {
  return JSON.stringify(FiltersOptions$outboundSchema.parse(filtersOptions));
}

export function filtersOptionsFromJSON(
  jsonString: string,
): SafeParseResult<FiltersOptions, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => FiltersOptions$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'FiltersOptions' from JSON`,
  );
}

/** @internal */
export const FiltersOptionsMap$inboundSchema: z.ZodType<
  FiltersOptionsMap,
  z.ZodTypeDef,
  unknown
> = z.union([z.string(), z.number()]);

/** @internal */
export type FiltersOptionsMap$Outbound = string | number;

/** @internal */
export const FiltersOptionsMap$outboundSchema: z.ZodType<
  FiltersOptionsMap$Outbound,
  z.ZodTypeDef,
  FiltersOptionsMap
> = z.union([z.string(), z.number()]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FiltersOptionsMap$ {
  /** @deprecated use `FiltersOptionsMap$inboundSchema` instead. */
  export const inboundSchema = FiltersOptionsMap$inboundSchema;
  /** @deprecated use `FiltersOptionsMap$outboundSchema` instead. */
  export const outboundSchema = FiltersOptionsMap$outboundSchema;
  /** @deprecated use `FiltersOptionsMap$Outbound` instead. */
  export type Outbound = FiltersOptionsMap$Outbound;
}

export function filtersOptionsMapToJSON(
  filtersOptionsMap: FiltersOptionsMap,
): string {
  return JSON.stringify(
    FiltersOptionsMap$outboundSchema.parse(filtersOptionsMap),
  );
}

export function filtersOptionsMapFromJSON(
  jsonString: string,
): SafeParseResult<FiltersOptionsMap, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => FiltersOptionsMap$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'FiltersOptionsMap' from JSON`,
  );
}

/** @internal */
export const ListSessionsHideOperators5$inboundSchema: z.ZodNativeEnum<
  typeof ListSessionsHideOperators5
> = z.nativeEnum(ListSessionsHideOperators5);

/** @internal */
export const ListSessionsHideOperators5$outboundSchema: z.ZodNativeEnum<
  typeof ListSessionsHideOperators5
> = ListSessionsHideOperators5$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListSessionsHideOperators5$ {
  /** @deprecated use `ListSessionsHideOperators5$inboundSchema` instead. */
  export const inboundSchema = ListSessionsHideOperators5$inboundSchema;
  /** @deprecated use `ListSessionsHideOperators5$outboundSchema` instead. */
  export const outboundSchema = ListSessionsHideOperators5$outboundSchema;
}

/** @internal */
export const ListSessionsHideOperators4$inboundSchema: z.ZodNativeEnum<
  typeof ListSessionsHideOperators4
> = z.nativeEnum(ListSessionsHideOperators4);

/** @internal */
export const ListSessionsHideOperators4$outboundSchema: z.ZodNativeEnum<
  typeof ListSessionsHideOperators4
> = ListSessionsHideOperators4$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListSessionsHideOperators4$ {
  /** @deprecated use `ListSessionsHideOperators4$inboundSchema` instead. */
  export const inboundSchema = ListSessionsHideOperators4$inboundSchema;
  /** @deprecated use `ListSessionsHideOperators4$outboundSchema` instead. */
  export const outboundSchema = ListSessionsHideOperators4$outboundSchema;
}

/** @internal */
export const ListSessionsHideOperators3$inboundSchema: z.ZodNativeEnum<
  typeof ListSessionsHideOperators3
> = z.nativeEnum(ListSessionsHideOperators3);

/** @internal */
export const ListSessionsHideOperators3$outboundSchema: z.ZodNativeEnum<
  typeof ListSessionsHideOperators3
> = ListSessionsHideOperators3$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListSessionsHideOperators3$ {
  /** @deprecated use `ListSessionsHideOperators3$inboundSchema` instead. */
  export const inboundSchema = ListSessionsHideOperators3$inboundSchema;
  /** @deprecated use `ListSessionsHideOperators3$outboundSchema` instead. */
  export const outboundSchema = ListSessionsHideOperators3$outboundSchema;
}

/** @internal */
export const ListSessionsHideOperators2$inboundSchema: z.ZodNativeEnum<
  typeof ListSessionsHideOperators2
> = z.nativeEnum(ListSessionsHideOperators2);

/** @internal */
export const ListSessionsHideOperators2$outboundSchema: z.ZodNativeEnum<
  typeof ListSessionsHideOperators2
> = ListSessionsHideOperators2$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListSessionsHideOperators2$ {
  /** @deprecated use `ListSessionsHideOperators2$inboundSchema` instead. */
  export const inboundSchema = ListSessionsHideOperators2$inboundSchema;
  /** @deprecated use `ListSessionsHideOperators2$outboundSchema` instead. */
  export const outboundSchema = ListSessionsHideOperators2$outboundSchema;
}

/** @internal */
export const ListSessionsHideOperators1$inboundSchema: z.ZodNativeEnum<
  typeof ListSessionsHideOperators1
> = z.nativeEnum(ListSessionsHideOperators1);

/** @internal */
export const ListSessionsHideOperators1$outboundSchema: z.ZodNativeEnum<
  typeof ListSessionsHideOperators1
> = ListSessionsHideOperators1$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListSessionsHideOperators1$ {
  /** @deprecated use `ListSessionsHideOperators1$inboundSchema` instead. */
  export const inboundSchema = ListSessionsHideOperators1$inboundSchema;
  /** @deprecated use `ListSessionsHideOperators1$outboundSchema` instead. */
  export const outboundSchema = ListSessionsHideOperators1$outboundSchema;
}

/** @internal */
export const FiltersHideOperators$inboundSchema: z.ZodType<
  FiltersHideOperators,
  z.ZodTypeDef,
  unknown
> = z.union([
  ListSessionsHideOperators1$inboundSchema,
  ListSessionsHideOperators2$inboundSchema,
  ListSessionsHideOperators3$inboundSchema,
  ListSessionsHideOperators4$inboundSchema,
  ListSessionsHideOperators5$inboundSchema,
]);

/** @internal */
export type FiltersHideOperators$Outbound =
  | string
  | string
  | string
  | string
  | string;

/** @internal */
export const FiltersHideOperators$outboundSchema: z.ZodType<
  FiltersHideOperators$Outbound,
  z.ZodTypeDef,
  FiltersHideOperators
> = z.union([
  ListSessionsHideOperators1$outboundSchema,
  ListSessionsHideOperators2$outboundSchema,
  ListSessionsHideOperators3$outboundSchema,
  ListSessionsHideOperators4$outboundSchema,
  ListSessionsHideOperators5$outboundSchema,
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FiltersHideOperators$ {
  /** @deprecated use `FiltersHideOperators$inboundSchema` instead. */
  export const inboundSchema = FiltersHideOperators$inboundSchema;
  /** @deprecated use `FiltersHideOperators$outboundSchema` instead. */
  export const outboundSchema = FiltersHideOperators$outboundSchema;
  /** @deprecated use `FiltersHideOperators$Outbound` instead. */
  export type Outbound = FiltersHideOperators$Outbound;
}

export function filtersHideOperatorsToJSON(
  filtersHideOperators: FiltersHideOperators,
): string {
  return JSON.stringify(
    FiltersHideOperators$outboundSchema.parse(filtersHideOperators),
  );
}

export function filtersHideOperatorsFromJSON(
  jsonString: string,
): SafeParseResult<FiltersHideOperators, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => FiltersHideOperators$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'FiltersHideOperators' from JSON`,
  );
}

/** @internal */
export const Filters2$inboundSchema: z.ZodType<
  Filters2,
  z.ZodTypeDef,
  unknown
> = z.object({
  operator: ListSessionsFiltersOperator$inboundSchema,
  value: z.nullable(z.array(z.any())),
  type: ListSessionsFiltersType$inboundSchema,
  options: z.array(z.union([z.string(), z.number()])),
  optionsMap: z.nullable(z.record(z.union([z.string(), z.number()])))
    .optional(),
  imageUrlMap: z.record(z.string()).optional(),
  name: z.string(),
  path: z.string(),
  hideOperators: z.array(
    z.union([
      ListSessionsHideOperators1$inboundSchema,
      ListSessionsHideOperators2$inboundSchema,
      ListSessionsHideOperators3$inboundSchema,
      ListSessionsHideOperators4$inboundSchema,
      ListSessionsHideOperators5$inboundSchema,
    ]),
  ).optional(),
});

/** @internal */
export type Filters2$Outbound = {
  operator: string;
  value: Array<any> | null;
  type: string;
  options: Array<string | number>;
  optionsMap?: { [k: string]: string | number } | null | undefined;
  imageUrlMap?: { [k: string]: string } | undefined;
  name: string;
  path: string;
  hideOperators?: Array<string | string | string | string | string> | undefined;
};

/** @internal */
export const Filters2$outboundSchema: z.ZodType<
  Filters2$Outbound,
  z.ZodTypeDef,
  Filters2
> = z.object({
  operator: ListSessionsFiltersOperator$outboundSchema,
  value: z.nullable(z.array(z.any())),
  type: ListSessionsFiltersType$outboundSchema,
  options: z.array(z.union([z.string(), z.number()])),
  optionsMap: z.nullable(z.record(z.union([z.string(), z.number()])))
    .optional(),
  imageUrlMap: z.record(z.string()).optional(),
  name: z.string(),
  path: z.string(),
  hideOperators: z.array(
    z.union([
      ListSessionsHideOperators1$outboundSchema,
      ListSessionsHideOperators2$outboundSchema,
      ListSessionsHideOperators3$outboundSchema,
      ListSessionsHideOperators4$outboundSchema,
      ListSessionsHideOperators5$outboundSchema,
    ]),
  ).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Filters2$ {
  /** @deprecated use `Filters2$inboundSchema` instead. */
  export const inboundSchema = Filters2$inboundSchema;
  /** @deprecated use `Filters2$outboundSchema` instead. */
  export const outboundSchema = Filters2$outboundSchema;
  /** @deprecated use `Filters2$Outbound` instead. */
  export type Outbound = Filters2$Outbound;
}

export function filters2ToJSON(filters2: Filters2): string {
  return JSON.stringify(Filters2$outboundSchema.parse(filters2));
}

export function filters2FromJSON(
  jsonString: string,
): SafeParseResult<Filters2, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Filters2$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Filters2' from JSON`,
  );
}

/** @internal */
export const FiltersOperator$inboundSchema: z.ZodNativeEnum<
  typeof FiltersOperator
> = z.nativeEnum(FiltersOperator);

/** @internal */
export const FiltersOperator$outboundSchema: z.ZodNativeEnum<
  typeof FiltersOperator
> = FiltersOperator$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FiltersOperator$ {
  /** @deprecated use `FiltersOperator$inboundSchema` instead. */
  export const inboundSchema = FiltersOperator$inboundSchema;
  /** @deprecated use `FiltersOperator$outboundSchema` instead. */
  export const outboundSchema = FiltersOperator$outboundSchema;
}

/** @internal */
export const FiltersType$inboundSchema: z.ZodNativeEnum<typeof FiltersType> = z
  .nativeEnum(FiltersType);

/** @internal */
export const FiltersType$outboundSchema: z.ZodNativeEnum<typeof FiltersType> =
  FiltersType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FiltersType$ {
  /** @deprecated use `FiltersType$inboundSchema` instead. */
  export const inboundSchema = FiltersType$inboundSchema;
  /** @deprecated use `FiltersType$outboundSchema` instead. */
  export const outboundSchema = FiltersType$outboundSchema;
}

/** @internal */
export const Options$inboundSchema: z.ZodType<Options, z.ZodTypeDef, unknown> =
  z.union([z.string(), z.number()]);

/** @internal */
export type Options$Outbound = string | number;

/** @internal */
export const Options$outboundSchema: z.ZodType<
  Options$Outbound,
  z.ZodTypeDef,
  Options
> = z.union([z.string(), z.number()]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Options$ {
  /** @deprecated use `Options$inboundSchema` instead. */
  export const inboundSchema = Options$inboundSchema;
  /** @deprecated use `Options$outboundSchema` instead. */
  export const outboundSchema = Options$outboundSchema;
  /** @deprecated use `Options$Outbound` instead. */
  export type Outbound = Options$Outbound;
}

export function optionsToJSON(options: Options): string {
  return JSON.stringify(Options$outboundSchema.parse(options));
}

export function optionsFromJSON(
  jsonString: string,
): SafeParseResult<Options, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Options$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Options' from JSON`,
  );
}

/** @internal */
export const OptionsMap$inboundSchema: z.ZodType<
  OptionsMap,
  z.ZodTypeDef,
  unknown
> = z.union([z.string(), z.number()]);

/** @internal */
export type OptionsMap$Outbound = string | number;

/** @internal */
export const OptionsMap$outboundSchema: z.ZodType<
  OptionsMap$Outbound,
  z.ZodTypeDef,
  OptionsMap
> = z.union([z.string(), z.number()]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OptionsMap$ {
  /** @deprecated use `OptionsMap$inboundSchema` instead. */
  export const inboundSchema = OptionsMap$inboundSchema;
  /** @deprecated use `OptionsMap$outboundSchema` instead. */
  export const outboundSchema = OptionsMap$outboundSchema;
  /** @deprecated use `OptionsMap$Outbound` instead. */
  export type Outbound = OptionsMap$Outbound;
}

export function optionsMapToJSON(optionsMap: OptionsMap): string {
  return JSON.stringify(OptionsMap$outboundSchema.parse(optionsMap));
}

export function optionsMapFromJSON(
  jsonString: string,
): SafeParseResult<OptionsMap, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => OptionsMap$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'OptionsMap' from JSON`,
  );
}

/** @internal */
export const HideOperators5$inboundSchema: z.ZodNativeEnum<
  typeof HideOperators5
> = z.nativeEnum(HideOperators5);

/** @internal */
export const HideOperators5$outboundSchema: z.ZodNativeEnum<
  typeof HideOperators5
> = HideOperators5$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HideOperators5$ {
  /** @deprecated use `HideOperators5$inboundSchema` instead. */
  export const inboundSchema = HideOperators5$inboundSchema;
  /** @deprecated use `HideOperators5$outboundSchema` instead. */
  export const outboundSchema = HideOperators5$outboundSchema;
}

/** @internal */
export const HideOperators4$inboundSchema: z.ZodNativeEnum<
  typeof HideOperators4
> = z.nativeEnum(HideOperators4);

/** @internal */
export const HideOperators4$outboundSchema: z.ZodNativeEnum<
  typeof HideOperators4
> = HideOperators4$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HideOperators4$ {
  /** @deprecated use `HideOperators4$inboundSchema` instead. */
  export const inboundSchema = HideOperators4$inboundSchema;
  /** @deprecated use `HideOperators4$outboundSchema` instead. */
  export const outboundSchema = HideOperators4$outboundSchema;
}

/** @internal */
export const HideOperators3$inboundSchema: z.ZodNativeEnum<
  typeof HideOperators3
> = z.nativeEnum(HideOperators3);

/** @internal */
export const HideOperators3$outboundSchema: z.ZodNativeEnum<
  typeof HideOperators3
> = HideOperators3$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HideOperators3$ {
  /** @deprecated use `HideOperators3$inboundSchema` instead. */
  export const inboundSchema = HideOperators3$inboundSchema;
  /** @deprecated use `HideOperators3$outboundSchema` instead. */
  export const outboundSchema = HideOperators3$outboundSchema;
}

/** @internal */
export const HideOperators2$inboundSchema: z.ZodNativeEnum<
  typeof HideOperators2
> = z.nativeEnum(HideOperators2);

/** @internal */
export const HideOperators2$outboundSchema: z.ZodNativeEnum<
  typeof HideOperators2
> = HideOperators2$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HideOperators2$ {
  /** @deprecated use `HideOperators2$inboundSchema` instead. */
  export const inboundSchema = HideOperators2$inboundSchema;
  /** @deprecated use `HideOperators2$outboundSchema` instead. */
  export const outboundSchema = HideOperators2$outboundSchema;
}

/** @internal */
export const HideOperators1$inboundSchema: z.ZodNativeEnum<
  typeof HideOperators1
> = z.nativeEnum(HideOperators1);

/** @internal */
export const HideOperators1$outboundSchema: z.ZodNativeEnum<
  typeof HideOperators1
> = HideOperators1$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HideOperators1$ {
  /** @deprecated use `HideOperators1$inboundSchema` instead. */
  export const inboundSchema = HideOperators1$inboundSchema;
  /** @deprecated use `HideOperators1$outboundSchema` instead. */
  export const outboundSchema = HideOperators1$outboundSchema;
}

/** @internal */
export const HideOperators$inboundSchema: z.ZodType<
  HideOperators,
  z.ZodTypeDef,
  unknown
> = z.union([
  HideOperators1$inboundSchema,
  HideOperators2$inboundSchema,
  HideOperators3$inboundSchema,
  HideOperators4$inboundSchema,
  HideOperators5$inboundSchema,
]);

/** @internal */
export type HideOperators$Outbound = string | string | string | string | string;

/** @internal */
export const HideOperators$outboundSchema: z.ZodType<
  HideOperators$Outbound,
  z.ZodTypeDef,
  HideOperators
> = z.union([
  HideOperators1$outboundSchema,
  HideOperators2$outboundSchema,
  HideOperators3$outboundSchema,
  HideOperators4$outboundSchema,
  HideOperators5$outboundSchema,
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HideOperators$ {
  /** @deprecated use `HideOperators$inboundSchema` instead. */
  export const inboundSchema = HideOperators$inboundSchema;
  /** @deprecated use `HideOperators$outboundSchema` instead. */
  export const outboundSchema = HideOperators$outboundSchema;
  /** @deprecated use `HideOperators$Outbound` instead. */
  export type Outbound = HideOperators$Outbound;
}

export function hideOperatorsToJSON(hideOperators: HideOperators): string {
  return JSON.stringify(HideOperators$outboundSchema.parse(hideOperators));
}

export function hideOperatorsFromJSON(
  jsonString: string,
): SafeParseResult<HideOperators, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => HideOperators$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'HideOperators' from JSON`,
  );
}

/** @internal */
export const Filters1$inboundSchema: z.ZodType<
  Filters1,
  z.ZodTypeDef,
  unknown
> = z.object({
  operator: FiltersOperator$inboundSchema,
  value: z.any().optional(),
  type: FiltersType$inboundSchema,
  options: z.array(z.union([z.string(), z.number()])),
  optionsMap: z.nullable(z.record(z.union([z.string(), z.number()])))
    .optional(),
  imageUrlMap: z.record(z.string()).optional(),
  name: z.string(),
  path: z.string(),
  hideOperators: z.array(
    z.union([
      HideOperators1$inboundSchema,
      HideOperators2$inboundSchema,
      HideOperators3$inboundSchema,
      HideOperators4$inboundSchema,
      HideOperators5$inboundSchema,
    ]),
  ).optional(),
});

/** @internal */
export type Filters1$Outbound = {
  operator: string;
  value?: any | undefined;
  type: string;
  options: Array<string | number>;
  optionsMap?: { [k: string]: string | number } | null | undefined;
  imageUrlMap?: { [k: string]: string } | undefined;
  name: string;
  path: string;
  hideOperators?: Array<string | string | string | string | string> | undefined;
};

/** @internal */
export const Filters1$outboundSchema: z.ZodType<
  Filters1$Outbound,
  z.ZodTypeDef,
  Filters1
> = z.object({
  operator: FiltersOperator$outboundSchema,
  value: z.any().optional(),
  type: FiltersType$outboundSchema,
  options: z.array(z.union([z.string(), z.number()])),
  optionsMap: z.nullable(z.record(z.union([z.string(), z.number()])))
    .optional(),
  imageUrlMap: z.record(z.string()).optional(),
  name: z.string(),
  path: z.string(),
  hideOperators: z.array(
    z.union([
      HideOperators1$outboundSchema,
      HideOperators2$outboundSchema,
      HideOperators3$outboundSchema,
      HideOperators4$outboundSchema,
      HideOperators5$outboundSchema,
    ]),
  ).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Filters1$ {
  /** @deprecated use `Filters1$inboundSchema` instead. */
  export const inboundSchema = Filters1$inboundSchema;
  /** @deprecated use `Filters1$outboundSchema` instead. */
  export const outboundSchema = Filters1$outboundSchema;
  /** @deprecated use `Filters1$Outbound` instead. */
  export type Outbound = Filters1$Outbound;
}

export function filters1ToJSON(filters1: Filters1): string {
  return JSON.stringify(Filters1$outboundSchema.parse(filters1));
}

export function filters1FromJSON(
  jsonString: string,
): SafeParseResult<Filters1, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Filters1$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Filters1' from JSON`,
  );
}

/** @internal */
export const Filters$inboundSchema: z.ZodType<Filters, z.ZodTypeDef, unknown> =
  z.union([
    z.lazy(() => Filters3$inboundSchema),
    z.lazy(() => Filters4$inboundSchema),
    z.lazy(() => Filters5$inboundSchema),
    z.lazy(() => Filters8$inboundSchema),
    z.lazy(() => Filters6$inboundSchema),
    z.lazy(() => Filters7$inboundSchema),
    z.lazy(() => Filters1$inboundSchema),
    z.lazy(() => Filters2$inboundSchema),
  ]);

/** @internal */
export type Filters$Outbound =
  | Filters3$Outbound
  | Filters4$Outbound
  | Filters5$Outbound
  | Filters8$Outbound
  | Filters6$Outbound
  | Filters7$Outbound
  | Filters1$Outbound
  | Filters2$Outbound;

/** @internal */
export const Filters$outboundSchema: z.ZodType<
  Filters$Outbound,
  z.ZodTypeDef,
  Filters
> = z.union([
  z.lazy(() => Filters3$outboundSchema),
  z.lazy(() => Filters4$outboundSchema),
  z.lazy(() => Filters5$outboundSchema),
  z.lazy(() => Filters8$outboundSchema),
  z.lazy(() => Filters6$outboundSchema),
  z.lazy(() => Filters7$outboundSchema),
  z.lazy(() => Filters1$outboundSchema),
  z.lazy(() => Filters2$outboundSchema),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Filters$ {
  /** @deprecated use `Filters$inboundSchema` instead. */
  export const inboundSchema = Filters$inboundSchema;
  /** @deprecated use `Filters$outboundSchema` instead. */
  export const outboundSchema = Filters$outboundSchema;
  /** @deprecated use `Filters$Outbound` instead. */
  export type Outbound = Filters$Outbound;
}

export function filtersToJSON(filters: Filters): string {
  return JSON.stringify(Filters$outboundSchema.parse(filters));
}

export function filtersFromJSON(
  jsonString: string,
): SafeParseResult<Filters, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Filters$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Filters' from JSON`,
  );
}

/** @internal */
export const Query$inboundSchema: z.ZodType<Query, z.ZodTypeDef, unknown> = z
  .object({
    search: z.string().optional(),
    operator: Operator$inboundSchema,
    filters: z.array(
      z.union([
        z.lazy(() => Filters3$inboundSchema),
        z.lazy(() => Filters4$inboundSchema),
        z.lazy(() => Filters5$inboundSchema),
        z.lazy(() => Filters8$inboundSchema),
        z.lazy(() => Filters6$inboundSchema),
        z.lazy(() => Filters7$inboundSchema),
        z.lazy(() => Filters1$inboundSchema),
        z.lazy(() => Filters2$inboundSchema),
      ]),
    ).optional(),
  });

/** @internal */
export type Query$Outbound = {
  search?: string | undefined;
  operator: string;
  filters?:
    | Array<
      | Filters3$Outbound
      | Filters4$Outbound
      | Filters5$Outbound
      | Filters8$Outbound
      | Filters6$Outbound
      | Filters7$Outbound
      | Filters1$Outbound
      | Filters2$Outbound
    >
    | undefined;
};

/** @internal */
export const Query$outboundSchema: z.ZodType<
  Query$Outbound,
  z.ZodTypeDef,
  Query
> = z.object({
  search: z.string().optional(),
  operator: Operator$outboundSchema,
  filters: z.array(
    z.union([
      z.lazy(() => Filters3$outboundSchema),
      z.lazy(() => Filters4$outboundSchema),
      z.lazy(() => Filters5$outboundSchema),
      z.lazy(() => Filters8$outboundSchema),
      z.lazy(() => Filters6$outboundSchema),
      z.lazy(() => Filters7$outboundSchema),
      z.lazy(() => Filters1$outboundSchema),
      z.lazy(() => Filters2$outboundSchema),
    ]),
  ).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Query$ {
  /** @deprecated use `Query$inboundSchema` instead. */
  export const inboundSchema = Query$inboundSchema;
  /** @deprecated use `Query$outboundSchema` instead. */
  export const outboundSchema = Query$outboundSchema;
  /** @deprecated use `Query$Outbound` instead. */
  export type Outbound = Query$Outbound;
}

export function queryToJSON(query: Query): string {
  return JSON.stringify(Query$outboundSchema.parse(query));
}

export function queryFromJSON(
  jsonString: string,
): SafeParseResult<Query, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Query$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Query' from JSON`,
  );
}

/** @internal */
export const ListSessionsFiltersSessionsRequestRequestBody4Type$inboundSchema:
  z.ZodNativeEnum<typeof ListSessionsFiltersSessionsRequestRequestBody4Type> = z
    .nativeEnum(ListSessionsFiltersSessionsRequestRequestBody4Type);

/** @internal */
export const ListSessionsFiltersSessionsRequestRequestBody4Type$outboundSchema:
  z.ZodNativeEnum<typeof ListSessionsFiltersSessionsRequestRequestBody4Type> =
    ListSessionsFiltersSessionsRequestRequestBody4Type$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListSessionsFiltersSessionsRequestRequestBody4Type$ {
  /** @deprecated use `ListSessionsFiltersSessionsRequestRequestBody4Type$inboundSchema` instead. */
  export const inboundSchema =
    ListSessionsFiltersSessionsRequestRequestBody4Type$inboundSchema;
  /** @deprecated use `ListSessionsFiltersSessionsRequestRequestBody4Type$outboundSchema` instead. */
  export const outboundSchema =
    ListSessionsFiltersSessionsRequestRequestBody4Type$outboundSchema;
}

/** @internal */
export const ListSessionsFiltersSessionsRequestRequestBody4Operator$inboundSchema:
  z.ZodNativeEnum<
    typeof ListSessionsFiltersSessionsRequestRequestBody4Operator
  > = z.nativeEnum(ListSessionsFiltersSessionsRequestRequestBody4Operator);

/** @internal */
export const ListSessionsFiltersSessionsRequestRequestBody4Operator$outboundSchema:
  z.ZodNativeEnum<
    typeof ListSessionsFiltersSessionsRequestRequestBody4Operator
  > = ListSessionsFiltersSessionsRequestRequestBody4Operator$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListSessionsFiltersSessionsRequestRequestBody4Operator$ {
  /** @deprecated use `ListSessionsFiltersSessionsRequestRequestBody4Operator$inboundSchema` instead. */
  export const inboundSchema =
    ListSessionsFiltersSessionsRequestRequestBody4Operator$inboundSchema;
  /** @deprecated use `ListSessionsFiltersSessionsRequestRequestBody4Operator$outboundSchema` instead. */
  export const outboundSchema =
    ListSessionsFiltersSessionsRequestRequestBody4Operator$outboundSchema;
}

/** @internal */
export const ListSessionsFilters4$inboundSchema: z.ZodType<
  ListSessionsFilters4,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: ListSessionsFiltersSessionsRequestRequestBody4Type$inboundSchema,
  operator:
    ListSessionsFiltersSessionsRequestRequestBody4Operator$inboundSchema,
  values: z.array(z.string()),
  path: z.string(),
});

/** @internal */
export type ListSessionsFilters4$Outbound = {
  type: string;
  operator: string;
  values: Array<string>;
  path: string;
};

/** @internal */
export const ListSessionsFilters4$outboundSchema: z.ZodType<
  ListSessionsFilters4$Outbound,
  z.ZodTypeDef,
  ListSessionsFilters4
> = z.object({
  type: ListSessionsFiltersSessionsRequestRequestBody4Type$outboundSchema,
  operator:
    ListSessionsFiltersSessionsRequestRequestBody4Operator$outboundSchema,
  values: z.array(z.string()),
  path: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListSessionsFilters4$ {
  /** @deprecated use `ListSessionsFilters4$inboundSchema` instead. */
  export const inboundSchema = ListSessionsFilters4$inboundSchema;
  /** @deprecated use `ListSessionsFilters4$outboundSchema` instead. */
  export const outboundSchema = ListSessionsFilters4$outboundSchema;
  /** @deprecated use `ListSessionsFilters4$Outbound` instead. */
  export type Outbound = ListSessionsFilters4$Outbound;
}

export function listSessionsFilters4ToJSON(
  listSessionsFilters4: ListSessionsFilters4,
): string {
  return JSON.stringify(
    ListSessionsFilters4$outboundSchema.parse(listSessionsFilters4),
  );
}

export function listSessionsFilters4FromJSON(
  jsonString: string,
): SafeParseResult<ListSessionsFilters4, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListSessionsFilters4$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListSessionsFilters4' from JSON`,
  );
}

/** @internal */
export const ListSessionsFiltersSessionsRequestRequestBody3Type$inboundSchema:
  z.ZodNativeEnum<typeof ListSessionsFiltersSessionsRequestRequestBody3Type> = z
    .nativeEnum(ListSessionsFiltersSessionsRequestRequestBody3Type);

/** @internal */
export const ListSessionsFiltersSessionsRequestRequestBody3Type$outboundSchema:
  z.ZodNativeEnum<typeof ListSessionsFiltersSessionsRequestRequestBody3Type> =
    ListSessionsFiltersSessionsRequestRequestBody3Type$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListSessionsFiltersSessionsRequestRequestBody3Type$ {
  /** @deprecated use `ListSessionsFiltersSessionsRequestRequestBody3Type$inboundSchema` instead. */
  export const inboundSchema =
    ListSessionsFiltersSessionsRequestRequestBody3Type$inboundSchema;
  /** @deprecated use `ListSessionsFiltersSessionsRequestRequestBody3Type$outboundSchema` instead. */
  export const outboundSchema =
    ListSessionsFiltersSessionsRequestRequestBody3Type$outboundSchema;
}

/** @internal */
export const ListSessionsFiltersSessionsRequestRequestBody3Operator$inboundSchema:
  z.ZodNativeEnum<
    typeof ListSessionsFiltersSessionsRequestRequestBody3Operator
  > = z.nativeEnum(ListSessionsFiltersSessionsRequestRequestBody3Operator);

/** @internal */
export const ListSessionsFiltersSessionsRequestRequestBody3Operator$outboundSchema:
  z.ZodNativeEnum<
    typeof ListSessionsFiltersSessionsRequestRequestBody3Operator
  > = ListSessionsFiltersSessionsRequestRequestBody3Operator$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListSessionsFiltersSessionsRequestRequestBody3Operator$ {
  /** @deprecated use `ListSessionsFiltersSessionsRequestRequestBody3Operator$inboundSchema` instead. */
  export const inboundSchema =
    ListSessionsFiltersSessionsRequestRequestBody3Operator$inboundSchema;
  /** @deprecated use `ListSessionsFiltersSessionsRequestRequestBody3Operator$outboundSchema` instead. */
  export const outboundSchema =
    ListSessionsFiltersSessionsRequestRequestBody3Operator$outboundSchema;
}

/** @internal */
export const ListSessionsFilters3$inboundSchema: z.ZodType<
  ListSessionsFilters3,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: ListSessionsFiltersSessionsRequestRequestBody3Type$inboundSchema,
  operator:
    ListSessionsFiltersSessionsRequestRequestBody3Operator$inboundSchema,
  value: z.string(),
  path: z.string(),
});

/** @internal */
export type ListSessionsFilters3$Outbound = {
  type: string;
  operator: string;
  value: string;
  path: string;
};

/** @internal */
export const ListSessionsFilters3$outboundSchema: z.ZodType<
  ListSessionsFilters3$Outbound,
  z.ZodTypeDef,
  ListSessionsFilters3
> = z.object({
  type: ListSessionsFiltersSessionsRequestRequestBody3Type$outboundSchema,
  operator:
    ListSessionsFiltersSessionsRequestRequestBody3Operator$outboundSchema,
  value: z.string(),
  path: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListSessionsFilters3$ {
  /** @deprecated use `ListSessionsFilters3$inboundSchema` instead. */
  export const inboundSchema = ListSessionsFilters3$inboundSchema;
  /** @deprecated use `ListSessionsFilters3$outboundSchema` instead. */
  export const outboundSchema = ListSessionsFilters3$outboundSchema;
  /** @deprecated use `ListSessionsFilters3$Outbound` instead. */
  export type Outbound = ListSessionsFilters3$Outbound;
}

export function listSessionsFilters3ToJSON(
  listSessionsFilters3: ListSessionsFilters3,
): string {
  return JSON.stringify(
    ListSessionsFilters3$outboundSchema.parse(listSessionsFilters3),
  );
}

export function listSessionsFilters3FromJSON(
  jsonString: string,
): SafeParseResult<ListSessionsFilters3, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListSessionsFilters3$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListSessionsFilters3' from JSON`,
  );
}

/** @internal */
export const ListSessionsFiltersSessionsRequestRequestBody2Type$inboundSchema:
  z.ZodNativeEnum<typeof ListSessionsFiltersSessionsRequestRequestBody2Type> = z
    .nativeEnum(ListSessionsFiltersSessionsRequestRequestBody2Type);

/** @internal */
export const ListSessionsFiltersSessionsRequestRequestBody2Type$outboundSchema:
  z.ZodNativeEnum<typeof ListSessionsFiltersSessionsRequestRequestBody2Type> =
    ListSessionsFiltersSessionsRequestRequestBody2Type$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListSessionsFiltersSessionsRequestRequestBody2Type$ {
  /** @deprecated use `ListSessionsFiltersSessionsRequestRequestBody2Type$inboundSchema` instead. */
  export const inboundSchema =
    ListSessionsFiltersSessionsRequestRequestBody2Type$inboundSchema;
  /** @deprecated use `ListSessionsFiltersSessionsRequestRequestBody2Type$outboundSchema` instead. */
  export const outboundSchema =
    ListSessionsFiltersSessionsRequestRequestBody2Type$outboundSchema;
}

/** @internal */
export const ListSessionsFilters2$inboundSchema: z.ZodType<
  ListSessionsFilters2,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: ListSessionsFiltersSessionsRequestRequestBody2Type$inboundSchema,
  value: z.string(),
  searchPaths: z.array(z.string()),
});

/** @internal */
export type ListSessionsFilters2$Outbound = {
  type: string;
  value: string;
  searchPaths: Array<string>;
};

/** @internal */
export const ListSessionsFilters2$outboundSchema: z.ZodType<
  ListSessionsFilters2$Outbound,
  z.ZodTypeDef,
  ListSessionsFilters2
> = z.object({
  type: ListSessionsFiltersSessionsRequestRequestBody2Type$outboundSchema,
  value: z.string(),
  searchPaths: z.array(z.string()),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListSessionsFilters2$ {
  /** @deprecated use `ListSessionsFilters2$inboundSchema` instead. */
  export const inboundSchema = ListSessionsFilters2$inboundSchema;
  /** @deprecated use `ListSessionsFilters2$outboundSchema` instead. */
  export const outboundSchema = ListSessionsFilters2$outboundSchema;
  /** @deprecated use `ListSessionsFilters2$Outbound` instead. */
  export type Outbound = ListSessionsFilters2$Outbound;
}

export function listSessionsFilters2ToJSON(
  listSessionsFilters2: ListSessionsFilters2,
): string {
  return JSON.stringify(
    ListSessionsFilters2$outboundSchema.parse(listSessionsFilters2),
  );
}

export function listSessionsFilters2FromJSON(
  jsonString: string,
): SafeParseResult<ListSessionsFilters2, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListSessionsFilters2$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListSessionsFilters2' from JSON`,
  );
}

/** @internal */
export const ListSessionsFiltersSessionsRequestRequestBody1Type$inboundSchema:
  z.ZodNativeEnum<typeof ListSessionsFiltersSessionsRequestRequestBody1Type> = z
    .nativeEnum(ListSessionsFiltersSessionsRequestRequestBody1Type);

/** @internal */
export const ListSessionsFiltersSessionsRequestRequestBody1Type$outboundSchema:
  z.ZodNativeEnum<typeof ListSessionsFiltersSessionsRequestRequestBody1Type> =
    ListSessionsFiltersSessionsRequestRequestBody1Type$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListSessionsFiltersSessionsRequestRequestBody1Type$ {
  /** @deprecated use `ListSessionsFiltersSessionsRequestRequestBody1Type$inboundSchema` instead. */
  export const inboundSchema =
    ListSessionsFiltersSessionsRequestRequestBody1Type$inboundSchema;
  /** @deprecated use `ListSessionsFiltersSessionsRequestRequestBody1Type$outboundSchema` instead. */
  export const outboundSchema =
    ListSessionsFiltersSessionsRequestRequestBody1Type$outboundSchema;
}

/** @internal */
export const ListSessionsFilters1$inboundSchema: z.ZodType<
  ListSessionsFilters1,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: ListSessionsFiltersSessionsRequestRequestBody1Type$inboundSchema,
  id: z.string(),
  path: z.string(),
});

/** @internal */
export type ListSessionsFilters1$Outbound = {
  type: string;
  id: string;
  path: string;
};

/** @internal */
export const ListSessionsFilters1$outboundSchema: z.ZodType<
  ListSessionsFilters1$Outbound,
  z.ZodTypeDef,
  ListSessionsFilters1
> = z.object({
  type: ListSessionsFiltersSessionsRequestRequestBody1Type$outboundSchema,
  id: z.string(),
  path: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListSessionsFilters1$ {
  /** @deprecated use `ListSessionsFilters1$inboundSchema` instead. */
  export const inboundSchema = ListSessionsFilters1$inboundSchema;
  /** @deprecated use `ListSessionsFilters1$outboundSchema` instead. */
  export const outboundSchema = ListSessionsFilters1$outboundSchema;
  /** @deprecated use `ListSessionsFilters1$Outbound` instead. */
  export type Outbound = ListSessionsFilters1$Outbound;
}

export function listSessionsFilters1ToJSON(
  listSessionsFilters1: ListSessionsFilters1,
): string {
  return JSON.stringify(
    ListSessionsFilters1$outboundSchema.parse(listSessionsFilters1),
  );
}

export function listSessionsFilters1FromJSON(
  jsonString: string,
): SafeParseResult<ListSessionsFilters1, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListSessionsFilters1$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListSessionsFilters1' from JSON`,
  );
}

/** @internal */
export const ListSessionsFilters$inboundSchema: z.ZodType<
  ListSessionsFilters,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => ListSessionsFilters1$inboundSchema),
  z.lazy(() => ListSessionsFilters2$inboundSchema),
  z.lazy(() => ListSessionsFilters3$inboundSchema),
  z.lazy(() => ListSessionsFilters4$inboundSchema),
]);

/** @internal */
export type ListSessionsFilters$Outbound =
  | ListSessionsFilters1$Outbound
  | ListSessionsFilters2$Outbound
  | ListSessionsFilters3$Outbound
  | ListSessionsFilters4$Outbound;

/** @internal */
export const ListSessionsFilters$outboundSchema: z.ZodType<
  ListSessionsFilters$Outbound,
  z.ZodTypeDef,
  ListSessionsFilters
> = z.union([
  z.lazy(() => ListSessionsFilters1$outboundSchema),
  z.lazy(() => ListSessionsFilters2$outboundSchema),
  z.lazy(() => ListSessionsFilters3$outboundSchema),
  z.lazy(() => ListSessionsFilters4$outboundSchema),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListSessionsFilters$ {
  /** @deprecated use `ListSessionsFilters$inboundSchema` instead. */
  export const inboundSchema = ListSessionsFilters$inboundSchema;
  /** @deprecated use `ListSessionsFilters$outboundSchema` instead. */
  export const outboundSchema = ListSessionsFilters$outboundSchema;
  /** @deprecated use `ListSessionsFilters$Outbound` instead. */
  export type Outbound = ListSessionsFilters$Outbound;
}

export function listSessionsFiltersToJSON(
  listSessionsFilters: ListSessionsFilters,
): string {
  return JSON.stringify(
    ListSessionsFilters$outboundSchema.parse(listSessionsFilters),
  );
}

export function listSessionsFiltersFromJSON(
  jsonString: string,
): SafeParseResult<ListSessionsFilters, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListSessionsFilters$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListSessionsFilters' from JSON`,
  );
}

/** @internal */
export const ListSessionsRequestBody$inboundSchema: z.ZodType<
  ListSessionsRequestBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  pagination: z.lazy(() => Pagination$inboundSchema).optional(),
  sortingProps: z.array(z.lazy(() => SortingProps$inboundSchema)).optional(),
  query: z.lazy(() => Query$inboundSchema).optional(),
  filters: z.array(
    z.union([
      z.lazy(() => ListSessionsFilters1$inboundSchema),
      z.lazy(() => ListSessionsFilters2$inboundSchema),
      z.lazy(() => ListSessionsFilters3$inboundSchema),
      z.lazy(() => ListSessionsFilters4$inboundSchema),
    ]),
  ),
  includedFields: z.record(z.string()).optional(),
});

/** @internal */
export type ListSessionsRequestBody$Outbound = {
  pagination?: Pagination$Outbound | undefined;
  sortingProps?: Array<SortingProps$Outbound> | undefined;
  query?: Query$Outbound | undefined;
  filters: Array<
    | ListSessionsFilters1$Outbound
    | ListSessionsFilters2$Outbound
    | ListSessionsFilters3$Outbound
    | ListSessionsFilters4$Outbound
  >;
  includedFields?: { [k: string]: string } | undefined;
};

/** @internal */
export const ListSessionsRequestBody$outboundSchema: z.ZodType<
  ListSessionsRequestBody$Outbound,
  z.ZodTypeDef,
  ListSessionsRequestBody
> = z.object({
  pagination: z.lazy(() => Pagination$outboundSchema).optional(),
  sortingProps: z.array(z.lazy(() => SortingProps$outboundSchema)).optional(),
  query: z.lazy(() => Query$outboundSchema).optional(),
  filters: z.array(
    z.union([
      z.lazy(() => ListSessionsFilters1$outboundSchema),
      z.lazy(() => ListSessionsFilters2$outboundSchema),
      z.lazy(() => ListSessionsFilters3$outboundSchema),
      z.lazy(() => ListSessionsFilters4$outboundSchema),
    ]),
  ),
  includedFields: z.record(z.string()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListSessionsRequestBody$ {
  /** @deprecated use `ListSessionsRequestBody$inboundSchema` instead. */
  export const inboundSchema = ListSessionsRequestBody$inboundSchema;
  /** @deprecated use `ListSessionsRequestBody$outboundSchema` instead. */
  export const outboundSchema = ListSessionsRequestBody$outboundSchema;
  /** @deprecated use `ListSessionsRequestBody$Outbound` instead. */
  export type Outbound = ListSessionsRequestBody$Outbound;
}

export function listSessionsRequestBodyToJSON(
  listSessionsRequestBody: ListSessionsRequestBody,
): string {
  return JSON.stringify(
    ListSessionsRequestBody$outboundSchema.parse(listSessionsRequestBody),
  );
}

export function listSessionsRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<ListSessionsRequestBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListSessionsRequestBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListSessionsRequestBody' from JSON`,
  );
}

/** @internal */
export const ListSessionsObject$inboundSchema: z.ZodNativeEnum<
  typeof ListSessionsObject
> = z.nativeEnum(ListSessionsObject);

/** @internal */
export const ListSessionsObject$outboundSchema: z.ZodNativeEnum<
  typeof ListSessionsObject
> = ListSessionsObject$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListSessionsObject$ {
  /** @deprecated use `ListSessionsObject$inboundSchema` instead. */
  export const inboundSchema = ListSessionsObject$inboundSchema;
  /** @deprecated use `ListSessionsObject$outboundSchema` instead. */
  export const outboundSchema = ListSessionsObject$outboundSchema;
}

/** @internal */
export const ListSessionsBilling$inboundSchema: z.ZodType<
  ListSessionsBilling,
  z.ZodTypeDef,
  unknown
> = z.object({
  input_cost: z.number(),
  output_cost: z.number(),
  total_cost: z.number(),
}).transform((v) => {
  return remap$(v, {
    "input_cost": "inputCost",
    "output_cost": "outputCost",
    "total_cost": "totalCost",
  });
});

/** @internal */
export type ListSessionsBilling$Outbound = {
  input_cost: number;
  output_cost: number;
  total_cost: number;
};

/** @internal */
export const ListSessionsBilling$outboundSchema: z.ZodType<
  ListSessionsBilling$Outbound,
  z.ZodTypeDef,
  ListSessionsBilling
> = z.object({
  inputCost: z.number(),
  outputCost: z.number(),
  totalCost: z.number(),
}).transform((v) => {
  return remap$(v, {
    inputCost: "input_cost",
    outputCost: "output_cost",
    totalCost: "total_cost",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListSessionsBilling$ {
  /** @deprecated use `ListSessionsBilling$inboundSchema` instead. */
  export const inboundSchema = ListSessionsBilling$inboundSchema;
  /** @deprecated use `ListSessionsBilling$outboundSchema` instead. */
  export const outboundSchema = ListSessionsBilling$outboundSchema;
  /** @deprecated use `ListSessionsBilling$Outbound` instead. */
  export type Outbound = ListSessionsBilling$Outbound;
}

export function listSessionsBillingToJSON(
  listSessionsBilling: ListSessionsBilling,
): string {
  return JSON.stringify(
    ListSessionsBilling$outboundSchema.parse(listSessionsBilling),
  );
}

export function listSessionsBillingFromJSON(
  jsonString: string,
): SafeParseResult<ListSessionsBilling, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListSessionsBilling$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListSessionsBilling' from JSON`,
  );
}

/** @internal */
export const ListSessionsUsage$inboundSchema: z.ZodType<
  ListSessionsUsage,
  z.ZodTypeDef,
  unknown
> = z.object({
  prompt_tokens: z.number(),
  completion_tokens: z.number(),
  total_tokens: z.number(),
}).transform((v) => {
  return remap$(v, {
    "prompt_tokens": "promptTokens",
    "completion_tokens": "completionTokens",
    "total_tokens": "totalTokens",
  });
});

/** @internal */
export type ListSessionsUsage$Outbound = {
  prompt_tokens: number;
  completion_tokens: number;
  total_tokens: number;
};

/** @internal */
export const ListSessionsUsage$outboundSchema: z.ZodType<
  ListSessionsUsage$Outbound,
  z.ZodTypeDef,
  ListSessionsUsage
> = z.object({
  promptTokens: z.number(),
  completionTokens: z.number(),
  totalTokens: z.number(),
}).transform((v) => {
  return remap$(v, {
    promptTokens: "prompt_tokens",
    completionTokens: "completion_tokens",
    totalTokens: "total_tokens",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListSessionsUsage$ {
  /** @deprecated use `ListSessionsUsage$inboundSchema` instead. */
  export const inboundSchema = ListSessionsUsage$inboundSchema;
  /** @deprecated use `ListSessionsUsage$outboundSchema` instead. */
  export const outboundSchema = ListSessionsUsage$outboundSchema;
  /** @deprecated use `ListSessionsUsage$Outbound` instead. */
  export type Outbound = ListSessionsUsage$Outbound;
}

export function listSessionsUsageToJSON(
  listSessionsUsage: ListSessionsUsage,
): string {
  return JSON.stringify(
    ListSessionsUsage$outboundSchema.parse(listSessionsUsage),
  );
}

export function listSessionsUsageFromJSON(
  jsonString: string,
): SafeParseResult<ListSessionsUsage, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListSessionsUsage$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListSessionsUsage' from JSON`,
  );
}

/** @internal */
export const ListSessionsData$inboundSchema: z.ZodType<
  ListSessionsData,
  z.ZodTypeDef,
  unknown
> = z.object({
  _id: z.string(),
  external_id: z.string(),
  duration: z.number(),
  contact_ids: z.array(z.string()),
  billing: z.lazy(() => ListSessionsBilling$inboundSchema),
  usage: z.lazy(() => ListSessionsUsage$inboundSchema),
  traces_count: z.number(),
  tags: z.array(z.string()),
  workspace_id: z.string(),
  project_id: z.nullable(z.string()).optional(),
  started_at: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
  updated_at: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
}).transform((v) => {
  return remap$(v, {
    "_id": "id",
    "external_id": "externalId",
    "contact_ids": "contactIds",
    "traces_count": "tracesCount",
    "workspace_id": "workspaceId",
    "project_id": "projectId",
    "started_at": "startedAt",
    "updated_at": "updatedAt",
  });
});

/** @internal */
export type ListSessionsData$Outbound = {
  _id: string;
  external_id: string;
  duration: number;
  contact_ids: Array<string>;
  billing: ListSessionsBilling$Outbound;
  usage: ListSessionsUsage$Outbound;
  traces_count: number;
  tags: Array<string>;
  workspace_id: string;
  project_id?: string | null | undefined;
  started_at?: string | undefined;
  updated_at?: string | undefined;
};

/** @internal */
export const ListSessionsData$outboundSchema: z.ZodType<
  ListSessionsData$Outbound,
  z.ZodTypeDef,
  ListSessionsData
> = z.object({
  id: z.string(),
  externalId: z.string(),
  duration: z.number(),
  contactIds: z.array(z.string()),
  billing: z.lazy(() => ListSessionsBilling$outboundSchema),
  usage: z.lazy(() => ListSessionsUsage$outboundSchema),
  tracesCount: z.number(),
  tags: z.array(z.string()),
  workspaceId: z.string(),
  projectId: z.nullable(z.string()).optional(),
  startedAt: z.date().transform(v => v.toISOString()).optional(),
  updatedAt: z.date().transform(v => v.toISOString()).optional(),
}).transform((v) => {
  return remap$(v, {
    id: "_id",
    externalId: "external_id",
    contactIds: "contact_ids",
    tracesCount: "traces_count",
    workspaceId: "workspace_id",
    projectId: "project_id",
    startedAt: "started_at",
    updatedAt: "updated_at",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListSessionsData$ {
  /** @deprecated use `ListSessionsData$inboundSchema` instead. */
  export const inboundSchema = ListSessionsData$inboundSchema;
  /** @deprecated use `ListSessionsData$outboundSchema` instead. */
  export const outboundSchema = ListSessionsData$outboundSchema;
  /** @deprecated use `ListSessionsData$Outbound` instead. */
  export type Outbound = ListSessionsData$Outbound;
}

export function listSessionsDataToJSON(
  listSessionsData: ListSessionsData,
): string {
  return JSON.stringify(
    ListSessionsData$outboundSchema.parse(listSessionsData),
  );
}

export function listSessionsDataFromJSON(
  jsonString: string,
): SafeParseResult<ListSessionsData, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListSessionsData$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListSessionsData' from JSON`,
  );
}

/** @internal */
export const ListSessionsResponseBody$inboundSchema: z.ZodType<
  ListSessionsResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  object: ListSessionsObject$inboundSchema,
  data: z.array(z.lazy(() => ListSessionsData$inboundSchema)),
  has_more: z.boolean(),
}).transform((v) => {
  return remap$(v, {
    "has_more": "hasMore",
  });
});

/** @internal */
export type ListSessionsResponseBody$Outbound = {
  object: string;
  data: Array<ListSessionsData$Outbound>;
  has_more: boolean;
};

/** @internal */
export const ListSessionsResponseBody$outboundSchema: z.ZodType<
  ListSessionsResponseBody$Outbound,
  z.ZodTypeDef,
  ListSessionsResponseBody
> = z.object({
  object: ListSessionsObject$outboundSchema,
  data: z.array(z.lazy(() => ListSessionsData$outboundSchema)),
  hasMore: z.boolean(),
}).transform((v) => {
  return remap$(v, {
    hasMore: "has_more",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListSessionsResponseBody$ {
  /** @deprecated use `ListSessionsResponseBody$inboundSchema` instead. */
  export const inboundSchema = ListSessionsResponseBody$inboundSchema;
  /** @deprecated use `ListSessionsResponseBody$outboundSchema` instead. */
  export const outboundSchema = ListSessionsResponseBody$outboundSchema;
  /** @deprecated use `ListSessionsResponseBody$Outbound` instead. */
  export type Outbound = ListSessionsResponseBody$Outbound;
}

export function listSessionsResponseBodyToJSON(
  listSessionsResponseBody: ListSessionsResponseBody,
): string {
  return JSON.stringify(
    ListSessionsResponseBody$outboundSchema.parse(listSessionsResponseBody),
  );
}

export function listSessionsResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<ListSessionsResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListSessionsResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListSessionsResponseBody' from JSON`,
  );
}
