/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export const GetAllPromptTemplatesFiltersPromptTemplatesRequestType = {
  StringArray: "string_array",
} as const;
export type GetAllPromptTemplatesFiltersPromptTemplatesRequestType = ClosedEnum<
  typeof GetAllPromptTemplatesFiltersPromptTemplatesRequestType
>;

export const FiltersOperator = {
  In: "in",
} as const;
export type FiltersOperator = ClosedEnum<typeof FiltersOperator>;

export type Four = {
  type: GetAllPromptTemplatesFiltersPromptTemplatesRequestType;
  operator: FiltersOperator;
  values: Array<string>;
  path: string;
};

export const GetAllPromptTemplatesFiltersPromptTemplatesType = {
  String: "string",
} as const;
export type GetAllPromptTemplatesFiltersPromptTemplatesType = ClosedEnum<
  typeof GetAllPromptTemplatesFiltersPromptTemplatesType
>;

export const Operator = {
  Contains: "contains",
  Equals: "equals",
} as const;
export type Operator = ClosedEnum<typeof Operator>;

export type Filters3 = {
  type: GetAllPromptTemplatesFiltersPromptTemplatesType;
  operator: Operator;
  value: string;
  path: string;
};

export const GetAllPromptTemplatesFiltersType = {
  Search: "search",
} as const;
export type GetAllPromptTemplatesFiltersType = ClosedEnum<
  typeof GetAllPromptTemplatesFiltersType
>;

export type Filters2 = {
  type: GetAllPromptTemplatesFiltersType;
  value: string;
  searchPaths: Array<string>;
};

export const FiltersType = {
  Id: "id",
} as const;
export type FiltersType = ClosedEnum<typeof FiltersType>;

export type Filters1 = {
  type: FiltersType;
  id: string;
  path: string;
};

export type Filters = Filters1 | Filters2 | Filters3 | Four;

export type GetAllPromptTemplatesRequestBody = {
  filters: Array<Filters1 | Filters2 | Filters3 | Four>;
};

export type GetAllPromptTemplatesRequest = {
  page?: string | undefined;
  limit?: string | undefined;
  requestBody?: GetAllPromptTemplatesRequestBody | undefined;
};

export const GetAllPromptTemplatesOwnerPromptTemplates2 = {
  Vendor: "vendor",
} as const;
export type GetAllPromptTemplatesOwnerPromptTemplates2 = ClosedEnum<
  typeof GetAllPromptTemplatesOwnerPromptTemplates2
>;

export type GetAllPromptTemplatesItemsOwner =
  | string
  | GetAllPromptTemplatesOwnerPromptTemplates2;

/**
 * The type of the model
 */
export const GetAllPromptTemplatesItemsPromptTemplatesModelType = {
  Chat: "chat",
  Completion: "completion",
  Embedding: "embedding",
  Vision: "vision",
  Image: "image",
  Tts: "tts",
  Stt: "stt",
  Rerank: "rerank",
} as const;
/**
 * The type of the model
 */
export type GetAllPromptTemplatesItemsPromptTemplatesModelType = ClosedEnum<
  typeof GetAllPromptTemplatesItemsPromptTemplatesModelType
>;

/**
 * Only supported on `image` models.
 */
export const GetAllPromptTemplatesItemsPromptTemplatesFormat = {
  Url: "url",
  B64Json: "b64_json",
  Text: "text",
  JsonObject: "json_object",
} as const;
/**
 * Only supported on `image` models.
 */
export type GetAllPromptTemplatesItemsPromptTemplatesFormat = ClosedEnum<
  typeof GetAllPromptTemplatesItemsPromptTemplatesFormat
>;

/**
 * Only supported on `image` models.
 */
export const GetAllPromptTemplatesItemsPromptTemplatesQuality = {
  Standard: "standard",
  Hd: "hd",
} as const;
/**
 * Only supported on `image` models.
 */
export type GetAllPromptTemplatesItemsPromptTemplatesQuality = ClosedEnum<
  typeof GetAllPromptTemplatesItemsPromptTemplatesQuality
>;

export const GetAllPromptTemplatesResponseFormatPromptTemplatesResponse200ApplicationJSONResponseBodyType =
  {
    JsonObject: "json_object",
  } as const;
export type GetAllPromptTemplatesResponseFormatPromptTemplatesResponse200ApplicationJSONResponseBodyType =
  ClosedEnum<
    typeof GetAllPromptTemplatesResponseFormatPromptTemplatesResponse200ApplicationJSONResponseBodyType
  >;

export type GetAllPromptTemplatesResponseFormatPromptTemplatesResponse2 = {
  type:
    GetAllPromptTemplatesResponseFormatPromptTemplatesResponse200ApplicationJSONResponseBodyType;
};

export const GetAllPromptTemplatesResponseFormatPromptTemplatesResponse200ApplicationJSONType =
  {
    JsonSchema: "json_schema",
  } as const;
export type GetAllPromptTemplatesResponseFormatPromptTemplatesResponse200ApplicationJSONType =
  ClosedEnum<
    typeof GetAllPromptTemplatesResponseFormatPromptTemplatesResponse200ApplicationJSONType
  >;

export type GetAllPromptTemplatesResponseFormatPromptTemplatesResponseJsonSchema =
  {
    name: string;
    strict: boolean;
    schema: { [k: string]: any };
  };

export type GetAllPromptTemplatesResponseFormatPromptTemplatesResponse1 = {
  type:
    GetAllPromptTemplatesResponseFormatPromptTemplatesResponse200ApplicationJSONType;
  jsonSchema:
    GetAllPromptTemplatesResponseFormatPromptTemplatesResponseJsonSchema;
};

/**
 * An object specifying the format that the model must output.
 *
 * @remarks
 *
 *  Setting to `{ "type": "json_schema", "json_schema": {...} }` enables Structured Outputs which ensures the model will match your supplied JSON schema
 *
 *  Setting to `{ "type": "json_object" }` enables JSON mode, which ensures the message the model generates is valid JSON.
 *
 * Important: when using JSON mode, you must also instruct the model to produce JSON yourself via a system or user message. Without this, the model may generate an unending stream of whitespace until the generation reaches the token limit, resulting in a long-running and seemingly "stuck" request. Also note that the message content may be partially cut off if finish_reason="length", which indicates the generation exceeded max_tokens or the conversation exceeded the max context length.
 */
export type GetAllPromptTemplatesItemsPromptTemplatesResponseFormat =
  | GetAllPromptTemplatesResponseFormatPromptTemplatesResponse2
  | GetAllPromptTemplatesResponseFormatPromptTemplatesResponse1;

/**
 * The version of photoReal to use. Must be v1 or v2. Only available for `leonardoai` provider
 */
export const GetAllPromptTemplatesItemsPromptTemplatesPhotoRealVersion = {
  V1: "v1",
  V2: "v2",
} as const;
/**
 * The version of photoReal to use. Must be v1 or v2. Only available for `leonardoai` provider
 */
export type GetAllPromptTemplatesItemsPromptTemplatesPhotoRealVersion =
  ClosedEnum<typeof GetAllPromptTemplatesItemsPromptTemplatesPhotoRealVersion>;

/**
 * The format to return the embeddings
 */
export const GetAllPromptTemplatesItemsPromptTemplatesEncodingFormat = {
  Float: "float",
  Base64: "base64",
} as const;
/**
 * The format to return the embeddings
 */
export type GetAllPromptTemplatesItemsPromptTemplatesEncodingFormat =
  ClosedEnum<typeof GetAllPromptTemplatesItemsPromptTemplatesEncodingFormat>;

/**
 * Model Parameters: Not all parameters apply to every model
 */
export type GetAllPromptTemplatesItemsPromptTemplatesModelParameters = {
  /**
   * Only supported on `chat` and `completion` models.
   */
  temperature?: number | undefined;
  /**
   * Only supported on `chat` and `completion` models.
   */
  maxTokens?: number | undefined;
  /**
   * Only supported on `chat` and `completion` models.
   */
  topK?: number | undefined;
  /**
   * Only supported on `chat` and `completion` models.
   */
  topP?: number | undefined;
  /**
   * Only supported on `chat` and `completion` models.
   */
  frequencyPenalty?: number | undefined;
  /**
   * Only supported on `chat` and `completion` models.
   */
  presencePenalty?: number | undefined;
  /**
   * Only supported on `image` models.
   */
  numImages?: number | undefined;
  /**
   * Best effort deterministic seed for the model. Currently only OpenAI models support these
   */
  seed?: number | undefined;
  /**
   * Only supported on `image` models.
   */
  format?: GetAllPromptTemplatesItemsPromptTemplatesFormat | undefined;
  /**
   * Only supported on `image` models.
   */
  dimensions?: string | undefined;
  /**
   * Only supported on `image` models.
   */
  quality?: GetAllPromptTemplatesItemsPromptTemplatesQuality | undefined;
  /**
   * Only supported on `image` models.
   */
  style?: string | undefined;
  /**
   * An object specifying the format that the model must output.
   *
   * @remarks
   *
   *  Setting to `{ "type": "json_schema", "json_schema": {...} }` enables Structured Outputs which ensures the model will match your supplied JSON schema
   *
   *  Setting to `{ "type": "json_object" }` enables JSON mode, which ensures the message the model generates is valid JSON.
   *
   * Important: when using JSON mode, you must also instruct the model to produce JSON yourself via a system or user message. Without this, the model may generate an unending stream of whitespace until the generation reaches the token limit, resulting in a long-running and seemingly "stuck" request. Also note that the message content may be partially cut off if finish_reason="length", which indicates the generation exceeded max_tokens or the conversation exceeded the max context length.
   */
  responseFormat?:
    | GetAllPromptTemplatesResponseFormatPromptTemplatesResponse2
    | GetAllPromptTemplatesResponseFormatPromptTemplatesResponse1
    | null
    | undefined;
  /**
   * The version of photoReal to use. Must be v1 or v2. Only available for `leonardoai` provider
   */
  photoRealVersion?:
    | GetAllPromptTemplatesItemsPromptTemplatesPhotoRealVersion
    | undefined;
  /**
   * The format to return the embeddings
   */
  encodingFormat?:
    | GetAllPromptTemplatesItemsPromptTemplatesEncodingFormat
    | undefined;
};

export const GetAllPromptTemplatesItemsPromptTemplatesProvider = {
  Cohere: "cohere",
  Openai: "openai",
  Anthropic: "anthropic",
  Huggingface: "huggingface",
  Replicate: "replicate",
  Google: "google",
  GoogleAi: "google-ai",
  Azure: "azure",
  Aws: "aws",
  Anyscale: "anyscale",
  Perplexity: "perplexity",
  Groq: "groq",
  Fal: "fal",
  Leonardoai: "leonardoai",
  Nvidia: "nvidia",
} as const;
export type GetAllPromptTemplatesItemsPromptTemplatesProvider = ClosedEnum<
  typeof GetAllPromptTemplatesItemsPromptTemplatesProvider
>;

/**
 * The role of the prompt message
 */
export const GetAllPromptTemplatesItemsPromptTemplatesRole = {
  System: "system",
  Assistant: "assistant",
  User: "user",
  Exception: "exception",
  Tool: "tool",
  Prompt: "prompt",
  Correction: "correction",
  ExpectedOutput: "expected_output",
} as const;
/**
 * The role of the prompt message
 */
export type GetAllPromptTemplatesItemsPromptTemplatesRole = ClosedEnum<
  typeof GetAllPromptTemplatesItemsPromptTemplatesRole
>;

export const GetAllPromptTemplates2PromptTemplatesResponse200ApplicationJSONResponseBodyType =
  {
    ImageUrl: "image_url",
  } as const;
export type GetAllPromptTemplates2PromptTemplatesResponse200ApplicationJSONResponseBodyType =
  ClosedEnum<
    typeof GetAllPromptTemplates2PromptTemplatesResponse200ApplicationJSONResponseBodyType
  >;

export type GetAllPromptTemplates2PromptTemplatesResponseImageUrl = {
  /**
   * The orq.ai id of the image
   */
  id?: string | undefined;
  /**
   * Either a URL of the image or the base64 encoded data URI.
   */
  url: string;
  /**
   * Specifies the detail level of the image. Currently only supported with OpenAI models
   */
  detail?: string | undefined;
};

/**
 * The image part of the prompt message. Only supported with vision models.
 */
export type GetAllPromptTemplates2PromptTemplatesResponse2 = {
  type:
    GetAllPromptTemplates2PromptTemplatesResponse200ApplicationJSONResponseBodyType;
  imageUrl: GetAllPromptTemplates2PromptTemplatesResponseImageUrl;
};

export const GetAllPromptTemplates2PromptTemplatesResponse200ApplicationJSONType =
  {
    Text: "text",
  } as const;
export type GetAllPromptTemplates2PromptTemplatesResponse200ApplicationJSONType =
  ClosedEnum<
    typeof GetAllPromptTemplates2PromptTemplatesResponse200ApplicationJSONType
  >;

/**
 * Text content part of a prompt message
 */
export type GetAllPromptTemplates2PromptTemplatesResponse1 = {
  type: GetAllPromptTemplates2PromptTemplatesResponse200ApplicationJSONType;
  text: string;
};

export type GetAllPromptTemplatesContentPromptTemplatesResponse2 =
  | GetAllPromptTemplates2PromptTemplatesResponse1
  | GetAllPromptTemplates2PromptTemplatesResponse2;

/**
 * The contents of the user message. Either the text content of the message or an array of content parts with a defined type, each can be of type `text` or `image_url` when passing in images. You can pass multiple images by adding multiple `image_url` content parts.
 */
export type GetAllPromptTemplatesItemsPromptTemplatesContent =
  | string
  | Array<
    | GetAllPromptTemplates2PromptTemplatesResponse1
    | GetAllPromptTemplates2PromptTemplatesResponse2
  >;

export const GetAllPromptTemplatesItemsPromptTemplatesResponse200Type = {
  Function: "function",
} as const;
export type GetAllPromptTemplatesItemsPromptTemplatesResponse200Type =
  ClosedEnum<typeof GetAllPromptTemplatesItemsPromptTemplatesResponse200Type>;

export type GetAllPromptTemplatesItemsPromptTemplatesFunction = {
  name: string;
  /**
   * JSON string arguments for the functions
   */
  arguments: string;
};

export type GetAllPromptTemplatesItemsPromptTemplatesToolCalls = {
  id?: string | undefined;
  index?: number | undefined;
  type: GetAllPromptTemplatesItemsPromptTemplatesResponse200Type;
  function: GetAllPromptTemplatesItemsPromptTemplatesFunction;
};

export type GetAllPromptTemplatesItemsPromptTemplatesMessages = {
  /**
   * The role of the prompt message
   */
  role: GetAllPromptTemplatesItemsPromptTemplatesRole;
  /**
   * The contents of the user message. Either the text content of the message or an array of content parts with a defined type, each can be of type `text` or `image_url` when passing in images. You can pass multiple images by adding multiple `image_url` content parts.
   */
  content:
    | string
    | Array<
      | GetAllPromptTemplates2PromptTemplatesResponse1
      | GetAllPromptTemplates2PromptTemplatesResponse2
    >;
  toolCalls?:
    | Array<GetAllPromptTemplatesItemsPromptTemplatesToolCalls>
    | undefined;
};

export type GetAllPromptTemplatesItemsPromptTemplatesPromptConfig = {
  stream?: boolean | undefined;
  model?: string | undefined;
  /**
   * The id of the resource
   */
  modelDbId?: string | undefined;
  /**
   * The type of the model
   */
  modelType?: GetAllPromptTemplatesItemsPromptTemplatesModelType | undefined;
  /**
   * Model Parameters: Not all parameters apply to every model
   */
  modelParameters?:
    | GetAllPromptTemplatesItemsPromptTemplatesModelParameters
    | undefined;
  provider?: GetAllPromptTemplatesItemsPromptTemplatesProvider | undefined;
  /**
   * The id of the resource
   */
  integrationId?: string | null | undefined;
  version?: string | undefined;
  messages: Array<GetAllPromptTemplatesItemsPromptTemplatesMessages>;
};

export type GetAllPromptTemplatesItemsPromptTemplatesMetadata = {
  useCases?: Array<string> | undefined;
  language?: string | undefined;
};

/**
 * The type of the model
 */
export const GetAllPromptTemplatesItemsPromptTemplatesResponse200ApplicationJSONModelType =
  {
    Chat: "chat",
    Completion: "completion",
    Embedding: "embedding",
    Vision: "vision",
    Image: "image",
    Tts: "tts",
    Stt: "stt",
    Rerank: "rerank",
  } as const;
/**
 * The type of the model
 */
export type GetAllPromptTemplatesItemsPromptTemplatesResponse200ApplicationJSONModelType =
  ClosedEnum<
    typeof GetAllPromptTemplatesItemsPromptTemplatesResponse200ApplicationJSONModelType
  >;

/**
 * Only supported on `image` models.
 */
export const GetAllPromptTemplatesItemsPromptTemplatesResponse200ApplicationJSONResponseBodyFormat =
  {
    Url: "url",
    B64Json: "b64_json",
    Text: "text",
    JsonObject: "json_object",
  } as const;
/**
 * Only supported on `image` models.
 */
export type GetAllPromptTemplatesItemsPromptTemplatesResponse200ApplicationJSONResponseBodyFormat =
  ClosedEnum<
    typeof GetAllPromptTemplatesItemsPromptTemplatesResponse200ApplicationJSONResponseBodyFormat
  >;

/**
 * Only supported on `image` models.
 */
export const GetAllPromptTemplatesItemsPromptTemplatesResponse200ApplicationJSONQuality =
  {
    Standard: "standard",
    Hd: "hd",
  } as const;
/**
 * Only supported on `image` models.
 */
export type GetAllPromptTemplatesItemsPromptTemplatesResponse200ApplicationJSONQuality =
  ClosedEnum<
    typeof GetAllPromptTemplatesItemsPromptTemplatesResponse200ApplicationJSONQuality
  >;

export const GetAllPromptTemplatesResponseFormatPromptTemplatesResponse200ApplicationJSONResponseBodyItems3VersionsType =
  {
    JsonObject: "json_object",
  } as const;
export type GetAllPromptTemplatesResponseFormatPromptTemplatesResponse200ApplicationJSONResponseBodyItems3VersionsType =
  ClosedEnum<
    typeof GetAllPromptTemplatesResponseFormatPromptTemplatesResponse200ApplicationJSONResponseBodyItems3VersionsType
  >;

export type GetAllPromptTemplatesResponseFormatPromptTemplatesResponse200ApplicationJSONResponseBody2 =
  {
    type:
      GetAllPromptTemplatesResponseFormatPromptTemplatesResponse200ApplicationJSONResponseBodyItems3VersionsType;
  };

export const GetAllPromptTemplatesResponseFormatPromptTemplatesResponse200ApplicationJSONResponseBodyItems3Type =
  {
    JsonSchema: "json_schema",
  } as const;
export type GetAllPromptTemplatesResponseFormatPromptTemplatesResponse200ApplicationJSONResponseBodyItems3Type =
  ClosedEnum<
    typeof GetAllPromptTemplatesResponseFormatPromptTemplatesResponse200ApplicationJSONResponseBodyItems3Type
  >;

export type GetAllPromptTemplatesResponseFormatPromptTemplatesResponse200ApplicationJSONResponseBodyJSONSchema =
  {
    name: string;
    strict: boolean;
    schema: { [k: string]: any };
  };

export type GetAllPromptTemplatesResponseFormatPromptTemplatesResponse200ApplicationJSONResponseBody1 =
  {
    type:
      GetAllPromptTemplatesResponseFormatPromptTemplatesResponse200ApplicationJSONResponseBodyItems3Type;
    jsonSchema:
      GetAllPromptTemplatesResponseFormatPromptTemplatesResponse200ApplicationJSONResponseBodyJSONSchema;
  };

/**
 * An object specifying the format that the model must output.
 *
 * @remarks
 *
 *  Setting to `{ "type": "json_schema", "json_schema": {...} }` enables Structured Outputs which ensures the model will match your supplied JSON schema
 *
 *  Setting to `{ "type": "json_object" }` enables JSON mode, which ensures the message the model generates is valid JSON.
 *
 * Important: when using JSON mode, you must also instruct the model to produce JSON yourself via a system or user message. Without this, the model may generate an unending stream of whitespace until the generation reaches the token limit, resulting in a long-running and seemingly "stuck" request. Also note that the message content may be partially cut off if finish_reason="length", which indicates the generation exceeded max_tokens or the conversation exceeded the max context length.
 */
export type GetAllPromptTemplatesItemsPromptTemplatesResponse200ApplicationJSONResponseFormat =
  | GetAllPromptTemplatesResponseFormatPromptTemplatesResponse200ApplicationJSONResponseBody2
  | GetAllPromptTemplatesResponseFormatPromptTemplatesResponse200ApplicationJSONResponseBody1;

/**
 * The version of photoReal to use. Must be v1 or v2. Only available for `leonardoai` provider
 */
export const GetAllPromptTemplatesItemsPromptTemplatesResponse200ApplicationJSONPhotoRealVersion =
  {
    V1: "v1",
    V2: "v2",
  } as const;
/**
 * The version of photoReal to use. Must be v1 or v2. Only available for `leonardoai` provider
 */
export type GetAllPromptTemplatesItemsPromptTemplatesResponse200ApplicationJSONPhotoRealVersion =
  ClosedEnum<
    typeof GetAllPromptTemplatesItemsPromptTemplatesResponse200ApplicationJSONPhotoRealVersion
  >;

/**
 * The format to return the embeddings
 */
export const GetAllPromptTemplatesItemsPromptTemplatesResponse200ApplicationJSONEncodingFormat =
  {
    Float: "float",
    Base64: "base64",
  } as const;
/**
 * The format to return the embeddings
 */
export type GetAllPromptTemplatesItemsPromptTemplatesResponse200ApplicationJSONEncodingFormat =
  ClosedEnum<
    typeof GetAllPromptTemplatesItemsPromptTemplatesResponse200ApplicationJSONEncodingFormat
  >;

/**
 * Model Parameters: Not all parameters apply to every model
 */
export type GetAllPromptTemplatesItemsPromptTemplatesResponse200ApplicationJSONModelParameters =
  {
    /**
     * Only supported on `chat` and `completion` models.
     */
    temperature?: number | undefined;
    /**
     * Only supported on `chat` and `completion` models.
     */
    maxTokens?: number | undefined;
    /**
     * Only supported on `chat` and `completion` models.
     */
    topK?: number | undefined;
    /**
     * Only supported on `chat` and `completion` models.
     */
    topP?: number | undefined;
    /**
     * Only supported on `chat` and `completion` models.
     */
    frequencyPenalty?: number | undefined;
    /**
     * Only supported on `chat` and `completion` models.
     */
    presencePenalty?: number | undefined;
    /**
     * Only supported on `image` models.
     */
    numImages?: number | undefined;
    /**
     * Best effort deterministic seed for the model. Currently only OpenAI models support these
     */
    seed?: number | undefined;
    /**
     * Only supported on `image` models.
     */
    format?:
      | GetAllPromptTemplatesItemsPromptTemplatesResponse200ApplicationJSONResponseBodyFormat
      | undefined;
    /**
     * Only supported on `image` models.
     */
    dimensions?: string | undefined;
    /**
     * Only supported on `image` models.
     */
    quality?:
      | GetAllPromptTemplatesItemsPromptTemplatesResponse200ApplicationJSONQuality
      | undefined;
    /**
     * Only supported on `image` models.
     */
    style?: string | undefined;
    /**
     * An object specifying the format that the model must output.
     *
     * @remarks
     *
     *  Setting to `{ "type": "json_schema", "json_schema": {...} }` enables Structured Outputs which ensures the model will match your supplied JSON schema
     *
     *  Setting to `{ "type": "json_object" }` enables JSON mode, which ensures the message the model generates is valid JSON.
     *
     * Important: when using JSON mode, you must also instruct the model to produce JSON yourself via a system or user message. Without this, the model may generate an unending stream of whitespace until the generation reaches the token limit, resulting in a long-running and seemingly "stuck" request. Also note that the message content may be partially cut off if finish_reason="length", which indicates the generation exceeded max_tokens or the conversation exceeded the max context length.
     */
    responseFormat?:
      | GetAllPromptTemplatesResponseFormatPromptTemplatesResponse200ApplicationJSONResponseBody2
      | GetAllPromptTemplatesResponseFormatPromptTemplatesResponse200ApplicationJSONResponseBody1
      | null
      | undefined;
    /**
     * The version of photoReal to use. Must be v1 or v2. Only available for `leonardoai` provider
     */
    photoRealVersion?:
      | GetAllPromptTemplatesItemsPromptTemplatesResponse200ApplicationJSONPhotoRealVersion
      | undefined;
    /**
     * The format to return the embeddings
     */
    encodingFormat?:
      | GetAllPromptTemplatesItemsPromptTemplatesResponse200ApplicationJSONEncodingFormat
      | undefined;
  };

export const GetAllPromptTemplatesItemsPromptTemplatesResponse200ApplicationJSONProvider =
  {
    Cohere: "cohere",
    Openai: "openai",
    Anthropic: "anthropic",
    Huggingface: "huggingface",
    Replicate: "replicate",
    Google: "google",
    GoogleAi: "google-ai",
    Azure: "azure",
    Aws: "aws",
    Anyscale: "anyscale",
    Perplexity: "perplexity",
    Groq: "groq",
    Fal: "fal",
    Leonardoai: "leonardoai",
    Nvidia: "nvidia",
  } as const;
export type GetAllPromptTemplatesItemsPromptTemplatesResponse200ApplicationJSONProvider =
  ClosedEnum<
    typeof GetAllPromptTemplatesItemsPromptTemplatesResponse200ApplicationJSONProvider
  >;

/**
 * The role of the prompt message
 */
export const GetAllPromptTemplatesItemsPromptTemplatesResponse200ApplicationJSONRole =
  {
    System: "system",
    Assistant: "assistant",
    User: "user",
    Exception: "exception",
    Tool: "tool",
    Prompt: "prompt",
    Correction: "correction",
    ExpectedOutput: "expected_output",
  } as const;
/**
 * The role of the prompt message
 */
export type GetAllPromptTemplatesItemsPromptTemplatesResponse200ApplicationJSONRole =
  ClosedEnum<
    typeof GetAllPromptTemplatesItemsPromptTemplatesResponse200ApplicationJSONRole
  >;

export const GetAllPromptTemplates2PromptTemplatesResponse200ApplicationJSONResponseBodyItems3VersionsType =
  {
    ImageUrl: "image_url",
  } as const;
export type GetAllPromptTemplates2PromptTemplatesResponse200ApplicationJSONResponseBodyItems3VersionsType =
  ClosedEnum<
    typeof GetAllPromptTemplates2PromptTemplatesResponse200ApplicationJSONResponseBodyItems3VersionsType
  >;

export type GetAllPromptTemplates2PromptTemplatesResponse200ApplicationJSONResponseBodyImageUrl =
  {
    /**
     * The orq.ai id of the image
     */
    id?: string | undefined;
    /**
     * Either a URL of the image or the base64 encoded data URI.
     */
    url: string;
    /**
     * Specifies the detail level of the image. Currently only supported with OpenAI models
     */
    detail?: string | undefined;
  };

/**
 * The image part of the prompt message. Only supported with vision models.
 */
export type GetAllPromptTemplates2PromptTemplatesResponse200ApplicationJSONResponseBody2 =
  {
    type:
      GetAllPromptTemplates2PromptTemplatesResponse200ApplicationJSONResponseBodyItems3VersionsType;
    imageUrl:
      GetAllPromptTemplates2PromptTemplatesResponse200ApplicationJSONResponseBodyImageUrl;
  };

export const GetAllPromptTemplates2PromptTemplatesResponse200ApplicationJSONResponseBodyItems3Type =
  {
    Text: "text",
  } as const;
export type GetAllPromptTemplates2PromptTemplatesResponse200ApplicationJSONResponseBodyItems3Type =
  ClosedEnum<
    typeof GetAllPromptTemplates2PromptTemplatesResponse200ApplicationJSONResponseBodyItems3Type
  >;

/**
 * Text content part of a prompt message
 */
export type GetAllPromptTemplates2PromptTemplatesResponse200ApplicationJSONResponseBody1 =
  {
    type:
      GetAllPromptTemplates2PromptTemplatesResponse200ApplicationJSONResponseBodyItems3Type;
    text: string;
  };

export type GetAllPromptTemplatesContentPromptTemplatesResponse200ApplicationJSONResponseBody2 =
  | GetAllPromptTemplates2PromptTemplatesResponse200ApplicationJSONResponseBody1
  | GetAllPromptTemplates2PromptTemplatesResponse200ApplicationJSONResponseBody2;

/**
 * The contents of the user message. Either the text content of the message or an array of content parts with a defined type, each can be of type `text` or `image_url` when passing in images. You can pass multiple images by adding multiple `image_url` content parts.
 */
export type GetAllPromptTemplatesItemsPromptTemplatesResponse200ApplicationJSONContent =
  | string
  | Array<
    | GetAllPromptTemplates2PromptTemplatesResponse200ApplicationJSONResponseBody1
    | GetAllPromptTemplates2PromptTemplatesResponse200ApplicationJSONResponseBody2
  >;

export const GetAllPromptTemplatesItemsPromptTemplatesResponse200ApplicationJSONResponseBody3Type =
  {
    Function: "function",
  } as const;
export type GetAllPromptTemplatesItemsPromptTemplatesResponse200ApplicationJSONResponseBody3Type =
  ClosedEnum<
    typeof GetAllPromptTemplatesItemsPromptTemplatesResponse200ApplicationJSONResponseBody3Type
  >;

export type GetAllPromptTemplatesItemsPromptTemplatesResponse200ApplicationJSONFunction =
  {
    name: string;
    /**
     * JSON string arguments for the functions
     */
    arguments: string;
  };

export type GetAllPromptTemplatesItemsPromptTemplatesResponse200ApplicationJSONToolCalls =
  {
    id?: string | undefined;
    index?: number | undefined;
    type:
      GetAllPromptTemplatesItemsPromptTemplatesResponse200ApplicationJSONResponseBody3Type;
    function:
      GetAllPromptTemplatesItemsPromptTemplatesResponse200ApplicationJSONFunction;
  };

export type GetAllPromptTemplatesItemsPromptTemplatesResponse200ApplicationJSONMessages =
  {
    /**
     * The role of the prompt message
     */
    role:
      GetAllPromptTemplatesItemsPromptTemplatesResponse200ApplicationJSONRole;
    /**
     * The contents of the user message. Either the text content of the message or an array of content parts with a defined type, each can be of type `text` or `image_url` when passing in images. You can pass multiple images by adding multiple `image_url` content parts.
     */
    content:
      | string
      | Array<
        | GetAllPromptTemplates2PromptTemplatesResponse200ApplicationJSONResponseBody1
        | GetAllPromptTemplates2PromptTemplatesResponse200ApplicationJSONResponseBody2
      >;
    toolCalls?:
      | Array<
        GetAllPromptTemplatesItemsPromptTemplatesResponse200ApplicationJSONToolCalls
      >
      | undefined;
  };

export type GetAllPromptTemplatesItemsPromptTemplatesResponse200ApplicationJSONPromptConfig =
  {
    stream?: boolean | undefined;
    model?: string | undefined;
    /**
     * The id of the resource
     */
    modelDbId?: string | undefined;
    /**
     * The type of the model
     */
    modelType?:
      | GetAllPromptTemplatesItemsPromptTemplatesResponse200ApplicationJSONModelType
      | undefined;
    /**
     * Model Parameters: Not all parameters apply to every model
     */
    modelParameters?:
      | GetAllPromptTemplatesItemsPromptTemplatesResponse200ApplicationJSONModelParameters
      | undefined;
    provider?:
      | GetAllPromptTemplatesItemsPromptTemplatesResponse200ApplicationJSONProvider
      | undefined;
    /**
     * The id of the resource
     */
    integrationId?: string | null | undefined;
    version?: string | undefined;
    messages: Array<
      GetAllPromptTemplatesItemsPromptTemplatesResponse200ApplicationJSONMessages
    >;
  };

export type GetAllPromptTemplatesItemsPromptTemplatesResponse200ApplicationJSONMetadata =
  {
    useCases?: Array<string> | undefined;
    language?: string | undefined;
  };

/**
 * Prompt version model returned from the API
 */
export type GetAllPromptTemplatesItemsVersions = {
  id: string;
  createdById: string;
  displayName: string;
  updatedById: string;
  description?: string | null | undefined;
  promptConfig:
    GetAllPromptTemplatesItemsPromptTemplatesResponse200ApplicationJSONPromptConfig;
  metadata:
    GetAllPromptTemplatesItemsPromptTemplatesResponse200ApplicationJSONMetadata;
  commit: string;
  timestamp: string;
};

export const GetAllPromptTemplatesItemsPromptTemplatesType = {
  Template: "template",
} as const;
export type GetAllPromptTemplatesItemsPromptTemplatesType = ClosedEnum<
  typeof GetAllPromptTemplatesItemsPromptTemplatesType
>;

/**
 * Prompt template model returned from the API
 */
export type Items3 = {
  id: string;
  owner: string | GetAllPromptTemplatesOwnerPromptTemplates2;
  domainId: string;
  createdById: string;
  displayName: string;
  updatedById: string;
  description?: string | null | undefined;
  promptConfig: GetAllPromptTemplatesItemsPromptTemplatesPromptConfig;
  metadata: GetAllPromptTemplatesItemsPromptTemplatesMetadata;
  /**
   * The date and time the resource was created
   */
  created?: Date | undefined;
  /**
   * The date and time the resource was last updated
   */
  updated?: Date | undefined;
  versions: Array<GetAllPromptTemplatesItemsVersions>;
  type: GetAllPromptTemplatesItemsPromptTemplatesType;
};

export const GetAllPromptTemplatesOwner2 = {
  Vendor: "vendor",
} as const;
export type GetAllPromptTemplatesOwner2 = ClosedEnum<
  typeof GetAllPromptTemplatesOwner2
>;

export type ItemsOwner = string | GetAllPromptTemplatesOwner2;

/**
 * The type of the model
 */
export const GetAllPromptTemplatesItemsModelType = {
  Chat: "chat",
  Completion: "completion",
  Embedding: "embedding",
  Vision: "vision",
  Image: "image",
  Tts: "tts",
  Stt: "stt",
  Rerank: "rerank",
} as const;
/**
 * The type of the model
 */
export type GetAllPromptTemplatesItemsModelType = ClosedEnum<
  typeof GetAllPromptTemplatesItemsModelType
>;

/**
 * Only supported on `image` models.
 */
export const GetAllPromptTemplatesItemsFormat = {
  Url: "url",
  B64Json: "b64_json",
  Text: "text",
  JsonObject: "json_object",
} as const;
/**
 * Only supported on `image` models.
 */
export type GetAllPromptTemplatesItemsFormat = ClosedEnum<
  typeof GetAllPromptTemplatesItemsFormat
>;

/**
 * Only supported on `image` models.
 */
export const GetAllPromptTemplatesItemsQuality = {
  Standard: "standard",
  Hd: "hd",
} as const;
/**
 * Only supported on `image` models.
 */
export type GetAllPromptTemplatesItemsQuality = ClosedEnum<
  typeof GetAllPromptTemplatesItemsQuality
>;

export const GetAllPromptTemplatesResponseFormatPromptTemplatesResponse200Type =
  {
    JsonObject: "json_object",
  } as const;
export type GetAllPromptTemplatesResponseFormatPromptTemplatesResponse200Type =
  ClosedEnum<
    typeof GetAllPromptTemplatesResponseFormatPromptTemplatesResponse200Type
  >;

export type GetAllPromptTemplatesResponseFormatPromptTemplates2 = {
  type: GetAllPromptTemplatesResponseFormatPromptTemplatesResponse200Type;
};

export const GetAllPromptTemplatesResponseFormatPromptTemplatesResponseType = {
  JsonSchema: "json_schema",
} as const;
export type GetAllPromptTemplatesResponseFormatPromptTemplatesResponseType =
  ClosedEnum<
    typeof GetAllPromptTemplatesResponseFormatPromptTemplatesResponseType
  >;

export type GetAllPromptTemplatesResponseFormatPromptTemplatesJsonSchema = {
  name: string;
  strict: boolean;
  schema: { [k: string]: any };
};

export type GetAllPromptTemplatesResponseFormatPromptTemplates1 = {
  type: GetAllPromptTemplatesResponseFormatPromptTemplatesResponseType;
  jsonSchema: GetAllPromptTemplatesResponseFormatPromptTemplatesJsonSchema;
};

/**
 * An object specifying the format that the model must output.
 *
 * @remarks
 *
 *  Setting to `{ "type": "json_schema", "json_schema": {...} }` enables Structured Outputs which ensures the model will match your supplied JSON schema
 *
 *  Setting to `{ "type": "json_object" }` enables JSON mode, which ensures the message the model generates is valid JSON.
 *
 * Important: when using JSON mode, you must also instruct the model to produce JSON yourself via a system or user message. Without this, the model may generate an unending stream of whitespace until the generation reaches the token limit, resulting in a long-running and seemingly "stuck" request. Also note that the message content may be partially cut off if finish_reason="length", which indicates the generation exceeded max_tokens or the conversation exceeded the max context length.
 */
export type GetAllPromptTemplatesItemsResponseFormat =
  | GetAllPromptTemplatesResponseFormatPromptTemplates2
  | GetAllPromptTemplatesResponseFormatPromptTemplates1;

/**
 * The version of photoReal to use. Must be v1 or v2. Only available for `leonardoai` provider
 */
export const GetAllPromptTemplatesItemsPhotoRealVersion = {
  V1: "v1",
  V2: "v2",
} as const;
/**
 * The version of photoReal to use. Must be v1 or v2. Only available for `leonardoai` provider
 */
export type GetAllPromptTemplatesItemsPhotoRealVersion = ClosedEnum<
  typeof GetAllPromptTemplatesItemsPhotoRealVersion
>;

/**
 * The format to return the embeddings
 */
export const GetAllPromptTemplatesItemsEncodingFormat = {
  Float: "float",
  Base64: "base64",
} as const;
/**
 * The format to return the embeddings
 */
export type GetAllPromptTemplatesItemsEncodingFormat = ClosedEnum<
  typeof GetAllPromptTemplatesItemsEncodingFormat
>;

/**
 * Model Parameters: Not all parameters apply to every model
 */
export type GetAllPromptTemplatesItemsModelParameters = {
  /**
   * Only supported on `chat` and `completion` models.
   */
  temperature?: number | undefined;
  /**
   * Only supported on `chat` and `completion` models.
   */
  maxTokens?: number | undefined;
  /**
   * Only supported on `chat` and `completion` models.
   */
  topK?: number | undefined;
  /**
   * Only supported on `chat` and `completion` models.
   */
  topP?: number | undefined;
  /**
   * Only supported on `chat` and `completion` models.
   */
  frequencyPenalty?: number | undefined;
  /**
   * Only supported on `chat` and `completion` models.
   */
  presencePenalty?: number | undefined;
  /**
   * Only supported on `image` models.
   */
  numImages?: number | undefined;
  /**
   * Best effort deterministic seed for the model. Currently only OpenAI models support these
   */
  seed?: number | undefined;
  /**
   * Only supported on `image` models.
   */
  format?: GetAllPromptTemplatesItemsFormat | undefined;
  /**
   * Only supported on `image` models.
   */
  dimensions?: string | undefined;
  /**
   * Only supported on `image` models.
   */
  quality?: GetAllPromptTemplatesItemsQuality | undefined;
  /**
   * Only supported on `image` models.
   */
  style?: string | undefined;
  /**
   * An object specifying the format that the model must output.
   *
   * @remarks
   *
   *  Setting to `{ "type": "json_schema", "json_schema": {...} }` enables Structured Outputs which ensures the model will match your supplied JSON schema
   *
   *  Setting to `{ "type": "json_object" }` enables JSON mode, which ensures the message the model generates is valid JSON.
   *
   * Important: when using JSON mode, you must also instruct the model to produce JSON yourself via a system or user message. Without this, the model may generate an unending stream of whitespace until the generation reaches the token limit, resulting in a long-running and seemingly "stuck" request. Also note that the message content may be partially cut off if finish_reason="length", which indicates the generation exceeded max_tokens or the conversation exceeded the max context length.
   */
  responseFormat?:
    | GetAllPromptTemplatesResponseFormatPromptTemplates2
    | GetAllPromptTemplatesResponseFormatPromptTemplates1
    | null
    | undefined;
  /**
   * The version of photoReal to use. Must be v1 or v2. Only available for `leonardoai` provider
   */
  photoRealVersion?: GetAllPromptTemplatesItemsPhotoRealVersion | undefined;
  /**
   * The format to return the embeddings
   */
  encodingFormat?: GetAllPromptTemplatesItemsEncodingFormat | undefined;
};

export const GetAllPromptTemplatesItemsProvider = {
  Cohere: "cohere",
  Openai: "openai",
  Anthropic: "anthropic",
  Huggingface: "huggingface",
  Replicate: "replicate",
  Google: "google",
  GoogleAi: "google-ai",
  Azure: "azure",
  Aws: "aws",
  Anyscale: "anyscale",
  Perplexity: "perplexity",
  Groq: "groq",
  Fal: "fal",
  Leonardoai: "leonardoai",
  Nvidia: "nvidia",
} as const;
export type GetAllPromptTemplatesItemsProvider = ClosedEnum<
  typeof GetAllPromptTemplatesItemsProvider
>;

/**
 * The role of the prompt message
 */
export const GetAllPromptTemplatesItemsRole = {
  System: "system",
  Assistant: "assistant",
  User: "user",
  Exception: "exception",
  Tool: "tool",
  Prompt: "prompt",
  Correction: "correction",
  ExpectedOutput: "expected_output",
} as const;
/**
 * The role of the prompt message
 */
export type GetAllPromptTemplatesItemsRole = ClosedEnum<
  typeof GetAllPromptTemplatesItemsRole
>;

export const GetAllPromptTemplates2PromptTemplatesResponse200Type = {
  ImageUrl: "image_url",
} as const;
export type GetAllPromptTemplates2PromptTemplatesResponse200Type = ClosedEnum<
  typeof GetAllPromptTemplates2PromptTemplatesResponse200Type
>;

export type GetAllPromptTemplates2PromptTemplatesImageUrl = {
  /**
   * The orq.ai id of the image
   */
  id?: string | undefined;
  /**
   * Either a URL of the image or the base64 encoded data URI.
   */
  url: string;
  /**
   * Specifies the detail level of the image. Currently only supported with OpenAI models
   */
  detail?: string | undefined;
};

/**
 * The image part of the prompt message. Only supported with vision models.
 */
export type GetAllPromptTemplates2PromptTemplates2 = {
  type: GetAllPromptTemplates2PromptTemplatesResponse200Type;
  imageUrl: GetAllPromptTemplates2PromptTemplatesImageUrl;
};

export const GetAllPromptTemplates2PromptTemplatesResponseType = {
  Text: "text",
} as const;
export type GetAllPromptTemplates2PromptTemplatesResponseType = ClosedEnum<
  typeof GetAllPromptTemplates2PromptTemplatesResponseType
>;

/**
 * Text content part of a prompt message
 */
export type GetAllPromptTemplates2PromptTemplates1 = {
  type: GetAllPromptTemplates2PromptTemplatesResponseType;
  text: string;
};

export type GetAllPromptTemplatesContentPromptTemplates2 =
  | GetAllPromptTemplates2PromptTemplates1
  | GetAllPromptTemplates2PromptTemplates2;

/**
 * The contents of the user message. Either the text content of the message or an array of content parts with a defined type, each can be of type `text` or `image_url` when passing in images. You can pass multiple images by adding multiple `image_url` content parts.
 */
export type GetAllPromptTemplatesItemsContent =
  | string
  | Array<
    | GetAllPromptTemplates2PromptTemplates1
    | GetAllPromptTemplates2PromptTemplates2
  >;

export const GetAllPromptTemplatesItemsPromptTemplatesResponse200ApplicationJSONType =
  {
    Function: "function",
  } as const;
export type GetAllPromptTemplatesItemsPromptTemplatesResponse200ApplicationJSONType =
  ClosedEnum<
    typeof GetAllPromptTemplatesItemsPromptTemplatesResponse200ApplicationJSONType
  >;

export type GetAllPromptTemplatesItemsFunction = {
  name: string;
  /**
   * JSON string arguments for the functions
   */
  arguments: string;
};

export type GetAllPromptTemplatesItemsToolCalls = {
  id?: string | undefined;
  index?: number | undefined;
  type: GetAllPromptTemplatesItemsPromptTemplatesResponse200ApplicationJSONType;
  function: GetAllPromptTemplatesItemsFunction;
};

export type GetAllPromptTemplatesItemsMessages = {
  /**
   * The role of the prompt message
   */
  role: GetAllPromptTemplatesItemsRole;
  /**
   * The contents of the user message. Either the text content of the message or an array of content parts with a defined type, each can be of type `text` or `image_url` when passing in images. You can pass multiple images by adding multiple `image_url` content parts.
   */
  content:
    | string
    | Array<
      | GetAllPromptTemplates2PromptTemplates1
      | GetAllPromptTemplates2PromptTemplates2
    >;
  toolCalls?: Array<GetAllPromptTemplatesItemsToolCalls> | undefined;
};

export type GetAllPromptTemplatesItemsPromptConfig = {
  stream?: boolean | undefined;
  model?: string | undefined;
  /**
   * The id of the resource
   */
  modelDbId?: string | undefined;
  /**
   * The type of the model
   */
  modelType?: GetAllPromptTemplatesItemsModelType | undefined;
  /**
   * Model Parameters: Not all parameters apply to every model
   */
  modelParameters?: GetAllPromptTemplatesItemsModelParameters | undefined;
  provider?: GetAllPromptTemplatesItemsProvider | undefined;
  /**
   * The id of the resource
   */
  integrationId?: string | null | undefined;
  version?: string | undefined;
  messages: Array<GetAllPromptTemplatesItemsMessages>;
};

export type GetAllPromptTemplatesItemsMetadata = {
  useCases?: Array<string> | undefined;
  language?: string | undefined;
};

/**
 * The type of the model
 */
export const GetAllPromptTemplatesItemsPromptTemplatesResponseModelType = {
  Chat: "chat",
  Completion: "completion",
  Embedding: "embedding",
  Vision: "vision",
  Image: "image",
  Tts: "tts",
  Stt: "stt",
  Rerank: "rerank",
} as const;
/**
 * The type of the model
 */
export type GetAllPromptTemplatesItemsPromptTemplatesResponseModelType =
  ClosedEnum<typeof GetAllPromptTemplatesItemsPromptTemplatesResponseModelType>;

/**
 * Only supported on `image` models.
 */
export const GetAllPromptTemplatesItemsPromptTemplatesResponse200Format = {
  Url: "url",
  B64Json: "b64_json",
  Text: "text",
  JsonObject: "json_object",
} as const;
/**
 * Only supported on `image` models.
 */
export type GetAllPromptTemplatesItemsPromptTemplatesResponse200Format =
  ClosedEnum<typeof GetAllPromptTemplatesItemsPromptTemplatesResponse200Format>;

/**
 * Only supported on `image` models.
 */
export const GetAllPromptTemplatesItemsPromptTemplatesResponseQuality = {
  Standard: "standard",
  Hd: "hd",
} as const;
/**
 * Only supported on `image` models.
 */
export type GetAllPromptTemplatesItemsPromptTemplatesResponseQuality =
  ClosedEnum<typeof GetAllPromptTemplatesItemsPromptTemplatesResponseQuality>;

export const GetAllPromptTemplatesResponseFormatPromptTemplatesResponse200ApplicationJSONResponseBodyItems2Type =
  {
    JsonObject: "json_object",
  } as const;
export type GetAllPromptTemplatesResponseFormatPromptTemplatesResponse200ApplicationJSONResponseBodyItems2Type =
  ClosedEnum<
    typeof GetAllPromptTemplatesResponseFormatPromptTemplatesResponse200ApplicationJSONResponseBodyItems2Type
  >;

export type GetAllPromptTemplatesResponseFormatPromptTemplatesResponse2002 = {
  type:
    GetAllPromptTemplatesResponseFormatPromptTemplatesResponse200ApplicationJSONResponseBodyItems2Type;
};

export const GetAllPromptTemplatesResponseFormatPromptTemplatesResponse200ApplicationJSONResponseBodyItemsType =
  {
    JsonSchema: "json_schema",
  } as const;
export type GetAllPromptTemplatesResponseFormatPromptTemplatesResponse200ApplicationJSONResponseBodyItemsType =
  ClosedEnum<
    typeof GetAllPromptTemplatesResponseFormatPromptTemplatesResponse200ApplicationJSONResponseBodyItemsType
  >;

export type GetAllPromptTemplatesResponseFormatPromptTemplatesResponse200JsonSchema =
  {
    name: string;
    strict: boolean;
    schema: { [k: string]: any };
  };

export type GetAllPromptTemplatesResponseFormatPromptTemplatesResponse2001 = {
  type:
    GetAllPromptTemplatesResponseFormatPromptTemplatesResponse200ApplicationJSONResponseBodyItemsType;
  jsonSchema:
    GetAllPromptTemplatesResponseFormatPromptTemplatesResponse200JsonSchema;
};

/**
 * An object specifying the format that the model must output.
 *
 * @remarks
 *
 *  Setting to `{ "type": "json_schema", "json_schema": {...} }` enables Structured Outputs which ensures the model will match your supplied JSON schema
 *
 *  Setting to `{ "type": "json_object" }` enables JSON mode, which ensures the message the model generates is valid JSON.
 *
 * Important: when using JSON mode, you must also instruct the model to produce JSON yourself via a system or user message. Without this, the model may generate an unending stream of whitespace until the generation reaches the token limit, resulting in a long-running and seemingly "stuck" request. Also note that the message content may be partially cut off if finish_reason="length", which indicates the generation exceeded max_tokens or the conversation exceeded the max context length.
 */
export type GetAllPromptTemplatesItemsPromptTemplatesResponseResponseFormat =
  | GetAllPromptTemplatesResponseFormatPromptTemplatesResponse2002
  | GetAllPromptTemplatesResponseFormatPromptTemplatesResponse2001;

/**
 * The version of photoReal to use. Must be v1 or v2. Only available for `leonardoai` provider
 */
export const GetAllPromptTemplatesItemsPromptTemplatesResponsePhotoRealVersion =
  {
    V1: "v1",
    V2: "v2",
  } as const;
/**
 * The version of photoReal to use. Must be v1 or v2. Only available for `leonardoai` provider
 */
export type GetAllPromptTemplatesItemsPromptTemplatesResponsePhotoRealVersion =
  ClosedEnum<
    typeof GetAllPromptTemplatesItemsPromptTemplatesResponsePhotoRealVersion
  >;

/**
 * The format to return the embeddings
 */
export const GetAllPromptTemplatesItemsPromptTemplatesResponseEncodingFormat = {
  Float: "float",
  Base64: "base64",
} as const;
/**
 * The format to return the embeddings
 */
export type GetAllPromptTemplatesItemsPromptTemplatesResponseEncodingFormat =
  ClosedEnum<
    typeof GetAllPromptTemplatesItemsPromptTemplatesResponseEncodingFormat
  >;

/**
 * Model Parameters: Not all parameters apply to every model
 */
export type GetAllPromptTemplatesItemsPromptTemplatesResponseModelParameters = {
  /**
   * Only supported on `chat` and `completion` models.
   */
  temperature?: number | undefined;
  /**
   * Only supported on `chat` and `completion` models.
   */
  maxTokens?: number | undefined;
  /**
   * Only supported on `chat` and `completion` models.
   */
  topK?: number | undefined;
  /**
   * Only supported on `chat` and `completion` models.
   */
  topP?: number | undefined;
  /**
   * Only supported on `chat` and `completion` models.
   */
  frequencyPenalty?: number | undefined;
  /**
   * Only supported on `chat` and `completion` models.
   */
  presencePenalty?: number | undefined;
  /**
   * Only supported on `image` models.
   */
  numImages?: number | undefined;
  /**
   * Best effort deterministic seed for the model. Currently only OpenAI models support these
   */
  seed?: number | undefined;
  /**
   * Only supported on `image` models.
   */
  format?:
    | GetAllPromptTemplatesItemsPromptTemplatesResponse200Format
    | undefined;
  /**
   * Only supported on `image` models.
   */
  dimensions?: string | undefined;
  /**
   * Only supported on `image` models.
   */
  quality?:
    | GetAllPromptTemplatesItemsPromptTemplatesResponseQuality
    | undefined;
  /**
   * Only supported on `image` models.
   */
  style?: string | undefined;
  /**
   * An object specifying the format that the model must output.
   *
   * @remarks
   *
   *  Setting to `{ "type": "json_schema", "json_schema": {...} }` enables Structured Outputs which ensures the model will match your supplied JSON schema
   *
   *  Setting to `{ "type": "json_object" }` enables JSON mode, which ensures the message the model generates is valid JSON.
   *
   * Important: when using JSON mode, you must also instruct the model to produce JSON yourself via a system or user message. Without this, the model may generate an unending stream of whitespace until the generation reaches the token limit, resulting in a long-running and seemingly "stuck" request. Also note that the message content may be partially cut off if finish_reason="length", which indicates the generation exceeded max_tokens or the conversation exceeded the max context length.
   */
  responseFormat?:
    | GetAllPromptTemplatesResponseFormatPromptTemplatesResponse2002
    | GetAllPromptTemplatesResponseFormatPromptTemplatesResponse2001
    | null
    | undefined;
  /**
   * The version of photoReal to use. Must be v1 or v2. Only available for `leonardoai` provider
   */
  photoRealVersion?:
    | GetAllPromptTemplatesItemsPromptTemplatesResponsePhotoRealVersion
    | undefined;
  /**
   * The format to return the embeddings
   */
  encodingFormat?:
    | GetAllPromptTemplatesItemsPromptTemplatesResponseEncodingFormat
    | undefined;
};

export const GetAllPromptTemplatesItemsPromptTemplatesResponseProvider = {
  Cohere: "cohere",
  Openai: "openai",
  Anthropic: "anthropic",
  Huggingface: "huggingface",
  Replicate: "replicate",
  Google: "google",
  GoogleAi: "google-ai",
  Azure: "azure",
  Aws: "aws",
  Anyscale: "anyscale",
  Perplexity: "perplexity",
  Groq: "groq",
  Fal: "fal",
  Leonardoai: "leonardoai",
  Nvidia: "nvidia",
} as const;
export type GetAllPromptTemplatesItemsPromptTemplatesResponseProvider =
  ClosedEnum<typeof GetAllPromptTemplatesItemsPromptTemplatesResponseProvider>;

/**
 * The role of the prompt message
 */
export const GetAllPromptTemplatesItemsPromptTemplatesResponseRole = {
  System: "system",
  Assistant: "assistant",
  User: "user",
  Exception: "exception",
  Tool: "tool",
  Prompt: "prompt",
  Correction: "correction",
  ExpectedOutput: "expected_output",
} as const;
/**
 * The role of the prompt message
 */
export type GetAllPromptTemplatesItemsPromptTemplatesResponseRole = ClosedEnum<
  typeof GetAllPromptTemplatesItemsPromptTemplatesResponseRole
>;

export const GetAllPromptTemplates2PromptTemplatesResponse200ApplicationJSONResponseBodyItems2Type =
  {
    ImageUrl: "image_url",
  } as const;
export type GetAllPromptTemplates2PromptTemplatesResponse200ApplicationJSONResponseBodyItems2Type =
  ClosedEnum<
    typeof GetAllPromptTemplates2PromptTemplatesResponse200ApplicationJSONResponseBodyItems2Type
  >;

export type GetAllPromptTemplates2PromptTemplatesResponse200ImageUrl = {
  /**
   * The orq.ai id of the image
   */
  id?: string | undefined;
  /**
   * Either a URL of the image or the base64 encoded data URI.
   */
  url: string;
  /**
   * Specifies the detail level of the image. Currently only supported with OpenAI models
   */
  detail?: string | undefined;
};

/**
 * The image part of the prompt message. Only supported with vision models.
 */
export type GetAllPromptTemplates2PromptTemplatesResponse2002 = {
  type:
    GetAllPromptTemplates2PromptTemplatesResponse200ApplicationJSONResponseBodyItems2Type;
  imageUrl: GetAllPromptTemplates2PromptTemplatesResponse200ImageUrl;
};

export const GetAllPromptTemplates2PromptTemplatesResponse200ApplicationJSONResponseBodyItemsType =
  {
    Text: "text",
  } as const;
export type GetAllPromptTemplates2PromptTemplatesResponse200ApplicationJSONResponseBodyItemsType =
  ClosedEnum<
    typeof GetAllPromptTemplates2PromptTemplatesResponse200ApplicationJSONResponseBodyItemsType
  >;

/**
 * Text content part of a prompt message
 */
export type GetAllPromptTemplates2PromptTemplatesResponse2001 = {
  type:
    GetAllPromptTemplates2PromptTemplatesResponse200ApplicationJSONResponseBodyItemsType;
  text: string;
};

export type GetAllPromptTemplatesContentPromptTemplatesResponse2002 =
  | GetAllPromptTemplates2PromptTemplatesResponse2001
  | GetAllPromptTemplates2PromptTemplatesResponse2002;

/**
 * The contents of the user message. Either the text content of the message or an array of content parts with a defined type, each can be of type `text` or `image_url` when passing in images. You can pass multiple images by adding multiple `image_url` content parts.
 */
export type GetAllPromptTemplatesItemsPromptTemplatesResponseContent =
  | string
  | Array<
    | GetAllPromptTemplates2PromptTemplatesResponse2001
    | GetAllPromptTemplates2PromptTemplatesResponse2002
  >;

export const GetAllPromptTemplatesItemsPromptTemplatesResponse200ApplicationJSONResponseBodyType =
  {
    Function: "function",
  } as const;
export type GetAllPromptTemplatesItemsPromptTemplatesResponse200ApplicationJSONResponseBodyType =
  ClosedEnum<
    typeof GetAllPromptTemplatesItemsPromptTemplatesResponse200ApplicationJSONResponseBodyType
  >;

export type GetAllPromptTemplatesItemsPromptTemplatesResponseFunction = {
  name: string;
  /**
   * JSON string arguments for the functions
   */
  arguments: string;
};

export type GetAllPromptTemplatesItemsPromptTemplatesResponseToolCalls = {
  id?: string | undefined;
  index?: number | undefined;
  type:
    GetAllPromptTemplatesItemsPromptTemplatesResponse200ApplicationJSONResponseBodyType;
  function: GetAllPromptTemplatesItemsPromptTemplatesResponseFunction;
};

export type GetAllPromptTemplatesItemsPromptTemplatesResponseMessages = {
  /**
   * The role of the prompt message
   */
  role: GetAllPromptTemplatesItemsPromptTemplatesResponseRole;
  /**
   * The contents of the user message. Either the text content of the message or an array of content parts with a defined type, each can be of type `text` or `image_url` when passing in images. You can pass multiple images by adding multiple `image_url` content parts.
   */
  content:
    | string
    | Array<
      | GetAllPromptTemplates2PromptTemplatesResponse2001
      | GetAllPromptTemplates2PromptTemplatesResponse2002
    >;
  toolCalls?:
    | Array<GetAllPromptTemplatesItemsPromptTemplatesResponseToolCalls>
    | undefined;
};

export type GetAllPromptTemplatesItemsPromptTemplatesResponsePromptConfig = {
  stream?: boolean | undefined;
  model?: string | undefined;
  /**
   * The id of the resource
   */
  modelDbId?: string | undefined;
  /**
   * The type of the model
   */
  modelType?:
    | GetAllPromptTemplatesItemsPromptTemplatesResponseModelType
    | undefined;
  /**
   * Model Parameters: Not all parameters apply to every model
   */
  modelParameters?:
    | GetAllPromptTemplatesItemsPromptTemplatesResponseModelParameters
    | undefined;
  provider?:
    | GetAllPromptTemplatesItemsPromptTemplatesResponseProvider
    | undefined;
  /**
   * The id of the resource
   */
  integrationId?: string | null | undefined;
  version?: string | undefined;
  messages: Array<GetAllPromptTemplatesItemsPromptTemplatesResponseMessages>;
};

export type GetAllPromptTemplatesItemsPromptTemplatesResponseMetadata = {
  useCases?: Array<string> | undefined;
  language?: string | undefined;
};

/**
 * Prompt version model returned from the API
 */
export type ItemsVersions = {
  id: string;
  createdById: string;
  displayName: string;
  updatedById: string;
  description?: string | null | undefined;
  promptConfig: GetAllPromptTemplatesItemsPromptTemplatesResponsePromptConfig;
  metadata: GetAllPromptTemplatesItemsPromptTemplatesResponseMetadata;
  commit: string;
  timestamp: string;
};

export const GetAllPromptTemplatesItemsType = {
  Snippet: "snippet",
} as const;
export type GetAllPromptTemplatesItemsType = ClosedEnum<
  typeof GetAllPromptTemplatesItemsType
>;

/**
 * Prompt snippet model returned from the API
 */
export type Items2 = {
  id: string;
  owner: string | GetAllPromptTemplatesOwner2;
  domainId: string;
  createdById: string;
  displayName: string;
  updatedById: string;
  description?: string | null | undefined;
  promptConfig: GetAllPromptTemplatesItemsPromptConfig;
  metadata: GetAllPromptTemplatesItemsMetadata;
  /**
   * The date and time the resource was created
   */
  created?: Date | undefined;
  /**
   * The date and time the resource was last updated
   */
  updated?: Date | undefined;
  versions: Array<ItemsVersions>;
  key: string;
  type: GetAllPromptTemplatesItemsType;
};

export const GetAllPromptTemplatesOwnerPromptTemplatesResponse2 = {
  Vendor: "vendor",
} as const;
export type GetAllPromptTemplatesOwnerPromptTemplatesResponse2 = ClosedEnum<
  typeof GetAllPromptTemplatesOwnerPromptTemplatesResponse2
>;

export type GetAllPromptTemplatesItemsPromptTemplatesOwner =
  | string
  | GetAllPromptTemplatesOwnerPromptTemplatesResponse2;

/**
 * The type of the model
 */
export const ItemsModelType = {
  Chat: "chat",
  Completion: "completion",
  Embedding: "embedding",
  Vision: "vision",
  Image: "image",
  Tts: "tts",
  Stt: "stt",
  Rerank: "rerank",
} as const;
/**
 * The type of the model
 */
export type ItemsModelType = ClosedEnum<typeof ItemsModelType>;

/**
 * Only supported on `image` models.
 */
export const ItemsFormat = {
  Url: "url",
  B64Json: "b64_json",
  Text: "text",
  JsonObject: "json_object",
} as const;
/**
 * Only supported on `image` models.
 */
export type ItemsFormat = ClosedEnum<typeof ItemsFormat>;

/**
 * Only supported on `image` models.
 */
export const ItemsQuality = {
  Standard: "standard",
  Hd: "hd",
} as const;
/**
 * Only supported on `image` models.
 */
export type ItemsQuality = ClosedEnum<typeof ItemsQuality>;

export const GetAllPromptTemplatesResponseFormatPromptTemplatesType = {
  JsonObject: "json_object",
} as const;
export type GetAllPromptTemplatesResponseFormatPromptTemplatesType = ClosedEnum<
  typeof GetAllPromptTemplatesResponseFormatPromptTemplatesType
>;

export type GetAllPromptTemplatesResponseFormat2 = {
  type: GetAllPromptTemplatesResponseFormatPromptTemplatesType;
};

export const GetAllPromptTemplatesResponseFormatType = {
  JsonSchema: "json_schema",
} as const;
export type GetAllPromptTemplatesResponseFormatType = ClosedEnum<
  typeof GetAllPromptTemplatesResponseFormatType
>;

export type GetAllPromptTemplatesResponseFormatJsonSchema = {
  name: string;
  strict: boolean;
  schema: { [k: string]: any };
};

export type GetAllPromptTemplatesResponseFormat1 = {
  type: GetAllPromptTemplatesResponseFormatType;
  jsonSchema: GetAllPromptTemplatesResponseFormatJsonSchema;
};

/**
 * An object specifying the format that the model must output.
 *
 * @remarks
 *
 *  Setting to `{ "type": "json_schema", "json_schema": {...} }` enables Structured Outputs which ensures the model will match your supplied JSON schema
 *
 *  Setting to `{ "type": "json_object" }` enables JSON mode, which ensures the message the model generates is valid JSON.
 *
 * Important: when using JSON mode, you must also instruct the model to produce JSON yourself via a system or user message. Without this, the model may generate an unending stream of whitespace until the generation reaches the token limit, resulting in a long-running and seemingly "stuck" request. Also note that the message content may be partially cut off if finish_reason="length", which indicates the generation exceeded max_tokens or the conversation exceeded the max context length.
 */
export type ItemsResponseFormat =
  | GetAllPromptTemplatesResponseFormat2
  | GetAllPromptTemplatesResponseFormat1;

/**
 * The version of photoReal to use. Must be v1 or v2. Only available for `leonardoai` provider
 */
export const ItemsPhotoRealVersion = {
  V1: "v1",
  V2: "v2",
} as const;
/**
 * The version of photoReal to use. Must be v1 or v2. Only available for `leonardoai` provider
 */
export type ItemsPhotoRealVersion = ClosedEnum<typeof ItemsPhotoRealVersion>;

/**
 * The format to return the embeddings
 */
export const ItemsEncodingFormat = {
  Float: "float",
  Base64: "base64",
} as const;
/**
 * The format to return the embeddings
 */
export type ItemsEncodingFormat = ClosedEnum<typeof ItemsEncodingFormat>;

/**
 * Model Parameters: Not all parameters apply to every model
 */
export type ItemsModelParameters = {
  /**
   * Only supported on `chat` and `completion` models.
   */
  temperature?: number | undefined;
  /**
   * Only supported on `chat` and `completion` models.
   */
  maxTokens?: number | undefined;
  /**
   * Only supported on `chat` and `completion` models.
   */
  topK?: number | undefined;
  /**
   * Only supported on `chat` and `completion` models.
   */
  topP?: number | undefined;
  /**
   * Only supported on `chat` and `completion` models.
   */
  frequencyPenalty?: number | undefined;
  /**
   * Only supported on `chat` and `completion` models.
   */
  presencePenalty?: number | undefined;
  /**
   * Only supported on `image` models.
   */
  numImages?: number | undefined;
  /**
   * Best effort deterministic seed for the model. Currently only OpenAI models support these
   */
  seed?: number | undefined;
  /**
   * Only supported on `image` models.
   */
  format?: ItemsFormat | undefined;
  /**
   * Only supported on `image` models.
   */
  dimensions?: string | undefined;
  /**
   * Only supported on `image` models.
   */
  quality?: ItemsQuality | undefined;
  /**
   * Only supported on `image` models.
   */
  style?: string | undefined;
  /**
   * An object specifying the format that the model must output.
   *
   * @remarks
   *
   *  Setting to `{ "type": "json_schema", "json_schema": {...} }` enables Structured Outputs which ensures the model will match your supplied JSON schema
   *
   *  Setting to `{ "type": "json_object" }` enables JSON mode, which ensures the message the model generates is valid JSON.
   *
   * Important: when using JSON mode, you must also instruct the model to produce JSON yourself via a system or user message. Without this, the model may generate an unending stream of whitespace until the generation reaches the token limit, resulting in a long-running and seemingly "stuck" request. Also note that the message content may be partially cut off if finish_reason="length", which indicates the generation exceeded max_tokens or the conversation exceeded the max context length.
   */
  responseFormat?:
    | GetAllPromptTemplatesResponseFormat2
    | GetAllPromptTemplatesResponseFormat1
    | null
    | undefined;
  /**
   * The version of photoReal to use. Must be v1 or v2. Only available for `leonardoai` provider
   */
  photoRealVersion?: ItemsPhotoRealVersion | undefined;
  /**
   * The format to return the embeddings
   */
  encodingFormat?: ItemsEncodingFormat | undefined;
};

export const ItemsProvider = {
  Cohere: "cohere",
  Openai: "openai",
  Anthropic: "anthropic",
  Huggingface: "huggingface",
  Replicate: "replicate",
  Google: "google",
  GoogleAi: "google-ai",
  Azure: "azure",
  Aws: "aws",
  Anyscale: "anyscale",
  Perplexity: "perplexity",
  Groq: "groq",
  Fal: "fal",
  Leonardoai: "leonardoai",
  Nvidia: "nvidia",
} as const;
export type ItemsProvider = ClosedEnum<typeof ItemsProvider>;

/**
 * The role of the prompt message
 */
export const ItemsRole = {
  System: "system",
  Assistant: "assistant",
  User: "user",
  Exception: "exception",
  Tool: "tool",
  Prompt: "prompt",
  Correction: "correction",
  ExpectedOutput: "expected_output",
} as const;
/**
 * The role of the prompt message
 */
export type ItemsRole = ClosedEnum<typeof ItemsRole>;

export const GetAllPromptTemplates2PromptTemplatesType = {
  ImageUrl: "image_url",
} as const;
export type GetAllPromptTemplates2PromptTemplatesType = ClosedEnum<
  typeof GetAllPromptTemplates2PromptTemplatesType
>;

export type GetAllPromptTemplates2ImageUrl = {
  /**
   * The orq.ai id of the image
   */
  id?: string | undefined;
  /**
   * Either a URL of the image or the base64 encoded data URI.
   */
  url: string;
  /**
   * Specifies the detail level of the image. Currently only supported with OpenAI models
   */
  detail?: string | undefined;
};

/**
 * The image part of the prompt message. Only supported with vision models.
 */
export type GetAllPromptTemplates22 = {
  type: GetAllPromptTemplates2PromptTemplatesType;
  imageUrl: GetAllPromptTemplates2ImageUrl;
};

export const GetAllPromptTemplates2Type = {
  Text: "text",
} as const;
export type GetAllPromptTemplates2Type = ClosedEnum<
  typeof GetAllPromptTemplates2Type
>;

/**
 * Text content part of a prompt message
 */
export type GetAllPromptTemplates21 = {
  type: GetAllPromptTemplates2Type;
  text: string;
};

export type GetAllPromptTemplatesContent2 =
  | GetAllPromptTemplates21
  | GetAllPromptTemplates22;

/**
 * The contents of the user message. Either the text content of the message or an array of content parts with a defined type, each can be of type `text` or `image_url` when passing in images. You can pass multiple images by adding multiple `image_url` content parts.
 */
export type ItemsContent =
  | string
  | Array<GetAllPromptTemplates21 | GetAllPromptTemplates22>;

export const GetAllPromptTemplatesItemsPromptTemplatesResponseType = {
  Function: "function",
} as const;
export type GetAllPromptTemplatesItemsPromptTemplatesResponseType = ClosedEnum<
  typeof GetAllPromptTemplatesItemsPromptTemplatesResponseType
>;

export type ItemsFunction = {
  name: string;
  /**
   * JSON string arguments for the functions
   */
  arguments: string;
};

export type ItemsToolCalls = {
  id?: string | undefined;
  index?: number | undefined;
  type: GetAllPromptTemplatesItemsPromptTemplatesResponseType;
  function: ItemsFunction;
};

export type ItemsMessages = {
  /**
   * The role of the prompt message
   */
  role: ItemsRole;
  /**
   * The contents of the user message. Either the text content of the message or an array of content parts with a defined type, each can be of type `text` or `image_url` when passing in images. You can pass multiple images by adding multiple `image_url` content parts.
   */
  content: string | Array<GetAllPromptTemplates21 | GetAllPromptTemplates22>;
  toolCalls?: Array<ItemsToolCalls> | undefined;
};

export type ItemsPromptConfig = {
  stream?: boolean | undefined;
  model?: string | undefined;
  /**
   * The id of the resource
   */
  modelDbId?: string | undefined;
  /**
   * The type of the model
   */
  modelType?: ItemsModelType | undefined;
  /**
   * Model Parameters: Not all parameters apply to every model
   */
  modelParameters?: ItemsModelParameters | undefined;
  provider?: ItemsProvider | undefined;
  /**
   * The id of the resource
   */
  integrationId?: string | null | undefined;
  version?: string | undefined;
  messages: Array<ItemsMessages>;
};

export type ItemsMetadata = {
  useCases?: Array<string> | undefined;
  language?: string | undefined;
};

/**
 * The type of the model
 */
export const GetAllPromptTemplatesItemsPromptTemplatesResponse200ModelType = {
  Chat: "chat",
  Completion: "completion",
  Embedding: "embedding",
  Vision: "vision",
  Image: "image",
  Tts: "tts",
  Stt: "stt",
  Rerank: "rerank",
} as const;
/**
 * The type of the model
 */
export type GetAllPromptTemplatesItemsPromptTemplatesResponse200ModelType =
  ClosedEnum<
    typeof GetAllPromptTemplatesItemsPromptTemplatesResponse200ModelType
  >;

/**
 * Only supported on `image` models.
 */
export const GetAllPromptTemplatesItemsPromptTemplatesResponse200ApplicationJSONFormat =
  {
    Url: "url",
    B64Json: "b64_json",
    Text: "text",
    JsonObject: "json_object",
  } as const;
/**
 * Only supported on `image` models.
 */
export type GetAllPromptTemplatesItemsPromptTemplatesResponse200ApplicationJSONFormat =
  ClosedEnum<
    typeof GetAllPromptTemplatesItemsPromptTemplatesResponse200ApplicationJSONFormat
  >;

/**
 * Only supported on `image` models.
 */
export const GetAllPromptTemplatesItemsPromptTemplatesResponse200Quality = {
  Standard: "standard",
  Hd: "hd",
} as const;
/**
 * Only supported on `image` models.
 */
export type GetAllPromptTemplatesItemsPromptTemplatesResponse200Quality =
  ClosedEnum<
    typeof GetAllPromptTemplatesItemsPromptTemplatesResponse200Quality
  >;

export const GetAllPromptTemplatesResponseFormatPromptTemplatesResponse200ApplicationJSONResponseBodyItems1VersionsType =
  {
    JsonObject: "json_object",
  } as const;
export type GetAllPromptTemplatesResponseFormatPromptTemplatesResponse200ApplicationJSONResponseBodyItems1VersionsType =
  ClosedEnum<
    typeof GetAllPromptTemplatesResponseFormatPromptTemplatesResponse200ApplicationJSONResponseBodyItems1VersionsType
  >;

export type GetAllPromptTemplatesResponseFormatPromptTemplatesResponse200ApplicationJson2 =
  {
    type:
      GetAllPromptTemplatesResponseFormatPromptTemplatesResponse200ApplicationJSONResponseBodyItems1VersionsType;
  };

export const GetAllPromptTemplatesResponseFormatPromptTemplatesResponse200ApplicationJSONResponseBodyItems1Type =
  {
    JsonSchema: "json_schema",
  } as const;
export type GetAllPromptTemplatesResponseFormatPromptTemplatesResponse200ApplicationJSONResponseBodyItems1Type =
  ClosedEnum<
    typeof GetAllPromptTemplatesResponseFormatPromptTemplatesResponse200ApplicationJSONResponseBodyItems1Type
  >;

export type GetAllPromptTemplatesResponseFormatPromptTemplatesResponse200ApplicationJSONJSONSchema =
  {
    name: string;
    strict: boolean;
    schema: { [k: string]: any };
  };

export type GetAllPromptTemplatesResponseFormatPromptTemplatesResponse200ApplicationJson1 =
  {
    type:
      GetAllPromptTemplatesResponseFormatPromptTemplatesResponse200ApplicationJSONResponseBodyItems1Type;
    jsonSchema:
      GetAllPromptTemplatesResponseFormatPromptTemplatesResponse200ApplicationJSONJSONSchema;
  };

/**
 * An object specifying the format that the model must output.
 *
 * @remarks
 *
 *  Setting to `{ "type": "json_schema", "json_schema": {...} }` enables Structured Outputs which ensures the model will match your supplied JSON schema
 *
 *  Setting to `{ "type": "json_object" }` enables JSON mode, which ensures the message the model generates is valid JSON.
 *
 * Important: when using JSON mode, you must also instruct the model to produce JSON yourself via a system or user message. Without this, the model may generate an unending stream of whitespace until the generation reaches the token limit, resulting in a long-running and seemingly "stuck" request. Also note that the message content may be partially cut off if finish_reason="length", which indicates the generation exceeded max_tokens or the conversation exceeded the max context length.
 */
export type GetAllPromptTemplatesItemsPromptTemplatesResponse200ResponseFormat =
  | GetAllPromptTemplatesResponseFormatPromptTemplatesResponse200ApplicationJson2
  | GetAllPromptTemplatesResponseFormatPromptTemplatesResponse200ApplicationJson1;

/**
 * The version of photoReal to use. Must be v1 or v2. Only available for `leonardoai` provider
 */
export const GetAllPromptTemplatesItemsPromptTemplatesResponse200PhotoRealVersion =
  {
    V1: "v1",
    V2: "v2",
  } as const;
/**
 * The version of photoReal to use. Must be v1 or v2. Only available for `leonardoai` provider
 */
export type GetAllPromptTemplatesItemsPromptTemplatesResponse200PhotoRealVersion =
  ClosedEnum<
    typeof GetAllPromptTemplatesItemsPromptTemplatesResponse200PhotoRealVersion
  >;

/**
 * The format to return the embeddings
 */
export const GetAllPromptTemplatesItemsPromptTemplatesResponse200EncodingFormat =
  {
    Float: "float",
    Base64: "base64",
  } as const;
/**
 * The format to return the embeddings
 */
export type GetAllPromptTemplatesItemsPromptTemplatesResponse200EncodingFormat =
  ClosedEnum<
    typeof GetAllPromptTemplatesItemsPromptTemplatesResponse200EncodingFormat
  >;

/**
 * Model Parameters: Not all parameters apply to every model
 */
export type GetAllPromptTemplatesItemsPromptTemplatesResponse200ModelParameters =
  {
    /**
     * Only supported on `chat` and `completion` models.
     */
    temperature?: number | undefined;
    /**
     * Only supported on `chat` and `completion` models.
     */
    maxTokens?: number | undefined;
    /**
     * Only supported on `chat` and `completion` models.
     */
    topK?: number | undefined;
    /**
     * Only supported on `chat` and `completion` models.
     */
    topP?: number | undefined;
    /**
     * Only supported on `chat` and `completion` models.
     */
    frequencyPenalty?: number | undefined;
    /**
     * Only supported on `chat` and `completion` models.
     */
    presencePenalty?: number | undefined;
    /**
     * Only supported on `image` models.
     */
    numImages?: number | undefined;
    /**
     * Best effort deterministic seed for the model. Currently only OpenAI models support these
     */
    seed?: number | undefined;
    /**
     * Only supported on `image` models.
     */
    format?:
      | GetAllPromptTemplatesItemsPromptTemplatesResponse200ApplicationJSONFormat
      | undefined;
    /**
     * Only supported on `image` models.
     */
    dimensions?: string | undefined;
    /**
     * Only supported on `image` models.
     */
    quality?:
      | GetAllPromptTemplatesItemsPromptTemplatesResponse200Quality
      | undefined;
    /**
     * Only supported on `image` models.
     */
    style?: string | undefined;
    /**
     * An object specifying the format that the model must output.
     *
     * @remarks
     *
     *  Setting to `{ "type": "json_schema", "json_schema": {...} }` enables Structured Outputs which ensures the model will match your supplied JSON schema
     *
     *  Setting to `{ "type": "json_object" }` enables JSON mode, which ensures the message the model generates is valid JSON.
     *
     * Important: when using JSON mode, you must also instruct the model to produce JSON yourself via a system or user message. Without this, the model may generate an unending stream of whitespace until the generation reaches the token limit, resulting in a long-running and seemingly "stuck" request. Also note that the message content may be partially cut off if finish_reason="length", which indicates the generation exceeded max_tokens or the conversation exceeded the max context length.
     */
    responseFormat?:
      | GetAllPromptTemplatesResponseFormatPromptTemplatesResponse200ApplicationJson2
      | GetAllPromptTemplatesResponseFormatPromptTemplatesResponse200ApplicationJson1
      | null
      | undefined;
    /**
     * The version of photoReal to use. Must be v1 or v2. Only available for `leonardoai` provider
     */
    photoRealVersion?:
      | GetAllPromptTemplatesItemsPromptTemplatesResponse200PhotoRealVersion
      | undefined;
    /**
     * The format to return the embeddings
     */
    encodingFormat?:
      | GetAllPromptTemplatesItemsPromptTemplatesResponse200EncodingFormat
      | undefined;
  };

export const GetAllPromptTemplatesItemsPromptTemplatesResponse200Provider = {
  Cohere: "cohere",
  Openai: "openai",
  Anthropic: "anthropic",
  Huggingface: "huggingface",
  Replicate: "replicate",
  Google: "google",
  GoogleAi: "google-ai",
  Azure: "azure",
  Aws: "aws",
  Anyscale: "anyscale",
  Perplexity: "perplexity",
  Groq: "groq",
  Fal: "fal",
  Leonardoai: "leonardoai",
  Nvidia: "nvidia",
} as const;
export type GetAllPromptTemplatesItemsPromptTemplatesResponse200Provider =
  ClosedEnum<
    typeof GetAllPromptTemplatesItemsPromptTemplatesResponse200Provider
  >;

/**
 * The role of the prompt message
 */
export const GetAllPromptTemplatesItemsPromptTemplatesResponse200Role = {
  System: "system",
  Assistant: "assistant",
  User: "user",
  Exception: "exception",
  Tool: "tool",
  Prompt: "prompt",
  Correction: "correction",
  ExpectedOutput: "expected_output",
} as const;
/**
 * The role of the prompt message
 */
export type GetAllPromptTemplatesItemsPromptTemplatesResponse200Role =
  ClosedEnum<typeof GetAllPromptTemplatesItemsPromptTemplatesResponse200Role>;

export const GetAllPromptTemplates2PromptTemplatesResponse200ApplicationJSONResponseBodyItems1VersionsType =
  {
    ImageUrl: "image_url",
  } as const;
export type GetAllPromptTemplates2PromptTemplatesResponse200ApplicationJSONResponseBodyItems1VersionsType =
  ClosedEnum<
    typeof GetAllPromptTemplates2PromptTemplatesResponse200ApplicationJSONResponseBodyItems1VersionsType
  >;

export type GetAllPromptTemplates2PromptTemplatesResponse200ApplicationJSONImageUrl =
  {
    /**
     * The orq.ai id of the image
     */
    id?: string | undefined;
    /**
     * Either a URL of the image or the base64 encoded data URI.
     */
    url: string;
    /**
     * Specifies the detail level of the image. Currently only supported with OpenAI models
     */
    detail?: string | undefined;
  };

/**
 * The image part of the prompt message. Only supported with vision models.
 */
export type GetAllPromptTemplates2PromptTemplatesResponse200ApplicationJson2 = {
  type:
    GetAllPromptTemplates2PromptTemplatesResponse200ApplicationJSONResponseBodyItems1VersionsType;
  imageUrl:
    GetAllPromptTemplates2PromptTemplatesResponse200ApplicationJSONImageUrl;
};

export const GetAllPromptTemplates2PromptTemplatesResponse200ApplicationJSONResponseBodyItems1Type =
  {
    Text: "text",
  } as const;
export type GetAllPromptTemplates2PromptTemplatesResponse200ApplicationJSONResponseBodyItems1Type =
  ClosedEnum<
    typeof GetAllPromptTemplates2PromptTemplatesResponse200ApplicationJSONResponseBodyItems1Type
  >;

/**
 * Text content part of a prompt message
 */
export type GetAllPromptTemplates2PromptTemplatesResponse200ApplicationJson1 = {
  type:
    GetAllPromptTemplates2PromptTemplatesResponse200ApplicationJSONResponseBodyItems1Type;
  text: string;
};

export type GetAllPromptTemplatesContentPromptTemplatesResponse200ApplicationJson2 =
  | GetAllPromptTemplates2PromptTemplatesResponse200ApplicationJson1
  | GetAllPromptTemplates2PromptTemplatesResponse200ApplicationJson2;

/**
 * The contents of the user message. Either the text content of the message or an array of content parts with a defined type, each can be of type `text` or `image_url` when passing in images. You can pass multiple images by adding multiple `image_url` content parts.
 */
export type GetAllPromptTemplatesItemsPromptTemplatesResponse200Content =
  | string
  | Array<
    | GetAllPromptTemplates2PromptTemplatesResponse200ApplicationJson1
    | GetAllPromptTemplates2PromptTemplatesResponse200ApplicationJson2
  >;

export const GetAllPromptTemplatesItemsPromptTemplatesResponse200ApplicationJSONResponseBody1Type =
  {
    Function: "function",
  } as const;
export type GetAllPromptTemplatesItemsPromptTemplatesResponse200ApplicationJSONResponseBody1Type =
  ClosedEnum<
    typeof GetAllPromptTemplatesItemsPromptTemplatesResponse200ApplicationJSONResponseBody1Type
  >;

export type GetAllPromptTemplatesItemsPromptTemplatesResponse200Function = {
  name: string;
  /**
   * JSON string arguments for the functions
   */
  arguments: string;
};

export type GetAllPromptTemplatesItemsPromptTemplatesResponse200ToolCalls = {
  id?: string | undefined;
  index?: number | undefined;
  type:
    GetAllPromptTemplatesItemsPromptTemplatesResponse200ApplicationJSONResponseBody1Type;
  function: GetAllPromptTemplatesItemsPromptTemplatesResponse200Function;
};

export type GetAllPromptTemplatesItemsPromptTemplatesResponse200Messages = {
  /**
   * The role of the prompt message
   */
  role: GetAllPromptTemplatesItemsPromptTemplatesResponse200Role;
  /**
   * The contents of the user message. Either the text content of the message or an array of content parts with a defined type, each can be of type `text` or `image_url` when passing in images. You can pass multiple images by adding multiple `image_url` content parts.
   */
  content:
    | string
    | Array<
      | GetAllPromptTemplates2PromptTemplatesResponse200ApplicationJson1
      | GetAllPromptTemplates2PromptTemplatesResponse200ApplicationJson2
    >;
  toolCalls?:
    | Array<GetAllPromptTemplatesItemsPromptTemplatesResponse200ToolCalls>
    | undefined;
};

export type GetAllPromptTemplatesItemsPromptTemplatesResponse200PromptConfig = {
  stream?: boolean | undefined;
  model?: string | undefined;
  /**
   * The id of the resource
   */
  modelDbId?: string | undefined;
  /**
   * The type of the model
   */
  modelType?:
    | GetAllPromptTemplatesItemsPromptTemplatesResponse200ModelType
    | undefined;
  /**
   * Model Parameters: Not all parameters apply to every model
   */
  modelParameters?:
    | GetAllPromptTemplatesItemsPromptTemplatesResponse200ModelParameters
    | undefined;
  provider?:
    | GetAllPromptTemplatesItemsPromptTemplatesResponse200Provider
    | undefined;
  /**
   * The id of the resource
   */
  integrationId?: string | null | undefined;
  version?: string | undefined;
  messages: Array<GetAllPromptTemplatesItemsPromptTemplatesResponse200Messages>;
};

export type GetAllPromptTemplatesItemsPromptTemplatesResponse200Metadata = {
  useCases?: Array<string> | undefined;
  language?: string | undefined;
};

/**
 * Prompt version model returned from the API
 */
export type GetAllPromptTemplatesItemsPromptTemplatesVersions = {
  id: string;
  createdById: string;
  displayName: string;
  updatedById: string;
  description?: string | null | undefined;
  promptConfig:
    GetAllPromptTemplatesItemsPromptTemplatesResponse200PromptConfig;
  metadata: GetAllPromptTemplatesItemsPromptTemplatesResponse200Metadata;
  commit: string;
  timestamp: string;
};

export const ItemsType = {
  Prompt: "prompt",
} as const;
export type ItemsType = ClosedEnum<typeof ItemsType>;

/**
 * Prompt model returned from the API
 */
export type Items1 = {
  id: string;
  owner: string | GetAllPromptTemplatesOwnerPromptTemplatesResponse2;
  domainId: string;
  createdById: string;
  displayName: string;
  updatedById: string;
  description?: string | null | undefined;
  promptConfig: ItemsPromptConfig;
  metadata: ItemsMetadata;
  /**
   * The date and time the resource was created
   */
  created?: Date | undefined;
  /**
   * The date and time the resource was last updated
   */
  updated?: Date | undefined;
  versions: Array<GetAllPromptTemplatesItemsPromptTemplatesVersions>;
  type: ItemsType;
};

export type Items = Items1 | Items3 | Items2;

/**
 * Prompt templates retrieved.
 */
export type GetAllPromptTemplatesResponseBody = {
  count: number;
  items: Array<Items1 | Items3 | Items2>;
};

/** @internal */
export const GetAllPromptTemplatesFiltersPromptTemplatesRequestType$inboundSchema:
  z.ZodNativeEnum<
    typeof GetAllPromptTemplatesFiltersPromptTemplatesRequestType
  > = z.nativeEnum(GetAllPromptTemplatesFiltersPromptTemplatesRequestType);

/** @internal */
export const GetAllPromptTemplatesFiltersPromptTemplatesRequestType$outboundSchema:
  z.ZodNativeEnum<
    typeof GetAllPromptTemplatesFiltersPromptTemplatesRequestType
  > = GetAllPromptTemplatesFiltersPromptTemplatesRequestType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPromptTemplatesFiltersPromptTemplatesRequestType$ {
  /** @deprecated use `GetAllPromptTemplatesFiltersPromptTemplatesRequestType$inboundSchema` instead. */
  export const inboundSchema =
    GetAllPromptTemplatesFiltersPromptTemplatesRequestType$inboundSchema;
  /** @deprecated use `GetAllPromptTemplatesFiltersPromptTemplatesRequestType$outboundSchema` instead. */
  export const outboundSchema =
    GetAllPromptTemplatesFiltersPromptTemplatesRequestType$outboundSchema;
}

/** @internal */
export const FiltersOperator$inboundSchema: z.ZodNativeEnum<
  typeof FiltersOperator
> = z.nativeEnum(FiltersOperator);

/** @internal */
export const FiltersOperator$outboundSchema: z.ZodNativeEnum<
  typeof FiltersOperator
> = FiltersOperator$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FiltersOperator$ {
  /** @deprecated use `FiltersOperator$inboundSchema` instead. */
  export const inboundSchema = FiltersOperator$inboundSchema;
  /** @deprecated use `FiltersOperator$outboundSchema` instead. */
  export const outboundSchema = FiltersOperator$outboundSchema;
}

/** @internal */
export const Four$inboundSchema: z.ZodType<Four, z.ZodTypeDef, unknown> = z
  .object({
    type: GetAllPromptTemplatesFiltersPromptTemplatesRequestType$inboundSchema,
    operator: FiltersOperator$inboundSchema,
    values: z.array(z.string()),
    path: z.string(),
  });

/** @internal */
export type Four$Outbound = {
  type: string;
  operator: string;
  values: Array<string>;
  path: string;
};

/** @internal */
export const Four$outboundSchema: z.ZodType<Four$Outbound, z.ZodTypeDef, Four> =
  z.object({
    type: GetAllPromptTemplatesFiltersPromptTemplatesRequestType$outboundSchema,
    operator: FiltersOperator$outboundSchema,
    values: z.array(z.string()),
    path: z.string(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Four$ {
  /** @deprecated use `Four$inboundSchema` instead. */
  export const inboundSchema = Four$inboundSchema;
  /** @deprecated use `Four$outboundSchema` instead. */
  export const outboundSchema = Four$outboundSchema;
  /** @deprecated use `Four$Outbound` instead. */
  export type Outbound = Four$Outbound;
}

export function fourToJSON(four: Four): string {
  return JSON.stringify(Four$outboundSchema.parse(four));
}

export function fourFromJSON(
  jsonString: string,
): SafeParseResult<Four, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Four$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Four' from JSON`,
  );
}

/** @internal */
export const GetAllPromptTemplatesFiltersPromptTemplatesType$inboundSchema:
  z.ZodNativeEnum<typeof GetAllPromptTemplatesFiltersPromptTemplatesType> = z
    .nativeEnum(GetAllPromptTemplatesFiltersPromptTemplatesType);

/** @internal */
export const GetAllPromptTemplatesFiltersPromptTemplatesType$outboundSchema:
  z.ZodNativeEnum<typeof GetAllPromptTemplatesFiltersPromptTemplatesType> =
    GetAllPromptTemplatesFiltersPromptTemplatesType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPromptTemplatesFiltersPromptTemplatesType$ {
  /** @deprecated use `GetAllPromptTemplatesFiltersPromptTemplatesType$inboundSchema` instead. */
  export const inboundSchema =
    GetAllPromptTemplatesFiltersPromptTemplatesType$inboundSchema;
  /** @deprecated use `GetAllPromptTemplatesFiltersPromptTemplatesType$outboundSchema` instead. */
  export const outboundSchema =
    GetAllPromptTemplatesFiltersPromptTemplatesType$outboundSchema;
}

/** @internal */
export const Operator$inboundSchema: z.ZodNativeEnum<typeof Operator> = z
  .nativeEnum(Operator);

/** @internal */
export const Operator$outboundSchema: z.ZodNativeEnum<typeof Operator> =
  Operator$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Operator$ {
  /** @deprecated use `Operator$inboundSchema` instead. */
  export const inboundSchema = Operator$inboundSchema;
  /** @deprecated use `Operator$outboundSchema` instead. */
  export const outboundSchema = Operator$outboundSchema;
}

/** @internal */
export const Filters3$inboundSchema: z.ZodType<
  Filters3,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: GetAllPromptTemplatesFiltersPromptTemplatesType$inboundSchema,
  operator: Operator$inboundSchema,
  value: z.string(),
  path: z.string(),
});

/** @internal */
export type Filters3$Outbound = {
  type: string;
  operator: string;
  value: string;
  path: string;
};

/** @internal */
export const Filters3$outboundSchema: z.ZodType<
  Filters3$Outbound,
  z.ZodTypeDef,
  Filters3
> = z.object({
  type: GetAllPromptTemplatesFiltersPromptTemplatesType$outboundSchema,
  operator: Operator$outboundSchema,
  value: z.string(),
  path: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Filters3$ {
  /** @deprecated use `Filters3$inboundSchema` instead. */
  export const inboundSchema = Filters3$inboundSchema;
  /** @deprecated use `Filters3$outboundSchema` instead. */
  export const outboundSchema = Filters3$outboundSchema;
  /** @deprecated use `Filters3$Outbound` instead. */
  export type Outbound = Filters3$Outbound;
}

export function filters3ToJSON(filters3: Filters3): string {
  return JSON.stringify(Filters3$outboundSchema.parse(filters3));
}

export function filters3FromJSON(
  jsonString: string,
): SafeParseResult<Filters3, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Filters3$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Filters3' from JSON`,
  );
}

/** @internal */
export const GetAllPromptTemplatesFiltersType$inboundSchema: z.ZodNativeEnum<
  typeof GetAllPromptTemplatesFiltersType
> = z.nativeEnum(GetAllPromptTemplatesFiltersType);

/** @internal */
export const GetAllPromptTemplatesFiltersType$outboundSchema: z.ZodNativeEnum<
  typeof GetAllPromptTemplatesFiltersType
> = GetAllPromptTemplatesFiltersType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPromptTemplatesFiltersType$ {
  /** @deprecated use `GetAllPromptTemplatesFiltersType$inboundSchema` instead. */
  export const inboundSchema = GetAllPromptTemplatesFiltersType$inboundSchema;
  /** @deprecated use `GetAllPromptTemplatesFiltersType$outboundSchema` instead. */
  export const outboundSchema = GetAllPromptTemplatesFiltersType$outboundSchema;
}

/** @internal */
export const Filters2$inboundSchema: z.ZodType<
  Filters2,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: GetAllPromptTemplatesFiltersType$inboundSchema,
  value: z.string(),
  searchPaths: z.array(z.string()),
});

/** @internal */
export type Filters2$Outbound = {
  type: string;
  value: string;
  searchPaths: Array<string>;
};

/** @internal */
export const Filters2$outboundSchema: z.ZodType<
  Filters2$Outbound,
  z.ZodTypeDef,
  Filters2
> = z.object({
  type: GetAllPromptTemplatesFiltersType$outboundSchema,
  value: z.string(),
  searchPaths: z.array(z.string()),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Filters2$ {
  /** @deprecated use `Filters2$inboundSchema` instead. */
  export const inboundSchema = Filters2$inboundSchema;
  /** @deprecated use `Filters2$outboundSchema` instead. */
  export const outboundSchema = Filters2$outboundSchema;
  /** @deprecated use `Filters2$Outbound` instead. */
  export type Outbound = Filters2$Outbound;
}

export function filters2ToJSON(filters2: Filters2): string {
  return JSON.stringify(Filters2$outboundSchema.parse(filters2));
}

export function filters2FromJSON(
  jsonString: string,
): SafeParseResult<Filters2, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Filters2$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Filters2' from JSON`,
  );
}

/** @internal */
export const FiltersType$inboundSchema: z.ZodNativeEnum<typeof FiltersType> = z
  .nativeEnum(FiltersType);

/** @internal */
export const FiltersType$outboundSchema: z.ZodNativeEnum<typeof FiltersType> =
  FiltersType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FiltersType$ {
  /** @deprecated use `FiltersType$inboundSchema` instead. */
  export const inboundSchema = FiltersType$inboundSchema;
  /** @deprecated use `FiltersType$outboundSchema` instead. */
  export const outboundSchema = FiltersType$outboundSchema;
}

/** @internal */
export const Filters1$inboundSchema: z.ZodType<
  Filters1,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: FiltersType$inboundSchema,
  id: z.string(),
  path: z.string(),
});

/** @internal */
export type Filters1$Outbound = {
  type: string;
  id: string;
  path: string;
};

/** @internal */
export const Filters1$outboundSchema: z.ZodType<
  Filters1$Outbound,
  z.ZodTypeDef,
  Filters1
> = z.object({
  type: FiltersType$outboundSchema,
  id: z.string(),
  path: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Filters1$ {
  /** @deprecated use `Filters1$inboundSchema` instead. */
  export const inboundSchema = Filters1$inboundSchema;
  /** @deprecated use `Filters1$outboundSchema` instead. */
  export const outboundSchema = Filters1$outboundSchema;
  /** @deprecated use `Filters1$Outbound` instead. */
  export type Outbound = Filters1$Outbound;
}

export function filters1ToJSON(filters1: Filters1): string {
  return JSON.stringify(Filters1$outboundSchema.parse(filters1));
}

export function filters1FromJSON(
  jsonString: string,
): SafeParseResult<Filters1, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Filters1$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Filters1' from JSON`,
  );
}

/** @internal */
export const Filters$inboundSchema: z.ZodType<Filters, z.ZodTypeDef, unknown> =
  z.union([
    z.lazy(() => Filters1$inboundSchema),
    z.lazy(() => Filters2$inboundSchema),
    z.lazy(() => Filters3$inboundSchema),
    z.lazy(() => Four$inboundSchema),
  ]);

/** @internal */
export type Filters$Outbound =
  | Filters1$Outbound
  | Filters2$Outbound
  | Filters3$Outbound
  | Four$Outbound;

/** @internal */
export const Filters$outboundSchema: z.ZodType<
  Filters$Outbound,
  z.ZodTypeDef,
  Filters
> = z.union([
  z.lazy(() => Filters1$outboundSchema),
  z.lazy(() => Filters2$outboundSchema),
  z.lazy(() => Filters3$outboundSchema),
  z.lazy(() => Four$outboundSchema),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Filters$ {
  /** @deprecated use `Filters$inboundSchema` instead. */
  export const inboundSchema = Filters$inboundSchema;
  /** @deprecated use `Filters$outboundSchema` instead. */
  export const outboundSchema = Filters$outboundSchema;
  /** @deprecated use `Filters$Outbound` instead. */
  export type Outbound = Filters$Outbound;
}

export function filtersToJSON(filters: Filters): string {
  return JSON.stringify(Filters$outboundSchema.parse(filters));
}

export function filtersFromJSON(
  jsonString: string,
): SafeParseResult<Filters, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Filters$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Filters' from JSON`,
  );
}

/** @internal */
export const GetAllPromptTemplatesRequestBody$inboundSchema: z.ZodType<
  GetAllPromptTemplatesRequestBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  filters: z.array(
    z.union([
      z.lazy(() => Filters1$inboundSchema),
      z.lazy(() => Filters2$inboundSchema),
      z.lazy(() => Filters3$inboundSchema),
      z.lazy(() => Four$inboundSchema),
    ]),
  ),
});

/** @internal */
export type GetAllPromptTemplatesRequestBody$Outbound = {
  filters: Array<
    Filters1$Outbound | Filters2$Outbound | Filters3$Outbound | Four$Outbound
  >;
};

/** @internal */
export const GetAllPromptTemplatesRequestBody$outboundSchema: z.ZodType<
  GetAllPromptTemplatesRequestBody$Outbound,
  z.ZodTypeDef,
  GetAllPromptTemplatesRequestBody
> = z.object({
  filters: z.array(
    z.union([
      z.lazy(() => Filters1$outboundSchema),
      z.lazy(() => Filters2$outboundSchema),
      z.lazy(() => Filters3$outboundSchema),
      z.lazy(() => Four$outboundSchema),
    ]),
  ),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPromptTemplatesRequestBody$ {
  /** @deprecated use `GetAllPromptTemplatesRequestBody$inboundSchema` instead. */
  export const inboundSchema = GetAllPromptTemplatesRequestBody$inboundSchema;
  /** @deprecated use `GetAllPromptTemplatesRequestBody$outboundSchema` instead. */
  export const outboundSchema = GetAllPromptTemplatesRequestBody$outboundSchema;
  /** @deprecated use `GetAllPromptTemplatesRequestBody$Outbound` instead. */
  export type Outbound = GetAllPromptTemplatesRequestBody$Outbound;
}

export function getAllPromptTemplatesRequestBodyToJSON(
  getAllPromptTemplatesRequestBody: GetAllPromptTemplatesRequestBody,
): string {
  return JSON.stringify(
    GetAllPromptTemplatesRequestBody$outboundSchema.parse(
      getAllPromptTemplatesRequestBody,
    ),
  );
}

export function getAllPromptTemplatesRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<GetAllPromptTemplatesRequestBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetAllPromptTemplatesRequestBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetAllPromptTemplatesRequestBody' from JSON`,
  );
}

/** @internal */
export const GetAllPromptTemplatesRequest$inboundSchema: z.ZodType<
  GetAllPromptTemplatesRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  page: z.string().optional(),
  limit: z.string().optional(),
  RequestBody: z.lazy(() => GetAllPromptTemplatesRequestBody$inboundSchema)
    .optional(),
}).transform((v) => {
  return remap$(v, {
    "RequestBody": "requestBody",
  });
});

/** @internal */
export type GetAllPromptTemplatesRequest$Outbound = {
  page?: string | undefined;
  limit?: string | undefined;
  RequestBody?: GetAllPromptTemplatesRequestBody$Outbound | undefined;
};

/** @internal */
export const GetAllPromptTemplatesRequest$outboundSchema: z.ZodType<
  GetAllPromptTemplatesRequest$Outbound,
  z.ZodTypeDef,
  GetAllPromptTemplatesRequest
> = z.object({
  page: z.string().optional(),
  limit: z.string().optional(),
  requestBody: z.lazy(() => GetAllPromptTemplatesRequestBody$outboundSchema)
    .optional(),
}).transform((v) => {
  return remap$(v, {
    requestBody: "RequestBody",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPromptTemplatesRequest$ {
  /** @deprecated use `GetAllPromptTemplatesRequest$inboundSchema` instead. */
  export const inboundSchema = GetAllPromptTemplatesRequest$inboundSchema;
  /** @deprecated use `GetAllPromptTemplatesRequest$outboundSchema` instead. */
  export const outboundSchema = GetAllPromptTemplatesRequest$outboundSchema;
  /** @deprecated use `GetAllPromptTemplatesRequest$Outbound` instead. */
  export type Outbound = GetAllPromptTemplatesRequest$Outbound;
}

export function getAllPromptTemplatesRequestToJSON(
  getAllPromptTemplatesRequest: GetAllPromptTemplatesRequest,
): string {
  return JSON.stringify(
    GetAllPromptTemplatesRequest$outboundSchema.parse(
      getAllPromptTemplatesRequest,
    ),
  );
}

export function getAllPromptTemplatesRequestFromJSON(
  jsonString: string,
): SafeParseResult<GetAllPromptTemplatesRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetAllPromptTemplatesRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetAllPromptTemplatesRequest' from JSON`,
  );
}

/** @internal */
export const GetAllPromptTemplatesOwnerPromptTemplates2$inboundSchema:
  z.ZodNativeEnum<typeof GetAllPromptTemplatesOwnerPromptTemplates2> = z
    .nativeEnum(GetAllPromptTemplatesOwnerPromptTemplates2);

/** @internal */
export const GetAllPromptTemplatesOwnerPromptTemplates2$outboundSchema:
  z.ZodNativeEnum<typeof GetAllPromptTemplatesOwnerPromptTemplates2> =
    GetAllPromptTemplatesOwnerPromptTemplates2$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPromptTemplatesOwnerPromptTemplates2$ {
  /** @deprecated use `GetAllPromptTemplatesOwnerPromptTemplates2$inboundSchema` instead. */
  export const inboundSchema =
    GetAllPromptTemplatesOwnerPromptTemplates2$inboundSchema;
  /** @deprecated use `GetAllPromptTemplatesOwnerPromptTemplates2$outboundSchema` instead. */
  export const outboundSchema =
    GetAllPromptTemplatesOwnerPromptTemplates2$outboundSchema;
}

/** @internal */
export const GetAllPromptTemplatesItemsOwner$inboundSchema: z.ZodType<
  GetAllPromptTemplatesItemsOwner,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.string(),
  GetAllPromptTemplatesOwnerPromptTemplates2$inboundSchema,
]);

/** @internal */
export type GetAllPromptTemplatesItemsOwner$Outbound = string | string;

/** @internal */
export const GetAllPromptTemplatesItemsOwner$outboundSchema: z.ZodType<
  GetAllPromptTemplatesItemsOwner$Outbound,
  z.ZodTypeDef,
  GetAllPromptTemplatesItemsOwner
> = z.union([
  z.string(),
  GetAllPromptTemplatesOwnerPromptTemplates2$outboundSchema,
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPromptTemplatesItemsOwner$ {
  /** @deprecated use `GetAllPromptTemplatesItemsOwner$inboundSchema` instead. */
  export const inboundSchema = GetAllPromptTemplatesItemsOwner$inboundSchema;
  /** @deprecated use `GetAllPromptTemplatesItemsOwner$outboundSchema` instead. */
  export const outboundSchema = GetAllPromptTemplatesItemsOwner$outboundSchema;
  /** @deprecated use `GetAllPromptTemplatesItemsOwner$Outbound` instead. */
  export type Outbound = GetAllPromptTemplatesItemsOwner$Outbound;
}

export function getAllPromptTemplatesItemsOwnerToJSON(
  getAllPromptTemplatesItemsOwner: GetAllPromptTemplatesItemsOwner,
): string {
  return JSON.stringify(
    GetAllPromptTemplatesItemsOwner$outboundSchema.parse(
      getAllPromptTemplatesItemsOwner,
    ),
  );
}

export function getAllPromptTemplatesItemsOwnerFromJSON(
  jsonString: string,
): SafeParseResult<GetAllPromptTemplatesItemsOwner, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetAllPromptTemplatesItemsOwner$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetAllPromptTemplatesItemsOwner' from JSON`,
  );
}

/** @internal */
export const GetAllPromptTemplatesItemsPromptTemplatesModelType$inboundSchema:
  z.ZodNativeEnum<typeof GetAllPromptTemplatesItemsPromptTemplatesModelType> = z
    .nativeEnum(GetAllPromptTemplatesItemsPromptTemplatesModelType);

/** @internal */
export const GetAllPromptTemplatesItemsPromptTemplatesModelType$outboundSchema:
  z.ZodNativeEnum<typeof GetAllPromptTemplatesItemsPromptTemplatesModelType> =
    GetAllPromptTemplatesItemsPromptTemplatesModelType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPromptTemplatesItemsPromptTemplatesModelType$ {
  /** @deprecated use `GetAllPromptTemplatesItemsPromptTemplatesModelType$inboundSchema` instead. */
  export const inboundSchema =
    GetAllPromptTemplatesItemsPromptTemplatesModelType$inboundSchema;
  /** @deprecated use `GetAllPromptTemplatesItemsPromptTemplatesModelType$outboundSchema` instead. */
  export const outboundSchema =
    GetAllPromptTemplatesItemsPromptTemplatesModelType$outboundSchema;
}

/** @internal */
export const GetAllPromptTemplatesItemsPromptTemplatesFormat$inboundSchema:
  z.ZodNativeEnum<typeof GetAllPromptTemplatesItemsPromptTemplatesFormat> = z
    .nativeEnum(GetAllPromptTemplatesItemsPromptTemplatesFormat);

/** @internal */
export const GetAllPromptTemplatesItemsPromptTemplatesFormat$outboundSchema:
  z.ZodNativeEnum<typeof GetAllPromptTemplatesItemsPromptTemplatesFormat> =
    GetAllPromptTemplatesItemsPromptTemplatesFormat$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPromptTemplatesItemsPromptTemplatesFormat$ {
  /** @deprecated use `GetAllPromptTemplatesItemsPromptTemplatesFormat$inboundSchema` instead. */
  export const inboundSchema =
    GetAllPromptTemplatesItemsPromptTemplatesFormat$inboundSchema;
  /** @deprecated use `GetAllPromptTemplatesItemsPromptTemplatesFormat$outboundSchema` instead. */
  export const outboundSchema =
    GetAllPromptTemplatesItemsPromptTemplatesFormat$outboundSchema;
}

/** @internal */
export const GetAllPromptTemplatesItemsPromptTemplatesQuality$inboundSchema:
  z.ZodNativeEnum<typeof GetAllPromptTemplatesItemsPromptTemplatesQuality> = z
    .nativeEnum(GetAllPromptTemplatesItemsPromptTemplatesQuality);

/** @internal */
export const GetAllPromptTemplatesItemsPromptTemplatesQuality$outboundSchema:
  z.ZodNativeEnum<typeof GetAllPromptTemplatesItemsPromptTemplatesQuality> =
    GetAllPromptTemplatesItemsPromptTemplatesQuality$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPromptTemplatesItemsPromptTemplatesQuality$ {
  /** @deprecated use `GetAllPromptTemplatesItemsPromptTemplatesQuality$inboundSchema` instead. */
  export const inboundSchema =
    GetAllPromptTemplatesItemsPromptTemplatesQuality$inboundSchema;
  /** @deprecated use `GetAllPromptTemplatesItemsPromptTemplatesQuality$outboundSchema` instead. */
  export const outboundSchema =
    GetAllPromptTemplatesItemsPromptTemplatesQuality$outboundSchema;
}

/** @internal */
export const GetAllPromptTemplatesResponseFormatPromptTemplatesResponse200ApplicationJSONResponseBodyType$inboundSchema:
  z.ZodNativeEnum<
    typeof GetAllPromptTemplatesResponseFormatPromptTemplatesResponse200ApplicationJSONResponseBodyType
  > = z.nativeEnum(
    GetAllPromptTemplatesResponseFormatPromptTemplatesResponse200ApplicationJSONResponseBodyType,
  );

/** @internal */
export const GetAllPromptTemplatesResponseFormatPromptTemplatesResponse200ApplicationJSONResponseBodyType$outboundSchema:
  z.ZodNativeEnum<
    typeof GetAllPromptTemplatesResponseFormatPromptTemplatesResponse200ApplicationJSONResponseBodyType
  > =
    GetAllPromptTemplatesResponseFormatPromptTemplatesResponse200ApplicationJSONResponseBodyType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPromptTemplatesResponseFormatPromptTemplatesResponse200ApplicationJSONResponseBodyType$ {
  /** @deprecated use `GetAllPromptTemplatesResponseFormatPromptTemplatesResponse200ApplicationJSONResponseBodyType$inboundSchema` instead. */
  export const inboundSchema =
    GetAllPromptTemplatesResponseFormatPromptTemplatesResponse200ApplicationJSONResponseBodyType$inboundSchema;
  /** @deprecated use `GetAllPromptTemplatesResponseFormatPromptTemplatesResponse200ApplicationJSONResponseBodyType$outboundSchema` instead. */
  export const outboundSchema =
    GetAllPromptTemplatesResponseFormatPromptTemplatesResponse200ApplicationJSONResponseBodyType$outboundSchema;
}

/** @internal */
export const GetAllPromptTemplatesResponseFormatPromptTemplatesResponse2$inboundSchema:
  z.ZodType<
    GetAllPromptTemplatesResponseFormatPromptTemplatesResponse2,
    z.ZodTypeDef,
    unknown
  > = z.object({
    type:
      GetAllPromptTemplatesResponseFormatPromptTemplatesResponse200ApplicationJSONResponseBodyType$inboundSchema,
  });

/** @internal */
export type GetAllPromptTemplatesResponseFormatPromptTemplatesResponse2$Outbound =
  {
    type: string;
  };

/** @internal */
export const GetAllPromptTemplatesResponseFormatPromptTemplatesResponse2$outboundSchema:
  z.ZodType<
    GetAllPromptTemplatesResponseFormatPromptTemplatesResponse2$Outbound,
    z.ZodTypeDef,
    GetAllPromptTemplatesResponseFormatPromptTemplatesResponse2
  > = z.object({
    type:
      GetAllPromptTemplatesResponseFormatPromptTemplatesResponse200ApplicationJSONResponseBodyType$outboundSchema,
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPromptTemplatesResponseFormatPromptTemplatesResponse2$ {
  /** @deprecated use `GetAllPromptTemplatesResponseFormatPromptTemplatesResponse2$inboundSchema` instead. */
  export const inboundSchema =
    GetAllPromptTemplatesResponseFormatPromptTemplatesResponse2$inboundSchema;
  /** @deprecated use `GetAllPromptTemplatesResponseFormatPromptTemplatesResponse2$outboundSchema` instead. */
  export const outboundSchema =
    GetAllPromptTemplatesResponseFormatPromptTemplatesResponse2$outboundSchema;
  /** @deprecated use `GetAllPromptTemplatesResponseFormatPromptTemplatesResponse2$Outbound` instead. */
  export type Outbound =
    GetAllPromptTemplatesResponseFormatPromptTemplatesResponse2$Outbound;
}

export function getAllPromptTemplatesResponseFormatPromptTemplatesResponse2ToJSON(
  getAllPromptTemplatesResponseFormatPromptTemplatesResponse2:
    GetAllPromptTemplatesResponseFormatPromptTemplatesResponse2,
): string {
  return JSON.stringify(
    GetAllPromptTemplatesResponseFormatPromptTemplatesResponse2$outboundSchema
      .parse(getAllPromptTemplatesResponseFormatPromptTemplatesResponse2),
  );
}

export function getAllPromptTemplatesResponseFormatPromptTemplatesResponse2FromJSON(
  jsonString: string,
): SafeParseResult<
  GetAllPromptTemplatesResponseFormatPromptTemplatesResponse2,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetAllPromptTemplatesResponseFormatPromptTemplatesResponse2$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'GetAllPromptTemplatesResponseFormatPromptTemplatesResponse2' from JSON`,
  );
}

/** @internal */
export const GetAllPromptTemplatesResponseFormatPromptTemplatesResponse200ApplicationJSONType$inboundSchema:
  z.ZodNativeEnum<
    typeof GetAllPromptTemplatesResponseFormatPromptTemplatesResponse200ApplicationJSONType
  > = z.nativeEnum(
    GetAllPromptTemplatesResponseFormatPromptTemplatesResponse200ApplicationJSONType,
  );

/** @internal */
export const GetAllPromptTemplatesResponseFormatPromptTemplatesResponse200ApplicationJSONType$outboundSchema:
  z.ZodNativeEnum<
    typeof GetAllPromptTemplatesResponseFormatPromptTemplatesResponse200ApplicationJSONType
  > =
    GetAllPromptTemplatesResponseFormatPromptTemplatesResponse200ApplicationJSONType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPromptTemplatesResponseFormatPromptTemplatesResponse200ApplicationJSONType$ {
  /** @deprecated use `GetAllPromptTemplatesResponseFormatPromptTemplatesResponse200ApplicationJSONType$inboundSchema` instead. */
  export const inboundSchema =
    GetAllPromptTemplatesResponseFormatPromptTemplatesResponse200ApplicationJSONType$inboundSchema;
  /** @deprecated use `GetAllPromptTemplatesResponseFormatPromptTemplatesResponse200ApplicationJSONType$outboundSchema` instead. */
  export const outboundSchema =
    GetAllPromptTemplatesResponseFormatPromptTemplatesResponse200ApplicationJSONType$outboundSchema;
}

/** @internal */
export const GetAllPromptTemplatesResponseFormatPromptTemplatesResponseJsonSchema$inboundSchema:
  z.ZodType<
    GetAllPromptTemplatesResponseFormatPromptTemplatesResponseJsonSchema,
    z.ZodTypeDef,
    unknown
  > = z.object({
    name: z.string(),
    strict: z.boolean(),
    schema: z.record(z.any()),
  });

/** @internal */
export type GetAllPromptTemplatesResponseFormatPromptTemplatesResponseJsonSchema$Outbound =
  {
    name: string;
    strict: boolean;
    schema: { [k: string]: any };
  };

/** @internal */
export const GetAllPromptTemplatesResponseFormatPromptTemplatesResponseJsonSchema$outboundSchema:
  z.ZodType<
    GetAllPromptTemplatesResponseFormatPromptTemplatesResponseJsonSchema$Outbound,
    z.ZodTypeDef,
    GetAllPromptTemplatesResponseFormatPromptTemplatesResponseJsonSchema
  > = z.object({
    name: z.string(),
    strict: z.boolean(),
    schema: z.record(z.any()),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPromptTemplatesResponseFormatPromptTemplatesResponseJsonSchema$ {
  /** @deprecated use `GetAllPromptTemplatesResponseFormatPromptTemplatesResponseJsonSchema$inboundSchema` instead. */
  export const inboundSchema =
    GetAllPromptTemplatesResponseFormatPromptTemplatesResponseJsonSchema$inboundSchema;
  /** @deprecated use `GetAllPromptTemplatesResponseFormatPromptTemplatesResponseJsonSchema$outboundSchema` instead. */
  export const outboundSchema =
    GetAllPromptTemplatesResponseFormatPromptTemplatesResponseJsonSchema$outboundSchema;
  /** @deprecated use `GetAllPromptTemplatesResponseFormatPromptTemplatesResponseJsonSchema$Outbound` instead. */
  export type Outbound =
    GetAllPromptTemplatesResponseFormatPromptTemplatesResponseJsonSchema$Outbound;
}

export function getAllPromptTemplatesResponseFormatPromptTemplatesResponseJsonSchemaToJSON(
  getAllPromptTemplatesResponseFormatPromptTemplatesResponseJsonSchema:
    GetAllPromptTemplatesResponseFormatPromptTemplatesResponseJsonSchema,
): string {
  return JSON.stringify(
    GetAllPromptTemplatesResponseFormatPromptTemplatesResponseJsonSchema$outboundSchema
      .parse(
        getAllPromptTemplatesResponseFormatPromptTemplatesResponseJsonSchema,
      ),
  );
}

export function getAllPromptTemplatesResponseFormatPromptTemplatesResponseJsonSchemaFromJSON(
  jsonString: string,
): SafeParseResult<
  GetAllPromptTemplatesResponseFormatPromptTemplatesResponseJsonSchema,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetAllPromptTemplatesResponseFormatPromptTemplatesResponseJsonSchema$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'GetAllPromptTemplatesResponseFormatPromptTemplatesResponseJsonSchema' from JSON`,
  );
}

/** @internal */
export const GetAllPromptTemplatesResponseFormatPromptTemplatesResponse1$inboundSchema:
  z.ZodType<
    GetAllPromptTemplatesResponseFormatPromptTemplatesResponse1,
    z.ZodTypeDef,
    unknown
  > = z.object({
    type:
      GetAllPromptTemplatesResponseFormatPromptTemplatesResponse200ApplicationJSONType$inboundSchema,
    json_schema: z.lazy(() =>
      GetAllPromptTemplatesResponseFormatPromptTemplatesResponseJsonSchema$inboundSchema
    ),
  }).transform((v) => {
    return remap$(v, {
      "json_schema": "jsonSchema",
    });
  });

/** @internal */
export type GetAllPromptTemplatesResponseFormatPromptTemplatesResponse1$Outbound =
  {
    type: string;
    json_schema:
      GetAllPromptTemplatesResponseFormatPromptTemplatesResponseJsonSchema$Outbound;
  };

/** @internal */
export const GetAllPromptTemplatesResponseFormatPromptTemplatesResponse1$outboundSchema:
  z.ZodType<
    GetAllPromptTemplatesResponseFormatPromptTemplatesResponse1$Outbound,
    z.ZodTypeDef,
    GetAllPromptTemplatesResponseFormatPromptTemplatesResponse1
  > = z.object({
    type:
      GetAllPromptTemplatesResponseFormatPromptTemplatesResponse200ApplicationJSONType$outboundSchema,
    jsonSchema: z.lazy(() =>
      GetAllPromptTemplatesResponseFormatPromptTemplatesResponseJsonSchema$outboundSchema
    ),
  }).transform((v) => {
    return remap$(v, {
      jsonSchema: "json_schema",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPromptTemplatesResponseFormatPromptTemplatesResponse1$ {
  /** @deprecated use `GetAllPromptTemplatesResponseFormatPromptTemplatesResponse1$inboundSchema` instead. */
  export const inboundSchema =
    GetAllPromptTemplatesResponseFormatPromptTemplatesResponse1$inboundSchema;
  /** @deprecated use `GetAllPromptTemplatesResponseFormatPromptTemplatesResponse1$outboundSchema` instead. */
  export const outboundSchema =
    GetAllPromptTemplatesResponseFormatPromptTemplatesResponse1$outboundSchema;
  /** @deprecated use `GetAllPromptTemplatesResponseFormatPromptTemplatesResponse1$Outbound` instead. */
  export type Outbound =
    GetAllPromptTemplatesResponseFormatPromptTemplatesResponse1$Outbound;
}

export function getAllPromptTemplatesResponseFormatPromptTemplatesResponse1ToJSON(
  getAllPromptTemplatesResponseFormatPromptTemplatesResponse1:
    GetAllPromptTemplatesResponseFormatPromptTemplatesResponse1,
): string {
  return JSON.stringify(
    GetAllPromptTemplatesResponseFormatPromptTemplatesResponse1$outboundSchema
      .parse(getAllPromptTemplatesResponseFormatPromptTemplatesResponse1),
  );
}

export function getAllPromptTemplatesResponseFormatPromptTemplatesResponse1FromJSON(
  jsonString: string,
): SafeParseResult<
  GetAllPromptTemplatesResponseFormatPromptTemplatesResponse1,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetAllPromptTemplatesResponseFormatPromptTemplatesResponse1$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'GetAllPromptTemplatesResponseFormatPromptTemplatesResponse1' from JSON`,
  );
}

/** @internal */
export const GetAllPromptTemplatesItemsPromptTemplatesResponseFormat$inboundSchema:
  z.ZodType<
    GetAllPromptTemplatesItemsPromptTemplatesResponseFormat,
    z.ZodTypeDef,
    unknown
  > = z.union([
    z.lazy(() =>
      GetAllPromptTemplatesResponseFormatPromptTemplatesResponse2$inboundSchema
    ),
    z.lazy(() =>
      GetAllPromptTemplatesResponseFormatPromptTemplatesResponse1$inboundSchema
    ),
  ]);

/** @internal */
export type GetAllPromptTemplatesItemsPromptTemplatesResponseFormat$Outbound =
  | GetAllPromptTemplatesResponseFormatPromptTemplatesResponse2$Outbound
  | GetAllPromptTemplatesResponseFormatPromptTemplatesResponse1$Outbound;

/** @internal */
export const GetAllPromptTemplatesItemsPromptTemplatesResponseFormat$outboundSchema:
  z.ZodType<
    GetAllPromptTemplatesItemsPromptTemplatesResponseFormat$Outbound,
    z.ZodTypeDef,
    GetAllPromptTemplatesItemsPromptTemplatesResponseFormat
  > = z.union([
    z.lazy(() =>
      GetAllPromptTemplatesResponseFormatPromptTemplatesResponse2$outboundSchema
    ),
    z.lazy(() =>
      GetAllPromptTemplatesResponseFormatPromptTemplatesResponse1$outboundSchema
    ),
  ]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPromptTemplatesItemsPromptTemplatesResponseFormat$ {
  /** @deprecated use `GetAllPromptTemplatesItemsPromptTemplatesResponseFormat$inboundSchema` instead. */
  export const inboundSchema =
    GetAllPromptTemplatesItemsPromptTemplatesResponseFormat$inboundSchema;
  /** @deprecated use `GetAllPromptTemplatesItemsPromptTemplatesResponseFormat$outboundSchema` instead. */
  export const outboundSchema =
    GetAllPromptTemplatesItemsPromptTemplatesResponseFormat$outboundSchema;
  /** @deprecated use `GetAllPromptTemplatesItemsPromptTemplatesResponseFormat$Outbound` instead. */
  export type Outbound =
    GetAllPromptTemplatesItemsPromptTemplatesResponseFormat$Outbound;
}

export function getAllPromptTemplatesItemsPromptTemplatesResponseFormatToJSON(
  getAllPromptTemplatesItemsPromptTemplatesResponseFormat:
    GetAllPromptTemplatesItemsPromptTemplatesResponseFormat,
): string {
  return JSON.stringify(
    GetAllPromptTemplatesItemsPromptTemplatesResponseFormat$outboundSchema
      .parse(getAllPromptTemplatesItemsPromptTemplatesResponseFormat),
  );
}

export function getAllPromptTemplatesItemsPromptTemplatesResponseFormatFromJSON(
  jsonString: string,
): SafeParseResult<
  GetAllPromptTemplatesItemsPromptTemplatesResponseFormat,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetAllPromptTemplatesItemsPromptTemplatesResponseFormat$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'GetAllPromptTemplatesItemsPromptTemplatesResponseFormat' from JSON`,
  );
}

/** @internal */
export const GetAllPromptTemplatesItemsPromptTemplatesPhotoRealVersion$inboundSchema:
  z.ZodNativeEnum<
    typeof GetAllPromptTemplatesItemsPromptTemplatesPhotoRealVersion
  > = z.nativeEnum(GetAllPromptTemplatesItemsPromptTemplatesPhotoRealVersion);

/** @internal */
export const GetAllPromptTemplatesItemsPromptTemplatesPhotoRealVersion$outboundSchema:
  z.ZodNativeEnum<
    typeof GetAllPromptTemplatesItemsPromptTemplatesPhotoRealVersion
  > = GetAllPromptTemplatesItemsPromptTemplatesPhotoRealVersion$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPromptTemplatesItemsPromptTemplatesPhotoRealVersion$ {
  /** @deprecated use `GetAllPromptTemplatesItemsPromptTemplatesPhotoRealVersion$inboundSchema` instead. */
  export const inboundSchema =
    GetAllPromptTemplatesItemsPromptTemplatesPhotoRealVersion$inboundSchema;
  /** @deprecated use `GetAllPromptTemplatesItemsPromptTemplatesPhotoRealVersion$outboundSchema` instead. */
  export const outboundSchema =
    GetAllPromptTemplatesItemsPromptTemplatesPhotoRealVersion$outboundSchema;
}

/** @internal */
export const GetAllPromptTemplatesItemsPromptTemplatesEncodingFormat$inboundSchema:
  z.ZodNativeEnum<
    typeof GetAllPromptTemplatesItemsPromptTemplatesEncodingFormat
  > = z.nativeEnum(GetAllPromptTemplatesItemsPromptTemplatesEncodingFormat);

/** @internal */
export const GetAllPromptTemplatesItemsPromptTemplatesEncodingFormat$outboundSchema:
  z.ZodNativeEnum<
    typeof GetAllPromptTemplatesItemsPromptTemplatesEncodingFormat
  > = GetAllPromptTemplatesItemsPromptTemplatesEncodingFormat$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPromptTemplatesItemsPromptTemplatesEncodingFormat$ {
  /** @deprecated use `GetAllPromptTemplatesItemsPromptTemplatesEncodingFormat$inboundSchema` instead. */
  export const inboundSchema =
    GetAllPromptTemplatesItemsPromptTemplatesEncodingFormat$inboundSchema;
  /** @deprecated use `GetAllPromptTemplatesItemsPromptTemplatesEncodingFormat$outboundSchema` instead. */
  export const outboundSchema =
    GetAllPromptTemplatesItemsPromptTemplatesEncodingFormat$outboundSchema;
}

/** @internal */
export const GetAllPromptTemplatesItemsPromptTemplatesModelParameters$inboundSchema:
  z.ZodType<
    GetAllPromptTemplatesItemsPromptTemplatesModelParameters,
    z.ZodTypeDef,
    unknown
  > = z.object({
    temperature: z.number().optional(),
    maxTokens: z.number().optional(),
    topK: z.number().optional(),
    topP: z.number().optional(),
    frequencyPenalty: z.number().optional(),
    presencePenalty: z.number().optional(),
    numImages: z.number().optional(),
    seed: z.number().optional(),
    format: GetAllPromptTemplatesItemsPromptTemplatesFormat$inboundSchema
      .optional(),
    dimensions: z.string().optional(),
    quality: GetAllPromptTemplatesItemsPromptTemplatesQuality$inboundSchema
      .optional(),
    style: z.string().optional(),
    responseFormat: z.nullable(
      z.union([
        z.lazy(() =>
          GetAllPromptTemplatesResponseFormatPromptTemplatesResponse2$inboundSchema
        ),
        z.lazy(() =>
          GetAllPromptTemplatesResponseFormatPromptTemplatesResponse1$inboundSchema
        ),
      ]),
    ).optional(),
    photoRealVersion:
      GetAllPromptTemplatesItemsPromptTemplatesPhotoRealVersion$inboundSchema
        .optional(),
    encoding_format:
      GetAllPromptTemplatesItemsPromptTemplatesEncodingFormat$inboundSchema
        .optional(),
  }).transform((v) => {
    return remap$(v, {
      "encoding_format": "encodingFormat",
    });
  });

/** @internal */
export type GetAllPromptTemplatesItemsPromptTemplatesModelParameters$Outbound =
  {
    temperature?: number | undefined;
    maxTokens?: number | undefined;
    topK?: number | undefined;
    topP?: number | undefined;
    frequencyPenalty?: number | undefined;
    presencePenalty?: number | undefined;
    numImages?: number | undefined;
    seed?: number | undefined;
    format?: string | undefined;
    dimensions?: string | undefined;
    quality?: string | undefined;
    style?: string | undefined;
    responseFormat?:
      | GetAllPromptTemplatesResponseFormatPromptTemplatesResponse2$Outbound
      | GetAllPromptTemplatesResponseFormatPromptTemplatesResponse1$Outbound
      | null
      | undefined;
    photoRealVersion?: string | undefined;
    encoding_format?: string | undefined;
  };

/** @internal */
export const GetAllPromptTemplatesItemsPromptTemplatesModelParameters$outboundSchema:
  z.ZodType<
    GetAllPromptTemplatesItemsPromptTemplatesModelParameters$Outbound,
    z.ZodTypeDef,
    GetAllPromptTemplatesItemsPromptTemplatesModelParameters
  > = z.object({
    temperature: z.number().optional(),
    maxTokens: z.number().optional(),
    topK: z.number().optional(),
    topP: z.number().optional(),
    frequencyPenalty: z.number().optional(),
    presencePenalty: z.number().optional(),
    numImages: z.number().optional(),
    seed: z.number().optional(),
    format: GetAllPromptTemplatesItemsPromptTemplatesFormat$outboundSchema
      .optional(),
    dimensions: z.string().optional(),
    quality: GetAllPromptTemplatesItemsPromptTemplatesQuality$outboundSchema
      .optional(),
    style: z.string().optional(),
    responseFormat: z.nullable(
      z.union([
        z.lazy(() =>
          GetAllPromptTemplatesResponseFormatPromptTemplatesResponse2$outboundSchema
        ),
        z.lazy(() =>
          GetAllPromptTemplatesResponseFormatPromptTemplatesResponse1$outboundSchema
        ),
      ]),
    ).optional(),
    photoRealVersion:
      GetAllPromptTemplatesItemsPromptTemplatesPhotoRealVersion$outboundSchema
        .optional(),
    encodingFormat:
      GetAllPromptTemplatesItemsPromptTemplatesEncodingFormat$outboundSchema
        .optional(),
  }).transform((v) => {
    return remap$(v, {
      encodingFormat: "encoding_format",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPromptTemplatesItemsPromptTemplatesModelParameters$ {
  /** @deprecated use `GetAllPromptTemplatesItemsPromptTemplatesModelParameters$inboundSchema` instead. */
  export const inboundSchema =
    GetAllPromptTemplatesItemsPromptTemplatesModelParameters$inboundSchema;
  /** @deprecated use `GetAllPromptTemplatesItemsPromptTemplatesModelParameters$outboundSchema` instead. */
  export const outboundSchema =
    GetAllPromptTemplatesItemsPromptTemplatesModelParameters$outboundSchema;
  /** @deprecated use `GetAllPromptTemplatesItemsPromptTemplatesModelParameters$Outbound` instead. */
  export type Outbound =
    GetAllPromptTemplatesItemsPromptTemplatesModelParameters$Outbound;
}

export function getAllPromptTemplatesItemsPromptTemplatesModelParametersToJSON(
  getAllPromptTemplatesItemsPromptTemplatesModelParameters:
    GetAllPromptTemplatesItemsPromptTemplatesModelParameters,
): string {
  return JSON.stringify(
    GetAllPromptTemplatesItemsPromptTemplatesModelParameters$outboundSchema
      .parse(getAllPromptTemplatesItemsPromptTemplatesModelParameters),
  );
}

export function getAllPromptTemplatesItemsPromptTemplatesModelParametersFromJSON(
  jsonString: string,
): SafeParseResult<
  GetAllPromptTemplatesItemsPromptTemplatesModelParameters,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetAllPromptTemplatesItemsPromptTemplatesModelParameters$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'GetAllPromptTemplatesItemsPromptTemplatesModelParameters' from JSON`,
  );
}

/** @internal */
export const GetAllPromptTemplatesItemsPromptTemplatesProvider$inboundSchema:
  z.ZodNativeEnum<typeof GetAllPromptTemplatesItemsPromptTemplatesProvider> = z
    .nativeEnum(GetAllPromptTemplatesItemsPromptTemplatesProvider);

/** @internal */
export const GetAllPromptTemplatesItemsPromptTemplatesProvider$outboundSchema:
  z.ZodNativeEnum<typeof GetAllPromptTemplatesItemsPromptTemplatesProvider> =
    GetAllPromptTemplatesItemsPromptTemplatesProvider$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPromptTemplatesItemsPromptTemplatesProvider$ {
  /** @deprecated use `GetAllPromptTemplatesItemsPromptTemplatesProvider$inboundSchema` instead. */
  export const inboundSchema =
    GetAllPromptTemplatesItemsPromptTemplatesProvider$inboundSchema;
  /** @deprecated use `GetAllPromptTemplatesItemsPromptTemplatesProvider$outboundSchema` instead. */
  export const outboundSchema =
    GetAllPromptTemplatesItemsPromptTemplatesProvider$outboundSchema;
}

/** @internal */
export const GetAllPromptTemplatesItemsPromptTemplatesRole$inboundSchema:
  z.ZodNativeEnum<typeof GetAllPromptTemplatesItemsPromptTemplatesRole> = z
    .nativeEnum(GetAllPromptTemplatesItemsPromptTemplatesRole);

/** @internal */
export const GetAllPromptTemplatesItemsPromptTemplatesRole$outboundSchema:
  z.ZodNativeEnum<typeof GetAllPromptTemplatesItemsPromptTemplatesRole> =
    GetAllPromptTemplatesItemsPromptTemplatesRole$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPromptTemplatesItemsPromptTemplatesRole$ {
  /** @deprecated use `GetAllPromptTemplatesItemsPromptTemplatesRole$inboundSchema` instead. */
  export const inboundSchema =
    GetAllPromptTemplatesItemsPromptTemplatesRole$inboundSchema;
  /** @deprecated use `GetAllPromptTemplatesItemsPromptTemplatesRole$outboundSchema` instead. */
  export const outboundSchema =
    GetAllPromptTemplatesItemsPromptTemplatesRole$outboundSchema;
}

/** @internal */
export const GetAllPromptTemplates2PromptTemplatesResponse200ApplicationJSONResponseBodyType$inboundSchema:
  z.ZodNativeEnum<
    typeof GetAllPromptTemplates2PromptTemplatesResponse200ApplicationJSONResponseBodyType
  > = z.nativeEnum(
    GetAllPromptTemplates2PromptTemplatesResponse200ApplicationJSONResponseBodyType,
  );

/** @internal */
export const GetAllPromptTemplates2PromptTemplatesResponse200ApplicationJSONResponseBodyType$outboundSchema:
  z.ZodNativeEnum<
    typeof GetAllPromptTemplates2PromptTemplatesResponse200ApplicationJSONResponseBodyType
  > =
    GetAllPromptTemplates2PromptTemplatesResponse200ApplicationJSONResponseBodyType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPromptTemplates2PromptTemplatesResponse200ApplicationJSONResponseBodyType$ {
  /** @deprecated use `GetAllPromptTemplates2PromptTemplatesResponse200ApplicationJSONResponseBodyType$inboundSchema` instead. */
  export const inboundSchema =
    GetAllPromptTemplates2PromptTemplatesResponse200ApplicationJSONResponseBodyType$inboundSchema;
  /** @deprecated use `GetAllPromptTemplates2PromptTemplatesResponse200ApplicationJSONResponseBodyType$outboundSchema` instead. */
  export const outboundSchema =
    GetAllPromptTemplates2PromptTemplatesResponse200ApplicationJSONResponseBodyType$outboundSchema;
}

/** @internal */
export const GetAllPromptTemplates2PromptTemplatesResponseImageUrl$inboundSchema:
  z.ZodType<
    GetAllPromptTemplates2PromptTemplatesResponseImageUrl,
    z.ZodTypeDef,
    unknown
  > = z.object({
    id: z.string().optional(),
    url: z.string(),
    detail: z.string().optional(),
  });

/** @internal */
export type GetAllPromptTemplates2PromptTemplatesResponseImageUrl$Outbound = {
  id?: string | undefined;
  url: string;
  detail?: string | undefined;
};

/** @internal */
export const GetAllPromptTemplates2PromptTemplatesResponseImageUrl$outboundSchema:
  z.ZodType<
    GetAllPromptTemplates2PromptTemplatesResponseImageUrl$Outbound,
    z.ZodTypeDef,
    GetAllPromptTemplates2PromptTemplatesResponseImageUrl
  > = z.object({
    id: z.string().optional(),
    url: z.string(),
    detail: z.string().optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPromptTemplates2PromptTemplatesResponseImageUrl$ {
  /** @deprecated use `GetAllPromptTemplates2PromptTemplatesResponseImageUrl$inboundSchema` instead. */
  export const inboundSchema =
    GetAllPromptTemplates2PromptTemplatesResponseImageUrl$inboundSchema;
  /** @deprecated use `GetAllPromptTemplates2PromptTemplatesResponseImageUrl$outboundSchema` instead. */
  export const outboundSchema =
    GetAllPromptTemplates2PromptTemplatesResponseImageUrl$outboundSchema;
  /** @deprecated use `GetAllPromptTemplates2PromptTemplatesResponseImageUrl$Outbound` instead. */
  export type Outbound =
    GetAllPromptTemplates2PromptTemplatesResponseImageUrl$Outbound;
}

export function getAllPromptTemplates2PromptTemplatesResponseImageUrlToJSON(
  getAllPromptTemplates2PromptTemplatesResponseImageUrl:
    GetAllPromptTemplates2PromptTemplatesResponseImageUrl,
): string {
  return JSON.stringify(
    GetAllPromptTemplates2PromptTemplatesResponseImageUrl$outboundSchema.parse(
      getAllPromptTemplates2PromptTemplatesResponseImageUrl,
    ),
  );
}

export function getAllPromptTemplates2PromptTemplatesResponseImageUrlFromJSON(
  jsonString: string,
): SafeParseResult<
  GetAllPromptTemplates2PromptTemplatesResponseImageUrl,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetAllPromptTemplates2PromptTemplatesResponseImageUrl$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'GetAllPromptTemplates2PromptTemplatesResponseImageUrl' from JSON`,
  );
}

/** @internal */
export const GetAllPromptTemplates2PromptTemplatesResponse2$inboundSchema:
  z.ZodType<
    GetAllPromptTemplates2PromptTemplatesResponse2,
    z.ZodTypeDef,
    unknown
  > = z.object({
    type:
      GetAllPromptTemplates2PromptTemplatesResponse200ApplicationJSONResponseBodyType$inboundSchema,
    image_url: z.lazy(() =>
      GetAllPromptTemplates2PromptTemplatesResponseImageUrl$inboundSchema
    ),
  }).transform((v) => {
    return remap$(v, {
      "image_url": "imageUrl",
    });
  });

/** @internal */
export type GetAllPromptTemplates2PromptTemplatesResponse2$Outbound = {
  type: string;
  image_url: GetAllPromptTemplates2PromptTemplatesResponseImageUrl$Outbound;
};

/** @internal */
export const GetAllPromptTemplates2PromptTemplatesResponse2$outboundSchema:
  z.ZodType<
    GetAllPromptTemplates2PromptTemplatesResponse2$Outbound,
    z.ZodTypeDef,
    GetAllPromptTemplates2PromptTemplatesResponse2
  > = z.object({
    type:
      GetAllPromptTemplates2PromptTemplatesResponse200ApplicationJSONResponseBodyType$outboundSchema,
    imageUrl: z.lazy(() =>
      GetAllPromptTemplates2PromptTemplatesResponseImageUrl$outboundSchema
    ),
  }).transform((v) => {
    return remap$(v, {
      imageUrl: "image_url",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPromptTemplates2PromptTemplatesResponse2$ {
  /** @deprecated use `GetAllPromptTemplates2PromptTemplatesResponse2$inboundSchema` instead. */
  export const inboundSchema =
    GetAllPromptTemplates2PromptTemplatesResponse2$inboundSchema;
  /** @deprecated use `GetAllPromptTemplates2PromptTemplatesResponse2$outboundSchema` instead. */
  export const outboundSchema =
    GetAllPromptTemplates2PromptTemplatesResponse2$outboundSchema;
  /** @deprecated use `GetAllPromptTemplates2PromptTemplatesResponse2$Outbound` instead. */
  export type Outbound =
    GetAllPromptTemplates2PromptTemplatesResponse2$Outbound;
}

export function getAllPromptTemplates2PromptTemplatesResponse2ToJSON(
  getAllPromptTemplates2PromptTemplatesResponse2:
    GetAllPromptTemplates2PromptTemplatesResponse2,
): string {
  return JSON.stringify(
    GetAllPromptTemplates2PromptTemplatesResponse2$outboundSchema.parse(
      getAllPromptTemplates2PromptTemplatesResponse2,
    ),
  );
}

export function getAllPromptTemplates2PromptTemplatesResponse2FromJSON(
  jsonString: string,
): SafeParseResult<
  GetAllPromptTemplates2PromptTemplatesResponse2,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetAllPromptTemplates2PromptTemplatesResponse2$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'GetAllPromptTemplates2PromptTemplatesResponse2' from JSON`,
  );
}

/** @internal */
export const GetAllPromptTemplates2PromptTemplatesResponse200ApplicationJSONType$inboundSchema:
  z.ZodNativeEnum<
    typeof GetAllPromptTemplates2PromptTemplatesResponse200ApplicationJSONType
  > = z.nativeEnum(
    GetAllPromptTemplates2PromptTemplatesResponse200ApplicationJSONType,
  );

/** @internal */
export const GetAllPromptTemplates2PromptTemplatesResponse200ApplicationJSONType$outboundSchema:
  z.ZodNativeEnum<
    typeof GetAllPromptTemplates2PromptTemplatesResponse200ApplicationJSONType
  > =
    GetAllPromptTemplates2PromptTemplatesResponse200ApplicationJSONType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPromptTemplates2PromptTemplatesResponse200ApplicationJSONType$ {
  /** @deprecated use `GetAllPromptTemplates2PromptTemplatesResponse200ApplicationJSONType$inboundSchema` instead. */
  export const inboundSchema =
    GetAllPromptTemplates2PromptTemplatesResponse200ApplicationJSONType$inboundSchema;
  /** @deprecated use `GetAllPromptTemplates2PromptTemplatesResponse200ApplicationJSONType$outboundSchema` instead. */
  export const outboundSchema =
    GetAllPromptTemplates2PromptTemplatesResponse200ApplicationJSONType$outboundSchema;
}

/** @internal */
export const GetAllPromptTemplates2PromptTemplatesResponse1$inboundSchema:
  z.ZodType<
    GetAllPromptTemplates2PromptTemplatesResponse1,
    z.ZodTypeDef,
    unknown
  > = z.object({
    type:
      GetAllPromptTemplates2PromptTemplatesResponse200ApplicationJSONType$inboundSchema,
    text: z.string(),
  });

/** @internal */
export type GetAllPromptTemplates2PromptTemplatesResponse1$Outbound = {
  type: string;
  text: string;
};

/** @internal */
export const GetAllPromptTemplates2PromptTemplatesResponse1$outboundSchema:
  z.ZodType<
    GetAllPromptTemplates2PromptTemplatesResponse1$Outbound,
    z.ZodTypeDef,
    GetAllPromptTemplates2PromptTemplatesResponse1
  > = z.object({
    type:
      GetAllPromptTemplates2PromptTemplatesResponse200ApplicationJSONType$outboundSchema,
    text: z.string(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPromptTemplates2PromptTemplatesResponse1$ {
  /** @deprecated use `GetAllPromptTemplates2PromptTemplatesResponse1$inboundSchema` instead. */
  export const inboundSchema =
    GetAllPromptTemplates2PromptTemplatesResponse1$inboundSchema;
  /** @deprecated use `GetAllPromptTemplates2PromptTemplatesResponse1$outboundSchema` instead. */
  export const outboundSchema =
    GetAllPromptTemplates2PromptTemplatesResponse1$outboundSchema;
  /** @deprecated use `GetAllPromptTemplates2PromptTemplatesResponse1$Outbound` instead. */
  export type Outbound =
    GetAllPromptTemplates2PromptTemplatesResponse1$Outbound;
}

export function getAllPromptTemplates2PromptTemplatesResponse1ToJSON(
  getAllPromptTemplates2PromptTemplatesResponse1:
    GetAllPromptTemplates2PromptTemplatesResponse1,
): string {
  return JSON.stringify(
    GetAllPromptTemplates2PromptTemplatesResponse1$outboundSchema.parse(
      getAllPromptTemplates2PromptTemplatesResponse1,
    ),
  );
}

export function getAllPromptTemplates2PromptTemplatesResponse1FromJSON(
  jsonString: string,
): SafeParseResult<
  GetAllPromptTemplates2PromptTemplatesResponse1,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetAllPromptTemplates2PromptTemplatesResponse1$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'GetAllPromptTemplates2PromptTemplatesResponse1' from JSON`,
  );
}

/** @internal */
export const GetAllPromptTemplatesContentPromptTemplatesResponse2$inboundSchema:
  z.ZodType<
    GetAllPromptTemplatesContentPromptTemplatesResponse2,
    z.ZodTypeDef,
    unknown
  > = z.union([
    z.lazy(() => GetAllPromptTemplates2PromptTemplatesResponse1$inboundSchema),
    z.lazy(() => GetAllPromptTemplates2PromptTemplatesResponse2$inboundSchema),
  ]);

/** @internal */
export type GetAllPromptTemplatesContentPromptTemplatesResponse2$Outbound =
  | GetAllPromptTemplates2PromptTemplatesResponse1$Outbound
  | GetAllPromptTemplates2PromptTemplatesResponse2$Outbound;

/** @internal */
export const GetAllPromptTemplatesContentPromptTemplatesResponse2$outboundSchema:
  z.ZodType<
    GetAllPromptTemplatesContentPromptTemplatesResponse2$Outbound,
    z.ZodTypeDef,
    GetAllPromptTemplatesContentPromptTemplatesResponse2
  > = z.union([
    z.lazy(() => GetAllPromptTemplates2PromptTemplatesResponse1$outboundSchema),
    z.lazy(() => GetAllPromptTemplates2PromptTemplatesResponse2$outboundSchema),
  ]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPromptTemplatesContentPromptTemplatesResponse2$ {
  /** @deprecated use `GetAllPromptTemplatesContentPromptTemplatesResponse2$inboundSchema` instead. */
  export const inboundSchema =
    GetAllPromptTemplatesContentPromptTemplatesResponse2$inboundSchema;
  /** @deprecated use `GetAllPromptTemplatesContentPromptTemplatesResponse2$outboundSchema` instead. */
  export const outboundSchema =
    GetAllPromptTemplatesContentPromptTemplatesResponse2$outboundSchema;
  /** @deprecated use `GetAllPromptTemplatesContentPromptTemplatesResponse2$Outbound` instead. */
  export type Outbound =
    GetAllPromptTemplatesContentPromptTemplatesResponse2$Outbound;
}

export function getAllPromptTemplatesContentPromptTemplatesResponse2ToJSON(
  getAllPromptTemplatesContentPromptTemplatesResponse2:
    GetAllPromptTemplatesContentPromptTemplatesResponse2,
): string {
  return JSON.stringify(
    GetAllPromptTemplatesContentPromptTemplatesResponse2$outboundSchema.parse(
      getAllPromptTemplatesContentPromptTemplatesResponse2,
    ),
  );
}

export function getAllPromptTemplatesContentPromptTemplatesResponse2FromJSON(
  jsonString: string,
): SafeParseResult<
  GetAllPromptTemplatesContentPromptTemplatesResponse2,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetAllPromptTemplatesContentPromptTemplatesResponse2$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'GetAllPromptTemplatesContentPromptTemplatesResponse2' from JSON`,
  );
}

/** @internal */
export const GetAllPromptTemplatesItemsPromptTemplatesContent$inboundSchema:
  z.ZodType<
    GetAllPromptTemplatesItemsPromptTemplatesContent,
    z.ZodTypeDef,
    unknown
  > = z.union([
    z.string(),
    z.array(z.union([
      z.lazy(() =>
        GetAllPromptTemplates2PromptTemplatesResponse1$inboundSchema
      ),
      z.lazy(() =>
        GetAllPromptTemplates2PromptTemplatesResponse2$inboundSchema
      ),
    ])),
  ]);

/** @internal */
export type GetAllPromptTemplatesItemsPromptTemplatesContent$Outbound =
  | string
  | Array<
    | GetAllPromptTemplates2PromptTemplatesResponse1$Outbound
    | GetAllPromptTemplates2PromptTemplatesResponse2$Outbound
  >;

/** @internal */
export const GetAllPromptTemplatesItemsPromptTemplatesContent$outboundSchema:
  z.ZodType<
    GetAllPromptTemplatesItemsPromptTemplatesContent$Outbound,
    z.ZodTypeDef,
    GetAllPromptTemplatesItemsPromptTemplatesContent
  > = z.union([
    z.string(),
    z.array(z.union([
      z.lazy(() =>
        GetAllPromptTemplates2PromptTemplatesResponse1$outboundSchema
      ),
      z.lazy(() =>
        GetAllPromptTemplates2PromptTemplatesResponse2$outboundSchema
      ),
    ])),
  ]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPromptTemplatesItemsPromptTemplatesContent$ {
  /** @deprecated use `GetAllPromptTemplatesItemsPromptTemplatesContent$inboundSchema` instead. */
  export const inboundSchema =
    GetAllPromptTemplatesItemsPromptTemplatesContent$inboundSchema;
  /** @deprecated use `GetAllPromptTemplatesItemsPromptTemplatesContent$outboundSchema` instead. */
  export const outboundSchema =
    GetAllPromptTemplatesItemsPromptTemplatesContent$outboundSchema;
  /** @deprecated use `GetAllPromptTemplatesItemsPromptTemplatesContent$Outbound` instead. */
  export type Outbound =
    GetAllPromptTemplatesItemsPromptTemplatesContent$Outbound;
}

export function getAllPromptTemplatesItemsPromptTemplatesContentToJSON(
  getAllPromptTemplatesItemsPromptTemplatesContent:
    GetAllPromptTemplatesItemsPromptTemplatesContent,
): string {
  return JSON.stringify(
    GetAllPromptTemplatesItemsPromptTemplatesContent$outboundSchema.parse(
      getAllPromptTemplatesItemsPromptTemplatesContent,
    ),
  );
}

export function getAllPromptTemplatesItemsPromptTemplatesContentFromJSON(
  jsonString: string,
): SafeParseResult<
  GetAllPromptTemplatesItemsPromptTemplatesContent,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetAllPromptTemplatesItemsPromptTemplatesContent$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'GetAllPromptTemplatesItemsPromptTemplatesContent' from JSON`,
  );
}

/** @internal */
export const GetAllPromptTemplatesItemsPromptTemplatesResponse200Type$inboundSchema:
  z.ZodNativeEnum<
    typeof GetAllPromptTemplatesItemsPromptTemplatesResponse200Type
  > = z.nativeEnum(GetAllPromptTemplatesItemsPromptTemplatesResponse200Type);

/** @internal */
export const GetAllPromptTemplatesItemsPromptTemplatesResponse200Type$outboundSchema:
  z.ZodNativeEnum<
    typeof GetAllPromptTemplatesItemsPromptTemplatesResponse200Type
  > = GetAllPromptTemplatesItemsPromptTemplatesResponse200Type$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPromptTemplatesItemsPromptTemplatesResponse200Type$ {
  /** @deprecated use `GetAllPromptTemplatesItemsPromptTemplatesResponse200Type$inboundSchema` instead. */
  export const inboundSchema =
    GetAllPromptTemplatesItemsPromptTemplatesResponse200Type$inboundSchema;
  /** @deprecated use `GetAllPromptTemplatesItemsPromptTemplatesResponse200Type$outboundSchema` instead. */
  export const outboundSchema =
    GetAllPromptTemplatesItemsPromptTemplatesResponse200Type$outboundSchema;
}

/** @internal */
export const GetAllPromptTemplatesItemsPromptTemplatesFunction$inboundSchema:
  z.ZodType<
    GetAllPromptTemplatesItemsPromptTemplatesFunction,
    z.ZodTypeDef,
    unknown
  > = z.object({
    name: z.string(),
    arguments: z.string(),
  });

/** @internal */
export type GetAllPromptTemplatesItemsPromptTemplatesFunction$Outbound = {
  name: string;
  arguments: string;
};

/** @internal */
export const GetAllPromptTemplatesItemsPromptTemplatesFunction$outboundSchema:
  z.ZodType<
    GetAllPromptTemplatesItemsPromptTemplatesFunction$Outbound,
    z.ZodTypeDef,
    GetAllPromptTemplatesItemsPromptTemplatesFunction
  > = z.object({
    name: z.string(),
    arguments: z.string(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPromptTemplatesItemsPromptTemplatesFunction$ {
  /** @deprecated use `GetAllPromptTemplatesItemsPromptTemplatesFunction$inboundSchema` instead. */
  export const inboundSchema =
    GetAllPromptTemplatesItemsPromptTemplatesFunction$inboundSchema;
  /** @deprecated use `GetAllPromptTemplatesItemsPromptTemplatesFunction$outboundSchema` instead. */
  export const outboundSchema =
    GetAllPromptTemplatesItemsPromptTemplatesFunction$outboundSchema;
  /** @deprecated use `GetAllPromptTemplatesItemsPromptTemplatesFunction$Outbound` instead. */
  export type Outbound =
    GetAllPromptTemplatesItemsPromptTemplatesFunction$Outbound;
}

export function getAllPromptTemplatesItemsPromptTemplatesFunctionToJSON(
  getAllPromptTemplatesItemsPromptTemplatesFunction:
    GetAllPromptTemplatesItemsPromptTemplatesFunction,
): string {
  return JSON.stringify(
    GetAllPromptTemplatesItemsPromptTemplatesFunction$outboundSchema.parse(
      getAllPromptTemplatesItemsPromptTemplatesFunction,
    ),
  );
}

export function getAllPromptTemplatesItemsPromptTemplatesFunctionFromJSON(
  jsonString: string,
): SafeParseResult<
  GetAllPromptTemplatesItemsPromptTemplatesFunction,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetAllPromptTemplatesItemsPromptTemplatesFunction$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'GetAllPromptTemplatesItemsPromptTemplatesFunction' from JSON`,
  );
}

/** @internal */
export const GetAllPromptTemplatesItemsPromptTemplatesToolCalls$inboundSchema:
  z.ZodType<
    GetAllPromptTemplatesItemsPromptTemplatesToolCalls,
    z.ZodTypeDef,
    unknown
  > = z.object({
    id: z.string().optional(),
    index: z.number().optional(),
    type:
      GetAllPromptTemplatesItemsPromptTemplatesResponse200Type$inboundSchema,
    function: z.lazy(() =>
      GetAllPromptTemplatesItemsPromptTemplatesFunction$inboundSchema
    ),
  });

/** @internal */
export type GetAllPromptTemplatesItemsPromptTemplatesToolCalls$Outbound = {
  id?: string | undefined;
  index?: number | undefined;
  type: string;
  function: GetAllPromptTemplatesItemsPromptTemplatesFunction$Outbound;
};

/** @internal */
export const GetAllPromptTemplatesItemsPromptTemplatesToolCalls$outboundSchema:
  z.ZodType<
    GetAllPromptTemplatesItemsPromptTemplatesToolCalls$Outbound,
    z.ZodTypeDef,
    GetAllPromptTemplatesItemsPromptTemplatesToolCalls
  > = z.object({
    id: z.string().optional(),
    index: z.number().optional(),
    type:
      GetAllPromptTemplatesItemsPromptTemplatesResponse200Type$outboundSchema,
    function: z.lazy(() =>
      GetAllPromptTemplatesItemsPromptTemplatesFunction$outboundSchema
    ),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPromptTemplatesItemsPromptTemplatesToolCalls$ {
  /** @deprecated use `GetAllPromptTemplatesItemsPromptTemplatesToolCalls$inboundSchema` instead. */
  export const inboundSchema =
    GetAllPromptTemplatesItemsPromptTemplatesToolCalls$inboundSchema;
  /** @deprecated use `GetAllPromptTemplatesItemsPromptTemplatesToolCalls$outboundSchema` instead. */
  export const outboundSchema =
    GetAllPromptTemplatesItemsPromptTemplatesToolCalls$outboundSchema;
  /** @deprecated use `GetAllPromptTemplatesItemsPromptTemplatesToolCalls$Outbound` instead. */
  export type Outbound =
    GetAllPromptTemplatesItemsPromptTemplatesToolCalls$Outbound;
}

export function getAllPromptTemplatesItemsPromptTemplatesToolCallsToJSON(
  getAllPromptTemplatesItemsPromptTemplatesToolCalls:
    GetAllPromptTemplatesItemsPromptTemplatesToolCalls,
): string {
  return JSON.stringify(
    GetAllPromptTemplatesItemsPromptTemplatesToolCalls$outboundSchema.parse(
      getAllPromptTemplatesItemsPromptTemplatesToolCalls,
    ),
  );
}

export function getAllPromptTemplatesItemsPromptTemplatesToolCallsFromJSON(
  jsonString: string,
): SafeParseResult<
  GetAllPromptTemplatesItemsPromptTemplatesToolCalls,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetAllPromptTemplatesItemsPromptTemplatesToolCalls$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'GetAllPromptTemplatesItemsPromptTemplatesToolCalls' from JSON`,
  );
}

/** @internal */
export const GetAllPromptTemplatesItemsPromptTemplatesMessages$inboundSchema:
  z.ZodType<
    GetAllPromptTemplatesItemsPromptTemplatesMessages,
    z.ZodTypeDef,
    unknown
  > = z.object({
    role: GetAllPromptTemplatesItemsPromptTemplatesRole$inboundSchema,
    content: z.union([
      z.string(),
      z.array(z.union([
        z.lazy(() =>
          GetAllPromptTemplates2PromptTemplatesResponse1$inboundSchema
        ),
        z.lazy(() =>
          GetAllPromptTemplates2PromptTemplatesResponse2$inboundSchema
        ),
      ])),
    ]),
    tool_calls: z.array(
      z.lazy(() =>
        GetAllPromptTemplatesItemsPromptTemplatesToolCalls$inboundSchema
      ),
    ).optional(),
  }).transform((v) => {
    return remap$(v, {
      "tool_calls": "toolCalls",
    });
  });

/** @internal */
export type GetAllPromptTemplatesItemsPromptTemplatesMessages$Outbound = {
  role: string;
  content:
    | string
    | Array<
      | GetAllPromptTemplates2PromptTemplatesResponse1$Outbound
      | GetAllPromptTemplates2PromptTemplatesResponse2$Outbound
    >;
  tool_calls?:
    | Array<GetAllPromptTemplatesItemsPromptTemplatesToolCalls$Outbound>
    | undefined;
};

/** @internal */
export const GetAllPromptTemplatesItemsPromptTemplatesMessages$outboundSchema:
  z.ZodType<
    GetAllPromptTemplatesItemsPromptTemplatesMessages$Outbound,
    z.ZodTypeDef,
    GetAllPromptTemplatesItemsPromptTemplatesMessages
  > = z.object({
    role: GetAllPromptTemplatesItemsPromptTemplatesRole$outboundSchema,
    content: z.union([
      z.string(),
      z.array(z.union([
        z.lazy(() =>
          GetAllPromptTemplates2PromptTemplatesResponse1$outboundSchema
        ),
        z.lazy(() =>
          GetAllPromptTemplates2PromptTemplatesResponse2$outboundSchema
        ),
      ])),
    ]),
    toolCalls: z.array(
      z.lazy(() =>
        GetAllPromptTemplatesItemsPromptTemplatesToolCalls$outboundSchema
      ),
    ).optional(),
  }).transform((v) => {
    return remap$(v, {
      toolCalls: "tool_calls",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPromptTemplatesItemsPromptTemplatesMessages$ {
  /** @deprecated use `GetAllPromptTemplatesItemsPromptTemplatesMessages$inboundSchema` instead. */
  export const inboundSchema =
    GetAllPromptTemplatesItemsPromptTemplatesMessages$inboundSchema;
  /** @deprecated use `GetAllPromptTemplatesItemsPromptTemplatesMessages$outboundSchema` instead. */
  export const outboundSchema =
    GetAllPromptTemplatesItemsPromptTemplatesMessages$outboundSchema;
  /** @deprecated use `GetAllPromptTemplatesItemsPromptTemplatesMessages$Outbound` instead. */
  export type Outbound =
    GetAllPromptTemplatesItemsPromptTemplatesMessages$Outbound;
}

export function getAllPromptTemplatesItemsPromptTemplatesMessagesToJSON(
  getAllPromptTemplatesItemsPromptTemplatesMessages:
    GetAllPromptTemplatesItemsPromptTemplatesMessages,
): string {
  return JSON.stringify(
    GetAllPromptTemplatesItemsPromptTemplatesMessages$outboundSchema.parse(
      getAllPromptTemplatesItemsPromptTemplatesMessages,
    ),
  );
}

export function getAllPromptTemplatesItemsPromptTemplatesMessagesFromJSON(
  jsonString: string,
): SafeParseResult<
  GetAllPromptTemplatesItemsPromptTemplatesMessages,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetAllPromptTemplatesItemsPromptTemplatesMessages$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'GetAllPromptTemplatesItemsPromptTemplatesMessages' from JSON`,
  );
}

/** @internal */
export const GetAllPromptTemplatesItemsPromptTemplatesPromptConfig$inboundSchema:
  z.ZodType<
    GetAllPromptTemplatesItemsPromptTemplatesPromptConfig,
    z.ZodTypeDef,
    unknown
  > = z.object({
    stream: z.boolean().optional(),
    model: z.string().optional(),
    model_db_id: z.string().optional(),
    model_type: GetAllPromptTemplatesItemsPromptTemplatesModelType$inboundSchema
      .optional(),
    model_parameters: z.lazy(() =>
      GetAllPromptTemplatesItemsPromptTemplatesModelParameters$inboundSchema
    ).optional(),
    provider: GetAllPromptTemplatesItemsPromptTemplatesProvider$inboundSchema
      .optional(),
    integration_id: z.nullable(z.string()).optional(),
    version: z.string().optional(),
    messages: z.array(
      z.lazy(() =>
        GetAllPromptTemplatesItemsPromptTemplatesMessages$inboundSchema
      ),
    ),
  }).transform((v) => {
    return remap$(v, {
      "model_db_id": "modelDbId",
      "model_type": "modelType",
      "model_parameters": "modelParameters",
      "integration_id": "integrationId",
    });
  });

/** @internal */
export type GetAllPromptTemplatesItemsPromptTemplatesPromptConfig$Outbound = {
  stream?: boolean | undefined;
  model?: string | undefined;
  model_db_id?: string | undefined;
  model_type?: string | undefined;
  model_parameters?:
    | GetAllPromptTemplatesItemsPromptTemplatesModelParameters$Outbound
    | undefined;
  provider?: string | undefined;
  integration_id?: string | null | undefined;
  version?: string | undefined;
  messages: Array<GetAllPromptTemplatesItemsPromptTemplatesMessages$Outbound>;
};

/** @internal */
export const GetAllPromptTemplatesItemsPromptTemplatesPromptConfig$outboundSchema:
  z.ZodType<
    GetAllPromptTemplatesItemsPromptTemplatesPromptConfig$Outbound,
    z.ZodTypeDef,
    GetAllPromptTemplatesItemsPromptTemplatesPromptConfig
  > = z.object({
    stream: z.boolean().optional(),
    model: z.string().optional(),
    modelDbId: z.string().optional(),
    modelType: GetAllPromptTemplatesItemsPromptTemplatesModelType$outboundSchema
      .optional(),
    modelParameters: z.lazy(() =>
      GetAllPromptTemplatesItemsPromptTemplatesModelParameters$outboundSchema
    ).optional(),
    provider: GetAllPromptTemplatesItemsPromptTemplatesProvider$outboundSchema
      .optional(),
    integrationId: z.nullable(z.string()).optional(),
    version: z.string().optional(),
    messages: z.array(
      z.lazy(() =>
        GetAllPromptTemplatesItemsPromptTemplatesMessages$outboundSchema
      ),
    ),
  }).transform((v) => {
    return remap$(v, {
      modelDbId: "model_db_id",
      modelType: "model_type",
      modelParameters: "model_parameters",
      integrationId: "integration_id",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPromptTemplatesItemsPromptTemplatesPromptConfig$ {
  /** @deprecated use `GetAllPromptTemplatesItemsPromptTemplatesPromptConfig$inboundSchema` instead. */
  export const inboundSchema =
    GetAllPromptTemplatesItemsPromptTemplatesPromptConfig$inboundSchema;
  /** @deprecated use `GetAllPromptTemplatesItemsPromptTemplatesPromptConfig$outboundSchema` instead. */
  export const outboundSchema =
    GetAllPromptTemplatesItemsPromptTemplatesPromptConfig$outboundSchema;
  /** @deprecated use `GetAllPromptTemplatesItemsPromptTemplatesPromptConfig$Outbound` instead. */
  export type Outbound =
    GetAllPromptTemplatesItemsPromptTemplatesPromptConfig$Outbound;
}

export function getAllPromptTemplatesItemsPromptTemplatesPromptConfigToJSON(
  getAllPromptTemplatesItemsPromptTemplatesPromptConfig:
    GetAllPromptTemplatesItemsPromptTemplatesPromptConfig,
): string {
  return JSON.stringify(
    GetAllPromptTemplatesItemsPromptTemplatesPromptConfig$outboundSchema.parse(
      getAllPromptTemplatesItemsPromptTemplatesPromptConfig,
    ),
  );
}

export function getAllPromptTemplatesItemsPromptTemplatesPromptConfigFromJSON(
  jsonString: string,
): SafeParseResult<
  GetAllPromptTemplatesItemsPromptTemplatesPromptConfig,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetAllPromptTemplatesItemsPromptTemplatesPromptConfig$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'GetAllPromptTemplatesItemsPromptTemplatesPromptConfig' from JSON`,
  );
}

/** @internal */
export const GetAllPromptTemplatesItemsPromptTemplatesMetadata$inboundSchema:
  z.ZodType<
    GetAllPromptTemplatesItemsPromptTemplatesMetadata,
    z.ZodTypeDef,
    unknown
  > = z.object({
    use_cases: z.array(z.string()).optional(),
    language: z.string().optional(),
  }).transform((v) => {
    return remap$(v, {
      "use_cases": "useCases",
    });
  });

/** @internal */
export type GetAllPromptTemplatesItemsPromptTemplatesMetadata$Outbound = {
  use_cases?: Array<string> | undefined;
  language?: string | undefined;
};

/** @internal */
export const GetAllPromptTemplatesItemsPromptTemplatesMetadata$outboundSchema:
  z.ZodType<
    GetAllPromptTemplatesItemsPromptTemplatesMetadata$Outbound,
    z.ZodTypeDef,
    GetAllPromptTemplatesItemsPromptTemplatesMetadata
  > = z.object({
    useCases: z.array(z.string()).optional(),
    language: z.string().optional(),
  }).transform((v) => {
    return remap$(v, {
      useCases: "use_cases",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPromptTemplatesItemsPromptTemplatesMetadata$ {
  /** @deprecated use `GetAllPromptTemplatesItemsPromptTemplatesMetadata$inboundSchema` instead. */
  export const inboundSchema =
    GetAllPromptTemplatesItemsPromptTemplatesMetadata$inboundSchema;
  /** @deprecated use `GetAllPromptTemplatesItemsPromptTemplatesMetadata$outboundSchema` instead. */
  export const outboundSchema =
    GetAllPromptTemplatesItemsPromptTemplatesMetadata$outboundSchema;
  /** @deprecated use `GetAllPromptTemplatesItemsPromptTemplatesMetadata$Outbound` instead. */
  export type Outbound =
    GetAllPromptTemplatesItemsPromptTemplatesMetadata$Outbound;
}

export function getAllPromptTemplatesItemsPromptTemplatesMetadataToJSON(
  getAllPromptTemplatesItemsPromptTemplatesMetadata:
    GetAllPromptTemplatesItemsPromptTemplatesMetadata,
): string {
  return JSON.stringify(
    GetAllPromptTemplatesItemsPromptTemplatesMetadata$outboundSchema.parse(
      getAllPromptTemplatesItemsPromptTemplatesMetadata,
    ),
  );
}

export function getAllPromptTemplatesItemsPromptTemplatesMetadataFromJSON(
  jsonString: string,
): SafeParseResult<
  GetAllPromptTemplatesItemsPromptTemplatesMetadata,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetAllPromptTemplatesItemsPromptTemplatesMetadata$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'GetAllPromptTemplatesItemsPromptTemplatesMetadata' from JSON`,
  );
}

/** @internal */
export const GetAllPromptTemplatesItemsPromptTemplatesResponse200ApplicationJSONModelType$inboundSchema:
  z.ZodNativeEnum<
    typeof GetAllPromptTemplatesItemsPromptTemplatesResponse200ApplicationJSONModelType
  > = z.nativeEnum(
    GetAllPromptTemplatesItemsPromptTemplatesResponse200ApplicationJSONModelType,
  );

/** @internal */
export const GetAllPromptTemplatesItemsPromptTemplatesResponse200ApplicationJSONModelType$outboundSchema:
  z.ZodNativeEnum<
    typeof GetAllPromptTemplatesItemsPromptTemplatesResponse200ApplicationJSONModelType
  > =
    GetAllPromptTemplatesItemsPromptTemplatesResponse200ApplicationJSONModelType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPromptTemplatesItemsPromptTemplatesResponse200ApplicationJSONModelType$ {
  /** @deprecated use `GetAllPromptTemplatesItemsPromptTemplatesResponse200ApplicationJSONModelType$inboundSchema` instead. */
  export const inboundSchema =
    GetAllPromptTemplatesItemsPromptTemplatesResponse200ApplicationJSONModelType$inboundSchema;
  /** @deprecated use `GetAllPromptTemplatesItemsPromptTemplatesResponse200ApplicationJSONModelType$outboundSchema` instead. */
  export const outboundSchema =
    GetAllPromptTemplatesItemsPromptTemplatesResponse200ApplicationJSONModelType$outboundSchema;
}

/** @internal */
export const GetAllPromptTemplatesItemsPromptTemplatesResponse200ApplicationJSONResponseBodyFormat$inboundSchema:
  z.ZodNativeEnum<
    typeof GetAllPromptTemplatesItemsPromptTemplatesResponse200ApplicationJSONResponseBodyFormat
  > = z.nativeEnum(
    GetAllPromptTemplatesItemsPromptTemplatesResponse200ApplicationJSONResponseBodyFormat,
  );

/** @internal */
export const GetAllPromptTemplatesItemsPromptTemplatesResponse200ApplicationJSONResponseBodyFormat$outboundSchema:
  z.ZodNativeEnum<
    typeof GetAllPromptTemplatesItemsPromptTemplatesResponse200ApplicationJSONResponseBodyFormat
  > =
    GetAllPromptTemplatesItemsPromptTemplatesResponse200ApplicationJSONResponseBodyFormat$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPromptTemplatesItemsPromptTemplatesResponse200ApplicationJSONResponseBodyFormat$ {
  /** @deprecated use `GetAllPromptTemplatesItemsPromptTemplatesResponse200ApplicationJSONResponseBodyFormat$inboundSchema` instead. */
  export const inboundSchema =
    GetAllPromptTemplatesItemsPromptTemplatesResponse200ApplicationJSONResponseBodyFormat$inboundSchema;
  /** @deprecated use `GetAllPromptTemplatesItemsPromptTemplatesResponse200ApplicationJSONResponseBodyFormat$outboundSchema` instead. */
  export const outboundSchema =
    GetAllPromptTemplatesItemsPromptTemplatesResponse200ApplicationJSONResponseBodyFormat$outboundSchema;
}

/** @internal */
export const GetAllPromptTemplatesItemsPromptTemplatesResponse200ApplicationJSONQuality$inboundSchema:
  z.ZodNativeEnum<
    typeof GetAllPromptTemplatesItemsPromptTemplatesResponse200ApplicationJSONQuality
  > = z.nativeEnum(
    GetAllPromptTemplatesItemsPromptTemplatesResponse200ApplicationJSONQuality,
  );

/** @internal */
export const GetAllPromptTemplatesItemsPromptTemplatesResponse200ApplicationJSONQuality$outboundSchema:
  z.ZodNativeEnum<
    typeof GetAllPromptTemplatesItemsPromptTemplatesResponse200ApplicationJSONQuality
  > =
    GetAllPromptTemplatesItemsPromptTemplatesResponse200ApplicationJSONQuality$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPromptTemplatesItemsPromptTemplatesResponse200ApplicationJSONQuality$ {
  /** @deprecated use `GetAllPromptTemplatesItemsPromptTemplatesResponse200ApplicationJSONQuality$inboundSchema` instead. */
  export const inboundSchema =
    GetAllPromptTemplatesItemsPromptTemplatesResponse200ApplicationJSONQuality$inboundSchema;
  /** @deprecated use `GetAllPromptTemplatesItemsPromptTemplatesResponse200ApplicationJSONQuality$outboundSchema` instead. */
  export const outboundSchema =
    GetAllPromptTemplatesItemsPromptTemplatesResponse200ApplicationJSONQuality$outboundSchema;
}

/** @internal */
export const GetAllPromptTemplatesResponseFormatPromptTemplatesResponse200ApplicationJSONResponseBodyItems3VersionsType$inboundSchema:
  z.ZodNativeEnum<
    typeof GetAllPromptTemplatesResponseFormatPromptTemplatesResponse200ApplicationJSONResponseBodyItems3VersionsType
  > = z.nativeEnum(
    GetAllPromptTemplatesResponseFormatPromptTemplatesResponse200ApplicationJSONResponseBodyItems3VersionsType,
  );

/** @internal */
export const GetAllPromptTemplatesResponseFormatPromptTemplatesResponse200ApplicationJSONResponseBodyItems3VersionsType$outboundSchema:
  z.ZodNativeEnum<
    typeof GetAllPromptTemplatesResponseFormatPromptTemplatesResponse200ApplicationJSONResponseBodyItems3VersionsType
  > =
    GetAllPromptTemplatesResponseFormatPromptTemplatesResponse200ApplicationJSONResponseBodyItems3VersionsType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPromptTemplatesResponseFormatPromptTemplatesResponse200ApplicationJSONResponseBodyItems3VersionsType$ {
  /** @deprecated use `GetAllPromptTemplatesResponseFormatPromptTemplatesResponse200ApplicationJSONResponseBodyItems3VersionsType$inboundSchema` instead. */
  export const inboundSchema =
    GetAllPromptTemplatesResponseFormatPromptTemplatesResponse200ApplicationJSONResponseBodyItems3VersionsType$inboundSchema;
  /** @deprecated use `GetAllPromptTemplatesResponseFormatPromptTemplatesResponse200ApplicationJSONResponseBodyItems3VersionsType$outboundSchema` instead. */
  export const outboundSchema =
    GetAllPromptTemplatesResponseFormatPromptTemplatesResponse200ApplicationJSONResponseBodyItems3VersionsType$outboundSchema;
}

/** @internal */
export const GetAllPromptTemplatesResponseFormatPromptTemplatesResponse200ApplicationJSONResponseBody2$inboundSchema:
  z.ZodType<
    GetAllPromptTemplatesResponseFormatPromptTemplatesResponse200ApplicationJSONResponseBody2,
    z.ZodTypeDef,
    unknown
  > = z.object({
    type:
      GetAllPromptTemplatesResponseFormatPromptTemplatesResponse200ApplicationJSONResponseBodyItems3VersionsType$inboundSchema,
  });

/** @internal */
export type GetAllPromptTemplatesResponseFormatPromptTemplatesResponse200ApplicationJSONResponseBody2$Outbound =
  {
    type: string;
  };

/** @internal */
export const GetAllPromptTemplatesResponseFormatPromptTemplatesResponse200ApplicationJSONResponseBody2$outboundSchema:
  z.ZodType<
    GetAllPromptTemplatesResponseFormatPromptTemplatesResponse200ApplicationJSONResponseBody2$Outbound,
    z.ZodTypeDef,
    GetAllPromptTemplatesResponseFormatPromptTemplatesResponse200ApplicationJSONResponseBody2
  > = z.object({
    type:
      GetAllPromptTemplatesResponseFormatPromptTemplatesResponse200ApplicationJSONResponseBodyItems3VersionsType$outboundSchema,
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPromptTemplatesResponseFormatPromptTemplatesResponse200ApplicationJSONResponseBody2$ {
  /** @deprecated use `GetAllPromptTemplatesResponseFormatPromptTemplatesResponse200ApplicationJSONResponseBody2$inboundSchema` instead. */
  export const inboundSchema =
    GetAllPromptTemplatesResponseFormatPromptTemplatesResponse200ApplicationJSONResponseBody2$inboundSchema;
  /** @deprecated use `GetAllPromptTemplatesResponseFormatPromptTemplatesResponse200ApplicationJSONResponseBody2$outboundSchema` instead. */
  export const outboundSchema =
    GetAllPromptTemplatesResponseFormatPromptTemplatesResponse200ApplicationJSONResponseBody2$outboundSchema;
  /** @deprecated use `GetAllPromptTemplatesResponseFormatPromptTemplatesResponse200ApplicationJSONResponseBody2$Outbound` instead. */
  export type Outbound =
    GetAllPromptTemplatesResponseFormatPromptTemplatesResponse200ApplicationJSONResponseBody2$Outbound;
}

export function getAllPromptTemplatesResponseFormatPromptTemplatesResponse200ApplicationJSONResponseBody2ToJSON(
  getAllPromptTemplatesResponseFormatPromptTemplatesResponse200ApplicationJSONResponseBody2:
    GetAllPromptTemplatesResponseFormatPromptTemplatesResponse200ApplicationJSONResponseBody2,
): string {
  return JSON.stringify(
    GetAllPromptTemplatesResponseFormatPromptTemplatesResponse200ApplicationJSONResponseBody2$outboundSchema
      .parse(
        getAllPromptTemplatesResponseFormatPromptTemplatesResponse200ApplicationJSONResponseBody2,
      ),
  );
}

export function getAllPromptTemplatesResponseFormatPromptTemplatesResponse200ApplicationJSONResponseBody2FromJSON(
  jsonString: string,
): SafeParseResult<
  GetAllPromptTemplatesResponseFormatPromptTemplatesResponse200ApplicationJSONResponseBody2,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetAllPromptTemplatesResponseFormatPromptTemplatesResponse200ApplicationJSONResponseBody2$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'GetAllPromptTemplatesResponseFormatPromptTemplatesResponse200ApplicationJSONResponseBody2' from JSON`,
  );
}

/** @internal */
export const GetAllPromptTemplatesResponseFormatPromptTemplatesResponse200ApplicationJSONResponseBodyItems3Type$inboundSchema:
  z.ZodNativeEnum<
    typeof GetAllPromptTemplatesResponseFormatPromptTemplatesResponse200ApplicationJSONResponseBodyItems3Type
  > = z.nativeEnum(
    GetAllPromptTemplatesResponseFormatPromptTemplatesResponse200ApplicationJSONResponseBodyItems3Type,
  );

/** @internal */
export const GetAllPromptTemplatesResponseFormatPromptTemplatesResponse200ApplicationJSONResponseBodyItems3Type$outboundSchema:
  z.ZodNativeEnum<
    typeof GetAllPromptTemplatesResponseFormatPromptTemplatesResponse200ApplicationJSONResponseBodyItems3Type
  > =
    GetAllPromptTemplatesResponseFormatPromptTemplatesResponse200ApplicationJSONResponseBodyItems3Type$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPromptTemplatesResponseFormatPromptTemplatesResponse200ApplicationJSONResponseBodyItems3Type$ {
  /** @deprecated use `GetAllPromptTemplatesResponseFormatPromptTemplatesResponse200ApplicationJSONResponseBodyItems3Type$inboundSchema` instead. */
  export const inboundSchema =
    GetAllPromptTemplatesResponseFormatPromptTemplatesResponse200ApplicationJSONResponseBodyItems3Type$inboundSchema;
  /** @deprecated use `GetAllPromptTemplatesResponseFormatPromptTemplatesResponse200ApplicationJSONResponseBodyItems3Type$outboundSchema` instead. */
  export const outboundSchema =
    GetAllPromptTemplatesResponseFormatPromptTemplatesResponse200ApplicationJSONResponseBodyItems3Type$outboundSchema;
}

/** @internal */
export const GetAllPromptTemplatesResponseFormatPromptTemplatesResponse200ApplicationJSONResponseBodyJSONSchema$inboundSchema:
  z.ZodType<
    GetAllPromptTemplatesResponseFormatPromptTemplatesResponse200ApplicationJSONResponseBodyJSONSchema,
    z.ZodTypeDef,
    unknown
  > = z.object({
    name: z.string(),
    strict: z.boolean(),
    schema: z.record(z.any()),
  });

/** @internal */
export type GetAllPromptTemplatesResponseFormatPromptTemplatesResponse200ApplicationJSONResponseBodyJSONSchema$Outbound =
  {
    name: string;
    strict: boolean;
    schema: { [k: string]: any };
  };

/** @internal */
export const GetAllPromptTemplatesResponseFormatPromptTemplatesResponse200ApplicationJSONResponseBodyJSONSchema$outboundSchema:
  z.ZodType<
    GetAllPromptTemplatesResponseFormatPromptTemplatesResponse200ApplicationJSONResponseBodyJSONSchema$Outbound,
    z.ZodTypeDef,
    GetAllPromptTemplatesResponseFormatPromptTemplatesResponse200ApplicationJSONResponseBodyJSONSchema
  > = z.object({
    name: z.string(),
    strict: z.boolean(),
    schema: z.record(z.any()),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPromptTemplatesResponseFormatPromptTemplatesResponse200ApplicationJSONResponseBodyJSONSchema$ {
  /** @deprecated use `GetAllPromptTemplatesResponseFormatPromptTemplatesResponse200ApplicationJSONResponseBodyJSONSchema$inboundSchema` instead. */
  export const inboundSchema =
    GetAllPromptTemplatesResponseFormatPromptTemplatesResponse200ApplicationJSONResponseBodyJSONSchema$inboundSchema;
  /** @deprecated use `GetAllPromptTemplatesResponseFormatPromptTemplatesResponse200ApplicationJSONResponseBodyJSONSchema$outboundSchema` instead. */
  export const outboundSchema =
    GetAllPromptTemplatesResponseFormatPromptTemplatesResponse200ApplicationJSONResponseBodyJSONSchema$outboundSchema;
  /** @deprecated use `GetAllPromptTemplatesResponseFormatPromptTemplatesResponse200ApplicationJSONResponseBodyJSONSchema$Outbound` instead. */
  export type Outbound =
    GetAllPromptTemplatesResponseFormatPromptTemplatesResponse200ApplicationJSONResponseBodyJSONSchema$Outbound;
}

export function getAllPromptTemplatesResponseFormatPromptTemplatesResponse200ApplicationJSONResponseBodyJSONSchemaToJSON(
  getAllPromptTemplatesResponseFormatPromptTemplatesResponse200ApplicationJSONResponseBodyJSONSchema:
    GetAllPromptTemplatesResponseFormatPromptTemplatesResponse200ApplicationJSONResponseBodyJSONSchema,
): string {
  return JSON.stringify(
    GetAllPromptTemplatesResponseFormatPromptTemplatesResponse200ApplicationJSONResponseBodyJSONSchema$outboundSchema
      .parse(
        getAllPromptTemplatesResponseFormatPromptTemplatesResponse200ApplicationJSONResponseBodyJSONSchema,
      ),
  );
}

export function getAllPromptTemplatesResponseFormatPromptTemplatesResponse200ApplicationJSONResponseBodyJSONSchemaFromJSON(
  jsonString: string,
): SafeParseResult<
  GetAllPromptTemplatesResponseFormatPromptTemplatesResponse200ApplicationJSONResponseBodyJSONSchema,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetAllPromptTemplatesResponseFormatPromptTemplatesResponse200ApplicationJSONResponseBodyJSONSchema$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'GetAllPromptTemplatesResponseFormatPromptTemplatesResponse200ApplicationJSONResponseBodyJSONSchema' from JSON`,
  );
}

/** @internal */
export const GetAllPromptTemplatesResponseFormatPromptTemplatesResponse200ApplicationJSONResponseBody1$inboundSchema:
  z.ZodType<
    GetAllPromptTemplatesResponseFormatPromptTemplatesResponse200ApplicationJSONResponseBody1,
    z.ZodTypeDef,
    unknown
  > = z.object({
    type:
      GetAllPromptTemplatesResponseFormatPromptTemplatesResponse200ApplicationJSONResponseBodyItems3Type$inboundSchema,
    json_schema: z.lazy(() =>
      GetAllPromptTemplatesResponseFormatPromptTemplatesResponse200ApplicationJSONResponseBodyJSONSchema$inboundSchema
    ),
  }).transform((v) => {
    return remap$(v, {
      "json_schema": "jsonSchema",
    });
  });

/** @internal */
export type GetAllPromptTemplatesResponseFormatPromptTemplatesResponse200ApplicationJSONResponseBody1$Outbound =
  {
    type: string;
    json_schema:
      GetAllPromptTemplatesResponseFormatPromptTemplatesResponse200ApplicationJSONResponseBodyJSONSchema$Outbound;
  };

/** @internal */
export const GetAllPromptTemplatesResponseFormatPromptTemplatesResponse200ApplicationJSONResponseBody1$outboundSchema:
  z.ZodType<
    GetAllPromptTemplatesResponseFormatPromptTemplatesResponse200ApplicationJSONResponseBody1$Outbound,
    z.ZodTypeDef,
    GetAllPromptTemplatesResponseFormatPromptTemplatesResponse200ApplicationJSONResponseBody1
  > = z.object({
    type:
      GetAllPromptTemplatesResponseFormatPromptTemplatesResponse200ApplicationJSONResponseBodyItems3Type$outboundSchema,
    jsonSchema: z.lazy(() =>
      GetAllPromptTemplatesResponseFormatPromptTemplatesResponse200ApplicationJSONResponseBodyJSONSchema$outboundSchema
    ),
  }).transform((v) => {
    return remap$(v, {
      jsonSchema: "json_schema",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPromptTemplatesResponseFormatPromptTemplatesResponse200ApplicationJSONResponseBody1$ {
  /** @deprecated use `GetAllPromptTemplatesResponseFormatPromptTemplatesResponse200ApplicationJSONResponseBody1$inboundSchema` instead. */
  export const inboundSchema =
    GetAllPromptTemplatesResponseFormatPromptTemplatesResponse200ApplicationJSONResponseBody1$inboundSchema;
  /** @deprecated use `GetAllPromptTemplatesResponseFormatPromptTemplatesResponse200ApplicationJSONResponseBody1$outboundSchema` instead. */
  export const outboundSchema =
    GetAllPromptTemplatesResponseFormatPromptTemplatesResponse200ApplicationJSONResponseBody1$outboundSchema;
  /** @deprecated use `GetAllPromptTemplatesResponseFormatPromptTemplatesResponse200ApplicationJSONResponseBody1$Outbound` instead. */
  export type Outbound =
    GetAllPromptTemplatesResponseFormatPromptTemplatesResponse200ApplicationJSONResponseBody1$Outbound;
}

export function getAllPromptTemplatesResponseFormatPromptTemplatesResponse200ApplicationJSONResponseBody1ToJSON(
  getAllPromptTemplatesResponseFormatPromptTemplatesResponse200ApplicationJSONResponseBody1:
    GetAllPromptTemplatesResponseFormatPromptTemplatesResponse200ApplicationJSONResponseBody1,
): string {
  return JSON.stringify(
    GetAllPromptTemplatesResponseFormatPromptTemplatesResponse200ApplicationJSONResponseBody1$outboundSchema
      .parse(
        getAllPromptTemplatesResponseFormatPromptTemplatesResponse200ApplicationJSONResponseBody1,
      ),
  );
}

export function getAllPromptTemplatesResponseFormatPromptTemplatesResponse200ApplicationJSONResponseBody1FromJSON(
  jsonString: string,
): SafeParseResult<
  GetAllPromptTemplatesResponseFormatPromptTemplatesResponse200ApplicationJSONResponseBody1,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetAllPromptTemplatesResponseFormatPromptTemplatesResponse200ApplicationJSONResponseBody1$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'GetAllPromptTemplatesResponseFormatPromptTemplatesResponse200ApplicationJSONResponseBody1' from JSON`,
  );
}

/** @internal */
export const GetAllPromptTemplatesItemsPromptTemplatesResponse200ApplicationJSONResponseFormat$inboundSchema:
  z.ZodType<
    GetAllPromptTemplatesItemsPromptTemplatesResponse200ApplicationJSONResponseFormat,
    z.ZodTypeDef,
    unknown
  > = z.union([
    z.lazy(() =>
      GetAllPromptTemplatesResponseFormatPromptTemplatesResponse200ApplicationJSONResponseBody2$inboundSchema
    ),
    z.lazy(() =>
      GetAllPromptTemplatesResponseFormatPromptTemplatesResponse200ApplicationJSONResponseBody1$inboundSchema
    ),
  ]);

/** @internal */
export type GetAllPromptTemplatesItemsPromptTemplatesResponse200ApplicationJSONResponseFormat$Outbound =
  | GetAllPromptTemplatesResponseFormatPromptTemplatesResponse200ApplicationJSONResponseBody2$Outbound
  | GetAllPromptTemplatesResponseFormatPromptTemplatesResponse200ApplicationJSONResponseBody1$Outbound;

/** @internal */
export const GetAllPromptTemplatesItemsPromptTemplatesResponse200ApplicationJSONResponseFormat$outboundSchema:
  z.ZodType<
    GetAllPromptTemplatesItemsPromptTemplatesResponse200ApplicationJSONResponseFormat$Outbound,
    z.ZodTypeDef,
    GetAllPromptTemplatesItemsPromptTemplatesResponse200ApplicationJSONResponseFormat
  > = z.union([
    z.lazy(() =>
      GetAllPromptTemplatesResponseFormatPromptTemplatesResponse200ApplicationJSONResponseBody2$outboundSchema
    ),
    z.lazy(() =>
      GetAllPromptTemplatesResponseFormatPromptTemplatesResponse200ApplicationJSONResponseBody1$outboundSchema
    ),
  ]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPromptTemplatesItemsPromptTemplatesResponse200ApplicationJSONResponseFormat$ {
  /** @deprecated use `GetAllPromptTemplatesItemsPromptTemplatesResponse200ApplicationJSONResponseFormat$inboundSchema` instead. */
  export const inboundSchema =
    GetAllPromptTemplatesItemsPromptTemplatesResponse200ApplicationJSONResponseFormat$inboundSchema;
  /** @deprecated use `GetAllPromptTemplatesItemsPromptTemplatesResponse200ApplicationJSONResponseFormat$outboundSchema` instead. */
  export const outboundSchema =
    GetAllPromptTemplatesItemsPromptTemplatesResponse200ApplicationJSONResponseFormat$outboundSchema;
  /** @deprecated use `GetAllPromptTemplatesItemsPromptTemplatesResponse200ApplicationJSONResponseFormat$Outbound` instead. */
  export type Outbound =
    GetAllPromptTemplatesItemsPromptTemplatesResponse200ApplicationJSONResponseFormat$Outbound;
}

export function getAllPromptTemplatesItemsPromptTemplatesResponse200ApplicationJSONResponseFormatToJSON(
  getAllPromptTemplatesItemsPromptTemplatesResponse200ApplicationJSONResponseFormat:
    GetAllPromptTemplatesItemsPromptTemplatesResponse200ApplicationJSONResponseFormat,
): string {
  return JSON.stringify(
    GetAllPromptTemplatesItemsPromptTemplatesResponse200ApplicationJSONResponseFormat$outboundSchema
      .parse(
        getAllPromptTemplatesItemsPromptTemplatesResponse200ApplicationJSONResponseFormat,
      ),
  );
}

export function getAllPromptTemplatesItemsPromptTemplatesResponse200ApplicationJSONResponseFormatFromJSON(
  jsonString: string,
): SafeParseResult<
  GetAllPromptTemplatesItemsPromptTemplatesResponse200ApplicationJSONResponseFormat,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetAllPromptTemplatesItemsPromptTemplatesResponse200ApplicationJSONResponseFormat$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'GetAllPromptTemplatesItemsPromptTemplatesResponse200ApplicationJSONResponseFormat' from JSON`,
  );
}

/** @internal */
export const GetAllPromptTemplatesItemsPromptTemplatesResponse200ApplicationJSONPhotoRealVersion$inboundSchema:
  z.ZodNativeEnum<
    typeof GetAllPromptTemplatesItemsPromptTemplatesResponse200ApplicationJSONPhotoRealVersion
  > = z.nativeEnum(
    GetAllPromptTemplatesItemsPromptTemplatesResponse200ApplicationJSONPhotoRealVersion,
  );

/** @internal */
export const GetAllPromptTemplatesItemsPromptTemplatesResponse200ApplicationJSONPhotoRealVersion$outboundSchema:
  z.ZodNativeEnum<
    typeof GetAllPromptTemplatesItemsPromptTemplatesResponse200ApplicationJSONPhotoRealVersion
  > =
    GetAllPromptTemplatesItemsPromptTemplatesResponse200ApplicationJSONPhotoRealVersion$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPromptTemplatesItemsPromptTemplatesResponse200ApplicationJSONPhotoRealVersion$ {
  /** @deprecated use `GetAllPromptTemplatesItemsPromptTemplatesResponse200ApplicationJSONPhotoRealVersion$inboundSchema` instead. */
  export const inboundSchema =
    GetAllPromptTemplatesItemsPromptTemplatesResponse200ApplicationJSONPhotoRealVersion$inboundSchema;
  /** @deprecated use `GetAllPromptTemplatesItemsPromptTemplatesResponse200ApplicationJSONPhotoRealVersion$outboundSchema` instead. */
  export const outboundSchema =
    GetAllPromptTemplatesItemsPromptTemplatesResponse200ApplicationJSONPhotoRealVersion$outboundSchema;
}

/** @internal */
export const GetAllPromptTemplatesItemsPromptTemplatesResponse200ApplicationJSONEncodingFormat$inboundSchema:
  z.ZodNativeEnum<
    typeof GetAllPromptTemplatesItemsPromptTemplatesResponse200ApplicationJSONEncodingFormat
  > = z.nativeEnum(
    GetAllPromptTemplatesItemsPromptTemplatesResponse200ApplicationJSONEncodingFormat,
  );

/** @internal */
export const GetAllPromptTemplatesItemsPromptTemplatesResponse200ApplicationJSONEncodingFormat$outboundSchema:
  z.ZodNativeEnum<
    typeof GetAllPromptTemplatesItemsPromptTemplatesResponse200ApplicationJSONEncodingFormat
  > =
    GetAllPromptTemplatesItemsPromptTemplatesResponse200ApplicationJSONEncodingFormat$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPromptTemplatesItemsPromptTemplatesResponse200ApplicationJSONEncodingFormat$ {
  /** @deprecated use `GetAllPromptTemplatesItemsPromptTemplatesResponse200ApplicationJSONEncodingFormat$inboundSchema` instead. */
  export const inboundSchema =
    GetAllPromptTemplatesItemsPromptTemplatesResponse200ApplicationJSONEncodingFormat$inboundSchema;
  /** @deprecated use `GetAllPromptTemplatesItemsPromptTemplatesResponse200ApplicationJSONEncodingFormat$outboundSchema` instead. */
  export const outboundSchema =
    GetAllPromptTemplatesItemsPromptTemplatesResponse200ApplicationJSONEncodingFormat$outboundSchema;
}

/** @internal */
export const GetAllPromptTemplatesItemsPromptTemplatesResponse200ApplicationJSONModelParameters$inboundSchema:
  z.ZodType<
    GetAllPromptTemplatesItemsPromptTemplatesResponse200ApplicationJSONModelParameters,
    z.ZodTypeDef,
    unknown
  > = z.object({
    temperature: z.number().optional(),
    maxTokens: z.number().optional(),
    topK: z.number().optional(),
    topP: z.number().optional(),
    frequencyPenalty: z.number().optional(),
    presencePenalty: z.number().optional(),
    numImages: z.number().optional(),
    seed: z.number().optional(),
    format:
      GetAllPromptTemplatesItemsPromptTemplatesResponse200ApplicationJSONResponseBodyFormat$inboundSchema
        .optional(),
    dimensions: z.string().optional(),
    quality:
      GetAllPromptTemplatesItemsPromptTemplatesResponse200ApplicationJSONQuality$inboundSchema
        .optional(),
    style: z.string().optional(),
    responseFormat: z.nullable(
      z.union([
        z.lazy(() =>
          GetAllPromptTemplatesResponseFormatPromptTemplatesResponse200ApplicationJSONResponseBody2$inboundSchema
        ),
        z.lazy(() =>
          GetAllPromptTemplatesResponseFormatPromptTemplatesResponse200ApplicationJSONResponseBody1$inboundSchema
        ),
      ]),
    ).optional(),
    photoRealVersion:
      GetAllPromptTemplatesItemsPromptTemplatesResponse200ApplicationJSONPhotoRealVersion$inboundSchema
        .optional(),
    encoding_format:
      GetAllPromptTemplatesItemsPromptTemplatesResponse200ApplicationJSONEncodingFormat$inboundSchema
        .optional(),
  }).transform((v) => {
    return remap$(v, {
      "encoding_format": "encodingFormat",
    });
  });

/** @internal */
export type GetAllPromptTemplatesItemsPromptTemplatesResponse200ApplicationJSONModelParameters$Outbound =
  {
    temperature?: number | undefined;
    maxTokens?: number | undefined;
    topK?: number | undefined;
    topP?: number | undefined;
    frequencyPenalty?: number | undefined;
    presencePenalty?: number | undefined;
    numImages?: number | undefined;
    seed?: number | undefined;
    format?: string | undefined;
    dimensions?: string | undefined;
    quality?: string | undefined;
    style?: string | undefined;
    responseFormat?:
      | GetAllPromptTemplatesResponseFormatPromptTemplatesResponse200ApplicationJSONResponseBody2$Outbound
      | GetAllPromptTemplatesResponseFormatPromptTemplatesResponse200ApplicationJSONResponseBody1$Outbound
      | null
      | undefined;
    photoRealVersion?: string | undefined;
    encoding_format?: string | undefined;
  };

/** @internal */
export const GetAllPromptTemplatesItemsPromptTemplatesResponse200ApplicationJSONModelParameters$outboundSchema:
  z.ZodType<
    GetAllPromptTemplatesItemsPromptTemplatesResponse200ApplicationJSONModelParameters$Outbound,
    z.ZodTypeDef,
    GetAllPromptTemplatesItemsPromptTemplatesResponse200ApplicationJSONModelParameters
  > = z.object({
    temperature: z.number().optional(),
    maxTokens: z.number().optional(),
    topK: z.number().optional(),
    topP: z.number().optional(),
    frequencyPenalty: z.number().optional(),
    presencePenalty: z.number().optional(),
    numImages: z.number().optional(),
    seed: z.number().optional(),
    format:
      GetAllPromptTemplatesItemsPromptTemplatesResponse200ApplicationJSONResponseBodyFormat$outboundSchema
        .optional(),
    dimensions: z.string().optional(),
    quality:
      GetAllPromptTemplatesItemsPromptTemplatesResponse200ApplicationJSONQuality$outboundSchema
        .optional(),
    style: z.string().optional(),
    responseFormat: z.nullable(
      z.union([
        z.lazy(() =>
          GetAllPromptTemplatesResponseFormatPromptTemplatesResponse200ApplicationJSONResponseBody2$outboundSchema
        ),
        z.lazy(() =>
          GetAllPromptTemplatesResponseFormatPromptTemplatesResponse200ApplicationJSONResponseBody1$outboundSchema
        ),
      ]),
    ).optional(),
    photoRealVersion:
      GetAllPromptTemplatesItemsPromptTemplatesResponse200ApplicationJSONPhotoRealVersion$outboundSchema
        .optional(),
    encodingFormat:
      GetAllPromptTemplatesItemsPromptTemplatesResponse200ApplicationJSONEncodingFormat$outboundSchema
        .optional(),
  }).transform((v) => {
    return remap$(v, {
      encodingFormat: "encoding_format",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPromptTemplatesItemsPromptTemplatesResponse200ApplicationJSONModelParameters$ {
  /** @deprecated use `GetAllPromptTemplatesItemsPromptTemplatesResponse200ApplicationJSONModelParameters$inboundSchema` instead. */
  export const inboundSchema =
    GetAllPromptTemplatesItemsPromptTemplatesResponse200ApplicationJSONModelParameters$inboundSchema;
  /** @deprecated use `GetAllPromptTemplatesItemsPromptTemplatesResponse200ApplicationJSONModelParameters$outboundSchema` instead. */
  export const outboundSchema =
    GetAllPromptTemplatesItemsPromptTemplatesResponse200ApplicationJSONModelParameters$outboundSchema;
  /** @deprecated use `GetAllPromptTemplatesItemsPromptTemplatesResponse200ApplicationJSONModelParameters$Outbound` instead. */
  export type Outbound =
    GetAllPromptTemplatesItemsPromptTemplatesResponse200ApplicationJSONModelParameters$Outbound;
}

export function getAllPromptTemplatesItemsPromptTemplatesResponse200ApplicationJSONModelParametersToJSON(
  getAllPromptTemplatesItemsPromptTemplatesResponse200ApplicationJSONModelParameters:
    GetAllPromptTemplatesItemsPromptTemplatesResponse200ApplicationJSONModelParameters,
): string {
  return JSON.stringify(
    GetAllPromptTemplatesItemsPromptTemplatesResponse200ApplicationJSONModelParameters$outboundSchema
      .parse(
        getAllPromptTemplatesItemsPromptTemplatesResponse200ApplicationJSONModelParameters,
      ),
  );
}

export function getAllPromptTemplatesItemsPromptTemplatesResponse200ApplicationJSONModelParametersFromJSON(
  jsonString: string,
): SafeParseResult<
  GetAllPromptTemplatesItemsPromptTemplatesResponse200ApplicationJSONModelParameters,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetAllPromptTemplatesItemsPromptTemplatesResponse200ApplicationJSONModelParameters$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'GetAllPromptTemplatesItemsPromptTemplatesResponse200ApplicationJSONModelParameters' from JSON`,
  );
}

/** @internal */
export const GetAllPromptTemplatesItemsPromptTemplatesResponse200ApplicationJSONProvider$inboundSchema:
  z.ZodNativeEnum<
    typeof GetAllPromptTemplatesItemsPromptTemplatesResponse200ApplicationJSONProvider
  > = z.nativeEnum(
    GetAllPromptTemplatesItemsPromptTemplatesResponse200ApplicationJSONProvider,
  );

/** @internal */
export const GetAllPromptTemplatesItemsPromptTemplatesResponse200ApplicationJSONProvider$outboundSchema:
  z.ZodNativeEnum<
    typeof GetAllPromptTemplatesItemsPromptTemplatesResponse200ApplicationJSONProvider
  > =
    GetAllPromptTemplatesItemsPromptTemplatesResponse200ApplicationJSONProvider$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPromptTemplatesItemsPromptTemplatesResponse200ApplicationJSONProvider$ {
  /** @deprecated use `GetAllPromptTemplatesItemsPromptTemplatesResponse200ApplicationJSONProvider$inboundSchema` instead. */
  export const inboundSchema =
    GetAllPromptTemplatesItemsPromptTemplatesResponse200ApplicationJSONProvider$inboundSchema;
  /** @deprecated use `GetAllPromptTemplatesItemsPromptTemplatesResponse200ApplicationJSONProvider$outboundSchema` instead. */
  export const outboundSchema =
    GetAllPromptTemplatesItemsPromptTemplatesResponse200ApplicationJSONProvider$outboundSchema;
}

/** @internal */
export const GetAllPromptTemplatesItemsPromptTemplatesResponse200ApplicationJSONRole$inboundSchema:
  z.ZodNativeEnum<
    typeof GetAllPromptTemplatesItemsPromptTemplatesResponse200ApplicationJSONRole
  > = z.nativeEnum(
    GetAllPromptTemplatesItemsPromptTemplatesResponse200ApplicationJSONRole,
  );

/** @internal */
export const GetAllPromptTemplatesItemsPromptTemplatesResponse200ApplicationJSONRole$outboundSchema:
  z.ZodNativeEnum<
    typeof GetAllPromptTemplatesItemsPromptTemplatesResponse200ApplicationJSONRole
  > =
    GetAllPromptTemplatesItemsPromptTemplatesResponse200ApplicationJSONRole$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPromptTemplatesItemsPromptTemplatesResponse200ApplicationJSONRole$ {
  /** @deprecated use `GetAllPromptTemplatesItemsPromptTemplatesResponse200ApplicationJSONRole$inboundSchema` instead. */
  export const inboundSchema =
    GetAllPromptTemplatesItemsPromptTemplatesResponse200ApplicationJSONRole$inboundSchema;
  /** @deprecated use `GetAllPromptTemplatesItemsPromptTemplatesResponse200ApplicationJSONRole$outboundSchema` instead. */
  export const outboundSchema =
    GetAllPromptTemplatesItemsPromptTemplatesResponse200ApplicationJSONRole$outboundSchema;
}

/** @internal */
export const GetAllPromptTemplates2PromptTemplatesResponse200ApplicationJSONResponseBodyItems3VersionsType$inboundSchema:
  z.ZodNativeEnum<
    typeof GetAllPromptTemplates2PromptTemplatesResponse200ApplicationJSONResponseBodyItems3VersionsType
  > = z.nativeEnum(
    GetAllPromptTemplates2PromptTemplatesResponse200ApplicationJSONResponseBodyItems3VersionsType,
  );

/** @internal */
export const GetAllPromptTemplates2PromptTemplatesResponse200ApplicationJSONResponseBodyItems3VersionsType$outboundSchema:
  z.ZodNativeEnum<
    typeof GetAllPromptTemplates2PromptTemplatesResponse200ApplicationJSONResponseBodyItems3VersionsType
  > =
    GetAllPromptTemplates2PromptTemplatesResponse200ApplicationJSONResponseBodyItems3VersionsType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPromptTemplates2PromptTemplatesResponse200ApplicationJSONResponseBodyItems3VersionsType$ {
  /** @deprecated use `GetAllPromptTemplates2PromptTemplatesResponse200ApplicationJSONResponseBodyItems3VersionsType$inboundSchema` instead. */
  export const inboundSchema =
    GetAllPromptTemplates2PromptTemplatesResponse200ApplicationJSONResponseBodyItems3VersionsType$inboundSchema;
  /** @deprecated use `GetAllPromptTemplates2PromptTemplatesResponse200ApplicationJSONResponseBodyItems3VersionsType$outboundSchema` instead. */
  export const outboundSchema =
    GetAllPromptTemplates2PromptTemplatesResponse200ApplicationJSONResponseBodyItems3VersionsType$outboundSchema;
}

/** @internal */
export const GetAllPromptTemplates2PromptTemplatesResponse200ApplicationJSONResponseBodyImageUrl$inboundSchema:
  z.ZodType<
    GetAllPromptTemplates2PromptTemplatesResponse200ApplicationJSONResponseBodyImageUrl,
    z.ZodTypeDef,
    unknown
  > = z.object({
    id: z.string().optional(),
    url: z.string(),
    detail: z.string().optional(),
  });

/** @internal */
export type GetAllPromptTemplates2PromptTemplatesResponse200ApplicationJSONResponseBodyImageUrl$Outbound =
  {
    id?: string | undefined;
    url: string;
    detail?: string | undefined;
  };

/** @internal */
export const GetAllPromptTemplates2PromptTemplatesResponse200ApplicationJSONResponseBodyImageUrl$outboundSchema:
  z.ZodType<
    GetAllPromptTemplates2PromptTemplatesResponse200ApplicationJSONResponseBodyImageUrl$Outbound,
    z.ZodTypeDef,
    GetAllPromptTemplates2PromptTemplatesResponse200ApplicationJSONResponseBodyImageUrl
  > = z.object({
    id: z.string().optional(),
    url: z.string(),
    detail: z.string().optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPromptTemplates2PromptTemplatesResponse200ApplicationJSONResponseBodyImageUrl$ {
  /** @deprecated use `GetAllPromptTemplates2PromptTemplatesResponse200ApplicationJSONResponseBodyImageUrl$inboundSchema` instead. */
  export const inboundSchema =
    GetAllPromptTemplates2PromptTemplatesResponse200ApplicationJSONResponseBodyImageUrl$inboundSchema;
  /** @deprecated use `GetAllPromptTemplates2PromptTemplatesResponse200ApplicationJSONResponseBodyImageUrl$outboundSchema` instead. */
  export const outboundSchema =
    GetAllPromptTemplates2PromptTemplatesResponse200ApplicationJSONResponseBodyImageUrl$outboundSchema;
  /** @deprecated use `GetAllPromptTemplates2PromptTemplatesResponse200ApplicationJSONResponseBodyImageUrl$Outbound` instead. */
  export type Outbound =
    GetAllPromptTemplates2PromptTemplatesResponse200ApplicationJSONResponseBodyImageUrl$Outbound;
}

export function getAllPromptTemplates2PromptTemplatesResponse200ApplicationJSONResponseBodyImageUrlToJSON(
  getAllPromptTemplates2PromptTemplatesResponse200ApplicationJSONResponseBodyImageUrl:
    GetAllPromptTemplates2PromptTemplatesResponse200ApplicationJSONResponseBodyImageUrl,
): string {
  return JSON.stringify(
    GetAllPromptTemplates2PromptTemplatesResponse200ApplicationJSONResponseBodyImageUrl$outboundSchema
      .parse(
        getAllPromptTemplates2PromptTemplatesResponse200ApplicationJSONResponseBodyImageUrl,
      ),
  );
}

export function getAllPromptTemplates2PromptTemplatesResponse200ApplicationJSONResponseBodyImageUrlFromJSON(
  jsonString: string,
): SafeParseResult<
  GetAllPromptTemplates2PromptTemplatesResponse200ApplicationJSONResponseBodyImageUrl,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetAllPromptTemplates2PromptTemplatesResponse200ApplicationJSONResponseBodyImageUrl$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'GetAllPromptTemplates2PromptTemplatesResponse200ApplicationJSONResponseBodyImageUrl' from JSON`,
  );
}

/** @internal */
export const GetAllPromptTemplates2PromptTemplatesResponse200ApplicationJSONResponseBody2$inboundSchema:
  z.ZodType<
    GetAllPromptTemplates2PromptTemplatesResponse200ApplicationJSONResponseBody2,
    z.ZodTypeDef,
    unknown
  > = z.object({
    type:
      GetAllPromptTemplates2PromptTemplatesResponse200ApplicationJSONResponseBodyItems3VersionsType$inboundSchema,
    image_url: z.lazy(() =>
      GetAllPromptTemplates2PromptTemplatesResponse200ApplicationJSONResponseBodyImageUrl$inboundSchema
    ),
  }).transform((v) => {
    return remap$(v, {
      "image_url": "imageUrl",
    });
  });

/** @internal */
export type GetAllPromptTemplates2PromptTemplatesResponse200ApplicationJSONResponseBody2$Outbound =
  {
    type: string;
    image_url:
      GetAllPromptTemplates2PromptTemplatesResponse200ApplicationJSONResponseBodyImageUrl$Outbound;
  };

/** @internal */
export const GetAllPromptTemplates2PromptTemplatesResponse200ApplicationJSONResponseBody2$outboundSchema:
  z.ZodType<
    GetAllPromptTemplates2PromptTemplatesResponse200ApplicationJSONResponseBody2$Outbound,
    z.ZodTypeDef,
    GetAllPromptTemplates2PromptTemplatesResponse200ApplicationJSONResponseBody2
  > = z.object({
    type:
      GetAllPromptTemplates2PromptTemplatesResponse200ApplicationJSONResponseBodyItems3VersionsType$outboundSchema,
    imageUrl: z.lazy(() =>
      GetAllPromptTemplates2PromptTemplatesResponse200ApplicationJSONResponseBodyImageUrl$outboundSchema
    ),
  }).transform((v) => {
    return remap$(v, {
      imageUrl: "image_url",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPromptTemplates2PromptTemplatesResponse200ApplicationJSONResponseBody2$ {
  /** @deprecated use `GetAllPromptTemplates2PromptTemplatesResponse200ApplicationJSONResponseBody2$inboundSchema` instead. */
  export const inboundSchema =
    GetAllPromptTemplates2PromptTemplatesResponse200ApplicationJSONResponseBody2$inboundSchema;
  /** @deprecated use `GetAllPromptTemplates2PromptTemplatesResponse200ApplicationJSONResponseBody2$outboundSchema` instead. */
  export const outboundSchema =
    GetAllPromptTemplates2PromptTemplatesResponse200ApplicationJSONResponseBody2$outboundSchema;
  /** @deprecated use `GetAllPromptTemplates2PromptTemplatesResponse200ApplicationJSONResponseBody2$Outbound` instead. */
  export type Outbound =
    GetAllPromptTemplates2PromptTemplatesResponse200ApplicationJSONResponseBody2$Outbound;
}

export function getAllPromptTemplates2PromptTemplatesResponse200ApplicationJSONResponseBody2ToJSON(
  getAllPromptTemplates2PromptTemplatesResponse200ApplicationJSONResponseBody2:
    GetAllPromptTemplates2PromptTemplatesResponse200ApplicationJSONResponseBody2,
): string {
  return JSON.stringify(
    GetAllPromptTemplates2PromptTemplatesResponse200ApplicationJSONResponseBody2$outboundSchema
      .parse(
        getAllPromptTemplates2PromptTemplatesResponse200ApplicationJSONResponseBody2,
      ),
  );
}

export function getAllPromptTemplates2PromptTemplatesResponse200ApplicationJSONResponseBody2FromJSON(
  jsonString: string,
): SafeParseResult<
  GetAllPromptTemplates2PromptTemplatesResponse200ApplicationJSONResponseBody2,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetAllPromptTemplates2PromptTemplatesResponse200ApplicationJSONResponseBody2$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'GetAllPromptTemplates2PromptTemplatesResponse200ApplicationJSONResponseBody2' from JSON`,
  );
}

/** @internal */
export const GetAllPromptTemplates2PromptTemplatesResponse200ApplicationJSONResponseBodyItems3Type$inboundSchema:
  z.ZodNativeEnum<
    typeof GetAllPromptTemplates2PromptTemplatesResponse200ApplicationJSONResponseBodyItems3Type
  > = z.nativeEnum(
    GetAllPromptTemplates2PromptTemplatesResponse200ApplicationJSONResponseBodyItems3Type,
  );

/** @internal */
export const GetAllPromptTemplates2PromptTemplatesResponse200ApplicationJSONResponseBodyItems3Type$outboundSchema:
  z.ZodNativeEnum<
    typeof GetAllPromptTemplates2PromptTemplatesResponse200ApplicationJSONResponseBodyItems3Type
  > =
    GetAllPromptTemplates2PromptTemplatesResponse200ApplicationJSONResponseBodyItems3Type$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPromptTemplates2PromptTemplatesResponse200ApplicationJSONResponseBodyItems3Type$ {
  /** @deprecated use `GetAllPromptTemplates2PromptTemplatesResponse200ApplicationJSONResponseBodyItems3Type$inboundSchema` instead. */
  export const inboundSchema =
    GetAllPromptTemplates2PromptTemplatesResponse200ApplicationJSONResponseBodyItems3Type$inboundSchema;
  /** @deprecated use `GetAllPromptTemplates2PromptTemplatesResponse200ApplicationJSONResponseBodyItems3Type$outboundSchema` instead. */
  export const outboundSchema =
    GetAllPromptTemplates2PromptTemplatesResponse200ApplicationJSONResponseBodyItems3Type$outboundSchema;
}

/** @internal */
export const GetAllPromptTemplates2PromptTemplatesResponse200ApplicationJSONResponseBody1$inboundSchema:
  z.ZodType<
    GetAllPromptTemplates2PromptTemplatesResponse200ApplicationJSONResponseBody1,
    z.ZodTypeDef,
    unknown
  > = z.object({
    type:
      GetAllPromptTemplates2PromptTemplatesResponse200ApplicationJSONResponseBodyItems3Type$inboundSchema,
    text: z.string(),
  });

/** @internal */
export type GetAllPromptTemplates2PromptTemplatesResponse200ApplicationJSONResponseBody1$Outbound =
  {
    type: string;
    text: string;
  };

/** @internal */
export const GetAllPromptTemplates2PromptTemplatesResponse200ApplicationJSONResponseBody1$outboundSchema:
  z.ZodType<
    GetAllPromptTemplates2PromptTemplatesResponse200ApplicationJSONResponseBody1$Outbound,
    z.ZodTypeDef,
    GetAllPromptTemplates2PromptTemplatesResponse200ApplicationJSONResponseBody1
  > = z.object({
    type:
      GetAllPromptTemplates2PromptTemplatesResponse200ApplicationJSONResponseBodyItems3Type$outboundSchema,
    text: z.string(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPromptTemplates2PromptTemplatesResponse200ApplicationJSONResponseBody1$ {
  /** @deprecated use `GetAllPromptTemplates2PromptTemplatesResponse200ApplicationJSONResponseBody1$inboundSchema` instead. */
  export const inboundSchema =
    GetAllPromptTemplates2PromptTemplatesResponse200ApplicationJSONResponseBody1$inboundSchema;
  /** @deprecated use `GetAllPromptTemplates2PromptTemplatesResponse200ApplicationJSONResponseBody1$outboundSchema` instead. */
  export const outboundSchema =
    GetAllPromptTemplates2PromptTemplatesResponse200ApplicationJSONResponseBody1$outboundSchema;
  /** @deprecated use `GetAllPromptTemplates2PromptTemplatesResponse200ApplicationJSONResponseBody1$Outbound` instead. */
  export type Outbound =
    GetAllPromptTemplates2PromptTemplatesResponse200ApplicationJSONResponseBody1$Outbound;
}

export function getAllPromptTemplates2PromptTemplatesResponse200ApplicationJSONResponseBody1ToJSON(
  getAllPromptTemplates2PromptTemplatesResponse200ApplicationJSONResponseBody1:
    GetAllPromptTemplates2PromptTemplatesResponse200ApplicationJSONResponseBody1,
): string {
  return JSON.stringify(
    GetAllPromptTemplates2PromptTemplatesResponse200ApplicationJSONResponseBody1$outboundSchema
      .parse(
        getAllPromptTemplates2PromptTemplatesResponse200ApplicationJSONResponseBody1,
      ),
  );
}

export function getAllPromptTemplates2PromptTemplatesResponse200ApplicationJSONResponseBody1FromJSON(
  jsonString: string,
): SafeParseResult<
  GetAllPromptTemplates2PromptTemplatesResponse200ApplicationJSONResponseBody1,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetAllPromptTemplates2PromptTemplatesResponse200ApplicationJSONResponseBody1$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'GetAllPromptTemplates2PromptTemplatesResponse200ApplicationJSONResponseBody1' from JSON`,
  );
}

/** @internal */
export const GetAllPromptTemplatesContentPromptTemplatesResponse200ApplicationJSONResponseBody2$inboundSchema:
  z.ZodType<
    GetAllPromptTemplatesContentPromptTemplatesResponse200ApplicationJSONResponseBody2,
    z.ZodTypeDef,
    unknown
  > = z.union([
    z.lazy(() =>
      GetAllPromptTemplates2PromptTemplatesResponse200ApplicationJSONResponseBody1$inboundSchema
    ),
    z.lazy(() =>
      GetAllPromptTemplates2PromptTemplatesResponse200ApplicationJSONResponseBody2$inboundSchema
    ),
  ]);

/** @internal */
export type GetAllPromptTemplatesContentPromptTemplatesResponse200ApplicationJSONResponseBody2$Outbound =
  | GetAllPromptTemplates2PromptTemplatesResponse200ApplicationJSONResponseBody1$Outbound
  | GetAllPromptTemplates2PromptTemplatesResponse200ApplicationJSONResponseBody2$Outbound;

/** @internal */
export const GetAllPromptTemplatesContentPromptTemplatesResponse200ApplicationJSONResponseBody2$outboundSchema:
  z.ZodType<
    GetAllPromptTemplatesContentPromptTemplatesResponse200ApplicationJSONResponseBody2$Outbound,
    z.ZodTypeDef,
    GetAllPromptTemplatesContentPromptTemplatesResponse200ApplicationJSONResponseBody2
  > = z.union([
    z.lazy(() =>
      GetAllPromptTemplates2PromptTemplatesResponse200ApplicationJSONResponseBody1$outboundSchema
    ),
    z.lazy(() =>
      GetAllPromptTemplates2PromptTemplatesResponse200ApplicationJSONResponseBody2$outboundSchema
    ),
  ]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPromptTemplatesContentPromptTemplatesResponse200ApplicationJSONResponseBody2$ {
  /** @deprecated use `GetAllPromptTemplatesContentPromptTemplatesResponse200ApplicationJSONResponseBody2$inboundSchema` instead. */
  export const inboundSchema =
    GetAllPromptTemplatesContentPromptTemplatesResponse200ApplicationJSONResponseBody2$inboundSchema;
  /** @deprecated use `GetAllPromptTemplatesContentPromptTemplatesResponse200ApplicationJSONResponseBody2$outboundSchema` instead. */
  export const outboundSchema =
    GetAllPromptTemplatesContentPromptTemplatesResponse200ApplicationJSONResponseBody2$outboundSchema;
  /** @deprecated use `GetAllPromptTemplatesContentPromptTemplatesResponse200ApplicationJSONResponseBody2$Outbound` instead. */
  export type Outbound =
    GetAllPromptTemplatesContentPromptTemplatesResponse200ApplicationJSONResponseBody2$Outbound;
}

export function getAllPromptTemplatesContentPromptTemplatesResponse200ApplicationJSONResponseBody2ToJSON(
  getAllPromptTemplatesContentPromptTemplatesResponse200ApplicationJSONResponseBody2:
    GetAllPromptTemplatesContentPromptTemplatesResponse200ApplicationJSONResponseBody2,
): string {
  return JSON.stringify(
    GetAllPromptTemplatesContentPromptTemplatesResponse200ApplicationJSONResponseBody2$outboundSchema
      .parse(
        getAllPromptTemplatesContentPromptTemplatesResponse200ApplicationJSONResponseBody2,
      ),
  );
}

export function getAllPromptTemplatesContentPromptTemplatesResponse200ApplicationJSONResponseBody2FromJSON(
  jsonString: string,
): SafeParseResult<
  GetAllPromptTemplatesContentPromptTemplatesResponse200ApplicationJSONResponseBody2,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetAllPromptTemplatesContentPromptTemplatesResponse200ApplicationJSONResponseBody2$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'GetAllPromptTemplatesContentPromptTemplatesResponse200ApplicationJSONResponseBody2' from JSON`,
  );
}

/** @internal */
export const GetAllPromptTemplatesItemsPromptTemplatesResponse200ApplicationJSONContent$inboundSchema:
  z.ZodType<
    GetAllPromptTemplatesItemsPromptTemplatesResponse200ApplicationJSONContent,
    z.ZodTypeDef,
    unknown
  > = z.union([
    z.string(),
    z.array(z.union([
      z.lazy(() =>
        GetAllPromptTemplates2PromptTemplatesResponse200ApplicationJSONResponseBody1$inboundSchema
      ),
      z.lazy(() =>
        GetAllPromptTemplates2PromptTemplatesResponse200ApplicationJSONResponseBody2$inboundSchema
      ),
    ])),
  ]);

/** @internal */
export type GetAllPromptTemplatesItemsPromptTemplatesResponse200ApplicationJSONContent$Outbound =
  | string
  | Array<
    | GetAllPromptTemplates2PromptTemplatesResponse200ApplicationJSONResponseBody1$Outbound
    | GetAllPromptTemplates2PromptTemplatesResponse200ApplicationJSONResponseBody2$Outbound
  >;

/** @internal */
export const GetAllPromptTemplatesItemsPromptTemplatesResponse200ApplicationJSONContent$outboundSchema:
  z.ZodType<
    GetAllPromptTemplatesItemsPromptTemplatesResponse200ApplicationJSONContent$Outbound,
    z.ZodTypeDef,
    GetAllPromptTemplatesItemsPromptTemplatesResponse200ApplicationJSONContent
  > = z.union([
    z.string(),
    z.array(z.union([
      z.lazy(() =>
        GetAllPromptTemplates2PromptTemplatesResponse200ApplicationJSONResponseBody1$outboundSchema
      ),
      z.lazy(() =>
        GetAllPromptTemplates2PromptTemplatesResponse200ApplicationJSONResponseBody2$outboundSchema
      ),
    ])),
  ]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPromptTemplatesItemsPromptTemplatesResponse200ApplicationJSONContent$ {
  /** @deprecated use `GetAllPromptTemplatesItemsPromptTemplatesResponse200ApplicationJSONContent$inboundSchema` instead. */
  export const inboundSchema =
    GetAllPromptTemplatesItemsPromptTemplatesResponse200ApplicationJSONContent$inboundSchema;
  /** @deprecated use `GetAllPromptTemplatesItemsPromptTemplatesResponse200ApplicationJSONContent$outboundSchema` instead. */
  export const outboundSchema =
    GetAllPromptTemplatesItemsPromptTemplatesResponse200ApplicationJSONContent$outboundSchema;
  /** @deprecated use `GetAllPromptTemplatesItemsPromptTemplatesResponse200ApplicationJSONContent$Outbound` instead. */
  export type Outbound =
    GetAllPromptTemplatesItemsPromptTemplatesResponse200ApplicationJSONContent$Outbound;
}

export function getAllPromptTemplatesItemsPromptTemplatesResponse200ApplicationJSONContentToJSON(
  getAllPromptTemplatesItemsPromptTemplatesResponse200ApplicationJSONContent:
    GetAllPromptTemplatesItemsPromptTemplatesResponse200ApplicationJSONContent,
): string {
  return JSON.stringify(
    GetAllPromptTemplatesItemsPromptTemplatesResponse200ApplicationJSONContent$outboundSchema
      .parse(
        getAllPromptTemplatesItemsPromptTemplatesResponse200ApplicationJSONContent,
      ),
  );
}

export function getAllPromptTemplatesItemsPromptTemplatesResponse200ApplicationJSONContentFromJSON(
  jsonString: string,
): SafeParseResult<
  GetAllPromptTemplatesItemsPromptTemplatesResponse200ApplicationJSONContent,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetAllPromptTemplatesItemsPromptTemplatesResponse200ApplicationJSONContent$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'GetAllPromptTemplatesItemsPromptTemplatesResponse200ApplicationJSONContent' from JSON`,
  );
}

/** @internal */
export const GetAllPromptTemplatesItemsPromptTemplatesResponse200ApplicationJSONResponseBody3Type$inboundSchema:
  z.ZodNativeEnum<
    typeof GetAllPromptTemplatesItemsPromptTemplatesResponse200ApplicationJSONResponseBody3Type
  > = z.nativeEnum(
    GetAllPromptTemplatesItemsPromptTemplatesResponse200ApplicationJSONResponseBody3Type,
  );

/** @internal */
export const GetAllPromptTemplatesItemsPromptTemplatesResponse200ApplicationJSONResponseBody3Type$outboundSchema:
  z.ZodNativeEnum<
    typeof GetAllPromptTemplatesItemsPromptTemplatesResponse200ApplicationJSONResponseBody3Type
  > =
    GetAllPromptTemplatesItemsPromptTemplatesResponse200ApplicationJSONResponseBody3Type$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPromptTemplatesItemsPromptTemplatesResponse200ApplicationJSONResponseBody3Type$ {
  /** @deprecated use `GetAllPromptTemplatesItemsPromptTemplatesResponse200ApplicationJSONResponseBody3Type$inboundSchema` instead. */
  export const inboundSchema =
    GetAllPromptTemplatesItemsPromptTemplatesResponse200ApplicationJSONResponseBody3Type$inboundSchema;
  /** @deprecated use `GetAllPromptTemplatesItemsPromptTemplatesResponse200ApplicationJSONResponseBody3Type$outboundSchema` instead. */
  export const outboundSchema =
    GetAllPromptTemplatesItemsPromptTemplatesResponse200ApplicationJSONResponseBody3Type$outboundSchema;
}

/** @internal */
export const GetAllPromptTemplatesItemsPromptTemplatesResponse200ApplicationJSONFunction$inboundSchema:
  z.ZodType<
    GetAllPromptTemplatesItemsPromptTemplatesResponse200ApplicationJSONFunction,
    z.ZodTypeDef,
    unknown
  > = z.object({
    name: z.string(),
    arguments: z.string(),
  });

/** @internal */
export type GetAllPromptTemplatesItemsPromptTemplatesResponse200ApplicationJSONFunction$Outbound =
  {
    name: string;
    arguments: string;
  };

/** @internal */
export const GetAllPromptTemplatesItemsPromptTemplatesResponse200ApplicationJSONFunction$outboundSchema:
  z.ZodType<
    GetAllPromptTemplatesItemsPromptTemplatesResponse200ApplicationJSONFunction$Outbound,
    z.ZodTypeDef,
    GetAllPromptTemplatesItemsPromptTemplatesResponse200ApplicationJSONFunction
  > = z.object({
    name: z.string(),
    arguments: z.string(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPromptTemplatesItemsPromptTemplatesResponse200ApplicationJSONFunction$ {
  /** @deprecated use `GetAllPromptTemplatesItemsPromptTemplatesResponse200ApplicationJSONFunction$inboundSchema` instead. */
  export const inboundSchema =
    GetAllPromptTemplatesItemsPromptTemplatesResponse200ApplicationJSONFunction$inboundSchema;
  /** @deprecated use `GetAllPromptTemplatesItemsPromptTemplatesResponse200ApplicationJSONFunction$outboundSchema` instead. */
  export const outboundSchema =
    GetAllPromptTemplatesItemsPromptTemplatesResponse200ApplicationJSONFunction$outboundSchema;
  /** @deprecated use `GetAllPromptTemplatesItemsPromptTemplatesResponse200ApplicationJSONFunction$Outbound` instead. */
  export type Outbound =
    GetAllPromptTemplatesItemsPromptTemplatesResponse200ApplicationJSONFunction$Outbound;
}

export function getAllPromptTemplatesItemsPromptTemplatesResponse200ApplicationJSONFunctionToJSON(
  getAllPromptTemplatesItemsPromptTemplatesResponse200ApplicationJSONFunction:
    GetAllPromptTemplatesItemsPromptTemplatesResponse200ApplicationJSONFunction,
): string {
  return JSON.stringify(
    GetAllPromptTemplatesItemsPromptTemplatesResponse200ApplicationJSONFunction$outboundSchema
      .parse(
        getAllPromptTemplatesItemsPromptTemplatesResponse200ApplicationJSONFunction,
      ),
  );
}

export function getAllPromptTemplatesItemsPromptTemplatesResponse200ApplicationJSONFunctionFromJSON(
  jsonString: string,
): SafeParseResult<
  GetAllPromptTemplatesItemsPromptTemplatesResponse200ApplicationJSONFunction,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetAllPromptTemplatesItemsPromptTemplatesResponse200ApplicationJSONFunction$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'GetAllPromptTemplatesItemsPromptTemplatesResponse200ApplicationJSONFunction' from JSON`,
  );
}

/** @internal */
export const GetAllPromptTemplatesItemsPromptTemplatesResponse200ApplicationJSONToolCalls$inboundSchema:
  z.ZodType<
    GetAllPromptTemplatesItemsPromptTemplatesResponse200ApplicationJSONToolCalls,
    z.ZodTypeDef,
    unknown
  > = z.object({
    id: z.string().optional(),
    index: z.number().optional(),
    type:
      GetAllPromptTemplatesItemsPromptTemplatesResponse200ApplicationJSONResponseBody3Type$inboundSchema,
    function: z.lazy(() =>
      GetAllPromptTemplatesItemsPromptTemplatesResponse200ApplicationJSONFunction$inboundSchema
    ),
  });

/** @internal */
export type GetAllPromptTemplatesItemsPromptTemplatesResponse200ApplicationJSONToolCalls$Outbound =
  {
    id?: string | undefined;
    index?: number | undefined;
    type: string;
    function:
      GetAllPromptTemplatesItemsPromptTemplatesResponse200ApplicationJSONFunction$Outbound;
  };

/** @internal */
export const GetAllPromptTemplatesItemsPromptTemplatesResponse200ApplicationJSONToolCalls$outboundSchema:
  z.ZodType<
    GetAllPromptTemplatesItemsPromptTemplatesResponse200ApplicationJSONToolCalls$Outbound,
    z.ZodTypeDef,
    GetAllPromptTemplatesItemsPromptTemplatesResponse200ApplicationJSONToolCalls
  > = z.object({
    id: z.string().optional(),
    index: z.number().optional(),
    type:
      GetAllPromptTemplatesItemsPromptTemplatesResponse200ApplicationJSONResponseBody3Type$outboundSchema,
    function: z.lazy(() =>
      GetAllPromptTemplatesItemsPromptTemplatesResponse200ApplicationJSONFunction$outboundSchema
    ),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPromptTemplatesItemsPromptTemplatesResponse200ApplicationJSONToolCalls$ {
  /** @deprecated use `GetAllPromptTemplatesItemsPromptTemplatesResponse200ApplicationJSONToolCalls$inboundSchema` instead. */
  export const inboundSchema =
    GetAllPromptTemplatesItemsPromptTemplatesResponse200ApplicationJSONToolCalls$inboundSchema;
  /** @deprecated use `GetAllPromptTemplatesItemsPromptTemplatesResponse200ApplicationJSONToolCalls$outboundSchema` instead. */
  export const outboundSchema =
    GetAllPromptTemplatesItemsPromptTemplatesResponse200ApplicationJSONToolCalls$outboundSchema;
  /** @deprecated use `GetAllPromptTemplatesItemsPromptTemplatesResponse200ApplicationJSONToolCalls$Outbound` instead. */
  export type Outbound =
    GetAllPromptTemplatesItemsPromptTemplatesResponse200ApplicationJSONToolCalls$Outbound;
}

export function getAllPromptTemplatesItemsPromptTemplatesResponse200ApplicationJSONToolCallsToJSON(
  getAllPromptTemplatesItemsPromptTemplatesResponse200ApplicationJSONToolCalls:
    GetAllPromptTemplatesItemsPromptTemplatesResponse200ApplicationJSONToolCalls,
): string {
  return JSON.stringify(
    GetAllPromptTemplatesItemsPromptTemplatesResponse200ApplicationJSONToolCalls$outboundSchema
      .parse(
        getAllPromptTemplatesItemsPromptTemplatesResponse200ApplicationJSONToolCalls,
      ),
  );
}

export function getAllPromptTemplatesItemsPromptTemplatesResponse200ApplicationJSONToolCallsFromJSON(
  jsonString: string,
): SafeParseResult<
  GetAllPromptTemplatesItemsPromptTemplatesResponse200ApplicationJSONToolCalls,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetAllPromptTemplatesItemsPromptTemplatesResponse200ApplicationJSONToolCalls$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'GetAllPromptTemplatesItemsPromptTemplatesResponse200ApplicationJSONToolCalls' from JSON`,
  );
}

/** @internal */
export const GetAllPromptTemplatesItemsPromptTemplatesResponse200ApplicationJSONMessages$inboundSchema:
  z.ZodType<
    GetAllPromptTemplatesItemsPromptTemplatesResponse200ApplicationJSONMessages,
    z.ZodTypeDef,
    unknown
  > = z.object({
    role:
      GetAllPromptTemplatesItemsPromptTemplatesResponse200ApplicationJSONRole$inboundSchema,
    content: z.union([
      z.string(),
      z.array(z.union([
        z.lazy(() =>
          GetAllPromptTemplates2PromptTemplatesResponse200ApplicationJSONResponseBody1$inboundSchema
        ),
        z.lazy(() =>
          GetAllPromptTemplates2PromptTemplatesResponse200ApplicationJSONResponseBody2$inboundSchema
        ),
      ])),
    ]),
    tool_calls: z.array(
      z.lazy(() =>
        GetAllPromptTemplatesItemsPromptTemplatesResponse200ApplicationJSONToolCalls$inboundSchema
      ),
    ).optional(),
  }).transform((v) => {
    return remap$(v, {
      "tool_calls": "toolCalls",
    });
  });

/** @internal */
export type GetAllPromptTemplatesItemsPromptTemplatesResponse200ApplicationJSONMessages$Outbound =
  {
    role: string;
    content:
      | string
      | Array<
        | GetAllPromptTemplates2PromptTemplatesResponse200ApplicationJSONResponseBody1$Outbound
        | GetAllPromptTemplates2PromptTemplatesResponse200ApplicationJSONResponseBody2$Outbound
      >;
    tool_calls?:
      | Array<
        GetAllPromptTemplatesItemsPromptTemplatesResponse200ApplicationJSONToolCalls$Outbound
      >
      | undefined;
  };

/** @internal */
export const GetAllPromptTemplatesItemsPromptTemplatesResponse200ApplicationJSONMessages$outboundSchema:
  z.ZodType<
    GetAllPromptTemplatesItemsPromptTemplatesResponse200ApplicationJSONMessages$Outbound,
    z.ZodTypeDef,
    GetAllPromptTemplatesItemsPromptTemplatesResponse200ApplicationJSONMessages
  > = z.object({
    role:
      GetAllPromptTemplatesItemsPromptTemplatesResponse200ApplicationJSONRole$outboundSchema,
    content: z.union([
      z.string(),
      z.array(z.union([
        z.lazy(() =>
          GetAllPromptTemplates2PromptTemplatesResponse200ApplicationJSONResponseBody1$outboundSchema
        ),
        z.lazy(() =>
          GetAllPromptTemplates2PromptTemplatesResponse200ApplicationJSONResponseBody2$outboundSchema
        ),
      ])),
    ]),
    toolCalls: z.array(
      z.lazy(() =>
        GetAllPromptTemplatesItemsPromptTemplatesResponse200ApplicationJSONToolCalls$outboundSchema
      ),
    ).optional(),
  }).transform((v) => {
    return remap$(v, {
      toolCalls: "tool_calls",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPromptTemplatesItemsPromptTemplatesResponse200ApplicationJSONMessages$ {
  /** @deprecated use `GetAllPromptTemplatesItemsPromptTemplatesResponse200ApplicationJSONMessages$inboundSchema` instead. */
  export const inboundSchema =
    GetAllPromptTemplatesItemsPromptTemplatesResponse200ApplicationJSONMessages$inboundSchema;
  /** @deprecated use `GetAllPromptTemplatesItemsPromptTemplatesResponse200ApplicationJSONMessages$outboundSchema` instead. */
  export const outboundSchema =
    GetAllPromptTemplatesItemsPromptTemplatesResponse200ApplicationJSONMessages$outboundSchema;
  /** @deprecated use `GetAllPromptTemplatesItemsPromptTemplatesResponse200ApplicationJSONMessages$Outbound` instead. */
  export type Outbound =
    GetAllPromptTemplatesItemsPromptTemplatesResponse200ApplicationJSONMessages$Outbound;
}

export function getAllPromptTemplatesItemsPromptTemplatesResponse200ApplicationJSONMessagesToJSON(
  getAllPromptTemplatesItemsPromptTemplatesResponse200ApplicationJSONMessages:
    GetAllPromptTemplatesItemsPromptTemplatesResponse200ApplicationJSONMessages,
): string {
  return JSON.stringify(
    GetAllPromptTemplatesItemsPromptTemplatesResponse200ApplicationJSONMessages$outboundSchema
      .parse(
        getAllPromptTemplatesItemsPromptTemplatesResponse200ApplicationJSONMessages,
      ),
  );
}

export function getAllPromptTemplatesItemsPromptTemplatesResponse200ApplicationJSONMessagesFromJSON(
  jsonString: string,
): SafeParseResult<
  GetAllPromptTemplatesItemsPromptTemplatesResponse200ApplicationJSONMessages,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetAllPromptTemplatesItemsPromptTemplatesResponse200ApplicationJSONMessages$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'GetAllPromptTemplatesItemsPromptTemplatesResponse200ApplicationJSONMessages' from JSON`,
  );
}

/** @internal */
export const GetAllPromptTemplatesItemsPromptTemplatesResponse200ApplicationJSONPromptConfig$inboundSchema:
  z.ZodType<
    GetAllPromptTemplatesItemsPromptTemplatesResponse200ApplicationJSONPromptConfig,
    z.ZodTypeDef,
    unknown
  > = z.object({
    stream: z.boolean().optional(),
    model: z.string().optional(),
    model_db_id: z.string().optional(),
    model_type:
      GetAllPromptTemplatesItemsPromptTemplatesResponse200ApplicationJSONModelType$inboundSchema
        .optional(),
    model_parameters: z.lazy(() =>
      GetAllPromptTemplatesItemsPromptTemplatesResponse200ApplicationJSONModelParameters$inboundSchema
    ).optional(),
    provider:
      GetAllPromptTemplatesItemsPromptTemplatesResponse200ApplicationJSONProvider$inboundSchema
        .optional(),
    integration_id: z.nullable(z.string()).optional(),
    version: z.string().optional(),
    messages: z.array(
      z.lazy(() =>
        GetAllPromptTemplatesItemsPromptTemplatesResponse200ApplicationJSONMessages$inboundSchema
      ),
    ),
  }).transform((v) => {
    return remap$(v, {
      "model_db_id": "modelDbId",
      "model_type": "modelType",
      "model_parameters": "modelParameters",
      "integration_id": "integrationId",
    });
  });

/** @internal */
export type GetAllPromptTemplatesItemsPromptTemplatesResponse200ApplicationJSONPromptConfig$Outbound =
  {
    stream?: boolean | undefined;
    model?: string | undefined;
    model_db_id?: string | undefined;
    model_type?: string | undefined;
    model_parameters?:
      | GetAllPromptTemplatesItemsPromptTemplatesResponse200ApplicationJSONModelParameters$Outbound
      | undefined;
    provider?: string | undefined;
    integration_id?: string | null | undefined;
    version?: string | undefined;
    messages: Array<
      GetAllPromptTemplatesItemsPromptTemplatesResponse200ApplicationJSONMessages$Outbound
    >;
  };

/** @internal */
export const GetAllPromptTemplatesItemsPromptTemplatesResponse200ApplicationJSONPromptConfig$outboundSchema:
  z.ZodType<
    GetAllPromptTemplatesItemsPromptTemplatesResponse200ApplicationJSONPromptConfig$Outbound,
    z.ZodTypeDef,
    GetAllPromptTemplatesItemsPromptTemplatesResponse200ApplicationJSONPromptConfig
  > = z.object({
    stream: z.boolean().optional(),
    model: z.string().optional(),
    modelDbId: z.string().optional(),
    modelType:
      GetAllPromptTemplatesItemsPromptTemplatesResponse200ApplicationJSONModelType$outboundSchema
        .optional(),
    modelParameters: z.lazy(() =>
      GetAllPromptTemplatesItemsPromptTemplatesResponse200ApplicationJSONModelParameters$outboundSchema
    ).optional(),
    provider:
      GetAllPromptTemplatesItemsPromptTemplatesResponse200ApplicationJSONProvider$outboundSchema
        .optional(),
    integrationId: z.nullable(z.string()).optional(),
    version: z.string().optional(),
    messages: z.array(
      z.lazy(() =>
        GetAllPromptTemplatesItemsPromptTemplatesResponse200ApplicationJSONMessages$outboundSchema
      ),
    ),
  }).transform((v) => {
    return remap$(v, {
      modelDbId: "model_db_id",
      modelType: "model_type",
      modelParameters: "model_parameters",
      integrationId: "integration_id",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPromptTemplatesItemsPromptTemplatesResponse200ApplicationJSONPromptConfig$ {
  /** @deprecated use `GetAllPromptTemplatesItemsPromptTemplatesResponse200ApplicationJSONPromptConfig$inboundSchema` instead. */
  export const inboundSchema =
    GetAllPromptTemplatesItemsPromptTemplatesResponse200ApplicationJSONPromptConfig$inboundSchema;
  /** @deprecated use `GetAllPromptTemplatesItemsPromptTemplatesResponse200ApplicationJSONPromptConfig$outboundSchema` instead. */
  export const outboundSchema =
    GetAllPromptTemplatesItemsPromptTemplatesResponse200ApplicationJSONPromptConfig$outboundSchema;
  /** @deprecated use `GetAllPromptTemplatesItemsPromptTemplatesResponse200ApplicationJSONPromptConfig$Outbound` instead. */
  export type Outbound =
    GetAllPromptTemplatesItemsPromptTemplatesResponse200ApplicationJSONPromptConfig$Outbound;
}

export function getAllPromptTemplatesItemsPromptTemplatesResponse200ApplicationJSONPromptConfigToJSON(
  getAllPromptTemplatesItemsPromptTemplatesResponse200ApplicationJSONPromptConfig:
    GetAllPromptTemplatesItemsPromptTemplatesResponse200ApplicationJSONPromptConfig,
): string {
  return JSON.stringify(
    GetAllPromptTemplatesItemsPromptTemplatesResponse200ApplicationJSONPromptConfig$outboundSchema
      .parse(
        getAllPromptTemplatesItemsPromptTemplatesResponse200ApplicationJSONPromptConfig,
      ),
  );
}

export function getAllPromptTemplatesItemsPromptTemplatesResponse200ApplicationJSONPromptConfigFromJSON(
  jsonString: string,
): SafeParseResult<
  GetAllPromptTemplatesItemsPromptTemplatesResponse200ApplicationJSONPromptConfig,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetAllPromptTemplatesItemsPromptTemplatesResponse200ApplicationJSONPromptConfig$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'GetAllPromptTemplatesItemsPromptTemplatesResponse200ApplicationJSONPromptConfig' from JSON`,
  );
}

/** @internal */
export const GetAllPromptTemplatesItemsPromptTemplatesResponse200ApplicationJSONMetadata$inboundSchema:
  z.ZodType<
    GetAllPromptTemplatesItemsPromptTemplatesResponse200ApplicationJSONMetadata,
    z.ZodTypeDef,
    unknown
  > = z.object({
    use_cases: z.array(z.string()).optional(),
    language: z.string().optional(),
  }).transform((v) => {
    return remap$(v, {
      "use_cases": "useCases",
    });
  });

/** @internal */
export type GetAllPromptTemplatesItemsPromptTemplatesResponse200ApplicationJSONMetadata$Outbound =
  {
    use_cases?: Array<string> | undefined;
    language?: string | undefined;
  };

/** @internal */
export const GetAllPromptTemplatesItemsPromptTemplatesResponse200ApplicationJSONMetadata$outboundSchema:
  z.ZodType<
    GetAllPromptTemplatesItemsPromptTemplatesResponse200ApplicationJSONMetadata$Outbound,
    z.ZodTypeDef,
    GetAllPromptTemplatesItemsPromptTemplatesResponse200ApplicationJSONMetadata
  > = z.object({
    useCases: z.array(z.string()).optional(),
    language: z.string().optional(),
  }).transform((v) => {
    return remap$(v, {
      useCases: "use_cases",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPromptTemplatesItemsPromptTemplatesResponse200ApplicationJSONMetadata$ {
  /** @deprecated use `GetAllPromptTemplatesItemsPromptTemplatesResponse200ApplicationJSONMetadata$inboundSchema` instead. */
  export const inboundSchema =
    GetAllPromptTemplatesItemsPromptTemplatesResponse200ApplicationJSONMetadata$inboundSchema;
  /** @deprecated use `GetAllPromptTemplatesItemsPromptTemplatesResponse200ApplicationJSONMetadata$outboundSchema` instead. */
  export const outboundSchema =
    GetAllPromptTemplatesItemsPromptTemplatesResponse200ApplicationJSONMetadata$outboundSchema;
  /** @deprecated use `GetAllPromptTemplatesItemsPromptTemplatesResponse200ApplicationJSONMetadata$Outbound` instead. */
  export type Outbound =
    GetAllPromptTemplatesItemsPromptTemplatesResponse200ApplicationJSONMetadata$Outbound;
}

export function getAllPromptTemplatesItemsPromptTemplatesResponse200ApplicationJSONMetadataToJSON(
  getAllPromptTemplatesItemsPromptTemplatesResponse200ApplicationJSONMetadata:
    GetAllPromptTemplatesItemsPromptTemplatesResponse200ApplicationJSONMetadata,
): string {
  return JSON.stringify(
    GetAllPromptTemplatesItemsPromptTemplatesResponse200ApplicationJSONMetadata$outboundSchema
      .parse(
        getAllPromptTemplatesItemsPromptTemplatesResponse200ApplicationJSONMetadata,
      ),
  );
}

export function getAllPromptTemplatesItemsPromptTemplatesResponse200ApplicationJSONMetadataFromJSON(
  jsonString: string,
): SafeParseResult<
  GetAllPromptTemplatesItemsPromptTemplatesResponse200ApplicationJSONMetadata,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetAllPromptTemplatesItemsPromptTemplatesResponse200ApplicationJSONMetadata$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'GetAllPromptTemplatesItemsPromptTemplatesResponse200ApplicationJSONMetadata' from JSON`,
  );
}

/** @internal */
export const GetAllPromptTemplatesItemsVersions$inboundSchema: z.ZodType<
  GetAllPromptTemplatesItemsVersions,
  z.ZodTypeDef,
  unknown
> = z.object({
  _id: z.string(),
  created_by_id: z.string(),
  display_name: z.string(),
  updated_by_id: z.string(),
  description: z.nullable(z.string()).optional(),
  prompt_config: z.lazy(() =>
    GetAllPromptTemplatesItemsPromptTemplatesResponse200ApplicationJSONPromptConfig$inboundSchema
  ),
  metadata: z.lazy(() =>
    GetAllPromptTemplatesItemsPromptTemplatesResponse200ApplicationJSONMetadata$inboundSchema
  ),
  commit: z.string(),
  timestamp: z.string(),
}).transform((v) => {
  return remap$(v, {
    "_id": "id",
    "created_by_id": "createdById",
    "display_name": "displayName",
    "updated_by_id": "updatedById",
    "prompt_config": "promptConfig",
  });
});

/** @internal */
export type GetAllPromptTemplatesItemsVersions$Outbound = {
  _id: string;
  created_by_id: string;
  display_name: string;
  updated_by_id: string;
  description?: string | null | undefined;
  prompt_config:
    GetAllPromptTemplatesItemsPromptTemplatesResponse200ApplicationJSONPromptConfig$Outbound;
  metadata:
    GetAllPromptTemplatesItemsPromptTemplatesResponse200ApplicationJSONMetadata$Outbound;
  commit: string;
  timestamp: string;
};

/** @internal */
export const GetAllPromptTemplatesItemsVersions$outboundSchema: z.ZodType<
  GetAllPromptTemplatesItemsVersions$Outbound,
  z.ZodTypeDef,
  GetAllPromptTemplatesItemsVersions
> = z.object({
  id: z.string(),
  createdById: z.string(),
  displayName: z.string(),
  updatedById: z.string(),
  description: z.nullable(z.string()).optional(),
  promptConfig: z.lazy(() =>
    GetAllPromptTemplatesItemsPromptTemplatesResponse200ApplicationJSONPromptConfig$outboundSchema
  ),
  metadata: z.lazy(() =>
    GetAllPromptTemplatesItemsPromptTemplatesResponse200ApplicationJSONMetadata$outboundSchema
  ),
  commit: z.string(),
  timestamp: z.string(),
}).transform((v) => {
  return remap$(v, {
    id: "_id",
    createdById: "created_by_id",
    displayName: "display_name",
    updatedById: "updated_by_id",
    promptConfig: "prompt_config",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPromptTemplatesItemsVersions$ {
  /** @deprecated use `GetAllPromptTemplatesItemsVersions$inboundSchema` instead. */
  export const inboundSchema = GetAllPromptTemplatesItemsVersions$inboundSchema;
  /** @deprecated use `GetAllPromptTemplatesItemsVersions$outboundSchema` instead. */
  export const outboundSchema =
    GetAllPromptTemplatesItemsVersions$outboundSchema;
  /** @deprecated use `GetAllPromptTemplatesItemsVersions$Outbound` instead. */
  export type Outbound = GetAllPromptTemplatesItemsVersions$Outbound;
}

export function getAllPromptTemplatesItemsVersionsToJSON(
  getAllPromptTemplatesItemsVersions: GetAllPromptTemplatesItemsVersions,
): string {
  return JSON.stringify(
    GetAllPromptTemplatesItemsVersions$outboundSchema.parse(
      getAllPromptTemplatesItemsVersions,
    ),
  );
}

export function getAllPromptTemplatesItemsVersionsFromJSON(
  jsonString: string,
): SafeParseResult<GetAllPromptTemplatesItemsVersions, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      GetAllPromptTemplatesItemsVersions$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetAllPromptTemplatesItemsVersions' from JSON`,
  );
}

/** @internal */
export const GetAllPromptTemplatesItemsPromptTemplatesType$inboundSchema:
  z.ZodNativeEnum<typeof GetAllPromptTemplatesItemsPromptTemplatesType> = z
    .nativeEnum(GetAllPromptTemplatesItemsPromptTemplatesType);

/** @internal */
export const GetAllPromptTemplatesItemsPromptTemplatesType$outboundSchema:
  z.ZodNativeEnum<typeof GetAllPromptTemplatesItemsPromptTemplatesType> =
    GetAllPromptTemplatesItemsPromptTemplatesType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPromptTemplatesItemsPromptTemplatesType$ {
  /** @deprecated use `GetAllPromptTemplatesItemsPromptTemplatesType$inboundSchema` instead. */
  export const inboundSchema =
    GetAllPromptTemplatesItemsPromptTemplatesType$inboundSchema;
  /** @deprecated use `GetAllPromptTemplatesItemsPromptTemplatesType$outboundSchema` instead. */
  export const outboundSchema =
    GetAllPromptTemplatesItemsPromptTemplatesType$outboundSchema;
}

/** @internal */
export const Items3$inboundSchema: z.ZodType<Items3, z.ZodTypeDef, unknown> = z
  .object({
    _id: z.string(),
    owner: z.union([
      z.string(),
      GetAllPromptTemplatesOwnerPromptTemplates2$inboundSchema,
    ]),
    domain_id: z.string(),
    created_by_id: z.string(),
    display_name: z.string(),
    updated_by_id: z.string(),
    description: z.nullable(z.string()).optional(),
    prompt_config: z.lazy(() =>
      GetAllPromptTemplatesItemsPromptTemplatesPromptConfig$inboundSchema
    ),
    metadata: z.lazy(() =>
      GetAllPromptTemplatesItemsPromptTemplatesMetadata$inboundSchema
    ),
    created: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
    updated: z.string().datetime({ offset: true }).default(
      "2024-11-26T10:00:21.083Z",
    ).transform(v => new Date(v)),
    versions: z.array(
      z.lazy(() => GetAllPromptTemplatesItemsVersions$inboundSchema),
    ),
    type: GetAllPromptTemplatesItemsPromptTemplatesType$inboundSchema,
  }).transform((v) => {
    return remap$(v, {
      "_id": "id",
      "domain_id": "domainId",
      "created_by_id": "createdById",
      "display_name": "displayName",
      "updated_by_id": "updatedById",
      "prompt_config": "promptConfig",
    });
  });

/** @internal */
export type Items3$Outbound = {
  _id: string;
  owner: string | string;
  domain_id: string;
  created_by_id: string;
  display_name: string;
  updated_by_id: string;
  description?: string | null | undefined;
  prompt_config: GetAllPromptTemplatesItemsPromptTemplatesPromptConfig$Outbound;
  metadata: GetAllPromptTemplatesItemsPromptTemplatesMetadata$Outbound;
  created?: string | undefined;
  updated: string;
  versions: Array<GetAllPromptTemplatesItemsVersions$Outbound>;
  type: string;
};

/** @internal */
export const Items3$outboundSchema: z.ZodType<
  Items3$Outbound,
  z.ZodTypeDef,
  Items3
> = z.object({
  id: z.string(),
  owner: z.union([
    z.string(),
    GetAllPromptTemplatesOwnerPromptTemplates2$outboundSchema,
  ]),
  domainId: z.string(),
  createdById: z.string(),
  displayName: z.string(),
  updatedById: z.string(),
  description: z.nullable(z.string()).optional(),
  promptConfig: z.lazy(() =>
    GetAllPromptTemplatesItemsPromptTemplatesPromptConfig$outboundSchema
  ),
  metadata: z.lazy(() =>
    GetAllPromptTemplatesItemsPromptTemplatesMetadata$outboundSchema
  ),
  created: z.date().transform(v => v.toISOString()).optional(),
  updated: z.date().default(() => new Date("2024-11-26T10:00:21.083Z"))
    .transform(v => v.toISOString()),
  versions: z.array(
    z.lazy(() => GetAllPromptTemplatesItemsVersions$outboundSchema),
  ),
  type: GetAllPromptTemplatesItemsPromptTemplatesType$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    id: "_id",
    domainId: "domain_id",
    createdById: "created_by_id",
    displayName: "display_name",
    updatedById: "updated_by_id",
    promptConfig: "prompt_config",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Items3$ {
  /** @deprecated use `Items3$inboundSchema` instead. */
  export const inboundSchema = Items3$inboundSchema;
  /** @deprecated use `Items3$outboundSchema` instead. */
  export const outboundSchema = Items3$outboundSchema;
  /** @deprecated use `Items3$Outbound` instead. */
  export type Outbound = Items3$Outbound;
}

export function items3ToJSON(items3: Items3): string {
  return JSON.stringify(Items3$outboundSchema.parse(items3));
}

export function items3FromJSON(
  jsonString: string,
): SafeParseResult<Items3, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Items3$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Items3' from JSON`,
  );
}

/** @internal */
export const GetAllPromptTemplatesOwner2$inboundSchema: z.ZodNativeEnum<
  typeof GetAllPromptTemplatesOwner2
> = z.nativeEnum(GetAllPromptTemplatesOwner2);

/** @internal */
export const GetAllPromptTemplatesOwner2$outboundSchema: z.ZodNativeEnum<
  typeof GetAllPromptTemplatesOwner2
> = GetAllPromptTemplatesOwner2$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPromptTemplatesOwner2$ {
  /** @deprecated use `GetAllPromptTemplatesOwner2$inboundSchema` instead. */
  export const inboundSchema = GetAllPromptTemplatesOwner2$inboundSchema;
  /** @deprecated use `GetAllPromptTemplatesOwner2$outboundSchema` instead. */
  export const outboundSchema = GetAllPromptTemplatesOwner2$outboundSchema;
}

/** @internal */
export const ItemsOwner$inboundSchema: z.ZodType<
  ItemsOwner,
  z.ZodTypeDef,
  unknown
> = z.union([z.string(), GetAllPromptTemplatesOwner2$inboundSchema]);

/** @internal */
export type ItemsOwner$Outbound = string | string;

/** @internal */
export const ItemsOwner$outboundSchema: z.ZodType<
  ItemsOwner$Outbound,
  z.ZodTypeDef,
  ItemsOwner
> = z.union([z.string(), GetAllPromptTemplatesOwner2$outboundSchema]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ItemsOwner$ {
  /** @deprecated use `ItemsOwner$inboundSchema` instead. */
  export const inboundSchema = ItemsOwner$inboundSchema;
  /** @deprecated use `ItemsOwner$outboundSchema` instead. */
  export const outboundSchema = ItemsOwner$outboundSchema;
  /** @deprecated use `ItemsOwner$Outbound` instead. */
  export type Outbound = ItemsOwner$Outbound;
}

export function itemsOwnerToJSON(itemsOwner: ItemsOwner): string {
  return JSON.stringify(ItemsOwner$outboundSchema.parse(itemsOwner));
}

export function itemsOwnerFromJSON(
  jsonString: string,
): SafeParseResult<ItemsOwner, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ItemsOwner$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ItemsOwner' from JSON`,
  );
}

/** @internal */
export const GetAllPromptTemplatesItemsModelType$inboundSchema: z.ZodNativeEnum<
  typeof GetAllPromptTemplatesItemsModelType
> = z.nativeEnum(GetAllPromptTemplatesItemsModelType);

/** @internal */
export const GetAllPromptTemplatesItemsModelType$outboundSchema:
  z.ZodNativeEnum<typeof GetAllPromptTemplatesItemsModelType> =
    GetAllPromptTemplatesItemsModelType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPromptTemplatesItemsModelType$ {
  /** @deprecated use `GetAllPromptTemplatesItemsModelType$inboundSchema` instead. */
  export const inboundSchema =
    GetAllPromptTemplatesItemsModelType$inboundSchema;
  /** @deprecated use `GetAllPromptTemplatesItemsModelType$outboundSchema` instead. */
  export const outboundSchema =
    GetAllPromptTemplatesItemsModelType$outboundSchema;
}

/** @internal */
export const GetAllPromptTemplatesItemsFormat$inboundSchema: z.ZodNativeEnum<
  typeof GetAllPromptTemplatesItemsFormat
> = z.nativeEnum(GetAllPromptTemplatesItemsFormat);

/** @internal */
export const GetAllPromptTemplatesItemsFormat$outboundSchema: z.ZodNativeEnum<
  typeof GetAllPromptTemplatesItemsFormat
> = GetAllPromptTemplatesItemsFormat$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPromptTemplatesItemsFormat$ {
  /** @deprecated use `GetAllPromptTemplatesItemsFormat$inboundSchema` instead. */
  export const inboundSchema = GetAllPromptTemplatesItemsFormat$inboundSchema;
  /** @deprecated use `GetAllPromptTemplatesItemsFormat$outboundSchema` instead. */
  export const outboundSchema = GetAllPromptTemplatesItemsFormat$outboundSchema;
}

/** @internal */
export const GetAllPromptTemplatesItemsQuality$inboundSchema: z.ZodNativeEnum<
  typeof GetAllPromptTemplatesItemsQuality
> = z.nativeEnum(GetAllPromptTemplatesItemsQuality);

/** @internal */
export const GetAllPromptTemplatesItemsQuality$outboundSchema: z.ZodNativeEnum<
  typeof GetAllPromptTemplatesItemsQuality
> = GetAllPromptTemplatesItemsQuality$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPromptTemplatesItemsQuality$ {
  /** @deprecated use `GetAllPromptTemplatesItemsQuality$inboundSchema` instead. */
  export const inboundSchema = GetAllPromptTemplatesItemsQuality$inboundSchema;
  /** @deprecated use `GetAllPromptTemplatesItemsQuality$outboundSchema` instead. */
  export const outboundSchema =
    GetAllPromptTemplatesItemsQuality$outboundSchema;
}

/** @internal */
export const GetAllPromptTemplatesResponseFormatPromptTemplatesResponse200Type$inboundSchema:
  z.ZodNativeEnum<
    typeof GetAllPromptTemplatesResponseFormatPromptTemplatesResponse200Type
  > = z.nativeEnum(
    GetAllPromptTemplatesResponseFormatPromptTemplatesResponse200Type,
  );

/** @internal */
export const GetAllPromptTemplatesResponseFormatPromptTemplatesResponse200Type$outboundSchema:
  z.ZodNativeEnum<
    typeof GetAllPromptTemplatesResponseFormatPromptTemplatesResponse200Type
  > =
    GetAllPromptTemplatesResponseFormatPromptTemplatesResponse200Type$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPromptTemplatesResponseFormatPromptTemplatesResponse200Type$ {
  /** @deprecated use `GetAllPromptTemplatesResponseFormatPromptTemplatesResponse200Type$inboundSchema` instead. */
  export const inboundSchema =
    GetAllPromptTemplatesResponseFormatPromptTemplatesResponse200Type$inboundSchema;
  /** @deprecated use `GetAllPromptTemplatesResponseFormatPromptTemplatesResponse200Type$outboundSchema` instead. */
  export const outboundSchema =
    GetAllPromptTemplatesResponseFormatPromptTemplatesResponse200Type$outboundSchema;
}

/** @internal */
export const GetAllPromptTemplatesResponseFormatPromptTemplates2$inboundSchema:
  z.ZodType<
    GetAllPromptTemplatesResponseFormatPromptTemplates2,
    z.ZodTypeDef,
    unknown
  > = z.object({
    type:
      GetAllPromptTemplatesResponseFormatPromptTemplatesResponse200Type$inboundSchema,
  });

/** @internal */
export type GetAllPromptTemplatesResponseFormatPromptTemplates2$Outbound = {
  type: string;
};

/** @internal */
export const GetAllPromptTemplatesResponseFormatPromptTemplates2$outboundSchema:
  z.ZodType<
    GetAllPromptTemplatesResponseFormatPromptTemplates2$Outbound,
    z.ZodTypeDef,
    GetAllPromptTemplatesResponseFormatPromptTemplates2
  > = z.object({
    type:
      GetAllPromptTemplatesResponseFormatPromptTemplatesResponse200Type$outboundSchema,
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPromptTemplatesResponseFormatPromptTemplates2$ {
  /** @deprecated use `GetAllPromptTemplatesResponseFormatPromptTemplates2$inboundSchema` instead. */
  export const inboundSchema =
    GetAllPromptTemplatesResponseFormatPromptTemplates2$inboundSchema;
  /** @deprecated use `GetAllPromptTemplatesResponseFormatPromptTemplates2$outboundSchema` instead. */
  export const outboundSchema =
    GetAllPromptTemplatesResponseFormatPromptTemplates2$outboundSchema;
  /** @deprecated use `GetAllPromptTemplatesResponseFormatPromptTemplates2$Outbound` instead. */
  export type Outbound =
    GetAllPromptTemplatesResponseFormatPromptTemplates2$Outbound;
}

export function getAllPromptTemplatesResponseFormatPromptTemplates2ToJSON(
  getAllPromptTemplatesResponseFormatPromptTemplates2:
    GetAllPromptTemplatesResponseFormatPromptTemplates2,
): string {
  return JSON.stringify(
    GetAllPromptTemplatesResponseFormatPromptTemplates2$outboundSchema.parse(
      getAllPromptTemplatesResponseFormatPromptTemplates2,
    ),
  );
}

export function getAllPromptTemplatesResponseFormatPromptTemplates2FromJSON(
  jsonString: string,
): SafeParseResult<
  GetAllPromptTemplatesResponseFormatPromptTemplates2,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetAllPromptTemplatesResponseFormatPromptTemplates2$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'GetAllPromptTemplatesResponseFormatPromptTemplates2' from JSON`,
  );
}

/** @internal */
export const GetAllPromptTemplatesResponseFormatPromptTemplatesResponseType$inboundSchema:
  z.ZodNativeEnum<
    typeof GetAllPromptTemplatesResponseFormatPromptTemplatesResponseType
  > = z.nativeEnum(
    GetAllPromptTemplatesResponseFormatPromptTemplatesResponseType,
  );

/** @internal */
export const GetAllPromptTemplatesResponseFormatPromptTemplatesResponseType$outboundSchema:
  z.ZodNativeEnum<
    typeof GetAllPromptTemplatesResponseFormatPromptTemplatesResponseType
  > =
    GetAllPromptTemplatesResponseFormatPromptTemplatesResponseType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPromptTemplatesResponseFormatPromptTemplatesResponseType$ {
  /** @deprecated use `GetAllPromptTemplatesResponseFormatPromptTemplatesResponseType$inboundSchema` instead. */
  export const inboundSchema =
    GetAllPromptTemplatesResponseFormatPromptTemplatesResponseType$inboundSchema;
  /** @deprecated use `GetAllPromptTemplatesResponseFormatPromptTemplatesResponseType$outboundSchema` instead. */
  export const outboundSchema =
    GetAllPromptTemplatesResponseFormatPromptTemplatesResponseType$outboundSchema;
}

/** @internal */
export const GetAllPromptTemplatesResponseFormatPromptTemplatesJsonSchema$inboundSchema:
  z.ZodType<
    GetAllPromptTemplatesResponseFormatPromptTemplatesJsonSchema,
    z.ZodTypeDef,
    unknown
  > = z.object({
    name: z.string(),
    strict: z.boolean(),
    schema: z.record(z.any()),
  });

/** @internal */
export type GetAllPromptTemplatesResponseFormatPromptTemplatesJsonSchema$Outbound =
  {
    name: string;
    strict: boolean;
    schema: { [k: string]: any };
  };

/** @internal */
export const GetAllPromptTemplatesResponseFormatPromptTemplatesJsonSchema$outboundSchema:
  z.ZodType<
    GetAllPromptTemplatesResponseFormatPromptTemplatesJsonSchema$Outbound,
    z.ZodTypeDef,
    GetAllPromptTemplatesResponseFormatPromptTemplatesJsonSchema
  > = z.object({
    name: z.string(),
    strict: z.boolean(),
    schema: z.record(z.any()),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPromptTemplatesResponseFormatPromptTemplatesJsonSchema$ {
  /** @deprecated use `GetAllPromptTemplatesResponseFormatPromptTemplatesJsonSchema$inboundSchema` instead. */
  export const inboundSchema =
    GetAllPromptTemplatesResponseFormatPromptTemplatesJsonSchema$inboundSchema;
  /** @deprecated use `GetAllPromptTemplatesResponseFormatPromptTemplatesJsonSchema$outboundSchema` instead. */
  export const outboundSchema =
    GetAllPromptTemplatesResponseFormatPromptTemplatesJsonSchema$outboundSchema;
  /** @deprecated use `GetAllPromptTemplatesResponseFormatPromptTemplatesJsonSchema$Outbound` instead. */
  export type Outbound =
    GetAllPromptTemplatesResponseFormatPromptTemplatesJsonSchema$Outbound;
}

export function getAllPromptTemplatesResponseFormatPromptTemplatesJsonSchemaToJSON(
  getAllPromptTemplatesResponseFormatPromptTemplatesJsonSchema:
    GetAllPromptTemplatesResponseFormatPromptTemplatesJsonSchema,
): string {
  return JSON.stringify(
    GetAllPromptTemplatesResponseFormatPromptTemplatesJsonSchema$outboundSchema
      .parse(getAllPromptTemplatesResponseFormatPromptTemplatesJsonSchema),
  );
}

export function getAllPromptTemplatesResponseFormatPromptTemplatesJsonSchemaFromJSON(
  jsonString: string,
): SafeParseResult<
  GetAllPromptTemplatesResponseFormatPromptTemplatesJsonSchema,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetAllPromptTemplatesResponseFormatPromptTemplatesJsonSchema$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'GetAllPromptTemplatesResponseFormatPromptTemplatesJsonSchema' from JSON`,
  );
}

/** @internal */
export const GetAllPromptTemplatesResponseFormatPromptTemplates1$inboundSchema:
  z.ZodType<
    GetAllPromptTemplatesResponseFormatPromptTemplates1,
    z.ZodTypeDef,
    unknown
  > = z.object({
    type:
      GetAllPromptTemplatesResponseFormatPromptTemplatesResponseType$inboundSchema,
    json_schema: z.lazy(() =>
      GetAllPromptTemplatesResponseFormatPromptTemplatesJsonSchema$inboundSchema
    ),
  }).transform((v) => {
    return remap$(v, {
      "json_schema": "jsonSchema",
    });
  });

/** @internal */
export type GetAllPromptTemplatesResponseFormatPromptTemplates1$Outbound = {
  type: string;
  json_schema:
    GetAllPromptTemplatesResponseFormatPromptTemplatesJsonSchema$Outbound;
};

/** @internal */
export const GetAllPromptTemplatesResponseFormatPromptTemplates1$outboundSchema:
  z.ZodType<
    GetAllPromptTemplatesResponseFormatPromptTemplates1$Outbound,
    z.ZodTypeDef,
    GetAllPromptTemplatesResponseFormatPromptTemplates1
  > = z.object({
    type:
      GetAllPromptTemplatesResponseFormatPromptTemplatesResponseType$outboundSchema,
    jsonSchema: z.lazy(() =>
      GetAllPromptTemplatesResponseFormatPromptTemplatesJsonSchema$outboundSchema
    ),
  }).transform((v) => {
    return remap$(v, {
      jsonSchema: "json_schema",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPromptTemplatesResponseFormatPromptTemplates1$ {
  /** @deprecated use `GetAllPromptTemplatesResponseFormatPromptTemplates1$inboundSchema` instead. */
  export const inboundSchema =
    GetAllPromptTemplatesResponseFormatPromptTemplates1$inboundSchema;
  /** @deprecated use `GetAllPromptTemplatesResponseFormatPromptTemplates1$outboundSchema` instead. */
  export const outboundSchema =
    GetAllPromptTemplatesResponseFormatPromptTemplates1$outboundSchema;
  /** @deprecated use `GetAllPromptTemplatesResponseFormatPromptTemplates1$Outbound` instead. */
  export type Outbound =
    GetAllPromptTemplatesResponseFormatPromptTemplates1$Outbound;
}

export function getAllPromptTemplatesResponseFormatPromptTemplates1ToJSON(
  getAllPromptTemplatesResponseFormatPromptTemplates1:
    GetAllPromptTemplatesResponseFormatPromptTemplates1,
): string {
  return JSON.stringify(
    GetAllPromptTemplatesResponseFormatPromptTemplates1$outboundSchema.parse(
      getAllPromptTemplatesResponseFormatPromptTemplates1,
    ),
  );
}

export function getAllPromptTemplatesResponseFormatPromptTemplates1FromJSON(
  jsonString: string,
): SafeParseResult<
  GetAllPromptTemplatesResponseFormatPromptTemplates1,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetAllPromptTemplatesResponseFormatPromptTemplates1$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'GetAllPromptTemplatesResponseFormatPromptTemplates1' from JSON`,
  );
}

/** @internal */
export const GetAllPromptTemplatesItemsResponseFormat$inboundSchema: z.ZodType<
  GetAllPromptTemplatesItemsResponseFormat,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() =>
    GetAllPromptTemplatesResponseFormatPromptTemplates2$inboundSchema
  ),
  z.lazy(() =>
    GetAllPromptTemplatesResponseFormatPromptTemplates1$inboundSchema
  ),
]);

/** @internal */
export type GetAllPromptTemplatesItemsResponseFormat$Outbound =
  | GetAllPromptTemplatesResponseFormatPromptTemplates2$Outbound
  | GetAllPromptTemplatesResponseFormatPromptTemplates1$Outbound;

/** @internal */
export const GetAllPromptTemplatesItemsResponseFormat$outboundSchema: z.ZodType<
  GetAllPromptTemplatesItemsResponseFormat$Outbound,
  z.ZodTypeDef,
  GetAllPromptTemplatesItemsResponseFormat
> = z.union([
  z.lazy(() =>
    GetAllPromptTemplatesResponseFormatPromptTemplates2$outboundSchema
  ),
  z.lazy(() =>
    GetAllPromptTemplatesResponseFormatPromptTemplates1$outboundSchema
  ),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPromptTemplatesItemsResponseFormat$ {
  /** @deprecated use `GetAllPromptTemplatesItemsResponseFormat$inboundSchema` instead. */
  export const inboundSchema =
    GetAllPromptTemplatesItemsResponseFormat$inboundSchema;
  /** @deprecated use `GetAllPromptTemplatesItemsResponseFormat$outboundSchema` instead. */
  export const outboundSchema =
    GetAllPromptTemplatesItemsResponseFormat$outboundSchema;
  /** @deprecated use `GetAllPromptTemplatesItemsResponseFormat$Outbound` instead. */
  export type Outbound = GetAllPromptTemplatesItemsResponseFormat$Outbound;
}

export function getAllPromptTemplatesItemsResponseFormatToJSON(
  getAllPromptTemplatesItemsResponseFormat:
    GetAllPromptTemplatesItemsResponseFormat,
): string {
  return JSON.stringify(
    GetAllPromptTemplatesItemsResponseFormat$outboundSchema.parse(
      getAllPromptTemplatesItemsResponseFormat,
    ),
  );
}

export function getAllPromptTemplatesItemsResponseFormatFromJSON(
  jsonString: string,
): SafeParseResult<
  GetAllPromptTemplatesItemsResponseFormat,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetAllPromptTemplatesItemsResponseFormat$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'GetAllPromptTemplatesItemsResponseFormat' from JSON`,
  );
}

/** @internal */
export const GetAllPromptTemplatesItemsPhotoRealVersion$inboundSchema:
  z.ZodNativeEnum<typeof GetAllPromptTemplatesItemsPhotoRealVersion> = z
    .nativeEnum(GetAllPromptTemplatesItemsPhotoRealVersion);

/** @internal */
export const GetAllPromptTemplatesItemsPhotoRealVersion$outboundSchema:
  z.ZodNativeEnum<typeof GetAllPromptTemplatesItemsPhotoRealVersion> =
    GetAllPromptTemplatesItemsPhotoRealVersion$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPromptTemplatesItemsPhotoRealVersion$ {
  /** @deprecated use `GetAllPromptTemplatesItemsPhotoRealVersion$inboundSchema` instead. */
  export const inboundSchema =
    GetAllPromptTemplatesItemsPhotoRealVersion$inboundSchema;
  /** @deprecated use `GetAllPromptTemplatesItemsPhotoRealVersion$outboundSchema` instead. */
  export const outboundSchema =
    GetAllPromptTemplatesItemsPhotoRealVersion$outboundSchema;
}

/** @internal */
export const GetAllPromptTemplatesItemsEncodingFormat$inboundSchema:
  z.ZodNativeEnum<typeof GetAllPromptTemplatesItemsEncodingFormat> = z
    .nativeEnum(GetAllPromptTemplatesItemsEncodingFormat);

/** @internal */
export const GetAllPromptTemplatesItemsEncodingFormat$outboundSchema:
  z.ZodNativeEnum<typeof GetAllPromptTemplatesItemsEncodingFormat> =
    GetAllPromptTemplatesItemsEncodingFormat$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPromptTemplatesItemsEncodingFormat$ {
  /** @deprecated use `GetAllPromptTemplatesItemsEncodingFormat$inboundSchema` instead. */
  export const inboundSchema =
    GetAllPromptTemplatesItemsEncodingFormat$inboundSchema;
  /** @deprecated use `GetAllPromptTemplatesItemsEncodingFormat$outboundSchema` instead. */
  export const outboundSchema =
    GetAllPromptTemplatesItemsEncodingFormat$outboundSchema;
}

/** @internal */
export const GetAllPromptTemplatesItemsModelParameters$inboundSchema: z.ZodType<
  GetAllPromptTemplatesItemsModelParameters,
  z.ZodTypeDef,
  unknown
> = z.object({
  temperature: z.number().optional(),
  maxTokens: z.number().optional(),
  topK: z.number().optional(),
  topP: z.number().optional(),
  frequencyPenalty: z.number().optional(),
  presencePenalty: z.number().optional(),
  numImages: z.number().optional(),
  seed: z.number().optional(),
  format: GetAllPromptTemplatesItemsFormat$inboundSchema.optional(),
  dimensions: z.string().optional(),
  quality: GetAllPromptTemplatesItemsQuality$inboundSchema.optional(),
  style: z.string().optional(),
  responseFormat: z.nullable(
    z.union([
      z.lazy(() =>
        GetAllPromptTemplatesResponseFormatPromptTemplates2$inboundSchema
      ),
      z.lazy(() =>
        GetAllPromptTemplatesResponseFormatPromptTemplates1$inboundSchema
      ),
    ]),
  ).optional(),
  photoRealVersion: GetAllPromptTemplatesItemsPhotoRealVersion$inboundSchema
    .optional(),
  encoding_format: GetAllPromptTemplatesItemsEncodingFormat$inboundSchema
    .optional(),
}).transform((v) => {
  return remap$(v, {
    "encoding_format": "encodingFormat",
  });
});

/** @internal */
export type GetAllPromptTemplatesItemsModelParameters$Outbound = {
  temperature?: number | undefined;
  maxTokens?: number | undefined;
  topK?: number | undefined;
  topP?: number | undefined;
  frequencyPenalty?: number | undefined;
  presencePenalty?: number | undefined;
  numImages?: number | undefined;
  seed?: number | undefined;
  format?: string | undefined;
  dimensions?: string | undefined;
  quality?: string | undefined;
  style?: string | undefined;
  responseFormat?:
    | GetAllPromptTemplatesResponseFormatPromptTemplates2$Outbound
    | GetAllPromptTemplatesResponseFormatPromptTemplates1$Outbound
    | null
    | undefined;
  photoRealVersion?: string | undefined;
  encoding_format?: string | undefined;
};

/** @internal */
export const GetAllPromptTemplatesItemsModelParameters$outboundSchema:
  z.ZodType<
    GetAllPromptTemplatesItemsModelParameters$Outbound,
    z.ZodTypeDef,
    GetAllPromptTemplatesItemsModelParameters
  > = z.object({
    temperature: z.number().optional(),
    maxTokens: z.number().optional(),
    topK: z.number().optional(),
    topP: z.number().optional(),
    frequencyPenalty: z.number().optional(),
    presencePenalty: z.number().optional(),
    numImages: z.number().optional(),
    seed: z.number().optional(),
    format: GetAllPromptTemplatesItemsFormat$outboundSchema.optional(),
    dimensions: z.string().optional(),
    quality: GetAllPromptTemplatesItemsQuality$outboundSchema.optional(),
    style: z.string().optional(),
    responseFormat: z.nullable(
      z.union([
        z.lazy(() =>
          GetAllPromptTemplatesResponseFormatPromptTemplates2$outboundSchema
        ),
        z.lazy(() =>
          GetAllPromptTemplatesResponseFormatPromptTemplates1$outboundSchema
        ),
      ]),
    ).optional(),
    photoRealVersion: GetAllPromptTemplatesItemsPhotoRealVersion$outboundSchema
      .optional(),
    encodingFormat: GetAllPromptTemplatesItemsEncodingFormat$outboundSchema
      .optional(),
  }).transform((v) => {
    return remap$(v, {
      encodingFormat: "encoding_format",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPromptTemplatesItemsModelParameters$ {
  /** @deprecated use `GetAllPromptTemplatesItemsModelParameters$inboundSchema` instead. */
  export const inboundSchema =
    GetAllPromptTemplatesItemsModelParameters$inboundSchema;
  /** @deprecated use `GetAllPromptTemplatesItemsModelParameters$outboundSchema` instead. */
  export const outboundSchema =
    GetAllPromptTemplatesItemsModelParameters$outboundSchema;
  /** @deprecated use `GetAllPromptTemplatesItemsModelParameters$Outbound` instead. */
  export type Outbound = GetAllPromptTemplatesItemsModelParameters$Outbound;
}

export function getAllPromptTemplatesItemsModelParametersToJSON(
  getAllPromptTemplatesItemsModelParameters:
    GetAllPromptTemplatesItemsModelParameters,
): string {
  return JSON.stringify(
    GetAllPromptTemplatesItemsModelParameters$outboundSchema.parse(
      getAllPromptTemplatesItemsModelParameters,
    ),
  );
}

export function getAllPromptTemplatesItemsModelParametersFromJSON(
  jsonString: string,
): SafeParseResult<
  GetAllPromptTemplatesItemsModelParameters,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetAllPromptTemplatesItemsModelParameters$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'GetAllPromptTemplatesItemsModelParameters' from JSON`,
  );
}

/** @internal */
export const GetAllPromptTemplatesItemsProvider$inboundSchema: z.ZodNativeEnum<
  typeof GetAllPromptTemplatesItemsProvider
> = z.nativeEnum(GetAllPromptTemplatesItemsProvider);

/** @internal */
export const GetAllPromptTemplatesItemsProvider$outboundSchema: z.ZodNativeEnum<
  typeof GetAllPromptTemplatesItemsProvider
> = GetAllPromptTemplatesItemsProvider$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPromptTemplatesItemsProvider$ {
  /** @deprecated use `GetAllPromptTemplatesItemsProvider$inboundSchema` instead. */
  export const inboundSchema = GetAllPromptTemplatesItemsProvider$inboundSchema;
  /** @deprecated use `GetAllPromptTemplatesItemsProvider$outboundSchema` instead. */
  export const outboundSchema =
    GetAllPromptTemplatesItemsProvider$outboundSchema;
}

/** @internal */
export const GetAllPromptTemplatesItemsRole$inboundSchema: z.ZodNativeEnum<
  typeof GetAllPromptTemplatesItemsRole
> = z.nativeEnum(GetAllPromptTemplatesItemsRole);

/** @internal */
export const GetAllPromptTemplatesItemsRole$outboundSchema: z.ZodNativeEnum<
  typeof GetAllPromptTemplatesItemsRole
> = GetAllPromptTemplatesItemsRole$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPromptTemplatesItemsRole$ {
  /** @deprecated use `GetAllPromptTemplatesItemsRole$inboundSchema` instead. */
  export const inboundSchema = GetAllPromptTemplatesItemsRole$inboundSchema;
  /** @deprecated use `GetAllPromptTemplatesItemsRole$outboundSchema` instead. */
  export const outboundSchema = GetAllPromptTemplatesItemsRole$outboundSchema;
}

/** @internal */
export const GetAllPromptTemplates2PromptTemplatesResponse200Type$inboundSchema:
  z.ZodNativeEnum<typeof GetAllPromptTemplates2PromptTemplatesResponse200Type> =
    z.nativeEnum(GetAllPromptTemplates2PromptTemplatesResponse200Type);

/** @internal */
export const GetAllPromptTemplates2PromptTemplatesResponse200Type$outboundSchema:
  z.ZodNativeEnum<typeof GetAllPromptTemplates2PromptTemplatesResponse200Type> =
    GetAllPromptTemplates2PromptTemplatesResponse200Type$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPromptTemplates2PromptTemplatesResponse200Type$ {
  /** @deprecated use `GetAllPromptTemplates2PromptTemplatesResponse200Type$inboundSchema` instead. */
  export const inboundSchema =
    GetAllPromptTemplates2PromptTemplatesResponse200Type$inboundSchema;
  /** @deprecated use `GetAllPromptTemplates2PromptTemplatesResponse200Type$outboundSchema` instead. */
  export const outboundSchema =
    GetAllPromptTemplates2PromptTemplatesResponse200Type$outboundSchema;
}

/** @internal */
export const GetAllPromptTemplates2PromptTemplatesImageUrl$inboundSchema:
  z.ZodType<
    GetAllPromptTemplates2PromptTemplatesImageUrl,
    z.ZodTypeDef,
    unknown
  > = z.object({
    id: z.string().optional(),
    url: z.string(),
    detail: z.string().optional(),
  });

/** @internal */
export type GetAllPromptTemplates2PromptTemplatesImageUrl$Outbound = {
  id?: string | undefined;
  url: string;
  detail?: string | undefined;
};

/** @internal */
export const GetAllPromptTemplates2PromptTemplatesImageUrl$outboundSchema:
  z.ZodType<
    GetAllPromptTemplates2PromptTemplatesImageUrl$Outbound,
    z.ZodTypeDef,
    GetAllPromptTemplates2PromptTemplatesImageUrl
  > = z.object({
    id: z.string().optional(),
    url: z.string(),
    detail: z.string().optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPromptTemplates2PromptTemplatesImageUrl$ {
  /** @deprecated use `GetAllPromptTemplates2PromptTemplatesImageUrl$inboundSchema` instead. */
  export const inboundSchema =
    GetAllPromptTemplates2PromptTemplatesImageUrl$inboundSchema;
  /** @deprecated use `GetAllPromptTemplates2PromptTemplatesImageUrl$outboundSchema` instead. */
  export const outboundSchema =
    GetAllPromptTemplates2PromptTemplatesImageUrl$outboundSchema;
  /** @deprecated use `GetAllPromptTemplates2PromptTemplatesImageUrl$Outbound` instead. */
  export type Outbound = GetAllPromptTemplates2PromptTemplatesImageUrl$Outbound;
}

export function getAllPromptTemplates2PromptTemplatesImageUrlToJSON(
  getAllPromptTemplates2PromptTemplatesImageUrl:
    GetAllPromptTemplates2PromptTemplatesImageUrl,
): string {
  return JSON.stringify(
    GetAllPromptTemplates2PromptTemplatesImageUrl$outboundSchema.parse(
      getAllPromptTemplates2PromptTemplatesImageUrl,
    ),
  );
}

export function getAllPromptTemplates2PromptTemplatesImageUrlFromJSON(
  jsonString: string,
): SafeParseResult<
  GetAllPromptTemplates2PromptTemplatesImageUrl,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetAllPromptTemplates2PromptTemplatesImageUrl$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'GetAllPromptTemplates2PromptTemplatesImageUrl' from JSON`,
  );
}

/** @internal */
export const GetAllPromptTemplates2PromptTemplates2$inboundSchema: z.ZodType<
  GetAllPromptTemplates2PromptTemplates2,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: GetAllPromptTemplates2PromptTemplatesResponse200Type$inboundSchema,
  image_url: z.lazy(() =>
    GetAllPromptTemplates2PromptTemplatesImageUrl$inboundSchema
  ),
}).transform((v) => {
  return remap$(v, {
    "image_url": "imageUrl",
  });
});

/** @internal */
export type GetAllPromptTemplates2PromptTemplates2$Outbound = {
  type: string;
  image_url: GetAllPromptTemplates2PromptTemplatesImageUrl$Outbound;
};

/** @internal */
export const GetAllPromptTemplates2PromptTemplates2$outboundSchema: z.ZodType<
  GetAllPromptTemplates2PromptTemplates2$Outbound,
  z.ZodTypeDef,
  GetAllPromptTemplates2PromptTemplates2
> = z.object({
  type: GetAllPromptTemplates2PromptTemplatesResponse200Type$outboundSchema,
  imageUrl: z.lazy(() =>
    GetAllPromptTemplates2PromptTemplatesImageUrl$outboundSchema
  ),
}).transform((v) => {
  return remap$(v, {
    imageUrl: "image_url",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPromptTemplates2PromptTemplates2$ {
  /** @deprecated use `GetAllPromptTemplates2PromptTemplates2$inboundSchema` instead. */
  export const inboundSchema =
    GetAllPromptTemplates2PromptTemplates2$inboundSchema;
  /** @deprecated use `GetAllPromptTemplates2PromptTemplates2$outboundSchema` instead. */
  export const outboundSchema =
    GetAllPromptTemplates2PromptTemplates2$outboundSchema;
  /** @deprecated use `GetAllPromptTemplates2PromptTemplates2$Outbound` instead. */
  export type Outbound = GetAllPromptTemplates2PromptTemplates2$Outbound;
}

export function getAllPromptTemplates2PromptTemplates2ToJSON(
  getAllPromptTemplates2PromptTemplates2:
    GetAllPromptTemplates2PromptTemplates2,
): string {
  return JSON.stringify(
    GetAllPromptTemplates2PromptTemplates2$outboundSchema.parse(
      getAllPromptTemplates2PromptTemplates2,
    ),
  );
}

export function getAllPromptTemplates2PromptTemplates2FromJSON(
  jsonString: string,
): SafeParseResult<GetAllPromptTemplates2PromptTemplates2, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      GetAllPromptTemplates2PromptTemplates2$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetAllPromptTemplates2PromptTemplates2' from JSON`,
  );
}

/** @internal */
export const GetAllPromptTemplates2PromptTemplatesResponseType$inboundSchema:
  z.ZodNativeEnum<typeof GetAllPromptTemplates2PromptTemplatesResponseType> = z
    .nativeEnum(GetAllPromptTemplates2PromptTemplatesResponseType);

/** @internal */
export const GetAllPromptTemplates2PromptTemplatesResponseType$outboundSchema:
  z.ZodNativeEnum<typeof GetAllPromptTemplates2PromptTemplatesResponseType> =
    GetAllPromptTemplates2PromptTemplatesResponseType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPromptTemplates2PromptTemplatesResponseType$ {
  /** @deprecated use `GetAllPromptTemplates2PromptTemplatesResponseType$inboundSchema` instead. */
  export const inboundSchema =
    GetAllPromptTemplates2PromptTemplatesResponseType$inboundSchema;
  /** @deprecated use `GetAllPromptTemplates2PromptTemplatesResponseType$outboundSchema` instead. */
  export const outboundSchema =
    GetAllPromptTemplates2PromptTemplatesResponseType$outboundSchema;
}

/** @internal */
export const GetAllPromptTemplates2PromptTemplates1$inboundSchema: z.ZodType<
  GetAllPromptTemplates2PromptTemplates1,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: GetAllPromptTemplates2PromptTemplatesResponseType$inboundSchema,
  text: z.string(),
});

/** @internal */
export type GetAllPromptTemplates2PromptTemplates1$Outbound = {
  type: string;
  text: string;
};

/** @internal */
export const GetAllPromptTemplates2PromptTemplates1$outboundSchema: z.ZodType<
  GetAllPromptTemplates2PromptTemplates1$Outbound,
  z.ZodTypeDef,
  GetAllPromptTemplates2PromptTemplates1
> = z.object({
  type: GetAllPromptTemplates2PromptTemplatesResponseType$outboundSchema,
  text: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPromptTemplates2PromptTemplates1$ {
  /** @deprecated use `GetAllPromptTemplates2PromptTemplates1$inboundSchema` instead. */
  export const inboundSchema =
    GetAllPromptTemplates2PromptTemplates1$inboundSchema;
  /** @deprecated use `GetAllPromptTemplates2PromptTemplates1$outboundSchema` instead. */
  export const outboundSchema =
    GetAllPromptTemplates2PromptTemplates1$outboundSchema;
  /** @deprecated use `GetAllPromptTemplates2PromptTemplates1$Outbound` instead. */
  export type Outbound = GetAllPromptTemplates2PromptTemplates1$Outbound;
}

export function getAllPromptTemplates2PromptTemplates1ToJSON(
  getAllPromptTemplates2PromptTemplates1:
    GetAllPromptTemplates2PromptTemplates1,
): string {
  return JSON.stringify(
    GetAllPromptTemplates2PromptTemplates1$outboundSchema.parse(
      getAllPromptTemplates2PromptTemplates1,
    ),
  );
}

export function getAllPromptTemplates2PromptTemplates1FromJSON(
  jsonString: string,
): SafeParseResult<GetAllPromptTemplates2PromptTemplates1, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      GetAllPromptTemplates2PromptTemplates1$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetAllPromptTemplates2PromptTemplates1' from JSON`,
  );
}

/** @internal */
export const GetAllPromptTemplatesContentPromptTemplates2$inboundSchema:
  z.ZodType<
    GetAllPromptTemplatesContentPromptTemplates2,
    z.ZodTypeDef,
    unknown
  > = z.union([
    z.lazy(() => GetAllPromptTemplates2PromptTemplates1$inboundSchema),
    z.lazy(() => GetAllPromptTemplates2PromptTemplates2$inboundSchema),
  ]);

/** @internal */
export type GetAllPromptTemplatesContentPromptTemplates2$Outbound =
  | GetAllPromptTemplates2PromptTemplates1$Outbound
  | GetAllPromptTemplates2PromptTemplates2$Outbound;

/** @internal */
export const GetAllPromptTemplatesContentPromptTemplates2$outboundSchema:
  z.ZodType<
    GetAllPromptTemplatesContentPromptTemplates2$Outbound,
    z.ZodTypeDef,
    GetAllPromptTemplatesContentPromptTemplates2
  > = z.union([
    z.lazy(() => GetAllPromptTemplates2PromptTemplates1$outboundSchema),
    z.lazy(() => GetAllPromptTemplates2PromptTemplates2$outboundSchema),
  ]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPromptTemplatesContentPromptTemplates2$ {
  /** @deprecated use `GetAllPromptTemplatesContentPromptTemplates2$inboundSchema` instead. */
  export const inboundSchema =
    GetAllPromptTemplatesContentPromptTemplates2$inboundSchema;
  /** @deprecated use `GetAllPromptTemplatesContentPromptTemplates2$outboundSchema` instead. */
  export const outboundSchema =
    GetAllPromptTemplatesContentPromptTemplates2$outboundSchema;
  /** @deprecated use `GetAllPromptTemplatesContentPromptTemplates2$Outbound` instead. */
  export type Outbound = GetAllPromptTemplatesContentPromptTemplates2$Outbound;
}

export function getAllPromptTemplatesContentPromptTemplates2ToJSON(
  getAllPromptTemplatesContentPromptTemplates2:
    GetAllPromptTemplatesContentPromptTemplates2,
): string {
  return JSON.stringify(
    GetAllPromptTemplatesContentPromptTemplates2$outboundSchema.parse(
      getAllPromptTemplatesContentPromptTemplates2,
    ),
  );
}

export function getAllPromptTemplatesContentPromptTemplates2FromJSON(
  jsonString: string,
): SafeParseResult<
  GetAllPromptTemplatesContentPromptTemplates2,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetAllPromptTemplatesContentPromptTemplates2$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'GetAllPromptTemplatesContentPromptTemplates2' from JSON`,
  );
}

/** @internal */
export const GetAllPromptTemplatesItemsContent$inboundSchema: z.ZodType<
  GetAllPromptTemplatesItemsContent,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.string(),
  z.array(z.union([
    z.lazy(() => GetAllPromptTemplates2PromptTemplates1$inboundSchema),
    z.lazy(() => GetAllPromptTemplates2PromptTemplates2$inboundSchema),
  ])),
]);

/** @internal */
export type GetAllPromptTemplatesItemsContent$Outbound =
  | string
  | Array<
    | GetAllPromptTemplates2PromptTemplates1$Outbound
    | GetAllPromptTemplates2PromptTemplates2$Outbound
  >;

/** @internal */
export const GetAllPromptTemplatesItemsContent$outboundSchema: z.ZodType<
  GetAllPromptTemplatesItemsContent$Outbound,
  z.ZodTypeDef,
  GetAllPromptTemplatesItemsContent
> = z.union([
  z.string(),
  z.array(z.union([
    z.lazy(() => GetAllPromptTemplates2PromptTemplates1$outboundSchema),
    z.lazy(() => GetAllPromptTemplates2PromptTemplates2$outboundSchema),
  ])),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPromptTemplatesItemsContent$ {
  /** @deprecated use `GetAllPromptTemplatesItemsContent$inboundSchema` instead. */
  export const inboundSchema = GetAllPromptTemplatesItemsContent$inboundSchema;
  /** @deprecated use `GetAllPromptTemplatesItemsContent$outboundSchema` instead. */
  export const outboundSchema =
    GetAllPromptTemplatesItemsContent$outboundSchema;
  /** @deprecated use `GetAllPromptTemplatesItemsContent$Outbound` instead. */
  export type Outbound = GetAllPromptTemplatesItemsContent$Outbound;
}

export function getAllPromptTemplatesItemsContentToJSON(
  getAllPromptTemplatesItemsContent: GetAllPromptTemplatesItemsContent,
): string {
  return JSON.stringify(
    GetAllPromptTemplatesItemsContent$outboundSchema.parse(
      getAllPromptTemplatesItemsContent,
    ),
  );
}

export function getAllPromptTemplatesItemsContentFromJSON(
  jsonString: string,
): SafeParseResult<GetAllPromptTemplatesItemsContent, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetAllPromptTemplatesItemsContent$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetAllPromptTemplatesItemsContent' from JSON`,
  );
}

/** @internal */
export const GetAllPromptTemplatesItemsPromptTemplatesResponse200ApplicationJSONType$inboundSchema:
  z.ZodNativeEnum<
    typeof GetAllPromptTemplatesItemsPromptTemplatesResponse200ApplicationJSONType
  > = z.nativeEnum(
    GetAllPromptTemplatesItemsPromptTemplatesResponse200ApplicationJSONType,
  );

/** @internal */
export const GetAllPromptTemplatesItemsPromptTemplatesResponse200ApplicationJSONType$outboundSchema:
  z.ZodNativeEnum<
    typeof GetAllPromptTemplatesItemsPromptTemplatesResponse200ApplicationJSONType
  > =
    GetAllPromptTemplatesItemsPromptTemplatesResponse200ApplicationJSONType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPromptTemplatesItemsPromptTemplatesResponse200ApplicationJSONType$ {
  /** @deprecated use `GetAllPromptTemplatesItemsPromptTemplatesResponse200ApplicationJSONType$inboundSchema` instead. */
  export const inboundSchema =
    GetAllPromptTemplatesItemsPromptTemplatesResponse200ApplicationJSONType$inboundSchema;
  /** @deprecated use `GetAllPromptTemplatesItemsPromptTemplatesResponse200ApplicationJSONType$outboundSchema` instead. */
  export const outboundSchema =
    GetAllPromptTemplatesItemsPromptTemplatesResponse200ApplicationJSONType$outboundSchema;
}

/** @internal */
export const GetAllPromptTemplatesItemsFunction$inboundSchema: z.ZodType<
  GetAllPromptTemplatesItemsFunction,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.string(),
  arguments: z.string(),
});

/** @internal */
export type GetAllPromptTemplatesItemsFunction$Outbound = {
  name: string;
  arguments: string;
};

/** @internal */
export const GetAllPromptTemplatesItemsFunction$outboundSchema: z.ZodType<
  GetAllPromptTemplatesItemsFunction$Outbound,
  z.ZodTypeDef,
  GetAllPromptTemplatesItemsFunction
> = z.object({
  name: z.string(),
  arguments: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPromptTemplatesItemsFunction$ {
  /** @deprecated use `GetAllPromptTemplatesItemsFunction$inboundSchema` instead. */
  export const inboundSchema = GetAllPromptTemplatesItemsFunction$inboundSchema;
  /** @deprecated use `GetAllPromptTemplatesItemsFunction$outboundSchema` instead. */
  export const outboundSchema =
    GetAllPromptTemplatesItemsFunction$outboundSchema;
  /** @deprecated use `GetAllPromptTemplatesItemsFunction$Outbound` instead. */
  export type Outbound = GetAllPromptTemplatesItemsFunction$Outbound;
}

export function getAllPromptTemplatesItemsFunctionToJSON(
  getAllPromptTemplatesItemsFunction: GetAllPromptTemplatesItemsFunction,
): string {
  return JSON.stringify(
    GetAllPromptTemplatesItemsFunction$outboundSchema.parse(
      getAllPromptTemplatesItemsFunction,
    ),
  );
}

export function getAllPromptTemplatesItemsFunctionFromJSON(
  jsonString: string,
): SafeParseResult<GetAllPromptTemplatesItemsFunction, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      GetAllPromptTemplatesItemsFunction$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetAllPromptTemplatesItemsFunction' from JSON`,
  );
}

/** @internal */
export const GetAllPromptTemplatesItemsToolCalls$inboundSchema: z.ZodType<
  GetAllPromptTemplatesItemsToolCalls,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string().optional(),
  index: z.number().optional(),
  type:
    GetAllPromptTemplatesItemsPromptTemplatesResponse200ApplicationJSONType$inboundSchema,
  function: z.lazy(() => GetAllPromptTemplatesItemsFunction$inboundSchema),
});

/** @internal */
export type GetAllPromptTemplatesItemsToolCalls$Outbound = {
  id?: string | undefined;
  index?: number | undefined;
  type: string;
  function: GetAllPromptTemplatesItemsFunction$Outbound;
};

/** @internal */
export const GetAllPromptTemplatesItemsToolCalls$outboundSchema: z.ZodType<
  GetAllPromptTemplatesItemsToolCalls$Outbound,
  z.ZodTypeDef,
  GetAllPromptTemplatesItemsToolCalls
> = z.object({
  id: z.string().optional(),
  index: z.number().optional(),
  type:
    GetAllPromptTemplatesItemsPromptTemplatesResponse200ApplicationJSONType$outboundSchema,
  function: z.lazy(() => GetAllPromptTemplatesItemsFunction$outboundSchema),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPromptTemplatesItemsToolCalls$ {
  /** @deprecated use `GetAllPromptTemplatesItemsToolCalls$inboundSchema` instead. */
  export const inboundSchema =
    GetAllPromptTemplatesItemsToolCalls$inboundSchema;
  /** @deprecated use `GetAllPromptTemplatesItemsToolCalls$outboundSchema` instead. */
  export const outboundSchema =
    GetAllPromptTemplatesItemsToolCalls$outboundSchema;
  /** @deprecated use `GetAllPromptTemplatesItemsToolCalls$Outbound` instead. */
  export type Outbound = GetAllPromptTemplatesItemsToolCalls$Outbound;
}

export function getAllPromptTemplatesItemsToolCallsToJSON(
  getAllPromptTemplatesItemsToolCalls: GetAllPromptTemplatesItemsToolCalls,
): string {
  return JSON.stringify(
    GetAllPromptTemplatesItemsToolCalls$outboundSchema.parse(
      getAllPromptTemplatesItemsToolCalls,
    ),
  );
}

export function getAllPromptTemplatesItemsToolCallsFromJSON(
  jsonString: string,
): SafeParseResult<GetAllPromptTemplatesItemsToolCalls, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      GetAllPromptTemplatesItemsToolCalls$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetAllPromptTemplatesItemsToolCalls' from JSON`,
  );
}

/** @internal */
export const GetAllPromptTemplatesItemsMessages$inboundSchema: z.ZodType<
  GetAllPromptTemplatesItemsMessages,
  z.ZodTypeDef,
  unknown
> = z.object({
  role: GetAllPromptTemplatesItemsRole$inboundSchema,
  content: z.union([
    z.string(),
    z.array(z.union([
      z.lazy(() => GetAllPromptTemplates2PromptTemplates1$inboundSchema),
      z.lazy(() => GetAllPromptTemplates2PromptTemplates2$inboundSchema),
    ])),
  ]),
  tool_calls: z.array(
    z.lazy(() => GetAllPromptTemplatesItemsToolCalls$inboundSchema),
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    "tool_calls": "toolCalls",
  });
});

/** @internal */
export type GetAllPromptTemplatesItemsMessages$Outbound = {
  role: string;
  content:
    | string
    | Array<
      | GetAllPromptTemplates2PromptTemplates1$Outbound
      | GetAllPromptTemplates2PromptTemplates2$Outbound
    >;
  tool_calls?: Array<GetAllPromptTemplatesItemsToolCalls$Outbound> | undefined;
};

/** @internal */
export const GetAllPromptTemplatesItemsMessages$outboundSchema: z.ZodType<
  GetAllPromptTemplatesItemsMessages$Outbound,
  z.ZodTypeDef,
  GetAllPromptTemplatesItemsMessages
> = z.object({
  role: GetAllPromptTemplatesItemsRole$outboundSchema,
  content: z.union([
    z.string(),
    z.array(z.union([
      z.lazy(() => GetAllPromptTemplates2PromptTemplates1$outboundSchema),
      z.lazy(() => GetAllPromptTemplates2PromptTemplates2$outboundSchema),
    ])),
  ]),
  toolCalls: z.array(
    z.lazy(() => GetAllPromptTemplatesItemsToolCalls$outboundSchema),
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    toolCalls: "tool_calls",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPromptTemplatesItemsMessages$ {
  /** @deprecated use `GetAllPromptTemplatesItemsMessages$inboundSchema` instead. */
  export const inboundSchema = GetAllPromptTemplatesItemsMessages$inboundSchema;
  /** @deprecated use `GetAllPromptTemplatesItemsMessages$outboundSchema` instead. */
  export const outboundSchema =
    GetAllPromptTemplatesItemsMessages$outboundSchema;
  /** @deprecated use `GetAllPromptTemplatesItemsMessages$Outbound` instead. */
  export type Outbound = GetAllPromptTemplatesItemsMessages$Outbound;
}

export function getAllPromptTemplatesItemsMessagesToJSON(
  getAllPromptTemplatesItemsMessages: GetAllPromptTemplatesItemsMessages,
): string {
  return JSON.stringify(
    GetAllPromptTemplatesItemsMessages$outboundSchema.parse(
      getAllPromptTemplatesItemsMessages,
    ),
  );
}

export function getAllPromptTemplatesItemsMessagesFromJSON(
  jsonString: string,
): SafeParseResult<GetAllPromptTemplatesItemsMessages, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      GetAllPromptTemplatesItemsMessages$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetAllPromptTemplatesItemsMessages' from JSON`,
  );
}

/** @internal */
export const GetAllPromptTemplatesItemsPromptConfig$inboundSchema: z.ZodType<
  GetAllPromptTemplatesItemsPromptConfig,
  z.ZodTypeDef,
  unknown
> = z.object({
  stream: z.boolean().optional(),
  model: z.string().optional(),
  model_db_id: z.string().optional(),
  model_type: GetAllPromptTemplatesItemsModelType$inboundSchema.optional(),
  model_parameters: z.lazy(() =>
    GetAllPromptTemplatesItemsModelParameters$inboundSchema
  ).optional(),
  provider: GetAllPromptTemplatesItemsProvider$inboundSchema.optional(),
  integration_id: z.nullable(z.string()).optional(),
  version: z.string().optional(),
  messages: z.array(
    z.lazy(() => GetAllPromptTemplatesItemsMessages$inboundSchema),
  ),
}).transform((v) => {
  return remap$(v, {
    "model_db_id": "modelDbId",
    "model_type": "modelType",
    "model_parameters": "modelParameters",
    "integration_id": "integrationId",
  });
});

/** @internal */
export type GetAllPromptTemplatesItemsPromptConfig$Outbound = {
  stream?: boolean | undefined;
  model?: string | undefined;
  model_db_id?: string | undefined;
  model_type?: string | undefined;
  model_parameters?:
    | GetAllPromptTemplatesItemsModelParameters$Outbound
    | undefined;
  provider?: string | undefined;
  integration_id?: string | null | undefined;
  version?: string | undefined;
  messages: Array<GetAllPromptTemplatesItemsMessages$Outbound>;
};

/** @internal */
export const GetAllPromptTemplatesItemsPromptConfig$outboundSchema: z.ZodType<
  GetAllPromptTemplatesItemsPromptConfig$Outbound,
  z.ZodTypeDef,
  GetAllPromptTemplatesItemsPromptConfig
> = z.object({
  stream: z.boolean().optional(),
  model: z.string().optional(),
  modelDbId: z.string().optional(),
  modelType: GetAllPromptTemplatesItemsModelType$outboundSchema.optional(),
  modelParameters: z.lazy(() =>
    GetAllPromptTemplatesItemsModelParameters$outboundSchema
  ).optional(),
  provider: GetAllPromptTemplatesItemsProvider$outboundSchema.optional(),
  integrationId: z.nullable(z.string()).optional(),
  version: z.string().optional(),
  messages: z.array(
    z.lazy(() => GetAllPromptTemplatesItemsMessages$outboundSchema),
  ),
}).transform((v) => {
  return remap$(v, {
    modelDbId: "model_db_id",
    modelType: "model_type",
    modelParameters: "model_parameters",
    integrationId: "integration_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPromptTemplatesItemsPromptConfig$ {
  /** @deprecated use `GetAllPromptTemplatesItemsPromptConfig$inboundSchema` instead. */
  export const inboundSchema =
    GetAllPromptTemplatesItemsPromptConfig$inboundSchema;
  /** @deprecated use `GetAllPromptTemplatesItemsPromptConfig$outboundSchema` instead. */
  export const outboundSchema =
    GetAllPromptTemplatesItemsPromptConfig$outboundSchema;
  /** @deprecated use `GetAllPromptTemplatesItemsPromptConfig$Outbound` instead. */
  export type Outbound = GetAllPromptTemplatesItemsPromptConfig$Outbound;
}

export function getAllPromptTemplatesItemsPromptConfigToJSON(
  getAllPromptTemplatesItemsPromptConfig:
    GetAllPromptTemplatesItemsPromptConfig,
): string {
  return JSON.stringify(
    GetAllPromptTemplatesItemsPromptConfig$outboundSchema.parse(
      getAllPromptTemplatesItemsPromptConfig,
    ),
  );
}

export function getAllPromptTemplatesItemsPromptConfigFromJSON(
  jsonString: string,
): SafeParseResult<GetAllPromptTemplatesItemsPromptConfig, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      GetAllPromptTemplatesItemsPromptConfig$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetAllPromptTemplatesItemsPromptConfig' from JSON`,
  );
}

/** @internal */
export const GetAllPromptTemplatesItemsMetadata$inboundSchema: z.ZodType<
  GetAllPromptTemplatesItemsMetadata,
  z.ZodTypeDef,
  unknown
> = z.object({
  use_cases: z.array(z.string()).optional(),
  language: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "use_cases": "useCases",
  });
});

/** @internal */
export type GetAllPromptTemplatesItemsMetadata$Outbound = {
  use_cases?: Array<string> | undefined;
  language?: string | undefined;
};

/** @internal */
export const GetAllPromptTemplatesItemsMetadata$outboundSchema: z.ZodType<
  GetAllPromptTemplatesItemsMetadata$Outbound,
  z.ZodTypeDef,
  GetAllPromptTemplatesItemsMetadata
> = z.object({
  useCases: z.array(z.string()).optional(),
  language: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    useCases: "use_cases",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPromptTemplatesItemsMetadata$ {
  /** @deprecated use `GetAllPromptTemplatesItemsMetadata$inboundSchema` instead. */
  export const inboundSchema = GetAllPromptTemplatesItemsMetadata$inboundSchema;
  /** @deprecated use `GetAllPromptTemplatesItemsMetadata$outboundSchema` instead. */
  export const outboundSchema =
    GetAllPromptTemplatesItemsMetadata$outboundSchema;
  /** @deprecated use `GetAllPromptTemplatesItemsMetadata$Outbound` instead. */
  export type Outbound = GetAllPromptTemplatesItemsMetadata$Outbound;
}

export function getAllPromptTemplatesItemsMetadataToJSON(
  getAllPromptTemplatesItemsMetadata: GetAllPromptTemplatesItemsMetadata,
): string {
  return JSON.stringify(
    GetAllPromptTemplatesItemsMetadata$outboundSchema.parse(
      getAllPromptTemplatesItemsMetadata,
    ),
  );
}

export function getAllPromptTemplatesItemsMetadataFromJSON(
  jsonString: string,
): SafeParseResult<GetAllPromptTemplatesItemsMetadata, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      GetAllPromptTemplatesItemsMetadata$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetAllPromptTemplatesItemsMetadata' from JSON`,
  );
}

/** @internal */
export const GetAllPromptTemplatesItemsPromptTemplatesResponseModelType$inboundSchema:
  z.ZodNativeEnum<
    typeof GetAllPromptTemplatesItemsPromptTemplatesResponseModelType
  > = z.nativeEnum(GetAllPromptTemplatesItemsPromptTemplatesResponseModelType);

/** @internal */
export const GetAllPromptTemplatesItemsPromptTemplatesResponseModelType$outboundSchema:
  z.ZodNativeEnum<
    typeof GetAllPromptTemplatesItemsPromptTemplatesResponseModelType
  > = GetAllPromptTemplatesItemsPromptTemplatesResponseModelType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPromptTemplatesItemsPromptTemplatesResponseModelType$ {
  /** @deprecated use `GetAllPromptTemplatesItemsPromptTemplatesResponseModelType$inboundSchema` instead. */
  export const inboundSchema =
    GetAllPromptTemplatesItemsPromptTemplatesResponseModelType$inboundSchema;
  /** @deprecated use `GetAllPromptTemplatesItemsPromptTemplatesResponseModelType$outboundSchema` instead. */
  export const outboundSchema =
    GetAllPromptTemplatesItemsPromptTemplatesResponseModelType$outboundSchema;
}

/** @internal */
export const GetAllPromptTemplatesItemsPromptTemplatesResponse200Format$inboundSchema:
  z.ZodNativeEnum<
    typeof GetAllPromptTemplatesItemsPromptTemplatesResponse200Format
  > = z.nativeEnum(GetAllPromptTemplatesItemsPromptTemplatesResponse200Format);

/** @internal */
export const GetAllPromptTemplatesItemsPromptTemplatesResponse200Format$outboundSchema:
  z.ZodNativeEnum<
    typeof GetAllPromptTemplatesItemsPromptTemplatesResponse200Format
  > = GetAllPromptTemplatesItemsPromptTemplatesResponse200Format$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPromptTemplatesItemsPromptTemplatesResponse200Format$ {
  /** @deprecated use `GetAllPromptTemplatesItemsPromptTemplatesResponse200Format$inboundSchema` instead. */
  export const inboundSchema =
    GetAllPromptTemplatesItemsPromptTemplatesResponse200Format$inboundSchema;
  /** @deprecated use `GetAllPromptTemplatesItemsPromptTemplatesResponse200Format$outboundSchema` instead. */
  export const outboundSchema =
    GetAllPromptTemplatesItemsPromptTemplatesResponse200Format$outboundSchema;
}

/** @internal */
export const GetAllPromptTemplatesItemsPromptTemplatesResponseQuality$inboundSchema:
  z.ZodNativeEnum<
    typeof GetAllPromptTemplatesItemsPromptTemplatesResponseQuality
  > = z.nativeEnum(GetAllPromptTemplatesItemsPromptTemplatesResponseQuality);

/** @internal */
export const GetAllPromptTemplatesItemsPromptTemplatesResponseQuality$outboundSchema:
  z.ZodNativeEnum<
    typeof GetAllPromptTemplatesItemsPromptTemplatesResponseQuality
  > = GetAllPromptTemplatesItemsPromptTemplatesResponseQuality$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPromptTemplatesItemsPromptTemplatesResponseQuality$ {
  /** @deprecated use `GetAllPromptTemplatesItemsPromptTemplatesResponseQuality$inboundSchema` instead. */
  export const inboundSchema =
    GetAllPromptTemplatesItemsPromptTemplatesResponseQuality$inboundSchema;
  /** @deprecated use `GetAllPromptTemplatesItemsPromptTemplatesResponseQuality$outboundSchema` instead. */
  export const outboundSchema =
    GetAllPromptTemplatesItemsPromptTemplatesResponseQuality$outboundSchema;
}

/** @internal */
export const GetAllPromptTemplatesResponseFormatPromptTemplatesResponse200ApplicationJSONResponseBodyItems2Type$inboundSchema:
  z.ZodNativeEnum<
    typeof GetAllPromptTemplatesResponseFormatPromptTemplatesResponse200ApplicationJSONResponseBodyItems2Type
  > = z.nativeEnum(
    GetAllPromptTemplatesResponseFormatPromptTemplatesResponse200ApplicationJSONResponseBodyItems2Type,
  );

/** @internal */
export const GetAllPromptTemplatesResponseFormatPromptTemplatesResponse200ApplicationJSONResponseBodyItems2Type$outboundSchema:
  z.ZodNativeEnum<
    typeof GetAllPromptTemplatesResponseFormatPromptTemplatesResponse200ApplicationJSONResponseBodyItems2Type
  > =
    GetAllPromptTemplatesResponseFormatPromptTemplatesResponse200ApplicationJSONResponseBodyItems2Type$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPromptTemplatesResponseFormatPromptTemplatesResponse200ApplicationJSONResponseBodyItems2Type$ {
  /** @deprecated use `GetAllPromptTemplatesResponseFormatPromptTemplatesResponse200ApplicationJSONResponseBodyItems2Type$inboundSchema` instead. */
  export const inboundSchema =
    GetAllPromptTemplatesResponseFormatPromptTemplatesResponse200ApplicationJSONResponseBodyItems2Type$inboundSchema;
  /** @deprecated use `GetAllPromptTemplatesResponseFormatPromptTemplatesResponse200ApplicationJSONResponseBodyItems2Type$outboundSchema` instead. */
  export const outboundSchema =
    GetAllPromptTemplatesResponseFormatPromptTemplatesResponse200ApplicationJSONResponseBodyItems2Type$outboundSchema;
}

/** @internal */
export const GetAllPromptTemplatesResponseFormatPromptTemplatesResponse2002$inboundSchema:
  z.ZodType<
    GetAllPromptTemplatesResponseFormatPromptTemplatesResponse2002,
    z.ZodTypeDef,
    unknown
  > = z.object({
    type:
      GetAllPromptTemplatesResponseFormatPromptTemplatesResponse200ApplicationJSONResponseBodyItems2Type$inboundSchema,
  });

/** @internal */
export type GetAllPromptTemplatesResponseFormatPromptTemplatesResponse2002$Outbound =
  {
    type: string;
  };

/** @internal */
export const GetAllPromptTemplatesResponseFormatPromptTemplatesResponse2002$outboundSchema:
  z.ZodType<
    GetAllPromptTemplatesResponseFormatPromptTemplatesResponse2002$Outbound,
    z.ZodTypeDef,
    GetAllPromptTemplatesResponseFormatPromptTemplatesResponse2002
  > = z.object({
    type:
      GetAllPromptTemplatesResponseFormatPromptTemplatesResponse200ApplicationJSONResponseBodyItems2Type$outboundSchema,
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPromptTemplatesResponseFormatPromptTemplatesResponse2002$ {
  /** @deprecated use `GetAllPromptTemplatesResponseFormatPromptTemplatesResponse2002$inboundSchema` instead. */
  export const inboundSchema =
    GetAllPromptTemplatesResponseFormatPromptTemplatesResponse2002$inboundSchema;
  /** @deprecated use `GetAllPromptTemplatesResponseFormatPromptTemplatesResponse2002$outboundSchema` instead. */
  export const outboundSchema =
    GetAllPromptTemplatesResponseFormatPromptTemplatesResponse2002$outboundSchema;
  /** @deprecated use `GetAllPromptTemplatesResponseFormatPromptTemplatesResponse2002$Outbound` instead. */
  export type Outbound =
    GetAllPromptTemplatesResponseFormatPromptTemplatesResponse2002$Outbound;
}

export function getAllPromptTemplatesResponseFormatPromptTemplatesResponse2002ToJSON(
  getAllPromptTemplatesResponseFormatPromptTemplatesResponse2002:
    GetAllPromptTemplatesResponseFormatPromptTemplatesResponse2002,
): string {
  return JSON.stringify(
    GetAllPromptTemplatesResponseFormatPromptTemplatesResponse2002$outboundSchema
      .parse(getAllPromptTemplatesResponseFormatPromptTemplatesResponse2002),
  );
}

export function getAllPromptTemplatesResponseFormatPromptTemplatesResponse2002FromJSON(
  jsonString: string,
): SafeParseResult<
  GetAllPromptTemplatesResponseFormatPromptTemplatesResponse2002,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetAllPromptTemplatesResponseFormatPromptTemplatesResponse2002$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'GetAllPromptTemplatesResponseFormatPromptTemplatesResponse2002' from JSON`,
  );
}

/** @internal */
export const GetAllPromptTemplatesResponseFormatPromptTemplatesResponse200ApplicationJSONResponseBodyItemsType$inboundSchema:
  z.ZodNativeEnum<
    typeof GetAllPromptTemplatesResponseFormatPromptTemplatesResponse200ApplicationJSONResponseBodyItemsType
  > = z.nativeEnum(
    GetAllPromptTemplatesResponseFormatPromptTemplatesResponse200ApplicationJSONResponseBodyItemsType,
  );

/** @internal */
export const GetAllPromptTemplatesResponseFormatPromptTemplatesResponse200ApplicationJSONResponseBodyItemsType$outboundSchema:
  z.ZodNativeEnum<
    typeof GetAllPromptTemplatesResponseFormatPromptTemplatesResponse200ApplicationJSONResponseBodyItemsType
  > =
    GetAllPromptTemplatesResponseFormatPromptTemplatesResponse200ApplicationJSONResponseBodyItemsType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPromptTemplatesResponseFormatPromptTemplatesResponse200ApplicationJSONResponseBodyItemsType$ {
  /** @deprecated use `GetAllPromptTemplatesResponseFormatPromptTemplatesResponse200ApplicationJSONResponseBodyItemsType$inboundSchema` instead. */
  export const inboundSchema =
    GetAllPromptTemplatesResponseFormatPromptTemplatesResponse200ApplicationJSONResponseBodyItemsType$inboundSchema;
  /** @deprecated use `GetAllPromptTemplatesResponseFormatPromptTemplatesResponse200ApplicationJSONResponseBodyItemsType$outboundSchema` instead. */
  export const outboundSchema =
    GetAllPromptTemplatesResponseFormatPromptTemplatesResponse200ApplicationJSONResponseBodyItemsType$outboundSchema;
}

/** @internal */
export const GetAllPromptTemplatesResponseFormatPromptTemplatesResponse200JsonSchema$inboundSchema:
  z.ZodType<
    GetAllPromptTemplatesResponseFormatPromptTemplatesResponse200JsonSchema,
    z.ZodTypeDef,
    unknown
  > = z.object({
    name: z.string(),
    strict: z.boolean(),
    schema: z.record(z.any()),
  });

/** @internal */
export type GetAllPromptTemplatesResponseFormatPromptTemplatesResponse200JsonSchema$Outbound =
  {
    name: string;
    strict: boolean;
    schema: { [k: string]: any };
  };

/** @internal */
export const GetAllPromptTemplatesResponseFormatPromptTemplatesResponse200JsonSchema$outboundSchema:
  z.ZodType<
    GetAllPromptTemplatesResponseFormatPromptTemplatesResponse200JsonSchema$Outbound,
    z.ZodTypeDef,
    GetAllPromptTemplatesResponseFormatPromptTemplatesResponse200JsonSchema
  > = z.object({
    name: z.string(),
    strict: z.boolean(),
    schema: z.record(z.any()),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPromptTemplatesResponseFormatPromptTemplatesResponse200JsonSchema$ {
  /** @deprecated use `GetAllPromptTemplatesResponseFormatPromptTemplatesResponse200JsonSchema$inboundSchema` instead. */
  export const inboundSchema =
    GetAllPromptTemplatesResponseFormatPromptTemplatesResponse200JsonSchema$inboundSchema;
  /** @deprecated use `GetAllPromptTemplatesResponseFormatPromptTemplatesResponse200JsonSchema$outboundSchema` instead. */
  export const outboundSchema =
    GetAllPromptTemplatesResponseFormatPromptTemplatesResponse200JsonSchema$outboundSchema;
  /** @deprecated use `GetAllPromptTemplatesResponseFormatPromptTemplatesResponse200JsonSchema$Outbound` instead. */
  export type Outbound =
    GetAllPromptTemplatesResponseFormatPromptTemplatesResponse200JsonSchema$Outbound;
}

export function getAllPromptTemplatesResponseFormatPromptTemplatesResponse200JsonSchemaToJSON(
  getAllPromptTemplatesResponseFormatPromptTemplatesResponse200JsonSchema:
    GetAllPromptTemplatesResponseFormatPromptTemplatesResponse200JsonSchema,
): string {
  return JSON.stringify(
    GetAllPromptTemplatesResponseFormatPromptTemplatesResponse200JsonSchema$outboundSchema
      .parse(
        getAllPromptTemplatesResponseFormatPromptTemplatesResponse200JsonSchema,
      ),
  );
}

export function getAllPromptTemplatesResponseFormatPromptTemplatesResponse200JsonSchemaFromJSON(
  jsonString: string,
): SafeParseResult<
  GetAllPromptTemplatesResponseFormatPromptTemplatesResponse200JsonSchema,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetAllPromptTemplatesResponseFormatPromptTemplatesResponse200JsonSchema$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'GetAllPromptTemplatesResponseFormatPromptTemplatesResponse200JsonSchema' from JSON`,
  );
}

/** @internal */
export const GetAllPromptTemplatesResponseFormatPromptTemplatesResponse2001$inboundSchema:
  z.ZodType<
    GetAllPromptTemplatesResponseFormatPromptTemplatesResponse2001,
    z.ZodTypeDef,
    unknown
  > = z.object({
    type:
      GetAllPromptTemplatesResponseFormatPromptTemplatesResponse200ApplicationJSONResponseBodyItemsType$inboundSchema,
    json_schema: z.lazy(() =>
      GetAllPromptTemplatesResponseFormatPromptTemplatesResponse200JsonSchema$inboundSchema
    ),
  }).transform((v) => {
    return remap$(v, {
      "json_schema": "jsonSchema",
    });
  });

/** @internal */
export type GetAllPromptTemplatesResponseFormatPromptTemplatesResponse2001$Outbound =
  {
    type: string;
    json_schema:
      GetAllPromptTemplatesResponseFormatPromptTemplatesResponse200JsonSchema$Outbound;
  };

/** @internal */
export const GetAllPromptTemplatesResponseFormatPromptTemplatesResponse2001$outboundSchema:
  z.ZodType<
    GetAllPromptTemplatesResponseFormatPromptTemplatesResponse2001$Outbound,
    z.ZodTypeDef,
    GetAllPromptTemplatesResponseFormatPromptTemplatesResponse2001
  > = z.object({
    type:
      GetAllPromptTemplatesResponseFormatPromptTemplatesResponse200ApplicationJSONResponseBodyItemsType$outboundSchema,
    jsonSchema: z.lazy(() =>
      GetAllPromptTemplatesResponseFormatPromptTemplatesResponse200JsonSchema$outboundSchema
    ),
  }).transform((v) => {
    return remap$(v, {
      jsonSchema: "json_schema",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPromptTemplatesResponseFormatPromptTemplatesResponse2001$ {
  /** @deprecated use `GetAllPromptTemplatesResponseFormatPromptTemplatesResponse2001$inboundSchema` instead. */
  export const inboundSchema =
    GetAllPromptTemplatesResponseFormatPromptTemplatesResponse2001$inboundSchema;
  /** @deprecated use `GetAllPromptTemplatesResponseFormatPromptTemplatesResponse2001$outboundSchema` instead. */
  export const outboundSchema =
    GetAllPromptTemplatesResponseFormatPromptTemplatesResponse2001$outboundSchema;
  /** @deprecated use `GetAllPromptTemplatesResponseFormatPromptTemplatesResponse2001$Outbound` instead. */
  export type Outbound =
    GetAllPromptTemplatesResponseFormatPromptTemplatesResponse2001$Outbound;
}

export function getAllPromptTemplatesResponseFormatPromptTemplatesResponse2001ToJSON(
  getAllPromptTemplatesResponseFormatPromptTemplatesResponse2001:
    GetAllPromptTemplatesResponseFormatPromptTemplatesResponse2001,
): string {
  return JSON.stringify(
    GetAllPromptTemplatesResponseFormatPromptTemplatesResponse2001$outboundSchema
      .parse(getAllPromptTemplatesResponseFormatPromptTemplatesResponse2001),
  );
}

export function getAllPromptTemplatesResponseFormatPromptTemplatesResponse2001FromJSON(
  jsonString: string,
): SafeParseResult<
  GetAllPromptTemplatesResponseFormatPromptTemplatesResponse2001,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetAllPromptTemplatesResponseFormatPromptTemplatesResponse2001$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'GetAllPromptTemplatesResponseFormatPromptTemplatesResponse2001' from JSON`,
  );
}

/** @internal */
export const GetAllPromptTemplatesItemsPromptTemplatesResponseResponseFormat$inboundSchema:
  z.ZodType<
    GetAllPromptTemplatesItemsPromptTemplatesResponseResponseFormat,
    z.ZodTypeDef,
    unknown
  > = z.union([
    z.lazy(() =>
      GetAllPromptTemplatesResponseFormatPromptTemplatesResponse2002$inboundSchema
    ),
    z.lazy(() =>
      GetAllPromptTemplatesResponseFormatPromptTemplatesResponse2001$inboundSchema
    ),
  ]);

/** @internal */
export type GetAllPromptTemplatesItemsPromptTemplatesResponseResponseFormat$Outbound =
  | GetAllPromptTemplatesResponseFormatPromptTemplatesResponse2002$Outbound
  | GetAllPromptTemplatesResponseFormatPromptTemplatesResponse2001$Outbound;

/** @internal */
export const GetAllPromptTemplatesItemsPromptTemplatesResponseResponseFormat$outboundSchema:
  z.ZodType<
    GetAllPromptTemplatesItemsPromptTemplatesResponseResponseFormat$Outbound,
    z.ZodTypeDef,
    GetAllPromptTemplatesItemsPromptTemplatesResponseResponseFormat
  > = z.union([
    z.lazy(() =>
      GetAllPromptTemplatesResponseFormatPromptTemplatesResponse2002$outboundSchema
    ),
    z.lazy(() =>
      GetAllPromptTemplatesResponseFormatPromptTemplatesResponse2001$outboundSchema
    ),
  ]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPromptTemplatesItemsPromptTemplatesResponseResponseFormat$ {
  /** @deprecated use `GetAllPromptTemplatesItemsPromptTemplatesResponseResponseFormat$inboundSchema` instead. */
  export const inboundSchema =
    GetAllPromptTemplatesItemsPromptTemplatesResponseResponseFormat$inboundSchema;
  /** @deprecated use `GetAllPromptTemplatesItemsPromptTemplatesResponseResponseFormat$outboundSchema` instead. */
  export const outboundSchema =
    GetAllPromptTemplatesItemsPromptTemplatesResponseResponseFormat$outboundSchema;
  /** @deprecated use `GetAllPromptTemplatesItemsPromptTemplatesResponseResponseFormat$Outbound` instead. */
  export type Outbound =
    GetAllPromptTemplatesItemsPromptTemplatesResponseResponseFormat$Outbound;
}

export function getAllPromptTemplatesItemsPromptTemplatesResponseResponseFormatToJSON(
  getAllPromptTemplatesItemsPromptTemplatesResponseResponseFormat:
    GetAllPromptTemplatesItemsPromptTemplatesResponseResponseFormat,
): string {
  return JSON.stringify(
    GetAllPromptTemplatesItemsPromptTemplatesResponseResponseFormat$outboundSchema
      .parse(getAllPromptTemplatesItemsPromptTemplatesResponseResponseFormat),
  );
}

export function getAllPromptTemplatesItemsPromptTemplatesResponseResponseFormatFromJSON(
  jsonString: string,
): SafeParseResult<
  GetAllPromptTemplatesItemsPromptTemplatesResponseResponseFormat,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetAllPromptTemplatesItemsPromptTemplatesResponseResponseFormat$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'GetAllPromptTemplatesItemsPromptTemplatesResponseResponseFormat' from JSON`,
  );
}

/** @internal */
export const GetAllPromptTemplatesItemsPromptTemplatesResponsePhotoRealVersion$inboundSchema:
  z.ZodNativeEnum<
    typeof GetAllPromptTemplatesItemsPromptTemplatesResponsePhotoRealVersion
  > = z.nativeEnum(
    GetAllPromptTemplatesItemsPromptTemplatesResponsePhotoRealVersion,
  );

/** @internal */
export const GetAllPromptTemplatesItemsPromptTemplatesResponsePhotoRealVersion$outboundSchema:
  z.ZodNativeEnum<
    typeof GetAllPromptTemplatesItemsPromptTemplatesResponsePhotoRealVersion
  > =
    GetAllPromptTemplatesItemsPromptTemplatesResponsePhotoRealVersion$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPromptTemplatesItemsPromptTemplatesResponsePhotoRealVersion$ {
  /** @deprecated use `GetAllPromptTemplatesItemsPromptTemplatesResponsePhotoRealVersion$inboundSchema` instead. */
  export const inboundSchema =
    GetAllPromptTemplatesItemsPromptTemplatesResponsePhotoRealVersion$inboundSchema;
  /** @deprecated use `GetAllPromptTemplatesItemsPromptTemplatesResponsePhotoRealVersion$outboundSchema` instead. */
  export const outboundSchema =
    GetAllPromptTemplatesItemsPromptTemplatesResponsePhotoRealVersion$outboundSchema;
}

/** @internal */
export const GetAllPromptTemplatesItemsPromptTemplatesResponseEncodingFormat$inboundSchema:
  z.ZodNativeEnum<
    typeof GetAllPromptTemplatesItemsPromptTemplatesResponseEncodingFormat
  > = z.nativeEnum(
    GetAllPromptTemplatesItemsPromptTemplatesResponseEncodingFormat,
  );

/** @internal */
export const GetAllPromptTemplatesItemsPromptTemplatesResponseEncodingFormat$outboundSchema:
  z.ZodNativeEnum<
    typeof GetAllPromptTemplatesItemsPromptTemplatesResponseEncodingFormat
  > =
    GetAllPromptTemplatesItemsPromptTemplatesResponseEncodingFormat$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPromptTemplatesItemsPromptTemplatesResponseEncodingFormat$ {
  /** @deprecated use `GetAllPromptTemplatesItemsPromptTemplatesResponseEncodingFormat$inboundSchema` instead. */
  export const inboundSchema =
    GetAllPromptTemplatesItemsPromptTemplatesResponseEncodingFormat$inboundSchema;
  /** @deprecated use `GetAllPromptTemplatesItemsPromptTemplatesResponseEncodingFormat$outboundSchema` instead. */
  export const outboundSchema =
    GetAllPromptTemplatesItemsPromptTemplatesResponseEncodingFormat$outboundSchema;
}

/** @internal */
export const GetAllPromptTemplatesItemsPromptTemplatesResponseModelParameters$inboundSchema:
  z.ZodType<
    GetAllPromptTemplatesItemsPromptTemplatesResponseModelParameters,
    z.ZodTypeDef,
    unknown
  > = z.object({
    temperature: z.number().optional(),
    maxTokens: z.number().optional(),
    topK: z.number().optional(),
    topP: z.number().optional(),
    frequencyPenalty: z.number().optional(),
    presencePenalty: z.number().optional(),
    numImages: z.number().optional(),
    seed: z.number().optional(),
    format:
      GetAllPromptTemplatesItemsPromptTemplatesResponse200Format$inboundSchema
        .optional(),
    dimensions: z.string().optional(),
    quality:
      GetAllPromptTemplatesItemsPromptTemplatesResponseQuality$inboundSchema
        .optional(),
    style: z.string().optional(),
    responseFormat: z.nullable(
      z.union([
        z.lazy(() =>
          GetAllPromptTemplatesResponseFormatPromptTemplatesResponse2002$inboundSchema
        ),
        z.lazy(() =>
          GetAllPromptTemplatesResponseFormatPromptTemplatesResponse2001$inboundSchema
        ),
      ]),
    ).optional(),
    photoRealVersion:
      GetAllPromptTemplatesItemsPromptTemplatesResponsePhotoRealVersion$inboundSchema
        .optional(),
    encoding_format:
      GetAllPromptTemplatesItemsPromptTemplatesResponseEncodingFormat$inboundSchema
        .optional(),
  }).transform((v) => {
    return remap$(v, {
      "encoding_format": "encodingFormat",
    });
  });

/** @internal */
export type GetAllPromptTemplatesItemsPromptTemplatesResponseModelParameters$Outbound =
  {
    temperature?: number | undefined;
    maxTokens?: number | undefined;
    topK?: number | undefined;
    topP?: number | undefined;
    frequencyPenalty?: number | undefined;
    presencePenalty?: number | undefined;
    numImages?: number | undefined;
    seed?: number | undefined;
    format?: string | undefined;
    dimensions?: string | undefined;
    quality?: string | undefined;
    style?: string | undefined;
    responseFormat?:
      | GetAllPromptTemplatesResponseFormatPromptTemplatesResponse2002$Outbound
      | GetAllPromptTemplatesResponseFormatPromptTemplatesResponse2001$Outbound
      | null
      | undefined;
    photoRealVersion?: string | undefined;
    encoding_format?: string | undefined;
  };

/** @internal */
export const GetAllPromptTemplatesItemsPromptTemplatesResponseModelParameters$outboundSchema:
  z.ZodType<
    GetAllPromptTemplatesItemsPromptTemplatesResponseModelParameters$Outbound,
    z.ZodTypeDef,
    GetAllPromptTemplatesItemsPromptTemplatesResponseModelParameters
  > = z.object({
    temperature: z.number().optional(),
    maxTokens: z.number().optional(),
    topK: z.number().optional(),
    topP: z.number().optional(),
    frequencyPenalty: z.number().optional(),
    presencePenalty: z.number().optional(),
    numImages: z.number().optional(),
    seed: z.number().optional(),
    format:
      GetAllPromptTemplatesItemsPromptTemplatesResponse200Format$outboundSchema
        .optional(),
    dimensions: z.string().optional(),
    quality:
      GetAllPromptTemplatesItemsPromptTemplatesResponseQuality$outboundSchema
        .optional(),
    style: z.string().optional(),
    responseFormat: z.nullable(
      z.union([
        z.lazy(() =>
          GetAllPromptTemplatesResponseFormatPromptTemplatesResponse2002$outboundSchema
        ),
        z.lazy(() =>
          GetAllPromptTemplatesResponseFormatPromptTemplatesResponse2001$outboundSchema
        ),
      ]),
    ).optional(),
    photoRealVersion:
      GetAllPromptTemplatesItemsPromptTemplatesResponsePhotoRealVersion$outboundSchema
        .optional(),
    encodingFormat:
      GetAllPromptTemplatesItemsPromptTemplatesResponseEncodingFormat$outboundSchema
        .optional(),
  }).transform((v) => {
    return remap$(v, {
      encodingFormat: "encoding_format",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPromptTemplatesItemsPromptTemplatesResponseModelParameters$ {
  /** @deprecated use `GetAllPromptTemplatesItemsPromptTemplatesResponseModelParameters$inboundSchema` instead. */
  export const inboundSchema =
    GetAllPromptTemplatesItemsPromptTemplatesResponseModelParameters$inboundSchema;
  /** @deprecated use `GetAllPromptTemplatesItemsPromptTemplatesResponseModelParameters$outboundSchema` instead. */
  export const outboundSchema =
    GetAllPromptTemplatesItemsPromptTemplatesResponseModelParameters$outboundSchema;
  /** @deprecated use `GetAllPromptTemplatesItemsPromptTemplatesResponseModelParameters$Outbound` instead. */
  export type Outbound =
    GetAllPromptTemplatesItemsPromptTemplatesResponseModelParameters$Outbound;
}

export function getAllPromptTemplatesItemsPromptTemplatesResponseModelParametersToJSON(
  getAllPromptTemplatesItemsPromptTemplatesResponseModelParameters:
    GetAllPromptTemplatesItemsPromptTemplatesResponseModelParameters,
): string {
  return JSON.stringify(
    GetAllPromptTemplatesItemsPromptTemplatesResponseModelParameters$outboundSchema
      .parse(getAllPromptTemplatesItemsPromptTemplatesResponseModelParameters),
  );
}

export function getAllPromptTemplatesItemsPromptTemplatesResponseModelParametersFromJSON(
  jsonString: string,
): SafeParseResult<
  GetAllPromptTemplatesItemsPromptTemplatesResponseModelParameters,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetAllPromptTemplatesItemsPromptTemplatesResponseModelParameters$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'GetAllPromptTemplatesItemsPromptTemplatesResponseModelParameters' from JSON`,
  );
}

/** @internal */
export const GetAllPromptTemplatesItemsPromptTemplatesResponseProvider$inboundSchema:
  z.ZodNativeEnum<
    typeof GetAllPromptTemplatesItemsPromptTemplatesResponseProvider
  > = z.nativeEnum(GetAllPromptTemplatesItemsPromptTemplatesResponseProvider);

/** @internal */
export const GetAllPromptTemplatesItemsPromptTemplatesResponseProvider$outboundSchema:
  z.ZodNativeEnum<
    typeof GetAllPromptTemplatesItemsPromptTemplatesResponseProvider
  > = GetAllPromptTemplatesItemsPromptTemplatesResponseProvider$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPromptTemplatesItemsPromptTemplatesResponseProvider$ {
  /** @deprecated use `GetAllPromptTemplatesItemsPromptTemplatesResponseProvider$inboundSchema` instead. */
  export const inboundSchema =
    GetAllPromptTemplatesItemsPromptTemplatesResponseProvider$inboundSchema;
  /** @deprecated use `GetAllPromptTemplatesItemsPromptTemplatesResponseProvider$outboundSchema` instead. */
  export const outboundSchema =
    GetAllPromptTemplatesItemsPromptTemplatesResponseProvider$outboundSchema;
}

/** @internal */
export const GetAllPromptTemplatesItemsPromptTemplatesResponseRole$inboundSchema:
  z.ZodNativeEnum<
    typeof GetAllPromptTemplatesItemsPromptTemplatesResponseRole
  > = z.nativeEnum(GetAllPromptTemplatesItemsPromptTemplatesResponseRole);

/** @internal */
export const GetAllPromptTemplatesItemsPromptTemplatesResponseRole$outboundSchema:
  z.ZodNativeEnum<
    typeof GetAllPromptTemplatesItemsPromptTemplatesResponseRole
  > = GetAllPromptTemplatesItemsPromptTemplatesResponseRole$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPromptTemplatesItemsPromptTemplatesResponseRole$ {
  /** @deprecated use `GetAllPromptTemplatesItemsPromptTemplatesResponseRole$inboundSchema` instead. */
  export const inboundSchema =
    GetAllPromptTemplatesItemsPromptTemplatesResponseRole$inboundSchema;
  /** @deprecated use `GetAllPromptTemplatesItemsPromptTemplatesResponseRole$outboundSchema` instead. */
  export const outboundSchema =
    GetAllPromptTemplatesItemsPromptTemplatesResponseRole$outboundSchema;
}

/** @internal */
export const GetAllPromptTemplates2PromptTemplatesResponse200ApplicationJSONResponseBodyItems2Type$inboundSchema:
  z.ZodNativeEnum<
    typeof GetAllPromptTemplates2PromptTemplatesResponse200ApplicationJSONResponseBodyItems2Type
  > = z.nativeEnum(
    GetAllPromptTemplates2PromptTemplatesResponse200ApplicationJSONResponseBodyItems2Type,
  );

/** @internal */
export const GetAllPromptTemplates2PromptTemplatesResponse200ApplicationJSONResponseBodyItems2Type$outboundSchema:
  z.ZodNativeEnum<
    typeof GetAllPromptTemplates2PromptTemplatesResponse200ApplicationJSONResponseBodyItems2Type
  > =
    GetAllPromptTemplates2PromptTemplatesResponse200ApplicationJSONResponseBodyItems2Type$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPromptTemplates2PromptTemplatesResponse200ApplicationJSONResponseBodyItems2Type$ {
  /** @deprecated use `GetAllPromptTemplates2PromptTemplatesResponse200ApplicationJSONResponseBodyItems2Type$inboundSchema` instead. */
  export const inboundSchema =
    GetAllPromptTemplates2PromptTemplatesResponse200ApplicationJSONResponseBodyItems2Type$inboundSchema;
  /** @deprecated use `GetAllPromptTemplates2PromptTemplatesResponse200ApplicationJSONResponseBodyItems2Type$outboundSchema` instead. */
  export const outboundSchema =
    GetAllPromptTemplates2PromptTemplatesResponse200ApplicationJSONResponseBodyItems2Type$outboundSchema;
}

/** @internal */
export const GetAllPromptTemplates2PromptTemplatesResponse200ImageUrl$inboundSchema:
  z.ZodType<
    GetAllPromptTemplates2PromptTemplatesResponse200ImageUrl,
    z.ZodTypeDef,
    unknown
  > = z.object({
    id: z.string().optional(),
    url: z.string(),
    detail: z.string().optional(),
  });

/** @internal */
export type GetAllPromptTemplates2PromptTemplatesResponse200ImageUrl$Outbound =
  {
    id?: string | undefined;
    url: string;
    detail?: string | undefined;
  };

/** @internal */
export const GetAllPromptTemplates2PromptTemplatesResponse200ImageUrl$outboundSchema:
  z.ZodType<
    GetAllPromptTemplates2PromptTemplatesResponse200ImageUrl$Outbound,
    z.ZodTypeDef,
    GetAllPromptTemplates2PromptTemplatesResponse200ImageUrl
  > = z.object({
    id: z.string().optional(),
    url: z.string(),
    detail: z.string().optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPromptTemplates2PromptTemplatesResponse200ImageUrl$ {
  /** @deprecated use `GetAllPromptTemplates2PromptTemplatesResponse200ImageUrl$inboundSchema` instead. */
  export const inboundSchema =
    GetAllPromptTemplates2PromptTemplatesResponse200ImageUrl$inboundSchema;
  /** @deprecated use `GetAllPromptTemplates2PromptTemplatesResponse200ImageUrl$outboundSchema` instead. */
  export const outboundSchema =
    GetAllPromptTemplates2PromptTemplatesResponse200ImageUrl$outboundSchema;
  /** @deprecated use `GetAllPromptTemplates2PromptTemplatesResponse200ImageUrl$Outbound` instead. */
  export type Outbound =
    GetAllPromptTemplates2PromptTemplatesResponse200ImageUrl$Outbound;
}

export function getAllPromptTemplates2PromptTemplatesResponse200ImageUrlToJSON(
  getAllPromptTemplates2PromptTemplatesResponse200ImageUrl:
    GetAllPromptTemplates2PromptTemplatesResponse200ImageUrl,
): string {
  return JSON.stringify(
    GetAllPromptTemplates2PromptTemplatesResponse200ImageUrl$outboundSchema
      .parse(getAllPromptTemplates2PromptTemplatesResponse200ImageUrl),
  );
}

export function getAllPromptTemplates2PromptTemplatesResponse200ImageUrlFromJSON(
  jsonString: string,
): SafeParseResult<
  GetAllPromptTemplates2PromptTemplatesResponse200ImageUrl,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetAllPromptTemplates2PromptTemplatesResponse200ImageUrl$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'GetAllPromptTemplates2PromptTemplatesResponse200ImageUrl' from JSON`,
  );
}

/** @internal */
export const GetAllPromptTemplates2PromptTemplatesResponse2002$inboundSchema:
  z.ZodType<
    GetAllPromptTemplates2PromptTemplatesResponse2002,
    z.ZodTypeDef,
    unknown
  > = z.object({
    type:
      GetAllPromptTemplates2PromptTemplatesResponse200ApplicationJSONResponseBodyItems2Type$inboundSchema,
    image_url: z.lazy(() =>
      GetAllPromptTemplates2PromptTemplatesResponse200ImageUrl$inboundSchema
    ),
  }).transform((v) => {
    return remap$(v, {
      "image_url": "imageUrl",
    });
  });

/** @internal */
export type GetAllPromptTemplates2PromptTemplatesResponse2002$Outbound = {
  type: string;
  image_url: GetAllPromptTemplates2PromptTemplatesResponse200ImageUrl$Outbound;
};

/** @internal */
export const GetAllPromptTemplates2PromptTemplatesResponse2002$outboundSchema:
  z.ZodType<
    GetAllPromptTemplates2PromptTemplatesResponse2002$Outbound,
    z.ZodTypeDef,
    GetAllPromptTemplates2PromptTemplatesResponse2002
  > = z.object({
    type:
      GetAllPromptTemplates2PromptTemplatesResponse200ApplicationJSONResponseBodyItems2Type$outboundSchema,
    imageUrl: z.lazy(() =>
      GetAllPromptTemplates2PromptTemplatesResponse200ImageUrl$outboundSchema
    ),
  }).transform((v) => {
    return remap$(v, {
      imageUrl: "image_url",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPromptTemplates2PromptTemplatesResponse2002$ {
  /** @deprecated use `GetAllPromptTemplates2PromptTemplatesResponse2002$inboundSchema` instead. */
  export const inboundSchema =
    GetAllPromptTemplates2PromptTemplatesResponse2002$inboundSchema;
  /** @deprecated use `GetAllPromptTemplates2PromptTemplatesResponse2002$outboundSchema` instead. */
  export const outboundSchema =
    GetAllPromptTemplates2PromptTemplatesResponse2002$outboundSchema;
  /** @deprecated use `GetAllPromptTemplates2PromptTemplatesResponse2002$Outbound` instead. */
  export type Outbound =
    GetAllPromptTemplates2PromptTemplatesResponse2002$Outbound;
}

export function getAllPromptTemplates2PromptTemplatesResponse2002ToJSON(
  getAllPromptTemplates2PromptTemplatesResponse2002:
    GetAllPromptTemplates2PromptTemplatesResponse2002,
): string {
  return JSON.stringify(
    GetAllPromptTemplates2PromptTemplatesResponse2002$outboundSchema.parse(
      getAllPromptTemplates2PromptTemplatesResponse2002,
    ),
  );
}

export function getAllPromptTemplates2PromptTemplatesResponse2002FromJSON(
  jsonString: string,
): SafeParseResult<
  GetAllPromptTemplates2PromptTemplatesResponse2002,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetAllPromptTemplates2PromptTemplatesResponse2002$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'GetAllPromptTemplates2PromptTemplatesResponse2002' from JSON`,
  );
}

/** @internal */
export const GetAllPromptTemplates2PromptTemplatesResponse200ApplicationJSONResponseBodyItemsType$inboundSchema:
  z.ZodNativeEnum<
    typeof GetAllPromptTemplates2PromptTemplatesResponse200ApplicationJSONResponseBodyItemsType
  > = z.nativeEnum(
    GetAllPromptTemplates2PromptTemplatesResponse200ApplicationJSONResponseBodyItemsType,
  );

/** @internal */
export const GetAllPromptTemplates2PromptTemplatesResponse200ApplicationJSONResponseBodyItemsType$outboundSchema:
  z.ZodNativeEnum<
    typeof GetAllPromptTemplates2PromptTemplatesResponse200ApplicationJSONResponseBodyItemsType
  > =
    GetAllPromptTemplates2PromptTemplatesResponse200ApplicationJSONResponseBodyItemsType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPromptTemplates2PromptTemplatesResponse200ApplicationJSONResponseBodyItemsType$ {
  /** @deprecated use `GetAllPromptTemplates2PromptTemplatesResponse200ApplicationJSONResponseBodyItemsType$inboundSchema` instead. */
  export const inboundSchema =
    GetAllPromptTemplates2PromptTemplatesResponse200ApplicationJSONResponseBodyItemsType$inboundSchema;
  /** @deprecated use `GetAllPromptTemplates2PromptTemplatesResponse200ApplicationJSONResponseBodyItemsType$outboundSchema` instead. */
  export const outboundSchema =
    GetAllPromptTemplates2PromptTemplatesResponse200ApplicationJSONResponseBodyItemsType$outboundSchema;
}

/** @internal */
export const GetAllPromptTemplates2PromptTemplatesResponse2001$inboundSchema:
  z.ZodType<
    GetAllPromptTemplates2PromptTemplatesResponse2001,
    z.ZodTypeDef,
    unknown
  > = z.object({
    type:
      GetAllPromptTemplates2PromptTemplatesResponse200ApplicationJSONResponseBodyItemsType$inboundSchema,
    text: z.string(),
  });

/** @internal */
export type GetAllPromptTemplates2PromptTemplatesResponse2001$Outbound = {
  type: string;
  text: string;
};

/** @internal */
export const GetAllPromptTemplates2PromptTemplatesResponse2001$outboundSchema:
  z.ZodType<
    GetAllPromptTemplates2PromptTemplatesResponse2001$Outbound,
    z.ZodTypeDef,
    GetAllPromptTemplates2PromptTemplatesResponse2001
  > = z.object({
    type:
      GetAllPromptTemplates2PromptTemplatesResponse200ApplicationJSONResponseBodyItemsType$outboundSchema,
    text: z.string(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPromptTemplates2PromptTemplatesResponse2001$ {
  /** @deprecated use `GetAllPromptTemplates2PromptTemplatesResponse2001$inboundSchema` instead. */
  export const inboundSchema =
    GetAllPromptTemplates2PromptTemplatesResponse2001$inboundSchema;
  /** @deprecated use `GetAllPromptTemplates2PromptTemplatesResponse2001$outboundSchema` instead. */
  export const outboundSchema =
    GetAllPromptTemplates2PromptTemplatesResponse2001$outboundSchema;
  /** @deprecated use `GetAllPromptTemplates2PromptTemplatesResponse2001$Outbound` instead. */
  export type Outbound =
    GetAllPromptTemplates2PromptTemplatesResponse2001$Outbound;
}

export function getAllPromptTemplates2PromptTemplatesResponse2001ToJSON(
  getAllPromptTemplates2PromptTemplatesResponse2001:
    GetAllPromptTemplates2PromptTemplatesResponse2001,
): string {
  return JSON.stringify(
    GetAllPromptTemplates2PromptTemplatesResponse2001$outboundSchema.parse(
      getAllPromptTemplates2PromptTemplatesResponse2001,
    ),
  );
}

export function getAllPromptTemplates2PromptTemplatesResponse2001FromJSON(
  jsonString: string,
): SafeParseResult<
  GetAllPromptTemplates2PromptTemplatesResponse2001,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetAllPromptTemplates2PromptTemplatesResponse2001$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'GetAllPromptTemplates2PromptTemplatesResponse2001' from JSON`,
  );
}

/** @internal */
export const GetAllPromptTemplatesContentPromptTemplatesResponse2002$inboundSchema:
  z.ZodType<
    GetAllPromptTemplatesContentPromptTemplatesResponse2002,
    z.ZodTypeDef,
    unknown
  > = z.union([
    z.lazy(() =>
      GetAllPromptTemplates2PromptTemplatesResponse2001$inboundSchema
    ),
    z.lazy(() =>
      GetAllPromptTemplates2PromptTemplatesResponse2002$inboundSchema
    ),
  ]);

/** @internal */
export type GetAllPromptTemplatesContentPromptTemplatesResponse2002$Outbound =
  | GetAllPromptTemplates2PromptTemplatesResponse2001$Outbound
  | GetAllPromptTemplates2PromptTemplatesResponse2002$Outbound;

/** @internal */
export const GetAllPromptTemplatesContentPromptTemplatesResponse2002$outboundSchema:
  z.ZodType<
    GetAllPromptTemplatesContentPromptTemplatesResponse2002$Outbound,
    z.ZodTypeDef,
    GetAllPromptTemplatesContentPromptTemplatesResponse2002
  > = z.union([
    z.lazy(() =>
      GetAllPromptTemplates2PromptTemplatesResponse2001$outboundSchema
    ),
    z.lazy(() =>
      GetAllPromptTemplates2PromptTemplatesResponse2002$outboundSchema
    ),
  ]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPromptTemplatesContentPromptTemplatesResponse2002$ {
  /** @deprecated use `GetAllPromptTemplatesContentPromptTemplatesResponse2002$inboundSchema` instead. */
  export const inboundSchema =
    GetAllPromptTemplatesContentPromptTemplatesResponse2002$inboundSchema;
  /** @deprecated use `GetAllPromptTemplatesContentPromptTemplatesResponse2002$outboundSchema` instead. */
  export const outboundSchema =
    GetAllPromptTemplatesContentPromptTemplatesResponse2002$outboundSchema;
  /** @deprecated use `GetAllPromptTemplatesContentPromptTemplatesResponse2002$Outbound` instead. */
  export type Outbound =
    GetAllPromptTemplatesContentPromptTemplatesResponse2002$Outbound;
}

export function getAllPromptTemplatesContentPromptTemplatesResponse2002ToJSON(
  getAllPromptTemplatesContentPromptTemplatesResponse2002:
    GetAllPromptTemplatesContentPromptTemplatesResponse2002,
): string {
  return JSON.stringify(
    GetAllPromptTemplatesContentPromptTemplatesResponse2002$outboundSchema
      .parse(getAllPromptTemplatesContentPromptTemplatesResponse2002),
  );
}

export function getAllPromptTemplatesContentPromptTemplatesResponse2002FromJSON(
  jsonString: string,
): SafeParseResult<
  GetAllPromptTemplatesContentPromptTemplatesResponse2002,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetAllPromptTemplatesContentPromptTemplatesResponse2002$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'GetAllPromptTemplatesContentPromptTemplatesResponse2002' from JSON`,
  );
}

/** @internal */
export const GetAllPromptTemplatesItemsPromptTemplatesResponseContent$inboundSchema:
  z.ZodType<
    GetAllPromptTemplatesItemsPromptTemplatesResponseContent,
    z.ZodTypeDef,
    unknown
  > = z.union([
    z.string(),
    z.array(z.union([
      z.lazy(() =>
        GetAllPromptTemplates2PromptTemplatesResponse2001$inboundSchema
      ),
      z.lazy(() =>
        GetAllPromptTemplates2PromptTemplatesResponse2002$inboundSchema
      ),
    ])),
  ]);

/** @internal */
export type GetAllPromptTemplatesItemsPromptTemplatesResponseContent$Outbound =
  | string
  | Array<
    | GetAllPromptTemplates2PromptTemplatesResponse2001$Outbound
    | GetAllPromptTemplates2PromptTemplatesResponse2002$Outbound
  >;

/** @internal */
export const GetAllPromptTemplatesItemsPromptTemplatesResponseContent$outboundSchema:
  z.ZodType<
    GetAllPromptTemplatesItemsPromptTemplatesResponseContent$Outbound,
    z.ZodTypeDef,
    GetAllPromptTemplatesItemsPromptTemplatesResponseContent
  > = z.union([
    z.string(),
    z.array(z.union([
      z.lazy(() =>
        GetAllPromptTemplates2PromptTemplatesResponse2001$outboundSchema
      ),
      z.lazy(() =>
        GetAllPromptTemplates2PromptTemplatesResponse2002$outboundSchema
      ),
    ])),
  ]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPromptTemplatesItemsPromptTemplatesResponseContent$ {
  /** @deprecated use `GetAllPromptTemplatesItemsPromptTemplatesResponseContent$inboundSchema` instead. */
  export const inboundSchema =
    GetAllPromptTemplatesItemsPromptTemplatesResponseContent$inboundSchema;
  /** @deprecated use `GetAllPromptTemplatesItemsPromptTemplatesResponseContent$outboundSchema` instead. */
  export const outboundSchema =
    GetAllPromptTemplatesItemsPromptTemplatesResponseContent$outboundSchema;
  /** @deprecated use `GetAllPromptTemplatesItemsPromptTemplatesResponseContent$Outbound` instead. */
  export type Outbound =
    GetAllPromptTemplatesItemsPromptTemplatesResponseContent$Outbound;
}

export function getAllPromptTemplatesItemsPromptTemplatesResponseContentToJSON(
  getAllPromptTemplatesItemsPromptTemplatesResponseContent:
    GetAllPromptTemplatesItemsPromptTemplatesResponseContent,
): string {
  return JSON.stringify(
    GetAllPromptTemplatesItemsPromptTemplatesResponseContent$outboundSchema
      .parse(getAllPromptTemplatesItemsPromptTemplatesResponseContent),
  );
}

export function getAllPromptTemplatesItemsPromptTemplatesResponseContentFromJSON(
  jsonString: string,
): SafeParseResult<
  GetAllPromptTemplatesItemsPromptTemplatesResponseContent,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetAllPromptTemplatesItemsPromptTemplatesResponseContent$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'GetAllPromptTemplatesItemsPromptTemplatesResponseContent' from JSON`,
  );
}

/** @internal */
export const GetAllPromptTemplatesItemsPromptTemplatesResponse200ApplicationJSONResponseBodyType$inboundSchema:
  z.ZodNativeEnum<
    typeof GetAllPromptTemplatesItemsPromptTemplatesResponse200ApplicationJSONResponseBodyType
  > = z.nativeEnum(
    GetAllPromptTemplatesItemsPromptTemplatesResponse200ApplicationJSONResponseBodyType,
  );

/** @internal */
export const GetAllPromptTemplatesItemsPromptTemplatesResponse200ApplicationJSONResponseBodyType$outboundSchema:
  z.ZodNativeEnum<
    typeof GetAllPromptTemplatesItemsPromptTemplatesResponse200ApplicationJSONResponseBodyType
  > =
    GetAllPromptTemplatesItemsPromptTemplatesResponse200ApplicationJSONResponseBodyType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPromptTemplatesItemsPromptTemplatesResponse200ApplicationJSONResponseBodyType$ {
  /** @deprecated use `GetAllPromptTemplatesItemsPromptTemplatesResponse200ApplicationJSONResponseBodyType$inboundSchema` instead. */
  export const inboundSchema =
    GetAllPromptTemplatesItemsPromptTemplatesResponse200ApplicationJSONResponseBodyType$inboundSchema;
  /** @deprecated use `GetAllPromptTemplatesItemsPromptTemplatesResponse200ApplicationJSONResponseBodyType$outboundSchema` instead. */
  export const outboundSchema =
    GetAllPromptTemplatesItemsPromptTemplatesResponse200ApplicationJSONResponseBodyType$outboundSchema;
}

/** @internal */
export const GetAllPromptTemplatesItemsPromptTemplatesResponseFunction$inboundSchema:
  z.ZodType<
    GetAllPromptTemplatesItemsPromptTemplatesResponseFunction,
    z.ZodTypeDef,
    unknown
  > = z.object({
    name: z.string(),
    arguments: z.string(),
  });

/** @internal */
export type GetAllPromptTemplatesItemsPromptTemplatesResponseFunction$Outbound =
  {
    name: string;
    arguments: string;
  };

/** @internal */
export const GetAllPromptTemplatesItemsPromptTemplatesResponseFunction$outboundSchema:
  z.ZodType<
    GetAllPromptTemplatesItemsPromptTemplatesResponseFunction$Outbound,
    z.ZodTypeDef,
    GetAllPromptTemplatesItemsPromptTemplatesResponseFunction
  > = z.object({
    name: z.string(),
    arguments: z.string(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPromptTemplatesItemsPromptTemplatesResponseFunction$ {
  /** @deprecated use `GetAllPromptTemplatesItemsPromptTemplatesResponseFunction$inboundSchema` instead. */
  export const inboundSchema =
    GetAllPromptTemplatesItemsPromptTemplatesResponseFunction$inboundSchema;
  /** @deprecated use `GetAllPromptTemplatesItemsPromptTemplatesResponseFunction$outboundSchema` instead. */
  export const outboundSchema =
    GetAllPromptTemplatesItemsPromptTemplatesResponseFunction$outboundSchema;
  /** @deprecated use `GetAllPromptTemplatesItemsPromptTemplatesResponseFunction$Outbound` instead. */
  export type Outbound =
    GetAllPromptTemplatesItemsPromptTemplatesResponseFunction$Outbound;
}

export function getAllPromptTemplatesItemsPromptTemplatesResponseFunctionToJSON(
  getAllPromptTemplatesItemsPromptTemplatesResponseFunction:
    GetAllPromptTemplatesItemsPromptTemplatesResponseFunction,
): string {
  return JSON.stringify(
    GetAllPromptTemplatesItemsPromptTemplatesResponseFunction$outboundSchema
      .parse(getAllPromptTemplatesItemsPromptTemplatesResponseFunction),
  );
}

export function getAllPromptTemplatesItemsPromptTemplatesResponseFunctionFromJSON(
  jsonString: string,
): SafeParseResult<
  GetAllPromptTemplatesItemsPromptTemplatesResponseFunction,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetAllPromptTemplatesItemsPromptTemplatesResponseFunction$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'GetAllPromptTemplatesItemsPromptTemplatesResponseFunction' from JSON`,
  );
}

/** @internal */
export const GetAllPromptTemplatesItemsPromptTemplatesResponseToolCalls$inboundSchema:
  z.ZodType<
    GetAllPromptTemplatesItemsPromptTemplatesResponseToolCalls,
    z.ZodTypeDef,
    unknown
  > = z.object({
    id: z.string().optional(),
    index: z.number().optional(),
    type:
      GetAllPromptTemplatesItemsPromptTemplatesResponse200ApplicationJSONResponseBodyType$inboundSchema,
    function: z.lazy(() =>
      GetAllPromptTemplatesItemsPromptTemplatesResponseFunction$inboundSchema
    ),
  });

/** @internal */
export type GetAllPromptTemplatesItemsPromptTemplatesResponseToolCalls$Outbound =
  {
    id?: string | undefined;
    index?: number | undefined;
    type: string;
    function:
      GetAllPromptTemplatesItemsPromptTemplatesResponseFunction$Outbound;
  };

/** @internal */
export const GetAllPromptTemplatesItemsPromptTemplatesResponseToolCalls$outboundSchema:
  z.ZodType<
    GetAllPromptTemplatesItemsPromptTemplatesResponseToolCalls$Outbound,
    z.ZodTypeDef,
    GetAllPromptTemplatesItemsPromptTemplatesResponseToolCalls
  > = z.object({
    id: z.string().optional(),
    index: z.number().optional(),
    type:
      GetAllPromptTemplatesItemsPromptTemplatesResponse200ApplicationJSONResponseBodyType$outboundSchema,
    function: z.lazy(() =>
      GetAllPromptTemplatesItemsPromptTemplatesResponseFunction$outboundSchema
    ),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPromptTemplatesItemsPromptTemplatesResponseToolCalls$ {
  /** @deprecated use `GetAllPromptTemplatesItemsPromptTemplatesResponseToolCalls$inboundSchema` instead. */
  export const inboundSchema =
    GetAllPromptTemplatesItemsPromptTemplatesResponseToolCalls$inboundSchema;
  /** @deprecated use `GetAllPromptTemplatesItemsPromptTemplatesResponseToolCalls$outboundSchema` instead. */
  export const outboundSchema =
    GetAllPromptTemplatesItemsPromptTemplatesResponseToolCalls$outboundSchema;
  /** @deprecated use `GetAllPromptTemplatesItemsPromptTemplatesResponseToolCalls$Outbound` instead. */
  export type Outbound =
    GetAllPromptTemplatesItemsPromptTemplatesResponseToolCalls$Outbound;
}

export function getAllPromptTemplatesItemsPromptTemplatesResponseToolCallsToJSON(
  getAllPromptTemplatesItemsPromptTemplatesResponseToolCalls:
    GetAllPromptTemplatesItemsPromptTemplatesResponseToolCalls,
): string {
  return JSON.stringify(
    GetAllPromptTemplatesItemsPromptTemplatesResponseToolCalls$outboundSchema
      .parse(getAllPromptTemplatesItemsPromptTemplatesResponseToolCalls),
  );
}

export function getAllPromptTemplatesItemsPromptTemplatesResponseToolCallsFromJSON(
  jsonString: string,
): SafeParseResult<
  GetAllPromptTemplatesItemsPromptTemplatesResponseToolCalls,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetAllPromptTemplatesItemsPromptTemplatesResponseToolCalls$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'GetAllPromptTemplatesItemsPromptTemplatesResponseToolCalls' from JSON`,
  );
}

/** @internal */
export const GetAllPromptTemplatesItemsPromptTemplatesResponseMessages$inboundSchema:
  z.ZodType<
    GetAllPromptTemplatesItemsPromptTemplatesResponseMessages,
    z.ZodTypeDef,
    unknown
  > = z.object({
    role: GetAllPromptTemplatesItemsPromptTemplatesResponseRole$inboundSchema,
    content: z.union([
      z.string(),
      z.array(z.union([
        z.lazy(() =>
          GetAllPromptTemplates2PromptTemplatesResponse2001$inboundSchema
        ),
        z.lazy(() =>
          GetAllPromptTemplates2PromptTemplatesResponse2002$inboundSchema
        ),
      ])),
    ]),
    tool_calls: z.array(
      z.lazy(() =>
        GetAllPromptTemplatesItemsPromptTemplatesResponseToolCalls$inboundSchema
      ),
    ).optional(),
  }).transform((v) => {
    return remap$(v, {
      "tool_calls": "toolCalls",
    });
  });

/** @internal */
export type GetAllPromptTemplatesItemsPromptTemplatesResponseMessages$Outbound =
  {
    role: string;
    content:
      | string
      | Array<
        | GetAllPromptTemplates2PromptTemplatesResponse2001$Outbound
        | GetAllPromptTemplates2PromptTemplatesResponse2002$Outbound
      >;
    tool_calls?:
      | Array<
        GetAllPromptTemplatesItemsPromptTemplatesResponseToolCalls$Outbound
      >
      | undefined;
  };

/** @internal */
export const GetAllPromptTemplatesItemsPromptTemplatesResponseMessages$outboundSchema:
  z.ZodType<
    GetAllPromptTemplatesItemsPromptTemplatesResponseMessages$Outbound,
    z.ZodTypeDef,
    GetAllPromptTemplatesItemsPromptTemplatesResponseMessages
  > = z.object({
    role: GetAllPromptTemplatesItemsPromptTemplatesResponseRole$outboundSchema,
    content: z.union([
      z.string(),
      z.array(z.union([
        z.lazy(() =>
          GetAllPromptTemplates2PromptTemplatesResponse2001$outboundSchema
        ),
        z.lazy(() =>
          GetAllPromptTemplates2PromptTemplatesResponse2002$outboundSchema
        ),
      ])),
    ]),
    toolCalls: z.array(
      z.lazy(() =>
        GetAllPromptTemplatesItemsPromptTemplatesResponseToolCalls$outboundSchema
      ),
    ).optional(),
  }).transform((v) => {
    return remap$(v, {
      toolCalls: "tool_calls",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPromptTemplatesItemsPromptTemplatesResponseMessages$ {
  /** @deprecated use `GetAllPromptTemplatesItemsPromptTemplatesResponseMessages$inboundSchema` instead. */
  export const inboundSchema =
    GetAllPromptTemplatesItemsPromptTemplatesResponseMessages$inboundSchema;
  /** @deprecated use `GetAllPromptTemplatesItemsPromptTemplatesResponseMessages$outboundSchema` instead. */
  export const outboundSchema =
    GetAllPromptTemplatesItemsPromptTemplatesResponseMessages$outboundSchema;
  /** @deprecated use `GetAllPromptTemplatesItemsPromptTemplatesResponseMessages$Outbound` instead. */
  export type Outbound =
    GetAllPromptTemplatesItemsPromptTemplatesResponseMessages$Outbound;
}

export function getAllPromptTemplatesItemsPromptTemplatesResponseMessagesToJSON(
  getAllPromptTemplatesItemsPromptTemplatesResponseMessages:
    GetAllPromptTemplatesItemsPromptTemplatesResponseMessages,
): string {
  return JSON.stringify(
    GetAllPromptTemplatesItemsPromptTemplatesResponseMessages$outboundSchema
      .parse(getAllPromptTemplatesItemsPromptTemplatesResponseMessages),
  );
}

export function getAllPromptTemplatesItemsPromptTemplatesResponseMessagesFromJSON(
  jsonString: string,
): SafeParseResult<
  GetAllPromptTemplatesItemsPromptTemplatesResponseMessages,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetAllPromptTemplatesItemsPromptTemplatesResponseMessages$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'GetAllPromptTemplatesItemsPromptTemplatesResponseMessages' from JSON`,
  );
}

/** @internal */
export const GetAllPromptTemplatesItemsPromptTemplatesResponsePromptConfig$inboundSchema:
  z.ZodType<
    GetAllPromptTemplatesItemsPromptTemplatesResponsePromptConfig,
    z.ZodTypeDef,
    unknown
  > = z.object({
    stream: z.boolean().optional(),
    model: z.string().optional(),
    model_db_id: z.string().optional(),
    model_type:
      GetAllPromptTemplatesItemsPromptTemplatesResponseModelType$inboundSchema
        .optional(),
    model_parameters: z.lazy(() =>
      GetAllPromptTemplatesItemsPromptTemplatesResponseModelParameters$inboundSchema
    ).optional(),
    provider:
      GetAllPromptTemplatesItemsPromptTemplatesResponseProvider$inboundSchema
        .optional(),
    integration_id: z.nullable(z.string()).optional(),
    version: z.string().optional(),
    messages: z.array(
      z.lazy(() =>
        GetAllPromptTemplatesItemsPromptTemplatesResponseMessages$inboundSchema
      ),
    ),
  }).transform((v) => {
    return remap$(v, {
      "model_db_id": "modelDbId",
      "model_type": "modelType",
      "model_parameters": "modelParameters",
      "integration_id": "integrationId",
    });
  });

/** @internal */
export type GetAllPromptTemplatesItemsPromptTemplatesResponsePromptConfig$Outbound =
  {
    stream?: boolean | undefined;
    model?: string | undefined;
    model_db_id?: string | undefined;
    model_type?: string | undefined;
    model_parameters?:
      | GetAllPromptTemplatesItemsPromptTemplatesResponseModelParameters$Outbound
      | undefined;
    provider?: string | undefined;
    integration_id?: string | null | undefined;
    version?: string | undefined;
    messages: Array<
      GetAllPromptTemplatesItemsPromptTemplatesResponseMessages$Outbound
    >;
  };

/** @internal */
export const GetAllPromptTemplatesItemsPromptTemplatesResponsePromptConfig$outboundSchema:
  z.ZodType<
    GetAllPromptTemplatesItemsPromptTemplatesResponsePromptConfig$Outbound,
    z.ZodTypeDef,
    GetAllPromptTemplatesItemsPromptTemplatesResponsePromptConfig
  > = z.object({
    stream: z.boolean().optional(),
    model: z.string().optional(),
    modelDbId: z.string().optional(),
    modelType:
      GetAllPromptTemplatesItemsPromptTemplatesResponseModelType$outboundSchema
        .optional(),
    modelParameters: z.lazy(() =>
      GetAllPromptTemplatesItemsPromptTemplatesResponseModelParameters$outboundSchema
    ).optional(),
    provider:
      GetAllPromptTemplatesItemsPromptTemplatesResponseProvider$outboundSchema
        .optional(),
    integrationId: z.nullable(z.string()).optional(),
    version: z.string().optional(),
    messages: z.array(
      z.lazy(() =>
        GetAllPromptTemplatesItemsPromptTemplatesResponseMessages$outboundSchema
      ),
    ),
  }).transform((v) => {
    return remap$(v, {
      modelDbId: "model_db_id",
      modelType: "model_type",
      modelParameters: "model_parameters",
      integrationId: "integration_id",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPromptTemplatesItemsPromptTemplatesResponsePromptConfig$ {
  /** @deprecated use `GetAllPromptTemplatesItemsPromptTemplatesResponsePromptConfig$inboundSchema` instead. */
  export const inboundSchema =
    GetAllPromptTemplatesItemsPromptTemplatesResponsePromptConfig$inboundSchema;
  /** @deprecated use `GetAllPromptTemplatesItemsPromptTemplatesResponsePromptConfig$outboundSchema` instead. */
  export const outboundSchema =
    GetAllPromptTemplatesItemsPromptTemplatesResponsePromptConfig$outboundSchema;
  /** @deprecated use `GetAllPromptTemplatesItemsPromptTemplatesResponsePromptConfig$Outbound` instead. */
  export type Outbound =
    GetAllPromptTemplatesItemsPromptTemplatesResponsePromptConfig$Outbound;
}

export function getAllPromptTemplatesItemsPromptTemplatesResponsePromptConfigToJSON(
  getAllPromptTemplatesItemsPromptTemplatesResponsePromptConfig:
    GetAllPromptTemplatesItemsPromptTemplatesResponsePromptConfig,
): string {
  return JSON.stringify(
    GetAllPromptTemplatesItemsPromptTemplatesResponsePromptConfig$outboundSchema
      .parse(getAllPromptTemplatesItemsPromptTemplatesResponsePromptConfig),
  );
}

export function getAllPromptTemplatesItemsPromptTemplatesResponsePromptConfigFromJSON(
  jsonString: string,
): SafeParseResult<
  GetAllPromptTemplatesItemsPromptTemplatesResponsePromptConfig,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetAllPromptTemplatesItemsPromptTemplatesResponsePromptConfig$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'GetAllPromptTemplatesItemsPromptTemplatesResponsePromptConfig' from JSON`,
  );
}

/** @internal */
export const GetAllPromptTemplatesItemsPromptTemplatesResponseMetadata$inboundSchema:
  z.ZodType<
    GetAllPromptTemplatesItemsPromptTemplatesResponseMetadata,
    z.ZodTypeDef,
    unknown
  > = z.object({
    use_cases: z.array(z.string()).optional(),
    language: z.string().optional(),
  }).transform((v) => {
    return remap$(v, {
      "use_cases": "useCases",
    });
  });

/** @internal */
export type GetAllPromptTemplatesItemsPromptTemplatesResponseMetadata$Outbound =
  {
    use_cases?: Array<string> | undefined;
    language?: string | undefined;
  };

/** @internal */
export const GetAllPromptTemplatesItemsPromptTemplatesResponseMetadata$outboundSchema:
  z.ZodType<
    GetAllPromptTemplatesItemsPromptTemplatesResponseMetadata$Outbound,
    z.ZodTypeDef,
    GetAllPromptTemplatesItemsPromptTemplatesResponseMetadata
  > = z.object({
    useCases: z.array(z.string()).optional(),
    language: z.string().optional(),
  }).transform((v) => {
    return remap$(v, {
      useCases: "use_cases",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPromptTemplatesItemsPromptTemplatesResponseMetadata$ {
  /** @deprecated use `GetAllPromptTemplatesItemsPromptTemplatesResponseMetadata$inboundSchema` instead. */
  export const inboundSchema =
    GetAllPromptTemplatesItemsPromptTemplatesResponseMetadata$inboundSchema;
  /** @deprecated use `GetAllPromptTemplatesItemsPromptTemplatesResponseMetadata$outboundSchema` instead. */
  export const outboundSchema =
    GetAllPromptTemplatesItemsPromptTemplatesResponseMetadata$outboundSchema;
  /** @deprecated use `GetAllPromptTemplatesItemsPromptTemplatesResponseMetadata$Outbound` instead. */
  export type Outbound =
    GetAllPromptTemplatesItemsPromptTemplatesResponseMetadata$Outbound;
}

export function getAllPromptTemplatesItemsPromptTemplatesResponseMetadataToJSON(
  getAllPromptTemplatesItemsPromptTemplatesResponseMetadata:
    GetAllPromptTemplatesItemsPromptTemplatesResponseMetadata,
): string {
  return JSON.stringify(
    GetAllPromptTemplatesItemsPromptTemplatesResponseMetadata$outboundSchema
      .parse(getAllPromptTemplatesItemsPromptTemplatesResponseMetadata),
  );
}

export function getAllPromptTemplatesItemsPromptTemplatesResponseMetadataFromJSON(
  jsonString: string,
): SafeParseResult<
  GetAllPromptTemplatesItemsPromptTemplatesResponseMetadata,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetAllPromptTemplatesItemsPromptTemplatesResponseMetadata$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'GetAllPromptTemplatesItemsPromptTemplatesResponseMetadata' from JSON`,
  );
}

/** @internal */
export const ItemsVersions$inboundSchema: z.ZodType<
  ItemsVersions,
  z.ZodTypeDef,
  unknown
> = z.object({
  _id: z.string(),
  created_by_id: z.string(),
  display_name: z.string(),
  updated_by_id: z.string(),
  description: z.nullable(z.string()).optional(),
  prompt_config: z.lazy(() =>
    GetAllPromptTemplatesItemsPromptTemplatesResponsePromptConfig$inboundSchema
  ),
  metadata: z.lazy(() =>
    GetAllPromptTemplatesItemsPromptTemplatesResponseMetadata$inboundSchema
  ),
  commit: z.string(),
  timestamp: z.string(),
}).transform((v) => {
  return remap$(v, {
    "_id": "id",
    "created_by_id": "createdById",
    "display_name": "displayName",
    "updated_by_id": "updatedById",
    "prompt_config": "promptConfig",
  });
});

/** @internal */
export type ItemsVersions$Outbound = {
  _id: string;
  created_by_id: string;
  display_name: string;
  updated_by_id: string;
  description?: string | null | undefined;
  prompt_config:
    GetAllPromptTemplatesItemsPromptTemplatesResponsePromptConfig$Outbound;
  metadata: GetAllPromptTemplatesItemsPromptTemplatesResponseMetadata$Outbound;
  commit: string;
  timestamp: string;
};

/** @internal */
export const ItemsVersions$outboundSchema: z.ZodType<
  ItemsVersions$Outbound,
  z.ZodTypeDef,
  ItemsVersions
> = z.object({
  id: z.string(),
  createdById: z.string(),
  displayName: z.string(),
  updatedById: z.string(),
  description: z.nullable(z.string()).optional(),
  promptConfig: z.lazy(() =>
    GetAllPromptTemplatesItemsPromptTemplatesResponsePromptConfig$outboundSchema
  ),
  metadata: z.lazy(() =>
    GetAllPromptTemplatesItemsPromptTemplatesResponseMetadata$outboundSchema
  ),
  commit: z.string(),
  timestamp: z.string(),
}).transform((v) => {
  return remap$(v, {
    id: "_id",
    createdById: "created_by_id",
    displayName: "display_name",
    updatedById: "updated_by_id",
    promptConfig: "prompt_config",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ItemsVersions$ {
  /** @deprecated use `ItemsVersions$inboundSchema` instead. */
  export const inboundSchema = ItemsVersions$inboundSchema;
  /** @deprecated use `ItemsVersions$outboundSchema` instead. */
  export const outboundSchema = ItemsVersions$outboundSchema;
  /** @deprecated use `ItemsVersions$Outbound` instead. */
  export type Outbound = ItemsVersions$Outbound;
}

export function itemsVersionsToJSON(itemsVersions: ItemsVersions): string {
  return JSON.stringify(ItemsVersions$outboundSchema.parse(itemsVersions));
}

export function itemsVersionsFromJSON(
  jsonString: string,
): SafeParseResult<ItemsVersions, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ItemsVersions$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ItemsVersions' from JSON`,
  );
}

/** @internal */
export const GetAllPromptTemplatesItemsType$inboundSchema: z.ZodNativeEnum<
  typeof GetAllPromptTemplatesItemsType
> = z.nativeEnum(GetAllPromptTemplatesItemsType);

/** @internal */
export const GetAllPromptTemplatesItemsType$outboundSchema: z.ZodNativeEnum<
  typeof GetAllPromptTemplatesItemsType
> = GetAllPromptTemplatesItemsType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPromptTemplatesItemsType$ {
  /** @deprecated use `GetAllPromptTemplatesItemsType$inboundSchema` instead. */
  export const inboundSchema = GetAllPromptTemplatesItemsType$inboundSchema;
  /** @deprecated use `GetAllPromptTemplatesItemsType$outboundSchema` instead. */
  export const outboundSchema = GetAllPromptTemplatesItemsType$outboundSchema;
}

/** @internal */
export const Items2$inboundSchema: z.ZodType<Items2, z.ZodTypeDef, unknown> = z
  .object({
    _id: z.string(),
    owner: z.union([z.string(), GetAllPromptTemplatesOwner2$inboundSchema]),
    domain_id: z.string(),
    created_by_id: z.string(),
    display_name: z.string(),
    updated_by_id: z.string(),
    description: z.nullable(z.string()).optional(),
    prompt_config: z.lazy(() =>
      GetAllPromptTemplatesItemsPromptConfig$inboundSchema
    ),
    metadata: z.lazy(() => GetAllPromptTemplatesItemsMetadata$inboundSchema),
    created: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
    updated: z.string().datetime({ offset: true }).default(
      "2024-11-26T10:00:21.083Z",
    ).transform(v => new Date(v)),
    versions: z.array(z.lazy(() => ItemsVersions$inboundSchema)),
    key: z.string(),
    type: GetAllPromptTemplatesItemsType$inboundSchema,
  }).transform((v) => {
    return remap$(v, {
      "_id": "id",
      "domain_id": "domainId",
      "created_by_id": "createdById",
      "display_name": "displayName",
      "updated_by_id": "updatedById",
      "prompt_config": "promptConfig",
    });
  });

/** @internal */
export type Items2$Outbound = {
  _id: string;
  owner: string | string;
  domain_id: string;
  created_by_id: string;
  display_name: string;
  updated_by_id: string;
  description?: string | null | undefined;
  prompt_config: GetAllPromptTemplatesItemsPromptConfig$Outbound;
  metadata: GetAllPromptTemplatesItemsMetadata$Outbound;
  created?: string | undefined;
  updated: string;
  versions: Array<ItemsVersions$Outbound>;
  key: string;
  type: string;
};

/** @internal */
export const Items2$outboundSchema: z.ZodType<
  Items2$Outbound,
  z.ZodTypeDef,
  Items2
> = z.object({
  id: z.string(),
  owner: z.union([z.string(), GetAllPromptTemplatesOwner2$outboundSchema]),
  domainId: z.string(),
  createdById: z.string(),
  displayName: z.string(),
  updatedById: z.string(),
  description: z.nullable(z.string()).optional(),
  promptConfig: z.lazy(() =>
    GetAllPromptTemplatesItemsPromptConfig$outboundSchema
  ),
  metadata: z.lazy(() => GetAllPromptTemplatesItemsMetadata$outboundSchema),
  created: z.date().transform(v => v.toISOString()).optional(),
  updated: z.date().default(() => new Date("2024-11-26T10:00:21.083Z"))
    .transform(v => v.toISOString()),
  versions: z.array(z.lazy(() => ItemsVersions$outboundSchema)),
  key: z.string(),
  type: GetAllPromptTemplatesItemsType$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    id: "_id",
    domainId: "domain_id",
    createdById: "created_by_id",
    displayName: "display_name",
    updatedById: "updated_by_id",
    promptConfig: "prompt_config",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Items2$ {
  /** @deprecated use `Items2$inboundSchema` instead. */
  export const inboundSchema = Items2$inboundSchema;
  /** @deprecated use `Items2$outboundSchema` instead. */
  export const outboundSchema = Items2$outboundSchema;
  /** @deprecated use `Items2$Outbound` instead. */
  export type Outbound = Items2$Outbound;
}

export function items2ToJSON(items2: Items2): string {
  return JSON.stringify(Items2$outboundSchema.parse(items2));
}

export function items2FromJSON(
  jsonString: string,
): SafeParseResult<Items2, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Items2$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Items2' from JSON`,
  );
}

/** @internal */
export const GetAllPromptTemplatesOwnerPromptTemplatesResponse2$inboundSchema:
  z.ZodNativeEnum<typeof GetAllPromptTemplatesOwnerPromptTemplatesResponse2> = z
    .nativeEnum(GetAllPromptTemplatesOwnerPromptTemplatesResponse2);

/** @internal */
export const GetAllPromptTemplatesOwnerPromptTemplatesResponse2$outboundSchema:
  z.ZodNativeEnum<typeof GetAllPromptTemplatesOwnerPromptTemplatesResponse2> =
    GetAllPromptTemplatesOwnerPromptTemplatesResponse2$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPromptTemplatesOwnerPromptTemplatesResponse2$ {
  /** @deprecated use `GetAllPromptTemplatesOwnerPromptTemplatesResponse2$inboundSchema` instead. */
  export const inboundSchema =
    GetAllPromptTemplatesOwnerPromptTemplatesResponse2$inboundSchema;
  /** @deprecated use `GetAllPromptTemplatesOwnerPromptTemplatesResponse2$outboundSchema` instead. */
  export const outboundSchema =
    GetAllPromptTemplatesOwnerPromptTemplatesResponse2$outboundSchema;
}

/** @internal */
export const GetAllPromptTemplatesItemsPromptTemplatesOwner$inboundSchema:
  z.ZodType<
    GetAllPromptTemplatesItemsPromptTemplatesOwner,
    z.ZodTypeDef,
    unknown
  > = z.union([
    z.string(),
    GetAllPromptTemplatesOwnerPromptTemplatesResponse2$inboundSchema,
  ]);

/** @internal */
export type GetAllPromptTemplatesItemsPromptTemplatesOwner$Outbound =
  | string
  | string;

/** @internal */
export const GetAllPromptTemplatesItemsPromptTemplatesOwner$outboundSchema:
  z.ZodType<
    GetAllPromptTemplatesItemsPromptTemplatesOwner$Outbound,
    z.ZodTypeDef,
    GetAllPromptTemplatesItemsPromptTemplatesOwner
  > = z.union([
    z.string(),
    GetAllPromptTemplatesOwnerPromptTemplatesResponse2$outboundSchema,
  ]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPromptTemplatesItemsPromptTemplatesOwner$ {
  /** @deprecated use `GetAllPromptTemplatesItemsPromptTemplatesOwner$inboundSchema` instead. */
  export const inboundSchema =
    GetAllPromptTemplatesItemsPromptTemplatesOwner$inboundSchema;
  /** @deprecated use `GetAllPromptTemplatesItemsPromptTemplatesOwner$outboundSchema` instead. */
  export const outboundSchema =
    GetAllPromptTemplatesItemsPromptTemplatesOwner$outboundSchema;
  /** @deprecated use `GetAllPromptTemplatesItemsPromptTemplatesOwner$Outbound` instead. */
  export type Outbound =
    GetAllPromptTemplatesItemsPromptTemplatesOwner$Outbound;
}

export function getAllPromptTemplatesItemsPromptTemplatesOwnerToJSON(
  getAllPromptTemplatesItemsPromptTemplatesOwner:
    GetAllPromptTemplatesItemsPromptTemplatesOwner,
): string {
  return JSON.stringify(
    GetAllPromptTemplatesItemsPromptTemplatesOwner$outboundSchema.parse(
      getAllPromptTemplatesItemsPromptTemplatesOwner,
    ),
  );
}

export function getAllPromptTemplatesItemsPromptTemplatesOwnerFromJSON(
  jsonString: string,
): SafeParseResult<
  GetAllPromptTemplatesItemsPromptTemplatesOwner,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetAllPromptTemplatesItemsPromptTemplatesOwner$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'GetAllPromptTemplatesItemsPromptTemplatesOwner' from JSON`,
  );
}

/** @internal */
export const ItemsModelType$inboundSchema: z.ZodNativeEnum<
  typeof ItemsModelType
> = z.nativeEnum(ItemsModelType);

/** @internal */
export const ItemsModelType$outboundSchema: z.ZodNativeEnum<
  typeof ItemsModelType
> = ItemsModelType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ItemsModelType$ {
  /** @deprecated use `ItemsModelType$inboundSchema` instead. */
  export const inboundSchema = ItemsModelType$inboundSchema;
  /** @deprecated use `ItemsModelType$outboundSchema` instead. */
  export const outboundSchema = ItemsModelType$outboundSchema;
}

/** @internal */
export const ItemsFormat$inboundSchema: z.ZodNativeEnum<typeof ItemsFormat> = z
  .nativeEnum(ItemsFormat);

/** @internal */
export const ItemsFormat$outboundSchema: z.ZodNativeEnum<typeof ItemsFormat> =
  ItemsFormat$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ItemsFormat$ {
  /** @deprecated use `ItemsFormat$inboundSchema` instead. */
  export const inboundSchema = ItemsFormat$inboundSchema;
  /** @deprecated use `ItemsFormat$outboundSchema` instead. */
  export const outboundSchema = ItemsFormat$outboundSchema;
}

/** @internal */
export const ItemsQuality$inboundSchema: z.ZodNativeEnum<typeof ItemsQuality> =
  z.nativeEnum(ItemsQuality);

/** @internal */
export const ItemsQuality$outboundSchema: z.ZodNativeEnum<typeof ItemsQuality> =
  ItemsQuality$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ItemsQuality$ {
  /** @deprecated use `ItemsQuality$inboundSchema` instead. */
  export const inboundSchema = ItemsQuality$inboundSchema;
  /** @deprecated use `ItemsQuality$outboundSchema` instead. */
  export const outboundSchema = ItemsQuality$outboundSchema;
}

/** @internal */
export const GetAllPromptTemplatesResponseFormatPromptTemplatesType$inboundSchema:
  z.ZodNativeEnum<
    typeof GetAllPromptTemplatesResponseFormatPromptTemplatesType
  > = z.nativeEnum(GetAllPromptTemplatesResponseFormatPromptTemplatesType);

/** @internal */
export const GetAllPromptTemplatesResponseFormatPromptTemplatesType$outboundSchema:
  z.ZodNativeEnum<
    typeof GetAllPromptTemplatesResponseFormatPromptTemplatesType
  > = GetAllPromptTemplatesResponseFormatPromptTemplatesType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPromptTemplatesResponseFormatPromptTemplatesType$ {
  /** @deprecated use `GetAllPromptTemplatesResponseFormatPromptTemplatesType$inboundSchema` instead. */
  export const inboundSchema =
    GetAllPromptTemplatesResponseFormatPromptTemplatesType$inboundSchema;
  /** @deprecated use `GetAllPromptTemplatesResponseFormatPromptTemplatesType$outboundSchema` instead. */
  export const outboundSchema =
    GetAllPromptTemplatesResponseFormatPromptTemplatesType$outboundSchema;
}

/** @internal */
export const GetAllPromptTemplatesResponseFormat2$inboundSchema: z.ZodType<
  GetAllPromptTemplatesResponseFormat2,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: GetAllPromptTemplatesResponseFormatPromptTemplatesType$inboundSchema,
});

/** @internal */
export type GetAllPromptTemplatesResponseFormat2$Outbound = {
  type: string;
};

/** @internal */
export const GetAllPromptTemplatesResponseFormat2$outboundSchema: z.ZodType<
  GetAllPromptTemplatesResponseFormat2$Outbound,
  z.ZodTypeDef,
  GetAllPromptTemplatesResponseFormat2
> = z.object({
  type: GetAllPromptTemplatesResponseFormatPromptTemplatesType$outboundSchema,
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPromptTemplatesResponseFormat2$ {
  /** @deprecated use `GetAllPromptTemplatesResponseFormat2$inboundSchema` instead. */
  export const inboundSchema =
    GetAllPromptTemplatesResponseFormat2$inboundSchema;
  /** @deprecated use `GetAllPromptTemplatesResponseFormat2$outboundSchema` instead. */
  export const outboundSchema =
    GetAllPromptTemplatesResponseFormat2$outboundSchema;
  /** @deprecated use `GetAllPromptTemplatesResponseFormat2$Outbound` instead. */
  export type Outbound = GetAllPromptTemplatesResponseFormat2$Outbound;
}

export function getAllPromptTemplatesResponseFormat2ToJSON(
  getAllPromptTemplatesResponseFormat2: GetAllPromptTemplatesResponseFormat2,
): string {
  return JSON.stringify(
    GetAllPromptTemplatesResponseFormat2$outboundSchema.parse(
      getAllPromptTemplatesResponseFormat2,
    ),
  );
}

export function getAllPromptTemplatesResponseFormat2FromJSON(
  jsonString: string,
): SafeParseResult<GetAllPromptTemplatesResponseFormat2, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      GetAllPromptTemplatesResponseFormat2$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetAllPromptTemplatesResponseFormat2' from JSON`,
  );
}

/** @internal */
export const GetAllPromptTemplatesResponseFormatType$inboundSchema:
  z.ZodNativeEnum<typeof GetAllPromptTemplatesResponseFormatType> = z
    .nativeEnum(GetAllPromptTemplatesResponseFormatType);

/** @internal */
export const GetAllPromptTemplatesResponseFormatType$outboundSchema:
  z.ZodNativeEnum<typeof GetAllPromptTemplatesResponseFormatType> =
    GetAllPromptTemplatesResponseFormatType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPromptTemplatesResponseFormatType$ {
  /** @deprecated use `GetAllPromptTemplatesResponseFormatType$inboundSchema` instead. */
  export const inboundSchema =
    GetAllPromptTemplatesResponseFormatType$inboundSchema;
  /** @deprecated use `GetAllPromptTemplatesResponseFormatType$outboundSchema` instead. */
  export const outboundSchema =
    GetAllPromptTemplatesResponseFormatType$outboundSchema;
}

/** @internal */
export const GetAllPromptTemplatesResponseFormatJsonSchema$inboundSchema:
  z.ZodType<
    GetAllPromptTemplatesResponseFormatJsonSchema,
    z.ZodTypeDef,
    unknown
  > = z.object({
    name: z.string(),
    strict: z.boolean(),
    schema: z.record(z.any()),
  });

/** @internal */
export type GetAllPromptTemplatesResponseFormatJsonSchema$Outbound = {
  name: string;
  strict: boolean;
  schema: { [k: string]: any };
};

/** @internal */
export const GetAllPromptTemplatesResponseFormatJsonSchema$outboundSchema:
  z.ZodType<
    GetAllPromptTemplatesResponseFormatJsonSchema$Outbound,
    z.ZodTypeDef,
    GetAllPromptTemplatesResponseFormatJsonSchema
  > = z.object({
    name: z.string(),
    strict: z.boolean(),
    schema: z.record(z.any()),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPromptTemplatesResponseFormatJsonSchema$ {
  /** @deprecated use `GetAllPromptTemplatesResponseFormatJsonSchema$inboundSchema` instead. */
  export const inboundSchema =
    GetAllPromptTemplatesResponseFormatJsonSchema$inboundSchema;
  /** @deprecated use `GetAllPromptTemplatesResponseFormatJsonSchema$outboundSchema` instead. */
  export const outboundSchema =
    GetAllPromptTemplatesResponseFormatJsonSchema$outboundSchema;
  /** @deprecated use `GetAllPromptTemplatesResponseFormatJsonSchema$Outbound` instead. */
  export type Outbound = GetAllPromptTemplatesResponseFormatJsonSchema$Outbound;
}

export function getAllPromptTemplatesResponseFormatJsonSchemaToJSON(
  getAllPromptTemplatesResponseFormatJsonSchema:
    GetAllPromptTemplatesResponseFormatJsonSchema,
): string {
  return JSON.stringify(
    GetAllPromptTemplatesResponseFormatJsonSchema$outboundSchema.parse(
      getAllPromptTemplatesResponseFormatJsonSchema,
    ),
  );
}

export function getAllPromptTemplatesResponseFormatJsonSchemaFromJSON(
  jsonString: string,
): SafeParseResult<
  GetAllPromptTemplatesResponseFormatJsonSchema,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetAllPromptTemplatesResponseFormatJsonSchema$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'GetAllPromptTemplatesResponseFormatJsonSchema' from JSON`,
  );
}

/** @internal */
export const GetAllPromptTemplatesResponseFormat1$inboundSchema: z.ZodType<
  GetAllPromptTemplatesResponseFormat1,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: GetAllPromptTemplatesResponseFormatType$inboundSchema,
  json_schema: z.lazy(() =>
    GetAllPromptTemplatesResponseFormatJsonSchema$inboundSchema
  ),
}).transform((v) => {
  return remap$(v, {
    "json_schema": "jsonSchema",
  });
});

/** @internal */
export type GetAllPromptTemplatesResponseFormat1$Outbound = {
  type: string;
  json_schema: GetAllPromptTemplatesResponseFormatJsonSchema$Outbound;
};

/** @internal */
export const GetAllPromptTemplatesResponseFormat1$outboundSchema: z.ZodType<
  GetAllPromptTemplatesResponseFormat1$Outbound,
  z.ZodTypeDef,
  GetAllPromptTemplatesResponseFormat1
> = z.object({
  type: GetAllPromptTemplatesResponseFormatType$outboundSchema,
  jsonSchema: z.lazy(() =>
    GetAllPromptTemplatesResponseFormatJsonSchema$outboundSchema
  ),
}).transform((v) => {
  return remap$(v, {
    jsonSchema: "json_schema",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPromptTemplatesResponseFormat1$ {
  /** @deprecated use `GetAllPromptTemplatesResponseFormat1$inboundSchema` instead. */
  export const inboundSchema =
    GetAllPromptTemplatesResponseFormat1$inboundSchema;
  /** @deprecated use `GetAllPromptTemplatesResponseFormat1$outboundSchema` instead. */
  export const outboundSchema =
    GetAllPromptTemplatesResponseFormat1$outboundSchema;
  /** @deprecated use `GetAllPromptTemplatesResponseFormat1$Outbound` instead. */
  export type Outbound = GetAllPromptTemplatesResponseFormat1$Outbound;
}

export function getAllPromptTemplatesResponseFormat1ToJSON(
  getAllPromptTemplatesResponseFormat1: GetAllPromptTemplatesResponseFormat1,
): string {
  return JSON.stringify(
    GetAllPromptTemplatesResponseFormat1$outboundSchema.parse(
      getAllPromptTemplatesResponseFormat1,
    ),
  );
}

export function getAllPromptTemplatesResponseFormat1FromJSON(
  jsonString: string,
): SafeParseResult<GetAllPromptTemplatesResponseFormat1, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      GetAllPromptTemplatesResponseFormat1$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetAllPromptTemplatesResponseFormat1' from JSON`,
  );
}

/** @internal */
export const ItemsResponseFormat$inboundSchema: z.ZodType<
  ItemsResponseFormat,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => GetAllPromptTemplatesResponseFormat2$inboundSchema),
  z.lazy(() => GetAllPromptTemplatesResponseFormat1$inboundSchema),
]);

/** @internal */
export type ItemsResponseFormat$Outbound =
  | GetAllPromptTemplatesResponseFormat2$Outbound
  | GetAllPromptTemplatesResponseFormat1$Outbound;

/** @internal */
export const ItemsResponseFormat$outboundSchema: z.ZodType<
  ItemsResponseFormat$Outbound,
  z.ZodTypeDef,
  ItemsResponseFormat
> = z.union([
  z.lazy(() => GetAllPromptTemplatesResponseFormat2$outboundSchema),
  z.lazy(() => GetAllPromptTemplatesResponseFormat1$outboundSchema),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ItemsResponseFormat$ {
  /** @deprecated use `ItemsResponseFormat$inboundSchema` instead. */
  export const inboundSchema = ItemsResponseFormat$inboundSchema;
  /** @deprecated use `ItemsResponseFormat$outboundSchema` instead. */
  export const outboundSchema = ItemsResponseFormat$outboundSchema;
  /** @deprecated use `ItemsResponseFormat$Outbound` instead. */
  export type Outbound = ItemsResponseFormat$Outbound;
}

export function itemsResponseFormatToJSON(
  itemsResponseFormat: ItemsResponseFormat,
): string {
  return JSON.stringify(
    ItemsResponseFormat$outboundSchema.parse(itemsResponseFormat),
  );
}

export function itemsResponseFormatFromJSON(
  jsonString: string,
): SafeParseResult<ItemsResponseFormat, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ItemsResponseFormat$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ItemsResponseFormat' from JSON`,
  );
}

/** @internal */
export const ItemsPhotoRealVersion$inboundSchema: z.ZodNativeEnum<
  typeof ItemsPhotoRealVersion
> = z.nativeEnum(ItemsPhotoRealVersion);

/** @internal */
export const ItemsPhotoRealVersion$outboundSchema: z.ZodNativeEnum<
  typeof ItemsPhotoRealVersion
> = ItemsPhotoRealVersion$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ItemsPhotoRealVersion$ {
  /** @deprecated use `ItemsPhotoRealVersion$inboundSchema` instead. */
  export const inboundSchema = ItemsPhotoRealVersion$inboundSchema;
  /** @deprecated use `ItemsPhotoRealVersion$outboundSchema` instead. */
  export const outboundSchema = ItemsPhotoRealVersion$outboundSchema;
}

/** @internal */
export const ItemsEncodingFormat$inboundSchema: z.ZodNativeEnum<
  typeof ItemsEncodingFormat
> = z.nativeEnum(ItemsEncodingFormat);

/** @internal */
export const ItemsEncodingFormat$outboundSchema: z.ZodNativeEnum<
  typeof ItemsEncodingFormat
> = ItemsEncodingFormat$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ItemsEncodingFormat$ {
  /** @deprecated use `ItemsEncodingFormat$inboundSchema` instead. */
  export const inboundSchema = ItemsEncodingFormat$inboundSchema;
  /** @deprecated use `ItemsEncodingFormat$outboundSchema` instead. */
  export const outboundSchema = ItemsEncodingFormat$outboundSchema;
}

/** @internal */
export const ItemsModelParameters$inboundSchema: z.ZodType<
  ItemsModelParameters,
  z.ZodTypeDef,
  unknown
> = z.object({
  temperature: z.number().optional(),
  maxTokens: z.number().optional(),
  topK: z.number().optional(),
  topP: z.number().optional(),
  frequencyPenalty: z.number().optional(),
  presencePenalty: z.number().optional(),
  numImages: z.number().optional(),
  seed: z.number().optional(),
  format: ItemsFormat$inboundSchema.optional(),
  dimensions: z.string().optional(),
  quality: ItemsQuality$inboundSchema.optional(),
  style: z.string().optional(),
  responseFormat: z.nullable(
    z.union([
      z.lazy(() => GetAllPromptTemplatesResponseFormat2$inboundSchema),
      z.lazy(() => GetAllPromptTemplatesResponseFormat1$inboundSchema),
    ]),
  ).optional(),
  photoRealVersion: ItemsPhotoRealVersion$inboundSchema.optional(),
  encoding_format: ItemsEncodingFormat$inboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    "encoding_format": "encodingFormat",
  });
});

/** @internal */
export type ItemsModelParameters$Outbound = {
  temperature?: number | undefined;
  maxTokens?: number | undefined;
  topK?: number | undefined;
  topP?: number | undefined;
  frequencyPenalty?: number | undefined;
  presencePenalty?: number | undefined;
  numImages?: number | undefined;
  seed?: number | undefined;
  format?: string | undefined;
  dimensions?: string | undefined;
  quality?: string | undefined;
  style?: string | undefined;
  responseFormat?:
    | GetAllPromptTemplatesResponseFormat2$Outbound
    | GetAllPromptTemplatesResponseFormat1$Outbound
    | null
    | undefined;
  photoRealVersion?: string | undefined;
  encoding_format?: string | undefined;
};

/** @internal */
export const ItemsModelParameters$outboundSchema: z.ZodType<
  ItemsModelParameters$Outbound,
  z.ZodTypeDef,
  ItemsModelParameters
> = z.object({
  temperature: z.number().optional(),
  maxTokens: z.number().optional(),
  topK: z.number().optional(),
  topP: z.number().optional(),
  frequencyPenalty: z.number().optional(),
  presencePenalty: z.number().optional(),
  numImages: z.number().optional(),
  seed: z.number().optional(),
  format: ItemsFormat$outboundSchema.optional(),
  dimensions: z.string().optional(),
  quality: ItemsQuality$outboundSchema.optional(),
  style: z.string().optional(),
  responseFormat: z.nullable(
    z.union([
      z.lazy(() => GetAllPromptTemplatesResponseFormat2$outboundSchema),
      z.lazy(() => GetAllPromptTemplatesResponseFormat1$outboundSchema),
    ]),
  ).optional(),
  photoRealVersion: ItemsPhotoRealVersion$outboundSchema.optional(),
  encodingFormat: ItemsEncodingFormat$outboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    encodingFormat: "encoding_format",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ItemsModelParameters$ {
  /** @deprecated use `ItemsModelParameters$inboundSchema` instead. */
  export const inboundSchema = ItemsModelParameters$inboundSchema;
  /** @deprecated use `ItemsModelParameters$outboundSchema` instead. */
  export const outboundSchema = ItemsModelParameters$outboundSchema;
  /** @deprecated use `ItemsModelParameters$Outbound` instead. */
  export type Outbound = ItemsModelParameters$Outbound;
}

export function itemsModelParametersToJSON(
  itemsModelParameters: ItemsModelParameters,
): string {
  return JSON.stringify(
    ItemsModelParameters$outboundSchema.parse(itemsModelParameters),
  );
}

export function itemsModelParametersFromJSON(
  jsonString: string,
): SafeParseResult<ItemsModelParameters, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ItemsModelParameters$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ItemsModelParameters' from JSON`,
  );
}

/** @internal */
export const ItemsProvider$inboundSchema: z.ZodNativeEnum<
  typeof ItemsProvider
> = z.nativeEnum(ItemsProvider);

/** @internal */
export const ItemsProvider$outboundSchema: z.ZodNativeEnum<
  typeof ItemsProvider
> = ItemsProvider$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ItemsProvider$ {
  /** @deprecated use `ItemsProvider$inboundSchema` instead. */
  export const inboundSchema = ItemsProvider$inboundSchema;
  /** @deprecated use `ItemsProvider$outboundSchema` instead. */
  export const outboundSchema = ItemsProvider$outboundSchema;
}

/** @internal */
export const ItemsRole$inboundSchema: z.ZodNativeEnum<typeof ItemsRole> = z
  .nativeEnum(ItemsRole);

/** @internal */
export const ItemsRole$outboundSchema: z.ZodNativeEnum<typeof ItemsRole> =
  ItemsRole$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ItemsRole$ {
  /** @deprecated use `ItemsRole$inboundSchema` instead. */
  export const inboundSchema = ItemsRole$inboundSchema;
  /** @deprecated use `ItemsRole$outboundSchema` instead. */
  export const outboundSchema = ItemsRole$outboundSchema;
}

/** @internal */
export const GetAllPromptTemplates2PromptTemplatesType$inboundSchema:
  z.ZodNativeEnum<typeof GetAllPromptTemplates2PromptTemplatesType> = z
    .nativeEnum(GetAllPromptTemplates2PromptTemplatesType);

/** @internal */
export const GetAllPromptTemplates2PromptTemplatesType$outboundSchema:
  z.ZodNativeEnum<typeof GetAllPromptTemplates2PromptTemplatesType> =
    GetAllPromptTemplates2PromptTemplatesType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPromptTemplates2PromptTemplatesType$ {
  /** @deprecated use `GetAllPromptTemplates2PromptTemplatesType$inboundSchema` instead. */
  export const inboundSchema =
    GetAllPromptTemplates2PromptTemplatesType$inboundSchema;
  /** @deprecated use `GetAllPromptTemplates2PromptTemplatesType$outboundSchema` instead. */
  export const outboundSchema =
    GetAllPromptTemplates2PromptTemplatesType$outboundSchema;
}

/** @internal */
export const GetAllPromptTemplates2ImageUrl$inboundSchema: z.ZodType<
  GetAllPromptTemplates2ImageUrl,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string().optional(),
  url: z.string(),
  detail: z.string().optional(),
});

/** @internal */
export type GetAllPromptTemplates2ImageUrl$Outbound = {
  id?: string | undefined;
  url: string;
  detail?: string | undefined;
};

/** @internal */
export const GetAllPromptTemplates2ImageUrl$outboundSchema: z.ZodType<
  GetAllPromptTemplates2ImageUrl$Outbound,
  z.ZodTypeDef,
  GetAllPromptTemplates2ImageUrl
> = z.object({
  id: z.string().optional(),
  url: z.string(),
  detail: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPromptTemplates2ImageUrl$ {
  /** @deprecated use `GetAllPromptTemplates2ImageUrl$inboundSchema` instead. */
  export const inboundSchema = GetAllPromptTemplates2ImageUrl$inboundSchema;
  /** @deprecated use `GetAllPromptTemplates2ImageUrl$outboundSchema` instead. */
  export const outboundSchema = GetAllPromptTemplates2ImageUrl$outboundSchema;
  /** @deprecated use `GetAllPromptTemplates2ImageUrl$Outbound` instead. */
  export type Outbound = GetAllPromptTemplates2ImageUrl$Outbound;
}

export function getAllPromptTemplates2ImageUrlToJSON(
  getAllPromptTemplates2ImageUrl: GetAllPromptTemplates2ImageUrl,
): string {
  return JSON.stringify(
    GetAllPromptTemplates2ImageUrl$outboundSchema.parse(
      getAllPromptTemplates2ImageUrl,
    ),
  );
}

export function getAllPromptTemplates2ImageUrlFromJSON(
  jsonString: string,
): SafeParseResult<GetAllPromptTemplates2ImageUrl, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetAllPromptTemplates2ImageUrl$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetAllPromptTemplates2ImageUrl' from JSON`,
  );
}

/** @internal */
export const GetAllPromptTemplates22$inboundSchema: z.ZodType<
  GetAllPromptTemplates22,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: GetAllPromptTemplates2PromptTemplatesType$inboundSchema,
  image_url: z.lazy(() => GetAllPromptTemplates2ImageUrl$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "image_url": "imageUrl",
  });
});

/** @internal */
export type GetAllPromptTemplates22$Outbound = {
  type: string;
  image_url: GetAllPromptTemplates2ImageUrl$Outbound;
};

/** @internal */
export const GetAllPromptTemplates22$outboundSchema: z.ZodType<
  GetAllPromptTemplates22$Outbound,
  z.ZodTypeDef,
  GetAllPromptTemplates22
> = z.object({
  type: GetAllPromptTemplates2PromptTemplatesType$outboundSchema,
  imageUrl: z.lazy(() => GetAllPromptTemplates2ImageUrl$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    imageUrl: "image_url",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPromptTemplates22$ {
  /** @deprecated use `GetAllPromptTemplates22$inboundSchema` instead. */
  export const inboundSchema = GetAllPromptTemplates22$inboundSchema;
  /** @deprecated use `GetAllPromptTemplates22$outboundSchema` instead. */
  export const outboundSchema = GetAllPromptTemplates22$outboundSchema;
  /** @deprecated use `GetAllPromptTemplates22$Outbound` instead. */
  export type Outbound = GetAllPromptTemplates22$Outbound;
}

export function getAllPromptTemplates22ToJSON(
  getAllPromptTemplates22: GetAllPromptTemplates22,
): string {
  return JSON.stringify(
    GetAllPromptTemplates22$outboundSchema.parse(getAllPromptTemplates22),
  );
}

export function getAllPromptTemplates22FromJSON(
  jsonString: string,
): SafeParseResult<GetAllPromptTemplates22, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetAllPromptTemplates22$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetAllPromptTemplates22' from JSON`,
  );
}

/** @internal */
export const GetAllPromptTemplates2Type$inboundSchema: z.ZodNativeEnum<
  typeof GetAllPromptTemplates2Type
> = z.nativeEnum(GetAllPromptTemplates2Type);

/** @internal */
export const GetAllPromptTemplates2Type$outboundSchema: z.ZodNativeEnum<
  typeof GetAllPromptTemplates2Type
> = GetAllPromptTemplates2Type$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPromptTemplates2Type$ {
  /** @deprecated use `GetAllPromptTemplates2Type$inboundSchema` instead. */
  export const inboundSchema = GetAllPromptTemplates2Type$inboundSchema;
  /** @deprecated use `GetAllPromptTemplates2Type$outboundSchema` instead. */
  export const outboundSchema = GetAllPromptTemplates2Type$outboundSchema;
}

/** @internal */
export const GetAllPromptTemplates21$inboundSchema: z.ZodType<
  GetAllPromptTemplates21,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: GetAllPromptTemplates2Type$inboundSchema,
  text: z.string(),
});

/** @internal */
export type GetAllPromptTemplates21$Outbound = {
  type: string;
  text: string;
};

/** @internal */
export const GetAllPromptTemplates21$outboundSchema: z.ZodType<
  GetAllPromptTemplates21$Outbound,
  z.ZodTypeDef,
  GetAllPromptTemplates21
> = z.object({
  type: GetAllPromptTemplates2Type$outboundSchema,
  text: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPromptTemplates21$ {
  /** @deprecated use `GetAllPromptTemplates21$inboundSchema` instead. */
  export const inboundSchema = GetAllPromptTemplates21$inboundSchema;
  /** @deprecated use `GetAllPromptTemplates21$outboundSchema` instead. */
  export const outboundSchema = GetAllPromptTemplates21$outboundSchema;
  /** @deprecated use `GetAllPromptTemplates21$Outbound` instead. */
  export type Outbound = GetAllPromptTemplates21$Outbound;
}

export function getAllPromptTemplates21ToJSON(
  getAllPromptTemplates21: GetAllPromptTemplates21,
): string {
  return JSON.stringify(
    GetAllPromptTemplates21$outboundSchema.parse(getAllPromptTemplates21),
  );
}

export function getAllPromptTemplates21FromJSON(
  jsonString: string,
): SafeParseResult<GetAllPromptTemplates21, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetAllPromptTemplates21$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetAllPromptTemplates21' from JSON`,
  );
}

/** @internal */
export const GetAllPromptTemplatesContent2$inboundSchema: z.ZodType<
  GetAllPromptTemplatesContent2,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => GetAllPromptTemplates21$inboundSchema),
  z.lazy(() => GetAllPromptTemplates22$inboundSchema),
]);

/** @internal */
export type GetAllPromptTemplatesContent2$Outbound =
  | GetAllPromptTemplates21$Outbound
  | GetAllPromptTemplates22$Outbound;

/** @internal */
export const GetAllPromptTemplatesContent2$outboundSchema: z.ZodType<
  GetAllPromptTemplatesContent2$Outbound,
  z.ZodTypeDef,
  GetAllPromptTemplatesContent2
> = z.union([
  z.lazy(() => GetAllPromptTemplates21$outboundSchema),
  z.lazy(() => GetAllPromptTemplates22$outboundSchema),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPromptTemplatesContent2$ {
  /** @deprecated use `GetAllPromptTemplatesContent2$inboundSchema` instead. */
  export const inboundSchema = GetAllPromptTemplatesContent2$inboundSchema;
  /** @deprecated use `GetAllPromptTemplatesContent2$outboundSchema` instead. */
  export const outboundSchema = GetAllPromptTemplatesContent2$outboundSchema;
  /** @deprecated use `GetAllPromptTemplatesContent2$Outbound` instead. */
  export type Outbound = GetAllPromptTemplatesContent2$Outbound;
}

export function getAllPromptTemplatesContent2ToJSON(
  getAllPromptTemplatesContent2: GetAllPromptTemplatesContent2,
): string {
  return JSON.stringify(
    GetAllPromptTemplatesContent2$outboundSchema.parse(
      getAllPromptTemplatesContent2,
    ),
  );
}

export function getAllPromptTemplatesContent2FromJSON(
  jsonString: string,
): SafeParseResult<GetAllPromptTemplatesContent2, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetAllPromptTemplatesContent2$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetAllPromptTemplatesContent2' from JSON`,
  );
}

/** @internal */
export const ItemsContent$inboundSchema: z.ZodType<
  ItemsContent,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.string(),
  z.array(z.union([
    z.lazy(() => GetAllPromptTemplates21$inboundSchema),
    z.lazy(() => GetAllPromptTemplates22$inboundSchema),
  ])),
]);

/** @internal */
export type ItemsContent$Outbound =
  | string
  | Array<GetAllPromptTemplates21$Outbound | GetAllPromptTemplates22$Outbound>;

/** @internal */
export const ItemsContent$outboundSchema: z.ZodType<
  ItemsContent$Outbound,
  z.ZodTypeDef,
  ItemsContent
> = z.union([
  z.string(),
  z.array(z.union([
    z.lazy(() => GetAllPromptTemplates21$outboundSchema),
    z.lazy(() => GetAllPromptTemplates22$outboundSchema),
  ])),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ItemsContent$ {
  /** @deprecated use `ItemsContent$inboundSchema` instead. */
  export const inboundSchema = ItemsContent$inboundSchema;
  /** @deprecated use `ItemsContent$outboundSchema` instead. */
  export const outboundSchema = ItemsContent$outboundSchema;
  /** @deprecated use `ItemsContent$Outbound` instead. */
  export type Outbound = ItemsContent$Outbound;
}

export function itemsContentToJSON(itemsContent: ItemsContent): string {
  return JSON.stringify(ItemsContent$outboundSchema.parse(itemsContent));
}

export function itemsContentFromJSON(
  jsonString: string,
): SafeParseResult<ItemsContent, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ItemsContent$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ItemsContent' from JSON`,
  );
}

/** @internal */
export const GetAllPromptTemplatesItemsPromptTemplatesResponseType$inboundSchema:
  z.ZodNativeEnum<
    typeof GetAllPromptTemplatesItemsPromptTemplatesResponseType
  > = z.nativeEnum(GetAllPromptTemplatesItemsPromptTemplatesResponseType);

/** @internal */
export const GetAllPromptTemplatesItemsPromptTemplatesResponseType$outboundSchema:
  z.ZodNativeEnum<
    typeof GetAllPromptTemplatesItemsPromptTemplatesResponseType
  > = GetAllPromptTemplatesItemsPromptTemplatesResponseType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPromptTemplatesItemsPromptTemplatesResponseType$ {
  /** @deprecated use `GetAllPromptTemplatesItemsPromptTemplatesResponseType$inboundSchema` instead. */
  export const inboundSchema =
    GetAllPromptTemplatesItemsPromptTemplatesResponseType$inboundSchema;
  /** @deprecated use `GetAllPromptTemplatesItemsPromptTemplatesResponseType$outboundSchema` instead. */
  export const outboundSchema =
    GetAllPromptTemplatesItemsPromptTemplatesResponseType$outboundSchema;
}

/** @internal */
export const ItemsFunction$inboundSchema: z.ZodType<
  ItemsFunction,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.string(),
  arguments: z.string(),
});

/** @internal */
export type ItemsFunction$Outbound = {
  name: string;
  arguments: string;
};

/** @internal */
export const ItemsFunction$outboundSchema: z.ZodType<
  ItemsFunction$Outbound,
  z.ZodTypeDef,
  ItemsFunction
> = z.object({
  name: z.string(),
  arguments: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ItemsFunction$ {
  /** @deprecated use `ItemsFunction$inboundSchema` instead. */
  export const inboundSchema = ItemsFunction$inboundSchema;
  /** @deprecated use `ItemsFunction$outboundSchema` instead. */
  export const outboundSchema = ItemsFunction$outboundSchema;
  /** @deprecated use `ItemsFunction$Outbound` instead. */
  export type Outbound = ItemsFunction$Outbound;
}

export function itemsFunctionToJSON(itemsFunction: ItemsFunction): string {
  return JSON.stringify(ItemsFunction$outboundSchema.parse(itemsFunction));
}

export function itemsFunctionFromJSON(
  jsonString: string,
): SafeParseResult<ItemsFunction, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ItemsFunction$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ItemsFunction' from JSON`,
  );
}

/** @internal */
export const ItemsToolCalls$inboundSchema: z.ZodType<
  ItemsToolCalls,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string().optional(),
  index: z.number().optional(),
  type: GetAllPromptTemplatesItemsPromptTemplatesResponseType$inboundSchema,
  function: z.lazy(() => ItemsFunction$inboundSchema),
});

/** @internal */
export type ItemsToolCalls$Outbound = {
  id?: string | undefined;
  index?: number | undefined;
  type: string;
  function: ItemsFunction$Outbound;
};

/** @internal */
export const ItemsToolCalls$outboundSchema: z.ZodType<
  ItemsToolCalls$Outbound,
  z.ZodTypeDef,
  ItemsToolCalls
> = z.object({
  id: z.string().optional(),
  index: z.number().optional(),
  type: GetAllPromptTemplatesItemsPromptTemplatesResponseType$outboundSchema,
  function: z.lazy(() => ItemsFunction$outboundSchema),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ItemsToolCalls$ {
  /** @deprecated use `ItemsToolCalls$inboundSchema` instead. */
  export const inboundSchema = ItemsToolCalls$inboundSchema;
  /** @deprecated use `ItemsToolCalls$outboundSchema` instead. */
  export const outboundSchema = ItemsToolCalls$outboundSchema;
  /** @deprecated use `ItemsToolCalls$Outbound` instead. */
  export type Outbound = ItemsToolCalls$Outbound;
}

export function itemsToolCallsToJSON(itemsToolCalls: ItemsToolCalls): string {
  return JSON.stringify(ItemsToolCalls$outboundSchema.parse(itemsToolCalls));
}

export function itemsToolCallsFromJSON(
  jsonString: string,
): SafeParseResult<ItemsToolCalls, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ItemsToolCalls$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ItemsToolCalls' from JSON`,
  );
}

/** @internal */
export const ItemsMessages$inboundSchema: z.ZodType<
  ItemsMessages,
  z.ZodTypeDef,
  unknown
> = z.object({
  role: ItemsRole$inboundSchema,
  content: z.union([
    z.string(),
    z.array(z.union([
      z.lazy(() => GetAllPromptTemplates21$inboundSchema),
      z.lazy(() => GetAllPromptTemplates22$inboundSchema),
    ])),
  ]),
  tool_calls: z.array(z.lazy(() => ItemsToolCalls$inboundSchema)).optional(),
}).transform((v) => {
  return remap$(v, {
    "tool_calls": "toolCalls",
  });
});

/** @internal */
export type ItemsMessages$Outbound = {
  role: string;
  content:
    | string
    | Array<
      GetAllPromptTemplates21$Outbound | GetAllPromptTemplates22$Outbound
    >;
  tool_calls?: Array<ItemsToolCalls$Outbound> | undefined;
};

/** @internal */
export const ItemsMessages$outboundSchema: z.ZodType<
  ItemsMessages$Outbound,
  z.ZodTypeDef,
  ItemsMessages
> = z.object({
  role: ItemsRole$outboundSchema,
  content: z.union([
    z.string(),
    z.array(z.union([
      z.lazy(() => GetAllPromptTemplates21$outboundSchema),
      z.lazy(() => GetAllPromptTemplates22$outboundSchema),
    ])),
  ]),
  toolCalls: z.array(z.lazy(() => ItemsToolCalls$outboundSchema)).optional(),
}).transform((v) => {
  return remap$(v, {
    toolCalls: "tool_calls",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ItemsMessages$ {
  /** @deprecated use `ItemsMessages$inboundSchema` instead. */
  export const inboundSchema = ItemsMessages$inboundSchema;
  /** @deprecated use `ItemsMessages$outboundSchema` instead. */
  export const outboundSchema = ItemsMessages$outboundSchema;
  /** @deprecated use `ItemsMessages$Outbound` instead. */
  export type Outbound = ItemsMessages$Outbound;
}

export function itemsMessagesToJSON(itemsMessages: ItemsMessages): string {
  return JSON.stringify(ItemsMessages$outboundSchema.parse(itemsMessages));
}

export function itemsMessagesFromJSON(
  jsonString: string,
): SafeParseResult<ItemsMessages, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ItemsMessages$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ItemsMessages' from JSON`,
  );
}

/** @internal */
export const ItemsPromptConfig$inboundSchema: z.ZodType<
  ItemsPromptConfig,
  z.ZodTypeDef,
  unknown
> = z.object({
  stream: z.boolean().optional(),
  model: z.string().optional(),
  model_db_id: z.string().optional(),
  model_type: ItemsModelType$inboundSchema.optional(),
  model_parameters: z.lazy(() => ItemsModelParameters$inboundSchema).optional(),
  provider: ItemsProvider$inboundSchema.optional(),
  integration_id: z.nullable(z.string()).optional(),
  version: z.string().optional(),
  messages: z.array(z.lazy(() => ItemsMessages$inboundSchema)),
}).transform((v) => {
  return remap$(v, {
    "model_db_id": "modelDbId",
    "model_type": "modelType",
    "model_parameters": "modelParameters",
    "integration_id": "integrationId",
  });
});

/** @internal */
export type ItemsPromptConfig$Outbound = {
  stream?: boolean | undefined;
  model?: string | undefined;
  model_db_id?: string | undefined;
  model_type?: string | undefined;
  model_parameters?: ItemsModelParameters$Outbound | undefined;
  provider?: string | undefined;
  integration_id?: string | null | undefined;
  version?: string | undefined;
  messages: Array<ItemsMessages$Outbound>;
};

/** @internal */
export const ItemsPromptConfig$outboundSchema: z.ZodType<
  ItemsPromptConfig$Outbound,
  z.ZodTypeDef,
  ItemsPromptConfig
> = z.object({
  stream: z.boolean().optional(),
  model: z.string().optional(),
  modelDbId: z.string().optional(),
  modelType: ItemsModelType$outboundSchema.optional(),
  modelParameters: z.lazy(() => ItemsModelParameters$outboundSchema).optional(),
  provider: ItemsProvider$outboundSchema.optional(),
  integrationId: z.nullable(z.string()).optional(),
  version: z.string().optional(),
  messages: z.array(z.lazy(() => ItemsMessages$outboundSchema)),
}).transform((v) => {
  return remap$(v, {
    modelDbId: "model_db_id",
    modelType: "model_type",
    modelParameters: "model_parameters",
    integrationId: "integration_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ItemsPromptConfig$ {
  /** @deprecated use `ItemsPromptConfig$inboundSchema` instead. */
  export const inboundSchema = ItemsPromptConfig$inboundSchema;
  /** @deprecated use `ItemsPromptConfig$outboundSchema` instead. */
  export const outboundSchema = ItemsPromptConfig$outboundSchema;
  /** @deprecated use `ItemsPromptConfig$Outbound` instead. */
  export type Outbound = ItemsPromptConfig$Outbound;
}

export function itemsPromptConfigToJSON(
  itemsPromptConfig: ItemsPromptConfig,
): string {
  return JSON.stringify(
    ItemsPromptConfig$outboundSchema.parse(itemsPromptConfig),
  );
}

export function itemsPromptConfigFromJSON(
  jsonString: string,
): SafeParseResult<ItemsPromptConfig, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ItemsPromptConfig$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ItemsPromptConfig' from JSON`,
  );
}

/** @internal */
export const ItemsMetadata$inboundSchema: z.ZodType<
  ItemsMetadata,
  z.ZodTypeDef,
  unknown
> = z.object({
  use_cases: z.array(z.string()).optional(),
  language: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "use_cases": "useCases",
  });
});

/** @internal */
export type ItemsMetadata$Outbound = {
  use_cases?: Array<string> | undefined;
  language?: string | undefined;
};

/** @internal */
export const ItemsMetadata$outboundSchema: z.ZodType<
  ItemsMetadata$Outbound,
  z.ZodTypeDef,
  ItemsMetadata
> = z.object({
  useCases: z.array(z.string()).optional(),
  language: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    useCases: "use_cases",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ItemsMetadata$ {
  /** @deprecated use `ItemsMetadata$inboundSchema` instead. */
  export const inboundSchema = ItemsMetadata$inboundSchema;
  /** @deprecated use `ItemsMetadata$outboundSchema` instead. */
  export const outboundSchema = ItemsMetadata$outboundSchema;
  /** @deprecated use `ItemsMetadata$Outbound` instead. */
  export type Outbound = ItemsMetadata$Outbound;
}

export function itemsMetadataToJSON(itemsMetadata: ItemsMetadata): string {
  return JSON.stringify(ItemsMetadata$outboundSchema.parse(itemsMetadata));
}

export function itemsMetadataFromJSON(
  jsonString: string,
): SafeParseResult<ItemsMetadata, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ItemsMetadata$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ItemsMetadata' from JSON`,
  );
}

/** @internal */
export const GetAllPromptTemplatesItemsPromptTemplatesResponse200ModelType$inboundSchema:
  z.ZodNativeEnum<
    typeof GetAllPromptTemplatesItemsPromptTemplatesResponse200ModelType
  > = z.nativeEnum(
    GetAllPromptTemplatesItemsPromptTemplatesResponse200ModelType,
  );

/** @internal */
export const GetAllPromptTemplatesItemsPromptTemplatesResponse200ModelType$outboundSchema:
  z.ZodNativeEnum<
    typeof GetAllPromptTemplatesItemsPromptTemplatesResponse200ModelType
  > =
    GetAllPromptTemplatesItemsPromptTemplatesResponse200ModelType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPromptTemplatesItemsPromptTemplatesResponse200ModelType$ {
  /** @deprecated use `GetAllPromptTemplatesItemsPromptTemplatesResponse200ModelType$inboundSchema` instead. */
  export const inboundSchema =
    GetAllPromptTemplatesItemsPromptTemplatesResponse200ModelType$inboundSchema;
  /** @deprecated use `GetAllPromptTemplatesItemsPromptTemplatesResponse200ModelType$outboundSchema` instead. */
  export const outboundSchema =
    GetAllPromptTemplatesItemsPromptTemplatesResponse200ModelType$outboundSchema;
}

/** @internal */
export const GetAllPromptTemplatesItemsPromptTemplatesResponse200ApplicationJSONFormat$inboundSchema:
  z.ZodNativeEnum<
    typeof GetAllPromptTemplatesItemsPromptTemplatesResponse200ApplicationJSONFormat
  > = z.nativeEnum(
    GetAllPromptTemplatesItemsPromptTemplatesResponse200ApplicationJSONFormat,
  );

/** @internal */
export const GetAllPromptTemplatesItemsPromptTemplatesResponse200ApplicationJSONFormat$outboundSchema:
  z.ZodNativeEnum<
    typeof GetAllPromptTemplatesItemsPromptTemplatesResponse200ApplicationJSONFormat
  > =
    GetAllPromptTemplatesItemsPromptTemplatesResponse200ApplicationJSONFormat$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPromptTemplatesItemsPromptTemplatesResponse200ApplicationJSONFormat$ {
  /** @deprecated use `GetAllPromptTemplatesItemsPromptTemplatesResponse200ApplicationJSONFormat$inboundSchema` instead. */
  export const inboundSchema =
    GetAllPromptTemplatesItemsPromptTemplatesResponse200ApplicationJSONFormat$inboundSchema;
  /** @deprecated use `GetAllPromptTemplatesItemsPromptTemplatesResponse200ApplicationJSONFormat$outboundSchema` instead. */
  export const outboundSchema =
    GetAllPromptTemplatesItemsPromptTemplatesResponse200ApplicationJSONFormat$outboundSchema;
}

/** @internal */
export const GetAllPromptTemplatesItemsPromptTemplatesResponse200Quality$inboundSchema:
  z.ZodNativeEnum<
    typeof GetAllPromptTemplatesItemsPromptTemplatesResponse200Quality
  > = z.nativeEnum(GetAllPromptTemplatesItemsPromptTemplatesResponse200Quality);

/** @internal */
export const GetAllPromptTemplatesItemsPromptTemplatesResponse200Quality$outboundSchema:
  z.ZodNativeEnum<
    typeof GetAllPromptTemplatesItemsPromptTemplatesResponse200Quality
  > = GetAllPromptTemplatesItemsPromptTemplatesResponse200Quality$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPromptTemplatesItemsPromptTemplatesResponse200Quality$ {
  /** @deprecated use `GetAllPromptTemplatesItemsPromptTemplatesResponse200Quality$inboundSchema` instead. */
  export const inboundSchema =
    GetAllPromptTemplatesItemsPromptTemplatesResponse200Quality$inboundSchema;
  /** @deprecated use `GetAllPromptTemplatesItemsPromptTemplatesResponse200Quality$outboundSchema` instead. */
  export const outboundSchema =
    GetAllPromptTemplatesItemsPromptTemplatesResponse200Quality$outboundSchema;
}

/** @internal */
export const GetAllPromptTemplatesResponseFormatPromptTemplatesResponse200ApplicationJSONResponseBodyItems1VersionsType$inboundSchema:
  z.ZodNativeEnum<
    typeof GetAllPromptTemplatesResponseFormatPromptTemplatesResponse200ApplicationJSONResponseBodyItems1VersionsType
  > = z.nativeEnum(
    GetAllPromptTemplatesResponseFormatPromptTemplatesResponse200ApplicationJSONResponseBodyItems1VersionsType,
  );

/** @internal */
export const GetAllPromptTemplatesResponseFormatPromptTemplatesResponse200ApplicationJSONResponseBodyItems1VersionsType$outboundSchema:
  z.ZodNativeEnum<
    typeof GetAllPromptTemplatesResponseFormatPromptTemplatesResponse200ApplicationJSONResponseBodyItems1VersionsType
  > =
    GetAllPromptTemplatesResponseFormatPromptTemplatesResponse200ApplicationJSONResponseBodyItems1VersionsType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPromptTemplatesResponseFormatPromptTemplatesResponse200ApplicationJSONResponseBodyItems1VersionsType$ {
  /** @deprecated use `GetAllPromptTemplatesResponseFormatPromptTemplatesResponse200ApplicationJSONResponseBodyItems1VersionsType$inboundSchema` instead. */
  export const inboundSchema =
    GetAllPromptTemplatesResponseFormatPromptTemplatesResponse200ApplicationJSONResponseBodyItems1VersionsType$inboundSchema;
  /** @deprecated use `GetAllPromptTemplatesResponseFormatPromptTemplatesResponse200ApplicationJSONResponseBodyItems1VersionsType$outboundSchema` instead. */
  export const outboundSchema =
    GetAllPromptTemplatesResponseFormatPromptTemplatesResponse200ApplicationJSONResponseBodyItems1VersionsType$outboundSchema;
}

/** @internal */
export const GetAllPromptTemplatesResponseFormatPromptTemplatesResponse200ApplicationJson2$inboundSchema:
  z.ZodType<
    GetAllPromptTemplatesResponseFormatPromptTemplatesResponse200ApplicationJson2,
    z.ZodTypeDef,
    unknown
  > = z.object({
    type:
      GetAllPromptTemplatesResponseFormatPromptTemplatesResponse200ApplicationJSONResponseBodyItems1VersionsType$inboundSchema,
  });

/** @internal */
export type GetAllPromptTemplatesResponseFormatPromptTemplatesResponse200ApplicationJson2$Outbound =
  {
    type: string;
  };

/** @internal */
export const GetAllPromptTemplatesResponseFormatPromptTemplatesResponse200ApplicationJson2$outboundSchema:
  z.ZodType<
    GetAllPromptTemplatesResponseFormatPromptTemplatesResponse200ApplicationJson2$Outbound,
    z.ZodTypeDef,
    GetAllPromptTemplatesResponseFormatPromptTemplatesResponse200ApplicationJson2
  > = z.object({
    type:
      GetAllPromptTemplatesResponseFormatPromptTemplatesResponse200ApplicationJSONResponseBodyItems1VersionsType$outboundSchema,
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPromptTemplatesResponseFormatPromptTemplatesResponse200ApplicationJson2$ {
  /** @deprecated use `GetAllPromptTemplatesResponseFormatPromptTemplatesResponse200ApplicationJson2$inboundSchema` instead. */
  export const inboundSchema =
    GetAllPromptTemplatesResponseFormatPromptTemplatesResponse200ApplicationJson2$inboundSchema;
  /** @deprecated use `GetAllPromptTemplatesResponseFormatPromptTemplatesResponse200ApplicationJson2$outboundSchema` instead. */
  export const outboundSchema =
    GetAllPromptTemplatesResponseFormatPromptTemplatesResponse200ApplicationJson2$outboundSchema;
  /** @deprecated use `GetAllPromptTemplatesResponseFormatPromptTemplatesResponse200ApplicationJson2$Outbound` instead. */
  export type Outbound =
    GetAllPromptTemplatesResponseFormatPromptTemplatesResponse200ApplicationJson2$Outbound;
}

export function getAllPromptTemplatesResponseFormatPromptTemplatesResponse200ApplicationJson2ToJSON(
  getAllPromptTemplatesResponseFormatPromptTemplatesResponse200ApplicationJson2:
    GetAllPromptTemplatesResponseFormatPromptTemplatesResponse200ApplicationJson2,
): string {
  return JSON.stringify(
    GetAllPromptTemplatesResponseFormatPromptTemplatesResponse200ApplicationJson2$outboundSchema
      .parse(
        getAllPromptTemplatesResponseFormatPromptTemplatesResponse200ApplicationJson2,
      ),
  );
}

export function getAllPromptTemplatesResponseFormatPromptTemplatesResponse200ApplicationJson2FromJSON(
  jsonString: string,
): SafeParseResult<
  GetAllPromptTemplatesResponseFormatPromptTemplatesResponse200ApplicationJson2,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetAllPromptTemplatesResponseFormatPromptTemplatesResponse200ApplicationJson2$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'GetAllPromptTemplatesResponseFormatPromptTemplatesResponse200ApplicationJson2' from JSON`,
  );
}

/** @internal */
export const GetAllPromptTemplatesResponseFormatPromptTemplatesResponse200ApplicationJSONResponseBodyItems1Type$inboundSchema:
  z.ZodNativeEnum<
    typeof GetAllPromptTemplatesResponseFormatPromptTemplatesResponse200ApplicationJSONResponseBodyItems1Type
  > = z.nativeEnum(
    GetAllPromptTemplatesResponseFormatPromptTemplatesResponse200ApplicationJSONResponseBodyItems1Type,
  );

/** @internal */
export const GetAllPromptTemplatesResponseFormatPromptTemplatesResponse200ApplicationJSONResponseBodyItems1Type$outboundSchema:
  z.ZodNativeEnum<
    typeof GetAllPromptTemplatesResponseFormatPromptTemplatesResponse200ApplicationJSONResponseBodyItems1Type
  > =
    GetAllPromptTemplatesResponseFormatPromptTemplatesResponse200ApplicationJSONResponseBodyItems1Type$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPromptTemplatesResponseFormatPromptTemplatesResponse200ApplicationJSONResponseBodyItems1Type$ {
  /** @deprecated use `GetAllPromptTemplatesResponseFormatPromptTemplatesResponse200ApplicationJSONResponseBodyItems1Type$inboundSchema` instead. */
  export const inboundSchema =
    GetAllPromptTemplatesResponseFormatPromptTemplatesResponse200ApplicationJSONResponseBodyItems1Type$inboundSchema;
  /** @deprecated use `GetAllPromptTemplatesResponseFormatPromptTemplatesResponse200ApplicationJSONResponseBodyItems1Type$outboundSchema` instead. */
  export const outboundSchema =
    GetAllPromptTemplatesResponseFormatPromptTemplatesResponse200ApplicationJSONResponseBodyItems1Type$outboundSchema;
}

/** @internal */
export const GetAllPromptTemplatesResponseFormatPromptTemplatesResponse200ApplicationJSONJSONSchema$inboundSchema:
  z.ZodType<
    GetAllPromptTemplatesResponseFormatPromptTemplatesResponse200ApplicationJSONJSONSchema,
    z.ZodTypeDef,
    unknown
  > = z.object({
    name: z.string(),
    strict: z.boolean(),
    schema: z.record(z.any()),
  });

/** @internal */
export type GetAllPromptTemplatesResponseFormatPromptTemplatesResponse200ApplicationJSONJSONSchema$Outbound =
  {
    name: string;
    strict: boolean;
    schema: { [k: string]: any };
  };

/** @internal */
export const GetAllPromptTemplatesResponseFormatPromptTemplatesResponse200ApplicationJSONJSONSchema$outboundSchema:
  z.ZodType<
    GetAllPromptTemplatesResponseFormatPromptTemplatesResponse200ApplicationJSONJSONSchema$Outbound,
    z.ZodTypeDef,
    GetAllPromptTemplatesResponseFormatPromptTemplatesResponse200ApplicationJSONJSONSchema
  > = z.object({
    name: z.string(),
    strict: z.boolean(),
    schema: z.record(z.any()),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPromptTemplatesResponseFormatPromptTemplatesResponse200ApplicationJSONJSONSchema$ {
  /** @deprecated use `GetAllPromptTemplatesResponseFormatPromptTemplatesResponse200ApplicationJSONJSONSchema$inboundSchema` instead. */
  export const inboundSchema =
    GetAllPromptTemplatesResponseFormatPromptTemplatesResponse200ApplicationJSONJSONSchema$inboundSchema;
  /** @deprecated use `GetAllPromptTemplatesResponseFormatPromptTemplatesResponse200ApplicationJSONJSONSchema$outboundSchema` instead. */
  export const outboundSchema =
    GetAllPromptTemplatesResponseFormatPromptTemplatesResponse200ApplicationJSONJSONSchema$outboundSchema;
  /** @deprecated use `GetAllPromptTemplatesResponseFormatPromptTemplatesResponse200ApplicationJSONJSONSchema$Outbound` instead. */
  export type Outbound =
    GetAllPromptTemplatesResponseFormatPromptTemplatesResponse200ApplicationJSONJSONSchema$Outbound;
}

export function getAllPromptTemplatesResponseFormatPromptTemplatesResponse200ApplicationJSONJSONSchemaToJSON(
  getAllPromptTemplatesResponseFormatPromptTemplatesResponse200ApplicationJSONJSONSchema:
    GetAllPromptTemplatesResponseFormatPromptTemplatesResponse200ApplicationJSONJSONSchema,
): string {
  return JSON.stringify(
    GetAllPromptTemplatesResponseFormatPromptTemplatesResponse200ApplicationJSONJSONSchema$outboundSchema
      .parse(
        getAllPromptTemplatesResponseFormatPromptTemplatesResponse200ApplicationJSONJSONSchema,
      ),
  );
}

export function getAllPromptTemplatesResponseFormatPromptTemplatesResponse200ApplicationJSONJSONSchemaFromJSON(
  jsonString: string,
): SafeParseResult<
  GetAllPromptTemplatesResponseFormatPromptTemplatesResponse200ApplicationJSONJSONSchema,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetAllPromptTemplatesResponseFormatPromptTemplatesResponse200ApplicationJSONJSONSchema$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'GetAllPromptTemplatesResponseFormatPromptTemplatesResponse200ApplicationJSONJSONSchema' from JSON`,
  );
}

/** @internal */
export const GetAllPromptTemplatesResponseFormatPromptTemplatesResponse200ApplicationJson1$inboundSchema:
  z.ZodType<
    GetAllPromptTemplatesResponseFormatPromptTemplatesResponse200ApplicationJson1,
    z.ZodTypeDef,
    unknown
  > = z.object({
    type:
      GetAllPromptTemplatesResponseFormatPromptTemplatesResponse200ApplicationJSONResponseBodyItems1Type$inboundSchema,
    json_schema: z.lazy(() =>
      GetAllPromptTemplatesResponseFormatPromptTemplatesResponse200ApplicationJSONJSONSchema$inboundSchema
    ),
  }).transform((v) => {
    return remap$(v, {
      "json_schema": "jsonSchema",
    });
  });

/** @internal */
export type GetAllPromptTemplatesResponseFormatPromptTemplatesResponse200ApplicationJson1$Outbound =
  {
    type: string;
    json_schema:
      GetAllPromptTemplatesResponseFormatPromptTemplatesResponse200ApplicationJSONJSONSchema$Outbound;
  };

/** @internal */
export const GetAllPromptTemplatesResponseFormatPromptTemplatesResponse200ApplicationJson1$outboundSchema:
  z.ZodType<
    GetAllPromptTemplatesResponseFormatPromptTemplatesResponse200ApplicationJson1$Outbound,
    z.ZodTypeDef,
    GetAllPromptTemplatesResponseFormatPromptTemplatesResponse200ApplicationJson1
  > = z.object({
    type:
      GetAllPromptTemplatesResponseFormatPromptTemplatesResponse200ApplicationJSONResponseBodyItems1Type$outboundSchema,
    jsonSchema: z.lazy(() =>
      GetAllPromptTemplatesResponseFormatPromptTemplatesResponse200ApplicationJSONJSONSchema$outboundSchema
    ),
  }).transform((v) => {
    return remap$(v, {
      jsonSchema: "json_schema",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPromptTemplatesResponseFormatPromptTemplatesResponse200ApplicationJson1$ {
  /** @deprecated use `GetAllPromptTemplatesResponseFormatPromptTemplatesResponse200ApplicationJson1$inboundSchema` instead. */
  export const inboundSchema =
    GetAllPromptTemplatesResponseFormatPromptTemplatesResponse200ApplicationJson1$inboundSchema;
  /** @deprecated use `GetAllPromptTemplatesResponseFormatPromptTemplatesResponse200ApplicationJson1$outboundSchema` instead. */
  export const outboundSchema =
    GetAllPromptTemplatesResponseFormatPromptTemplatesResponse200ApplicationJson1$outboundSchema;
  /** @deprecated use `GetAllPromptTemplatesResponseFormatPromptTemplatesResponse200ApplicationJson1$Outbound` instead. */
  export type Outbound =
    GetAllPromptTemplatesResponseFormatPromptTemplatesResponse200ApplicationJson1$Outbound;
}

export function getAllPromptTemplatesResponseFormatPromptTemplatesResponse200ApplicationJson1ToJSON(
  getAllPromptTemplatesResponseFormatPromptTemplatesResponse200ApplicationJson1:
    GetAllPromptTemplatesResponseFormatPromptTemplatesResponse200ApplicationJson1,
): string {
  return JSON.stringify(
    GetAllPromptTemplatesResponseFormatPromptTemplatesResponse200ApplicationJson1$outboundSchema
      .parse(
        getAllPromptTemplatesResponseFormatPromptTemplatesResponse200ApplicationJson1,
      ),
  );
}

export function getAllPromptTemplatesResponseFormatPromptTemplatesResponse200ApplicationJson1FromJSON(
  jsonString: string,
): SafeParseResult<
  GetAllPromptTemplatesResponseFormatPromptTemplatesResponse200ApplicationJson1,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetAllPromptTemplatesResponseFormatPromptTemplatesResponse200ApplicationJson1$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'GetAllPromptTemplatesResponseFormatPromptTemplatesResponse200ApplicationJson1' from JSON`,
  );
}

/** @internal */
export const GetAllPromptTemplatesItemsPromptTemplatesResponse200ResponseFormat$inboundSchema:
  z.ZodType<
    GetAllPromptTemplatesItemsPromptTemplatesResponse200ResponseFormat,
    z.ZodTypeDef,
    unknown
  > = z.union([
    z.lazy(() =>
      GetAllPromptTemplatesResponseFormatPromptTemplatesResponse200ApplicationJson2$inboundSchema
    ),
    z.lazy(() =>
      GetAllPromptTemplatesResponseFormatPromptTemplatesResponse200ApplicationJson1$inboundSchema
    ),
  ]);

/** @internal */
export type GetAllPromptTemplatesItemsPromptTemplatesResponse200ResponseFormat$Outbound =
  | GetAllPromptTemplatesResponseFormatPromptTemplatesResponse200ApplicationJson2$Outbound
  | GetAllPromptTemplatesResponseFormatPromptTemplatesResponse200ApplicationJson1$Outbound;

/** @internal */
export const GetAllPromptTemplatesItemsPromptTemplatesResponse200ResponseFormat$outboundSchema:
  z.ZodType<
    GetAllPromptTemplatesItemsPromptTemplatesResponse200ResponseFormat$Outbound,
    z.ZodTypeDef,
    GetAllPromptTemplatesItemsPromptTemplatesResponse200ResponseFormat
  > = z.union([
    z.lazy(() =>
      GetAllPromptTemplatesResponseFormatPromptTemplatesResponse200ApplicationJson2$outboundSchema
    ),
    z.lazy(() =>
      GetAllPromptTemplatesResponseFormatPromptTemplatesResponse200ApplicationJson1$outboundSchema
    ),
  ]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPromptTemplatesItemsPromptTemplatesResponse200ResponseFormat$ {
  /** @deprecated use `GetAllPromptTemplatesItemsPromptTemplatesResponse200ResponseFormat$inboundSchema` instead. */
  export const inboundSchema =
    GetAllPromptTemplatesItemsPromptTemplatesResponse200ResponseFormat$inboundSchema;
  /** @deprecated use `GetAllPromptTemplatesItemsPromptTemplatesResponse200ResponseFormat$outboundSchema` instead. */
  export const outboundSchema =
    GetAllPromptTemplatesItemsPromptTemplatesResponse200ResponseFormat$outboundSchema;
  /** @deprecated use `GetAllPromptTemplatesItemsPromptTemplatesResponse200ResponseFormat$Outbound` instead. */
  export type Outbound =
    GetAllPromptTemplatesItemsPromptTemplatesResponse200ResponseFormat$Outbound;
}

export function getAllPromptTemplatesItemsPromptTemplatesResponse200ResponseFormatToJSON(
  getAllPromptTemplatesItemsPromptTemplatesResponse200ResponseFormat:
    GetAllPromptTemplatesItemsPromptTemplatesResponse200ResponseFormat,
): string {
  return JSON.stringify(
    GetAllPromptTemplatesItemsPromptTemplatesResponse200ResponseFormat$outboundSchema
      .parse(
        getAllPromptTemplatesItemsPromptTemplatesResponse200ResponseFormat,
      ),
  );
}

export function getAllPromptTemplatesItemsPromptTemplatesResponse200ResponseFormatFromJSON(
  jsonString: string,
): SafeParseResult<
  GetAllPromptTemplatesItemsPromptTemplatesResponse200ResponseFormat,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetAllPromptTemplatesItemsPromptTemplatesResponse200ResponseFormat$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'GetAllPromptTemplatesItemsPromptTemplatesResponse200ResponseFormat' from JSON`,
  );
}

/** @internal */
export const GetAllPromptTemplatesItemsPromptTemplatesResponse200PhotoRealVersion$inboundSchema:
  z.ZodNativeEnum<
    typeof GetAllPromptTemplatesItemsPromptTemplatesResponse200PhotoRealVersion
  > = z.nativeEnum(
    GetAllPromptTemplatesItemsPromptTemplatesResponse200PhotoRealVersion,
  );

/** @internal */
export const GetAllPromptTemplatesItemsPromptTemplatesResponse200PhotoRealVersion$outboundSchema:
  z.ZodNativeEnum<
    typeof GetAllPromptTemplatesItemsPromptTemplatesResponse200PhotoRealVersion
  > =
    GetAllPromptTemplatesItemsPromptTemplatesResponse200PhotoRealVersion$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPromptTemplatesItemsPromptTemplatesResponse200PhotoRealVersion$ {
  /** @deprecated use `GetAllPromptTemplatesItemsPromptTemplatesResponse200PhotoRealVersion$inboundSchema` instead. */
  export const inboundSchema =
    GetAllPromptTemplatesItemsPromptTemplatesResponse200PhotoRealVersion$inboundSchema;
  /** @deprecated use `GetAllPromptTemplatesItemsPromptTemplatesResponse200PhotoRealVersion$outboundSchema` instead. */
  export const outboundSchema =
    GetAllPromptTemplatesItemsPromptTemplatesResponse200PhotoRealVersion$outboundSchema;
}

/** @internal */
export const GetAllPromptTemplatesItemsPromptTemplatesResponse200EncodingFormat$inboundSchema:
  z.ZodNativeEnum<
    typeof GetAllPromptTemplatesItemsPromptTemplatesResponse200EncodingFormat
  > = z.nativeEnum(
    GetAllPromptTemplatesItemsPromptTemplatesResponse200EncodingFormat,
  );

/** @internal */
export const GetAllPromptTemplatesItemsPromptTemplatesResponse200EncodingFormat$outboundSchema:
  z.ZodNativeEnum<
    typeof GetAllPromptTemplatesItemsPromptTemplatesResponse200EncodingFormat
  > =
    GetAllPromptTemplatesItemsPromptTemplatesResponse200EncodingFormat$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPromptTemplatesItemsPromptTemplatesResponse200EncodingFormat$ {
  /** @deprecated use `GetAllPromptTemplatesItemsPromptTemplatesResponse200EncodingFormat$inboundSchema` instead. */
  export const inboundSchema =
    GetAllPromptTemplatesItemsPromptTemplatesResponse200EncodingFormat$inboundSchema;
  /** @deprecated use `GetAllPromptTemplatesItemsPromptTemplatesResponse200EncodingFormat$outboundSchema` instead. */
  export const outboundSchema =
    GetAllPromptTemplatesItemsPromptTemplatesResponse200EncodingFormat$outboundSchema;
}

/** @internal */
export const GetAllPromptTemplatesItemsPromptTemplatesResponse200ModelParameters$inboundSchema:
  z.ZodType<
    GetAllPromptTemplatesItemsPromptTemplatesResponse200ModelParameters,
    z.ZodTypeDef,
    unknown
  > = z.object({
    temperature: z.number().optional(),
    maxTokens: z.number().optional(),
    topK: z.number().optional(),
    topP: z.number().optional(),
    frequencyPenalty: z.number().optional(),
    presencePenalty: z.number().optional(),
    numImages: z.number().optional(),
    seed: z.number().optional(),
    format:
      GetAllPromptTemplatesItemsPromptTemplatesResponse200ApplicationJSONFormat$inboundSchema
        .optional(),
    dimensions: z.string().optional(),
    quality:
      GetAllPromptTemplatesItemsPromptTemplatesResponse200Quality$inboundSchema
        .optional(),
    style: z.string().optional(),
    responseFormat: z.nullable(
      z.union([
        z.lazy(() =>
          GetAllPromptTemplatesResponseFormatPromptTemplatesResponse200ApplicationJson2$inboundSchema
        ),
        z.lazy(() =>
          GetAllPromptTemplatesResponseFormatPromptTemplatesResponse200ApplicationJson1$inboundSchema
        ),
      ]),
    ).optional(),
    photoRealVersion:
      GetAllPromptTemplatesItemsPromptTemplatesResponse200PhotoRealVersion$inboundSchema
        .optional(),
    encoding_format:
      GetAllPromptTemplatesItemsPromptTemplatesResponse200EncodingFormat$inboundSchema
        .optional(),
  }).transform((v) => {
    return remap$(v, {
      "encoding_format": "encodingFormat",
    });
  });

/** @internal */
export type GetAllPromptTemplatesItemsPromptTemplatesResponse200ModelParameters$Outbound =
  {
    temperature?: number | undefined;
    maxTokens?: number | undefined;
    topK?: number | undefined;
    topP?: number | undefined;
    frequencyPenalty?: number | undefined;
    presencePenalty?: number | undefined;
    numImages?: number | undefined;
    seed?: number | undefined;
    format?: string | undefined;
    dimensions?: string | undefined;
    quality?: string | undefined;
    style?: string | undefined;
    responseFormat?:
      | GetAllPromptTemplatesResponseFormatPromptTemplatesResponse200ApplicationJson2$Outbound
      | GetAllPromptTemplatesResponseFormatPromptTemplatesResponse200ApplicationJson1$Outbound
      | null
      | undefined;
    photoRealVersion?: string | undefined;
    encoding_format?: string | undefined;
  };

/** @internal */
export const GetAllPromptTemplatesItemsPromptTemplatesResponse200ModelParameters$outboundSchema:
  z.ZodType<
    GetAllPromptTemplatesItemsPromptTemplatesResponse200ModelParameters$Outbound,
    z.ZodTypeDef,
    GetAllPromptTemplatesItemsPromptTemplatesResponse200ModelParameters
  > = z.object({
    temperature: z.number().optional(),
    maxTokens: z.number().optional(),
    topK: z.number().optional(),
    topP: z.number().optional(),
    frequencyPenalty: z.number().optional(),
    presencePenalty: z.number().optional(),
    numImages: z.number().optional(),
    seed: z.number().optional(),
    format:
      GetAllPromptTemplatesItemsPromptTemplatesResponse200ApplicationJSONFormat$outboundSchema
        .optional(),
    dimensions: z.string().optional(),
    quality:
      GetAllPromptTemplatesItemsPromptTemplatesResponse200Quality$outboundSchema
        .optional(),
    style: z.string().optional(),
    responseFormat: z.nullable(
      z.union([
        z.lazy(() =>
          GetAllPromptTemplatesResponseFormatPromptTemplatesResponse200ApplicationJson2$outboundSchema
        ),
        z.lazy(() =>
          GetAllPromptTemplatesResponseFormatPromptTemplatesResponse200ApplicationJson1$outboundSchema
        ),
      ]),
    ).optional(),
    photoRealVersion:
      GetAllPromptTemplatesItemsPromptTemplatesResponse200PhotoRealVersion$outboundSchema
        .optional(),
    encodingFormat:
      GetAllPromptTemplatesItemsPromptTemplatesResponse200EncodingFormat$outboundSchema
        .optional(),
  }).transform((v) => {
    return remap$(v, {
      encodingFormat: "encoding_format",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPromptTemplatesItemsPromptTemplatesResponse200ModelParameters$ {
  /** @deprecated use `GetAllPromptTemplatesItemsPromptTemplatesResponse200ModelParameters$inboundSchema` instead. */
  export const inboundSchema =
    GetAllPromptTemplatesItemsPromptTemplatesResponse200ModelParameters$inboundSchema;
  /** @deprecated use `GetAllPromptTemplatesItemsPromptTemplatesResponse200ModelParameters$outboundSchema` instead. */
  export const outboundSchema =
    GetAllPromptTemplatesItemsPromptTemplatesResponse200ModelParameters$outboundSchema;
  /** @deprecated use `GetAllPromptTemplatesItemsPromptTemplatesResponse200ModelParameters$Outbound` instead. */
  export type Outbound =
    GetAllPromptTemplatesItemsPromptTemplatesResponse200ModelParameters$Outbound;
}

export function getAllPromptTemplatesItemsPromptTemplatesResponse200ModelParametersToJSON(
  getAllPromptTemplatesItemsPromptTemplatesResponse200ModelParameters:
    GetAllPromptTemplatesItemsPromptTemplatesResponse200ModelParameters,
): string {
  return JSON.stringify(
    GetAllPromptTemplatesItemsPromptTemplatesResponse200ModelParameters$outboundSchema
      .parse(
        getAllPromptTemplatesItemsPromptTemplatesResponse200ModelParameters,
      ),
  );
}

export function getAllPromptTemplatesItemsPromptTemplatesResponse200ModelParametersFromJSON(
  jsonString: string,
): SafeParseResult<
  GetAllPromptTemplatesItemsPromptTemplatesResponse200ModelParameters,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetAllPromptTemplatesItemsPromptTemplatesResponse200ModelParameters$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'GetAllPromptTemplatesItemsPromptTemplatesResponse200ModelParameters' from JSON`,
  );
}

/** @internal */
export const GetAllPromptTemplatesItemsPromptTemplatesResponse200Provider$inboundSchema:
  z.ZodNativeEnum<
    typeof GetAllPromptTemplatesItemsPromptTemplatesResponse200Provider
  > = z.nativeEnum(
    GetAllPromptTemplatesItemsPromptTemplatesResponse200Provider,
  );

/** @internal */
export const GetAllPromptTemplatesItemsPromptTemplatesResponse200Provider$outboundSchema:
  z.ZodNativeEnum<
    typeof GetAllPromptTemplatesItemsPromptTemplatesResponse200Provider
  > =
    GetAllPromptTemplatesItemsPromptTemplatesResponse200Provider$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPromptTemplatesItemsPromptTemplatesResponse200Provider$ {
  /** @deprecated use `GetAllPromptTemplatesItemsPromptTemplatesResponse200Provider$inboundSchema` instead. */
  export const inboundSchema =
    GetAllPromptTemplatesItemsPromptTemplatesResponse200Provider$inboundSchema;
  /** @deprecated use `GetAllPromptTemplatesItemsPromptTemplatesResponse200Provider$outboundSchema` instead. */
  export const outboundSchema =
    GetAllPromptTemplatesItemsPromptTemplatesResponse200Provider$outboundSchema;
}

/** @internal */
export const GetAllPromptTemplatesItemsPromptTemplatesResponse200Role$inboundSchema:
  z.ZodNativeEnum<
    typeof GetAllPromptTemplatesItemsPromptTemplatesResponse200Role
  > = z.nativeEnum(GetAllPromptTemplatesItemsPromptTemplatesResponse200Role);

/** @internal */
export const GetAllPromptTemplatesItemsPromptTemplatesResponse200Role$outboundSchema:
  z.ZodNativeEnum<
    typeof GetAllPromptTemplatesItemsPromptTemplatesResponse200Role
  > = GetAllPromptTemplatesItemsPromptTemplatesResponse200Role$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPromptTemplatesItemsPromptTemplatesResponse200Role$ {
  /** @deprecated use `GetAllPromptTemplatesItemsPromptTemplatesResponse200Role$inboundSchema` instead. */
  export const inboundSchema =
    GetAllPromptTemplatesItemsPromptTemplatesResponse200Role$inboundSchema;
  /** @deprecated use `GetAllPromptTemplatesItemsPromptTemplatesResponse200Role$outboundSchema` instead. */
  export const outboundSchema =
    GetAllPromptTemplatesItemsPromptTemplatesResponse200Role$outboundSchema;
}

/** @internal */
export const GetAllPromptTemplates2PromptTemplatesResponse200ApplicationJSONResponseBodyItems1VersionsType$inboundSchema:
  z.ZodNativeEnum<
    typeof GetAllPromptTemplates2PromptTemplatesResponse200ApplicationJSONResponseBodyItems1VersionsType
  > = z.nativeEnum(
    GetAllPromptTemplates2PromptTemplatesResponse200ApplicationJSONResponseBodyItems1VersionsType,
  );

/** @internal */
export const GetAllPromptTemplates2PromptTemplatesResponse200ApplicationJSONResponseBodyItems1VersionsType$outboundSchema:
  z.ZodNativeEnum<
    typeof GetAllPromptTemplates2PromptTemplatesResponse200ApplicationJSONResponseBodyItems1VersionsType
  > =
    GetAllPromptTemplates2PromptTemplatesResponse200ApplicationJSONResponseBodyItems1VersionsType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPromptTemplates2PromptTemplatesResponse200ApplicationJSONResponseBodyItems1VersionsType$ {
  /** @deprecated use `GetAllPromptTemplates2PromptTemplatesResponse200ApplicationJSONResponseBodyItems1VersionsType$inboundSchema` instead. */
  export const inboundSchema =
    GetAllPromptTemplates2PromptTemplatesResponse200ApplicationJSONResponseBodyItems1VersionsType$inboundSchema;
  /** @deprecated use `GetAllPromptTemplates2PromptTemplatesResponse200ApplicationJSONResponseBodyItems1VersionsType$outboundSchema` instead. */
  export const outboundSchema =
    GetAllPromptTemplates2PromptTemplatesResponse200ApplicationJSONResponseBodyItems1VersionsType$outboundSchema;
}

/** @internal */
export const GetAllPromptTemplates2PromptTemplatesResponse200ApplicationJSONImageUrl$inboundSchema:
  z.ZodType<
    GetAllPromptTemplates2PromptTemplatesResponse200ApplicationJSONImageUrl,
    z.ZodTypeDef,
    unknown
  > = z.object({
    id: z.string().optional(),
    url: z.string(),
    detail: z.string().optional(),
  });

/** @internal */
export type GetAllPromptTemplates2PromptTemplatesResponse200ApplicationJSONImageUrl$Outbound =
  {
    id?: string | undefined;
    url: string;
    detail?: string | undefined;
  };

/** @internal */
export const GetAllPromptTemplates2PromptTemplatesResponse200ApplicationJSONImageUrl$outboundSchema:
  z.ZodType<
    GetAllPromptTemplates2PromptTemplatesResponse200ApplicationJSONImageUrl$Outbound,
    z.ZodTypeDef,
    GetAllPromptTemplates2PromptTemplatesResponse200ApplicationJSONImageUrl
  > = z.object({
    id: z.string().optional(),
    url: z.string(),
    detail: z.string().optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPromptTemplates2PromptTemplatesResponse200ApplicationJSONImageUrl$ {
  /** @deprecated use `GetAllPromptTemplates2PromptTemplatesResponse200ApplicationJSONImageUrl$inboundSchema` instead. */
  export const inboundSchema =
    GetAllPromptTemplates2PromptTemplatesResponse200ApplicationJSONImageUrl$inboundSchema;
  /** @deprecated use `GetAllPromptTemplates2PromptTemplatesResponse200ApplicationJSONImageUrl$outboundSchema` instead. */
  export const outboundSchema =
    GetAllPromptTemplates2PromptTemplatesResponse200ApplicationJSONImageUrl$outboundSchema;
  /** @deprecated use `GetAllPromptTemplates2PromptTemplatesResponse200ApplicationJSONImageUrl$Outbound` instead. */
  export type Outbound =
    GetAllPromptTemplates2PromptTemplatesResponse200ApplicationJSONImageUrl$Outbound;
}

export function getAllPromptTemplates2PromptTemplatesResponse200ApplicationJSONImageUrlToJSON(
  getAllPromptTemplates2PromptTemplatesResponse200ApplicationJSONImageUrl:
    GetAllPromptTemplates2PromptTemplatesResponse200ApplicationJSONImageUrl,
): string {
  return JSON.stringify(
    GetAllPromptTemplates2PromptTemplatesResponse200ApplicationJSONImageUrl$outboundSchema
      .parse(
        getAllPromptTemplates2PromptTemplatesResponse200ApplicationJSONImageUrl,
      ),
  );
}

export function getAllPromptTemplates2PromptTemplatesResponse200ApplicationJSONImageUrlFromJSON(
  jsonString: string,
): SafeParseResult<
  GetAllPromptTemplates2PromptTemplatesResponse200ApplicationJSONImageUrl,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetAllPromptTemplates2PromptTemplatesResponse200ApplicationJSONImageUrl$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'GetAllPromptTemplates2PromptTemplatesResponse200ApplicationJSONImageUrl' from JSON`,
  );
}

/** @internal */
export const GetAllPromptTemplates2PromptTemplatesResponse200ApplicationJson2$inboundSchema:
  z.ZodType<
    GetAllPromptTemplates2PromptTemplatesResponse200ApplicationJson2,
    z.ZodTypeDef,
    unknown
  > = z.object({
    type:
      GetAllPromptTemplates2PromptTemplatesResponse200ApplicationJSONResponseBodyItems1VersionsType$inboundSchema,
    image_url: z.lazy(() =>
      GetAllPromptTemplates2PromptTemplatesResponse200ApplicationJSONImageUrl$inboundSchema
    ),
  }).transform((v) => {
    return remap$(v, {
      "image_url": "imageUrl",
    });
  });

/** @internal */
export type GetAllPromptTemplates2PromptTemplatesResponse200ApplicationJson2$Outbound =
  {
    type: string;
    image_url:
      GetAllPromptTemplates2PromptTemplatesResponse200ApplicationJSONImageUrl$Outbound;
  };

/** @internal */
export const GetAllPromptTemplates2PromptTemplatesResponse200ApplicationJson2$outboundSchema:
  z.ZodType<
    GetAllPromptTemplates2PromptTemplatesResponse200ApplicationJson2$Outbound,
    z.ZodTypeDef,
    GetAllPromptTemplates2PromptTemplatesResponse200ApplicationJson2
  > = z.object({
    type:
      GetAllPromptTemplates2PromptTemplatesResponse200ApplicationJSONResponseBodyItems1VersionsType$outboundSchema,
    imageUrl: z.lazy(() =>
      GetAllPromptTemplates2PromptTemplatesResponse200ApplicationJSONImageUrl$outboundSchema
    ),
  }).transform((v) => {
    return remap$(v, {
      imageUrl: "image_url",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPromptTemplates2PromptTemplatesResponse200ApplicationJson2$ {
  /** @deprecated use `GetAllPromptTemplates2PromptTemplatesResponse200ApplicationJson2$inboundSchema` instead. */
  export const inboundSchema =
    GetAllPromptTemplates2PromptTemplatesResponse200ApplicationJson2$inboundSchema;
  /** @deprecated use `GetAllPromptTemplates2PromptTemplatesResponse200ApplicationJson2$outboundSchema` instead. */
  export const outboundSchema =
    GetAllPromptTemplates2PromptTemplatesResponse200ApplicationJson2$outboundSchema;
  /** @deprecated use `GetAllPromptTemplates2PromptTemplatesResponse200ApplicationJson2$Outbound` instead. */
  export type Outbound =
    GetAllPromptTemplates2PromptTemplatesResponse200ApplicationJson2$Outbound;
}

export function getAllPromptTemplates2PromptTemplatesResponse200ApplicationJson2ToJSON(
  getAllPromptTemplates2PromptTemplatesResponse200ApplicationJson2:
    GetAllPromptTemplates2PromptTemplatesResponse200ApplicationJson2,
): string {
  return JSON.stringify(
    GetAllPromptTemplates2PromptTemplatesResponse200ApplicationJson2$outboundSchema
      .parse(getAllPromptTemplates2PromptTemplatesResponse200ApplicationJson2),
  );
}

export function getAllPromptTemplates2PromptTemplatesResponse200ApplicationJson2FromJSON(
  jsonString: string,
): SafeParseResult<
  GetAllPromptTemplates2PromptTemplatesResponse200ApplicationJson2,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetAllPromptTemplates2PromptTemplatesResponse200ApplicationJson2$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'GetAllPromptTemplates2PromptTemplatesResponse200ApplicationJson2' from JSON`,
  );
}

/** @internal */
export const GetAllPromptTemplates2PromptTemplatesResponse200ApplicationJSONResponseBodyItems1Type$inboundSchema:
  z.ZodNativeEnum<
    typeof GetAllPromptTemplates2PromptTemplatesResponse200ApplicationJSONResponseBodyItems1Type
  > = z.nativeEnum(
    GetAllPromptTemplates2PromptTemplatesResponse200ApplicationJSONResponseBodyItems1Type,
  );

/** @internal */
export const GetAllPromptTemplates2PromptTemplatesResponse200ApplicationJSONResponseBodyItems1Type$outboundSchema:
  z.ZodNativeEnum<
    typeof GetAllPromptTemplates2PromptTemplatesResponse200ApplicationJSONResponseBodyItems1Type
  > =
    GetAllPromptTemplates2PromptTemplatesResponse200ApplicationJSONResponseBodyItems1Type$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPromptTemplates2PromptTemplatesResponse200ApplicationJSONResponseBodyItems1Type$ {
  /** @deprecated use `GetAllPromptTemplates2PromptTemplatesResponse200ApplicationJSONResponseBodyItems1Type$inboundSchema` instead. */
  export const inboundSchema =
    GetAllPromptTemplates2PromptTemplatesResponse200ApplicationJSONResponseBodyItems1Type$inboundSchema;
  /** @deprecated use `GetAllPromptTemplates2PromptTemplatesResponse200ApplicationJSONResponseBodyItems1Type$outboundSchema` instead. */
  export const outboundSchema =
    GetAllPromptTemplates2PromptTemplatesResponse200ApplicationJSONResponseBodyItems1Type$outboundSchema;
}

/** @internal */
export const GetAllPromptTemplates2PromptTemplatesResponse200ApplicationJson1$inboundSchema:
  z.ZodType<
    GetAllPromptTemplates2PromptTemplatesResponse200ApplicationJson1,
    z.ZodTypeDef,
    unknown
  > = z.object({
    type:
      GetAllPromptTemplates2PromptTemplatesResponse200ApplicationJSONResponseBodyItems1Type$inboundSchema,
    text: z.string(),
  });

/** @internal */
export type GetAllPromptTemplates2PromptTemplatesResponse200ApplicationJson1$Outbound =
  {
    type: string;
    text: string;
  };

/** @internal */
export const GetAllPromptTemplates2PromptTemplatesResponse200ApplicationJson1$outboundSchema:
  z.ZodType<
    GetAllPromptTemplates2PromptTemplatesResponse200ApplicationJson1$Outbound,
    z.ZodTypeDef,
    GetAllPromptTemplates2PromptTemplatesResponse200ApplicationJson1
  > = z.object({
    type:
      GetAllPromptTemplates2PromptTemplatesResponse200ApplicationJSONResponseBodyItems1Type$outboundSchema,
    text: z.string(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPromptTemplates2PromptTemplatesResponse200ApplicationJson1$ {
  /** @deprecated use `GetAllPromptTemplates2PromptTemplatesResponse200ApplicationJson1$inboundSchema` instead. */
  export const inboundSchema =
    GetAllPromptTemplates2PromptTemplatesResponse200ApplicationJson1$inboundSchema;
  /** @deprecated use `GetAllPromptTemplates2PromptTemplatesResponse200ApplicationJson1$outboundSchema` instead. */
  export const outboundSchema =
    GetAllPromptTemplates2PromptTemplatesResponse200ApplicationJson1$outboundSchema;
  /** @deprecated use `GetAllPromptTemplates2PromptTemplatesResponse200ApplicationJson1$Outbound` instead. */
  export type Outbound =
    GetAllPromptTemplates2PromptTemplatesResponse200ApplicationJson1$Outbound;
}

export function getAllPromptTemplates2PromptTemplatesResponse200ApplicationJson1ToJSON(
  getAllPromptTemplates2PromptTemplatesResponse200ApplicationJson1:
    GetAllPromptTemplates2PromptTemplatesResponse200ApplicationJson1,
): string {
  return JSON.stringify(
    GetAllPromptTemplates2PromptTemplatesResponse200ApplicationJson1$outboundSchema
      .parse(getAllPromptTemplates2PromptTemplatesResponse200ApplicationJson1),
  );
}

export function getAllPromptTemplates2PromptTemplatesResponse200ApplicationJson1FromJSON(
  jsonString: string,
): SafeParseResult<
  GetAllPromptTemplates2PromptTemplatesResponse200ApplicationJson1,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetAllPromptTemplates2PromptTemplatesResponse200ApplicationJson1$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'GetAllPromptTemplates2PromptTemplatesResponse200ApplicationJson1' from JSON`,
  );
}

/** @internal */
export const GetAllPromptTemplatesContentPromptTemplatesResponse200ApplicationJson2$inboundSchema:
  z.ZodType<
    GetAllPromptTemplatesContentPromptTemplatesResponse200ApplicationJson2,
    z.ZodTypeDef,
    unknown
  > = z.union([
    z.lazy(() =>
      GetAllPromptTemplates2PromptTemplatesResponse200ApplicationJson1$inboundSchema
    ),
    z.lazy(() =>
      GetAllPromptTemplates2PromptTemplatesResponse200ApplicationJson2$inboundSchema
    ),
  ]);

/** @internal */
export type GetAllPromptTemplatesContentPromptTemplatesResponse200ApplicationJson2$Outbound =
  | GetAllPromptTemplates2PromptTemplatesResponse200ApplicationJson1$Outbound
  | GetAllPromptTemplates2PromptTemplatesResponse200ApplicationJson2$Outbound;

/** @internal */
export const GetAllPromptTemplatesContentPromptTemplatesResponse200ApplicationJson2$outboundSchema:
  z.ZodType<
    GetAllPromptTemplatesContentPromptTemplatesResponse200ApplicationJson2$Outbound,
    z.ZodTypeDef,
    GetAllPromptTemplatesContentPromptTemplatesResponse200ApplicationJson2
  > = z.union([
    z.lazy(() =>
      GetAllPromptTemplates2PromptTemplatesResponse200ApplicationJson1$outboundSchema
    ),
    z.lazy(() =>
      GetAllPromptTemplates2PromptTemplatesResponse200ApplicationJson2$outboundSchema
    ),
  ]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPromptTemplatesContentPromptTemplatesResponse200ApplicationJson2$ {
  /** @deprecated use `GetAllPromptTemplatesContentPromptTemplatesResponse200ApplicationJson2$inboundSchema` instead. */
  export const inboundSchema =
    GetAllPromptTemplatesContentPromptTemplatesResponse200ApplicationJson2$inboundSchema;
  /** @deprecated use `GetAllPromptTemplatesContentPromptTemplatesResponse200ApplicationJson2$outboundSchema` instead. */
  export const outboundSchema =
    GetAllPromptTemplatesContentPromptTemplatesResponse200ApplicationJson2$outboundSchema;
  /** @deprecated use `GetAllPromptTemplatesContentPromptTemplatesResponse200ApplicationJson2$Outbound` instead. */
  export type Outbound =
    GetAllPromptTemplatesContentPromptTemplatesResponse200ApplicationJson2$Outbound;
}

export function getAllPromptTemplatesContentPromptTemplatesResponse200ApplicationJson2ToJSON(
  getAllPromptTemplatesContentPromptTemplatesResponse200ApplicationJson2:
    GetAllPromptTemplatesContentPromptTemplatesResponse200ApplicationJson2,
): string {
  return JSON.stringify(
    GetAllPromptTemplatesContentPromptTemplatesResponse200ApplicationJson2$outboundSchema
      .parse(
        getAllPromptTemplatesContentPromptTemplatesResponse200ApplicationJson2,
      ),
  );
}

export function getAllPromptTemplatesContentPromptTemplatesResponse200ApplicationJson2FromJSON(
  jsonString: string,
): SafeParseResult<
  GetAllPromptTemplatesContentPromptTemplatesResponse200ApplicationJson2,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetAllPromptTemplatesContentPromptTemplatesResponse200ApplicationJson2$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'GetAllPromptTemplatesContentPromptTemplatesResponse200ApplicationJson2' from JSON`,
  );
}

/** @internal */
export const GetAllPromptTemplatesItemsPromptTemplatesResponse200Content$inboundSchema:
  z.ZodType<
    GetAllPromptTemplatesItemsPromptTemplatesResponse200Content,
    z.ZodTypeDef,
    unknown
  > = z.union([
    z.string(),
    z.array(z.union([
      z.lazy(() =>
        GetAllPromptTemplates2PromptTemplatesResponse200ApplicationJson1$inboundSchema
      ),
      z.lazy(() =>
        GetAllPromptTemplates2PromptTemplatesResponse200ApplicationJson2$inboundSchema
      ),
    ])),
  ]);

/** @internal */
export type GetAllPromptTemplatesItemsPromptTemplatesResponse200Content$Outbound =
  | string
  | Array<
    | GetAllPromptTemplates2PromptTemplatesResponse200ApplicationJson1$Outbound
    | GetAllPromptTemplates2PromptTemplatesResponse200ApplicationJson2$Outbound
  >;

/** @internal */
export const GetAllPromptTemplatesItemsPromptTemplatesResponse200Content$outboundSchema:
  z.ZodType<
    GetAllPromptTemplatesItemsPromptTemplatesResponse200Content$Outbound,
    z.ZodTypeDef,
    GetAllPromptTemplatesItemsPromptTemplatesResponse200Content
  > = z.union([
    z.string(),
    z.array(z.union([
      z.lazy(() =>
        GetAllPromptTemplates2PromptTemplatesResponse200ApplicationJson1$outboundSchema
      ),
      z.lazy(() =>
        GetAllPromptTemplates2PromptTemplatesResponse200ApplicationJson2$outboundSchema
      ),
    ])),
  ]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPromptTemplatesItemsPromptTemplatesResponse200Content$ {
  /** @deprecated use `GetAllPromptTemplatesItemsPromptTemplatesResponse200Content$inboundSchema` instead. */
  export const inboundSchema =
    GetAllPromptTemplatesItemsPromptTemplatesResponse200Content$inboundSchema;
  /** @deprecated use `GetAllPromptTemplatesItemsPromptTemplatesResponse200Content$outboundSchema` instead. */
  export const outboundSchema =
    GetAllPromptTemplatesItemsPromptTemplatesResponse200Content$outboundSchema;
  /** @deprecated use `GetAllPromptTemplatesItemsPromptTemplatesResponse200Content$Outbound` instead. */
  export type Outbound =
    GetAllPromptTemplatesItemsPromptTemplatesResponse200Content$Outbound;
}

export function getAllPromptTemplatesItemsPromptTemplatesResponse200ContentToJSON(
  getAllPromptTemplatesItemsPromptTemplatesResponse200Content:
    GetAllPromptTemplatesItemsPromptTemplatesResponse200Content,
): string {
  return JSON.stringify(
    GetAllPromptTemplatesItemsPromptTemplatesResponse200Content$outboundSchema
      .parse(getAllPromptTemplatesItemsPromptTemplatesResponse200Content),
  );
}

export function getAllPromptTemplatesItemsPromptTemplatesResponse200ContentFromJSON(
  jsonString: string,
): SafeParseResult<
  GetAllPromptTemplatesItemsPromptTemplatesResponse200Content,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetAllPromptTemplatesItemsPromptTemplatesResponse200Content$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'GetAllPromptTemplatesItemsPromptTemplatesResponse200Content' from JSON`,
  );
}

/** @internal */
export const GetAllPromptTemplatesItemsPromptTemplatesResponse200ApplicationJSONResponseBody1Type$inboundSchema:
  z.ZodNativeEnum<
    typeof GetAllPromptTemplatesItemsPromptTemplatesResponse200ApplicationJSONResponseBody1Type
  > = z.nativeEnum(
    GetAllPromptTemplatesItemsPromptTemplatesResponse200ApplicationJSONResponseBody1Type,
  );

/** @internal */
export const GetAllPromptTemplatesItemsPromptTemplatesResponse200ApplicationJSONResponseBody1Type$outboundSchema:
  z.ZodNativeEnum<
    typeof GetAllPromptTemplatesItemsPromptTemplatesResponse200ApplicationJSONResponseBody1Type
  > =
    GetAllPromptTemplatesItemsPromptTemplatesResponse200ApplicationJSONResponseBody1Type$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPromptTemplatesItemsPromptTemplatesResponse200ApplicationJSONResponseBody1Type$ {
  /** @deprecated use `GetAllPromptTemplatesItemsPromptTemplatesResponse200ApplicationJSONResponseBody1Type$inboundSchema` instead. */
  export const inboundSchema =
    GetAllPromptTemplatesItemsPromptTemplatesResponse200ApplicationJSONResponseBody1Type$inboundSchema;
  /** @deprecated use `GetAllPromptTemplatesItemsPromptTemplatesResponse200ApplicationJSONResponseBody1Type$outboundSchema` instead. */
  export const outboundSchema =
    GetAllPromptTemplatesItemsPromptTemplatesResponse200ApplicationJSONResponseBody1Type$outboundSchema;
}

/** @internal */
export const GetAllPromptTemplatesItemsPromptTemplatesResponse200Function$inboundSchema:
  z.ZodType<
    GetAllPromptTemplatesItemsPromptTemplatesResponse200Function,
    z.ZodTypeDef,
    unknown
  > = z.object({
    name: z.string(),
    arguments: z.string(),
  });

/** @internal */
export type GetAllPromptTemplatesItemsPromptTemplatesResponse200Function$Outbound =
  {
    name: string;
    arguments: string;
  };

/** @internal */
export const GetAllPromptTemplatesItemsPromptTemplatesResponse200Function$outboundSchema:
  z.ZodType<
    GetAllPromptTemplatesItemsPromptTemplatesResponse200Function$Outbound,
    z.ZodTypeDef,
    GetAllPromptTemplatesItemsPromptTemplatesResponse200Function
  > = z.object({
    name: z.string(),
    arguments: z.string(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPromptTemplatesItemsPromptTemplatesResponse200Function$ {
  /** @deprecated use `GetAllPromptTemplatesItemsPromptTemplatesResponse200Function$inboundSchema` instead. */
  export const inboundSchema =
    GetAllPromptTemplatesItemsPromptTemplatesResponse200Function$inboundSchema;
  /** @deprecated use `GetAllPromptTemplatesItemsPromptTemplatesResponse200Function$outboundSchema` instead. */
  export const outboundSchema =
    GetAllPromptTemplatesItemsPromptTemplatesResponse200Function$outboundSchema;
  /** @deprecated use `GetAllPromptTemplatesItemsPromptTemplatesResponse200Function$Outbound` instead. */
  export type Outbound =
    GetAllPromptTemplatesItemsPromptTemplatesResponse200Function$Outbound;
}

export function getAllPromptTemplatesItemsPromptTemplatesResponse200FunctionToJSON(
  getAllPromptTemplatesItemsPromptTemplatesResponse200Function:
    GetAllPromptTemplatesItemsPromptTemplatesResponse200Function,
): string {
  return JSON.stringify(
    GetAllPromptTemplatesItemsPromptTemplatesResponse200Function$outboundSchema
      .parse(getAllPromptTemplatesItemsPromptTemplatesResponse200Function),
  );
}

export function getAllPromptTemplatesItemsPromptTemplatesResponse200FunctionFromJSON(
  jsonString: string,
): SafeParseResult<
  GetAllPromptTemplatesItemsPromptTemplatesResponse200Function,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetAllPromptTemplatesItemsPromptTemplatesResponse200Function$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'GetAllPromptTemplatesItemsPromptTemplatesResponse200Function' from JSON`,
  );
}

/** @internal */
export const GetAllPromptTemplatesItemsPromptTemplatesResponse200ToolCalls$inboundSchema:
  z.ZodType<
    GetAllPromptTemplatesItemsPromptTemplatesResponse200ToolCalls,
    z.ZodTypeDef,
    unknown
  > = z.object({
    id: z.string().optional(),
    index: z.number().optional(),
    type:
      GetAllPromptTemplatesItemsPromptTemplatesResponse200ApplicationJSONResponseBody1Type$inboundSchema,
    function: z.lazy(() =>
      GetAllPromptTemplatesItemsPromptTemplatesResponse200Function$inboundSchema
    ),
  });

/** @internal */
export type GetAllPromptTemplatesItemsPromptTemplatesResponse200ToolCalls$Outbound =
  {
    id?: string | undefined;
    index?: number | undefined;
    type: string;
    function:
      GetAllPromptTemplatesItemsPromptTemplatesResponse200Function$Outbound;
  };

/** @internal */
export const GetAllPromptTemplatesItemsPromptTemplatesResponse200ToolCalls$outboundSchema:
  z.ZodType<
    GetAllPromptTemplatesItemsPromptTemplatesResponse200ToolCalls$Outbound,
    z.ZodTypeDef,
    GetAllPromptTemplatesItemsPromptTemplatesResponse200ToolCalls
  > = z.object({
    id: z.string().optional(),
    index: z.number().optional(),
    type:
      GetAllPromptTemplatesItemsPromptTemplatesResponse200ApplicationJSONResponseBody1Type$outboundSchema,
    function: z.lazy(() =>
      GetAllPromptTemplatesItemsPromptTemplatesResponse200Function$outboundSchema
    ),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPromptTemplatesItemsPromptTemplatesResponse200ToolCalls$ {
  /** @deprecated use `GetAllPromptTemplatesItemsPromptTemplatesResponse200ToolCalls$inboundSchema` instead. */
  export const inboundSchema =
    GetAllPromptTemplatesItemsPromptTemplatesResponse200ToolCalls$inboundSchema;
  /** @deprecated use `GetAllPromptTemplatesItemsPromptTemplatesResponse200ToolCalls$outboundSchema` instead. */
  export const outboundSchema =
    GetAllPromptTemplatesItemsPromptTemplatesResponse200ToolCalls$outboundSchema;
  /** @deprecated use `GetAllPromptTemplatesItemsPromptTemplatesResponse200ToolCalls$Outbound` instead. */
  export type Outbound =
    GetAllPromptTemplatesItemsPromptTemplatesResponse200ToolCalls$Outbound;
}

export function getAllPromptTemplatesItemsPromptTemplatesResponse200ToolCallsToJSON(
  getAllPromptTemplatesItemsPromptTemplatesResponse200ToolCalls:
    GetAllPromptTemplatesItemsPromptTemplatesResponse200ToolCalls,
): string {
  return JSON.stringify(
    GetAllPromptTemplatesItemsPromptTemplatesResponse200ToolCalls$outboundSchema
      .parse(getAllPromptTemplatesItemsPromptTemplatesResponse200ToolCalls),
  );
}

export function getAllPromptTemplatesItemsPromptTemplatesResponse200ToolCallsFromJSON(
  jsonString: string,
): SafeParseResult<
  GetAllPromptTemplatesItemsPromptTemplatesResponse200ToolCalls,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetAllPromptTemplatesItemsPromptTemplatesResponse200ToolCalls$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'GetAllPromptTemplatesItemsPromptTemplatesResponse200ToolCalls' from JSON`,
  );
}

/** @internal */
export const GetAllPromptTemplatesItemsPromptTemplatesResponse200Messages$inboundSchema:
  z.ZodType<
    GetAllPromptTemplatesItemsPromptTemplatesResponse200Messages,
    z.ZodTypeDef,
    unknown
  > = z.object({
    role:
      GetAllPromptTemplatesItemsPromptTemplatesResponse200Role$inboundSchema,
    content: z.union([
      z.string(),
      z.array(z.union([
        z.lazy(() =>
          GetAllPromptTemplates2PromptTemplatesResponse200ApplicationJson1$inboundSchema
        ),
        z.lazy(() =>
          GetAllPromptTemplates2PromptTemplatesResponse200ApplicationJson2$inboundSchema
        ),
      ])),
    ]),
    tool_calls: z.array(
      z.lazy(() =>
        GetAllPromptTemplatesItemsPromptTemplatesResponse200ToolCalls$inboundSchema
      ),
    ).optional(),
  }).transform((v) => {
    return remap$(v, {
      "tool_calls": "toolCalls",
    });
  });

/** @internal */
export type GetAllPromptTemplatesItemsPromptTemplatesResponse200Messages$Outbound =
  {
    role: string;
    content:
      | string
      | Array<
        | GetAllPromptTemplates2PromptTemplatesResponse200ApplicationJson1$Outbound
        | GetAllPromptTemplates2PromptTemplatesResponse200ApplicationJson2$Outbound
      >;
    tool_calls?:
      | Array<
        GetAllPromptTemplatesItemsPromptTemplatesResponse200ToolCalls$Outbound
      >
      | undefined;
  };

/** @internal */
export const GetAllPromptTemplatesItemsPromptTemplatesResponse200Messages$outboundSchema:
  z.ZodType<
    GetAllPromptTemplatesItemsPromptTemplatesResponse200Messages$Outbound,
    z.ZodTypeDef,
    GetAllPromptTemplatesItemsPromptTemplatesResponse200Messages
  > = z.object({
    role:
      GetAllPromptTemplatesItemsPromptTemplatesResponse200Role$outboundSchema,
    content: z.union([
      z.string(),
      z.array(z.union([
        z.lazy(() =>
          GetAllPromptTemplates2PromptTemplatesResponse200ApplicationJson1$outboundSchema
        ),
        z.lazy(() =>
          GetAllPromptTemplates2PromptTemplatesResponse200ApplicationJson2$outboundSchema
        ),
      ])),
    ]),
    toolCalls: z.array(
      z.lazy(() =>
        GetAllPromptTemplatesItemsPromptTemplatesResponse200ToolCalls$outboundSchema
      ),
    ).optional(),
  }).transform((v) => {
    return remap$(v, {
      toolCalls: "tool_calls",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPromptTemplatesItemsPromptTemplatesResponse200Messages$ {
  /** @deprecated use `GetAllPromptTemplatesItemsPromptTemplatesResponse200Messages$inboundSchema` instead. */
  export const inboundSchema =
    GetAllPromptTemplatesItemsPromptTemplatesResponse200Messages$inboundSchema;
  /** @deprecated use `GetAllPromptTemplatesItemsPromptTemplatesResponse200Messages$outboundSchema` instead. */
  export const outboundSchema =
    GetAllPromptTemplatesItemsPromptTemplatesResponse200Messages$outboundSchema;
  /** @deprecated use `GetAllPromptTemplatesItemsPromptTemplatesResponse200Messages$Outbound` instead. */
  export type Outbound =
    GetAllPromptTemplatesItemsPromptTemplatesResponse200Messages$Outbound;
}

export function getAllPromptTemplatesItemsPromptTemplatesResponse200MessagesToJSON(
  getAllPromptTemplatesItemsPromptTemplatesResponse200Messages:
    GetAllPromptTemplatesItemsPromptTemplatesResponse200Messages,
): string {
  return JSON.stringify(
    GetAllPromptTemplatesItemsPromptTemplatesResponse200Messages$outboundSchema
      .parse(getAllPromptTemplatesItemsPromptTemplatesResponse200Messages),
  );
}

export function getAllPromptTemplatesItemsPromptTemplatesResponse200MessagesFromJSON(
  jsonString: string,
): SafeParseResult<
  GetAllPromptTemplatesItemsPromptTemplatesResponse200Messages,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetAllPromptTemplatesItemsPromptTemplatesResponse200Messages$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'GetAllPromptTemplatesItemsPromptTemplatesResponse200Messages' from JSON`,
  );
}

/** @internal */
export const GetAllPromptTemplatesItemsPromptTemplatesResponse200PromptConfig$inboundSchema:
  z.ZodType<
    GetAllPromptTemplatesItemsPromptTemplatesResponse200PromptConfig,
    z.ZodTypeDef,
    unknown
  > = z.object({
    stream: z.boolean().optional(),
    model: z.string().optional(),
    model_db_id: z.string().optional(),
    model_type:
      GetAllPromptTemplatesItemsPromptTemplatesResponse200ModelType$inboundSchema
        .optional(),
    model_parameters: z.lazy(() =>
      GetAllPromptTemplatesItemsPromptTemplatesResponse200ModelParameters$inboundSchema
    ).optional(),
    provider:
      GetAllPromptTemplatesItemsPromptTemplatesResponse200Provider$inboundSchema
        .optional(),
    integration_id: z.nullable(z.string()).optional(),
    version: z.string().optional(),
    messages: z.array(
      z.lazy(() =>
        GetAllPromptTemplatesItemsPromptTemplatesResponse200Messages$inboundSchema
      ),
    ),
  }).transform((v) => {
    return remap$(v, {
      "model_db_id": "modelDbId",
      "model_type": "modelType",
      "model_parameters": "modelParameters",
      "integration_id": "integrationId",
    });
  });

/** @internal */
export type GetAllPromptTemplatesItemsPromptTemplatesResponse200PromptConfig$Outbound =
  {
    stream?: boolean | undefined;
    model?: string | undefined;
    model_db_id?: string | undefined;
    model_type?: string | undefined;
    model_parameters?:
      | GetAllPromptTemplatesItemsPromptTemplatesResponse200ModelParameters$Outbound
      | undefined;
    provider?: string | undefined;
    integration_id?: string | null | undefined;
    version?: string | undefined;
    messages: Array<
      GetAllPromptTemplatesItemsPromptTemplatesResponse200Messages$Outbound
    >;
  };

/** @internal */
export const GetAllPromptTemplatesItemsPromptTemplatesResponse200PromptConfig$outboundSchema:
  z.ZodType<
    GetAllPromptTemplatesItemsPromptTemplatesResponse200PromptConfig$Outbound,
    z.ZodTypeDef,
    GetAllPromptTemplatesItemsPromptTemplatesResponse200PromptConfig
  > = z.object({
    stream: z.boolean().optional(),
    model: z.string().optional(),
    modelDbId: z.string().optional(),
    modelType:
      GetAllPromptTemplatesItemsPromptTemplatesResponse200ModelType$outboundSchema
        .optional(),
    modelParameters: z.lazy(() =>
      GetAllPromptTemplatesItemsPromptTemplatesResponse200ModelParameters$outboundSchema
    ).optional(),
    provider:
      GetAllPromptTemplatesItemsPromptTemplatesResponse200Provider$outboundSchema
        .optional(),
    integrationId: z.nullable(z.string()).optional(),
    version: z.string().optional(),
    messages: z.array(
      z.lazy(() =>
        GetAllPromptTemplatesItemsPromptTemplatesResponse200Messages$outboundSchema
      ),
    ),
  }).transform((v) => {
    return remap$(v, {
      modelDbId: "model_db_id",
      modelType: "model_type",
      modelParameters: "model_parameters",
      integrationId: "integration_id",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPromptTemplatesItemsPromptTemplatesResponse200PromptConfig$ {
  /** @deprecated use `GetAllPromptTemplatesItemsPromptTemplatesResponse200PromptConfig$inboundSchema` instead. */
  export const inboundSchema =
    GetAllPromptTemplatesItemsPromptTemplatesResponse200PromptConfig$inboundSchema;
  /** @deprecated use `GetAllPromptTemplatesItemsPromptTemplatesResponse200PromptConfig$outboundSchema` instead. */
  export const outboundSchema =
    GetAllPromptTemplatesItemsPromptTemplatesResponse200PromptConfig$outboundSchema;
  /** @deprecated use `GetAllPromptTemplatesItemsPromptTemplatesResponse200PromptConfig$Outbound` instead. */
  export type Outbound =
    GetAllPromptTemplatesItemsPromptTemplatesResponse200PromptConfig$Outbound;
}

export function getAllPromptTemplatesItemsPromptTemplatesResponse200PromptConfigToJSON(
  getAllPromptTemplatesItemsPromptTemplatesResponse200PromptConfig:
    GetAllPromptTemplatesItemsPromptTemplatesResponse200PromptConfig,
): string {
  return JSON.stringify(
    GetAllPromptTemplatesItemsPromptTemplatesResponse200PromptConfig$outboundSchema
      .parse(getAllPromptTemplatesItemsPromptTemplatesResponse200PromptConfig),
  );
}

export function getAllPromptTemplatesItemsPromptTemplatesResponse200PromptConfigFromJSON(
  jsonString: string,
): SafeParseResult<
  GetAllPromptTemplatesItemsPromptTemplatesResponse200PromptConfig,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetAllPromptTemplatesItemsPromptTemplatesResponse200PromptConfig$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'GetAllPromptTemplatesItemsPromptTemplatesResponse200PromptConfig' from JSON`,
  );
}

/** @internal */
export const GetAllPromptTemplatesItemsPromptTemplatesResponse200Metadata$inboundSchema:
  z.ZodType<
    GetAllPromptTemplatesItemsPromptTemplatesResponse200Metadata,
    z.ZodTypeDef,
    unknown
  > = z.object({
    use_cases: z.array(z.string()).optional(),
    language: z.string().optional(),
  }).transform((v) => {
    return remap$(v, {
      "use_cases": "useCases",
    });
  });

/** @internal */
export type GetAllPromptTemplatesItemsPromptTemplatesResponse200Metadata$Outbound =
  {
    use_cases?: Array<string> | undefined;
    language?: string | undefined;
  };

/** @internal */
export const GetAllPromptTemplatesItemsPromptTemplatesResponse200Metadata$outboundSchema:
  z.ZodType<
    GetAllPromptTemplatesItemsPromptTemplatesResponse200Metadata$Outbound,
    z.ZodTypeDef,
    GetAllPromptTemplatesItemsPromptTemplatesResponse200Metadata
  > = z.object({
    useCases: z.array(z.string()).optional(),
    language: z.string().optional(),
  }).transform((v) => {
    return remap$(v, {
      useCases: "use_cases",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPromptTemplatesItemsPromptTemplatesResponse200Metadata$ {
  /** @deprecated use `GetAllPromptTemplatesItemsPromptTemplatesResponse200Metadata$inboundSchema` instead. */
  export const inboundSchema =
    GetAllPromptTemplatesItemsPromptTemplatesResponse200Metadata$inboundSchema;
  /** @deprecated use `GetAllPromptTemplatesItemsPromptTemplatesResponse200Metadata$outboundSchema` instead. */
  export const outboundSchema =
    GetAllPromptTemplatesItemsPromptTemplatesResponse200Metadata$outboundSchema;
  /** @deprecated use `GetAllPromptTemplatesItemsPromptTemplatesResponse200Metadata$Outbound` instead. */
  export type Outbound =
    GetAllPromptTemplatesItemsPromptTemplatesResponse200Metadata$Outbound;
}

export function getAllPromptTemplatesItemsPromptTemplatesResponse200MetadataToJSON(
  getAllPromptTemplatesItemsPromptTemplatesResponse200Metadata:
    GetAllPromptTemplatesItemsPromptTemplatesResponse200Metadata,
): string {
  return JSON.stringify(
    GetAllPromptTemplatesItemsPromptTemplatesResponse200Metadata$outboundSchema
      .parse(getAllPromptTemplatesItemsPromptTemplatesResponse200Metadata),
  );
}

export function getAllPromptTemplatesItemsPromptTemplatesResponse200MetadataFromJSON(
  jsonString: string,
): SafeParseResult<
  GetAllPromptTemplatesItemsPromptTemplatesResponse200Metadata,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetAllPromptTemplatesItemsPromptTemplatesResponse200Metadata$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'GetAllPromptTemplatesItemsPromptTemplatesResponse200Metadata' from JSON`,
  );
}

/** @internal */
export const GetAllPromptTemplatesItemsPromptTemplatesVersions$inboundSchema:
  z.ZodType<
    GetAllPromptTemplatesItemsPromptTemplatesVersions,
    z.ZodTypeDef,
    unknown
  > = z.object({
    _id: z.string(),
    created_by_id: z.string(),
    display_name: z.string(),
    updated_by_id: z.string(),
    description: z.nullable(z.string()).optional(),
    prompt_config: z.lazy(() =>
      GetAllPromptTemplatesItemsPromptTemplatesResponse200PromptConfig$inboundSchema
    ),
    metadata: z.lazy(() =>
      GetAllPromptTemplatesItemsPromptTemplatesResponse200Metadata$inboundSchema
    ),
    commit: z.string(),
    timestamp: z.string(),
  }).transform((v) => {
    return remap$(v, {
      "_id": "id",
      "created_by_id": "createdById",
      "display_name": "displayName",
      "updated_by_id": "updatedById",
      "prompt_config": "promptConfig",
    });
  });

/** @internal */
export type GetAllPromptTemplatesItemsPromptTemplatesVersions$Outbound = {
  _id: string;
  created_by_id: string;
  display_name: string;
  updated_by_id: string;
  description?: string | null | undefined;
  prompt_config:
    GetAllPromptTemplatesItemsPromptTemplatesResponse200PromptConfig$Outbound;
  metadata:
    GetAllPromptTemplatesItemsPromptTemplatesResponse200Metadata$Outbound;
  commit: string;
  timestamp: string;
};

/** @internal */
export const GetAllPromptTemplatesItemsPromptTemplatesVersions$outboundSchema:
  z.ZodType<
    GetAllPromptTemplatesItemsPromptTemplatesVersions$Outbound,
    z.ZodTypeDef,
    GetAllPromptTemplatesItemsPromptTemplatesVersions
  > = z.object({
    id: z.string(),
    createdById: z.string(),
    displayName: z.string(),
    updatedById: z.string(),
    description: z.nullable(z.string()).optional(),
    promptConfig: z.lazy(() =>
      GetAllPromptTemplatesItemsPromptTemplatesResponse200PromptConfig$outboundSchema
    ),
    metadata: z.lazy(() =>
      GetAllPromptTemplatesItemsPromptTemplatesResponse200Metadata$outboundSchema
    ),
    commit: z.string(),
    timestamp: z.string(),
  }).transform((v) => {
    return remap$(v, {
      id: "_id",
      createdById: "created_by_id",
      displayName: "display_name",
      updatedById: "updated_by_id",
      promptConfig: "prompt_config",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPromptTemplatesItemsPromptTemplatesVersions$ {
  /** @deprecated use `GetAllPromptTemplatesItemsPromptTemplatesVersions$inboundSchema` instead. */
  export const inboundSchema =
    GetAllPromptTemplatesItemsPromptTemplatesVersions$inboundSchema;
  /** @deprecated use `GetAllPromptTemplatesItemsPromptTemplatesVersions$outboundSchema` instead. */
  export const outboundSchema =
    GetAllPromptTemplatesItemsPromptTemplatesVersions$outboundSchema;
  /** @deprecated use `GetAllPromptTemplatesItemsPromptTemplatesVersions$Outbound` instead. */
  export type Outbound =
    GetAllPromptTemplatesItemsPromptTemplatesVersions$Outbound;
}

export function getAllPromptTemplatesItemsPromptTemplatesVersionsToJSON(
  getAllPromptTemplatesItemsPromptTemplatesVersions:
    GetAllPromptTemplatesItemsPromptTemplatesVersions,
): string {
  return JSON.stringify(
    GetAllPromptTemplatesItemsPromptTemplatesVersions$outboundSchema.parse(
      getAllPromptTemplatesItemsPromptTemplatesVersions,
    ),
  );
}

export function getAllPromptTemplatesItemsPromptTemplatesVersionsFromJSON(
  jsonString: string,
): SafeParseResult<
  GetAllPromptTemplatesItemsPromptTemplatesVersions,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetAllPromptTemplatesItemsPromptTemplatesVersions$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'GetAllPromptTemplatesItemsPromptTemplatesVersions' from JSON`,
  );
}

/** @internal */
export const ItemsType$inboundSchema: z.ZodNativeEnum<typeof ItemsType> = z
  .nativeEnum(ItemsType);

/** @internal */
export const ItemsType$outboundSchema: z.ZodNativeEnum<typeof ItemsType> =
  ItemsType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ItemsType$ {
  /** @deprecated use `ItemsType$inboundSchema` instead. */
  export const inboundSchema = ItemsType$inboundSchema;
  /** @deprecated use `ItemsType$outboundSchema` instead. */
  export const outboundSchema = ItemsType$outboundSchema;
}

/** @internal */
export const Items1$inboundSchema: z.ZodType<Items1, z.ZodTypeDef, unknown> = z
  .object({
    _id: z.string(),
    owner: z.union([
      z.string(),
      GetAllPromptTemplatesOwnerPromptTemplatesResponse2$inboundSchema,
    ]),
    domain_id: z.string(),
    created_by_id: z.string(),
    display_name: z.string(),
    updated_by_id: z.string(),
    description: z.nullable(z.string()).optional(),
    prompt_config: z.lazy(() => ItemsPromptConfig$inboundSchema),
    metadata: z.lazy(() => ItemsMetadata$inboundSchema),
    created: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
    updated: z.string().datetime({ offset: true }).default(
      "2024-11-26T10:00:21.083Z",
    ).transform(v => new Date(v)),
    versions: z.array(
      z.lazy(() =>
        GetAllPromptTemplatesItemsPromptTemplatesVersions$inboundSchema
      ),
    ),
    type: ItemsType$inboundSchema,
  }).transform((v) => {
    return remap$(v, {
      "_id": "id",
      "domain_id": "domainId",
      "created_by_id": "createdById",
      "display_name": "displayName",
      "updated_by_id": "updatedById",
      "prompt_config": "promptConfig",
    });
  });

/** @internal */
export type Items1$Outbound = {
  _id: string;
  owner: string | string;
  domain_id: string;
  created_by_id: string;
  display_name: string;
  updated_by_id: string;
  description?: string | null | undefined;
  prompt_config: ItemsPromptConfig$Outbound;
  metadata: ItemsMetadata$Outbound;
  created?: string | undefined;
  updated: string;
  versions: Array<GetAllPromptTemplatesItemsPromptTemplatesVersions$Outbound>;
  type: string;
};

/** @internal */
export const Items1$outboundSchema: z.ZodType<
  Items1$Outbound,
  z.ZodTypeDef,
  Items1
> = z.object({
  id: z.string(),
  owner: z.union([
    z.string(),
    GetAllPromptTemplatesOwnerPromptTemplatesResponse2$outboundSchema,
  ]),
  domainId: z.string(),
  createdById: z.string(),
  displayName: z.string(),
  updatedById: z.string(),
  description: z.nullable(z.string()).optional(),
  promptConfig: z.lazy(() => ItemsPromptConfig$outboundSchema),
  metadata: z.lazy(() => ItemsMetadata$outboundSchema),
  created: z.date().transform(v => v.toISOString()).optional(),
  updated: z.date().default(() => new Date("2024-11-26T10:00:21.083Z"))
    .transform(v => v.toISOString()),
  versions: z.array(
    z.lazy(() =>
      GetAllPromptTemplatesItemsPromptTemplatesVersions$outboundSchema
    ),
  ),
  type: ItemsType$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    id: "_id",
    domainId: "domain_id",
    createdById: "created_by_id",
    displayName: "display_name",
    updatedById: "updated_by_id",
    promptConfig: "prompt_config",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Items1$ {
  /** @deprecated use `Items1$inboundSchema` instead. */
  export const inboundSchema = Items1$inboundSchema;
  /** @deprecated use `Items1$outboundSchema` instead. */
  export const outboundSchema = Items1$outboundSchema;
  /** @deprecated use `Items1$Outbound` instead. */
  export type Outbound = Items1$Outbound;
}

export function items1ToJSON(items1: Items1): string {
  return JSON.stringify(Items1$outboundSchema.parse(items1));
}

export function items1FromJSON(
  jsonString: string,
): SafeParseResult<Items1, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Items1$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Items1' from JSON`,
  );
}

/** @internal */
export const Items$inboundSchema: z.ZodType<Items, z.ZodTypeDef, unknown> = z
  .union([
    z.lazy(() => Items1$inboundSchema),
    z.lazy(() => Items3$inboundSchema),
    z.lazy(() => Items2$inboundSchema),
  ]);

/** @internal */
export type Items$Outbound =
  | Items1$Outbound
  | Items3$Outbound
  | Items2$Outbound;

/** @internal */
export const Items$outboundSchema: z.ZodType<
  Items$Outbound,
  z.ZodTypeDef,
  Items
> = z.union([
  z.lazy(() => Items1$outboundSchema),
  z.lazy(() => Items3$outboundSchema),
  z.lazy(() => Items2$outboundSchema),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Items$ {
  /** @deprecated use `Items$inboundSchema` instead. */
  export const inboundSchema = Items$inboundSchema;
  /** @deprecated use `Items$outboundSchema` instead. */
  export const outboundSchema = Items$outboundSchema;
  /** @deprecated use `Items$Outbound` instead. */
  export type Outbound = Items$Outbound;
}

export function itemsToJSON(items: Items): string {
  return JSON.stringify(Items$outboundSchema.parse(items));
}

export function itemsFromJSON(
  jsonString: string,
): SafeParseResult<Items, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Items$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Items' from JSON`,
  );
}

/** @internal */
export const GetAllPromptTemplatesResponseBody$inboundSchema: z.ZodType<
  GetAllPromptTemplatesResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  count: z.number(),
  items: z.array(
    z.union([
      z.lazy(() => Items1$inboundSchema),
      z.lazy(() => Items3$inboundSchema),
      z.lazy(() => Items2$inboundSchema),
    ]),
  ),
});

/** @internal */
export type GetAllPromptTemplatesResponseBody$Outbound = {
  count: number;
  items: Array<Items1$Outbound | Items3$Outbound | Items2$Outbound>;
};

/** @internal */
export const GetAllPromptTemplatesResponseBody$outboundSchema: z.ZodType<
  GetAllPromptTemplatesResponseBody$Outbound,
  z.ZodTypeDef,
  GetAllPromptTemplatesResponseBody
> = z.object({
  count: z.number(),
  items: z.array(
    z.union([
      z.lazy(() => Items1$outboundSchema),
      z.lazy(() => Items3$outboundSchema),
      z.lazy(() => Items2$outboundSchema),
    ]),
  ),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPromptTemplatesResponseBody$ {
  /** @deprecated use `GetAllPromptTemplatesResponseBody$inboundSchema` instead. */
  export const inboundSchema = GetAllPromptTemplatesResponseBody$inboundSchema;
  /** @deprecated use `GetAllPromptTemplatesResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    GetAllPromptTemplatesResponseBody$outboundSchema;
  /** @deprecated use `GetAllPromptTemplatesResponseBody$Outbound` instead. */
  export type Outbound = GetAllPromptTemplatesResponseBody$Outbound;
}

export function getAllPromptTemplatesResponseBodyToJSON(
  getAllPromptTemplatesResponseBody: GetAllPromptTemplatesResponseBody,
): string {
  return JSON.stringify(
    GetAllPromptTemplatesResponseBody$outboundSchema.parse(
      getAllPromptTemplatesResponseBody,
    ),
  );
}

export function getAllPromptTemplatesResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<GetAllPromptTemplatesResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetAllPromptTemplatesResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetAllPromptTemplatesResponseBody' from JSON`,
  );
}
