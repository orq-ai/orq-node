/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * Budget period type
 */
export const Period = {
  Daily: "daily",
  Weekly: "weekly",
  Monthly: "monthly",
  Yearly: "yearly",
} as const;
/**
 * Budget period type
 */
export type Period = ClosedEnum<typeof Period>;

/**
 * Budget configuration to update
 */
export type Budget = {
  /**
   * Budget period type
   */
  period?: Period | undefined;
  /**
   * Budget amount in USD for the specified period
   */
  amount?: number | undefined;
};

export type UpdateBudgetRequestBody = {
  /**
   * Budget configuration to update
   */
  budget?: Budget | undefined;
  /**
   * Whether this budget configuration is currently active
   */
  isActive?: boolean | undefined;
};

export type UpdateBudgetRequest = {
  id: string;
  requestBody: UpdateBudgetRequestBody;
};

/**
 * Budget entity type
 */
export const UpdateBudgetType = {
  ApiKey: "api_key",
  Contact: "contact",
  Workspace: "workspace",
} as const;
/**
 * Budget entity type
 */
export type UpdateBudgetType = ClosedEnum<typeof UpdateBudgetType>;

/**
 * Budget period type
 */
export const UpdateBudgetPeriod = {
  Daily: "daily",
  Weekly: "weekly",
  Monthly: "monthly",
  Yearly: "yearly",
} as const;
/**
 * Budget period type
 */
export type UpdateBudgetPeriod = ClosedEnum<typeof UpdateBudgetPeriod>;

/**
 * Budget configuration
 */
export type UpdateBudgetBudget = {
  /**
   * Budget period type
   */
  period: UpdateBudgetPeriod;
  /**
   * Budget amount in USD for the specified period
   */
  amount: number;
};

export type UpdateBudgetConsumption = {
  /**
   * Current period consumption in USD
   */
  currentAmount: number;
  /**
   * Remaining budget (amount - current_amount)
   */
  remainingAmount: number;
  /**
   * When the current period started
   */
  periodStart: string | null;
  /**
   * When the current period will reset
   */
  periodEnd: string | null;
};

/**
 * Budget configuration details
 */
export type UpdateBudgetResponseBody = {
  /**
   * Unique ULID for the budget configuration
   */
  id: string;
  /**
   * Budget entity type
   */
  type: UpdateBudgetType;
  /**
   * Contact external identifier (present when type is "contact")
   */
  contactId?: string | undefined;
  /**
   * Budget configuration
   */
  budget: UpdateBudgetBudget;
  /**
   * Whether this budget configuration is currently active
   */
  isActive: boolean;
  consumption?: UpdateBudgetConsumption | undefined;
  /**
   * The date and time the resource was created
   */
  created?: Date | undefined;
  /**
   * The date and time the resource was last updated
   */
  updated?: Date | undefined;
};

/** @internal */
export const Period$inboundSchema: z.ZodNativeEnum<typeof Period> = z
  .nativeEnum(Period);

/** @internal */
export const Period$outboundSchema: z.ZodNativeEnum<typeof Period> =
  Period$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Period$ {
  /** @deprecated use `Period$inboundSchema` instead. */
  export const inboundSchema = Period$inboundSchema;
  /** @deprecated use `Period$outboundSchema` instead. */
  export const outboundSchema = Period$outboundSchema;
}

/** @internal */
export const Budget$inboundSchema: z.ZodType<Budget, z.ZodTypeDef, unknown> = z
  .object({
    period: Period$inboundSchema.optional(),
    amount: z.number().optional(),
  });

/** @internal */
export type Budget$Outbound = {
  period?: string | undefined;
  amount?: number | undefined;
};

/** @internal */
export const Budget$outboundSchema: z.ZodType<
  Budget$Outbound,
  z.ZodTypeDef,
  Budget
> = z.object({
  period: Period$outboundSchema.optional(),
  amount: z.number().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Budget$ {
  /** @deprecated use `Budget$inboundSchema` instead. */
  export const inboundSchema = Budget$inboundSchema;
  /** @deprecated use `Budget$outboundSchema` instead. */
  export const outboundSchema = Budget$outboundSchema;
  /** @deprecated use `Budget$Outbound` instead. */
  export type Outbound = Budget$Outbound;
}

export function budgetToJSON(budget: Budget): string {
  return JSON.stringify(Budget$outboundSchema.parse(budget));
}

export function budgetFromJSON(
  jsonString: string,
): SafeParseResult<Budget, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Budget$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Budget' from JSON`,
  );
}

/** @internal */
export const UpdateBudgetRequestBody$inboundSchema: z.ZodType<
  UpdateBudgetRequestBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  budget: z.lazy(() => Budget$inboundSchema).optional(),
  is_active: z.boolean().optional(),
}).transform((v) => {
  return remap$(v, {
    "is_active": "isActive",
  });
});

/** @internal */
export type UpdateBudgetRequestBody$Outbound = {
  budget?: Budget$Outbound | undefined;
  is_active?: boolean | undefined;
};

/** @internal */
export const UpdateBudgetRequestBody$outboundSchema: z.ZodType<
  UpdateBudgetRequestBody$Outbound,
  z.ZodTypeDef,
  UpdateBudgetRequestBody
> = z.object({
  budget: z.lazy(() => Budget$outboundSchema).optional(),
  isActive: z.boolean().optional(),
}).transform((v) => {
  return remap$(v, {
    isActive: "is_active",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateBudgetRequestBody$ {
  /** @deprecated use `UpdateBudgetRequestBody$inboundSchema` instead. */
  export const inboundSchema = UpdateBudgetRequestBody$inboundSchema;
  /** @deprecated use `UpdateBudgetRequestBody$outboundSchema` instead. */
  export const outboundSchema = UpdateBudgetRequestBody$outboundSchema;
  /** @deprecated use `UpdateBudgetRequestBody$Outbound` instead. */
  export type Outbound = UpdateBudgetRequestBody$Outbound;
}

export function updateBudgetRequestBodyToJSON(
  updateBudgetRequestBody: UpdateBudgetRequestBody,
): string {
  return JSON.stringify(
    UpdateBudgetRequestBody$outboundSchema.parse(updateBudgetRequestBody),
  );
}

export function updateBudgetRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<UpdateBudgetRequestBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateBudgetRequestBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateBudgetRequestBody' from JSON`,
  );
}

/** @internal */
export const UpdateBudgetRequest$inboundSchema: z.ZodType<
  UpdateBudgetRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  RequestBody: z.lazy(() => UpdateBudgetRequestBody$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "RequestBody": "requestBody",
  });
});

/** @internal */
export type UpdateBudgetRequest$Outbound = {
  id: string;
  RequestBody: UpdateBudgetRequestBody$Outbound;
};

/** @internal */
export const UpdateBudgetRequest$outboundSchema: z.ZodType<
  UpdateBudgetRequest$Outbound,
  z.ZodTypeDef,
  UpdateBudgetRequest
> = z.object({
  id: z.string(),
  requestBody: z.lazy(() => UpdateBudgetRequestBody$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    requestBody: "RequestBody",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateBudgetRequest$ {
  /** @deprecated use `UpdateBudgetRequest$inboundSchema` instead. */
  export const inboundSchema = UpdateBudgetRequest$inboundSchema;
  /** @deprecated use `UpdateBudgetRequest$outboundSchema` instead. */
  export const outboundSchema = UpdateBudgetRequest$outboundSchema;
  /** @deprecated use `UpdateBudgetRequest$Outbound` instead. */
  export type Outbound = UpdateBudgetRequest$Outbound;
}

export function updateBudgetRequestToJSON(
  updateBudgetRequest: UpdateBudgetRequest,
): string {
  return JSON.stringify(
    UpdateBudgetRequest$outboundSchema.parse(updateBudgetRequest),
  );
}

export function updateBudgetRequestFromJSON(
  jsonString: string,
): SafeParseResult<UpdateBudgetRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateBudgetRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateBudgetRequest' from JSON`,
  );
}

/** @internal */
export const UpdateBudgetType$inboundSchema: z.ZodNativeEnum<
  typeof UpdateBudgetType
> = z.nativeEnum(UpdateBudgetType);

/** @internal */
export const UpdateBudgetType$outboundSchema: z.ZodNativeEnum<
  typeof UpdateBudgetType
> = UpdateBudgetType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateBudgetType$ {
  /** @deprecated use `UpdateBudgetType$inboundSchema` instead. */
  export const inboundSchema = UpdateBudgetType$inboundSchema;
  /** @deprecated use `UpdateBudgetType$outboundSchema` instead. */
  export const outboundSchema = UpdateBudgetType$outboundSchema;
}

/** @internal */
export const UpdateBudgetPeriod$inboundSchema: z.ZodNativeEnum<
  typeof UpdateBudgetPeriod
> = z.nativeEnum(UpdateBudgetPeriod);

/** @internal */
export const UpdateBudgetPeriod$outboundSchema: z.ZodNativeEnum<
  typeof UpdateBudgetPeriod
> = UpdateBudgetPeriod$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateBudgetPeriod$ {
  /** @deprecated use `UpdateBudgetPeriod$inboundSchema` instead. */
  export const inboundSchema = UpdateBudgetPeriod$inboundSchema;
  /** @deprecated use `UpdateBudgetPeriod$outboundSchema` instead. */
  export const outboundSchema = UpdateBudgetPeriod$outboundSchema;
}

/** @internal */
export const UpdateBudgetBudget$inboundSchema: z.ZodType<
  UpdateBudgetBudget,
  z.ZodTypeDef,
  unknown
> = z.object({
  period: UpdateBudgetPeriod$inboundSchema,
  amount: z.number(),
});

/** @internal */
export type UpdateBudgetBudget$Outbound = {
  period: string;
  amount: number;
};

/** @internal */
export const UpdateBudgetBudget$outboundSchema: z.ZodType<
  UpdateBudgetBudget$Outbound,
  z.ZodTypeDef,
  UpdateBudgetBudget
> = z.object({
  period: UpdateBudgetPeriod$outboundSchema,
  amount: z.number(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateBudgetBudget$ {
  /** @deprecated use `UpdateBudgetBudget$inboundSchema` instead. */
  export const inboundSchema = UpdateBudgetBudget$inboundSchema;
  /** @deprecated use `UpdateBudgetBudget$outboundSchema` instead. */
  export const outboundSchema = UpdateBudgetBudget$outboundSchema;
  /** @deprecated use `UpdateBudgetBudget$Outbound` instead. */
  export type Outbound = UpdateBudgetBudget$Outbound;
}

export function updateBudgetBudgetToJSON(
  updateBudgetBudget: UpdateBudgetBudget,
): string {
  return JSON.stringify(
    UpdateBudgetBudget$outboundSchema.parse(updateBudgetBudget),
  );
}

export function updateBudgetBudgetFromJSON(
  jsonString: string,
): SafeParseResult<UpdateBudgetBudget, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateBudgetBudget$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateBudgetBudget' from JSON`,
  );
}

/** @internal */
export const UpdateBudgetConsumption$inboundSchema: z.ZodType<
  UpdateBudgetConsumption,
  z.ZodTypeDef,
  unknown
> = z.object({
  current_amount: z.number(),
  remaining_amount: z.number(),
  period_start: z.nullable(z.string()),
  period_end: z.nullable(z.string()),
}).transform((v) => {
  return remap$(v, {
    "current_amount": "currentAmount",
    "remaining_amount": "remainingAmount",
    "period_start": "periodStart",
    "period_end": "periodEnd",
  });
});

/** @internal */
export type UpdateBudgetConsumption$Outbound = {
  current_amount: number;
  remaining_amount: number;
  period_start: string | null;
  period_end: string | null;
};

/** @internal */
export const UpdateBudgetConsumption$outboundSchema: z.ZodType<
  UpdateBudgetConsumption$Outbound,
  z.ZodTypeDef,
  UpdateBudgetConsumption
> = z.object({
  currentAmount: z.number(),
  remainingAmount: z.number(),
  periodStart: z.nullable(z.string()),
  periodEnd: z.nullable(z.string()),
}).transform((v) => {
  return remap$(v, {
    currentAmount: "current_amount",
    remainingAmount: "remaining_amount",
    periodStart: "period_start",
    periodEnd: "period_end",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateBudgetConsumption$ {
  /** @deprecated use `UpdateBudgetConsumption$inboundSchema` instead. */
  export const inboundSchema = UpdateBudgetConsumption$inboundSchema;
  /** @deprecated use `UpdateBudgetConsumption$outboundSchema` instead. */
  export const outboundSchema = UpdateBudgetConsumption$outboundSchema;
  /** @deprecated use `UpdateBudgetConsumption$Outbound` instead. */
  export type Outbound = UpdateBudgetConsumption$Outbound;
}

export function updateBudgetConsumptionToJSON(
  updateBudgetConsumption: UpdateBudgetConsumption,
): string {
  return JSON.stringify(
    UpdateBudgetConsumption$outboundSchema.parse(updateBudgetConsumption),
  );
}

export function updateBudgetConsumptionFromJSON(
  jsonString: string,
): SafeParseResult<UpdateBudgetConsumption, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateBudgetConsumption$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateBudgetConsumption' from JSON`,
  );
}

/** @internal */
export const UpdateBudgetResponseBody$inboundSchema: z.ZodType<
  UpdateBudgetResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  _id: z.string(),
  type: UpdateBudgetType$inboundSchema,
  contact_id: z.string().optional(),
  budget: z.lazy(() => UpdateBudgetBudget$inboundSchema),
  is_active: z.boolean(),
  consumption: z.lazy(() => UpdateBudgetConsumption$inboundSchema).optional(),
  created: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
  updated: z.string().datetime({ offset: true }).default(
    "2025-10-14T14:13:25.174Z",
  ).transform(v => new Date(v)),
}).transform((v) => {
  return remap$(v, {
    "_id": "id",
    "contact_id": "contactId",
    "is_active": "isActive",
  });
});

/** @internal */
export type UpdateBudgetResponseBody$Outbound = {
  _id: string;
  type: string;
  contact_id?: string | undefined;
  budget: UpdateBudgetBudget$Outbound;
  is_active: boolean;
  consumption?: UpdateBudgetConsumption$Outbound | undefined;
  created?: string | undefined;
  updated: string;
};

/** @internal */
export const UpdateBudgetResponseBody$outboundSchema: z.ZodType<
  UpdateBudgetResponseBody$Outbound,
  z.ZodTypeDef,
  UpdateBudgetResponseBody
> = z.object({
  id: z.string(),
  type: UpdateBudgetType$outboundSchema,
  contactId: z.string().optional(),
  budget: z.lazy(() => UpdateBudgetBudget$outboundSchema),
  isActive: z.boolean(),
  consumption: z.lazy(() => UpdateBudgetConsumption$outboundSchema).optional(),
  created: z.date().transform(v => v.toISOString()).optional(),
  updated: z.date().default(() => new Date("2025-10-14T14:13:25.174Z"))
    .transform(v => v.toISOString()),
}).transform((v) => {
  return remap$(v, {
    id: "_id",
    contactId: "contact_id",
    isActive: "is_active",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateBudgetResponseBody$ {
  /** @deprecated use `UpdateBudgetResponseBody$inboundSchema` instead. */
  export const inboundSchema = UpdateBudgetResponseBody$inboundSchema;
  /** @deprecated use `UpdateBudgetResponseBody$outboundSchema` instead. */
  export const outboundSchema = UpdateBudgetResponseBody$outboundSchema;
  /** @deprecated use `UpdateBudgetResponseBody$Outbound` instead. */
  export type Outbound = UpdateBudgetResponseBody$Outbound;
}

export function updateBudgetResponseBodyToJSON(
  updateBudgetResponseBody: UpdateBudgetResponseBody,
): string {
  return JSON.stringify(
    UpdateBudgetResponseBody$outboundSchema.parse(updateBudgetResponseBody),
  );
}

export function updateBudgetResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<UpdateBudgetResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateBudgetResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateBudgetResponseBody' from JSON`,
  );
}
