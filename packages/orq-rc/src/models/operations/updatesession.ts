/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type UpdateSessionBilling = {
  /**
   * Total cost of the session
   */
  inputCost: number;
  /**
   * Total cost of the session
   */
  outputCost: number;
  /**
   * Total usage of the session
   */
  totalCost: number;
};

export type UpdateSessionUsage = {
  /**
   * Total input tokens of the session
   */
  promptTokens: number;
  /**
   * Total output tokens of the session
   */
  completionTokens: number;
  /**
   * Total tokens of the session
   */
  totalTokens: number;
};

export type UpdateSessionRequestBody = {
  id?: string | undefined;
  externalId?: string | undefined;
  /**
   * Duration of the session in ms
   */
  duration?: number | undefined;
  /**
   * List of contact ids
   */
  contactIds?: Array<string> | undefined;
  billing?: UpdateSessionBilling | undefined;
  usage?: UpdateSessionUsage | undefined;
  /**
   * Total traces of the session
   */
  tracesCount?: number | undefined;
  tags?: Array<string> | undefined;
  /**
   * The workspace id
   */
  workspaceId?: string | undefined;
  /**
   * The project id
   */
  projectId?: string | null | undefined;
  /**
   * The time when the session was created
   */
  startedAt?: Date | undefined;
  /**
   * The time when the session was updated
   */
  updatedAt?: Date | undefined;
};

export type UpdateSessionRequest = {
  /**
   * Unique identifier of the session
   */
  sessionId: string;
  requestBody?: UpdateSessionRequestBody | undefined;
};

export type UpdateSessionSessionsBilling = {
  /**
   * Total cost of the session
   */
  inputCost: number;
  /**
   * Total cost of the session
   */
  outputCost: number;
  /**
   * Total usage of the session
   */
  totalCost: number;
};

export type UpdateSessionSessionsUsage = {
  /**
   * Total input tokens of the session
   */
  promptTokens: number;
  /**
   * Total output tokens of the session
   */
  completionTokens: number;
  /**
   * Total tokens of the session
   */
  totalTokens: number;
};

/**
 * Session
 */
export type UpdateSessionResponseBody = {
  id: string;
  externalId: string;
  /**
   * Duration of the session in ms
   */
  duration: number;
  /**
   * List of contact ids
   */
  contactIds: Array<string>;
  billing: UpdateSessionSessionsBilling;
  usage: UpdateSessionSessionsUsage;
  /**
   * Total traces of the session
   */
  tracesCount: number;
  tags: Array<string>;
  /**
   * The workspace id
   */
  workspaceId: string;
  /**
   * The project id
   */
  projectId?: string | null | undefined;
  /**
   * The time when the session was created
   */
  startedAt?: Date | undefined;
  /**
   * The time when the session was updated
   */
  updatedAt?: Date | undefined;
};

/** @internal */
export const UpdateSessionBilling$inboundSchema: z.ZodType<
  UpdateSessionBilling,
  z.ZodTypeDef,
  unknown
> = z.object({
  input_cost: z.number(),
  output_cost: z.number(),
  total_cost: z.number(),
}).transform((v) => {
  return remap$(v, {
    "input_cost": "inputCost",
    "output_cost": "outputCost",
    "total_cost": "totalCost",
  });
});

/** @internal */
export type UpdateSessionBilling$Outbound = {
  input_cost: number;
  output_cost: number;
  total_cost: number;
};

/** @internal */
export const UpdateSessionBilling$outboundSchema: z.ZodType<
  UpdateSessionBilling$Outbound,
  z.ZodTypeDef,
  UpdateSessionBilling
> = z.object({
  inputCost: z.number(),
  outputCost: z.number(),
  totalCost: z.number(),
}).transform((v) => {
  return remap$(v, {
    inputCost: "input_cost",
    outputCost: "output_cost",
    totalCost: "total_cost",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateSessionBilling$ {
  /** @deprecated use `UpdateSessionBilling$inboundSchema` instead. */
  export const inboundSchema = UpdateSessionBilling$inboundSchema;
  /** @deprecated use `UpdateSessionBilling$outboundSchema` instead. */
  export const outboundSchema = UpdateSessionBilling$outboundSchema;
  /** @deprecated use `UpdateSessionBilling$Outbound` instead. */
  export type Outbound = UpdateSessionBilling$Outbound;
}

export function updateSessionBillingToJSON(
  updateSessionBilling: UpdateSessionBilling,
): string {
  return JSON.stringify(
    UpdateSessionBilling$outboundSchema.parse(updateSessionBilling),
  );
}

export function updateSessionBillingFromJSON(
  jsonString: string,
): SafeParseResult<UpdateSessionBilling, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateSessionBilling$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateSessionBilling' from JSON`,
  );
}

/** @internal */
export const UpdateSessionUsage$inboundSchema: z.ZodType<
  UpdateSessionUsage,
  z.ZodTypeDef,
  unknown
> = z.object({
  prompt_tokens: z.number(),
  completion_tokens: z.number(),
  total_tokens: z.number(),
}).transform((v) => {
  return remap$(v, {
    "prompt_tokens": "promptTokens",
    "completion_tokens": "completionTokens",
    "total_tokens": "totalTokens",
  });
});

/** @internal */
export type UpdateSessionUsage$Outbound = {
  prompt_tokens: number;
  completion_tokens: number;
  total_tokens: number;
};

/** @internal */
export const UpdateSessionUsage$outboundSchema: z.ZodType<
  UpdateSessionUsage$Outbound,
  z.ZodTypeDef,
  UpdateSessionUsage
> = z.object({
  promptTokens: z.number(),
  completionTokens: z.number(),
  totalTokens: z.number(),
}).transform((v) => {
  return remap$(v, {
    promptTokens: "prompt_tokens",
    completionTokens: "completion_tokens",
    totalTokens: "total_tokens",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateSessionUsage$ {
  /** @deprecated use `UpdateSessionUsage$inboundSchema` instead. */
  export const inboundSchema = UpdateSessionUsage$inboundSchema;
  /** @deprecated use `UpdateSessionUsage$outboundSchema` instead. */
  export const outboundSchema = UpdateSessionUsage$outboundSchema;
  /** @deprecated use `UpdateSessionUsage$Outbound` instead. */
  export type Outbound = UpdateSessionUsage$Outbound;
}

export function updateSessionUsageToJSON(
  updateSessionUsage: UpdateSessionUsage,
): string {
  return JSON.stringify(
    UpdateSessionUsage$outboundSchema.parse(updateSessionUsage),
  );
}

export function updateSessionUsageFromJSON(
  jsonString: string,
): SafeParseResult<UpdateSessionUsage, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateSessionUsage$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateSessionUsage' from JSON`,
  );
}

/** @internal */
export const UpdateSessionRequestBody$inboundSchema: z.ZodType<
  UpdateSessionRequestBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  _id: z.string().optional(),
  external_id: z.string().optional(),
  duration: z.number().optional(),
  contact_ids: z.array(z.string()).optional(),
  billing: z.lazy(() => UpdateSessionBilling$inboundSchema).optional(),
  usage: z.lazy(() => UpdateSessionUsage$inboundSchema).optional(),
  traces_count: z.number().optional(),
  tags: z.array(z.string()).optional(),
  workspace_id: z.string().optional(),
  project_id: z.nullable(z.string()).optional(),
  started_at: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
  updated_at: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
}).transform((v) => {
  return remap$(v, {
    "_id": "id",
    "external_id": "externalId",
    "contact_ids": "contactIds",
    "traces_count": "tracesCount",
    "workspace_id": "workspaceId",
    "project_id": "projectId",
    "started_at": "startedAt",
    "updated_at": "updatedAt",
  });
});

/** @internal */
export type UpdateSessionRequestBody$Outbound = {
  _id?: string | undefined;
  external_id?: string | undefined;
  duration?: number | undefined;
  contact_ids?: Array<string> | undefined;
  billing?: UpdateSessionBilling$Outbound | undefined;
  usage?: UpdateSessionUsage$Outbound | undefined;
  traces_count?: number | undefined;
  tags?: Array<string> | undefined;
  workspace_id?: string | undefined;
  project_id?: string | null | undefined;
  started_at?: string | undefined;
  updated_at?: string | undefined;
};

/** @internal */
export const UpdateSessionRequestBody$outboundSchema: z.ZodType<
  UpdateSessionRequestBody$Outbound,
  z.ZodTypeDef,
  UpdateSessionRequestBody
> = z.object({
  id: z.string().optional(),
  externalId: z.string().optional(),
  duration: z.number().optional(),
  contactIds: z.array(z.string()).optional(),
  billing: z.lazy(() => UpdateSessionBilling$outboundSchema).optional(),
  usage: z.lazy(() => UpdateSessionUsage$outboundSchema).optional(),
  tracesCount: z.number().optional(),
  tags: z.array(z.string()).optional(),
  workspaceId: z.string().optional(),
  projectId: z.nullable(z.string()).optional(),
  startedAt: z.date().transform(v => v.toISOString()).optional(),
  updatedAt: z.date().transform(v => v.toISOString()).optional(),
}).transform((v) => {
  return remap$(v, {
    id: "_id",
    externalId: "external_id",
    contactIds: "contact_ids",
    tracesCount: "traces_count",
    workspaceId: "workspace_id",
    projectId: "project_id",
    startedAt: "started_at",
    updatedAt: "updated_at",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateSessionRequestBody$ {
  /** @deprecated use `UpdateSessionRequestBody$inboundSchema` instead. */
  export const inboundSchema = UpdateSessionRequestBody$inboundSchema;
  /** @deprecated use `UpdateSessionRequestBody$outboundSchema` instead. */
  export const outboundSchema = UpdateSessionRequestBody$outboundSchema;
  /** @deprecated use `UpdateSessionRequestBody$Outbound` instead. */
  export type Outbound = UpdateSessionRequestBody$Outbound;
}

export function updateSessionRequestBodyToJSON(
  updateSessionRequestBody: UpdateSessionRequestBody,
): string {
  return JSON.stringify(
    UpdateSessionRequestBody$outboundSchema.parse(updateSessionRequestBody),
  );
}

export function updateSessionRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<UpdateSessionRequestBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateSessionRequestBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateSessionRequestBody' from JSON`,
  );
}

/** @internal */
export const UpdateSessionRequest$inboundSchema: z.ZodType<
  UpdateSessionRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  session_id: z.string(),
  RequestBody: z.lazy(() => UpdateSessionRequestBody$inboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    "session_id": "sessionId",
    "RequestBody": "requestBody",
  });
});

/** @internal */
export type UpdateSessionRequest$Outbound = {
  session_id: string;
  RequestBody?: UpdateSessionRequestBody$Outbound | undefined;
};

/** @internal */
export const UpdateSessionRequest$outboundSchema: z.ZodType<
  UpdateSessionRequest$Outbound,
  z.ZodTypeDef,
  UpdateSessionRequest
> = z.object({
  sessionId: z.string(),
  requestBody: z.lazy(() => UpdateSessionRequestBody$outboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    sessionId: "session_id",
    requestBody: "RequestBody",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateSessionRequest$ {
  /** @deprecated use `UpdateSessionRequest$inboundSchema` instead. */
  export const inboundSchema = UpdateSessionRequest$inboundSchema;
  /** @deprecated use `UpdateSessionRequest$outboundSchema` instead. */
  export const outboundSchema = UpdateSessionRequest$outboundSchema;
  /** @deprecated use `UpdateSessionRequest$Outbound` instead. */
  export type Outbound = UpdateSessionRequest$Outbound;
}

export function updateSessionRequestToJSON(
  updateSessionRequest: UpdateSessionRequest,
): string {
  return JSON.stringify(
    UpdateSessionRequest$outboundSchema.parse(updateSessionRequest),
  );
}

export function updateSessionRequestFromJSON(
  jsonString: string,
): SafeParseResult<UpdateSessionRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateSessionRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateSessionRequest' from JSON`,
  );
}

/** @internal */
export const UpdateSessionSessionsBilling$inboundSchema: z.ZodType<
  UpdateSessionSessionsBilling,
  z.ZodTypeDef,
  unknown
> = z.object({
  input_cost: z.number(),
  output_cost: z.number(),
  total_cost: z.number(),
}).transform((v) => {
  return remap$(v, {
    "input_cost": "inputCost",
    "output_cost": "outputCost",
    "total_cost": "totalCost",
  });
});

/** @internal */
export type UpdateSessionSessionsBilling$Outbound = {
  input_cost: number;
  output_cost: number;
  total_cost: number;
};

/** @internal */
export const UpdateSessionSessionsBilling$outboundSchema: z.ZodType<
  UpdateSessionSessionsBilling$Outbound,
  z.ZodTypeDef,
  UpdateSessionSessionsBilling
> = z.object({
  inputCost: z.number(),
  outputCost: z.number(),
  totalCost: z.number(),
}).transform((v) => {
  return remap$(v, {
    inputCost: "input_cost",
    outputCost: "output_cost",
    totalCost: "total_cost",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateSessionSessionsBilling$ {
  /** @deprecated use `UpdateSessionSessionsBilling$inboundSchema` instead. */
  export const inboundSchema = UpdateSessionSessionsBilling$inboundSchema;
  /** @deprecated use `UpdateSessionSessionsBilling$outboundSchema` instead. */
  export const outboundSchema = UpdateSessionSessionsBilling$outboundSchema;
  /** @deprecated use `UpdateSessionSessionsBilling$Outbound` instead. */
  export type Outbound = UpdateSessionSessionsBilling$Outbound;
}

export function updateSessionSessionsBillingToJSON(
  updateSessionSessionsBilling: UpdateSessionSessionsBilling,
): string {
  return JSON.stringify(
    UpdateSessionSessionsBilling$outboundSchema.parse(
      updateSessionSessionsBilling,
    ),
  );
}

export function updateSessionSessionsBillingFromJSON(
  jsonString: string,
): SafeParseResult<UpdateSessionSessionsBilling, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateSessionSessionsBilling$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateSessionSessionsBilling' from JSON`,
  );
}

/** @internal */
export const UpdateSessionSessionsUsage$inboundSchema: z.ZodType<
  UpdateSessionSessionsUsage,
  z.ZodTypeDef,
  unknown
> = z.object({
  prompt_tokens: z.number(),
  completion_tokens: z.number(),
  total_tokens: z.number(),
}).transform((v) => {
  return remap$(v, {
    "prompt_tokens": "promptTokens",
    "completion_tokens": "completionTokens",
    "total_tokens": "totalTokens",
  });
});

/** @internal */
export type UpdateSessionSessionsUsage$Outbound = {
  prompt_tokens: number;
  completion_tokens: number;
  total_tokens: number;
};

/** @internal */
export const UpdateSessionSessionsUsage$outboundSchema: z.ZodType<
  UpdateSessionSessionsUsage$Outbound,
  z.ZodTypeDef,
  UpdateSessionSessionsUsage
> = z.object({
  promptTokens: z.number(),
  completionTokens: z.number(),
  totalTokens: z.number(),
}).transform((v) => {
  return remap$(v, {
    promptTokens: "prompt_tokens",
    completionTokens: "completion_tokens",
    totalTokens: "total_tokens",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateSessionSessionsUsage$ {
  /** @deprecated use `UpdateSessionSessionsUsage$inboundSchema` instead. */
  export const inboundSchema = UpdateSessionSessionsUsage$inboundSchema;
  /** @deprecated use `UpdateSessionSessionsUsage$outboundSchema` instead. */
  export const outboundSchema = UpdateSessionSessionsUsage$outboundSchema;
  /** @deprecated use `UpdateSessionSessionsUsage$Outbound` instead. */
  export type Outbound = UpdateSessionSessionsUsage$Outbound;
}

export function updateSessionSessionsUsageToJSON(
  updateSessionSessionsUsage: UpdateSessionSessionsUsage,
): string {
  return JSON.stringify(
    UpdateSessionSessionsUsage$outboundSchema.parse(updateSessionSessionsUsage),
  );
}

export function updateSessionSessionsUsageFromJSON(
  jsonString: string,
): SafeParseResult<UpdateSessionSessionsUsage, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateSessionSessionsUsage$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateSessionSessionsUsage' from JSON`,
  );
}

/** @internal */
export const UpdateSessionResponseBody$inboundSchema: z.ZodType<
  UpdateSessionResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  _id: z.string(),
  external_id: z.string(),
  duration: z.number(),
  contact_ids: z.array(z.string()),
  billing: z.lazy(() => UpdateSessionSessionsBilling$inboundSchema),
  usage: z.lazy(() => UpdateSessionSessionsUsage$inboundSchema),
  traces_count: z.number(),
  tags: z.array(z.string()),
  workspace_id: z.string(),
  project_id: z.nullable(z.string()).optional(),
  started_at: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
  updated_at: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
}).transform((v) => {
  return remap$(v, {
    "_id": "id",
    "external_id": "externalId",
    "contact_ids": "contactIds",
    "traces_count": "tracesCount",
    "workspace_id": "workspaceId",
    "project_id": "projectId",
    "started_at": "startedAt",
    "updated_at": "updatedAt",
  });
});

/** @internal */
export type UpdateSessionResponseBody$Outbound = {
  _id: string;
  external_id: string;
  duration: number;
  contact_ids: Array<string>;
  billing: UpdateSessionSessionsBilling$Outbound;
  usage: UpdateSessionSessionsUsage$Outbound;
  traces_count: number;
  tags: Array<string>;
  workspace_id: string;
  project_id?: string | null | undefined;
  started_at?: string | undefined;
  updated_at?: string | undefined;
};

/** @internal */
export const UpdateSessionResponseBody$outboundSchema: z.ZodType<
  UpdateSessionResponseBody$Outbound,
  z.ZodTypeDef,
  UpdateSessionResponseBody
> = z.object({
  id: z.string(),
  externalId: z.string(),
  duration: z.number(),
  contactIds: z.array(z.string()),
  billing: z.lazy(() => UpdateSessionSessionsBilling$outboundSchema),
  usage: z.lazy(() => UpdateSessionSessionsUsage$outboundSchema),
  tracesCount: z.number(),
  tags: z.array(z.string()),
  workspaceId: z.string(),
  projectId: z.nullable(z.string()).optional(),
  startedAt: z.date().transform(v => v.toISOString()).optional(),
  updatedAt: z.date().transform(v => v.toISOString()).optional(),
}).transform((v) => {
  return remap$(v, {
    id: "_id",
    externalId: "external_id",
    contactIds: "contact_ids",
    tracesCount: "traces_count",
    workspaceId: "workspace_id",
    projectId: "project_id",
    startedAt: "started_at",
    updatedAt: "updated_at",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateSessionResponseBody$ {
  /** @deprecated use `UpdateSessionResponseBody$inboundSchema` instead. */
  export const inboundSchema = UpdateSessionResponseBody$inboundSchema;
  /** @deprecated use `UpdateSessionResponseBody$outboundSchema` instead. */
  export const outboundSchema = UpdateSessionResponseBody$outboundSchema;
  /** @deprecated use `UpdateSessionResponseBody$Outbound` instead. */
  export type Outbound = UpdateSessionResponseBody$Outbound;
}

export function updateSessionResponseBodyToJSON(
  updateSessionResponseBody: UpdateSessionResponseBody,
): string {
  return JSON.stringify(
    UpdateSessionResponseBody$outboundSchema.parse(updateSessionResponseBody),
  );
}

export function updateSessionResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<UpdateSessionResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateSessionResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateSessionResponseBody' from JSON`,
  );
}
