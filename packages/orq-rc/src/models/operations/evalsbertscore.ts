/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type EvalsBertScoreRequestBody = {
  output: string;
  reference: string;
};

export type EvalsBertScoreValue = {
  f1: number;
  precision: number;
  recall: number;
};

/**
 * Returns the BERT Score evaluation result
 */
export type EvalsBertScoreResponseBody = {
  value: EvalsBertScoreValue;
};

/** @internal */
export const EvalsBertScoreRequestBody$inboundSchema: z.ZodType<
  EvalsBertScoreRequestBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  output: z.string(),
  reference: z.string(),
});

/** @internal */
export type EvalsBertScoreRequestBody$Outbound = {
  output: string;
  reference: string;
};

/** @internal */
export const EvalsBertScoreRequestBody$outboundSchema: z.ZodType<
  EvalsBertScoreRequestBody$Outbound,
  z.ZodTypeDef,
  EvalsBertScoreRequestBody
> = z.object({
  output: z.string(),
  reference: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EvalsBertScoreRequestBody$ {
  /** @deprecated use `EvalsBertScoreRequestBody$inboundSchema` instead. */
  export const inboundSchema = EvalsBertScoreRequestBody$inboundSchema;
  /** @deprecated use `EvalsBertScoreRequestBody$outboundSchema` instead. */
  export const outboundSchema = EvalsBertScoreRequestBody$outboundSchema;
  /** @deprecated use `EvalsBertScoreRequestBody$Outbound` instead. */
  export type Outbound = EvalsBertScoreRequestBody$Outbound;
}

export function evalsBertScoreRequestBodyToJSON(
  evalsBertScoreRequestBody: EvalsBertScoreRequestBody,
): string {
  return JSON.stringify(
    EvalsBertScoreRequestBody$outboundSchema.parse(evalsBertScoreRequestBody),
  );
}

export function evalsBertScoreRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<EvalsBertScoreRequestBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => EvalsBertScoreRequestBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'EvalsBertScoreRequestBody' from JSON`,
  );
}

/** @internal */
export const EvalsBertScoreValue$inboundSchema: z.ZodType<
  EvalsBertScoreValue,
  z.ZodTypeDef,
  unknown
> = z.object({
  f1: z.number(),
  precision: z.number(),
  recall: z.number(),
});

/** @internal */
export type EvalsBertScoreValue$Outbound = {
  f1: number;
  precision: number;
  recall: number;
};

/** @internal */
export const EvalsBertScoreValue$outboundSchema: z.ZodType<
  EvalsBertScoreValue$Outbound,
  z.ZodTypeDef,
  EvalsBertScoreValue
> = z.object({
  f1: z.number(),
  precision: z.number(),
  recall: z.number(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EvalsBertScoreValue$ {
  /** @deprecated use `EvalsBertScoreValue$inboundSchema` instead. */
  export const inboundSchema = EvalsBertScoreValue$inboundSchema;
  /** @deprecated use `EvalsBertScoreValue$outboundSchema` instead. */
  export const outboundSchema = EvalsBertScoreValue$outboundSchema;
  /** @deprecated use `EvalsBertScoreValue$Outbound` instead. */
  export type Outbound = EvalsBertScoreValue$Outbound;
}

export function evalsBertScoreValueToJSON(
  evalsBertScoreValue: EvalsBertScoreValue,
): string {
  return JSON.stringify(
    EvalsBertScoreValue$outboundSchema.parse(evalsBertScoreValue),
  );
}

export function evalsBertScoreValueFromJSON(
  jsonString: string,
): SafeParseResult<EvalsBertScoreValue, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => EvalsBertScoreValue$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'EvalsBertScoreValue' from JSON`,
  );
}

/** @internal */
export const EvalsBertScoreResponseBody$inboundSchema: z.ZodType<
  EvalsBertScoreResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  value: z.lazy(() => EvalsBertScoreValue$inboundSchema),
});

/** @internal */
export type EvalsBertScoreResponseBody$Outbound = {
  value: EvalsBertScoreValue$Outbound;
};

/** @internal */
export const EvalsBertScoreResponseBody$outboundSchema: z.ZodType<
  EvalsBertScoreResponseBody$Outbound,
  z.ZodTypeDef,
  EvalsBertScoreResponseBody
> = z.object({
  value: z.lazy(() => EvalsBertScoreValue$outboundSchema),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EvalsBertScoreResponseBody$ {
  /** @deprecated use `EvalsBertScoreResponseBody$inboundSchema` instead. */
  export const inboundSchema = EvalsBertScoreResponseBody$inboundSchema;
  /** @deprecated use `EvalsBertScoreResponseBody$outboundSchema` instead. */
  export const outboundSchema = EvalsBertScoreResponseBody$outboundSchema;
  /** @deprecated use `EvalsBertScoreResponseBody$Outbound` instead. */
  export type Outbound = EvalsBertScoreResponseBody$Outbound;
}

export function evalsBertScoreResponseBodyToJSON(
  evalsBertScoreResponseBody: EvalsBertScoreResponseBody,
): string {
  return JSON.stringify(
    EvalsBertScoreResponseBody$outboundSchema.parse(evalsBertScoreResponseBody),
  );
}

export function evalsBertScoreResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<EvalsBertScoreResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => EvalsBertScoreResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'EvalsBertScoreResponseBody' from JSON`,
  );
}
