/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type PostV2ProxyRerankDocuments = string | { [k: string]: string };

/**
 * input
 */
export type PostV2ProxyRerankRequestBody = {
  /**
   * The search query
   */
  query: string;
  /**
   * A list of document objects or strings to rerank.
   */
  documents: Array<string | { [k: string]: string }>;
  /**
   * The identifier of the model to use
   */
  model: string;
  /**
   * The number of most relevant documents or indices to return, defaults to the length of the documents
   */
  topN?: number | undefined;
  /**
   * The filename of the document to rerank
   */
  filename?: string | null | undefined;
};

export const PostV2ProxyRerankObject = {
  List: "list",
} as const;
export type PostV2ProxyRerankObject = ClosedEnum<
  typeof PostV2ProxyRerankObject
>;

/**
 * The object type, which is always `rerank`.
 */
export const PostV2ProxyRerankProxyObject = {
  Rerank: "rerank",
} as const;
/**
 * The object type, which is always `rerank`.
 */
export type PostV2ProxyRerankProxyObject = ClosedEnum<
  typeof PostV2ProxyRerankProxyObject
>;

/**
 * If return_documents is set as false this will return none, if true it will return the documents passed in
 */
export type Document = {
  /**
   * The text of the document to rerank
   */
  text: string;
};

export type PostV2ProxyRerankResults = {
  /**
   * The object type, which is always `rerank`.
   */
  object: PostV2ProxyRerankProxyObject;
  /**
   * Corresponds to the index in the original list of documents to which the ranked document belongs.
   */
  index: number;
  /**
   * Relevance scores are normalized to be in the range [0, 1]. Scores close to 1 indicate a high relevance to the query, and scores closer to 0 indicate low relevance.
   */
  relevanceScore: number;
  /**
   * If return_documents is set as false this will return none, if true it will return the documents passed in
   */
  document?: Document | undefined;
};

export type PostV2ProxyRerankUsage = {
  /**
   * The total number of tokens used in the rerank
   */
  totalTokens: number;
};

/**
 * Returns the reranked documents.
 */
export type PostV2ProxyRerankResponseBody = {
  /**
   * A unique identifier for the rerank.
   */
  id?: string | undefined;
  object: PostV2ProxyRerankObject;
  /**
   * An ordered list of ranked documents
   */
  results: Array<PostV2ProxyRerankResults>;
  usage?: PostV2ProxyRerankUsage | undefined;
};

/** @internal */
export const PostV2ProxyRerankDocuments$inboundSchema: z.ZodType<
  PostV2ProxyRerankDocuments,
  z.ZodTypeDef,
  unknown
> = z.union([z.string(), z.record(z.string())]);

/** @internal */
export type PostV2ProxyRerankDocuments$Outbound = string | {
  [k: string]: string;
};

/** @internal */
export const PostV2ProxyRerankDocuments$outboundSchema: z.ZodType<
  PostV2ProxyRerankDocuments$Outbound,
  z.ZodTypeDef,
  PostV2ProxyRerankDocuments
> = z.union([z.string(), z.record(z.string())]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostV2ProxyRerankDocuments$ {
  /** @deprecated use `PostV2ProxyRerankDocuments$inboundSchema` instead. */
  export const inboundSchema = PostV2ProxyRerankDocuments$inboundSchema;
  /** @deprecated use `PostV2ProxyRerankDocuments$outboundSchema` instead. */
  export const outboundSchema = PostV2ProxyRerankDocuments$outboundSchema;
  /** @deprecated use `PostV2ProxyRerankDocuments$Outbound` instead. */
  export type Outbound = PostV2ProxyRerankDocuments$Outbound;
}

export function postV2ProxyRerankDocumentsToJSON(
  postV2ProxyRerankDocuments: PostV2ProxyRerankDocuments,
): string {
  return JSON.stringify(
    PostV2ProxyRerankDocuments$outboundSchema.parse(postV2ProxyRerankDocuments),
  );
}

export function postV2ProxyRerankDocumentsFromJSON(
  jsonString: string,
): SafeParseResult<PostV2ProxyRerankDocuments, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PostV2ProxyRerankDocuments$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PostV2ProxyRerankDocuments' from JSON`,
  );
}

/** @internal */
export const PostV2ProxyRerankRequestBody$inboundSchema: z.ZodType<
  PostV2ProxyRerankRequestBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  query: z.string(),
  documents: z.array(z.union([z.string(), z.record(z.string())])),
  model: z.string(),
  top_n: z.number().optional(),
  filename: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    "top_n": "topN",
  });
});

/** @internal */
export type PostV2ProxyRerankRequestBody$Outbound = {
  query: string;
  documents: Array<string | { [k: string]: string }>;
  model: string;
  top_n?: number | undefined;
  filename?: string | null | undefined;
};

/** @internal */
export const PostV2ProxyRerankRequestBody$outboundSchema: z.ZodType<
  PostV2ProxyRerankRequestBody$Outbound,
  z.ZodTypeDef,
  PostV2ProxyRerankRequestBody
> = z.object({
  query: z.string(),
  documents: z.array(z.union([z.string(), z.record(z.string())])),
  model: z.string(),
  topN: z.number().optional(),
  filename: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    topN: "top_n",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostV2ProxyRerankRequestBody$ {
  /** @deprecated use `PostV2ProxyRerankRequestBody$inboundSchema` instead. */
  export const inboundSchema = PostV2ProxyRerankRequestBody$inboundSchema;
  /** @deprecated use `PostV2ProxyRerankRequestBody$outboundSchema` instead. */
  export const outboundSchema = PostV2ProxyRerankRequestBody$outboundSchema;
  /** @deprecated use `PostV2ProxyRerankRequestBody$Outbound` instead. */
  export type Outbound = PostV2ProxyRerankRequestBody$Outbound;
}

export function postV2ProxyRerankRequestBodyToJSON(
  postV2ProxyRerankRequestBody: PostV2ProxyRerankRequestBody,
): string {
  return JSON.stringify(
    PostV2ProxyRerankRequestBody$outboundSchema.parse(
      postV2ProxyRerankRequestBody,
    ),
  );
}

export function postV2ProxyRerankRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<PostV2ProxyRerankRequestBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PostV2ProxyRerankRequestBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PostV2ProxyRerankRequestBody' from JSON`,
  );
}

/** @internal */
export const PostV2ProxyRerankObject$inboundSchema: z.ZodNativeEnum<
  typeof PostV2ProxyRerankObject
> = z.nativeEnum(PostV2ProxyRerankObject);

/** @internal */
export const PostV2ProxyRerankObject$outboundSchema: z.ZodNativeEnum<
  typeof PostV2ProxyRerankObject
> = PostV2ProxyRerankObject$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostV2ProxyRerankObject$ {
  /** @deprecated use `PostV2ProxyRerankObject$inboundSchema` instead. */
  export const inboundSchema = PostV2ProxyRerankObject$inboundSchema;
  /** @deprecated use `PostV2ProxyRerankObject$outboundSchema` instead. */
  export const outboundSchema = PostV2ProxyRerankObject$outboundSchema;
}

/** @internal */
export const PostV2ProxyRerankProxyObject$inboundSchema: z.ZodNativeEnum<
  typeof PostV2ProxyRerankProxyObject
> = z.nativeEnum(PostV2ProxyRerankProxyObject);

/** @internal */
export const PostV2ProxyRerankProxyObject$outboundSchema: z.ZodNativeEnum<
  typeof PostV2ProxyRerankProxyObject
> = PostV2ProxyRerankProxyObject$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostV2ProxyRerankProxyObject$ {
  /** @deprecated use `PostV2ProxyRerankProxyObject$inboundSchema` instead. */
  export const inboundSchema = PostV2ProxyRerankProxyObject$inboundSchema;
  /** @deprecated use `PostV2ProxyRerankProxyObject$outboundSchema` instead. */
  export const outboundSchema = PostV2ProxyRerankProxyObject$outboundSchema;
}

/** @internal */
export const Document$inboundSchema: z.ZodType<
  Document,
  z.ZodTypeDef,
  unknown
> = z.object({
  text: z.string(),
});

/** @internal */
export type Document$Outbound = {
  text: string;
};

/** @internal */
export const Document$outboundSchema: z.ZodType<
  Document$Outbound,
  z.ZodTypeDef,
  Document
> = z.object({
  text: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Document$ {
  /** @deprecated use `Document$inboundSchema` instead. */
  export const inboundSchema = Document$inboundSchema;
  /** @deprecated use `Document$outboundSchema` instead. */
  export const outboundSchema = Document$outboundSchema;
  /** @deprecated use `Document$Outbound` instead. */
  export type Outbound = Document$Outbound;
}

export function documentToJSON(document: Document): string {
  return JSON.stringify(Document$outboundSchema.parse(document));
}

export function documentFromJSON(
  jsonString: string,
): SafeParseResult<Document, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Document$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Document' from JSON`,
  );
}

/** @internal */
export const PostV2ProxyRerankResults$inboundSchema: z.ZodType<
  PostV2ProxyRerankResults,
  z.ZodTypeDef,
  unknown
> = z.object({
  object: PostV2ProxyRerankProxyObject$inboundSchema,
  index: z.number(),
  relevance_score: z.number(),
  document: z.lazy(() => Document$inboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    "relevance_score": "relevanceScore",
  });
});

/** @internal */
export type PostV2ProxyRerankResults$Outbound = {
  object: string;
  index: number;
  relevance_score: number;
  document?: Document$Outbound | undefined;
};

/** @internal */
export const PostV2ProxyRerankResults$outboundSchema: z.ZodType<
  PostV2ProxyRerankResults$Outbound,
  z.ZodTypeDef,
  PostV2ProxyRerankResults
> = z.object({
  object: PostV2ProxyRerankProxyObject$outboundSchema,
  index: z.number(),
  relevanceScore: z.number(),
  document: z.lazy(() => Document$outboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    relevanceScore: "relevance_score",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostV2ProxyRerankResults$ {
  /** @deprecated use `PostV2ProxyRerankResults$inboundSchema` instead. */
  export const inboundSchema = PostV2ProxyRerankResults$inboundSchema;
  /** @deprecated use `PostV2ProxyRerankResults$outboundSchema` instead. */
  export const outboundSchema = PostV2ProxyRerankResults$outboundSchema;
  /** @deprecated use `PostV2ProxyRerankResults$Outbound` instead. */
  export type Outbound = PostV2ProxyRerankResults$Outbound;
}

export function postV2ProxyRerankResultsToJSON(
  postV2ProxyRerankResults: PostV2ProxyRerankResults,
): string {
  return JSON.stringify(
    PostV2ProxyRerankResults$outboundSchema.parse(postV2ProxyRerankResults),
  );
}

export function postV2ProxyRerankResultsFromJSON(
  jsonString: string,
): SafeParseResult<PostV2ProxyRerankResults, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PostV2ProxyRerankResults$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PostV2ProxyRerankResults' from JSON`,
  );
}

/** @internal */
export const PostV2ProxyRerankUsage$inboundSchema: z.ZodType<
  PostV2ProxyRerankUsage,
  z.ZodTypeDef,
  unknown
> = z.object({
  total_tokens: z.number(),
}).transform((v) => {
  return remap$(v, {
    "total_tokens": "totalTokens",
  });
});

/** @internal */
export type PostV2ProxyRerankUsage$Outbound = {
  total_tokens: number;
};

/** @internal */
export const PostV2ProxyRerankUsage$outboundSchema: z.ZodType<
  PostV2ProxyRerankUsage$Outbound,
  z.ZodTypeDef,
  PostV2ProxyRerankUsage
> = z.object({
  totalTokens: z.number(),
}).transform((v) => {
  return remap$(v, {
    totalTokens: "total_tokens",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostV2ProxyRerankUsage$ {
  /** @deprecated use `PostV2ProxyRerankUsage$inboundSchema` instead. */
  export const inboundSchema = PostV2ProxyRerankUsage$inboundSchema;
  /** @deprecated use `PostV2ProxyRerankUsage$outboundSchema` instead. */
  export const outboundSchema = PostV2ProxyRerankUsage$outboundSchema;
  /** @deprecated use `PostV2ProxyRerankUsage$Outbound` instead. */
  export type Outbound = PostV2ProxyRerankUsage$Outbound;
}

export function postV2ProxyRerankUsageToJSON(
  postV2ProxyRerankUsage: PostV2ProxyRerankUsage,
): string {
  return JSON.stringify(
    PostV2ProxyRerankUsage$outboundSchema.parse(postV2ProxyRerankUsage),
  );
}

export function postV2ProxyRerankUsageFromJSON(
  jsonString: string,
): SafeParseResult<PostV2ProxyRerankUsage, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PostV2ProxyRerankUsage$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PostV2ProxyRerankUsage' from JSON`,
  );
}

/** @internal */
export const PostV2ProxyRerankResponseBody$inboundSchema: z.ZodType<
  PostV2ProxyRerankResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string().optional(),
  object: PostV2ProxyRerankObject$inboundSchema,
  results: z.array(z.lazy(() => PostV2ProxyRerankResults$inboundSchema)),
  usage: z.lazy(() => PostV2ProxyRerankUsage$inboundSchema).optional(),
});

/** @internal */
export type PostV2ProxyRerankResponseBody$Outbound = {
  id?: string | undefined;
  object: string;
  results: Array<PostV2ProxyRerankResults$Outbound>;
  usage?: PostV2ProxyRerankUsage$Outbound | undefined;
};

/** @internal */
export const PostV2ProxyRerankResponseBody$outboundSchema: z.ZodType<
  PostV2ProxyRerankResponseBody$Outbound,
  z.ZodTypeDef,
  PostV2ProxyRerankResponseBody
> = z.object({
  id: z.string().optional(),
  object: PostV2ProxyRerankObject$outboundSchema,
  results: z.array(z.lazy(() => PostV2ProxyRerankResults$outboundSchema)),
  usage: z.lazy(() => PostV2ProxyRerankUsage$outboundSchema).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostV2ProxyRerankResponseBody$ {
  /** @deprecated use `PostV2ProxyRerankResponseBody$inboundSchema` instead. */
  export const inboundSchema = PostV2ProxyRerankResponseBody$inboundSchema;
  /** @deprecated use `PostV2ProxyRerankResponseBody$outboundSchema` instead. */
  export const outboundSchema = PostV2ProxyRerankResponseBody$outboundSchema;
  /** @deprecated use `PostV2ProxyRerankResponseBody$Outbound` instead. */
  export type Outbound = PostV2ProxyRerankResponseBody$Outbound;
}

export function postV2ProxyRerankResponseBodyToJSON(
  postV2ProxyRerankResponseBody: PostV2ProxyRerankResponseBody,
): string {
  return JSON.stringify(
    PostV2ProxyRerankResponseBody$outboundSchema.parse(
      postV2ProxyRerankResponseBody,
    ),
  );
}

export function postV2ProxyRerankResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<PostV2ProxyRerankResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PostV2ProxyRerankResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PostV2ProxyRerankResponseBody' from JSON`,
  );
}
