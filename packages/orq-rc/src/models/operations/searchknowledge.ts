/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * Exists
 */
export type SearchKnowledgeDollarOrDollarExists = {
  dollarExists: boolean;
};

export type SearchKnowledgeDollarOrKnowledgeDollarNin =
  | string
  | number
  | boolean;

/**
 * Not in
 */
export type SearchKnowledgeDollarOrDollarNin = {
  dollarNin: Array<string | number | boolean>;
};

export type SearchKnowledgeDollarOrKnowledgeDollarIn =
  | string
  | number
  | boolean;

/**
 * In
 */
export type SearchKnowledgeDollarOrDollarIn = {
  dollarIn: Array<string | number | boolean>;
};

/**
 * Less than or equal to
 */
export type SearchKnowledgeDollarOrDollarLte = {
  dollarLte: number;
};

/**
 * Less than
 */
export type SearchKnowledgeDollarOrDollarLt = {
  dollarLt: number;
};

/**
 * Greater than or equal to
 */
export type SearchKnowledgeDollarOrDollarGte = {
  dollarGte: number;
};

export type SearchKnowledgeDollarOr3 = {
  dollarGt: number;
};

export type SearchKnowledgeDollarOrKnowledgeDollarNe =
  | string
  | number
  | boolean;

/**
 * Not equal to
 */
export type SearchKnowledgeDollarOrDollarNe = {
  dollarNe: string | number | boolean;
};

export type SearchKnowledgeDollarOrKnowledgeDollarEq =
  | string
  | number
  | boolean;

/**
 * Equal to
 */
export type SearchKnowledgeDollarOrDollarEq = {
  dollarEq: string | number | boolean;
};

export type SearchKnowledgeFilterDollarOr =
  | SearchKnowledgeDollarOrDollarEq
  | SearchKnowledgeDollarOrDollarNe
  | SearchKnowledgeDollarOr3
  | SearchKnowledgeDollarOrDollarGte
  | SearchKnowledgeDollarOrDollarLt
  | SearchKnowledgeDollarOrDollarLte
  | SearchKnowledgeDollarOrDollarIn
  | SearchKnowledgeDollarOrDollarNin
  | SearchKnowledgeDollarOrDollarExists;

/**
 * Or
 */
export type FilterDollarOr = {
  dollarOr: Array<
    {
      [k: string]:
        | SearchKnowledgeDollarOrDollarEq
        | SearchKnowledgeDollarOrDollarNe
        | SearchKnowledgeDollarOr3
        | SearchKnowledgeDollarOrDollarGte
        | SearchKnowledgeDollarOrDollarLt
        | SearchKnowledgeDollarOrDollarLte
        | SearchKnowledgeDollarOrDollarIn
        | SearchKnowledgeDollarOrDollarNin
        | SearchKnowledgeDollarOrDollarExists;
    }
  >;
};

/**
 * Exists
 */
export type SearchKnowledgeDollarAndDollarExists = {
  dollarExists: boolean;
};

export type SearchKnowledgeDollarAndKnowledgeDollarNin =
  | string
  | number
  | boolean;

/**
 * Not in
 */
export type SearchKnowledgeDollarAndDollarNin = {
  dollarNin: Array<string | number | boolean>;
};

export type SearchKnowledgeDollarAndKnowledgeDollarIn =
  | string
  | number
  | boolean;

/**
 * In
 */
export type SearchKnowledgeDollarAndDollarIn = {
  dollarIn: Array<string | number | boolean>;
};

/**
 * Less than or equal to
 */
export type SearchKnowledgeDollarAndDollarLte = {
  dollarLte: number;
};

/**
 * Less than
 */
export type SearchKnowledgeDollarAndDollarLt = {
  dollarLt: number;
};

/**
 * Greater than or equal to
 */
export type SearchKnowledgeDollarAndDollarGte = {
  dollarGte: number;
};

export type SearchKnowledgeDollarAnd3 = {
  dollarGt: number;
};

export type SearchKnowledgeDollarAndKnowledgeDollarNe =
  | string
  | number
  | boolean;

/**
 * Not equal to
 */
export type SearchKnowledgeDollarAndDollarNe = {
  dollarNe: string | number | boolean;
};

export type SearchKnowledgeDollarAndKnowledgeDollarEq =
  | string
  | number
  | boolean;

/**
 * Equal to
 */
export type SearchKnowledgeDollarAndDollarEq = {
  dollarEq: string | number | boolean;
};

export type SearchKnowledgeFilterDollarAnd =
  | SearchKnowledgeDollarAndDollarEq
  | SearchKnowledgeDollarAndDollarNe
  | SearchKnowledgeDollarAnd3
  | SearchKnowledgeDollarAndDollarGte
  | SearchKnowledgeDollarAndDollarLt
  | SearchKnowledgeDollarAndDollarLte
  | SearchKnowledgeDollarAndDollarIn
  | SearchKnowledgeDollarAndDollarNin
  | SearchKnowledgeDollarAndDollarExists;

/**
 * And
 */
export type FilterDollarAnd = {
  dollarAnd: Array<
    {
      [k: string]:
        | SearchKnowledgeDollarAndDollarEq
        | SearchKnowledgeDollarAndDollarNe
        | SearchKnowledgeDollarAnd3
        | SearchKnowledgeDollarAndDollarGte
        | SearchKnowledgeDollarAndDollarLt
        | SearchKnowledgeDollarAndDollarLte
        | SearchKnowledgeDollarAndDollarIn
        | SearchKnowledgeDollarAndDollarNin
        | SearchKnowledgeDollarAndDollarExists;
    }
  >;
};

/**
 * Exists
 */
export type SearchKnowledge1DollarExists = {
  dollarExists: boolean;
};

export type SearchKnowledge1KnowledgeDollarNin = string | number | boolean;

/**
 * Not in
 */
export type SearchKnowledge1DollarNin = {
  dollarNin: Array<string | number | boolean>;
};

export type SearchKnowledge1KnowledgeDollarIn = string | number | boolean;

/**
 * In
 */
export type SearchKnowledge1DollarIn = {
  dollarIn: Array<string | number | boolean>;
};

/**
 * Less than or equal to
 */
export type SearchKnowledge1DollarLte = {
  dollarLte: number;
};

/**
 * Less than
 */
export type SearchKnowledge1DollarLt = {
  dollarLt: number;
};

/**
 * Greater than or equal to
 */
export type SearchKnowledge1DollarGte = {
  dollarGte: number;
};

export type SearchKnowledge13 = {
  dollarGt: number;
};

export type SearchKnowledge1KnowledgeDollarNe = string | number | boolean;

/**
 * Not equal to
 */
export type SearchKnowledge1DollarNe = {
  dollarNe: string | number | boolean;
};

export type SearchKnowledge1KnowledgeDollarEq = string | number | boolean;

/**
 * Equal to
 */
export type SearchKnowledge1DollarEq = {
  dollarEq: string | number | boolean;
};

export type Filter1 =
  | SearchKnowledge1DollarEq
  | SearchKnowledge1DollarNe
  | SearchKnowledge13
  | SearchKnowledge1DollarGte
  | SearchKnowledge1DollarLt
  | SearchKnowledge1DollarLte
  | SearchKnowledge1DollarIn
  | SearchKnowledge1DollarNin
  | SearchKnowledge1DollarExists;

/**
 * The filter to apply to the search
 */
export type Filter = FilterDollarAnd | FilterDollarOr | {
  [k: string]:
    | SearchKnowledge1DollarEq
    | SearchKnowledge1DollarNe
    | SearchKnowledge13
    | SearchKnowledge1DollarGte
    | SearchKnowledge1DollarLt
    | SearchKnowledge1DollarLte
    | SearchKnowledge1DollarIn
    | SearchKnowledge1DollarNin
    | SearchKnowledge1DollarExists;
};

/**
 * Additional search options
 */
export type SearchOptions = {
  /**
   * Whether to include the vector in the chunk
   */
  includeVectors?: boolean | undefined;
  /**
   * Whether to include the metadata in the chunk
   */
  includeMetadata?: boolean | undefined;
  /**
   * Whether to include the scores in the chunk
   */
  includeScores?: boolean | undefined;
};

/**
 * A search request for chunks in a knowledge base
 */
export type SearchKnowledgeRequestBody = {
  /**
   * The query to use to search the knowledge base
   */
  query: string;
  /**
   * The number of results to return. If not provided, will default to the knowledge base configured `top_k`
   */
  topK?: number | undefined;
  /**
   * The threshold to apply to the search. If not provided, will default to the knowledge base configured `threshold`
   */
  threshold?: number | undefined;
  /**
   * The filter to apply to the search
   */
  filter?: FilterDollarAnd | FilterDollarOr | {
    [k: string]:
      | SearchKnowledge1DollarEq
      | SearchKnowledge1DollarNe
      | SearchKnowledge13
      | SearchKnowledge1DollarGte
      | SearchKnowledge1DollarLt
      | SearchKnowledge1DollarLte
      | SearchKnowledge1DollarIn
      | SearchKnowledge1DollarNin
      | SearchKnowledge1DollarExists;
  } | undefined;
  /**
   * Additional search options
   */
  searchOptions?: SearchOptions | undefined;
};

export type SearchKnowledgeRequest = {
  /**
   * The unique identifier or key of the knowledge base
   */
  knowledgeId: string;
  /**
   * A search request for chunks in a knowledge base
   */
  requestBody?: SearchKnowledgeRequestBody | undefined;
};

export type Scores = {
  rerankScore?: number | undefined;
  searchScore?: number | undefined;
};

export type Matches = {
  id: string;
  text: string;
  vector?: Array<number> | undefined;
  metadata?: { [k: string]: any } | undefined;
  scores?: Scores | undefined;
};

/**
 * Search knowledge base
 */
export type SearchKnowledgeResponseBody = {
  matches: Array<Matches>;
};

/** @internal */
export const SearchKnowledgeDollarOrDollarExists$inboundSchema: z.ZodType<
  SearchKnowledgeDollarOrDollarExists,
  z.ZodTypeDef,
  unknown
> = z.object({
  $exists: z.boolean(),
}).transform((v) => {
  return remap$(v, {
    "$exists": "dollarExists",
  });
});

/** @internal */
export type SearchKnowledgeDollarOrDollarExists$Outbound = {
  $exists: boolean;
};

/** @internal */
export const SearchKnowledgeDollarOrDollarExists$outboundSchema: z.ZodType<
  SearchKnowledgeDollarOrDollarExists$Outbound,
  z.ZodTypeDef,
  SearchKnowledgeDollarOrDollarExists
> = z.object({
  dollarExists: z.boolean(),
}).transform((v) => {
  return remap$(v, {
    dollarExists: "$exists",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SearchKnowledgeDollarOrDollarExists$ {
  /** @deprecated use `SearchKnowledgeDollarOrDollarExists$inboundSchema` instead. */
  export const inboundSchema =
    SearchKnowledgeDollarOrDollarExists$inboundSchema;
  /** @deprecated use `SearchKnowledgeDollarOrDollarExists$outboundSchema` instead. */
  export const outboundSchema =
    SearchKnowledgeDollarOrDollarExists$outboundSchema;
  /** @deprecated use `SearchKnowledgeDollarOrDollarExists$Outbound` instead. */
  export type Outbound = SearchKnowledgeDollarOrDollarExists$Outbound;
}

export function searchKnowledgeDollarOrDollarExistsToJSON(
  searchKnowledgeDollarOrDollarExists: SearchKnowledgeDollarOrDollarExists,
): string {
  return JSON.stringify(
    SearchKnowledgeDollarOrDollarExists$outboundSchema.parse(
      searchKnowledgeDollarOrDollarExists,
    ),
  );
}

export function searchKnowledgeDollarOrDollarExistsFromJSON(
  jsonString: string,
): SafeParseResult<SearchKnowledgeDollarOrDollarExists, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      SearchKnowledgeDollarOrDollarExists$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SearchKnowledgeDollarOrDollarExists' from JSON`,
  );
}

/** @internal */
export const SearchKnowledgeDollarOrKnowledgeDollarNin$inboundSchema: z.ZodType<
  SearchKnowledgeDollarOrKnowledgeDollarNin,
  z.ZodTypeDef,
  unknown
> = z.union([z.string(), z.number(), z.boolean()]);

/** @internal */
export type SearchKnowledgeDollarOrKnowledgeDollarNin$Outbound =
  | string
  | number
  | boolean;

/** @internal */
export const SearchKnowledgeDollarOrKnowledgeDollarNin$outboundSchema:
  z.ZodType<
    SearchKnowledgeDollarOrKnowledgeDollarNin$Outbound,
    z.ZodTypeDef,
    SearchKnowledgeDollarOrKnowledgeDollarNin
  > = z.union([z.string(), z.number(), z.boolean()]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SearchKnowledgeDollarOrKnowledgeDollarNin$ {
  /** @deprecated use `SearchKnowledgeDollarOrKnowledgeDollarNin$inboundSchema` instead. */
  export const inboundSchema =
    SearchKnowledgeDollarOrKnowledgeDollarNin$inboundSchema;
  /** @deprecated use `SearchKnowledgeDollarOrKnowledgeDollarNin$outboundSchema` instead. */
  export const outboundSchema =
    SearchKnowledgeDollarOrKnowledgeDollarNin$outboundSchema;
  /** @deprecated use `SearchKnowledgeDollarOrKnowledgeDollarNin$Outbound` instead. */
  export type Outbound = SearchKnowledgeDollarOrKnowledgeDollarNin$Outbound;
}

export function searchKnowledgeDollarOrKnowledgeDollarNinToJSON(
  searchKnowledgeDollarOrKnowledgeDollarNin:
    SearchKnowledgeDollarOrKnowledgeDollarNin,
): string {
  return JSON.stringify(
    SearchKnowledgeDollarOrKnowledgeDollarNin$outboundSchema.parse(
      searchKnowledgeDollarOrKnowledgeDollarNin,
    ),
  );
}

export function searchKnowledgeDollarOrKnowledgeDollarNinFromJSON(
  jsonString: string,
): SafeParseResult<
  SearchKnowledgeDollarOrKnowledgeDollarNin,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      SearchKnowledgeDollarOrKnowledgeDollarNin$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'SearchKnowledgeDollarOrKnowledgeDollarNin' from JSON`,
  );
}

/** @internal */
export const SearchKnowledgeDollarOrDollarNin$inboundSchema: z.ZodType<
  SearchKnowledgeDollarOrDollarNin,
  z.ZodTypeDef,
  unknown
> = z.object({
  $nin: z.array(z.union([z.string(), z.number(), z.boolean()])),
}).transform((v) => {
  return remap$(v, {
    "$nin": "dollarNin",
  });
});

/** @internal */
export type SearchKnowledgeDollarOrDollarNin$Outbound = {
  $nin: Array<string | number | boolean>;
};

/** @internal */
export const SearchKnowledgeDollarOrDollarNin$outboundSchema: z.ZodType<
  SearchKnowledgeDollarOrDollarNin$Outbound,
  z.ZodTypeDef,
  SearchKnowledgeDollarOrDollarNin
> = z.object({
  dollarNin: z.array(z.union([z.string(), z.number(), z.boolean()])),
}).transform((v) => {
  return remap$(v, {
    dollarNin: "$nin",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SearchKnowledgeDollarOrDollarNin$ {
  /** @deprecated use `SearchKnowledgeDollarOrDollarNin$inboundSchema` instead. */
  export const inboundSchema = SearchKnowledgeDollarOrDollarNin$inboundSchema;
  /** @deprecated use `SearchKnowledgeDollarOrDollarNin$outboundSchema` instead. */
  export const outboundSchema = SearchKnowledgeDollarOrDollarNin$outboundSchema;
  /** @deprecated use `SearchKnowledgeDollarOrDollarNin$Outbound` instead. */
  export type Outbound = SearchKnowledgeDollarOrDollarNin$Outbound;
}

export function searchKnowledgeDollarOrDollarNinToJSON(
  searchKnowledgeDollarOrDollarNin: SearchKnowledgeDollarOrDollarNin,
): string {
  return JSON.stringify(
    SearchKnowledgeDollarOrDollarNin$outboundSchema.parse(
      searchKnowledgeDollarOrDollarNin,
    ),
  );
}

export function searchKnowledgeDollarOrDollarNinFromJSON(
  jsonString: string,
): SafeParseResult<SearchKnowledgeDollarOrDollarNin, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => SearchKnowledgeDollarOrDollarNin$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SearchKnowledgeDollarOrDollarNin' from JSON`,
  );
}

/** @internal */
export const SearchKnowledgeDollarOrKnowledgeDollarIn$inboundSchema: z.ZodType<
  SearchKnowledgeDollarOrKnowledgeDollarIn,
  z.ZodTypeDef,
  unknown
> = z.union([z.string(), z.number(), z.boolean()]);

/** @internal */
export type SearchKnowledgeDollarOrKnowledgeDollarIn$Outbound =
  | string
  | number
  | boolean;

/** @internal */
export const SearchKnowledgeDollarOrKnowledgeDollarIn$outboundSchema: z.ZodType<
  SearchKnowledgeDollarOrKnowledgeDollarIn$Outbound,
  z.ZodTypeDef,
  SearchKnowledgeDollarOrKnowledgeDollarIn
> = z.union([z.string(), z.number(), z.boolean()]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SearchKnowledgeDollarOrKnowledgeDollarIn$ {
  /** @deprecated use `SearchKnowledgeDollarOrKnowledgeDollarIn$inboundSchema` instead. */
  export const inboundSchema =
    SearchKnowledgeDollarOrKnowledgeDollarIn$inboundSchema;
  /** @deprecated use `SearchKnowledgeDollarOrKnowledgeDollarIn$outboundSchema` instead. */
  export const outboundSchema =
    SearchKnowledgeDollarOrKnowledgeDollarIn$outboundSchema;
  /** @deprecated use `SearchKnowledgeDollarOrKnowledgeDollarIn$Outbound` instead. */
  export type Outbound = SearchKnowledgeDollarOrKnowledgeDollarIn$Outbound;
}

export function searchKnowledgeDollarOrKnowledgeDollarInToJSON(
  searchKnowledgeDollarOrKnowledgeDollarIn:
    SearchKnowledgeDollarOrKnowledgeDollarIn,
): string {
  return JSON.stringify(
    SearchKnowledgeDollarOrKnowledgeDollarIn$outboundSchema.parse(
      searchKnowledgeDollarOrKnowledgeDollarIn,
    ),
  );
}

export function searchKnowledgeDollarOrKnowledgeDollarInFromJSON(
  jsonString: string,
): SafeParseResult<
  SearchKnowledgeDollarOrKnowledgeDollarIn,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      SearchKnowledgeDollarOrKnowledgeDollarIn$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'SearchKnowledgeDollarOrKnowledgeDollarIn' from JSON`,
  );
}

/** @internal */
export const SearchKnowledgeDollarOrDollarIn$inboundSchema: z.ZodType<
  SearchKnowledgeDollarOrDollarIn,
  z.ZodTypeDef,
  unknown
> = z.object({
  $in: z.array(z.union([z.string(), z.number(), z.boolean()])),
}).transform((v) => {
  return remap$(v, {
    "$in": "dollarIn",
  });
});

/** @internal */
export type SearchKnowledgeDollarOrDollarIn$Outbound = {
  $in: Array<string | number | boolean>;
};

/** @internal */
export const SearchKnowledgeDollarOrDollarIn$outboundSchema: z.ZodType<
  SearchKnowledgeDollarOrDollarIn$Outbound,
  z.ZodTypeDef,
  SearchKnowledgeDollarOrDollarIn
> = z.object({
  dollarIn: z.array(z.union([z.string(), z.number(), z.boolean()])),
}).transform((v) => {
  return remap$(v, {
    dollarIn: "$in",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SearchKnowledgeDollarOrDollarIn$ {
  /** @deprecated use `SearchKnowledgeDollarOrDollarIn$inboundSchema` instead. */
  export const inboundSchema = SearchKnowledgeDollarOrDollarIn$inboundSchema;
  /** @deprecated use `SearchKnowledgeDollarOrDollarIn$outboundSchema` instead. */
  export const outboundSchema = SearchKnowledgeDollarOrDollarIn$outboundSchema;
  /** @deprecated use `SearchKnowledgeDollarOrDollarIn$Outbound` instead. */
  export type Outbound = SearchKnowledgeDollarOrDollarIn$Outbound;
}

export function searchKnowledgeDollarOrDollarInToJSON(
  searchKnowledgeDollarOrDollarIn: SearchKnowledgeDollarOrDollarIn,
): string {
  return JSON.stringify(
    SearchKnowledgeDollarOrDollarIn$outboundSchema.parse(
      searchKnowledgeDollarOrDollarIn,
    ),
  );
}

export function searchKnowledgeDollarOrDollarInFromJSON(
  jsonString: string,
): SafeParseResult<SearchKnowledgeDollarOrDollarIn, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => SearchKnowledgeDollarOrDollarIn$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SearchKnowledgeDollarOrDollarIn' from JSON`,
  );
}

/** @internal */
export const SearchKnowledgeDollarOrDollarLte$inboundSchema: z.ZodType<
  SearchKnowledgeDollarOrDollarLte,
  z.ZodTypeDef,
  unknown
> = z.object({
  $lte: z.number(),
}).transform((v) => {
  return remap$(v, {
    "$lte": "dollarLte",
  });
});

/** @internal */
export type SearchKnowledgeDollarOrDollarLte$Outbound = {
  $lte: number;
};

/** @internal */
export const SearchKnowledgeDollarOrDollarLte$outboundSchema: z.ZodType<
  SearchKnowledgeDollarOrDollarLte$Outbound,
  z.ZodTypeDef,
  SearchKnowledgeDollarOrDollarLte
> = z.object({
  dollarLte: z.number(),
}).transform((v) => {
  return remap$(v, {
    dollarLte: "$lte",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SearchKnowledgeDollarOrDollarLte$ {
  /** @deprecated use `SearchKnowledgeDollarOrDollarLte$inboundSchema` instead. */
  export const inboundSchema = SearchKnowledgeDollarOrDollarLte$inboundSchema;
  /** @deprecated use `SearchKnowledgeDollarOrDollarLte$outboundSchema` instead. */
  export const outboundSchema = SearchKnowledgeDollarOrDollarLte$outboundSchema;
  /** @deprecated use `SearchKnowledgeDollarOrDollarLte$Outbound` instead. */
  export type Outbound = SearchKnowledgeDollarOrDollarLte$Outbound;
}

export function searchKnowledgeDollarOrDollarLteToJSON(
  searchKnowledgeDollarOrDollarLte: SearchKnowledgeDollarOrDollarLte,
): string {
  return JSON.stringify(
    SearchKnowledgeDollarOrDollarLte$outboundSchema.parse(
      searchKnowledgeDollarOrDollarLte,
    ),
  );
}

export function searchKnowledgeDollarOrDollarLteFromJSON(
  jsonString: string,
): SafeParseResult<SearchKnowledgeDollarOrDollarLte, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => SearchKnowledgeDollarOrDollarLte$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SearchKnowledgeDollarOrDollarLte' from JSON`,
  );
}

/** @internal */
export const SearchKnowledgeDollarOrDollarLt$inboundSchema: z.ZodType<
  SearchKnowledgeDollarOrDollarLt,
  z.ZodTypeDef,
  unknown
> = z.object({
  $lt: z.number(),
}).transform((v) => {
  return remap$(v, {
    "$lt": "dollarLt",
  });
});

/** @internal */
export type SearchKnowledgeDollarOrDollarLt$Outbound = {
  $lt: number;
};

/** @internal */
export const SearchKnowledgeDollarOrDollarLt$outboundSchema: z.ZodType<
  SearchKnowledgeDollarOrDollarLt$Outbound,
  z.ZodTypeDef,
  SearchKnowledgeDollarOrDollarLt
> = z.object({
  dollarLt: z.number(),
}).transform((v) => {
  return remap$(v, {
    dollarLt: "$lt",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SearchKnowledgeDollarOrDollarLt$ {
  /** @deprecated use `SearchKnowledgeDollarOrDollarLt$inboundSchema` instead. */
  export const inboundSchema = SearchKnowledgeDollarOrDollarLt$inboundSchema;
  /** @deprecated use `SearchKnowledgeDollarOrDollarLt$outboundSchema` instead. */
  export const outboundSchema = SearchKnowledgeDollarOrDollarLt$outboundSchema;
  /** @deprecated use `SearchKnowledgeDollarOrDollarLt$Outbound` instead. */
  export type Outbound = SearchKnowledgeDollarOrDollarLt$Outbound;
}

export function searchKnowledgeDollarOrDollarLtToJSON(
  searchKnowledgeDollarOrDollarLt: SearchKnowledgeDollarOrDollarLt,
): string {
  return JSON.stringify(
    SearchKnowledgeDollarOrDollarLt$outboundSchema.parse(
      searchKnowledgeDollarOrDollarLt,
    ),
  );
}

export function searchKnowledgeDollarOrDollarLtFromJSON(
  jsonString: string,
): SafeParseResult<SearchKnowledgeDollarOrDollarLt, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => SearchKnowledgeDollarOrDollarLt$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SearchKnowledgeDollarOrDollarLt' from JSON`,
  );
}

/** @internal */
export const SearchKnowledgeDollarOrDollarGte$inboundSchema: z.ZodType<
  SearchKnowledgeDollarOrDollarGte,
  z.ZodTypeDef,
  unknown
> = z.object({
  $gte: z.number(),
}).transform((v) => {
  return remap$(v, {
    "$gte": "dollarGte",
  });
});

/** @internal */
export type SearchKnowledgeDollarOrDollarGte$Outbound = {
  $gte: number;
};

/** @internal */
export const SearchKnowledgeDollarOrDollarGte$outboundSchema: z.ZodType<
  SearchKnowledgeDollarOrDollarGte$Outbound,
  z.ZodTypeDef,
  SearchKnowledgeDollarOrDollarGte
> = z.object({
  dollarGte: z.number(),
}).transform((v) => {
  return remap$(v, {
    dollarGte: "$gte",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SearchKnowledgeDollarOrDollarGte$ {
  /** @deprecated use `SearchKnowledgeDollarOrDollarGte$inboundSchema` instead. */
  export const inboundSchema = SearchKnowledgeDollarOrDollarGte$inboundSchema;
  /** @deprecated use `SearchKnowledgeDollarOrDollarGte$outboundSchema` instead. */
  export const outboundSchema = SearchKnowledgeDollarOrDollarGte$outboundSchema;
  /** @deprecated use `SearchKnowledgeDollarOrDollarGte$Outbound` instead. */
  export type Outbound = SearchKnowledgeDollarOrDollarGte$Outbound;
}

export function searchKnowledgeDollarOrDollarGteToJSON(
  searchKnowledgeDollarOrDollarGte: SearchKnowledgeDollarOrDollarGte,
): string {
  return JSON.stringify(
    SearchKnowledgeDollarOrDollarGte$outboundSchema.parse(
      searchKnowledgeDollarOrDollarGte,
    ),
  );
}

export function searchKnowledgeDollarOrDollarGteFromJSON(
  jsonString: string,
): SafeParseResult<SearchKnowledgeDollarOrDollarGte, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => SearchKnowledgeDollarOrDollarGte$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SearchKnowledgeDollarOrDollarGte' from JSON`,
  );
}

/** @internal */
export const SearchKnowledgeDollarOr3$inboundSchema: z.ZodType<
  SearchKnowledgeDollarOr3,
  z.ZodTypeDef,
  unknown
> = z.object({
  $gt: z.number(),
}).transform((v) => {
  return remap$(v, {
    "$gt": "dollarGt",
  });
});

/** @internal */
export type SearchKnowledgeDollarOr3$Outbound = {
  $gt: number;
};

/** @internal */
export const SearchKnowledgeDollarOr3$outboundSchema: z.ZodType<
  SearchKnowledgeDollarOr3$Outbound,
  z.ZodTypeDef,
  SearchKnowledgeDollarOr3
> = z.object({
  dollarGt: z.number(),
}).transform((v) => {
  return remap$(v, {
    dollarGt: "$gt",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SearchKnowledgeDollarOr3$ {
  /** @deprecated use `SearchKnowledgeDollarOr3$inboundSchema` instead. */
  export const inboundSchema = SearchKnowledgeDollarOr3$inboundSchema;
  /** @deprecated use `SearchKnowledgeDollarOr3$outboundSchema` instead. */
  export const outboundSchema = SearchKnowledgeDollarOr3$outboundSchema;
  /** @deprecated use `SearchKnowledgeDollarOr3$Outbound` instead. */
  export type Outbound = SearchKnowledgeDollarOr3$Outbound;
}

export function searchKnowledgeDollarOr3ToJSON(
  searchKnowledgeDollarOr3: SearchKnowledgeDollarOr3,
): string {
  return JSON.stringify(
    SearchKnowledgeDollarOr3$outboundSchema.parse(searchKnowledgeDollarOr3),
  );
}

export function searchKnowledgeDollarOr3FromJSON(
  jsonString: string,
): SafeParseResult<SearchKnowledgeDollarOr3, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => SearchKnowledgeDollarOr3$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SearchKnowledgeDollarOr3' from JSON`,
  );
}

/** @internal */
export const SearchKnowledgeDollarOrKnowledgeDollarNe$inboundSchema: z.ZodType<
  SearchKnowledgeDollarOrKnowledgeDollarNe,
  z.ZodTypeDef,
  unknown
> = z.union([z.string(), z.number(), z.boolean()]);

/** @internal */
export type SearchKnowledgeDollarOrKnowledgeDollarNe$Outbound =
  | string
  | number
  | boolean;

/** @internal */
export const SearchKnowledgeDollarOrKnowledgeDollarNe$outboundSchema: z.ZodType<
  SearchKnowledgeDollarOrKnowledgeDollarNe$Outbound,
  z.ZodTypeDef,
  SearchKnowledgeDollarOrKnowledgeDollarNe
> = z.union([z.string(), z.number(), z.boolean()]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SearchKnowledgeDollarOrKnowledgeDollarNe$ {
  /** @deprecated use `SearchKnowledgeDollarOrKnowledgeDollarNe$inboundSchema` instead. */
  export const inboundSchema =
    SearchKnowledgeDollarOrKnowledgeDollarNe$inboundSchema;
  /** @deprecated use `SearchKnowledgeDollarOrKnowledgeDollarNe$outboundSchema` instead. */
  export const outboundSchema =
    SearchKnowledgeDollarOrKnowledgeDollarNe$outboundSchema;
  /** @deprecated use `SearchKnowledgeDollarOrKnowledgeDollarNe$Outbound` instead. */
  export type Outbound = SearchKnowledgeDollarOrKnowledgeDollarNe$Outbound;
}

export function searchKnowledgeDollarOrKnowledgeDollarNeToJSON(
  searchKnowledgeDollarOrKnowledgeDollarNe:
    SearchKnowledgeDollarOrKnowledgeDollarNe,
): string {
  return JSON.stringify(
    SearchKnowledgeDollarOrKnowledgeDollarNe$outboundSchema.parse(
      searchKnowledgeDollarOrKnowledgeDollarNe,
    ),
  );
}

export function searchKnowledgeDollarOrKnowledgeDollarNeFromJSON(
  jsonString: string,
): SafeParseResult<
  SearchKnowledgeDollarOrKnowledgeDollarNe,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      SearchKnowledgeDollarOrKnowledgeDollarNe$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'SearchKnowledgeDollarOrKnowledgeDollarNe' from JSON`,
  );
}

/** @internal */
export const SearchKnowledgeDollarOrDollarNe$inboundSchema: z.ZodType<
  SearchKnowledgeDollarOrDollarNe,
  z.ZodTypeDef,
  unknown
> = z.object({
  $ne: z.union([z.string(), z.number(), z.boolean()]),
}).transform((v) => {
  return remap$(v, {
    "$ne": "dollarNe",
  });
});

/** @internal */
export type SearchKnowledgeDollarOrDollarNe$Outbound = {
  $ne: string | number | boolean;
};

/** @internal */
export const SearchKnowledgeDollarOrDollarNe$outboundSchema: z.ZodType<
  SearchKnowledgeDollarOrDollarNe$Outbound,
  z.ZodTypeDef,
  SearchKnowledgeDollarOrDollarNe
> = z.object({
  dollarNe: z.union([z.string(), z.number(), z.boolean()]),
}).transform((v) => {
  return remap$(v, {
    dollarNe: "$ne",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SearchKnowledgeDollarOrDollarNe$ {
  /** @deprecated use `SearchKnowledgeDollarOrDollarNe$inboundSchema` instead. */
  export const inboundSchema = SearchKnowledgeDollarOrDollarNe$inboundSchema;
  /** @deprecated use `SearchKnowledgeDollarOrDollarNe$outboundSchema` instead. */
  export const outboundSchema = SearchKnowledgeDollarOrDollarNe$outboundSchema;
  /** @deprecated use `SearchKnowledgeDollarOrDollarNe$Outbound` instead. */
  export type Outbound = SearchKnowledgeDollarOrDollarNe$Outbound;
}

export function searchKnowledgeDollarOrDollarNeToJSON(
  searchKnowledgeDollarOrDollarNe: SearchKnowledgeDollarOrDollarNe,
): string {
  return JSON.stringify(
    SearchKnowledgeDollarOrDollarNe$outboundSchema.parse(
      searchKnowledgeDollarOrDollarNe,
    ),
  );
}

export function searchKnowledgeDollarOrDollarNeFromJSON(
  jsonString: string,
): SafeParseResult<SearchKnowledgeDollarOrDollarNe, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => SearchKnowledgeDollarOrDollarNe$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SearchKnowledgeDollarOrDollarNe' from JSON`,
  );
}

/** @internal */
export const SearchKnowledgeDollarOrKnowledgeDollarEq$inboundSchema: z.ZodType<
  SearchKnowledgeDollarOrKnowledgeDollarEq,
  z.ZodTypeDef,
  unknown
> = z.union([z.string(), z.number(), z.boolean()]);

/** @internal */
export type SearchKnowledgeDollarOrKnowledgeDollarEq$Outbound =
  | string
  | number
  | boolean;

/** @internal */
export const SearchKnowledgeDollarOrKnowledgeDollarEq$outboundSchema: z.ZodType<
  SearchKnowledgeDollarOrKnowledgeDollarEq$Outbound,
  z.ZodTypeDef,
  SearchKnowledgeDollarOrKnowledgeDollarEq
> = z.union([z.string(), z.number(), z.boolean()]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SearchKnowledgeDollarOrKnowledgeDollarEq$ {
  /** @deprecated use `SearchKnowledgeDollarOrKnowledgeDollarEq$inboundSchema` instead. */
  export const inboundSchema =
    SearchKnowledgeDollarOrKnowledgeDollarEq$inboundSchema;
  /** @deprecated use `SearchKnowledgeDollarOrKnowledgeDollarEq$outboundSchema` instead. */
  export const outboundSchema =
    SearchKnowledgeDollarOrKnowledgeDollarEq$outboundSchema;
  /** @deprecated use `SearchKnowledgeDollarOrKnowledgeDollarEq$Outbound` instead. */
  export type Outbound = SearchKnowledgeDollarOrKnowledgeDollarEq$Outbound;
}

export function searchKnowledgeDollarOrKnowledgeDollarEqToJSON(
  searchKnowledgeDollarOrKnowledgeDollarEq:
    SearchKnowledgeDollarOrKnowledgeDollarEq,
): string {
  return JSON.stringify(
    SearchKnowledgeDollarOrKnowledgeDollarEq$outboundSchema.parse(
      searchKnowledgeDollarOrKnowledgeDollarEq,
    ),
  );
}

export function searchKnowledgeDollarOrKnowledgeDollarEqFromJSON(
  jsonString: string,
): SafeParseResult<
  SearchKnowledgeDollarOrKnowledgeDollarEq,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      SearchKnowledgeDollarOrKnowledgeDollarEq$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'SearchKnowledgeDollarOrKnowledgeDollarEq' from JSON`,
  );
}

/** @internal */
export const SearchKnowledgeDollarOrDollarEq$inboundSchema: z.ZodType<
  SearchKnowledgeDollarOrDollarEq,
  z.ZodTypeDef,
  unknown
> = z.object({
  $eq: z.union([z.string(), z.number(), z.boolean()]),
}).transform((v) => {
  return remap$(v, {
    "$eq": "dollarEq",
  });
});

/** @internal */
export type SearchKnowledgeDollarOrDollarEq$Outbound = {
  $eq: string | number | boolean;
};

/** @internal */
export const SearchKnowledgeDollarOrDollarEq$outboundSchema: z.ZodType<
  SearchKnowledgeDollarOrDollarEq$Outbound,
  z.ZodTypeDef,
  SearchKnowledgeDollarOrDollarEq
> = z.object({
  dollarEq: z.union([z.string(), z.number(), z.boolean()]),
}).transform((v) => {
  return remap$(v, {
    dollarEq: "$eq",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SearchKnowledgeDollarOrDollarEq$ {
  /** @deprecated use `SearchKnowledgeDollarOrDollarEq$inboundSchema` instead. */
  export const inboundSchema = SearchKnowledgeDollarOrDollarEq$inboundSchema;
  /** @deprecated use `SearchKnowledgeDollarOrDollarEq$outboundSchema` instead. */
  export const outboundSchema = SearchKnowledgeDollarOrDollarEq$outboundSchema;
  /** @deprecated use `SearchKnowledgeDollarOrDollarEq$Outbound` instead. */
  export type Outbound = SearchKnowledgeDollarOrDollarEq$Outbound;
}

export function searchKnowledgeDollarOrDollarEqToJSON(
  searchKnowledgeDollarOrDollarEq: SearchKnowledgeDollarOrDollarEq,
): string {
  return JSON.stringify(
    SearchKnowledgeDollarOrDollarEq$outboundSchema.parse(
      searchKnowledgeDollarOrDollarEq,
    ),
  );
}

export function searchKnowledgeDollarOrDollarEqFromJSON(
  jsonString: string,
): SafeParseResult<SearchKnowledgeDollarOrDollarEq, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => SearchKnowledgeDollarOrDollarEq$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SearchKnowledgeDollarOrDollarEq' from JSON`,
  );
}

/** @internal */
export const SearchKnowledgeFilterDollarOr$inboundSchema: z.ZodType<
  SearchKnowledgeFilterDollarOr,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => SearchKnowledgeDollarOrDollarEq$inboundSchema),
  z.lazy(() => SearchKnowledgeDollarOrDollarNe$inboundSchema),
  z.lazy(() => SearchKnowledgeDollarOr3$inboundSchema),
  z.lazy(() => SearchKnowledgeDollarOrDollarGte$inboundSchema),
  z.lazy(() => SearchKnowledgeDollarOrDollarLt$inboundSchema),
  z.lazy(() => SearchKnowledgeDollarOrDollarLte$inboundSchema),
  z.lazy(() => SearchKnowledgeDollarOrDollarIn$inboundSchema),
  z.lazy(() => SearchKnowledgeDollarOrDollarNin$inboundSchema),
  z.lazy(() => SearchKnowledgeDollarOrDollarExists$inboundSchema),
]);

/** @internal */
export type SearchKnowledgeFilterDollarOr$Outbound =
  | SearchKnowledgeDollarOrDollarEq$Outbound
  | SearchKnowledgeDollarOrDollarNe$Outbound
  | SearchKnowledgeDollarOr3$Outbound
  | SearchKnowledgeDollarOrDollarGte$Outbound
  | SearchKnowledgeDollarOrDollarLt$Outbound
  | SearchKnowledgeDollarOrDollarLte$Outbound
  | SearchKnowledgeDollarOrDollarIn$Outbound
  | SearchKnowledgeDollarOrDollarNin$Outbound
  | SearchKnowledgeDollarOrDollarExists$Outbound;

/** @internal */
export const SearchKnowledgeFilterDollarOr$outboundSchema: z.ZodType<
  SearchKnowledgeFilterDollarOr$Outbound,
  z.ZodTypeDef,
  SearchKnowledgeFilterDollarOr
> = z.union([
  z.lazy(() => SearchKnowledgeDollarOrDollarEq$outboundSchema),
  z.lazy(() => SearchKnowledgeDollarOrDollarNe$outboundSchema),
  z.lazy(() => SearchKnowledgeDollarOr3$outboundSchema),
  z.lazy(() => SearchKnowledgeDollarOrDollarGte$outboundSchema),
  z.lazy(() => SearchKnowledgeDollarOrDollarLt$outboundSchema),
  z.lazy(() => SearchKnowledgeDollarOrDollarLte$outboundSchema),
  z.lazy(() => SearchKnowledgeDollarOrDollarIn$outboundSchema),
  z.lazy(() => SearchKnowledgeDollarOrDollarNin$outboundSchema),
  z.lazy(() => SearchKnowledgeDollarOrDollarExists$outboundSchema),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SearchKnowledgeFilterDollarOr$ {
  /** @deprecated use `SearchKnowledgeFilterDollarOr$inboundSchema` instead. */
  export const inboundSchema = SearchKnowledgeFilterDollarOr$inboundSchema;
  /** @deprecated use `SearchKnowledgeFilterDollarOr$outboundSchema` instead. */
  export const outboundSchema = SearchKnowledgeFilterDollarOr$outboundSchema;
  /** @deprecated use `SearchKnowledgeFilterDollarOr$Outbound` instead. */
  export type Outbound = SearchKnowledgeFilterDollarOr$Outbound;
}

export function searchKnowledgeFilterDollarOrToJSON(
  searchKnowledgeFilterDollarOr: SearchKnowledgeFilterDollarOr,
): string {
  return JSON.stringify(
    SearchKnowledgeFilterDollarOr$outboundSchema.parse(
      searchKnowledgeFilterDollarOr,
    ),
  );
}

export function searchKnowledgeFilterDollarOrFromJSON(
  jsonString: string,
): SafeParseResult<SearchKnowledgeFilterDollarOr, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => SearchKnowledgeFilterDollarOr$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SearchKnowledgeFilterDollarOr' from JSON`,
  );
}

/** @internal */
export const FilterDollarOr$inboundSchema: z.ZodType<
  FilterDollarOr,
  z.ZodTypeDef,
  unknown
> = z.object({
  $or: z.array(
    z.record(z.union([
      z.lazy(() => SearchKnowledgeDollarOrDollarEq$inboundSchema),
      z.lazy(() =>
        SearchKnowledgeDollarOrDollarNe$inboundSchema
      ),
      z.lazy(() => SearchKnowledgeDollarOr3$inboundSchema),
      z.lazy(() => SearchKnowledgeDollarOrDollarGte$inboundSchema),
      z.lazy(() => SearchKnowledgeDollarOrDollarLt$inboundSchema),
      z.lazy(() => SearchKnowledgeDollarOrDollarLte$inboundSchema),
      z.lazy(() => SearchKnowledgeDollarOrDollarIn$inboundSchema),
      z.lazy(() => SearchKnowledgeDollarOrDollarNin$inboundSchema),
      z.lazy(() => SearchKnowledgeDollarOrDollarExists$inboundSchema),
    ])),
  ),
}).transform((v) => {
  return remap$(v, {
    "$or": "dollarOr",
  });
});

/** @internal */
export type FilterDollarOr$Outbound = {
  $or: Array<
    {
      [k: string]:
        | SearchKnowledgeDollarOrDollarEq$Outbound
        | SearchKnowledgeDollarOrDollarNe$Outbound
        | SearchKnowledgeDollarOr3$Outbound
        | SearchKnowledgeDollarOrDollarGte$Outbound
        | SearchKnowledgeDollarOrDollarLt$Outbound
        | SearchKnowledgeDollarOrDollarLte$Outbound
        | SearchKnowledgeDollarOrDollarIn$Outbound
        | SearchKnowledgeDollarOrDollarNin$Outbound
        | SearchKnowledgeDollarOrDollarExists$Outbound;
    }
  >;
};

/** @internal */
export const FilterDollarOr$outboundSchema: z.ZodType<
  FilterDollarOr$Outbound,
  z.ZodTypeDef,
  FilterDollarOr
> = z.object({
  dollarOr: z.array(
    z.record(z.union([
      z.lazy(() => SearchKnowledgeDollarOrDollarEq$outboundSchema),
      z.lazy(() =>
        SearchKnowledgeDollarOrDollarNe$outboundSchema
      ),
      z.lazy(() => SearchKnowledgeDollarOr3$outboundSchema),
      z.lazy(() => SearchKnowledgeDollarOrDollarGte$outboundSchema),
      z.lazy(() => SearchKnowledgeDollarOrDollarLt$outboundSchema),
      z.lazy(() => SearchKnowledgeDollarOrDollarLte$outboundSchema),
      z.lazy(() => SearchKnowledgeDollarOrDollarIn$outboundSchema),
      z.lazy(() => SearchKnowledgeDollarOrDollarNin$outboundSchema),
      z.lazy(() => SearchKnowledgeDollarOrDollarExists$outboundSchema),
    ])),
  ),
}).transform((v) => {
  return remap$(v, {
    dollarOr: "$or",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FilterDollarOr$ {
  /** @deprecated use `FilterDollarOr$inboundSchema` instead. */
  export const inboundSchema = FilterDollarOr$inboundSchema;
  /** @deprecated use `FilterDollarOr$outboundSchema` instead. */
  export const outboundSchema = FilterDollarOr$outboundSchema;
  /** @deprecated use `FilterDollarOr$Outbound` instead. */
  export type Outbound = FilterDollarOr$Outbound;
}

export function filterDollarOrToJSON(filterDollarOr: FilterDollarOr): string {
  return JSON.stringify(FilterDollarOr$outboundSchema.parse(filterDollarOr));
}

export function filterDollarOrFromJSON(
  jsonString: string,
): SafeParseResult<FilterDollarOr, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => FilterDollarOr$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'FilterDollarOr' from JSON`,
  );
}

/** @internal */
export const SearchKnowledgeDollarAndDollarExists$inboundSchema: z.ZodType<
  SearchKnowledgeDollarAndDollarExists,
  z.ZodTypeDef,
  unknown
> = z.object({
  $exists: z.boolean(),
}).transform((v) => {
  return remap$(v, {
    "$exists": "dollarExists",
  });
});

/** @internal */
export type SearchKnowledgeDollarAndDollarExists$Outbound = {
  $exists: boolean;
};

/** @internal */
export const SearchKnowledgeDollarAndDollarExists$outboundSchema: z.ZodType<
  SearchKnowledgeDollarAndDollarExists$Outbound,
  z.ZodTypeDef,
  SearchKnowledgeDollarAndDollarExists
> = z.object({
  dollarExists: z.boolean(),
}).transform((v) => {
  return remap$(v, {
    dollarExists: "$exists",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SearchKnowledgeDollarAndDollarExists$ {
  /** @deprecated use `SearchKnowledgeDollarAndDollarExists$inboundSchema` instead. */
  export const inboundSchema =
    SearchKnowledgeDollarAndDollarExists$inboundSchema;
  /** @deprecated use `SearchKnowledgeDollarAndDollarExists$outboundSchema` instead. */
  export const outboundSchema =
    SearchKnowledgeDollarAndDollarExists$outboundSchema;
  /** @deprecated use `SearchKnowledgeDollarAndDollarExists$Outbound` instead. */
  export type Outbound = SearchKnowledgeDollarAndDollarExists$Outbound;
}

export function searchKnowledgeDollarAndDollarExistsToJSON(
  searchKnowledgeDollarAndDollarExists: SearchKnowledgeDollarAndDollarExists,
): string {
  return JSON.stringify(
    SearchKnowledgeDollarAndDollarExists$outboundSchema.parse(
      searchKnowledgeDollarAndDollarExists,
    ),
  );
}

export function searchKnowledgeDollarAndDollarExistsFromJSON(
  jsonString: string,
): SafeParseResult<SearchKnowledgeDollarAndDollarExists, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      SearchKnowledgeDollarAndDollarExists$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SearchKnowledgeDollarAndDollarExists' from JSON`,
  );
}

/** @internal */
export const SearchKnowledgeDollarAndKnowledgeDollarNin$inboundSchema:
  z.ZodType<SearchKnowledgeDollarAndKnowledgeDollarNin, z.ZodTypeDef, unknown> =
    z.union([z.string(), z.number(), z.boolean()]);

/** @internal */
export type SearchKnowledgeDollarAndKnowledgeDollarNin$Outbound =
  | string
  | number
  | boolean;

/** @internal */
export const SearchKnowledgeDollarAndKnowledgeDollarNin$outboundSchema:
  z.ZodType<
    SearchKnowledgeDollarAndKnowledgeDollarNin$Outbound,
    z.ZodTypeDef,
    SearchKnowledgeDollarAndKnowledgeDollarNin
  > = z.union([z.string(), z.number(), z.boolean()]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SearchKnowledgeDollarAndKnowledgeDollarNin$ {
  /** @deprecated use `SearchKnowledgeDollarAndKnowledgeDollarNin$inboundSchema` instead. */
  export const inboundSchema =
    SearchKnowledgeDollarAndKnowledgeDollarNin$inboundSchema;
  /** @deprecated use `SearchKnowledgeDollarAndKnowledgeDollarNin$outboundSchema` instead. */
  export const outboundSchema =
    SearchKnowledgeDollarAndKnowledgeDollarNin$outboundSchema;
  /** @deprecated use `SearchKnowledgeDollarAndKnowledgeDollarNin$Outbound` instead. */
  export type Outbound = SearchKnowledgeDollarAndKnowledgeDollarNin$Outbound;
}

export function searchKnowledgeDollarAndKnowledgeDollarNinToJSON(
  searchKnowledgeDollarAndKnowledgeDollarNin:
    SearchKnowledgeDollarAndKnowledgeDollarNin,
): string {
  return JSON.stringify(
    SearchKnowledgeDollarAndKnowledgeDollarNin$outboundSchema.parse(
      searchKnowledgeDollarAndKnowledgeDollarNin,
    ),
  );
}

export function searchKnowledgeDollarAndKnowledgeDollarNinFromJSON(
  jsonString: string,
): SafeParseResult<
  SearchKnowledgeDollarAndKnowledgeDollarNin,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      SearchKnowledgeDollarAndKnowledgeDollarNin$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'SearchKnowledgeDollarAndKnowledgeDollarNin' from JSON`,
  );
}

/** @internal */
export const SearchKnowledgeDollarAndDollarNin$inboundSchema: z.ZodType<
  SearchKnowledgeDollarAndDollarNin,
  z.ZodTypeDef,
  unknown
> = z.object({
  $nin: z.array(z.union([z.string(), z.number(), z.boolean()])),
}).transform((v) => {
  return remap$(v, {
    "$nin": "dollarNin",
  });
});

/** @internal */
export type SearchKnowledgeDollarAndDollarNin$Outbound = {
  $nin: Array<string | number | boolean>;
};

/** @internal */
export const SearchKnowledgeDollarAndDollarNin$outboundSchema: z.ZodType<
  SearchKnowledgeDollarAndDollarNin$Outbound,
  z.ZodTypeDef,
  SearchKnowledgeDollarAndDollarNin
> = z.object({
  dollarNin: z.array(z.union([z.string(), z.number(), z.boolean()])),
}).transform((v) => {
  return remap$(v, {
    dollarNin: "$nin",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SearchKnowledgeDollarAndDollarNin$ {
  /** @deprecated use `SearchKnowledgeDollarAndDollarNin$inboundSchema` instead. */
  export const inboundSchema = SearchKnowledgeDollarAndDollarNin$inboundSchema;
  /** @deprecated use `SearchKnowledgeDollarAndDollarNin$outboundSchema` instead. */
  export const outboundSchema =
    SearchKnowledgeDollarAndDollarNin$outboundSchema;
  /** @deprecated use `SearchKnowledgeDollarAndDollarNin$Outbound` instead. */
  export type Outbound = SearchKnowledgeDollarAndDollarNin$Outbound;
}

export function searchKnowledgeDollarAndDollarNinToJSON(
  searchKnowledgeDollarAndDollarNin: SearchKnowledgeDollarAndDollarNin,
): string {
  return JSON.stringify(
    SearchKnowledgeDollarAndDollarNin$outboundSchema.parse(
      searchKnowledgeDollarAndDollarNin,
    ),
  );
}

export function searchKnowledgeDollarAndDollarNinFromJSON(
  jsonString: string,
): SafeParseResult<SearchKnowledgeDollarAndDollarNin, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => SearchKnowledgeDollarAndDollarNin$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SearchKnowledgeDollarAndDollarNin' from JSON`,
  );
}

/** @internal */
export const SearchKnowledgeDollarAndKnowledgeDollarIn$inboundSchema: z.ZodType<
  SearchKnowledgeDollarAndKnowledgeDollarIn,
  z.ZodTypeDef,
  unknown
> = z.union([z.string(), z.number(), z.boolean()]);

/** @internal */
export type SearchKnowledgeDollarAndKnowledgeDollarIn$Outbound =
  | string
  | number
  | boolean;

/** @internal */
export const SearchKnowledgeDollarAndKnowledgeDollarIn$outboundSchema:
  z.ZodType<
    SearchKnowledgeDollarAndKnowledgeDollarIn$Outbound,
    z.ZodTypeDef,
    SearchKnowledgeDollarAndKnowledgeDollarIn
  > = z.union([z.string(), z.number(), z.boolean()]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SearchKnowledgeDollarAndKnowledgeDollarIn$ {
  /** @deprecated use `SearchKnowledgeDollarAndKnowledgeDollarIn$inboundSchema` instead. */
  export const inboundSchema =
    SearchKnowledgeDollarAndKnowledgeDollarIn$inboundSchema;
  /** @deprecated use `SearchKnowledgeDollarAndKnowledgeDollarIn$outboundSchema` instead. */
  export const outboundSchema =
    SearchKnowledgeDollarAndKnowledgeDollarIn$outboundSchema;
  /** @deprecated use `SearchKnowledgeDollarAndKnowledgeDollarIn$Outbound` instead. */
  export type Outbound = SearchKnowledgeDollarAndKnowledgeDollarIn$Outbound;
}

export function searchKnowledgeDollarAndKnowledgeDollarInToJSON(
  searchKnowledgeDollarAndKnowledgeDollarIn:
    SearchKnowledgeDollarAndKnowledgeDollarIn,
): string {
  return JSON.stringify(
    SearchKnowledgeDollarAndKnowledgeDollarIn$outboundSchema.parse(
      searchKnowledgeDollarAndKnowledgeDollarIn,
    ),
  );
}

export function searchKnowledgeDollarAndKnowledgeDollarInFromJSON(
  jsonString: string,
): SafeParseResult<
  SearchKnowledgeDollarAndKnowledgeDollarIn,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      SearchKnowledgeDollarAndKnowledgeDollarIn$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'SearchKnowledgeDollarAndKnowledgeDollarIn' from JSON`,
  );
}

/** @internal */
export const SearchKnowledgeDollarAndDollarIn$inboundSchema: z.ZodType<
  SearchKnowledgeDollarAndDollarIn,
  z.ZodTypeDef,
  unknown
> = z.object({
  $in: z.array(z.union([z.string(), z.number(), z.boolean()])),
}).transform((v) => {
  return remap$(v, {
    "$in": "dollarIn",
  });
});

/** @internal */
export type SearchKnowledgeDollarAndDollarIn$Outbound = {
  $in: Array<string | number | boolean>;
};

/** @internal */
export const SearchKnowledgeDollarAndDollarIn$outboundSchema: z.ZodType<
  SearchKnowledgeDollarAndDollarIn$Outbound,
  z.ZodTypeDef,
  SearchKnowledgeDollarAndDollarIn
> = z.object({
  dollarIn: z.array(z.union([z.string(), z.number(), z.boolean()])),
}).transform((v) => {
  return remap$(v, {
    dollarIn: "$in",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SearchKnowledgeDollarAndDollarIn$ {
  /** @deprecated use `SearchKnowledgeDollarAndDollarIn$inboundSchema` instead. */
  export const inboundSchema = SearchKnowledgeDollarAndDollarIn$inboundSchema;
  /** @deprecated use `SearchKnowledgeDollarAndDollarIn$outboundSchema` instead. */
  export const outboundSchema = SearchKnowledgeDollarAndDollarIn$outboundSchema;
  /** @deprecated use `SearchKnowledgeDollarAndDollarIn$Outbound` instead. */
  export type Outbound = SearchKnowledgeDollarAndDollarIn$Outbound;
}

export function searchKnowledgeDollarAndDollarInToJSON(
  searchKnowledgeDollarAndDollarIn: SearchKnowledgeDollarAndDollarIn,
): string {
  return JSON.stringify(
    SearchKnowledgeDollarAndDollarIn$outboundSchema.parse(
      searchKnowledgeDollarAndDollarIn,
    ),
  );
}

export function searchKnowledgeDollarAndDollarInFromJSON(
  jsonString: string,
): SafeParseResult<SearchKnowledgeDollarAndDollarIn, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => SearchKnowledgeDollarAndDollarIn$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SearchKnowledgeDollarAndDollarIn' from JSON`,
  );
}

/** @internal */
export const SearchKnowledgeDollarAndDollarLte$inboundSchema: z.ZodType<
  SearchKnowledgeDollarAndDollarLte,
  z.ZodTypeDef,
  unknown
> = z.object({
  $lte: z.number(),
}).transform((v) => {
  return remap$(v, {
    "$lte": "dollarLte",
  });
});

/** @internal */
export type SearchKnowledgeDollarAndDollarLte$Outbound = {
  $lte: number;
};

/** @internal */
export const SearchKnowledgeDollarAndDollarLte$outboundSchema: z.ZodType<
  SearchKnowledgeDollarAndDollarLte$Outbound,
  z.ZodTypeDef,
  SearchKnowledgeDollarAndDollarLte
> = z.object({
  dollarLte: z.number(),
}).transform((v) => {
  return remap$(v, {
    dollarLte: "$lte",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SearchKnowledgeDollarAndDollarLte$ {
  /** @deprecated use `SearchKnowledgeDollarAndDollarLte$inboundSchema` instead. */
  export const inboundSchema = SearchKnowledgeDollarAndDollarLte$inboundSchema;
  /** @deprecated use `SearchKnowledgeDollarAndDollarLte$outboundSchema` instead. */
  export const outboundSchema =
    SearchKnowledgeDollarAndDollarLte$outboundSchema;
  /** @deprecated use `SearchKnowledgeDollarAndDollarLte$Outbound` instead. */
  export type Outbound = SearchKnowledgeDollarAndDollarLte$Outbound;
}

export function searchKnowledgeDollarAndDollarLteToJSON(
  searchKnowledgeDollarAndDollarLte: SearchKnowledgeDollarAndDollarLte,
): string {
  return JSON.stringify(
    SearchKnowledgeDollarAndDollarLte$outboundSchema.parse(
      searchKnowledgeDollarAndDollarLte,
    ),
  );
}

export function searchKnowledgeDollarAndDollarLteFromJSON(
  jsonString: string,
): SafeParseResult<SearchKnowledgeDollarAndDollarLte, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => SearchKnowledgeDollarAndDollarLte$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SearchKnowledgeDollarAndDollarLte' from JSON`,
  );
}

/** @internal */
export const SearchKnowledgeDollarAndDollarLt$inboundSchema: z.ZodType<
  SearchKnowledgeDollarAndDollarLt,
  z.ZodTypeDef,
  unknown
> = z.object({
  $lt: z.number(),
}).transform((v) => {
  return remap$(v, {
    "$lt": "dollarLt",
  });
});

/** @internal */
export type SearchKnowledgeDollarAndDollarLt$Outbound = {
  $lt: number;
};

/** @internal */
export const SearchKnowledgeDollarAndDollarLt$outboundSchema: z.ZodType<
  SearchKnowledgeDollarAndDollarLt$Outbound,
  z.ZodTypeDef,
  SearchKnowledgeDollarAndDollarLt
> = z.object({
  dollarLt: z.number(),
}).transform((v) => {
  return remap$(v, {
    dollarLt: "$lt",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SearchKnowledgeDollarAndDollarLt$ {
  /** @deprecated use `SearchKnowledgeDollarAndDollarLt$inboundSchema` instead. */
  export const inboundSchema = SearchKnowledgeDollarAndDollarLt$inboundSchema;
  /** @deprecated use `SearchKnowledgeDollarAndDollarLt$outboundSchema` instead. */
  export const outboundSchema = SearchKnowledgeDollarAndDollarLt$outboundSchema;
  /** @deprecated use `SearchKnowledgeDollarAndDollarLt$Outbound` instead. */
  export type Outbound = SearchKnowledgeDollarAndDollarLt$Outbound;
}

export function searchKnowledgeDollarAndDollarLtToJSON(
  searchKnowledgeDollarAndDollarLt: SearchKnowledgeDollarAndDollarLt,
): string {
  return JSON.stringify(
    SearchKnowledgeDollarAndDollarLt$outboundSchema.parse(
      searchKnowledgeDollarAndDollarLt,
    ),
  );
}

export function searchKnowledgeDollarAndDollarLtFromJSON(
  jsonString: string,
): SafeParseResult<SearchKnowledgeDollarAndDollarLt, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => SearchKnowledgeDollarAndDollarLt$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SearchKnowledgeDollarAndDollarLt' from JSON`,
  );
}

/** @internal */
export const SearchKnowledgeDollarAndDollarGte$inboundSchema: z.ZodType<
  SearchKnowledgeDollarAndDollarGte,
  z.ZodTypeDef,
  unknown
> = z.object({
  $gte: z.number(),
}).transform((v) => {
  return remap$(v, {
    "$gte": "dollarGte",
  });
});

/** @internal */
export type SearchKnowledgeDollarAndDollarGte$Outbound = {
  $gte: number;
};

/** @internal */
export const SearchKnowledgeDollarAndDollarGte$outboundSchema: z.ZodType<
  SearchKnowledgeDollarAndDollarGte$Outbound,
  z.ZodTypeDef,
  SearchKnowledgeDollarAndDollarGte
> = z.object({
  dollarGte: z.number(),
}).transform((v) => {
  return remap$(v, {
    dollarGte: "$gte",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SearchKnowledgeDollarAndDollarGte$ {
  /** @deprecated use `SearchKnowledgeDollarAndDollarGte$inboundSchema` instead. */
  export const inboundSchema = SearchKnowledgeDollarAndDollarGte$inboundSchema;
  /** @deprecated use `SearchKnowledgeDollarAndDollarGte$outboundSchema` instead. */
  export const outboundSchema =
    SearchKnowledgeDollarAndDollarGte$outboundSchema;
  /** @deprecated use `SearchKnowledgeDollarAndDollarGte$Outbound` instead. */
  export type Outbound = SearchKnowledgeDollarAndDollarGte$Outbound;
}

export function searchKnowledgeDollarAndDollarGteToJSON(
  searchKnowledgeDollarAndDollarGte: SearchKnowledgeDollarAndDollarGte,
): string {
  return JSON.stringify(
    SearchKnowledgeDollarAndDollarGte$outboundSchema.parse(
      searchKnowledgeDollarAndDollarGte,
    ),
  );
}

export function searchKnowledgeDollarAndDollarGteFromJSON(
  jsonString: string,
): SafeParseResult<SearchKnowledgeDollarAndDollarGte, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => SearchKnowledgeDollarAndDollarGte$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SearchKnowledgeDollarAndDollarGte' from JSON`,
  );
}

/** @internal */
export const SearchKnowledgeDollarAnd3$inboundSchema: z.ZodType<
  SearchKnowledgeDollarAnd3,
  z.ZodTypeDef,
  unknown
> = z.object({
  $gt: z.number(),
}).transform((v) => {
  return remap$(v, {
    "$gt": "dollarGt",
  });
});

/** @internal */
export type SearchKnowledgeDollarAnd3$Outbound = {
  $gt: number;
};

/** @internal */
export const SearchKnowledgeDollarAnd3$outboundSchema: z.ZodType<
  SearchKnowledgeDollarAnd3$Outbound,
  z.ZodTypeDef,
  SearchKnowledgeDollarAnd3
> = z.object({
  dollarGt: z.number(),
}).transform((v) => {
  return remap$(v, {
    dollarGt: "$gt",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SearchKnowledgeDollarAnd3$ {
  /** @deprecated use `SearchKnowledgeDollarAnd3$inboundSchema` instead. */
  export const inboundSchema = SearchKnowledgeDollarAnd3$inboundSchema;
  /** @deprecated use `SearchKnowledgeDollarAnd3$outboundSchema` instead. */
  export const outboundSchema = SearchKnowledgeDollarAnd3$outboundSchema;
  /** @deprecated use `SearchKnowledgeDollarAnd3$Outbound` instead. */
  export type Outbound = SearchKnowledgeDollarAnd3$Outbound;
}

export function searchKnowledgeDollarAnd3ToJSON(
  searchKnowledgeDollarAnd3: SearchKnowledgeDollarAnd3,
): string {
  return JSON.stringify(
    SearchKnowledgeDollarAnd3$outboundSchema.parse(searchKnowledgeDollarAnd3),
  );
}

export function searchKnowledgeDollarAnd3FromJSON(
  jsonString: string,
): SafeParseResult<SearchKnowledgeDollarAnd3, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => SearchKnowledgeDollarAnd3$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SearchKnowledgeDollarAnd3' from JSON`,
  );
}

/** @internal */
export const SearchKnowledgeDollarAndKnowledgeDollarNe$inboundSchema: z.ZodType<
  SearchKnowledgeDollarAndKnowledgeDollarNe,
  z.ZodTypeDef,
  unknown
> = z.union([z.string(), z.number(), z.boolean()]);

/** @internal */
export type SearchKnowledgeDollarAndKnowledgeDollarNe$Outbound =
  | string
  | number
  | boolean;

/** @internal */
export const SearchKnowledgeDollarAndKnowledgeDollarNe$outboundSchema:
  z.ZodType<
    SearchKnowledgeDollarAndKnowledgeDollarNe$Outbound,
    z.ZodTypeDef,
    SearchKnowledgeDollarAndKnowledgeDollarNe
  > = z.union([z.string(), z.number(), z.boolean()]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SearchKnowledgeDollarAndKnowledgeDollarNe$ {
  /** @deprecated use `SearchKnowledgeDollarAndKnowledgeDollarNe$inboundSchema` instead. */
  export const inboundSchema =
    SearchKnowledgeDollarAndKnowledgeDollarNe$inboundSchema;
  /** @deprecated use `SearchKnowledgeDollarAndKnowledgeDollarNe$outboundSchema` instead. */
  export const outboundSchema =
    SearchKnowledgeDollarAndKnowledgeDollarNe$outboundSchema;
  /** @deprecated use `SearchKnowledgeDollarAndKnowledgeDollarNe$Outbound` instead. */
  export type Outbound = SearchKnowledgeDollarAndKnowledgeDollarNe$Outbound;
}

export function searchKnowledgeDollarAndKnowledgeDollarNeToJSON(
  searchKnowledgeDollarAndKnowledgeDollarNe:
    SearchKnowledgeDollarAndKnowledgeDollarNe,
): string {
  return JSON.stringify(
    SearchKnowledgeDollarAndKnowledgeDollarNe$outboundSchema.parse(
      searchKnowledgeDollarAndKnowledgeDollarNe,
    ),
  );
}

export function searchKnowledgeDollarAndKnowledgeDollarNeFromJSON(
  jsonString: string,
): SafeParseResult<
  SearchKnowledgeDollarAndKnowledgeDollarNe,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      SearchKnowledgeDollarAndKnowledgeDollarNe$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'SearchKnowledgeDollarAndKnowledgeDollarNe' from JSON`,
  );
}

/** @internal */
export const SearchKnowledgeDollarAndDollarNe$inboundSchema: z.ZodType<
  SearchKnowledgeDollarAndDollarNe,
  z.ZodTypeDef,
  unknown
> = z.object({
  $ne: z.union([z.string(), z.number(), z.boolean()]),
}).transform((v) => {
  return remap$(v, {
    "$ne": "dollarNe",
  });
});

/** @internal */
export type SearchKnowledgeDollarAndDollarNe$Outbound = {
  $ne: string | number | boolean;
};

/** @internal */
export const SearchKnowledgeDollarAndDollarNe$outboundSchema: z.ZodType<
  SearchKnowledgeDollarAndDollarNe$Outbound,
  z.ZodTypeDef,
  SearchKnowledgeDollarAndDollarNe
> = z.object({
  dollarNe: z.union([z.string(), z.number(), z.boolean()]),
}).transform((v) => {
  return remap$(v, {
    dollarNe: "$ne",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SearchKnowledgeDollarAndDollarNe$ {
  /** @deprecated use `SearchKnowledgeDollarAndDollarNe$inboundSchema` instead. */
  export const inboundSchema = SearchKnowledgeDollarAndDollarNe$inboundSchema;
  /** @deprecated use `SearchKnowledgeDollarAndDollarNe$outboundSchema` instead. */
  export const outboundSchema = SearchKnowledgeDollarAndDollarNe$outboundSchema;
  /** @deprecated use `SearchKnowledgeDollarAndDollarNe$Outbound` instead. */
  export type Outbound = SearchKnowledgeDollarAndDollarNe$Outbound;
}

export function searchKnowledgeDollarAndDollarNeToJSON(
  searchKnowledgeDollarAndDollarNe: SearchKnowledgeDollarAndDollarNe,
): string {
  return JSON.stringify(
    SearchKnowledgeDollarAndDollarNe$outboundSchema.parse(
      searchKnowledgeDollarAndDollarNe,
    ),
  );
}

export function searchKnowledgeDollarAndDollarNeFromJSON(
  jsonString: string,
): SafeParseResult<SearchKnowledgeDollarAndDollarNe, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => SearchKnowledgeDollarAndDollarNe$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SearchKnowledgeDollarAndDollarNe' from JSON`,
  );
}

/** @internal */
export const SearchKnowledgeDollarAndKnowledgeDollarEq$inboundSchema: z.ZodType<
  SearchKnowledgeDollarAndKnowledgeDollarEq,
  z.ZodTypeDef,
  unknown
> = z.union([z.string(), z.number(), z.boolean()]);

/** @internal */
export type SearchKnowledgeDollarAndKnowledgeDollarEq$Outbound =
  | string
  | number
  | boolean;

/** @internal */
export const SearchKnowledgeDollarAndKnowledgeDollarEq$outboundSchema:
  z.ZodType<
    SearchKnowledgeDollarAndKnowledgeDollarEq$Outbound,
    z.ZodTypeDef,
    SearchKnowledgeDollarAndKnowledgeDollarEq
  > = z.union([z.string(), z.number(), z.boolean()]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SearchKnowledgeDollarAndKnowledgeDollarEq$ {
  /** @deprecated use `SearchKnowledgeDollarAndKnowledgeDollarEq$inboundSchema` instead. */
  export const inboundSchema =
    SearchKnowledgeDollarAndKnowledgeDollarEq$inboundSchema;
  /** @deprecated use `SearchKnowledgeDollarAndKnowledgeDollarEq$outboundSchema` instead. */
  export const outboundSchema =
    SearchKnowledgeDollarAndKnowledgeDollarEq$outboundSchema;
  /** @deprecated use `SearchKnowledgeDollarAndKnowledgeDollarEq$Outbound` instead. */
  export type Outbound = SearchKnowledgeDollarAndKnowledgeDollarEq$Outbound;
}

export function searchKnowledgeDollarAndKnowledgeDollarEqToJSON(
  searchKnowledgeDollarAndKnowledgeDollarEq:
    SearchKnowledgeDollarAndKnowledgeDollarEq,
): string {
  return JSON.stringify(
    SearchKnowledgeDollarAndKnowledgeDollarEq$outboundSchema.parse(
      searchKnowledgeDollarAndKnowledgeDollarEq,
    ),
  );
}

export function searchKnowledgeDollarAndKnowledgeDollarEqFromJSON(
  jsonString: string,
): SafeParseResult<
  SearchKnowledgeDollarAndKnowledgeDollarEq,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      SearchKnowledgeDollarAndKnowledgeDollarEq$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'SearchKnowledgeDollarAndKnowledgeDollarEq' from JSON`,
  );
}

/** @internal */
export const SearchKnowledgeDollarAndDollarEq$inboundSchema: z.ZodType<
  SearchKnowledgeDollarAndDollarEq,
  z.ZodTypeDef,
  unknown
> = z.object({
  $eq: z.union([z.string(), z.number(), z.boolean()]),
}).transform((v) => {
  return remap$(v, {
    "$eq": "dollarEq",
  });
});

/** @internal */
export type SearchKnowledgeDollarAndDollarEq$Outbound = {
  $eq: string | number | boolean;
};

/** @internal */
export const SearchKnowledgeDollarAndDollarEq$outboundSchema: z.ZodType<
  SearchKnowledgeDollarAndDollarEq$Outbound,
  z.ZodTypeDef,
  SearchKnowledgeDollarAndDollarEq
> = z.object({
  dollarEq: z.union([z.string(), z.number(), z.boolean()]),
}).transform((v) => {
  return remap$(v, {
    dollarEq: "$eq",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SearchKnowledgeDollarAndDollarEq$ {
  /** @deprecated use `SearchKnowledgeDollarAndDollarEq$inboundSchema` instead. */
  export const inboundSchema = SearchKnowledgeDollarAndDollarEq$inboundSchema;
  /** @deprecated use `SearchKnowledgeDollarAndDollarEq$outboundSchema` instead. */
  export const outboundSchema = SearchKnowledgeDollarAndDollarEq$outboundSchema;
  /** @deprecated use `SearchKnowledgeDollarAndDollarEq$Outbound` instead. */
  export type Outbound = SearchKnowledgeDollarAndDollarEq$Outbound;
}

export function searchKnowledgeDollarAndDollarEqToJSON(
  searchKnowledgeDollarAndDollarEq: SearchKnowledgeDollarAndDollarEq,
): string {
  return JSON.stringify(
    SearchKnowledgeDollarAndDollarEq$outboundSchema.parse(
      searchKnowledgeDollarAndDollarEq,
    ),
  );
}

export function searchKnowledgeDollarAndDollarEqFromJSON(
  jsonString: string,
): SafeParseResult<SearchKnowledgeDollarAndDollarEq, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => SearchKnowledgeDollarAndDollarEq$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SearchKnowledgeDollarAndDollarEq' from JSON`,
  );
}

/** @internal */
export const SearchKnowledgeFilterDollarAnd$inboundSchema: z.ZodType<
  SearchKnowledgeFilterDollarAnd,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => SearchKnowledgeDollarAndDollarEq$inboundSchema),
  z.lazy(() => SearchKnowledgeDollarAndDollarNe$inboundSchema),
  z.lazy(() => SearchKnowledgeDollarAnd3$inboundSchema),
  z.lazy(() => SearchKnowledgeDollarAndDollarGte$inboundSchema),
  z.lazy(() => SearchKnowledgeDollarAndDollarLt$inboundSchema),
  z.lazy(() => SearchKnowledgeDollarAndDollarLte$inboundSchema),
  z.lazy(() => SearchKnowledgeDollarAndDollarIn$inboundSchema),
  z.lazy(() => SearchKnowledgeDollarAndDollarNin$inboundSchema),
  z.lazy(() => SearchKnowledgeDollarAndDollarExists$inboundSchema),
]);

/** @internal */
export type SearchKnowledgeFilterDollarAnd$Outbound =
  | SearchKnowledgeDollarAndDollarEq$Outbound
  | SearchKnowledgeDollarAndDollarNe$Outbound
  | SearchKnowledgeDollarAnd3$Outbound
  | SearchKnowledgeDollarAndDollarGte$Outbound
  | SearchKnowledgeDollarAndDollarLt$Outbound
  | SearchKnowledgeDollarAndDollarLte$Outbound
  | SearchKnowledgeDollarAndDollarIn$Outbound
  | SearchKnowledgeDollarAndDollarNin$Outbound
  | SearchKnowledgeDollarAndDollarExists$Outbound;

/** @internal */
export const SearchKnowledgeFilterDollarAnd$outboundSchema: z.ZodType<
  SearchKnowledgeFilterDollarAnd$Outbound,
  z.ZodTypeDef,
  SearchKnowledgeFilterDollarAnd
> = z.union([
  z.lazy(() => SearchKnowledgeDollarAndDollarEq$outboundSchema),
  z.lazy(() => SearchKnowledgeDollarAndDollarNe$outboundSchema),
  z.lazy(() => SearchKnowledgeDollarAnd3$outboundSchema),
  z.lazy(() => SearchKnowledgeDollarAndDollarGte$outboundSchema),
  z.lazy(() => SearchKnowledgeDollarAndDollarLt$outboundSchema),
  z.lazy(() => SearchKnowledgeDollarAndDollarLte$outboundSchema),
  z.lazy(() => SearchKnowledgeDollarAndDollarIn$outboundSchema),
  z.lazy(() => SearchKnowledgeDollarAndDollarNin$outboundSchema),
  z.lazy(() => SearchKnowledgeDollarAndDollarExists$outboundSchema),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SearchKnowledgeFilterDollarAnd$ {
  /** @deprecated use `SearchKnowledgeFilterDollarAnd$inboundSchema` instead. */
  export const inboundSchema = SearchKnowledgeFilterDollarAnd$inboundSchema;
  /** @deprecated use `SearchKnowledgeFilterDollarAnd$outboundSchema` instead. */
  export const outboundSchema = SearchKnowledgeFilterDollarAnd$outboundSchema;
  /** @deprecated use `SearchKnowledgeFilterDollarAnd$Outbound` instead. */
  export type Outbound = SearchKnowledgeFilterDollarAnd$Outbound;
}

export function searchKnowledgeFilterDollarAndToJSON(
  searchKnowledgeFilterDollarAnd: SearchKnowledgeFilterDollarAnd,
): string {
  return JSON.stringify(
    SearchKnowledgeFilterDollarAnd$outboundSchema.parse(
      searchKnowledgeFilterDollarAnd,
    ),
  );
}

export function searchKnowledgeFilterDollarAndFromJSON(
  jsonString: string,
): SafeParseResult<SearchKnowledgeFilterDollarAnd, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => SearchKnowledgeFilterDollarAnd$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SearchKnowledgeFilterDollarAnd' from JSON`,
  );
}

/** @internal */
export const FilterDollarAnd$inboundSchema: z.ZodType<
  FilterDollarAnd,
  z.ZodTypeDef,
  unknown
> = z.object({
  $and: z.array(
    z.record(z.union([
      z.lazy(() => SearchKnowledgeDollarAndDollarEq$inboundSchema),
      z.lazy(() =>
        SearchKnowledgeDollarAndDollarNe$inboundSchema
      ),
      z.lazy(() => SearchKnowledgeDollarAnd3$inboundSchema),
      z.lazy(() => SearchKnowledgeDollarAndDollarGte$inboundSchema),
      z.lazy(() => SearchKnowledgeDollarAndDollarLt$inboundSchema),
      z.lazy(() => SearchKnowledgeDollarAndDollarLte$inboundSchema),
      z.lazy(() => SearchKnowledgeDollarAndDollarIn$inboundSchema),
      z.lazy(() => SearchKnowledgeDollarAndDollarNin$inboundSchema),
      z.lazy(() => SearchKnowledgeDollarAndDollarExists$inboundSchema),
    ])),
  ),
}).transform((v) => {
  return remap$(v, {
    "$and": "dollarAnd",
  });
});

/** @internal */
export type FilterDollarAnd$Outbound = {
  $and: Array<
    {
      [k: string]:
        | SearchKnowledgeDollarAndDollarEq$Outbound
        | SearchKnowledgeDollarAndDollarNe$Outbound
        | SearchKnowledgeDollarAnd3$Outbound
        | SearchKnowledgeDollarAndDollarGte$Outbound
        | SearchKnowledgeDollarAndDollarLt$Outbound
        | SearchKnowledgeDollarAndDollarLte$Outbound
        | SearchKnowledgeDollarAndDollarIn$Outbound
        | SearchKnowledgeDollarAndDollarNin$Outbound
        | SearchKnowledgeDollarAndDollarExists$Outbound;
    }
  >;
};

/** @internal */
export const FilterDollarAnd$outboundSchema: z.ZodType<
  FilterDollarAnd$Outbound,
  z.ZodTypeDef,
  FilterDollarAnd
> = z.object({
  dollarAnd: z.array(
    z.record(z.union([
      z.lazy(() => SearchKnowledgeDollarAndDollarEq$outboundSchema),
      z.lazy(() =>
        SearchKnowledgeDollarAndDollarNe$outboundSchema
      ),
      z.lazy(() => SearchKnowledgeDollarAnd3$outboundSchema),
      z.lazy(() => SearchKnowledgeDollarAndDollarGte$outboundSchema),
      z.lazy(() => SearchKnowledgeDollarAndDollarLt$outboundSchema),
      z.lazy(() => SearchKnowledgeDollarAndDollarLte$outboundSchema),
      z.lazy(() => SearchKnowledgeDollarAndDollarIn$outboundSchema),
      z.lazy(() => SearchKnowledgeDollarAndDollarNin$outboundSchema),
      z.lazy(() => SearchKnowledgeDollarAndDollarExists$outboundSchema),
    ])),
  ),
}).transform((v) => {
  return remap$(v, {
    dollarAnd: "$and",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FilterDollarAnd$ {
  /** @deprecated use `FilterDollarAnd$inboundSchema` instead. */
  export const inboundSchema = FilterDollarAnd$inboundSchema;
  /** @deprecated use `FilterDollarAnd$outboundSchema` instead. */
  export const outboundSchema = FilterDollarAnd$outboundSchema;
  /** @deprecated use `FilterDollarAnd$Outbound` instead. */
  export type Outbound = FilterDollarAnd$Outbound;
}

export function filterDollarAndToJSON(
  filterDollarAnd: FilterDollarAnd,
): string {
  return JSON.stringify(FilterDollarAnd$outboundSchema.parse(filterDollarAnd));
}

export function filterDollarAndFromJSON(
  jsonString: string,
): SafeParseResult<FilterDollarAnd, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => FilterDollarAnd$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'FilterDollarAnd' from JSON`,
  );
}

/** @internal */
export const SearchKnowledge1DollarExists$inboundSchema: z.ZodType<
  SearchKnowledge1DollarExists,
  z.ZodTypeDef,
  unknown
> = z.object({
  $exists: z.boolean(),
}).transform((v) => {
  return remap$(v, {
    "$exists": "dollarExists",
  });
});

/** @internal */
export type SearchKnowledge1DollarExists$Outbound = {
  $exists: boolean;
};

/** @internal */
export const SearchKnowledge1DollarExists$outboundSchema: z.ZodType<
  SearchKnowledge1DollarExists$Outbound,
  z.ZodTypeDef,
  SearchKnowledge1DollarExists
> = z.object({
  dollarExists: z.boolean(),
}).transform((v) => {
  return remap$(v, {
    dollarExists: "$exists",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SearchKnowledge1DollarExists$ {
  /** @deprecated use `SearchKnowledge1DollarExists$inboundSchema` instead. */
  export const inboundSchema = SearchKnowledge1DollarExists$inboundSchema;
  /** @deprecated use `SearchKnowledge1DollarExists$outboundSchema` instead. */
  export const outboundSchema = SearchKnowledge1DollarExists$outboundSchema;
  /** @deprecated use `SearchKnowledge1DollarExists$Outbound` instead. */
  export type Outbound = SearchKnowledge1DollarExists$Outbound;
}

export function searchKnowledge1DollarExistsToJSON(
  searchKnowledge1DollarExists: SearchKnowledge1DollarExists,
): string {
  return JSON.stringify(
    SearchKnowledge1DollarExists$outboundSchema.parse(
      searchKnowledge1DollarExists,
    ),
  );
}

export function searchKnowledge1DollarExistsFromJSON(
  jsonString: string,
): SafeParseResult<SearchKnowledge1DollarExists, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => SearchKnowledge1DollarExists$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SearchKnowledge1DollarExists' from JSON`,
  );
}

/** @internal */
export const SearchKnowledge1KnowledgeDollarNin$inboundSchema: z.ZodType<
  SearchKnowledge1KnowledgeDollarNin,
  z.ZodTypeDef,
  unknown
> = z.union([z.string(), z.number(), z.boolean()]);

/** @internal */
export type SearchKnowledge1KnowledgeDollarNin$Outbound =
  | string
  | number
  | boolean;

/** @internal */
export const SearchKnowledge1KnowledgeDollarNin$outboundSchema: z.ZodType<
  SearchKnowledge1KnowledgeDollarNin$Outbound,
  z.ZodTypeDef,
  SearchKnowledge1KnowledgeDollarNin
> = z.union([z.string(), z.number(), z.boolean()]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SearchKnowledge1KnowledgeDollarNin$ {
  /** @deprecated use `SearchKnowledge1KnowledgeDollarNin$inboundSchema` instead. */
  export const inboundSchema = SearchKnowledge1KnowledgeDollarNin$inboundSchema;
  /** @deprecated use `SearchKnowledge1KnowledgeDollarNin$outboundSchema` instead. */
  export const outboundSchema =
    SearchKnowledge1KnowledgeDollarNin$outboundSchema;
  /** @deprecated use `SearchKnowledge1KnowledgeDollarNin$Outbound` instead. */
  export type Outbound = SearchKnowledge1KnowledgeDollarNin$Outbound;
}

export function searchKnowledge1KnowledgeDollarNinToJSON(
  searchKnowledge1KnowledgeDollarNin: SearchKnowledge1KnowledgeDollarNin,
): string {
  return JSON.stringify(
    SearchKnowledge1KnowledgeDollarNin$outboundSchema.parse(
      searchKnowledge1KnowledgeDollarNin,
    ),
  );
}

export function searchKnowledge1KnowledgeDollarNinFromJSON(
  jsonString: string,
): SafeParseResult<SearchKnowledge1KnowledgeDollarNin, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      SearchKnowledge1KnowledgeDollarNin$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SearchKnowledge1KnowledgeDollarNin' from JSON`,
  );
}

/** @internal */
export const SearchKnowledge1DollarNin$inboundSchema: z.ZodType<
  SearchKnowledge1DollarNin,
  z.ZodTypeDef,
  unknown
> = z.object({
  $nin: z.array(z.union([z.string(), z.number(), z.boolean()])),
}).transform((v) => {
  return remap$(v, {
    "$nin": "dollarNin",
  });
});

/** @internal */
export type SearchKnowledge1DollarNin$Outbound = {
  $nin: Array<string | number | boolean>;
};

/** @internal */
export const SearchKnowledge1DollarNin$outboundSchema: z.ZodType<
  SearchKnowledge1DollarNin$Outbound,
  z.ZodTypeDef,
  SearchKnowledge1DollarNin
> = z.object({
  dollarNin: z.array(z.union([z.string(), z.number(), z.boolean()])),
}).transform((v) => {
  return remap$(v, {
    dollarNin: "$nin",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SearchKnowledge1DollarNin$ {
  /** @deprecated use `SearchKnowledge1DollarNin$inboundSchema` instead. */
  export const inboundSchema = SearchKnowledge1DollarNin$inboundSchema;
  /** @deprecated use `SearchKnowledge1DollarNin$outboundSchema` instead. */
  export const outboundSchema = SearchKnowledge1DollarNin$outboundSchema;
  /** @deprecated use `SearchKnowledge1DollarNin$Outbound` instead. */
  export type Outbound = SearchKnowledge1DollarNin$Outbound;
}

export function searchKnowledge1DollarNinToJSON(
  searchKnowledge1DollarNin: SearchKnowledge1DollarNin,
): string {
  return JSON.stringify(
    SearchKnowledge1DollarNin$outboundSchema.parse(searchKnowledge1DollarNin),
  );
}

export function searchKnowledge1DollarNinFromJSON(
  jsonString: string,
): SafeParseResult<SearchKnowledge1DollarNin, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => SearchKnowledge1DollarNin$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SearchKnowledge1DollarNin' from JSON`,
  );
}

/** @internal */
export const SearchKnowledge1KnowledgeDollarIn$inboundSchema: z.ZodType<
  SearchKnowledge1KnowledgeDollarIn,
  z.ZodTypeDef,
  unknown
> = z.union([z.string(), z.number(), z.boolean()]);

/** @internal */
export type SearchKnowledge1KnowledgeDollarIn$Outbound =
  | string
  | number
  | boolean;

/** @internal */
export const SearchKnowledge1KnowledgeDollarIn$outboundSchema: z.ZodType<
  SearchKnowledge1KnowledgeDollarIn$Outbound,
  z.ZodTypeDef,
  SearchKnowledge1KnowledgeDollarIn
> = z.union([z.string(), z.number(), z.boolean()]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SearchKnowledge1KnowledgeDollarIn$ {
  /** @deprecated use `SearchKnowledge1KnowledgeDollarIn$inboundSchema` instead. */
  export const inboundSchema = SearchKnowledge1KnowledgeDollarIn$inboundSchema;
  /** @deprecated use `SearchKnowledge1KnowledgeDollarIn$outboundSchema` instead. */
  export const outboundSchema =
    SearchKnowledge1KnowledgeDollarIn$outboundSchema;
  /** @deprecated use `SearchKnowledge1KnowledgeDollarIn$Outbound` instead. */
  export type Outbound = SearchKnowledge1KnowledgeDollarIn$Outbound;
}

export function searchKnowledge1KnowledgeDollarInToJSON(
  searchKnowledge1KnowledgeDollarIn: SearchKnowledge1KnowledgeDollarIn,
): string {
  return JSON.stringify(
    SearchKnowledge1KnowledgeDollarIn$outboundSchema.parse(
      searchKnowledge1KnowledgeDollarIn,
    ),
  );
}

export function searchKnowledge1KnowledgeDollarInFromJSON(
  jsonString: string,
): SafeParseResult<SearchKnowledge1KnowledgeDollarIn, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => SearchKnowledge1KnowledgeDollarIn$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SearchKnowledge1KnowledgeDollarIn' from JSON`,
  );
}

/** @internal */
export const SearchKnowledge1DollarIn$inboundSchema: z.ZodType<
  SearchKnowledge1DollarIn,
  z.ZodTypeDef,
  unknown
> = z.object({
  $in: z.array(z.union([z.string(), z.number(), z.boolean()])),
}).transform((v) => {
  return remap$(v, {
    "$in": "dollarIn",
  });
});

/** @internal */
export type SearchKnowledge1DollarIn$Outbound = {
  $in: Array<string | number | boolean>;
};

/** @internal */
export const SearchKnowledge1DollarIn$outboundSchema: z.ZodType<
  SearchKnowledge1DollarIn$Outbound,
  z.ZodTypeDef,
  SearchKnowledge1DollarIn
> = z.object({
  dollarIn: z.array(z.union([z.string(), z.number(), z.boolean()])),
}).transform((v) => {
  return remap$(v, {
    dollarIn: "$in",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SearchKnowledge1DollarIn$ {
  /** @deprecated use `SearchKnowledge1DollarIn$inboundSchema` instead. */
  export const inboundSchema = SearchKnowledge1DollarIn$inboundSchema;
  /** @deprecated use `SearchKnowledge1DollarIn$outboundSchema` instead. */
  export const outboundSchema = SearchKnowledge1DollarIn$outboundSchema;
  /** @deprecated use `SearchKnowledge1DollarIn$Outbound` instead. */
  export type Outbound = SearchKnowledge1DollarIn$Outbound;
}

export function searchKnowledge1DollarInToJSON(
  searchKnowledge1DollarIn: SearchKnowledge1DollarIn,
): string {
  return JSON.stringify(
    SearchKnowledge1DollarIn$outboundSchema.parse(searchKnowledge1DollarIn),
  );
}

export function searchKnowledge1DollarInFromJSON(
  jsonString: string,
): SafeParseResult<SearchKnowledge1DollarIn, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => SearchKnowledge1DollarIn$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SearchKnowledge1DollarIn' from JSON`,
  );
}

/** @internal */
export const SearchKnowledge1DollarLte$inboundSchema: z.ZodType<
  SearchKnowledge1DollarLte,
  z.ZodTypeDef,
  unknown
> = z.object({
  $lte: z.number(),
}).transform((v) => {
  return remap$(v, {
    "$lte": "dollarLte",
  });
});

/** @internal */
export type SearchKnowledge1DollarLte$Outbound = {
  $lte: number;
};

/** @internal */
export const SearchKnowledge1DollarLte$outboundSchema: z.ZodType<
  SearchKnowledge1DollarLte$Outbound,
  z.ZodTypeDef,
  SearchKnowledge1DollarLte
> = z.object({
  dollarLte: z.number(),
}).transform((v) => {
  return remap$(v, {
    dollarLte: "$lte",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SearchKnowledge1DollarLte$ {
  /** @deprecated use `SearchKnowledge1DollarLte$inboundSchema` instead. */
  export const inboundSchema = SearchKnowledge1DollarLte$inboundSchema;
  /** @deprecated use `SearchKnowledge1DollarLte$outboundSchema` instead. */
  export const outboundSchema = SearchKnowledge1DollarLte$outboundSchema;
  /** @deprecated use `SearchKnowledge1DollarLte$Outbound` instead. */
  export type Outbound = SearchKnowledge1DollarLte$Outbound;
}

export function searchKnowledge1DollarLteToJSON(
  searchKnowledge1DollarLte: SearchKnowledge1DollarLte,
): string {
  return JSON.stringify(
    SearchKnowledge1DollarLte$outboundSchema.parse(searchKnowledge1DollarLte),
  );
}

export function searchKnowledge1DollarLteFromJSON(
  jsonString: string,
): SafeParseResult<SearchKnowledge1DollarLte, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => SearchKnowledge1DollarLte$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SearchKnowledge1DollarLte' from JSON`,
  );
}

/** @internal */
export const SearchKnowledge1DollarLt$inboundSchema: z.ZodType<
  SearchKnowledge1DollarLt,
  z.ZodTypeDef,
  unknown
> = z.object({
  $lt: z.number(),
}).transform((v) => {
  return remap$(v, {
    "$lt": "dollarLt",
  });
});

/** @internal */
export type SearchKnowledge1DollarLt$Outbound = {
  $lt: number;
};

/** @internal */
export const SearchKnowledge1DollarLt$outboundSchema: z.ZodType<
  SearchKnowledge1DollarLt$Outbound,
  z.ZodTypeDef,
  SearchKnowledge1DollarLt
> = z.object({
  dollarLt: z.number(),
}).transform((v) => {
  return remap$(v, {
    dollarLt: "$lt",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SearchKnowledge1DollarLt$ {
  /** @deprecated use `SearchKnowledge1DollarLt$inboundSchema` instead. */
  export const inboundSchema = SearchKnowledge1DollarLt$inboundSchema;
  /** @deprecated use `SearchKnowledge1DollarLt$outboundSchema` instead. */
  export const outboundSchema = SearchKnowledge1DollarLt$outboundSchema;
  /** @deprecated use `SearchKnowledge1DollarLt$Outbound` instead. */
  export type Outbound = SearchKnowledge1DollarLt$Outbound;
}

export function searchKnowledge1DollarLtToJSON(
  searchKnowledge1DollarLt: SearchKnowledge1DollarLt,
): string {
  return JSON.stringify(
    SearchKnowledge1DollarLt$outboundSchema.parse(searchKnowledge1DollarLt),
  );
}

export function searchKnowledge1DollarLtFromJSON(
  jsonString: string,
): SafeParseResult<SearchKnowledge1DollarLt, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => SearchKnowledge1DollarLt$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SearchKnowledge1DollarLt' from JSON`,
  );
}

/** @internal */
export const SearchKnowledge1DollarGte$inboundSchema: z.ZodType<
  SearchKnowledge1DollarGte,
  z.ZodTypeDef,
  unknown
> = z.object({
  $gte: z.number(),
}).transform((v) => {
  return remap$(v, {
    "$gte": "dollarGte",
  });
});

/** @internal */
export type SearchKnowledge1DollarGte$Outbound = {
  $gte: number;
};

/** @internal */
export const SearchKnowledge1DollarGte$outboundSchema: z.ZodType<
  SearchKnowledge1DollarGte$Outbound,
  z.ZodTypeDef,
  SearchKnowledge1DollarGte
> = z.object({
  dollarGte: z.number(),
}).transform((v) => {
  return remap$(v, {
    dollarGte: "$gte",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SearchKnowledge1DollarGte$ {
  /** @deprecated use `SearchKnowledge1DollarGte$inboundSchema` instead. */
  export const inboundSchema = SearchKnowledge1DollarGte$inboundSchema;
  /** @deprecated use `SearchKnowledge1DollarGte$outboundSchema` instead. */
  export const outboundSchema = SearchKnowledge1DollarGte$outboundSchema;
  /** @deprecated use `SearchKnowledge1DollarGte$Outbound` instead. */
  export type Outbound = SearchKnowledge1DollarGte$Outbound;
}

export function searchKnowledge1DollarGteToJSON(
  searchKnowledge1DollarGte: SearchKnowledge1DollarGte,
): string {
  return JSON.stringify(
    SearchKnowledge1DollarGte$outboundSchema.parse(searchKnowledge1DollarGte),
  );
}

export function searchKnowledge1DollarGteFromJSON(
  jsonString: string,
): SafeParseResult<SearchKnowledge1DollarGte, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => SearchKnowledge1DollarGte$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SearchKnowledge1DollarGte' from JSON`,
  );
}

/** @internal */
export const SearchKnowledge13$inboundSchema: z.ZodType<
  SearchKnowledge13,
  z.ZodTypeDef,
  unknown
> = z.object({
  $gt: z.number(),
}).transform((v) => {
  return remap$(v, {
    "$gt": "dollarGt",
  });
});

/** @internal */
export type SearchKnowledge13$Outbound = {
  $gt: number;
};

/** @internal */
export const SearchKnowledge13$outboundSchema: z.ZodType<
  SearchKnowledge13$Outbound,
  z.ZodTypeDef,
  SearchKnowledge13
> = z.object({
  dollarGt: z.number(),
}).transform((v) => {
  return remap$(v, {
    dollarGt: "$gt",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SearchKnowledge13$ {
  /** @deprecated use `SearchKnowledge13$inboundSchema` instead. */
  export const inboundSchema = SearchKnowledge13$inboundSchema;
  /** @deprecated use `SearchKnowledge13$outboundSchema` instead. */
  export const outboundSchema = SearchKnowledge13$outboundSchema;
  /** @deprecated use `SearchKnowledge13$Outbound` instead. */
  export type Outbound = SearchKnowledge13$Outbound;
}

export function searchKnowledge13ToJSON(
  searchKnowledge13: SearchKnowledge13,
): string {
  return JSON.stringify(
    SearchKnowledge13$outboundSchema.parse(searchKnowledge13),
  );
}

export function searchKnowledge13FromJSON(
  jsonString: string,
): SafeParseResult<SearchKnowledge13, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => SearchKnowledge13$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SearchKnowledge13' from JSON`,
  );
}

/** @internal */
export const SearchKnowledge1KnowledgeDollarNe$inboundSchema: z.ZodType<
  SearchKnowledge1KnowledgeDollarNe,
  z.ZodTypeDef,
  unknown
> = z.union([z.string(), z.number(), z.boolean()]);

/** @internal */
export type SearchKnowledge1KnowledgeDollarNe$Outbound =
  | string
  | number
  | boolean;

/** @internal */
export const SearchKnowledge1KnowledgeDollarNe$outboundSchema: z.ZodType<
  SearchKnowledge1KnowledgeDollarNe$Outbound,
  z.ZodTypeDef,
  SearchKnowledge1KnowledgeDollarNe
> = z.union([z.string(), z.number(), z.boolean()]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SearchKnowledge1KnowledgeDollarNe$ {
  /** @deprecated use `SearchKnowledge1KnowledgeDollarNe$inboundSchema` instead. */
  export const inboundSchema = SearchKnowledge1KnowledgeDollarNe$inboundSchema;
  /** @deprecated use `SearchKnowledge1KnowledgeDollarNe$outboundSchema` instead. */
  export const outboundSchema =
    SearchKnowledge1KnowledgeDollarNe$outboundSchema;
  /** @deprecated use `SearchKnowledge1KnowledgeDollarNe$Outbound` instead. */
  export type Outbound = SearchKnowledge1KnowledgeDollarNe$Outbound;
}

export function searchKnowledge1KnowledgeDollarNeToJSON(
  searchKnowledge1KnowledgeDollarNe: SearchKnowledge1KnowledgeDollarNe,
): string {
  return JSON.stringify(
    SearchKnowledge1KnowledgeDollarNe$outboundSchema.parse(
      searchKnowledge1KnowledgeDollarNe,
    ),
  );
}

export function searchKnowledge1KnowledgeDollarNeFromJSON(
  jsonString: string,
): SafeParseResult<SearchKnowledge1KnowledgeDollarNe, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => SearchKnowledge1KnowledgeDollarNe$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SearchKnowledge1KnowledgeDollarNe' from JSON`,
  );
}

/** @internal */
export const SearchKnowledge1DollarNe$inboundSchema: z.ZodType<
  SearchKnowledge1DollarNe,
  z.ZodTypeDef,
  unknown
> = z.object({
  $ne: z.union([z.string(), z.number(), z.boolean()]),
}).transform((v) => {
  return remap$(v, {
    "$ne": "dollarNe",
  });
});

/** @internal */
export type SearchKnowledge1DollarNe$Outbound = {
  $ne: string | number | boolean;
};

/** @internal */
export const SearchKnowledge1DollarNe$outboundSchema: z.ZodType<
  SearchKnowledge1DollarNe$Outbound,
  z.ZodTypeDef,
  SearchKnowledge1DollarNe
> = z.object({
  dollarNe: z.union([z.string(), z.number(), z.boolean()]),
}).transform((v) => {
  return remap$(v, {
    dollarNe: "$ne",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SearchKnowledge1DollarNe$ {
  /** @deprecated use `SearchKnowledge1DollarNe$inboundSchema` instead. */
  export const inboundSchema = SearchKnowledge1DollarNe$inboundSchema;
  /** @deprecated use `SearchKnowledge1DollarNe$outboundSchema` instead. */
  export const outboundSchema = SearchKnowledge1DollarNe$outboundSchema;
  /** @deprecated use `SearchKnowledge1DollarNe$Outbound` instead. */
  export type Outbound = SearchKnowledge1DollarNe$Outbound;
}

export function searchKnowledge1DollarNeToJSON(
  searchKnowledge1DollarNe: SearchKnowledge1DollarNe,
): string {
  return JSON.stringify(
    SearchKnowledge1DollarNe$outboundSchema.parse(searchKnowledge1DollarNe),
  );
}

export function searchKnowledge1DollarNeFromJSON(
  jsonString: string,
): SafeParseResult<SearchKnowledge1DollarNe, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => SearchKnowledge1DollarNe$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SearchKnowledge1DollarNe' from JSON`,
  );
}

/** @internal */
export const SearchKnowledge1KnowledgeDollarEq$inboundSchema: z.ZodType<
  SearchKnowledge1KnowledgeDollarEq,
  z.ZodTypeDef,
  unknown
> = z.union([z.string(), z.number(), z.boolean()]);

/** @internal */
export type SearchKnowledge1KnowledgeDollarEq$Outbound =
  | string
  | number
  | boolean;

/** @internal */
export const SearchKnowledge1KnowledgeDollarEq$outboundSchema: z.ZodType<
  SearchKnowledge1KnowledgeDollarEq$Outbound,
  z.ZodTypeDef,
  SearchKnowledge1KnowledgeDollarEq
> = z.union([z.string(), z.number(), z.boolean()]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SearchKnowledge1KnowledgeDollarEq$ {
  /** @deprecated use `SearchKnowledge1KnowledgeDollarEq$inboundSchema` instead. */
  export const inboundSchema = SearchKnowledge1KnowledgeDollarEq$inboundSchema;
  /** @deprecated use `SearchKnowledge1KnowledgeDollarEq$outboundSchema` instead. */
  export const outboundSchema =
    SearchKnowledge1KnowledgeDollarEq$outboundSchema;
  /** @deprecated use `SearchKnowledge1KnowledgeDollarEq$Outbound` instead. */
  export type Outbound = SearchKnowledge1KnowledgeDollarEq$Outbound;
}

export function searchKnowledge1KnowledgeDollarEqToJSON(
  searchKnowledge1KnowledgeDollarEq: SearchKnowledge1KnowledgeDollarEq,
): string {
  return JSON.stringify(
    SearchKnowledge1KnowledgeDollarEq$outboundSchema.parse(
      searchKnowledge1KnowledgeDollarEq,
    ),
  );
}

export function searchKnowledge1KnowledgeDollarEqFromJSON(
  jsonString: string,
): SafeParseResult<SearchKnowledge1KnowledgeDollarEq, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => SearchKnowledge1KnowledgeDollarEq$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SearchKnowledge1KnowledgeDollarEq' from JSON`,
  );
}

/** @internal */
export const SearchKnowledge1DollarEq$inboundSchema: z.ZodType<
  SearchKnowledge1DollarEq,
  z.ZodTypeDef,
  unknown
> = z.object({
  $eq: z.union([z.string(), z.number(), z.boolean()]),
}).transform((v) => {
  return remap$(v, {
    "$eq": "dollarEq",
  });
});

/** @internal */
export type SearchKnowledge1DollarEq$Outbound = {
  $eq: string | number | boolean;
};

/** @internal */
export const SearchKnowledge1DollarEq$outboundSchema: z.ZodType<
  SearchKnowledge1DollarEq$Outbound,
  z.ZodTypeDef,
  SearchKnowledge1DollarEq
> = z.object({
  dollarEq: z.union([z.string(), z.number(), z.boolean()]),
}).transform((v) => {
  return remap$(v, {
    dollarEq: "$eq",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SearchKnowledge1DollarEq$ {
  /** @deprecated use `SearchKnowledge1DollarEq$inboundSchema` instead. */
  export const inboundSchema = SearchKnowledge1DollarEq$inboundSchema;
  /** @deprecated use `SearchKnowledge1DollarEq$outboundSchema` instead. */
  export const outboundSchema = SearchKnowledge1DollarEq$outboundSchema;
  /** @deprecated use `SearchKnowledge1DollarEq$Outbound` instead. */
  export type Outbound = SearchKnowledge1DollarEq$Outbound;
}

export function searchKnowledge1DollarEqToJSON(
  searchKnowledge1DollarEq: SearchKnowledge1DollarEq,
): string {
  return JSON.stringify(
    SearchKnowledge1DollarEq$outboundSchema.parse(searchKnowledge1DollarEq),
  );
}

export function searchKnowledge1DollarEqFromJSON(
  jsonString: string,
): SafeParseResult<SearchKnowledge1DollarEq, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => SearchKnowledge1DollarEq$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SearchKnowledge1DollarEq' from JSON`,
  );
}

/** @internal */
export const Filter1$inboundSchema: z.ZodType<Filter1, z.ZodTypeDef, unknown> =
  z.union([
    z.lazy(() => SearchKnowledge1DollarEq$inboundSchema),
    z.lazy(() => SearchKnowledge1DollarNe$inboundSchema),
    z.lazy(() => SearchKnowledge13$inboundSchema),
    z.lazy(() => SearchKnowledge1DollarGte$inboundSchema),
    z.lazy(() => SearchKnowledge1DollarLt$inboundSchema),
    z.lazy(() => SearchKnowledge1DollarLte$inboundSchema),
    z.lazy(() => SearchKnowledge1DollarIn$inboundSchema),
    z.lazy(() => SearchKnowledge1DollarNin$inboundSchema),
    z.lazy(() => SearchKnowledge1DollarExists$inboundSchema),
  ]);

/** @internal */
export type Filter1$Outbound =
  | SearchKnowledge1DollarEq$Outbound
  | SearchKnowledge1DollarNe$Outbound
  | SearchKnowledge13$Outbound
  | SearchKnowledge1DollarGte$Outbound
  | SearchKnowledge1DollarLt$Outbound
  | SearchKnowledge1DollarLte$Outbound
  | SearchKnowledge1DollarIn$Outbound
  | SearchKnowledge1DollarNin$Outbound
  | SearchKnowledge1DollarExists$Outbound;

/** @internal */
export const Filter1$outboundSchema: z.ZodType<
  Filter1$Outbound,
  z.ZodTypeDef,
  Filter1
> = z.union([
  z.lazy(() => SearchKnowledge1DollarEq$outboundSchema),
  z.lazy(() => SearchKnowledge1DollarNe$outboundSchema),
  z.lazy(() => SearchKnowledge13$outboundSchema),
  z.lazy(() => SearchKnowledge1DollarGte$outboundSchema),
  z.lazy(() => SearchKnowledge1DollarLt$outboundSchema),
  z.lazy(() => SearchKnowledge1DollarLte$outboundSchema),
  z.lazy(() => SearchKnowledge1DollarIn$outboundSchema),
  z.lazy(() => SearchKnowledge1DollarNin$outboundSchema),
  z.lazy(() => SearchKnowledge1DollarExists$outboundSchema),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Filter1$ {
  /** @deprecated use `Filter1$inboundSchema` instead. */
  export const inboundSchema = Filter1$inboundSchema;
  /** @deprecated use `Filter1$outboundSchema` instead. */
  export const outboundSchema = Filter1$outboundSchema;
  /** @deprecated use `Filter1$Outbound` instead. */
  export type Outbound = Filter1$Outbound;
}

export function filter1ToJSON(filter1: Filter1): string {
  return JSON.stringify(Filter1$outboundSchema.parse(filter1));
}

export function filter1FromJSON(
  jsonString: string,
): SafeParseResult<Filter1, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Filter1$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Filter1' from JSON`,
  );
}

/** @internal */
export const Filter$inboundSchema: z.ZodType<Filter, z.ZodTypeDef, unknown> = z
  .union([
    z.lazy(() => FilterDollarAnd$inboundSchema),
    z.lazy(() => FilterDollarOr$inboundSchema),
    z.record(z.union([
      z.lazy(() => SearchKnowledge1DollarEq$inboundSchema),
      z.lazy(() => SearchKnowledge1DollarNe$inboundSchema),
      z.lazy(() => SearchKnowledge13$inboundSchema),
      z.lazy(() => SearchKnowledge1DollarGte$inboundSchema),
      z.lazy(() => SearchKnowledge1DollarLt$inboundSchema),
      z.lazy(() => SearchKnowledge1DollarLte$inboundSchema),
      z.lazy(() => SearchKnowledge1DollarIn$inboundSchema),
      z.lazy(() => SearchKnowledge1DollarNin$inboundSchema),
      z.lazy(() => SearchKnowledge1DollarExists$inboundSchema),
    ])),
  ]);

/** @internal */
export type Filter$Outbound =
  | FilterDollarAnd$Outbound
  | FilterDollarOr$Outbound
  | {
    [k: string]:
      | SearchKnowledge1DollarEq$Outbound
      | SearchKnowledge1DollarNe$Outbound
      | SearchKnowledge13$Outbound
      | SearchKnowledge1DollarGte$Outbound
      | SearchKnowledge1DollarLt$Outbound
      | SearchKnowledge1DollarLte$Outbound
      | SearchKnowledge1DollarIn$Outbound
      | SearchKnowledge1DollarNin$Outbound
      | SearchKnowledge1DollarExists$Outbound;
  };

/** @internal */
export const Filter$outboundSchema: z.ZodType<
  Filter$Outbound,
  z.ZodTypeDef,
  Filter
> = z.union([
  z.lazy(() => FilterDollarAnd$outboundSchema),
  z.lazy(() => FilterDollarOr$outboundSchema),
  z.record(z.union([
    z.lazy(() => SearchKnowledge1DollarEq$outboundSchema),
    z.lazy(() => SearchKnowledge1DollarNe$outboundSchema),
    z.lazy(() => SearchKnowledge13$outboundSchema),
    z.lazy(() => SearchKnowledge1DollarGte$outboundSchema),
    z.lazy(() => SearchKnowledge1DollarLt$outboundSchema),
    z.lazy(() => SearchKnowledge1DollarLte$outboundSchema),
    z.lazy(() => SearchKnowledge1DollarIn$outboundSchema),
    z.lazy(() => SearchKnowledge1DollarNin$outboundSchema),
    z.lazy(() => SearchKnowledge1DollarExists$outboundSchema),
  ])),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Filter$ {
  /** @deprecated use `Filter$inboundSchema` instead. */
  export const inboundSchema = Filter$inboundSchema;
  /** @deprecated use `Filter$outboundSchema` instead. */
  export const outboundSchema = Filter$outboundSchema;
  /** @deprecated use `Filter$Outbound` instead. */
  export type Outbound = Filter$Outbound;
}

export function filterToJSON(filter: Filter): string {
  return JSON.stringify(Filter$outboundSchema.parse(filter));
}

export function filterFromJSON(
  jsonString: string,
): SafeParseResult<Filter, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Filter$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Filter' from JSON`,
  );
}

/** @internal */
export const SearchOptions$inboundSchema: z.ZodType<
  SearchOptions,
  z.ZodTypeDef,
  unknown
> = z.object({
  include_vectors: z.boolean().optional(),
  include_metadata: z.boolean().optional(),
  include_scores: z.boolean().optional(),
}).transform((v) => {
  return remap$(v, {
    "include_vectors": "includeVectors",
    "include_metadata": "includeMetadata",
    "include_scores": "includeScores",
  });
});

/** @internal */
export type SearchOptions$Outbound = {
  include_vectors?: boolean | undefined;
  include_metadata?: boolean | undefined;
  include_scores?: boolean | undefined;
};

/** @internal */
export const SearchOptions$outboundSchema: z.ZodType<
  SearchOptions$Outbound,
  z.ZodTypeDef,
  SearchOptions
> = z.object({
  includeVectors: z.boolean().optional(),
  includeMetadata: z.boolean().optional(),
  includeScores: z.boolean().optional(),
}).transform((v) => {
  return remap$(v, {
    includeVectors: "include_vectors",
    includeMetadata: "include_metadata",
    includeScores: "include_scores",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SearchOptions$ {
  /** @deprecated use `SearchOptions$inboundSchema` instead. */
  export const inboundSchema = SearchOptions$inboundSchema;
  /** @deprecated use `SearchOptions$outboundSchema` instead. */
  export const outboundSchema = SearchOptions$outboundSchema;
  /** @deprecated use `SearchOptions$Outbound` instead. */
  export type Outbound = SearchOptions$Outbound;
}

export function searchOptionsToJSON(searchOptions: SearchOptions): string {
  return JSON.stringify(SearchOptions$outboundSchema.parse(searchOptions));
}

export function searchOptionsFromJSON(
  jsonString: string,
): SafeParseResult<SearchOptions, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => SearchOptions$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SearchOptions' from JSON`,
  );
}

/** @internal */
export const SearchKnowledgeRequestBody$inboundSchema: z.ZodType<
  SearchKnowledgeRequestBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  query: z.string(),
  top_k: z.number().int().optional(),
  threshold: z.number().optional(),
  filter: z.union([
    z.lazy(() => FilterDollarAnd$inboundSchema),
    z.lazy(() => FilterDollarOr$inboundSchema),
    z.record(z.union([
      z.lazy(() => SearchKnowledge1DollarEq$inboundSchema),
      z.lazy(() => SearchKnowledge1DollarNe$inboundSchema),
      z.lazy(() => SearchKnowledge13$inboundSchema),
      z.lazy(() => SearchKnowledge1DollarGte$inboundSchema),
      z.lazy(() => SearchKnowledge1DollarLt$inboundSchema),
      z.lazy(() => SearchKnowledge1DollarLte$inboundSchema),
      z.lazy(() => SearchKnowledge1DollarIn$inboundSchema),
      z.lazy(() => SearchKnowledge1DollarNin$inboundSchema),
      z.lazy(() => SearchKnowledge1DollarExists$inboundSchema),
    ])),
  ]).optional(),
  search_options: z.lazy(() => SearchOptions$inboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    "top_k": "topK",
    "search_options": "searchOptions",
  });
});

/** @internal */
export type SearchKnowledgeRequestBody$Outbound = {
  query: string;
  top_k?: number | undefined;
  threshold?: number | undefined;
  filter?: FilterDollarAnd$Outbound | FilterDollarOr$Outbound | {
    [k: string]:
      | SearchKnowledge1DollarEq$Outbound
      | SearchKnowledge1DollarNe$Outbound
      | SearchKnowledge13$Outbound
      | SearchKnowledge1DollarGte$Outbound
      | SearchKnowledge1DollarLt$Outbound
      | SearchKnowledge1DollarLte$Outbound
      | SearchKnowledge1DollarIn$Outbound
      | SearchKnowledge1DollarNin$Outbound
      | SearchKnowledge1DollarExists$Outbound;
  } | undefined;
  search_options?: SearchOptions$Outbound | undefined;
};

/** @internal */
export const SearchKnowledgeRequestBody$outboundSchema: z.ZodType<
  SearchKnowledgeRequestBody$Outbound,
  z.ZodTypeDef,
  SearchKnowledgeRequestBody
> = z.object({
  query: z.string(),
  topK: z.number().int().optional(),
  threshold: z.number().optional(),
  filter: z.union([
    z.lazy(() => FilterDollarAnd$outboundSchema),
    z.lazy(() => FilterDollarOr$outboundSchema),
    z.record(z.union([
      z.lazy(() => SearchKnowledge1DollarEq$outboundSchema),
      z.lazy(() => SearchKnowledge1DollarNe$outboundSchema),
      z.lazy(() => SearchKnowledge13$outboundSchema),
      z.lazy(() => SearchKnowledge1DollarGte$outboundSchema),
      z.lazy(() => SearchKnowledge1DollarLt$outboundSchema),
      z.lazy(() => SearchKnowledge1DollarLte$outboundSchema),
      z.lazy(() => SearchKnowledge1DollarIn$outboundSchema),
      z.lazy(() => SearchKnowledge1DollarNin$outboundSchema),
      z.lazy(() => SearchKnowledge1DollarExists$outboundSchema),
    ])),
  ]).optional(),
  searchOptions: z.lazy(() => SearchOptions$outboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    topK: "top_k",
    searchOptions: "search_options",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SearchKnowledgeRequestBody$ {
  /** @deprecated use `SearchKnowledgeRequestBody$inboundSchema` instead. */
  export const inboundSchema = SearchKnowledgeRequestBody$inboundSchema;
  /** @deprecated use `SearchKnowledgeRequestBody$outboundSchema` instead. */
  export const outboundSchema = SearchKnowledgeRequestBody$outboundSchema;
  /** @deprecated use `SearchKnowledgeRequestBody$Outbound` instead. */
  export type Outbound = SearchKnowledgeRequestBody$Outbound;
}

export function searchKnowledgeRequestBodyToJSON(
  searchKnowledgeRequestBody: SearchKnowledgeRequestBody,
): string {
  return JSON.stringify(
    SearchKnowledgeRequestBody$outboundSchema.parse(searchKnowledgeRequestBody),
  );
}

export function searchKnowledgeRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<SearchKnowledgeRequestBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => SearchKnowledgeRequestBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SearchKnowledgeRequestBody' from JSON`,
  );
}

/** @internal */
export const SearchKnowledgeRequest$inboundSchema: z.ZodType<
  SearchKnowledgeRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  knowledge_id: z.string(),
  RequestBody: z.lazy(() => SearchKnowledgeRequestBody$inboundSchema)
    .optional(),
}).transform((v) => {
  return remap$(v, {
    "knowledge_id": "knowledgeId",
    "RequestBody": "requestBody",
  });
});

/** @internal */
export type SearchKnowledgeRequest$Outbound = {
  knowledge_id: string;
  RequestBody?: SearchKnowledgeRequestBody$Outbound | undefined;
};

/** @internal */
export const SearchKnowledgeRequest$outboundSchema: z.ZodType<
  SearchKnowledgeRequest$Outbound,
  z.ZodTypeDef,
  SearchKnowledgeRequest
> = z.object({
  knowledgeId: z.string(),
  requestBody: z.lazy(() => SearchKnowledgeRequestBody$outboundSchema)
    .optional(),
}).transform((v) => {
  return remap$(v, {
    knowledgeId: "knowledge_id",
    requestBody: "RequestBody",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SearchKnowledgeRequest$ {
  /** @deprecated use `SearchKnowledgeRequest$inboundSchema` instead. */
  export const inboundSchema = SearchKnowledgeRequest$inboundSchema;
  /** @deprecated use `SearchKnowledgeRequest$outboundSchema` instead. */
  export const outboundSchema = SearchKnowledgeRequest$outboundSchema;
  /** @deprecated use `SearchKnowledgeRequest$Outbound` instead. */
  export type Outbound = SearchKnowledgeRequest$Outbound;
}

export function searchKnowledgeRequestToJSON(
  searchKnowledgeRequest: SearchKnowledgeRequest,
): string {
  return JSON.stringify(
    SearchKnowledgeRequest$outboundSchema.parse(searchKnowledgeRequest),
  );
}

export function searchKnowledgeRequestFromJSON(
  jsonString: string,
): SafeParseResult<SearchKnowledgeRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => SearchKnowledgeRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SearchKnowledgeRequest' from JSON`,
  );
}

/** @internal */
export const Scores$inboundSchema: z.ZodType<Scores, z.ZodTypeDef, unknown> = z
  .object({
    rerank_score: z.number().optional(),
    search_score: z.number().optional(),
  }).transform((v) => {
    return remap$(v, {
      "rerank_score": "rerankScore",
      "search_score": "searchScore",
    });
  });

/** @internal */
export type Scores$Outbound = {
  rerank_score?: number | undefined;
  search_score?: number | undefined;
};

/** @internal */
export const Scores$outboundSchema: z.ZodType<
  Scores$Outbound,
  z.ZodTypeDef,
  Scores
> = z.object({
  rerankScore: z.number().optional(),
  searchScore: z.number().optional(),
}).transform((v) => {
  return remap$(v, {
    rerankScore: "rerank_score",
    searchScore: "search_score",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Scores$ {
  /** @deprecated use `Scores$inboundSchema` instead. */
  export const inboundSchema = Scores$inboundSchema;
  /** @deprecated use `Scores$outboundSchema` instead. */
  export const outboundSchema = Scores$outboundSchema;
  /** @deprecated use `Scores$Outbound` instead. */
  export type Outbound = Scores$Outbound;
}

export function scoresToJSON(scores: Scores): string {
  return JSON.stringify(Scores$outboundSchema.parse(scores));
}

export function scoresFromJSON(
  jsonString: string,
): SafeParseResult<Scores, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Scores$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Scores' from JSON`,
  );
}

/** @internal */
export const Matches$inboundSchema: z.ZodType<Matches, z.ZodTypeDef, unknown> =
  z.object({
    id: z.string(),
    text: z.string(),
    vector: z.array(z.number()).optional(),
    metadata: z.record(z.any()).optional(),
    scores: z.lazy(() => Scores$inboundSchema).optional(),
  });

/** @internal */
export type Matches$Outbound = {
  id: string;
  text: string;
  vector?: Array<number> | undefined;
  metadata?: { [k: string]: any } | undefined;
  scores?: Scores$Outbound | undefined;
};

/** @internal */
export const Matches$outboundSchema: z.ZodType<
  Matches$Outbound,
  z.ZodTypeDef,
  Matches
> = z.object({
  id: z.string(),
  text: z.string(),
  vector: z.array(z.number()).optional(),
  metadata: z.record(z.any()).optional(),
  scores: z.lazy(() => Scores$outboundSchema).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Matches$ {
  /** @deprecated use `Matches$inboundSchema` instead. */
  export const inboundSchema = Matches$inboundSchema;
  /** @deprecated use `Matches$outboundSchema` instead. */
  export const outboundSchema = Matches$outboundSchema;
  /** @deprecated use `Matches$Outbound` instead. */
  export type Outbound = Matches$Outbound;
}

export function matchesToJSON(matches: Matches): string {
  return JSON.stringify(Matches$outboundSchema.parse(matches));
}

export function matchesFromJSON(
  jsonString: string,
): SafeParseResult<Matches, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Matches$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Matches' from JSON`,
  );
}

/** @internal */
export const SearchKnowledgeResponseBody$inboundSchema: z.ZodType<
  SearchKnowledgeResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  matches: z.array(z.lazy(() => Matches$inboundSchema)),
});

/** @internal */
export type SearchKnowledgeResponseBody$Outbound = {
  matches: Array<Matches$Outbound>;
};

/** @internal */
export const SearchKnowledgeResponseBody$outboundSchema: z.ZodType<
  SearchKnowledgeResponseBody$Outbound,
  z.ZodTypeDef,
  SearchKnowledgeResponseBody
> = z.object({
  matches: z.array(z.lazy(() => Matches$outboundSchema)),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SearchKnowledgeResponseBody$ {
  /** @deprecated use `SearchKnowledgeResponseBody$inboundSchema` instead. */
  export const inboundSchema = SearchKnowledgeResponseBody$inboundSchema;
  /** @deprecated use `SearchKnowledgeResponseBody$outboundSchema` instead. */
  export const outboundSchema = SearchKnowledgeResponseBody$outboundSchema;
  /** @deprecated use `SearchKnowledgeResponseBody$Outbound` instead. */
  export type Outbound = SearchKnowledgeResponseBody$Outbound;
}

export function searchKnowledgeResponseBodyToJSON(
  searchKnowledgeResponseBody: SearchKnowledgeResponseBody,
): string {
  return JSON.stringify(
    SearchKnowledgeResponseBody$outboundSchema.parse(
      searchKnowledgeResponseBody,
    ),
  );
}

export function searchKnowledgeResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<SearchKnowledgeResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => SearchKnowledgeResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SearchKnowledgeResponseBody' from JSON`,
  );
}
