/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * Input (or inputs) to classify. Can be a single string, an array of strings, or an array of multi-modal input objects similar to other models.
 */
export type Input = string | Array<string>;

/**
 * Classifies if text violates content policy
 */
export type PostV2ProxyModerationsRequestBody = {
  /**
   * Input (or inputs) to classify. Can be a single string, an array of strings, or an array of multi-modal input objects similar to other models.
   */
  input: string | Array<string>;
  /**
   * The content moderation model you would like to use. Defaults to omni-moderation-latest
   */
  model?: string | undefined;
};

/**
 * A list of the categories, and whether they are flagged or not
 */
export type Categories = {
  /**
   * Content that expresses, incites, or promotes hate based on race, gender, ethnicity, religion, nationality, sexual orientation, disability status, or caste.
   */
  hate: boolean;
  /**
   * Hateful content that also includes violence or serious harm towards the targeted group.
   */
  hateThreatening: boolean;
  /**
   * Content that expresses, incites, or promotes harassing language towards any target.
   */
  harassment: boolean;
  /**
   * Harassment content that also includes violence or serious harm towards any target.
   */
  harassmentThreatening: boolean;
  /**
   * Content that includes instructions or advice that facilitate the planning or execution of wrongdoing.
   */
  illicit: boolean;
  /**
   * Content that includes instructions or advice that facilitate the planning or execution of wrongdoing that also includes violence.
   */
  illicitViolent: boolean;
  /**
   * Content that promotes, encourages, or depicts acts of self-harm, such as suicide, cutting, and eating disorders.
   */
  selfHarm: boolean;
  /**
   * Content where the speaker expresses that they are engaging or intend to engage in acts of self-harm.
   */
  selfHarmIntent: boolean;
  /**
   * Content that encourages performing acts of self-harm, or that gives instructions or advice on how to commit such acts.
   */
  selfHarmInstructions: boolean;
  /**
   * Content meant to arouse sexual excitement, such as the description of sexual activity, or that promotes sexual services.
   */
  sexual: boolean;
  /**
   * Sexual content that includes an individual who is under 18 years old.
   */
  sexualMinors: boolean;
  /**
   * Content that depicts death, violence, or physical injury.
   */
  violence: boolean;
  /**
   * Content that depicts death, violence, or physical injury in graphic detail.
   */
  violenceGraphic: boolean;
};

/**
 * A list of the categories along with their scores as predicted by model
 */
export type CategoryScores = {
  /**
   * The score for the category hate
   */
  hate: number;
  /**
   * The score for the category hate/threatening
   */
  hateThreatening: number;
  /**
   * The score for the category harassment
   */
  harassment: number;
  /**
   * The score for the category harassment/threatening
   */
  harassmentThreatening: number;
  /**
   * The score for the category illicit
   */
  illicit: number;
  /**
   * The score for the category illicit/violent
   */
  illicitViolent: number;
  /**
   * The score for the category self-harm
   */
  selfHarm: number;
  /**
   * The score for the category self-harm/intent
   */
  selfHarmIntent: number;
  /**
   * The score for the category self-harm/instructions
   */
  selfHarmInstructions: number;
  /**
   * The score for the category sexual
   */
  sexual: number;
  /**
   * The score for the category sexual/minors
   */
  sexualMinors: number;
  /**
   * The score for the category violence
   */
  violence: number;
  /**
   * The score for the category violence/graphic
   */
  violenceGraphic: number;
};

/**
 * A list of the categories along with the input type(s) that the score applies to
 */
export type CategoryAppliedInputTypes = {
  /**
   * The applied input type(s) for the category hate
   */
  hate: Array<string>;
  /**
   * The applied input type(s) for the category hate/threatening
   */
  hateThreatening: Array<string>;
  /**
   * The applied input type(s) for the category harassment
   */
  harassment: Array<string>;
  /**
   * The applied input type(s) for the category harassment/threatening
   */
  harassmentThreatening: Array<string>;
  /**
   * The applied input type(s) for the category illicit
   */
  illicit: Array<string>;
  /**
   * The applied input type(s) for the category illicit/violent
   */
  illicitViolent: Array<string>;
  /**
   * The applied input type(s) for the category self-harm
   */
  selfHarm: Array<string>;
  /**
   * The applied input type(s) for the category self-harm/intent
   */
  selfHarmIntent: Array<string>;
  /**
   * The applied input type(s) for the category self-harm/instructions
   */
  selfHarmInstructions: Array<string>;
  /**
   * The applied input type(s) for the category sexual
   */
  sexual: Array<string>;
  /**
   * The applied input type(s) for the category sexual/minors
   */
  sexualMinors: Array<string>;
  /**
   * The applied input type(s) for the category violence
   */
  violence: Array<string>;
  /**
   * The applied input type(s) for the category violence/graphic
   */
  violenceGraphic: Array<string>;
};

export type Results = {
  /**
   * Whether any of the categories are flagged
   */
  flagged: boolean;
  /**
   * A list of the categories, and whether they are flagged or not
   */
  categories: Categories;
  /**
   * A list of the categories along with their scores as predicted by model
   */
  categoryScores: CategoryScores;
  /**
   * A list of the categories along with the input type(s) that the score applies to
   */
  categoryAppliedInputTypes?: CategoryAppliedInputTypes | undefined;
};

/**
 * Returns moderation classification results
 */
export type PostV2ProxyModerationsResponseBody = {
  /**
   * The unique identifier for the moderation request
   */
  id: string;
  /**
   * The model used to generate the moderation results
   */
  model: string;
  /**
   * A list of moderation objects
   */
  results: Array<Results>;
};

/** @internal */
export const Input$inboundSchema: z.ZodType<Input, z.ZodTypeDef, unknown> = z
  .union([z.string(), z.array(z.string())]);

/** @internal */
export type Input$Outbound = string | Array<string>;

/** @internal */
export const Input$outboundSchema: z.ZodType<
  Input$Outbound,
  z.ZodTypeDef,
  Input
> = z.union([z.string(), z.array(z.string())]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Input$ {
  /** @deprecated use `Input$inboundSchema` instead. */
  export const inboundSchema = Input$inboundSchema;
  /** @deprecated use `Input$outboundSchema` instead. */
  export const outboundSchema = Input$outboundSchema;
  /** @deprecated use `Input$Outbound` instead. */
  export type Outbound = Input$Outbound;
}

export function inputToJSON(input: Input): string {
  return JSON.stringify(Input$outboundSchema.parse(input));
}

export function inputFromJSON(
  jsonString: string,
): SafeParseResult<Input, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Input$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Input' from JSON`,
  );
}

/** @internal */
export const PostV2ProxyModerationsRequestBody$inboundSchema: z.ZodType<
  PostV2ProxyModerationsRequestBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  input: z.union([z.string(), z.array(z.string())]),
  model: z.string().optional(),
});

/** @internal */
export type PostV2ProxyModerationsRequestBody$Outbound = {
  input: string | Array<string>;
  model?: string | undefined;
};

/** @internal */
export const PostV2ProxyModerationsRequestBody$outboundSchema: z.ZodType<
  PostV2ProxyModerationsRequestBody$Outbound,
  z.ZodTypeDef,
  PostV2ProxyModerationsRequestBody
> = z.object({
  input: z.union([z.string(), z.array(z.string())]),
  model: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostV2ProxyModerationsRequestBody$ {
  /** @deprecated use `PostV2ProxyModerationsRequestBody$inboundSchema` instead. */
  export const inboundSchema = PostV2ProxyModerationsRequestBody$inboundSchema;
  /** @deprecated use `PostV2ProxyModerationsRequestBody$outboundSchema` instead. */
  export const outboundSchema =
    PostV2ProxyModerationsRequestBody$outboundSchema;
  /** @deprecated use `PostV2ProxyModerationsRequestBody$Outbound` instead. */
  export type Outbound = PostV2ProxyModerationsRequestBody$Outbound;
}

export function postV2ProxyModerationsRequestBodyToJSON(
  postV2ProxyModerationsRequestBody: PostV2ProxyModerationsRequestBody,
): string {
  return JSON.stringify(
    PostV2ProxyModerationsRequestBody$outboundSchema.parse(
      postV2ProxyModerationsRequestBody,
    ),
  );
}

export function postV2ProxyModerationsRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<PostV2ProxyModerationsRequestBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PostV2ProxyModerationsRequestBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PostV2ProxyModerationsRequestBody' from JSON`,
  );
}

/** @internal */
export const Categories$inboundSchema: z.ZodType<
  Categories,
  z.ZodTypeDef,
  unknown
> = z.object({
  hate: z.boolean(),
  "hate/threatening": z.boolean(),
  harassment: z.boolean(),
  "harassment/threatening": z.boolean(),
  illicit: z.boolean(),
  "illicit/violent": z.boolean(),
  "self-harm": z.boolean(),
  "self-harm/intent": z.boolean(),
  "self-harm/instructions": z.boolean(),
  sexual: z.boolean(),
  "sexual/minors": z.boolean(),
  violence: z.boolean(),
  "violence/graphic": z.boolean(),
}).transform((v) => {
  return remap$(v, {
    "hate/threatening": "hateThreatening",
    "harassment/threatening": "harassmentThreatening",
    "illicit/violent": "illicitViolent",
    "self-harm": "selfHarm",
    "self-harm/intent": "selfHarmIntent",
    "self-harm/instructions": "selfHarmInstructions",
    "sexual/minors": "sexualMinors",
    "violence/graphic": "violenceGraphic",
  });
});

/** @internal */
export type Categories$Outbound = {
  hate: boolean;
  "hate/threatening": boolean;
  harassment: boolean;
  "harassment/threatening": boolean;
  illicit: boolean;
  "illicit/violent": boolean;
  "self-harm": boolean;
  "self-harm/intent": boolean;
  "self-harm/instructions": boolean;
  sexual: boolean;
  "sexual/minors": boolean;
  violence: boolean;
  "violence/graphic": boolean;
};

/** @internal */
export const Categories$outboundSchema: z.ZodType<
  Categories$Outbound,
  z.ZodTypeDef,
  Categories
> = z.object({
  hate: z.boolean(),
  hateThreatening: z.boolean(),
  harassment: z.boolean(),
  harassmentThreatening: z.boolean(),
  illicit: z.boolean(),
  illicitViolent: z.boolean(),
  selfHarm: z.boolean(),
  selfHarmIntent: z.boolean(),
  selfHarmInstructions: z.boolean(),
  sexual: z.boolean(),
  sexualMinors: z.boolean(),
  violence: z.boolean(),
  violenceGraphic: z.boolean(),
}).transform((v) => {
  return remap$(v, {
    hateThreatening: "hate/threatening",
    harassmentThreatening: "harassment/threatening",
    illicitViolent: "illicit/violent",
    selfHarm: "self-harm",
    selfHarmIntent: "self-harm/intent",
    selfHarmInstructions: "self-harm/instructions",
    sexualMinors: "sexual/minors",
    violenceGraphic: "violence/graphic",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Categories$ {
  /** @deprecated use `Categories$inboundSchema` instead. */
  export const inboundSchema = Categories$inboundSchema;
  /** @deprecated use `Categories$outboundSchema` instead. */
  export const outboundSchema = Categories$outboundSchema;
  /** @deprecated use `Categories$Outbound` instead. */
  export type Outbound = Categories$Outbound;
}

export function categoriesToJSON(categories: Categories): string {
  return JSON.stringify(Categories$outboundSchema.parse(categories));
}

export function categoriesFromJSON(
  jsonString: string,
): SafeParseResult<Categories, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Categories$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Categories' from JSON`,
  );
}

/** @internal */
export const CategoryScores$inboundSchema: z.ZodType<
  CategoryScores,
  z.ZodTypeDef,
  unknown
> = z.object({
  hate: z.number(),
  "hate/threatening": z.number(),
  harassment: z.number(),
  "harassment/threatening": z.number(),
  illicit: z.number(),
  "illicit/violent": z.number(),
  "self-harm": z.number(),
  "self-harm/intent": z.number(),
  "self-harm/instructions": z.number(),
  sexual: z.number(),
  "sexual/minors": z.number(),
  violence: z.number(),
  "violence/graphic": z.number(),
}).transform((v) => {
  return remap$(v, {
    "hate/threatening": "hateThreatening",
    "harassment/threatening": "harassmentThreatening",
    "illicit/violent": "illicitViolent",
    "self-harm": "selfHarm",
    "self-harm/intent": "selfHarmIntent",
    "self-harm/instructions": "selfHarmInstructions",
    "sexual/minors": "sexualMinors",
    "violence/graphic": "violenceGraphic",
  });
});

/** @internal */
export type CategoryScores$Outbound = {
  hate: number;
  "hate/threatening": number;
  harassment: number;
  "harassment/threatening": number;
  illicit: number;
  "illicit/violent": number;
  "self-harm": number;
  "self-harm/intent": number;
  "self-harm/instructions": number;
  sexual: number;
  "sexual/minors": number;
  violence: number;
  "violence/graphic": number;
};

/** @internal */
export const CategoryScores$outboundSchema: z.ZodType<
  CategoryScores$Outbound,
  z.ZodTypeDef,
  CategoryScores
> = z.object({
  hate: z.number(),
  hateThreatening: z.number(),
  harassment: z.number(),
  harassmentThreatening: z.number(),
  illicit: z.number(),
  illicitViolent: z.number(),
  selfHarm: z.number(),
  selfHarmIntent: z.number(),
  selfHarmInstructions: z.number(),
  sexual: z.number(),
  sexualMinors: z.number(),
  violence: z.number(),
  violenceGraphic: z.number(),
}).transform((v) => {
  return remap$(v, {
    hateThreatening: "hate/threatening",
    harassmentThreatening: "harassment/threatening",
    illicitViolent: "illicit/violent",
    selfHarm: "self-harm",
    selfHarmIntent: "self-harm/intent",
    selfHarmInstructions: "self-harm/instructions",
    sexualMinors: "sexual/minors",
    violenceGraphic: "violence/graphic",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CategoryScores$ {
  /** @deprecated use `CategoryScores$inboundSchema` instead. */
  export const inboundSchema = CategoryScores$inboundSchema;
  /** @deprecated use `CategoryScores$outboundSchema` instead. */
  export const outboundSchema = CategoryScores$outboundSchema;
  /** @deprecated use `CategoryScores$Outbound` instead. */
  export type Outbound = CategoryScores$Outbound;
}

export function categoryScoresToJSON(categoryScores: CategoryScores): string {
  return JSON.stringify(CategoryScores$outboundSchema.parse(categoryScores));
}

export function categoryScoresFromJSON(
  jsonString: string,
): SafeParseResult<CategoryScores, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CategoryScores$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CategoryScores' from JSON`,
  );
}

/** @internal */
export const CategoryAppliedInputTypes$inboundSchema: z.ZodType<
  CategoryAppliedInputTypes,
  z.ZodTypeDef,
  unknown
> = z.object({
  hate: z.array(z.string()),
  "hate/threatening": z.array(z.string()),
  harassment: z.array(z.string()),
  "harassment/threatening": z.array(z.string()),
  illicit: z.array(z.string()),
  "illicit/violent": z.array(z.string()),
  "self-harm": z.array(z.string()),
  "self-harm/intent": z.array(z.string()),
  "self-harm/instructions": z.array(z.string()),
  sexual: z.array(z.string()),
  "sexual/minors": z.array(z.string()),
  violence: z.array(z.string()),
  "violence/graphic": z.array(z.string()),
}).transform((v) => {
  return remap$(v, {
    "hate/threatening": "hateThreatening",
    "harassment/threatening": "harassmentThreatening",
    "illicit/violent": "illicitViolent",
    "self-harm": "selfHarm",
    "self-harm/intent": "selfHarmIntent",
    "self-harm/instructions": "selfHarmInstructions",
    "sexual/minors": "sexualMinors",
    "violence/graphic": "violenceGraphic",
  });
});

/** @internal */
export type CategoryAppliedInputTypes$Outbound = {
  hate: Array<string>;
  "hate/threatening": Array<string>;
  harassment: Array<string>;
  "harassment/threatening": Array<string>;
  illicit: Array<string>;
  "illicit/violent": Array<string>;
  "self-harm": Array<string>;
  "self-harm/intent": Array<string>;
  "self-harm/instructions": Array<string>;
  sexual: Array<string>;
  "sexual/minors": Array<string>;
  violence: Array<string>;
  "violence/graphic": Array<string>;
};

/** @internal */
export const CategoryAppliedInputTypes$outboundSchema: z.ZodType<
  CategoryAppliedInputTypes$Outbound,
  z.ZodTypeDef,
  CategoryAppliedInputTypes
> = z.object({
  hate: z.array(z.string()),
  hateThreatening: z.array(z.string()),
  harassment: z.array(z.string()),
  harassmentThreatening: z.array(z.string()),
  illicit: z.array(z.string()),
  illicitViolent: z.array(z.string()),
  selfHarm: z.array(z.string()),
  selfHarmIntent: z.array(z.string()),
  selfHarmInstructions: z.array(z.string()),
  sexual: z.array(z.string()),
  sexualMinors: z.array(z.string()),
  violence: z.array(z.string()),
  violenceGraphic: z.array(z.string()),
}).transform((v) => {
  return remap$(v, {
    hateThreatening: "hate/threatening",
    harassmentThreatening: "harassment/threatening",
    illicitViolent: "illicit/violent",
    selfHarm: "self-harm",
    selfHarmIntent: "self-harm/intent",
    selfHarmInstructions: "self-harm/instructions",
    sexualMinors: "sexual/minors",
    violenceGraphic: "violence/graphic",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CategoryAppliedInputTypes$ {
  /** @deprecated use `CategoryAppliedInputTypes$inboundSchema` instead. */
  export const inboundSchema = CategoryAppliedInputTypes$inboundSchema;
  /** @deprecated use `CategoryAppliedInputTypes$outboundSchema` instead. */
  export const outboundSchema = CategoryAppliedInputTypes$outboundSchema;
  /** @deprecated use `CategoryAppliedInputTypes$Outbound` instead. */
  export type Outbound = CategoryAppliedInputTypes$Outbound;
}

export function categoryAppliedInputTypesToJSON(
  categoryAppliedInputTypes: CategoryAppliedInputTypes,
): string {
  return JSON.stringify(
    CategoryAppliedInputTypes$outboundSchema.parse(categoryAppliedInputTypes),
  );
}

export function categoryAppliedInputTypesFromJSON(
  jsonString: string,
): SafeParseResult<CategoryAppliedInputTypes, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CategoryAppliedInputTypes$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CategoryAppliedInputTypes' from JSON`,
  );
}

/** @internal */
export const Results$inboundSchema: z.ZodType<Results, z.ZodTypeDef, unknown> =
  z.object({
    flagged: z.boolean(),
    categories: z.lazy(() => Categories$inboundSchema),
    category_scores: z.lazy(() => CategoryScores$inboundSchema),
    category_applied_input_types: z.lazy(() =>
      CategoryAppliedInputTypes$inboundSchema
    ).optional(),
  }).transform((v) => {
    return remap$(v, {
      "category_scores": "categoryScores",
      "category_applied_input_types": "categoryAppliedInputTypes",
    });
  });

/** @internal */
export type Results$Outbound = {
  flagged: boolean;
  categories: Categories$Outbound;
  category_scores: CategoryScores$Outbound;
  category_applied_input_types?: CategoryAppliedInputTypes$Outbound | undefined;
};

/** @internal */
export const Results$outboundSchema: z.ZodType<
  Results$Outbound,
  z.ZodTypeDef,
  Results
> = z.object({
  flagged: z.boolean(),
  categories: z.lazy(() => Categories$outboundSchema),
  categoryScores: z.lazy(() => CategoryScores$outboundSchema),
  categoryAppliedInputTypes: z.lazy(() =>
    CategoryAppliedInputTypes$outboundSchema
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    categoryScores: "category_scores",
    categoryAppliedInputTypes: "category_applied_input_types",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Results$ {
  /** @deprecated use `Results$inboundSchema` instead. */
  export const inboundSchema = Results$inboundSchema;
  /** @deprecated use `Results$outboundSchema` instead. */
  export const outboundSchema = Results$outboundSchema;
  /** @deprecated use `Results$Outbound` instead. */
  export type Outbound = Results$Outbound;
}

export function resultsToJSON(results: Results): string {
  return JSON.stringify(Results$outboundSchema.parse(results));
}

export function resultsFromJSON(
  jsonString: string,
): SafeParseResult<Results, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Results$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Results' from JSON`,
  );
}

/** @internal */
export const PostV2ProxyModerationsResponseBody$inboundSchema: z.ZodType<
  PostV2ProxyModerationsResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  model: z.string(),
  results: z.array(z.lazy(() => Results$inboundSchema)),
});

/** @internal */
export type PostV2ProxyModerationsResponseBody$Outbound = {
  id: string;
  model: string;
  results: Array<Results$Outbound>;
};

/** @internal */
export const PostV2ProxyModerationsResponseBody$outboundSchema: z.ZodType<
  PostV2ProxyModerationsResponseBody$Outbound,
  z.ZodTypeDef,
  PostV2ProxyModerationsResponseBody
> = z.object({
  id: z.string(),
  model: z.string(),
  results: z.array(z.lazy(() => Results$outboundSchema)),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostV2ProxyModerationsResponseBody$ {
  /** @deprecated use `PostV2ProxyModerationsResponseBody$inboundSchema` instead. */
  export const inboundSchema = PostV2ProxyModerationsResponseBody$inboundSchema;
  /** @deprecated use `PostV2ProxyModerationsResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    PostV2ProxyModerationsResponseBody$outboundSchema;
  /** @deprecated use `PostV2ProxyModerationsResponseBody$Outbound` instead. */
  export type Outbound = PostV2ProxyModerationsResponseBody$Outbound;
}

export function postV2ProxyModerationsResponseBodyToJSON(
  postV2ProxyModerationsResponseBody: PostV2ProxyModerationsResponseBody,
): string {
  return JSON.stringify(
    PostV2ProxyModerationsResponseBody$outboundSchema.parse(
      postV2ProxyModerationsResponseBody,
    ),
  );
}

export function postV2ProxyModerationsResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<PostV2ProxyModerationsResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      PostV2ProxyModerationsResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PostV2ProxyModerationsResponseBody' from JSON`,
  );
}
