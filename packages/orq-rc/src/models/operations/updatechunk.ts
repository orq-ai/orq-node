/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * The status of the chunk
 */
export const UpdateChunkStatus = {
  Pending: "pending",
  Processing: "processing",
  Completed: "completed",
  Failed: "failed",
  Queued: "queued",
} as const;
/**
 * The status of the chunk
 */
export type UpdateChunkStatus = ClosedEnum<typeof UpdateChunkStatus>;

/** @internal */
export const UpdateChunkStatus$inboundSchema: z.ZodNativeEnum<
  typeof UpdateChunkStatus
> = z.nativeEnum(UpdateChunkStatus);

/** @internal */
export const UpdateChunkStatus$outboundSchema: z.ZodNativeEnum<
  typeof UpdateChunkStatus
> = UpdateChunkStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateChunkStatus$ {
  /** @deprecated use `UpdateChunkStatus$inboundSchema` instead. */
  export const inboundSchema = UpdateChunkStatus$inboundSchema;
  /** @deprecated use `UpdateChunkStatus$outboundSchema` instead. */
  export const outboundSchema = UpdateChunkStatus$outboundSchema;
}

export type UpdateChunkMetadata = string | number | boolean;

export type UpdateChunkRequestBody = {
  /**
   * The text content of the chunk
   */
  text?: string | undefined;
  /**
   * The embedding vector of the chunk. If not provided the chunk will be embedded with the knowledge base embeddings model.
   */
  embedding?: Array<number> | undefined;
  /**
   * Metadata of the chunk
   */
  metadata?: { [k: string]: string | number | boolean } | undefined;
};

export type UpdateChunkRequest = {
  /**
   * The unique identifier of the chunk
   */
  chunkId: string;
  /**
   * The unique identifier of the data source
   */
  datasourceId: string;
  /**
   * The unique identifier of the knowledge base
   */
  knowledgeId: string;
  requestBody?: UpdateChunkRequestBody | undefined;
};

export type UpdateChunkKnowledgeMetadata = string | number | boolean;

/**
 * Chunk successfully updated
 */
export type UpdateChunkResponseBody = {
  /**
   * The unique identifier of the chunk
   */
  id: string;
  /**
   * The text content of the chunk
   */
  text: string;
  /**
   * Metadata of the chunk. Can include `page_number` or any other key-value pairs
   */
  metadata?: { [k: string]: string | number | boolean } | undefined;
  /**
   * Whether the chunk is enabled
   */
  enabled: boolean;
  /**
   * The status of the chunk
   */
  status: UpdateChunkStatus;
  /**
   * The date and time the chunk was created
   */
  created: string;
  /**
   * The date and time the chunk was updated
   */
  updated: string;
  /**
   * The unique identifier of the user who created the chunk
   */
  createdById?: string | null | undefined;
  /**
   * The unique identifier of the user who updated the chunk
   */
  updateById?: string | null | undefined;
};

/** @internal */
export const UpdateChunkMetadata$inboundSchema: z.ZodType<
  UpdateChunkMetadata,
  z.ZodTypeDef,
  unknown
> = z.union([z.string(), z.number(), z.boolean()]);

/** @internal */
export type UpdateChunkMetadata$Outbound = string | number | boolean;

/** @internal */
export const UpdateChunkMetadata$outboundSchema: z.ZodType<
  UpdateChunkMetadata$Outbound,
  z.ZodTypeDef,
  UpdateChunkMetadata
> = z.union([z.string(), z.number(), z.boolean()]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateChunkMetadata$ {
  /** @deprecated use `UpdateChunkMetadata$inboundSchema` instead. */
  export const inboundSchema = UpdateChunkMetadata$inboundSchema;
  /** @deprecated use `UpdateChunkMetadata$outboundSchema` instead. */
  export const outboundSchema = UpdateChunkMetadata$outboundSchema;
  /** @deprecated use `UpdateChunkMetadata$Outbound` instead. */
  export type Outbound = UpdateChunkMetadata$Outbound;
}

export function updateChunkMetadataToJSON(
  updateChunkMetadata: UpdateChunkMetadata,
): string {
  return JSON.stringify(
    UpdateChunkMetadata$outboundSchema.parse(updateChunkMetadata),
  );
}

export function updateChunkMetadataFromJSON(
  jsonString: string,
): SafeParseResult<UpdateChunkMetadata, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateChunkMetadata$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateChunkMetadata' from JSON`,
  );
}

/** @internal */
export const UpdateChunkRequestBody$inboundSchema: z.ZodType<
  UpdateChunkRequestBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  text: z.string().optional(),
  embedding: z.array(z.number()).optional(),
  metadata: z.record(z.union([z.string(), z.number(), z.boolean()])).optional(),
});

/** @internal */
export type UpdateChunkRequestBody$Outbound = {
  text?: string | undefined;
  embedding?: Array<number> | undefined;
  metadata?: { [k: string]: string | number | boolean } | undefined;
};

/** @internal */
export const UpdateChunkRequestBody$outboundSchema: z.ZodType<
  UpdateChunkRequestBody$Outbound,
  z.ZodTypeDef,
  UpdateChunkRequestBody
> = z.object({
  text: z.string().optional(),
  embedding: z.array(z.number()).optional(),
  metadata: z.record(z.union([z.string(), z.number(), z.boolean()])).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateChunkRequestBody$ {
  /** @deprecated use `UpdateChunkRequestBody$inboundSchema` instead. */
  export const inboundSchema = UpdateChunkRequestBody$inboundSchema;
  /** @deprecated use `UpdateChunkRequestBody$outboundSchema` instead. */
  export const outboundSchema = UpdateChunkRequestBody$outboundSchema;
  /** @deprecated use `UpdateChunkRequestBody$Outbound` instead. */
  export type Outbound = UpdateChunkRequestBody$Outbound;
}

export function updateChunkRequestBodyToJSON(
  updateChunkRequestBody: UpdateChunkRequestBody,
): string {
  return JSON.stringify(
    UpdateChunkRequestBody$outboundSchema.parse(updateChunkRequestBody),
  );
}

export function updateChunkRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<UpdateChunkRequestBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateChunkRequestBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateChunkRequestBody' from JSON`,
  );
}

/** @internal */
export const UpdateChunkRequest$inboundSchema: z.ZodType<
  UpdateChunkRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  chunk_id: z.string(),
  datasource_id: z.string(),
  knowledge_id: z.string(),
  RequestBody: z.lazy(() => UpdateChunkRequestBody$inboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    "chunk_id": "chunkId",
    "datasource_id": "datasourceId",
    "knowledge_id": "knowledgeId",
    "RequestBody": "requestBody",
  });
});

/** @internal */
export type UpdateChunkRequest$Outbound = {
  chunk_id: string;
  datasource_id: string;
  knowledge_id: string;
  RequestBody?: UpdateChunkRequestBody$Outbound | undefined;
};

/** @internal */
export const UpdateChunkRequest$outboundSchema: z.ZodType<
  UpdateChunkRequest$Outbound,
  z.ZodTypeDef,
  UpdateChunkRequest
> = z.object({
  chunkId: z.string(),
  datasourceId: z.string(),
  knowledgeId: z.string(),
  requestBody: z.lazy(() => UpdateChunkRequestBody$outboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    chunkId: "chunk_id",
    datasourceId: "datasource_id",
    knowledgeId: "knowledge_id",
    requestBody: "RequestBody",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateChunkRequest$ {
  /** @deprecated use `UpdateChunkRequest$inboundSchema` instead. */
  export const inboundSchema = UpdateChunkRequest$inboundSchema;
  /** @deprecated use `UpdateChunkRequest$outboundSchema` instead. */
  export const outboundSchema = UpdateChunkRequest$outboundSchema;
  /** @deprecated use `UpdateChunkRequest$Outbound` instead. */
  export type Outbound = UpdateChunkRequest$Outbound;
}

export function updateChunkRequestToJSON(
  updateChunkRequest: UpdateChunkRequest,
): string {
  return JSON.stringify(
    UpdateChunkRequest$outboundSchema.parse(updateChunkRequest),
  );
}

export function updateChunkRequestFromJSON(
  jsonString: string,
): SafeParseResult<UpdateChunkRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateChunkRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateChunkRequest' from JSON`,
  );
}

/** @internal */
export const UpdateChunkKnowledgeMetadata$inboundSchema: z.ZodType<
  UpdateChunkKnowledgeMetadata,
  z.ZodTypeDef,
  unknown
> = z.union([z.string(), z.number(), z.boolean()]);

/** @internal */
export type UpdateChunkKnowledgeMetadata$Outbound = string | number | boolean;

/** @internal */
export const UpdateChunkKnowledgeMetadata$outboundSchema: z.ZodType<
  UpdateChunkKnowledgeMetadata$Outbound,
  z.ZodTypeDef,
  UpdateChunkKnowledgeMetadata
> = z.union([z.string(), z.number(), z.boolean()]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateChunkKnowledgeMetadata$ {
  /** @deprecated use `UpdateChunkKnowledgeMetadata$inboundSchema` instead. */
  export const inboundSchema = UpdateChunkKnowledgeMetadata$inboundSchema;
  /** @deprecated use `UpdateChunkKnowledgeMetadata$outboundSchema` instead. */
  export const outboundSchema = UpdateChunkKnowledgeMetadata$outboundSchema;
  /** @deprecated use `UpdateChunkKnowledgeMetadata$Outbound` instead. */
  export type Outbound = UpdateChunkKnowledgeMetadata$Outbound;
}

export function updateChunkKnowledgeMetadataToJSON(
  updateChunkKnowledgeMetadata: UpdateChunkKnowledgeMetadata,
): string {
  return JSON.stringify(
    UpdateChunkKnowledgeMetadata$outboundSchema.parse(
      updateChunkKnowledgeMetadata,
    ),
  );
}

export function updateChunkKnowledgeMetadataFromJSON(
  jsonString: string,
): SafeParseResult<UpdateChunkKnowledgeMetadata, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateChunkKnowledgeMetadata$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateChunkKnowledgeMetadata' from JSON`,
  );
}

/** @internal */
export const UpdateChunkResponseBody$inboundSchema: z.ZodType<
  UpdateChunkResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  _id: z.string(),
  text: z.string(),
  metadata: z.record(z.union([z.string(), z.number(), z.boolean()])).optional(),
  enabled: z.boolean(),
  status: UpdateChunkStatus$inboundSchema,
  created: z.string(),
  updated: z.string(),
  created_by_id: z.nullable(z.string()).optional(),
  update_by_id: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    "_id": "id",
    "created_by_id": "createdById",
    "update_by_id": "updateById",
  });
});

/** @internal */
export type UpdateChunkResponseBody$Outbound = {
  _id: string;
  text: string;
  metadata?: { [k: string]: string | number | boolean } | undefined;
  enabled: boolean;
  status: string;
  created: string;
  updated: string;
  created_by_id?: string | null | undefined;
  update_by_id?: string | null | undefined;
};

/** @internal */
export const UpdateChunkResponseBody$outboundSchema: z.ZodType<
  UpdateChunkResponseBody$Outbound,
  z.ZodTypeDef,
  UpdateChunkResponseBody
> = z.object({
  id: z.string(),
  text: z.string(),
  metadata: z.record(z.union([z.string(), z.number(), z.boolean()])).optional(),
  enabled: z.boolean(),
  status: UpdateChunkStatus$outboundSchema,
  created: z.string(),
  updated: z.string(),
  createdById: z.nullable(z.string()).optional(),
  updateById: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    id: "_id",
    createdById: "created_by_id",
    updateById: "update_by_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateChunkResponseBody$ {
  /** @deprecated use `UpdateChunkResponseBody$inboundSchema` instead. */
  export const inboundSchema = UpdateChunkResponseBody$inboundSchema;
  /** @deprecated use `UpdateChunkResponseBody$outboundSchema` instead. */
  export const outboundSchema = UpdateChunkResponseBody$outboundSchema;
  /** @deprecated use `UpdateChunkResponseBody$Outbound` instead. */
  export type Outbound = UpdateChunkResponseBody$Outbound;
}

export function updateChunkResponseBodyToJSON(
  updateChunkResponseBody: UpdateChunkResponseBody,
): string {
  return JSON.stringify(
    UpdateChunkResponseBody$outboundSchema.parse(updateChunkResponseBody),
  );
}

export function updateChunkResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<UpdateChunkResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateChunkResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateChunkResponseBody' from JSON`,
  );
}
