/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export const Review = {
  Approved: "approved",
  Rejected: "rejected",
} as const;
export type Review = ClosedEnum<typeof Review>;

export type ReviewActionRequestBody = {
  review: Review;
  mockOutput?: { [k: string]: any } | undefined;
  source?: string | undefined;
};

export type ReviewActionRequest = {
  agentKey: string;
  taskId: string;
  actionId: string;
  requestBody?: ReviewActionRequestBody | undefined;
};

/**
 * Successfully reviewed the action
 */
export type ReviewActionResponseBody = {
  success: boolean;
  message: string;
};

/** @internal */
export const Review$inboundSchema: z.ZodNativeEnum<typeof Review> = z
  .nativeEnum(Review);

/** @internal */
export const Review$outboundSchema: z.ZodNativeEnum<typeof Review> =
  Review$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Review$ {
  /** @deprecated use `Review$inboundSchema` instead. */
  export const inboundSchema = Review$inboundSchema;
  /** @deprecated use `Review$outboundSchema` instead. */
  export const outboundSchema = Review$outboundSchema;
}

/** @internal */
export const ReviewActionRequestBody$inboundSchema: z.ZodType<
  ReviewActionRequestBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  review: Review$inboundSchema,
  mock_output: z.record(z.any()).optional(),
  source: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "mock_output": "mockOutput",
  });
});

/** @internal */
export type ReviewActionRequestBody$Outbound = {
  review: string;
  mock_output?: { [k: string]: any } | undefined;
  source?: string | undefined;
};

/** @internal */
export const ReviewActionRequestBody$outboundSchema: z.ZodType<
  ReviewActionRequestBody$Outbound,
  z.ZodTypeDef,
  ReviewActionRequestBody
> = z.object({
  review: Review$outboundSchema,
  mockOutput: z.record(z.any()).optional(),
  source: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    mockOutput: "mock_output",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ReviewActionRequestBody$ {
  /** @deprecated use `ReviewActionRequestBody$inboundSchema` instead. */
  export const inboundSchema = ReviewActionRequestBody$inboundSchema;
  /** @deprecated use `ReviewActionRequestBody$outboundSchema` instead. */
  export const outboundSchema = ReviewActionRequestBody$outboundSchema;
  /** @deprecated use `ReviewActionRequestBody$Outbound` instead. */
  export type Outbound = ReviewActionRequestBody$Outbound;
}

export function reviewActionRequestBodyToJSON(
  reviewActionRequestBody: ReviewActionRequestBody,
): string {
  return JSON.stringify(
    ReviewActionRequestBody$outboundSchema.parse(reviewActionRequestBody),
  );
}

export function reviewActionRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<ReviewActionRequestBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ReviewActionRequestBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ReviewActionRequestBody' from JSON`,
  );
}

/** @internal */
export const ReviewActionRequest$inboundSchema: z.ZodType<
  ReviewActionRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  agent_key: z.string(),
  task_id: z.string(),
  action_id: z.string(),
  RequestBody: z.lazy(() => ReviewActionRequestBody$inboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    "agent_key": "agentKey",
    "task_id": "taskId",
    "action_id": "actionId",
    "RequestBody": "requestBody",
  });
});

/** @internal */
export type ReviewActionRequest$Outbound = {
  agent_key: string;
  task_id: string;
  action_id: string;
  RequestBody?: ReviewActionRequestBody$Outbound | undefined;
};

/** @internal */
export const ReviewActionRequest$outboundSchema: z.ZodType<
  ReviewActionRequest$Outbound,
  z.ZodTypeDef,
  ReviewActionRequest
> = z.object({
  agentKey: z.string(),
  taskId: z.string(),
  actionId: z.string(),
  requestBody: z.lazy(() => ReviewActionRequestBody$outboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    agentKey: "agent_key",
    taskId: "task_id",
    actionId: "action_id",
    requestBody: "RequestBody",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ReviewActionRequest$ {
  /** @deprecated use `ReviewActionRequest$inboundSchema` instead. */
  export const inboundSchema = ReviewActionRequest$inboundSchema;
  /** @deprecated use `ReviewActionRequest$outboundSchema` instead. */
  export const outboundSchema = ReviewActionRequest$outboundSchema;
  /** @deprecated use `ReviewActionRequest$Outbound` instead. */
  export type Outbound = ReviewActionRequest$Outbound;
}

export function reviewActionRequestToJSON(
  reviewActionRequest: ReviewActionRequest,
): string {
  return JSON.stringify(
    ReviewActionRequest$outboundSchema.parse(reviewActionRequest),
  );
}

export function reviewActionRequestFromJSON(
  jsonString: string,
): SafeParseResult<ReviewActionRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ReviewActionRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ReviewActionRequest' from JSON`,
  );
}

/** @internal */
export const ReviewActionResponseBody$inboundSchema: z.ZodType<
  ReviewActionResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  success: z.boolean(),
  message: z.string(),
});

/** @internal */
export type ReviewActionResponseBody$Outbound = {
  success: boolean;
  message: string;
};

/** @internal */
export const ReviewActionResponseBody$outboundSchema: z.ZodType<
  ReviewActionResponseBody$Outbound,
  z.ZodTypeDef,
  ReviewActionResponseBody
> = z.object({
  success: z.boolean(),
  message: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ReviewActionResponseBody$ {
  /** @deprecated use `ReviewActionResponseBody$inboundSchema` instead. */
  export const inboundSchema = ReviewActionResponseBody$inboundSchema;
  /** @deprecated use `ReviewActionResponseBody$outboundSchema` instead. */
  export const outboundSchema = ReviewActionResponseBody$outboundSchema;
  /** @deprecated use `ReviewActionResponseBody$Outbound` instead. */
  export type Outbound = ReviewActionResponseBody$Outbound;
}

export function reviewActionResponseBodyToJSON(
  reviewActionResponseBody: ReviewActionResponseBody,
): string {
  return JSON.stringify(
    ReviewActionResponseBody$outboundSchema.parse(reviewActionResponseBody),
  );
}

export function reviewActionResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<ReviewActionResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ReviewActionResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ReviewActionResponseBody' from JSON`,
  );
}
