/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * Input text to embed, encoded as a string or array of tokens.
 */
export type PostV2ProxyEmbeddingsInput = string | Array<string>;

/**
 * Type of the document element
 */
export const PostV2ProxyEmbeddingsEncodingFormat = {
  Base64: "base64",
  Float: "float",
} as const;
/**
 * Type of the document element
 */
export type PostV2ProxyEmbeddingsEncodingFormat = ClosedEnum<
  typeof PostV2ProxyEmbeddingsEncodingFormat
>;

/**
 * input
 */
export type PostV2ProxyEmbeddingsRequestBody = {
  /**
   * Input text to embed, encoded as a string or array of tokens.
   */
  input: string | Array<string>;
  /**
   * ID of the model to use
   */
  model: string;
  /**
   * Type of the document element
   */
  encodingFormat?: PostV2ProxyEmbeddingsEncodingFormat | undefined;
  /**
   * The number of dimensions the resulting output embeddings should have.
   */
  dimensions?: number | undefined;
  /**
   * A unique identifier representing your end-user
   */
  user?: string | undefined;
};

export const PostV2ProxyEmbeddingsObject = {
  List: "list",
} as const;
export type PostV2ProxyEmbeddingsObject = ClosedEnum<
  typeof PostV2ProxyEmbeddingsObject
>;

/**
 * The object type, which is always `embedding`.
 */
export const PostV2ProxyEmbeddingsProxyObject = {
  Embedding: "embedding",
} as const;
/**
 * The object type, which is always `embedding`.
 */
export type PostV2ProxyEmbeddingsProxyObject = ClosedEnum<
  typeof PostV2ProxyEmbeddingsProxyObject
>;

/**
 * The embedding vector, which is a list of floats. The length of vector depends on the model.
 */
export type Embedding = Array<number> | string;

export type PostV2ProxyEmbeddingsData = {
  /**
   * The object type, which is always `embedding`.
   */
  object: PostV2ProxyEmbeddingsProxyObject;
  /**
   * The embedding vector, which is a list of floats. The length of vector depends on the model.
   */
  embedding: Array<number> | string;
  /**
   * The index of the embedding in the list of embeddings.
   */
  index: number;
};

export type PostV2ProxyEmbeddingsUsage = {
  promptTokens: number;
  totalTokens: number;
};

/**
 * Returns the embedding vector.
 */
export type PostV2ProxyEmbeddingsResponseBody = {
  object: PostV2ProxyEmbeddingsObject;
  data: Array<PostV2ProxyEmbeddingsData>;
  /**
   * ID of the model to used.
   */
  model: string;
  usage?: PostV2ProxyEmbeddingsUsage | undefined;
};

/** @internal */
export const PostV2ProxyEmbeddingsInput$inboundSchema: z.ZodType<
  PostV2ProxyEmbeddingsInput,
  z.ZodTypeDef,
  unknown
> = z.union([z.string(), z.array(z.string())]);

/** @internal */
export type PostV2ProxyEmbeddingsInput$Outbound = string | Array<string>;

/** @internal */
export const PostV2ProxyEmbeddingsInput$outboundSchema: z.ZodType<
  PostV2ProxyEmbeddingsInput$Outbound,
  z.ZodTypeDef,
  PostV2ProxyEmbeddingsInput
> = z.union([z.string(), z.array(z.string())]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostV2ProxyEmbeddingsInput$ {
  /** @deprecated use `PostV2ProxyEmbeddingsInput$inboundSchema` instead. */
  export const inboundSchema = PostV2ProxyEmbeddingsInput$inboundSchema;
  /** @deprecated use `PostV2ProxyEmbeddingsInput$outboundSchema` instead. */
  export const outboundSchema = PostV2ProxyEmbeddingsInput$outboundSchema;
  /** @deprecated use `PostV2ProxyEmbeddingsInput$Outbound` instead. */
  export type Outbound = PostV2ProxyEmbeddingsInput$Outbound;
}

export function postV2ProxyEmbeddingsInputToJSON(
  postV2ProxyEmbeddingsInput: PostV2ProxyEmbeddingsInput,
): string {
  return JSON.stringify(
    PostV2ProxyEmbeddingsInput$outboundSchema.parse(postV2ProxyEmbeddingsInput),
  );
}

export function postV2ProxyEmbeddingsInputFromJSON(
  jsonString: string,
): SafeParseResult<PostV2ProxyEmbeddingsInput, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PostV2ProxyEmbeddingsInput$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PostV2ProxyEmbeddingsInput' from JSON`,
  );
}

/** @internal */
export const PostV2ProxyEmbeddingsEncodingFormat$inboundSchema: z.ZodNativeEnum<
  typeof PostV2ProxyEmbeddingsEncodingFormat
> = z.nativeEnum(PostV2ProxyEmbeddingsEncodingFormat);

/** @internal */
export const PostV2ProxyEmbeddingsEncodingFormat$outboundSchema:
  z.ZodNativeEnum<typeof PostV2ProxyEmbeddingsEncodingFormat> =
    PostV2ProxyEmbeddingsEncodingFormat$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostV2ProxyEmbeddingsEncodingFormat$ {
  /** @deprecated use `PostV2ProxyEmbeddingsEncodingFormat$inboundSchema` instead. */
  export const inboundSchema =
    PostV2ProxyEmbeddingsEncodingFormat$inboundSchema;
  /** @deprecated use `PostV2ProxyEmbeddingsEncodingFormat$outboundSchema` instead. */
  export const outboundSchema =
    PostV2ProxyEmbeddingsEncodingFormat$outboundSchema;
}

/** @internal */
export const PostV2ProxyEmbeddingsRequestBody$inboundSchema: z.ZodType<
  PostV2ProxyEmbeddingsRequestBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  input: z.union([z.string(), z.array(z.string())]),
  model: z.string(),
  encoding_format: PostV2ProxyEmbeddingsEncodingFormat$inboundSchema.default(
    "float",
  ),
  dimensions: z.number().optional(),
  user: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "encoding_format": "encodingFormat",
  });
});

/** @internal */
export type PostV2ProxyEmbeddingsRequestBody$Outbound = {
  input: string | Array<string>;
  model: string;
  encoding_format: string;
  dimensions?: number | undefined;
  user?: string | undefined;
};

/** @internal */
export const PostV2ProxyEmbeddingsRequestBody$outboundSchema: z.ZodType<
  PostV2ProxyEmbeddingsRequestBody$Outbound,
  z.ZodTypeDef,
  PostV2ProxyEmbeddingsRequestBody
> = z.object({
  input: z.union([z.string(), z.array(z.string())]),
  model: z.string(),
  encodingFormat: PostV2ProxyEmbeddingsEncodingFormat$outboundSchema.default(
    "float",
  ),
  dimensions: z.number().optional(),
  user: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    encodingFormat: "encoding_format",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostV2ProxyEmbeddingsRequestBody$ {
  /** @deprecated use `PostV2ProxyEmbeddingsRequestBody$inboundSchema` instead. */
  export const inboundSchema = PostV2ProxyEmbeddingsRequestBody$inboundSchema;
  /** @deprecated use `PostV2ProxyEmbeddingsRequestBody$outboundSchema` instead. */
  export const outboundSchema = PostV2ProxyEmbeddingsRequestBody$outboundSchema;
  /** @deprecated use `PostV2ProxyEmbeddingsRequestBody$Outbound` instead. */
  export type Outbound = PostV2ProxyEmbeddingsRequestBody$Outbound;
}

export function postV2ProxyEmbeddingsRequestBodyToJSON(
  postV2ProxyEmbeddingsRequestBody: PostV2ProxyEmbeddingsRequestBody,
): string {
  return JSON.stringify(
    PostV2ProxyEmbeddingsRequestBody$outboundSchema.parse(
      postV2ProxyEmbeddingsRequestBody,
    ),
  );
}

export function postV2ProxyEmbeddingsRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<PostV2ProxyEmbeddingsRequestBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PostV2ProxyEmbeddingsRequestBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PostV2ProxyEmbeddingsRequestBody' from JSON`,
  );
}

/** @internal */
export const PostV2ProxyEmbeddingsObject$inboundSchema: z.ZodNativeEnum<
  typeof PostV2ProxyEmbeddingsObject
> = z.nativeEnum(PostV2ProxyEmbeddingsObject);

/** @internal */
export const PostV2ProxyEmbeddingsObject$outboundSchema: z.ZodNativeEnum<
  typeof PostV2ProxyEmbeddingsObject
> = PostV2ProxyEmbeddingsObject$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostV2ProxyEmbeddingsObject$ {
  /** @deprecated use `PostV2ProxyEmbeddingsObject$inboundSchema` instead. */
  export const inboundSchema = PostV2ProxyEmbeddingsObject$inboundSchema;
  /** @deprecated use `PostV2ProxyEmbeddingsObject$outboundSchema` instead. */
  export const outboundSchema = PostV2ProxyEmbeddingsObject$outboundSchema;
}

/** @internal */
export const PostV2ProxyEmbeddingsProxyObject$inboundSchema: z.ZodNativeEnum<
  typeof PostV2ProxyEmbeddingsProxyObject
> = z.nativeEnum(PostV2ProxyEmbeddingsProxyObject);

/** @internal */
export const PostV2ProxyEmbeddingsProxyObject$outboundSchema: z.ZodNativeEnum<
  typeof PostV2ProxyEmbeddingsProxyObject
> = PostV2ProxyEmbeddingsProxyObject$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostV2ProxyEmbeddingsProxyObject$ {
  /** @deprecated use `PostV2ProxyEmbeddingsProxyObject$inboundSchema` instead. */
  export const inboundSchema = PostV2ProxyEmbeddingsProxyObject$inboundSchema;
  /** @deprecated use `PostV2ProxyEmbeddingsProxyObject$outboundSchema` instead. */
  export const outboundSchema = PostV2ProxyEmbeddingsProxyObject$outboundSchema;
}

/** @internal */
export const Embedding$inboundSchema: z.ZodType<
  Embedding,
  z.ZodTypeDef,
  unknown
> = z.union([z.array(z.number()), z.string()]);

/** @internal */
export type Embedding$Outbound = Array<number> | string;

/** @internal */
export const Embedding$outboundSchema: z.ZodType<
  Embedding$Outbound,
  z.ZodTypeDef,
  Embedding
> = z.union([z.array(z.number()), z.string()]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Embedding$ {
  /** @deprecated use `Embedding$inboundSchema` instead. */
  export const inboundSchema = Embedding$inboundSchema;
  /** @deprecated use `Embedding$outboundSchema` instead. */
  export const outboundSchema = Embedding$outboundSchema;
  /** @deprecated use `Embedding$Outbound` instead. */
  export type Outbound = Embedding$Outbound;
}

export function embeddingToJSON(embedding: Embedding): string {
  return JSON.stringify(Embedding$outboundSchema.parse(embedding));
}

export function embeddingFromJSON(
  jsonString: string,
): SafeParseResult<Embedding, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Embedding$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Embedding' from JSON`,
  );
}

/** @internal */
export const PostV2ProxyEmbeddingsData$inboundSchema: z.ZodType<
  PostV2ProxyEmbeddingsData,
  z.ZodTypeDef,
  unknown
> = z.object({
  object: PostV2ProxyEmbeddingsProxyObject$inboundSchema,
  embedding: z.union([z.array(z.number()), z.string()]),
  index: z.number(),
});

/** @internal */
export type PostV2ProxyEmbeddingsData$Outbound = {
  object: string;
  embedding: Array<number> | string;
  index: number;
};

/** @internal */
export const PostV2ProxyEmbeddingsData$outboundSchema: z.ZodType<
  PostV2ProxyEmbeddingsData$Outbound,
  z.ZodTypeDef,
  PostV2ProxyEmbeddingsData
> = z.object({
  object: PostV2ProxyEmbeddingsProxyObject$outboundSchema,
  embedding: z.union([z.array(z.number()), z.string()]),
  index: z.number(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostV2ProxyEmbeddingsData$ {
  /** @deprecated use `PostV2ProxyEmbeddingsData$inboundSchema` instead. */
  export const inboundSchema = PostV2ProxyEmbeddingsData$inboundSchema;
  /** @deprecated use `PostV2ProxyEmbeddingsData$outboundSchema` instead. */
  export const outboundSchema = PostV2ProxyEmbeddingsData$outboundSchema;
  /** @deprecated use `PostV2ProxyEmbeddingsData$Outbound` instead. */
  export type Outbound = PostV2ProxyEmbeddingsData$Outbound;
}

export function postV2ProxyEmbeddingsDataToJSON(
  postV2ProxyEmbeddingsData: PostV2ProxyEmbeddingsData,
): string {
  return JSON.stringify(
    PostV2ProxyEmbeddingsData$outboundSchema.parse(postV2ProxyEmbeddingsData),
  );
}

export function postV2ProxyEmbeddingsDataFromJSON(
  jsonString: string,
): SafeParseResult<PostV2ProxyEmbeddingsData, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PostV2ProxyEmbeddingsData$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PostV2ProxyEmbeddingsData' from JSON`,
  );
}

/** @internal */
export const PostV2ProxyEmbeddingsUsage$inboundSchema: z.ZodType<
  PostV2ProxyEmbeddingsUsage,
  z.ZodTypeDef,
  unknown
> = z.object({
  prompt_tokens: z.number(),
  total_tokens: z.number(),
}).transform((v) => {
  return remap$(v, {
    "prompt_tokens": "promptTokens",
    "total_tokens": "totalTokens",
  });
});

/** @internal */
export type PostV2ProxyEmbeddingsUsage$Outbound = {
  prompt_tokens: number;
  total_tokens: number;
};

/** @internal */
export const PostV2ProxyEmbeddingsUsage$outboundSchema: z.ZodType<
  PostV2ProxyEmbeddingsUsage$Outbound,
  z.ZodTypeDef,
  PostV2ProxyEmbeddingsUsage
> = z.object({
  promptTokens: z.number(),
  totalTokens: z.number(),
}).transform((v) => {
  return remap$(v, {
    promptTokens: "prompt_tokens",
    totalTokens: "total_tokens",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostV2ProxyEmbeddingsUsage$ {
  /** @deprecated use `PostV2ProxyEmbeddingsUsage$inboundSchema` instead. */
  export const inboundSchema = PostV2ProxyEmbeddingsUsage$inboundSchema;
  /** @deprecated use `PostV2ProxyEmbeddingsUsage$outboundSchema` instead. */
  export const outboundSchema = PostV2ProxyEmbeddingsUsage$outboundSchema;
  /** @deprecated use `PostV2ProxyEmbeddingsUsage$Outbound` instead. */
  export type Outbound = PostV2ProxyEmbeddingsUsage$Outbound;
}

export function postV2ProxyEmbeddingsUsageToJSON(
  postV2ProxyEmbeddingsUsage: PostV2ProxyEmbeddingsUsage,
): string {
  return JSON.stringify(
    PostV2ProxyEmbeddingsUsage$outboundSchema.parse(postV2ProxyEmbeddingsUsage),
  );
}

export function postV2ProxyEmbeddingsUsageFromJSON(
  jsonString: string,
): SafeParseResult<PostV2ProxyEmbeddingsUsage, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PostV2ProxyEmbeddingsUsage$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PostV2ProxyEmbeddingsUsage' from JSON`,
  );
}

/** @internal */
export const PostV2ProxyEmbeddingsResponseBody$inboundSchema: z.ZodType<
  PostV2ProxyEmbeddingsResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  object: PostV2ProxyEmbeddingsObject$inboundSchema,
  data: z.array(z.lazy(() => PostV2ProxyEmbeddingsData$inboundSchema)),
  model: z.string(),
  usage: z.lazy(() => PostV2ProxyEmbeddingsUsage$inboundSchema).optional(),
});

/** @internal */
export type PostV2ProxyEmbeddingsResponseBody$Outbound = {
  object: string;
  data: Array<PostV2ProxyEmbeddingsData$Outbound>;
  model: string;
  usage?: PostV2ProxyEmbeddingsUsage$Outbound | undefined;
};

/** @internal */
export const PostV2ProxyEmbeddingsResponseBody$outboundSchema: z.ZodType<
  PostV2ProxyEmbeddingsResponseBody$Outbound,
  z.ZodTypeDef,
  PostV2ProxyEmbeddingsResponseBody
> = z.object({
  object: PostV2ProxyEmbeddingsObject$outboundSchema,
  data: z.array(z.lazy(() => PostV2ProxyEmbeddingsData$outboundSchema)),
  model: z.string(),
  usage: z.lazy(() => PostV2ProxyEmbeddingsUsage$outboundSchema).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostV2ProxyEmbeddingsResponseBody$ {
  /** @deprecated use `PostV2ProxyEmbeddingsResponseBody$inboundSchema` instead. */
  export const inboundSchema = PostV2ProxyEmbeddingsResponseBody$inboundSchema;
  /** @deprecated use `PostV2ProxyEmbeddingsResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    PostV2ProxyEmbeddingsResponseBody$outboundSchema;
  /** @deprecated use `PostV2ProxyEmbeddingsResponseBody$Outbound` instead. */
  export type Outbound = PostV2ProxyEmbeddingsResponseBody$Outbound;
}

export function postV2ProxyEmbeddingsResponseBodyToJSON(
  postV2ProxyEmbeddingsResponseBody: PostV2ProxyEmbeddingsResponseBody,
): string {
  return JSON.stringify(
    PostV2ProxyEmbeddingsResponseBody$outboundSchema.parse(
      postV2ProxyEmbeddingsResponseBody,
    ),
  );
}

export function postV2ProxyEmbeddingsResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<PostV2ProxyEmbeddingsResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PostV2ProxyEmbeddingsResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PostV2ProxyEmbeddingsResponseBody' from JSON`,
  );
}
