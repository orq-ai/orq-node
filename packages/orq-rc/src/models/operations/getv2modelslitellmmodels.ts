/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type GetV2ModelsLitellmModelsLitellmParams = {
  useInPassThrough: boolean;
  useLitellmProxy: boolean;
  mergeReasoningContentInChoices: boolean;
  model: string;
};

export type GetV2ModelsLitellmModelsModelInfo = {
  id: string | null;
  dbModel: boolean | null;
  key: string | null;
  maxTokens?: number | null | undefined;
  maxInputTokens?: number | null | undefined;
  maxOutputTokens?: number | null | undefined;
  inputCostPerToken?: number | null | undefined;
  cacheCreationInputTokenCost?: number | null | undefined;
  cacheReadInputTokenCost?: number | null | undefined;
  inputCostPerCharacter?: number | null | undefined;
  inputCostPerTokenAbove128kTokens?: number | null | undefined;
  inputCostPerTokenAbove200kTokens?: number | null | undefined;
  inputCostPerQuery?: number | null | undefined;
  inputCostPerSecond?: number | null | undefined;
  inputCostPerAudioToken?: number | null | undefined;
  inputCostPerTokenBatches?: number | null | undefined;
  outputCostPerTokenBatches?: number | null | undefined;
  outputCostPerToken?: number | null | undefined;
  outputCostPerAudioToken?: number | null | undefined;
  outputCostPerCharacter?: number | null | undefined;
  outputCostPerReasoningToken?: number | null | undefined;
  outputCostPerTokenAbove128kTokens?: number | null | undefined;
  outputCostPerCharacterAbove128kTokens?: number | null | undefined;
  outputCostPerTokenAbove200kTokens?: number | null | undefined;
  outputCostPerSecond?: number | null | undefined;
  outputCostPerImage?: number | null | undefined;
  outputVectorSize?: number | null | undefined;
  litellmProvider: string | null;
  mode: string | null;
  supportsSystemMessages?: boolean | null | undefined;
  supportsResponseSchema?: boolean | null | undefined;
  supportsVision?: boolean | null | undefined;
  supportsFunctionCalling?: boolean | null | undefined;
  supportsToolChoice?: boolean | null | undefined;
  supportsAssistantPrefill?: boolean | null | undefined;
  supportsPromptCaching?: boolean | null | undefined;
  supportsAudioInput?: boolean | null | undefined;
  supportsAudioOutput?: boolean | null | undefined;
  supportsPdfInput?: boolean | null | undefined;
  supportsEmbeddingImageInput?: boolean | null | undefined;
  supportsNativeStreaming?: boolean | null | undefined;
  supportsWebSearch?: boolean | null | undefined;
  supportsUrlContext?: boolean | null | undefined;
  supportsReasoning?: boolean | null | undefined;
  supportsComputerUse?: boolean | null | undefined;
  searchContextCostPerQuery?: number | null | undefined;
  tpm?: number | null | undefined;
  rpm?: number | null | undefined;
  supportedOpenaiParams?: Array<string> | null | undefined;
};

export type ResponseBody = {
  modelName: string;
  litellmParams: GetV2ModelsLitellmModelsLitellmParams;
  modelInfo: GetV2ModelsLitellmModelsModelInfo;
};

/** @internal */
export const GetV2ModelsLitellmModelsLitellmParams$inboundSchema: z.ZodType<
  GetV2ModelsLitellmModelsLitellmParams,
  z.ZodTypeDef,
  unknown
> = z.object({
  use_in_pass_through: z.boolean(),
  use_litellm_proxy: z.boolean(),
  merge_reasoning_content_in_choices: z.boolean(),
  model: z.string(),
}).transform((v) => {
  return remap$(v, {
    "use_in_pass_through": "useInPassThrough",
    "use_litellm_proxy": "useLitellmProxy",
    "merge_reasoning_content_in_choices": "mergeReasoningContentInChoices",
  });
});

/** @internal */
export type GetV2ModelsLitellmModelsLitellmParams$Outbound = {
  use_in_pass_through: boolean;
  use_litellm_proxy: boolean;
  merge_reasoning_content_in_choices: boolean;
  model: string;
};

/** @internal */
export const GetV2ModelsLitellmModelsLitellmParams$outboundSchema: z.ZodType<
  GetV2ModelsLitellmModelsLitellmParams$Outbound,
  z.ZodTypeDef,
  GetV2ModelsLitellmModelsLitellmParams
> = z.object({
  useInPassThrough: z.boolean(),
  useLitellmProxy: z.boolean(),
  mergeReasoningContentInChoices: z.boolean(),
  model: z.string(),
}).transform((v) => {
  return remap$(v, {
    useInPassThrough: "use_in_pass_through",
    useLitellmProxy: "use_litellm_proxy",
    mergeReasoningContentInChoices: "merge_reasoning_content_in_choices",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2ModelsLitellmModelsLitellmParams$ {
  /** @deprecated use `GetV2ModelsLitellmModelsLitellmParams$inboundSchema` instead. */
  export const inboundSchema =
    GetV2ModelsLitellmModelsLitellmParams$inboundSchema;
  /** @deprecated use `GetV2ModelsLitellmModelsLitellmParams$outboundSchema` instead. */
  export const outboundSchema =
    GetV2ModelsLitellmModelsLitellmParams$outboundSchema;
  /** @deprecated use `GetV2ModelsLitellmModelsLitellmParams$Outbound` instead. */
  export type Outbound = GetV2ModelsLitellmModelsLitellmParams$Outbound;
}

export function getV2ModelsLitellmModelsLitellmParamsToJSON(
  getV2ModelsLitellmModelsLitellmParams: GetV2ModelsLitellmModelsLitellmParams,
): string {
  return JSON.stringify(
    GetV2ModelsLitellmModelsLitellmParams$outboundSchema.parse(
      getV2ModelsLitellmModelsLitellmParams,
    ),
  );
}

export function getV2ModelsLitellmModelsLitellmParamsFromJSON(
  jsonString: string,
): SafeParseResult<GetV2ModelsLitellmModelsLitellmParams, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      GetV2ModelsLitellmModelsLitellmParams$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetV2ModelsLitellmModelsLitellmParams' from JSON`,
  );
}

/** @internal */
export const GetV2ModelsLitellmModelsModelInfo$inboundSchema: z.ZodType<
  GetV2ModelsLitellmModelsModelInfo,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.nullable(z.string()),
  db_model: z.nullable(z.boolean()),
  key: z.nullable(z.string()),
  max_tokens: z.nullable(z.number()).optional(),
  max_input_tokens: z.nullable(z.number()).optional(),
  max_output_tokens: z.nullable(z.number()).optional(),
  input_cost_per_token: z.nullable(z.number()).optional(),
  cache_creation_input_token_cost: z.nullable(z.number()).optional(),
  cache_read_input_token_cost: z.nullable(z.number()).optional(),
  input_cost_per_character: z.nullable(z.number()).optional(),
  input_cost_per_token_above_128k_tokens: z.nullable(z.number()).optional(),
  input_cost_per_token_above_200k_tokens: z.nullable(z.number()).optional(),
  input_cost_per_query: z.nullable(z.number()).optional(),
  input_cost_per_second: z.nullable(z.number()).optional(),
  input_cost_per_audio_token: z.nullable(z.number()).optional(),
  input_cost_per_token_batches: z.nullable(z.number()).optional(),
  output_cost_per_token_batches: z.nullable(z.number()).optional(),
  output_cost_per_token: z.nullable(z.number()).optional(),
  output_cost_per_audio_token: z.nullable(z.number()).optional(),
  output_cost_per_character: z.nullable(z.number()).optional(),
  output_cost_per_reasoning_token: z.nullable(z.number()).optional(),
  output_cost_per_token_above_128k_tokens: z.nullable(z.number()).optional(),
  output_cost_per_character_above_128k_tokens: z.nullable(z.number())
    .optional(),
  output_cost_per_token_above_200k_tokens: z.nullable(z.number()).optional(),
  output_cost_per_second: z.nullable(z.number()).optional(),
  output_cost_per_image: z.nullable(z.number()).optional(),
  output_vector_size: z.nullable(z.number()).optional(),
  litellm_provider: z.nullable(z.string()),
  mode: z.nullable(z.string()),
  supports_system_messages: z.nullable(z.boolean()).optional(),
  supports_response_schema: z.nullable(z.boolean()).optional(),
  supports_vision: z.nullable(z.boolean()).optional(),
  supports_function_calling: z.nullable(z.boolean()).optional(),
  supports_tool_choice: z.nullable(z.boolean()).optional(),
  supports_assistant_prefill: z.nullable(z.boolean()).optional(),
  supports_prompt_caching: z.nullable(z.boolean()).optional(),
  supports_audio_input: z.nullable(z.boolean()).optional(),
  supports_audio_output: z.nullable(z.boolean()).optional(),
  supports_pdf_input: z.nullable(z.boolean()).optional(),
  supports_embedding_image_input: z.nullable(z.boolean()).optional(),
  supports_native_streaming: z.nullable(z.boolean()).optional(),
  supports_web_search: z.nullable(z.boolean()).optional(),
  supports_url_context: z.nullable(z.boolean()).optional(),
  supports_reasoning: z.nullable(z.boolean()).optional(),
  supports_computer_use: z.nullable(z.boolean()).optional(),
  search_context_cost_per_query: z.nullable(z.number()).optional(),
  tpm: z.nullable(z.number()).optional(),
  rpm: z.nullable(z.number()).optional(),
  supported_openai_params: z.nullable(z.array(z.string())).optional(),
}).transform((v) => {
  return remap$(v, {
    "db_model": "dbModel",
    "max_tokens": "maxTokens",
    "max_input_tokens": "maxInputTokens",
    "max_output_tokens": "maxOutputTokens",
    "input_cost_per_token": "inputCostPerToken",
    "cache_creation_input_token_cost": "cacheCreationInputTokenCost",
    "cache_read_input_token_cost": "cacheReadInputTokenCost",
    "input_cost_per_character": "inputCostPerCharacter",
    "input_cost_per_token_above_128k_tokens":
      "inputCostPerTokenAbove128kTokens",
    "input_cost_per_token_above_200k_tokens":
      "inputCostPerTokenAbove200kTokens",
    "input_cost_per_query": "inputCostPerQuery",
    "input_cost_per_second": "inputCostPerSecond",
    "input_cost_per_audio_token": "inputCostPerAudioToken",
    "input_cost_per_token_batches": "inputCostPerTokenBatches",
    "output_cost_per_token_batches": "outputCostPerTokenBatches",
    "output_cost_per_token": "outputCostPerToken",
    "output_cost_per_audio_token": "outputCostPerAudioToken",
    "output_cost_per_character": "outputCostPerCharacter",
    "output_cost_per_reasoning_token": "outputCostPerReasoningToken",
    "output_cost_per_token_above_128k_tokens":
      "outputCostPerTokenAbove128kTokens",
    "output_cost_per_character_above_128k_tokens":
      "outputCostPerCharacterAbove128kTokens",
    "output_cost_per_token_above_200k_tokens":
      "outputCostPerTokenAbove200kTokens",
    "output_cost_per_second": "outputCostPerSecond",
    "output_cost_per_image": "outputCostPerImage",
    "output_vector_size": "outputVectorSize",
    "litellm_provider": "litellmProvider",
    "supports_system_messages": "supportsSystemMessages",
    "supports_response_schema": "supportsResponseSchema",
    "supports_vision": "supportsVision",
    "supports_function_calling": "supportsFunctionCalling",
    "supports_tool_choice": "supportsToolChoice",
    "supports_assistant_prefill": "supportsAssistantPrefill",
    "supports_prompt_caching": "supportsPromptCaching",
    "supports_audio_input": "supportsAudioInput",
    "supports_audio_output": "supportsAudioOutput",
    "supports_pdf_input": "supportsPdfInput",
    "supports_embedding_image_input": "supportsEmbeddingImageInput",
    "supports_native_streaming": "supportsNativeStreaming",
    "supports_web_search": "supportsWebSearch",
    "supports_url_context": "supportsUrlContext",
    "supports_reasoning": "supportsReasoning",
    "supports_computer_use": "supportsComputerUse",
    "search_context_cost_per_query": "searchContextCostPerQuery",
    "supported_openai_params": "supportedOpenaiParams",
  });
});

/** @internal */
export type GetV2ModelsLitellmModelsModelInfo$Outbound = {
  id: string | null;
  db_model: boolean | null;
  key: string | null;
  max_tokens?: number | null | undefined;
  max_input_tokens?: number | null | undefined;
  max_output_tokens?: number | null | undefined;
  input_cost_per_token?: number | null | undefined;
  cache_creation_input_token_cost?: number | null | undefined;
  cache_read_input_token_cost?: number | null | undefined;
  input_cost_per_character?: number | null | undefined;
  input_cost_per_token_above_128k_tokens?: number | null | undefined;
  input_cost_per_token_above_200k_tokens?: number | null | undefined;
  input_cost_per_query?: number | null | undefined;
  input_cost_per_second?: number | null | undefined;
  input_cost_per_audio_token?: number | null | undefined;
  input_cost_per_token_batches?: number | null | undefined;
  output_cost_per_token_batches?: number | null | undefined;
  output_cost_per_token?: number | null | undefined;
  output_cost_per_audio_token?: number | null | undefined;
  output_cost_per_character?: number | null | undefined;
  output_cost_per_reasoning_token?: number | null | undefined;
  output_cost_per_token_above_128k_tokens?: number | null | undefined;
  output_cost_per_character_above_128k_tokens?: number | null | undefined;
  output_cost_per_token_above_200k_tokens?: number | null | undefined;
  output_cost_per_second?: number | null | undefined;
  output_cost_per_image?: number | null | undefined;
  output_vector_size?: number | null | undefined;
  litellm_provider: string | null;
  mode: string | null;
  supports_system_messages?: boolean | null | undefined;
  supports_response_schema?: boolean | null | undefined;
  supports_vision?: boolean | null | undefined;
  supports_function_calling?: boolean | null | undefined;
  supports_tool_choice?: boolean | null | undefined;
  supports_assistant_prefill?: boolean | null | undefined;
  supports_prompt_caching?: boolean | null | undefined;
  supports_audio_input?: boolean | null | undefined;
  supports_audio_output?: boolean | null | undefined;
  supports_pdf_input?: boolean | null | undefined;
  supports_embedding_image_input?: boolean | null | undefined;
  supports_native_streaming?: boolean | null | undefined;
  supports_web_search?: boolean | null | undefined;
  supports_url_context?: boolean | null | undefined;
  supports_reasoning?: boolean | null | undefined;
  supports_computer_use?: boolean | null | undefined;
  search_context_cost_per_query?: number | null | undefined;
  tpm?: number | null | undefined;
  rpm?: number | null | undefined;
  supported_openai_params?: Array<string> | null | undefined;
};

/** @internal */
export const GetV2ModelsLitellmModelsModelInfo$outboundSchema: z.ZodType<
  GetV2ModelsLitellmModelsModelInfo$Outbound,
  z.ZodTypeDef,
  GetV2ModelsLitellmModelsModelInfo
> = z.object({
  id: z.nullable(z.string()),
  dbModel: z.nullable(z.boolean()),
  key: z.nullable(z.string()),
  maxTokens: z.nullable(z.number()).optional(),
  maxInputTokens: z.nullable(z.number()).optional(),
  maxOutputTokens: z.nullable(z.number()).optional(),
  inputCostPerToken: z.nullable(z.number()).optional(),
  cacheCreationInputTokenCost: z.nullable(z.number()).optional(),
  cacheReadInputTokenCost: z.nullable(z.number()).optional(),
  inputCostPerCharacter: z.nullable(z.number()).optional(),
  inputCostPerTokenAbove128kTokens: z.nullable(z.number()).optional(),
  inputCostPerTokenAbove200kTokens: z.nullable(z.number()).optional(),
  inputCostPerQuery: z.nullable(z.number()).optional(),
  inputCostPerSecond: z.nullable(z.number()).optional(),
  inputCostPerAudioToken: z.nullable(z.number()).optional(),
  inputCostPerTokenBatches: z.nullable(z.number()).optional(),
  outputCostPerTokenBatches: z.nullable(z.number()).optional(),
  outputCostPerToken: z.nullable(z.number()).optional(),
  outputCostPerAudioToken: z.nullable(z.number()).optional(),
  outputCostPerCharacter: z.nullable(z.number()).optional(),
  outputCostPerReasoningToken: z.nullable(z.number()).optional(),
  outputCostPerTokenAbove128kTokens: z.nullable(z.number()).optional(),
  outputCostPerCharacterAbove128kTokens: z.nullable(z.number()).optional(),
  outputCostPerTokenAbove200kTokens: z.nullable(z.number()).optional(),
  outputCostPerSecond: z.nullable(z.number()).optional(),
  outputCostPerImage: z.nullable(z.number()).optional(),
  outputVectorSize: z.nullable(z.number()).optional(),
  litellmProvider: z.nullable(z.string()),
  mode: z.nullable(z.string()),
  supportsSystemMessages: z.nullable(z.boolean()).optional(),
  supportsResponseSchema: z.nullable(z.boolean()).optional(),
  supportsVision: z.nullable(z.boolean()).optional(),
  supportsFunctionCalling: z.nullable(z.boolean()).optional(),
  supportsToolChoice: z.nullable(z.boolean()).optional(),
  supportsAssistantPrefill: z.nullable(z.boolean()).optional(),
  supportsPromptCaching: z.nullable(z.boolean()).optional(),
  supportsAudioInput: z.nullable(z.boolean()).optional(),
  supportsAudioOutput: z.nullable(z.boolean()).optional(),
  supportsPdfInput: z.nullable(z.boolean()).optional(),
  supportsEmbeddingImageInput: z.nullable(z.boolean()).optional(),
  supportsNativeStreaming: z.nullable(z.boolean()).optional(),
  supportsWebSearch: z.nullable(z.boolean()).optional(),
  supportsUrlContext: z.nullable(z.boolean()).optional(),
  supportsReasoning: z.nullable(z.boolean()).optional(),
  supportsComputerUse: z.nullable(z.boolean()).optional(),
  searchContextCostPerQuery: z.nullable(z.number()).optional(),
  tpm: z.nullable(z.number()).optional(),
  rpm: z.nullable(z.number()).optional(),
  supportedOpenaiParams: z.nullable(z.array(z.string())).optional(),
}).transform((v) => {
  return remap$(v, {
    dbModel: "db_model",
    maxTokens: "max_tokens",
    maxInputTokens: "max_input_tokens",
    maxOutputTokens: "max_output_tokens",
    inputCostPerToken: "input_cost_per_token",
    cacheCreationInputTokenCost: "cache_creation_input_token_cost",
    cacheReadInputTokenCost: "cache_read_input_token_cost",
    inputCostPerCharacter: "input_cost_per_character",
    inputCostPerTokenAbove128kTokens: "input_cost_per_token_above_128k_tokens",
    inputCostPerTokenAbove200kTokens: "input_cost_per_token_above_200k_tokens",
    inputCostPerQuery: "input_cost_per_query",
    inputCostPerSecond: "input_cost_per_second",
    inputCostPerAudioToken: "input_cost_per_audio_token",
    inputCostPerTokenBatches: "input_cost_per_token_batches",
    outputCostPerTokenBatches: "output_cost_per_token_batches",
    outputCostPerToken: "output_cost_per_token",
    outputCostPerAudioToken: "output_cost_per_audio_token",
    outputCostPerCharacter: "output_cost_per_character",
    outputCostPerReasoningToken: "output_cost_per_reasoning_token",
    outputCostPerTokenAbove128kTokens:
      "output_cost_per_token_above_128k_tokens",
    outputCostPerCharacterAbove128kTokens:
      "output_cost_per_character_above_128k_tokens",
    outputCostPerTokenAbove200kTokens:
      "output_cost_per_token_above_200k_tokens",
    outputCostPerSecond: "output_cost_per_second",
    outputCostPerImage: "output_cost_per_image",
    outputVectorSize: "output_vector_size",
    litellmProvider: "litellm_provider",
    supportsSystemMessages: "supports_system_messages",
    supportsResponseSchema: "supports_response_schema",
    supportsVision: "supports_vision",
    supportsFunctionCalling: "supports_function_calling",
    supportsToolChoice: "supports_tool_choice",
    supportsAssistantPrefill: "supports_assistant_prefill",
    supportsPromptCaching: "supports_prompt_caching",
    supportsAudioInput: "supports_audio_input",
    supportsAudioOutput: "supports_audio_output",
    supportsPdfInput: "supports_pdf_input",
    supportsEmbeddingImageInput: "supports_embedding_image_input",
    supportsNativeStreaming: "supports_native_streaming",
    supportsWebSearch: "supports_web_search",
    supportsUrlContext: "supports_url_context",
    supportsReasoning: "supports_reasoning",
    supportsComputerUse: "supports_computer_use",
    searchContextCostPerQuery: "search_context_cost_per_query",
    supportedOpenaiParams: "supported_openai_params",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2ModelsLitellmModelsModelInfo$ {
  /** @deprecated use `GetV2ModelsLitellmModelsModelInfo$inboundSchema` instead. */
  export const inboundSchema = GetV2ModelsLitellmModelsModelInfo$inboundSchema;
  /** @deprecated use `GetV2ModelsLitellmModelsModelInfo$outboundSchema` instead. */
  export const outboundSchema =
    GetV2ModelsLitellmModelsModelInfo$outboundSchema;
  /** @deprecated use `GetV2ModelsLitellmModelsModelInfo$Outbound` instead. */
  export type Outbound = GetV2ModelsLitellmModelsModelInfo$Outbound;
}

export function getV2ModelsLitellmModelsModelInfoToJSON(
  getV2ModelsLitellmModelsModelInfo: GetV2ModelsLitellmModelsModelInfo,
): string {
  return JSON.stringify(
    GetV2ModelsLitellmModelsModelInfo$outboundSchema.parse(
      getV2ModelsLitellmModelsModelInfo,
    ),
  );
}

export function getV2ModelsLitellmModelsModelInfoFromJSON(
  jsonString: string,
): SafeParseResult<GetV2ModelsLitellmModelsModelInfo, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetV2ModelsLitellmModelsModelInfo$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetV2ModelsLitellmModelsModelInfo' from JSON`,
  );
}

/** @internal */
export const ResponseBody$inboundSchema: z.ZodType<
  ResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  model_name: z.string(),
  litellm_params: z.lazy(() =>
    GetV2ModelsLitellmModelsLitellmParams$inboundSchema
  ),
  model_info: z.lazy(() => GetV2ModelsLitellmModelsModelInfo$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "model_name": "modelName",
    "litellm_params": "litellmParams",
    "model_info": "modelInfo",
  });
});

/** @internal */
export type ResponseBody$Outbound = {
  model_name: string;
  litellm_params: GetV2ModelsLitellmModelsLitellmParams$Outbound;
  model_info: GetV2ModelsLitellmModelsModelInfo$Outbound;
};

/** @internal */
export const ResponseBody$outboundSchema: z.ZodType<
  ResponseBody$Outbound,
  z.ZodTypeDef,
  ResponseBody
> = z.object({
  modelName: z.string(),
  litellmParams: z.lazy(() =>
    GetV2ModelsLitellmModelsLitellmParams$outboundSchema
  ),
  modelInfo: z.lazy(() => GetV2ModelsLitellmModelsModelInfo$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    modelName: "model_name",
    litellmParams: "litellm_params",
    modelInfo: "model_info",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ResponseBody$ {
  /** @deprecated use `ResponseBody$inboundSchema` instead. */
  export const inboundSchema = ResponseBody$inboundSchema;
  /** @deprecated use `ResponseBody$outboundSchema` instead. */
  export const outboundSchema = ResponseBody$outboundSchema;
  /** @deprecated use `ResponseBody$Outbound` instead. */
  export type Outbound = ResponseBody$Outbound;
}

export function responseBodyToJSON(responseBody: ResponseBody): string {
  return JSON.stringify(ResponseBody$outboundSchema.parse(responseBody));
}

export function responseBodyFromJSON(
  jsonString: string,
): SafeParseResult<ResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ResponseBody' from JSON`,
  );
}
