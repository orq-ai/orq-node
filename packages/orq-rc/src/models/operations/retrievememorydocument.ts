/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type RetrieveMemoryDocumentRequest = {
  /**
   * The unique key identifier of the memory store
   */
  memoryStoreKey: string;
  /**
   * The unique identifier of the memory
   */
  memoryId: string;
  /**
   * The unique identifier of the document
   */
  documentId: string;
};

/**
 * Memory document successfully retrieved.
 */
export type RetrieveMemoryDocumentResponseBody = {
  id: string;
  memoryId: string;
  storeId: string;
  text: string;
  created: string;
  updated: string;
  createdById?: string | undefined;
  updatedById?: string | undefined;
  workspaceId: string;
  tags?: { [k: string]: string } | undefined;
};

/** @internal */
export const RetrieveMemoryDocumentRequest$inboundSchema: z.ZodType<
  RetrieveMemoryDocumentRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  memory_store_key: z.string(),
  memory_id: z.string(),
  document_id: z.string(),
}).transform((v) => {
  return remap$(v, {
    "memory_store_key": "memoryStoreKey",
    "memory_id": "memoryId",
    "document_id": "documentId",
  });
});

/** @internal */
export type RetrieveMemoryDocumentRequest$Outbound = {
  memory_store_key: string;
  memory_id: string;
  document_id: string;
};

/** @internal */
export const RetrieveMemoryDocumentRequest$outboundSchema: z.ZodType<
  RetrieveMemoryDocumentRequest$Outbound,
  z.ZodTypeDef,
  RetrieveMemoryDocumentRequest
> = z.object({
  memoryStoreKey: z.string(),
  memoryId: z.string(),
  documentId: z.string(),
}).transform((v) => {
  return remap$(v, {
    memoryStoreKey: "memory_store_key",
    memoryId: "memory_id",
    documentId: "document_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RetrieveMemoryDocumentRequest$ {
  /** @deprecated use `RetrieveMemoryDocumentRequest$inboundSchema` instead. */
  export const inboundSchema = RetrieveMemoryDocumentRequest$inboundSchema;
  /** @deprecated use `RetrieveMemoryDocumentRequest$outboundSchema` instead. */
  export const outboundSchema = RetrieveMemoryDocumentRequest$outboundSchema;
  /** @deprecated use `RetrieveMemoryDocumentRequest$Outbound` instead. */
  export type Outbound = RetrieveMemoryDocumentRequest$Outbound;
}

export function retrieveMemoryDocumentRequestToJSON(
  retrieveMemoryDocumentRequest: RetrieveMemoryDocumentRequest,
): string {
  return JSON.stringify(
    RetrieveMemoryDocumentRequest$outboundSchema.parse(
      retrieveMemoryDocumentRequest,
    ),
  );
}

export function retrieveMemoryDocumentRequestFromJSON(
  jsonString: string,
): SafeParseResult<RetrieveMemoryDocumentRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => RetrieveMemoryDocumentRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RetrieveMemoryDocumentRequest' from JSON`,
  );
}

/** @internal */
export const RetrieveMemoryDocumentResponseBody$inboundSchema: z.ZodType<
  RetrieveMemoryDocumentResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  _id: z.string(),
  memory_id: z.string(),
  store_id: z.string(),
  text: z.string(),
  created: z.string(),
  updated: z.string(),
  created_by_id: z.string().optional(),
  updated_by_id: z.string().optional(),
  workspace_id: z.string(),
  tags: z.record(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    "_id": "id",
    "memory_id": "memoryId",
    "store_id": "storeId",
    "created_by_id": "createdById",
    "updated_by_id": "updatedById",
    "workspace_id": "workspaceId",
  });
});

/** @internal */
export type RetrieveMemoryDocumentResponseBody$Outbound = {
  _id: string;
  memory_id: string;
  store_id: string;
  text: string;
  created: string;
  updated: string;
  created_by_id?: string | undefined;
  updated_by_id?: string | undefined;
  workspace_id: string;
  tags?: { [k: string]: string } | undefined;
};

/** @internal */
export const RetrieveMemoryDocumentResponseBody$outboundSchema: z.ZodType<
  RetrieveMemoryDocumentResponseBody$Outbound,
  z.ZodTypeDef,
  RetrieveMemoryDocumentResponseBody
> = z.object({
  id: z.string(),
  memoryId: z.string(),
  storeId: z.string(),
  text: z.string(),
  created: z.string(),
  updated: z.string(),
  createdById: z.string().optional(),
  updatedById: z.string().optional(),
  workspaceId: z.string(),
  tags: z.record(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    id: "_id",
    memoryId: "memory_id",
    storeId: "store_id",
    createdById: "created_by_id",
    updatedById: "updated_by_id",
    workspaceId: "workspace_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RetrieveMemoryDocumentResponseBody$ {
  /** @deprecated use `RetrieveMemoryDocumentResponseBody$inboundSchema` instead. */
  export const inboundSchema = RetrieveMemoryDocumentResponseBody$inboundSchema;
  /** @deprecated use `RetrieveMemoryDocumentResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    RetrieveMemoryDocumentResponseBody$outboundSchema;
  /** @deprecated use `RetrieveMemoryDocumentResponseBody$Outbound` instead. */
  export type Outbound = RetrieveMemoryDocumentResponseBody$Outbound;
}

export function retrieveMemoryDocumentResponseBodyToJSON(
  retrieveMemoryDocumentResponseBody: RetrieveMemoryDocumentResponseBody,
): string {
  return JSON.stringify(
    RetrieveMemoryDocumentResponseBody$outboundSchema.parse(
      retrieveMemoryDocumentResponseBody,
    ),
  );
}

export function retrieveMemoryDocumentResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<RetrieveMemoryDocumentResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      RetrieveMemoryDocumentResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RetrieveMemoryDocumentResponseBody' from JSON`,
  );
}
