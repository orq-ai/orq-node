/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * Contact fields to update
 */
export type UpdateContactRequestBody = {
  /**
   * Display name or nickname of the contact user. This is typically shown in user interfaces.
   */
  displayName?: string | null | undefined;
  /**
   * Email address of the contact user
   */
  email?: string | null | undefined;
  /**
   * URL linking to the contact user's avatar image
   */
  avatarUrl?: string | null | undefined;
  /**
   * Array of tags associated with the contact. Useful for organizing and filtering contacts by categories, departments, or custom classifications.
   */
  tags?: Array<string> | undefined;
  /**
   * Additional custom metadata associated with the contact as key-value pairs. Use this to store any extra information specific to your application.
   */
  metadata?: { [k: string]: any } | undefined;
};

export type UpdateContactRequest = {
  /**
   * Unique contact id or external id
   */
  id: string;
  /**
   * Contact fields to update
   */
  requestBody?: UpdateContactRequestBody | undefined;
};

/**
 * Updated contact
 */
export type UpdateContactResponseBody = {
  /**
   * Unique ULID (Universally Unique Lexicographically Sortable Identifier) for the contact
   */
  id: string;
  /**
   * Unique string value to identify the contact user in the customer's system. This should be the same ID you use in your system to reference this user.
   */
  externalId: string;
  /**
   * Display name or nickname of the contact user. This is typically shown in user interfaces.
   */
  displayName?: string | null | undefined;
  /**
   * Email address of the contact user
   */
  email?: string | null | undefined;
  /**
   * URL linking to the contact user's avatar image
   */
  avatarUrl?: string | null | undefined;
  /**
   * Array of tags associated with the contact. Useful for organizing and filtering contacts by categories, departments, or custom classifications.
   */
  tags?: Array<string> | undefined;
  /**
   * Additional custom metadata associated with the contact as key-value pairs. Use this to store any extra information specific to your application.
   */
  metadata?: { [k: string]: any } | undefined;
  /**
   * The date and time the resource was created
   */
  created?: Date | undefined;
  /**
   * The date and time the resource was last updated
   */
  updated?: Date | undefined;
};

/** @internal */
export const UpdateContactRequestBody$inboundSchema: z.ZodType<
  UpdateContactRequestBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  display_name: z.nullable(z.string()).optional(),
  email: z.nullable(z.string()).optional(),
  avatar_url: z.nullable(z.string()).optional(),
  tags: z.array(z.string()).optional(),
  metadata: z.record(z.any()).optional(),
}).transform((v) => {
  return remap$(v, {
    "display_name": "displayName",
    "avatar_url": "avatarUrl",
  });
});

/** @internal */
export type UpdateContactRequestBody$Outbound = {
  display_name?: string | null | undefined;
  email?: string | null | undefined;
  avatar_url?: string | null | undefined;
  tags?: Array<string> | undefined;
  metadata?: { [k: string]: any } | undefined;
};

/** @internal */
export const UpdateContactRequestBody$outboundSchema: z.ZodType<
  UpdateContactRequestBody$Outbound,
  z.ZodTypeDef,
  UpdateContactRequestBody
> = z.object({
  displayName: z.nullable(z.string()).optional(),
  email: z.nullable(z.string()).optional(),
  avatarUrl: z.nullable(z.string()).optional(),
  tags: z.array(z.string()).optional(),
  metadata: z.record(z.any()).optional(),
}).transform((v) => {
  return remap$(v, {
    displayName: "display_name",
    avatarUrl: "avatar_url",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateContactRequestBody$ {
  /** @deprecated use `UpdateContactRequestBody$inboundSchema` instead. */
  export const inboundSchema = UpdateContactRequestBody$inboundSchema;
  /** @deprecated use `UpdateContactRequestBody$outboundSchema` instead. */
  export const outboundSchema = UpdateContactRequestBody$outboundSchema;
  /** @deprecated use `UpdateContactRequestBody$Outbound` instead. */
  export type Outbound = UpdateContactRequestBody$Outbound;
}

export function updateContactRequestBodyToJSON(
  updateContactRequestBody: UpdateContactRequestBody,
): string {
  return JSON.stringify(
    UpdateContactRequestBody$outboundSchema.parse(updateContactRequestBody),
  );
}

export function updateContactRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<UpdateContactRequestBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateContactRequestBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateContactRequestBody' from JSON`,
  );
}

/** @internal */
export const UpdateContactRequest$inboundSchema: z.ZodType<
  UpdateContactRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  RequestBody: z.lazy(() => UpdateContactRequestBody$inboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    "RequestBody": "requestBody",
  });
});

/** @internal */
export type UpdateContactRequest$Outbound = {
  id: string;
  RequestBody?: UpdateContactRequestBody$Outbound | undefined;
};

/** @internal */
export const UpdateContactRequest$outboundSchema: z.ZodType<
  UpdateContactRequest$Outbound,
  z.ZodTypeDef,
  UpdateContactRequest
> = z.object({
  id: z.string(),
  requestBody: z.lazy(() => UpdateContactRequestBody$outboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    requestBody: "RequestBody",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateContactRequest$ {
  /** @deprecated use `UpdateContactRequest$inboundSchema` instead. */
  export const inboundSchema = UpdateContactRequest$inboundSchema;
  /** @deprecated use `UpdateContactRequest$outboundSchema` instead. */
  export const outboundSchema = UpdateContactRequest$outboundSchema;
  /** @deprecated use `UpdateContactRequest$Outbound` instead. */
  export type Outbound = UpdateContactRequest$Outbound;
}

export function updateContactRequestToJSON(
  updateContactRequest: UpdateContactRequest,
): string {
  return JSON.stringify(
    UpdateContactRequest$outboundSchema.parse(updateContactRequest),
  );
}

export function updateContactRequestFromJSON(
  jsonString: string,
): SafeParseResult<UpdateContactRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateContactRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateContactRequest' from JSON`,
  );
}

/** @internal */
export const UpdateContactResponseBody$inboundSchema: z.ZodType<
  UpdateContactResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  _id: z.string(),
  external_id: z.string(),
  display_name: z.nullable(z.string()).optional(),
  email: z.nullable(z.string()).optional(),
  avatar_url: z.nullable(z.string()).optional(),
  tags: z.array(z.string()).optional(),
  metadata: z.record(z.any()).optional(),
  created: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
  updated: z.string().datetime({ offset: true }).default(
    "2025-07-28T10:05:36.546Z",
  ).transform(v => new Date(v)),
}).transform((v) => {
  return remap$(v, {
    "_id": "id",
    "external_id": "externalId",
    "display_name": "displayName",
    "avatar_url": "avatarUrl",
  });
});

/** @internal */
export type UpdateContactResponseBody$Outbound = {
  _id: string;
  external_id: string;
  display_name?: string | null | undefined;
  email?: string | null | undefined;
  avatar_url?: string | null | undefined;
  tags?: Array<string> | undefined;
  metadata?: { [k: string]: any } | undefined;
  created?: string | undefined;
  updated: string;
};

/** @internal */
export const UpdateContactResponseBody$outboundSchema: z.ZodType<
  UpdateContactResponseBody$Outbound,
  z.ZodTypeDef,
  UpdateContactResponseBody
> = z.object({
  id: z.string(),
  externalId: z.string(),
  displayName: z.nullable(z.string()).optional(),
  email: z.nullable(z.string()).optional(),
  avatarUrl: z.nullable(z.string()).optional(),
  tags: z.array(z.string()).optional(),
  metadata: z.record(z.any()).optional(),
  created: z.date().transform(v => v.toISOString()).optional(),
  updated: z.date().default(() => new Date("2025-07-28T10:05:36.546Z"))
    .transform(v => v.toISOString()),
}).transform((v) => {
  return remap$(v, {
    id: "_id",
    externalId: "external_id",
    displayName: "display_name",
    avatarUrl: "avatar_url",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateContactResponseBody$ {
  /** @deprecated use `UpdateContactResponseBody$inboundSchema` instead. */
  export const inboundSchema = UpdateContactResponseBody$inboundSchema;
  /** @deprecated use `UpdateContactResponseBody$outboundSchema` instead. */
  export const outboundSchema = UpdateContactResponseBody$outboundSchema;
  /** @deprecated use `UpdateContactResponseBody$Outbound` instead. */
  export type Outbound = UpdateContactResponseBody$Outbound;
}

export function updateContactResponseBodyToJSON(
  updateContactResponseBody: UpdateContactResponseBody,
): string {
  return JSON.stringify(
    UpdateContactResponseBody$outboundSchema.parse(updateContactResponseBody),
  );
}

export function updateContactResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<UpdateContactResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateContactResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateContactResponseBody' from JSON`,
  );
}
