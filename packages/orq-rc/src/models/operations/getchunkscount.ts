/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type GetChunksCountRequestBody = {
  /**
   * Search query to find chunks by text content
   */
  q?: string | undefined;
  /**
   * Filter chunks by enabled status
   */
  enabled?: boolean | undefined;
  /**
   * Filter chunks by processing status
   */
  status?: string | undefined;
};

export type GetChunksCountRequest = {
  /**
   * The unique identifier of the knowledge base
   */
  knowledgeId: string;
  /**
   * The unique identifier of the datasource.
   */
  datasourceId: string;
  requestBody?: GetChunksCountRequestBody | undefined;
};

/**
 * Chunks count
 */
export type GetChunksCountResponseBody = {
  count: number;
};

/** @internal */
export const GetChunksCountRequestBody$inboundSchema: z.ZodType<
  GetChunksCountRequestBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  q: z.string().default(""),
  enabled: z.boolean().optional(),
  status: z.string().optional(),
});

/** @internal */
export type GetChunksCountRequestBody$Outbound = {
  q: string;
  enabled?: boolean | undefined;
  status?: string | undefined;
};

/** @internal */
export const GetChunksCountRequestBody$outboundSchema: z.ZodType<
  GetChunksCountRequestBody$Outbound,
  z.ZodTypeDef,
  GetChunksCountRequestBody
> = z.object({
  q: z.string().default(""),
  enabled: z.boolean().optional(),
  status: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetChunksCountRequestBody$ {
  /** @deprecated use `GetChunksCountRequestBody$inboundSchema` instead. */
  export const inboundSchema = GetChunksCountRequestBody$inboundSchema;
  /** @deprecated use `GetChunksCountRequestBody$outboundSchema` instead. */
  export const outboundSchema = GetChunksCountRequestBody$outboundSchema;
  /** @deprecated use `GetChunksCountRequestBody$Outbound` instead. */
  export type Outbound = GetChunksCountRequestBody$Outbound;
}

export function getChunksCountRequestBodyToJSON(
  getChunksCountRequestBody: GetChunksCountRequestBody,
): string {
  return JSON.stringify(
    GetChunksCountRequestBody$outboundSchema.parse(getChunksCountRequestBody),
  );
}

export function getChunksCountRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<GetChunksCountRequestBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetChunksCountRequestBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetChunksCountRequestBody' from JSON`,
  );
}

/** @internal */
export const GetChunksCountRequest$inboundSchema: z.ZodType<
  GetChunksCountRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  knowledge_id: z.string(),
  datasource_id: z.string(),
  RequestBody: z.lazy(() => GetChunksCountRequestBody$inboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    "knowledge_id": "knowledgeId",
    "datasource_id": "datasourceId",
    "RequestBody": "requestBody",
  });
});

/** @internal */
export type GetChunksCountRequest$Outbound = {
  knowledge_id: string;
  datasource_id: string;
  RequestBody?: GetChunksCountRequestBody$Outbound | undefined;
};

/** @internal */
export const GetChunksCountRequest$outboundSchema: z.ZodType<
  GetChunksCountRequest$Outbound,
  z.ZodTypeDef,
  GetChunksCountRequest
> = z.object({
  knowledgeId: z.string(),
  datasourceId: z.string(),
  requestBody: z.lazy(() => GetChunksCountRequestBody$outboundSchema)
    .optional(),
}).transform((v) => {
  return remap$(v, {
    knowledgeId: "knowledge_id",
    datasourceId: "datasource_id",
    requestBody: "RequestBody",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetChunksCountRequest$ {
  /** @deprecated use `GetChunksCountRequest$inboundSchema` instead. */
  export const inboundSchema = GetChunksCountRequest$inboundSchema;
  /** @deprecated use `GetChunksCountRequest$outboundSchema` instead. */
  export const outboundSchema = GetChunksCountRequest$outboundSchema;
  /** @deprecated use `GetChunksCountRequest$Outbound` instead. */
  export type Outbound = GetChunksCountRequest$Outbound;
}

export function getChunksCountRequestToJSON(
  getChunksCountRequest: GetChunksCountRequest,
): string {
  return JSON.stringify(
    GetChunksCountRequest$outboundSchema.parse(getChunksCountRequest),
  );
}

export function getChunksCountRequestFromJSON(
  jsonString: string,
): SafeParseResult<GetChunksCountRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetChunksCountRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetChunksCountRequest' from JSON`,
  );
}

/** @internal */
export const GetChunksCountResponseBody$inboundSchema: z.ZodType<
  GetChunksCountResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  count: z.number(),
});

/** @internal */
export type GetChunksCountResponseBody$Outbound = {
  count: number;
};

/** @internal */
export const GetChunksCountResponseBody$outboundSchema: z.ZodType<
  GetChunksCountResponseBody$Outbound,
  z.ZodTypeDef,
  GetChunksCountResponseBody
> = z.object({
  count: z.number(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetChunksCountResponseBody$ {
  /** @deprecated use `GetChunksCountResponseBody$inboundSchema` instead. */
  export const inboundSchema = GetChunksCountResponseBody$inboundSchema;
  /** @deprecated use `GetChunksCountResponseBody$outboundSchema` instead. */
  export const outboundSchema = GetChunksCountResponseBody$outboundSchema;
  /** @deprecated use `GetChunksCountResponseBody$Outbound` instead. */
  export type Outbound = GetChunksCountResponseBody$Outbound;
}

export function getChunksCountResponseBodyToJSON(
  getChunksCountResponseBody: GetChunksCountResponseBody,
): string {
  return JSON.stringify(
    GetChunksCountResponseBody$outboundSchema.parse(getChunksCountResponseBody),
  );
}

export function getChunksCountResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<GetChunksCountResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetChunksCountResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetChunksCountResponseBody' from JSON`,
  );
}
