/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type EvalsContainsAnyFunctionParams = {
  keywords: Array<string>;
};

export type EvalsContainsAnyRequestBody = {
  output: string;
  functionParams: EvalsContainsAnyFunctionParams;
};

export type EvalsContainsAnyValue = boolean | string | number;

/**
 * Returns the result of the evaluator run
 */
export type EvalsContainsAnyResponseBody = {
  value: boolean | string | number | null;
};

/** @internal */
export const EvalsContainsAnyFunctionParams$inboundSchema: z.ZodType<
  EvalsContainsAnyFunctionParams,
  z.ZodTypeDef,
  unknown
> = z.object({
  keywords: z.array(z.string()),
});

/** @internal */
export type EvalsContainsAnyFunctionParams$Outbound = {
  keywords: Array<string>;
};

/** @internal */
export const EvalsContainsAnyFunctionParams$outboundSchema: z.ZodType<
  EvalsContainsAnyFunctionParams$Outbound,
  z.ZodTypeDef,
  EvalsContainsAnyFunctionParams
> = z.object({
  keywords: z.array(z.string()),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EvalsContainsAnyFunctionParams$ {
  /** @deprecated use `EvalsContainsAnyFunctionParams$inboundSchema` instead. */
  export const inboundSchema = EvalsContainsAnyFunctionParams$inboundSchema;
  /** @deprecated use `EvalsContainsAnyFunctionParams$outboundSchema` instead. */
  export const outboundSchema = EvalsContainsAnyFunctionParams$outboundSchema;
  /** @deprecated use `EvalsContainsAnyFunctionParams$Outbound` instead. */
  export type Outbound = EvalsContainsAnyFunctionParams$Outbound;
}

export function evalsContainsAnyFunctionParamsToJSON(
  evalsContainsAnyFunctionParams: EvalsContainsAnyFunctionParams,
): string {
  return JSON.stringify(
    EvalsContainsAnyFunctionParams$outboundSchema.parse(
      evalsContainsAnyFunctionParams,
    ),
  );
}

export function evalsContainsAnyFunctionParamsFromJSON(
  jsonString: string,
): SafeParseResult<EvalsContainsAnyFunctionParams, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => EvalsContainsAnyFunctionParams$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'EvalsContainsAnyFunctionParams' from JSON`,
  );
}

/** @internal */
export const EvalsContainsAnyRequestBody$inboundSchema: z.ZodType<
  EvalsContainsAnyRequestBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  output: z.string(),
  function_params: z.lazy(() => EvalsContainsAnyFunctionParams$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "function_params": "functionParams",
  });
});

/** @internal */
export type EvalsContainsAnyRequestBody$Outbound = {
  output: string;
  function_params: EvalsContainsAnyFunctionParams$Outbound;
};

/** @internal */
export const EvalsContainsAnyRequestBody$outboundSchema: z.ZodType<
  EvalsContainsAnyRequestBody$Outbound,
  z.ZodTypeDef,
  EvalsContainsAnyRequestBody
> = z.object({
  output: z.string(),
  functionParams: z.lazy(() => EvalsContainsAnyFunctionParams$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    functionParams: "function_params",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EvalsContainsAnyRequestBody$ {
  /** @deprecated use `EvalsContainsAnyRequestBody$inboundSchema` instead. */
  export const inboundSchema = EvalsContainsAnyRequestBody$inboundSchema;
  /** @deprecated use `EvalsContainsAnyRequestBody$outboundSchema` instead. */
  export const outboundSchema = EvalsContainsAnyRequestBody$outboundSchema;
  /** @deprecated use `EvalsContainsAnyRequestBody$Outbound` instead. */
  export type Outbound = EvalsContainsAnyRequestBody$Outbound;
}

export function evalsContainsAnyRequestBodyToJSON(
  evalsContainsAnyRequestBody: EvalsContainsAnyRequestBody,
): string {
  return JSON.stringify(
    EvalsContainsAnyRequestBody$outboundSchema.parse(
      evalsContainsAnyRequestBody,
    ),
  );
}

export function evalsContainsAnyRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<EvalsContainsAnyRequestBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => EvalsContainsAnyRequestBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'EvalsContainsAnyRequestBody' from JSON`,
  );
}

/** @internal */
export const EvalsContainsAnyValue$inboundSchema: z.ZodType<
  EvalsContainsAnyValue,
  z.ZodTypeDef,
  unknown
> = z.union([z.boolean(), z.string(), z.number()]);

/** @internal */
export type EvalsContainsAnyValue$Outbound = boolean | string | number;

/** @internal */
export const EvalsContainsAnyValue$outboundSchema: z.ZodType<
  EvalsContainsAnyValue$Outbound,
  z.ZodTypeDef,
  EvalsContainsAnyValue
> = z.union([z.boolean(), z.string(), z.number()]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EvalsContainsAnyValue$ {
  /** @deprecated use `EvalsContainsAnyValue$inboundSchema` instead. */
  export const inboundSchema = EvalsContainsAnyValue$inboundSchema;
  /** @deprecated use `EvalsContainsAnyValue$outboundSchema` instead. */
  export const outboundSchema = EvalsContainsAnyValue$outboundSchema;
  /** @deprecated use `EvalsContainsAnyValue$Outbound` instead. */
  export type Outbound = EvalsContainsAnyValue$Outbound;
}

export function evalsContainsAnyValueToJSON(
  evalsContainsAnyValue: EvalsContainsAnyValue,
): string {
  return JSON.stringify(
    EvalsContainsAnyValue$outboundSchema.parse(evalsContainsAnyValue),
  );
}

export function evalsContainsAnyValueFromJSON(
  jsonString: string,
): SafeParseResult<EvalsContainsAnyValue, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => EvalsContainsAnyValue$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'EvalsContainsAnyValue' from JSON`,
  );
}

/** @internal */
export const EvalsContainsAnyResponseBody$inboundSchema: z.ZodType<
  EvalsContainsAnyResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  value: z.nullable(z.union([z.boolean(), z.string(), z.number()])),
});

/** @internal */
export type EvalsContainsAnyResponseBody$Outbound = {
  value: boolean | string | number | null;
};

/** @internal */
export const EvalsContainsAnyResponseBody$outboundSchema: z.ZodType<
  EvalsContainsAnyResponseBody$Outbound,
  z.ZodTypeDef,
  EvalsContainsAnyResponseBody
> = z.object({
  value: z.nullable(z.union([z.boolean(), z.string(), z.number()])),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EvalsContainsAnyResponseBody$ {
  /** @deprecated use `EvalsContainsAnyResponseBody$inboundSchema` instead. */
  export const inboundSchema = EvalsContainsAnyResponseBody$inboundSchema;
  /** @deprecated use `EvalsContainsAnyResponseBody$outboundSchema` instead. */
  export const outboundSchema = EvalsContainsAnyResponseBody$outboundSchema;
  /** @deprecated use `EvalsContainsAnyResponseBody$Outbound` instead. */
  export type Outbound = EvalsContainsAnyResponseBody$Outbound;
}

export function evalsContainsAnyResponseBodyToJSON(
  evalsContainsAnyResponseBody: EvalsContainsAnyResponseBody,
): string {
  return JSON.stringify(
    EvalsContainsAnyResponseBody$outboundSchema.parse(
      evalsContainsAnyResponseBody,
    ),
  );
}

export function evalsContainsAnyResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<EvalsContainsAnyResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => EvalsContainsAnyResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'EvalsContainsAnyResponseBody' from JSON`,
  );
}
