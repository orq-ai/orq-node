/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type UpdatePromptGlobals = {
  contactId?: string | undefined;
};

/**
 * The type of the model
 */
export const UpdatePromptModelType = {
  Chat: "chat",
  Completion: "completion",
  Embedding: "embedding",
  Vision: "vision",
  Image: "image",
  Tts: "tts",
  Stt: "stt",
  Rerank: "rerank",
  Moderations: "moderations",
} as const;
/**
 * The type of the model
 */
export type UpdatePromptModelType = ClosedEnum<typeof UpdatePromptModelType>;

/**
 * Only supported on `image` models.
 */
export const UpdatePromptFormat = {
  Url: "url",
  B64Json: "b64_json",
  Text: "text",
  JsonObject: "json_object",
} as const;
/**
 * Only supported on `image` models.
 */
export type UpdatePromptFormat = ClosedEnum<typeof UpdatePromptFormat>;

/**
 * Only supported on `image` models.
 */
export const UpdatePromptQuality = {
  Standard: "standard",
  Hd: "hd",
} as const;
/**
 * Only supported on `image` models.
 */
export type UpdatePromptQuality = ClosedEnum<typeof UpdatePromptQuality>;

export const UpdatePromptResponseFormatPromptsType = {
  JsonObject: "json_object",
} as const;
export type UpdatePromptResponseFormatPromptsType = ClosedEnum<
  typeof UpdatePromptResponseFormatPromptsType
>;

export type UpdatePromptResponseFormat2 = {
  type: UpdatePromptResponseFormatPromptsType;
};

export const UpdatePromptResponseFormatType = {
  JsonSchema: "json_schema",
} as const;
export type UpdatePromptResponseFormatType = ClosedEnum<
  typeof UpdatePromptResponseFormatType
>;

export type UpdatePromptResponseFormatJsonSchema = {
  name: string;
  strict: boolean;
  schema: { [k: string]: any };
};

export type UpdatePromptResponseFormat1 = {
  type: UpdatePromptResponseFormatType;
  jsonSchema: UpdatePromptResponseFormatJsonSchema;
};

/**
 * An object specifying the format that the model must output.
 *
 * @remarks
 *
 *  Setting to `{ "type": "json_schema", "json_schema": {...} }` enables Structured Outputs which ensures the model will match your supplied JSON schema
 *
 *  Setting to `{ "type": "json_object" }` enables JSON mode, which ensures the message the model generates is valid JSON.
 *
 * Important: when using JSON mode, you must also instruct the model to produce JSON yourself via a system or user message. Without this, the model may generate an unending stream of whitespace until the generation reaches the token limit, resulting in a long-running and seemingly "stuck" request. Also note that the message content may be partially cut off if finish_reason="length", which indicates the generation exceeded max_tokens or the conversation exceeded the max context length.
 */
export type UpdatePromptResponseFormat =
  | UpdatePromptResponseFormat2
  | UpdatePromptResponseFormat1;

/**
 * The version of photoReal to use. Must be v1 or v2. Only available for `leonardoai` provider
 */
export const UpdatePromptPhotoRealVersion = {
  V1: "v1",
  V2: "v2",
} as const;
/**
 * The version of photoReal to use. Must be v1 or v2. Only available for `leonardoai` provider
 */
export type UpdatePromptPhotoRealVersion = ClosedEnum<
  typeof UpdatePromptPhotoRealVersion
>;

/**
 * The format to return the embeddings
 */
export const UpdatePromptEncodingFormat = {
  Float: "float",
  Base64: "base64",
} as const;
/**
 * The format to return the embeddings
 */
export type UpdatePromptEncodingFormat = ClosedEnum<
  typeof UpdatePromptEncodingFormat
>;

/**
 * Constrains effort on reasoning for reasoning models. Reducing reasoning effort can result in faster responses and fewer tokens used on reasoning in a response.
 */
export const UpdatePromptReasoningEffort = {
  Low: "low",
  Medium: "medium",
  High: "high",
} as const;
/**
 * Constrains effort on reasoning for reasoning models. Reducing reasoning effort can result in faster responses and fewer tokens used on reasoning in a response.
 */
export type UpdatePromptReasoningEffort = ClosedEnum<
  typeof UpdatePromptReasoningEffort
>;

/**
 * Model Parameters: Not all parameters apply to every model
 */
export type UpdatePromptModelParameters = {
  /**
   * Only supported on `chat` and `completion` models.
   */
  temperature?: number | undefined;
  /**
   * Only supported on `chat` and `completion` models.
   */
  maxTokens?: number | undefined;
  /**
   * Only supported on `chat` and `completion` models.
   */
  topK?: number | undefined;
  /**
   * Only supported on `chat` and `completion` models.
   */
  topP?: number | undefined;
  /**
   * Only supported on `chat` and `completion` models.
   */
  frequencyPenalty?: number | undefined;
  /**
   * Only supported on `chat` and `completion` models.
   */
  presencePenalty?: number | undefined;
  /**
   * Only supported on `image` models.
   */
  numImages?: number | undefined;
  /**
   * Best effort deterministic seed for the model. Currently only OpenAI models support these
   */
  seed?: number | undefined;
  /**
   * Only supported on `image` models.
   */
  format?: UpdatePromptFormat | undefined;
  /**
   * Only supported on `image` models.
   */
  dimensions?: string | undefined;
  /**
   * Only supported on `image` models.
   */
  quality?: UpdatePromptQuality | undefined;
  /**
   * Only supported on `image` models.
   */
  style?: string | undefined;
  /**
   * An object specifying the format that the model must output.
   *
   * @remarks
   *
   *  Setting to `{ "type": "json_schema", "json_schema": {...} }` enables Structured Outputs which ensures the model will match your supplied JSON schema
   *
   *  Setting to `{ "type": "json_object" }` enables JSON mode, which ensures the message the model generates is valid JSON.
   *
   * Important: when using JSON mode, you must also instruct the model to produce JSON yourself via a system or user message. Without this, the model may generate an unending stream of whitespace until the generation reaches the token limit, resulting in a long-running and seemingly "stuck" request. Also note that the message content may be partially cut off if finish_reason="length", which indicates the generation exceeded max_tokens or the conversation exceeded the max context length.
   */
  responseFormat?:
    | UpdatePromptResponseFormat2
    | UpdatePromptResponseFormat1
    | null
    | undefined;
  /**
   * The version of photoReal to use. Must be v1 or v2. Only available for `leonardoai` provider
   */
  photoRealVersion?: UpdatePromptPhotoRealVersion | undefined;
  /**
   * The format to return the embeddings
   */
  encodingFormat?: UpdatePromptEncodingFormat | undefined;
  /**
   * Constrains effort on reasoning for reasoning models. Reducing reasoning effort can result in faster responses and fewer tokens used on reasoning in a response.
   */
  reasoningEffort?: UpdatePromptReasoningEffort | undefined;
};

export const UpdatePromptProvider = {
  Cohere: "cohere",
  Openai: "openai",
  Anthropic: "anthropic",
  Huggingface: "huggingface",
  Replicate: "replicate",
  Google: "google",
  GoogleAi: "google-ai",
  Azure: "azure",
  Aws: "aws",
  Anyscale: "anyscale",
  Perplexity: "perplexity",
  Groq: "groq",
  Fal: "fal",
  Leonardoai: "leonardoai",
  Nvidia: "nvidia",
  Jina: "jina",
  Togetherai: "togetherai",
  Elevenlabs: "elevenlabs",
} as const;
export type UpdatePromptProvider = ClosedEnum<typeof UpdatePromptProvider>;

/**
 * The role of the prompt message
 */
export const UpdatePromptRole = {
  System: "system",
  Assistant: "assistant",
  User: "user",
  Exception: "exception",
  Tool: "tool",
  Prompt: "prompt",
  Correction: "correction",
  ExpectedOutput: "expected_output",
} as const;
/**
 * The role of the prompt message
 */
export type UpdatePromptRole = ClosedEnum<typeof UpdatePromptRole>;

export const UpdatePrompt2PromptsType = {
  ImageUrl: "image_url",
} as const;
export type UpdatePrompt2PromptsType = ClosedEnum<
  typeof UpdatePrompt2PromptsType
>;

export type UpdatePrompt2ImageUrl = {
  /**
   * Either a URL of the image or the base64 encoded data URI.
   */
  url: string;
  /**
   * Specifies the detail level of the image. Currently only supported with OpenAI models
   */
  detail?: string | undefined;
};

/**
 * The image part of the prompt message. Only supported with vision models.
 */
export type UpdatePrompt22 = {
  type: UpdatePrompt2PromptsType;
  imageUrl: UpdatePrompt2ImageUrl;
};

export const UpdatePrompt2Type = {
  Text: "text",
} as const;
export type UpdatePrompt2Type = ClosedEnum<typeof UpdatePrompt2Type>;

/**
 * Text content part of a prompt message
 */
export type UpdatePrompt21 = {
  type: UpdatePrompt2Type;
  text: string;
};

export type UpdatePromptContent2 = UpdatePrompt21 | UpdatePrompt22;

/**
 * The contents of the user message. Either the text content of the message or an array of content parts with a defined type, each can be of type `text` or `image_url` when passing in images. You can pass multiple images by adding multiple `image_url` content parts.
 */
export type UpdatePromptContent =
  | string
  | Array<UpdatePrompt21 | UpdatePrompt22>;

export const UpdatePromptType = {
  Function: "function",
} as const;
export type UpdatePromptType = ClosedEnum<typeof UpdatePromptType>;

export type UpdatePromptFunction = {
  name: string;
  /**
   * JSON string arguments for the functions
   */
  arguments: string;
};

export type UpdatePromptToolCalls = {
  id?: string | undefined;
  index?: number | undefined;
  type: UpdatePromptType;
  function: UpdatePromptFunction;
};

export type UpdatePromptMessages = {
  /**
   * The role of the prompt message
   */
  role: UpdatePromptRole;
  /**
   * The contents of the user message. Either the text content of the message or an array of content parts with a defined type, each can be of type `text` or `image_url` when passing in images. You can pass multiple images by adding multiple `image_url` content parts.
   */
  content: string | Array<UpdatePrompt21 | UpdatePrompt22>;
  toolCalls?: Array<UpdatePromptToolCalls> | undefined;
};

/**
 * A list of messages compatible with the openAI schema
 */
export type UpdatePromptPromptConfig = {
  stream?: boolean | undefined;
  model?: string | undefined;
  /**
   * The type of the model
   */
  modelType?: UpdatePromptModelType | undefined;
  /**
   * Model Parameters: Not all parameters apply to every model
   */
  modelParameters?: UpdatePromptModelParameters | undefined;
  provider?: UpdatePromptProvider | undefined;
  version?: string | undefined;
  messages: Array<UpdatePromptMessages>;
};

export const UpdatePromptUseCases = {
  Agents: "Agents",
  AgentsSimulations: "Agents simulations",
  APIInteraction: "API interaction",
  AutonomousAgents: "Autonomous Agents",
  Chatbots: "Chatbots",
  Classification: "Classification",
  CodeUnderstanding: "Code understanding",
  CodeWriting: "Code writing",
  DocumentsQA: "Documents QA",
  Conversation: "Conversation",
  Extraction: "Extraction",
  MultiModal: "Multi-modal",
  SelfChecking: "Self-checking",
  Sql: "SQL",
  Summarization: "Summarization",
  Tagging: "Tagging",
} as const;
export type UpdatePromptUseCases = ClosedEnum<typeof UpdatePromptUseCases>;

/**
 * The language that the prompt is written in. Use this field to categorize the prompt for your own purpose
 */
export const UpdatePromptLanguage = {
  Chinese: "Chinese",
  Dutch: "Dutch",
  English: "English",
  French: "French",
  German: "German",
  Russian: "Russian",
  Spanish: "Spanish",
} as const;
/**
 * The language that the prompt is written in. Use this field to categorize the prompt for your own purpose
 */
export type UpdatePromptLanguage = ClosedEnum<typeof UpdatePromptLanguage>;

export type UpdatePromptMetadata = {
  /**
   * A list of use cases that the prompt is meant to be used for. Use this field to categorize the prompt for your own purpose
   */
  useCases?: Array<UpdatePromptUseCases> | undefined;
  /**
   * The language that the prompt is written in. Use this field to categorize the prompt for your own purpose
   */
  language?: UpdatePromptLanguage | undefined;
};

export type UpdatePromptRequestBody = {
  /**
   * The prompt’s name, meant to be displayable in the UI.
   */
  displayName?: string | undefined;
  /**
   * The prompt’s description, meant to be displayable in the UI. Use this field to optionally store a long form explanation of the prompt for your own purpose
   */
  description?: string | null | undefined;
  /**
   * A list of messages compatible with the openAI schema
   */
  promptConfig?: UpdatePromptPromptConfig | undefined;
  metadata?: UpdatePromptMetadata | undefined;
};

export type UpdatePromptRequest = {
  /**
   * Prompt ID
   */
  id: string;
  requestBody?: UpdatePromptRequestBody | undefined;
};

export const UpdatePromptOwner2 = {
  Vendor: "vendor",
} as const;
export type UpdatePromptOwner2 = ClosedEnum<typeof UpdatePromptOwner2>;

export type UpdatePromptOwner = string | UpdatePromptOwner2;

/**
 * The type of the model
 */
export const UpdatePromptPromptsModelType = {
  Chat: "chat",
  Completion: "completion",
  Embedding: "embedding",
  Vision: "vision",
  Image: "image",
  Tts: "tts",
  Stt: "stt",
  Rerank: "rerank",
  Moderations: "moderations",
} as const;
/**
 * The type of the model
 */
export type UpdatePromptPromptsModelType = ClosedEnum<
  typeof UpdatePromptPromptsModelType
>;

/**
 * Only supported on `image` models.
 */
export const UpdatePromptPromptsFormat = {
  Url: "url",
  B64Json: "b64_json",
  Text: "text",
  JsonObject: "json_object",
} as const;
/**
 * Only supported on `image` models.
 */
export type UpdatePromptPromptsFormat = ClosedEnum<
  typeof UpdatePromptPromptsFormat
>;

/**
 * Only supported on `image` models.
 */
export const UpdatePromptPromptsQuality = {
  Standard: "standard",
  Hd: "hd",
} as const;
/**
 * Only supported on `image` models.
 */
export type UpdatePromptPromptsQuality = ClosedEnum<
  typeof UpdatePromptPromptsQuality
>;

export const UpdatePromptResponseFormatPromptsResponse200Type = {
  JsonObject: "json_object",
} as const;
export type UpdatePromptResponseFormatPromptsResponse200Type = ClosedEnum<
  typeof UpdatePromptResponseFormatPromptsResponse200Type
>;

export type UpdatePromptResponseFormatPrompts2 = {
  type: UpdatePromptResponseFormatPromptsResponse200Type;
};

export const UpdatePromptResponseFormatPromptsResponseType = {
  JsonSchema: "json_schema",
} as const;
export type UpdatePromptResponseFormatPromptsResponseType = ClosedEnum<
  typeof UpdatePromptResponseFormatPromptsResponseType
>;

export type UpdatePromptResponseFormatPromptsJsonSchema = {
  name: string;
  strict: boolean;
  schema: { [k: string]: any };
};

export type UpdatePromptResponseFormatPrompts1 = {
  type: UpdatePromptResponseFormatPromptsResponseType;
  jsonSchema: UpdatePromptResponseFormatPromptsJsonSchema;
};

/**
 * An object specifying the format that the model must output.
 *
 * @remarks
 *
 *  Setting to `{ "type": "json_schema", "json_schema": {...} }` enables Structured Outputs which ensures the model will match your supplied JSON schema
 *
 *  Setting to `{ "type": "json_object" }` enables JSON mode, which ensures the message the model generates is valid JSON.
 *
 * Important: when using JSON mode, you must also instruct the model to produce JSON yourself via a system or user message. Without this, the model may generate an unending stream of whitespace until the generation reaches the token limit, resulting in a long-running and seemingly "stuck" request. Also note that the message content may be partially cut off if finish_reason="length", which indicates the generation exceeded max_tokens or the conversation exceeded the max context length.
 */
export type UpdatePromptPromptsResponseFormat =
  | UpdatePromptResponseFormatPrompts2
  | UpdatePromptResponseFormatPrompts1;

/**
 * The version of photoReal to use. Must be v1 or v2. Only available for `leonardoai` provider
 */
export const UpdatePromptPromptsPhotoRealVersion = {
  V1: "v1",
  V2: "v2",
} as const;
/**
 * The version of photoReal to use. Must be v1 or v2. Only available for `leonardoai` provider
 */
export type UpdatePromptPromptsPhotoRealVersion = ClosedEnum<
  typeof UpdatePromptPromptsPhotoRealVersion
>;

/**
 * The format to return the embeddings
 */
export const UpdatePromptPromptsEncodingFormat = {
  Float: "float",
  Base64: "base64",
} as const;
/**
 * The format to return the embeddings
 */
export type UpdatePromptPromptsEncodingFormat = ClosedEnum<
  typeof UpdatePromptPromptsEncodingFormat
>;

/**
 * Constrains effort on reasoning for reasoning models. Reducing reasoning effort can result in faster responses and fewer tokens used on reasoning in a response.
 */
export const UpdatePromptPromptsReasoningEffort = {
  Low: "low",
  Medium: "medium",
  High: "high",
} as const;
/**
 * Constrains effort on reasoning for reasoning models. Reducing reasoning effort can result in faster responses and fewer tokens used on reasoning in a response.
 */
export type UpdatePromptPromptsReasoningEffort = ClosedEnum<
  typeof UpdatePromptPromptsReasoningEffort
>;

/**
 * Model Parameters: Not all parameters apply to every model
 */
export type UpdatePromptPromptsModelParameters = {
  /**
   * Only supported on `chat` and `completion` models.
   */
  temperature?: number | undefined;
  /**
   * Only supported on `chat` and `completion` models.
   */
  maxTokens?: number | undefined;
  /**
   * Only supported on `chat` and `completion` models.
   */
  topK?: number | undefined;
  /**
   * Only supported on `chat` and `completion` models.
   */
  topP?: number | undefined;
  /**
   * Only supported on `chat` and `completion` models.
   */
  frequencyPenalty?: number | undefined;
  /**
   * Only supported on `chat` and `completion` models.
   */
  presencePenalty?: number | undefined;
  /**
   * Only supported on `image` models.
   */
  numImages?: number | undefined;
  /**
   * Best effort deterministic seed for the model. Currently only OpenAI models support these
   */
  seed?: number | undefined;
  /**
   * Only supported on `image` models.
   */
  format?: UpdatePromptPromptsFormat | undefined;
  /**
   * Only supported on `image` models.
   */
  dimensions?: string | undefined;
  /**
   * Only supported on `image` models.
   */
  quality?: UpdatePromptPromptsQuality | undefined;
  /**
   * Only supported on `image` models.
   */
  style?: string | undefined;
  /**
   * An object specifying the format that the model must output.
   *
   * @remarks
   *
   *  Setting to `{ "type": "json_schema", "json_schema": {...} }` enables Structured Outputs which ensures the model will match your supplied JSON schema
   *
   *  Setting to `{ "type": "json_object" }` enables JSON mode, which ensures the message the model generates is valid JSON.
   *
   * Important: when using JSON mode, you must also instruct the model to produce JSON yourself via a system or user message. Without this, the model may generate an unending stream of whitespace until the generation reaches the token limit, resulting in a long-running and seemingly "stuck" request. Also note that the message content may be partially cut off if finish_reason="length", which indicates the generation exceeded max_tokens or the conversation exceeded the max context length.
   */
  responseFormat?:
    | UpdatePromptResponseFormatPrompts2
    | UpdatePromptResponseFormatPrompts1
    | null
    | undefined;
  /**
   * The version of photoReal to use. Must be v1 or v2. Only available for `leonardoai` provider
   */
  photoRealVersion?: UpdatePromptPromptsPhotoRealVersion | undefined;
  /**
   * The format to return the embeddings
   */
  encodingFormat?: UpdatePromptPromptsEncodingFormat | undefined;
  /**
   * Constrains effort on reasoning for reasoning models. Reducing reasoning effort can result in faster responses and fewer tokens used on reasoning in a response.
   */
  reasoningEffort?: UpdatePromptPromptsReasoningEffort | undefined;
};

export const UpdatePromptPromptsProvider = {
  Cohere: "cohere",
  Openai: "openai",
  Anthropic: "anthropic",
  Huggingface: "huggingface",
  Replicate: "replicate",
  Google: "google",
  GoogleAi: "google-ai",
  Azure: "azure",
  Aws: "aws",
  Anyscale: "anyscale",
  Perplexity: "perplexity",
  Groq: "groq",
  Fal: "fal",
  Leonardoai: "leonardoai",
  Nvidia: "nvidia",
  Jina: "jina",
  Togetherai: "togetherai",
  Elevenlabs: "elevenlabs",
} as const;
export type UpdatePromptPromptsProvider = ClosedEnum<
  typeof UpdatePromptPromptsProvider
>;

/**
 * The role of the prompt message
 */
export const UpdatePromptPromptsRole = {
  System: "system",
  Assistant: "assistant",
  User: "user",
  Exception: "exception",
  Tool: "tool",
  Prompt: "prompt",
  Correction: "correction",
  ExpectedOutput: "expected_output",
} as const;
/**
 * The role of the prompt message
 */
export type UpdatePromptPromptsRole = ClosedEnum<
  typeof UpdatePromptPromptsRole
>;

export const UpdatePrompt2PromptsResponse200Type = {
  ImageUrl: "image_url",
} as const;
export type UpdatePrompt2PromptsResponse200Type = ClosedEnum<
  typeof UpdatePrompt2PromptsResponse200Type
>;

export type UpdatePrompt2PromptsImageUrl = {
  /**
   * The orq.ai id of the image
   */
  id?: string | undefined;
  /**
   * Either a URL of the image or the base64 encoded data URI.
   */
  url: string;
  /**
   * Specifies the detail level of the image. Currently only supported with OpenAI models
   */
  detail?: string | undefined;
};

/**
 * The image part of the prompt message. Only supported with vision models.
 */
export type UpdatePrompt2Prompts2 = {
  type: UpdatePrompt2PromptsResponse200Type;
  imageUrl: UpdatePrompt2PromptsImageUrl;
};

export const UpdatePrompt2PromptsResponseType = {
  Text: "text",
} as const;
export type UpdatePrompt2PromptsResponseType = ClosedEnum<
  typeof UpdatePrompt2PromptsResponseType
>;

/**
 * Text content part of a prompt message
 */
export type UpdatePrompt2Prompts1 = {
  type: UpdatePrompt2PromptsResponseType;
  text: string;
};

export type UpdatePromptContentPrompts2 =
  | UpdatePrompt2Prompts1
  | UpdatePrompt2Prompts2;

/**
 * The contents of the user message. Either the text content of the message or an array of content parts with a defined type, each can be of type `text` or `image_url` when passing in images. You can pass multiple images by adding multiple `image_url` content parts.
 */
export type UpdatePromptPromptsContent =
  | string
  | Array<UpdatePrompt2Prompts1 | UpdatePrompt2Prompts2>;

export const UpdatePromptPromptsResponseType = {
  Function: "function",
} as const;
export type UpdatePromptPromptsResponseType = ClosedEnum<
  typeof UpdatePromptPromptsResponseType
>;

export type UpdatePromptPromptsFunction = {
  name: string;
  /**
   * JSON string arguments for the functions
   */
  arguments: string;
};

export type UpdatePromptPromptsToolCalls = {
  id?: string | undefined;
  index?: number | undefined;
  type: UpdatePromptPromptsResponseType;
  function: UpdatePromptPromptsFunction;
};

export type UpdatePromptPromptsMessages = {
  /**
   * The role of the prompt message
   */
  role: UpdatePromptPromptsRole;
  /**
   * The contents of the user message. Either the text content of the message or an array of content parts with a defined type, each can be of type `text` or `image_url` when passing in images. You can pass multiple images by adding multiple `image_url` content parts.
   */
  content: string | Array<UpdatePrompt2Prompts1 | UpdatePrompt2Prompts2>;
  toolCalls?: Array<UpdatePromptPromptsToolCalls> | undefined;
};

/**
 * A list of messages compatible with the openAI schema
 */
export type UpdatePromptPromptsPromptConfig = {
  stream?: boolean | undefined;
  model?: string | undefined;
  /**
   * The id of the resource
   */
  modelDbId?: string | undefined;
  /**
   * The type of the model
   */
  modelType?: UpdatePromptPromptsModelType | undefined;
  /**
   * Model Parameters: Not all parameters apply to every model
   */
  modelParameters?: UpdatePromptPromptsModelParameters | undefined;
  provider?: UpdatePromptPromptsProvider | undefined;
  /**
   * The id of the resource
   */
  integrationId?: string | null | undefined;
  version?: string | undefined;
  messages: Array<UpdatePromptPromptsMessages>;
};

export const UpdatePromptPromptsUseCases = {
  Agents: "Agents",
  AgentsSimulations: "Agents simulations",
  APIInteraction: "API interaction",
  AutonomousAgents: "Autonomous Agents",
  Chatbots: "Chatbots",
  Classification: "Classification",
  CodeUnderstanding: "Code understanding",
  CodeWriting: "Code writing",
  DocumentsQA: "Documents QA",
  Conversation: "Conversation",
  Extraction: "Extraction",
  MultiModal: "Multi-modal",
  SelfChecking: "Self-checking",
  Sql: "SQL",
  Summarization: "Summarization",
  Tagging: "Tagging",
} as const;
export type UpdatePromptPromptsUseCases = ClosedEnum<
  typeof UpdatePromptPromptsUseCases
>;

/**
 * The language that the prompt is written in. Use this field to categorize the prompt for your own purpose
 */
export const UpdatePromptPromptsLanguage = {
  Chinese: "Chinese",
  Dutch: "Dutch",
  English: "English",
  French: "French",
  German: "German",
  Russian: "Russian",
  Spanish: "Spanish",
} as const;
/**
 * The language that the prompt is written in. Use this field to categorize the prompt for your own purpose
 */
export type UpdatePromptPromptsLanguage = ClosedEnum<
  typeof UpdatePromptPromptsLanguage
>;

export type UpdatePromptPromptsMetadata = {
  /**
   * A list of use cases that the prompt is meant to be used for. Use this field to categorize the prompt for your own purpose
   */
  useCases?: Array<UpdatePromptPromptsUseCases> | undefined;
  /**
   * The language that the prompt is written in. Use this field to categorize the prompt for your own purpose
   */
  language?: UpdatePromptPromptsLanguage | undefined;
};

export const UpdatePromptPromptsType = {
  Prompt: "prompt",
} as const;
export type UpdatePromptPromptsType = ClosedEnum<
  typeof UpdatePromptPromptsType
>;

/**
 * The type of the model
 */
export const UpdatePromptPromptsResponseModelType = {
  Chat: "chat",
  Completion: "completion",
  Embedding: "embedding",
  Vision: "vision",
  Image: "image",
  Tts: "tts",
  Stt: "stt",
  Rerank: "rerank",
  Moderations: "moderations",
} as const;
/**
 * The type of the model
 */
export type UpdatePromptPromptsResponseModelType = ClosedEnum<
  typeof UpdatePromptPromptsResponseModelType
>;

/**
 * Only supported on `image` models.
 */
export const UpdatePromptPromptsResponse200Format = {
  Url: "url",
  B64Json: "b64_json",
  Text: "text",
  JsonObject: "json_object",
} as const;
/**
 * Only supported on `image` models.
 */
export type UpdatePromptPromptsResponse200Format = ClosedEnum<
  typeof UpdatePromptPromptsResponse200Format
>;

/**
 * Only supported on `image` models.
 */
export const UpdatePromptPromptsResponseQuality = {
  Standard: "standard",
  Hd: "hd",
} as const;
/**
 * Only supported on `image` models.
 */
export type UpdatePromptPromptsResponseQuality = ClosedEnum<
  typeof UpdatePromptPromptsResponseQuality
>;

export const UpdatePromptResponseFormatPromptsResponse200ApplicationJSONResponseBodyType =
  {
    JsonObject: "json_object",
  } as const;
export type UpdatePromptResponseFormatPromptsResponse200ApplicationJSONResponseBodyType =
  ClosedEnum<
    typeof UpdatePromptResponseFormatPromptsResponse200ApplicationJSONResponseBodyType
  >;

export type UpdatePromptResponseFormatPromptsResponse2 = {
  type:
    UpdatePromptResponseFormatPromptsResponse200ApplicationJSONResponseBodyType;
};

export const UpdatePromptResponseFormatPromptsResponse200ApplicationJSONType = {
  JsonSchema: "json_schema",
} as const;
export type UpdatePromptResponseFormatPromptsResponse200ApplicationJSONType =
  ClosedEnum<
    typeof UpdatePromptResponseFormatPromptsResponse200ApplicationJSONType
  >;

export type UpdatePromptResponseFormatPromptsResponseJsonSchema = {
  name: string;
  strict: boolean;
  schema: { [k: string]: any };
};

export type UpdatePromptResponseFormatPromptsResponse1 = {
  type: UpdatePromptResponseFormatPromptsResponse200ApplicationJSONType;
  jsonSchema: UpdatePromptResponseFormatPromptsResponseJsonSchema;
};

/**
 * An object specifying the format that the model must output.
 *
 * @remarks
 *
 *  Setting to `{ "type": "json_schema", "json_schema": {...} }` enables Structured Outputs which ensures the model will match your supplied JSON schema
 *
 *  Setting to `{ "type": "json_object" }` enables JSON mode, which ensures the message the model generates is valid JSON.
 *
 * Important: when using JSON mode, you must also instruct the model to produce JSON yourself via a system or user message. Without this, the model may generate an unending stream of whitespace until the generation reaches the token limit, resulting in a long-running and seemingly "stuck" request. Also note that the message content may be partially cut off if finish_reason="length", which indicates the generation exceeded max_tokens or the conversation exceeded the max context length.
 */
export type UpdatePromptPromptsResponseResponseFormat =
  | UpdatePromptResponseFormatPromptsResponse2
  | UpdatePromptResponseFormatPromptsResponse1;

/**
 * The version of photoReal to use. Must be v1 or v2. Only available for `leonardoai` provider
 */
export const UpdatePromptPromptsResponsePhotoRealVersion = {
  V1: "v1",
  V2: "v2",
} as const;
/**
 * The version of photoReal to use. Must be v1 or v2. Only available for `leonardoai` provider
 */
export type UpdatePromptPromptsResponsePhotoRealVersion = ClosedEnum<
  typeof UpdatePromptPromptsResponsePhotoRealVersion
>;

/**
 * The format to return the embeddings
 */
export const UpdatePromptPromptsResponseEncodingFormat = {
  Float: "float",
  Base64: "base64",
} as const;
/**
 * The format to return the embeddings
 */
export type UpdatePromptPromptsResponseEncodingFormat = ClosedEnum<
  typeof UpdatePromptPromptsResponseEncodingFormat
>;

/**
 * Constrains effort on reasoning for reasoning models. Reducing reasoning effort can result in faster responses and fewer tokens used on reasoning in a response.
 */
export const UpdatePromptPromptsResponseReasoningEffort = {
  Low: "low",
  Medium: "medium",
  High: "high",
} as const;
/**
 * Constrains effort on reasoning for reasoning models. Reducing reasoning effort can result in faster responses and fewer tokens used on reasoning in a response.
 */
export type UpdatePromptPromptsResponseReasoningEffort = ClosedEnum<
  typeof UpdatePromptPromptsResponseReasoningEffort
>;

/**
 * Model Parameters: Not all parameters apply to every model
 */
export type UpdatePromptPromptsResponseModelParameters = {
  /**
   * Only supported on `chat` and `completion` models.
   */
  temperature?: number | undefined;
  /**
   * Only supported on `chat` and `completion` models.
   */
  maxTokens?: number | undefined;
  /**
   * Only supported on `chat` and `completion` models.
   */
  topK?: number | undefined;
  /**
   * Only supported on `chat` and `completion` models.
   */
  topP?: number | undefined;
  /**
   * Only supported on `chat` and `completion` models.
   */
  frequencyPenalty?: number | undefined;
  /**
   * Only supported on `chat` and `completion` models.
   */
  presencePenalty?: number | undefined;
  /**
   * Only supported on `image` models.
   */
  numImages?: number | undefined;
  /**
   * Best effort deterministic seed for the model. Currently only OpenAI models support these
   */
  seed?: number | undefined;
  /**
   * Only supported on `image` models.
   */
  format?: UpdatePromptPromptsResponse200Format | undefined;
  /**
   * Only supported on `image` models.
   */
  dimensions?: string | undefined;
  /**
   * Only supported on `image` models.
   */
  quality?: UpdatePromptPromptsResponseQuality | undefined;
  /**
   * Only supported on `image` models.
   */
  style?: string | undefined;
  /**
   * An object specifying the format that the model must output.
   *
   * @remarks
   *
   *  Setting to `{ "type": "json_schema", "json_schema": {...} }` enables Structured Outputs which ensures the model will match your supplied JSON schema
   *
   *  Setting to `{ "type": "json_object" }` enables JSON mode, which ensures the message the model generates is valid JSON.
   *
   * Important: when using JSON mode, you must also instruct the model to produce JSON yourself via a system or user message. Without this, the model may generate an unending stream of whitespace until the generation reaches the token limit, resulting in a long-running and seemingly "stuck" request. Also note that the message content may be partially cut off if finish_reason="length", which indicates the generation exceeded max_tokens or the conversation exceeded the max context length.
   */
  responseFormat?:
    | UpdatePromptResponseFormatPromptsResponse2
    | UpdatePromptResponseFormatPromptsResponse1
    | null
    | undefined;
  /**
   * The version of photoReal to use. Must be v1 or v2. Only available for `leonardoai` provider
   */
  photoRealVersion?: UpdatePromptPromptsResponsePhotoRealVersion | undefined;
  /**
   * The format to return the embeddings
   */
  encodingFormat?: UpdatePromptPromptsResponseEncodingFormat | undefined;
  /**
   * Constrains effort on reasoning for reasoning models. Reducing reasoning effort can result in faster responses and fewer tokens used on reasoning in a response.
   */
  reasoningEffort?: UpdatePromptPromptsResponseReasoningEffort | undefined;
};

export const UpdatePromptPromptsResponseProvider = {
  Cohere: "cohere",
  Openai: "openai",
  Anthropic: "anthropic",
  Huggingface: "huggingface",
  Replicate: "replicate",
  Google: "google",
  GoogleAi: "google-ai",
  Azure: "azure",
  Aws: "aws",
  Anyscale: "anyscale",
  Perplexity: "perplexity",
  Groq: "groq",
  Fal: "fal",
  Leonardoai: "leonardoai",
  Nvidia: "nvidia",
  Jina: "jina",
  Togetherai: "togetherai",
  Elevenlabs: "elevenlabs",
} as const;
export type UpdatePromptPromptsResponseProvider = ClosedEnum<
  typeof UpdatePromptPromptsResponseProvider
>;

/**
 * The role of the prompt message
 */
export const UpdatePromptPromptsResponseRole = {
  System: "system",
  Assistant: "assistant",
  User: "user",
  Exception: "exception",
  Tool: "tool",
  Prompt: "prompt",
  Correction: "correction",
  ExpectedOutput: "expected_output",
} as const;
/**
 * The role of the prompt message
 */
export type UpdatePromptPromptsResponseRole = ClosedEnum<
  typeof UpdatePromptPromptsResponseRole
>;

export const UpdatePrompt2PromptsResponse200ApplicationJSONResponseBodyType = {
  ImageUrl: "image_url",
} as const;
export type UpdatePrompt2PromptsResponse200ApplicationJSONResponseBodyType =
  ClosedEnum<
    typeof UpdatePrompt2PromptsResponse200ApplicationJSONResponseBodyType
  >;

export type UpdatePrompt2PromptsResponseImageUrl = {
  /**
   * The orq.ai id of the image
   */
  id?: string | undefined;
  /**
   * Either a URL of the image or the base64 encoded data URI.
   */
  url: string;
  /**
   * Specifies the detail level of the image. Currently only supported with OpenAI models
   */
  detail?: string | undefined;
};

/**
 * The image part of the prompt message. Only supported with vision models.
 */
export type UpdatePrompt2PromptsResponse2 = {
  type: UpdatePrompt2PromptsResponse200ApplicationJSONResponseBodyType;
  imageUrl: UpdatePrompt2PromptsResponseImageUrl;
};

export const UpdatePrompt2PromptsResponse200ApplicationJSONType = {
  Text: "text",
} as const;
export type UpdatePrompt2PromptsResponse200ApplicationJSONType = ClosedEnum<
  typeof UpdatePrompt2PromptsResponse200ApplicationJSONType
>;

/**
 * Text content part of a prompt message
 */
export type UpdatePrompt2PromptsResponse1 = {
  type: UpdatePrompt2PromptsResponse200ApplicationJSONType;
  text: string;
};

export type UpdatePromptContentPromptsResponse2 =
  | UpdatePrompt2PromptsResponse1
  | UpdatePrompt2PromptsResponse2;

/**
 * The contents of the user message. Either the text content of the message or an array of content parts with a defined type, each can be of type `text` or `image_url` when passing in images. You can pass multiple images by adding multiple `image_url` content parts.
 */
export type UpdatePromptPromptsResponseContent =
  | string
  | Array<UpdatePrompt2PromptsResponse1 | UpdatePrompt2PromptsResponse2>;

export const UpdatePromptPromptsResponse200Type = {
  Function: "function",
} as const;
export type UpdatePromptPromptsResponse200Type = ClosedEnum<
  typeof UpdatePromptPromptsResponse200Type
>;

export type UpdatePromptPromptsResponseFunction = {
  name: string;
  /**
   * JSON string arguments for the functions
   */
  arguments: string;
};

export type UpdatePromptPromptsResponseToolCalls = {
  id?: string | undefined;
  index?: number | undefined;
  type: UpdatePromptPromptsResponse200Type;
  function: UpdatePromptPromptsResponseFunction;
};

export type UpdatePromptPromptsResponseMessages = {
  /**
   * The role of the prompt message
   */
  role: UpdatePromptPromptsResponseRole;
  /**
   * The contents of the user message. Either the text content of the message or an array of content parts with a defined type, each can be of type `text` or `image_url` when passing in images. You can pass multiple images by adding multiple `image_url` content parts.
   */
  content:
    | string
    | Array<UpdatePrompt2PromptsResponse1 | UpdatePrompt2PromptsResponse2>;
  toolCalls?: Array<UpdatePromptPromptsResponseToolCalls> | undefined;
};

/**
 * A list of messages compatible with the openAI schema
 */
export type UpdatePromptPromptsResponsePromptConfig = {
  stream?: boolean | undefined;
  model?: string | undefined;
  /**
   * The id of the resource
   */
  modelDbId?: string | undefined;
  /**
   * The type of the model
   */
  modelType?: UpdatePromptPromptsResponseModelType | undefined;
  /**
   * Model Parameters: Not all parameters apply to every model
   */
  modelParameters?: UpdatePromptPromptsResponseModelParameters | undefined;
  provider?: UpdatePromptPromptsResponseProvider | undefined;
  /**
   * The id of the resource
   */
  integrationId?: string | null | undefined;
  version?: string | undefined;
  messages: Array<UpdatePromptPromptsResponseMessages>;
};

export const UpdatePromptPromptsResponseUseCases = {
  Agents: "Agents",
  AgentsSimulations: "Agents simulations",
  APIInteraction: "API interaction",
  AutonomousAgents: "Autonomous Agents",
  Chatbots: "Chatbots",
  Classification: "Classification",
  CodeUnderstanding: "Code understanding",
  CodeWriting: "Code writing",
  DocumentsQA: "Documents QA",
  Conversation: "Conversation",
  Extraction: "Extraction",
  MultiModal: "Multi-modal",
  SelfChecking: "Self-checking",
  Sql: "SQL",
  Summarization: "Summarization",
  Tagging: "Tagging",
} as const;
export type UpdatePromptPromptsResponseUseCases = ClosedEnum<
  typeof UpdatePromptPromptsResponseUseCases
>;

/**
 * The language that the prompt is written in. Use this field to categorize the prompt for your own purpose
 */
export const UpdatePromptPromptsResponseLanguage = {
  Chinese: "Chinese",
  Dutch: "Dutch",
  English: "English",
  French: "French",
  German: "German",
  Russian: "Russian",
  Spanish: "Spanish",
} as const;
/**
 * The language that the prompt is written in. Use this field to categorize the prompt for your own purpose
 */
export type UpdatePromptPromptsResponseLanguage = ClosedEnum<
  typeof UpdatePromptPromptsResponseLanguage
>;

export type UpdatePromptPromptsResponseMetadata = {
  /**
   * A list of use cases that the prompt is meant to be used for. Use this field to categorize the prompt for your own purpose
   */
  useCases?: Array<UpdatePromptPromptsResponseUseCases> | undefined;
  /**
   * The language that the prompt is written in. Use this field to categorize the prompt for your own purpose
   */
  language?: UpdatePromptPromptsResponseLanguage | undefined;
};

/**
 * Prompt version model returned from the API
 */
export type UpdatePromptVersions = {
  id: string;
  createdById: string;
  /**
   * The prompt’s name, meant to be displayable in the UI.
   */
  displayName: string;
  updatedById: string;
  /**
   * The prompt’s description, meant to be displayable in the UI. Use this field to optionally store a long form explanation of the prompt for your own purpose
   */
  description?: string | null | undefined;
  /**
   * A list of messages compatible with the openAI schema
   */
  promptConfig: UpdatePromptPromptsResponsePromptConfig;
  metadata: UpdatePromptPromptsResponseMetadata;
  timestamp: string;
};

/**
 * Prompt model returned from the API
 */
export type UpdatePromptResponseBody = {
  id: string;
  owner: string | UpdatePromptOwner2;
  domainId: string;
  createdById: string;
  /**
   * The prompt’s name, meant to be displayable in the UI.
   */
  displayName: string;
  updatedById: string;
  /**
   * The prompt’s description, meant to be displayable in the UI. Use this field to optionally store a long form explanation of the prompt for your own purpose
   */
  description?: string | null | undefined;
  /**
   * A list of messages compatible with the openAI schema
   */
  promptConfig: UpdatePromptPromptsPromptConfig;
  metadata: UpdatePromptPromptsMetadata;
  /**
   * The date and time the resource was created
   */
  created?: Date | undefined;
  /**
   * The date and time the resource was last updated
   */
  updated?: Date | undefined;
  type: UpdatePromptPromptsType;
  versions: Array<UpdatePromptVersions>;
};

/** @internal */
export const UpdatePromptGlobals$inboundSchema: z.ZodType<
  UpdatePromptGlobals,
  z.ZodTypeDef,
  unknown
> = z.object({
  contactId: z.string().optional(),
});

/** @internal */
export type UpdatePromptGlobals$Outbound = {
  contactId?: string | undefined;
};

/** @internal */
export const UpdatePromptGlobals$outboundSchema: z.ZodType<
  UpdatePromptGlobals$Outbound,
  z.ZodTypeDef,
  UpdatePromptGlobals
> = z.object({
  contactId: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdatePromptGlobals$ {
  /** @deprecated use `UpdatePromptGlobals$inboundSchema` instead. */
  export const inboundSchema = UpdatePromptGlobals$inboundSchema;
  /** @deprecated use `UpdatePromptGlobals$outboundSchema` instead. */
  export const outboundSchema = UpdatePromptGlobals$outboundSchema;
  /** @deprecated use `UpdatePromptGlobals$Outbound` instead. */
  export type Outbound = UpdatePromptGlobals$Outbound;
}

export function updatePromptGlobalsToJSON(
  updatePromptGlobals: UpdatePromptGlobals,
): string {
  return JSON.stringify(
    UpdatePromptGlobals$outboundSchema.parse(updatePromptGlobals),
  );
}

export function updatePromptGlobalsFromJSON(
  jsonString: string,
): SafeParseResult<UpdatePromptGlobals, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdatePromptGlobals$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdatePromptGlobals' from JSON`,
  );
}

/** @internal */
export const UpdatePromptModelType$inboundSchema: z.ZodNativeEnum<
  typeof UpdatePromptModelType
> = z.nativeEnum(UpdatePromptModelType);

/** @internal */
export const UpdatePromptModelType$outboundSchema: z.ZodNativeEnum<
  typeof UpdatePromptModelType
> = UpdatePromptModelType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdatePromptModelType$ {
  /** @deprecated use `UpdatePromptModelType$inboundSchema` instead. */
  export const inboundSchema = UpdatePromptModelType$inboundSchema;
  /** @deprecated use `UpdatePromptModelType$outboundSchema` instead. */
  export const outboundSchema = UpdatePromptModelType$outboundSchema;
}

/** @internal */
export const UpdatePromptFormat$inboundSchema: z.ZodNativeEnum<
  typeof UpdatePromptFormat
> = z.nativeEnum(UpdatePromptFormat);

/** @internal */
export const UpdatePromptFormat$outboundSchema: z.ZodNativeEnum<
  typeof UpdatePromptFormat
> = UpdatePromptFormat$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdatePromptFormat$ {
  /** @deprecated use `UpdatePromptFormat$inboundSchema` instead. */
  export const inboundSchema = UpdatePromptFormat$inboundSchema;
  /** @deprecated use `UpdatePromptFormat$outboundSchema` instead. */
  export const outboundSchema = UpdatePromptFormat$outboundSchema;
}

/** @internal */
export const UpdatePromptQuality$inboundSchema: z.ZodNativeEnum<
  typeof UpdatePromptQuality
> = z.nativeEnum(UpdatePromptQuality);

/** @internal */
export const UpdatePromptQuality$outboundSchema: z.ZodNativeEnum<
  typeof UpdatePromptQuality
> = UpdatePromptQuality$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdatePromptQuality$ {
  /** @deprecated use `UpdatePromptQuality$inboundSchema` instead. */
  export const inboundSchema = UpdatePromptQuality$inboundSchema;
  /** @deprecated use `UpdatePromptQuality$outboundSchema` instead. */
  export const outboundSchema = UpdatePromptQuality$outboundSchema;
}

/** @internal */
export const UpdatePromptResponseFormatPromptsType$inboundSchema:
  z.ZodNativeEnum<typeof UpdatePromptResponseFormatPromptsType> = z.nativeEnum(
    UpdatePromptResponseFormatPromptsType,
  );

/** @internal */
export const UpdatePromptResponseFormatPromptsType$outboundSchema:
  z.ZodNativeEnum<typeof UpdatePromptResponseFormatPromptsType> =
    UpdatePromptResponseFormatPromptsType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdatePromptResponseFormatPromptsType$ {
  /** @deprecated use `UpdatePromptResponseFormatPromptsType$inboundSchema` instead. */
  export const inboundSchema =
    UpdatePromptResponseFormatPromptsType$inboundSchema;
  /** @deprecated use `UpdatePromptResponseFormatPromptsType$outboundSchema` instead. */
  export const outboundSchema =
    UpdatePromptResponseFormatPromptsType$outboundSchema;
}

/** @internal */
export const UpdatePromptResponseFormat2$inboundSchema: z.ZodType<
  UpdatePromptResponseFormat2,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: UpdatePromptResponseFormatPromptsType$inboundSchema,
});

/** @internal */
export type UpdatePromptResponseFormat2$Outbound = {
  type: string;
};

/** @internal */
export const UpdatePromptResponseFormat2$outboundSchema: z.ZodType<
  UpdatePromptResponseFormat2$Outbound,
  z.ZodTypeDef,
  UpdatePromptResponseFormat2
> = z.object({
  type: UpdatePromptResponseFormatPromptsType$outboundSchema,
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdatePromptResponseFormat2$ {
  /** @deprecated use `UpdatePromptResponseFormat2$inboundSchema` instead. */
  export const inboundSchema = UpdatePromptResponseFormat2$inboundSchema;
  /** @deprecated use `UpdatePromptResponseFormat2$outboundSchema` instead. */
  export const outboundSchema = UpdatePromptResponseFormat2$outboundSchema;
  /** @deprecated use `UpdatePromptResponseFormat2$Outbound` instead. */
  export type Outbound = UpdatePromptResponseFormat2$Outbound;
}

export function updatePromptResponseFormat2ToJSON(
  updatePromptResponseFormat2: UpdatePromptResponseFormat2,
): string {
  return JSON.stringify(
    UpdatePromptResponseFormat2$outboundSchema.parse(
      updatePromptResponseFormat2,
    ),
  );
}

export function updatePromptResponseFormat2FromJSON(
  jsonString: string,
): SafeParseResult<UpdatePromptResponseFormat2, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdatePromptResponseFormat2$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdatePromptResponseFormat2' from JSON`,
  );
}

/** @internal */
export const UpdatePromptResponseFormatType$inboundSchema: z.ZodNativeEnum<
  typeof UpdatePromptResponseFormatType
> = z.nativeEnum(UpdatePromptResponseFormatType);

/** @internal */
export const UpdatePromptResponseFormatType$outboundSchema: z.ZodNativeEnum<
  typeof UpdatePromptResponseFormatType
> = UpdatePromptResponseFormatType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdatePromptResponseFormatType$ {
  /** @deprecated use `UpdatePromptResponseFormatType$inboundSchema` instead. */
  export const inboundSchema = UpdatePromptResponseFormatType$inboundSchema;
  /** @deprecated use `UpdatePromptResponseFormatType$outboundSchema` instead. */
  export const outboundSchema = UpdatePromptResponseFormatType$outboundSchema;
}

/** @internal */
export const UpdatePromptResponseFormatJsonSchema$inboundSchema: z.ZodType<
  UpdatePromptResponseFormatJsonSchema,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.string(),
  strict: z.boolean(),
  schema: z.record(z.any()),
});

/** @internal */
export type UpdatePromptResponseFormatJsonSchema$Outbound = {
  name: string;
  strict: boolean;
  schema: { [k: string]: any };
};

/** @internal */
export const UpdatePromptResponseFormatJsonSchema$outboundSchema: z.ZodType<
  UpdatePromptResponseFormatJsonSchema$Outbound,
  z.ZodTypeDef,
  UpdatePromptResponseFormatJsonSchema
> = z.object({
  name: z.string(),
  strict: z.boolean(),
  schema: z.record(z.any()),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdatePromptResponseFormatJsonSchema$ {
  /** @deprecated use `UpdatePromptResponseFormatJsonSchema$inboundSchema` instead. */
  export const inboundSchema =
    UpdatePromptResponseFormatJsonSchema$inboundSchema;
  /** @deprecated use `UpdatePromptResponseFormatJsonSchema$outboundSchema` instead. */
  export const outboundSchema =
    UpdatePromptResponseFormatJsonSchema$outboundSchema;
  /** @deprecated use `UpdatePromptResponseFormatJsonSchema$Outbound` instead. */
  export type Outbound = UpdatePromptResponseFormatJsonSchema$Outbound;
}

export function updatePromptResponseFormatJsonSchemaToJSON(
  updatePromptResponseFormatJsonSchema: UpdatePromptResponseFormatJsonSchema,
): string {
  return JSON.stringify(
    UpdatePromptResponseFormatJsonSchema$outboundSchema.parse(
      updatePromptResponseFormatJsonSchema,
    ),
  );
}

export function updatePromptResponseFormatJsonSchemaFromJSON(
  jsonString: string,
): SafeParseResult<UpdatePromptResponseFormatJsonSchema, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      UpdatePromptResponseFormatJsonSchema$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdatePromptResponseFormatJsonSchema' from JSON`,
  );
}

/** @internal */
export const UpdatePromptResponseFormat1$inboundSchema: z.ZodType<
  UpdatePromptResponseFormat1,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: UpdatePromptResponseFormatType$inboundSchema,
  json_schema: z.lazy(() => UpdatePromptResponseFormatJsonSchema$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "json_schema": "jsonSchema",
  });
});

/** @internal */
export type UpdatePromptResponseFormat1$Outbound = {
  type: string;
  json_schema: UpdatePromptResponseFormatJsonSchema$Outbound;
};

/** @internal */
export const UpdatePromptResponseFormat1$outboundSchema: z.ZodType<
  UpdatePromptResponseFormat1$Outbound,
  z.ZodTypeDef,
  UpdatePromptResponseFormat1
> = z.object({
  type: UpdatePromptResponseFormatType$outboundSchema,
  jsonSchema: z.lazy(() => UpdatePromptResponseFormatJsonSchema$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    jsonSchema: "json_schema",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdatePromptResponseFormat1$ {
  /** @deprecated use `UpdatePromptResponseFormat1$inboundSchema` instead. */
  export const inboundSchema = UpdatePromptResponseFormat1$inboundSchema;
  /** @deprecated use `UpdatePromptResponseFormat1$outboundSchema` instead. */
  export const outboundSchema = UpdatePromptResponseFormat1$outboundSchema;
  /** @deprecated use `UpdatePromptResponseFormat1$Outbound` instead. */
  export type Outbound = UpdatePromptResponseFormat1$Outbound;
}

export function updatePromptResponseFormat1ToJSON(
  updatePromptResponseFormat1: UpdatePromptResponseFormat1,
): string {
  return JSON.stringify(
    UpdatePromptResponseFormat1$outboundSchema.parse(
      updatePromptResponseFormat1,
    ),
  );
}

export function updatePromptResponseFormat1FromJSON(
  jsonString: string,
): SafeParseResult<UpdatePromptResponseFormat1, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdatePromptResponseFormat1$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdatePromptResponseFormat1' from JSON`,
  );
}

/** @internal */
export const UpdatePromptResponseFormat$inboundSchema: z.ZodType<
  UpdatePromptResponseFormat,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => UpdatePromptResponseFormat2$inboundSchema),
  z.lazy(() => UpdatePromptResponseFormat1$inboundSchema),
]);

/** @internal */
export type UpdatePromptResponseFormat$Outbound =
  | UpdatePromptResponseFormat2$Outbound
  | UpdatePromptResponseFormat1$Outbound;

/** @internal */
export const UpdatePromptResponseFormat$outboundSchema: z.ZodType<
  UpdatePromptResponseFormat$Outbound,
  z.ZodTypeDef,
  UpdatePromptResponseFormat
> = z.union([
  z.lazy(() => UpdatePromptResponseFormat2$outboundSchema),
  z.lazy(() => UpdatePromptResponseFormat1$outboundSchema),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdatePromptResponseFormat$ {
  /** @deprecated use `UpdatePromptResponseFormat$inboundSchema` instead. */
  export const inboundSchema = UpdatePromptResponseFormat$inboundSchema;
  /** @deprecated use `UpdatePromptResponseFormat$outboundSchema` instead. */
  export const outboundSchema = UpdatePromptResponseFormat$outboundSchema;
  /** @deprecated use `UpdatePromptResponseFormat$Outbound` instead. */
  export type Outbound = UpdatePromptResponseFormat$Outbound;
}

export function updatePromptResponseFormatToJSON(
  updatePromptResponseFormat: UpdatePromptResponseFormat,
): string {
  return JSON.stringify(
    UpdatePromptResponseFormat$outboundSchema.parse(updatePromptResponseFormat),
  );
}

export function updatePromptResponseFormatFromJSON(
  jsonString: string,
): SafeParseResult<UpdatePromptResponseFormat, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdatePromptResponseFormat$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdatePromptResponseFormat' from JSON`,
  );
}

/** @internal */
export const UpdatePromptPhotoRealVersion$inboundSchema: z.ZodNativeEnum<
  typeof UpdatePromptPhotoRealVersion
> = z.nativeEnum(UpdatePromptPhotoRealVersion);

/** @internal */
export const UpdatePromptPhotoRealVersion$outboundSchema: z.ZodNativeEnum<
  typeof UpdatePromptPhotoRealVersion
> = UpdatePromptPhotoRealVersion$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdatePromptPhotoRealVersion$ {
  /** @deprecated use `UpdatePromptPhotoRealVersion$inboundSchema` instead. */
  export const inboundSchema = UpdatePromptPhotoRealVersion$inboundSchema;
  /** @deprecated use `UpdatePromptPhotoRealVersion$outboundSchema` instead. */
  export const outboundSchema = UpdatePromptPhotoRealVersion$outboundSchema;
}

/** @internal */
export const UpdatePromptEncodingFormat$inboundSchema: z.ZodNativeEnum<
  typeof UpdatePromptEncodingFormat
> = z.nativeEnum(UpdatePromptEncodingFormat);

/** @internal */
export const UpdatePromptEncodingFormat$outboundSchema: z.ZodNativeEnum<
  typeof UpdatePromptEncodingFormat
> = UpdatePromptEncodingFormat$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdatePromptEncodingFormat$ {
  /** @deprecated use `UpdatePromptEncodingFormat$inboundSchema` instead. */
  export const inboundSchema = UpdatePromptEncodingFormat$inboundSchema;
  /** @deprecated use `UpdatePromptEncodingFormat$outboundSchema` instead. */
  export const outboundSchema = UpdatePromptEncodingFormat$outboundSchema;
}

/** @internal */
export const UpdatePromptReasoningEffort$inboundSchema: z.ZodNativeEnum<
  typeof UpdatePromptReasoningEffort
> = z.nativeEnum(UpdatePromptReasoningEffort);

/** @internal */
export const UpdatePromptReasoningEffort$outboundSchema: z.ZodNativeEnum<
  typeof UpdatePromptReasoningEffort
> = UpdatePromptReasoningEffort$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdatePromptReasoningEffort$ {
  /** @deprecated use `UpdatePromptReasoningEffort$inboundSchema` instead. */
  export const inboundSchema = UpdatePromptReasoningEffort$inboundSchema;
  /** @deprecated use `UpdatePromptReasoningEffort$outboundSchema` instead. */
  export const outboundSchema = UpdatePromptReasoningEffort$outboundSchema;
}

/** @internal */
export const UpdatePromptModelParameters$inboundSchema: z.ZodType<
  UpdatePromptModelParameters,
  z.ZodTypeDef,
  unknown
> = z.object({
  temperature: z.number().optional(),
  maxTokens: z.number().optional(),
  topK: z.number().optional(),
  topP: z.number().optional(),
  frequencyPenalty: z.number().optional(),
  presencePenalty: z.number().optional(),
  numImages: z.number().optional(),
  seed: z.number().optional(),
  format: UpdatePromptFormat$inboundSchema.optional(),
  dimensions: z.string().optional(),
  quality: UpdatePromptQuality$inboundSchema.optional(),
  style: z.string().optional(),
  responseFormat: z.nullable(
    z.union([
      z.lazy(() => UpdatePromptResponseFormat2$inboundSchema),
      z.lazy(() => UpdatePromptResponseFormat1$inboundSchema),
    ]),
  ).optional(),
  photoRealVersion: UpdatePromptPhotoRealVersion$inboundSchema.optional(),
  encoding_format: UpdatePromptEncodingFormat$inboundSchema.optional(),
  reasoningEffort: UpdatePromptReasoningEffort$inboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    "encoding_format": "encodingFormat",
  });
});

/** @internal */
export type UpdatePromptModelParameters$Outbound = {
  temperature?: number | undefined;
  maxTokens?: number | undefined;
  topK?: number | undefined;
  topP?: number | undefined;
  frequencyPenalty?: number | undefined;
  presencePenalty?: number | undefined;
  numImages?: number | undefined;
  seed?: number | undefined;
  format?: string | undefined;
  dimensions?: string | undefined;
  quality?: string | undefined;
  style?: string | undefined;
  responseFormat?:
    | UpdatePromptResponseFormat2$Outbound
    | UpdatePromptResponseFormat1$Outbound
    | null
    | undefined;
  photoRealVersion?: string | undefined;
  encoding_format?: string | undefined;
  reasoningEffort?: string | undefined;
};

/** @internal */
export const UpdatePromptModelParameters$outboundSchema: z.ZodType<
  UpdatePromptModelParameters$Outbound,
  z.ZodTypeDef,
  UpdatePromptModelParameters
> = z.object({
  temperature: z.number().optional(),
  maxTokens: z.number().optional(),
  topK: z.number().optional(),
  topP: z.number().optional(),
  frequencyPenalty: z.number().optional(),
  presencePenalty: z.number().optional(),
  numImages: z.number().optional(),
  seed: z.number().optional(),
  format: UpdatePromptFormat$outboundSchema.optional(),
  dimensions: z.string().optional(),
  quality: UpdatePromptQuality$outboundSchema.optional(),
  style: z.string().optional(),
  responseFormat: z.nullable(
    z.union([
      z.lazy(() => UpdatePromptResponseFormat2$outboundSchema),
      z.lazy(() => UpdatePromptResponseFormat1$outboundSchema),
    ]),
  ).optional(),
  photoRealVersion: UpdatePromptPhotoRealVersion$outboundSchema.optional(),
  encodingFormat: UpdatePromptEncodingFormat$outboundSchema.optional(),
  reasoningEffort: UpdatePromptReasoningEffort$outboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    encodingFormat: "encoding_format",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdatePromptModelParameters$ {
  /** @deprecated use `UpdatePromptModelParameters$inboundSchema` instead. */
  export const inboundSchema = UpdatePromptModelParameters$inboundSchema;
  /** @deprecated use `UpdatePromptModelParameters$outboundSchema` instead. */
  export const outboundSchema = UpdatePromptModelParameters$outboundSchema;
  /** @deprecated use `UpdatePromptModelParameters$Outbound` instead. */
  export type Outbound = UpdatePromptModelParameters$Outbound;
}

export function updatePromptModelParametersToJSON(
  updatePromptModelParameters: UpdatePromptModelParameters,
): string {
  return JSON.stringify(
    UpdatePromptModelParameters$outboundSchema.parse(
      updatePromptModelParameters,
    ),
  );
}

export function updatePromptModelParametersFromJSON(
  jsonString: string,
): SafeParseResult<UpdatePromptModelParameters, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdatePromptModelParameters$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdatePromptModelParameters' from JSON`,
  );
}

/** @internal */
export const UpdatePromptProvider$inboundSchema: z.ZodNativeEnum<
  typeof UpdatePromptProvider
> = z.nativeEnum(UpdatePromptProvider);

/** @internal */
export const UpdatePromptProvider$outboundSchema: z.ZodNativeEnum<
  typeof UpdatePromptProvider
> = UpdatePromptProvider$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdatePromptProvider$ {
  /** @deprecated use `UpdatePromptProvider$inboundSchema` instead. */
  export const inboundSchema = UpdatePromptProvider$inboundSchema;
  /** @deprecated use `UpdatePromptProvider$outboundSchema` instead. */
  export const outboundSchema = UpdatePromptProvider$outboundSchema;
}

/** @internal */
export const UpdatePromptRole$inboundSchema: z.ZodNativeEnum<
  typeof UpdatePromptRole
> = z.nativeEnum(UpdatePromptRole);

/** @internal */
export const UpdatePromptRole$outboundSchema: z.ZodNativeEnum<
  typeof UpdatePromptRole
> = UpdatePromptRole$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdatePromptRole$ {
  /** @deprecated use `UpdatePromptRole$inboundSchema` instead. */
  export const inboundSchema = UpdatePromptRole$inboundSchema;
  /** @deprecated use `UpdatePromptRole$outboundSchema` instead. */
  export const outboundSchema = UpdatePromptRole$outboundSchema;
}

/** @internal */
export const UpdatePrompt2PromptsType$inboundSchema: z.ZodNativeEnum<
  typeof UpdatePrompt2PromptsType
> = z.nativeEnum(UpdatePrompt2PromptsType);

/** @internal */
export const UpdatePrompt2PromptsType$outboundSchema: z.ZodNativeEnum<
  typeof UpdatePrompt2PromptsType
> = UpdatePrompt2PromptsType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdatePrompt2PromptsType$ {
  /** @deprecated use `UpdatePrompt2PromptsType$inboundSchema` instead. */
  export const inboundSchema = UpdatePrompt2PromptsType$inboundSchema;
  /** @deprecated use `UpdatePrompt2PromptsType$outboundSchema` instead. */
  export const outboundSchema = UpdatePrompt2PromptsType$outboundSchema;
}

/** @internal */
export const UpdatePrompt2ImageUrl$inboundSchema: z.ZodType<
  UpdatePrompt2ImageUrl,
  z.ZodTypeDef,
  unknown
> = z.object({
  url: z.string(),
  detail: z.string().optional(),
});

/** @internal */
export type UpdatePrompt2ImageUrl$Outbound = {
  url: string;
  detail?: string | undefined;
};

/** @internal */
export const UpdatePrompt2ImageUrl$outboundSchema: z.ZodType<
  UpdatePrompt2ImageUrl$Outbound,
  z.ZodTypeDef,
  UpdatePrompt2ImageUrl
> = z.object({
  url: z.string(),
  detail: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdatePrompt2ImageUrl$ {
  /** @deprecated use `UpdatePrompt2ImageUrl$inboundSchema` instead. */
  export const inboundSchema = UpdatePrompt2ImageUrl$inboundSchema;
  /** @deprecated use `UpdatePrompt2ImageUrl$outboundSchema` instead. */
  export const outboundSchema = UpdatePrompt2ImageUrl$outboundSchema;
  /** @deprecated use `UpdatePrompt2ImageUrl$Outbound` instead. */
  export type Outbound = UpdatePrompt2ImageUrl$Outbound;
}

export function updatePrompt2ImageUrlToJSON(
  updatePrompt2ImageUrl: UpdatePrompt2ImageUrl,
): string {
  return JSON.stringify(
    UpdatePrompt2ImageUrl$outboundSchema.parse(updatePrompt2ImageUrl),
  );
}

export function updatePrompt2ImageUrlFromJSON(
  jsonString: string,
): SafeParseResult<UpdatePrompt2ImageUrl, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdatePrompt2ImageUrl$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdatePrompt2ImageUrl' from JSON`,
  );
}

/** @internal */
export const UpdatePrompt22$inboundSchema: z.ZodType<
  UpdatePrompt22,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: UpdatePrompt2PromptsType$inboundSchema,
  image_url: z.lazy(() => UpdatePrompt2ImageUrl$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "image_url": "imageUrl",
  });
});

/** @internal */
export type UpdatePrompt22$Outbound = {
  type: string;
  image_url: UpdatePrompt2ImageUrl$Outbound;
};

/** @internal */
export const UpdatePrompt22$outboundSchema: z.ZodType<
  UpdatePrompt22$Outbound,
  z.ZodTypeDef,
  UpdatePrompt22
> = z.object({
  type: UpdatePrompt2PromptsType$outboundSchema,
  imageUrl: z.lazy(() => UpdatePrompt2ImageUrl$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    imageUrl: "image_url",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdatePrompt22$ {
  /** @deprecated use `UpdatePrompt22$inboundSchema` instead. */
  export const inboundSchema = UpdatePrompt22$inboundSchema;
  /** @deprecated use `UpdatePrompt22$outboundSchema` instead. */
  export const outboundSchema = UpdatePrompt22$outboundSchema;
  /** @deprecated use `UpdatePrompt22$Outbound` instead. */
  export type Outbound = UpdatePrompt22$Outbound;
}

export function updatePrompt22ToJSON(updatePrompt22: UpdatePrompt22): string {
  return JSON.stringify(UpdatePrompt22$outboundSchema.parse(updatePrompt22));
}

export function updatePrompt22FromJSON(
  jsonString: string,
): SafeParseResult<UpdatePrompt22, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdatePrompt22$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdatePrompt22' from JSON`,
  );
}

/** @internal */
export const UpdatePrompt2Type$inboundSchema: z.ZodNativeEnum<
  typeof UpdatePrompt2Type
> = z.nativeEnum(UpdatePrompt2Type);

/** @internal */
export const UpdatePrompt2Type$outboundSchema: z.ZodNativeEnum<
  typeof UpdatePrompt2Type
> = UpdatePrompt2Type$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdatePrompt2Type$ {
  /** @deprecated use `UpdatePrompt2Type$inboundSchema` instead. */
  export const inboundSchema = UpdatePrompt2Type$inboundSchema;
  /** @deprecated use `UpdatePrompt2Type$outboundSchema` instead. */
  export const outboundSchema = UpdatePrompt2Type$outboundSchema;
}

/** @internal */
export const UpdatePrompt21$inboundSchema: z.ZodType<
  UpdatePrompt21,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: UpdatePrompt2Type$inboundSchema,
  text: z.string(),
});

/** @internal */
export type UpdatePrompt21$Outbound = {
  type: string;
  text: string;
};

/** @internal */
export const UpdatePrompt21$outboundSchema: z.ZodType<
  UpdatePrompt21$Outbound,
  z.ZodTypeDef,
  UpdatePrompt21
> = z.object({
  type: UpdatePrompt2Type$outboundSchema,
  text: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdatePrompt21$ {
  /** @deprecated use `UpdatePrompt21$inboundSchema` instead. */
  export const inboundSchema = UpdatePrompt21$inboundSchema;
  /** @deprecated use `UpdatePrompt21$outboundSchema` instead. */
  export const outboundSchema = UpdatePrompt21$outboundSchema;
  /** @deprecated use `UpdatePrompt21$Outbound` instead. */
  export type Outbound = UpdatePrompt21$Outbound;
}

export function updatePrompt21ToJSON(updatePrompt21: UpdatePrompt21): string {
  return JSON.stringify(UpdatePrompt21$outboundSchema.parse(updatePrompt21));
}

export function updatePrompt21FromJSON(
  jsonString: string,
): SafeParseResult<UpdatePrompt21, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdatePrompt21$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdatePrompt21' from JSON`,
  );
}

/** @internal */
export const UpdatePromptContent2$inboundSchema: z.ZodType<
  UpdatePromptContent2,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => UpdatePrompt21$inboundSchema),
  z.lazy(() => UpdatePrompt22$inboundSchema),
]);

/** @internal */
export type UpdatePromptContent2$Outbound =
  | UpdatePrompt21$Outbound
  | UpdatePrompt22$Outbound;

/** @internal */
export const UpdatePromptContent2$outboundSchema: z.ZodType<
  UpdatePromptContent2$Outbound,
  z.ZodTypeDef,
  UpdatePromptContent2
> = z.union([
  z.lazy(() => UpdatePrompt21$outboundSchema),
  z.lazy(() => UpdatePrompt22$outboundSchema),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdatePromptContent2$ {
  /** @deprecated use `UpdatePromptContent2$inboundSchema` instead. */
  export const inboundSchema = UpdatePromptContent2$inboundSchema;
  /** @deprecated use `UpdatePromptContent2$outboundSchema` instead. */
  export const outboundSchema = UpdatePromptContent2$outboundSchema;
  /** @deprecated use `UpdatePromptContent2$Outbound` instead. */
  export type Outbound = UpdatePromptContent2$Outbound;
}

export function updatePromptContent2ToJSON(
  updatePromptContent2: UpdatePromptContent2,
): string {
  return JSON.stringify(
    UpdatePromptContent2$outboundSchema.parse(updatePromptContent2),
  );
}

export function updatePromptContent2FromJSON(
  jsonString: string,
): SafeParseResult<UpdatePromptContent2, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdatePromptContent2$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdatePromptContent2' from JSON`,
  );
}

/** @internal */
export const UpdatePromptContent$inboundSchema: z.ZodType<
  UpdatePromptContent,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.string(),
  z.array(z.union([
    z.lazy(() => UpdatePrompt21$inboundSchema),
    z.lazy(() => UpdatePrompt22$inboundSchema),
  ])),
]);

/** @internal */
export type UpdatePromptContent$Outbound =
  | string
  | Array<UpdatePrompt21$Outbound | UpdatePrompt22$Outbound>;

/** @internal */
export const UpdatePromptContent$outboundSchema: z.ZodType<
  UpdatePromptContent$Outbound,
  z.ZodTypeDef,
  UpdatePromptContent
> = z.union([
  z.string(),
  z.array(z.union([
    z.lazy(() => UpdatePrompt21$outboundSchema),
    z.lazy(() => UpdatePrompt22$outboundSchema),
  ])),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdatePromptContent$ {
  /** @deprecated use `UpdatePromptContent$inboundSchema` instead. */
  export const inboundSchema = UpdatePromptContent$inboundSchema;
  /** @deprecated use `UpdatePromptContent$outboundSchema` instead. */
  export const outboundSchema = UpdatePromptContent$outboundSchema;
  /** @deprecated use `UpdatePromptContent$Outbound` instead. */
  export type Outbound = UpdatePromptContent$Outbound;
}

export function updatePromptContentToJSON(
  updatePromptContent: UpdatePromptContent,
): string {
  return JSON.stringify(
    UpdatePromptContent$outboundSchema.parse(updatePromptContent),
  );
}

export function updatePromptContentFromJSON(
  jsonString: string,
): SafeParseResult<UpdatePromptContent, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdatePromptContent$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdatePromptContent' from JSON`,
  );
}

/** @internal */
export const UpdatePromptType$inboundSchema: z.ZodNativeEnum<
  typeof UpdatePromptType
> = z.nativeEnum(UpdatePromptType);

/** @internal */
export const UpdatePromptType$outboundSchema: z.ZodNativeEnum<
  typeof UpdatePromptType
> = UpdatePromptType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdatePromptType$ {
  /** @deprecated use `UpdatePromptType$inboundSchema` instead. */
  export const inboundSchema = UpdatePromptType$inboundSchema;
  /** @deprecated use `UpdatePromptType$outboundSchema` instead. */
  export const outboundSchema = UpdatePromptType$outboundSchema;
}

/** @internal */
export const UpdatePromptFunction$inboundSchema: z.ZodType<
  UpdatePromptFunction,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.string(),
  arguments: z.string(),
});

/** @internal */
export type UpdatePromptFunction$Outbound = {
  name: string;
  arguments: string;
};

/** @internal */
export const UpdatePromptFunction$outboundSchema: z.ZodType<
  UpdatePromptFunction$Outbound,
  z.ZodTypeDef,
  UpdatePromptFunction
> = z.object({
  name: z.string(),
  arguments: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdatePromptFunction$ {
  /** @deprecated use `UpdatePromptFunction$inboundSchema` instead. */
  export const inboundSchema = UpdatePromptFunction$inboundSchema;
  /** @deprecated use `UpdatePromptFunction$outboundSchema` instead. */
  export const outboundSchema = UpdatePromptFunction$outboundSchema;
  /** @deprecated use `UpdatePromptFunction$Outbound` instead. */
  export type Outbound = UpdatePromptFunction$Outbound;
}

export function updatePromptFunctionToJSON(
  updatePromptFunction: UpdatePromptFunction,
): string {
  return JSON.stringify(
    UpdatePromptFunction$outboundSchema.parse(updatePromptFunction),
  );
}

export function updatePromptFunctionFromJSON(
  jsonString: string,
): SafeParseResult<UpdatePromptFunction, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdatePromptFunction$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdatePromptFunction' from JSON`,
  );
}

/** @internal */
export const UpdatePromptToolCalls$inboundSchema: z.ZodType<
  UpdatePromptToolCalls,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string().optional(),
  index: z.number().optional(),
  type: UpdatePromptType$inboundSchema,
  function: z.lazy(() => UpdatePromptFunction$inboundSchema),
});

/** @internal */
export type UpdatePromptToolCalls$Outbound = {
  id?: string | undefined;
  index?: number | undefined;
  type: string;
  function: UpdatePromptFunction$Outbound;
};

/** @internal */
export const UpdatePromptToolCalls$outboundSchema: z.ZodType<
  UpdatePromptToolCalls$Outbound,
  z.ZodTypeDef,
  UpdatePromptToolCalls
> = z.object({
  id: z.string().optional(),
  index: z.number().optional(),
  type: UpdatePromptType$outboundSchema,
  function: z.lazy(() => UpdatePromptFunction$outboundSchema),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdatePromptToolCalls$ {
  /** @deprecated use `UpdatePromptToolCalls$inboundSchema` instead. */
  export const inboundSchema = UpdatePromptToolCalls$inboundSchema;
  /** @deprecated use `UpdatePromptToolCalls$outboundSchema` instead. */
  export const outboundSchema = UpdatePromptToolCalls$outboundSchema;
  /** @deprecated use `UpdatePromptToolCalls$Outbound` instead. */
  export type Outbound = UpdatePromptToolCalls$Outbound;
}

export function updatePromptToolCallsToJSON(
  updatePromptToolCalls: UpdatePromptToolCalls,
): string {
  return JSON.stringify(
    UpdatePromptToolCalls$outboundSchema.parse(updatePromptToolCalls),
  );
}

export function updatePromptToolCallsFromJSON(
  jsonString: string,
): SafeParseResult<UpdatePromptToolCalls, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdatePromptToolCalls$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdatePromptToolCalls' from JSON`,
  );
}

/** @internal */
export const UpdatePromptMessages$inboundSchema: z.ZodType<
  UpdatePromptMessages,
  z.ZodTypeDef,
  unknown
> = z.object({
  role: UpdatePromptRole$inboundSchema,
  content: z.union([
    z.string(),
    z.array(z.union([
      z.lazy(() => UpdatePrompt21$inboundSchema),
      z.lazy(() => UpdatePrompt22$inboundSchema),
    ])),
  ]),
  tool_calls: z.array(z.lazy(() => UpdatePromptToolCalls$inboundSchema))
    .optional(),
}).transform((v) => {
  return remap$(v, {
    "tool_calls": "toolCalls",
  });
});

/** @internal */
export type UpdatePromptMessages$Outbound = {
  role: string;
  content: string | Array<UpdatePrompt21$Outbound | UpdatePrompt22$Outbound>;
  tool_calls?: Array<UpdatePromptToolCalls$Outbound> | undefined;
};

/** @internal */
export const UpdatePromptMessages$outboundSchema: z.ZodType<
  UpdatePromptMessages$Outbound,
  z.ZodTypeDef,
  UpdatePromptMessages
> = z.object({
  role: UpdatePromptRole$outboundSchema,
  content: z.union([
    z.string(),
    z.array(z.union([
      z.lazy(() => UpdatePrompt21$outboundSchema),
      z.lazy(() => UpdatePrompt22$outboundSchema),
    ])),
  ]),
  toolCalls: z.array(z.lazy(() => UpdatePromptToolCalls$outboundSchema))
    .optional(),
}).transform((v) => {
  return remap$(v, {
    toolCalls: "tool_calls",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdatePromptMessages$ {
  /** @deprecated use `UpdatePromptMessages$inboundSchema` instead. */
  export const inboundSchema = UpdatePromptMessages$inboundSchema;
  /** @deprecated use `UpdatePromptMessages$outboundSchema` instead. */
  export const outboundSchema = UpdatePromptMessages$outboundSchema;
  /** @deprecated use `UpdatePromptMessages$Outbound` instead. */
  export type Outbound = UpdatePromptMessages$Outbound;
}

export function updatePromptMessagesToJSON(
  updatePromptMessages: UpdatePromptMessages,
): string {
  return JSON.stringify(
    UpdatePromptMessages$outboundSchema.parse(updatePromptMessages),
  );
}

export function updatePromptMessagesFromJSON(
  jsonString: string,
): SafeParseResult<UpdatePromptMessages, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdatePromptMessages$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdatePromptMessages' from JSON`,
  );
}

/** @internal */
export const UpdatePromptPromptConfig$inboundSchema: z.ZodType<
  UpdatePromptPromptConfig,
  z.ZodTypeDef,
  unknown
> = z.object({
  stream: z.boolean().optional(),
  model: z.string().optional(),
  model_type: UpdatePromptModelType$inboundSchema.optional(),
  model_parameters: z.lazy(() => UpdatePromptModelParameters$inboundSchema)
    .optional(),
  provider: UpdatePromptProvider$inboundSchema.optional(),
  version: z.string().optional(),
  messages: z.array(z.lazy(() => UpdatePromptMessages$inboundSchema)),
}).transform((v) => {
  return remap$(v, {
    "model_type": "modelType",
    "model_parameters": "modelParameters",
  });
});

/** @internal */
export type UpdatePromptPromptConfig$Outbound = {
  stream?: boolean | undefined;
  model?: string | undefined;
  model_type?: string | undefined;
  model_parameters?: UpdatePromptModelParameters$Outbound | undefined;
  provider?: string | undefined;
  version?: string | undefined;
  messages: Array<UpdatePromptMessages$Outbound>;
};

/** @internal */
export const UpdatePromptPromptConfig$outboundSchema: z.ZodType<
  UpdatePromptPromptConfig$Outbound,
  z.ZodTypeDef,
  UpdatePromptPromptConfig
> = z.object({
  stream: z.boolean().optional(),
  model: z.string().optional(),
  modelType: UpdatePromptModelType$outboundSchema.optional(),
  modelParameters: z.lazy(() => UpdatePromptModelParameters$outboundSchema)
    .optional(),
  provider: UpdatePromptProvider$outboundSchema.optional(),
  version: z.string().optional(),
  messages: z.array(z.lazy(() => UpdatePromptMessages$outboundSchema)),
}).transform((v) => {
  return remap$(v, {
    modelType: "model_type",
    modelParameters: "model_parameters",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdatePromptPromptConfig$ {
  /** @deprecated use `UpdatePromptPromptConfig$inboundSchema` instead. */
  export const inboundSchema = UpdatePromptPromptConfig$inboundSchema;
  /** @deprecated use `UpdatePromptPromptConfig$outboundSchema` instead. */
  export const outboundSchema = UpdatePromptPromptConfig$outboundSchema;
  /** @deprecated use `UpdatePromptPromptConfig$Outbound` instead. */
  export type Outbound = UpdatePromptPromptConfig$Outbound;
}

export function updatePromptPromptConfigToJSON(
  updatePromptPromptConfig: UpdatePromptPromptConfig,
): string {
  return JSON.stringify(
    UpdatePromptPromptConfig$outboundSchema.parse(updatePromptPromptConfig),
  );
}

export function updatePromptPromptConfigFromJSON(
  jsonString: string,
): SafeParseResult<UpdatePromptPromptConfig, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdatePromptPromptConfig$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdatePromptPromptConfig' from JSON`,
  );
}

/** @internal */
export const UpdatePromptUseCases$inboundSchema: z.ZodNativeEnum<
  typeof UpdatePromptUseCases
> = z.nativeEnum(UpdatePromptUseCases);

/** @internal */
export const UpdatePromptUseCases$outboundSchema: z.ZodNativeEnum<
  typeof UpdatePromptUseCases
> = UpdatePromptUseCases$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdatePromptUseCases$ {
  /** @deprecated use `UpdatePromptUseCases$inboundSchema` instead. */
  export const inboundSchema = UpdatePromptUseCases$inboundSchema;
  /** @deprecated use `UpdatePromptUseCases$outboundSchema` instead. */
  export const outboundSchema = UpdatePromptUseCases$outboundSchema;
}

/** @internal */
export const UpdatePromptLanguage$inboundSchema: z.ZodNativeEnum<
  typeof UpdatePromptLanguage
> = z.nativeEnum(UpdatePromptLanguage);

/** @internal */
export const UpdatePromptLanguage$outboundSchema: z.ZodNativeEnum<
  typeof UpdatePromptLanguage
> = UpdatePromptLanguage$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdatePromptLanguage$ {
  /** @deprecated use `UpdatePromptLanguage$inboundSchema` instead. */
  export const inboundSchema = UpdatePromptLanguage$inboundSchema;
  /** @deprecated use `UpdatePromptLanguage$outboundSchema` instead. */
  export const outboundSchema = UpdatePromptLanguage$outboundSchema;
}

/** @internal */
export const UpdatePromptMetadata$inboundSchema: z.ZodType<
  UpdatePromptMetadata,
  z.ZodTypeDef,
  unknown
> = z.object({
  use_cases: z.array(UpdatePromptUseCases$inboundSchema).optional(),
  language: UpdatePromptLanguage$inboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    "use_cases": "useCases",
  });
});

/** @internal */
export type UpdatePromptMetadata$Outbound = {
  use_cases?: Array<string> | undefined;
  language?: string | undefined;
};

/** @internal */
export const UpdatePromptMetadata$outboundSchema: z.ZodType<
  UpdatePromptMetadata$Outbound,
  z.ZodTypeDef,
  UpdatePromptMetadata
> = z.object({
  useCases: z.array(UpdatePromptUseCases$outboundSchema).optional(),
  language: UpdatePromptLanguage$outboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    useCases: "use_cases",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdatePromptMetadata$ {
  /** @deprecated use `UpdatePromptMetadata$inboundSchema` instead. */
  export const inboundSchema = UpdatePromptMetadata$inboundSchema;
  /** @deprecated use `UpdatePromptMetadata$outboundSchema` instead. */
  export const outboundSchema = UpdatePromptMetadata$outboundSchema;
  /** @deprecated use `UpdatePromptMetadata$Outbound` instead. */
  export type Outbound = UpdatePromptMetadata$Outbound;
}

export function updatePromptMetadataToJSON(
  updatePromptMetadata: UpdatePromptMetadata,
): string {
  return JSON.stringify(
    UpdatePromptMetadata$outboundSchema.parse(updatePromptMetadata),
  );
}

export function updatePromptMetadataFromJSON(
  jsonString: string,
): SafeParseResult<UpdatePromptMetadata, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdatePromptMetadata$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdatePromptMetadata' from JSON`,
  );
}

/** @internal */
export const UpdatePromptRequestBody$inboundSchema: z.ZodType<
  UpdatePromptRequestBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  display_name: z.string().optional(),
  description: z.nullable(z.string()).optional(),
  prompt_config: z.lazy(() => UpdatePromptPromptConfig$inboundSchema)
    .optional(),
  metadata: z.lazy(() => UpdatePromptMetadata$inboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    "display_name": "displayName",
    "prompt_config": "promptConfig",
  });
});

/** @internal */
export type UpdatePromptRequestBody$Outbound = {
  display_name?: string | undefined;
  description?: string | null | undefined;
  prompt_config?: UpdatePromptPromptConfig$Outbound | undefined;
  metadata?: UpdatePromptMetadata$Outbound | undefined;
};

/** @internal */
export const UpdatePromptRequestBody$outboundSchema: z.ZodType<
  UpdatePromptRequestBody$Outbound,
  z.ZodTypeDef,
  UpdatePromptRequestBody
> = z.object({
  displayName: z.string().optional(),
  description: z.nullable(z.string()).optional(),
  promptConfig: z.lazy(() => UpdatePromptPromptConfig$outboundSchema)
    .optional(),
  metadata: z.lazy(() => UpdatePromptMetadata$outboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    displayName: "display_name",
    promptConfig: "prompt_config",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdatePromptRequestBody$ {
  /** @deprecated use `UpdatePromptRequestBody$inboundSchema` instead. */
  export const inboundSchema = UpdatePromptRequestBody$inboundSchema;
  /** @deprecated use `UpdatePromptRequestBody$outboundSchema` instead. */
  export const outboundSchema = UpdatePromptRequestBody$outboundSchema;
  /** @deprecated use `UpdatePromptRequestBody$Outbound` instead. */
  export type Outbound = UpdatePromptRequestBody$Outbound;
}

export function updatePromptRequestBodyToJSON(
  updatePromptRequestBody: UpdatePromptRequestBody,
): string {
  return JSON.stringify(
    UpdatePromptRequestBody$outboundSchema.parse(updatePromptRequestBody),
  );
}

export function updatePromptRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<UpdatePromptRequestBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdatePromptRequestBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdatePromptRequestBody' from JSON`,
  );
}

/** @internal */
export const UpdatePromptRequest$inboundSchema: z.ZodType<
  UpdatePromptRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  RequestBody: z.lazy(() => UpdatePromptRequestBody$inboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    "RequestBody": "requestBody",
  });
});

/** @internal */
export type UpdatePromptRequest$Outbound = {
  id: string;
  RequestBody?: UpdatePromptRequestBody$Outbound | undefined;
};

/** @internal */
export const UpdatePromptRequest$outboundSchema: z.ZodType<
  UpdatePromptRequest$Outbound,
  z.ZodTypeDef,
  UpdatePromptRequest
> = z.object({
  id: z.string(),
  requestBody: z.lazy(() => UpdatePromptRequestBody$outboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    requestBody: "RequestBody",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdatePromptRequest$ {
  /** @deprecated use `UpdatePromptRequest$inboundSchema` instead. */
  export const inboundSchema = UpdatePromptRequest$inboundSchema;
  /** @deprecated use `UpdatePromptRequest$outboundSchema` instead. */
  export const outboundSchema = UpdatePromptRequest$outboundSchema;
  /** @deprecated use `UpdatePromptRequest$Outbound` instead. */
  export type Outbound = UpdatePromptRequest$Outbound;
}

export function updatePromptRequestToJSON(
  updatePromptRequest: UpdatePromptRequest,
): string {
  return JSON.stringify(
    UpdatePromptRequest$outboundSchema.parse(updatePromptRequest),
  );
}

export function updatePromptRequestFromJSON(
  jsonString: string,
): SafeParseResult<UpdatePromptRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdatePromptRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdatePromptRequest' from JSON`,
  );
}

/** @internal */
export const UpdatePromptOwner2$inboundSchema: z.ZodNativeEnum<
  typeof UpdatePromptOwner2
> = z.nativeEnum(UpdatePromptOwner2);

/** @internal */
export const UpdatePromptOwner2$outboundSchema: z.ZodNativeEnum<
  typeof UpdatePromptOwner2
> = UpdatePromptOwner2$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdatePromptOwner2$ {
  /** @deprecated use `UpdatePromptOwner2$inboundSchema` instead. */
  export const inboundSchema = UpdatePromptOwner2$inboundSchema;
  /** @deprecated use `UpdatePromptOwner2$outboundSchema` instead. */
  export const outboundSchema = UpdatePromptOwner2$outboundSchema;
}

/** @internal */
export const UpdatePromptOwner$inboundSchema: z.ZodType<
  UpdatePromptOwner,
  z.ZodTypeDef,
  unknown
> = z.union([z.string(), UpdatePromptOwner2$inboundSchema]);

/** @internal */
export type UpdatePromptOwner$Outbound = string | string;

/** @internal */
export const UpdatePromptOwner$outboundSchema: z.ZodType<
  UpdatePromptOwner$Outbound,
  z.ZodTypeDef,
  UpdatePromptOwner
> = z.union([z.string(), UpdatePromptOwner2$outboundSchema]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdatePromptOwner$ {
  /** @deprecated use `UpdatePromptOwner$inboundSchema` instead. */
  export const inboundSchema = UpdatePromptOwner$inboundSchema;
  /** @deprecated use `UpdatePromptOwner$outboundSchema` instead. */
  export const outboundSchema = UpdatePromptOwner$outboundSchema;
  /** @deprecated use `UpdatePromptOwner$Outbound` instead. */
  export type Outbound = UpdatePromptOwner$Outbound;
}

export function updatePromptOwnerToJSON(
  updatePromptOwner: UpdatePromptOwner,
): string {
  return JSON.stringify(
    UpdatePromptOwner$outboundSchema.parse(updatePromptOwner),
  );
}

export function updatePromptOwnerFromJSON(
  jsonString: string,
): SafeParseResult<UpdatePromptOwner, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdatePromptOwner$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdatePromptOwner' from JSON`,
  );
}

/** @internal */
export const UpdatePromptPromptsModelType$inboundSchema: z.ZodNativeEnum<
  typeof UpdatePromptPromptsModelType
> = z.nativeEnum(UpdatePromptPromptsModelType);

/** @internal */
export const UpdatePromptPromptsModelType$outboundSchema: z.ZodNativeEnum<
  typeof UpdatePromptPromptsModelType
> = UpdatePromptPromptsModelType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdatePromptPromptsModelType$ {
  /** @deprecated use `UpdatePromptPromptsModelType$inboundSchema` instead. */
  export const inboundSchema = UpdatePromptPromptsModelType$inboundSchema;
  /** @deprecated use `UpdatePromptPromptsModelType$outboundSchema` instead. */
  export const outboundSchema = UpdatePromptPromptsModelType$outboundSchema;
}

/** @internal */
export const UpdatePromptPromptsFormat$inboundSchema: z.ZodNativeEnum<
  typeof UpdatePromptPromptsFormat
> = z.nativeEnum(UpdatePromptPromptsFormat);

/** @internal */
export const UpdatePromptPromptsFormat$outboundSchema: z.ZodNativeEnum<
  typeof UpdatePromptPromptsFormat
> = UpdatePromptPromptsFormat$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdatePromptPromptsFormat$ {
  /** @deprecated use `UpdatePromptPromptsFormat$inboundSchema` instead. */
  export const inboundSchema = UpdatePromptPromptsFormat$inboundSchema;
  /** @deprecated use `UpdatePromptPromptsFormat$outboundSchema` instead. */
  export const outboundSchema = UpdatePromptPromptsFormat$outboundSchema;
}

/** @internal */
export const UpdatePromptPromptsQuality$inboundSchema: z.ZodNativeEnum<
  typeof UpdatePromptPromptsQuality
> = z.nativeEnum(UpdatePromptPromptsQuality);

/** @internal */
export const UpdatePromptPromptsQuality$outboundSchema: z.ZodNativeEnum<
  typeof UpdatePromptPromptsQuality
> = UpdatePromptPromptsQuality$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdatePromptPromptsQuality$ {
  /** @deprecated use `UpdatePromptPromptsQuality$inboundSchema` instead. */
  export const inboundSchema = UpdatePromptPromptsQuality$inboundSchema;
  /** @deprecated use `UpdatePromptPromptsQuality$outboundSchema` instead. */
  export const outboundSchema = UpdatePromptPromptsQuality$outboundSchema;
}

/** @internal */
export const UpdatePromptResponseFormatPromptsResponse200Type$inboundSchema:
  z.ZodNativeEnum<typeof UpdatePromptResponseFormatPromptsResponse200Type> = z
    .nativeEnum(UpdatePromptResponseFormatPromptsResponse200Type);

/** @internal */
export const UpdatePromptResponseFormatPromptsResponse200Type$outboundSchema:
  z.ZodNativeEnum<typeof UpdatePromptResponseFormatPromptsResponse200Type> =
    UpdatePromptResponseFormatPromptsResponse200Type$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdatePromptResponseFormatPromptsResponse200Type$ {
  /** @deprecated use `UpdatePromptResponseFormatPromptsResponse200Type$inboundSchema` instead. */
  export const inboundSchema =
    UpdatePromptResponseFormatPromptsResponse200Type$inboundSchema;
  /** @deprecated use `UpdatePromptResponseFormatPromptsResponse200Type$outboundSchema` instead. */
  export const outboundSchema =
    UpdatePromptResponseFormatPromptsResponse200Type$outboundSchema;
}

/** @internal */
export const UpdatePromptResponseFormatPrompts2$inboundSchema: z.ZodType<
  UpdatePromptResponseFormatPrompts2,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: UpdatePromptResponseFormatPromptsResponse200Type$inboundSchema,
});

/** @internal */
export type UpdatePromptResponseFormatPrompts2$Outbound = {
  type: string;
};

/** @internal */
export const UpdatePromptResponseFormatPrompts2$outboundSchema: z.ZodType<
  UpdatePromptResponseFormatPrompts2$Outbound,
  z.ZodTypeDef,
  UpdatePromptResponseFormatPrompts2
> = z.object({
  type: UpdatePromptResponseFormatPromptsResponse200Type$outboundSchema,
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdatePromptResponseFormatPrompts2$ {
  /** @deprecated use `UpdatePromptResponseFormatPrompts2$inboundSchema` instead. */
  export const inboundSchema = UpdatePromptResponseFormatPrompts2$inboundSchema;
  /** @deprecated use `UpdatePromptResponseFormatPrompts2$outboundSchema` instead. */
  export const outboundSchema =
    UpdatePromptResponseFormatPrompts2$outboundSchema;
  /** @deprecated use `UpdatePromptResponseFormatPrompts2$Outbound` instead. */
  export type Outbound = UpdatePromptResponseFormatPrompts2$Outbound;
}

export function updatePromptResponseFormatPrompts2ToJSON(
  updatePromptResponseFormatPrompts2: UpdatePromptResponseFormatPrompts2,
): string {
  return JSON.stringify(
    UpdatePromptResponseFormatPrompts2$outboundSchema.parse(
      updatePromptResponseFormatPrompts2,
    ),
  );
}

export function updatePromptResponseFormatPrompts2FromJSON(
  jsonString: string,
): SafeParseResult<UpdatePromptResponseFormatPrompts2, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      UpdatePromptResponseFormatPrompts2$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdatePromptResponseFormatPrompts2' from JSON`,
  );
}

/** @internal */
export const UpdatePromptResponseFormatPromptsResponseType$inboundSchema:
  z.ZodNativeEnum<typeof UpdatePromptResponseFormatPromptsResponseType> = z
    .nativeEnum(UpdatePromptResponseFormatPromptsResponseType);

/** @internal */
export const UpdatePromptResponseFormatPromptsResponseType$outboundSchema:
  z.ZodNativeEnum<typeof UpdatePromptResponseFormatPromptsResponseType> =
    UpdatePromptResponseFormatPromptsResponseType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdatePromptResponseFormatPromptsResponseType$ {
  /** @deprecated use `UpdatePromptResponseFormatPromptsResponseType$inboundSchema` instead. */
  export const inboundSchema =
    UpdatePromptResponseFormatPromptsResponseType$inboundSchema;
  /** @deprecated use `UpdatePromptResponseFormatPromptsResponseType$outboundSchema` instead. */
  export const outboundSchema =
    UpdatePromptResponseFormatPromptsResponseType$outboundSchema;
}

/** @internal */
export const UpdatePromptResponseFormatPromptsJsonSchema$inboundSchema:
  z.ZodType<
    UpdatePromptResponseFormatPromptsJsonSchema,
    z.ZodTypeDef,
    unknown
  > = z.object({
    name: z.string(),
    strict: z.boolean(),
    schema: z.record(z.any()),
  });

/** @internal */
export type UpdatePromptResponseFormatPromptsJsonSchema$Outbound = {
  name: string;
  strict: boolean;
  schema: { [k: string]: any };
};

/** @internal */
export const UpdatePromptResponseFormatPromptsJsonSchema$outboundSchema:
  z.ZodType<
    UpdatePromptResponseFormatPromptsJsonSchema$Outbound,
    z.ZodTypeDef,
    UpdatePromptResponseFormatPromptsJsonSchema
  > = z.object({
    name: z.string(),
    strict: z.boolean(),
    schema: z.record(z.any()),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdatePromptResponseFormatPromptsJsonSchema$ {
  /** @deprecated use `UpdatePromptResponseFormatPromptsJsonSchema$inboundSchema` instead. */
  export const inboundSchema =
    UpdatePromptResponseFormatPromptsJsonSchema$inboundSchema;
  /** @deprecated use `UpdatePromptResponseFormatPromptsJsonSchema$outboundSchema` instead. */
  export const outboundSchema =
    UpdatePromptResponseFormatPromptsJsonSchema$outboundSchema;
  /** @deprecated use `UpdatePromptResponseFormatPromptsJsonSchema$Outbound` instead. */
  export type Outbound = UpdatePromptResponseFormatPromptsJsonSchema$Outbound;
}

export function updatePromptResponseFormatPromptsJsonSchemaToJSON(
  updatePromptResponseFormatPromptsJsonSchema:
    UpdatePromptResponseFormatPromptsJsonSchema,
): string {
  return JSON.stringify(
    UpdatePromptResponseFormatPromptsJsonSchema$outboundSchema.parse(
      updatePromptResponseFormatPromptsJsonSchema,
    ),
  );
}

export function updatePromptResponseFormatPromptsJsonSchemaFromJSON(
  jsonString: string,
): SafeParseResult<
  UpdatePromptResponseFormatPromptsJsonSchema,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      UpdatePromptResponseFormatPromptsJsonSchema$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'UpdatePromptResponseFormatPromptsJsonSchema' from JSON`,
  );
}

/** @internal */
export const UpdatePromptResponseFormatPrompts1$inboundSchema: z.ZodType<
  UpdatePromptResponseFormatPrompts1,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: UpdatePromptResponseFormatPromptsResponseType$inboundSchema,
  json_schema: z.lazy(() =>
    UpdatePromptResponseFormatPromptsJsonSchema$inboundSchema
  ),
}).transform((v) => {
  return remap$(v, {
    "json_schema": "jsonSchema",
  });
});

/** @internal */
export type UpdatePromptResponseFormatPrompts1$Outbound = {
  type: string;
  json_schema: UpdatePromptResponseFormatPromptsJsonSchema$Outbound;
};

/** @internal */
export const UpdatePromptResponseFormatPrompts1$outboundSchema: z.ZodType<
  UpdatePromptResponseFormatPrompts1$Outbound,
  z.ZodTypeDef,
  UpdatePromptResponseFormatPrompts1
> = z.object({
  type: UpdatePromptResponseFormatPromptsResponseType$outboundSchema,
  jsonSchema: z.lazy(() =>
    UpdatePromptResponseFormatPromptsJsonSchema$outboundSchema
  ),
}).transform((v) => {
  return remap$(v, {
    jsonSchema: "json_schema",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdatePromptResponseFormatPrompts1$ {
  /** @deprecated use `UpdatePromptResponseFormatPrompts1$inboundSchema` instead. */
  export const inboundSchema = UpdatePromptResponseFormatPrompts1$inboundSchema;
  /** @deprecated use `UpdatePromptResponseFormatPrompts1$outboundSchema` instead. */
  export const outboundSchema =
    UpdatePromptResponseFormatPrompts1$outboundSchema;
  /** @deprecated use `UpdatePromptResponseFormatPrompts1$Outbound` instead. */
  export type Outbound = UpdatePromptResponseFormatPrompts1$Outbound;
}

export function updatePromptResponseFormatPrompts1ToJSON(
  updatePromptResponseFormatPrompts1: UpdatePromptResponseFormatPrompts1,
): string {
  return JSON.stringify(
    UpdatePromptResponseFormatPrompts1$outboundSchema.parse(
      updatePromptResponseFormatPrompts1,
    ),
  );
}

export function updatePromptResponseFormatPrompts1FromJSON(
  jsonString: string,
): SafeParseResult<UpdatePromptResponseFormatPrompts1, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      UpdatePromptResponseFormatPrompts1$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdatePromptResponseFormatPrompts1' from JSON`,
  );
}

/** @internal */
export const UpdatePromptPromptsResponseFormat$inboundSchema: z.ZodType<
  UpdatePromptPromptsResponseFormat,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => UpdatePromptResponseFormatPrompts2$inboundSchema),
  z.lazy(() => UpdatePromptResponseFormatPrompts1$inboundSchema),
]);

/** @internal */
export type UpdatePromptPromptsResponseFormat$Outbound =
  | UpdatePromptResponseFormatPrompts2$Outbound
  | UpdatePromptResponseFormatPrompts1$Outbound;

/** @internal */
export const UpdatePromptPromptsResponseFormat$outboundSchema: z.ZodType<
  UpdatePromptPromptsResponseFormat$Outbound,
  z.ZodTypeDef,
  UpdatePromptPromptsResponseFormat
> = z.union([
  z.lazy(() => UpdatePromptResponseFormatPrompts2$outboundSchema),
  z.lazy(() => UpdatePromptResponseFormatPrompts1$outboundSchema),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdatePromptPromptsResponseFormat$ {
  /** @deprecated use `UpdatePromptPromptsResponseFormat$inboundSchema` instead. */
  export const inboundSchema = UpdatePromptPromptsResponseFormat$inboundSchema;
  /** @deprecated use `UpdatePromptPromptsResponseFormat$outboundSchema` instead. */
  export const outboundSchema =
    UpdatePromptPromptsResponseFormat$outboundSchema;
  /** @deprecated use `UpdatePromptPromptsResponseFormat$Outbound` instead. */
  export type Outbound = UpdatePromptPromptsResponseFormat$Outbound;
}

export function updatePromptPromptsResponseFormatToJSON(
  updatePromptPromptsResponseFormat: UpdatePromptPromptsResponseFormat,
): string {
  return JSON.stringify(
    UpdatePromptPromptsResponseFormat$outboundSchema.parse(
      updatePromptPromptsResponseFormat,
    ),
  );
}

export function updatePromptPromptsResponseFormatFromJSON(
  jsonString: string,
): SafeParseResult<UpdatePromptPromptsResponseFormat, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdatePromptPromptsResponseFormat$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdatePromptPromptsResponseFormat' from JSON`,
  );
}

/** @internal */
export const UpdatePromptPromptsPhotoRealVersion$inboundSchema: z.ZodNativeEnum<
  typeof UpdatePromptPromptsPhotoRealVersion
> = z.nativeEnum(UpdatePromptPromptsPhotoRealVersion);

/** @internal */
export const UpdatePromptPromptsPhotoRealVersion$outboundSchema:
  z.ZodNativeEnum<typeof UpdatePromptPromptsPhotoRealVersion> =
    UpdatePromptPromptsPhotoRealVersion$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdatePromptPromptsPhotoRealVersion$ {
  /** @deprecated use `UpdatePromptPromptsPhotoRealVersion$inboundSchema` instead. */
  export const inboundSchema =
    UpdatePromptPromptsPhotoRealVersion$inboundSchema;
  /** @deprecated use `UpdatePromptPromptsPhotoRealVersion$outboundSchema` instead. */
  export const outboundSchema =
    UpdatePromptPromptsPhotoRealVersion$outboundSchema;
}

/** @internal */
export const UpdatePromptPromptsEncodingFormat$inboundSchema: z.ZodNativeEnum<
  typeof UpdatePromptPromptsEncodingFormat
> = z.nativeEnum(UpdatePromptPromptsEncodingFormat);

/** @internal */
export const UpdatePromptPromptsEncodingFormat$outboundSchema: z.ZodNativeEnum<
  typeof UpdatePromptPromptsEncodingFormat
> = UpdatePromptPromptsEncodingFormat$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdatePromptPromptsEncodingFormat$ {
  /** @deprecated use `UpdatePromptPromptsEncodingFormat$inboundSchema` instead. */
  export const inboundSchema = UpdatePromptPromptsEncodingFormat$inboundSchema;
  /** @deprecated use `UpdatePromptPromptsEncodingFormat$outboundSchema` instead. */
  export const outboundSchema =
    UpdatePromptPromptsEncodingFormat$outboundSchema;
}

/** @internal */
export const UpdatePromptPromptsReasoningEffort$inboundSchema: z.ZodNativeEnum<
  typeof UpdatePromptPromptsReasoningEffort
> = z.nativeEnum(UpdatePromptPromptsReasoningEffort);

/** @internal */
export const UpdatePromptPromptsReasoningEffort$outboundSchema: z.ZodNativeEnum<
  typeof UpdatePromptPromptsReasoningEffort
> = UpdatePromptPromptsReasoningEffort$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdatePromptPromptsReasoningEffort$ {
  /** @deprecated use `UpdatePromptPromptsReasoningEffort$inboundSchema` instead. */
  export const inboundSchema = UpdatePromptPromptsReasoningEffort$inboundSchema;
  /** @deprecated use `UpdatePromptPromptsReasoningEffort$outboundSchema` instead. */
  export const outboundSchema =
    UpdatePromptPromptsReasoningEffort$outboundSchema;
}

/** @internal */
export const UpdatePromptPromptsModelParameters$inboundSchema: z.ZodType<
  UpdatePromptPromptsModelParameters,
  z.ZodTypeDef,
  unknown
> = z.object({
  temperature: z.number().optional(),
  maxTokens: z.number().optional(),
  topK: z.number().optional(),
  topP: z.number().optional(),
  frequencyPenalty: z.number().optional(),
  presencePenalty: z.number().optional(),
  numImages: z.number().optional(),
  seed: z.number().optional(),
  format: UpdatePromptPromptsFormat$inboundSchema.optional(),
  dimensions: z.string().optional(),
  quality: UpdatePromptPromptsQuality$inboundSchema.optional(),
  style: z.string().optional(),
  responseFormat: z.nullable(
    z.union([
      z.lazy(() => UpdatePromptResponseFormatPrompts2$inboundSchema),
      z.lazy(() => UpdatePromptResponseFormatPrompts1$inboundSchema),
    ]),
  ).optional(),
  photoRealVersion: UpdatePromptPromptsPhotoRealVersion$inboundSchema
    .optional(),
  encoding_format: UpdatePromptPromptsEncodingFormat$inboundSchema.optional(),
  reasoningEffort: UpdatePromptPromptsReasoningEffort$inboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    "encoding_format": "encodingFormat",
  });
});

/** @internal */
export type UpdatePromptPromptsModelParameters$Outbound = {
  temperature?: number | undefined;
  maxTokens?: number | undefined;
  topK?: number | undefined;
  topP?: number | undefined;
  frequencyPenalty?: number | undefined;
  presencePenalty?: number | undefined;
  numImages?: number | undefined;
  seed?: number | undefined;
  format?: string | undefined;
  dimensions?: string | undefined;
  quality?: string | undefined;
  style?: string | undefined;
  responseFormat?:
    | UpdatePromptResponseFormatPrompts2$Outbound
    | UpdatePromptResponseFormatPrompts1$Outbound
    | null
    | undefined;
  photoRealVersion?: string | undefined;
  encoding_format?: string | undefined;
  reasoningEffort?: string | undefined;
};

/** @internal */
export const UpdatePromptPromptsModelParameters$outboundSchema: z.ZodType<
  UpdatePromptPromptsModelParameters$Outbound,
  z.ZodTypeDef,
  UpdatePromptPromptsModelParameters
> = z.object({
  temperature: z.number().optional(),
  maxTokens: z.number().optional(),
  topK: z.number().optional(),
  topP: z.number().optional(),
  frequencyPenalty: z.number().optional(),
  presencePenalty: z.number().optional(),
  numImages: z.number().optional(),
  seed: z.number().optional(),
  format: UpdatePromptPromptsFormat$outboundSchema.optional(),
  dimensions: z.string().optional(),
  quality: UpdatePromptPromptsQuality$outboundSchema.optional(),
  style: z.string().optional(),
  responseFormat: z.nullable(
    z.union([
      z.lazy(() => UpdatePromptResponseFormatPrompts2$outboundSchema),
      z.lazy(() => UpdatePromptResponseFormatPrompts1$outboundSchema),
    ]),
  ).optional(),
  photoRealVersion: UpdatePromptPromptsPhotoRealVersion$outboundSchema
    .optional(),
  encodingFormat: UpdatePromptPromptsEncodingFormat$outboundSchema.optional(),
  reasoningEffort: UpdatePromptPromptsReasoningEffort$outboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    encodingFormat: "encoding_format",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdatePromptPromptsModelParameters$ {
  /** @deprecated use `UpdatePromptPromptsModelParameters$inboundSchema` instead. */
  export const inboundSchema = UpdatePromptPromptsModelParameters$inboundSchema;
  /** @deprecated use `UpdatePromptPromptsModelParameters$outboundSchema` instead. */
  export const outboundSchema =
    UpdatePromptPromptsModelParameters$outboundSchema;
  /** @deprecated use `UpdatePromptPromptsModelParameters$Outbound` instead. */
  export type Outbound = UpdatePromptPromptsModelParameters$Outbound;
}

export function updatePromptPromptsModelParametersToJSON(
  updatePromptPromptsModelParameters: UpdatePromptPromptsModelParameters,
): string {
  return JSON.stringify(
    UpdatePromptPromptsModelParameters$outboundSchema.parse(
      updatePromptPromptsModelParameters,
    ),
  );
}

export function updatePromptPromptsModelParametersFromJSON(
  jsonString: string,
): SafeParseResult<UpdatePromptPromptsModelParameters, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      UpdatePromptPromptsModelParameters$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdatePromptPromptsModelParameters' from JSON`,
  );
}

/** @internal */
export const UpdatePromptPromptsProvider$inboundSchema: z.ZodNativeEnum<
  typeof UpdatePromptPromptsProvider
> = z.nativeEnum(UpdatePromptPromptsProvider);

/** @internal */
export const UpdatePromptPromptsProvider$outboundSchema: z.ZodNativeEnum<
  typeof UpdatePromptPromptsProvider
> = UpdatePromptPromptsProvider$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdatePromptPromptsProvider$ {
  /** @deprecated use `UpdatePromptPromptsProvider$inboundSchema` instead. */
  export const inboundSchema = UpdatePromptPromptsProvider$inboundSchema;
  /** @deprecated use `UpdatePromptPromptsProvider$outboundSchema` instead. */
  export const outboundSchema = UpdatePromptPromptsProvider$outboundSchema;
}

/** @internal */
export const UpdatePromptPromptsRole$inboundSchema: z.ZodNativeEnum<
  typeof UpdatePromptPromptsRole
> = z.nativeEnum(UpdatePromptPromptsRole);

/** @internal */
export const UpdatePromptPromptsRole$outboundSchema: z.ZodNativeEnum<
  typeof UpdatePromptPromptsRole
> = UpdatePromptPromptsRole$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdatePromptPromptsRole$ {
  /** @deprecated use `UpdatePromptPromptsRole$inboundSchema` instead. */
  export const inboundSchema = UpdatePromptPromptsRole$inboundSchema;
  /** @deprecated use `UpdatePromptPromptsRole$outboundSchema` instead. */
  export const outboundSchema = UpdatePromptPromptsRole$outboundSchema;
}

/** @internal */
export const UpdatePrompt2PromptsResponse200Type$inboundSchema: z.ZodNativeEnum<
  typeof UpdatePrompt2PromptsResponse200Type
> = z.nativeEnum(UpdatePrompt2PromptsResponse200Type);

/** @internal */
export const UpdatePrompt2PromptsResponse200Type$outboundSchema:
  z.ZodNativeEnum<typeof UpdatePrompt2PromptsResponse200Type> =
    UpdatePrompt2PromptsResponse200Type$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdatePrompt2PromptsResponse200Type$ {
  /** @deprecated use `UpdatePrompt2PromptsResponse200Type$inboundSchema` instead. */
  export const inboundSchema =
    UpdatePrompt2PromptsResponse200Type$inboundSchema;
  /** @deprecated use `UpdatePrompt2PromptsResponse200Type$outboundSchema` instead. */
  export const outboundSchema =
    UpdatePrompt2PromptsResponse200Type$outboundSchema;
}

/** @internal */
export const UpdatePrompt2PromptsImageUrl$inboundSchema: z.ZodType<
  UpdatePrompt2PromptsImageUrl,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string().optional(),
  url: z.string(),
  detail: z.string().optional(),
});

/** @internal */
export type UpdatePrompt2PromptsImageUrl$Outbound = {
  id?: string | undefined;
  url: string;
  detail?: string | undefined;
};

/** @internal */
export const UpdatePrompt2PromptsImageUrl$outboundSchema: z.ZodType<
  UpdatePrompt2PromptsImageUrl$Outbound,
  z.ZodTypeDef,
  UpdatePrompt2PromptsImageUrl
> = z.object({
  id: z.string().optional(),
  url: z.string(),
  detail: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdatePrompt2PromptsImageUrl$ {
  /** @deprecated use `UpdatePrompt2PromptsImageUrl$inboundSchema` instead. */
  export const inboundSchema = UpdatePrompt2PromptsImageUrl$inboundSchema;
  /** @deprecated use `UpdatePrompt2PromptsImageUrl$outboundSchema` instead. */
  export const outboundSchema = UpdatePrompt2PromptsImageUrl$outboundSchema;
  /** @deprecated use `UpdatePrompt2PromptsImageUrl$Outbound` instead. */
  export type Outbound = UpdatePrompt2PromptsImageUrl$Outbound;
}

export function updatePrompt2PromptsImageUrlToJSON(
  updatePrompt2PromptsImageUrl: UpdatePrompt2PromptsImageUrl,
): string {
  return JSON.stringify(
    UpdatePrompt2PromptsImageUrl$outboundSchema.parse(
      updatePrompt2PromptsImageUrl,
    ),
  );
}

export function updatePrompt2PromptsImageUrlFromJSON(
  jsonString: string,
): SafeParseResult<UpdatePrompt2PromptsImageUrl, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdatePrompt2PromptsImageUrl$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdatePrompt2PromptsImageUrl' from JSON`,
  );
}

/** @internal */
export const UpdatePrompt2Prompts2$inboundSchema: z.ZodType<
  UpdatePrompt2Prompts2,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: UpdatePrompt2PromptsResponse200Type$inboundSchema,
  image_url: z.lazy(() => UpdatePrompt2PromptsImageUrl$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "image_url": "imageUrl",
  });
});

/** @internal */
export type UpdatePrompt2Prompts2$Outbound = {
  type: string;
  image_url: UpdatePrompt2PromptsImageUrl$Outbound;
};

/** @internal */
export const UpdatePrompt2Prompts2$outboundSchema: z.ZodType<
  UpdatePrompt2Prompts2$Outbound,
  z.ZodTypeDef,
  UpdatePrompt2Prompts2
> = z.object({
  type: UpdatePrompt2PromptsResponse200Type$outboundSchema,
  imageUrl: z.lazy(() => UpdatePrompt2PromptsImageUrl$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    imageUrl: "image_url",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdatePrompt2Prompts2$ {
  /** @deprecated use `UpdatePrompt2Prompts2$inboundSchema` instead. */
  export const inboundSchema = UpdatePrompt2Prompts2$inboundSchema;
  /** @deprecated use `UpdatePrompt2Prompts2$outboundSchema` instead. */
  export const outboundSchema = UpdatePrompt2Prompts2$outboundSchema;
  /** @deprecated use `UpdatePrompt2Prompts2$Outbound` instead. */
  export type Outbound = UpdatePrompt2Prompts2$Outbound;
}

export function updatePrompt2Prompts2ToJSON(
  updatePrompt2Prompts2: UpdatePrompt2Prompts2,
): string {
  return JSON.stringify(
    UpdatePrompt2Prompts2$outboundSchema.parse(updatePrompt2Prompts2),
  );
}

export function updatePrompt2Prompts2FromJSON(
  jsonString: string,
): SafeParseResult<UpdatePrompt2Prompts2, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdatePrompt2Prompts2$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdatePrompt2Prompts2' from JSON`,
  );
}

/** @internal */
export const UpdatePrompt2PromptsResponseType$inboundSchema: z.ZodNativeEnum<
  typeof UpdatePrompt2PromptsResponseType
> = z.nativeEnum(UpdatePrompt2PromptsResponseType);

/** @internal */
export const UpdatePrompt2PromptsResponseType$outboundSchema: z.ZodNativeEnum<
  typeof UpdatePrompt2PromptsResponseType
> = UpdatePrompt2PromptsResponseType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdatePrompt2PromptsResponseType$ {
  /** @deprecated use `UpdatePrompt2PromptsResponseType$inboundSchema` instead. */
  export const inboundSchema = UpdatePrompt2PromptsResponseType$inboundSchema;
  /** @deprecated use `UpdatePrompt2PromptsResponseType$outboundSchema` instead. */
  export const outboundSchema = UpdatePrompt2PromptsResponseType$outboundSchema;
}

/** @internal */
export const UpdatePrompt2Prompts1$inboundSchema: z.ZodType<
  UpdatePrompt2Prompts1,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: UpdatePrompt2PromptsResponseType$inboundSchema,
  text: z.string(),
});

/** @internal */
export type UpdatePrompt2Prompts1$Outbound = {
  type: string;
  text: string;
};

/** @internal */
export const UpdatePrompt2Prompts1$outboundSchema: z.ZodType<
  UpdatePrompt2Prompts1$Outbound,
  z.ZodTypeDef,
  UpdatePrompt2Prompts1
> = z.object({
  type: UpdatePrompt2PromptsResponseType$outboundSchema,
  text: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdatePrompt2Prompts1$ {
  /** @deprecated use `UpdatePrompt2Prompts1$inboundSchema` instead. */
  export const inboundSchema = UpdatePrompt2Prompts1$inboundSchema;
  /** @deprecated use `UpdatePrompt2Prompts1$outboundSchema` instead. */
  export const outboundSchema = UpdatePrompt2Prompts1$outboundSchema;
  /** @deprecated use `UpdatePrompt2Prompts1$Outbound` instead. */
  export type Outbound = UpdatePrompt2Prompts1$Outbound;
}

export function updatePrompt2Prompts1ToJSON(
  updatePrompt2Prompts1: UpdatePrompt2Prompts1,
): string {
  return JSON.stringify(
    UpdatePrompt2Prompts1$outboundSchema.parse(updatePrompt2Prompts1),
  );
}

export function updatePrompt2Prompts1FromJSON(
  jsonString: string,
): SafeParseResult<UpdatePrompt2Prompts1, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdatePrompt2Prompts1$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdatePrompt2Prompts1' from JSON`,
  );
}

/** @internal */
export const UpdatePromptContentPrompts2$inboundSchema: z.ZodType<
  UpdatePromptContentPrompts2,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => UpdatePrompt2Prompts1$inboundSchema),
  z.lazy(() => UpdatePrompt2Prompts2$inboundSchema),
]);

/** @internal */
export type UpdatePromptContentPrompts2$Outbound =
  | UpdatePrompt2Prompts1$Outbound
  | UpdatePrompt2Prompts2$Outbound;

/** @internal */
export const UpdatePromptContentPrompts2$outboundSchema: z.ZodType<
  UpdatePromptContentPrompts2$Outbound,
  z.ZodTypeDef,
  UpdatePromptContentPrompts2
> = z.union([
  z.lazy(() => UpdatePrompt2Prompts1$outboundSchema),
  z.lazy(() => UpdatePrompt2Prompts2$outboundSchema),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdatePromptContentPrompts2$ {
  /** @deprecated use `UpdatePromptContentPrompts2$inboundSchema` instead. */
  export const inboundSchema = UpdatePromptContentPrompts2$inboundSchema;
  /** @deprecated use `UpdatePromptContentPrompts2$outboundSchema` instead. */
  export const outboundSchema = UpdatePromptContentPrompts2$outboundSchema;
  /** @deprecated use `UpdatePromptContentPrompts2$Outbound` instead. */
  export type Outbound = UpdatePromptContentPrompts2$Outbound;
}

export function updatePromptContentPrompts2ToJSON(
  updatePromptContentPrompts2: UpdatePromptContentPrompts2,
): string {
  return JSON.stringify(
    UpdatePromptContentPrompts2$outboundSchema.parse(
      updatePromptContentPrompts2,
    ),
  );
}

export function updatePromptContentPrompts2FromJSON(
  jsonString: string,
): SafeParseResult<UpdatePromptContentPrompts2, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdatePromptContentPrompts2$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdatePromptContentPrompts2' from JSON`,
  );
}

/** @internal */
export const UpdatePromptPromptsContent$inboundSchema: z.ZodType<
  UpdatePromptPromptsContent,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.string(),
  z.array(z.union([
    z.lazy(() => UpdatePrompt2Prompts1$inboundSchema),
    z.lazy(() => UpdatePrompt2Prompts2$inboundSchema),
  ])),
]);

/** @internal */
export type UpdatePromptPromptsContent$Outbound =
  | string
  | Array<UpdatePrompt2Prompts1$Outbound | UpdatePrompt2Prompts2$Outbound>;

/** @internal */
export const UpdatePromptPromptsContent$outboundSchema: z.ZodType<
  UpdatePromptPromptsContent$Outbound,
  z.ZodTypeDef,
  UpdatePromptPromptsContent
> = z.union([
  z.string(),
  z.array(z.union([
    z.lazy(() => UpdatePrompt2Prompts1$outboundSchema),
    z.lazy(() => UpdatePrompt2Prompts2$outboundSchema),
  ])),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdatePromptPromptsContent$ {
  /** @deprecated use `UpdatePromptPromptsContent$inboundSchema` instead. */
  export const inboundSchema = UpdatePromptPromptsContent$inboundSchema;
  /** @deprecated use `UpdatePromptPromptsContent$outboundSchema` instead. */
  export const outboundSchema = UpdatePromptPromptsContent$outboundSchema;
  /** @deprecated use `UpdatePromptPromptsContent$Outbound` instead. */
  export type Outbound = UpdatePromptPromptsContent$Outbound;
}

export function updatePromptPromptsContentToJSON(
  updatePromptPromptsContent: UpdatePromptPromptsContent,
): string {
  return JSON.stringify(
    UpdatePromptPromptsContent$outboundSchema.parse(updatePromptPromptsContent),
  );
}

export function updatePromptPromptsContentFromJSON(
  jsonString: string,
): SafeParseResult<UpdatePromptPromptsContent, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdatePromptPromptsContent$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdatePromptPromptsContent' from JSON`,
  );
}

/** @internal */
export const UpdatePromptPromptsResponseType$inboundSchema: z.ZodNativeEnum<
  typeof UpdatePromptPromptsResponseType
> = z.nativeEnum(UpdatePromptPromptsResponseType);

/** @internal */
export const UpdatePromptPromptsResponseType$outboundSchema: z.ZodNativeEnum<
  typeof UpdatePromptPromptsResponseType
> = UpdatePromptPromptsResponseType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdatePromptPromptsResponseType$ {
  /** @deprecated use `UpdatePromptPromptsResponseType$inboundSchema` instead. */
  export const inboundSchema = UpdatePromptPromptsResponseType$inboundSchema;
  /** @deprecated use `UpdatePromptPromptsResponseType$outboundSchema` instead. */
  export const outboundSchema = UpdatePromptPromptsResponseType$outboundSchema;
}

/** @internal */
export const UpdatePromptPromptsFunction$inboundSchema: z.ZodType<
  UpdatePromptPromptsFunction,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.string(),
  arguments: z.string(),
});

/** @internal */
export type UpdatePromptPromptsFunction$Outbound = {
  name: string;
  arguments: string;
};

/** @internal */
export const UpdatePromptPromptsFunction$outboundSchema: z.ZodType<
  UpdatePromptPromptsFunction$Outbound,
  z.ZodTypeDef,
  UpdatePromptPromptsFunction
> = z.object({
  name: z.string(),
  arguments: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdatePromptPromptsFunction$ {
  /** @deprecated use `UpdatePromptPromptsFunction$inboundSchema` instead. */
  export const inboundSchema = UpdatePromptPromptsFunction$inboundSchema;
  /** @deprecated use `UpdatePromptPromptsFunction$outboundSchema` instead. */
  export const outboundSchema = UpdatePromptPromptsFunction$outboundSchema;
  /** @deprecated use `UpdatePromptPromptsFunction$Outbound` instead. */
  export type Outbound = UpdatePromptPromptsFunction$Outbound;
}

export function updatePromptPromptsFunctionToJSON(
  updatePromptPromptsFunction: UpdatePromptPromptsFunction,
): string {
  return JSON.stringify(
    UpdatePromptPromptsFunction$outboundSchema.parse(
      updatePromptPromptsFunction,
    ),
  );
}

export function updatePromptPromptsFunctionFromJSON(
  jsonString: string,
): SafeParseResult<UpdatePromptPromptsFunction, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdatePromptPromptsFunction$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdatePromptPromptsFunction' from JSON`,
  );
}

/** @internal */
export const UpdatePromptPromptsToolCalls$inboundSchema: z.ZodType<
  UpdatePromptPromptsToolCalls,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string().optional(),
  index: z.number().optional(),
  type: UpdatePromptPromptsResponseType$inboundSchema,
  function: z.lazy(() => UpdatePromptPromptsFunction$inboundSchema),
});

/** @internal */
export type UpdatePromptPromptsToolCalls$Outbound = {
  id?: string | undefined;
  index?: number | undefined;
  type: string;
  function: UpdatePromptPromptsFunction$Outbound;
};

/** @internal */
export const UpdatePromptPromptsToolCalls$outboundSchema: z.ZodType<
  UpdatePromptPromptsToolCalls$Outbound,
  z.ZodTypeDef,
  UpdatePromptPromptsToolCalls
> = z.object({
  id: z.string().optional(),
  index: z.number().optional(),
  type: UpdatePromptPromptsResponseType$outboundSchema,
  function: z.lazy(() => UpdatePromptPromptsFunction$outboundSchema),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdatePromptPromptsToolCalls$ {
  /** @deprecated use `UpdatePromptPromptsToolCalls$inboundSchema` instead. */
  export const inboundSchema = UpdatePromptPromptsToolCalls$inboundSchema;
  /** @deprecated use `UpdatePromptPromptsToolCalls$outboundSchema` instead. */
  export const outboundSchema = UpdatePromptPromptsToolCalls$outboundSchema;
  /** @deprecated use `UpdatePromptPromptsToolCalls$Outbound` instead. */
  export type Outbound = UpdatePromptPromptsToolCalls$Outbound;
}

export function updatePromptPromptsToolCallsToJSON(
  updatePromptPromptsToolCalls: UpdatePromptPromptsToolCalls,
): string {
  return JSON.stringify(
    UpdatePromptPromptsToolCalls$outboundSchema.parse(
      updatePromptPromptsToolCalls,
    ),
  );
}

export function updatePromptPromptsToolCallsFromJSON(
  jsonString: string,
): SafeParseResult<UpdatePromptPromptsToolCalls, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdatePromptPromptsToolCalls$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdatePromptPromptsToolCalls' from JSON`,
  );
}

/** @internal */
export const UpdatePromptPromptsMessages$inboundSchema: z.ZodType<
  UpdatePromptPromptsMessages,
  z.ZodTypeDef,
  unknown
> = z.object({
  role: UpdatePromptPromptsRole$inboundSchema,
  content: z.union([
    z.string(),
    z.array(z.union([
      z.lazy(() => UpdatePrompt2Prompts1$inboundSchema),
      z.lazy(() => UpdatePrompt2Prompts2$inboundSchema),
    ])),
  ]),
  tool_calls: z.array(z.lazy(() => UpdatePromptPromptsToolCalls$inboundSchema))
    .optional(),
}).transform((v) => {
  return remap$(v, {
    "tool_calls": "toolCalls",
  });
});

/** @internal */
export type UpdatePromptPromptsMessages$Outbound = {
  role: string;
  content:
    | string
    | Array<UpdatePrompt2Prompts1$Outbound | UpdatePrompt2Prompts2$Outbound>;
  tool_calls?: Array<UpdatePromptPromptsToolCalls$Outbound> | undefined;
};

/** @internal */
export const UpdatePromptPromptsMessages$outboundSchema: z.ZodType<
  UpdatePromptPromptsMessages$Outbound,
  z.ZodTypeDef,
  UpdatePromptPromptsMessages
> = z.object({
  role: UpdatePromptPromptsRole$outboundSchema,
  content: z.union([
    z.string(),
    z.array(z.union([
      z.lazy(() => UpdatePrompt2Prompts1$outboundSchema),
      z.lazy(() => UpdatePrompt2Prompts2$outboundSchema),
    ])),
  ]),
  toolCalls: z.array(z.lazy(() => UpdatePromptPromptsToolCalls$outboundSchema))
    .optional(),
}).transform((v) => {
  return remap$(v, {
    toolCalls: "tool_calls",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdatePromptPromptsMessages$ {
  /** @deprecated use `UpdatePromptPromptsMessages$inboundSchema` instead. */
  export const inboundSchema = UpdatePromptPromptsMessages$inboundSchema;
  /** @deprecated use `UpdatePromptPromptsMessages$outboundSchema` instead. */
  export const outboundSchema = UpdatePromptPromptsMessages$outboundSchema;
  /** @deprecated use `UpdatePromptPromptsMessages$Outbound` instead. */
  export type Outbound = UpdatePromptPromptsMessages$Outbound;
}

export function updatePromptPromptsMessagesToJSON(
  updatePromptPromptsMessages: UpdatePromptPromptsMessages,
): string {
  return JSON.stringify(
    UpdatePromptPromptsMessages$outboundSchema.parse(
      updatePromptPromptsMessages,
    ),
  );
}

export function updatePromptPromptsMessagesFromJSON(
  jsonString: string,
): SafeParseResult<UpdatePromptPromptsMessages, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdatePromptPromptsMessages$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdatePromptPromptsMessages' from JSON`,
  );
}

/** @internal */
export const UpdatePromptPromptsPromptConfig$inboundSchema: z.ZodType<
  UpdatePromptPromptsPromptConfig,
  z.ZodTypeDef,
  unknown
> = z.object({
  stream: z.boolean().optional(),
  model: z.string().optional(),
  model_db_id: z.string().optional(),
  model_type: UpdatePromptPromptsModelType$inboundSchema.optional(),
  model_parameters: z.lazy(() =>
    UpdatePromptPromptsModelParameters$inboundSchema
  ).optional(),
  provider: UpdatePromptPromptsProvider$inboundSchema.optional(),
  integration_id: z.nullable(z.string()).optional(),
  version: z.string().optional(),
  messages: z.array(z.lazy(() => UpdatePromptPromptsMessages$inboundSchema)),
}).transform((v) => {
  return remap$(v, {
    "model_db_id": "modelDbId",
    "model_type": "modelType",
    "model_parameters": "modelParameters",
    "integration_id": "integrationId",
  });
});

/** @internal */
export type UpdatePromptPromptsPromptConfig$Outbound = {
  stream?: boolean | undefined;
  model?: string | undefined;
  model_db_id?: string | undefined;
  model_type?: string | undefined;
  model_parameters?: UpdatePromptPromptsModelParameters$Outbound | undefined;
  provider?: string | undefined;
  integration_id?: string | null | undefined;
  version?: string | undefined;
  messages: Array<UpdatePromptPromptsMessages$Outbound>;
};

/** @internal */
export const UpdatePromptPromptsPromptConfig$outboundSchema: z.ZodType<
  UpdatePromptPromptsPromptConfig$Outbound,
  z.ZodTypeDef,
  UpdatePromptPromptsPromptConfig
> = z.object({
  stream: z.boolean().optional(),
  model: z.string().optional(),
  modelDbId: z.string().optional(),
  modelType: UpdatePromptPromptsModelType$outboundSchema.optional(),
  modelParameters: z.lazy(() =>
    UpdatePromptPromptsModelParameters$outboundSchema
  ).optional(),
  provider: UpdatePromptPromptsProvider$outboundSchema.optional(),
  integrationId: z.nullable(z.string()).optional(),
  version: z.string().optional(),
  messages: z.array(z.lazy(() => UpdatePromptPromptsMessages$outboundSchema)),
}).transform((v) => {
  return remap$(v, {
    modelDbId: "model_db_id",
    modelType: "model_type",
    modelParameters: "model_parameters",
    integrationId: "integration_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdatePromptPromptsPromptConfig$ {
  /** @deprecated use `UpdatePromptPromptsPromptConfig$inboundSchema` instead. */
  export const inboundSchema = UpdatePromptPromptsPromptConfig$inboundSchema;
  /** @deprecated use `UpdatePromptPromptsPromptConfig$outboundSchema` instead. */
  export const outboundSchema = UpdatePromptPromptsPromptConfig$outboundSchema;
  /** @deprecated use `UpdatePromptPromptsPromptConfig$Outbound` instead. */
  export type Outbound = UpdatePromptPromptsPromptConfig$Outbound;
}

export function updatePromptPromptsPromptConfigToJSON(
  updatePromptPromptsPromptConfig: UpdatePromptPromptsPromptConfig,
): string {
  return JSON.stringify(
    UpdatePromptPromptsPromptConfig$outboundSchema.parse(
      updatePromptPromptsPromptConfig,
    ),
  );
}

export function updatePromptPromptsPromptConfigFromJSON(
  jsonString: string,
): SafeParseResult<UpdatePromptPromptsPromptConfig, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdatePromptPromptsPromptConfig$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdatePromptPromptsPromptConfig' from JSON`,
  );
}

/** @internal */
export const UpdatePromptPromptsUseCases$inboundSchema: z.ZodNativeEnum<
  typeof UpdatePromptPromptsUseCases
> = z.nativeEnum(UpdatePromptPromptsUseCases);

/** @internal */
export const UpdatePromptPromptsUseCases$outboundSchema: z.ZodNativeEnum<
  typeof UpdatePromptPromptsUseCases
> = UpdatePromptPromptsUseCases$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdatePromptPromptsUseCases$ {
  /** @deprecated use `UpdatePromptPromptsUseCases$inboundSchema` instead. */
  export const inboundSchema = UpdatePromptPromptsUseCases$inboundSchema;
  /** @deprecated use `UpdatePromptPromptsUseCases$outboundSchema` instead. */
  export const outboundSchema = UpdatePromptPromptsUseCases$outboundSchema;
}

/** @internal */
export const UpdatePromptPromptsLanguage$inboundSchema: z.ZodNativeEnum<
  typeof UpdatePromptPromptsLanguage
> = z.nativeEnum(UpdatePromptPromptsLanguage);

/** @internal */
export const UpdatePromptPromptsLanguage$outboundSchema: z.ZodNativeEnum<
  typeof UpdatePromptPromptsLanguage
> = UpdatePromptPromptsLanguage$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdatePromptPromptsLanguage$ {
  /** @deprecated use `UpdatePromptPromptsLanguage$inboundSchema` instead. */
  export const inboundSchema = UpdatePromptPromptsLanguage$inboundSchema;
  /** @deprecated use `UpdatePromptPromptsLanguage$outboundSchema` instead. */
  export const outboundSchema = UpdatePromptPromptsLanguage$outboundSchema;
}

/** @internal */
export const UpdatePromptPromptsMetadata$inboundSchema: z.ZodType<
  UpdatePromptPromptsMetadata,
  z.ZodTypeDef,
  unknown
> = z.object({
  use_cases: z.array(UpdatePromptPromptsUseCases$inboundSchema).optional(),
  language: UpdatePromptPromptsLanguage$inboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    "use_cases": "useCases",
  });
});

/** @internal */
export type UpdatePromptPromptsMetadata$Outbound = {
  use_cases?: Array<string> | undefined;
  language?: string | undefined;
};

/** @internal */
export const UpdatePromptPromptsMetadata$outboundSchema: z.ZodType<
  UpdatePromptPromptsMetadata$Outbound,
  z.ZodTypeDef,
  UpdatePromptPromptsMetadata
> = z.object({
  useCases: z.array(UpdatePromptPromptsUseCases$outboundSchema).optional(),
  language: UpdatePromptPromptsLanguage$outboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    useCases: "use_cases",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdatePromptPromptsMetadata$ {
  /** @deprecated use `UpdatePromptPromptsMetadata$inboundSchema` instead. */
  export const inboundSchema = UpdatePromptPromptsMetadata$inboundSchema;
  /** @deprecated use `UpdatePromptPromptsMetadata$outboundSchema` instead. */
  export const outboundSchema = UpdatePromptPromptsMetadata$outboundSchema;
  /** @deprecated use `UpdatePromptPromptsMetadata$Outbound` instead. */
  export type Outbound = UpdatePromptPromptsMetadata$Outbound;
}

export function updatePromptPromptsMetadataToJSON(
  updatePromptPromptsMetadata: UpdatePromptPromptsMetadata,
): string {
  return JSON.stringify(
    UpdatePromptPromptsMetadata$outboundSchema.parse(
      updatePromptPromptsMetadata,
    ),
  );
}

export function updatePromptPromptsMetadataFromJSON(
  jsonString: string,
): SafeParseResult<UpdatePromptPromptsMetadata, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdatePromptPromptsMetadata$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdatePromptPromptsMetadata' from JSON`,
  );
}

/** @internal */
export const UpdatePromptPromptsType$inboundSchema: z.ZodNativeEnum<
  typeof UpdatePromptPromptsType
> = z.nativeEnum(UpdatePromptPromptsType);

/** @internal */
export const UpdatePromptPromptsType$outboundSchema: z.ZodNativeEnum<
  typeof UpdatePromptPromptsType
> = UpdatePromptPromptsType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdatePromptPromptsType$ {
  /** @deprecated use `UpdatePromptPromptsType$inboundSchema` instead. */
  export const inboundSchema = UpdatePromptPromptsType$inboundSchema;
  /** @deprecated use `UpdatePromptPromptsType$outboundSchema` instead. */
  export const outboundSchema = UpdatePromptPromptsType$outboundSchema;
}

/** @internal */
export const UpdatePromptPromptsResponseModelType$inboundSchema:
  z.ZodNativeEnum<typeof UpdatePromptPromptsResponseModelType> = z.nativeEnum(
    UpdatePromptPromptsResponseModelType,
  );

/** @internal */
export const UpdatePromptPromptsResponseModelType$outboundSchema:
  z.ZodNativeEnum<typeof UpdatePromptPromptsResponseModelType> =
    UpdatePromptPromptsResponseModelType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdatePromptPromptsResponseModelType$ {
  /** @deprecated use `UpdatePromptPromptsResponseModelType$inboundSchema` instead. */
  export const inboundSchema =
    UpdatePromptPromptsResponseModelType$inboundSchema;
  /** @deprecated use `UpdatePromptPromptsResponseModelType$outboundSchema` instead. */
  export const outboundSchema =
    UpdatePromptPromptsResponseModelType$outboundSchema;
}

/** @internal */
export const UpdatePromptPromptsResponse200Format$inboundSchema:
  z.ZodNativeEnum<typeof UpdatePromptPromptsResponse200Format> = z.nativeEnum(
    UpdatePromptPromptsResponse200Format,
  );

/** @internal */
export const UpdatePromptPromptsResponse200Format$outboundSchema:
  z.ZodNativeEnum<typeof UpdatePromptPromptsResponse200Format> =
    UpdatePromptPromptsResponse200Format$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdatePromptPromptsResponse200Format$ {
  /** @deprecated use `UpdatePromptPromptsResponse200Format$inboundSchema` instead. */
  export const inboundSchema =
    UpdatePromptPromptsResponse200Format$inboundSchema;
  /** @deprecated use `UpdatePromptPromptsResponse200Format$outboundSchema` instead. */
  export const outboundSchema =
    UpdatePromptPromptsResponse200Format$outboundSchema;
}

/** @internal */
export const UpdatePromptPromptsResponseQuality$inboundSchema: z.ZodNativeEnum<
  typeof UpdatePromptPromptsResponseQuality
> = z.nativeEnum(UpdatePromptPromptsResponseQuality);

/** @internal */
export const UpdatePromptPromptsResponseQuality$outboundSchema: z.ZodNativeEnum<
  typeof UpdatePromptPromptsResponseQuality
> = UpdatePromptPromptsResponseQuality$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdatePromptPromptsResponseQuality$ {
  /** @deprecated use `UpdatePromptPromptsResponseQuality$inboundSchema` instead. */
  export const inboundSchema = UpdatePromptPromptsResponseQuality$inboundSchema;
  /** @deprecated use `UpdatePromptPromptsResponseQuality$outboundSchema` instead. */
  export const outboundSchema =
    UpdatePromptPromptsResponseQuality$outboundSchema;
}

/** @internal */
export const UpdatePromptResponseFormatPromptsResponse200ApplicationJSONResponseBodyType$inboundSchema:
  z.ZodNativeEnum<
    typeof UpdatePromptResponseFormatPromptsResponse200ApplicationJSONResponseBodyType
  > = z.nativeEnum(
    UpdatePromptResponseFormatPromptsResponse200ApplicationJSONResponseBodyType,
  );

/** @internal */
export const UpdatePromptResponseFormatPromptsResponse200ApplicationJSONResponseBodyType$outboundSchema:
  z.ZodNativeEnum<
    typeof UpdatePromptResponseFormatPromptsResponse200ApplicationJSONResponseBodyType
  > =
    UpdatePromptResponseFormatPromptsResponse200ApplicationJSONResponseBodyType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdatePromptResponseFormatPromptsResponse200ApplicationJSONResponseBodyType$ {
  /** @deprecated use `UpdatePromptResponseFormatPromptsResponse200ApplicationJSONResponseBodyType$inboundSchema` instead. */
  export const inboundSchema =
    UpdatePromptResponseFormatPromptsResponse200ApplicationJSONResponseBodyType$inboundSchema;
  /** @deprecated use `UpdatePromptResponseFormatPromptsResponse200ApplicationJSONResponseBodyType$outboundSchema` instead. */
  export const outboundSchema =
    UpdatePromptResponseFormatPromptsResponse200ApplicationJSONResponseBodyType$outboundSchema;
}

/** @internal */
export const UpdatePromptResponseFormatPromptsResponse2$inboundSchema:
  z.ZodType<UpdatePromptResponseFormatPromptsResponse2, z.ZodTypeDef, unknown> =
    z.object({
      type:
        UpdatePromptResponseFormatPromptsResponse200ApplicationJSONResponseBodyType$inboundSchema,
    });

/** @internal */
export type UpdatePromptResponseFormatPromptsResponse2$Outbound = {
  type: string;
};

/** @internal */
export const UpdatePromptResponseFormatPromptsResponse2$outboundSchema:
  z.ZodType<
    UpdatePromptResponseFormatPromptsResponse2$Outbound,
    z.ZodTypeDef,
    UpdatePromptResponseFormatPromptsResponse2
  > = z.object({
    type:
      UpdatePromptResponseFormatPromptsResponse200ApplicationJSONResponseBodyType$outboundSchema,
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdatePromptResponseFormatPromptsResponse2$ {
  /** @deprecated use `UpdatePromptResponseFormatPromptsResponse2$inboundSchema` instead. */
  export const inboundSchema =
    UpdatePromptResponseFormatPromptsResponse2$inboundSchema;
  /** @deprecated use `UpdatePromptResponseFormatPromptsResponse2$outboundSchema` instead. */
  export const outboundSchema =
    UpdatePromptResponseFormatPromptsResponse2$outboundSchema;
  /** @deprecated use `UpdatePromptResponseFormatPromptsResponse2$Outbound` instead. */
  export type Outbound = UpdatePromptResponseFormatPromptsResponse2$Outbound;
}

export function updatePromptResponseFormatPromptsResponse2ToJSON(
  updatePromptResponseFormatPromptsResponse2:
    UpdatePromptResponseFormatPromptsResponse2,
): string {
  return JSON.stringify(
    UpdatePromptResponseFormatPromptsResponse2$outboundSchema.parse(
      updatePromptResponseFormatPromptsResponse2,
    ),
  );
}

export function updatePromptResponseFormatPromptsResponse2FromJSON(
  jsonString: string,
): SafeParseResult<
  UpdatePromptResponseFormatPromptsResponse2,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      UpdatePromptResponseFormatPromptsResponse2$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'UpdatePromptResponseFormatPromptsResponse2' from JSON`,
  );
}

/** @internal */
export const UpdatePromptResponseFormatPromptsResponse200ApplicationJSONType$inboundSchema:
  z.ZodNativeEnum<
    typeof UpdatePromptResponseFormatPromptsResponse200ApplicationJSONType
  > = z.nativeEnum(
    UpdatePromptResponseFormatPromptsResponse200ApplicationJSONType,
  );

/** @internal */
export const UpdatePromptResponseFormatPromptsResponse200ApplicationJSONType$outboundSchema:
  z.ZodNativeEnum<
    typeof UpdatePromptResponseFormatPromptsResponse200ApplicationJSONType
  > =
    UpdatePromptResponseFormatPromptsResponse200ApplicationJSONType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdatePromptResponseFormatPromptsResponse200ApplicationJSONType$ {
  /** @deprecated use `UpdatePromptResponseFormatPromptsResponse200ApplicationJSONType$inboundSchema` instead. */
  export const inboundSchema =
    UpdatePromptResponseFormatPromptsResponse200ApplicationJSONType$inboundSchema;
  /** @deprecated use `UpdatePromptResponseFormatPromptsResponse200ApplicationJSONType$outboundSchema` instead. */
  export const outboundSchema =
    UpdatePromptResponseFormatPromptsResponse200ApplicationJSONType$outboundSchema;
}

/** @internal */
export const UpdatePromptResponseFormatPromptsResponseJsonSchema$inboundSchema:
  z.ZodType<
    UpdatePromptResponseFormatPromptsResponseJsonSchema,
    z.ZodTypeDef,
    unknown
  > = z.object({
    name: z.string(),
    strict: z.boolean(),
    schema: z.record(z.any()),
  });

/** @internal */
export type UpdatePromptResponseFormatPromptsResponseJsonSchema$Outbound = {
  name: string;
  strict: boolean;
  schema: { [k: string]: any };
};

/** @internal */
export const UpdatePromptResponseFormatPromptsResponseJsonSchema$outboundSchema:
  z.ZodType<
    UpdatePromptResponseFormatPromptsResponseJsonSchema$Outbound,
    z.ZodTypeDef,
    UpdatePromptResponseFormatPromptsResponseJsonSchema
  > = z.object({
    name: z.string(),
    strict: z.boolean(),
    schema: z.record(z.any()),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdatePromptResponseFormatPromptsResponseJsonSchema$ {
  /** @deprecated use `UpdatePromptResponseFormatPromptsResponseJsonSchema$inboundSchema` instead. */
  export const inboundSchema =
    UpdatePromptResponseFormatPromptsResponseJsonSchema$inboundSchema;
  /** @deprecated use `UpdatePromptResponseFormatPromptsResponseJsonSchema$outboundSchema` instead. */
  export const outboundSchema =
    UpdatePromptResponseFormatPromptsResponseJsonSchema$outboundSchema;
  /** @deprecated use `UpdatePromptResponseFormatPromptsResponseJsonSchema$Outbound` instead. */
  export type Outbound =
    UpdatePromptResponseFormatPromptsResponseJsonSchema$Outbound;
}

export function updatePromptResponseFormatPromptsResponseJsonSchemaToJSON(
  updatePromptResponseFormatPromptsResponseJsonSchema:
    UpdatePromptResponseFormatPromptsResponseJsonSchema,
): string {
  return JSON.stringify(
    UpdatePromptResponseFormatPromptsResponseJsonSchema$outboundSchema.parse(
      updatePromptResponseFormatPromptsResponseJsonSchema,
    ),
  );
}

export function updatePromptResponseFormatPromptsResponseJsonSchemaFromJSON(
  jsonString: string,
): SafeParseResult<
  UpdatePromptResponseFormatPromptsResponseJsonSchema,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      UpdatePromptResponseFormatPromptsResponseJsonSchema$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'UpdatePromptResponseFormatPromptsResponseJsonSchema' from JSON`,
  );
}

/** @internal */
export const UpdatePromptResponseFormatPromptsResponse1$inboundSchema:
  z.ZodType<UpdatePromptResponseFormatPromptsResponse1, z.ZodTypeDef, unknown> =
    z.object({
      type:
        UpdatePromptResponseFormatPromptsResponse200ApplicationJSONType$inboundSchema,
      json_schema: z.lazy(() =>
        UpdatePromptResponseFormatPromptsResponseJsonSchema$inboundSchema
      ),
    }).transform((v) => {
      return remap$(v, {
        "json_schema": "jsonSchema",
      });
    });

/** @internal */
export type UpdatePromptResponseFormatPromptsResponse1$Outbound = {
  type: string;
  json_schema: UpdatePromptResponseFormatPromptsResponseJsonSchema$Outbound;
};

/** @internal */
export const UpdatePromptResponseFormatPromptsResponse1$outboundSchema:
  z.ZodType<
    UpdatePromptResponseFormatPromptsResponse1$Outbound,
    z.ZodTypeDef,
    UpdatePromptResponseFormatPromptsResponse1
  > = z.object({
    type:
      UpdatePromptResponseFormatPromptsResponse200ApplicationJSONType$outboundSchema,
    jsonSchema: z.lazy(() =>
      UpdatePromptResponseFormatPromptsResponseJsonSchema$outboundSchema
    ),
  }).transform((v) => {
    return remap$(v, {
      jsonSchema: "json_schema",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdatePromptResponseFormatPromptsResponse1$ {
  /** @deprecated use `UpdatePromptResponseFormatPromptsResponse1$inboundSchema` instead. */
  export const inboundSchema =
    UpdatePromptResponseFormatPromptsResponse1$inboundSchema;
  /** @deprecated use `UpdatePromptResponseFormatPromptsResponse1$outboundSchema` instead. */
  export const outboundSchema =
    UpdatePromptResponseFormatPromptsResponse1$outboundSchema;
  /** @deprecated use `UpdatePromptResponseFormatPromptsResponse1$Outbound` instead. */
  export type Outbound = UpdatePromptResponseFormatPromptsResponse1$Outbound;
}

export function updatePromptResponseFormatPromptsResponse1ToJSON(
  updatePromptResponseFormatPromptsResponse1:
    UpdatePromptResponseFormatPromptsResponse1,
): string {
  return JSON.stringify(
    UpdatePromptResponseFormatPromptsResponse1$outboundSchema.parse(
      updatePromptResponseFormatPromptsResponse1,
    ),
  );
}

export function updatePromptResponseFormatPromptsResponse1FromJSON(
  jsonString: string,
): SafeParseResult<
  UpdatePromptResponseFormatPromptsResponse1,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      UpdatePromptResponseFormatPromptsResponse1$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'UpdatePromptResponseFormatPromptsResponse1' from JSON`,
  );
}

/** @internal */
export const UpdatePromptPromptsResponseResponseFormat$inboundSchema: z.ZodType<
  UpdatePromptPromptsResponseResponseFormat,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => UpdatePromptResponseFormatPromptsResponse2$inboundSchema),
  z.lazy(() => UpdatePromptResponseFormatPromptsResponse1$inboundSchema),
]);

/** @internal */
export type UpdatePromptPromptsResponseResponseFormat$Outbound =
  | UpdatePromptResponseFormatPromptsResponse2$Outbound
  | UpdatePromptResponseFormatPromptsResponse1$Outbound;

/** @internal */
export const UpdatePromptPromptsResponseResponseFormat$outboundSchema:
  z.ZodType<
    UpdatePromptPromptsResponseResponseFormat$Outbound,
    z.ZodTypeDef,
    UpdatePromptPromptsResponseResponseFormat
  > = z.union([
    z.lazy(() => UpdatePromptResponseFormatPromptsResponse2$outboundSchema),
    z.lazy(() => UpdatePromptResponseFormatPromptsResponse1$outboundSchema),
  ]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdatePromptPromptsResponseResponseFormat$ {
  /** @deprecated use `UpdatePromptPromptsResponseResponseFormat$inboundSchema` instead. */
  export const inboundSchema =
    UpdatePromptPromptsResponseResponseFormat$inboundSchema;
  /** @deprecated use `UpdatePromptPromptsResponseResponseFormat$outboundSchema` instead. */
  export const outboundSchema =
    UpdatePromptPromptsResponseResponseFormat$outboundSchema;
  /** @deprecated use `UpdatePromptPromptsResponseResponseFormat$Outbound` instead. */
  export type Outbound = UpdatePromptPromptsResponseResponseFormat$Outbound;
}

export function updatePromptPromptsResponseResponseFormatToJSON(
  updatePromptPromptsResponseResponseFormat:
    UpdatePromptPromptsResponseResponseFormat,
): string {
  return JSON.stringify(
    UpdatePromptPromptsResponseResponseFormat$outboundSchema.parse(
      updatePromptPromptsResponseResponseFormat,
    ),
  );
}

export function updatePromptPromptsResponseResponseFormatFromJSON(
  jsonString: string,
): SafeParseResult<
  UpdatePromptPromptsResponseResponseFormat,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      UpdatePromptPromptsResponseResponseFormat$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'UpdatePromptPromptsResponseResponseFormat' from JSON`,
  );
}

/** @internal */
export const UpdatePromptPromptsResponsePhotoRealVersion$inboundSchema:
  z.ZodNativeEnum<typeof UpdatePromptPromptsResponsePhotoRealVersion> = z
    .nativeEnum(UpdatePromptPromptsResponsePhotoRealVersion);

/** @internal */
export const UpdatePromptPromptsResponsePhotoRealVersion$outboundSchema:
  z.ZodNativeEnum<typeof UpdatePromptPromptsResponsePhotoRealVersion> =
    UpdatePromptPromptsResponsePhotoRealVersion$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdatePromptPromptsResponsePhotoRealVersion$ {
  /** @deprecated use `UpdatePromptPromptsResponsePhotoRealVersion$inboundSchema` instead. */
  export const inboundSchema =
    UpdatePromptPromptsResponsePhotoRealVersion$inboundSchema;
  /** @deprecated use `UpdatePromptPromptsResponsePhotoRealVersion$outboundSchema` instead. */
  export const outboundSchema =
    UpdatePromptPromptsResponsePhotoRealVersion$outboundSchema;
}

/** @internal */
export const UpdatePromptPromptsResponseEncodingFormat$inboundSchema:
  z.ZodNativeEnum<typeof UpdatePromptPromptsResponseEncodingFormat> = z
    .nativeEnum(UpdatePromptPromptsResponseEncodingFormat);

/** @internal */
export const UpdatePromptPromptsResponseEncodingFormat$outboundSchema:
  z.ZodNativeEnum<typeof UpdatePromptPromptsResponseEncodingFormat> =
    UpdatePromptPromptsResponseEncodingFormat$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdatePromptPromptsResponseEncodingFormat$ {
  /** @deprecated use `UpdatePromptPromptsResponseEncodingFormat$inboundSchema` instead. */
  export const inboundSchema =
    UpdatePromptPromptsResponseEncodingFormat$inboundSchema;
  /** @deprecated use `UpdatePromptPromptsResponseEncodingFormat$outboundSchema` instead. */
  export const outboundSchema =
    UpdatePromptPromptsResponseEncodingFormat$outboundSchema;
}

/** @internal */
export const UpdatePromptPromptsResponseReasoningEffort$inboundSchema:
  z.ZodNativeEnum<typeof UpdatePromptPromptsResponseReasoningEffort> = z
    .nativeEnum(UpdatePromptPromptsResponseReasoningEffort);

/** @internal */
export const UpdatePromptPromptsResponseReasoningEffort$outboundSchema:
  z.ZodNativeEnum<typeof UpdatePromptPromptsResponseReasoningEffort> =
    UpdatePromptPromptsResponseReasoningEffort$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdatePromptPromptsResponseReasoningEffort$ {
  /** @deprecated use `UpdatePromptPromptsResponseReasoningEffort$inboundSchema` instead. */
  export const inboundSchema =
    UpdatePromptPromptsResponseReasoningEffort$inboundSchema;
  /** @deprecated use `UpdatePromptPromptsResponseReasoningEffort$outboundSchema` instead. */
  export const outboundSchema =
    UpdatePromptPromptsResponseReasoningEffort$outboundSchema;
}

/** @internal */
export const UpdatePromptPromptsResponseModelParameters$inboundSchema:
  z.ZodType<UpdatePromptPromptsResponseModelParameters, z.ZodTypeDef, unknown> =
    z.object({
      temperature: z.number().optional(),
      maxTokens: z.number().optional(),
      topK: z.number().optional(),
      topP: z.number().optional(),
      frequencyPenalty: z.number().optional(),
      presencePenalty: z.number().optional(),
      numImages: z.number().optional(),
      seed: z.number().optional(),
      format: UpdatePromptPromptsResponse200Format$inboundSchema.optional(),
      dimensions: z.string().optional(),
      quality: UpdatePromptPromptsResponseQuality$inboundSchema.optional(),
      style: z.string().optional(),
      responseFormat: z.nullable(
        z.union([
          z.lazy(() =>
            UpdatePromptResponseFormatPromptsResponse2$inboundSchema
          ),
          z.lazy(() =>
            UpdatePromptResponseFormatPromptsResponse1$inboundSchema
          ),
        ]),
      ).optional(),
      photoRealVersion:
        UpdatePromptPromptsResponsePhotoRealVersion$inboundSchema.optional(),
      encoding_format: UpdatePromptPromptsResponseEncodingFormat$inboundSchema
        .optional(),
      reasoningEffort: UpdatePromptPromptsResponseReasoningEffort$inboundSchema
        .optional(),
    }).transform((v) => {
      return remap$(v, {
        "encoding_format": "encodingFormat",
      });
    });

/** @internal */
export type UpdatePromptPromptsResponseModelParameters$Outbound = {
  temperature?: number | undefined;
  maxTokens?: number | undefined;
  topK?: number | undefined;
  topP?: number | undefined;
  frequencyPenalty?: number | undefined;
  presencePenalty?: number | undefined;
  numImages?: number | undefined;
  seed?: number | undefined;
  format?: string | undefined;
  dimensions?: string | undefined;
  quality?: string | undefined;
  style?: string | undefined;
  responseFormat?:
    | UpdatePromptResponseFormatPromptsResponse2$Outbound
    | UpdatePromptResponseFormatPromptsResponse1$Outbound
    | null
    | undefined;
  photoRealVersion?: string | undefined;
  encoding_format?: string | undefined;
  reasoningEffort?: string | undefined;
};

/** @internal */
export const UpdatePromptPromptsResponseModelParameters$outboundSchema:
  z.ZodType<
    UpdatePromptPromptsResponseModelParameters$Outbound,
    z.ZodTypeDef,
    UpdatePromptPromptsResponseModelParameters
  > = z.object({
    temperature: z.number().optional(),
    maxTokens: z.number().optional(),
    topK: z.number().optional(),
    topP: z.number().optional(),
    frequencyPenalty: z.number().optional(),
    presencePenalty: z.number().optional(),
    numImages: z.number().optional(),
    seed: z.number().optional(),
    format: UpdatePromptPromptsResponse200Format$outboundSchema.optional(),
    dimensions: z.string().optional(),
    quality: UpdatePromptPromptsResponseQuality$outboundSchema.optional(),
    style: z.string().optional(),
    responseFormat: z.nullable(
      z.union([
        z.lazy(() => UpdatePromptResponseFormatPromptsResponse2$outboundSchema),
        z.lazy(() => UpdatePromptResponseFormatPromptsResponse1$outboundSchema),
      ]),
    ).optional(),
    photoRealVersion: UpdatePromptPromptsResponsePhotoRealVersion$outboundSchema
      .optional(),
    encodingFormat: UpdatePromptPromptsResponseEncodingFormat$outboundSchema
      .optional(),
    reasoningEffort: UpdatePromptPromptsResponseReasoningEffort$outboundSchema
      .optional(),
  }).transform((v) => {
    return remap$(v, {
      encodingFormat: "encoding_format",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdatePromptPromptsResponseModelParameters$ {
  /** @deprecated use `UpdatePromptPromptsResponseModelParameters$inboundSchema` instead. */
  export const inboundSchema =
    UpdatePromptPromptsResponseModelParameters$inboundSchema;
  /** @deprecated use `UpdatePromptPromptsResponseModelParameters$outboundSchema` instead. */
  export const outboundSchema =
    UpdatePromptPromptsResponseModelParameters$outboundSchema;
  /** @deprecated use `UpdatePromptPromptsResponseModelParameters$Outbound` instead. */
  export type Outbound = UpdatePromptPromptsResponseModelParameters$Outbound;
}

export function updatePromptPromptsResponseModelParametersToJSON(
  updatePromptPromptsResponseModelParameters:
    UpdatePromptPromptsResponseModelParameters,
): string {
  return JSON.stringify(
    UpdatePromptPromptsResponseModelParameters$outboundSchema.parse(
      updatePromptPromptsResponseModelParameters,
    ),
  );
}

export function updatePromptPromptsResponseModelParametersFromJSON(
  jsonString: string,
): SafeParseResult<
  UpdatePromptPromptsResponseModelParameters,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      UpdatePromptPromptsResponseModelParameters$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'UpdatePromptPromptsResponseModelParameters' from JSON`,
  );
}

/** @internal */
export const UpdatePromptPromptsResponseProvider$inboundSchema: z.ZodNativeEnum<
  typeof UpdatePromptPromptsResponseProvider
> = z.nativeEnum(UpdatePromptPromptsResponseProvider);

/** @internal */
export const UpdatePromptPromptsResponseProvider$outboundSchema:
  z.ZodNativeEnum<typeof UpdatePromptPromptsResponseProvider> =
    UpdatePromptPromptsResponseProvider$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdatePromptPromptsResponseProvider$ {
  /** @deprecated use `UpdatePromptPromptsResponseProvider$inboundSchema` instead. */
  export const inboundSchema =
    UpdatePromptPromptsResponseProvider$inboundSchema;
  /** @deprecated use `UpdatePromptPromptsResponseProvider$outboundSchema` instead. */
  export const outboundSchema =
    UpdatePromptPromptsResponseProvider$outboundSchema;
}

/** @internal */
export const UpdatePromptPromptsResponseRole$inboundSchema: z.ZodNativeEnum<
  typeof UpdatePromptPromptsResponseRole
> = z.nativeEnum(UpdatePromptPromptsResponseRole);

/** @internal */
export const UpdatePromptPromptsResponseRole$outboundSchema: z.ZodNativeEnum<
  typeof UpdatePromptPromptsResponseRole
> = UpdatePromptPromptsResponseRole$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdatePromptPromptsResponseRole$ {
  /** @deprecated use `UpdatePromptPromptsResponseRole$inboundSchema` instead. */
  export const inboundSchema = UpdatePromptPromptsResponseRole$inboundSchema;
  /** @deprecated use `UpdatePromptPromptsResponseRole$outboundSchema` instead. */
  export const outboundSchema = UpdatePromptPromptsResponseRole$outboundSchema;
}

/** @internal */
export const UpdatePrompt2PromptsResponse200ApplicationJSONResponseBodyType$inboundSchema:
  z.ZodNativeEnum<
    typeof UpdatePrompt2PromptsResponse200ApplicationJSONResponseBodyType
  > = z.nativeEnum(
    UpdatePrompt2PromptsResponse200ApplicationJSONResponseBodyType,
  );

/** @internal */
export const UpdatePrompt2PromptsResponse200ApplicationJSONResponseBodyType$outboundSchema:
  z.ZodNativeEnum<
    typeof UpdatePrompt2PromptsResponse200ApplicationJSONResponseBodyType
  > =
    UpdatePrompt2PromptsResponse200ApplicationJSONResponseBodyType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdatePrompt2PromptsResponse200ApplicationJSONResponseBodyType$ {
  /** @deprecated use `UpdatePrompt2PromptsResponse200ApplicationJSONResponseBodyType$inboundSchema` instead. */
  export const inboundSchema =
    UpdatePrompt2PromptsResponse200ApplicationJSONResponseBodyType$inboundSchema;
  /** @deprecated use `UpdatePrompt2PromptsResponse200ApplicationJSONResponseBodyType$outboundSchema` instead. */
  export const outboundSchema =
    UpdatePrompt2PromptsResponse200ApplicationJSONResponseBodyType$outboundSchema;
}

/** @internal */
export const UpdatePrompt2PromptsResponseImageUrl$inboundSchema: z.ZodType<
  UpdatePrompt2PromptsResponseImageUrl,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string().optional(),
  url: z.string(),
  detail: z.string().optional(),
});

/** @internal */
export type UpdatePrompt2PromptsResponseImageUrl$Outbound = {
  id?: string | undefined;
  url: string;
  detail?: string | undefined;
};

/** @internal */
export const UpdatePrompt2PromptsResponseImageUrl$outboundSchema: z.ZodType<
  UpdatePrompt2PromptsResponseImageUrl$Outbound,
  z.ZodTypeDef,
  UpdatePrompt2PromptsResponseImageUrl
> = z.object({
  id: z.string().optional(),
  url: z.string(),
  detail: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdatePrompt2PromptsResponseImageUrl$ {
  /** @deprecated use `UpdatePrompt2PromptsResponseImageUrl$inboundSchema` instead. */
  export const inboundSchema =
    UpdatePrompt2PromptsResponseImageUrl$inboundSchema;
  /** @deprecated use `UpdatePrompt2PromptsResponseImageUrl$outboundSchema` instead. */
  export const outboundSchema =
    UpdatePrompt2PromptsResponseImageUrl$outboundSchema;
  /** @deprecated use `UpdatePrompt2PromptsResponseImageUrl$Outbound` instead. */
  export type Outbound = UpdatePrompt2PromptsResponseImageUrl$Outbound;
}

export function updatePrompt2PromptsResponseImageUrlToJSON(
  updatePrompt2PromptsResponseImageUrl: UpdatePrompt2PromptsResponseImageUrl,
): string {
  return JSON.stringify(
    UpdatePrompt2PromptsResponseImageUrl$outboundSchema.parse(
      updatePrompt2PromptsResponseImageUrl,
    ),
  );
}

export function updatePrompt2PromptsResponseImageUrlFromJSON(
  jsonString: string,
): SafeParseResult<UpdatePrompt2PromptsResponseImageUrl, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      UpdatePrompt2PromptsResponseImageUrl$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdatePrompt2PromptsResponseImageUrl' from JSON`,
  );
}

/** @internal */
export const UpdatePrompt2PromptsResponse2$inboundSchema: z.ZodType<
  UpdatePrompt2PromptsResponse2,
  z.ZodTypeDef,
  unknown
> = z.object({
  type:
    UpdatePrompt2PromptsResponse200ApplicationJSONResponseBodyType$inboundSchema,
  image_url: z.lazy(() => UpdatePrompt2PromptsResponseImageUrl$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "image_url": "imageUrl",
  });
});

/** @internal */
export type UpdatePrompt2PromptsResponse2$Outbound = {
  type: string;
  image_url: UpdatePrompt2PromptsResponseImageUrl$Outbound;
};

/** @internal */
export const UpdatePrompt2PromptsResponse2$outboundSchema: z.ZodType<
  UpdatePrompt2PromptsResponse2$Outbound,
  z.ZodTypeDef,
  UpdatePrompt2PromptsResponse2
> = z.object({
  type:
    UpdatePrompt2PromptsResponse200ApplicationJSONResponseBodyType$outboundSchema,
  imageUrl: z.lazy(() => UpdatePrompt2PromptsResponseImageUrl$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    imageUrl: "image_url",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdatePrompt2PromptsResponse2$ {
  /** @deprecated use `UpdatePrompt2PromptsResponse2$inboundSchema` instead. */
  export const inboundSchema = UpdatePrompt2PromptsResponse2$inboundSchema;
  /** @deprecated use `UpdatePrompt2PromptsResponse2$outboundSchema` instead. */
  export const outboundSchema = UpdatePrompt2PromptsResponse2$outboundSchema;
  /** @deprecated use `UpdatePrompt2PromptsResponse2$Outbound` instead. */
  export type Outbound = UpdatePrompt2PromptsResponse2$Outbound;
}

export function updatePrompt2PromptsResponse2ToJSON(
  updatePrompt2PromptsResponse2: UpdatePrompt2PromptsResponse2,
): string {
  return JSON.stringify(
    UpdatePrompt2PromptsResponse2$outboundSchema.parse(
      updatePrompt2PromptsResponse2,
    ),
  );
}

export function updatePrompt2PromptsResponse2FromJSON(
  jsonString: string,
): SafeParseResult<UpdatePrompt2PromptsResponse2, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdatePrompt2PromptsResponse2$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdatePrompt2PromptsResponse2' from JSON`,
  );
}

/** @internal */
export const UpdatePrompt2PromptsResponse200ApplicationJSONType$inboundSchema:
  z.ZodNativeEnum<typeof UpdatePrompt2PromptsResponse200ApplicationJSONType> = z
    .nativeEnum(UpdatePrompt2PromptsResponse200ApplicationJSONType);

/** @internal */
export const UpdatePrompt2PromptsResponse200ApplicationJSONType$outboundSchema:
  z.ZodNativeEnum<typeof UpdatePrompt2PromptsResponse200ApplicationJSONType> =
    UpdatePrompt2PromptsResponse200ApplicationJSONType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdatePrompt2PromptsResponse200ApplicationJSONType$ {
  /** @deprecated use `UpdatePrompt2PromptsResponse200ApplicationJSONType$inboundSchema` instead. */
  export const inboundSchema =
    UpdatePrompt2PromptsResponse200ApplicationJSONType$inboundSchema;
  /** @deprecated use `UpdatePrompt2PromptsResponse200ApplicationJSONType$outboundSchema` instead. */
  export const outboundSchema =
    UpdatePrompt2PromptsResponse200ApplicationJSONType$outboundSchema;
}

/** @internal */
export const UpdatePrompt2PromptsResponse1$inboundSchema: z.ZodType<
  UpdatePrompt2PromptsResponse1,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: UpdatePrompt2PromptsResponse200ApplicationJSONType$inboundSchema,
  text: z.string(),
});

/** @internal */
export type UpdatePrompt2PromptsResponse1$Outbound = {
  type: string;
  text: string;
};

/** @internal */
export const UpdatePrompt2PromptsResponse1$outboundSchema: z.ZodType<
  UpdatePrompt2PromptsResponse1$Outbound,
  z.ZodTypeDef,
  UpdatePrompt2PromptsResponse1
> = z.object({
  type: UpdatePrompt2PromptsResponse200ApplicationJSONType$outboundSchema,
  text: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdatePrompt2PromptsResponse1$ {
  /** @deprecated use `UpdatePrompt2PromptsResponse1$inboundSchema` instead. */
  export const inboundSchema = UpdatePrompt2PromptsResponse1$inboundSchema;
  /** @deprecated use `UpdatePrompt2PromptsResponse1$outboundSchema` instead. */
  export const outboundSchema = UpdatePrompt2PromptsResponse1$outboundSchema;
  /** @deprecated use `UpdatePrompt2PromptsResponse1$Outbound` instead. */
  export type Outbound = UpdatePrompt2PromptsResponse1$Outbound;
}

export function updatePrompt2PromptsResponse1ToJSON(
  updatePrompt2PromptsResponse1: UpdatePrompt2PromptsResponse1,
): string {
  return JSON.stringify(
    UpdatePrompt2PromptsResponse1$outboundSchema.parse(
      updatePrompt2PromptsResponse1,
    ),
  );
}

export function updatePrompt2PromptsResponse1FromJSON(
  jsonString: string,
): SafeParseResult<UpdatePrompt2PromptsResponse1, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdatePrompt2PromptsResponse1$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdatePrompt2PromptsResponse1' from JSON`,
  );
}

/** @internal */
export const UpdatePromptContentPromptsResponse2$inboundSchema: z.ZodType<
  UpdatePromptContentPromptsResponse2,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => UpdatePrompt2PromptsResponse1$inboundSchema),
  z.lazy(() => UpdatePrompt2PromptsResponse2$inboundSchema),
]);

/** @internal */
export type UpdatePromptContentPromptsResponse2$Outbound =
  | UpdatePrompt2PromptsResponse1$Outbound
  | UpdatePrompt2PromptsResponse2$Outbound;

/** @internal */
export const UpdatePromptContentPromptsResponse2$outboundSchema: z.ZodType<
  UpdatePromptContentPromptsResponse2$Outbound,
  z.ZodTypeDef,
  UpdatePromptContentPromptsResponse2
> = z.union([
  z.lazy(() => UpdatePrompt2PromptsResponse1$outboundSchema),
  z.lazy(() => UpdatePrompt2PromptsResponse2$outboundSchema),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdatePromptContentPromptsResponse2$ {
  /** @deprecated use `UpdatePromptContentPromptsResponse2$inboundSchema` instead. */
  export const inboundSchema =
    UpdatePromptContentPromptsResponse2$inboundSchema;
  /** @deprecated use `UpdatePromptContentPromptsResponse2$outboundSchema` instead. */
  export const outboundSchema =
    UpdatePromptContentPromptsResponse2$outboundSchema;
  /** @deprecated use `UpdatePromptContentPromptsResponse2$Outbound` instead. */
  export type Outbound = UpdatePromptContentPromptsResponse2$Outbound;
}

export function updatePromptContentPromptsResponse2ToJSON(
  updatePromptContentPromptsResponse2: UpdatePromptContentPromptsResponse2,
): string {
  return JSON.stringify(
    UpdatePromptContentPromptsResponse2$outboundSchema.parse(
      updatePromptContentPromptsResponse2,
    ),
  );
}

export function updatePromptContentPromptsResponse2FromJSON(
  jsonString: string,
): SafeParseResult<UpdatePromptContentPromptsResponse2, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      UpdatePromptContentPromptsResponse2$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdatePromptContentPromptsResponse2' from JSON`,
  );
}

/** @internal */
export const UpdatePromptPromptsResponseContent$inboundSchema: z.ZodType<
  UpdatePromptPromptsResponseContent,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.string(),
  z.array(z.union([
    z.lazy(() => UpdatePrompt2PromptsResponse1$inboundSchema),
    z.lazy(() => UpdatePrompt2PromptsResponse2$inboundSchema),
  ])),
]);

/** @internal */
export type UpdatePromptPromptsResponseContent$Outbound =
  | string
  | Array<
    | UpdatePrompt2PromptsResponse1$Outbound
    | UpdatePrompt2PromptsResponse2$Outbound
  >;

/** @internal */
export const UpdatePromptPromptsResponseContent$outboundSchema: z.ZodType<
  UpdatePromptPromptsResponseContent$Outbound,
  z.ZodTypeDef,
  UpdatePromptPromptsResponseContent
> = z.union([
  z.string(),
  z.array(z.union([
    z.lazy(() => UpdatePrompt2PromptsResponse1$outboundSchema),
    z.lazy(() => UpdatePrompt2PromptsResponse2$outboundSchema),
  ])),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdatePromptPromptsResponseContent$ {
  /** @deprecated use `UpdatePromptPromptsResponseContent$inboundSchema` instead. */
  export const inboundSchema = UpdatePromptPromptsResponseContent$inboundSchema;
  /** @deprecated use `UpdatePromptPromptsResponseContent$outboundSchema` instead. */
  export const outboundSchema =
    UpdatePromptPromptsResponseContent$outboundSchema;
  /** @deprecated use `UpdatePromptPromptsResponseContent$Outbound` instead. */
  export type Outbound = UpdatePromptPromptsResponseContent$Outbound;
}

export function updatePromptPromptsResponseContentToJSON(
  updatePromptPromptsResponseContent: UpdatePromptPromptsResponseContent,
): string {
  return JSON.stringify(
    UpdatePromptPromptsResponseContent$outboundSchema.parse(
      updatePromptPromptsResponseContent,
    ),
  );
}

export function updatePromptPromptsResponseContentFromJSON(
  jsonString: string,
): SafeParseResult<UpdatePromptPromptsResponseContent, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      UpdatePromptPromptsResponseContent$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdatePromptPromptsResponseContent' from JSON`,
  );
}

/** @internal */
export const UpdatePromptPromptsResponse200Type$inboundSchema: z.ZodNativeEnum<
  typeof UpdatePromptPromptsResponse200Type
> = z.nativeEnum(UpdatePromptPromptsResponse200Type);

/** @internal */
export const UpdatePromptPromptsResponse200Type$outboundSchema: z.ZodNativeEnum<
  typeof UpdatePromptPromptsResponse200Type
> = UpdatePromptPromptsResponse200Type$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdatePromptPromptsResponse200Type$ {
  /** @deprecated use `UpdatePromptPromptsResponse200Type$inboundSchema` instead. */
  export const inboundSchema = UpdatePromptPromptsResponse200Type$inboundSchema;
  /** @deprecated use `UpdatePromptPromptsResponse200Type$outboundSchema` instead. */
  export const outboundSchema =
    UpdatePromptPromptsResponse200Type$outboundSchema;
}

/** @internal */
export const UpdatePromptPromptsResponseFunction$inboundSchema: z.ZodType<
  UpdatePromptPromptsResponseFunction,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.string(),
  arguments: z.string(),
});

/** @internal */
export type UpdatePromptPromptsResponseFunction$Outbound = {
  name: string;
  arguments: string;
};

/** @internal */
export const UpdatePromptPromptsResponseFunction$outboundSchema: z.ZodType<
  UpdatePromptPromptsResponseFunction$Outbound,
  z.ZodTypeDef,
  UpdatePromptPromptsResponseFunction
> = z.object({
  name: z.string(),
  arguments: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdatePromptPromptsResponseFunction$ {
  /** @deprecated use `UpdatePromptPromptsResponseFunction$inboundSchema` instead. */
  export const inboundSchema =
    UpdatePromptPromptsResponseFunction$inboundSchema;
  /** @deprecated use `UpdatePromptPromptsResponseFunction$outboundSchema` instead. */
  export const outboundSchema =
    UpdatePromptPromptsResponseFunction$outboundSchema;
  /** @deprecated use `UpdatePromptPromptsResponseFunction$Outbound` instead. */
  export type Outbound = UpdatePromptPromptsResponseFunction$Outbound;
}

export function updatePromptPromptsResponseFunctionToJSON(
  updatePromptPromptsResponseFunction: UpdatePromptPromptsResponseFunction,
): string {
  return JSON.stringify(
    UpdatePromptPromptsResponseFunction$outboundSchema.parse(
      updatePromptPromptsResponseFunction,
    ),
  );
}

export function updatePromptPromptsResponseFunctionFromJSON(
  jsonString: string,
): SafeParseResult<UpdatePromptPromptsResponseFunction, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      UpdatePromptPromptsResponseFunction$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdatePromptPromptsResponseFunction' from JSON`,
  );
}

/** @internal */
export const UpdatePromptPromptsResponseToolCalls$inboundSchema: z.ZodType<
  UpdatePromptPromptsResponseToolCalls,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string().optional(),
  index: z.number().optional(),
  type: UpdatePromptPromptsResponse200Type$inboundSchema,
  function: z.lazy(() => UpdatePromptPromptsResponseFunction$inboundSchema),
});

/** @internal */
export type UpdatePromptPromptsResponseToolCalls$Outbound = {
  id?: string | undefined;
  index?: number | undefined;
  type: string;
  function: UpdatePromptPromptsResponseFunction$Outbound;
};

/** @internal */
export const UpdatePromptPromptsResponseToolCalls$outboundSchema: z.ZodType<
  UpdatePromptPromptsResponseToolCalls$Outbound,
  z.ZodTypeDef,
  UpdatePromptPromptsResponseToolCalls
> = z.object({
  id: z.string().optional(),
  index: z.number().optional(),
  type: UpdatePromptPromptsResponse200Type$outboundSchema,
  function: z.lazy(() => UpdatePromptPromptsResponseFunction$outboundSchema),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdatePromptPromptsResponseToolCalls$ {
  /** @deprecated use `UpdatePromptPromptsResponseToolCalls$inboundSchema` instead. */
  export const inboundSchema =
    UpdatePromptPromptsResponseToolCalls$inboundSchema;
  /** @deprecated use `UpdatePromptPromptsResponseToolCalls$outboundSchema` instead. */
  export const outboundSchema =
    UpdatePromptPromptsResponseToolCalls$outboundSchema;
  /** @deprecated use `UpdatePromptPromptsResponseToolCalls$Outbound` instead. */
  export type Outbound = UpdatePromptPromptsResponseToolCalls$Outbound;
}

export function updatePromptPromptsResponseToolCallsToJSON(
  updatePromptPromptsResponseToolCalls: UpdatePromptPromptsResponseToolCalls,
): string {
  return JSON.stringify(
    UpdatePromptPromptsResponseToolCalls$outboundSchema.parse(
      updatePromptPromptsResponseToolCalls,
    ),
  );
}

export function updatePromptPromptsResponseToolCallsFromJSON(
  jsonString: string,
): SafeParseResult<UpdatePromptPromptsResponseToolCalls, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      UpdatePromptPromptsResponseToolCalls$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdatePromptPromptsResponseToolCalls' from JSON`,
  );
}

/** @internal */
export const UpdatePromptPromptsResponseMessages$inboundSchema: z.ZodType<
  UpdatePromptPromptsResponseMessages,
  z.ZodTypeDef,
  unknown
> = z.object({
  role: UpdatePromptPromptsResponseRole$inboundSchema,
  content: z.union([
    z.string(),
    z.array(z.union([
      z.lazy(() => UpdatePrompt2PromptsResponse1$inboundSchema),
      z.lazy(() => UpdatePrompt2PromptsResponse2$inboundSchema),
    ])),
  ]),
  tool_calls: z.array(
    z.lazy(() => UpdatePromptPromptsResponseToolCalls$inboundSchema),
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    "tool_calls": "toolCalls",
  });
});

/** @internal */
export type UpdatePromptPromptsResponseMessages$Outbound = {
  role: string;
  content:
    | string
    | Array<
      | UpdatePrompt2PromptsResponse1$Outbound
      | UpdatePrompt2PromptsResponse2$Outbound
    >;
  tool_calls?: Array<UpdatePromptPromptsResponseToolCalls$Outbound> | undefined;
};

/** @internal */
export const UpdatePromptPromptsResponseMessages$outboundSchema: z.ZodType<
  UpdatePromptPromptsResponseMessages$Outbound,
  z.ZodTypeDef,
  UpdatePromptPromptsResponseMessages
> = z.object({
  role: UpdatePromptPromptsResponseRole$outboundSchema,
  content: z.union([
    z.string(),
    z.array(z.union([
      z.lazy(() => UpdatePrompt2PromptsResponse1$outboundSchema),
      z.lazy(() => UpdatePrompt2PromptsResponse2$outboundSchema),
    ])),
  ]),
  toolCalls: z.array(
    z.lazy(() => UpdatePromptPromptsResponseToolCalls$outboundSchema),
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    toolCalls: "tool_calls",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdatePromptPromptsResponseMessages$ {
  /** @deprecated use `UpdatePromptPromptsResponseMessages$inboundSchema` instead. */
  export const inboundSchema =
    UpdatePromptPromptsResponseMessages$inboundSchema;
  /** @deprecated use `UpdatePromptPromptsResponseMessages$outboundSchema` instead. */
  export const outboundSchema =
    UpdatePromptPromptsResponseMessages$outboundSchema;
  /** @deprecated use `UpdatePromptPromptsResponseMessages$Outbound` instead. */
  export type Outbound = UpdatePromptPromptsResponseMessages$Outbound;
}

export function updatePromptPromptsResponseMessagesToJSON(
  updatePromptPromptsResponseMessages: UpdatePromptPromptsResponseMessages,
): string {
  return JSON.stringify(
    UpdatePromptPromptsResponseMessages$outboundSchema.parse(
      updatePromptPromptsResponseMessages,
    ),
  );
}

export function updatePromptPromptsResponseMessagesFromJSON(
  jsonString: string,
): SafeParseResult<UpdatePromptPromptsResponseMessages, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      UpdatePromptPromptsResponseMessages$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdatePromptPromptsResponseMessages' from JSON`,
  );
}

/** @internal */
export const UpdatePromptPromptsResponsePromptConfig$inboundSchema: z.ZodType<
  UpdatePromptPromptsResponsePromptConfig,
  z.ZodTypeDef,
  unknown
> = z.object({
  stream: z.boolean().optional(),
  model: z.string().optional(),
  model_db_id: z.string().optional(),
  model_type: UpdatePromptPromptsResponseModelType$inboundSchema.optional(),
  model_parameters: z.lazy(() =>
    UpdatePromptPromptsResponseModelParameters$inboundSchema
  ).optional(),
  provider: UpdatePromptPromptsResponseProvider$inboundSchema.optional(),
  integration_id: z.nullable(z.string()).optional(),
  version: z.string().optional(),
  messages: z.array(
    z.lazy(() => UpdatePromptPromptsResponseMessages$inboundSchema),
  ),
}).transform((v) => {
  return remap$(v, {
    "model_db_id": "modelDbId",
    "model_type": "modelType",
    "model_parameters": "modelParameters",
    "integration_id": "integrationId",
  });
});

/** @internal */
export type UpdatePromptPromptsResponsePromptConfig$Outbound = {
  stream?: boolean | undefined;
  model?: string | undefined;
  model_db_id?: string | undefined;
  model_type?: string | undefined;
  model_parameters?:
    | UpdatePromptPromptsResponseModelParameters$Outbound
    | undefined;
  provider?: string | undefined;
  integration_id?: string | null | undefined;
  version?: string | undefined;
  messages: Array<UpdatePromptPromptsResponseMessages$Outbound>;
};

/** @internal */
export const UpdatePromptPromptsResponsePromptConfig$outboundSchema: z.ZodType<
  UpdatePromptPromptsResponsePromptConfig$Outbound,
  z.ZodTypeDef,
  UpdatePromptPromptsResponsePromptConfig
> = z.object({
  stream: z.boolean().optional(),
  model: z.string().optional(),
  modelDbId: z.string().optional(),
  modelType: UpdatePromptPromptsResponseModelType$outboundSchema.optional(),
  modelParameters: z.lazy(() =>
    UpdatePromptPromptsResponseModelParameters$outboundSchema
  ).optional(),
  provider: UpdatePromptPromptsResponseProvider$outboundSchema.optional(),
  integrationId: z.nullable(z.string()).optional(),
  version: z.string().optional(),
  messages: z.array(
    z.lazy(() => UpdatePromptPromptsResponseMessages$outboundSchema),
  ),
}).transform((v) => {
  return remap$(v, {
    modelDbId: "model_db_id",
    modelType: "model_type",
    modelParameters: "model_parameters",
    integrationId: "integration_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdatePromptPromptsResponsePromptConfig$ {
  /** @deprecated use `UpdatePromptPromptsResponsePromptConfig$inboundSchema` instead. */
  export const inboundSchema =
    UpdatePromptPromptsResponsePromptConfig$inboundSchema;
  /** @deprecated use `UpdatePromptPromptsResponsePromptConfig$outboundSchema` instead. */
  export const outboundSchema =
    UpdatePromptPromptsResponsePromptConfig$outboundSchema;
  /** @deprecated use `UpdatePromptPromptsResponsePromptConfig$Outbound` instead. */
  export type Outbound = UpdatePromptPromptsResponsePromptConfig$Outbound;
}

export function updatePromptPromptsResponsePromptConfigToJSON(
  updatePromptPromptsResponsePromptConfig:
    UpdatePromptPromptsResponsePromptConfig,
): string {
  return JSON.stringify(
    UpdatePromptPromptsResponsePromptConfig$outboundSchema.parse(
      updatePromptPromptsResponsePromptConfig,
    ),
  );
}

export function updatePromptPromptsResponsePromptConfigFromJSON(
  jsonString: string,
): SafeParseResult<
  UpdatePromptPromptsResponsePromptConfig,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      UpdatePromptPromptsResponsePromptConfig$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'UpdatePromptPromptsResponsePromptConfig' from JSON`,
  );
}

/** @internal */
export const UpdatePromptPromptsResponseUseCases$inboundSchema: z.ZodNativeEnum<
  typeof UpdatePromptPromptsResponseUseCases
> = z.nativeEnum(UpdatePromptPromptsResponseUseCases);

/** @internal */
export const UpdatePromptPromptsResponseUseCases$outboundSchema:
  z.ZodNativeEnum<typeof UpdatePromptPromptsResponseUseCases> =
    UpdatePromptPromptsResponseUseCases$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdatePromptPromptsResponseUseCases$ {
  /** @deprecated use `UpdatePromptPromptsResponseUseCases$inboundSchema` instead. */
  export const inboundSchema =
    UpdatePromptPromptsResponseUseCases$inboundSchema;
  /** @deprecated use `UpdatePromptPromptsResponseUseCases$outboundSchema` instead. */
  export const outboundSchema =
    UpdatePromptPromptsResponseUseCases$outboundSchema;
}

/** @internal */
export const UpdatePromptPromptsResponseLanguage$inboundSchema: z.ZodNativeEnum<
  typeof UpdatePromptPromptsResponseLanguage
> = z.nativeEnum(UpdatePromptPromptsResponseLanguage);

/** @internal */
export const UpdatePromptPromptsResponseLanguage$outboundSchema:
  z.ZodNativeEnum<typeof UpdatePromptPromptsResponseLanguage> =
    UpdatePromptPromptsResponseLanguage$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdatePromptPromptsResponseLanguage$ {
  /** @deprecated use `UpdatePromptPromptsResponseLanguage$inboundSchema` instead. */
  export const inboundSchema =
    UpdatePromptPromptsResponseLanguage$inboundSchema;
  /** @deprecated use `UpdatePromptPromptsResponseLanguage$outboundSchema` instead. */
  export const outboundSchema =
    UpdatePromptPromptsResponseLanguage$outboundSchema;
}

/** @internal */
export const UpdatePromptPromptsResponseMetadata$inboundSchema: z.ZodType<
  UpdatePromptPromptsResponseMetadata,
  z.ZodTypeDef,
  unknown
> = z.object({
  use_cases: z.array(UpdatePromptPromptsResponseUseCases$inboundSchema)
    .optional(),
  language: UpdatePromptPromptsResponseLanguage$inboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    "use_cases": "useCases",
  });
});

/** @internal */
export type UpdatePromptPromptsResponseMetadata$Outbound = {
  use_cases?: Array<string> | undefined;
  language?: string | undefined;
};

/** @internal */
export const UpdatePromptPromptsResponseMetadata$outboundSchema: z.ZodType<
  UpdatePromptPromptsResponseMetadata$Outbound,
  z.ZodTypeDef,
  UpdatePromptPromptsResponseMetadata
> = z.object({
  useCases: z.array(UpdatePromptPromptsResponseUseCases$outboundSchema)
    .optional(),
  language: UpdatePromptPromptsResponseLanguage$outboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    useCases: "use_cases",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdatePromptPromptsResponseMetadata$ {
  /** @deprecated use `UpdatePromptPromptsResponseMetadata$inboundSchema` instead. */
  export const inboundSchema =
    UpdatePromptPromptsResponseMetadata$inboundSchema;
  /** @deprecated use `UpdatePromptPromptsResponseMetadata$outboundSchema` instead. */
  export const outboundSchema =
    UpdatePromptPromptsResponseMetadata$outboundSchema;
  /** @deprecated use `UpdatePromptPromptsResponseMetadata$Outbound` instead. */
  export type Outbound = UpdatePromptPromptsResponseMetadata$Outbound;
}

export function updatePromptPromptsResponseMetadataToJSON(
  updatePromptPromptsResponseMetadata: UpdatePromptPromptsResponseMetadata,
): string {
  return JSON.stringify(
    UpdatePromptPromptsResponseMetadata$outboundSchema.parse(
      updatePromptPromptsResponseMetadata,
    ),
  );
}

export function updatePromptPromptsResponseMetadataFromJSON(
  jsonString: string,
): SafeParseResult<UpdatePromptPromptsResponseMetadata, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      UpdatePromptPromptsResponseMetadata$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdatePromptPromptsResponseMetadata' from JSON`,
  );
}

/** @internal */
export const UpdatePromptVersions$inboundSchema: z.ZodType<
  UpdatePromptVersions,
  z.ZodTypeDef,
  unknown
> = z.object({
  _id: z.string(),
  created_by_id: z.string(),
  display_name: z.string(),
  updated_by_id: z.string(),
  description: z.nullable(z.string()).optional(),
  prompt_config: z.lazy(() =>
    UpdatePromptPromptsResponsePromptConfig$inboundSchema
  ),
  metadata: z.lazy(() => UpdatePromptPromptsResponseMetadata$inboundSchema),
  timestamp: z.string(),
}).transform((v) => {
  return remap$(v, {
    "_id": "id",
    "created_by_id": "createdById",
    "display_name": "displayName",
    "updated_by_id": "updatedById",
    "prompt_config": "promptConfig",
  });
});

/** @internal */
export type UpdatePromptVersions$Outbound = {
  _id: string;
  created_by_id: string;
  display_name: string;
  updated_by_id: string;
  description?: string | null | undefined;
  prompt_config: UpdatePromptPromptsResponsePromptConfig$Outbound;
  metadata: UpdatePromptPromptsResponseMetadata$Outbound;
  timestamp: string;
};

/** @internal */
export const UpdatePromptVersions$outboundSchema: z.ZodType<
  UpdatePromptVersions$Outbound,
  z.ZodTypeDef,
  UpdatePromptVersions
> = z.object({
  id: z.string(),
  createdById: z.string(),
  displayName: z.string(),
  updatedById: z.string(),
  description: z.nullable(z.string()).optional(),
  promptConfig: z.lazy(() =>
    UpdatePromptPromptsResponsePromptConfig$outboundSchema
  ),
  metadata: z.lazy(() => UpdatePromptPromptsResponseMetadata$outboundSchema),
  timestamp: z.string(),
}).transform((v) => {
  return remap$(v, {
    id: "_id",
    createdById: "created_by_id",
    displayName: "display_name",
    updatedById: "updated_by_id",
    promptConfig: "prompt_config",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdatePromptVersions$ {
  /** @deprecated use `UpdatePromptVersions$inboundSchema` instead. */
  export const inboundSchema = UpdatePromptVersions$inboundSchema;
  /** @deprecated use `UpdatePromptVersions$outboundSchema` instead. */
  export const outboundSchema = UpdatePromptVersions$outboundSchema;
  /** @deprecated use `UpdatePromptVersions$Outbound` instead. */
  export type Outbound = UpdatePromptVersions$Outbound;
}

export function updatePromptVersionsToJSON(
  updatePromptVersions: UpdatePromptVersions,
): string {
  return JSON.stringify(
    UpdatePromptVersions$outboundSchema.parse(updatePromptVersions),
  );
}

export function updatePromptVersionsFromJSON(
  jsonString: string,
): SafeParseResult<UpdatePromptVersions, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdatePromptVersions$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdatePromptVersions' from JSON`,
  );
}

/** @internal */
export const UpdatePromptResponseBody$inboundSchema: z.ZodType<
  UpdatePromptResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  _id: z.string(),
  owner: z.union([z.string(), UpdatePromptOwner2$inboundSchema]),
  domain_id: z.string(),
  created_by_id: z.string(),
  display_name: z.string(),
  updated_by_id: z.string(),
  description: z.nullable(z.string()).optional(),
  prompt_config: z.lazy(() => UpdatePromptPromptsPromptConfig$inboundSchema),
  metadata: z.lazy(() => UpdatePromptPromptsMetadata$inboundSchema),
  created: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
  updated: z.string().datetime({ offset: true }).default(
    "2025-02-05T19:04:45.364Z",
  ).transform(v => new Date(v)),
  type: UpdatePromptPromptsType$inboundSchema,
  versions: z.array(z.lazy(() => UpdatePromptVersions$inboundSchema)),
}).transform((v) => {
  return remap$(v, {
    "_id": "id",
    "domain_id": "domainId",
    "created_by_id": "createdById",
    "display_name": "displayName",
    "updated_by_id": "updatedById",
    "prompt_config": "promptConfig",
  });
});

/** @internal */
export type UpdatePromptResponseBody$Outbound = {
  _id: string;
  owner: string | string;
  domain_id: string;
  created_by_id: string;
  display_name: string;
  updated_by_id: string;
  description?: string | null | undefined;
  prompt_config: UpdatePromptPromptsPromptConfig$Outbound;
  metadata: UpdatePromptPromptsMetadata$Outbound;
  created?: string | undefined;
  updated: string;
  type: string;
  versions: Array<UpdatePromptVersions$Outbound>;
};

/** @internal */
export const UpdatePromptResponseBody$outboundSchema: z.ZodType<
  UpdatePromptResponseBody$Outbound,
  z.ZodTypeDef,
  UpdatePromptResponseBody
> = z.object({
  id: z.string(),
  owner: z.union([z.string(), UpdatePromptOwner2$outboundSchema]),
  domainId: z.string(),
  createdById: z.string(),
  displayName: z.string(),
  updatedById: z.string(),
  description: z.nullable(z.string()).optional(),
  promptConfig: z.lazy(() => UpdatePromptPromptsPromptConfig$outboundSchema),
  metadata: z.lazy(() => UpdatePromptPromptsMetadata$outboundSchema),
  created: z.date().transform(v => v.toISOString()).optional(),
  updated: z.date().default(() => new Date("2025-02-05T19:04:45.364Z"))
    .transform(v => v.toISOString()),
  type: UpdatePromptPromptsType$outboundSchema,
  versions: z.array(z.lazy(() => UpdatePromptVersions$outboundSchema)),
}).transform((v) => {
  return remap$(v, {
    id: "_id",
    domainId: "domain_id",
    createdById: "created_by_id",
    displayName: "display_name",
    updatedById: "updated_by_id",
    promptConfig: "prompt_config",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdatePromptResponseBody$ {
  /** @deprecated use `UpdatePromptResponseBody$inboundSchema` instead. */
  export const inboundSchema = UpdatePromptResponseBody$inboundSchema;
  /** @deprecated use `UpdatePromptResponseBody$outboundSchema` instead. */
  export const outboundSchema = UpdatePromptResponseBody$outboundSchema;
  /** @deprecated use `UpdatePromptResponseBody$Outbound` instead. */
  export type Outbound = UpdatePromptResponseBody$Outbound;
}

export function updatePromptResponseBodyToJSON(
  updatePromptResponseBody: UpdatePromptResponseBody,
): string {
  return JSON.stringify(
    UpdatePromptResponseBody$outboundSchema.parse(updatePromptResponseBody),
  );
}

export function updatePromptResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<UpdatePromptResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdatePromptResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdatePromptResponseBody' from JSON`,
  );
}
