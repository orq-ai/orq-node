/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type GetSessionRequest = {
  /**
   * Unique identifier of the session
   */
  sessionId: string;
};

export type GetSessionBilling = {
  /**
   * Total cost of the session
   */
  inputCost: number;
  /**
   * Total cost of the session
   */
  outputCost: number;
  /**
   * Total usage of the session
   */
  totalCost: number;
};

export type GetSessionUsage = {
  /**
   * Total input tokens of the session
   */
  promptTokens: number;
  /**
   * Total output tokens of the session
   */
  completionTokens: number;
  /**
   * Total tokens of the session
   */
  totalTokens: number;
};

/**
 * Session
 */
export type GetSessionResponseBody = {
  id: string;
  externalId: string;
  /**
   * Duration of the session in ms
   */
  duration: number;
  /**
   * List of contact ids
   */
  contactIds: Array<string>;
  billing: GetSessionBilling;
  usage: GetSessionUsage;
  /**
   * Total traces of the session
   */
  tracesCount: number;
  tags: Array<string>;
  /**
   * The workspace id
   */
  workspaceId: string;
  /**
   * The project id
   */
  projectId?: string | null | undefined;
  /**
   * The time when the session was created
   */
  startedAt?: Date | undefined;
  /**
   * The time when the session was updated
   */
  updatedAt?: Date | undefined;
};

/** @internal */
export const GetSessionRequest$inboundSchema: z.ZodType<
  GetSessionRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  session_id: z.string(),
}).transform((v) => {
  return remap$(v, {
    "session_id": "sessionId",
  });
});

/** @internal */
export type GetSessionRequest$Outbound = {
  session_id: string;
};

/** @internal */
export const GetSessionRequest$outboundSchema: z.ZodType<
  GetSessionRequest$Outbound,
  z.ZodTypeDef,
  GetSessionRequest
> = z.object({
  sessionId: z.string(),
}).transform((v) => {
  return remap$(v, {
    sessionId: "session_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetSessionRequest$ {
  /** @deprecated use `GetSessionRequest$inboundSchema` instead. */
  export const inboundSchema = GetSessionRequest$inboundSchema;
  /** @deprecated use `GetSessionRequest$outboundSchema` instead. */
  export const outboundSchema = GetSessionRequest$outboundSchema;
  /** @deprecated use `GetSessionRequest$Outbound` instead. */
  export type Outbound = GetSessionRequest$Outbound;
}

export function getSessionRequestToJSON(
  getSessionRequest: GetSessionRequest,
): string {
  return JSON.stringify(
    GetSessionRequest$outboundSchema.parse(getSessionRequest),
  );
}

export function getSessionRequestFromJSON(
  jsonString: string,
): SafeParseResult<GetSessionRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetSessionRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetSessionRequest' from JSON`,
  );
}

/** @internal */
export const GetSessionBilling$inboundSchema: z.ZodType<
  GetSessionBilling,
  z.ZodTypeDef,
  unknown
> = z.object({
  input_cost: z.number(),
  output_cost: z.number(),
  total_cost: z.number(),
}).transform((v) => {
  return remap$(v, {
    "input_cost": "inputCost",
    "output_cost": "outputCost",
    "total_cost": "totalCost",
  });
});

/** @internal */
export type GetSessionBilling$Outbound = {
  input_cost: number;
  output_cost: number;
  total_cost: number;
};

/** @internal */
export const GetSessionBilling$outboundSchema: z.ZodType<
  GetSessionBilling$Outbound,
  z.ZodTypeDef,
  GetSessionBilling
> = z.object({
  inputCost: z.number(),
  outputCost: z.number(),
  totalCost: z.number(),
}).transform((v) => {
  return remap$(v, {
    inputCost: "input_cost",
    outputCost: "output_cost",
    totalCost: "total_cost",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetSessionBilling$ {
  /** @deprecated use `GetSessionBilling$inboundSchema` instead. */
  export const inboundSchema = GetSessionBilling$inboundSchema;
  /** @deprecated use `GetSessionBilling$outboundSchema` instead. */
  export const outboundSchema = GetSessionBilling$outboundSchema;
  /** @deprecated use `GetSessionBilling$Outbound` instead. */
  export type Outbound = GetSessionBilling$Outbound;
}

export function getSessionBillingToJSON(
  getSessionBilling: GetSessionBilling,
): string {
  return JSON.stringify(
    GetSessionBilling$outboundSchema.parse(getSessionBilling),
  );
}

export function getSessionBillingFromJSON(
  jsonString: string,
): SafeParseResult<GetSessionBilling, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetSessionBilling$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetSessionBilling' from JSON`,
  );
}

/** @internal */
export const GetSessionUsage$inboundSchema: z.ZodType<
  GetSessionUsage,
  z.ZodTypeDef,
  unknown
> = z.object({
  prompt_tokens: z.number(),
  completion_tokens: z.number(),
  total_tokens: z.number(),
}).transform((v) => {
  return remap$(v, {
    "prompt_tokens": "promptTokens",
    "completion_tokens": "completionTokens",
    "total_tokens": "totalTokens",
  });
});

/** @internal */
export type GetSessionUsage$Outbound = {
  prompt_tokens: number;
  completion_tokens: number;
  total_tokens: number;
};

/** @internal */
export const GetSessionUsage$outboundSchema: z.ZodType<
  GetSessionUsage$Outbound,
  z.ZodTypeDef,
  GetSessionUsage
> = z.object({
  promptTokens: z.number(),
  completionTokens: z.number(),
  totalTokens: z.number(),
}).transform((v) => {
  return remap$(v, {
    promptTokens: "prompt_tokens",
    completionTokens: "completion_tokens",
    totalTokens: "total_tokens",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetSessionUsage$ {
  /** @deprecated use `GetSessionUsage$inboundSchema` instead. */
  export const inboundSchema = GetSessionUsage$inboundSchema;
  /** @deprecated use `GetSessionUsage$outboundSchema` instead. */
  export const outboundSchema = GetSessionUsage$outboundSchema;
  /** @deprecated use `GetSessionUsage$Outbound` instead. */
  export type Outbound = GetSessionUsage$Outbound;
}

export function getSessionUsageToJSON(
  getSessionUsage: GetSessionUsage,
): string {
  return JSON.stringify(GetSessionUsage$outboundSchema.parse(getSessionUsage));
}

export function getSessionUsageFromJSON(
  jsonString: string,
): SafeParseResult<GetSessionUsage, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetSessionUsage$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetSessionUsage' from JSON`,
  );
}

/** @internal */
export const GetSessionResponseBody$inboundSchema: z.ZodType<
  GetSessionResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  _id: z.string(),
  external_id: z.string(),
  duration: z.number(),
  contact_ids: z.array(z.string()),
  billing: z.lazy(() => GetSessionBilling$inboundSchema),
  usage: z.lazy(() => GetSessionUsage$inboundSchema),
  traces_count: z.number(),
  tags: z.array(z.string()),
  workspace_id: z.string(),
  project_id: z.nullable(z.string()).optional(),
  started_at: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
  updated_at: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
}).transform((v) => {
  return remap$(v, {
    "_id": "id",
    "external_id": "externalId",
    "contact_ids": "contactIds",
    "traces_count": "tracesCount",
    "workspace_id": "workspaceId",
    "project_id": "projectId",
    "started_at": "startedAt",
    "updated_at": "updatedAt",
  });
});

/** @internal */
export type GetSessionResponseBody$Outbound = {
  _id: string;
  external_id: string;
  duration: number;
  contact_ids: Array<string>;
  billing: GetSessionBilling$Outbound;
  usage: GetSessionUsage$Outbound;
  traces_count: number;
  tags: Array<string>;
  workspace_id: string;
  project_id?: string | null | undefined;
  started_at?: string | undefined;
  updated_at?: string | undefined;
};

/** @internal */
export const GetSessionResponseBody$outboundSchema: z.ZodType<
  GetSessionResponseBody$Outbound,
  z.ZodTypeDef,
  GetSessionResponseBody
> = z.object({
  id: z.string(),
  externalId: z.string(),
  duration: z.number(),
  contactIds: z.array(z.string()),
  billing: z.lazy(() => GetSessionBilling$outboundSchema),
  usage: z.lazy(() => GetSessionUsage$outboundSchema),
  tracesCount: z.number(),
  tags: z.array(z.string()),
  workspaceId: z.string(),
  projectId: z.nullable(z.string()).optional(),
  startedAt: z.date().transform(v => v.toISOString()).optional(),
  updatedAt: z.date().transform(v => v.toISOString()).optional(),
}).transform((v) => {
  return remap$(v, {
    id: "_id",
    externalId: "external_id",
    contactIds: "contact_ids",
    tracesCount: "traces_count",
    workspaceId: "workspace_id",
    projectId: "project_id",
    startedAt: "started_at",
    updatedAt: "updated_at",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetSessionResponseBody$ {
  /** @deprecated use `GetSessionResponseBody$inboundSchema` instead. */
  export const inboundSchema = GetSessionResponseBody$inboundSchema;
  /** @deprecated use `GetSessionResponseBody$outboundSchema` instead. */
  export const outboundSchema = GetSessionResponseBody$outboundSchema;
  /** @deprecated use `GetSessionResponseBody$Outbound` instead. */
  export type Outbound = GetSessionResponseBody$Outbound;
}

export function getSessionResponseBodyToJSON(
  getSessionResponseBody: GetSessionResponseBody,
): string {
  return JSON.stringify(
    GetSessionResponseBody$outboundSchema.parse(getSessionResponseBody),
  );
}

export function getSessionResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<GetSessionResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetSessionResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetSessionResponseBody' from JSON`,
  );
}
