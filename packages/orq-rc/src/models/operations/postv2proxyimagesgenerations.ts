/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * Allows to set transparency for the background of the generated image(s). This parameter is only supported for `openai/gpt-image-1`.
 */
export const Background = {
  Transparent: "transparent",
  Opaque: "opaque",
  Auto: "auto",
} as const;
/**
 * Allows to set transparency for the background of the generated image(s). This parameter is only supported for `openai/gpt-image-1`.
 */
export type Background = ClosedEnum<typeof Background>;

/**
 * Control the content-moderation level for images generated by `openai/gpt-image-1`.
 */
export const Moderation = {
  Low: "low",
  Auto: "auto",
} as const;
/**
 * Control the content-moderation level for images generated by `openai/gpt-image-1`.
 */
export type Moderation = ClosedEnum<typeof Moderation>;

/**
 * The format in which the generated images are returned. This parameter is only supported for `openai/gpt-image-1`.
 */
export const OutputFormat = {
  Png: "png",
  Jpeg: "jpeg",
  Webp: "webp",
} as const;
/**
 * The format in which the generated images are returned. This parameter is only supported for `openai/gpt-image-1`.
 */
export type OutputFormat = ClosedEnum<typeof OutputFormat>;

/**
 * The quality of the image that will be generated. Auto will automatically select the best quality for the given model.
 */
export const Quality = {
  Auto: "auto",
  High: "high",
  Medium: "medium",
  Low: "low",
  Hd: "hd",
  Standard: "standard",
} as const;
/**
 * The quality of the image that will be generated. Auto will automatically select the best quality for the given model.
 */
export type Quality = ClosedEnum<typeof Quality>;

/**
 * The format in which generated images with are returned. This parameter isn't supported for `openai/gpt-image-1` which will always return base64-encoded images.
 */
export const PostV2ProxyImagesGenerationsResponseFormat = {
  Url: "url",
  B64Json: "b64_json",
} as const;
/**
 * The format in which generated images with are returned. This parameter isn't supported for `openai/gpt-image-1` which will always return base64-encoded images.
 */
export type PostV2ProxyImagesGenerationsResponseFormat = ClosedEnum<
  typeof PostV2ProxyImagesGenerationsResponseFormat
>;

/**
 * input
 */
export type PostV2ProxyImagesGenerationsRequestBody = {
  /**
   * A text description of the desired image(s).
   */
  prompt: string;
  /**
   * Allows to set transparency for the background of the generated image(s). This parameter is only supported for `openai/gpt-image-1`.
   */
  background?: Background | null | undefined;
  /**
   * The model to use for image generation. Defaults to dall-e-2 unless a parameter specific to gpt-image-1 is used.
   */
  model: string;
  /**
   * Control the content-moderation level for images generated by `openai/gpt-image-1`.
   */
  moderation?: Moderation | null | undefined;
  /**
   * The number of images to generate. Must be between 1 and 10. For dall-e-3, only n=1 is supported.
   */
  n?: number | null | undefined;
  /**
   * The compression level (0-100%) for the generated images. This parameter is only supported for gpt-image-1 with the webp or jpeg output formats.
   */
  outputCompression?: number | null | undefined;
  /**
   * The format in which the generated images are returned. This parameter is only supported for `openai/gpt-image-1`.
   */
  outputFormat?: OutputFormat | null | undefined;
  /**
   * The quality of the image that will be generated. Auto will automatically select the best quality for the given model.
   */
  quality?: Quality | null | undefined;
  /**
   * The format in which generated images with are returned. This parameter isn't supported for `openai/gpt-image-1` which will always return base64-encoded images.
   */
  responseFormat?:
    | PostV2ProxyImagesGenerationsResponseFormat
    | null
    | undefined;
  /**
   * The size of the generated images. Must be one of the specified sizes for each model.
   */
  size?: string | null | undefined;
  /**
   * The style of the generated images. This parameter is only supported for dall-e-3.
   */
  style?: string | null | undefined;
};

export type PostV2ProxyImagesGenerationsData = {
  /**
   * The prompt that was used to generate the image, if there was any revision to the prompt.
   */
  revisedPrompt?: string | null | undefined;
  /**
   * The base64-encoded JSON of the generated image, if `response_format` is `b64_json`
   */
  b64Json?: string | undefined;
  /**
   * The url of the generated image, if `response_format` is `url` (default)
   */
  url?: string | undefined;
};

export type InputTokensDetails = {
  imageTokens?: number | undefined;
  textTokens?: number | undefined;
};

export type PostV2ProxyImagesGenerationsUsage = {
  inputTokens?: number | undefined;
  inputTokensDetails: InputTokensDetails;
  outputTokens?: number | undefined;
  totalTokens?: number | undefined;
};

/**
 * Represents an image generation response from the API.
 */
export type PostV2ProxyImagesGenerationsResponseBody = {
  created?: number | undefined;
  /**
   * Represents the url or the content of an image generated.
   */
  data: Array<PostV2ProxyImagesGenerationsData>;
  usage?: PostV2ProxyImagesGenerationsUsage | undefined;
};

/** @internal */
export const Background$inboundSchema: z.ZodNativeEnum<typeof Background> = z
  .nativeEnum(Background);

/** @internal */
export const Background$outboundSchema: z.ZodNativeEnum<typeof Background> =
  Background$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Background$ {
  /** @deprecated use `Background$inboundSchema` instead. */
  export const inboundSchema = Background$inboundSchema;
  /** @deprecated use `Background$outboundSchema` instead. */
  export const outboundSchema = Background$outboundSchema;
}

/** @internal */
export const Moderation$inboundSchema: z.ZodNativeEnum<typeof Moderation> = z
  .nativeEnum(Moderation);

/** @internal */
export const Moderation$outboundSchema: z.ZodNativeEnum<typeof Moderation> =
  Moderation$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Moderation$ {
  /** @deprecated use `Moderation$inboundSchema` instead. */
  export const inboundSchema = Moderation$inboundSchema;
  /** @deprecated use `Moderation$outboundSchema` instead. */
  export const outboundSchema = Moderation$outboundSchema;
}

/** @internal */
export const OutputFormat$inboundSchema: z.ZodNativeEnum<typeof OutputFormat> =
  z.nativeEnum(OutputFormat);

/** @internal */
export const OutputFormat$outboundSchema: z.ZodNativeEnum<typeof OutputFormat> =
  OutputFormat$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OutputFormat$ {
  /** @deprecated use `OutputFormat$inboundSchema` instead. */
  export const inboundSchema = OutputFormat$inboundSchema;
  /** @deprecated use `OutputFormat$outboundSchema` instead. */
  export const outboundSchema = OutputFormat$outboundSchema;
}

/** @internal */
export const Quality$inboundSchema: z.ZodNativeEnum<typeof Quality> = z
  .nativeEnum(Quality);

/** @internal */
export const Quality$outboundSchema: z.ZodNativeEnum<typeof Quality> =
  Quality$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Quality$ {
  /** @deprecated use `Quality$inboundSchema` instead. */
  export const inboundSchema = Quality$inboundSchema;
  /** @deprecated use `Quality$outboundSchema` instead. */
  export const outboundSchema = Quality$outboundSchema;
}

/** @internal */
export const PostV2ProxyImagesGenerationsResponseFormat$inboundSchema:
  z.ZodNativeEnum<typeof PostV2ProxyImagesGenerationsResponseFormat> = z
    .nativeEnum(PostV2ProxyImagesGenerationsResponseFormat);

/** @internal */
export const PostV2ProxyImagesGenerationsResponseFormat$outboundSchema:
  z.ZodNativeEnum<typeof PostV2ProxyImagesGenerationsResponseFormat> =
    PostV2ProxyImagesGenerationsResponseFormat$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostV2ProxyImagesGenerationsResponseFormat$ {
  /** @deprecated use `PostV2ProxyImagesGenerationsResponseFormat$inboundSchema` instead. */
  export const inboundSchema =
    PostV2ProxyImagesGenerationsResponseFormat$inboundSchema;
  /** @deprecated use `PostV2ProxyImagesGenerationsResponseFormat$outboundSchema` instead. */
  export const outboundSchema =
    PostV2ProxyImagesGenerationsResponseFormat$outboundSchema;
}

/** @internal */
export const PostV2ProxyImagesGenerationsRequestBody$inboundSchema: z.ZodType<
  PostV2ProxyImagesGenerationsRequestBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  prompt: z.string(),
  background: z.nullable(Background$inboundSchema.default("auto")),
  model: z.string(),
  moderation: z.nullable(Moderation$inboundSchema.default("auto")),
  n: z.nullable(z.number().int().default(1)),
  output_compression: z.nullable(z.number().int().default(100)),
  output_format: z.nullable(OutputFormat$inboundSchema.default("png")),
  quality: z.nullable(Quality$inboundSchema.default("auto")),
  response_format: z.nullable(
    PostV2ProxyImagesGenerationsResponseFormat$inboundSchema.default("url"),
  ),
  size: z.nullable(z.string()).optional(),
  style: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    "output_compression": "outputCompression",
    "output_format": "outputFormat",
    "response_format": "responseFormat",
  });
});

/** @internal */
export type PostV2ProxyImagesGenerationsRequestBody$Outbound = {
  prompt: string;
  background: string | null;
  model: string;
  moderation: string | null;
  n: number | null;
  output_compression: number | null;
  output_format: string | null;
  quality: string | null;
  response_format: string | null;
  size?: string | null | undefined;
  style?: string | null | undefined;
};

/** @internal */
export const PostV2ProxyImagesGenerationsRequestBody$outboundSchema: z.ZodType<
  PostV2ProxyImagesGenerationsRequestBody$Outbound,
  z.ZodTypeDef,
  PostV2ProxyImagesGenerationsRequestBody
> = z.object({
  prompt: z.string(),
  background: z.nullable(Background$outboundSchema.default("auto")),
  model: z.string(),
  moderation: z.nullable(Moderation$outboundSchema.default("auto")),
  n: z.nullable(z.number().int().default(1)),
  outputCompression: z.nullable(z.number().int().default(100)),
  outputFormat: z.nullable(OutputFormat$outboundSchema.default("png")),
  quality: z.nullable(Quality$outboundSchema.default("auto")),
  responseFormat: z.nullable(
    PostV2ProxyImagesGenerationsResponseFormat$outboundSchema.default("url"),
  ),
  size: z.nullable(z.string()).optional(),
  style: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    outputCompression: "output_compression",
    outputFormat: "output_format",
    responseFormat: "response_format",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostV2ProxyImagesGenerationsRequestBody$ {
  /** @deprecated use `PostV2ProxyImagesGenerationsRequestBody$inboundSchema` instead. */
  export const inboundSchema =
    PostV2ProxyImagesGenerationsRequestBody$inboundSchema;
  /** @deprecated use `PostV2ProxyImagesGenerationsRequestBody$outboundSchema` instead. */
  export const outboundSchema =
    PostV2ProxyImagesGenerationsRequestBody$outboundSchema;
  /** @deprecated use `PostV2ProxyImagesGenerationsRequestBody$Outbound` instead. */
  export type Outbound = PostV2ProxyImagesGenerationsRequestBody$Outbound;
}

export function postV2ProxyImagesGenerationsRequestBodyToJSON(
  postV2ProxyImagesGenerationsRequestBody:
    PostV2ProxyImagesGenerationsRequestBody,
): string {
  return JSON.stringify(
    PostV2ProxyImagesGenerationsRequestBody$outboundSchema.parse(
      postV2ProxyImagesGenerationsRequestBody,
    ),
  );
}

export function postV2ProxyImagesGenerationsRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<
  PostV2ProxyImagesGenerationsRequestBody,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PostV2ProxyImagesGenerationsRequestBody$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'PostV2ProxyImagesGenerationsRequestBody' from JSON`,
  );
}

/** @internal */
export const PostV2ProxyImagesGenerationsData$inboundSchema: z.ZodType<
  PostV2ProxyImagesGenerationsData,
  z.ZodTypeDef,
  unknown
> = z.object({
  revised_prompt: z.nullable(z.string()).optional(),
  b64_json: z.string().optional(),
  url: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "revised_prompt": "revisedPrompt",
    "b64_json": "b64Json",
  });
});

/** @internal */
export type PostV2ProxyImagesGenerationsData$Outbound = {
  revised_prompt?: string | null | undefined;
  b64_json?: string | undefined;
  url?: string | undefined;
};

/** @internal */
export const PostV2ProxyImagesGenerationsData$outboundSchema: z.ZodType<
  PostV2ProxyImagesGenerationsData$Outbound,
  z.ZodTypeDef,
  PostV2ProxyImagesGenerationsData
> = z.object({
  revisedPrompt: z.nullable(z.string()).optional(),
  b64Json: z.string().optional(),
  url: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    revisedPrompt: "revised_prompt",
    b64Json: "b64_json",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostV2ProxyImagesGenerationsData$ {
  /** @deprecated use `PostV2ProxyImagesGenerationsData$inboundSchema` instead. */
  export const inboundSchema = PostV2ProxyImagesGenerationsData$inboundSchema;
  /** @deprecated use `PostV2ProxyImagesGenerationsData$outboundSchema` instead. */
  export const outboundSchema = PostV2ProxyImagesGenerationsData$outboundSchema;
  /** @deprecated use `PostV2ProxyImagesGenerationsData$Outbound` instead. */
  export type Outbound = PostV2ProxyImagesGenerationsData$Outbound;
}

export function postV2ProxyImagesGenerationsDataToJSON(
  postV2ProxyImagesGenerationsData: PostV2ProxyImagesGenerationsData,
): string {
  return JSON.stringify(
    PostV2ProxyImagesGenerationsData$outboundSchema.parse(
      postV2ProxyImagesGenerationsData,
    ),
  );
}

export function postV2ProxyImagesGenerationsDataFromJSON(
  jsonString: string,
): SafeParseResult<PostV2ProxyImagesGenerationsData, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PostV2ProxyImagesGenerationsData$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PostV2ProxyImagesGenerationsData' from JSON`,
  );
}

/** @internal */
export const InputTokensDetails$inboundSchema: z.ZodType<
  InputTokensDetails,
  z.ZodTypeDef,
  unknown
> = z.object({
  image_tokens: z.number().optional(),
  text_tokens: z.number().optional(),
}).transform((v) => {
  return remap$(v, {
    "image_tokens": "imageTokens",
    "text_tokens": "textTokens",
  });
});

/** @internal */
export type InputTokensDetails$Outbound = {
  image_tokens?: number | undefined;
  text_tokens?: number | undefined;
};

/** @internal */
export const InputTokensDetails$outboundSchema: z.ZodType<
  InputTokensDetails$Outbound,
  z.ZodTypeDef,
  InputTokensDetails
> = z.object({
  imageTokens: z.number().optional(),
  textTokens: z.number().optional(),
}).transform((v) => {
  return remap$(v, {
    imageTokens: "image_tokens",
    textTokens: "text_tokens",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InputTokensDetails$ {
  /** @deprecated use `InputTokensDetails$inboundSchema` instead. */
  export const inboundSchema = InputTokensDetails$inboundSchema;
  /** @deprecated use `InputTokensDetails$outboundSchema` instead. */
  export const outboundSchema = InputTokensDetails$outboundSchema;
  /** @deprecated use `InputTokensDetails$Outbound` instead. */
  export type Outbound = InputTokensDetails$Outbound;
}

export function inputTokensDetailsToJSON(
  inputTokensDetails: InputTokensDetails,
): string {
  return JSON.stringify(
    InputTokensDetails$outboundSchema.parse(inputTokensDetails),
  );
}

export function inputTokensDetailsFromJSON(
  jsonString: string,
): SafeParseResult<InputTokensDetails, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => InputTokensDetails$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'InputTokensDetails' from JSON`,
  );
}

/** @internal */
export const PostV2ProxyImagesGenerationsUsage$inboundSchema: z.ZodType<
  PostV2ProxyImagesGenerationsUsage,
  z.ZodTypeDef,
  unknown
> = z.object({
  input_tokens: z.number().optional(),
  input_tokens_details: z.lazy(() => InputTokensDetails$inboundSchema),
  output_tokens: z.number().optional(),
  total_tokens: z.number().optional(),
}).transform((v) => {
  return remap$(v, {
    "input_tokens": "inputTokens",
    "input_tokens_details": "inputTokensDetails",
    "output_tokens": "outputTokens",
    "total_tokens": "totalTokens",
  });
});

/** @internal */
export type PostV2ProxyImagesGenerationsUsage$Outbound = {
  input_tokens?: number | undefined;
  input_tokens_details: InputTokensDetails$Outbound;
  output_tokens?: number | undefined;
  total_tokens?: number | undefined;
};

/** @internal */
export const PostV2ProxyImagesGenerationsUsage$outboundSchema: z.ZodType<
  PostV2ProxyImagesGenerationsUsage$Outbound,
  z.ZodTypeDef,
  PostV2ProxyImagesGenerationsUsage
> = z.object({
  inputTokens: z.number().optional(),
  inputTokensDetails: z.lazy(() => InputTokensDetails$outboundSchema),
  outputTokens: z.number().optional(),
  totalTokens: z.number().optional(),
}).transform((v) => {
  return remap$(v, {
    inputTokens: "input_tokens",
    inputTokensDetails: "input_tokens_details",
    outputTokens: "output_tokens",
    totalTokens: "total_tokens",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostV2ProxyImagesGenerationsUsage$ {
  /** @deprecated use `PostV2ProxyImagesGenerationsUsage$inboundSchema` instead. */
  export const inboundSchema = PostV2ProxyImagesGenerationsUsage$inboundSchema;
  /** @deprecated use `PostV2ProxyImagesGenerationsUsage$outboundSchema` instead. */
  export const outboundSchema =
    PostV2ProxyImagesGenerationsUsage$outboundSchema;
  /** @deprecated use `PostV2ProxyImagesGenerationsUsage$Outbound` instead. */
  export type Outbound = PostV2ProxyImagesGenerationsUsage$Outbound;
}

export function postV2ProxyImagesGenerationsUsageToJSON(
  postV2ProxyImagesGenerationsUsage: PostV2ProxyImagesGenerationsUsage,
): string {
  return JSON.stringify(
    PostV2ProxyImagesGenerationsUsage$outboundSchema.parse(
      postV2ProxyImagesGenerationsUsage,
    ),
  );
}

export function postV2ProxyImagesGenerationsUsageFromJSON(
  jsonString: string,
): SafeParseResult<PostV2ProxyImagesGenerationsUsage, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PostV2ProxyImagesGenerationsUsage$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PostV2ProxyImagesGenerationsUsage' from JSON`,
  );
}

/** @internal */
export const PostV2ProxyImagesGenerationsResponseBody$inboundSchema: z.ZodType<
  PostV2ProxyImagesGenerationsResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  created: z.number().optional(),
  data: z.array(z.lazy(() => PostV2ProxyImagesGenerationsData$inboundSchema)),
  usage: z.lazy(() => PostV2ProxyImagesGenerationsUsage$inboundSchema)
    .optional(),
});

/** @internal */
export type PostV2ProxyImagesGenerationsResponseBody$Outbound = {
  created?: number | undefined;
  data: Array<PostV2ProxyImagesGenerationsData$Outbound>;
  usage?: PostV2ProxyImagesGenerationsUsage$Outbound | undefined;
};

/** @internal */
export const PostV2ProxyImagesGenerationsResponseBody$outboundSchema: z.ZodType<
  PostV2ProxyImagesGenerationsResponseBody$Outbound,
  z.ZodTypeDef,
  PostV2ProxyImagesGenerationsResponseBody
> = z.object({
  created: z.number().optional(),
  data: z.array(z.lazy(() => PostV2ProxyImagesGenerationsData$outboundSchema)),
  usage: z.lazy(() => PostV2ProxyImagesGenerationsUsage$outboundSchema)
    .optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostV2ProxyImagesGenerationsResponseBody$ {
  /** @deprecated use `PostV2ProxyImagesGenerationsResponseBody$inboundSchema` instead. */
  export const inboundSchema =
    PostV2ProxyImagesGenerationsResponseBody$inboundSchema;
  /** @deprecated use `PostV2ProxyImagesGenerationsResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    PostV2ProxyImagesGenerationsResponseBody$outboundSchema;
  /** @deprecated use `PostV2ProxyImagesGenerationsResponseBody$Outbound` instead. */
  export type Outbound = PostV2ProxyImagesGenerationsResponseBody$Outbound;
}

export function postV2ProxyImagesGenerationsResponseBodyToJSON(
  postV2ProxyImagesGenerationsResponseBody:
    PostV2ProxyImagesGenerationsResponseBody,
): string {
  return JSON.stringify(
    PostV2ProxyImagesGenerationsResponseBody$outboundSchema.parse(
      postV2ProxyImagesGenerationsResponseBody,
    ),
  );
}

export function postV2ProxyImagesGenerationsResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<
  PostV2ProxyImagesGenerationsResponseBody,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PostV2ProxyImagesGenerationsResponseBody$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'PostV2ProxyImagesGenerationsResponseBody' from JSON`,
  );
}
