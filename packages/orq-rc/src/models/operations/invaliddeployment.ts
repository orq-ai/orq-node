/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type InvalidDeploymentRequest = {
  deploymentId: string;
};

/** @internal */
export const InvalidDeploymentRequest$inboundSchema: z.ZodType<
  InvalidDeploymentRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  deployment_id: z.string(),
}).transform((v) => {
  return remap$(v, {
    "deployment_id": "deploymentId",
  });
});

/** @internal */
export type InvalidDeploymentRequest$Outbound = {
  deployment_id: string;
};

/** @internal */
export const InvalidDeploymentRequest$outboundSchema: z.ZodType<
  InvalidDeploymentRequest$Outbound,
  z.ZodTypeDef,
  InvalidDeploymentRequest
> = z.object({
  deploymentId: z.string(),
}).transform((v) => {
  return remap$(v, {
    deploymentId: "deployment_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InvalidDeploymentRequest$ {
  /** @deprecated use `InvalidDeploymentRequest$inboundSchema` instead. */
  export const inboundSchema = InvalidDeploymentRequest$inboundSchema;
  /** @deprecated use `InvalidDeploymentRequest$outboundSchema` instead. */
  export const outboundSchema = InvalidDeploymentRequest$outboundSchema;
  /** @deprecated use `InvalidDeploymentRequest$Outbound` instead. */
  export type Outbound = InvalidDeploymentRequest$Outbound;
}

export function invalidDeploymentRequestToJSON(
  invalidDeploymentRequest: InvalidDeploymentRequest,
): string {
  return JSON.stringify(
    InvalidDeploymentRequest$outboundSchema.parse(invalidDeploymentRequest),
  );
}

export function invalidDeploymentRequestFromJSON(
  jsonString: string,
): SafeParseResult<InvalidDeploymentRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => InvalidDeploymentRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'InvalidDeploymentRequest' from JSON`,
  );
}
