/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type DeleteMemoryDocumentRequest = {
  /**
   * The unique key identifier of the memory store
   */
  memoryStoreKey: string;
  /**
   * The unique identifier of the memory
   */
  memoryId: string;
  /**
   * The unique identifier of the document
   */
  documentId: string;
};

/** @internal */
export const DeleteMemoryDocumentRequest$inboundSchema: z.ZodType<
  DeleteMemoryDocumentRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  memory_store_key: z.string(),
  memory_id: z.string(),
  document_id: z.string(),
}).transform((v) => {
  return remap$(v, {
    "memory_store_key": "memoryStoreKey",
    "memory_id": "memoryId",
    "document_id": "documentId",
  });
});

/** @internal */
export type DeleteMemoryDocumentRequest$Outbound = {
  memory_store_key: string;
  memory_id: string;
  document_id: string;
};

/** @internal */
export const DeleteMemoryDocumentRequest$outboundSchema: z.ZodType<
  DeleteMemoryDocumentRequest$Outbound,
  z.ZodTypeDef,
  DeleteMemoryDocumentRequest
> = z.object({
  memoryStoreKey: z.string(),
  memoryId: z.string(),
  documentId: z.string(),
}).transform((v) => {
  return remap$(v, {
    memoryStoreKey: "memory_store_key",
    memoryId: "memory_id",
    documentId: "document_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeleteMemoryDocumentRequest$ {
  /** @deprecated use `DeleteMemoryDocumentRequest$inboundSchema` instead. */
  export const inboundSchema = DeleteMemoryDocumentRequest$inboundSchema;
  /** @deprecated use `DeleteMemoryDocumentRequest$outboundSchema` instead. */
  export const outboundSchema = DeleteMemoryDocumentRequest$outboundSchema;
  /** @deprecated use `DeleteMemoryDocumentRequest$Outbound` instead. */
  export type Outbound = DeleteMemoryDocumentRequest$Outbound;
}

export function deleteMemoryDocumentRequestToJSON(
  deleteMemoryDocumentRequest: DeleteMemoryDocumentRequest,
): string {
  return JSON.stringify(
    DeleteMemoryDocumentRequest$outboundSchema.parse(
      deleteMemoryDocumentRequest,
    ),
  );
}

export function deleteMemoryDocumentRequestFromJSON(
  jsonString: string,
): SafeParseResult<DeleteMemoryDocumentRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DeleteMemoryDocumentRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DeleteMemoryDocumentRequest' from JSON`,
  );
}
