/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * Usage statistics to add to the deployment
 */
export type Usage = {
  /**
   * Number of tokens in the prompt.
   */
  promptTokens: number;
  /**
   * Number of tokens in the generated completion.
   */
  completionTokens: number;
  /**
   * Total number of tokens used in the request (prompt + completion).
   */
  totalTokens?: number | undefined;
};

export type Performance = {
  /**
   * Total time in milliseconds of the request to the LLM provider API.
   */
  latency: number;
  /**
   * Total time in milliseconds to generate the first token of the completion.
   */
  timeToFirstToken?: number | undefined;
};

/**
 * The role of the messages author, in this case tool.
 */
export const DeploymentCreateMetricMessagesDeploymentsMetricsRequestRequestBody5Role =
  {
    Tool: "tool",
  } as const;
/**
 * The role of the messages author, in this case tool.
 */
export type DeploymentCreateMetricMessagesDeploymentsMetricsRequestRequestBody5Role =
  ClosedEnum<
    typeof DeploymentCreateMetricMessagesDeploymentsMetricsRequestRequestBody5Role
  >;

/**
 * The contents of the tool message.
 */
export type DeploymentCreateMetricMessagesDeploymentsMetricsRequestContent =
  | string
  | Array<string>;

export type DeploymentCreateMetricMessagesToolMessage = {
  /**
   * The role of the messages author, in this case tool.
   */
  role: DeploymentCreateMetricMessagesDeploymentsMetricsRequestRequestBody5Role;
  /**
   * The contents of the tool message.
   */
  content: string | Array<string>;
  /**
   * Tool call that this message is responding to.
   */
  toolCallId: string;
};

/**
 * The type of the content part.
 */
export const DeploymentCreateMetric2DeploymentsMetricsRequestRequestBodyMessagesType =
  {
    Refusal: "refusal",
  } as const;
/**
 * The type of the content part.
 */
export type DeploymentCreateMetric2DeploymentsMetricsRequestRequestBodyMessagesType =
  ClosedEnum<
    typeof DeploymentCreateMetric2DeploymentsMetricsRequestRequestBodyMessagesType
  >;

export type DeploymentCreateMetric2RefusalContentPart = {
  /**
   * The type of the content part.
   */
  type: DeploymentCreateMetric2DeploymentsMetricsRequestRequestBodyMessagesType;
  /**
   * The refusal message generated by the model.
   */
  refusal: string;
};

/**
 * The type of the content part.
 */
export const DeploymentCreateMetric2DeploymentsMetricsRequestRequestBodyType = {
  Text: "text",
} as const;
/**
 * The type of the content part.
 */
export type DeploymentCreateMetric2DeploymentsMetricsRequestRequestBodyType =
  ClosedEnum<
    typeof DeploymentCreateMetric2DeploymentsMetricsRequestRequestBodyType
  >;

export type DeploymentCreateMetric2TextContentPart = {
  /**
   * The type of the content part.
   */
  type: DeploymentCreateMetric2DeploymentsMetricsRequestRequestBodyType;
  /**
   * The text content.
   */
  text: string;
};

export type DeploymentCreateMetricContentDeploymentsMetrics2 =
  | DeploymentCreateMetric2TextContentPart
  | DeploymentCreateMetric2RefusalContentPart;

/**
 * The contents of the assistant message. Required unless `tool_calls` or `function_call` is specified.
 */
export type DeploymentCreateMetricMessagesDeploymentsMetricsContent =
  | string
  | Array<
    | DeploymentCreateMetric2TextContentPart
    | DeploymentCreateMetric2RefusalContentPart
  >;

/**
 * The role of the messages author, in this case `assistant`.
 */
export const DeploymentCreateMetricMessagesDeploymentsMetricsRequestRequestBodyRole =
  {
    Assistant: "assistant",
  } as const;
/**
 * The role of the messages author, in this case `assistant`.
 */
export type DeploymentCreateMetricMessagesDeploymentsMetricsRequestRequestBodyRole =
  ClosedEnum<
    typeof DeploymentCreateMetricMessagesDeploymentsMetricsRequestRequestBodyRole
  >;

/**
 * Data about a previous audio response from the model.
 */
export type DeploymentCreateMetricMessagesAudio = {
  /**
   * Unique identifier for a previous audio response from the model.
   */
  id: string;
};

/**
 * The type of the tool. Currently, only `function` is supported.
 */
export const DeploymentCreateMetricMessagesType = {
  Function: "function",
} as const;
/**
 * The type of the tool. Currently, only `function` is supported.
 */
export type DeploymentCreateMetricMessagesType = ClosedEnum<
  typeof DeploymentCreateMetricMessagesType
>;

export type DeploymentCreateMetricMessagesFunction = {
  /**
   * The name of the function to call.
   */
  name?: string | undefined;
  /**
   * The arguments to call the function with, as generated by the model in JSON format. Note that the model does not always generate valid JSON, and may hallucinate parameters not defined by your function schema. Validate the arguments in your code before calling your function.
   */
  arguments?: string | undefined;
};

export type DeploymentCreateMetricMessagesToolCalls = {
  /**
   * The ID of the tool call.
   */
  id: string;
  /**
   * The type of the tool. Currently, only `function` is supported.
   */
  type: DeploymentCreateMetricMessagesType;
  function: DeploymentCreateMetricMessagesFunction;
};

export type DeploymentCreateMetricMessagesAssistantMessage = {
  /**
   * The contents of the assistant message. Required unless `tool_calls` or `function_call` is specified.
   */
  content?:
    | string
    | Array<
      | DeploymentCreateMetric2TextContentPart
      | DeploymentCreateMetric2RefusalContentPart
    >
    | undefined;
  /**
   * The refusal message by the assistant.
   */
  refusal?: string | null | undefined;
  /**
   * The role of the messages author, in this case `assistant`.
   */
  role: DeploymentCreateMetricMessagesDeploymentsMetricsRequestRequestBodyRole;
  /**
   * An optional name for the participant. Provides the model information to differentiate between participants of the same role.
   */
  name?: string | undefined;
  /**
   * Data about a previous audio response from the model.
   */
  audio?: DeploymentCreateMetricMessagesAudio | null | undefined;
  /**
   * The tool calls generated by the model, such as function calls.
   */
  toolCalls?: Array<DeploymentCreateMetricMessagesToolCalls> | undefined;
};

/**
 * The role of the messages author, in this case `user`.
 */
export const DeploymentCreateMetricMessagesDeploymentsMetricsRequestRole = {
  User: "user",
} as const;
/**
 * The role of the messages author, in this case `user`.
 */
export type DeploymentCreateMetricMessagesDeploymentsMetricsRequestRole =
  ClosedEnum<
    typeof DeploymentCreateMetricMessagesDeploymentsMetricsRequestRole
  >;

export const DeploymentCreateMetric2DeploymentsMetricsRequestType = {
  InputAudio: "input_audio",
} as const;
export type DeploymentCreateMetric2DeploymentsMetricsRequestType = ClosedEnum<
  typeof DeploymentCreateMetric2DeploymentsMetricsRequestType
>;

/**
 * The format of the encoded audio data. Currently supports `wav` and `mp3`.
 */
export const DeploymentCreateMetric2Format = {
  Mp3: "mp3",
  Wav: "wav",
} as const;
/**
 * The format of the encoded audio data. Currently supports `wav` and `mp3`.
 */
export type DeploymentCreateMetric2Format = ClosedEnum<
  typeof DeploymentCreateMetric2Format
>;

export type DeploymentCreateMetric2InputAudio = {
  /**
   * Base64 encoded audio data.
   */
  data: string;
  /**
   * The format of the encoded audio data. Currently supports `wav` and `mp3`.
   */
  format: DeploymentCreateMetric2Format;
};

export type DeploymentCreateMetric23 = {
  type: DeploymentCreateMetric2DeploymentsMetricsRequestType;
  inputAudio: DeploymentCreateMetric2InputAudio;
};

export const DeploymentCreateMetric2DeploymentsMetricsType = {
  ImageUrl: "image_url",
} as const;
export type DeploymentCreateMetric2DeploymentsMetricsType = ClosedEnum<
  typeof DeploymentCreateMetric2DeploymentsMetricsType
>;

/**
 * Specifies the detail level of the image.
 */
export const DeploymentCreateMetric2Detail = {
  Low: "low",
  High: "high",
  Auto: "auto",
} as const;
/**
 * Specifies the detail level of the image.
 */
export type DeploymentCreateMetric2Detail = ClosedEnum<
  typeof DeploymentCreateMetric2Detail
>;

export type DeploymentCreateMetric2ImageUrl = {
  /**
   * Either a URL of the image or the base64 encoded image data.
   */
  url: string;
  /**
   * Specifies the detail level of the image.
   */
  detail?: DeploymentCreateMetric2Detail | undefined;
};

export type DeploymentCreateMetric22 = {
  type: DeploymentCreateMetric2DeploymentsMetricsType;
  imageUrl: DeploymentCreateMetric2ImageUrl;
};

export const DeploymentCreateMetric2Type = {
  Text: "text",
} as const;
export type DeploymentCreateMetric2Type = ClosedEnum<
  typeof DeploymentCreateMetric2Type
>;

export type DeploymentCreateMetric21 = {
  type: DeploymentCreateMetric2Type;
  text: string;
};

export type DeploymentCreateMetricContent2 =
  | DeploymentCreateMetric21
  | DeploymentCreateMetric22
  | DeploymentCreateMetric23;

/**
 * The contents of the user message.
 */
export type DeploymentCreateMetricMessagesContent =
  | string
  | Array<
    | DeploymentCreateMetric21
    | DeploymentCreateMetric22
    | DeploymentCreateMetric23
  >;

export type DeploymentCreateMetricMessagesUserMessage = {
  /**
   * The role of the messages author, in this case `user`.
   */
  role: DeploymentCreateMetricMessagesDeploymentsMetricsRequestRole;
  /**
   * An optional name for the participant. Provides the model information to differentiate between participants of the same role.
   */
  name?: string | undefined;
  /**
   * The contents of the user message.
   */
  content:
    | string
    | Array<
      | DeploymentCreateMetric21
      | DeploymentCreateMetric22
      | DeploymentCreateMetric23
    >;
};

/**
 * The role of the messages author, in this case `system`.
 */
export const DeploymentCreateMetricMessagesDeploymentsMetricsRole = {
  System: "system",
} as const;
/**
 * The role of the messages author, in this case `system`.
 */
export type DeploymentCreateMetricMessagesDeploymentsMetricsRole = ClosedEnum<
  typeof DeploymentCreateMetricMessagesDeploymentsMetricsRole
>;

export type DeploymentCreateMetricMessagesSystemMessage = {
  /**
   * The role of the messages author, in this case `system`.
   */
  role: DeploymentCreateMetricMessagesDeploymentsMetricsRole;
  /**
   * The contents of the system message.
   */
  content: string;
  /**
   * An optional name for the participant. Provides the model information to differentiate between participants of the same role.
   */
  name?: string | undefined;
};

/**
 * The role of the messages author, in this case  `developer`.
 */
export const DeploymentCreateMetricMessagesRole = {
  Developer: "developer",
} as const;
/**
 * The role of the messages author, in this case  `developer`.
 */
export type DeploymentCreateMetricMessagesRole = ClosedEnum<
  typeof DeploymentCreateMetricMessagesRole
>;

export type DeploymentCreateMetricMessagesDeveloperMessage = {
  /**
   * The role of the messages author, in this case  `developer`.
   */
  role: DeploymentCreateMetricMessagesRole;
  /**
   * The contents of the developer message.
   */
  content: string;
  /**
   * An optional name for the participant. Provides the model information to differentiate between participants of the same role.
   */
  name?: string | undefined;
};

export type DeploymentCreateMetricMessages =
  | DeploymentCreateMetricMessagesDeveloperMessage
  | DeploymentCreateMetricMessagesSystemMessage
  | DeploymentCreateMetricMessagesUserMessage
  | DeploymentCreateMetricMessagesToolMessage
  | DeploymentCreateMetricMessagesAssistantMessage;

/**
 * The role of the prompt message
 */
export const DeploymentCreateMetricMessageDeploymentsMetricsRole = {
  System: "system",
  Assistant: "assistant",
  User: "user",
  Exception: "exception",
  Tool: "tool",
  Prompt: "prompt",
  Correction: "correction",
  ExpectedOutput: "expected_output",
} as const;
/**
 * The role of the prompt message
 */
export type DeploymentCreateMetricMessageDeploymentsMetricsRole = ClosedEnum<
  typeof DeploymentCreateMetricMessageDeploymentsMetricsRole
>;

export type Message3 = {
  /**
   * The role of the prompt message
   */
  role: DeploymentCreateMetricMessageDeploymentsMetricsRole;
  url: string;
};

/**
 * The role of the prompt message
 */
export const DeploymentCreateMetricMessageRole = {
  System: "system",
  Assistant: "assistant",
  User: "user",
  Exception: "exception",
  Tool: "tool",
  Prompt: "prompt",
  Correction: "correction",
  ExpectedOutput: "expected_output",
} as const;
/**
 * The role of the prompt message
 */
export type DeploymentCreateMetricMessageRole = ClosedEnum<
  typeof DeploymentCreateMetricMessageRole
>;

export type Message2 = {
  /**
   * The role of the prompt message
   */
  role: DeploymentCreateMetricMessageRole;
  content: string | null;
};

/**
 * The role of the prompt message
 */
export const MessageRole = {
  System: "system",
  Assistant: "assistant",
  User: "user",
  Exception: "exception",
  Tool: "tool",
  Prompt: "prompt",
  Correction: "correction",
  ExpectedOutput: "expected_output",
} as const;
/**
 * The role of the prompt message
 */
export type MessageRole = ClosedEnum<typeof MessageRole>;

export const MessageType = {
  Function: "function",
} as const;
export type MessageType = ClosedEnum<typeof MessageType>;

export type MessageFunction = {
  name: string;
  /**
   * JSON string arguments for the functions
   */
  arguments: string;
};

export type MessageToolCalls = {
  id?: string | undefined;
  index?: number | undefined;
  type: MessageType;
  function: MessageFunction;
};

export type Message1 = {
  /**
   * The role of the prompt message
   */
  role: MessageRole;
  content?: string | null | undefined;
  toolCalls: Array<MessageToolCalls>;
};

export type Message = Message2 | Message3 | Message1;

export type Choices = {
  index: number;
  message?: Message2 | Message3 | Message1 | undefined;
  finishReason?: string | null | undefined;
};

/**
 * Feedback from the user on the completion
 */
export type Feedback = {
  /**
   * The feedback score. This allow you to come with specific logic on what a `score` number means
   */
  score: number;
};

/**
 * The deployment request payload
 */
export type DeploymentCreateMetricRequestBody = {
  /**
   * Your own custom key-value pairs can be attached to the logs. This is useful for storing additional information related to your interactions with the LLM providers or specifics within your application.
   */
  metadata?: { [k: string]: any } | undefined;
  /**
   * Usage statistics to add to the deployment
   */
  usage?: Usage | undefined;
  performance?: Performance | undefined;
  /**
   * A list of messages sent to the model.
   */
  messages?:
    | Array<
      | DeploymentCreateMetricMessagesDeveloperMessage
      | DeploymentCreateMetricMessagesSystemMessage
      | DeploymentCreateMetricMessagesUserMessage
      | DeploymentCreateMetricMessagesToolMessage
      | DeploymentCreateMetricMessagesAssistantMessage
    >
    | undefined;
  /**
   * A list of completion choices. If you are using a `completion` model then you must provide the `completion content` with the chat completion format
   */
  choices?: Array<Choices> | undefined;
  /**
   * Feedback from the user on the completion
   */
  feedback?: Feedback | undefined;
};

export type DeploymentCreateMetricRequest = {
  /**
   * Deployment ID
   */
  id: string;
  /**
   * The deployment request payload
   */
  requestBody: DeploymentCreateMetricRequestBody;
};

/**
 * Successful operation
 */
export type DeploymentCreateMetricResponseBody = {
  /**
   * Whether the request was successful
   */
  success: boolean;
};

/** @internal */
export const Usage$inboundSchema: z.ZodType<Usage, z.ZodTypeDef, unknown> = z
  .object({
    prompt_tokens: z.number(),
    completion_tokens: z.number(),
    total_tokens: z.number().optional(),
  }).transform((v) => {
    return remap$(v, {
      "prompt_tokens": "promptTokens",
      "completion_tokens": "completionTokens",
      "total_tokens": "totalTokens",
    });
  });

/** @internal */
export type Usage$Outbound = {
  prompt_tokens: number;
  completion_tokens: number;
  total_tokens?: number | undefined;
};

/** @internal */
export const Usage$outboundSchema: z.ZodType<
  Usage$Outbound,
  z.ZodTypeDef,
  Usage
> = z.object({
  promptTokens: z.number(),
  completionTokens: z.number(),
  totalTokens: z.number().optional(),
}).transform((v) => {
  return remap$(v, {
    promptTokens: "prompt_tokens",
    completionTokens: "completion_tokens",
    totalTokens: "total_tokens",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Usage$ {
  /** @deprecated use `Usage$inboundSchema` instead. */
  export const inboundSchema = Usage$inboundSchema;
  /** @deprecated use `Usage$outboundSchema` instead. */
  export const outboundSchema = Usage$outboundSchema;
  /** @deprecated use `Usage$Outbound` instead. */
  export type Outbound = Usage$Outbound;
}

export function usageToJSON(usage: Usage): string {
  return JSON.stringify(Usage$outboundSchema.parse(usage));
}

export function usageFromJSON(
  jsonString: string,
): SafeParseResult<Usage, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Usage$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Usage' from JSON`,
  );
}

/** @internal */
export const Performance$inboundSchema: z.ZodType<
  Performance,
  z.ZodTypeDef,
  unknown
> = z.object({
  latency: z.number(),
  time_to_first_token: z.number().optional(),
}).transform((v) => {
  return remap$(v, {
    "time_to_first_token": "timeToFirstToken",
  });
});

/** @internal */
export type Performance$Outbound = {
  latency: number;
  time_to_first_token?: number | undefined;
};

/** @internal */
export const Performance$outboundSchema: z.ZodType<
  Performance$Outbound,
  z.ZodTypeDef,
  Performance
> = z.object({
  latency: z.number(),
  timeToFirstToken: z.number().optional(),
}).transform((v) => {
  return remap$(v, {
    timeToFirstToken: "time_to_first_token",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Performance$ {
  /** @deprecated use `Performance$inboundSchema` instead. */
  export const inboundSchema = Performance$inboundSchema;
  /** @deprecated use `Performance$outboundSchema` instead. */
  export const outboundSchema = Performance$outboundSchema;
  /** @deprecated use `Performance$Outbound` instead. */
  export type Outbound = Performance$Outbound;
}

export function performanceToJSON(performance: Performance): string {
  return JSON.stringify(Performance$outboundSchema.parse(performance));
}

export function performanceFromJSON(
  jsonString: string,
): SafeParseResult<Performance, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Performance$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Performance' from JSON`,
  );
}

/** @internal */
export const DeploymentCreateMetricMessagesDeploymentsMetricsRequestRequestBody5Role$inboundSchema:
  z.ZodNativeEnum<
    typeof DeploymentCreateMetricMessagesDeploymentsMetricsRequestRequestBody5Role
  > = z.nativeEnum(
    DeploymentCreateMetricMessagesDeploymentsMetricsRequestRequestBody5Role,
  );

/** @internal */
export const DeploymentCreateMetricMessagesDeploymentsMetricsRequestRequestBody5Role$outboundSchema:
  z.ZodNativeEnum<
    typeof DeploymentCreateMetricMessagesDeploymentsMetricsRequestRequestBody5Role
  > =
    DeploymentCreateMetricMessagesDeploymentsMetricsRequestRequestBody5Role$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeploymentCreateMetricMessagesDeploymentsMetricsRequestRequestBody5Role$ {
  /** @deprecated use `DeploymentCreateMetricMessagesDeploymentsMetricsRequestRequestBody5Role$inboundSchema` instead. */
  export const inboundSchema =
    DeploymentCreateMetricMessagesDeploymentsMetricsRequestRequestBody5Role$inboundSchema;
  /** @deprecated use `DeploymentCreateMetricMessagesDeploymentsMetricsRequestRequestBody5Role$outboundSchema` instead. */
  export const outboundSchema =
    DeploymentCreateMetricMessagesDeploymentsMetricsRequestRequestBody5Role$outboundSchema;
}

/** @internal */
export const DeploymentCreateMetricMessagesDeploymentsMetricsRequestContent$inboundSchema:
  z.ZodType<
    DeploymentCreateMetricMessagesDeploymentsMetricsRequestContent,
    z.ZodTypeDef,
    unknown
  > = z.union([z.string(), z.array(z.string())]);

/** @internal */
export type DeploymentCreateMetricMessagesDeploymentsMetricsRequestContent$Outbound =
  | string
  | Array<string>;

/** @internal */
export const DeploymentCreateMetricMessagesDeploymentsMetricsRequestContent$outboundSchema:
  z.ZodType<
    DeploymentCreateMetricMessagesDeploymentsMetricsRequestContent$Outbound,
    z.ZodTypeDef,
    DeploymentCreateMetricMessagesDeploymentsMetricsRequestContent
  > = z.union([z.string(), z.array(z.string())]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeploymentCreateMetricMessagesDeploymentsMetricsRequestContent$ {
  /** @deprecated use `DeploymentCreateMetricMessagesDeploymentsMetricsRequestContent$inboundSchema` instead. */
  export const inboundSchema =
    DeploymentCreateMetricMessagesDeploymentsMetricsRequestContent$inboundSchema;
  /** @deprecated use `DeploymentCreateMetricMessagesDeploymentsMetricsRequestContent$outboundSchema` instead. */
  export const outboundSchema =
    DeploymentCreateMetricMessagesDeploymentsMetricsRequestContent$outboundSchema;
  /** @deprecated use `DeploymentCreateMetricMessagesDeploymentsMetricsRequestContent$Outbound` instead. */
  export type Outbound =
    DeploymentCreateMetricMessagesDeploymentsMetricsRequestContent$Outbound;
}

export function deploymentCreateMetricMessagesDeploymentsMetricsRequestContentToJSON(
  deploymentCreateMetricMessagesDeploymentsMetricsRequestContent:
    DeploymentCreateMetricMessagesDeploymentsMetricsRequestContent,
): string {
  return JSON.stringify(
    DeploymentCreateMetricMessagesDeploymentsMetricsRequestContent$outboundSchema
      .parse(deploymentCreateMetricMessagesDeploymentsMetricsRequestContent),
  );
}

export function deploymentCreateMetricMessagesDeploymentsMetricsRequestContentFromJSON(
  jsonString: string,
): SafeParseResult<
  DeploymentCreateMetricMessagesDeploymentsMetricsRequestContent,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      DeploymentCreateMetricMessagesDeploymentsMetricsRequestContent$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'DeploymentCreateMetricMessagesDeploymentsMetricsRequestContent' from JSON`,
  );
}

/** @internal */
export const DeploymentCreateMetricMessagesToolMessage$inboundSchema: z.ZodType<
  DeploymentCreateMetricMessagesToolMessage,
  z.ZodTypeDef,
  unknown
> = z.object({
  role:
    DeploymentCreateMetricMessagesDeploymentsMetricsRequestRequestBody5Role$inboundSchema,
  content: z.union([z.string(), z.array(z.string())]),
  tool_call_id: z.string(),
}).transform((v) => {
  return remap$(v, {
    "tool_call_id": "toolCallId",
  });
});

/** @internal */
export type DeploymentCreateMetricMessagesToolMessage$Outbound = {
  role: string;
  content: string | Array<string>;
  tool_call_id: string;
};

/** @internal */
export const DeploymentCreateMetricMessagesToolMessage$outboundSchema:
  z.ZodType<
    DeploymentCreateMetricMessagesToolMessage$Outbound,
    z.ZodTypeDef,
    DeploymentCreateMetricMessagesToolMessage
  > = z.object({
    role:
      DeploymentCreateMetricMessagesDeploymentsMetricsRequestRequestBody5Role$outboundSchema,
    content: z.union([z.string(), z.array(z.string())]),
    toolCallId: z.string(),
  }).transform((v) => {
    return remap$(v, {
      toolCallId: "tool_call_id",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeploymentCreateMetricMessagesToolMessage$ {
  /** @deprecated use `DeploymentCreateMetricMessagesToolMessage$inboundSchema` instead. */
  export const inboundSchema =
    DeploymentCreateMetricMessagesToolMessage$inboundSchema;
  /** @deprecated use `DeploymentCreateMetricMessagesToolMessage$outboundSchema` instead. */
  export const outboundSchema =
    DeploymentCreateMetricMessagesToolMessage$outboundSchema;
  /** @deprecated use `DeploymentCreateMetricMessagesToolMessage$Outbound` instead. */
  export type Outbound = DeploymentCreateMetricMessagesToolMessage$Outbound;
}

export function deploymentCreateMetricMessagesToolMessageToJSON(
  deploymentCreateMetricMessagesToolMessage:
    DeploymentCreateMetricMessagesToolMessage,
): string {
  return JSON.stringify(
    DeploymentCreateMetricMessagesToolMessage$outboundSchema.parse(
      deploymentCreateMetricMessagesToolMessage,
    ),
  );
}

export function deploymentCreateMetricMessagesToolMessageFromJSON(
  jsonString: string,
): SafeParseResult<
  DeploymentCreateMetricMessagesToolMessage,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      DeploymentCreateMetricMessagesToolMessage$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'DeploymentCreateMetricMessagesToolMessage' from JSON`,
  );
}

/** @internal */
export const DeploymentCreateMetric2DeploymentsMetricsRequestRequestBodyMessagesType$inboundSchema:
  z.ZodNativeEnum<
    typeof DeploymentCreateMetric2DeploymentsMetricsRequestRequestBodyMessagesType
  > = z.nativeEnum(
    DeploymentCreateMetric2DeploymentsMetricsRequestRequestBodyMessagesType,
  );

/** @internal */
export const DeploymentCreateMetric2DeploymentsMetricsRequestRequestBodyMessagesType$outboundSchema:
  z.ZodNativeEnum<
    typeof DeploymentCreateMetric2DeploymentsMetricsRequestRequestBodyMessagesType
  > =
    DeploymentCreateMetric2DeploymentsMetricsRequestRequestBodyMessagesType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeploymentCreateMetric2DeploymentsMetricsRequestRequestBodyMessagesType$ {
  /** @deprecated use `DeploymentCreateMetric2DeploymentsMetricsRequestRequestBodyMessagesType$inboundSchema` instead. */
  export const inboundSchema =
    DeploymentCreateMetric2DeploymentsMetricsRequestRequestBodyMessagesType$inboundSchema;
  /** @deprecated use `DeploymentCreateMetric2DeploymentsMetricsRequestRequestBodyMessagesType$outboundSchema` instead. */
  export const outboundSchema =
    DeploymentCreateMetric2DeploymentsMetricsRequestRequestBodyMessagesType$outboundSchema;
}

/** @internal */
export const DeploymentCreateMetric2RefusalContentPart$inboundSchema: z.ZodType<
  DeploymentCreateMetric2RefusalContentPart,
  z.ZodTypeDef,
  unknown
> = z.object({
  type:
    DeploymentCreateMetric2DeploymentsMetricsRequestRequestBodyMessagesType$inboundSchema,
  refusal: z.string(),
});

/** @internal */
export type DeploymentCreateMetric2RefusalContentPart$Outbound = {
  type: string;
  refusal: string;
};

/** @internal */
export const DeploymentCreateMetric2RefusalContentPart$outboundSchema:
  z.ZodType<
    DeploymentCreateMetric2RefusalContentPart$Outbound,
    z.ZodTypeDef,
    DeploymentCreateMetric2RefusalContentPart
  > = z.object({
    type:
      DeploymentCreateMetric2DeploymentsMetricsRequestRequestBodyMessagesType$outboundSchema,
    refusal: z.string(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeploymentCreateMetric2RefusalContentPart$ {
  /** @deprecated use `DeploymentCreateMetric2RefusalContentPart$inboundSchema` instead. */
  export const inboundSchema =
    DeploymentCreateMetric2RefusalContentPart$inboundSchema;
  /** @deprecated use `DeploymentCreateMetric2RefusalContentPart$outboundSchema` instead. */
  export const outboundSchema =
    DeploymentCreateMetric2RefusalContentPart$outboundSchema;
  /** @deprecated use `DeploymentCreateMetric2RefusalContentPart$Outbound` instead. */
  export type Outbound = DeploymentCreateMetric2RefusalContentPart$Outbound;
}

export function deploymentCreateMetric2RefusalContentPartToJSON(
  deploymentCreateMetric2RefusalContentPart:
    DeploymentCreateMetric2RefusalContentPart,
): string {
  return JSON.stringify(
    DeploymentCreateMetric2RefusalContentPart$outboundSchema.parse(
      deploymentCreateMetric2RefusalContentPart,
    ),
  );
}

export function deploymentCreateMetric2RefusalContentPartFromJSON(
  jsonString: string,
): SafeParseResult<
  DeploymentCreateMetric2RefusalContentPart,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      DeploymentCreateMetric2RefusalContentPart$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'DeploymentCreateMetric2RefusalContentPart' from JSON`,
  );
}

/** @internal */
export const DeploymentCreateMetric2DeploymentsMetricsRequestRequestBodyType$inboundSchema:
  z.ZodNativeEnum<
    typeof DeploymentCreateMetric2DeploymentsMetricsRequestRequestBodyType
  > = z.nativeEnum(
    DeploymentCreateMetric2DeploymentsMetricsRequestRequestBodyType,
  );

/** @internal */
export const DeploymentCreateMetric2DeploymentsMetricsRequestRequestBodyType$outboundSchema:
  z.ZodNativeEnum<
    typeof DeploymentCreateMetric2DeploymentsMetricsRequestRequestBodyType
  > =
    DeploymentCreateMetric2DeploymentsMetricsRequestRequestBodyType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeploymentCreateMetric2DeploymentsMetricsRequestRequestBodyType$ {
  /** @deprecated use `DeploymentCreateMetric2DeploymentsMetricsRequestRequestBodyType$inboundSchema` instead. */
  export const inboundSchema =
    DeploymentCreateMetric2DeploymentsMetricsRequestRequestBodyType$inboundSchema;
  /** @deprecated use `DeploymentCreateMetric2DeploymentsMetricsRequestRequestBodyType$outboundSchema` instead. */
  export const outboundSchema =
    DeploymentCreateMetric2DeploymentsMetricsRequestRequestBodyType$outboundSchema;
}

/** @internal */
export const DeploymentCreateMetric2TextContentPart$inboundSchema: z.ZodType<
  DeploymentCreateMetric2TextContentPart,
  z.ZodTypeDef,
  unknown
> = z.object({
  type:
    DeploymentCreateMetric2DeploymentsMetricsRequestRequestBodyType$inboundSchema,
  text: z.string(),
});

/** @internal */
export type DeploymentCreateMetric2TextContentPart$Outbound = {
  type: string;
  text: string;
};

/** @internal */
export const DeploymentCreateMetric2TextContentPart$outboundSchema: z.ZodType<
  DeploymentCreateMetric2TextContentPart$Outbound,
  z.ZodTypeDef,
  DeploymentCreateMetric2TextContentPart
> = z.object({
  type:
    DeploymentCreateMetric2DeploymentsMetricsRequestRequestBodyType$outboundSchema,
  text: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeploymentCreateMetric2TextContentPart$ {
  /** @deprecated use `DeploymentCreateMetric2TextContentPart$inboundSchema` instead. */
  export const inboundSchema =
    DeploymentCreateMetric2TextContentPart$inboundSchema;
  /** @deprecated use `DeploymentCreateMetric2TextContentPart$outboundSchema` instead. */
  export const outboundSchema =
    DeploymentCreateMetric2TextContentPart$outboundSchema;
  /** @deprecated use `DeploymentCreateMetric2TextContentPart$Outbound` instead. */
  export type Outbound = DeploymentCreateMetric2TextContentPart$Outbound;
}

export function deploymentCreateMetric2TextContentPartToJSON(
  deploymentCreateMetric2TextContentPart:
    DeploymentCreateMetric2TextContentPart,
): string {
  return JSON.stringify(
    DeploymentCreateMetric2TextContentPart$outboundSchema.parse(
      deploymentCreateMetric2TextContentPart,
    ),
  );
}

export function deploymentCreateMetric2TextContentPartFromJSON(
  jsonString: string,
): SafeParseResult<DeploymentCreateMetric2TextContentPart, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      DeploymentCreateMetric2TextContentPart$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DeploymentCreateMetric2TextContentPart' from JSON`,
  );
}

/** @internal */
export const DeploymentCreateMetricContentDeploymentsMetrics2$inboundSchema:
  z.ZodType<
    DeploymentCreateMetricContentDeploymentsMetrics2,
    z.ZodTypeDef,
    unknown
  > = z.union([
    z.lazy(() => DeploymentCreateMetric2TextContentPart$inboundSchema),
    z.lazy(() => DeploymentCreateMetric2RefusalContentPart$inboundSchema),
  ]);

/** @internal */
export type DeploymentCreateMetricContentDeploymentsMetrics2$Outbound =
  | DeploymentCreateMetric2TextContentPart$Outbound
  | DeploymentCreateMetric2RefusalContentPart$Outbound;

/** @internal */
export const DeploymentCreateMetricContentDeploymentsMetrics2$outboundSchema:
  z.ZodType<
    DeploymentCreateMetricContentDeploymentsMetrics2$Outbound,
    z.ZodTypeDef,
    DeploymentCreateMetricContentDeploymentsMetrics2
  > = z.union([
    z.lazy(() => DeploymentCreateMetric2TextContentPart$outboundSchema),
    z.lazy(() => DeploymentCreateMetric2RefusalContentPart$outboundSchema),
  ]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeploymentCreateMetricContentDeploymentsMetrics2$ {
  /** @deprecated use `DeploymentCreateMetricContentDeploymentsMetrics2$inboundSchema` instead. */
  export const inboundSchema =
    DeploymentCreateMetricContentDeploymentsMetrics2$inboundSchema;
  /** @deprecated use `DeploymentCreateMetricContentDeploymentsMetrics2$outboundSchema` instead. */
  export const outboundSchema =
    DeploymentCreateMetricContentDeploymentsMetrics2$outboundSchema;
  /** @deprecated use `DeploymentCreateMetricContentDeploymentsMetrics2$Outbound` instead. */
  export type Outbound =
    DeploymentCreateMetricContentDeploymentsMetrics2$Outbound;
}

export function deploymentCreateMetricContentDeploymentsMetrics2ToJSON(
  deploymentCreateMetricContentDeploymentsMetrics2:
    DeploymentCreateMetricContentDeploymentsMetrics2,
): string {
  return JSON.stringify(
    DeploymentCreateMetricContentDeploymentsMetrics2$outboundSchema.parse(
      deploymentCreateMetricContentDeploymentsMetrics2,
    ),
  );
}

export function deploymentCreateMetricContentDeploymentsMetrics2FromJSON(
  jsonString: string,
): SafeParseResult<
  DeploymentCreateMetricContentDeploymentsMetrics2,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      DeploymentCreateMetricContentDeploymentsMetrics2$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'DeploymentCreateMetricContentDeploymentsMetrics2' from JSON`,
  );
}

/** @internal */
export const DeploymentCreateMetricMessagesDeploymentsMetricsContent$inboundSchema:
  z.ZodType<
    DeploymentCreateMetricMessagesDeploymentsMetricsContent,
    z.ZodTypeDef,
    unknown
  > = z.union([
    z.string(),
    z.array(z.union([
      z.lazy(() => DeploymentCreateMetric2TextContentPart$inboundSchema),
      z.lazy(() => DeploymentCreateMetric2RefusalContentPart$inboundSchema),
    ])),
  ]);

/** @internal */
export type DeploymentCreateMetricMessagesDeploymentsMetricsContent$Outbound =
  | string
  | Array<
    | DeploymentCreateMetric2TextContentPart$Outbound
    | DeploymentCreateMetric2RefusalContentPart$Outbound
  >;

/** @internal */
export const DeploymentCreateMetricMessagesDeploymentsMetricsContent$outboundSchema:
  z.ZodType<
    DeploymentCreateMetricMessagesDeploymentsMetricsContent$Outbound,
    z.ZodTypeDef,
    DeploymentCreateMetricMessagesDeploymentsMetricsContent
  > = z.union([
    z.string(),
    z.array(z.union([
      z.lazy(() => DeploymentCreateMetric2TextContentPart$outboundSchema),
      z.lazy(() => DeploymentCreateMetric2RefusalContentPart$outboundSchema),
    ])),
  ]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeploymentCreateMetricMessagesDeploymentsMetricsContent$ {
  /** @deprecated use `DeploymentCreateMetricMessagesDeploymentsMetricsContent$inboundSchema` instead. */
  export const inboundSchema =
    DeploymentCreateMetricMessagesDeploymentsMetricsContent$inboundSchema;
  /** @deprecated use `DeploymentCreateMetricMessagesDeploymentsMetricsContent$outboundSchema` instead. */
  export const outboundSchema =
    DeploymentCreateMetricMessagesDeploymentsMetricsContent$outboundSchema;
  /** @deprecated use `DeploymentCreateMetricMessagesDeploymentsMetricsContent$Outbound` instead. */
  export type Outbound =
    DeploymentCreateMetricMessagesDeploymentsMetricsContent$Outbound;
}

export function deploymentCreateMetricMessagesDeploymentsMetricsContentToJSON(
  deploymentCreateMetricMessagesDeploymentsMetricsContent:
    DeploymentCreateMetricMessagesDeploymentsMetricsContent,
): string {
  return JSON.stringify(
    DeploymentCreateMetricMessagesDeploymentsMetricsContent$outboundSchema
      .parse(deploymentCreateMetricMessagesDeploymentsMetricsContent),
  );
}

export function deploymentCreateMetricMessagesDeploymentsMetricsContentFromJSON(
  jsonString: string,
): SafeParseResult<
  DeploymentCreateMetricMessagesDeploymentsMetricsContent,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      DeploymentCreateMetricMessagesDeploymentsMetricsContent$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'DeploymentCreateMetricMessagesDeploymentsMetricsContent' from JSON`,
  );
}

/** @internal */
export const DeploymentCreateMetricMessagesDeploymentsMetricsRequestRequestBodyRole$inboundSchema:
  z.ZodNativeEnum<
    typeof DeploymentCreateMetricMessagesDeploymentsMetricsRequestRequestBodyRole
  > = z.nativeEnum(
    DeploymentCreateMetricMessagesDeploymentsMetricsRequestRequestBodyRole,
  );

/** @internal */
export const DeploymentCreateMetricMessagesDeploymentsMetricsRequestRequestBodyRole$outboundSchema:
  z.ZodNativeEnum<
    typeof DeploymentCreateMetricMessagesDeploymentsMetricsRequestRequestBodyRole
  > =
    DeploymentCreateMetricMessagesDeploymentsMetricsRequestRequestBodyRole$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeploymentCreateMetricMessagesDeploymentsMetricsRequestRequestBodyRole$ {
  /** @deprecated use `DeploymentCreateMetricMessagesDeploymentsMetricsRequestRequestBodyRole$inboundSchema` instead. */
  export const inboundSchema =
    DeploymentCreateMetricMessagesDeploymentsMetricsRequestRequestBodyRole$inboundSchema;
  /** @deprecated use `DeploymentCreateMetricMessagesDeploymentsMetricsRequestRequestBodyRole$outboundSchema` instead. */
  export const outboundSchema =
    DeploymentCreateMetricMessagesDeploymentsMetricsRequestRequestBodyRole$outboundSchema;
}

/** @internal */
export const DeploymentCreateMetricMessagesAudio$inboundSchema: z.ZodType<
  DeploymentCreateMetricMessagesAudio,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
});

/** @internal */
export type DeploymentCreateMetricMessagesAudio$Outbound = {
  id: string;
};

/** @internal */
export const DeploymentCreateMetricMessagesAudio$outboundSchema: z.ZodType<
  DeploymentCreateMetricMessagesAudio$Outbound,
  z.ZodTypeDef,
  DeploymentCreateMetricMessagesAudio
> = z.object({
  id: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeploymentCreateMetricMessagesAudio$ {
  /** @deprecated use `DeploymentCreateMetricMessagesAudio$inboundSchema` instead. */
  export const inboundSchema =
    DeploymentCreateMetricMessagesAudio$inboundSchema;
  /** @deprecated use `DeploymentCreateMetricMessagesAudio$outboundSchema` instead. */
  export const outboundSchema =
    DeploymentCreateMetricMessagesAudio$outboundSchema;
  /** @deprecated use `DeploymentCreateMetricMessagesAudio$Outbound` instead. */
  export type Outbound = DeploymentCreateMetricMessagesAudio$Outbound;
}

export function deploymentCreateMetricMessagesAudioToJSON(
  deploymentCreateMetricMessagesAudio: DeploymentCreateMetricMessagesAudio,
): string {
  return JSON.stringify(
    DeploymentCreateMetricMessagesAudio$outboundSchema.parse(
      deploymentCreateMetricMessagesAudio,
    ),
  );
}

export function deploymentCreateMetricMessagesAudioFromJSON(
  jsonString: string,
): SafeParseResult<DeploymentCreateMetricMessagesAudio, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      DeploymentCreateMetricMessagesAudio$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DeploymentCreateMetricMessagesAudio' from JSON`,
  );
}

/** @internal */
export const DeploymentCreateMetricMessagesType$inboundSchema: z.ZodNativeEnum<
  typeof DeploymentCreateMetricMessagesType
> = z.nativeEnum(DeploymentCreateMetricMessagesType);

/** @internal */
export const DeploymentCreateMetricMessagesType$outboundSchema: z.ZodNativeEnum<
  typeof DeploymentCreateMetricMessagesType
> = DeploymentCreateMetricMessagesType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeploymentCreateMetricMessagesType$ {
  /** @deprecated use `DeploymentCreateMetricMessagesType$inboundSchema` instead. */
  export const inboundSchema = DeploymentCreateMetricMessagesType$inboundSchema;
  /** @deprecated use `DeploymentCreateMetricMessagesType$outboundSchema` instead. */
  export const outboundSchema =
    DeploymentCreateMetricMessagesType$outboundSchema;
}

/** @internal */
export const DeploymentCreateMetricMessagesFunction$inboundSchema: z.ZodType<
  DeploymentCreateMetricMessagesFunction,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.string().optional(),
  arguments: z.string().optional(),
});

/** @internal */
export type DeploymentCreateMetricMessagesFunction$Outbound = {
  name?: string | undefined;
  arguments?: string | undefined;
};

/** @internal */
export const DeploymentCreateMetricMessagesFunction$outboundSchema: z.ZodType<
  DeploymentCreateMetricMessagesFunction$Outbound,
  z.ZodTypeDef,
  DeploymentCreateMetricMessagesFunction
> = z.object({
  name: z.string().optional(),
  arguments: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeploymentCreateMetricMessagesFunction$ {
  /** @deprecated use `DeploymentCreateMetricMessagesFunction$inboundSchema` instead. */
  export const inboundSchema =
    DeploymentCreateMetricMessagesFunction$inboundSchema;
  /** @deprecated use `DeploymentCreateMetricMessagesFunction$outboundSchema` instead. */
  export const outboundSchema =
    DeploymentCreateMetricMessagesFunction$outboundSchema;
  /** @deprecated use `DeploymentCreateMetricMessagesFunction$Outbound` instead. */
  export type Outbound = DeploymentCreateMetricMessagesFunction$Outbound;
}

export function deploymentCreateMetricMessagesFunctionToJSON(
  deploymentCreateMetricMessagesFunction:
    DeploymentCreateMetricMessagesFunction,
): string {
  return JSON.stringify(
    DeploymentCreateMetricMessagesFunction$outboundSchema.parse(
      deploymentCreateMetricMessagesFunction,
    ),
  );
}

export function deploymentCreateMetricMessagesFunctionFromJSON(
  jsonString: string,
): SafeParseResult<DeploymentCreateMetricMessagesFunction, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      DeploymentCreateMetricMessagesFunction$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DeploymentCreateMetricMessagesFunction' from JSON`,
  );
}

/** @internal */
export const DeploymentCreateMetricMessagesToolCalls$inboundSchema: z.ZodType<
  DeploymentCreateMetricMessagesToolCalls,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  type: DeploymentCreateMetricMessagesType$inboundSchema,
  function: z.lazy(() => DeploymentCreateMetricMessagesFunction$inboundSchema),
});

/** @internal */
export type DeploymentCreateMetricMessagesToolCalls$Outbound = {
  id: string;
  type: string;
  function: DeploymentCreateMetricMessagesFunction$Outbound;
};

/** @internal */
export const DeploymentCreateMetricMessagesToolCalls$outboundSchema: z.ZodType<
  DeploymentCreateMetricMessagesToolCalls$Outbound,
  z.ZodTypeDef,
  DeploymentCreateMetricMessagesToolCalls
> = z.object({
  id: z.string(),
  type: DeploymentCreateMetricMessagesType$outboundSchema,
  function: z.lazy(() => DeploymentCreateMetricMessagesFunction$outboundSchema),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeploymentCreateMetricMessagesToolCalls$ {
  /** @deprecated use `DeploymentCreateMetricMessagesToolCalls$inboundSchema` instead. */
  export const inboundSchema =
    DeploymentCreateMetricMessagesToolCalls$inboundSchema;
  /** @deprecated use `DeploymentCreateMetricMessagesToolCalls$outboundSchema` instead. */
  export const outboundSchema =
    DeploymentCreateMetricMessagesToolCalls$outboundSchema;
  /** @deprecated use `DeploymentCreateMetricMessagesToolCalls$Outbound` instead. */
  export type Outbound = DeploymentCreateMetricMessagesToolCalls$Outbound;
}

export function deploymentCreateMetricMessagesToolCallsToJSON(
  deploymentCreateMetricMessagesToolCalls:
    DeploymentCreateMetricMessagesToolCalls,
): string {
  return JSON.stringify(
    DeploymentCreateMetricMessagesToolCalls$outboundSchema.parse(
      deploymentCreateMetricMessagesToolCalls,
    ),
  );
}

export function deploymentCreateMetricMessagesToolCallsFromJSON(
  jsonString: string,
): SafeParseResult<
  DeploymentCreateMetricMessagesToolCalls,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      DeploymentCreateMetricMessagesToolCalls$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'DeploymentCreateMetricMessagesToolCalls' from JSON`,
  );
}

/** @internal */
export const DeploymentCreateMetricMessagesAssistantMessage$inboundSchema:
  z.ZodType<
    DeploymentCreateMetricMessagesAssistantMessage,
    z.ZodTypeDef,
    unknown
  > = z.object({
    content: z.union([
      z.string(),
      z.array(z.union([
        z.lazy(() => DeploymentCreateMetric2TextContentPart$inboundSchema),
        z.lazy(() => DeploymentCreateMetric2RefusalContentPart$inboundSchema),
      ])),
    ]).optional(),
    refusal: z.nullable(z.string()).optional(),
    role:
      DeploymentCreateMetricMessagesDeploymentsMetricsRequestRequestBodyRole$inboundSchema,
    name: z.string().optional(),
    audio: z.nullable(
      z.lazy(() => DeploymentCreateMetricMessagesAudio$inboundSchema),
    ).optional(),
    tool_calls: z.array(
      z.lazy(() => DeploymentCreateMetricMessagesToolCalls$inboundSchema),
    ).optional(),
  }).transform((v) => {
    return remap$(v, {
      "tool_calls": "toolCalls",
    });
  });

/** @internal */
export type DeploymentCreateMetricMessagesAssistantMessage$Outbound = {
  content?:
    | string
    | Array<
      | DeploymentCreateMetric2TextContentPart$Outbound
      | DeploymentCreateMetric2RefusalContentPart$Outbound
    >
    | undefined;
  refusal?: string | null | undefined;
  role: string;
  name?: string | undefined;
  audio?: DeploymentCreateMetricMessagesAudio$Outbound | null | undefined;
  tool_calls?:
    | Array<DeploymentCreateMetricMessagesToolCalls$Outbound>
    | undefined;
};

/** @internal */
export const DeploymentCreateMetricMessagesAssistantMessage$outboundSchema:
  z.ZodType<
    DeploymentCreateMetricMessagesAssistantMessage$Outbound,
    z.ZodTypeDef,
    DeploymentCreateMetricMessagesAssistantMessage
  > = z.object({
    content: z.union([
      z.string(),
      z.array(z.union([
        z.lazy(() => DeploymentCreateMetric2TextContentPart$outboundSchema),
        z.lazy(() =>
          DeploymentCreateMetric2RefusalContentPart$outboundSchema
        ),
      ])),
    ]).optional(),
    refusal: z.nullable(z.string()).optional(),
    role:
      DeploymentCreateMetricMessagesDeploymentsMetricsRequestRequestBodyRole$outboundSchema,
    name: z.string().optional(),
    audio: z.nullable(
      z.lazy(() => DeploymentCreateMetricMessagesAudio$outboundSchema),
    ).optional(),
    toolCalls: z.array(
      z.lazy(() => DeploymentCreateMetricMessagesToolCalls$outboundSchema),
    ).optional(),
  }).transform((v) => {
    return remap$(v, {
      toolCalls: "tool_calls",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeploymentCreateMetricMessagesAssistantMessage$ {
  /** @deprecated use `DeploymentCreateMetricMessagesAssistantMessage$inboundSchema` instead. */
  export const inboundSchema =
    DeploymentCreateMetricMessagesAssistantMessage$inboundSchema;
  /** @deprecated use `DeploymentCreateMetricMessagesAssistantMessage$outboundSchema` instead. */
  export const outboundSchema =
    DeploymentCreateMetricMessagesAssistantMessage$outboundSchema;
  /** @deprecated use `DeploymentCreateMetricMessagesAssistantMessage$Outbound` instead. */
  export type Outbound =
    DeploymentCreateMetricMessagesAssistantMessage$Outbound;
}

export function deploymentCreateMetricMessagesAssistantMessageToJSON(
  deploymentCreateMetricMessagesAssistantMessage:
    DeploymentCreateMetricMessagesAssistantMessage,
): string {
  return JSON.stringify(
    DeploymentCreateMetricMessagesAssistantMessage$outboundSchema.parse(
      deploymentCreateMetricMessagesAssistantMessage,
    ),
  );
}

export function deploymentCreateMetricMessagesAssistantMessageFromJSON(
  jsonString: string,
): SafeParseResult<
  DeploymentCreateMetricMessagesAssistantMessage,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      DeploymentCreateMetricMessagesAssistantMessage$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'DeploymentCreateMetricMessagesAssistantMessage' from JSON`,
  );
}

/** @internal */
export const DeploymentCreateMetricMessagesDeploymentsMetricsRequestRole$inboundSchema:
  z.ZodNativeEnum<
    typeof DeploymentCreateMetricMessagesDeploymentsMetricsRequestRole
  > = z.nativeEnum(DeploymentCreateMetricMessagesDeploymentsMetricsRequestRole);

/** @internal */
export const DeploymentCreateMetricMessagesDeploymentsMetricsRequestRole$outboundSchema:
  z.ZodNativeEnum<
    typeof DeploymentCreateMetricMessagesDeploymentsMetricsRequestRole
  > = DeploymentCreateMetricMessagesDeploymentsMetricsRequestRole$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeploymentCreateMetricMessagesDeploymentsMetricsRequestRole$ {
  /** @deprecated use `DeploymentCreateMetricMessagesDeploymentsMetricsRequestRole$inboundSchema` instead. */
  export const inboundSchema =
    DeploymentCreateMetricMessagesDeploymentsMetricsRequestRole$inboundSchema;
  /** @deprecated use `DeploymentCreateMetricMessagesDeploymentsMetricsRequestRole$outboundSchema` instead. */
  export const outboundSchema =
    DeploymentCreateMetricMessagesDeploymentsMetricsRequestRole$outboundSchema;
}

/** @internal */
export const DeploymentCreateMetric2DeploymentsMetricsRequestType$inboundSchema:
  z.ZodNativeEnum<typeof DeploymentCreateMetric2DeploymentsMetricsRequestType> =
    z.nativeEnum(DeploymentCreateMetric2DeploymentsMetricsRequestType);

/** @internal */
export const DeploymentCreateMetric2DeploymentsMetricsRequestType$outboundSchema:
  z.ZodNativeEnum<typeof DeploymentCreateMetric2DeploymentsMetricsRequestType> =
    DeploymentCreateMetric2DeploymentsMetricsRequestType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeploymentCreateMetric2DeploymentsMetricsRequestType$ {
  /** @deprecated use `DeploymentCreateMetric2DeploymentsMetricsRequestType$inboundSchema` instead. */
  export const inboundSchema =
    DeploymentCreateMetric2DeploymentsMetricsRequestType$inboundSchema;
  /** @deprecated use `DeploymentCreateMetric2DeploymentsMetricsRequestType$outboundSchema` instead. */
  export const outboundSchema =
    DeploymentCreateMetric2DeploymentsMetricsRequestType$outboundSchema;
}

/** @internal */
export const DeploymentCreateMetric2Format$inboundSchema: z.ZodNativeEnum<
  typeof DeploymentCreateMetric2Format
> = z.nativeEnum(DeploymentCreateMetric2Format);

/** @internal */
export const DeploymentCreateMetric2Format$outboundSchema: z.ZodNativeEnum<
  typeof DeploymentCreateMetric2Format
> = DeploymentCreateMetric2Format$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeploymentCreateMetric2Format$ {
  /** @deprecated use `DeploymentCreateMetric2Format$inboundSchema` instead. */
  export const inboundSchema = DeploymentCreateMetric2Format$inboundSchema;
  /** @deprecated use `DeploymentCreateMetric2Format$outboundSchema` instead. */
  export const outboundSchema = DeploymentCreateMetric2Format$outboundSchema;
}

/** @internal */
export const DeploymentCreateMetric2InputAudio$inboundSchema: z.ZodType<
  DeploymentCreateMetric2InputAudio,
  z.ZodTypeDef,
  unknown
> = z.object({
  data: z.string(),
  format: DeploymentCreateMetric2Format$inboundSchema,
});

/** @internal */
export type DeploymentCreateMetric2InputAudio$Outbound = {
  data: string;
  format: string;
};

/** @internal */
export const DeploymentCreateMetric2InputAudio$outboundSchema: z.ZodType<
  DeploymentCreateMetric2InputAudio$Outbound,
  z.ZodTypeDef,
  DeploymentCreateMetric2InputAudio
> = z.object({
  data: z.string(),
  format: DeploymentCreateMetric2Format$outboundSchema,
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeploymentCreateMetric2InputAudio$ {
  /** @deprecated use `DeploymentCreateMetric2InputAudio$inboundSchema` instead. */
  export const inboundSchema = DeploymentCreateMetric2InputAudio$inboundSchema;
  /** @deprecated use `DeploymentCreateMetric2InputAudio$outboundSchema` instead. */
  export const outboundSchema =
    DeploymentCreateMetric2InputAudio$outboundSchema;
  /** @deprecated use `DeploymentCreateMetric2InputAudio$Outbound` instead. */
  export type Outbound = DeploymentCreateMetric2InputAudio$Outbound;
}

export function deploymentCreateMetric2InputAudioToJSON(
  deploymentCreateMetric2InputAudio: DeploymentCreateMetric2InputAudio,
): string {
  return JSON.stringify(
    DeploymentCreateMetric2InputAudio$outboundSchema.parse(
      deploymentCreateMetric2InputAudio,
    ),
  );
}

export function deploymentCreateMetric2InputAudioFromJSON(
  jsonString: string,
): SafeParseResult<DeploymentCreateMetric2InputAudio, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DeploymentCreateMetric2InputAudio$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DeploymentCreateMetric2InputAudio' from JSON`,
  );
}

/** @internal */
export const DeploymentCreateMetric23$inboundSchema: z.ZodType<
  DeploymentCreateMetric23,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: DeploymentCreateMetric2DeploymentsMetricsRequestType$inboundSchema,
  input_audio: z.lazy(() => DeploymentCreateMetric2InputAudio$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "input_audio": "inputAudio",
  });
});

/** @internal */
export type DeploymentCreateMetric23$Outbound = {
  type: string;
  input_audio: DeploymentCreateMetric2InputAudio$Outbound;
};

/** @internal */
export const DeploymentCreateMetric23$outboundSchema: z.ZodType<
  DeploymentCreateMetric23$Outbound,
  z.ZodTypeDef,
  DeploymentCreateMetric23
> = z.object({
  type: DeploymentCreateMetric2DeploymentsMetricsRequestType$outboundSchema,
  inputAudio: z.lazy(() => DeploymentCreateMetric2InputAudio$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    inputAudio: "input_audio",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeploymentCreateMetric23$ {
  /** @deprecated use `DeploymentCreateMetric23$inboundSchema` instead. */
  export const inboundSchema = DeploymentCreateMetric23$inboundSchema;
  /** @deprecated use `DeploymentCreateMetric23$outboundSchema` instead. */
  export const outboundSchema = DeploymentCreateMetric23$outboundSchema;
  /** @deprecated use `DeploymentCreateMetric23$Outbound` instead. */
  export type Outbound = DeploymentCreateMetric23$Outbound;
}

export function deploymentCreateMetric23ToJSON(
  deploymentCreateMetric23: DeploymentCreateMetric23,
): string {
  return JSON.stringify(
    DeploymentCreateMetric23$outboundSchema.parse(deploymentCreateMetric23),
  );
}

export function deploymentCreateMetric23FromJSON(
  jsonString: string,
): SafeParseResult<DeploymentCreateMetric23, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DeploymentCreateMetric23$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DeploymentCreateMetric23' from JSON`,
  );
}

/** @internal */
export const DeploymentCreateMetric2DeploymentsMetricsType$inboundSchema:
  z.ZodNativeEnum<typeof DeploymentCreateMetric2DeploymentsMetricsType> = z
    .nativeEnum(DeploymentCreateMetric2DeploymentsMetricsType);

/** @internal */
export const DeploymentCreateMetric2DeploymentsMetricsType$outboundSchema:
  z.ZodNativeEnum<typeof DeploymentCreateMetric2DeploymentsMetricsType> =
    DeploymentCreateMetric2DeploymentsMetricsType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeploymentCreateMetric2DeploymentsMetricsType$ {
  /** @deprecated use `DeploymentCreateMetric2DeploymentsMetricsType$inboundSchema` instead. */
  export const inboundSchema =
    DeploymentCreateMetric2DeploymentsMetricsType$inboundSchema;
  /** @deprecated use `DeploymentCreateMetric2DeploymentsMetricsType$outboundSchema` instead. */
  export const outboundSchema =
    DeploymentCreateMetric2DeploymentsMetricsType$outboundSchema;
}

/** @internal */
export const DeploymentCreateMetric2Detail$inboundSchema: z.ZodNativeEnum<
  typeof DeploymentCreateMetric2Detail
> = z.nativeEnum(DeploymentCreateMetric2Detail);

/** @internal */
export const DeploymentCreateMetric2Detail$outboundSchema: z.ZodNativeEnum<
  typeof DeploymentCreateMetric2Detail
> = DeploymentCreateMetric2Detail$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeploymentCreateMetric2Detail$ {
  /** @deprecated use `DeploymentCreateMetric2Detail$inboundSchema` instead. */
  export const inboundSchema = DeploymentCreateMetric2Detail$inboundSchema;
  /** @deprecated use `DeploymentCreateMetric2Detail$outboundSchema` instead. */
  export const outboundSchema = DeploymentCreateMetric2Detail$outboundSchema;
}

/** @internal */
export const DeploymentCreateMetric2ImageUrl$inboundSchema: z.ZodType<
  DeploymentCreateMetric2ImageUrl,
  z.ZodTypeDef,
  unknown
> = z.object({
  url: z.string(),
  detail: DeploymentCreateMetric2Detail$inboundSchema.optional(),
});

/** @internal */
export type DeploymentCreateMetric2ImageUrl$Outbound = {
  url: string;
  detail?: string | undefined;
};

/** @internal */
export const DeploymentCreateMetric2ImageUrl$outboundSchema: z.ZodType<
  DeploymentCreateMetric2ImageUrl$Outbound,
  z.ZodTypeDef,
  DeploymentCreateMetric2ImageUrl
> = z.object({
  url: z.string(),
  detail: DeploymentCreateMetric2Detail$outboundSchema.optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeploymentCreateMetric2ImageUrl$ {
  /** @deprecated use `DeploymentCreateMetric2ImageUrl$inboundSchema` instead. */
  export const inboundSchema = DeploymentCreateMetric2ImageUrl$inboundSchema;
  /** @deprecated use `DeploymentCreateMetric2ImageUrl$outboundSchema` instead. */
  export const outboundSchema = DeploymentCreateMetric2ImageUrl$outboundSchema;
  /** @deprecated use `DeploymentCreateMetric2ImageUrl$Outbound` instead. */
  export type Outbound = DeploymentCreateMetric2ImageUrl$Outbound;
}

export function deploymentCreateMetric2ImageUrlToJSON(
  deploymentCreateMetric2ImageUrl: DeploymentCreateMetric2ImageUrl,
): string {
  return JSON.stringify(
    DeploymentCreateMetric2ImageUrl$outboundSchema.parse(
      deploymentCreateMetric2ImageUrl,
    ),
  );
}

export function deploymentCreateMetric2ImageUrlFromJSON(
  jsonString: string,
): SafeParseResult<DeploymentCreateMetric2ImageUrl, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DeploymentCreateMetric2ImageUrl$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DeploymentCreateMetric2ImageUrl' from JSON`,
  );
}

/** @internal */
export const DeploymentCreateMetric22$inboundSchema: z.ZodType<
  DeploymentCreateMetric22,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: DeploymentCreateMetric2DeploymentsMetricsType$inboundSchema,
  image_url: z.lazy(() => DeploymentCreateMetric2ImageUrl$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "image_url": "imageUrl",
  });
});

/** @internal */
export type DeploymentCreateMetric22$Outbound = {
  type: string;
  image_url: DeploymentCreateMetric2ImageUrl$Outbound;
};

/** @internal */
export const DeploymentCreateMetric22$outboundSchema: z.ZodType<
  DeploymentCreateMetric22$Outbound,
  z.ZodTypeDef,
  DeploymentCreateMetric22
> = z.object({
  type: DeploymentCreateMetric2DeploymentsMetricsType$outboundSchema,
  imageUrl: z.lazy(() => DeploymentCreateMetric2ImageUrl$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    imageUrl: "image_url",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeploymentCreateMetric22$ {
  /** @deprecated use `DeploymentCreateMetric22$inboundSchema` instead. */
  export const inboundSchema = DeploymentCreateMetric22$inboundSchema;
  /** @deprecated use `DeploymentCreateMetric22$outboundSchema` instead. */
  export const outboundSchema = DeploymentCreateMetric22$outboundSchema;
  /** @deprecated use `DeploymentCreateMetric22$Outbound` instead. */
  export type Outbound = DeploymentCreateMetric22$Outbound;
}

export function deploymentCreateMetric22ToJSON(
  deploymentCreateMetric22: DeploymentCreateMetric22,
): string {
  return JSON.stringify(
    DeploymentCreateMetric22$outboundSchema.parse(deploymentCreateMetric22),
  );
}

export function deploymentCreateMetric22FromJSON(
  jsonString: string,
): SafeParseResult<DeploymentCreateMetric22, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DeploymentCreateMetric22$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DeploymentCreateMetric22' from JSON`,
  );
}

/** @internal */
export const DeploymentCreateMetric2Type$inboundSchema: z.ZodNativeEnum<
  typeof DeploymentCreateMetric2Type
> = z.nativeEnum(DeploymentCreateMetric2Type);

/** @internal */
export const DeploymentCreateMetric2Type$outboundSchema: z.ZodNativeEnum<
  typeof DeploymentCreateMetric2Type
> = DeploymentCreateMetric2Type$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeploymentCreateMetric2Type$ {
  /** @deprecated use `DeploymentCreateMetric2Type$inboundSchema` instead. */
  export const inboundSchema = DeploymentCreateMetric2Type$inboundSchema;
  /** @deprecated use `DeploymentCreateMetric2Type$outboundSchema` instead. */
  export const outboundSchema = DeploymentCreateMetric2Type$outboundSchema;
}

/** @internal */
export const DeploymentCreateMetric21$inboundSchema: z.ZodType<
  DeploymentCreateMetric21,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: DeploymentCreateMetric2Type$inboundSchema,
  text: z.string(),
});

/** @internal */
export type DeploymentCreateMetric21$Outbound = {
  type: string;
  text: string;
};

/** @internal */
export const DeploymentCreateMetric21$outboundSchema: z.ZodType<
  DeploymentCreateMetric21$Outbound,
  z.ZodTypeDef,
  DeploymentCreateMetric21
> = z.object({
  type: DeploymentCreateMetric2Type$outboundSchema,
  text: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeploymentCreateMetric21$ {
  /** @deprecated use `DeploymentCreateMetric21$inboundSchema` instead. */
  export const inboundSchema = DeploymentCreateMetric21$inboundSchema;
  /** @deprecated use `DeploymentCreateMetric21$outboundSchema` instead. */
  export const outboundSchema = DeploymentCreateMetric21$outboundSchema;
  /** @deprecated use `DeploymentCreateMetric21$Outbound` instead. */
  export type Outbound = DeploymentCreateMetric21$Outbound;
}

export function deploymentCreateMetric21ToJSON(
  deploymentCreateMetric21: DeploymentCreateMetric21,
): string {
  return JSON.stringify(
    DeploymentCreateMetric21$outboundSchema.parse(deploymentCreateMetric21),
  );
}

export function deploymentCreateMetric21FromJSON(
  jsonString: string,
): SafeParseResult<DeploymentCreateMetric21, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DeploymentCreateMetric21$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DeploymentCreateMetric21' from JSON`,
  );
}

/** @internal */
export const DeploymentCreateMetricContent2$inboundSchema: z.ZodType<
  DeploymentCreateMetricContent2,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => DeploymentCreateMetric21$inboundSchema),
  z.lazy(() => DeploymentCreateMetric22$inboundSchema),
  z.lazy(() => DeploymentCreateMetric23$inboundSchema),
]);

/** @internal */
export type DeploymentCreateMetricContent2$Outbound =
  | DeploymentCreateMetric21$Outbound
  | DeploymentCreateMetric22$Outbound
  | DeploymentCreateMetric23$Outbound;

/** @internal */
export const DeploymentCreateMetricContent2$outboundSchema: z.ZodType<
  DeploymentCreateMetricContent2$Outbound,
  z.ZodTypeDef,
  DeploymentCreateMetricContent2
> = z.union([
  z.lazy(() => DeploymentCreateMetric21$outboundSchema),
  z.lazy(() => DeploymentCreateMetric22$outboundSchema),
  z.lazy(() => DeploymentCreateMetric23$outboundSchema),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeploymentCreateMetricContent2$ {
  /** @deprecated use `DeploymentCreateMetricContent2$inboundSchema` instead. */
  export const inboundSchema = DeploymentCreateMetricContent2$inboundSchema;
  /** @deprecated use `DeploymentCreateMetricContent2$outboundSchema` instead. */
  export const outboundSchema = DeploymentCreateMetricContent2$outboundSchema;
  /** @deprecated use `DeploymentCreateMetricContent2$Outbound` instead. */
  export type Outbound = DeploymentCreateMetricContent2$Outbound;
}

export function deploymentCreateMetricContent2ToJSON(
  deploymentCreateMetricContent2: DeploymentCreateMetricContent2,
): string {
  return JSON.stringify(
    DeploymentCreateMetricContent2$outboundSchema.parse(
      deploymentCreateMetricContent2,
    ),
  );
}

export function deploymentCreateMetricContent2FromJSON(
  jsonString: string,
): SafeParseResult<DeploymentCreateMetricContent2, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DeploymentCreateMetricContent2$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DeploymentCreateMetricContent2' from JSON`,
  );
}

/** @internal */
export const DeploymentCreateMetricMessagesContent$inboundSchema: z.ZodType<
  DeploymentCreateMetricMessagesContent,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.string(),
  z.array(z.union([
    z.lazy(() => DeploymentCreateMetric21$inboundSchema),
    z.lazy(() => DeploymentCreateMetric22$inboundSchema),
    z.lazy(() => DeploymentCreateMetric23$inboundSchema),
  ])),
]);

/** @internal */
export type DeploymentCreateMetricMessagesContent$Outbound =
  | string
  | Array<
    | DeploymentCreateMetric21$Outbound
    | DeploymentCreateMetric22$Outbound
    | DeploymentCreateMetric23$Outbound
  >;

/** @internal */
export const DeploymentCreateMetricMessagesContent$outboundSchema: z.ZodType<
  DeploymentCreateMetricMessagesContent$Outbound,
  z.ZodTypeDef,
  DeploymentCreateMetricMessagesContent
> = z.union([
  z.string(),
  z.array(z.union([
    z.lazy(() => DeploymentCreateMetric21$outboundSchema),
    z.lazy(() => DeploymentCreateMetric22$outboundSchema),
    z.lazy(() => DeploymentCreateMetric23$outboundSchema),
  ])),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeploymentCreateMetricMessagesContent$ {
  /** @deprecated use `DeploymentCreateMetricMessagesContent$inboundSchema` instead. */
  export const inboundSchema =
    DeploymentCreateMetricMessagesContent$inboundSchema;
  /** @deprecated use `DeploymentCreateMetricMessagesContent$outboundSchema` instead. */
  export const outboundSchema =
    DeploymentCreateMetricMessagesContent$outboundSchema;
  /** @deprecated use `DeploymentCreateMetricMessagesContent$Outbound` instead. */
  export type Outbound = DeploymentCreateMetricMessagesContent$Outbound;
}

export function deploymentCreateMetricMessagesContentToJSON(
  deploymentCreateMetricMessagesContent: DeploymentCreateMetricMessagesContent,
): string {
  return JSON.stringify(
    DeploymentCreateMetricMessagesContent$outboundSchema.parse(
      deploymentCreateMetricMessagesContent,
    ),
  );
}

export function deploymentCreateMetricMessagesContentFromJSON(
  jsonString: string,
): SafeParseResult<DeploymentCreateMetricMessagesContent, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      DeploymentCreateMetricMessagesContent$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DeploymentCreateMetricMessagesContent' from JSON`,
  );
}

/** @internal */
export const DeploymentCreateMetricMessagesUserMessage$inboundSchema: z.ZodType<
  DeploymentCreateMetricMessagesUserMessage,
  z.ZodTypeDef,
  unknown
> = z.object({
  role:
    DeploymentCreateMetricMessagesDeploymentsMetricsRequestRole$inboundSchema,
  name: z.string().optional(),
  content: z.union([
    z.string(),
    z.array(z.union([
      z.lazy(() => DeploymentCreateMetric21$inboundSchema),
      z.lazy(() => DeploymentCreateMetric22$inboundSchema),
      z.lazy(() => DeploymentCreateMetric23$inboundSchema),
    ])),
  ]),
});

/** @internal */
export type DeploymentCreateMetricMessagesUserMessage$Outbound = {
  role: string;
  name?: string | undefined;
  content:
    | string
    | Array<
      | DeploymentCreateMetric21$Outbound
      | DeploymentCreateMetric22$Outbound
      | DeploymentCreateMetric23$Outbound
    >;
};

/** @internal */
export const DeploymentCreateMetricMessagesUserMessage$outboundSchema:
  z.ZodType<
    DeploymentCreateMetricMessagesUserMessage$Outbound,
    z.ZodTypeDef,
    DeploymentCreateMetricMessagesUserMessage
  > = z.object({
    role:
      DeploymentCreateMetricMessagesDeploymentsMetricsRequestRole$outboundSchema,
    name: z.string().optional(),
    content: z.union([
      z.string(),
      z.array(z.union([
        z.lazy(() => DeploymentCreateMetric21$outboundSchema),
        z.lazy(() => DeploymentCreateMetric22$outboundSchema),
        z.lazy(() => DeploymentCreateMetric23$outboundSchema),
      ])),
    ]),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeploymentCreateMetricMessagesUserMessage$ {
  /** @deprecated use `DeploymentCreateMetricMessagesUserMessage$inboundSchema` instead. */
  export const inboundSchema =
    DeploymentCreateMetricMessagesUserMessage$inboundSchema;
  /** @deprecated use `DeploymentCreateMetricMessagesUserMessage$outboundSchema` instead. */
  export const outboundSchema =
    DeploymentCreateMetricMessagesUserMessage$outboundSchema;
  /** @deprecated use `DeploymentCreateMetricMessagesUserMessage$Outbound` instead. */
  export type Outbound = DeploymentCreateMetricMessagesUserMessage$Outbound;
}

export function deploymentCreateMetricMessagesUserMessageToJSON(
  deploymentCreateMetricMessagesUserMessage:
    DeploymentCreateMetricMessagesUserMessage,
): string {
  return JSON.stringify(
    DeploymentCreateMetricMessagesUserMessage$outboundSchema.parse(
      deploymentCreateMetricMessagesUserMessage,
    ),
  );
}

export function deploymentCreateMetricMessagesUserMessageFromJSON(
  jsonString: string,
): SafeParseResult<
  DeploymentCreateMetricMessagesUserMessage,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      DeploymentCreateMetricMessagesUserMessage$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'DeploymentCreateMetricMessagesUserMessage' from JSON`,
  );
}

/** @internal */
export const DeploymentCreateMetricMessagesDeploymentsMetricsRole$inboundSchema:
  z.ZodNativeEnum<typeof DeploymentCreateMetricMessagesDeploymentsMetricsRole> =
    z.nativeEnum(DeploymentCreateMetricMessagesDeploymentsMetricsRole);

/** @internal */
export const DeploymentCreateMetricMessagesDeploymentsMetricsRole$outboundSchema:
  z.ZodNativeEnum<typeof DeploymentCreateMetricMessagesDeploymentsMetricsRole> =
    DeploymentCreateMetricMessagesDeploymentsMetricsRole$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeploymentCreateMetricMessagesDeploymentsMetricsRole$ {
  /** @deprecated use `DeploymentCreateMetricMessagesDeploymentsMetricsRole$inboundSchema` instead. */
  export const inboundSchema =
    DeploymentCreateMetricMessagesDeploymentsMetricsRole$inboundSchema;
  /** @deprecated use `DeploymentCreateMetricMessagesDeploymentsMetricsRole$outboundSchema` instead. */
  export const outboundSchema =
    DeploymentCreateMetricMessagesDeploymentsMetricsRole$outboundSchema;
}

/** @internal */
export const DeploymentCreateMetricMessagesSystemMessage$inboundSchema:
  z.ZodType<
    DeploymentCreateMetricMessagesSystemMessage,
    z.ZodTypeDef,
    unknown
  > = z.object({
    role: DeploymentCreateMetricMessagesDeploymentsMetricsRole$inboundSchema,
    content: z.string(),
    name: z.string().optional(),
  });

/** @internal */
export type DeploymentCreateMetricMessagesSystemMessage$Outbound = {
  role: string;
  content: string;
  name?: string | undefined;
};

/** @internal */
export const DeploymentCreateMetricMessagesSystemMessage$outboundSchema:
  z.ZodType<
    DeploymentCreateMetricMessagesSystemMessage$Outbound,
    z.ZodTypeDef,
    DeploymentCreateMetricMessagesSystemMessage
  > = z.object({
    role: DeploymentCreateMetricMessagesDeploymentsMetricsRole$outboundSchema,
    content: z.string(),
    name: z.string().optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeploymentCreateMetricMessagesSystemMessage$ {
  /** @deprecated use `DeploymentCreateMetricMessagesSystemMessage$inboundSchema` instead. */
  export const inboundSchema =
    DeploymentCreateMetricMessagesSystemMessage$inboundSchema;
  /** @deprecated use `DeploymentCreateMetricMessagesSystemMessage$outboundSchema` instead. */
  export const outboundSchema =
    DeploymentCreateMetricMessagesSystemMessage$outboundSchema;
  /** @deprecated use `DeploymentCreateMetricMessagesSystemMessage$Outbound` instead. */
  export type Outbound = DeploymentCreateMetricMessagesSystemMessage$Outbound;
}

export function deploymentCreateMetricMessagesSystemMessageToJSON(
  deploymentCreateMetricMessagesSystemMessage:
    DeploymentCreateMetricMessagesSystemMessage,
): string {
  return JSON.stringify(
    DeploymentCreateMetricMessagesSystemMessage$outboundSchema.parse(
      deploymentCreateMetricMessagesSystemMessage,
    ),
  );
}

export function deploymentCreateMetricMessagesSystemMessageFromJSON(
  jsonString: string,
): SafeParseResult<
  DeploymentCreateMetricMessagesSystemMessage,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      DeploymentCreateMetricMessagesSystemMessage$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'DeploymentCreateMetricMessagesSystemMessage' from JSON`,
  );
}

/** @internal */
export const DeploymentCreateMetricMessagesRole$inboundSchema: z.ZodNativeEnum<
  typeof DeploymentCreateMetricMessagesRole
> = z.nativeEnum(DeploymentCreateMetricMessagesRole);

/** @internal */
export const DeploymentCreateMetricMessagesRole$outboundSchema: z.ZodNativeEnum<
  typeof DeploymentCreateMetricMessagesRole
> = DeploymentCreateMetricMessagesRole$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeploymentCreateMetricMessagesRole$ {
  /** @deprecated use `DeploymentCreateMetricMessagesRole$inboundSchema` instead. */
  export const inboundSchema = DeploymentCreateMetricMessagesRole$inboundSchema;
  /** @deprecated use `DeploymentCreateMetricMessagesRole$outboundSchema` instead. */
  export const outboundSchema =
    DeploymentCreateMetricMessagesRole$outboundSchema;
}

/** @internal */
export const DeploymentCreateMetricMessagesDeveloperMessage$inboundSchema:
  z.ZodType<
    DeploymentCreateMetricMessagesDeveloperMessage,
    z.ZodTypeDef,
    unknown
  > = z.object({
    role: DeploymentCreateMetricMessagesRole$inboundSchema,
    content: z.string(),
    name: z.string().optional(),
  });

/** @internal */
export type DeploymentCreateMetricMessagesDeveloperMessage$Outbound = {
  role: string;
  content: string;
  name?: string | undefined;
};

/** @internal */
export const DeploymentCreateMetricMessagesDeveloperMessage$outboundSchema:
  z.ZodType<
    DeploymentCreateMetricMessagesDeveloperMessage$Outbound,
    z.ZodTypeDef,
    DeploymentCreateMetricMessagesDeveloperMessage
  > = z.object({
    role: DeploymentCreateMetricMessagesRole$outboundSchema,
    content: z.string(),
    name: z.string().optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeploymentCreateMetricMessagesDeveloperMessage$ {
  /** @deprecated use `DeploymentCreateMetricMessagesDeveloperMessage$inboundSchema` instead. */
  export const inboundSchema =
    DeploymentCreateMetricMessagesDeveloperMessage$inboundSchema;
  /** @deprecated use `DeploymentCreateMetricMessagesDeveloperMessage$outboundSchema` instead. */
  export const outboundSchema =
    DeploymentCreateMetricMessagesDeveloperMessage$outboundSchema;
  /** @deprecated use `DeploymentCreateMetricMessagesDeveloperMessage$Outbound` instead. */
  export type Outbound =
    DeploymentCreateMetricMessagesDeveloperMessage$Outbound;
}

export function deploymentCreateMetricMessagesDeveloperMessageToJSON(
  deploymentCreateMetricMessagesDeveloperMessage:
    DeploymentCreateMetricMessagesDeveloperMessage,
): string {
  return JSON.stringify(
    DeploymentCreateMetricMessagesDeveloperMessage$outboundSchema.parse(
      deploymentCreateMetricMessagesDeveloperMessage,
    ),
  );
}

export function deploymentCreateMetricMessagesDeveloperMessageFromJSON(
  jsonString: string,
): SafeParseResult<
  DeploymentCreateMetricMessagesDeveloperMessage,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      DeploymentCreateMetricMessagesDeveloperMessage$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'DeploymentCreateMetricMessagesDeveloperMessage' from JSON`,
  );
}

/** @internal */
export const DeploymentCreateMetricMessages$inboundSchema: z.ZodType<
  DeploymentCreateMetricMessages,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => DeploymentCreateMetricMessagesDeveloperMessage$inboundSchema),
  z.lazy(() => DeploymentCreateMetricMessagesSystemMessage$inboundSchema),
  z.lazy(() => DeploymentCreateMetricMessagesUserMessage$inboundSchema),
  z.lazy(() => DeploymentCreateMetricMessagesToolMessage$inboundSchema),
  z.lazy(() => DeploymentCreateMetricMessagesAssistantMessage$inboundSchema),
]);

/** @internal */
export type DeploymentCreateMetricMessages$Outbound =
  | DeploymentCreateMetricMessagesDeveloperMessage$Outbound
  | DeploymentCreateMetricMessagesSystemMessage$Outbound
  | DeploymentCreateMetricMessagesUserMessage$Outbound
  | DeploymentCreateMetricMessagesToolMessage$Outbound
  | DeploymentCreateMetricMessagesAssistantMessage$Outbound;

/** @internal */
export const DeploymentCreateMetricMessages$outboundSchema: z.ZodType<
  DeploymentCreateMetricMessages$Outbound,
  z.ZodTypeDef,
  DeploymentCreateMetricMessages
> = z.union([
  z.lazy(() => DeploymentCreateMetricMessagesDeveloperMessage$outboundSchema),
  z.lazy(() => DeploymentCreateMetricMessagesSystemMessage$outboundSchema),
  z.lazy(() => DeploymentCreateMetricMessagesUserMessage$outboundSchema),
  z.lazy(() => DeploymentCreateMetricMessagesToolMessage$outboundSchema),
  z.lazy(() => DeploymentCreateMetricMessagesAssistantMessage$outboundSchema),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeploymentCreateMetricMessages$ {
  /** @deprecated use `DeploymentCreateMetricMessages$inboundSchema` instead. */
  export const inboundSchema = DeploymentCreateMetricMessages$inboundSchema;
  /** @deprecated use `DeploymentCreateMetricMessages$outboundSchema` instead. */
  export const outboundSchema = DeploymentCreateMetricMessages$outboundSchema;
  /** @deprecated use `DeploymentCreateMetricMessages$Outbound` instead. */
  export type Outbound = DeploymentCreateMetricMessages$Outbound;
}

export function deploymentCreateMetricMessagesToJSON(
  deploymentCreateMetricMessages: DeploymentCreateMetricMessages,
): string {
  return JSON.stringify(
    DeploymentCreateMetricMessages$outboundSchema.parse(
      deploymentCreateMetricMessages,
    ),
  );
}

export function deploymentCreateMetricMessagesFromJSON(
  jsonString: string,
): SafeParseResult<DeploymentCreateMetricMessages, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DeploymentCreateMetricMessages$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DeploymentCreateMetricMessages' from JSON`,
  );
}

/** @internal */
export const DeploymentCreateMetricMessageDeploymentsMetricsRole$inboundSchema:
  z.ZodNativeEnum<typeof DeploymentCreateMetricMessageDeploymentsMetricsRole> =
    z.nativeEnum(DeploymentCreateMetricMessageDeploymentsMetricsRole);

/** @internal */
export const DeploymentCreateMetricMessageDeploymentsMetricsRole$outboundSchema:
  z.ZodNativeEnum<typeof DeploymentCreateMetricMessageDeploymentsMetricsRole> =
    DeploymentCreateMetricMessageDeploymentsMetricsRole$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeploymentCreateMetricMessageDeploymentsMetricsRole$ {
  /** @deprecated use `DeploymentCreateMetricMessageDeploymentsMetricsRole$inboundSchema` instead. */
  export const inboundSchema =
    DeploymentCreateMetricMessageDeploymentsMetricsRole$inboundSchema;
  /** @deprecated use `DeploymentCreateMetricMessageDeploymentsMetricsRole$outboundSchema` instead. */
  export const outboundSchema =
    DeploymentCreateMetricMessageDeploymentsMetricsRole$outboundSchema;
}

/** @internal */
export const Message3$inboundSchema: z.ZodType<
  Message3,
  z.ZodTypeDef,
  unknown
> = z.object({
  role: DeploymentCreateMetricMessageDeploymentsMetricsRole$inboundSchema,
  url: z.string(),
});

/** @internal */
export type Message3$Outbound = {
  role: string;
  url: string;
};

/** @internal */
export const Message3$outboundSchema: z.ZodType<
  Message3$Outbound,
  z.ZodTypeDef,
  Message3
> = z.object({
  role: DeploymentCreateMetricMessageDeploymentsMetricsRole$outboundSchema,
  url: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Message3$ {
  /** @deprecated use `Message3$inboundSchema` instead. */
  export const inboundSchema = Message3$inboundSchema;
  /** @deprecated use `Message3$outboundSchema` instead. */
  export const outboundSchema = Message3$outboundSchema;
  /** @deprecated use `Message3$Outbound` instead. */
  export type Outbound = Message3$Outbound;
}

export function message3ToJSON(message3: Message3): string {
  return JSON.stringify(Message3$outboundSchema.parse(message3));
}

export function message3FromJSON(
  jsonString: string,
): SafeParseResult<Message3, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Message3$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Message3' from JSON`,
  );
}

/** @internal */
export const DeploymentCreateMetricMessageRole$inboundSchema: z.ZodNativeEnum<
  typeof DeploymentCreateMetricMessageRole
> = z.nativeEnum(DeploymentCreateMetricMessageRole);

/** @internal */
export const DeploymentCreateMetricMessageRole$outboundSchema: z.ZodNativeEnum<
  typeof DeploymentCreateMetricMessageRole
> = DeploymentCreateMetricMessageRole$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeploymentCreateMetricMessageRole$ {
  /** @deprecated use `DeploymentCreateMetricMessageRole$inboundSchema` instead. */
  export const inboundSchema = DeploymentCreateMetricMessageRole$inboundSchema;
  /** @deprecated use `DeploymentCreateMetricMessageRole$outboundSchema` instead. */
  export const outboundSchema =
    DeploymentCreateMetricMessageRole$outboundSchema;
}

/** @internal */
export const Message2$inboundSchema: z.ZodType<
  Message2,
  z.ZodTypeDef,
  unknown
> = z.object({
  role: DeploymentCreateMetricMessageRole$inboundSchema,
  content: z.nullable(z.string()),
});

/** @internal */
export type Message2$Outbound = {
  role: string;
  content: string | null;
};

/** @internal */
export const Message2$outboundSchema: z.ZodType<
  Message2$Outbound,
  z.ZodTypeDef,
  Message2
> = z.object({
  role: DeploymentCreateMetricMessageRole$outboundSchema,
  content: z.nullable(z.string()),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Message2$ {
  /** @deprecated use `Message2$inboundSchema` instead. */
  export const inboundSchema = Message2$inboundSchema;
  /** @deprecated use `Message2$outboundSchema` instead. */
  export const outboundSchema = Message2$outboundSchema;
  /** @deprecated use `Message2$Outbound` instead. */
  export type Outbound = Message2$Outbound;
}

export function message2ToJSON(message2: Message2): string {
  return JSON.stringify(Message2$outboundSchema.parse(message2));
}

export function message2FromJSON(
  jsonString: string,
): SafeParseResult<Message2, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Message2$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Message2' from JSON`,
  );
}

/** @internal */
export const MessageRole$inboundSchema: z.ZodNativeEnum<typeof MessageRole> = z
  .nativeEnum(MessageRole);

/** @internal */
export const MessageRole$outboundSchema: z.ZodNativeEnum<typeof MessageRole> =
  MessageRole$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MessageRole$ {
  /** @deprecated use `MessageRole$inboundSchema` instead. */
  export const inboundSchema = MessageRole$inboundSchema;
  /** @deprecated use `MessageRole$outboundSchema` instead. */
  export const outboundSchema = MessageRole$outboundSchema;
}

/** @internal */
export const MessageType$inboundSchema: z.ZodNativeEnum<typeof MessageType> = z
  .nativeEnum(MessageType);

/** @internal */
export const MessageType$outboundSchema: z.ZodNativeEnum<typeof MessageType> =
  MessageType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MessageType$ {
  /** @deprecated use `MessageType$inboundSchema` instead. */
  export const inboundSchema = MessageType$inboundSchema;
  /** @deprecated use `MessageType$outboundSchema` instead. */
  export const outboundSchema = MessageType$outboundSchema;
}

/** @internal */
export const MessageFunction$inboundSchema: z.ZodType<
  MessageFunction,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.string(),
  arguments: z.string(),
});

/** @internal */
export type MessageFunction$Outbound = {
  name: string;
  arguments: string;
};

/** @internal */
export const MessageFunction$outboundSchema: z.ZodType<
  MessageFunction$Outbound,
  z.ZodTypeDef,
  MessageFunction
> = z.object({
  name: z.string(),
  arguments: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MessageFunction$ {
  /** @deprecated use `MessageFunction$inboundSchema` instead. */
  export const inboundSchema = MessageFunction$inboundSchema;
  /** @deprecated use `MessageFunction$outboundSchema` instead. */
  export const outboundSchema = MessageFunction$outboundSchema;
  /** @deprecated use `MessageFunction$Outbound` instead. */
  export type Outbound = MessageFunction$Outbound;
}

export function messageFunctionToJSON(
  messageFunction: MessageFunction,
): string {
  return JSON.stringify(MessageFunction$outboundSchema.parse(messageFunction));
}

export function messageFunctionFromJSON(
  jsonString: string,
): SafeParseResult<MessageFunction, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => MessageFunction$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MessageFunction' from JSON`,
  );
}

/** @internal */
export const MessageToolCalls$inboundSchema: z.ZodType<
  MessageToolCalls,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string().optional(),
  index: z.number().optional(),
  type: MessageType$inboundSchema,
  function: z.lazy(() => MessageFunction$inboundSchema),
});

/** @internal */
export type MessageToolCalls$Outbound = {
  id?: string | undefined;
  index?: number | undefined;
  type: string;
  function: MessageFunction$Outbound;
};

/** @internal */
export const MessageToolCalls$outboundSchema: z.ZodType<
  MessageToolCalls$Outbound,
  z.ZodTypeDef,
  MessageToolCalls
> = z.object({
  id: z.string().optional(),
  index: z.number().optional(),
  type: MessageType$outboundSchema,
  function: z.lazy(() => MessageFunction$outboundSchema),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MessageToolCalls$ {
  /** @deprecated use `MessageToolCalls$inboundSchema` instead. */
  export const inboundSchema = MessageToolCalls$inboundSchema;
  /** @deprecated use `MessageToolCalls$outboundSchema` instead. */
  export const outboundSchema = MessageToolCalls$outboundSchema;
  /** @deprecated use `MessageToolCalls$Outbound` instead. */
  export type Outbound = MessageToolCalls$Outbound;
}

export function messageToolCallsToJSON(
  messageToolCalls: MessageToolCalls,
): string {
  return JSON.stringify(
    MessageToolCalls$outboundSchema.parse(messageToolCalls),
  );
}

export function messageToolCallsFromJSON(
  jsonString: string,
): SafeParseResult<MessageToolCalls, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => MessageToolCalls$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MessageToolCalls' from JSON`,
  );
}

/** @internal */
export const Message1$inboundSchema: z.ZodType<
  Message1,
  z.ZodTypeDef,
  unknown
> = z.object({
  role: MessageRole$inboundSchema,
  content: z.nullable(z.string()).optional(),
  tool_calls: z.array(z.lazy(() => MessageToolCalls$inboundSchema)),
}).transform((v) => {
  return remap$(v, {
    "tool_calls": "toolCalls",
  });
});

/** @internal */
export type Message1$Outbound = {
  role: string;
  content?: string | null | undefined;
  tool_calls: Array<MessageToolCalls$Outbound>;
};

/** @internal */
export const Message1$outboundSchema: z.ZodType<
  Message1$Outbound,
  z.ZodTypeDef,
  Message1
> = z.object({
  role: MessageRole$outboundSchema,
  content: z.nullable(z.string()).optional(),
  toolCalls: z.array(z.lazy(() => MessageToolCalls$outboundSchema)),
}).transform((v) => {
  return remap$(v, {
    toolCalls: "tool_calls",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Message1$ {
  /** @deprecated use `Message1$inboundSchema` instead. */
  export const inboundSchema = Message1$inboundSchema;
  /** @deprecated use `Message1$outboundSchema` instead. */
  export const outboundSchema = Message1$outboundSchema;
  /** @deprecated use `Message1$Outbound` instead. */
  export type Outbound = Message1$Outbound;
}

export function message1ToJSON(message1: Message1): string {
  return JSON.stringify(Message1$outboundSchema.parse(message1));
}

export function message1FromJSON(
  jsonString: string,
): SafeParseResult<Message1, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Message1$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Message1' from JSON`,
  );
}

/** @internal */
export const Message$inboundSchema: z.ZodType<Message, z.ZodTypeDef, unknown> =
  z.union([
    z.lazy(() => Message2$inboundSchema),
    z.lazy(() => Message3$inboundSchema),
    z.lazy(() => Message1$inboundSchema),
  ]);

/** @internal */
export type Message$Outbound =
  | Message2$Outbound
  | Message3$Outbound
  | Message1$Outbound;

/** @internal */
export const Message$outboundSchema: z.ZodType<
  Message$Outbound,
  z.ZodTypeDef,
  Message
> = z.union([
  z.lazy(() => Message2$outboundSchema),
  z.lazy(() => Message3$outboundSchema),
  z.lazy(() => Message1$outboundSchema),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Message$ {
  /** @deprecated use `Message$inboundSchema` instead. */
  export const inboundSchema = Message$inboundSchema;
  /** @deprecated use `Message$outboundSchema` instead. */
  export const outboundSchema = Message$outboundSchema;
  /** @deprecated use `Message$Outbound` instead. */
  export type Outbound = Message$Outbound;
}

export function messageToJSON(message: Message): string {
  return JSON.stringify(Message$outboundSchema.parse(message));
}

export function messageFromJSON(
  jsonString: string,
): SafeParseResult<Message, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Message$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Message' from JSON`,
  );
}

/** @internal */
export const Choices$inboundSchema: z.ZodType<Choices, z.ZodTypeDef, unknown> =
  z.object({
    index: z.number(),
    message: z.union([
      z.lazy(() => Message2$inboundSchema),
      z.lazy(() => Message3$inboundSchema),
      z.lazy(() => Message1$inboundSchema),
    ]).optional(),
    finish_reason: z.nullable(z.string()).optional(),
  }).transform((v) => {
    return remap$(v, {
      "finish_reason": "finishReason",
    });
  });

/** @internal */
export type Choices$Outbound = {
  index: number;
  message?:
    | Message2$Outbound
    | Message3$Outbound
    | Message1$Outbound
    | undefined;
  finish_reason?: string | null | undefined;
};

/** @internal */
export const Choices$outboundSchema: z.ZodType<
  Choices$Outbound,
  z.ZodTypeDef,
  Choices
> = z.object({
  index: z.number(),
  message: z.union([
    z.lazy(() => Message2$outboundSchema),
    z.lazy(() => Message3$outboundSchema),
    z.lazy(() => Message1$outboundSchema),
  ]).optional(),
  finishReason: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    finishReason: "finish_reason",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Choices$ {
  /** @deprecated use `Choices$inboundSchema` instead. */
  export const inboundSchema = Choices$inboundSchema;
  /** @deprecated use `Choices$outboundSchema` instead. */
  export const outboundSchema = Choices$outboundSchema;
  /** @deprecated use `Choices$Outbound` instead. */
  export type Outbound = Choices$Outbound;
}

export function choicesToJSON(choices: Choices): string {
  return JSON.stringify(Choices$outboundSchema.parse(choices));
}

export function choicesFromJSON(
  jsonString: string,
): SafeParseResult<Choices, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Choices$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Choices' from JSON`,
  );
}

/** @internal */
export const Feedback$inboundSchema: z.ZodType<
  Feedback,
  z.ZodTypeDef,
  unknown
> = z.object({
  score: z.number().int(),
});

/** @internal */
export type Feedback$Outbound = {
  score: number;
};

/** @internal */
export const Feedback$outboundSchema: z.ZodType<
  Feedback$Outbound,
  z.ZodTypeDef,
  Feedback
> = z.object({
  score: z.number().int(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Feedback$ {
  /** @deprecated use `Feedback$inboundSchema` instead. */
  export const inboundSchema = Feedback$inboundSchema;
  /** @deprecated use `Feedback$outboundSchema` instead. */
  export const outboundSchema = Feedback$outboundSchema;
  /** @deprecated use `Feedback$Outbound` instead. */
  export type Outbound = Feedback$Outbound;
}

export function feedbackToJSON(feedback: Feedback): string {
  return JSON.stringify(Feedback$outboundSchema.parse(feedback));
}

export function feedbackFromJSON(
  jsonString: string,
): SafeParseResult<Feedback, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Feedback$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Feedback' from JSON`,
  );
}

/** @internal */
export const DeploymentCreateMetricRequestBody$inboundSchema: z.ZodType<
  DeploymentCreateMetricRequestBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  metadata: z.record(z.any()).optional(),
  usage: z.lazy(() => Usage$inboundSchema).optional(),
  performance: z.lazy(() => Performance$inboundSchema).optional(),
  messages: z.array(
    z.union([
      z.lazy(() =>
        DeploymentCreateMetricMessagesDeveloperMessage$inboundSchema
      ),
      z.lazy(() => DeploymentCreateMetricMessagesSystemMessage$inboundSchema),
      z.lazy(() => DeploymentCreateMetricMessagesUserMessage$inboundSchema),
      z.lazy(() => DeploymentCreateMetricMessagesToolMessage$inboundSchema),
      z.lazy(() =>
        DeploymentCreateMetricMessagesAssistantMessage$inboundSchema
      ),
    ]),
  ).optional(),
  choices: z.array(z.lazy(() => Choices$inboundSchema)).optional(),
  feedback: z.lazy(() => Feedback$inboundSchema).optional(),
});

/** @internal */
export type DeploymentCreateMetricRequestBody$Outbound = {
  metadata?: { [k: string]: any } | undefined;
  usage?: Usage$Outbound | undefined;
  performance?: Performance$Outbound | undefined;
  messages?:
    | Array<
      | DeploymentCreateMetricMessagesDeveloperMessage$Outbound
      | DeploymentCreateMetricMessagesSystemMessage$Outbound
      | DeploymentCreateMetricMessagesUserMessage$Outbound
      | DeploymentCreateMetricMessagesToolMessage$Outbound
      | DeploymentCreateMetricMessagesAssistantMessage$Outbound
    >
    | undefined;
  choices?: Array<Choices$Outbound> | undefined;
  feedback?: Feedback$Outbound | undefined;
};

/** @internal */
export const DeploymentCreateMetricRequestBody$outboundSchema: z.ZodType<
  DeploymentCreateMetricRequestBody$Outbound,
  z.ZodTypeDef,
  DeploymentCreateMetricRequestBody
> = z.object({
  metadata: z.record(z.any()).optional(),
  usage: z.lazy(() => Usage$outboundSchema).optional(),
  performance: z.lazy(() => Performance$outboundSchema).optional(),
  messages: z.array(
    z.union([
      z.lazy(() =>
        DeploymentCreateMetricMessagesDeveloperMessage$outboundSchema
      ),
      z.lazy(() => DeploymentCreateMetricMessagesSystemMessage$outboundSchema),
      z.lazy(() => DeploymentCreateMetricMessagesUserMessage$outboundSchema),
      z.lazy(() => DeploymentCreateMetricMessagesToolMessage$outboundSchema),
      z.lazy(() =>
        DeploymentCreateMetricMessagesAssistantMessage$outboundSchema
      ),
    ]),
  ).optional(),
  choices: z.array(z.lazy(() => Choices$outboundSchema)).optional(),
  feedback: z.lazy(() => Feedback$outboundSchema).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeploymentCreateMetricRequestBody$ {
  /** @deprecated use `DeploymentCreateMetricRequestBody$inboundSchema` instead. */
  export const inboundSchema = DeploymentCreateMetricRequestBody$inboundSchema;
  /** @deprecated use `DeploymentCreateMetricRequestBody$outboundSchema` instead. */
  export const outboundSchema =
    DeploymentCreateMetricRequestBody$outboundSchema;
  /** @deprecated use `DeploymentCreateMetricRequestBody$Outbound` instead. */
  export type Outbound = DeploymentCreateMetricRequestBody$Outbound;
}

export function deploymentCreateMetricRequestBodyToJSON(
  deploymentCreateMetricRequestBody: DeploymentCreateMetricRequestBody,
): string {
  return JSON.stringify(
    DeploymentCreateMetricRequestBody$outboundSchema.parse(
      deploymentCreateMetricRequestBody,
    ),
  );
}

export function deploymentCreateMetricRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<DeploymentCreateMetricRequestBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DeploymentCreateMetricRequestBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DeploymentCreateMetricRequestBody' from JSON`,
  );
}

/** @internal */
export const DeploymentCreateMetricRequest$inboundSchema: z.ZodType<
  DeploymentCreateMetricRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  RequestBody: z.lazy(() => DeploymentCreateMetricRequestBody$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "RequestBody": "requestBody",
  });
});

/** @internal */
export type DeploymentCreateMetricRequest$Outbound = {
  id: string;
  RequestBody: DeploymentCreateMetricRequestBody$Outbound;
};

/** @internal */
export const DeploymentCreateMetricRequest$outboundSchema: z.ZodType<
  DeploymentCreateMetricRequest$Outbound,
  z.ZodTypeDef,
  DeploymentCreateMetricRequest
> = z.object({
  id: z.string(),
  requestBody: z.lazy(() => DeploymentCreateMetricRequestBody$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    requestBody: "RequestBody",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeploymentCreateMetricRequest$ {
  /** @deprecated use `DeploymentCreateMetricRequest$inboundSchema` instead. */
  export const inboundSchema = DeploymentCreateMetricRequest$inboundSchema;
  /** @deprecated use `DeploymentCreateMetricRequest$outboundSchema` instead. */
  export const outboundSchema = DeploymentCreateMetricRequest$outboundSchema;
  /** @deprecated use `DeploymentCreateMetricRequest$Outbound` instead. */
  export type Outbound = DeploymentCreateMetricRequest$Outbound;
}

export function deploymentCreateMetricRequestToJSON(
  deploymentCreateMetricRequest: DeploymentCreateMetricRequest,
): string {
  return JSON.stringify(
    DeploymentCreateMetricRequest$outboundSchema.parse(
      deploymentCreateMetricRequest,
    ),
  );
}

export function deploymentCreateMetricRequestFromJSON(
  jsonString: string,
): SafeParseResult<DeploymentCreateMetricRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DeploymentCreateMetricRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DeploymentCreateMetricRequest' from JSON`,
  );
}

/** @internal */
export const DeploymentCreateMetricResponseBody$inboundSchema: z.ZodType<
  DeploymentCreateMetricResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  success: z.boolean(),
});

/** @internal */
export type DeploymentCreateMetricResponseBody$Outbound = {
  success: boolean;
};

/** @internal */
export const DeploymentCreateMetricResponseBody$outboundSchema: z.ZodType<
  DeploymentCreateMetricResponseBody$Outbound,
  z.ZodTypeDef,
  DeploymentCreateMetricResponseBody
> = z.object({
  success: z.boolean(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeploymentCreateMetricResponseBody$ {
  /** @deprecated use `DeploymentCreateMetricResponseBody$inboundSchema` instead. */
  export const inboundSchema = DeploymentCreateMetricResponseBody$inboundSchema;
  /** @deprecated use `DeploymentCreateMetricResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    DeploymentCreateMetricResponseBody$outboundSchema;
  /** @deprecated use `DeploymentCreateMetricResponseBody$Outbound` instead. */
  export type Outbound = DeploymentCreateMetricResponseBody$Outbound;
}

export function deploymentCreateMetricResponseBodyToJSON(
  deploymentCreateMetricResponseBody: DeploymentCreateMetricResponseBody,
): string {
  return JSON.stringify(
    DeploymentCreateMetricResponseBody$outboundSchema.parse(
      deploymentCreateMetricResponseBody,
    ),
  );
}

export function deploymentCreateMetricResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<DeploymentCreateMetricResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      DeploymentCreateMetricResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DeploymentCreateMetricResponseBody' from JSON`,
  );
}
