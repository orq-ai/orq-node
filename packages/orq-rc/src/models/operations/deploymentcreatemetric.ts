/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * Usage statistics to add to the deployment
 */
export type Usage = {
  /**
   * Number of tokens in the prompt.
   */
  promptTokens: number;
  /**
   * Number of tokens in the generated completion.
   */
  completionTokens: number;
  /**
   * Total number of tokens used in the request (prompt + completion).
   */
  totalTokens?: number | undefined;
};

export type Performance = {
  /**
   * Total time in milliseconds of the request to the LLM provider API.
   */
  latency: number;
  /**
   * Total time in milliseconds to generate the first token of the completion.
   */
  timeToFirstToken?: number | undefined;
};

/**
 * The role of the prompt message
 */
export const DeploymentCreateMetricRole = {
  System: "system",
  Assistant: "assistant",
  User: "user",
  Exception: "exception",
  Tool: "tool",
  Prompt: "prompt",
  Correction: "correction",
  ExpectedOutput: "expected_output",
} as const;
/**
 * The role of the prompt message
 */
export type DeploymentCreateMetricRole = ClosedEnum<
  typeof DeploymentCreateMetricRole
>;

export const DeploymentCreateMetric2DeploymentsMetricsType = {
  ImageUrl: "image_url",
} as const;
export type DeploymentCreateMetric2DeploymentsMetricsType = ClosedEnum<
  typeof DeploymentCreateMetric2DeploymentsMetricsType
>;

export type DeploymentCreateMetric2ImageUrl = {
  /**
   * Either a URL of the image or the base64 encoded data URI.
   */
  url: string;
  /**
   * Specifies the detail level of the image. Currently only supported with OpenAI models
   */
  detail?: string | undefined;
};

/**
 * The image part of the prompt message. Only supported with vision models.
 */
export type DeploymentCreateMetric22 = {
  type: DeploymentCreateMetric2DeploymentsMetricsType;
  imageUrl: DeploymentCreateMetric2ImageUrl;
};

export const DeploymentCreateMetric2Type = {
  Text: "text",
} as const;
export type DeploymentCreateMetric2Type = ClosedEnum<
  typeof DeploymentCreateMetric2Type
>;

/**
 * Text content part of a prompt message
 */
export type DeploymentCreateMetric21 = {
  type: DeploymentCreateMetric2Type;
  text: string;
};

export type DeploymentCreateMetricContent2 =
  | DeploymentCreateMetric21
  | DeploymentCreateMetric22;

/**
 * The contents of the user message. Either the text content of the message or an array of content parts with a defined type, each can be of type `text` or `image_url` when passing in images. You can pass multiple images by adding multiple `image_url` content parts.
 */
export type DeploymentCreateMetricContent =
  | string
  | Array<DeploymentCreateMetric21 | DeploymentCreateMetric22>;

export const DeploymentCreateMetricType = {
  Function: "function",
} as const;
export type DeploymentCreateMetricType = ClosedEnum<
  typeof DeploymentCreateMetricType
>;

export type DeploymentCreateMetricFunction = {
  name: string;
  /**
   * JSON string arguments for the functions
   */
  arguments: string;
};

export type DeploymentCreateMetricToolCalls = {
  id?: string | undefined;
  index?: number | undefined;
  type: DeploymentCreateMetricType;
  function: DeploymentCreateMetricFunction;
};

export type DeploymentCreateMetricMessages = {
  /**
   * The role of the prompt message
   */
  role: DeploymentCreateMetricRole;
  /**
   * The contents of the user message. Either the text content of the message or an array of content parts with a defined type, each can be of type `text` or `image_url` when passing in images. You can pass multiple images by adding multiple `image_url` content parts.
   */
  content: string | Array<DeploymentCreateMetric21 | DeploymentCreateMetric22>;
  toolCalls?: Array<DeploymentCreateMetricToolCalls> | undefined;
};

/**
 * The role of the prompt message
 */
export const DeploymentCreateMetricMessageDeploymentsMetricsRole = {
  System: "system",
  Assistant: "assistant",
  User: "user",
  Exception: "exception",
  Tool: "tool",
  Prompt: "prompt",
  Correction: "correction",
  ExpectedOutput: "expected_output",
} as const;
/**
 * The role of the prompt message
 */
export type DeploymentCreateMetricMessageDeploymentsMetricsRole = ClosedEnum<
  typeof DeploymentCreateMetricMessageDeploymentsMetricsRole
>;

export type Three = {
  /**
   * The role of the prompt message
   */
  role: DeploymentCreateMetricMessageDeploymentsMetricsRole;
  url: string;
};

/**
 * The role of the prompt message
 */
export const DeploymentCreateMetricMessageRole = {
  System: "system",
  Assistant: "assistant",
  User: "user",
  Exception: "exception",
  Tool: "tool",
  Prompt: "prompt",
  Correction: "correction",
  ExpectedOutput: "expected_output",
} as const;
/**
 * The role of the prompt message
 */
export type DeploymentCreateMetricMessageRole = ClosedEnum<
  typeof DeploymentCreateMetricMessageRole
>;

export type Message2 = {
  /**
   * The role of the prompt message
   */
  role: DeploymentCreateMetricMessageRole;
  content: string | null;
};

/**
 * The role of the prompt message
 */
export const MessageRole = {
  System: "system",
  Assistant: "assistant",
  User: "user",
  Exception: "exception",
  Tool: "tool",
  Prompt: "prompt",
  Correction: "correction",
  ExpectedOutput: "expected_output",
} as const;
/**
 * The role of the prompt message
 */
export type MessageRole = ClosedEnum<typeof MessageRole>;

export const MessageType = {
  Function: "function",
} as const;
export type MessageType = ClosedEnum<typeof MessageType>;

export type MessageFunction = {
  name: string;
  /**
   * JSON string arguments for the functions
   */
  arguments: string;
};

export type MessageToolCalls = {
  id?: string | undefined;
  index?: number | undefined;
  type: MessageType;
  function: MessageFunction;
};

export type Message1 = {
  /**
   * The role of the prompt message
   */
  role: MessageRole;
  content?: string | null | undefined;
  toolCalls: Array<MessageToolCalls>;
};

export type Message = Message2 | Three | Message1;

export type Choices = {
  index: number;
  message?: Message2 | Three | Message1 | undefined;
  finishReason?: string | null | undefined;
};

/**
 * Feedback from the user on the completion
 */
export type Feedback = {
  /**
   * The feedback score. This allow you to come with specific logic on what a `score` number means
   */
  score: number;
};

/**
 * The deployment request payload
 */
export type DeploymentCreateMetricRequestBody = {
  /**
   * Your own custom key-value pairs can be attached to the logs. This is useful for storing additional information related to your interactions with the LLM providers or specifics within your application.
   */
  metadata?: { [k: string]: any } | undefined;
  /**
   * Usage statistics to add to the deployment
   */
  usage?: Usage | undefined;
  performance?: Performance | undefined;
  /**
   * A list of messages sent to the model.
   */
  messages?: Array<DeploymentCreateMetricMessages> | undefined;
  /**
   * A list of completion choices. If you are using a `completion` model then you must provide the `completion content` with the chat completion format
   */
  choices?: Array<Choices> | undefined;
  /**
   * Feedback from the user on the completion
   */
  feedback?: Feedback | undefined;
};

export type DeploymentCreateMetricRequest = {
  /**
   * Deployment ID
   */
  id: string;
  /**
   * The deployment request payload
   */
  requestBody: DeploymentCreateMetricRequestBody;
};

/**
 * Successful operation
 */
export type DeploymentCreateMetricResponseBody = {
  /**
   * The status code of the request
   */
  code: number;
  /**
   * Whether the request was successful
   */
  success: boolean;
};

/** @internal */
export const Usage$inboundSchema: z.ZodType<Usage, z.ZodTypeDef, unknown> = z
  .object({
    prompt_tokens: z.number(),
    completion_tokens: z.number(),
    total_tokens: z.number().optional(),
  }).transform((v) => {
    return remap$(v, {
      "prompt_tokens": "promptTokens",
      "completion_tokens": "completionTokens",
      "total_tokens": "totalTokens",
    });
  });

/** @internal */
export type Usage$Outbound = {
  prompt_tokens: number;
  completion_tokens: number;
  total_tokens?: number | undefined;
};

/** @internal */
export const Usage$outboundSchema: z.ZodType<
  Usage$Outbound,
  z.ZodTypeDef,
  Usage
> = z.object({
  promptTokens: z.number(),
  completionTokens: z.number(),
  totalTokens: z.number().optional(),
}).transform((v) => {
  return remap$(v, {
    promptTokens: "prompt_tokens",
    completionTokens: "completion_tokens",
    totalTokens: "total_tokens",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Usage$ {
  /** @deprecated use `Usage$inboundSchema` instead. */
  export const inboundSchema = Usage$inboundSchema;
  /** @deprecated use `Usage$outboundSchema` instead. */
  export const outboundSchema = Usage$outboundSchema;
  /** @deprecated use `Usage$Outbound` instead. */
  export type Outbound = Usage$Outbound;
}

export function usageToJSON(usage: Usage): string {
  return JSON.stringify(Usage$outboundSchema.parse(usage));
}

export function usageFromJSON(
  jsonString: string,
): SafeParseResult<Usage, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Usage$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Usage' from JSON`,
  );
}

/** @internal */
export const Performance$inboundSchema: z.ZodType<
  Performance,
  z.ZodTypeDef,
  unknown
> = z.object({
  latency: z.number(),
  time_to_first_token: z.number().optional(),
}).transform((v) => {
  return remap$(v, {
    "time_to_first_token": "timeToFirstToken",
  });
});

/** @internal */
export type Performance$Outbound = {
  latency: number;
  time_to_first_token?: number | undefined;
};

/** @internal */
export const Performance$outboundSchema: z.ZodType<
  Performance$Outbound,
  z.ZodTypeDef,
  Performance
> = z.object({
  latency: z.number(),
  timeToFirstToken: z.number().optional(),
}).transform((v) => {
  return remap$(v, {
    timeToFirstToken: "time_to_first_token",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Performance$ {
  /** @deprecated use `Performance$inboundSchema` instead. */
  export const inboundSchema = Performance$inboundSchema;
  /** @deprecated use `Performance$outboundSchema` instead. */
  export const outboundSchema = Performance$outboundSchema;
  /** @deprecated use `Performance$Outbound` instead. */
  export type Outbound = Performance$Outbound;
}

export function performanceToJSON(performance: Performance): string {
  return JSON.stringify(Performance$outboundSchema.parse(performance));
}

export function performanceFromJSON(
  jsonString: string,
): SafeParseResult<Performance, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Performance$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Performance' from JSON`,
  );
}

/** @internal */
export const DeploymentCreateMetricRole$inboundSchema: z.ZodNativeEnum<
  typeof DeploymentCreateMetricRole
> = z.nativeEnum(DeploymentCreateMetricRole);

/** @internal */
export const DeploymentCreateMetricRole$outboundSchema: z.ZodNativeEnum<
  typeof DeploymentCreateMetricRole
> = DeploymentCreateMetricRole$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeploymentCreateMetricRole$ {
  /** @deprecated use `DeploymentCreateMetricRole$inboundSchema` instead. */
  export const inboundSchema = DeploymentCreateMetricRole$inboundSchema;
  /** @deprecated use `DeploymentCreateMetricRole$outboundSchema` instead. */
  export const outboundSchema = DeploymentCreateMetricRole$outboundSchema;
}

/** @internal */
export const DeploymentCreateMetric2DeploymentsMetricsType$inboundSchema:
  z.ZodNativeEnum<typeof DeploymentCreateMetric2DeploymentsMetricsType> = z
    .nativeEnum(DeploymentCreateMetric2DeploymentsMetricsType);

/** @internal */
export const DeploymentCreateMetric2DeploymentsMetricsType$outboundSchema:
  z.ZodNativeEnum<typeof DeploymentCreateMetric2DeploymentsMetricsType> =
    DeploymentCreateMetric2DeploymentsMetricsType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeploymentCreateMetric2DeploymentsMetricsType$ {
  /** @deprecated use `DeploymentCreateMetric2DeploymentsMetricsType$inboundSchema` instead. */
  export const inboundSchema =
    DeploymentCreateMetric2DeploymentsMetricsType$inboundSchema;
  /** @deprecated use `DeploymentCreateMetric2DeploymentsMetricsType$outboundSchema` instead. */
  export const outboundSchema =
    DeploymentCreateMetric2DeploymentsMetricsType$outboundSchema;
}

/** @internal */
export const DeploymentCreateMetric2ImageUrl$inboundSchema: z.ZodType<
  DeploymentCreateMetric2ImageUrl,
  z.ZodTypeDef,
  unknown
> = z.object({
  url: z.string(),
  detail: z.string().optional(),
});

/** @internal */
export type DeploymentCreateMetric2ImageUrl$Outbound = {
  url: string;
  detail?: string | undefined;
};

/** @internal */
export const DeploymentCreateMetric2ImageUrl$outboundSchema: z.ZodType<
  DeploymentCreateMetric2ImageUrl$Outbound,
  z.ZodTypeDef,
  DeploymentCreateMetric2ImageUrl
> = z.object({
  url: z.string(),
  detail: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeploymentCreateMetric2ImageUrl$ {
  /** @deprecated use `DeploymentCreateMetric2ImageUrl$inboundSchema` instead. */
  export const inboundSchema = DeploymentCreateMetric2ImageUrl$inboundSchema;
  /** @deprecated use `DeploymentCreateMetric2ImageUrl$outboundSchema` instead. */
  export const outboundSchema = DeploymentCreateMetric2ImageUrl$outboundSchema;
  /** @deprecated use `DeploymentCreateMetric2ImageUrl$Outbound` instead. */
  export type Outbound = DeploymentCreateMetric2ImageUrl$Outbound;
}

export function deploymentCreateMetric2ImageUrlToJSON(
  deploymentCreateMetric2ImageUrl: DeploymentCreateMetric2ImageUrl,
): string {
  return JSON.stringify(
    DeploymentCreateMetric2ImageUrl$outboundSchema.parse(
      deploymentCreateMetric2ImageUrl,
    ),
  );
}

export function deploymentCreateMetric2ImageUrlFromJSON(
  jsonString: string,
): SafeParseResult<DeploymentCreateMetric2ImageUrl, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DeploymentCreateMetric2ImageUrl$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DeploymentCreateMetric2ImageUrl' from JSON`,
  );
}

/** @internal */
export const DeploymentCreateMetric22$inboundSchema: z.ZodType<
  DeploymentCreateMetric22,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: DeploymentCreateMetric2DeploymentsMetricsType$inboundSchema,
  image_url: z.lazy(() => DeploymentCreateMetric2ImageUrl$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "image_url": "imageUrl",
  });
});

/** @internal */
export type DeploymentCreateMetric22$Outbound = {
  type: string;
  image_url: DeploymentCreateMetric2ImageUrl$Outbound;
};

/** @internal */
export const DeploymentCreateMetric22$outboundSchema: z.ZodType<
  DeploymentCreateMetric22$Outbound,
  z.ZodTypeDef,
  DeploymentCreateMetric22
> = z.object({
  type: DeploymentCreateMetric2DeploymentsMetricsType$outboundSchema,
  imageUrl: z.lazy(() => DeploymentCreateMetric2ImageUrl$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    imageUrl: "image_url",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeploymentCreateMetric22$ {
  /** @deprecated use `DeploymentCreateMetric22$inboundSchema` instead. */
  export const inboundSchema = DeploymentCreateMetric22$inboundSchema;
  /** @deprecated use `DeploymentCreateMetric22$outboundSchema` instead. */
  export const outboundSchema = DeploymentCreateMetric22$outboundSchema;
  /** @deprecated use `DeploymentCreateMetric22$Outbound` instead. */
  export type Outbound = DeploymentCreateMetric22$Outbound;
}

export function deploymentCreateMetric22ToJSON(
  deploymentCreateMetric22: DeploymentCreateMetric22,
): string {
  return JSON.stringify(
    DeploymentCreateMetric22$outboundSchema.parse(deploymentCreateMetric22),
  );
}

export function deploymentCreateMetric22FromJSON(
  jsonString: string,
): SafeParseResult<DeploymentCreateMetric22, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DeploymentCreateMetric22$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DeploymentCreateMetric22' from JSON`,
  );
}

/** @internal */
export const DeploymentCreateMetric2Type$inboundSchema: z.ZodNativeEnum<
  typeof DeploymentCreateMetric2Type
> = z.nativeEnum(DeploymentCreateMetric2Type);

/** @internal */
export const DeploymentCreateMetric2Type$outboundSchema: z.ZodNativeEnum<
  typeof DeploymentCreateMetric2Type
> = DeploymentCreateMetric2Type$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeploymentCreateMetric2Type$ {
  /** @deprecated use `DeploymentCreateMetric2Type$inboundSchema` instead. */
  export const inboundSchema = DeploymentCreateMetric2Type$inboundSchema;
  /** @deprecated use `DeploymentCreateMetric2Type$outboundSchema` instead. */
  export const outboundSchema = DeploymentCreateMetric2Type$outboundSchema;
}

/** @internal */
export const DeploymentCreateMetric21$inboundSchema: z.ZodType<
  DeploymentCreateMetric21,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: DeploymentCreateMetric2Type$inboundSchema,
  text: z.string(),
});

/** @internal */
export type DeploymentCreateMetric21$Outbound = {
  type: string;
  text: string;
};

/** @internal */
export const DeploymentCreateMetric21$outboundSchema: z.ZodType<
  DeploymentCreateMetric21$Outbound,
  z.ZodTypeDef,
  DeploymentCreateMetric21
> = z.object({
  type: DeploymentCreateMetric2Type$outboundSchema,
  text: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeploymentCreateMetric21$ {
  /** @deprecated use `DeploymentCreateMetric21$inboundSchema` instead. */
  export const inboundSchema = DeploymentCreateMetric21$inboundSchema;
  /** @deprecated use `DeploymentCreateMetric21$outboundSchema` instead. */
  export const outboundSchema = DeploymentCreateMetric21$outboundSchema;
  /** @deprecated use `DeploymentCreateMetric21$Outbound` instead. */
  export type Outbound = DeploymentCreateMetric21$Outbound;
}

export function deploymentCreateMetric21ToJSON(
  deploymentCreateMetric21: DeploymentCreateMetric21,
): string {
  return JSON.stringify(
    DeploymentCreateMetric21$outboundSchema.parse(deploymentCreateMetric21),
  );
}

export function deploymentCreateMetric21FromJSON(
  jsonString: string,
): SafeParseResult<DeploymentCreateMetric21, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DeploymentCreateMetric21$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DeploymentCreateMetric21' from JSON`,
  );
}

/** @internal */
export const DeploymentCreateMetricContent2$inboundSchema: z.ZodType<
  DeploymentCreateMetricContent2,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => DeploymentCreateMetric21$inboundSchema),
  z.lazy(() => DeploymentCreateMetric22$inboundSchema),
]);

/** @internal */
export type DeploymentCreateMetricContent2$Outbound =
  | DeploymentCreateMetric21$Outbound
  | DeploymentCreateMetric22$Outbound;

/** @internal */
export const DeploymentCreateMetricContent2$outboundSchema: z.ZodType<
  DeploymentCreateMetricContent2$Outbound,
  z.ZodTypeDef,
  DeploymentCreateMetricContent2
> = z.union([
  z.lazy(() => DeploymentCreateMetric21$outboundSchema),
  z.lazy(() => DeploymentCreateMetric22$outboundSchema),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeploymentCreateMetricContent2$ {
  /** @deprecated use `DeploymentCreateMetricContent2$inboundSchema` instead. */
  export const inboundSchema = DeploymentCreateMetricContent2$inboundSchema;
  /** @deprecated use `DeploymentCreateMetricContent2$outboundSchema` instead. */
  export const outboundSchema = DeploymentCreateMetricContent2$outboundSchema;
  /** @deprecated use `DeploymentCreateMetricContent2$Outbound` instead. */
  export type Outbound = DeploymentCreateMetricContent2$Outbound;
}

export function deploymentCreateMetricContent2ToJSON(
  deploymentCreateMetricContent2: DeploymentCreateMetricContent2,
): string {
  return JSON.stringify(
    DeploymentCreateMetricContent2$outboundSchema.parse(
      deploymentCreateMetricContent2,
    ),
  );
}

export function deploymentCreateMetricContent2FromJSON(
  jsonString: string,
): SafeParseResult<DeploymentCreateMetricContent2, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DeploymentCreateMetricContent2$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DeploymentCreateMetricContent2' from JSON`,
  );
}

/** @internal */
export const DeploymentCreateMetricContent$inboundSchema: z.ZodType<
  DeploymentCreateMetricContent,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.string(),
  z.array(z.union([
    z.lazy(() => DeploymentCreateMetric21$inboundSchema),
    z.lazy(() => DeploymentCreateMetric22$inboundSchema),
  ])),
]);

/** @internal */
export type DeploymentCreateMetricContent$Outbound =
  | string
  | Array<
    DeploymentCreateMetric21$Outbound | DeploymentCreateMetric22$Outbound
  >;

/** @internal */
export const DeploymentCreateMetricContent$outboundSchema: z.ZodType<
  DeploymentCreateMetricContent$Outbound,
  z.ZodTypeDef,
  DeploymentCreateMetricContent
> = z.union([
  z.string(),
  z.array(z.union([
    z.lazy(() => DeploymentCreateMetric21$outboundSchema),
    z.lazy(() => DeploymentCreateMetric22$outboundSchema),
  ])),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeploymentCreateMetricContent$ {
  /** @deprecated use `DeploymentCreateMetricContent$inboundSchema` instead. */
  export const inboundSchema = DeploymentCreateMetricContent$inboundSchema;
  /** @deprecated use `DeploymentCreateMetricContent$outboundSchema` instead. */
  export const outboundSchema = DeploymentCreateMetricContent$outboundSchema;
  /** @deprecated use `DeploymentCreateMetricContent$Outbound` instead. */
  export type Outbound = DeploymentCreateMetricContent$Outbound;
}

export function deploymentCreateMetricContentToJSON(
  deploymentCreateMetricContent: DeploymentCreateMetricContent,
): string {
  return JSON.stringify(
    DeploymentCreateMetricContent$outboundSchema.parse(
      deploymentCreateMetricContent,
    ),
  );
}

export function deploymentCreateMetricContentFromJSON(
  jsonString: string,
): SafeParseResult<DeploymentCreateMetricContent, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DeploymentCreateMetricContent$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DeploymentCreateMetricContent' from JSON`,
  );
}

/** @internal */
export const DeploymentCreateMetricType$inboundSchema: z.ZodNativeEnum<
  typeof DeploymentCreateMetricType
> = z.nativeEnum(DeploymentCreateMetricType);

/** @internal */
export const DeploymentCreateMetricType$outboundSchema: z.ZodNativeEnum<
  typeof DeploymentCreateMetricType
> = DeploymentCreateMetricType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeploymentCreateMetricType$ {
  /** @deprecated use `DeploymentCreateMetricType$inboundSchema` instead. */
  export const inboundSchema = DeploymentCreateMetricType$inboundSchema;
  /** @deprecated use `DeploymentCreateMetricType$outboundSchema` instead. */
  export const outboundSchema = DeploymentCreateMetricType$outboundSchema;
}

/** @internal */
export const DeploymentCreateMetricFunction$inboundSchema: z.ZodType<
  DeploymentCreateMetricFunction,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.string(),
  arguments: z.string(),
});

/** @internal */
export type DeploymentCreateMetricFunction$Outbound = {
  name: string;
  arguments: string;
};

/** @internal */
export const DeploymentCreateMetricFunction$outboundSchema: z.ZodType<
  DeploymentCreateMetricFunction$Outbound,
  z.ZodTypeDef,
  DeploymentCreateMetricFunction
> = z.object({
  name: z.string(),
  arguments: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeploymentCreateMetricFunction$ {
  /** @deprecated use `DeploymentCreateMetricFunction$inboundSchema` instead. */
  export const inboundSchema = DeploymentCreateMetricFunction$inboundSchema;
  /** @deprecated use `DeploymentCreateMetricFunction$outboundSchema` instead. */
  export const outboundSchema = DeploymentCreateMetricFunction$outboundSchema;
  /** @deprecated use `DeploymentCreateMetricFunction$Outbound` instead. */
  export type Outbound = DeploymentCreateMetricFunction$Outbound;
}

export function deploymentCreateMetricFunctionToJSON(
  deploymentCreateMetricFunction: DeploymentCreateMetricFunction,
): string {
  return JSON.stringify(
    DeploymentCreateMetricFunction$outboundSchema.parse(
      deploymentCreateMetricFunction,
    ),
  );
}

export function deploymentCreateMetricFunctionFromJSON(
  jsonString: string,
): SafeParseResult<DeploymentCreateMetricFunction, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DeploymentCreateMetricFunction$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DeploymentCreateMetricFunction' from JSON`,
  );
}

/** @internal */
export const DeploymentCreateMetricToolCalls$inboundSchema: z.ZodType<
  DeploymentCreateMetricToolCalls,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string().optional(),
  index: z.number().optional(),
  type: DeploymentCreateMetricType$inboundSchema,
  function: z.lazy(() => DeploymentCreateMetricFunction$inboundSchema),
});

/** @internal */
export type DeploymentCreateMetricToolCalls$Outbound = {
  id?: string | undefined;
  index?: number | undefined;
  type: string;
  function: DeploymentCreateMetricFunction$Outbound;
};

/** @internal */
export const DeploymentCreateMetricToolCalls$outboundSchema: z.ZodType<
  DeploymentCreateMetricToolCalls$Outbound,
  z.ZodTypeDef,
  DeploymentCreateMetricToolCalls
> = z.object({
  id: z.string().optional(),
  index: z.number().optional(),
  type: DeploymentCreateMetricType$outboundSchema,
  function: z.lazy(() => DeploymentCreateMetricFunction$outboundSchema),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeploymentCreateMetricToolCalls$ {
  /** @deprecated use `DeploymentCreateMetricToolCalls$inboundSchema` instead. */
  export const inboundSchema = DeploymentCreateMetricToolCalls$inboundSchema;
  /** @deprecated use `DeploymentCreateMetricToolCalls$outboundSchema` instead. */
  export const outboundSchema = DeploymentCreateMetricToolCalls$outboundSchema;
  /** @deprecated use `DeploymentCreateMetricToolCalls$Outbound` instead. */
  export type Outbound = DeploymentCreateMetricToolCalls$Outbound;
}

export function deploymentCreateMetricToolCallsToJSON(
  deploymentCreateMetricToolCalls: DeploymentCreateMetricToolCalls,
): string {
  return JSON.stringify(
    DeploymentCreateMetricToolCalls$outboundSchema.parse(
      deploymentCreateMetricToolCalls,
    ),
  );
}

export function deploymentCreateMetricToolCallsFromJSON(
  jsonString: string,
): SafeParseResult<DeploymentCreateMetricToolCalls, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DeploymentCreateMetricToolCalls$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DeploymentCreateMetricToolCalls' from JSON`,
  );
}

/** @internal */
export const DeploymentCreateMetricMessages$inboundSchema: z.ZodType<
  DeploymentCreateMetricMessages,
  z.ZodTypeDef,
  unknown
> = z.object({
  role: DeploymentCreateMetricRole$inboundSchema,
  content: z.union([
    z.string(),
    z.array(z.union([
      z.lazy(() => DeploymentCreateMetric21$inboundSchema),
      z.lazy(() => DeploymentCreateMetric22$inboundSchema),
    ])),
  ]),
  tool_calls: z.array(
    z.lazy(() => DeploymentCreateMetricToolCalls$inboundSchema),
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    "tool_calls": "toolCalls",
  });
});

/** @internal */
export type DeploymentCreateMetricMessages$Outbound = {
  role: string;
  content:
    | string
    | Array<
      DeploymentCreateMetric21$Outbound | DeploymentCreateMetric22$Outbound
    >;
  tool_calls?: Array<DeploymentCreateMetricToolCalls$Outbound> | undefined;
};

/** @internal */
export const DeploymentCreateMetricMessages$outboundSchema: z.ZodType<
  DeploymentCreateMetricMessages$Outbound,
  z.ZodTypeDef,
  DeploymentCreateMetricMessages
> = z.object({
  role: DeploymentCreateMetricRole$outboundSchema,
  content: z.union([
    z.string(),
    z.array(z.union([
      z.lazy(() => DeploymentCreateMetric21$outboundSchema),
      z.lazy(() => DeploymentCreateMetric22$outboundSchema),
    ])),
  ]),
  toolCalls: z.array(
    z.lazy(() => DeploymentCreateMetricToolCalls$outboundSchema),
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    toolCalls: "tool_calls",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeploymentCreateMetricMessages$ {
  /** @deprecated use `DeploymentCreateMetricMessages$inboundSchema` instead. */
  export const inboundSchema = DeploymentCreateMetricMessages$inboundSchema;
  /** @deprecated use `DeploymentCreateMetricMessages$outboundSchema` instead. */
  export const outboundSchema = DeploymentCreateMetricMessages$outboundSchema;
  /** @deprecated use `DeploymentCreateMetricMessages$Outbound` instead. */
  export type Outbound = DeploymentCreateMetricMessages$Outbound;
}

export function deploymentCreateMetricMessagesToJSON(
  deploymentCreateMetricMessages: DeploymentCreateMetricMessages,
): string {
  return JSON.stringify(
    DeploymentCreateMetricMessages$outboundSchema.parse(
      deploymentCreateMetricMessages,
    ),
  );
}

export function deploymentCreateMetricMessagesFromJSON(
  jsonString: string,
): SafeParseResult<DeploymentCreateMetricMessages, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DeploymentCreateMetricMessages$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DeploymentCreateMetricMessages' from JSON`,
  );
}

/** @internal */
export const DeploymentCreateMetricMessageDeploymentsMetricsRole$inboundSchema:
  z.ZodNativeEnum<typeof DeploymentCreateMetricMessageDeploymentsMetricsRole> =
    z.nativeEnum(DeploymentCreateMetricMessageDeploymentsMetricsRole);

/** @internal */
export const DeploymentCreateMetricMessageDeploymentsMetricsRole$outboundSchema:
  z.ZodNativeEnum<typeof DeploymentCreateMetricMessageDeploymentsMetricsRole> =
    DeploymentCreateMetricMessageDeploymentsMetricsRole$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeploymentCreateMetricMessageDeploymentsMetricsRole$ {
  /** @deprecated use `DeploymentCreateMetricMessageDeploymentsMetricsRole$inboundSchema` instead. */
  export const inboundSchema =
    DeploymentCreateMetricMessageDeploymentsMetricsRole$inboundSchema;
  /** @deprecated use `DeploymentCreateMetricMessageDeploymentsMetricsRole$outboundSchema` instead. */
  export const outboundSchema =
    DeploymentCreateMetricMessageDeploymentsMetricsRole$outboundSchema;
}

/** @internal */
export const Three$inboundSchema: z.ZodType<Three, z.ZodTypeDef, unknown> = z
  .object({
    role: DeploymentCreateMetricMessageDeploymentsMetricsRole$inboundSchema,
    url: z.string(),
  });

/** @internal */
export type Three$Outbound = {
  role: string;
  url: string;
};

/** @internal */
export const Three$outboundSchema: z.ZodType<
  Three$Outbound,
  z.ZodTypeDef,
  Three
> = z.object({
  role: DeploymentCreateMetricMessageDeploymentsMetricsRole$outboundSchema,
  url: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Three$ {
  /** @deprecated use `Three$inboundSchema` instead. */
  export const inboundSchema = Three$inboundSchema;
  /** @deprecated use `Three$outboundSchema` instead. */
  export const outboundSchema = Three$outboundSchema;
  /** @deprecated use `Three$Outbound` instead. */
  export type Outbound = Three$Outbound;
}

export function threeToJSON(three: Three): string {
  return JSON.stringify(Three$outboundSchema.parse(three));
}

export function threeFromJSON(
  jsonString: string,
): SafeParseResult<Three, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Three$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Three' from JSON`,
  );
}

/** @internal */
export const DeploymentCreateMetricMessageRole$inboundSchema: z.ZodNativeEnum<
  typeof DeploymentCreateMetricMessageRole
> = z.nativeEnum(DeploymentCreateMetricMessageRole);

/** @internal */
export const DeploymentCreateMetricMessageRole$outboundSchema: z.ZodNativeEnum<
  typeof DeploymentCreateMetricMessageRole
> = DeploymentCreateMetricMessageRole$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeploymentCreateMetricMessageRole$ {
  /** @deprecated use `DeploymentCreateMetricMessageRole$inboundSchema` instead. */
  export const inboundSchema = DeploymentCreateMetricMessageRole$inboundSchema;
  /** @deprecated use `DeploymentCreateMetricMessageRole$outboundSchema` instead. */
  export const outboundSchema =
    DeploymentCreateMetricMessageRole$outboundSchema;
}

/** @internal */
export const Message2$inboundSchema: z.ZodType<
  Message2,
  z.ZodTypeDef,
  unknown
> = z.object({
  role: DeploymentCreateMetricMessageRole$inboundSchema,
  content: z.nullable(z.string()),
});

/** @internal */
export type Message2$Outbound = {
  role: string;
  content: string | null;
};

/** @internal */
export const Message2$outboundSchema: z.ZodType<
  Message2$Outbound,
  z.ZodTypeDef,
  Message2
> = z.object({
  role: DeploymentCreateMetricMessageRole$outboundSchema,
  content: z.nullable(z.string()),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Message2$ {
  /** @deprecated use `Message2$inboundSchema` instead. */
  export const inboundSchema = Message2$inboundSchema;
  /** @deprecated use `Message2$outboundSchema` instead. */
  export const outboundSchema = Message2$outboundSchema;
  /** @deprecated use `Message2$Outbound` instead. */
  export type Outbound = Message2$Outbound;
}

export function message2ToJSON(message2: Message2): string {
  return JSON.stringify(Message2$outboundSchema.parse(message2));
}

export function message2FromJSON(
  jsonString: string,
): SafeParseResult<Message2, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Message2$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Message2' from JSON`,
  );
}

/** @internal */
export const MessageRole$inboundSchema: z.ZodNativeEnum<typeof MessageRole> = z
  .nativeEnum(MessageRole);

/** @internal */
export const MessageRole$outboundSchema: z.ZodNativeEnum<typeof MessageRole> =
  MessageRole$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MessageRole$ {
  /** @deprecated use `MessageRole$inboundSchema` instead. */
  export const inboundSchema = MessageRole$inboundSchema;
  /** @deprecated use `MessageRole$outboundSchema` instead. */
  export const outboundSchema = MessageRole$outboundSchema;
}

/** @internal */
export const MessageType$inboundSchema: z.ZodNativeEnum<typeof MessageType> = z
  .nativeEnum(MessageType);

/** @internal */
export const MessageType$outboundSchema: z.ZodNativeEnum<typeof MessageType> =
  MessageType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MessageType$ {
  /** @deprecated use `MessageType$inboundSchema` instead. */
  export const inboundSchema = MessageType$inboundSchema;
  /** @deprecated use `MessageType$outboundSchema` instead. */
  export const outboundSchema = MessageType$outboundSchema;
}

/** @internal */
export const MessageFunction$inboundSchema: z.ZodType<
  MessageFunction,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.string(),
  arguments: z.string(),
});

/** @internal */
export type MessageFunction$Outbound = {
  name: string;
  arguments: string;
};

/** @internal */
export const MessageFunction$outboundSchema: z.ZodType<
  MessageFunction$Outbound,
  z.ZodTypeDef,
  MessageFunction
> = z.object({
  name: z.string(),
  arguments: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MessageFunction$ {
  /** @deprecated use `MessageFunction$inboundSchema` instead. */
  export const inboundSchema = MessageFunction$inboundSchema;
  /** @deprecated use `MessageFunction$outboundSchema` instead. */
  export const outboundSchema = MessageFunction$outboundSchema;
  /** @deprecated use `MessageFunction$Outbound` instead. */
  export type Outbound = MessageFunction$Outbound;
}

export function messageFunctionToJSON(
  messageFunction: MessageFunction,
): string {
  return JSON.stringify(MessageFunction$outboundSchema.parse(messageFunction));
}

export function messageFunctionFromJSON(
  jsonString: string,
): SafeParseResult<MessageFunction, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => MessageFunction$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MessageFunction' from JSON`,
  );
}

/** @internal */
export const MessageToolCalls$inboundSchema: z.ZodType<
  MessageToolCalls,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string().optional(),
  index: z.number().optional(),
  type: MessageType$inboundSchema,
  function: z.lazy(() => MessageFunction$inboundSchema),
});

/** @internal */
export type MessageToolCalls$Outbound = {
  id?: string | undefined;
  index?: number | undefined;
  type: string;
  function: MessageFunction$Outbound;
};

/** @internal */
export const MessageToolCalls$outboundSchema: z.ZodType<
  MessageToolCalls$Outbound,
  z.ZodTypeDef,
  MessageToolCalls
> = z.object({
  id: z.string().optional(),
  index: z.number().optional(),
  type: MessageType$outboundSchema,
  function: z.lazy(() => MessageFunction$outboundSchema),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MessageToolCalls$ {
  /** @deprecated use `MessageToolCalls$inboundSchema` instead. */
  export const inboundSchema = MessageToolCalls$inboundSchema;
  /** @deprecated use `MessageToolCalls$outboundSchema` instead. */
  export const outboundSchema = MessageToolCalls$outboundSchema;
  /** @deprecated use `MessageToolCalls$Outbound` instead. */
  export type Outbound = MessageToolCalls$Outbound;
}

export function messageToolCallsToJSON(
  messageToolCalls: MessageToolCalls,
): string {
  return JSON.stringify(
    MessageToolCalls$outboundSchema.parse(messageToolCalls),
  );
}

export function messageToolCallsFromJSON(
  jsonString: string,
): SafeParseResult<MessageToolCalls, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => MessageToolCalls$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MessageToolCalls' from JSON`,
  );
}

/** @internal */
export const Message1$inboundSchema: z.ZodType<
  Message1,
  z.ZodTypeDef,
  unknown
> = z.object({
  role: MessageRole$inboundSchema,
  content: z.nullable(z.string()).optional(),
  tool_calls: z.array(z.lazy(() => MessageToolCalls$inboundSchema)),
}).transform((v) => {
  return remap$(v, {
    "tool_calls": "toolCalls",
  });
});

/** @internal */
export type Message1$Outbound = {
  role: string;
  content?: string | null | undefined;
  tool_calls: Array<MessageToolCalls$Outbound>;
};

/** @internal */
export const Message1$outboundSchema: z.ZodType<
  Message1$Outbound,
  z.ZodTypeDef,
  Message1
> = z.object({
  role: MessageRole$outboundSchema,
  content: z.nullable(z.string()).optional(),
  toolCalls: z.array(z.lazy(() => MessageToolCalls$outboundSchema)),
}).transform((v) => {
  return remap$(v, {
    toolCalls: "tool_calls",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Message1$ {
  /** @deprecated use `Message1$inboundSchema` instead. */
  export const inboundSchema = Message1$inboundSchema;
  /** @deprecated use `Message1$outboundSchema` instead. */
  export const outboundSchema = Message1$outboundSchema;
  /** @deprecated use `Message1$Outbound` instead. */
  export type Outbound = Message1$Outbound;
}

export function message1ToJSON(message1: Message1): string {
  return JSON.stringify(Message1$outboundSchema.parse(message1));
}

export function message1FromJSON(
  jsonString: string,
): SafeParseResult<Message1, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Message1$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Message1' from JSON`,
  );
}

/** @internal */
export const Message$inboundSchema: z.ZodType<Message, z.ZodTypeDef, unknown> =
  z.union([
    z.lazy(() => Message2$inboundSchema),
    z.lazy(() => Three$inboundSchema),
    z.lazy(() => Message1$inboundSchema),
  ]);

/** @internal */
export type Message$Outbound =
  | Message2$Outbound
  | Three$Outbound
  | Message1$Outbound;

/** @internal */
export const Message$outboundSchema: z.ZodType<
  Message$Outbound,
  z.ZodTypeDef,
  Message
> = z.union([
  z.lazy(() => Message2$outboundSchema),
  z.lazy(() => Three$outboundSchema),
  z.lazy(() => Message1$outboundSchema),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Message$ {
  /** @deprecated use `Message$inboundSchema` instead. */
  export const inboundSchema = Message$inboundSchema;
  /** @deprecated use `Message$outboundSchema` instead. */
  export const outboundSchema = Message$outboundSchema;
  /** @deprecated use `Message$Outbound` instead. */
  export type Outbound = Message$Outbound;
}

export function messageToJSON(message: Message): string {
  return JSON.stringify(Message$outboundSchema.parse(message));
}

export function messageFromJSON(
  jsonString: string,
): SafeParseResult<Message, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Message$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Message' from JSON`,
  );
}

/** @internal */
export const Choices$inboundSchema: z.ZodType<Choices, z.ZodTypeDef, unknown> =
  z.object({
    index: z.number(),
    message: z.union([
      z.lazy(() => Message2$inboundSchema),
      z.lazy(() => Three$inboundSchema),
      z.lazy(() => Message1$inboundSchema),
    ]).optional(),
    finish_reason: z.nullable(z.string()).optional(),
  }).transform((v) => {
    return remap$(v, {
      "finish_reason": "finishReason",
    });
  });

/** @internal */
export type Choices$Outbound = {
  index: number;
  message?: Message2$Outbound | Three$Outbound | Message1$Outbound | undefined;
  finish_reason?: string | null | undefined;
};

/** @internal */
export const Choices$outboundSchema: z.ZodType<
  Choices$Outbound,
  z.ZodTypeDef,
  Choices
> = z.object({
  index: z.number(),
  message: z.union([
    z.lazy(() => Message2$outboundSchema),
    z.lazy(() => Three$outboundSchema),
    z.lazy(() => Message1$outboundSchema),
  ]).optional(),
  finishReason: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    finishReason: "finish_reason",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Choices$ {
  /** @deprecated use `Choices$inboundSchema` instead. */
  export const inboundSchema = Choices$inboundSchema;
  /** @deprecated use `Choices$outboundSchema` instead. */
  export const outboundSchema = Choices$outboundSchema;
  /** @deprecated use `Choices$Outbound` instead. */
  export type Outbound = Choices$Outbound;
}

export function choicesToJSON(choices: Choices): string {
  return JSON.stringify(Choices$outboundSchema.parse(choices));
}

export function choicesFromJSON(
  jsonString: string,
): SafeParseResult<Choices, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Choices$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Choices' from JSON`,
  );
}

/** @internal */
export const Feedback$inboundSchema: z.ZodType<
  Feedback,
  z.ZodTypeDef,
  unknown
> = z.object({
  score: z.number().int(),
});

/** @internal */
export type Feedback$Outbound = {
  score: number;
};

/** @internal */
export const Feedback$outboundSchema: z.ZodType<
  Feedback$Outbound,
  z.ZodTypeDef,
  Feedback
> = z.object({
  score: z.number().int(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Feedback$ {
  /** @deprecated use `Feedback$inboundSchema` instead. */
  export const inboundSchema = Feedback$inboundSchema;
  /** @deprecated use `Feedback$outboundSchema` instead. */
  export const outboundSchema = Feedback$outboundSchema;
  /** @deprecated use `Feedback$Outbound` instead. */
  export type Outbound = Feedback$Outbound;
}

export function feedbackToJSON(feedback: Feedback): string {
  return JSON.stringify(Feedback$outboundSchema.parse(feedback));
}

export function feedbackFromJSON(
  jsonString: string,
): SafeParseResult<Feedback, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Feedback$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Feedback' from JSON`,
  );
}

/** @internal */
export const DeploymentCreateMetricRequestBody$inboundSchema: z.ZodType<
  DeploymentCreateMetricRequestBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  metadata: z.record(z.any()).optional(),
  usage: z.lazy(() => Usage$inboundSchema).optional(),
  performance: z.lazy(() => Performance$inboundSchema).optional(),
  messages: z.array(z.lazy(() => DeploymentCreateMetricMessages$inboundSchema))
    .optional(),
  choices: z.array(z.lazy(() => Choices$inboundSchema)).optional(),
  feedback: z.lazy(() => Feedback$inboundSchema).optional(),
});

/** @internal */
export type DeploymentCreateMetricRequestBody$Outbound = {
  metadata?: { [k: string]: any } | undefined;
  usage?: Usage$Outbound | undefined;
  performance?: Performance$Outbound | undefined;
  messages?: Array<DeploymentCreateMetricMessages$Outbound> | undefined;
  choices?: Array<Choices$Outbound> | undefined;
  feedback?: Feedback$Outbound | undefined;
};

/** @internal */
export const DeploymentCreateMetricRequestBody$outboundSchema: z.ZodType<
  DeploymentCreateMetricRequestBody$Outbound,
  z.ZodTypeDef,
  DeploymentCreateMetricRequestBody
> = z.object({
  metadata: z.record(z.any()).optional(),
  usage: z.lazy(() => Usage$outboundSchema).optional(),
  performance: z.lazy(() => Performance$outboundSchema).optional(),
  messages: z.array(z.lazy(() => DeploymentCreateMetricMessages$outboundSchema))
    .optional(),
  choices: z.array(z.lazy(() => Choices$outboundSchema)).optional(),
  feedback: z.lazy(() => Feedback$outboundSchema).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeploymentCreateMetricRequestBody$ {
  /** @deprecated use `DeploymentCreateMetricRequestBody$inboundSchema` instead. */
  export const inboundSchema = DeploymentCreateMetricRequestBody$inboundSchema;
  /** @deprecated use `DeploymentCreateMetricRequestBody$outboundSchema` instead. */
  export const outboundSchema =
    DeploymentCreateMetricRequestBody$outboundSchema;
  /** @deprecated use `DeploymentCreateMetricRequestBody$Outbound` instead. */
  export type Outbound = DeploymentCreateMetricRequestBody$Outbound;
}

export function deploymentCreateMetricRequestBodyToJSON(
  deploymentCreateMetricRequestBody: DeploymentCreateMetricRequestBody,
): string {
  return JSON.stringify(
    DeploymentCreateMetricRequestBody$outboundSchema.parse(
      deploymentCreateMetricRequestBody,
    ),
  );
}

export function deploymentCreateMetricRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<DeploymentCreateMetricRequestBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DeploymentCreateMetricRequestBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DeploymentCreateMetricRequestBody' from JSON`,
  );
}

/** @internal */
export const DeploymentCreateMetricRequest$inboundSchema: z.ZodType<
  DeploymentCreateMetricRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  RequestBody: z.lazy(() => DeploymentCreateMetricRequestBody$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "RequestBody": "requestBody",
  });
});

/** @internal */
export type DeploymentCreateMetricRequest$Outbound = {
  id: string;
  RequestBody: DeploymentCreateMetricRequestBody$Outbound;
};

/** @internal */
export const DeploymentCreateMetricRequest$outboundSchema: z.ZodType<
  DeploymentCreateMetricRequest$Outbound,
  z.ZodTypeDef,
  DeploymentCreateMetricRequest
> = z.object({
  id: z.string(),
  requestBody: z.lazy(() => DeploymentCreateMetricRequestBody$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    requestBody: "RequestBody",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeploymentCreateMetricRequest$ {
  /** @deprecated use `DeploymentCreateMetricRequest$inboundSchema` instead. */
  export const inboundSchema = DeploymentCreateMetricRequest$inboundSchema;
  /** @deprecated use `DeploymentCreateMetricRequest$outboundSchema` instead. */
  export const outboundSchema = DeploymentCreateMetricRequest$outboundSchema;
  /** @deprecated use `DeploymentCreateMetricRequest$Outbound` instead. */
  export type Outbound = DeploymentCreateMetricRequest$Outbound;
}

export function deploymentCreateMetricRequestToJSON(
  deploymentCreateMetricRequest: DeploymentCreateMetricRequest,
): string {
  return JSON.stringify(
    DeploymentCreateMetricRequest$outboundSchema.parse(
      deploymentCreateMetricRequest,
    ),
  );
}

export function deploymentCreateMetricRequestFromJSON(
  jsonString: string,
): SafeParseResult<DeploymentCreateMetricRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DeploymentCreateMetricRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DeploymentCreateMetricRequest' from JSON`,
  );
}

/** @internal */
export const DeploymentCreateMetricResponseBody$inboundSchema: z.ZodType<
  DeploymentCreateMetricResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  code: z.number(),
  success: z.boolean(),
});

/** @internal */
export type DeploymentCreateMetricResponseBody$Outbound = {
  code: number;
  success: boolean;
};

/** @internal */
export const DeploymentCreateMetricResponseBody$outboundSchema: z.ZodType<
  DeploymentCreateMetricResponseBody$Outbound,
  z.ZodTypeDef,
  DeploymentCreateMetricResponseBody
> = z.object({
  code: z.number(),
  success: z.boolean(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeploymentCreateMetricResponseBody$ {
  /** @deprecated use `DeploymentCreateMetricResponseBody$inboundSchema` instead. */
  export const inboundSchema = DeploymentCreateMetricResponseBody$inboundSchema;
  /** @deprecated use `DeploymentCreateMetricResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    DeploymentCreateMetricResponseBody$outboundSchema;
  /** @deprecated use `DeploymentCreateMetricResponseBody$Outbound` instead. */
  export type Outbound = DeploymentCreateMetricResponseBody$Outbound;
}

export function deploymentCreateMetricResponseBodyToJSON(
  deploymentCreateMetricResponseBody: DeploymentCreateMetricResponseBody,
): string {
  return JSON.stringify(
    DeploymentCreateMetricResponseBody$outboundSchema.parse(
      deploymentCreateMetricResponseBody,
    ),
  );
}

export function deploymentCreateMetricResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<DeploymentCreateMetricResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      DeploymentCreateMetricResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DeploymentCreateMetricResponseBody' from JSON`,
  );
}
