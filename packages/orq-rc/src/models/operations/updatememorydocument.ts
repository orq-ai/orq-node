/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type UpdateMemoryDocumentRequestBody = {
  /**
   * The content of the memory document
   */
  text: string;
  /**
   * Flexible key-value pairs for custom filtering and categorization of documents within a memory collection. Clients can add arbitrary string metadata to enable future filtering based on their specific needs (e.g., document type, source, topic, relevance score, or any custom taxonomy). This enables powerful querying and retrieval strategies.
   */
  metadata: { [k: string]: string };
};

export type UpdateMemoryDocumentRequest = {
  /**
   * The unique key identifier of the memory store
   */
  memoryStoreKey: string;
  /**
   * The unique identifier of the memory
   */
  memoryId: string;
  /**
   * The unique identifier of the document
   */
  documentId: string;
  requestBody?: UpdateMemoryDocumentRequestBody | undefined;
};

/**
 * Memory document successfully updated.
 */
export type UpdateMemoryDocumentResponseBody = {
  id: string;
  memoryId: string;
  storeId: string;
  text: string;
  created: string;
  updated: string;
  createdById?: string | undefined;
  updatedById?: string | undefined;
  workspaceId: string;
  /**
   * Flexible key-value pairs for custom filtering and categorization. Clients can add arbitrary string metadata to enable future filtering of memory documents based on their specific needs (e.g., document type, source, topic, relevance score, or any custom taxonomy).
   */
  metadata?: { [k: string]: string } | undefined;
};

/** @internal */
export const UpdateMemoryDocumentRequestBody$inboundSchema: z.ZodType<
  UpdateMemoryDocumentRequestBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  text: z.string(),
  metadata: z.record(z.string()),
});

/** @internal */
export type UpdateMemoryDocumentRequestBody$Outbound = {
  text: string;
  metadata: { [k: string]: string };
};

/** @internal */
export const UpdateMemoryDocumentRequestBody$outboundSchema: z.ZodType<
  UpdateMemoryDocumentRequestBody$Outbound,
  z.ZodTypeDef,
  UpdateMemoryDocumentRequestBody
> = z.object({
  text: z.string(),
  metadata: z.record(z.string()),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateMemoryDocumentRequestBody$ {
  /** @deprecated use `UpdateMemoryDocumentRequestBody$inboundSchema` instead. */
  export const inboundSchema = UpdateMemoryDocumentRequestBody$inboundSchema;
  /** @deprecated use `UpdateMemoryDocumentRequestBody$outboundSchema` instead. */
  export const outboundSchema = UpdateMemoryDocumentRequestBody$outboundSchema;
  /** @deprecated use `UpdateMemoryDocumentRequestBody$Outbound` instead. */
  export type Outbound = UpdateMemoryDocumentRequestBody$Outbound;
}

export function updateMemoryDocumentRequestBodyToJSON(
  updateMemoryDocumentRequestBody: UpdateMemoryDocumentRequestBody,
): string {
  return JSON.stringify(
    UpdateMemoryDocumentRequestBody$outboundSchema.parse(
      updateMemoryDocumentRequestBody,
    ),
  );
}

export function updateMemoryDocumentRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<UpdateMemoryDocumentRequestBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateMemoryDocumentRequestBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateMemoryDocumentRequestBody' from JSON`,
  );
}

/** @internal */
export const UpdateMemoryDocumentRequest$inboundSchema: z.ZodType<
  UpdateMemoryDocumentRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  memory_store_key: z.string(),
  memory_id: z.string(),
  document_id: z.string(),
  RequestBody: z.lazy(() => UpdateMemoryDocumentRequestBody$inboundSchema)
    .optional(),
}).transform((v) => {
  return remap$(v, {
    "memory_store_key": "memoryStoreKey",
    "memory_id": "memoryId",
    "document_id": "documentId",
    "RequestBody": "requestBody",
  });
});

/** @internal */
export type UpdateMemoryDocumentRequest$Outbound = {
  memory_store_key: string;
  memory_id: string;
  document_id: string;
  RequestBody?: UpdateMemoryDocumentRequestBody$Outbound | undefined;
};

/** @internal */
export const UpdateMemoryDocumentRequest$outboundSchema: z.ZodType<
  UpdateMemoryDocumentRequest$Outbound,
  z.ZodTypeDef,
  UpdateMemoryDocumentRequest
> = z.object({
  memoryStoreKey: z.string(),
  memoryId: z.string(),
  documentId: z.string(),
  requestBody: z.lazy(() => UpdateMemoryDocumentRequestBody$outboundSchema)
    .optional(),
}).transform((v) => {
  return remap$(v, {
    memoryStoreKey: "memory_store_key",
    memoryId: "memory_id",
    documentId: "document_id",
    requestBody: "RequestBody",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateMemoryDocumentRequest$ {
  /** @deprecated use `UpdateMemoryDocumentRequest$inboundSchema` instead. */
  export const inboundSchema = UpdateMemoryDocumentRequest$inboundSchema;
  /** @deprecated use `UpdateMemoryDocumentRequest$outboundSchema` instead. */
  export const outboundSchema = UpdateMemoryDocumentRequest$outboundSchema;
  /** @deprecated use `UpdateMemoryDocumentRequest$Outbound` instead. */
  export type Outbound = UpdateMemoryDocumentRequest$Outbound;
}

export function updateMemoryDocumentRequestToJSON(
  updateMemoryDocumentRequest: UpdateMemoryDocumentRequest,
): string {
  return JSON.stringify(
    UpdateMemoryDocumentRequest$outboundSchema.parse(
      updateMemoryDocumentRequest,
    ),
  );
}

export function updateMemoryDocumentRequestFromJSON(
  jsonString: string,
): SafeParseResult<UpdateMemoryDocumentRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateMemoryDocumentRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateMemoryDocumentRequest' from JSON`,
  );
}

/** @internal */
export const UpdateMemoryDocumentResponseBody$inboundSchema: z.ZodType<
  UpdateMemoryDocumentResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  _id: z.string(),
  memory_id: z.string(),
  store_id: z.string(),
  text: z.string(),
  created: z.string(),
  updated: z.string(),
  created_by_id: z.string().optional(),
  updated_by_id: z.string().optional(),
  workspace_id: z.string(),
  metadata: z.record(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    "_id": "id",
    "memory_id": "memoryId",
    "store_id": "storeId",
    "created_by_id": "createdById",
    "updated_by_id": "updatedById",
    "workspace_id": "workspaceId",
  });
});

/** @internal */
export type UpdateMemoryDocumentResponseBody$Outbound = {
  _id: string;
  memory_id: string;
  store_id: string;
  text: string;
  created: string;
  updated: string;
  created_by_id?: string | undefined;
  updated_by_id?: string | undefined;
  workspace_id: string;
  metadata?: { [k: string]: string } | undefined;
};

/** @internal */
export const UpdateMemoryDocumentResponseBody$outboundSchema: z.ZodType<
  UpdateMemoryDocumentResponseBody$Outbound,
  z.ZodTypeDef,
  UpdateMemoryDocumentResponseBody
> = z.object({
  id: z.string(),
  memoryId: z.string(),
  storeId: z.string(),
  text: z.string(),
  created: z.string(),
  updated: z.string(),
  createdById: z.string().optional(),
  updatedById: z.string().optional(),
  workspaceId: z.string(),
  metadata: z.record(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    id: "_id",
    memoryId: "memory_id",
    storeId: "store_id",
    createdById: "created_by_id",
    updatedById: "updated_by_id",
    workspaceId: "workspace_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateMemoryDocumentResponseBody$ {
  /** @deprecated use `UpdateMemoryDocumentResponseBody$inboundSchema` instead. */
  export const inboundSchema = UpdateMemoryDocumentResponseBody$inboundSchema;
  /** @deprecated use `UpdateMemoryDocumentResponseBody$outboundSchema` instead. */
  export const outboundSchema = UpdateMemoryDocumentResponseBody$outboundSchema;
  /** @deprecated use `UpdateMemoryDocumentResponseBody$Outbound` instead. */
  export type Outbound = UpdateMemoryDocumentResponseBody$Outbound;
}

export function updateMemoryDocumentResponseBodyToJSON(
  updateMemoryDocumentResponseBody: UpdateMemoryDocumentResponseBody,
): string {
  return JSON.stringify(
    UpdateMemoryDocumentResponseBody$outboundSchema.parse(
      updateMemoryDocumentResponseBody,
    ),
  );
}

export function updateMemoryDocumentResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<UpdateMemoryDocumentResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateMemoryDocumentResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateMemoryDocumentResponseBody' from JSON`,
  );
}
