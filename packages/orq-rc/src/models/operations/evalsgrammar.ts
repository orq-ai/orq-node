/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type EvalsGrammarRequestBody = {
  query: string;
  model: string;
};

export type EvalsGrammarEvalsValue = number | boolean | string;

export type EvalsGrammarValue = {
  value: number | boolean | string;
  explanation?: string | null | undefined;
};

/**
 * Returns the result of the evaluator run
 */
export type EvalsGrammarResponseBody = {
  value: EvalsGrammarValue | null;
};

/** @internal */
export const EvalsGrammarRequestBody$inboundSchema: z.ZodType<
  EvalsGrammarRequestBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  query: z.string(),
  model: z.string(),
});

/** @internal */
export type EvalsGrammarRequestBody$Outbound = {
  query: string;
  model: string;
};

/** @internal */
export const EvalsGrammarRequestBody$outboundSchema: z.ZodType<
  EvalsGrammarRequestBody$Outbound,
  z.ZodTypeDef,
  EvalsGrammarRequestBody
> = z.object({
  query: z.string(),
  model: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EvalsGrammarRequestBody$ {
  /** @deprecated use `EvalsGrammarRequestBody$inboundSchema` instead. */
  export const inboundSchema = EvalsGrammarRequestBody$inboundSchema;
  /** @deprecated use `EvalsGrammarRequestBody$outboundSchema` instead. */
  export const outboundSchema = EvalsGrammarRequestBody$outboundSchema;
  /** @deprecated use `EvalsGrammarRequestBody$Outbound` instead. */
  export type Outbound = EvalsGrammarRequestBody$Outbound;
}

export function evalsGrammarRequestBodyToJSON(
  evalsGrammarRequestBody: EvalsGrammarRequestBody,
): string {
  return JSON.stringify(
    EvalsGrammarRequestBody$outboundSchema.parse(evalsGrammarRequestBody),
  );
}

export function evalsGrammarRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<EvalsGrammarRequestBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => EvalsGrammarRequestBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'EvalsGrammarRequestBody' from JSON`,
  );
}

/** @internal */
export const EvalsGrammarEvalsValue$inboundSchema: z.ZodType<
  EvalsGrammarEvalsValue,
  z.ZodTypeDef,
  unknown
> = z.union([z.number(), z.boolean(), z.string()]);

/** @internal */
export type EvalsGrammarEvalsValue$Outbound = number | boolean | string;

/** @internal */
export const EvalsGrammarEvalsValue$outboundSchema: z.ZodType<
  EvalsGrammarEvalsValue$Outbound,
  z.ZodTypeDef,
  EvalsGrammarEvalsValue
> = z.union([z.number(), z.boolean(), z.string()]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EvalsGrammarEvalsValue$ {
  /** @deprecated use `EvalsGrammarEvalsValue$inboundSchema` instead. */
  export const inboundSchema = EvalsGrammarEvalsValue$inboundSchema;
  /** @deprecated use `EvalsGrammarEvalsValue$outboundSchema` instead. */
  export const outboundSchema = EvalsGrammarEvalsValue$outboundSchema;
  /** @deprecated use `EvalsGrammarEvalsValue$Outbound` instead. */
  export type Outbound = EvalsGrammarEvalsValue$Outbound;
}

export function evalsGrammarEvalsValueToJSON(
  evalsGrammarEvalsValue: EvalsGrammarEvalsValue,
): string {
  return JSON.stringify(
    EvalsGrammarEvalsValue$outboundSchema.parse(evalsGrammarEvalsValue),
  );
}

export function evalsGrammarEvalsValueFromJSON(
  jsonString: string,
): SafeParseResult<EvalsGrammarEvalsValue, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => EvalsGrammarEvalsValue$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'EvalsGrammarEvalsValue' from JSON`,
  );
}

/** @internal */
export const EvalsGrammarValue$inboundSchema: z.ZodType<
  EvalsGrammarValue,
  z.ZodTypeDef,
  unknown
> = z.object({
  value: z.union([z.number(), z.boolean(), z.string()]),
  explanation: z.nullable(z.string()).optional(),
});

/** @internal */
export type EvalsGrammarValue$Outbound = {
  value: number | boolean | string;
  explanation?: string | null | undefined;
};

/** @internal */
export const EvalsGrammarValue$outboundSchema: z.ZodType<
  EvalsGrammarValue$Outbound,
  z.ZodTypeDef,
  EvalsGrammarValue
> = z.object({
  value: z.union([z.number(), z.boolean(), z.string()]),
  explanation: z.nullable(z.string()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EvalsGrammarValue$ {
  /** @deprecated use `EvalsGrammarValue$inboundSchema` instead. */
  export const inboundSchema = EvalsGrammarValue$inboundSchema;
  /** @deprecated use `EvalsGrammarValue$outboundSchema` instead. */
  export const outboundSchema = EvalsGrammarValue$outboundSchema;
  /** @deprecated use `EvalsGrammarValue$Outbound` instead. */
  export type Outbound = EvalsGrammarValue$Outbound;
}

export function evalsGrammarValueToJSON(
  evalsGrammarValue: EvalsGrammarValue,
): string {
  return JSON.stringify(
    EvalsGrammarValue$outboundSchema.parse(evalsGrammarValue),
  );
}

export function evalsGrammarValueFromJSON(
  jsonString: string,
): SafeParseResult<EvalsGrammarValue, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => EvalsGrammarValue$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'EvalsGrammarValue' from JSON`,
  );
}

/** @internal */
export const EvalsGrammarResponseBody$inboundSchema: z.ZodType<
  EvalsGrammarResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  value: z.nullable(z.lazy(() => EvalsGrammarValue$inboundSchema)),
});

/** @internal */
export type EvalsGrammarResponseBody$Outbound = {
  value: EvalsGrammarValue$Outbound | null;
};

/** @internal */
export const EvalsGrammarResponseBody$outboundSchema: z.ZodType<
  EvalsGrammarResponseBody$Outbound,
  z.ZodTypeDef,
  EvalsGrammarResponseBody
> = z.object({
  value: z.nullable(z.lazy(() => EvalsGrammarValue$outboundSchema)),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EvalsGrammarResponseBody$ {
  /** @deprecated use `EvalsGrammarResponseBody$inboundSchema` instead. */
  export const inboundSchema = EvalsGrammarResponseBody$inboundSchema;
  /** @deprecated use `EvalsGrammarResponseBody$outboundSchema` instead. */
  export const outboundSchema = EvalsGrammarResponseBody$outboundSchema;
  /** @deprecated use `EvalsGrammarResponseBody$Outbound` instead. */
  export type Outbound = EvalsGrammarResponseBody$Outbound;
}

export function evalsGrammarResponseBodyToJSON(
  evalsGrammarResponseBody: EvalsGrammarResponseBody,
): string {
  return JSON.stringify(
    EvalsGrammarResponseBody$outboundSchema.parse(evalsGrammarResponseBody),
  );
}

export function evalsGrammarResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<EvalsGrammarResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => EvalsGrammarResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'EvalsGrammarResponseBody' from JSON`,
  );
}
