/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type RetrieveBatchRequest = {
  batchId: string;
};

/**
 * The object type, which is always batch.
 */
export const RetrieveBatchObject = {
  Batch: "batch",
} as const;
/**
 * The object type, which is always batch.
 */
export type RetrieveBatchObject = ClosedEnum<typeof RetrieveBatchObject>;

/**
 * Errors associated with the batch.
 */
export type RetrieveBatchErrors = {};

/**
 * The request counts for different statuses within the batch.
 */
export type RetrieveBatchRequestCounts = {
  /**
   * Total number of requests in the batch.
   */
  total: number;
  /**
   * Number of requests that have been completed successfully.
   */
  completed: number;
  /**
   * Number of requests that have failed.
   */
  failed: number;
};

/**
 * A list of paginated Batch objects.
 */
export type RetrieveBatchResponseBody = {
  /**
   * The ID of the batch job.
   */
  id: string;
  /**
   * The object type, which is always batch.
   */
  object: RetrieveBatchObject;
  /**
   * The OpenAI API endpoint used by the batch.
   */
  endpoint: string;
  /**
   * Errors associated with the batch.
   */
  errors: RetrieveBatchErrors;
  /**
   * The ID of the input file for the batch.
   */
  inputFileId: string;
  /**
   * The time frame within which the batch should be processed.
   */
  completionWindow: string;
  /**
   * The current status of the batch.
   */
  status: string;
  /**
   * The ID of the file containing the outputs of successfully executed requests.
   */
  outputFileId: string | null;
  /**
   * The ID of the file containing the outputs of requests with errors.
   */
  errorFileId: string | null;
  /**
   * The Unix timestamp (in seconds) for when the batch was created.
   */
  createdAt: number;
  /**
   * The Unix timestamp (in seconds) for when the batch started processing.
   */
  inProgressAt: number | null;
  /**
   * The Unix timestamp (in seconds) for when the batch will expire.
   */
  expiresAt: number | null;
  /**
   * The Unix timestamp (in seconds) for when the batch started finalizing.
   */
  finalizingAt: number | null;
  /**
   * The Unix timestamp (in seconds) for when the batch was completed.
   */
  completedAt: number | null;
  /**
   * The Unix timestamp (in seconds) for when the batch failed.
   */
  failedAt: number | null;
  /**
   * The Unix timestamp (in seconds) for when the batch expired.
   */
  expiredAt: number | null;
  /**
   * The Unix timestamp (in seconds) for when the batch started cancelling.
   */
  cancellingAt: number | null;
  /**
   * The Unix timestamp (in seconds) for when the batch was cancelled.
   */
  cancelledAt: number | null;
  /**
   * The request counts for different statuses within the batch.
   */
  requestCounts: RetrieveBatchRequestCounts;
  /**
   * Set of 16 key-value pairs that can be attached to an object. This can be useful for storing additional information about the object in a structured format, and querying for objects via API or the dashboard.
   *
   * @remarks
   *
   * Keys are strings with a maximum length of 64 characters. Values are strings with a maximum length of 512 characters.
   */
  metadata?: { [k: string]: any } | undefined;
};

/** @internal */
export const RetrieveBatchRequest$inboundSchema: z.ZodType<
  RetrieveBatchRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  batch_id: z.string(),
}).transform((v) => {
  return remap$(v, {
    "batch_id": "batchId",
  });
});

/** @internal */
export type RetrieveBatchRequest$Outbound = {
  batch_id: string;
};

/** @internal */
export const RetrieveBatchRequest$outboundSchema: z.ZodType<
  RetrieveBatchRequest$Outbound,
  z.ZodTypeDef,
  RetrieveBatchRequest
> = z.object({
  batchId: z.string(),
}).transform((v) => {
  return remap$(v, {
    batchId: "batch_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RetrieveBatchRequest$ {
  /** @deprecated use `RetrieveBatchRequest$inboundSchema` instead. */
  export const inboundSchema = RetrieveBatchRequest$inboundSchema;
  /** @deprecated use `RetrieveBatchRequest$outboundSchema` instead. */
  export const outboundSchema = RetrieveBatchRequest$outboundSchema;
  /** @deprecated use `RetrieveBatchRequest$Outbound` instead. */
  export type Outbound = RetrieveBatchRequest$Outbound;
}

export function retrieveBatchRequestToJSON(
  retrieveBatchRequest: RetrieveBatchRequest,
): string {
  return JSON.stringify(
    RetrieveBatchRequest$outboundSchema.parse(retrieveBatchRequest),
  );
}

export function retrieveBatchRequestFromJSON(
  jsonString: string,
): SafeParseResult<RetrieveBatchRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => RetrieveBatchRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RetrieveBatchRequest' from JSON`,
  );
}

/** @internal */
export const RetrieveBatchObject$inboundSchema: z.ZodNativeEnum<
  typeof RetrieveBatchObject
> = z.nativeEnum(RetrieveBatchObject);

/** @internal */
export const RetrieveBatchObject$outboundSchema: z.ZodNativeEnum<
  typeof RetrieveBatchObject
> = RetrieveBatchObject$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RetrieveBatchObject$ {
  /** @deprecated use `RetrieveBatchObject$inboundSchema` instead. */
  export const inboundSchema = RetrieveBatchObject$inboundSchema;
  /** @deprecated use `RetrieveBatchObject$outboundSchema` instead. */
  export const outboundSchema = RetrieveBatchObject$outboundSchema;
}

/** @internal */
export const RetrieveBatchErrors$inboundSchema: z.ZodType<
  RetrieveBatchErrors,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type RetrieveBatchErrors$Outbound = {};

/** @internal */
export const RetrieveBatchErrors$outboundSchema: z.ZodType<
  RetrieveBatchErrors$Outbound,
  z.ZodTypeDef,
  RetrieveBatchErrors
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RetrieveBatchErrors$ {
  /** @deprecated use `RetrieveBatchErrors$inboundSchema` instead. */
  export const inboundSchema = RetrieveBatchErrors$inboundSchema;
  /** @deprecated use `RetrieveBatchErrors$outboundSchema` instead. */
  export const outboundSchema = RetrieveBatchErrors$outboundSchema;
  /** @deprecated use `RetrieveBatchErrors$Outbound` instead. */
  export type Outbound = RetrieveBatchErrors$Outbound;
}

export function retrieveBatchErrorsToJSON(
  retrieveBatchErrors: RetrieveBatchErrors,
): string {
  return JSON.stringify(
    RetrieveBatchErrors$outboundSchema.parse(retrieveBatchErrors),
  );
}

export function retrieveBatchErrorsFromJSON(
  jsonString: string,
): SafeParseResult<RetrieveBatchErrors, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => RetrieveBatchErrors$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RetrieveBatchErrors' from JSON`,
  );
}

/** @internal */
export const RetrieveBatchRequestCounts$inboundSchema: z.ZodType<
  RetrieveBatchRequestCounts,
  z.ZodTypeDef,
  unknown
> = z.object({
  total: z.number().int(),
  completed: z.number().int(),
  failed: z.number().int(),
});

/** @internal */
export type RetrieveBatchRequestCounts$Outbound = {
  total: number;
  completed: number;
  failed: number;
};

/** @internal */
export const RetrieveBatchRequestCounts$outboundSchema: z.ZodType<
  RetrieveBatchRequestCounts$Outbound,
  z.ZodTypeDef,
  RetrieveBatchRequestCounts
> = z.object({
  total: z.number().int(),
  completed: z.number().int(),
  failed: z.number().int(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RetrieveBatchRequestCounts$ {
  /** @deprecated use `RetrieveBatchRequestCounts$inboundSchema` instead. */
  export const inboundSchema = RetrieveBatchRequestCounts$inboundSchema;
  /** @deprecated use `RetrieveBatchRequestCounts$outboundSchema` instead. */
  export const outboundSchema = RetrieveBatchRequestCounts$outboundSchema;
  /** @deprecated use `RetrieveBatchRequestCounts$Outbound` instead. */
  export type Outbound = RetrieveBatchRequestCounts$Outbound;
}

export function retrieveBatchRequestCountsToJSON(
  retrieveBatchRequestCounts: RetrieveBatchRequestCounts,
): string {
  return JSON.stringify(
    RetrieveBatchRequestCounts$outboundSchema.parse(retrieveBatchRequestCounts),
  );
}

export function retrieveBatchRequestCountsFromJSON(
  jsonString: string,
): SafeParseResult<RetrieveBatchRequestCounts, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => RetrieveBatchRequestCounts$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RetrieveBatchRequestCounts' from JSON`,
  );
}

/** @internal */
export const RetrieveBatchResponseBody$inboundSchema: z.ZodType<
  RetrieveBatchResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  object: RetrieveBatchObject$inboundSchema,
  endpoint: z.string(),
  errors: z.lazy(() => RetrieveBatchErrors$inboundSchema),
  input_file_id: z.string(),
  completion_window: z.string(),
  status: z.string(),
  output_file_id: z.nullable(z.string()),
  error_file_id: z.nullable(z.string()),
  created_at: z.number().int(),
  in_progress_at: z.nullable(z.number().int()),
  expires_at: z.nullable(z.number().int()),
  finalizing_at: z.nullable(z.number().int()),
  completed_at: z.nullable(z.number().int()),
  failed_at: z.nullable(z.number().int()),
  expired_at: z.nullable(z.number().int()),
  cancelling_at: z.nullable(z.number().int()),
  cancelled_at: z.nullable(z.number().int()),
  request_counts: z.lazy(() => RetrieveBatchRequestCounts$inboundSchema),
  metadata: z.record(z.any()).optional(),
}).transform((v) => {
  return remap$(v, {
    "input_file_id": "inputFileId",
    "completion_window": "completionWindow",
    "output_file_id": "outputFileId",
    "error_file_id": "errorFileId",
    "created_at": "createdAt",
    "in_progress_at": "inProgressAt",
    "expires_at": "expiresAt",
    "finalizing_at": "finalizingAt",
    "completed_at": "completedAt",
    "failed_at": "failedAt",
    "expired_at": "expiredAt",
    "cancelling_at": "cancellingAt",
    "cancelled_at": "cancelledAt",
    "request_counts": "requestCounts",
  });
});

/** @internal */
export type RetrieveBatchResponseBody$Outbound = {
  id: string;
  object: string;
  endpoint: string;
  errors: RetrieveBatchErrors$Outbound;
  input_file_id: string;
  completion_window: string;
  status: string;
  output_file_id: string | null;
  error_file_id: string | null;
  created_at: number;
  in_progress_at: number | null;
  expires_at: number | null;
  finalizing_at: number | null;
  completed_at: number | null;
  failed_at: number | null;
  expired_at: number | null;
  cancelling_at: number | null;
  cancelled_at: number | null;
  request_counts: RetrieveBatchRequestCounts$Outbound;
  metadata?: { [k: string]: any } | undefined;
};

/** @internal */
export const RetrieveBatchResponseBody$outboundSchema: z.ZodType<
  RetrieveBatchResponseBody$Outbound,
  z.ZodTypeDef,
  RetrieveBatchResponseBody
> = z.object({
  id: z.string(),
  object: RetrieveBatchObject$outboundSchema,
  endpoint: z.string(),
  errors: z.lazy(() => RetrieveBatchErrors$outboundSchema),
  inputFileId: z.string(),
  completionWindow: z.string(),
  status: z.string(),
  outputFileId: z.nullable(z.string()),
  errorFileId: z.nullable(z.string()),
  createdAt: z.number().int(),
  inProgressAt: z.nullable(z.number().int()),
  expiresAt: z.nullable(z.number().int()),
  finalizingAt: z.nullable(z.number().int()),
  completedAt: z.nullable(z.number().int()),
  failedAt: z.nullable(z.number().int()),
  expiredAt: z.nullable(z.number().int()),
  cancellingAt: z.nullable(z.number().int()),
  cancelledAt: z.nullable(z.number().int()),
  requestCounts: z.lazy(() => RetrieveBatchRequestCounts$outboundSchema),
  metadata: z.record(z.any()).optional(),
}).transform((v) => {
  return remap$(v, {
    inputFileId: "input_file_id",
    completionWindow: "completion_window",
    outputFileId: "output_file_id",
    errorFileId: "error_file_id",
    createdAt: "created_at",
    inProgressAt: "in_progress_at",
    expiresAt: "expires_at",
    finalizingAt: "finalizing_at",
    completedAt: "completed_at",
    failedAt: "failed_at",
    expiredAt: "expired_at",
    cancellingAt: "cancelling_at",
    cancelledAt: "cancelled_at",
    requestCounts: "request_counts",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RetrieveBatchResponseBody$ {
  /** @deprecated use `RetrieveBatchResponseBody$inboundSchema` instead. */
  export const inboundSchema = RetrieveBatchResponseBody$inboundSchema;
  /** @deprecated use `RetrieveBatchResponseBody$outboundSchema` instead. */
  export const outboundSchema = RetrieveBatchResponseBody$outboundSchema;
  /** @deprecated use `RetrieveBatchResponseBody$Outbound` instead. */
  export type Outbound = RetrieveBatchResponseBody$Outbound;
}

export function retrieveBatchResponseBodyToJSON(
  retrieveBatchResponseBody: RetrieveBatchResponseBody,
): string {
  return JSON.stringify(
    RetrieveBatchResponseBody$outboundSchema.parse(retrieveBatchResponseBody),
  );
}

export function retrieveBatchResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<RetrieveBatchResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => RetrieveBatchResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RetrieveBatchResponseBody' from JSON`,
  );
}
