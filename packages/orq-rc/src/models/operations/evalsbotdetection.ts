/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type EvalsBotDetectionRequestBody = {
  output: string;
  model: string;
};

export type EvalsBotDetectionEvalsValue = number | boolean | string;

export type EvalsBotDetectionOriginalValue = number | boolean | string;

export type EvalsBotDetectionValue = {
  value: number | boolean | string;
  explanation?: string | null | undefined;
  originalValue?: number | boolean | string | null | undefined;
  originalExplanation?: string | null | undefined;
};

/**
 * Returns the bot detection evaluation result
 */
export type EvalsBotDetectionResponseBody = {
  value: EvalsBotDetectionValue | null;
};

/** @internal */
export const EvalsBotDetectionRequestBody$inboundSchema: z.ZodType<
  EvalsBotDetectionRequestBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  output: z.string(),
  model: z.string(),
});

/** @internal */
export type EvalsBotDetectionRequestBody$Outbound = {
  output: string;
  model: string;
};

/** @internal */
export const EvalsBotDetectionRequestBody$outboundSchema: z.ZodType<
  EvalsBotDetectionRequestBody$Outbound,
  z.ZodTypeDef,
  EvalsBotDetectionRequestBody
> = z.object({
  output: z.string(),
  model: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EvalsBotDetectionRequestBody$ {
  /** @deprecated use `EvalsBotDetectionRequestBody$inboundSchema` instead. */
  export const inboundSchema = EvalsBotDetectionRequestBody$inboundSchema;
  /** @deprecated use `EvalsBotDetectionRequestBody$outboundSchema` instead. */
  export const outboundSchema = EvalsBotDetectionRequestBody$outboundSchema;
  /** @deprecated use `EvalsBotDetectionRequestBody$Outbound` instead. */
  export type Outbound = EvalsBotDetectionRequestBody$Outbound;
}

export function evalsBotDetectionRequestBodyToJSON(
  evalsBotDetectionRequestBody: EvalsBotDetectionRequestBody,
): string {
  return JSON.stringify(
    EvalsBotDetectionRequestBody$outboundSchema.parse(
      evalsBotDetectionRequestBody,
    ),
  );
}

export function evalsBotDetectionRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<EvalsBotDetectionRequestBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => EvalsBotDetectionRequestBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'EvalsBotDetectionRequestBody' from JSON`,
  );
}

/** @internal */
export const EvalsBotDetectionEvalsValue$inboundSchema: z.ZodType<
  EvalsBotDetectionEvalsValue,
  z.ZodTypeDef,
  unknown
> = z.union([z.number(), z.boolean(), z.string()]);

/** @internal */
export type EvalsBotDetectionEvalsValue$Outbound = number | boolean | string;

/** @internal */
export const EvalsBotDetectionEvalsValue$outboundSchema: z.ZodType<
  EvalsBotDetectionEvalsValue$Outbound,
  z.ZodTypeDef,
  EvalsBotDetectionEvalsValue
> = z.union([z.number(), z.boolean(), z.string()]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EvalsBotDetectionEvalsValue$ {
  /** @deprecated use `EvalsBotDetectionEvalsValue$inboundSchema` instead. */
  export const inboundSchema = EvalsBotDetectionEvalsValue$inboundSchema;
  /** @deprecated use `EvalsBotDetectionEvalsValue$outboundSchema` instead. */
  export const outboundSchema = EvalsBotDetectionEvalsValue$outboundSchema;
  /** @deprecated use `EvalsBotDetectionEvalsValue$Outbound` instead. */
  export type Outbound = EvalsBotDetectionEvalsValue$Outbound;
}

export function evalsBotDetectionEvalsValueToJSON(
  evalsBotDetectionEvalsValue: EvalsBotDetectionEvalsValue,
): string {
  return JSON.stringify(
    EvalsBotDetectionEvalsValue$outboundSchema.parse(
      evalsBotDetectionEvalsValue,
    ),
  );
}

export function evalsBotDetectionEvalsValueFromJSON(
  jsonString: string,
): SafeParseResult<EvalsBotDetectionEvalsValue, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => EvalsBotDetectionEvalsValue$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'EvalsBotDetectionEvalsValue' from JSON`,
  );
}

/** @internal */
export const EvalsBotDetectionOriginalValue$inboundSchema: z.ZodType<
  EvalsBotDetectionOriginalValue,
  z.ZodTypeDef,
  unknown
> = z.union([z.number(), z.boolean(), z.string()]);

/** @internal */
export type EvalsBotDetectionOriginalValue$Outbound = number | boolean | string;

/** @internal */
export const EvalsBotDetectionOriginalValue$outboundSchema: z.ZodType<
  EvalsBotDetectionOriginalValue$Outbound,
  z.ZodTypeDef,
  EvalsBotDetectionOriginalValue
> = z.union([z.number(), z.boolean(), z.string()]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EvalsBotDetectionOriginalValue$ {
  /** @deprecated use `EvalsBotDetectionOriginalValue$inboundSchema` instead. */
  export const inboundSchema = EvalsBotDetectionOriginalValue$inboundSchema;
  /** @deprecated use `EvalsBotDetectionOriginalValue$outboundSchema` instead. */
  export const outboundSchema = EvalsBotDetectionOriginalValue$outboundSchema;
  /** @deprecated use `EvalsBotDetectionOriginalValue$Outbound` instead. */
  export type Outbound = EvalsBotDetectionOriginalValue$Outbound;
}

export function evalsBotDetectionOriginalValueToJSON(
  evalsBotDetectionOriginalValue: EvalsBotDetectionOriginalValue,
): string {
  return JSON.stringify(
    EvalsBotDetectionOriginalValue$outboundSchema.parse(
      evalsBotDetectionOriginalValue,
    ),
  );
}

export function evalsBotDetectionOriginalValueFromJSON(
  jsonString: string,
): SafeParseResult<EvalsBotDetectionOriginalValue, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => EvalsBotDetectionOriginalValue$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'EvalsBotDetectionOriginalValue' from JSON`,
  );
}

/** @internal */
export const EvalsBotDetectionValue$inboundSchema: z.ZodType<
  EvalsBotDetectionValue,
  z.ZodTypeDef,
  unknown
> = z.object({
  value: z.union([z.number(), z.boolean(), z.string()]),
  explanation: z.nullable(z.string()).optional(),
  original_value: z.nullable(z.union([z.number(), z.boolean(), z.string()]))
    .optional(),
  original_explanation: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    "original_value": "originalValue",
    "original_explanation": "originalExplanation",
  });
});

/** @internal */
export type EvalsBotDetectionValue$Outbound = {
  value: number | boolean | string;
  explanation?: string | null | undefined;
  original_value?: number | boolean | string | null | undefined;
  original_explanation?: string | null | undefined;
};

/** @internal */
export const EvalsBotDetectionValue$outboundSchema: z.ZodType<
  EvalsBotDetectionValue$Outbound,
  z.ZodTypeDef,
  EvalsBotDetectionValue
> = z.object({
  value: z.union([z.number(), z.boolean(), z.string()]),
  explanation: z.nullable(z.string()).optional(),
  originalValue: z.nullable(z.union([z.number(), z.boolean(), z.string()]))
    .optional(),
  originalExplanation: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    originalValue: "original_value",
    originalExplanation: "original_explanation",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EvalsBotDetectionValue$ {
  /** @deprecated use `EvalsBotDetectionValue$inboundSchema` instead. */
  export const inboundSchema = EvalsBotDetectionValue$inboundSchema;
  /** @deprecated use `EvalsBotDetectionValue$outboundSchema` instead. */
  export const outboundSchema = EvalsBotDetectionValue$outboundSchema;
  /** @deprecated use `EvalsBotDetectionValue$Outbound` instead. */
  export type Outbound = EvalsBotDetectionValue$Outbound;
}

export function evalsBotDetectionValueToJSON(
  evalsBotDetectionValue: EvalsBotDetectionValue,
): string {
  return JSON.stringify(
    EvalsBotDetectionValue$outboundSchema.parse(evalsBotDetectionValue),
  );
}

export function evalsBotDetectionValueFromJSON(
  jsonString: string,
): SafeParseResult<EvalsBotDetectionValue, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => EvalsBotDetectionValue$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'EvalsBotDetectionValue' from JSON`,
  );
}

/** @internal */
export const EvalsBotDetectionResponseBody$inboundSchema: z.ZodType<
  EvalsBotDetectionResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  value: z.nullable(z.lazy(() => EvalsBotDetectionValue$inboundSchema)),
});

/** @internal */
export type EvalsBotDetectionResponseBody$Outbound = {
  value: EvalsBotDetectionValue$Outbound | null;
};

/** @internal */
export const EvalsBotDetectionResponseBody$outboundSchema: z.ZodType<
  EvalsBotDetectionResponseBody$Outbound,
  z.ZodTypeDef,
  EvalsBotDetectionResponseBody
> = z.object({
  value: z.nullable(z.lazy(() => EvalsBotDetectionValue$outboundSchema)),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EvalsBotDetectionResponseBody$ {
  /** @deprecated use `EvalsBotDetectionResponseBody$inboundSchema` instead. */
  export const inboundSchema = EvalsBotDetectionResponseBody$inboundSchema;
  /** @deprecated use `EvalsBotDetectionResponseBody$outboundSchema` instead. */
  export const outboundSchema = EvalsBotDetectionResponseBody$outboundSchema;
  /** @deprecated use `EvalsBotDetectionResponseBody$Outbound` instead. */
  export type Outbound = EvalsBotDetectionResponseBody$Outbound;
}

export function evalsBotDetectionResponseBodyToJSON(
  evalsBotDetectionResponseBody: EvalsBotDetectionResponseBody,
): string {
  return JSON.stringify(
    EvalsBotDetectionResponseBody$outboundSchema.parse(
      evalsBotDetectionResponseBody,
    ),
  );
}

export function evalsBotDetectionResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<EvalsBotDetectionResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => EvalsBotDetectionResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'EvalsBotDetectionResponseBody' from JSON`,
  );
}
