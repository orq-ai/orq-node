/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type FunctionParams = {
  keywords: Array<string>;
};

export type EvalsContainsAllRequestBody = {
  output: string;
  functionParams: FunctionParams;
};

export type EvalsContainsAllValue = boolean | string | number;

/**
 * Returns the result of the evaluator run
 */
export type EvalsContainsAllResponseBody = {
  value: boolean | string | number | null;
};

/** @internal */
export const FunctionParams$inboundSchema: z.ZodType<
  FunctionParams,
  z.ZodTypeDef,
  unknown
> = z.object({
  keywords: z.array(z.string()),
});

/** @internal */
export type FunctionParams$Outbound = {
  keywords: Array<string>;
};

/** @internal */
export const FunctionParams$outboundSchema: z.ZodType<
  FunctionParams$Outbound,
  z.ZodTypeDef,
  FunctionParams
> = z.object({
  keywords: z.array(z.string()),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FunctionParams$ {
  /** @deprecated use `FunctionParams$inboundSchema` instead. */
  export const inboundSchema = FunctionParams$inboundSchema;
  /** @deprecated use `FunctionParams$outboundSchema` instead. */
  export const outboundSchema = FunctionParams$outboundSchema;
  /** @deprecated use `FunctionParams$Outbound` instead. */
  export type Outbound = FunctionParams$Outbound;
}

export function functionParamsToJSON(functionParams: FunctionParams): string {
  return JSON.stringify(FunctionParams$outboundSchema.parse(functionParams));
}

export function functionParamsFromJSON(
  jsonString: string,
): SafeParseResult<FunctionParams, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => FunctionParams$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'FunctionParams' from JSON`,
  );
}

/** @internal */
export const EvalsContainsAllRequestBody$inboundSchema: z.ZodType<
  EvalsContainsAllRequestBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  output: z.string(),
  function_params: z.lazy(() => FunctionParams$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "function_params": "functionParams",
  });
});

/** @internal */
export type EvalsContainsAllRequestBody$Outbound = {
  output: string;
  function_params: FunctionParams$Outbound;
};

/** @internal */
export const EvalsContainsAllRequestBody$outboundSchema: z.ZodType<
  EvalsContainsAllRequestBody$Outbound,
  z.ZodTypeDef,
  EvalsContainsAllRequestBody
> = z.object({
  output: z.string(),
  functionParams: z.lazy(() => FunctionParams$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    functionParams: "function_params",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EvalsContainsAllRequestBody$ {
  /** @deprecated use `EvalsContainsAllRequestBody$inboundSchema` instead. */
  export const inboundSchema = EvalsContainsAllRequestBody$inboundSchema;
  /** @deprecated use `EvalsContainsAllRequestBody$outboundSchema` instead. */
  export const outboundSchema = EvalsContainsAllRequestBody$outboundSchema;
  /** @deprecated use `EvalsContainsAllRequestBody$Outbound` instead. */
  export type Outbound = EvalsContainsAllRequestBody$Outbound;
}

export function evalsContainsAllRequestBodyToJSON(
  evalsContainsAllRequestBody: EvalsContainsAllRequestBody,
): string {
  return JSON.stringify(
    EvalsContainsAllRequestBody$outboundSchema.parse(
      evalsContainsAllRequestBody,
    ),
  );
}

export function evalsContainsAllRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<EvalsContainsAllRequestBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => EvalsContainsAllRequestBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'EvalsContainsAllRequestBody' from JSON`,
  );
}

/** @internal */
export const EvalsContainsAllValue$inboundSchema: z.ZodType<
  EvalsContainsAllValue,
  z.ZodTypeDef,
  unknown
> = z.union([z.boolean(), z.string(), z.number()]);

/** @internal */
export type EvalsContainsAllValue$Outbound = boolean | string | number;

/** @internal */
export const EvalsContainsAllValue$outboundSchema: z.ZodType<
  EvalsContainsAllValue$Outbound,
  z.ZodTypeDef,
  EvalsContainsAllValue
> = z.union([z.boolean(), z.string(), z.number()]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EvalsContainsAllValue$ {
  /** @deprecated use `EvalsContainsAllValue$inboundSchema` instead. */
  export const inboundSchema = EvalsContainsAllValue$inboundSchema;
  /** @deprecated use `EvalsContainsAllValue$outboundSchema` instead. */
  export const outboundSchema = EvalsContainsAllValue$outboundSchema;
  /** @deprecated use `EvalsContainsAllValue$Outbound` instead. */
  export type Outbound = EvalsContainsAllValue$Outbound;
}

export function evalsContainsAllValueToJSON(
  evalsContainsAllValue: EvalsContainsAllValue,
): string {
  return JSON.stringify(
    EvalsContainsAllValue$outboundSchema.parse(evalsContainsAllValue),
  );
}

export function evalsContainsAllValueFromJSON(
  jsonString: string,
): SafeParseResult<EvalsContainsAllValue, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => EvalsContainsAllValue$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'EvalsContainsAllValue' from JSON`,
  );
}

/** @internal */
export const EvalsContainsAllResponseBody$inboundSchema: z.ZodType<
  EvalsContainsAllResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  value: z.nullable(z.union([z.boolean(), z.string(), z.number()])),
});

/** @internal */
export type EvalsContainsAllResponseBody$Outbound = {
  value: boolean | string | number | null;
};

/** @internal */
export const EvalsContainsAllResponseBody$outboundSchema: z.ZodType<
  EvalsContainsAllResponseBody$Outbound,
  z.ZodTypeDef,
  EvalsContainsAllResponseBody
> = z.object({
  value: z.nullable(z.union([z.boolean(), z.string(), z.number()])),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EvalsContainsAllResponseBody$ {
  /** @deprecated use `EvalsContainsAllResponseBody$inboundSchema` instead. */
  export const inboundSchema = EvalsContainsAllResponseBody$inboundSchema;
  /** @deprecated use `EvalsContainsAllResponseBody$outboundSchema` instead. */
  export const outboundSchema = EvalsContainsAllResponseBody$outboundSchema;
  /** @deprecated use `EvalsContainsAllResponseBody$Outbound` instead. */
  export type Outbound = EvalsContainsAllResponseBody$Outbound;
}

export function evalsContainsAllResponseBodyToJSON(
  evalsContainsAllResponseBody: EvalsContainsAllResponseBody,
): string {
  return JSON.stringify(
    EvalsContainsAllResponseBody$outboundSchema.parse(
      evalsContainsAllResponseBody,
    ),
  );
}

export function evalsContainsAllResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<EvalsContainsAllResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => EvalsContainsAllResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'EvalsContainsAllResponseBody' from JSON`,
  );
}
