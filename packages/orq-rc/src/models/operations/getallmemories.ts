/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type GetAllMemoriesRequest = {
  /**
   * The unique key identifier of the memory store
   */
  memoryStoreKey: string;
  /**
   * A limit on the number of objects to be returned. Limit can range between 1 and 50, and the default is 10
   */
  limit?: number | undefined;
  /**
   * A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 20 objects, ending with `01JJ1HDHN79XAS7A01WB3HYSDB`, your subsequent call can include `after=01JJ1HDHN79XAS7A01WB3HYSDB` in order to fetch the next page of the list.
   */
  startingAfter?: string | undefined;
  /**
   * A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 20 objects, starting with `01JJ1HDHN79XAS7A01WB3HYSDB`, your subsequent call can include `before=01JJ1HDHN79XAS7A01WB3HYSDB` in order to fetch the previous page of the list.
   */
  endingBefore?: string | undefined;
};

export const GetAllMemoriesObject = {
  List: "list",
} as const;
export type GetAllMemoriesObject = ClosedEnum<typeof GetAllMemoriesObject>;

export type GetAllMemoriesData = {
  id: string;
  entityId: string;
  created: string;
  updated: string;
  createdById?: string | null | undefined;
  updatedById?: string | null | undefined;
  storeId: string;
  /**
   * Flexible key-value pairs for custom filtering and categorization. Clients can add arbitrary string metadata to enable future filtering of memory access based on their specific needs (e.g., user segments, topics, contexts, or any custom taxonomy).
   */
  metadata: { [k: string]: string };
  workspaceId: string;
};

/**
 * Successfully retrieved the list of memories.
 */
export type GetAllMemoriesResponseBody = {
  object: GetAllMemoriesObject;
  data: Array<GetAllMemoriesData>;
  hasMore: boolean;
};

/** @internal */
export const GetAllMemoriesRequest$inboundSchema: z.ZodType<
  GetAllMemoriesRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  memory_store_key: z.string(),
  limit: z.number().default(10),
  starting_after: z.string().optional(),
  ending_before: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "memory_store_key": "memoryStoreKey",
    "starting_after": "startingAfter",
    "ending_before": "endingBefore",
  });
});

/** @internal */
export type GetAllMemoriesRequest$Outbound = {
  memory_store_key: string;
  limit: number;
  starting_after?: string | undefined;
  ending_before?: string | undefined;
};

/** @internal */
export const GetAllMemoriesRequest$outboundSchema: z.ZodType<
  GetAllMemoriesRequest$Outbound,
  z.ZodTypeDef,
  GetAllMemoriesRequest
> = z.object({
  memoryStoreKey: z.string(),
  limit: z.number().default(10),
  startingAfter: z.string().optional(),
  endingBefore: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    memoryStoreKey: "memory_store_key",
    startingAfter: "starting_after",
    endingBefore: "ending_before",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllMemoriesRequest$ {
  /** @deprecated use `GetAllMemoriesRequest$inboundSchema` instead. */
  export const inboundSchema = GetAllMemoriesRequest$inboundSchema;
  /** @deprecated use `GetAllMemoriesRequest$outboundSchema` instead. */
  export const outboundSchema = GetAllMemoriesRequest$outboundSchema;
  /** @deprecated use `GetAllMemoriesRequest$Outbound` instead. */
  export type Outbound = GetAllMemoriesRequest$Outbound;
}

export function getAllMemoriesRequestToJSON(
  getAllMemoriesRequest: GetAllMemoriesRequest,
): string {
  return JSON.stringify(
    GetAllMemoriesRequest$outboundSchema.parse(getAllMemoriesRequest),
  );
}

export function getAllMemoriesRequestFromJSON(
  jsonString: string,
): SafeParseResult<GetAllMemoriesRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetAllMemoriesRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetAllMemoriesRequest' from JSON`,
  );
}

/** @internal */
export const GetAllMemoriesObject$inboundSchema: z.ZodNativeEnum<
  typeof GetAllMemoriesObject
> = z.nativeEnum(GetAllMemoriesObject);

/** @internal */
export const GetAllMemoriesObject$outboundSchema: z.ZodNativeEnum<
  typeof GetAllMemoriesObject
> = GetAllMemoriesObject$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllMemoriesObject$ {
  /** @deprecated use `GetAllMemoriesObject$inboundSchema` instead. */
  export const inboundSchema = GetAllMemoriesObject$inboundSchema;
  /** @deprecated use `GetAllMemoriesObject$outboundSchema` instead. */
  export const outboundSchema = GetAllMemoriesObject$outboundSchema;
}

/** @internal */
export const GetAllMemoriesData$inboundSchema: z.ZodType<
  GetAllMemoriesData,
  z.ZodTypeDef,
  unknown
> = z.object({
  _id: z.string(),
  entity_id: z.string(),
  created: z.string(),
  updated: z.string(),
  created_by_id: z.nullable(z.string()).optional(),
  updated_by_id: z.nullable(z.string()).optional(),
  store_id: z.string(),
  metadata: z.record(z.string()),
  workspace_id: z.string(),
}).transform((v) => {
  return remap$(v, {
    "_id": "id",
    "entity_id": "entityId",
    "created_by_id": "createdById",
    "updated_by_id": "updatedById",
    "store_id": "storeId",
    "workspace_id": "workspaceId",
  });
});

/** @internal */
export type GetAllMemoriesData$Outbound = {
  _id: string;
  entity_id: string;
  created: string;
  updated: string;
  created_by_id?: string | null | undefined;
  updated_by_id?: string | null | undefined;
  store_id: string;
  metadata: { [k: string]: string };
  workspace_id: string;
};

/** @internal */
export const GetAllMemoriesData$outboundSchema: z.ZodType<
  GetAllMemoriesData$Outbound,
  z.ZodTypeDef,
  GetAllMemoriesData
> = z.object({
  id: z.string(),
  entityId: z.string(),
  created: z.string(),
  updated: z.string(),
  createdById: z.nullable(z.string()).optional(),
  updatedById: z.nullable(z.string()).optional(),
  storeId: z.string(),
  metadata: z.record(z.string()),
  workspaceId: z.string(),
}).transform((v) => {
  return remap$(v, {
    id: "_id",
    entityId: "entity_id",
    createdById: "created_by_id",
    updatedById: "updated_by_id",
    storeId: "store_id",
    workspaceId: "workspace_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllMemoriesData$ {
  /** @deprecated use `GetAllMemoriesData$inboundSchema` instead. */
  export const inboundSchema = GetAllMemoriesData$inboundSchema;
  /** @deprecated use `GetAllMemoriesData$outboundSchema` instead. */
  export const outboundSchema = GetAllMemoriesData$outboundSchema;
  /** @deprecated use `GetAllMemoriesData$Outbound` instead. */
  export type Outbound = GetAllMemoriesData$Outbound;
}

export function getAllMemoriesDataToJSON(
  getAllMemoriesData: GetAllMemoriesData,
): string {
  return JSON.stringify(
    GetAllMemoriesData$outboundSchema.parse(getAllMemoriesData),
  );
}

export function getAllMemoriesDataFromJSON(
  jsonString: string,
): SafeParseResult<GetAllMemoriesData, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetAllMemoriesData$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetAllMemoriesData' from JSON`,
  );
}

/** @internal */
export const GetAllMemoriesResponseBody$inboundSchema: z.ZodType<
  GetAllMemoriesResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  object: GetAllMemoriesObject$inboundSchema,
  data: z.array(z.lazy(() => GetAllMemoriesData$inboundSchema)),
  has_more: z.boolean(),
}).transform((v) => {
  return remap$(v, {
    "has_more": "hasMore",
  });
});

/** @internal */
export type GetAllMemoriesResponseBody$Outbound = {
  object: string;
  data: Array<GetAllMemoriesData$Outbound>;
  has_more: boolean;
};

/** @internal */
export const GetAllMemoriesResponseBody$outboundSchema: z.ZodType<
  GetAllMemoriesResponseBody$Outbound,
  z.ZodTypeDef,
  GetAllMemoriesResponseBody
> = z.object({
  object: GetAllMemoriesObject$outboundSchema,
  data: z.array(z.lazy(() => GetAllMemoriesData$outboundSchema)),
  hasMore: z.boolean(),
}).transform((v) => {
  return remap$(v, {
    hasMore: "has_more",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllMemoriesResponseBody$ {
  /** @deprecated use `GetAllMemoriesResponseBody$inboundSchema` instead. */
  export const inboundSchema = GetAllMemoriesResponseBody$inboundSchema;
  /** @deprecated use `GetAllMemoriesResponseBody$outboundSchema` instead. */
  export const outboundSchema = GetAllMemoriesResponseBody$outboundSchema;
  /** @deprecated use `GetAllMemoriesResponseBody$Outbound` instead. */
  export type Outbound = GetAllMemoriesResponseBody$Outbound;
}

export function getAllMemoriesResponseBodyToJSON(
  getAllMemoriesResponseBody: GetAllMemoriesResponseBody,
): string {
  return JSON.stringify(
    GetAllMemoriesResponseBody$outboundSchema.parse(getAllMemoriesResponseBody),
  );
}

export function getAllMemoriesResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<GetAllMemoriesResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetAllMemoriesResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetAllMemoriesResponseBody' from JSON`,
  );
}
