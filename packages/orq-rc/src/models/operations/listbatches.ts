/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type ListBatchesRequest = {
  after: string;
  limit?: number | undefined;
};

export const ListBatchesObject = {
  List: "list",
} as const;
export type ListBatchesObject = ClosedEnum<typeof ListBatchesObject>;

/**
 * The object type, which is always batch.
 */
export const ListBatchesBatchesObject = {
  Batch: "batch",
} as const;
/**
 * The object type, which is always batch.
 */
export type ListBatchesBatchesObject = ClosedEnum<
  typeof ListBatchesBatchesObject
>;

/**
 * Errors associated with the batch.
 */
export type ListBatchesErrors = {};

/**
 * The request counts for different statuses within the batch.
 */
export type ListBatchesRequestCounts = {
  /**
   * Total number of requests in the batch.
   */
  total: number;
  /**
   * Number of requests that have been completed successfully.
   */
  completed: number;
  /**
   * Number of requests that have failed.
   */
  failed: number;
};

export type ListBatchesData = {
  /**
   * The ID of the batch job.
   */
  id: string;
  /**
   * The object type, which is always batch.
   */
  object: ListBatchesBatchesObject;
  /**
   * The OpenAI API endpoint used by the batch.
   */
  endpoint: string;
  /**
   * Errors associated with the batch.
   */
  errors: ListBatchesErrors;
  /**
   * The ID of the input file for the batch.
   */
  inputFileId: string;
  /**
   * The time frame within which the batch should be processed.
   */
  completionWindow: string;
  /**
   * The current status of the batch.
   */
  status: string;
  /**
   * The ID of the file containing the outputs of successfully executed requests.
   */
  outputFileId: string | null;
  /**
   * The ID of the file containing the outputs of requests with errors.
   */
  errorFileId: string | null;
  /**
   * The Unix timestamp (in seconds) for when the batch was created.
   */
  createdAt: number;
  /**
   * The Unix timestamp (in seconds) for when the batch started processing.
   */
  inProgressAt: number | null;
  /**
   * The Unix timestamp (in seconds) for when the batch will expire.
   */
  expiresAt: number | null;
  /**
   * The Unix timestamp (in seconds) for when the batch started finalizing.
   */
  finalizingAt: number | null;
  /**
   * The Unix timestamp (in seconds) for when the batch was completed.
   */
  completedAt: number | null;
  /**
   * The Unix timestamp (in seconds) for when the batch failed.
   */
  failedAt: number | null;
  /**
   * The Unix timestamp (in seconds) for when the batch expired.
   */
  expiredAt: number | null;
  /**
   * The Unix timestamp (in seconds) for when the batch started cancelling.
   */
  cancellingAt: number | null;
  /**
   * The Unix timestamp (in seconds) for when the batch was cancelled.
   */
  cancelledAt: number | null;
  /**
   * The request counts for different statuses within the batch.
   */
  requestCounts: ListBatchesRequestCounts;
  /**
   * Set of 16 key-value pairs that can be attached to an object. This can be useful for storing additional information about the object in a structured format, and querying for objects via API or the dashboard.
   *
   * @remarks
   *
   * Keys are strings with a maximum length of 64 characters. Values are strings with a maximum length of 512 characters.
   */
  metadata?: { [k: string]: any } | undefined;
};

/**
 * A list of paginated Batch objects.
 */
export type ListBatchesResponseBody = {
  object: ListBatchesObject;
  data: Array<ListBatchesData>;
  hasMore: boolean;
};

/** @internal */
export const ListBatchesRequest$inboundSchema: z.ZodType<
  ListBatchesRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  after: z.string(),
  limit: z.number().default(10),
});

/** @internal */
export type ListBatchesRequest$Outbound = {
  after: string;
  limit: number;
};

/** @internal */
export const ListBatchesRequest$outboundSchema: z.ZodType<
  ListBatchesRequest$Outbound,
  z.ZodTypeDef,
  ListBatchesRequest
> = z.object({
  after: z.string(),
  limit: z.number().default(10),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListBatchesRequest$ {
  /** @deprecated use `ListBatchesRequest$inboundSchema` instead. */
  export const inboundSchema = ListBatchesRequest$inboundSchema;
  /** @deprecated use `ListBatchesRequest$outboundSchema` instead. */
  export const outboundSchema = ListBatchesRequest$outboundSchema;
  /** @deprecated use `ListBatchesRequest$Outbound` instead. */
  export type Outbound = ListBatchesRequest$Outbound;
}

export function listBatchesRequestToJSON(
  listBatchesRequest: ListBatchesRequest,
): string {
  return JSON.stringify(
    ListBatchesRequest$outboundSchema.parse(listBatchesRequest),
  );
}

export function listBatchesRequestFromJSON(
  jsonString: string,
): SafeParseResult<ListBatchesRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListBatchesRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListBatchesRequest' from JSON`,
  );
}

/** @internal */
export const ListBatchesObject$inboundSchema: z.ZodNativeEnum<
  typeof ListBatchesObject
> = z.nativeEnum(ListBatchesObject);

/** @internal */
export const ListBatchesObject$outboundSchema: z.ZodNativeEnum<
  typeof ListBatchesObject
> = ListBatchesObject$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListBatchesObject$ {
  /** @deprecated use `ListBatchesObject$inboundSchema` instead. */
  export const inboundSchema = ListBatchesObject$inboundSchema;
  /** @deprecated use `ListBatchesObject$outboundSchema` instead. */
  export const outboundSchema = ListBatchesObject$outboundSchema;
}

/** @internal */
export const ListBatchesBatchesObject$inboundSchema: z.ZodNativeEnum<
  typeof ListBatchesBatchesObject
> = z.nativeEnum(ListBatchesBatchesObject);

/** @internal */
export const ListBatchesBatchesObject$outboundSchema: z.ZodNativeEnum<
  typeof ListBatchesBatchesObject
> = ListBatchesBatchesObject$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListBatchesBatchesObject$ {
  /** @deprecated use `ListBatchesBatchesObject$inboundSchema` instead. */
  export const inboundSchema = ListBatchesBatchesObject$inboundSchema;
  /** @deprecated use `ListBatchesBatchesObject$outboundSchema` instead. */
  export const outboundSchema = ListBatchesBatchesObject$outboundSchema;
}

/** @internal */
export const ListBatchesErrors$inboundSchema: z.ZodType<
  ListBatchesErrors,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type ListBatchesErrors$Outbound = {};

/** @internal */
export const ListBatchesErrors$outboundSchema: z.ZodType<
  ListBatchesErrors$Outbound,
  z.ZodTypeDef,
  ListBatchesErrors
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListBatchesErrors$ {
  /** @deprecated use `ListBatchesErrors$inboundSchema` instead. */
  export const inboundSchema = ListBatchesErrors$inboundSchema;
  /** @deprecated use `ListBatchesErrors$outboundSchema` instead. */
  export const outboundSchema = ListBatchesErrors$outboundSchema;
  /** @deprecated use `ListBatchesErrors$Outbound` instead. */
  export type Outbound = ListBatchesErrors$Outbound;
}

export function listBatchesErrorsToJSON(
  listBatchesErrors: ListBatchesErrors,
): string {
  return JSON.stringify(
    ListBatchesErrors$outboundSchema.parse(listBatchesErrors),
  );
}

export function listBatchesErrorsFromJSON(
  jsonString: string,
): SafeParseResult<ListBatchesErrors, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListBatchesErrors$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListBatchesErrors' from JSON`,
  );
}

/** @internal */
export const ListBatchesRequestCounts$inboundSchema: z.ZodType<
  ListBatchesRequestCounts,
  z.ZodTypeDef,
  unknown
> = z.object({
  total: z.number().int(),
  completed: z.number().int(),
  failed: z.number().int(),
});

/** @internal */
export type ListBatchesRequestCounts$Outbound = {
  total: number;
  completed: number;
  failed: number;
};

/** @internal */
export const ListBatchesRequestCounts$outboundSchema: z.ZodType<
  ListBatchesRequestCounts$Outbound,
  z.ZodTypeDef,
  ListBatchesRequestCounts
> = z.object({
  total: z.number().int(),
  completed: z.number().int(),
  failed: z.number().int(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListBatchesRequestCounts$ {
  /** @deprecated use `ListBatchesRequestCounts$inboundSchema` instead. */
  export const inboundSchema = ListBatchesRequestCounts$inboundSchema;
  /** @deprecated use `ListBatchesRequestCounts$outboundSchema` instead. */
  export const outboundSchema = ListBatchesRequestCounts$outboundSchema;
  /** @deprecated use `ListBatchesRequestCounts$Outbound` instead. */
  export type Outbound = ListBatchesRequestCounts$Outbound;
}

export function listBatchesRequestCountsToJSON(
  listBatchesRequestCounts: ListBatchesRequestCounts,
): string {
  return JSON.stringify(
    ListBatchesRequestCounts$outboundSchema.parse(listBatchesRequestCounts),
  );
}

export function listBatchesRequestCountsFromJSON(
  jsonString: string,
): SafeParseResult<ListBatchesRequestCounts, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListBatchesRequestCounts$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListBatchesRequestCounts' from JSON`,
  );
}

/** @internal */
export const ListBatchesData$inboundSchema: z.ZodType<
  ListBatchesData,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  object: ListBatchesBatchesObject$inboundSchema,
  endpoint: z.string(),
  errors: z.lazy(() => ListBatchesErrors$inboundSchema),
  input_file_id: z.string(),
  completion_window: z.string(),
  status: z.string(),
  output_file_id: z.nullable(z.string()),
  error_file_id: z.nullable(z.string()),
  created_at: z.number().int(),
  in_progress_at: z.nullable(z.number().int()),
  expires_at: z.nullable(z.number().int()),
  finalizing_at: z.nullable(z.number().int()),
  completed_at: z.nullable(z.number().int()),
  failed_at: z.nullable(z.number().int()),
  expired_at: z.nullable(z.number().int()),
  cancelling_at: z.nullable(z.number().int()),
  cancelled_at: z.nullable(z.number().int()),
  request_counts: z.lazy(() => ListBatchesRequestCounts$inboundSchema),
  metadata: z.record(z.any()).optional(),
}).transform((v) => {
  return remap$(v, {
    "input_file_id": "inputFileId",
    "completion_window": "completionWindow",
    "output_file_id": "outputFileId",
    "error_file_id": "errorFileId",
    "created_at": "createdAt",
    "in_progress_at": "inProgressAt",
    "expires_at": "expiresAt",
    "finalizing_at": "finalizingAt",
    "completed_at": "completedAt",
    "failed_at": "failedAt",
    "expired_at": "expiredAt",
    "cancelling_at": "cancellingAt",
    "cancelled_at": "cancelledAt",
    "request_counts": "requestCounts",
  });
});

/** @internal */
export type ListBatchesData$Outbound = {
  id: string;
  object: string;
  endpoint: string;
  errors: ListBatchesErrors$Outbound;
  input_file_id: string;
  completion_window: string;
  status: string;
  output_file_id: string | null;
  error_file_id: string | null;
  created_at: number;
  in_progress_at: number | null;
  expires_at: number | null;
  finalizing_at: number | null;
  completed_at: number | null;
  failed_at: number | null;
  expired_at: number | null;
  cancelling_at: number | null;
  cancelled_at: number | null;
  request_counts: ListBatchesRequestCounts$Outbound;
  metadata?: { [k: string]: any } | undefined;
};

/** @internal */
export const ListBatchesData$outboundSchema: z.ZodType<
  ListBatchesData$Outbound,
  z.ZodTypeDef,
  ListBatchesData
> = z.object({
  id: z.string(),
  object: ListBatchesBatchesObject$outboundSchema,
  endpoint: z.string(),
  errors: z.lazy(() => ListBatchesErrors$outboundSchema),
  inputFileId: z.string(),
  completionWindow: z.string(),
  status: z.string(),
  outputFileId: z.nullable(z.string()),
  errorFileId: z.nullable(z.string()),
  createdAt: z.number().int(),
  inProgressAt: z.nullable(z.number().int()),
  expiresAt: z.nullable(z.number().int()),
  finalizingAt: z.nullable(z.number().int()),
  completedAt: z.nullable(z.number().int()),
  failedAt: z.nullable(z.number().int()),
  expiredAt: z.nullable(z.number().int()),
  cancellingAt: z.nullable(z.number().int()),
  cancelledAt: z.nullable(z.number().int()),
  requestCounts: z.lazy(() => ListBatchesRequestCounts$outboundSchema),
  metadata: z.record(z.any()).optional(),
}).transform((v) => {
  return remap$(v, {
    inputFileId: "input_file_id",
    completionWindow: "completion_window",
    outputFileId: "output_file_id",
    errorFileId: "error_file_id",
    createdAt: "created_at",
    inProgressAt: "in_progress_at",
    expiresAt: "expires_at",
    finalizingAt: "finalizing_at",
    completedAt: "completed_at",
    failedAt: "failed_at",
    expiredAt: "expired_at",
    cancellingAt: "cancelling_at",
    cancelledAt: "cancelled_at",
    requestCounts: "request_counts",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListBatchesData$ {
  /** @deprecated use `ListBatchesData$inboundSchema` instead. */
  export const inboundSchema = ListBatchesData$inboundSchema;
  /** @deprecated use `ListBatchesData$outboundSchema` instead. */
  export const outboundSchema = ListBatchesData$outboundSchema;
  /** @deprecated use `ListBatchesData$Outbound` instead. */
  export type Outbound = ListBatchesData$Outbound;
}

export function listBatchesDataToJSON(
  listBatchesData: ListBatchesData,
): string {
  return JSON.stringify(ListBatchesData$outboundSchema.parse(listBatchesData));
}

export function listBatchesDataFromJSON(
  jsonString: string,
): SafeParseResult<ListBatchesData, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListBatchesData$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListBatchesData' from JSON`,
  );
}

/** @internal */
export const ListBatchesResponseBody$inboundSchema: z.ZodType<
  ListBatchesResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  object: ListBatchesObject$inboundSchema,
  data: z.array(z.lazy(() => ListBatchesData$inboundSchema)),
  has_more: z.boolean(),
}).transform((v) => {
  return remap$(v, {
    "has_more": "hasMore",
  });
});

/** @internal */
export type ListBatchesResponseBody$Outbound = {
  object: string;
  data: Array<ListBatchesData$Outbound>;
  has_more: boolean;
};

/** @internal */
export const ListBatchesResponseBody$outboundSchema: z.ZodType<
  ListBatchesResponseBody$Outbound,
  z.ZodTypeDef,
  ListBatchesResponseBody
> = z.object({
  object: ListBatchesObject$outboundSchema,
  data: z.array(z.lazy(() => ListBatchesData$outboundSchema)),
  hasMore: z.boolean(),
}).transform((v) => {
  return remap$(v, {
    hasMore: "has_more",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListBatchesResponseBody$ {
  /** @deprecated use `ListBatchesResponseBody$inboundSchema` instead. */
  export const inboundSchema = ListBatchesResponseBody$inboundSchema;
  /** @deprecated use `ListBatchesResponseBody$outboundSchema` instead. */
  export const outboundSchema = ListBatchesResponseBody$outboundSchema;
  /** @deprecated use `ListBatchesResponseBody$Outbound` instead. */
  export type Outbound = ListBatchesResponseBody$Outbound;
}

export function listBatchesResponseBodyToJSON(
  listBatchesResponseBody: ListBatchesResponseBody,
): string {
  return JSON.stringify(
    ListBatchesResponseBody$outboundSchema.parse(listBatchesResponseBody),
  );
}

export function listBatchesResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<ListBatchesResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListBatchesResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListBatchesResponseBody' from JSON`,
  );
}
