/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * The type of the model
 */
export const CreatePromptModelType = {
  Chat: "chat",
  Completion: "completion",
  Embedding: "embedding",
  Vision: "vision",
  Image: "image",
  Tts: "tts",
  Stt: "stt",
  Rerank: "rerank",
  Moderations: "moderations",
} as const;
/**
 * The type of the model
 */
export type CreatePromptModelType = ClosedEnum<typeof CreatePromptModelType>;

/**
 * Only supported on `image` models.
 */
export const CreatePromptFormat = {
  Url: "url",
  B64Json: "b64_json",
  Text: "text",
  JsonObject: "json_object",
} as const;
/**
 * Only supported on `image` models.
 */
export type CreatePromptFormat = ClosedEnum<typeof CreatePromptFormat>;

/**
 * Only supported on `image` models.
 */
export const CreatePromptQuality = {
  Standard: "standard",
  Hd: "hd",
} as const;
/**
 * Only supported on `image` models.
 */
export type CreatePromptQuality = ClosedEnum<typeof CreatePromptQuality>;

export const CreatePromptResponseFormatPromptsType = {
  JsonObject: "json_object",
} as const;
export type CreatePromptResponseFormatPromptsType = ClosedEnum<
  typeof CreatePromptResponseFormatPromptsType
>;

export type CreatePromptResponseFormat2 = {
  type: CreatePromptResponseFormatPromptsType;
};

export const CreatePromptResponseFormatType = {
  JsonSchema: "json_schema",
} as const;
export type CreatePromptResponseFormatType = ClosedEnum<
  typeof CreatePromptResponseFormatType
>;

export type CreatePromptResponseFormatJsonSchema = {
  name: string;
  strict: boolean;
  schema: { [k: string]: any };
};

export type CreatePromptResponseFormat1 = {
  type: CreatePromptResponseFormatType;
  jsonSchema: CreatePromptResponseFormatJsonSchema;
};

/**
 * An object specifying the format that the model must output.
 *
 * @remarks
 *
 *  Setting to `{ "type": "json_schema", "json_schema": {...} }` enables Structured Outputs which ensures the model will match your supplied JSON schema
 *
 *  Setting to `{ "type": "json_object" }` enables JSON mode, which ensures the message the model generates is valid JSON.
 *
 * Important: when using JSON mode, you must also instruct the model to produce JSON yourself via a system or user message. Without this, the model may generate an unending stream of whitespace until the generation reaches the token limit, resulting in a long-running and seemingly "stuck" request. Also note that the message content may be partially cut off if finish_reason="length", which indicates the generation exceeded max_tokens or the conversation exceeded the max context length.
 */
export type CreatePromptResponseFormat =
  | CreatePromptResponseFormat2
  | CreatePromptResponseFormat1;

/**
 * The version of photoReal to use. Must be v1 or v2. Only available for `leonardoai` provider
 */
export const CreatePromptPhotoRealVersion = {
  V1: "v1",
  V2: "v2",
} as const;
/**
 * The version of photoReal to use. Must be v1 or v2. Only available for `leonardoai` provider
 */
export type CreatePromptPhotoRealVersion = ClosedEnum<
  typeof CreatePromptPhotoRealVersion
>;

/**
 * The format to return the embeddings
 */
export const CreatePromptEncodingFormat = {
  Float: "float",
  Base64: "base64",
} as const;
/**
 * The format to return the embeddings
 */
export type CreatePromptEncodingFormat = ClosedEnum<
  typeof CreatePromptEncodingFormat
>;

/**
 * Constrains effort on reasoning for reasoning models. Reducing reasoning effort can result in faster responses and fewer tokens used on reasoning in a response.
 */
export const CreatePromptReasoningEffort = {
  Low: "low",
  Medium: "medium",
  High: "high",
} as const;
/**
 * Constrains effort on reasoning for reasoning models. Reducing reasoning effort can result in faster responses and fewer tokens used on reasoning in a response.
 */
export type CreatePromptReasoningEffort = ClosedEnum<
  typeof CreatePromptReasoningEffort
>;

/**
 * Model Parameters: Not all parameters apply to every model
 */
export type CreatePromptModelParameters = {
  /**
   * Only supported on `chat` and `completion` models.
   */
  temperature?: number | undefined;
  /**
   * Only supported on `chat` and `completion` models.
   */
  maxTokens?: number | undefined;
  /**
   * Only supported on `chat` and `completion` models.
   */
  topK?: number | undefined;
  /**
   * Only supported on `chat` and `completion` models.
   */
  topP?: number | undefined;
  /**
   * Only supported on `chat` and `completion` models.
   */
  frequencyPenalty?: number | undefined;
  /**
   * Only supported on `chat` and `completion` models.
   */
  presencePenalty?: number | undefined;
  /**
   * Only supported on `image` models.
   */
  numImages?: number | undefined;
  /**
   * Best effort deterministic seed for the model. Currently only OpenAI models support these
   */
  seed?: number | undefined;
  /**
   * Only supported on `image` models.
   */
  format?: CreatePromptFormat | undefined;
  /**
   * Only supported on `image` models.
   */
  dimensions?: string | undefined;
  /**
   * Only supported on `image` models.
   */
  quality?: CreatePromptQuality | undefined;
  /**
   * Only supported on `image` models.
   */
  style?: string | undefined;
  /**
   * An object specifying the format that the model must output.
   *
   * @remarks
   *
   *  Setting to `{ "type": "json_schema", "json_schema": {...} }` enables Structured Outputs which ensures the model will match your supplied JSON schema
   *
   *  Setting to `{ "type": "json_object" }` enables JSON mode, which ensures the message the model generates is valid JSON.
   *
   * Important: when using JSON mode, you must also instruct the model to produce JSON yourself via a system or user message. Without this, the model may generate an unending stream of whitespace until the generation reaches the token limit, resulting in a long-running and seemingly "stuck" request. Also note that the message content may be partially cut off if finish_reason="length", which indicates the generation exceeded max_tokens or the conversation exceeded the max context length.
   */
  responseFormat?:
    | CreatePromptResponseFormat2
    | CreatePromptResponseFormat1
    | null
    | undefined;
  /**
   * The version of photoReal to use. Must be v1 or v2. Only available for `leonardoai` provider
   */
  photoRealVersion?: CreatePromptPhotoRealVersion | undefined;
  /**
   * The format to return the embeddings
   */
  encodingFormat?: CreatePromptEncodingFormat | undefined;
  /**
   * Constrains effort on reasoning for reasoning models. Reducing reasoning effort can result in faster responses and fewer tokens used on reasoning in a response.
   */
  reasoningEffort?: CreatePromptReasoningEffort | undefined;
};

export const CreatePromptProvider = {
  Cohere: "cohere",
  Openai: "openai",
  Anthropic: "anthropic",
  Huggingface: "huggingface",
  Replicate: "replicate",
  Google: "google",
  GoogleAi: "google-ai",
  Azure: "azure",
  Aws: "aws",
  Anyscale: "anyscale",
  Perplexity: "perplexity",
  Groq: "groq",
  Fal: "fal",
  Leonardoai: "leonardoai",
  Nvidia: "nvidia",
  Jina: "jina",
  Togetherai: "togetherai",
  Elevenlabs: "elevenlabs",
} as const;
export type CreatePromptProvider = ClosedEnum<typeof CreatePromptProvider>;

/**
 * The role of the prompt message
 */
export const CreatePromptRole = {
  System: "system",
  Assistant: "assistant",
  User: "user",
  Exception: "exception",
  Tool: "tool",
  Prompt: "prompt",
  Correction: "correction",
  ExpectedOutput: "expected_output",
} as const;
/**
 * The role of the prompt message
 */
export type CreatePromptRole = ClosedEnum<typeof CreatePromptRole>;

export const CreatePrompt2PromptsType = {
  ImageUrl: "image_url",
} as const;
export type CreatePrompt2PromptsType = ClosedEnum<
  typeof CreatePrompt2PromptsType
>;

export type CreatePrompt2ImageUrl = {
  /**
   * Either a URL of the image or the base64 encoded data URI.
   */
  url: string;
  /**
   * Specifies the detail level of the image. Currently only supported with OpenAI models
   */
  detail?: string | undefined;
};

/**
 * The image part of the prompt message. Only supported with vision models.
 */
export type CreatePrompt22 = {
  type: CreatePrompt2PromptsType;
  imageUrl: CreatePrompt2ImageUrl;
};

export const CreatePrompt2Type = {
  Text: "text",
} as const;
export type CreatePrompt2Type = ClosedEnum<typeof CreatePrompt2Type>;

/**
 * Text content part of a prompt message
 */
export type CreatePrompt21 = {
  type: CreatePrompt2Type;
  text: string;
};

export type CreatePromptContent2 = CreatePrompt21 | CreatePrompt22;

/**
 * The contents of the user message. Either the text content of the message or an array of content parts with a defined type, each can be of type `text` or `image_url` when passing in images. You can pass multiple images by adding multiple `image_url` content parts.
 */
export type CreatePromptContent =
  | string
  | Array<CreatePrompt21 | CreatePrompt22>;

export const CreatePromptType = {
  Function: "function",
} as const;
export type CreatePromptType = ClosedEnum<typeof CreatePromptType>;

export type CreatePromptFunction = {
  name: string;
  /**
   * JSON string arguments for the functions
   */
  arguments: string;
};

export type CreatePromptToolCalls = {
  id?: string | undefined;
  index?: number | undefined;
  type: CreatePromptType;
  function: CreatePromptFunction;
};

export type CreatePromptMessages = {
  /**
   * The role of the prompt message
   */
  role: CreatePromptRole;
  /**
   * The contents of the user message. Either the text content of the message or an array of content parts with a defined type, each can be of type `text` or `image_url` when passing in images. You can pass multiple images by adding multiple `image_url` content parts.
   */
  content: string | Array<CreatePrompt21 | CreatePrompt22>;
  toolCalls?: Array<CreatePromptToolCalls> | undefined;
};

/**
 * A list of messages compatible with the openAI schema
 */
export type CreatePromptPromptConfig = {
  stream?: boolean | undefined;
  model?: string | undefined;
  /**
   * The type of the model
   */
  modelType?: CreatePromptModelType | undefined;
  /**
   * Model Parameters: Not all parameters apply to every model
   */
  modelParameters?: CreatePromptModelParameters | undefined;
  provider?: CreatePromptProvider | undefined;
  version?: string | undefined;
  messages: Array<CreatePromptMessages>;
};

export const CreatePromptUseCases = {
  Agents: "Agents",
  AgentsSimulations: "Agents simulations",
  APIInteraction: "API interaction",
  AutonomousAgents: "Autonomous Agents",
  Chatbots: "Chatbots",
  Classification: "Classification",
  CodeUnderstanding: "Code understanding",
  CodeWriting: "Code writing",
  DocumentsQA: "Documents QA",
  Conversation: "Conversation",
  Extraction: "Extraction",
  MultiModal: "Multi-modal",
  SelfChecking: "Self-checking",
  Sql: "SQL",
  Summarization: "Summarization",
  Tagging: "Tagging",
} as const;
export type CreatePromptUseCases = ClosedEnum<typeof CreatePromptUseCases>;

/**
 * The language that the prompt is written in. Use this field to categorize the prompt for your own purpose
 */
export const CreatePromptLanguage = {
  Chinese: "Chinese",
  Dutch: "Dutch",
  English: "English",
  French: "French",
  German: "German",
  Russian: "Russian",
  Spanish: "Spanish",
} as const;
/**
 * The language that the prompt is written in. Use this field to categorize the prompt for your own purpose
 */
export type CreatePromptLanguage = ClosedEnum<typeof CreatePromptLanguage>;

export type CreatePromptMetadata = {
  /**
   * A list of use cases that the prompt is meant to be used for. Use this field to categorize the prompt for your own purpose
   */
  useCases?: Array<CreatePromptUseCases> | undefined;
  /**
   * The language that the prompt is written in. Use this field to categorize the prompt for your own purpose
   */
  language?: CreatePromptLanguage | undefined;
};

export type CreatePromptRequestBody = {
  /**
   * The prompt’s name, meant to be displayable in the UI.
   */
  displayName: string;
  /**
   * The prompt’s description, meant to be displayable in the UI. Use this field to optionally store a long form explanation of the prompt for your own purpose
   */
  description?: string | null | undefined;
  /**
   * A list of messages compatible with the openAI schema
   */
  promptConfig: CreatePromptPromptConfig;
  metadata?: CreatePromptMetadata | undefined;
  /**
   * The path where the entity is stored in the project structure. The first element of the path always represents the project name. Any subsequent path element after the project will be created as a folder in the project if it does not exists.
   */
  path: string;
};

export const CreatePromptPromptsType = {
  Prompt: "prompt",
} as const;
export type CreatePromptPromptsType = ClosedEnum<
  typeof CreatePromptPromptsType
>;

/**
 * The type of the model
 */
export const CreatePromptPromptsModelType = {
  Chat: "chat",
  Completion: "completion",
  Embedding: "embedding",
  Vision: "vision",
  Image: "image",
  Tts: "tts",
  Stt: "stt",
  Rerank: "rerank",
  Moderations: "moderations",
} as const;
/**
 * The type of the model
 */
export type CreatePromptPromptsModelType = ClosedEnum<
  typeof CreatePromptPromptsModelType
>;

/**
 * Only supported on `image` models.
 */
export const CreatePromptPromptsFormat = {
  Url: "url",
  B64Json: "b64_json",
  Text: "text",
  JsonObject: "json_object",
} as const;
/**
 * Only supported on `image` models.
 */
export type CreatePromptPromptsFormat = ClosedEnum<
  typeof CreatePromptPromptsFormat
>;

/**
 * Only supported on `image` models.
 */
export const CreatePromptPromptsQuality = {
  Standard: "standard",
  Hd: "hd",
} as const;
/**
 * Only supported on `image` models.
 */
export type CreatePromptPromptsQuality = ClosedEnum<
  typeof CreatePromptPromptsQuality
>;

export const CreatePromptResponseFormatPromptsResponse200Type = {
  JsonObject: "json_object",
} as const;
export type CreatePromptResponseFormatPromptsResponse200Type = ClosedEnum<
  typeof CreatePromptResponseFormatPromptsResponse200Type
>;

export type CreatePromptResponseFormatPrompts2 = {
  type: CreatePromptResponseFormatPromptsResponse200Type;
};

export const CreatePromptResponseFormatPromptsResponseType = {
  JsonSchema: "json_schema",
} as const;
export type CreatePromptResponseFormatPromptsResponseType = ClosedEnum<
  typeof CreatePromptResponseFormatPromptsResponseType
>;

export type CreatePromptResponseFormatPromptsJsonSchema = {
  name: string;
  strict: boolean;
  schema: { [k: string]: any };
};

export type CreatePromptResponseFormatPrompts1 = {
  type: CreatePromptResponseFormatPromptsResponseType;
  jsonSchema: CreatePromptResponseFormatPromptsJsonSchema;
};

/**
 * An object specifying the format that the model must output.
 *
 * @remarks
 *
 *  Setting to `{ "type": "json_schema", "json_schema": {...} }` enables Structured Outputs which ensures the model will match your supplied JSON schema
 *
 *  Setting to `{ "type": "json_object" }` enables JSON mode, which ensures the message the model generates is valid JSON.
 *
 * Important: when using JSON mode, you must also instruct the model to produce JSON yourself via a system or user message. Without this, the model may generate an unending stream of whitespace until the generation reaches the token limit, resulting in a long-running and seemingly "stuck" request. Also note that the message content may be partially cut off if finish_reason="length", which indicates the generation exceeded max_tokens or the conversation exceeded the max context length.
 */
export type CreatePromptPromptsResponseFormat =
  | CreatePromptResponseFormatPrompts2
  | CreatePromptResponseFormatPrompts1;

/**
 * The version of photoReal to use. Must be v1 or v2. Only available for `leonardoai` provider
 */
export const CreatePromptPromptsPhotoRealVersion = {
  V1: "v1",
  V2: "v2",
} as const;
/**
 * The version of photoReal to use. Must be v1 or v2. Only available for `leonardoai` provider
 */
export type CreatePromptPromptsPhotoRealVersion = ClosedEnum<
  typeof CreatePromptPromptsPhotoRealVersion
>;

/**
 * The format to return the embeddings
 */
export const CreatePromptPromptsEncodingFormat = {
  Float: "float",
  Base64: "base64",
} as const;
/**
 * The format to return the embeddings
 */
export type CreatePromptPromptsEncodingFormat = ClosedEnum<
  typeof CreatePromptPromptsEncodingFormat
>;

/**
 * Constrains effort on reasoning for reasoning models. Reducing reasoning effort can result in faster responses and fewer tokens used on reasoning in a response.
 */
export const CreatePromptPromptsReasoningEffort = {
  Low: "low",
  Medium: "medium",
  High: "high",
} as const;
/**
 * Constrains effort on reasoning for reasoning models. Reducing reasoning effort can result in faster responses and fewer tokens used on reasoning in a response.
 */
export type CreatePromptPromptsReasoningEffort = ClosedEnum<
  typeof CreatePromptPromptsReasoningEffort
>;

/**
 * Model Parameters: Not all parameters apply to every model
 */
export type CreatePromptPromptsModelParameters = {
  /**
   * Only supported on `chat` and `completion` models.
   */
  temperature?: number | undefined;
  /**
   * Only supported on `chat` and `completion` models.
   */
  maxTokens?: number | undefined;
  /**
   * Only supported on `chat` and `completion` models.
   */
  topK?: number | undefined;
  /**
   * Only supported on `chat` and `completion` models.
   */
  topP?: number | undefined;
  /**
   * Only supported on `chat` and `completion` models.
   */
  frequencyPenalty?: number | undefined;
  /**
   * Only supported on `chat` and `completion` models.
   */
  presencePenalty?: number | undefined;
  /**
   * Only supported on `image` models.
   */
  numImages?: number | undefined;
  /**
   * Best effort deterministic seed for the model. Currently only OpenAI models support these
   */
  seed?: number | undefined;
  /**
   * Only supported on `image` models.
   */
  format?: CreatePromptPromptsFormat | undefined;
  /**
   * Only supported on `image` models.
   */
  dimensions?: string | undefined;
  /**
   * Only supported on `image` models.
   */
  quality?: CreatePromptPromptsQuality | undefined;
  /**
   * Only supported on `image` models.
   */
  style?: string | undefined;
  /**
   * An object specifying the format that the model must output.
   *
   * @remarks
   *
   *  Setting to `{ "type": "json_schema", "json_schema": {...} }` enables Structured Outputs which ensures the model will match your supplied JSON schema
   *
   *  Setting to `{ "type": "json_object" }` enables JSON mode, which ensures the message the model generates is valid JSON.
   *
   * Important: when using JSON mode, you must also instruct the model to produce JSON yourself via a system or user message. Without this, the model may generate an unending stream of whitespace until the generation reaches the token limit, resulting in a long-running and seemingly "stuck" request. Also note that the message content may be partially cut off if finish_reason="length", which indicates the generation exceeded max_tokens or the conversation exceeded the max context length.
   */
  responseFormat?:
    | CreatePromptResponseFormatPrompts2
    | CreatePromptResponseFormatPrompts1
    | null
    | undefined;
  /**
   * The version of photoReal to use. Must be v1 or v2. Only available for `leonardoai` provider
   */
  photoRealVersion?: CreatePromptPromptsPhotoRealVersion | undefined;
  /**
   * The format to return the embeddings
   */
  encodingFormat?: CreatePromptPromptsEncodingFormat | undefined;
  /**
   * Constrains effort on reasoning for reasoning models. Reducing reasoning effort can result in faster responses and fewer tokens used on reasoning in a response.
   */
  reasoningEffort?: CreatePromptPromptsReasoningEffort | undefined;
};

export const CreatePromptPromptsProvider = {
  Cohere: "cohere",
  Openai: "openai",
  Anthropic: "anthropic",
  Huggingface: "huggingface",
  Replicate: "replicate",
  Google: "google",
  GoogleAi: "google-ai",
  Azure: "azure",
  Aws: "aws",
  Anyscale: "anyscale",
  Perplexity: "perplexity",
  Groq: "groq",
  Fal: "fal",
  Leonardoai: "leonardoai",
  Nvidia: "nvidia",
  Jina: "jina",
  Togetherai: "togetherai",
  Elevenlabs: "elevenlabs",
} as const;
export type CreatePromptPromptsProvider = ClosedEnum<
  typeof CreatePromptPromptsProvider
>;

/**
 * The role of the prompt message
 */
export const CreatePromptPromptsRole = {
  System: "system",
  Assistant: "assistant",
  User: "user",
  Exception: "exception",
  Tool: "tool",
  Prompt: "prompt",
  Correction: "correction",
  ExpectedOutput: "expected_output",
} as const;
/**
 * The role of the prompt message
 */
export type CreatePromptPromptsRole = ClosedEnum<
  typeof CreatePromptPromptsRole
>;

export const CreatePrompt2PromptsResponse200Type = {
  ImageUrl: "image_url",
} as const;
export type CreatePrompt2PromptsResponse200Type = ClosedEnum<
  typeof CreatePrompt2PromptsResponse200Type
>;

export type CreatePrompt2PromptsImageUrl = {
  /**
   * The orq.ai id of the image
   */
  id?: string | undefined;
  /**
   * Either a URL of the image or the base64 encoded data URI.
   */
  url: string;
  /**
   * Specifies the detail level of the image. Currently only supported with OpenAI models
   */
  detail?: string | undefined;
};

/**
 * The image part of the prompt message. Only supported with vision models.
 */
export type CreatePrompt2Prompts2 = {
  type: CreatePrompt2PromptsResponse200Type;
  imageUrl: CreatePrompt2PromptsImageUrl;
};

export const CreatePrompt2PromptsResponseType = {
  Text: "text",
} as const;
export type CreatePrompt2PromptsResponseType = ClosedEnum<
  typeof CreatePrompt2PromptsResponseType
>;

/**
 * Text content part of a prompt message
 */
export type CreatePrompt2Prompts1 = {
  type: CreatePrompt2PromptsResponseType;
  text: string;
};

export type CreatePromptContentPrompts2 =
  | CreatePrompt2Prompts1
  | CreatePrompt2Prompts2;

/**
 * The contents of the user message. Either the text content of the message or an array of content parts with a defined type, each can be of type `text` or `image_url` when passing in images. You can pass multiple images by adding multiple `image_url` content parts.
 */
export type CreatePromptPromptsContent =
  | string
  | Array<CreatePrompt2Prompts1 | CreatePrompt2Prompts2>;

export const CreatePromptPromptsResponseType = {
  Function: "function",
} as const;
export type CreatePromptPromptsResponseType = ClosedEnum<
  typeof CreatePromptPromptsResponseType
>;

export type CreatePromptPromptsFunction = {
  name: string;
  /**
   * JSON string arguments for the functions
   */
  arguments: string;
};

export type CreatePromptPromptsToolCalls = {
  id?: string | undefined;
  index?: number | undefined;
  type: CreatePromptPromptsResponseType;
  function: CreatePromptPromptsFunction;
};

export type CreatePromptPromptsMessages = {
  /**
   * The role of the prompt message
   */
  role: CreatePromptPromptsRole;
  /**
   * The contents of the user message. Either the text content of the message or an array of content parts with a defined type, each can be of type `text` or `image_url` when passing in images. You can pass multiple images by adding multiple `image_url` content parts.
   */
  content: string | Array<CreatePrompt2Prompts1 | CreatePrompt2Prompts2>;
  toolCalls?: Array<CreatePromptPromptsToolCalls> | undefined;
};

/**
 * A list of messages compatible with the openAI schema
 */
export type CreatePromptPromptsPromptConfig = {
  stream?: boolean | undefined;
  model?: string | undefined;
  /**
   * The id of the resource
   */
  modelDbId?: string | undefined;
  /**
   * The type of the model
   */
  modelType?: CreatePromptPromptsModelType | undefined;
  /**
   * Model Parameters: Not all parameters apply to every model
   */
  modelParameters?: CreatePromptPromptsModelParameters | undefined;
  provider?: CreatePromptPromptsProvider | undefined;
  /**
   * The id of the resource
   */
  integrationId?: string | null | undefined;
  version?: string | undefined;
  messages: Array<CreatePromptPromptsMessages>;
};

export const CreatePromptPromptsUseCases = {
  Agents: "Agents",
  AgentsSimulations: "Agents simulations",
  APIInteraction: "API interaction",
  AutonomousAgents: "Autonomous Agents",
  Chatbots: "Chatbots",
  Classification: "Classification",
  CodeUnderstanding: "Code understanding",
  CodeWriting: "Code writing",
  DocumentsQA: "Documents QA",
  Conversation: "Conversation",
  Extraction: "Extraction",
  MultiModal: "Multi-modal",
  SelfChecking: "Self-checking",
  Sql: "SQL",
  Summarization: "Summarization",
  Tagging: "Tagging",
} as const;
export type CreatePromptPromptsUseCases = ClosedEnum<
  typeof CreatePromptPromptsUseCases
>;

/**
 * The language that the prompt is written in. Use this field to categorize the prompt for your own purpose
 */
export const CreatePromptPromptsLanguage = {
  Chinese: "Chinese",
  Dutch: "Dutch",
  English: "English",
  French: "French",
  German: "German",
  Russian: "Russian",
  Spanish: "Spanish",
} as const;
/**
 * The language that the prompt is written in. Use this field to categorize the prompt for your own purpose
 */
export type CreatePromptPromptsLanguage = ClosedEnum<
  typeof CreatePromptPromptsLanguage
>;

export type CreatePromptPromptsMetadata = {
  /**
   * A list of use cases that the prompt is meant to be used for. Use this field to categorize the prompt for your own purpose
   */
  useCases?: Array<CreatePromptPromptsUseCases> | undefined;
  /**
   * The language that the prompt is written in. Use this field to categorize the prompt for your own purpose
   */
  language?: CreatePromptPromptsLanguage | undefined;
};

/**
 * Prompt created.
 */
export type CreatePromptResponseBody = {
  id: string;
  type: CreatePromptPromptsType;
  owner: string;
  domainId: string;
  created: string;
  updated: string;
  createdById?: string | undefined;
  updatedById?: string | undefined;
  /**
   * The prompt’s name, meant to be displayable in the UI.
   */
  displayName: string;
  /**
   * The prompt’s description, meant to be displayable in the UI. Use this field to optionally store a long form explanation of the prompt for your own purpose
   */
  description?: string | null | undefined;
  /**
   * A list of messages compatible with the openAI schema
   */
  promptConfig: CreatePromptPromptsPromptConfig;
  metadata?: CreatePromptPromptsMetadata | undefined;
};

/** @internal */
export const CreatePromptModelType$inboundSchema: z.ZodNativeEnum<
  typeof CreatePromptModelType
> = z.nativeEnum(CreatePromptModelType);

/** @internal */
export const CreatePromptModelType$outboundSchema: z.ZodNativeEnum<
  typeof CreatePromptModelType
> = CreatePromptModelType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreatePromptModelType$ {
  /** @deprecated use `CreatePromptModelType$inboundSchema` instead. */
  export const inboundSchema = CreatePromptModelType$inboundSchema;
  /** @deprecated use `CreatePromptModelType$outboundSchema` instead. */
  export const outboundSchema = CreatePromptModelType$outboundSchema;
}

/** @internal */
export const CreatePromptFormat$inboundSchema: z.ZodNativeEnum<
  typeof CreatePromptFormat
> = z.nativeEnum(CreatePromptFormat);

/** @internal */
export const CreatePromptFormat$outboundSchema: z.ZodNativeEnum<
  typeof CreatePromptFormat
> = CreatePromptFormat$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreatePromptFormat$ {
  /** @deprecated use `CreatePromptFormat$inboundSchema` instead. */
  export const inboundSchema = CreatePromptFormat$inboundSchema;
  /** @deprecated use `CreatePromptFormat$outboundSchema` instead. */
  export const outboundSchema = CreatePromptFormat$outboundSchema;
}

/** @internal */
export const CreatePromptQuality$inboundSchema: z.ZodNativeEnum<
  typeof CreatePromptQuality
> = z.nativeEnum(CreatePromptQuality);

/** @internal */
export const CreatePromptQuality$outboundSchema: z.ZodNativeEnum<
  typeof CreatePromptQuality
> = CreatePromptQuality$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreatePromptQuality$ {
  /** @deprecated use `CreatePromptQuality$inboundSchema` instead. */
  export const inboundSchema = CreatePromptQuality$inboundSchema;
  /** @deprecated use `CreatePromptQuality$outboundSchema` instead. */
  export const outboundSchema = CreatePromptQuality$outboundSchema;
}

/** @internal */
export const CreatePromptResponseFormatPromptsType$inboundSchema:
  z.ZodNativeEnum<typeof CreatePromptResponseFormatPromptsType> = z.nativeEnum(
    CreatePromptResponseFormatPromptsType,
  );

/** @internal */
export const CreatePromptResponseFormatPromptsType$outboundSchema:
  z.ZodNativeEnum<typeof CreatePromptResponseFormatPromptsType> =
    CreatePromptResponseFormatPromptsType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreatePromptResponseFormatPromptsType$ {
  /** @deprecated use `CreatePromptResponseFormatPromptsType$inboundSchema` instead. */
  export const inboundSchema =
    CreatePromptResponseFormatPromptsType$inboundSchema;
  /** @deprecated use `CreatePromptResponseFormatPromptsType$outboundSchema` instead. */
  export const outboundSchema =
    CreatePromptResponseFormatPromptsType$outboundSchema;
}

/** @internal */
export const CreatePromptResponseFormat2$inboundSchema: z.ZodType<
  CreatePromptResponseFormat2,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: CreatePromptResponseFormatPromptsType$inboundSchema,
});

/** @internal */
export type CreatePromptResponseFormat2$Outbound = {
  type: string;
};

/** @internal */
export const CreatePromptResponseFormat2$outboundSchema: z.ZodType<
  CreatePromptResponseFormat2$Outbound,
  z.ZodTypeDef,
  CreatePromptResponseFormat2
> = z.object({
  type: CreatePromptResponseFormatPromptsType$outboundSchema,
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreatePromptResponseFormat2$ {
  /** @deprecated use `CreatePromptResponseFormat2$inboundSchema` instead. */
  export const inboundSchema = CreatePromptResponseFormat2$inboundSchema;
  /** @deprecated use `CreatePromptResponseFormat2$outboundSchema` instead. */
  export const outboundSchema = CreatePromptResponseFormat2$outboundSchema;
  /** @deprecated use `CreatePromptResponseFormat2$Outbound` instead. */
  export type Outbound = CreatePromptResponseFormat2$Outbound;
}

export function createPromptResponseFormat2ToJSON(
  createPromptResponseFormat2: CreatePromptResponseFormat2,
): string {
  return JSON.stringify(
    CreatePromptResponseFormat2$outboundSchema.parse(
      createPromptResponseFormat2,
    ),
  );
}

export function createPromptResponseFormat2FromJSON(
  jsonString: string,
): SafeParseResult<CreatePromptResponseFormat2, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreatePromptResponseFormat2$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreatePromptResponseFormat2' from JSON`,
  );
}

/** @internal */
export const CreatePromptResponseFormatType$inboundSchema: z.ZodNativeEnum<
  typeof CreatePromptResponseFormatType
> = z.nativeEnum(CreatePromptResponseFormatType);

/** @internal */
export const CreatePromptResponseFormatType$outboundSchema: z.ZodNativeEnum<
  typeof CreatePromptResponseFormatType
> = CreatePromptResponseFormatType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreatePromptResponseFormatType$ {
  /** @deprecated use `CreatePromptResponseFormatType$inboundSchema` instead. */
  export const inboundSchema = CreatePromptResponseFormatType$inboundSchema;
  /** @deprecated use `CreatePromptResponseFormatType$outboundSchema` instead. */
  export const outboundSchema = CreatePromptResponseFormatType$outboundSchema;
}

/** @internal */
export const CreatePromptResponseFormatJsonSchema$inboundSchema: z.ZodType<
  CreatePromptResponseFormatJsonSchema,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.string(),
  strict: z.boolean(),
  schema: z.record(z.any()),
});

/** @internal */
export type CreatePromptResponseFormatJsonSchema$Outbound = {
  name: string;
  strict: boolean;
  schema: { [k: string]: any };
};

/** @internal */
export const CreatePromptResponseFormatJsonSchema$outboundSchema: z.ZodType<
  CreatePromptResponseFormatJsonSchema$Outbound,
  z.ZodTypeDef,
  CreatePromptResponseFormatJsonSchema
> = z.object({
  name: z.string(),
  strict: z.boolean(),
  schema: z.record(z.any()),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreatePromptResponseFormatJsonSchema$ {
  /** @deprecated use `CreatePromptResponseFormatJsonSchema$inboundSchema` instead. */
  export const inboundSchema =
    CreatePromptResponseFormatJsonSchema$inboundSchema;
  /** @deprecated use `CreatePromptResponseFormatJsonSchema$outboundSchema` instead. */
  export const outboundSchema =
    CreatePromptResponseFormatJsonSchema$outboundSchema;
  /** @deprecated use `CreatePromptResponseFormatJsonSchema$Outbound` instead. */
  export type Outbound = CreatePromptResponseFormatJsonSchema$Outbound;
}

export function createPromptResponseFormatJsonSchemaToJSON(
  createPromptResponseFormatJsonSchema: CreatePromptResponseFormatJsonSchema,
): string {
  return JSON.stringify(
    CreatePromptResponseFormatJsonSchema$outboundSchema.parse(
      createPromptResponseFormatJsonSchema,
    ),
  );
}

export function createPromptResponseFormatJsonSchemaFromJSON(
  jsonString: string,
): SafeParseResult<CreatePromptResponseFormatJsonSchema, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      CreatePromptResponseFormatJsonSchema$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreatePromptResponseFormatJsonSchema' from JSON`,
  );
}

/** @internal */
export const CreatePromptResponseFormat1$inboundSchema: z.ZodType<
  CreatePromptResponseFormat1,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: CreatePromptResponseFormatType$inboundSchema,
  json_schema: z.lazy(() => CreatePromptResponseFormatJsonSchema$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "json_schema": "jsonSchema",
  });
});

/** @internal */
export type CreatePromptResponseFormat1$Outbound = {
  type: string;
  json_schema: CreatePromptResponseFormatJsonSchema$Outbound;
};

/** @internal */
export const CreatePromptResponseFormat1$outboundSchema: z.ZodType<
  CreatePromptResponseFormat1$Outbound,
  z.ZodTypeDef,
  CreatePromptResponseFormat1
> = z.object({
  type: CreatePromptResponseFormatType$outboundSchema,
  jsonSchema: z.lazy(() => CreatePromptResponseFormatJsonSchema$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    jsonSchema: "json_schema",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreatePromptResponseFormat1$ {
  /** @deprecated use `CreatePromptResponseFormat1$inboundSchema` instead. */
  export const inboundSchema = CreatePromptResponseFormat1$inboundSchema;
  /** @deprecated use `CreatePromptResponseFormat1$outboundSchema` instead. */
  export const outboundSchema = CreatePromptResponseFormat1$outboundSchema;
  /** @deprecated use `CreatePromptResponseFormat1$Outbound` instead. */
  export type Outbound = CreatePromptResponseFormat1$Outbound;
}

export function createPromptResponseFormat1ToJSON(
  createPromptResponseFormat1: CreatePromptResponseFormat1,
): string {
  return JSON.stringify(
    CreatePromptResponseFormat1$outboundSchema.parse(
      createPromptResponseFormat1,
    ),
  );
}

export function createPromptResponseFormat1FromJSON(
  jsonString: string,
): SafeParseResult<CreatePromptResponseFormat1, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreatePromptResponseFormat1$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreatePromptResponseFormat1' from JSON`,
  );
}

/** @internal */
export const CreatePromptResponseFormat$inboundSchema: z.ZodType<
  CreatePromptResponseFormat,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => CreatePromptResponseFormat2$inboundSchema),
  z.lazy(() => CreatePromptResponseFormat1$inboundSchema),
]);

/** @internal */
export type CreatePromptResponseFormat$Outbound =
  | CreatePromptResponseFormat2$Outbound
  | CreatePromptResponseFormat1$Outbound;

/** @internal */
export const CreatePromptResponseFormat$outboundSchema: z.ZodType<
  CreatePromptResponseFormat$Outbound,
  z.ZodTypeDef,
  CreatePromptResponseFormat
> = z.union([
  z.lazy(() => CreatePromptResponseFormat2$outboundSchema),
  z.lazy(() => CreatePromptResponseFormat1$outboundSchema),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreatePromptResponseFormat$ {
  /** @deprecated use `CreatePromptResponseFormat$inboundSchema` instead. */
  export const inboundSchema = CreatePromptResponseFormat$inboundSchema;
  /** @deprecated use `CreatePromptResponseFormat$outboundSchema` instead. */
  export const outboundSchema = CreatePromptResponseFormat$outboundSchema;
  /** @deprecated use `CreatePromptResponseFormat$Outbound` instead. */
  export type Outbound = CreatePromptResponseFormat$Outbound;
}

export function createPromptResponseFormatToJSON(
  createPromptResponseFormat: CreatePromptResponseFormat,
): string {
  return JSON.stringify(
    CreatePromptResponseFormat$outboundSchema.parse(createPromptResponseFormat),
  );
}

export function createPromptResponseFormatFromJSON(
  jsonString: string,
): SafeParseResult<CreatePromptResponseFormat, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreatePromptResponseFormat$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreatePromptResponseFormat' from JSON`,
  );
}

/** @internal */
export const CreatePromptPhotoRealVersion$inboundSchema: z.ZodNativeEnum<
  typeof CreatePromptPhotoRealVersion
> = z.nativeEnum(CreatePromptPhotoRealVersion);

/** @internal */
export const CreatePromptPhotoRealVersion$outboundSchema: z.ZodNativeEnum<
  typeof CreatePromptPhotoRealVersion
> = CreatePromptPhotoRealVersion$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreatePromptPhotoRealVersion$ {
  /** @deprecated use `CreatePromptPhotoRealVersion$inboundSchema` instead. */
  export const inboundSchema = CreatePromptPhotoRealVersion$inboundSchema;
  /** @deprecated use `CreatePromptPhotoRealVersion$outboundSchema` instead. */
  export const outboundSchema = CreatePromptPhotoRealVersion$outboundSchema;
}

/** @internal */
export const CreatePromptEncodingFormat$inboundSchema: z.ZodNativeEnum<
  typeof CreatePromptEncodingFormat
> = z.nativeEnum(CreatePromptEncodingFormat);

/** @internal */
export const CreatePromptEncodingFormat$outboundSchema: z.ZodNativeEnum<
  typeof CreatePromptEncodingFormat
> = CreatePromptEncodingFormat$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreatePromptEncodingFormat$ {
  /** @deprecated use `CreatePromptEncodingFormat$inboundSchema` instead. */
  export const inboundSchema = CreatePromptEncodingFormat$inboundSchema;
  /** @deprecated use `CreatePromptEncodingFormat$outboundSchema` instead. */
  export const outboundSchema = CreatePromptEncodingFormat$outboundSchema;
}

/** @internal */
export const CreatePromptReasoningEffort$inboundSchema: z.ZodNativeEnum<
  typeof CreatePromptReasoningEffort
> = z.nativeEnum(CreatePromptReasoningEffort);

/** @internal */
export const CreatePromptReasoningEffort$outboundSchema: z.ZodNativeEnum<
  typeof CreatePromptReasoningEffort
> = CreatePromptReasoningEffort$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreatePromptReasoningEffort$ {
  /** @deprecated use `CreatePromptReasoningEffort$inboundSchema` instead. */
  export const inboundSchema = CreatePromptReasoningEffort$inboundSchema;
  /** @deprecated use `CreatePromptReasoningEffort$outboundSchema` instead. */
  export const outboundSchema = CreatePromptReasoningEffort$outboundSchema;
}

/** @internal */
export const CreatePromptModelParameters$inboundSchema: z.ZodType<
  CreatePromptModelParameters,
  z.ZodTypeDef,
  unknown
> = z.object({
  temperature: z.number().optional(),
  maxTokens: z.number().optional(),
  topK: z.number().optional(),
  topP: z.number().optional(),
  frequencyPenalty: z.number().optional(),
  presencePenalty: z.number().optional(),
  numImages: z.number().optional(),
  seed: z.number().optional(),
  format: CreatePromptFormat$inboundSchema.optional(),
  dimensions: z.string().optional(),
  quality: CreatePromptQuality$inboundSchema.optional(),
  style: z.string().optional(),
  responseFormat: z.nullable(
    z.union([
      z.lazy(() => CreatePromptResponseFormat2$inboundSchema),
      z.lazy(() => CreatePromptResponseFormat1$inboundSchema),
    ]),
  ).optional(),
  photoRealVersion: CreatePromptPhotoRealVersion$inboundSchema.optional(),
  encoding_format: CreatePromptEncodingFormat$inboundSchema.optional(),
  reasoningEffort: CreatePromptReasoningEffort$inboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    "encoding_format": "encodingFormat",
  });
});

/** @internal */
export type CreatePromptModelParameters$Outbound = {
  temperature?: number | undefined;
  maxTokens?: number | undefined;
  topK?: number | undefined;
  topP?: number | undefined;
  frequencyPenalty?: number | undefined;
  presencePenalty?: number | undefined;
  numImages?: number | undefined;
  seed?: number | undefined;
  format?: string | undefined;
  dimensions?: string | undefined;
  quality?: string | undefined;
  style?: string | undefined;
  responseFormat?:
    | CreatePromptResponseFormat2$Outbound
    | CreatePromptResponseFormat1$Outbound
    | null
    | undefined;
  photoRealVersion?: string | undefined;
  encoding_format?: string | undefined;
  reasoningEffort?: string | undefined;
};

/** @internal */
export const CreatePromptModelParameters$outboundSchema: z.ZodType<
  CreatePromptModelParameters$Outbound,
  z.ZodTypeDef,
  CreatePromptModelParameters
> = z.object({
  temperature: z.number().optional(),
  maxTokens: z.number().optional(),
  topK: z.number().optional(),
  topP: z.number().optional(),
  frequencyPenalty: z.number().optional(),
  presencePenalty: z.number().optional(),
  numImages: z.number().optional(),
  seed: z.number().optional(),
  format: CreatePromptFormat$outboundSchema.optional(),
  dimensions: z.string().optional(),
  quality: CreatePromptQuality$outboundSchema.optional(),
  style: z.string().optional(),
  responseFormat: z.nullable(
    z.union([
      z.lazy(() => CreatePromptResponseFormat2$outboundSchema),
      z.lazy(() => CreatePromptResponseFormat1$outboundSchema),
    ]),
  ).optional(),
  photoRealVersion: CreatePromptPhotoRealVersion$outboundSchema.optional(),
  encodingFormat: CreatePromptEncodingFormat$outboundSchema.optional(),
  reasoningEffort: CreatePromptReasoningEffort$outboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    encodingFormat: "encoding_format",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreatePromptModelParameters$ {
  /** @deprecated use `CreatePromptModelParameters$inboundSchema` instead. */
  export const inboundSchema = CreatePromptModelParameters$inboundSchema;
  /** @deprecated use `CreatePromptModelParameters$outboundSchema` instead. */
  export const outboundSchema = CreatePromptModelParameters$outboundSchema;
  /** @deprecated use `CreatePromptModelParameters$Outbound` instead. */
  export type Outbound = CreatePromptModelParameters$Outbound;
}

export function createPromptModelParametersToJSON(
  createPromptModelParameters: CreatePromptModelParameters,
): string {
  return JSON.stringify(
    CreatePromptModelParameters$outboundSchema.parse(
      createPromptModelParameters,
    ),
  );
}

export function createPromptModelParametersFromJSON(
  jsonString: string,
): SafeParseResult<CreatePromptModelParameters, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreatePromptModelParameters$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreatePromptModelParameters' from JSON`,
  );
}

/** @internal */
export const CreatePromptProvider$inboundSchema: z.ZodNativeEnum<
  typeof CreatePromptProvider
> = z.nativeEnum(CreatePromptProvider);

/** @internal */
export const CreatePromptProvider$outboundSchema: z.ZodNativeEnum<
  typeof CreatePromptProvider
> = CreatePromptProvider$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreatePromptProvider$ {
  /** @deprecated use `CreatePromptProvider$inboundSchema` instead. */
  export const inboundSchema = CreatePromptProvider$inboundSchema;
  /** @deprecated use `CreatePromptProvider$outboundSchema` instead. */
  export const outboundSchema = CreatePromptProvider$outboundSchema;
}

/** @internal */
export const CreatePromptRole$inboundSchema: z.ZodNativeEnum<
  typeof CreatePromptRole
> = z.nativeEnum(CreatePromptRole);

/** @internal */
export const CreatePromptRole$outboundSchema: z.ZodNativeEnum<
  typeof CreatePromptRole
> = CreatePromptRole$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreatePromptRole$ {
  /** @deprecated use `CreatePromptRole$inboundSchema` instead. */
  export const inboundSchema = CreatePromptRole$inboundSchema;
  /** @deprecated use `CreatePromptRole$outboundSchema` instead. */
  export const outboundSchema = CreatePromptRole$outboundSchema;
}

/** @internal */
export const CreatePrompt2PromptsType$inboundSchema: z.ZodNativeEnum<
  typeof CreatePrompt2PromptsType
> = z.nativeEnum(CreatePrompt2PromptsType);

/** @internal */
export const CreatePrompt2PromptsType$outboundSchema: z.ZodNativeEnum<
  typeof CreatePrompt2PromptsType
> = CreatePrompt2PromptsType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreatePrompt2PromptsType$ {
  /** @deprecated use `CreatePrompt2PromptsType$inboundSchema` instead. */
  export const inboundSchema = CreatePrompt2PromptsType$inboundSchema;
  /** @deprecated use `CreatePrompt2PromptsType$outboundSchema` instead. */
  export const outboundSchema = CreatePrompt2PromptsType$outboundSchema;
}

/** @internal */
export const CreatePrompt2ImageUrl$inboundSchema: z.ZodType<
  CreatePrompt2ImageUrl,
  z.ZodTypeDef,
  unknown
> = z.object({
  url: z.string(),
  detail: z.string().optional(),
});

/** @internal */
export type CreatePrompt2ImageUrl$Outbound = {
  url: string;
  detail?: string | undefined;
};

/** @internal */
export const CreatePrompt2ImageUrl$outboundSchema: z.ZodType<
  CreatePrompt2ImageUrl$Outbound,
  z.ZodTypeDef,
  CreatePrompt2ImageUrl
> = z.object({
  url: z.string(),
  detail: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreatePrompt2ImageUrl$ {
  /** @deprecated use `CreatePrompt2ImageUrl$inboundSchema` instead. */
  export const inboundSchema = CreatePrompt2ImageUrl$inboundSchema;
  /** @deprecated use `CreatePrompt2ImageUrl$outboundSchema` instead. */
  export const outboundSchema = CreatePrompt2ImageUrl$outboundSchema;
  /** @deprecated use `CreatePrompt2ImageUrl$Outbound` instead. */
  export type Outbound = CreatePrompt2ImageUrl$Outbound;
}

export function createPrompt2ImageUrlToJSON(
  createPrompt2ImageUrl: CreatePrompt2ImageUrl,
): string {
  return JSON.stringify(
    CreatePrompt2ImageUrl$outboundSchema.parse(createPrompt2ImageUrl),
  );
}

export function createPrompt2ImageUrlFromJSON(
  jsonString: string,
): SafeParseResult<CreatePrompt2ImageUrl, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreatePrompt2ImageUrl$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreatePrompt2ImageUrl' from JSON`,
  );
}

/** @internal */
export const CreatePrompt22$inboundSchema: z.ZodType<
  CreatePrompt22,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: CreatePrompt2PromptsType$inboundSchema,
  image_url: z.lazy(() => CreatePrompt2ImageUrl$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "image_url": "imageUrl",
  });
});

/** @internal */
export type CreatePrompt22$Outbound = {
  type: string;
  image_url: CreatePrompt2ImageUrl$Outbound;
};

/** @internal */
export const CreatePrompt22$outboundSchema: z.ZodType<
  CreatePrompt22$Outbound,
  z.ZodTypeDef,
  CreatePrompt22
> = z.object({
  type: CreatePrompt2PromptsType$outboundSchema,
  imageUrl: z.lazy(() => CreatePrompt2ImageUrl$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    imageUrl: "image_url",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreatePrompt22$ {
  /** @deprecated use `CreatePrompt22$inboundSchema` instead. */
  export const inboundSchema = CreatePrompt22$inboundSchema;
  /** @deprecated use `CreatePrompt22$outboundSchema` instead. */
  export const outboundSchema = CreatePrompt22$outboundSchema;
  /** @deprecated use `CreatePrompt22$Outbound` instead. */
  export type Outbound = CreatePrompt22$Outbound;
}

export function createPrompt22ToJSON(createPrompt22: CreatePrompt22): string {
  return JSON.stringify(CreatePrompt22$outboundSchema.parse(createPrompt22));
}

export function createPrompt22FromJSON(
  jsonString: string,
): SafeParseResult<CreatePrompt22, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreatePrompt22$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreatePrompt22' from JSON`,
  );
}

/** @internal */
export const CreatePrompt2Type$inboundSchema: z.ZodNativeEnum<
  typeof CreatePrompt2Type
> = z.nativeEnum(CreatePrompt2Type);

/** @internal */
export const CreatePrompt2Type$outboundSchema: z.ZodNativeEnum<
  typeof CreatePrompt2Type
> = CreatePrompt2Type$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreatePrompt2Type$ {
  /** @deprecated use `CreatePrompt2Type$inboundSchema` instead. */
  export const inboundSchema = CreatePrompt2Type$inboundSchema;
  /** @deprecated use `CreatePrompt2Type$outboundSchema` instead. */
  export const outboundSchema = CreatePrompt2Type$outboundSchema;
}

/** @internal */
export const CreatePrompt21$inboundSchema: z.ZodType<
  CreatePrompt21,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: CreatePrompt2Type$inboundSchema,
  text: z.string(),
});

/** @internal */
export type CreatePrompt21$Outbound = {
  type: string;
  text: string;
};

/** @internal */
export const CreatePrompt21$outboundSchema: z.ZodType<
  CreatePrompt21$Outbound,
  z.ZodTypeDef,
  CreatePrompt21
> = z.object({
  type: CreatePrompt2Type$outboundSchema,
  text: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreatePrompt21$ {
  /** @deprecated use `CreatePrompt21$inboundSchema` instead. */
  export const inboundSchema = CreatePrompt21$inboundSchema;
  /** @deprecated use `CreatePrompt21$outboundSchema` instead. */
  export const outboundSchema = CreatePrompt21$outboundSchema;
  /** @deprecated use `CreatePrompt21$Outbound` instead. */
  export type Outbound = CreatePrompt21$Outbound;
}

export function createPrompt21ToJSON(createPrompt21: CreatePrompt21): string {
  return JSON.stringify(CreatePrompt21$outboundSchema.parse(createPrompt21));
}

export function createPrompt21FromJSON(
  jsonString: string,
): SafeParseResult<CreatePrompt21, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreatePrompt21$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreatePrompt21' from JSON`,
  );
}

/** @internal */
export const CreatePromptContent2$inboundSchema: z.ZodType<
  CreatePromptContent2,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => CreatePrompt21$inboundSchema),
  z.lazy(() => CreatePrompt22$inboundSchema),
]);

/** @internal */
export type CreatePromptContent2$Outbound =
  | CreatePrompt21$Outbound
  | CreatePrompt22$Outbound;

/** @internal */
export const CreatePromptContent2$outboundSchema: z.ZodType<
  CreatePromptContent2$Outbound,
  z.ZodTypeDef,
  CreatePromptContent2
> = z.union([
  z.lazy(() => CreatePrompt21$outboundSchema),
  z.lazy(() => CreatePrompt22$outboundSchema),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreatePromptContent2$ {
  /** @deprecated use `CreatePromptContent2$inboundSchema` instead. */
  export const inboundSchema = CreatePromptContent2$inboundSchema;
  /** @deprecated use `CreatePromptContent2$outboundSchema` instead. */
  export const outboundSchema = CreatePromptContent2$outboundSchema;
  /** @deprecated use `CreatePromptContent2$Outbound` instead. */
  export type Outbound = CreatePromptContent2$Outbound;
}

export function createPromptContent2ToJSON(
  createPromptContent2: CreatePromptContent2,
): string {
  return JSON.stringify(
    CreatePromptContent2$outboundSchema.parse(createPromptContent2),
  );
}

export function createPromptContent2FromJSON(
  jsonString: string,
): SafeParseResult<CreatePromptContent2, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreatePromptContent2$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreatePromptContent2' from JSON`,
  );
}

/** @internal */
export const CreatePromptContent$inboundSchema: z.ZodType<
  CreatePromptContent,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.string(),
  z.array(z.union([
    z.lazy(() => CreatePrompt21$inboundSchema),
    z.lazy(() => CreatePrompt22$inboundSchema),
  ])),
]);

/** @internal */
export type CreatePromptContent$Outbound =
  | string
  | Array<CreatePrompt21$Outbound | CreatePrompt22$Outbound>;

/** @internal */
export const CreatePromptContent$outboundSchema: z.ZodType<
  CreatePromptContent$Outbound,
  z.ZodTypeDef,
  CreatePromptContent
> = z.union([
  z.string(),
  z.array(z.union([
    z.lazy(() => CreatePrompt21$outboundSchema),
    z.lazy(() => CreatePrompt22$outboundSchema),
  ])),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreatePromptContent$ {
  /** @deprecated use `CreatePromptContent$inboundSchema` instead. */
  export const inboundSchema = CreatePromptContent$inboundSchema;
  /** @deprecated use `CreatePromptContent$outboundSchema` instead. */
  export const outboundSchema = CreatePromptContent$outboundSchema;
  /** @deprecated use `CreatePromptContent$Outbound` instead. */
  export type Outbound = CreatePromptContent$Outbound;
}

export function createPromptContentToJSON(
  createPromptContent: CreatePromptContent,
): string {
  return JSON.stringify(
    CreatePromptContent$outboundSchema.parse(createPromptContent),
  );
}

export function createPromptContentFromJSON(
  jsonString: string,
): SafeParseResult<CreatePromptContent, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreatePromptContent$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreatePromptContent' from JSON`,
  );
}

/** @internal */
export const CreatePromptType$inboundSchema: z.ZodNativeEnum<
  typeof CreatePromptType
> = z.nativeEnum(CreatePromptType);

/** @internal */
export const CreatePromptType$outboundSchema: z.ZodNativeEnum<
  typeof CreatePromptType
> = CreatePromptType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreatePromptType$ {
  /** @deprecated use `CreatePromptType$inboundSchema` instead. */
  export const inboundSchema = CreatePromptType$inboundSchema;
  /** @deprecated use `CreatePromptType$outboundSchema` instead. */
  export const outboundSchema = CreatePromptType$outboundSchema;
}

/** @internal */
export const CreatePromptFunction$inboundSchema: z.ZodType<
  CreatePromptFunction,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.string(),
  arguments: z.string(),
});

/** @internal */
export type CreatePromptFunction$Outbound = {
  name: string;
  arguments: string;
};

/** @internal */
export const CreatePromptFunction$outboundSchema: z.ZodType<
  CreatePromptFunction$Outbound,
  z.ZodTypeDef,
  CreatePromptFunction
> = z.object({
  name: z.string(),
  arguments: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreatePromptFunction$ {
  /** @deprecated use `CreatePromptFunction$inboundSchema` instead. */
  export const inboundSchema = CreatePromptFunction$inboundSchema;
  /** @deprecated use `CreatePromptFunction$outboundSchema` instead. */
  export const outboundSchema = CreatePromptFunction$outboundSchema;
  /** @deprecated use `CreatePromptFunction$Outbound` instead. */
  export type Outbound = CreatePromptFunction$Outbound;
}

export function createPromptFunctionToJSON(
  createPromptFunction: CreatePromptFunction,
): string {
  return JSON.stringify(
    CreatePromptFunction$outboundSchema.parse(createPromptFunction),
  );
}

export function createPromptFunctionFromJSON(
  jsonString: string,
): SafeParseResult<CreatePromptFunction, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreatePromptFunction$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreatePromptFunction' from JSON`,
  );
}

/** @internal */
export const CreatePromptToolCalls$inboundSchema: z.ZodType<
  CreatePromptToolCalls,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string().optional(),
  index: z.number().optional(),
  type: CreatePromptType$inboundSchema,
  function: z.lazy(() => CreatePromptFunction$inboundSchema),
});

/** @internal */
export type CreatePromptToolCalls$Outbound = {
  id?: string | undefined;
  index?: number | undefined;
  type: string;
  function: CreatePromptFunction$Outbound;
};

/** @internal */
export const CreatePromptToolCalls$outboundSchema: z.ZodType<
  CreatePromptToolCalls$Outbound,
  z.ZodTypeDef,
  CreatePromptToolCalls
> = z.object({
  id: z.string().optional(),
  index: z.number().optional(),
  type: CreatePromptType$outboundSchema,
  function: z.lazy(() => CreatePromptFunction$outboundSchema),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreatePromptToolCalls$ {
  /** @deprecated use `CreatePromptToolCalls$inboundSchema` instead. */
  export const inboundSchema = CreatePromptToolCalls$inboundSchema;
  /** @deprecated use `CreatePromptToolCalls$outboundSchema` instead. */
  export const outboundSchema = CreatePromptToolCalls$outboundSchema;
  /** @deprecated use `CreatePromptToolCalls$Outbound` instead. */
  export type Outbound = CreatePromptToolCalls$Outbound;
}

export function createPromptToolCallsToJSON(
  createPromptToolCalls: CreatePromptToolCalls,
): string {
  return JSON.stringify(
    CreatePromptToolCalls$outboundSchema.parse(createPromptToolCalls),
  );
}

export function createPromptToolCallsFromJSON(
  jsonString: string,
): SafeParseResult<CreatePromptToolCalls, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreatePromptToolCalls$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreatePromptToolCalls' from JSON`,
  );
}

/** @internal */
export const CreatePromptMessages$inboundSchema: z.ZodType<
  CreatePromptMessages,
  z.ZodTypeDef,
  unknown
> = z.object({
  role: CreatePromptRole$inboundSchema,
  content: z.union([
    z.string(),
    z.array(z.union([
      z.lazy(() => CreatePrompt21$inboundSchema),
      z.lazy(() => CreatePrompt22$inboundSchema),
    ])),
  ]),
  tool_calls: z.array(z.lazy(() => CreatePromptToolCalls$inboundSchema))
    .optional(),
}).transform((v) => {
  return remap$(v, {
    "tool_calls": "toolCalls",
  });
});

/** @internal */
export type CreatePromptMessages$Outbound = {
  role: string;
  content: string | Array<CreatePrompt21$Outbound | CreatePrompt22$Outbound>;
  tool_calls?: Array<CreatePromptToolCalls$Outbound> | undefined;
};

/** @internal */
export const CreatePromptMessages$outboundSchema: z.ZodType<
  CreatePromptMessages$Outbound,
  z.ZodTypeDef,
  CreatePromptMessages
> = z.object({
  role: CreatePromptRole$outboundSchema,
  content: z.union([
    z.string(),
    z.array(z.union([
      z.lazy(() => CreatePrompt21$outboundSchema),
      z.lazy(() => CreatePrompt22$outboundSchema),
    ])),
  ]),
  toolCalls: z.array(z.lazy(() => CreatePromptToolCalls$outboundSchema))
    .optional(),
}).transform((v) => {
  return remap$(v, {
    toolCalls: "tool_calls",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreatePromptMessages$ {
  /** @deprecated use `CreatePromptMessages$inboundSchema` instead. */
  export const inboundSchema = CreatePromptMessages$inboundSchema;
  /** @deprecated use `CreatePromptMessages$outboundSchema` instead. */
  export const outboundSchema = CreatePromptMessages$outboundSchema;
  /** @deprecated use `CreatePromptMessages$Outbound` instead. */
  export type Outbound = CreatePromptMessages$Outbound;
}

export function createPromptMessagesToJSON(
  createPromptMessages: CreatePromptMessages,
): string {
  return JSON.stringify(
    CreatePromptMessages$outboundSchema.parse(createPromptMessages),
  );
}

export function createPromptMessagesFromJSON(
  jsonString: string,
): SafeParseResult<CreatePromptMessages, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreatePromptMessages$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreatePromptMessages' from JSON`,
  );
}

/** @internal */
export const CreatePromptPromptConfig$inboundSchema: z.ZodType<
  CreatePromptPromptConfig,
  z.ZodTypeDef,
  unknown
> = z.object({
  stream: z.boolean().optional(),
  model: z.string().optional(),
  model_type: CreatePromptModelType$inboundSchema.optional(),
  model_parameters: z.lazy(() => CreatePromptModelParameters$inboundSchema)
    .optional(),
  provider: CreatePromptProvider$inboundSchema.optional(),
  version: z.string().optional(),
  messages: z.array(z.lazy(() => CreatePromptMessages$inboundSchema)),
}).transform((v) => {
  return remap$(v, {
    "model_type": "modelType",
    "model_parameters": "modelParameters",
  });
});

/** @internal */
export type CreatePromptPromptConfig$Outbound = {
  stream?: boolean | undefined;
  model?: string | undefined;
  model_type?: string | undefined;
  model_parameters?: CreatePromptModelParameters$Outbound | undefined;
  provider?: string | undefined;
  version?: string | undefined;
  messages: Array<CreatePromptMessages$Outbound>;
};

/** @internal */
export const CreatePromptPromptConfig$outboundSchema: z.ZodType<
  CreatePromptPromptConfig$Outbound,
  z.ZodTypeDef,
  CreatePromptPromptConfig
> = z.object({
  stream: z.boolean().optional(),
  model: z.string().optional(),
  modelType: CreatePromptModelType$outboundSchema.optional(),
  modelParameters: z.lazy(() => CreatePromptModelParameters$outboundSchema)
    .optional(),
  provider: CreatePromptProvider$outboundSchema.optional(),
  version: z.string().optional(),
  messages: z.array(z.lazy(() => CreatePromptMessages$outboundSchema)),
}).transform((v) => {
  return remap$(v, {
    modelType: "model_type",
    modelParameters: "model_parameters",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreatePromptPromptConfig$ {
  /** @deprecated use `CreatePromptPromptConfig$inboundSchema` instead. */
  export const inboundSchema = CreatePromptPromptConfig$inboundSchema;
  /** @deprecated use `CreatePromptPromptConfig$outboundSchema` instead. */
  export const outboundSchema = CreatePromptPromptConfig$outboundSchema;
  /** @deprecated use `CreatePromptPromptConfig$Outbound` instead. */
  export type Outbound = CreatePromptPromptConfig$Outbound;
}

export function createPromptPromptConfigToJSON(
  createPromptPromptConfig: CreatePromptPromptConfig,
): string {
  return JSON.stringify(
    CreatePromptPromptConfig$outboundSchema.parse(createPromptPromptConfig),
  );
}

export function createPromptPromptConfigFromJSON(
  jsonString: string,
): SafeParseResult<CreatePromptPromptConfig, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreatePromptPromptConfig$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreatePromptPromptConfig' from JSON`,
  );
}

/** @internal */
export const CreatePromptUseCases$inboundSchema: z.ZodNativeEnum<
  typeof CreatePromptUseCases
> = z.nativeEnum(CreatePromptUseCases);

/** @internal */
export const CreatePromptUseCases$outboundSchema: z.ZodNativeEnum<
  typeof CreatePromptUseCases
> = CreatePromptUseCases$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreatePromptUseCases$ {
  /** @deprecated use `CreatePromptUseCases$inboundSchema` instead. */
  export const inboundSchema = CreatePromptUseCases$inboundSchema;
  /** @deprecated use `CreatePromptUseCases$outboundSchema` instead. */
  export const outboundSchema = CreatePromptUseCases$outboundSchema;
}

/** @internal */
export const CreatePromptLanguage$inboundSchema: z.ZodNativeEnum<
  typeof CreatePromptLanguage
> = z.nativeEnum(CreatePromptLanguage);

/** @internal */
export const CreatePromptLanguage$outboundSchema: z.ZodNativeEnum<
  typeof CreatePromptLanguage
> = CreatePromptLanguage$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreatePromptLanguage$ {
  /** @deprecated use `CreatePromptLanguage$inboundSchema` instead. */
  export const inboundSchema = CreatePromptLanguage$inboundSchema;
  /** @deprecated use `CreatePromptLanguage$outboundSchema` instead. */
  export const outboundSchema = CreatePromptLanguage$outboundSchema;
}

/** @internal */
export const CreatePromptMetadata$inboundSchema: z.ZodType<
  CreatePromptMetadata,
  z.ZodTypeDef,
  unknown
> = z.object({
  use_cases: z.array(CreatePromptUseCases$inboundSchema).optional(),
  language: CreatePromptLanguage$inboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    "use_cases": "useCases",
  });
});

/** @internal */
export type CreatePromptMetadata$Outbound = {
  use_cases?: Array<string> | undefined;
  language?: string | undefined;
};

/** @internal */
export const CreatePromptMetadata$outboundSchema: z.ZodType<
  CreatePromptMetadata$Outbound,
  z.ZodTypeDef,
  CreatePromptMetadata
> = z.object({
  useCases: z.array(CreatePromptUseCases$outboundSchema).optional(),
  language: CreatePromptLanguage$outboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    useCases: "use_cases",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreatePromptMetadata$ {
  /** @deprecated use `CreatePromptMetadata$inboundSchema` instead. */
  export const inboundSchema = CreatePromptMetadata$inboundSchema;
  /** @deprecated use `CreatePromptMetadata$outboundSchema` instead. */
  export const outboundSchema = CreatePromptMetadata$outboundSchema;
  /** @deprecated use `CreatePromptMetadata$Outbound` instead. */
  export type Outbound = CreatePromptMetadata$Outbound;
}

export function createPromptMetadataToJSON(
  createPromptMetadata: CreatePromptMetadata,
): string {
  return JSON.stringify(
    CreatePromptMetadata$outboundSchema.parse(createPromptMetadata),
  );
}

export function createPromptMetadataFromJSON(
  jsonString: string,
): SafeParseResult<CreatePromptMetadata, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreatePromptMetadata$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreatePromptMetadata' from JSON`,
  );
}

/** @internal */
export const CreatePromptRequestBody$inboundSchema: z.ZodType<
  CreatePromptRequestBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  display_name: z.string(),
  description: z.nullable(z.string()).optional(),
  prompt_config: z.lazy(() => CreatePromptPromptConfig$inboundSchema),
  metadata: z.lazy(() => CreatePromptMetadata$inboundSchema).optional(),
  path: z.string(),
}).transform((v) => {
  return remap$(v, {
    "display_name": "displayName",
    "prompt_config": "promptConfig",
  });
});

/** @internal */
export type CreatePromptRequestBody$Outbound = {
  display_name: string;
  description?: string | null | undefined;
  prompt_config: CreatePromptPromptConfig$Outbound;
  metadata?: CreatePromptMetadata$Outbound | undefined;
  path: string;
};

/** @internal */
export const CreatePromptRequestBody$outboundSchema: z.ZodType<
  CreatePromptRequestBody$Outbound,
  z.ZodTypeDef,
  CreatePromptRequestBody
> = z.object({
  displayName: z.string(),
  description: z.nullable(z.string()).optional(),
  promptConfig: z.lazy(() => CreatePromptPromptConfig$outboundSchema),
  metadata: z.lazy(() => CreatePromptMetadata$outboundSchema).optional(),
  path: z.string(),
}).transform((v) => {
  return remap$(v, {
    displayName: "display_name",
    promptConfig: "prompt_config",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreatePromptRequestBody$ {
  /** @deprecated use `CreatePromptRequestBody$inboundSchema` instead. */
  export const inboundSchema = CreatePromptRequestBody$inboundSchema;
  /** @deprecated use `CreatePromptRequestBody$outboundSchema` instead. */
  export const outboundSchema = CreatePromptRequestBody$outboundSchema;
  /** @deprecated use `CreatePromptRequestBody$Outbound` instead. */
  export type Outbound = CreatePromptRequestBody$Outbound;
}

export function createPromptRequestBodyToJSON(
  createPromptRequestBody: CreatePromptRequestBody,
): string {
  return JSON.stringify(
    CreatePromptRequestBody$outboundSchema.parse(createPromptRequestBody),
  );
}

export function createPromptRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<CreatePromptRequestBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreatePromptRequestBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreatePromptRequestBody' from JSON`,
  );
}

/** @internal */
export const CreatePromptPromptsType$inboundSchema: z.ZodNativeEnum<
  typeof CreatePromptPromptsType
> = z.nativeEnum(CreatePromptPromptsType);

/** @internal */
export const CreatePromptPromptsType$outboundSchema: z.ZodNativeEnum<
  typeof CreatePromptPromptsType
> = CreatePromptPromptsType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreatePromptPromptsType$ {
  /** @deprecated use `CreatePromptPromptsType$inboundSchema` instead. */
  export const inboundSchema = CreatePromptPromptsType$inboundSchema;
  /** @deprecated use `CreatePromptPromptsType$outboundSchema` instead. */
  export const outboundSchema = CreatePromptPromptsType$outboundSchema;
}

/** @internal */
export const CreatePromptPromptsModelType$inboundSchema: z.ZodNativeEnum<
  typeof CreatePromptPromptsModelType
> = z.nativeEnum(CreatePromptPromptsModelType);

/** @internal */
export const CreatePromptPromptsModelType$outboundSchema: z.ZodNativeEnum<
  typeof CreatePromptPromptsModelType
> = CreatePromptPromptsModelType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreatePromptPromptsModelType$ {
  /** @deprecated use `CreatePromptPromptsModelType$inboundSchema` instead. */
  export const inboundSchema = CreatePromptPromptsModelType$inboundSchema;
  /** @deprecated use `CreatePromptPromptsModelType$outboundSchema` instead. */
  export const outboundSchema = CreatePromptPromptsModelType$outboundSchema;
}

/** @internal */
export const CreatePromptPromptsFormat$inboundSchema: z.ZodNativeEnum<
  typeof CreatePromptPromptsFormat
> = z.nativeEnum(CreatePromptPromptsFormat);

/** @internal */
export const CreatePromptPromptsFormat$outboundSchema: z.ZodNativeEnum<
  typeof CreatePromptPromptsFormat
> = CreatePromptPromptsFormat$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreatePromptPromptsFormat$ {
  /** @deprecated use `CreatePromptPromptsFormat$inboundSchema` instead. */
  export const inboundSchema = CreatePromptPromptsFormat$inboundSchema;
  /** @deprecated use `CreatePromptPromptsFormat$outboundSchema` instead. */
  export const outboundSchema = CreatePromptPromptsFormat$outboundSchema;
}

/** @internal */
export const CreatePromptPromptsQuality$inboundSchema: z.ZodNativeEnum<
  typeof CreatePromptPromptsQuality
> = z.nativeEnum(CreatePromptPromptsQuality);

/** @internal */
export const CreatePromptPromptsQuality$outboundSchema: z.ZodNativeEnum<
  typeof CreatePromptPromptsQuality
> = CreatePromptPromptsQuality$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreatePromptPromptsQuality$ {
  /** @deprecated use `CreatePromptPromptsQuality$inboundSchema` instead. */
  export const inboundSchema = CreatePromptPromptsQuality$inboundSchema;
  /** @deprecated use `CreatePromptPromptsQuality$outboundSchema` instead. */
  export const outboundSchema = CreatePromptPromptsQuality$outboundSchema;
}

/** @internal */
export const CreatePromptResponseFormatPromptsResponse200Type$inboundSchema:
  z.ZodNativeEnum<typeof CreatePromptResponseFormatPromptsResponse200Type> = z
    .nativeEnum(CreatePromptResponseFormatPromptsResponse200Type);

/** @internal */
export const CreatePromptResponseFormatPromptsResponse200Type$outboundSchema:
  z.ZodNativeEnum<typeof CreatePromptResponseFormatPromptsResponse200Type> =
    CreatePromptResponseFormatPromptsResponse200Type$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreatePromptResponseFormatPromptsResponse200Type$ {
  /** @deprecated use `CreatePromptResponseFormatPromptsResponse200Type$inboundSchema` instead. */
  export const inboundSchema =
    CreatePromptResponseFormatPromptsResponse200Type$inboundSchema;
  /** @deprecated use `CreatePromptResponseFormatPromptsResponse200Type$outboundSchema` instead. */
  export const outboundSchema =
    CreatePromptResponseFormatPromptsResponse200Type$outboundSchema;
}

/** @internal */
export const CreatePromptResponseFormatPrompts2$inboundSchema: z.ZodType<
  CreatePromptResponseFormatPrompts2,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: CreatePromptResponseFormatPromptsResponse200Type$inboundSchema,
});

/** @internal */
export type CreatePromptResponseFormatPrompts2$Outbound = {
  type: string;
};

/** @internal */
export const CreatePromptResponseFormatPrompts2$outboundSchema: z.ZodType<
  CreatePromptResponseFormatPrompts2$Outbound,
  z.ZodTypeDef,
  CreatePromptResponseFormatPrompts2
> = z.object({
  type: CreatePromptResponseFormatPromptsResponse200Type$outboundSchema,
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreatePromptResponseFormatPrompts2$ {
  /** @deprecated use `CreatePromptResponseFormatPrompts2$inboundSchema` instead. */
  export const inboundSchema = CreatePromptResponseFormatPrompts2$inboundSchema;
  /** @deprecated use `CreatePromptResponseFormatPrompts2$outboundSchema` instead. */
  export const outboundSchema =
    CreatePromptResponseFormatPrompts2$outboundSchema;
  /** @deprecated use `CreatePromptResponseFormatPrompts2$Outbound` instead. */
  export type Outbound = CreatePromptResponseFormatPrompts2$Outbound;
}

export function createPromptResponseFormatPrompts2ToJSON(
  createPromptResponseFormatPrompts2: CreatePromptResponseFormatPrompts2,
): string {
  return JSON.stringify(
    CreatePromptResponseFormatPrompts2$outboundSchema.parse(
      createPromptResponseFormatPrompts2,
    ),
  );
}

export function createPromptResponseFormatPrompts2FromJSON(
  jsonString: string,
): SafeParseResult<CreatePromptResponseFormatPrompts2, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      CreatePromptResponseFormatPrompts2$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreatePromptResponseFormatPrompts2' from JSON`,
  );
}

/** @internal */
export const CreatePromptResponseFormatPromptsResponseType$inboundSchema:
  z.ZodNativeEnum<typeof CreatePromptResponseFormatPromptsResponseType> = z
    .nativeEnum(CreatePromptResponseFormatPromptsResponseType);

/** @internal */
export const CreatePromptResponseFormatPromptsResponseType$outboundSchema:
  z.ZodNativeEnum<typeof CreatePromptResponseFormatPromptsResponseType> =
    CreatePromptResponseFormatPromptsResponseType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreatePromptResponseFormatPromptsResponseType$ {
  /** @deprecated use `CreatePromptResponseFormatPromptsResponseType$inboundSchema` instead. */
  export const inboundSchema =
    CreatePromptResponseFormatPromptsResponseType$inboundSchema;
  /** @deprecated use `CreatePromptResponseFormatPromptsResponseType$outboundSchema` instead. */
  export const outboundSchema =
    CreatePromptResponseFormatPromptsResponseType$outboundSchema;
}

/** @internal */
export const CreatePromptResponseFormatPromptsJsonSchema$inboundSchema:
  z.ZodType<
    CreatePromptResponseFormatPromptsJsonSchema,
    z.ZodTypeDef,
    unknown
  > = z.object({
    name: z.string(),
    strict: z.boolean(),
    schema: z.record(z.any()),
  });

/** @internal */
export type CreatePromptResponseFormatPromptsJsonSchema$Outbound = {
  name: string;
  strict: boolean;
  schema: { [k: string]: any };
};

/** @internal */
export const CreatePromptResponseFormatPromptsJsonSchema$outboundSchema:
  z.ZodType<
    CreatePromptResponseFormatPromptsJsonSchema$Outbound,
    z.ZodTypeDef,
    CreatePromptResponseFormatPromptsJsonSchema
  > = z.object({
    name: z.string(),
    strict: z.boolean(),
    schema: z.record(z.any()),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreatePromptResponseFormatPromptsJsonSchema$ {
  /** @deprecated use `CreatePromptResponseFormatPromptsJsonSchema$inboundSchema` instead. */
  export const inboundSchema =
    CreatePromptResponseFormatPromptsJsonSchema$inboundSchema;
  /** @deprecated use `CreatePromptResponseFormatPromptsJsonSchema$outboundSchema` instead. */
  export const outboundSchema =
    CreatePromptResponseFormatPromptsJsonSchema$outboundSchema;
  /** @deprecated use `CreatePromptResponseFormatPromptsJsonSchema$Outbound` instead. */
  export type Outbound = CreatePromptResponseFormatPromptsJsonSchema$Outbound;
}

export function createPromptResponseFormatPromptsJsonSchemaToJSON(
  createPromptResponseFormatPromptsJsonSchema:
    CreatePromptResponseFormatPromptsJsonSchema,
): string {
  return JSON.stringify(
    CreatePromptResponseFormatPromptsJsonSchema$outboundSchema.parse(
      createPromptResponseFormatPromptsJsonSchema,
    ),
  );
}

export function createPromptResponseFormatPromptsJsonSchemaFromJSON(
  jsonString: string,
): SafeParseResult<
  CreatePromptResponseFormatPromptsJsonSchema,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      CreatePromptResponseFormatPromptsJsonSchema$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'CreatePromptResponseFormatPromptsJsonSchema' from JSON`,
  );
}

/** @internal */
export const CreatePromptResponseFormatPrompts1$inboundSchema: z.ZodType<
  CreatePromptResponseFormatPrompts1,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: CreatePromptResponseFormatPromptsResponseType$inboundSchema,
  json_schema: z.lazy(() =>
    CreatePromptResponseFormatPromptsJsonSchema$inboundSchema
  ),
}).transform((v) => {
  return remap$(v, {
    "json_schema": "jsonSchema",
  });
});

/** @internal */
export type CreatePromptResponseFormatPrompts1$Outbound = {
  type: string;
  json_schema: CreatePromptResponseFormatPromptsJsonSchema$Outbound;
};

/** @internal */
export const CreatePromptResponseFormatPrompts1$outboundSchema: z.ZodType<
  CreatePromptResponseFormatPrompts1$Outbound,
  z.ZodTypeDef,
  CreatePromptResponseFormatPrompts1
> = z.object({
  type: CreatePromptResponseFormatPromptsResponseType$outboundSchema,
  jsonSchema: z.lazy(() =>
    CreatePromptResponseFormatPromptsJsonSchema$outboundSchema
  ),
}).transform((v) => {
  return remap$(v, {
    jsonSchema: "json_schema",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreatePromptResponseFormatPrompts1$ {
  /** @deprecated use `CreatePromptResponseFormatPrompts1$inboundSchema` instead. */
  export const inboundSchema = CreatePromptResponseFormatPrompts1$inboundSchema;
  /** @deprecated use `CreatePromptResponseFormatPrompts1$outboundSchema` instead. */
  export const outboundSchema =
    CreatePromptResponseFormatPrompts1$outboundSchema;
  /** @deprecated use `CreatePromptResponseFormatPrompts1$Outbound` instead. */
  export type Outbound = CreatePromptResponseFormatPrompts1$Outbound;
}

export function createPromptResponseFormatPrompts1ToJSON(
  createPromptResponseFormatPrompts1: CreatePromptResponseFormatPrompts1,
): string {
  return JSON.stringify(
    CreatePromptResponseFormatPrompts1$outboundSchema.parse(
      createPromptResponseFormatPrompts1,
    ),
  );
}

export function createPromptResponseFormatPrompts1FromJSON(
  jsonString: string,
): SafeParseResult<CreatePromptResponseFormatPrompts1, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      CreatePromptResponseFormatPrompts1$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreatePromptResponseFormatPrompts1' from JSON`,
  );
}

/** @internal */
export const CreatePromptPromptsResponseFormat$inboundSchema: z.ZodType<
  CreatePromptPromptsResponseFormat,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => CreatePromptResponseFormatPrompts2$inboundSchema),
  z.lazy(() => CreatePromptResponseFormatPrompts1$inboundSchema),
]);

/** @internal */
export type CreatePromptPromptsResponseFormat$Outbound =
  | CreatePromptResponseFormatPrompts2$Outbound
  | CreatePromptResponseFormatPrompts1$Outbound;

/** @internal */
export const CreatePromptPromptsResponseFormat$outboundSchema: z.ZodType<
  CreatePromptPromptsResponseFormat$Outbound,
  z.ZodTypeDef,
  CreatePromptPromptsResponseFormat
> = z.union([
  z.lazy(() => CreatePromptResponseFormatPrompts2$outboundSchema),
  z.lazy(() => CreatePromptResponseFormatPrompts1$outboundSchema),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreatePromptPromptsResponseFormat$ {
  /** @deprecated use `CreatePromptPromptsResponseFormat$inboundSchema` instead. */
  export const inboundSchema = CreatePromptPromptsResponseFormat$inboundSchema;
  /** @deprecated use `CreatePromptPromptsResponseFormat$outboundSchema` instead. */
  export const outboundSchema =
    CreatePromptPromptsResponseFormat$outboundSchema;
  /** @deprecated use `CreatePromptPromptsResponseFormat$Outbound` instead. */
  export type Outbound = CreatePromptPromptsResponseFormat$Outbound;
}

export function createPromptPromptsResponseFormatToJSON(
  createPromptPromptsResponseFormat: CreatePromptPromptsResponseFormat,
): string {
  return JSON.stringify(
    CreatePromptPromptsResponseFormat$outboundSchema.parse(
      createPromptPromptsResponseFormat,
    ),
  );
}

export function createPromptPromptsResponseFormatFromJSON(
  jsonString: string,
): SafeParseResult<CreatePromptPromptsResponseFormat, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreatePromptPromptsResponseFormat$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreatePromptPromptsResponseFormat' from JSON`,
  );
}

/** @internal */
export const CreatePromptPromptsPhotoRealVersion$inboundSchema: z.ZodNativeEnum<
  typeof CreatePromptPromptsPhotoRealVersion
> = z.nativeEnum(CreatePromptPromptsPhotoRealVersion);

/** @internal */
export const CreatePromptPromptsPhotoRealVersion$outboundSchema:
  z.ZodNativeEnum<typeof CreatePromptPromptsPhotoRealVersion> =
    CreatePromptPromptsPhotoRealVersion$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreatePromptPromptsPhotoRealVersion$ {
  /** @deprecated use `CreatePromptPromptsPhotoRealVersion$inboundSchema` instead. */
  export const inboundSchema =
    CreatePromptPromptsPhotoRealVersion$inboundSchema;
  /** @deprecated use `CreatePromptPromptsPhotoRealVersion$outboundSchema` instead. */
  export const outboundSchema =
    CreatePromptPromptsPhotoRealVersion$outboundSchema;
}

/** @internal */
export const CreatePromptPromptsEncodingFormat$inboundSchema: z.ZodNativeEnum<
  typeof CreatePromptPromptsEncodingFormat
> = z.nativeEnum(CreatePromptPromptsEncodingFormat);

/** @internal */
export const CreatePromptPromptsEncodingFormat$outboundSchema: z.ZodNativeEnum<
  typeof CreatePromptPromptsEncodingFormat
> = CreatePromptPromptsEncodingFormat$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreatePromptPromptsEncodingFormat$ {
  /** @deprecated use `CreatePromptPromptsEncodingFormat$inboundSchema` instead. */
  export const inboundSchema = CreatePromptPromptsEncodingFormat$inboundSchema;
  /** @deprecated use `CreatePromptPromptsEncodingFormat$outboundSchema` instead. */
  export const outboundSchema =
    CreatePromptPromptsEncodingFormat$outboundSchema;
}

/** @internal */
export const CreatePromptPromptsReasoningEffort$inboundSchema: z.ZodNativeEnum<
  typeof CreatePromptPromptsReasoningEffort
> = z.nativeEnum(CreatePromptPromptsReasoningEffort);

/** @internal */
export const CreatePromptPromptsReasoningEffort$outboundSchema: z.ZodNativeEnum<
  typeof CreatePromptPromptsReasoningEffort
> = CreatePromptPromptsReasoningEffort$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreatePromptPromptsReasoningEffort$ {
  /** @deprecated use `CreatePromptPromptsReasoningEffort$inboundSchema` instead. */
  export const inboundSchema = CreatePromptPromptsReasoningEffort$inboundSchema;
  /** @deprecated use `CreatePromptPromptsReasoningEffort$outboundSchema` instead. */
  export const outboundSchema =
    CreatePromptPromptsReasoningEffort$outboundSchema;
}

/** @internal */
export const CreatePromptPromptsModelParameters$inboundSchema: z.ZodType<
  CreatePromptPromptsModelParameters,
  z.ZodTypeDef,
  unknown
> = z.object({
  temperature: z.number().optional(),
  maxTokens: z.number().optional(),
  topK: z.number().optional(),
  topP: z.number().optional(),
  frequencyPenalty: z.number().optional(),
  presencePenalty: z.number().optional(),
  numImages: z.number().optional(),
  seed: z.number().optional(),
  format: CreatePromptPromptsFormat$inboundSchema.optional(),
  dimensions: z.string().optional(),
  quality: CreatePromptPromptsQuality$inboundSchema.optional(),
  style: z.string().optional(),
  responseFormat: z.nullable(
    z.union([
      z.lazy(() => CreatePromptResponseFormatPrompts2$inboundSchema),
      z.lazy(() => CreatePromptResponseFormatPrompts1$inboundSchema),
    ]),
  ).optional(),
  photoRealVersion: CreatePromptPromptsPhotoRealVersion$inboundSchema
    .optional(),
  encoding_format: CreatePromptPromptsEncodingFormat$inboundSchema.optional(),
  reasoningEffort: CreatePromptPromptsReasoningEffort$inboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    "encoding_format": "encodingFormat",
  });
});

/** @internal */
export type CreatePromptPromptsModelParameters$Outbound = {
  temperature?: number | undefined;
  maxTokens?: number | undefined;
  topK?: number | undefined;
  topP?: number | undefined;
  frequencyPenalty?: number | undefined;
  presencePenalty?: number | undefined;
  numImages?: number | undefined;
  seed?: number | undefined;
  format?: string | undefined;
  dimensions?: string | undefined;
  quality?: string | undefined;
  style?: string | undefined;
  responseFormat?:
    | CreatePromptResponseFormatPrompts2$Outbound
    | CreatePromptResponseFormatPrompts1$Outbound
    | null
    | undefined;
  photoRealVersion?: string | undefined;
  encoding_format?: string | undefined;
  reasoningEffort?: string | undefined;
};

/** @internal */
export const CreatePromptPromptsModelParameters$outboundSchema: z.ZodType<
  CreatePromptPromptsModelParameters$Outbound,
  z.ZodTypeDef,
  CreatePromptPromptsModelParameters
> = z.object({
  temperature: z.number().optional(),
  maxTokens: z.number().optional(),
  topK: z.number().optional(),
  topP: z.number().optional(),
  frequencyPenalty: z.number().optional(),
  presencePenalty: z.number().optional(),
  numImages: z.number().optional(),
  seed: z.number().optional(),
  format: CreatePromptPromptsFormat$outboundSchema.optional(),
  dimensions: z.string().optional(),
  quality: CreatePromptPromptsQuality$outboundSchema.optional(),
  style: z.string().optional(),
  responseFormat: z.nullable(
    z.union([
      z.lazy(() => CreatePromptResponseFormatPrompts2$outboundSchema),
      z.lazy(() => CreatePromptResponseFormatPrompts1$outboundSchema),
    ]),
  ).optional(),
  photoRealVersion: CreatePromptPromptsPhotoRealVersion$outboundSchema
    .optional(),
  encodingFormat: CreatePromptPromptsEncodingFormat$outboundSchema.optional(),
  reasoningEffort: CreatePromptPromptsReasoningEffort$outboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    encodingFormat: "encoding_format",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreatePromptPromptsModelParameters$ {
  /** @deprecated use `CreatePromptPromptsModelParameters$inboundSchema` instead. */
  export const inboundSchema = CreatePromptPromptsModelParameters$inboundSchema;
  /** @deprecated use `CreatePromptPromptsModelParameters$outboundSchema` instead. */
  export const outboundSchema =
    CreatePromptPromptsModelParameters$outboundSchema;
  /** @deprecated use `CreatePromptPromptsModelParameters$Outbound` instead. */
  export type Outbound = CreatePromptPromptsModelParameters$Outbound;
}

export function createPromptPromptsModelParametersToJSON(
  createPromptPromptsModelParameters: CreatePromptPromptsModelParameters,
): string {
  return JSON.stringify(
    CreatePromptPromptsModelParameters$outboundSchema.parse(
      createPromptPromptsModelParameters,
    ),
  );
}

export function createPromptPromptsModelParametersFromJSON(
  jsonString: string,
): SafeParseResult<CreatePromptPromptsModelParameters, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      CreatePromptPromptsModelParameters$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreatePromptPromptsModelParameters' from JSON`,
  );
}

/** @internal */
export const CreatePromptPromptsProvider$inboundSchema: z.ZodNativeEnum<
  typeof CreatePromptPromptsProvider
> = z.nativeEnum(CreatePromptPromptsProvider);

/** @internal */
export const CreatePromptPromptsProvider$outboundSchema: z.ZodNativeEnum<
  typeof CreatePromptPromptsProvider
> = CreatePromptPromptsProvider$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreatePromptPromptsProvider$ {
  /** @deprecated use `CreatePromptPromptsProvider$inboundSchema` instead. */
  export const inboundSchema = CreatePromptPromptsProvider$inboundSchema;
  /** @deprecated use `CreatePromptPromptsProvider$outboundSchema` instead. */
  export const outboundSchema = CreatePromptPromptsProvider$outboundSchema;
}

/** @internal */
export const CreatePromptPromptsRole$inboundSchema: z.ZodNativeEnum<
  typeof CreatePromptPromptsRole
> = z.nativeEnum(CreatePromptPromptsRole);

/** @internal */
export const CreatePromptPromptsRole$outboundSchema: z.ZodNativeEnum<
  typeof CreatePromptPromptsRole
> = CreatePromptPromptsRole$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreatePromptPromptsRole$ {
  /** @deprecated use `CreatePromptPromptsRole$inboundSchema` instead. */
  export const inboundSchema = CreatePromptPromptsRole$inboundSchema;
  /** @deprecated use `CreatePromptPromptsRole$outboundSchema` instead. */
  export const outboundSchema = CreatePromptPromptsRole$outboundSchema;
}

/** @internal */
export const CreatePrompt2PromptsResponse200Type$inboundSchema: z.ZodNativeEnum<
  typeof CreatePrompt2PromptsResponse200Type
> = z.nativeEnum(CreatePrompt2PromptsResponse200Type);

/** @internal */
export const CreatePrompt2PromptsResponse200Type$outboundSchema:
  z.ZodNativeEnum<typeof CreatePrompt2PromptsResponse200Type> =
    CreatePrompt2PromptsResponse200Type$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreatePrompt2PromptsResponse200Type$ {
  /** @deprecated use `CreatePrompt2PromptsResponse200Type$inboundSchema` instead. */
  export const inboundSchema =
    CreatePrompt2PromptsResponse200Type$inboundSchema;
  /** @deprecated use `CreatePrompt2PromptsResponse200Type$outboundSchema` instead. */
  export const outboundSchema =
    CreatePrompt2PromptsResponse200Type$outboundSchema;
}

/** @internal */
export const CreatePrompt2PromptsImageUrl$inboundSchema: z.ZodType<
  CreatePrompt2PromptsImageUrl,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string().optional(),
  url: z.string(),
  detail: z.string().optional(),
});

/** @internal */
export type CreatePrompt2PromptsImageUrl$Outbound = {
  id?: string | undefined;
  url: string;
  detail?: string | undefined;
};

/** @internal */
export const CreatePrompt2PromptsImageUrl$outboundSchema: z.ZodType<
  CreatePrompt2PromptsImageUrl$Outbound,
  z.ZodTypeDef,
  CreatePrompt2PromptsImageUrl
> = z.object({
  id: z.string().optional(),
  url: z.string(),
  detail: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreatePrompt2PromptsImageUrl$ {
  /** @deprecated use `CreatePrompt2PromptsImageUrl$inboundSchema` instead. */
  export const inboundSchema = CreatePrompt2PromptsImageUrl$inboundSchema;
  /** @deprecated use `CreatePrompt2PromptsImageUrl$outboundSchema` instead. */
  export const outboundSchema = CreatePrompt2PromptsImageUrl$outboundSchema;
  /** @deprecated use `CreatePrompt2PromptsImageUrl$Outbound` instead. */
  export type Outbound = CreatePrompt2PromptsImageUrl$Outbound;
}

export function createPrompt2PromptsImageUrlToJSON(
  createPrompt2PromptsImageUrl: CreatePrompt2PromptsImageUrl,
): string {
  return JSON.stringify(
    CreatePrompt2PromptsImageUrl$outboundSchema.parse(
      createPrompt2PromptsImageUrl,
    ),
  );
}

export function createPrompt2PromptsImageUrlFromJSON(
  jsonString: string,
): SafeParseResult<CreatePrompt2PromptsImageUrl, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreatePrompt2PromptsImageUrl$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreatePrompt2PromptsImageUrl' from JSON`,
  );
}

/** @internal */
export const CreatePrompt2Prompts2$inboundSchema: z.ZodType<
  CreatePrompt2Prompts2,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: CreatePrompt2PromptsResponse200Type$inboundSchema,
  image_url: z.lazy(() => CreatePrompt2PromptsImageUrl$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "image_url": "imageUrl",
  });
});

/** @internal */
export type CreatePrompt2Prompts2$Outbound = {
  type: string;
  image_url: CreatePrompt2PromptsImageUrl$Outbound;
};

/** @internal */
export const CreatePrompt2Prompts2$outboundSchema: z.ZodType<
  CreatePrompt2Prompts2$Outbound,
  z.ZodTypeDef,
  CreatePrompt2Prompts2
> = z.object({
  type: CreatePrompt2PromptsResponse200Type$outboundSchema,
  imageUrl: z.lazy(() => CreatePrompt2PromptsImageUrl$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    imageUrl: "image_url",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreatePrompt2Prompts2$ {
  /** @deprecated use `CreatePrompt2Prompts2$inboundSchema` instead. */
  export const inboundSchema = CreatePrompt2Prompts2$inboundSchema;
  /** @deprecated use `CreatePrompt2Prompts2$outboundSchema` instead. */
  export const outboundSchema = CreatePrompt2Prompts2$outboundSchema;
  /** @deprecated use `CreatePrompt2Prompts2$Outbound` instead. */
  export type Outbound = CreatePrompt2Prompts2$Outbound;
}

export function createPrompt2Prompts2ToJSON(
  createPrompt2Prompts2: CreatePrompt2Prompts2,
): string {
  return JSON.stringify(
    CreatePrompt2Prompts2$outboundSchema.parse(createPrompt2Prompts2),
  );
}

export function createPrompt2Prompts2FromJSON(
  jsonString: string,
): SafeParseResult<CreatePrompt2Prompts2, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreatePrompt2Prompts2$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreatePrompt2Prompts2' from JSON`,
  );
}

/** @internal */
export const CreatePrompt2PromptsResponseType$inboundSchema: z.ZodNativeEnum<
  typeof CreatePrompt2PromptsResponseType
> = z.nativeEnum(CreatePrompt2PromptsResponseType);

/** @internal */
export const CreatePrompt2PromptsResponseType$outboundSchema: z.ZodNativeEnum<
  typeof CreatePrompt2PromptsResponseType
> = CreatePrompt2PromptsResponseType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreatePrompt2PromptsResponseType$ {
  /** @deprecated use `CreatePrompt2PromptsResponseType$inboundSchema` instead. */
  export const inboundSchema = CreatePrompt2PromptsResponseType$inboundSchema;
  /** @deprecated use `CreatePrompt2PromptsResponseType$outboundSchema` instead. */
  export const outboundSchema = CreatePrompt2PromptsResponseType$outboundSchema;
}

/** @internal */
export const CreatePrompt2Prompts1$inboundSchema: z.ZodType<
  CreatePrompt2Prompts1,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: CreatePrompt2PromptsResponseType$inboundSchema,
  text: z.string(),
});

/** @internal */
export type CreatePrompt2Prompts1$Outbound = {
  type: string;
  text: string;
};

/** @internal */
export const CreatePrompt2Prompts1$outboundSchema: z.ZodType<
  CreatePrompt2Prompts1$Outbound,
  z.ZodTypeDef,
  CreatePrompt2Prompts1
> = z.object({
  type: CreatePrompt2PromptsResponseType$outboundSchema,
  text: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreatePrompt2Prompts1$ {
  /** @deprecated use `CreatePrompt2Prompts1$inboundSchema` instead. */
  export const inboundSchema = CreatePrompt2Prompts1$inboundSchema;
  /** @deprecated use `CreatePrompt2Prompts1$outboundSchema` instead. */
  export const outboundSchema = CreatePrompt2Prompts1$outboundSchema;
  /** @deprecated use `CreatePrompt2Prompts1$Outbound` instead. */
  export type Outbound = CreatePrompt2Prompts1$Outbound;
}

export function createPrompt2Prompts1ToJSON(
  createPrompt2Prompts1: CreatePrompt2Prompts1,
): string {
  return JSON.stringify(
    CreatePrompt2Prompts1$outboundSchema.parse(createPrompt2Prompts1),
  );
}

export function createPrompt2Prompts1FromJSON(
  jsonString: string,
): SafeParseResult<CreatePrompt2Prompts1, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreatePrompt2Prompts1$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreatePrompt2Prompts1' from JSON`,
  );
}

/** @internal */
export const CreatePromptContentPrompts2$inboundSchema: z.ZodType<
  CreatePromptContentPrompts2,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => CreatePrompt2Prompts1$inboundSchema),
  z.lazy(() => CreatePrompt2Prompts2$inboundSchema),
]);

/** @internal */
export type CreatePromptContentPrompts2$Outbound =
  | CreatePrompt2Prompts1$Outbound
  | CreatePrompt2Prompts2$Outbound;

/** @internal */
export const CreatePromptContentPrompts2$outboundSchema: z.ZodType<
  CreatePromptContentPrompts2$Outbound,
  z.ZodTypeDef,
  CreatePromptContentPrompts2
> = z.union([
  z.lazy(() => CreatePrompt2Prompts1$outboundSchema),
  z.lazy(() => CreatePrompt2Prompts2$outboundSchema),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreatePromptContentPrompts2$ {
  /** @deprecated use `CreatePromptContentPrompts2$inboundSchema` instead. */
  export const inboundSchema = CreatePromptContentPrompts2$inboundSchema;
  /** @deprecated use `CreatePromptContentPrompts2$outboundSchema` instead. */
  export const outboundSchema = CreatePromptContentPrompts2$outboundSchema;
  /** @deprecated use `CreatePromptContentPrompts2$Outbound` instead. */
  export type Outbound = CreatePromptContentPrompts2$Outbound;
}

export function createPromptContentPrompts2ToJSON(
  createPromptContentPrompts2: CreatePromptContentPrompts2,
): string {
  return JSON.stringify(
    CreatePromptContentPrompts2$outboundSchema.parse(
      createPromptContentPrompts2,
    ),
  );
}

export function createPromptContentPrompts2FromJSON(
  jsonString: string,
): SafeParseResult<CreatePromptContentPrompts2, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreatePromptContentPrompts2$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreatePromptContentPrompts2' from JSON`,
  );
}

/** @internal */
export const CreatePromptPromptsContent$inboundSchema: z.ZodType<
  CreatePromptPromptsContent,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.string(),
  z.array(z.union([
    z.lazy(() => CreatePrompt2Prompts1$inboundSchema),
    z.lazy(() => CreatePrompt2Prompts2$inboundSchema),
  ])),
]);

/** @internal */
export type CreatePromptPromptsContent$Outbound =
  | string
  | Array<CreatePrompt2Prompts1$Outbound | CreatePrompt2Prompts2$Outbound>;

/** @internal */
export const CreatePromptPromptsContent$outboundSchema: z.ZodType<
  CreatePromptPromptsContent$Outbound,
  z.ZodTypeDef,
  CreatePromptPromptsContent
> = z.union([
  z.string(),
  z.array(z.union([
    z.lazy(() => CreatePrompt2Prompts1$outboundSchema),
    z.lazy(() => CreatePrompt2Prompts2$outboundSchema),
  ])),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreatePromptPromptsContent$ {
  /** @deprecated use `CreatePromptPromptsContent$inboundSchema` instead. */
  export const inboundSchema = CreatePromptPromptsContent$inboundSchema;
  /** @deprecated use `CreatePromptPromptsContent$outboundSchema` instead. */
  export const outboundSchema = CreatePromptPromptsContent$outboundSchema;
  /** @deprecated use `CreatePromptPromptsContent$Outbound` instead. */
  export type Outbound = CreatePromptPromptsContent$Outbound;
}

export function createPromptPromptsContentToJSON(
  createPromptPromptsContent: CreatePromptPromptsContent,
): string {
  return JSON.stringify(
    CreatePromptPromptsContent$outboundSchema.parse(createPromptPromptsContent),
  );
}

export function createPromptPromptsContentFromJSON(
  jsonString: string,
): SafeParseResult<CreatePromptPromptsContent, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreatePromptPromptsContent$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreatePromptPromptsContent' from JSON`,
  );
}

/** @internal */
export const CreatePromptPromptsResponseType$inboundSchema: z.ZodNativeEnum<
  typeof CreatePromptPromptsResponseType
> = z.nativeEnum(CreatePromptPromptsResponseType);

/** @internal */
export const CreatePromptPromptsResponseType$outboundSchema: z.ZodNativeEnum<
  typeof CreatePromptPromptsResponseType
> = CreatePromptPromptsResponseType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreatePromptPromptsResponseType$ {
  /** @deprecated use `CreatePromptPromptsResponseType$inboundSchema` instead. */
  export const inboundSchema = CreatePromptPromptsResponseType$inboundSchema;
  /** @deprecated use `CreatePromptPromptsResponseType$outboundSchema` instead. */
  export const outboundSchema = CreatePromptPromptsResponseType$outboundSchema;
}

/** @internal */
export const CreatePromptPromptsFunction$inboundSchema: z.ZodType<
  CreatePromptPromptsFunction,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.string(),
  arguments: z.string(),
});

/** @internal */
export type CreatePromptPromptsFunction$Outbound = {
  name: string;
  arguments: string;
};

/** @internal */
export const CreatePromptPromptsFunction$outboundSchema: z.ZodType<
  CreatePromptPromptsFunction$Outbound,
  z.ZodTypeDef,
  CreatePromptPromptsFunction
> = z.object({
  name: z.string(),
  arguments: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreatePromptPromptsFunction$ {
  /** @deprecated use `CreatePromptPromptsFunction$inboundSchema` instead. */
  export const inboundSchema = CreatePromptPromptsFunction$inboundSchema;
  /** @deprecated use `CreatePromptPromptsFunction$outboundSchema` instead. */
  export const outboundSchema = CreatePromptPromptsFunction$outboundSchema;
  /** @deprecated use `CreatePromptPromptsFunction$Outbound` instead. */
  export type Outbound = CreatePromptPromptsFunction$Outbound;
}

export function createPromptPromptsFunctionToJSON(
  createPromptPromptsFunction: CreatePromptPromptsFunction,
): string {
  return JSON.stringify(
    CreatePromptPromptsFunction$outboundSchema.parse(
      createPromptPromptsFunction,
    ),
  );
}

export function createPromptPromptsFunctionFromJSON(
  jsonString: string,
): SafeParseResult<CreatePromptPromptsFunction, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreatePromptPromptsFunction$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreatePromptPromptsFunction' from JSON`,
  );
}

/** @internal */
export const CreatePromptPromptsToolCalls$inboundSchema: z.ZodType<
  CreatePromptPromptsToolCalls,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string().optional(),
  index: z.number().optional(),
  type: CreatePromptPromptsResponseType$inboundSchema,
  function: z.lazy(() => CreatePromptPromptsFunction$inboundSchema),
});

/** @internal */
export type CreatePromptPromptsToolCalls$Outbound = {
  id?: string | undefined;
  index?: number | undefined;
  type: string;
  function: CreatePromptPromptsFunction$Outbound;
};

/** @internal */
export const CreatePromptPromptsToolCalls$outboundSchema: z.ZodType<
  CreatePromptPromptsToolCalls$Outbound,
  z.ZodTypeDef,
  CreatePromptPromptsToolCalls
> = z.object({
  id: z.string().optional(),
  index: z.number().optional(),
  type: CreatePromptPromptsResponseType$outboundSchema,
  function: z.lazy(() => CreatePromptPromptsFunction$outboundSchema),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreatePromptPromptsToolCalls$ {
  /** @deprecated use `CreatePromptPromptsToolCalls$inboundSchema` instead. */
  export const inboundSchema = CreatePromptPromptsToolCalls$inboundSchema;
  /** @deprecated use `CreatePromptPromptsToolCalls$outboundSchema` instead. */
  export const outboundSchema = CreatePromptPromptsToolCalls$outboundSchema;
  /** @deprecated use `CreatePromptPromptsToolCalls$Outbound` instead. */
  export type Outbound = CreatePromptPromptsToolCalls$Outbound;
}

export function createPromptPromptsToolCallsToJSON(
  createPromptPromptsToolCalls: CreatePromptPromptsToolCalls,
): string {
  return JSON.stringify(
    CreatePromptPromptsToolCalls$outboundSchema.parse(
      createPromptPromptsToolCalls,
    ),
  );
}

export function createPromptPromptsToolCallsFromJSON(
  jsonString: string,
): SafeParseResult<CreatePromptPromptsToolCalls, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreatePromptPromptsToolCalls$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreatePromptPromptsToolCalls' from JSON`,
  );
}

/** @internal */
export const CreatePromptPromptsMessages$inboundSchema: z.ZodType<
  CreatePromptPromptsMessages,
  z.ZodTypeDef,
  unknown
> = z.object({
  role: CreatePromptPromptsRole$inboundSchema,
  content: z.union([
    z.string(),
    z.array(z.union([
      z.lazy(() => CreatePrompt2Prompts1$inboundSchema),
      z.lazy(() => CreatePrompt2Prompts2$inboundSchema),
    ])),
  ]),
  tool_calls: z.array(z.lazy(() => CreatePromptPromptsToolCalls$inboundSchema))
    .optional(),
}).transform((v) => {
  return remap$(v, {
    "tool_calls": "toolCalls",
  });
});

/** @internal */
export type CreatePromptPromptsMessages$Outbound = {
  role: string;
  content:
    | string
    | Array<CreatePrompt2Prompts1$Outbound | CreatePrompt2Prompts2$Outbound>;
  tool_calls?: Array<CreatePromptPromptsToolCalls$Outbound> | undefined;
};

/** @internal */
export const CreatePromptPromptsMessages$outboundSchema: z.ZodType<
  CreatePromptPromptsMessages$Outbound,
  z.ZodTypeDef,
  CreatePromptPromptsMessages
> = z.object({
  role: CreatePromptPromptsRole$outboundSchema,
  content: z.union([
    z.string(),
    z.array(z.union([
      z.lazy(() => CreatePrompt2Prompts1$outboundSchema),
      z.lazy(() => CreatePrompt2Prompts2$outboundSchema),
    ])),
  ]),
  toolCalls: z.array(z.lazy(() => CreatePromptPromptsToolCalls$outboundSchema))
    .optional(),
}).transform((v) => {
  return remap$(v, {
    toolCalls: "tool_calls",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreatePromptPromptsMessages$ {
  /** @deprecated use `CreatePromptPromptsMessages$inboundSchema` instead. */
  export const inboundSchema = CreatePromptPromptsMessages$inboundSchema;
  /** @deprecated use `CreatePromptPromptsMessages$outboundSchema` instead. */
  export const outboundSchema = CreatePromptPromptsMessages$outboundSchema;
  /** @deprecated use `CreatePromptPromptsMessages$Outbound` instead. */
  export type Outbound = CreatePromptPromptsMessages$Outbound;
}

export function createPromptPromptsMessagesToJSON(
  createPromptPromptsMessages: CreatePromptPromptsMessages,
): string {
  return JSON.stringify(
    CreatePromptPromptsMessages$outboundSchema.parse(
      createPromptPromptsMessages,
    ),
  );
}

export function createPromptPromptsMessagesFromJSON(
  jsonString: string,
): SafeParseResult<CreatePromptPromptsMessages, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreatePromptPromptsMessages$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreatePromptPromptsMessages' from JSON`,
  );
}

/** @internal */
export const CreatePromptPromptsPromptConfig$inboundSchema: z.ZodType<
  CreatePromptPromptsPromptConfig,
  z.ZodTypeDef,
  unknown
> = z.object({
  stream: z.boolean().optional(),
  model: z.string().optional(),
  model_db_id: z.string().optional(),
  model_type: CreatePromptPromptsModelType$inboundSchema.optional(),
  model_parameters: z.lazy(() =>
    CreatePromptPromptsModelParameters$inboundSchema
  ).optional(),
  provider: CreatePromptPromptsProvider$inboundSchema.optional(),
  integration_id: z.nullable(z.string()).optional(),
  version: z.string().optional(),
  messages: z.array(z.lazy(() => CreatePromptPromptsMessages$inboundSchema)),
}).transform((v) => {
  return remap$(v, {
    "model_db_id": "modelDbId",
    "model_type": "modelType",
    "model_parameters": "modelParameters",
    "integration_id": "integrationId",
  });
});

/** @internal */
export type CreatePromptPromptsPromptConfig$Outbound = {
  stream?: boolean | undefined;
  model?: string | undefined;
  model_db_id?: string | undefined;
  model_type?: string | undefined;
  model_parameters?: CreatePromptPromptsModelParameters$Outbound | undefined;
  provider?: string | undefined;
  integration_id?: string | null | undefined;
  version?: string | undefined;
  messages: Array<CreatePromptPromptsMessages$Outbound>;
};

/** @internal */
export const CreatePromptPromptsPromptConfig$outboundSchema: z.ZodType<
  CreatePromptPromptsPromptConfig$Outbound,
  z.ZodTypeDef,
  CreatePromptPromptsPromptConfig
> = z.object({
  stream: z.boolean().optional(),
  model: z.string().optional(),
  modelDbId: z.string().optional(),
  modelType: CreatePromptPromptsModelType$outboundSchema.optional(),
  modelParameters: z.lazy(() =>
    CreatePromptPromptsModelParameters$outboundSchema
  ).optional(),
  provider: CreatePromptPromptsProvider$outboundSchema.optional(),
  integrationId: z.nullable(z.string()).optional(),
  version: z.string().optional(),
  messages: z.array(z.lazy(() => CreatePromptPromptsMessages$outboundSchema)),
}).transform((v) => {
  return remap$(v, {
    modelDbId: "model_db_id",
    modelType: "model_type",
    modelParameters: "model_parameters",
    integrationId: "integration_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreatePromptPromptsPromptConfig$ {
  /** @deprecated use `CreatePromptPromptsPromptConfig$inboundSchema` instead. */
  export const inboundSchema = CreatePromptPromptsPromptConfig$inboundSchema;
  /** @deprecated use `CreatePromptPromptsPromptConfig$outboundSchema` instead. */
  export const outboundSchema = CreatePromptPromptsPromptConfig$outboundSchema;
  /** @deprecated use `CreatePromptPromptsPromptConfig$Outbound` instead. */
  export type Outbound = CreatePromptPromptsPromptConfig$Outbound;
}

export function createPromptPromptsPromptConfigToJSON(
  createPromptPromptsPromptConfig: CreatePromptPromptsPromptConfig,
): string {
  return JSON.stringify(
    CreatePromptPromptsPromptConfig$outboundSchema.parse(
      createPromptPromptsPromptConfig,
    ),
  );
}

export function createPromptPromptsPromptConfigFromJSON(
  jsonString: string,
): SafeParseResult<CreatePromptPromptsPromptConfig, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreatePromptPromptsPromptConfig$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreatePromptPromptsPromptConfig' from JSON`,
  );
}

/** @internal */
export const CreatePromptPromptsUseCases$inboundSchema: z.ZodNativeEnum<
  typeof CreatePromptPromptsUseCases
> = z.nativeEnum(CreatePromptPromptsUseCases);

/** @internal */
export const CreatePromptPromptsUseCases$outboundSchema: z.ZodNativeEnum<
  typeof CreatePromptPromptsUseCases
> = CreatePromptPromptsUseCases$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreatePromptPromptsUseCases$ {
  /** @deprecated use `CreatePromptPromptsUseCases$inboundSchema` instead. */
  export const inboundSchema = CreatePromptPromptsUseCases$inboundSchema;
  /** @deprecated use `CreatePromptPromptsUseCases$outboundSchema` instead. */
  export const outboundSchema = CreatePromptPromptsUseCases$outboundSchema;
}

/** @internal */
export const CreatePromptPromptsLanguage$inboundSchema: z.ZodNativeEnum<
  typeof CreatePromptPromptsLanguage
> = z.nativeEnum(CreatePromptPromptsLanguage);

/** @internal */
export const CreatePromptPromptsLanguage$outboundSchema: z.ZodNativeEnum<
  typeof CreatePromptPromptsLanguage
> = CreatePromptPromptsLanguage$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreatePromptPromptsLanguage$ {
  /** @deprecated use `CreatePromptPromptsLanguage$inboundSchema` instead. */
  export const inboundSchema = CreatePromptPromptsLanguage$inboundSchema;
  /** @deprecated use `CreatePromptPromptsLanguage$outboundSchema` instead. */
  export const outboundSchema = CreatePromptPromptsLanguage$outboundSchema;
}

/** @internal */
export const CreatePromptPromptsMetadata$inboundSchema: z.ZodType<
  CreatePromptPromptsMetadata,
  z.ZodTypeDef,
  unknown
> = z.object({
  use_cases: z.array(CreatePromptPromptsUseCases$inboundSchema).optional(),
  language: CreatePromptPromptsLanguage$inboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    "use_cases": "useCases",
  });
});

/** @internal */
export type CreatePromptPromptsMetadata$Outbound = {
  use_cases?: Array<string> | undefined;
  language?: string | undefined;
};

/** @internal */
export const CreatePromptPromptsMetadata$outboundSchema: z.ZodType<
  CreatePromptPromptsMetadata$Outbound,
  z.ZodTypeDef,
  CreatePromptPromptsMetadata
> = z.object({
  useCases: z.array(CreatePromptPromptsUseCases$outboundSchema).optional(),
  language: CreatePromptPromptsLanguage$outboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    useCases: "use_cases",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreatePromptPromptsMetadata$ {
  /** @deprecated use `CreatePromptPromptsMetadata$inboundSchema` instead. */
  export const inboundSchema = CreatePromptPromptsMetadata$inboundSchema;
  /** @deprecated use `CreatePromptPromptsMetadata$outboundSchema` instead. */
  export const outboundSchema = CreatePromptPromptsMetadata$outboundSchema;
  /** @deprecated use `CreatePromptPromptsMetadata$Outbound` instead. */
  export type Outbound = CreatePromptPromptsMetadata$Outbound;
}

export function createPromptPromptsMetadataToJSON(
  createPromptPromptsMetadata: CreatePromptPromptsMetadata,
): string {
  return JSON.stringify(
    CreatePromptPromptsMetadata$outboundSchema.parse(
      createPromptPromptsMetadata,
    ),
  );
}

export function createPromptPromptsMetadataFromJSON(
  jsonString: string,
): SafeParseResult<CreatePromptPromptsMetadata, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreatePromptPromptsMetadata$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreatePromptPromptsMetadata' from JSON`,
  );
}

/** @internal */
export const CreatePromptResponseBody$inboundSchema: z.ZodType<
  CreatePromptResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  _id: z.string(),
  type: CreatePromptPromptsType$inboundSchema,
  owner: z.string(),
  domain_id: z.string(),
  created: z.string(),
  updated: z.string(),
  created_by_id: z.string().optional(),
  updated_by_id: z.string().optional(),
  display_name: z.string(),
  description: z.nullable(z.string()).optional(),
  prompt_config: z.lazy(() => CreatePromptPromptsPromptConfig$inboundSchema),
  metadata: z.lazy(() => CreatePromptPromptsMetadata$inboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    "_id": "id",
    "domain_id": "domainId",
    "created_by_id": "createdById",
    "updated_by_id": "updatedById",
    "display_name": "displayName",
    "prompt_config": "promptConfig",
  });
});

/** @internal */
export type CreatePromptResponseBody$Outbound = {
  _id: string;
  type: string;
  owner: string;
  domain_id: string;
  created: string;
  updated: string;
  created_by_id?: string | undefined;
  updated_by_id?: string | undefined;
  display_name: string;
  description?: string | null | undefined;
  prompt_config: CreatePromptPromptsPromptConfig$Outbound;
  metadata?: CreatePromptPromptsMetadata$Outbound | undefined;
};

/** @internal */
export const CreatePromptResponseBody$outboundSchema: z.ZodType<
  CreatePromptResponseBody$Outbound,
  z.ZodTypeDef,
  CreatePromptResponseBody
> = z.object({
  id: z.string(),
  type: CreatePromptPromptsType$outboundSchema,
  owner: z.string(),
  domainId: z.string(),
  created: z.string(),
  updated: z.string(),
  createdById: z.string().optional(),
  updatedById: z.string().optional(),
  displayName: z.string(),
  description: z.nullable(z.string()).optional(),
  promptConfig: z.lazy(() => CreatePromptPromptsPromptConfig$outboundSchema),
  metadata: z.lazy(() => CreatePromptPromptsMetadata$outboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    id: "_id",
    domainId: "domain_id",
    createdById: "created_by_id",
    updatedById: "updated_by_id",
    displayName: "display_name",
    promptConfig: "prompt_config",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreatePromptResponseBody$ {
  /** @deprecated use `CreatePromptResponseBody$inboundSchema` instead. */
  export const inboundSchema = CreatePromptResponseBody$inboundSchema;
  /** @deprecated use `CreatePromptResponseBody$outboundSchema` instead. */
  export const outboundSchema = CreatePromptResponseBody$outboundSchema;
  /** @deprecated use `CreatePromptResponseBody$Outbound` instead. */
  export type Outbound = CreatePromptResponseBody$Outbound;
}

export function createPromptResponseBodyToJSON(
  createPromptResponseBody: CreatePromptResponseBody,
): string {
  return JSON.stringify(
    CreatePromptResponseBody$outboundSchema.parse(createPromptResponseBody),
  );
}

export function createPromptResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<CreatePromptResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreatePromptResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreatePromptResponseBody' from JSON`,
  );
}
