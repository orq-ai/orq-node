/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type DeleteKnowledgeRequest = {
  /**
   * The unique identifier of the knowledge base
   */
  knowledgeId: string;
};

/** @internal */
export const DeleteKnowledgeRequest$inboundSchema: z.ZodType<
  DeleteKnowledgeRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  knowledge_id: z.string(),
}).transform((v) => {
  return remap$(v, {
    "knowledge_id": "knowledgeId",
  });
});

/** @internal */
export type DeleteKnowledgeRequest$Outbound = {
  knowledge_id: string;
};

/** @internal */
export const DeleteKnowledgeRequest$outboundSchema: z.ZodType<
  DeleteKnowledgeRequest$Outbound,
  z.ZodTypeDef,
  DeleteKnowledgeRequest
> = z.object({
  knowledgeId: z.string(),
}).transform((v) => {
  return remap$(v, {
    knowledgeId: "knowledge_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeleteKnowledgeRequest$ {
  /** @deprecated use `DeleteKnowledgeRequest$inboundSchema` instead. */
  export const inboundSchema = DeleteKnowledgeRequest$inboundSchema;
  /** @deprecated use `DeleteKnowledgeRequest$outboundSchema` instead. */
  export const outboundSchema = DeleteKnowledgeRequest$outboundSchema;
  /** @deprecated use `DeleteKnowledgeRequest$Outbound` instead. */
  export type Outbound = DeleteKnowledgeRequest$Outbound;
}

export function deleteKnowledgeRequestToJSON(
  deleteKnowledgeRequest: DeleteKnowledgeRequest,
): string {
  return JSON.stringify(
    DeleteKnowledgeRequest$outboundSchema.parse(deleteKnowledgeRequest),
  );
}

export function deleteKnowledgeRequestFromJSON(
  jsonString: string,
): SafeParseResult<DeleteKnowledgeRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DeleteKnowledgeRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DeleteKnowledgeRequest' from JSON`,
  );
}
