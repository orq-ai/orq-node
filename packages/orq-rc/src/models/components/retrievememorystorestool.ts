/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export const RetrieveMemoryStoresToolType = {
  RetrieveMemoryStores: "retrieve_memory_stores",
} as const;
export type RetrieveMemoryStoresToolType = ClosedEnum<
  typeof RetrieveMemoryStoresToolType
>;

/**
 * Lists available memory stores
 */
export type RetrieveMemoryStoresTool = {
  type: RetrieveMemoryStoresToolType;
  requiresApproval?: boolean | undefined;
};

/** @internal */
export const RetrieveMemoryStoresToolType$inboundSchema: z.ZodNativeEnum<
  typeof RetrieveMemoryStoresToolType
> = z.nativeEnum(RetrieveMemoryStoresToolType);

/** @internal */
export const RetrieveMemoryStoresToolType$outboundSchema: z.ZodNativeEnum<
  typeof RetrieveMemoryStoresToolType
> = RetrieveMemoryStoresToolType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RetrieveMemoryStoresToolType$ {
  /** @deprecated use `RetrieveMemoryStoresToolType$inboundSchema` instead. */
  export const inboundSchema = RetrieveMemoryStoresToolType$inboundSchema;
  /** @deprecated use `RetrieveMemoryStoresToolType$outboundSchema` instead. */
  export const outboundSchema = RetrieveMemoryStoresToolType$outboundSchema;
}

/** @internal */
export const RetrieveMemoryStoresTool$inboundSchema: z.ZodType<
  RetrieveMemoryStoresTool,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: RetrieveMemoryStoresToolType$inboundSchema,
  requires_approval: z.boolean().default(false),
}).transform((v) => {
  return remap$(v, {
    "requires_approval": "requiresApproval",
  });
});

/** @internal */
export type RetrieveMemoryStoresTool$Outbound = {
  type: string;
  requires_approval: boolean;
};

/** @internal */
export const RetrieveMemoryStoresTool$outboundSchema: z.ZodType<
  RetrieveMemoryStoresTool$Outbound,
  z.ZodTypeDef,
  RetrieveMemoryStoresTool
> = z.object({
  type: RetrieveMemoryStoresToolType$outboundSchema,
  requiresApproval: z.boolean().default(false),
}).transform((v) => {
  return remap$(v, {
    requiresApproval: "requires_approval",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RetrieveMemoryStoresTool$ {
  /** @deprecated use `RetrieveMemoryStoresTool$inboundSchema` instead. */
  export const inboundSchema = RetrieveMemoryStoresTool$inboundSchema;
  /** @deprecated use `RetrieveMemoryStoresTool$outboundSchema` instead. */
  export const outboundSchema = RetrieveMemoryStoresTool$outboundSchema;
  /** @deprecated use `RetrieveMemoryStoresTool$Outbound` instead. */
  export type Outbound = RetrieveMemoryStoresTool$Outbound;
}

export function retrieveMemoryStoresToolToJSON(
  retrieveMemoryStoresTool: RetrieveMemoryStoresTool,
): string {
  return JSON.stringify(
    RetrieveMemoryStoresTool$outboundSchema.parse(retrieveMemoryStoresTool),
  );
}

export function retrieveMemoryStoresToolFromJSON(
  jsonString: string,
): SafeParseResult<RetrieveMemoryStoresTool, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => RetrieveMemoryStoresTool$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RetrieveMemoryStoresTool' from JSON`,
  );
}
