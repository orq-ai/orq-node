/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export const CallSubAgentToolType = {
  CallSubAgent: "call_sub_agent",
} as const;
export type CallSubAgentToolType = ClosedEnum<typeof CallSubAgentToolType>;

/**
 * Delegates tasks to specialized sub-agents
 */
export type CallSubAgentTool = {
  type: CallSubAgentToolType;
  requiresApproval?: boolean | undefined;
};

/** @internal */
export const CallSubAgentToolType$inboundSchema: z.ZodNativeEnum<
  typeof CallSubAgentToolType
> = z.nativeEnum(CallSubAgentToolType);

/** @internal */
export const CallSubAgentToolType$outboundSchema: z.ZodNativeEnum<
  typeof CallSubAgentToolType
> = CallSubAgentToolType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CallSubAgentToolType$ {
  /** @deprecated use `CallSubAgentToolType$inboundSchema` instead. */
  export const inboundSchema = CallSubAgentToolType$inboundSchema;
  /** @deprecated use `CallSubAgentToolType$outboundSchema` instead. */
  export const outboundSchema = CallSubAgentToolType$outboundSchema;
}

/** @internal */
export const CallSubAgentTool$inboundSchema: z.ZodType<
  CallSubAgentTool,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: CallSubAgentToolType$inboundSchema,
  requires_approval: z.boolean().default(false),
}).transform((v) => {
  return remap$(v, {
    "requires_approval": "requiresApproval",
  });
});

/** @internal */
export type CallSubAgentTool$Outbound = {
  type: string;
  requires_approval: boolean;
};

/** @internal */
export const CallSubAgentTool$outboundSchema: z.ZodType<
  CallSubAgentTool$Outbound,
  z.ZodTypeDef,
  CallSubAgentTool
> = z.object({
  type: CallSubAgentToolType$outboundSchema,
  requiresApproval: z.boolean().default(false),
}).transform((v) => {
  return remap$(v, {
    requiresApproval: "requires_approval",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CallSubAgentTool$ {
  /** @deprecated use `CallSubAgentTool$inboundSchema` instead. */
  export const inboundSchema = CallSubAgentTool$inboundSchema;
  /** @deprecated use `CallSubAgentTool$outboundSchema` instead. */
  export const outboundSchema = CallSubAgentTool$outboundSchema;
  /** @deprecated use `CallSubAgentTool$Outbound` instead. */
  export type Outbound = CallSubAgentTool$Outbound;
}

export function callSubAgentToolToJSON(
  callSubAgentTool: CallSubAgentTool,
): string {
  return JSON.stringify(
    CallSubAgentTool$outboundSchema.parse(callSubAgentTool),
  );
}

export function callSubAgentToolFromJSON(
  jsonString: string,
): SafeParseResult<CallSubAgentTool, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CallSubAgentTool$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CallSubAgentTool' from JSON`,
  );
}
