/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export const QueryKnowledgeBaseToolType = {
  QueryKnowledgeBase: "query_knowledge_base",
} as const;
export type QueryKnowledgeBaseToolType = ClosedEnum<
  typeof QueryKnowledgeBaseToolType
>;

/**
 * Queries knowledge bases for information
 */
export type QueryKnowledgeBaseTool = {
  type: QueryKnowledgeBaseToolType;
  requiresApproval?: boolean | undefined;
};

/** @internal */
export const QueryKnowledgeBaseToolType$inboundSchema: z.ZodNativeEnum<
  typeof QueryKnowledgeBaseToolType
> = z.nativeEnum(QueryKnowledgeBaseToolType);

/** @internal */
export const QueryKnowledgeBaseToolType$outboundSchema: z.ZodNativeEnum<
  typeof QueryKnowledgeBaseToolType
> = QueryKnowledgeBaseToolType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace QueryKnowledgeBaseToolType$ {
  /** @deprecated use `QueryKnowledgeBaseToolType$inboundSchema` instead. */
  export const inboundSchema = QueryKnowledgeBaseToolType$inboundSchema;
  /** @deprecated use `QueryKnowledgeBaseToolType$outboundSchema` instead. */
  export const outboundSchema = QueryKnowledgeBaseToolType$outboundSchema;
}

/** @internal */
export const QueryKnowledgeBaseTool$inboundSchema: z.ZodType<
  QueryKnowledgeBaseTool,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: QueryKnowledgeBaseToolType$inboundSchema,
  requires_approval: z.boolean().default(false),
}).transform((v) => {
  return remap$(v, {
    "requires_approval": "requiresApproval",
  });
});

/** @internal */
export type QueryKnowledgeBaseTool$Outbound = {
  type: string;
  requires_approval: boolean;
};

/** @internal */
export const QueryKnowledgeBaseTool$outboundSchema: z.ZodType<
  QueryKnowledgeBaseTool$Outbound,
  z.ZodTypeDef,
  QueryKnowledgeBaseTool
> = z.object({
  type: QueryKnowledgeBaseToolType$outboundSchema,
  requiresApproval: z.boolean().default(false),
}).transform((v) => {
  return remap$(v, {
    requiresApproval: "requires_approval",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace QueryKnowledgeBaseTool$ {
  /** @deprecated use `QueryKnowledgeBaseTool$inboundSchema` instead. */
  export const inboundSchema = QueryKnowledgeBaseTool$inboundSchema;
  /** @deprecated use `QueryKnowledgeBaseTool$outboundSchema` instead. */
  export const outboundSchema = QueryKnowledgeBaseTool$outboundSchema;
  /** @deprecated use `QueryKnowledgeBaseTool$Outbound` instead. */
  export type Outbound = QueryKnowledgeBaseTool$Outbound;
}

export function queryKnowledgeBaseToolToJSON(
  queryKnowledgeBaseTool: QueryKnowledgeBaseTool,
): string {
  return JSON.stringify(
    QueryKnowledgeBaseTool$outboundSchema.parse(queryKnowledgeBaseTool),
  );
}

export function queryKnowledgeBaseToolFromJSON(
  jsonString: string,
): SafeParseResult<QueryKnowledgeBaseTool, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => QueryKnowledgeBaseTool$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'QueryKnowledgeBaseTool' from JSON`,
  );
}
