/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * The status of the tool. `Live` is the latest version of the tool. `Draft` is a version that is not yet published. `Pending` is a version that is pending approval. `Published` is a version that was live and has been replaced by a new version.
 */
export const CodeExecutionToolStatus = {
  Live: "live",
  Draft: "draft",
  Pending: "pending",
  Published: "published",
} as const;
/**
 * The status of the tool. `Live` is the latest version of the tool. `Draft` is a version that is not yet published. `Pending` is a version that is pending approval. `Published` is a version that was live and has been replaced by a new version.
 */
export type CodeExecutionToolStatus = ClosedEnum<
  typeof CodeExecutionToolStatus
>;

export const CodeExecutionToolType = {
  Code: "code",
} as const;
export type CodeExecutionToolType = ClosedEnum<typeof CodeExecutionToolType>;

export const Language = {
  Python: "python",
} as const;
export type Language = ClosedEnum<typeof Language>;

export type CodeTool = {
  /**
   * The parameters the functions accepts, described as a JSON Schema object. See the `OpenAI` [guide](https://platform.openai.com/docs/guides/function-calling) for examples, and the [JSON Schema reference](https://json-schema.org/understanding-json-schema/) for documentation about the format.
   */
  parameters?: { [k: string]: any } | undefined;
  language: Language;
  /**
   * The code to execute.
   */
  code: string;
};

/**
 * Executes code in a secure sandbox environment
 */
export type CodeExecutionTool = {
  /**
   * The path where the entity is stored in the project structure. The first element of the path always represents the project name. Any subsequent path element after the project will be created as a folder in the project if it does not exists.
   */
  path: string;
  /**
   * Unique key of the tool as it will be displayed in the UI
   */
  key: string;
  /**
   * The name of the tool as it will be displayed in the UI. This is optional and if not provided, the `key` will be used.
   */
  displayName: string;
  /**
   * A description of the tool, used by the model to choose when and how to call the tool. We do recommend using the `description` field as accurate as possible to give enough context to the model to make the right decision.
   */
  description: string;
  /**
   * The status of the tool. `Live` is the latest version of the tool. `Draft` is a version that is not yet published. `Pending` is a version that is pending approval. `Published` is a version that was live and has been replaced by a new version.
   */
  status?: CodeExecutionToolStatus | undefined;
  versionHash?: string | undefined;
  type: CodeExecutionToolType;
  codeTool: CodeTool;
  id?: string | undefined;
  requiresApproval?: boolean | undefined;
};

/** @internal */
export const CodeExecutionToolStatus$inboundSchema: z.ZodNativeEnum<
  typeof CodeExecutionToolStatus
> = z.nativeEnum(CodeExecutionToolStatus);

/** @internal */
export const CodeExecutionToolStatus$outboundSchema: z.ZodNativeEnum<
  typeof CodeExecutionToolStatus
> = CodeExecutionToolStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CodeExecutionToolStatus$ {
  /** @deprecated use `CodeExecutionToolStatus$inboundSchema` instead. */
  export const inboundSchema = CodeExecutionToolStatus$inboundSchema;
  /** @deprecated use `CodeExecutionToolStatus$outboundSchema` instead. */
  export const outboundSchema = CodeExecutionToolStatus$outboundSchema;
}

/** @internal */
export const CodeExecutionToolType$inboundSchema: z.ZodNativeEnum<
  typeof CodeExecutionToolType
> = z.nativeEnum(CodeExecutionToolType);

/** @internal */
export const CodeExecutionToolType$outboundSchema: z.ZodNativeEnum<
  typeof CodeExecutionToolType
> = CodeExecutionToolType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CodeExecutionToolType$ {
  /** @deprecated use `CodeExecutionToolType$inboundSchema` instead. */
  export const inboundSchema = CodeExecutionToolType$inboundSchema;
  /** @deprecated use `CodeExecutionToolType$outboundSchema` instead. */
  export const outboundSchema = CodeExecutionToolType$outboundSchema;
}

/** @internal */
export const Language$inboundSchema: z.ZodNativeEnum<typeof Language> = z
  .nativeEnum(Language);

/** @internal */
export const Language$outboundSchema: z.ZodNativeEnum<typeof Language> =
  Language$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Language$ {
  /** @deprecated use `Language$inboundSchema` instead. */
  export const inboundSchema = Language$inboundSchema;
  /** @deprecated use `Language$outboundSchema` instead. */
  export const outboundSchema = Language$outboundSchema;
}

/** @internal */
export const CodeTool$inboundSchema: z.ZodType<
  CodeTool,
  z.ZodTypeDef,
  unknown
> = z.object({
  parameters: z.record(z.any()).optional(),
  language: Language$inboundSchema,
  code: z.string(),
});

/** @internal */
export type CodeTool$Outbound = {
  parameters?: { [k: string]: any } | undefined;
  language: string;
  code: string;
};

/** @internal */
export const CodeTool$outboundSchema: z.ZodType<
  CodeTool$Outbound,
  z.ZodTypeDef,
  CodeTool
> = z.object({
  parameters: z.record(z.any()).optional(),
  language: Language$outboundSchema,
  code: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CodeTool$ {
  /** @deprecated use `CodeTool$inboundSchema` instead. */
  export const inboundSchema = CodeTool$inboundSchema;
  /** @deprecated use `CodeTool$outboundSchema` instead. */
  export const outboundSchema = CodeTool$outboundSchema;
  /** @deprecated use `CodeTool$Outbound` instead. */
  export type Outbound = CodeTool$Outbound;
}

export function codeToolToJSON(codeTool: CodeTool): string {
  return JSON.stringify(CodeTool$outboundSchema.parse(codeTool));
}

export function codeToolFromJSON(
  jsonString: string,
): SafeParseResult<CodeTool, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CodeTool$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CodeTool' from JSON`,
  );
}

/** @internal */
export const CodeExecutionTool$inboundSchema: z.ZodType<
  CodeExecutionTool,
  z.ZodTypeDef,
  unknown
> = z.object({
  path: z.string(),
  key: z.string(),
  display_name: z.string(),
  description: z.string(),
  status: CodeExecutionToolStatus$inboundSchema.default("live"),
  version_hash: z.string().optional(),
  type: CodeExecutionToolType$inboundSchema,
  code_tool: z.lazy(() => CodeTool$inboundSchema),
  _id: z.string().optional(),
  requires_approval: z.boolean().default(false),
}).transform((v) => {
  return remap$(v, {
    "display_name": "displayName",
    "version_hash": "versionHash",
    "code_tool": "codeTool",
    "_id": "id",
    "requires_approval": "requiresApproval",
  });
});

/** @internal */
export type CodeExecutionTool$Outbound = {
  path: string;
  key: string;
  display_name: string;
  description: string;
  status: string;
  version_hash?: string | undefined;
  type: string;
  code_tool: CodeTool$Outbound;
  _id?: string | undefined;
  requires_approval: boolean;
};

/** @internal */
export const CodeExecutionTool$outboundSchema: z.ZodType<
  CodeExecutionTool$Outbound,
  z.ZodTypeDef,
  CodeExecutionTool
> = z.object({
  path: z.string(),
  key: z.string(),
  displayName: z.string(),
  description: z.string(),
  status: CodeExecutionToolStatus$outboundSchema.default("live"),
  versionHash: z.string().optional(),
  type: CodeExecutionToolType$outboundSchema,
  codeTool: z.lazy(() => CodeTool$outboundSchema),
  id: z.string().optional(),
  requiresApproval: z.boolean().default(false),
}).transform((v) => {
  return remap$(v, {
    displayName: "display_name",
    versionHash: "version_hash",
    codeTool: "code_tool",
    id: "_id",
    requiresApproval: "requires_approval",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CodeExecutionTool$ {
  /** @deprecated use `CodeExecutionTool$inboundSchema` instead. */
  export const inboundSchema = CodeExecutionTool$inboundSchema;
  /** @deprecated use `CodeExecutionTool$outboundSchema` instead. */
  export const outboundSchema = CodeExecutionTool$outboundSchema;
  /** @deprecated use `CodeExecutionTool$Outbound` instead. */
  export type Outbound = CodeExecutionTool$Outbound;
}

export function codeExecutionToolToJSON(
  codeExecutionTool: CodeExecutionTool,
): string {
  return JSON.stringify(
    CodeExecutionTool$outboundSchema.parse(codeExecutionTool),
  );
}

export function codeExecutionToolFromJSON(
  jsonString: string,
): SafeParseResult<CodeExecutionTool, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CodeExecutionTool$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CodeExecutionTool' from JSON`,
  );
}
