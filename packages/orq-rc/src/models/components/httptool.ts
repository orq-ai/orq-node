/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * The status of the tool. `Live` is the latest version of the tool. `Draft` is a version that is not yet published. `Pending` is a version that is pending approval. `Published` is a version that was live and has been replaced by a new version.
 */
export const Status = {
  Live: "live",
  Draft: "draft",
  Pending: "pending",
  Published: "published",
} as const;
/**
 * The status of the tool. `Live` is the latest version of the tool. `Draft` is a version that is not yet published. `Pending` is a version that is pending approval. `Published` is a version that was live and has been replaced by a new version.
 */
export type Status = ClosedEnum<typeof Status>;

export const HttpToolType = {
  Http: "http",
} as const;
export type HttpToolType = ClosedEnum<typeof HttpToolType>;

/**
 * The HTTP method to use.
 */
export const Method = {
  Get: "GET",
  Post: "POST",
  Put: "PUT",
  Delete: "DELETE",
} as const;
/**
 * The HTTP method to use.
 */
export type Method = ClosedEnum<typeof Method>;

/**
 * The blueprint for the HTTP request. The `arguments` field will be used to replace the placeholders in the `url`, `headers`, `body`, and `arguments` fields.
 */
export type Blueprint = {
  /**
   * The URL to send the request to.
   */
  url: string;
  /**
   * The HTTP method to use.
   */
  method: Method;
  /**
   * The headers to send with the request.
   */
  headers?: { [k: string]: string } | undefined;
  /**
   * The body to send with the request.
   */
  body?: { [k: string]: any } | undefined;
};

/**
 * The type of the argument.
 */
export const HttpToolHttpType = {
  String: "string",
  Number: "number",
  Boolean: "boolean",
} as const;
/**
 * The type of the argument.
 */
export type HttpToolHttpType = ClosedEnum<typeof HttpToolHttpType>;

/**
 * The default value of the argument.
 */
export type DefaultValue = string | number | boolean;

export type Arguments = {
  /**
   * The type of the argument.
   */
  type: HttpToolHttpType;
  /**
   * A description of the argument.
   */
  description: string;
  /**
   * Whether to send the argument to the model. If set to false, the argument will not be sent to the model and needs to be provided by the user or it will be left blank.
   */
  sendToModel?: boolean | undefined;
  /**
   * The default value of the argument.
   */
  defaultValue?: string | number | boolean | undefined;
};

export type Http = {
  /**
   * The blueprint for the HTTP request. The `arguments` field will be used to replace the placeholders in the `url`, `headers`, `body`, and `arguments` fields.
   */
  blueprint: Blueprint;
  /**
   * The arguments to send with the request. The keys will be used to replace the placeholders in the `blueprint` field.
   */
  arguments?: { [k: string]: Arguments } | undefined;
};

/**
 * Makes HTTP requests to external APIs
 */
export type HttpTool = {
  id?: string | undefined;
  /**
   * The path where the entity is stored in the project structure. The first element of the path always represents the project name. Any subsequent path element after the project will be created as a folder in the project if it does not exists.
   */
  path: string;
  /**
   * Unique key of the tool as it will be displayed in the UI
   */
  key: string;
  /**
   * The name of the tool as it will be displayed in the UI. This is optional and if not provided, the `key` will be used.
   */
  displayName: string;
  /**
   * A description of the tool, used by the model to choose when and how to call the tool. We do recommend using the `description` field as accurate as possible to give enough context to the model to make the right decision.
   */
  description: string;
  /**
   * The status of the tool. `Live` is the latest version of the tool. `Draft` is a version that is not yet published. `Pending` is a version that is pending approval. `Published` is a version that was live and has been replaced by a new version.
   */
  status?: Status | undefined;
  versionHash?: string | undefined;
  type: HttpToolType;
  http: Http;
  requiresApproval?: boolean | undefined;
};

/** @internal */
export const Status$inboundSchema: z.ZodNativeEnum<typeof Status> = z
  .nativeEnum(Status);

/** @internal */
export const Status$outboundSchema: z.ZodNativeEnum<typeof Status> =
  Status$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Status$ {
  /** @deprecated use `Status$inboundSchema` instead. */
  export const inboundSchema = Status$inboundSchema;
  /** @deprecated use `Status$outboundSchema` instead. */
  export const outboundSchema = Status$outboundSchema;
}

/** @internal */
export const HttpToolType$inboundSchema: z.ZodNativeEnum<typeof HttpToolType> =
  z.nativeEnum(HttpToolType);

/** @internal */
export const HttpToolType$outboundSchema: z.ZodNativeEnum<typeof HttpToolType> =
  HttpToolType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HttpToolType$ {
  /** @deprecated use `HttpToolType$inboundSchema` instead. */
  export const inboundSchema = HttpToolType$inboundSchema;
  /** @deprecated use `HttpToolType$outboundSchema` instead. */
  export const outboundSchema = HttpToolType$outboundSchema;
}

/** @internal */
export const Method$inboundSchema: z.ZodNativeEnum<typeof Method> = z
  .nativeEnum(Method);

/** @internal */
export const Method$outboundSchema: z.ZodNativeEnum<typeof Method> =
  Method$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Method$ {
  /** @deprecated use `Method$inboundSchema` instead. */
  export const inboundSchema = Method$inboundSchema;
  /** @deprecated use `Method$outboundSchema` instead. */
  export const outboundSchema = Method$outboundSchema;
}

/** @internal */
export const Blueprint$inboundSchema: z.ZodType<
  Blueprint,
  z.ZodTypeDef,
  unknown
> = z.object({
  url: z.string(),
  method: Method$inboundSchema,
  headers: z.record(z.string()).optional(),
  body: z.record(z.any()).optional(),
});

/** @internal */
export type Blueprint$Outbound = {
  url: string;
  method: string;
  headers?: { [k: string]: string } | undefined;
  body?: { [k: string]: any } | undefined;
};

/** @internal */
export const Blueprint$outboundSchema: z.ZodType<
  Blueprint$Outbound,
  z.ZodTypeDef,
  Blueprint
> = z.object({
  url: z.string(),
  method: Method$outboundSchema,
  headers: z.record(z.string()).optional(),
  body: z.record(z.any()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Blueprint$ {
  /** @deprecated use `Blueprint$inboundSchema` instead. */
  export const inboundSchema = Blueprint$inboundSchema;
  /** @deprecated use `Blueprint$outboundSchema` instead. */
  export const outboundSchema = Blueprint$outboundSchema;
  /** @deprecated use `Blueprint$Outbound` instead. */
  export type Outbound = Blueprint$Outbound;
}

export function blueprintToJSON(blueprint: Blueprint): string {
  return JSON.stringify(Blueprint$outboundSchema.parse(blueprint));
}

export function blueprintFromJSON(
  jsonString: string,
): SafeParseResult<Blueprint, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Blueprint$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Blueprint' from JSON`,
  );
}

/** @internal */
export const HttpToolHttpType$inboundSchema: z.ZodNativeEnum<
  typeof HttpToolHttpType
> = z.nativeEnum(HttpToolHttpType);

/** @internal */
export const HttpToolHttpType$outboundSchema: z.ZodNativeEnum<
  typeof HttpToolHttpType
> = HttpToolHttpType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HttpToolHttpType$ {
  /** @deprecated use `HttpToolHttpType$inboundSchema` instead. */
  export const inboundSchema = HttpToolHttpType$inboundSchema;
  /** @deprecated use `HttpToolHttpType$outboundSchema` instead. */
  export const outboundSchema = HttpToolHttpType$outboundSchema;
}

/** @internal */
export const DefaultValue$inboundSchema: z.ZodType<
  DefaultValue,
  z.ZodTypeDef,
  unknown
> = z.union([z.string(), z.number(), z.boolean()]);

/** @internal */
export type DefaultValue$Outbound = string | number | boolean;

/** @internal */
export const DefaultValue$outboundSchema: z.ZodType<
  DefaultValue$Outbound,
  z.ZodTypeDef,
  DefaultValue
> = z.union([z.string(), z.number(), z.boolean()]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DefaultValue$ {
  /** @deprecated use `DefaultValue$inboundSchema` instead. */
  export const inboundSchema = DefaultValue$inboundSchema;
  /** @deprecated use `DefaultValue$outboundSchema` instead. */
  export const outboundSchema = DefaultValue$outboundSchema;
  /** @deprecated use `DefaultValue$Outbound` instead. */
  export type Outbound = DefaultValue$Outbound;
}

export function defaultValueToJSON(defaultValue: DefaultValue): string {
  return JSON.stringify(DefaultValue$outboundSchema.parse(defaultValue));
}

export function defaultValueFromJSON(
  jsonString: string,
): SafeParseResult<DefaultValue, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DefaultValue$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DefaultValue' from JSON`,
  );
}

/** @internal */
export const Arguments$inboundSchema: z.ZodType<
  Arguments,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: HttpToolHttpType$inboundSchema,
  description: z.string(),
  send_to_model: z.boolean().default(true),
  default_value: z.union([z.string(), z.number(), z.boolean()]).optional(),
}).transform((v) => {
  return remap$(v, {
    "send_to_model": "sendToModel",
    "default_value": "defaultValue",
  });
});

/** @internal */
export type Arguments$Outbound = {
  type: string;
  description: string;
  send_to_model: boolean;
  default_value?: string | number | boolean | undefined;
};

/** @internal */
export const Arguments$outboundSchema: z.ZodType<
  Arguments$Outbound,
  z.ZodTypeDef,
  Arguments
> = z.object({
  type: HttpToolHttpType$outboundSchema,
  description: z.string(),
  sendToModel: z.boolean().default(true),
  defaultValue: z.union([z.string(), z.number(), z.boolean()]).optional(),
}).transform((v) => {
  return remap$(v, {
    sendToModel: "send_to_model",
    defaultValue: "default_value",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Arguments$ {
  /** @deprecated use `Arguments$inboundSchema` instead. */
  export const inboundSchema = Arguments$inboundSchema;
  /** @deprecated use `Arguments$outboundSchema` instead. */
  export const outboundSchema = Arguments$outboundSchema;
  /** @deprecated use `Arguments$Outbound` instead. */
  export type Outbound = Arguments$Outbound;
}

export function argumentsToJSON(value: Arguments): string {
  return JSON.stringify(Arguments$outboundSchema.parse(value));
}

export function argumentsFromJSON(
  jsonString: string,
): SafeParseResult<Arguments, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Arguments$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Arguments' from JSON`,
  );
}

/** @internal */
export const Http$inboundSchema: z.ZodType<Http, z.ZodTypeDef, unknown> = z
  .object({
    blueprint: z.lazy(() => Blueprint$inboundSchema),
    arguments: z.record(z.lazy(() => Arguments$inboundSchema)).optional(),
  });

/** @internal */
export type Http$Outbound = {
  blueprint: Blueprint$Outbound;
  arguments?: { [k: string]: Arguments$Outbound } | undefined;
};

/** @internal */
export const Http$outboundSchema: z.ZodType<Http$Outbound, z.ZodTypeDef, Http> =
  z.object({
    blueprint: z.lazy(() => Blueprint$outboundSchema),
    arguments: z.record(z.lazy(() => Arguments$outboundSchema)).optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Http$ {
  /** @deprecated use `Http$inboundSchema` instead. */
  export const inboundSchema = Http$inboundSchema;
  /** @deprecated use `Http$outboundSchema` instead. */
  export const outboundSchema = Http$outboundSchema;
  /** @deprecated use `Http$Outbound` instead. */
  export type Outbound = Http$Outbound;
}

export function httpToJSON(http: Http): string {
  return JSON.stringify(Http$outboundSchema.parse(http));
}

export function httpFromJSON(
  jsonString: string,
): SafeParseResult<Http, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Http$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Http' from JSON`,
  );
}

/** @internal */
export const HttpTool$inboundSchema: z.ZodType<
  HttpTool,
  z.ZodTypeDef,
  unknown
> = z.object({
  _id: z.string().default("01K60CGPWFAB7ZDDQT1K4MRS6G"),
  path: z.string(),
  key: z.string(),
  display_name: z.string(),
  description: z.string(),
  status: Status$inboundSchema.default("live"),
  version_hash: z.string().optional(),
  type: HttpToolType$inboundSchema,
  http: z.lazy(() => Http$inboundSchema),
  requires_approval: z.boolean().default(false),
}).transform((v) => {
  return remap$(v, {
    "_id": "id",
    "display_name": "displayName",
    "version_hash": "versionHash",
    "requires_approval": "requiresApproval",
  });
});

/** @internal */
export type HttpTool$Outbound = {
  _id: string;
  path: string;
  key: string;
  display_name: string;
  description: string;
  status: string;
  version_hash?: string | undefined;
  type: string;
  http: Http$Outbound;
  requires_approval: boolean;
};

/** @internal */
export const HttpTool$outboundSchema: z.ZodType<
  HttpTool$Outbound,
  z.ZodTypeDef,
  HttpTool
> = z.object({
  id: z.string().default("01K60CGPWFAB7ZDDQT1K4MRS6G"),
  path: z.string(),
  key: z.string(),
  displayName: z.string(),
  description: z.string(),
  status: Status$outboundSchema.default("live"),
  versionHash: z.string().optional(),
  type: HttpToolType$outboundSchema,
  http: z.lazy(() => Http$outboundSchema),
  requiresApproval: z.boolean().default(false),
}).transform((v) => {
  return remap$(v, {
    id: "_id",
    displayName: "display_name",
    versionHash: "version_hash",
    requiresApproval: "requires_approval",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HttpTool$ {
  /** @deprecated use `HttpTool$inboundSchema` instead. */
  export const inboundSchema = HttpTool$inboundSchema;
  /** @deprecated use `HttpTool$outboundSchema` instead. */
  export const outboundSchema = HttpTool$outboundSchema;
  /** @deprecated use `HttpTool$Outbound` instead. */
  export type Outbound = HttpTool$Outbound;
}

export function httpToolToJSON(httpTool: HttpTool): string {
  return JSON.stringify(HttpTool$outboundSchema.parse(httpTool));
}

export function httpToolFromJSON(
  jsonString: string,
): SafeParseResult<HttpTool, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => HttpTool$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'HttpTool' from JSON`,
  );
}
