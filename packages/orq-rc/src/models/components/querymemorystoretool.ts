/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export const QueryMemoryStoreToolType = {
  QueryMemoryStore: "query_memory_store",
} as const;
export type QueryMemoryStoreToolType = ClosedEnum<
  typeof QueryMemoryStoreToolType
>;

/**
 * Queries agent memory stores for context
 */
export type QueryMemoryStoreTool = {
  type: QueryMemoryStoreToolType;
  requiresApproval?: boolean | undefined;
};

/** @internal */
export const QueryMemoryStoreToolType$inboundSchema: z.ZodNativeEnum<
  typeof QueryMemoryStoreToolType
> = z.nativeEnum(QueryMemoryStoreToolType);

/** @internal */
export const QueryMemoryStoreToolType$outboundSchema: z.ZodNativeEnum<
  typeof QueryMemoryStoreToolType
> = QueryMemoryStoreToolType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace QueryMemoryStoreToolType$ {
  /** @deprecated use `QueryMemoryStoreToolType$inboundSchema` instead. */
  export const inboundSchema = QueryMemoryStoreToolType$inboundSchema;
  /** @deprecated use `QueryMemoryStoreToolType$outboundSchema` instead. */
  export const outboundSchema = QueryMemoryStoreToolType$outboundSchema;
}

/** @internal */
export const QueryMemoryStoreTool$inboundSchema: z.ZodType<
  QueryMemoryStoreTool,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: QueryMemoryStoreToolType$inboundSchema,
  requires_approval: z.boolean().default(false),
}).transform((v) => {
  return remap$(v, {
    "requires_approval": "requiresApproval",
  });
});

/** @internal */
export type QueryMemoryStoreTool$Outbound = {
  type: string;
  requires_approval: boolean;
};

/** @internal */
export const QueryMemoryStoreTool$outboundSchema: z.ZodType<
  QueryMemoryStoreTool$Outbound,
  z.ZodTypeDef,
  QueryMemoryStoreTool
> = z.object({
  type: QueryMemoryStoreToolType$outboundSchema,
  requiresApproval: z.boolean().default(false),
}).transform((v) => {
  return remap$(v, {
    requiresApproval: "requires_approval",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace QueryMemoryStoreTool$ {
  /** @deprecated use `QueryMemoryStoreTool$inboundSchema` instead. */
  export const inboundSchema = QueryMemoryStoreTool$inboundSchema;
  /** @deprecated use `QueryMemoryStoreTool$outboundSchema` instead. */
  export const outboundSchema = QueryMemoryStoreTool$outboundSchema;
  /** @deprecated use `QueryMemoryStoreTool$Outbound` instead. */
  export type Outbound = QueryMemoryStoreTool$Outbound;
}

export function queryMemoryStoreToolToJSON(
  queryMemoryStoreTool: QueryMemoryStoreTool,
): string {
  return JSON.stringify(
    QueryMemoryStoreTool$outboundSchema.parse(queryMemoryStoreTool),
  );
}

export function queryMemoryStoreToolFromJSON(
  jsonString: string,
): SafeParseResult<QueryMemoryStoreTool, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => QueryMemoryStoreTool$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'QueryMemoryStoreTool' from JSON`,
  );
}
