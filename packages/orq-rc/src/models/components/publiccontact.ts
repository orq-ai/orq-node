/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * Information about the contact making the request. If the contact does not exist, it will be created automatically.
 */
export type PublicContact = {
  /**
   * Unique identifier for the contact
   */
  id: string;
  /**
   * Display name of the contact
   */
  displayName?: string | undefined;
  /**
   * Email address of the contact
   */
  email?: string | undefined;
  /**
   * A hash of key/value pairs containing any other data about the contact
   */
  metadata?: Array<{ [k: string]: any }> | undefined;
  /**
   * URL to the contact's avatar or logo
   */
  logoUrl?: string | undefined;
  /**
   * A list of tags associated with the contact
   */
  tags?: Array<string> | undefined;
};

/** @internal */
export const PublicContact$inboundSchema: z.ZodType<
  PublicContact,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  display_name: z.string().optional(),
  email: z.string().optional(),
  metadata: z.array(z.record(z.any())).optional(),
  logo_url: z.string().optional(),
  tags: z.array(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    "display_name": "displayName",
    "logo_url": "logoUrl",
  });
});

/** @internal */
export type PublicContact$Outbound = {
  id: string;
  display_name?: string | undefined;
  email?: string | undefined;
  metadata?: Array<{ [k: string]: any }> | undefined;
  logo_url?: string | undefined;
  tags?: Array<string> | undefined;
};

/** @internal */
export const PublicContact$outboundSchema: z.ZodType<
  PublicContact$Outbound,
  z.ZodTypeDef,
  PublicContact
> = z.object({
  id: z.string(),
  displayName: z.string().optional(),
  email: z.string().optional(),
  metadata: z.array(z.record(z.any())).optional(),
  logoUrl: z.string().optional(),
  tags: z.array(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    displayName: "display_name",
    logoUrl: "logo_url",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PublicContact$ {
  /** @deprecated use `PublicContact$inboundSchema` instead. */
  export const inboundSchema = PublicContact$inboundSchema;
  /** @deprecated use `PublicContact$outboundSchema` instead. */
  export const outboundSchema = PublicContact$outboundSchema;
  /** @deprecated use `PublicContact$Outbound` instead. */
  export type Outbound = PublicContact$Outbound;
}

export function publicContactToJSON(publicContact: PublicContact): string {
  return JSON.stringify(PublicContact$outboundSchema.parse(publicContact));
}

export function publicContactFromJSON(
  jsonString: string,
): SafeParseResult<PublicContact, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PublicContact$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PublicContact' from JSON`,
  );
}
