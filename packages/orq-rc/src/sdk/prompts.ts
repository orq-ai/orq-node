/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { promptsCreate } from "../funcs/promptsCreate.js";
import { promptsCreateVersion } from "../funcs/promptsCreateVersion.js";
import { promptsDelete } from "../funcs/promptsDelete.js";
import { promptsDuplicate } from "../funcs/promptsDuplicate.js";
import { promptsGetAll } from "../funcs/promptsGetAll.js";
import { promptsGetOne } from "../funcs/promptsGetOne.js";
import { promptsUpdate } from "../funcs/promptsUpdate.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";

export class Prompts extends ClientSDK {
  /**
   * Create a new prompt
   */
  async create(
    request?: operations.CreatePromptRequestBody | undefined,
    options?: RequestOptions,
  ): Promise<operations.CreatePromptResponseBody> {
    return unwrapAsync(promptsCreate(
      this,
      request,
      options,
    ));
  }

  /**
   * Create a new prompt version
   */
  async createVersion(
    request: operations.CreatePromptVersionRequest,
    options?: RequestOptions,
  ): Promise<operations.CreatePromptVersionResponseBody> {
    return unwrapAsync(promptsCreateVersion(
      this,
      request,
      options,
    ));
  }

  /**
   * Delete a prompt
   */
  async delete(
    request: operations.DeletePromptRequest,
    options?: RequestOptions,
  ): Promise<void> {
    return unwrapAsync(promptsDelete(
      this,
      request,
      options,
    ));
  }

  /**
   * Get one prompt
   */
  async getOne(
    request: operations.GetOnePromptRequest,
    options?: RequestOptions,
  ): Promise<void> {
    return unwrapAsync(promptsGetOne(
      this,
      request,
      options,
    ));
  }

  /**
   * Update a prompt
   */
  async update(
    request: operations.UpdatePromptRequest,
    options?: RequestOptions,
  ): Promise<operations.UpdatePromptResponseBody> {
    return unwrapAsync(promptsUpdate(
      this,
      request,
      options,
    ));
  }

  /**
   * Duplicate a prompt
   */
  async duplicate(
    request: operations.DuplicatePromptRequest,
    options?: RequestOptions,
  ): Promise<void> {
    return unwrapAsync(promptsDuplicate(
      this,
      request,
      options,
    ));
  }

  /**
   * Get all prompts
   */
  async getAll(
    request?: operations.GetAllPromptsRequest | undefined,
    options?: RequestOptions,
  ): Promise<operations.GetAllPromptsResponseBody> {
    return unwrapAsync(promptsGetAll(
      this,
      request,
      options,
    ));
  }
}
