/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { proxyAudioSpeech } from "../funcs/proxyAudioSpeech.js";
import { proxyAudioTranscriptions } from "../funcs/proxyAudioTranscriptions.js";
import { proxyAudioTranslations } from "../funcs/proxyAudioTranslations.js";
import {
  ChatCompletionsAcceptEnum,
  proxyChatCompletions,
} from "../funcs/proxyChatCompletions.js";
import {
  CompletionsAcceptEnum,
  proxyCompletions,
} from "../funcs/proxyCompletions.js";
import { proxyEmbeddings } from "../funcs/proxyEmbeddings.js";
import { proxyImagesEdit } from "../funcs/proxyImagesEdit.js";
import { proxyImagesGenerate } from "../funcs/proxyImagesGenerate.js";
import { proxyImagesVariation } from "../funcs/proxyImagesVariation.js";
import { proxyModerations } from "../funcs/proxyModerations.js";
import { proxyRerank } from "../funcs/proxyRerank.js";
import {
  proxyResponsesCreate,
  ResponsesCreateAcceptEnum,
} from "../funcs/proxyResponsesCreate.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";

export { ChatCompletionsAcceptEnum } from "../funcs/proxyChatCompletions.js";

export { CompletionsAcceptEnum } from "../funcs/proxyCompletions.js";

export { ResponsesCreateAcceptEnum } from "../funcs/proxyResponsesCreate.js";

export class Proxy extends ClientSDK {
  /**
   * Create chat completion
   *
   * @remarks
   * Creates a model response for the given chat conversation with support for retries, fallbacks, prompts, and variables.
   */
  async chatCompletions(
    request: operations.CreateChatCompletionRequestBody,
    options?: RequestOptions & {
      acceptHeaderOverride?: ChatCompletionsAcceptEnum;
    },
  ): Promise<operations.CreateChatCompletionResponse> {
    return unwrapAsync(proxyChatCompletions(
      this,
      request,
      options,
    ));
  }

  async moderations(
    request: operations.PostV2ProxyModerationsRequestBody,
    options?: RequestOptions,
  ): Promise<operations.PostV2ProxyModerationsResponseBody> {
    return unwrapAsync(proxyModerations(
      this,
      request,
      options,
    ));
  }

  /**
   * Create embeddings
   *
   * @remarks
   * Get a vector representation of a given input that can be easily consumed by machine learning models and algorithms.
   */
  async embeddings(
    request: operations.PostV2ProxyEmbeddingsRequestBody,
    options?: RequestOptions,
  ): Promise<operations.PostV2ProxyEmbeddingsResponseBody> {
    return unwrapAsync(proxyEmbeddings(
      this,
      request,
      options,
    ));
  }

  /**
   * Rerank a list of documents based on their relevance to a query.
   */
  async rerank(
    request: operations.PostV2ProxyRerankRequestBody,
    options?: RequestOptions,
  ): Promise<operations.PostV2ProxyRerankResponseBody> {
    return unwrapAsync(proxyRerank(
      this,
      request,
      options,
    ));
  }

  /**
   * Generates audio from the input text.
   */
  async audioSpeech(
    request: operations.PostV2ProxyAudioSpeechRequestBody,
    options?: RequestOptions,
  ): Promise<void> {
    return unwrapAsync(proxyAudioSpeech(
      this,
      request,
      options,
    ));
  }

  /**
   * Create a completion
   *
   * @remarks
   * For sending requests to legacy completion models
   */
  async completions(
    request: operations.PostV2ProxyCompletionsRequestBody,
    options?: RequestOptions & { acceptHeaderOverride?: CompletionsAcceptEnum },
  ): Promise<operations.PostV2ProxyCompletionsResponse> {
    return unwrapAsync(proxyCompletions(
      this,
      request,
      options,
    ));
  }

  /**
   * Create an Image
   */
  async imagesGenerate(
    request: operations.PostV2ProxyImagesGenerationsRequestBody,
    options?: RequestOptions,
  ): Promise<operations.PostV2ProxyImagesGenerationsResponseBody> {
    return unwrapAsync(proxyImagesGenerate(
      this,
      request,
      options,
    ));
  }

  /**
   * Edit an Image
   */
  async imagesEdit(
    request: operations.PostV2ProxyImagesEditsRequestBody,
    options?: RequestOptions,
  ): Promise<operations.PostV2ProxyImagesEditsResponseBody> {
    return unwrapAsync(proxyImagesEdit(
      this,
      request,
      options,
    ));
  }

  /**
   * Create an Image Variation
   */
  async imagesVariation(
    request: operations.PostV2ProxyImagesVariationsRequestBody,
    options?: RequestOptions,
  ): Promise<operations.PostV2ProxyImagesVariationsResponseBody> {
    return unwrapAsync(proxyImagesVariation(
      this,
      request,
      options,
    ));
  }

  async audioTranscriptions(
    request: operations.PostV2ProxyAudioTranscriptionsRequestBody,
    options?: RequestOptions,
  ): Promise<operations.PostV2ProxyAudioTranscriptionsResponseBody> {
    return unwrapAsync(proxyAudioTranscriptions(
      this,
      request,
      options,
    ));
  }

  async audioTranslations(
    request: operations.PostV2ProxyAudioTranslationsRequestBody,
    options?: RequestOptions,
  ): Promise<operations.PostV2ProxyAudioTranslationsResponseBody> {
    return unwrapAsync(proxyAudioTranslations(
      this,
      request,
      options,
    ));
  }

  /**
   * Create response
   *
   * @remarks
   * Creates a model response for the given input.
   */
  async responsesCreate(
    request: operations.CreateResponseRequestBody,
    options?: RequestOptions & {
      acceptHeaderOverride?: ResponsesCreateAcceptEnum;
    },
  ): Promise<operations.CreateResponseResponse> {
    return unwrapAsync(proxyResponsesCreate(
      this,
      request,
      options,
    ));
  }
}
