/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { agentsList } from "../funcs/agentsList.js";
import { agentsListActions } from "../funcs/agentsListActions.js";
import { agentsRetrieve } from "../funcs/agentsRetrieve.js";
import { agentsRetrieveAction } from "../funcs/agentsRetrieveAction.js";
import { agentsRetrieveTask } from "../funcs/agentsRetrieveTask.js";
import { agentsReviewAction } from "../funcs/agentsReviewAction.js";
import { agentsRun } from "../funcs/agentsRun.js";
import { agentsStreamRun } from "../funcs/agentsStreamRun.js";
import { EventStream } from "../lib/event-streams.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";

export class Agents extends ClientSDK {
  /**
   * List all agents
   *
   * @remarks
   * Retrieves a paginated list of all agents in your workspace. Each agent includes its configuration, primary model, and optional fallback model settings.
   */
  async list(
    request?: operations.ListAgentsRequest | undefined,
    options?: RequestOptions,
  ): Promise<operations.ListAgentsResponseBody> {
    return unwrapAsync(agentsList(
      this,
      request,
      options,
    ));
  }

  /**
   * Get an agent
   *
   * @remarks
   * Retrieves a single agent by ID, including its full configuration with primary and fallback model settings.
   */
  async retrieve(
    request: operations.GetAgentRequest,
    options?: RequestOptions,
  ): Promise<operations.GetAgentResponseBody> {
    return unwrapAsync(agentsRetrieve(
      this,
      request,
      options,
    ));
  }

  /**
   * Retrieve a specific agent task
   *
   * @remarks
   * Retrieves detailed information about a specific task for a given agent, including execution status and results.
   */
  async retrieveTask(
    request: operations.GetAgentTaskRequest,
    options?: RequestOptions,
  ): Promise<operations.GetAgentTaskResponseBody> {
    return unwrapAsync(agentsRetrieveTask(
      this,
      request,
      options,
    ));
  }

  /**
   * Run an agent
   *
   * @remarks
   * Executes an agent with the provided configuration using A2A message format. If the agent already exists with the same configuration, it will be reused. If the configuration differs, a new version is created. The fallback model is configured at the agent level and will be used automatically if the primary model fails during execution.
   */
  async run(
    request?: operations.RunAgentRequestBody | undefined,
    options?: RequestOptions,
  ): Promise<operations.RunAgentResponseBody> {
    return unwrapAsync(agentsRun(
      this,
      request,
      options,
    ));
  }

  /**
   * Run and stream agent execution
   *
   * @remarks
   * Creates or updates an agent with the provided configuration, then streams execution events via Server-Sent Events (SSE). If the agent already exists with the same configuration, it will be reused. If the configuration differs, a new version is created. The stream will continue until the agent completes, errors, or reaches the configured timeout.
   */
  async streamRun(
    request?: operations.StreamRunAgentRequestBody | undefined,
    options?: RequestOptions,
  ): Promise<EventStream<operations.StreamRunAgentResponseBody>> {
    return unwrapAsync(agentsStreamRun(
      this,
      request,
      options,
    ));
  }

  /**
   * List all actions
   */
  async listActions(
    request: operations.ListActionsRequest,
    options?: RequestOptions,
  ): Promise<operations.ListActionsResponseBody> {
    return unwrapAsync(agentsListActions(
      this,
      request,
      options,
    ));
  }

  /**
   * Retrieve an action executed by an agent task.
   */
  async retrieveAction(
    request: operations.RetrieveActionRequest,
    options?: RequestOptions,
  ): Promise<operations.RetrieveActionResponseBody> {
    return unwrapAsync(agentsRetrieveAction(
      this,
      request,
      options,
    ));
  }

  /**
   * Review a tool execution
   *
   * @remarks
   * Review a tool execution and approve, reject or mock it. This will trigger the next step in the agent execution.
   */
  async reviewAction(
    request: operations.ReviewActionRequest,
    options?: RequestOptions,
  ): Promise<operations.ReviewActionResponseBody> {
    return unwrapAsync(agentsReviewAction(
      this,
      request,
      options,
    ));
  }
}
