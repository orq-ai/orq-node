/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { memoryStoresCreate } from "../funcs/memoryStoresCreate.js";
import { memoryStoresCreateDocument } from "../funcs/memoryStoresCreateDocument.js";
import { memoryStoresCreateMemory } from "../funcs/memoryStoresCreateMemory.js";
import { memoryStoresDelete } from "../funcs/memoryStoresDelete.js";
import { memoryStoresDeleteDocument } from "../funcs/memoryStoresDeleteDocument.js";
import { memoryStoresDeleteMemory } from "../funcs/memoryStoresDeleteMemory.js";
import { memoryStoresList } from "../funcs/memoryStoresList.js";
import { memoryStoresListDocuments } from "../funcs/memoryStoresListDocuments.js";
import { memoryStoresListMemories } from "../funcs/memoryStoresListMemories.js";
import { memoryStoresRetrieve } from "../funcs/memoryStoresRetrieve.js";
import { memoryStoresRetrieveDocument } from "../funcs/memoryStoresRetrieveDocument.js";
import { memoryStoresRetrieveMemory } from "../funcs/memoryStoresRetrieveMemory.js";
import { memoryStoresUpdate } from "../funcs/memoryStoresUpdate.js";
import { memoryStoresUpdateDocument } from "../funcs/memoryStoresUpdateDocument.js";
import { memoryStoresUpdateMemory } from "../funcs/memoryStoresUpdateMemory.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";

export class MemoryStores extends ClientSDK {
  /**
   * List memory stores
   *
   * @remarks
   * Retrieves a paginated list of memory stores in the workspace. Use cursor-based pagination parameters to navigate through the results.
   */
  async list(
    request?: operations.GetAllMemoryStoresRequest | undefined,
    options?: RequestOptions,
  ): Promise<operations.GetAllMemoryStoresResponseBody> {
    return unwrapAsync(memoryStoresList(
      this,
      request,
      options,
    ));
  }

  /**
   * Create memory store
   */
  async create(
    request?: operations.CreateMemoryStoreRequestBody | undefined,
    options?: RequestOptions,
  ): Promise<operations.CreateMemoryStoreResponseBody> {
    return unwrapAsync(memoryStoresCreate(
      this,
      request,
      options,
    ));
  }

  /**
   * Retrieve memory store
   *
   * @remarks
   * Retrieves detailed information about a specific memory store, including its configuration and metadata.
   */
  async retrieve(
    request: operations.RetrieveMemoryStoreRequest,
    options?: RequestOptions,
  ): Promise<operations.RetrieveMemoryStoreResponseBody> {
    return unwrapAsync(memoryStoresRetrieve(
      this,
      request,
      options,
    ));
  }

  /**
   * Update memory store
   *
   * @remarks
   * Update the memory store configuration
   */
  async update(
    request: operations.UpdateMemoryStoreRequest,
    options?: RequestOptions,
  ): Promise<operations.UpdateMemoryStoreResponseBody> {
    return unwrapAsync(memoryStoresUpdate(
      this,
      request,
      options,
    ));
  }

  /**
   * Delete memory store
   *
   * @remarks
   * Permanently delete a memory store, including memories and documents.
   */
  async delete(
    request: operations.DeleteMemoryStoreRequest,
    options?: RequestOptions,
  ): Promise<void> {
    return unwrapAsync(memoryStoresDelete(
      this,
      request,
      options,
    ));
  }

  /**
   * List all memories
   *
   * @remarks
   * Retrieves a paginated list of memories for the memory store
   */
  async listMemories(
    request: operations.GetAllMemoriesRequest,
    options?: RequestOptions,
  ): Promise<operations.GetAllMemoriesResponseBody> {
    return unwrapAsync(memoryStoresListMemories(
      this,
      request,
      options,
    ));
  }

  /**
   * Create a new memory
   *
   * @remarks
   * Creates a new memory in the specified memory store.
   */
  async createMemory(
    request: operations.CreateMemoryRequest,
    options?: RequestOptions,
  ): Promise<operations.CreateMemoryResponseBody> {
    return unwrapAsync(memoryStoresCreateMemory(
      this,
      request,
      options,
    ));
  }

  /**
   * Retrieve a specific memory
   *
   * @remarks
   * Retrieves details of a specific memory by its ID
   */
  async retrieveMemory(
    request: operations.RetrieveMemoryRequest,
    options?: RequestOptions,
  ): Promise<operations.RetrieveMemoryResponseBody> {
    return unwrapAsync(memoryStoresRetrieveMemory(
      this,
      request,
      options,
    ));
  }

  /**
   * Update a specific memory
   *
   * @remarks
   * Updates the details of a specific memory.
   */
  async updateMemory(
    request: operations.UpdateMemoryRequest,
    options?: RequestOptions,
  ): Promise<operations.UpdateMemoryResponseBody> {
    return unwrapAsync(memoryStoresUpdateMemory(
      this,
      request,
      options,
    ));
  }

  /**
   * Delete a specific memory
   *
   * @remarks
   * Permanently deletes a specific memory.
   *
   *         Use this endpoint to:
   *         - Remove a memory from the store
   *         - Clean up unused memories
   *         - Manage memory storage space
   */
  async deleteMemory(
    request: operations.DeleteMemoryRequest,
    options?: RequestOptions,
  ): Promise<void> {
    return unwrapAsync(memoryStoresDeleteMemory(
      this,
      request,
      options,
    ));
  }

  /**
   * List all documents for a memory
   *
   * @remarks
   * Retrieves a paginated list of documents associated with a specific memory.
   */
  async listDocuments(
    request: operations.GetAllMemoryDocumentsRequest,
    options?: RequestOptions,
  ): Promise<operations.GetAllMemoryDocumentsResponseBody> {
    return unwrapAsync(memoryStoresListDocuments(
      this,
      request,
      options,
    ));
  }

  /**
   * Create a new memory document
   *
   * @remarks
   * Creates a new document in the specified memory.
   */
  async createDocument(
    request: operations.CreateMemoryDocumentRequest,
    options?: RequestOptions,
  ): Promise<operations.CreateMemoryDocumentResponseBody> {
    return unwrapAsync(memoryStoresCreateDocument(
      this,
      request,
      options,
    ));
  }

  /**
   * Retrieve a specific memory document
   *
   * @remarks
   * Retrieves details of a specific memory document by its ID.
   */
  async retrieveDocument(
    request: operations.RetrieveMemoryDocumentRequest,
    options?: RequestOptions,
  ): Promise<operations.RetrieveMemoryDocumentResponseBody> {
    return unwrapAsync(memoryStoresRetrieveDocument(
      this,
      request,
      options,
    ));
  }

  /**
   * Update a specific memory document
   *
   * @remarks
   * Updates the details of a specific memory document.
   */
  async updateDocument(
    request: operations.UpdateMemoryDocumentRequest,
    options?: RequestOptions,
  ): Promise<operations.UpdateMemoryDocumentResponseBody> {
    return unwrapAsync(memoryStoresUpdateDocument(
      this,
      request,
      options,
    ));
  }

  /**
   * Delete a specific memory document
   *
   * @remarks
   * Permanently deletes a specific memory document.
   *
   *         Use this endpoint to:
   *         - Remove a document from a memory
   *         - Clean up unused documents
   *         - Manage document storage space
   */
  async deleteDocument(
    request: operations.DeleteMemoryDocumentRequest,
    options?: RequestOptions,
  ): Promise<void> {
    return unwrapAsync(memoryStoresDeleteDocument(
      this,
      request,
      options,
    ));
  }
}
