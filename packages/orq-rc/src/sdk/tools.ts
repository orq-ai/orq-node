/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { toolsCreate } from "../funcs/toolsCreate.js";
import { toolsDelete } from "../funcs/toolsDelete.js";
import { toolsList } from "../funcs/toolsList.js";
import { toolsRetrieve } from "../funcs/toolsRetrieve.js";
import { toolsUpdate } from "../funcs/toolsUpdate.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";

export class Tools extends ClientSDK {
  /**
   * List tools
   *
   * @remarks
   * Retrieves a paginated list of tools in the workspace. Use cursor-based pagination parameters to navigate through the results.
   */
  async list(
    request?: operations.GetAllToolsRequest | undefined,
    options?: RequestOptions,
  ): Promise<operations.GetAllToolsResponseBody> {
    return unwrapAsync(toolsList(
      this,
      request,
      options,
    ));
  }

  /**
   * Create tool
   *
   * @remarks
   * Creates a new tool in the workspace.
   */
  async create(
    request?: operations.CreateToolRequestBody | undefined,
    options?: RequestOptions,
  ): Promise<operations.CreateToolResponseBody> {
    return unwrapAsync(toolsCreate(
      this,
      request,
      options,
    ));
  }

  /**
   * Update tool
   *
   * @remarks
   * Updates a tool in the workspace.
   */
  async update(
    request: operations.UpdateToolRequest,
    options?: RequestOptions,
  ): Promise<operations.UpdateToolResponseBody> {
    return unwrapAsync(toolsUpdate(
      this,
      request,
      options,
    ));
  }

  /**
   * Delete tool
   *
   * @remarks
   * Deletes a tool by key.
   */
  async delete(
    request: operations.DeleteToolRequest,
    options?: RequestOptions,
  ): Promise<void> {
    return unwrapAsync(toolsDelete(
      this,
      request,
      options,
    ));
  }

  /**
   * Retrieve tool
   *
   * @remarks
   * Retrieves a tool by key.
   */
  async retrieve(
    request: operations.RetrieveToolRequest,
    options?: RequestOptions,
  ): Promise<operations.RetrieveToolResponseBody> {
    return unwrapAsync(toolsRetrieve(
      this,
      request,
      options,
    ));
  }
}
