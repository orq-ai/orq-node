/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { sessionsCreate } from "../funcs/sessionsCreate.js";
import { sessionsDelete } from "../funcs/sessionsDelete.js";
import { sessionsGet } from "../funcs/sessionsGet.js";
import { sessionsList } from "../funcs/sessionsList.js";
import { sessionsUpdate } from "../funcs/sessionsUpdate.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";

export class Sessions extends ClientSDK {
  /**
   * Create Trace Session
   *
   * @remarks
   * Create a session for traces
   */
  async create(
    request?: operations.CreateSessionRequestBody | undefined,
    options?: RequestOptions,
  ): Promise<operations.CreateSessionResponseBody> {
    return unwrapAsync(sessionsCreate(
      this,
      request,
      options,
    ));
  }

  /**
   * Delete Trace Session
   *
   * @remarks
   * Delete a trace session
   */
  async delete(
    request: operations.DeleteSessionRequest,
    options?: RequestOptions,
  ): Promise<void> {
    return unwrapAsync(sessionsDelete(
      this,
      request,
      options,
    ));
  }

  /**
   * Get Trace Session
   *
   * @remarks
   * Get a trace session
   */
  async get(
    request: operations.GetSessionRequest,
    options?: RequestOptions,
  ): Promise<operations.GetSessionResponseBody> {
    return unwrapAsync(sessionsGet(
      this,
      request,
      options,
    ));
  }

  /**
   * Update Trace Session
   *
   * @remarks
   * Update a trace session
   */
  async update(
    request: operations.UpdateSessionRequest,
    options?: RequestOptions,
  ): Promise<operations.UpdateSessionResponseBody> {
    return unwrapAsync(sessionsUpdate(
      this,
      request,
      options,
    ));
  }

  /**
   * List sessions
   *
   * @remarks
   * Retrieves a paginated list of sessions for the current workspace.
   */
  async list(
    request?: operations.ListSessionsRequestBody | undefined,
    options?: RequestOptions,
  ): Promise<operations.ListSessionsResponseBody> {
    return unwrapAsync(sessionsList(
      this,
      request,
      options,
    ));
  }
}
