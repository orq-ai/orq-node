/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { batchesCancel } from "../funcs/batchesCancel.js";
import { batchesCreate } from "../funcs/batchesCreate.js";
import { batchesList } from "../funcs/batchesList.js";
import { batchesRetrieve } from "../funcs/batchesRetrieve.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";

export class Batches extends ClientSDK {
  /**
   * Create Batch
   *
   * @remarks
   * Creates and executes a batch from an uploaded file of requests
   */
  async create(
    request: operations.CreateBatchRequestBody,
    options?: RequestOptions,
  ): Promise<operations.CreateBatchResponseBody> {
    return unwrapAsync(batchesCreate(
      this,
      request,
      options,
    ));
  }

  /**
   * List Batch
   *
   * @remarks
   * List your workspace's batches.
   */
  async list(
    request: operations.ListBatchesRequest,
    options?: RequestOptions,
  ): Promise<operations.ListBatchesResponseBody> {
    return unwrapAsync(batchesList(
      this,
      request,
      options,
    ));
  }

  /**
   * Retrieve Batch
   *
   * @remarks
   * Retrieve a batch by ID.
   */
  async retrieve(
    request: operations.RetrieveBatchRequest,
    options?: RequestOptions,
  ): Promise<operations.RetrieveBatchResponseBody> {
    return unwrapAsync(batchesRetrieve(
      this,
      request,
      options,
    ));
  }

  /**
   * Cancel Batch
   *
   * @remarks
   * Cancel a batch by ID.
   */
  async cancel(
    request: operations.CancelBatchRequest,
    options?: RequestOptions,
  ): Promise<operations.CancelBatchResponseBody> {
    return unwrapAsync(batchesCancel(
      this,
      request,
      options,
    ));
  }
}
