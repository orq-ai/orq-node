/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { knowledgeCreate } from "../funcs/knowledgeCreate.js";
import { knowledgeCreateChunks } from "../funcs/knowledgeCreateChunks.js";
import { knowledgeCreateDatasource } from "../funcs/knowledgeCreateDatasource.js";
import { knowledgeDelete } from "../funcs/knowledgeDelete.js";
import { knowledgeDeleteChunk } from "../funcs/knowledgeDeleteChunk.js";
import { knowledgeDeleteDatasource } from "../funcs/knowledgeDeleteDatasource.js";
import { knowledgeList } from "../funcs/knowledgeList.js";
import { knowledgeListChunks } from "../funcs/knowledgeListChunks.js";
import { knowledgeListDatasources } from "../funcs/knowledgeListDatasources.js";
import { knowledgeRetrieve } from "../funcs/knowledgeRetrieve.js";
import { knowledgeRetrieveChunk } from "../funcs/knowledgeRetrieveChunk.js";
import { knowledgeRetrieveDatasource } from "../funcs/knowledgeRetrieveDatasource.js";
import { knowledgeSearch } from "../funcs/knowledgeSearch.js";
import { knowledgeUpdate } from "../funcs/knowledgeUpdate.js";
import { knowledgeUpdateChunk } from "../funcs/knowledgeUpdateChunk.js";
import { knowledgeUpdateDatasource } from "../funcs/knowledgeUpdateDatasource.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";

export class Knowledge extends ClientSDK {
  /**
   * List all knowledge bases
   *
   * @remarks
   * Returns a list of your knowledge bases. The knowledge bases are returned sorted by creation date, with the most recent knowledge bases appearing first
   */
  async list(
    request?: operations.ListKnowledgeBasesRequest | undefined,
    options?: RequestOptions,
  ): Promise<operations.ListKnowledgeBasesResponseBody> {
    return unwrapAsync(knowledgeList(
      this,
      request,
      options,
    ));
  }

  /**
   * Create a knowledge
   */
  async create(
    request: operations.CreateKnowledgeRequestBody,
    options?: RequestOptions,
  ): Promise<operations.CreateKnowledgeResponseBody> {
    return unwrapAsync(knowledgeCreate(
      this,
      request,
      options,
    ));
  }

  /**
   * Retrieves a knowledge base
   *
   * @remarks
   * Retrieve a knowledge base with the settings.
   */
  async retrieve(
    request: operations.GetOneKnowledgeRequest,
    options?: RequestOptions,
  ): Promise<operations.GetOneKnowledgeResponseBody> {
    return unwrapAsync(knowledgeRetrieve(
      this,
      request,
      options,
    ));
  }

  /**
   * Updates a knowledge
   */
  async update(
    request: operations.UpdateKnowledgeRequest,
    options?: RequestOptions,
  ): Promise<operations.UpdateKnowledgeResponseBody> {
    return unwrapAsync(knowledgeUpdate(
      this,
      request,
      options,
    ));
  }

  /**
   * Deletes a knowledge
   *
   * @remarks
   * Deletes a knowledge base. Deleting a knowledge base will delete all the datasources and chunks associated with it.
   */
  async delete(
    request: operations.DeleteKnowledgeRequest,
    options?: RequestOptions,
  ): Promise<void> {
    return unwrapAsync(knowledgeDelete(
      this,
      request,
      options,
    ));
  }

  /**
   * Search knowledge base
   *
   * @remarks
   * Search a Knowledge Base and return the most similar chunks, along with their search and rerank scores.
   */
  async search(
    request: operations.SearchKnowledgeRequest,
    options?: RequestOptions,
  ): Promise<operations.SearchKnowledgeResponseBody> {
    return unwrapAsync(knowledgeSearch(
      this,
      request,
      options,
    ));
  }

  /**
   * List all datasources
   */
  async listDatasources(
    request: operations.ListDatasourcesRequest,
    options?: RequestOptions,
  ): Promise<operations.ListDatasourcesResponseBody> {
    return unwrapAsync(knowledgeListDatasources(
      this,
      request,
      options,
    ));
  }

  /**
   * Create a new datasource
   */
  async createDatasource(
    request: operations.CreateDatasourceRequest,
    options?: RequestOptions,
  ): Promise<operations.CreateDatasourceResponseBody> {
    return unwrapAsync(knowledgeCreateDatasource(
      this,
      request,
      options,
    ));
  }

  /**
   * Retrieve a datasource
   */
  async retrieveDatasource(
    request: operations.RetrieveDatasourceRequest,
    options?: RequestOptions,
  ): Promise<operations.RetrieveDatasourceResponseBody> {
    return unwrapAsync(knowledgeRetrieveDatasource(
      this,
      request,
      options,
    ));
  }

  /**
   * Deletes a datasource
   *
   * @remarks
   * Deletes a datasource from a knowledge base. Deleting a datasource will remove it from the knowledge base and all associated chunks. This action is irreversible and cannot be undone.
   */
  async deleteDatasource(
    request: operations.DeleteDatasourceRequest,
    options?: RequestOptions,
  ): Promise<void> {
    return unwrapAsync(knowledgeDeleteDatasource(
      this,
      request,
      options,
    ));
  }

  /**
   * Update a datasource
   */
  async updateDatasource(
    request: operations.UpdateDatasourceRequest,
    options?: RequestOptions,
  ): Promise<operations.UpdateDatasourceResponseBody> {
    return unwrapAsync(knowledgeUpdateDatasource(
      this,
      request,
      options,
    ));
  }

  /**
   * Create chunks for a datasource
   */
  async createChunks(
    request: operations.CreateChunkRequest,
    options?: RequestOptions,
  ): Promise<Array<operations.CreateChunkResponseBody>> {
    return unwrapAsync(knowledgeCreateChunks(
      this,
      request,
      options,
    ));
  }

  /**
   * List all chunks for a datasource
   */
  async listChunks(
    request: operations.ListChunksRequest,
    options?: RequestOptions,
  ): Promise<operations.ListChunksResponseBody> {
    return unwrapAsync(knowledgeListChunks(
      this,
      request,
      options,
    ));
  }

  /**
   * Update a chunk
   */
  async updateChunk(
    request: operations.UpdateChunkRequest,
    options?: RequestOptions,
  ): Promise<operations.UpdateChunkResponseBody> {
    return unwrapAsync(knowledgeUpdateChunk(
      this,
      request,
      options,
    ));
  }

  /**
   * Delete a chunk
   */
  async deleteChunk(
    request: operations.DeleteChunkRequest,
    options?: RequestOptions,
  ): Promise<void> {
    return unwrapAsync(knowledgeDeleteChunk(
      this,
      request,
      options,
    ));
  }

  /**
   * Retrieve a chunk
   */
  async retrieveChunk(
    request: operations.GetOneChunkRequest,
    options?: RequestOptions,
  ): Promise<operations.GetOneChunkResponseBody> {
    return unwrapAsync(knowledgeRetrieveChunk(
      this,
      request,
      options,
    ));
  }
}
