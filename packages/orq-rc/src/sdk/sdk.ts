/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { postV2TracesSessionsCount } from "../funcs/postV2TracesSessionsCount.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";
import { Contacts } from "./contacts.js";
import { Datasets } from "./datasets.js";
import { Deployments } from "./deployments.js";
import { Feedback } from "./feedback.js";
import { Files } from "./files.js";
import { Knowledge } from "./knowledge.js";
import { MemoryStores } from "./memorystores.js";
import { Prompts } from "./prompts.js";
import { Remoteconfigs } from "./remoteconfigs.js";
import { Sessions } from "./sessions.js";
import { Tools } from "./tools.js";

export class Orq extends ClientSDK {
  private _contacts?: Contacts;
  get contacts(): Contacts {
    return (this._contacts ??= new Contacts(this._options));
  }

  private _feedback?: Feedback;
  get feedback(): Feedback {
    return (this._feedback ??= new Feedback(this._options));
  }

  private _deployments?: Deployments;
  get deployments(): Deployments {
    return (this._deployments ??= new Deployments(this._options));
  }

  private _files?: Files;
  get files(): Files {
    return (this._files ??= new Files(this._options));
  }

  private _prompts?: Prompts;
  get prompts(): Prompts {
    return (this._prompts ??= new Prompts(this._options));
  }

  private _remoteconfigs?: Remoteconfigs;
  get remoteconfigs(): Remoteconfigs {
    return (this._remoteconfigs ??= new Remoteconfigs(this._options));
  }

  private _memoryStores?: MemoryStores;
  get memoryStores(): MemoryStores {
    return (this._memoryStores ??= new MemoryStores(this._options));
  }

  private _tools?: Tools;
  get tools(): Tools {
    return (this._tools ??= new Tools(this._options));
  }

  private _datasets?: Datasets;
  get datasets(): Datasets {
    return (this._datasets ??= new Datasets(this._options));
  }

  private _knowledge?: Knowledge;
  get knowledge(): Knowledge {
    return (this._knowledge ??= new Knowledge(this._options));
  }

  private _sessions?: Sessions;
  get sessions(): Sessions {
    return (this._sessions ??= new Sessions(this._options));
  }

  /**
   * Get total count of sessions
   */
  async postV2TracesSessionsCount(
    request?: operations.PostV2TracesSessionsCountRequestBody | undefined,
    options?: RequestOptions,
  ): Promise<operations.PostV2TracesSessionsCountResponseBody> {
    return unwrapAsync(postV2TracesSessionsCount(
      this,
      request,
      options,
    ));
  }
}
