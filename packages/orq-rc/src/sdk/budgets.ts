/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { budgetsCreate } from "../funcs/budgetsCreate.js";
import { budgetsDelete } from "../funcs/budgetsDelete.js";
import { budgetsGet } from "../funcs/budgetsGet.js";
import { budgetsList } from "../funcs/budgetsList.js";
import { budgetsUpdate } from "../funcs/budgetsUpdate.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";

export class Budgets extends ClientSDK {
  /**
   * List contact budget configurations
   *
   * @remarks
   * Retrieves a paginated list of budget configurations in your workspace. Use pagination parameters to navigate through large budget lists efficiently.
   */
  async list(
    request?: operations.ListBudgetsRequest | undefined,
    options?: RequestOptions,
  ): Promise<operations.ListBudgetsResponseBody> {
    return unwrapAsync(budgetsList(
      this,
      request,
      options,
    ));
  }

  /**
   * Create contact budget configuration
   *
   * @remarks
   * Create a new budget configuration for a contact. API Key and Workspace budget creation will be available in future releases.
   */
  async create(
    request: operations.CreateBudgetRequestBody,
    options?: RequestOptions,
  ): Promise<operations.CreateBudgetResponseBody> {
    return unwrapAsync(budgetsCreate(
      this,
      request,
      options,
    ));
  }

  /**
   * Get contact budget configuration
   *
   * @remarks
   * Get contact budget configuration by ID
   */
  async get(
    request: operations.GetBudgetRequest,
    options?: RequestOptions,
  ): Promise<operations.GetBudgetResponseBody> {
    return unwrapAsync(budgetsGet(
      this,
      request,
      options,
    ));
  }

  /**
   * Update contact budget configuration
   *
   * @remarks
   * Update contact budget configuration by ID
   */
  async update(
    request: operations.UpdateBudgetRequest,
    options?: RequestOptions,
  ): Promise<operations.UpdateBudgetResponseBody> {
    return unwrapAsync(budgetsUpdate(
      this,
      request,
      options,
    ));
  }

  /**
   * Delete contact budget configuration
   *
   * @remarks
   * Delete contact budget configuration by ID
   */
  async delete(
    request: operations.DeleteBudgetRequest,
    options?: RequestOptions,
  ): Promise<void> {
    return unwrapAsync(budgetsDelete(
      this,
      request,
      options,
    ));
  }
}
