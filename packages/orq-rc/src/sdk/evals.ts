/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { evalsAll } from "../funcs/evalsAll.js";
import { evalsCreate } from "../funcs/evalsCreate.js";
import { evalsDelete } from "../funcs/evalsDelete.js";
import { evalsUpdate } from "../funcs/evalsUpdate.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";

export class Evals extends ClientSDK {
  /**
   * Get all Evaluators
   */
  async all(
    request?: operations.GetEvalsRequest | undefined,
    options?: RequestOptions,
  ): Promise<operations.GetEvalsResponseBody> {
    return unwrapAsync(evalsAll(
      this,
      request,
      options,
    ));
  }

  /**
   * Create an Evaluator
   */
  async create(
    request?: operations.CreateEvalRequestBody | undefined,
    options?: RequestOptions,
  ): Promise<operations.CreateEvalResponseBody> {
    return unwrapAsync(evalsCreate(
      this,
      request,
      options,
    ));
  }

  /**
   * Update an Evaluator
   */
  async update(
    request: operations.UpdateEvalRequest,
    options?: RequestOptions,
  ): Promise<operations.UpdateEvalResponseBody> {
    return unwrapAsync(evalsUpdate(
      this,
      request,
      options,
    ));
  }

  /**
   * Delete an Evaluator
   */
  async delete(
    request: operations.DeleteEvalRequest,
    options?: RequestOptions,
  ): Promise<void> {
    return unwrapAsync(evalsDelete(
      this,
      request,
      options,
    ));
  }
}
