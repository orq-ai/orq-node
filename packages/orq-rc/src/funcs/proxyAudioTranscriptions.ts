/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { OrqCore } from "../core.js";
import { appendForm } from "../lib/encodings.js";
import {
  getContentTypeFromFileName,
  readableStreamToArrayBuffer,
} from "../lib/files.js";
import * as M from "../lib/matchers.js";
import { compactMap } from "../lib/primitives.js";
import { safeParse } from "../lib/schemas.js";
import { RequestOptions } from "../lib/sdks.js";
import { extractSecurity, resolveGlobalSecurity } from "../lib/security.js";
import { pathToFunc } from "../lib/url.js";
import {
  ConnectionError,
  InvalidRequestError,
  RequestAbortedError,
  RequestTimeoutError,
  UnexpectedClientError,
} from "../models/errors/httpclienterrors.js";
import * as errors from "../models/errors/index.js";
import { OrqError } from "../models/errors/orqerror.js";
import { ResponseValidationError } from "../models/errors/responsevalidationerror.js";
import { SDKValidationError } from "../models/errors/sdkvalidationerror.js";
import * as operations from "../models/operations/index.js";
import { APICall, APIPromise } from "../types/async.js";
import { isBlobLike } from "../types/blobs.js";
import { Result } from "../types/fp.js";
import { isReadableStream } from "../types/streams.js";

export function proxyAudioTranscriptions(
  client: OrqCore,
  request: operations.PostV2ProxyAudioTranscriptionsRequestBody,
  options?: RequestOptions,
): APIPromise<
  Result<
    operations.PostV2ProxyAudioTranscriptionsResponseBody,
    | errors.PostV2ProxyAudioTranscriptionsResponseBody
    | OrqError
    | ResponseValidationError
    | ConnectionError
    | RequestAbortedError
    | RequestTimeoutError
    | InvalidRequestError
    | UnexpectedClientError
    | SDKValidationError
  >
> {
  return new APIPromise($do(
    client,
    request,
    options,
  ));
}

async function $do(
  client: OrqCore,
  request: operations.PostV2ProxyAudioTranscriptionsRequestBody,
  options?: RequestOptions,
): Promise<
  [
    Result<
      operations.PostV2ProxyAudioTranscriptionsResponseBody,
      | errors.PostV2ProxyAudioTranscriptionsResponseBody
      | OrqError
      | ResponseValidationError
      | ConnectionError
      | RequestAbortedError
      | RequestTimeoutError
      | InvalidRequestError
      | UnexpectedClientError
      | SDKValidationError
    >,
    APICall,
  ]
> {
  const parsed = safeParse(
    request,
    (value) =>
      operations.PostV2ProxyAudioTranscriptionsRequestBody$outboundSchema.parse(
        value,
      ),
    "Input validation failed",
  );
  if (!parsed.ok) {
    return [parsed, { status: "invalid" }];
  }
  const payload = parsed.value;
  const body = new FormData();

  if (isBlobLike(payload.file)) {
    appendForm(body, "file", payload.file);
  } else if (isReadableStream(payload.file.content)) {
    const buffer = await readableStreamToArrayBuffer(payload.file.content);
    const contentType = getContentTypeFromFileName(payload.file.fileName)
      || "application/octet-stream";
    const blob = new Blob([buffer], { type: contentType });
    appendForm(body, "file", blob, payload.file.fileName);
  } else {
    const contentType = getContentTypeFromFileName(payload.file.fileName)
      || "application/octet-stream";
    appendForm(
      body,
      "file",
      new Blob([payload.file.content], { type: contentType }),
      payload.file.fileName,
    );
  }
  if (payload.diarize !== undefined) {
    appendForm(body, "diarize", payload.diarize);
  }
  if (payload.enable_logging !== undefined) {
    appendForm(body, "enable_logging", payload.enable_logging);
  }
  if (payload.language !== undefined) {
    appendForm(body, "language", payload.language);
  }
  if (payload.model !== undefined) {
    appendForm(body, "model", payload.model);
  }
  if (payload.num_speakers !== undefined) {
    appendForm(body, "num_speakers", payload.num_speakers);
  }
  if (payload.prompt !== undefined) {
    appendForm(body, "prompt", payload.prompt);
  }
  if (payload.response_format !== undefined) {
    appendForm(body, "response_format", payload.response_format);
  }
  if (payload.tag_audio_events !== undefined) {
    appendForm(body, "tag_audio_events", payload.tag_audio_events);
  }
  if (payload.temperature !== undefined) {
    appendForm(body, "temperature", payload.temperature);
  }
  if (payload.timestamp_granularities !== undefined) {
    appendForm(
      body,
      "timestamp_granularities",
      payload.timestamp_granularities,
    );
  }
  if (payload.timestamps_granularity !== undefined) {
    appendForm(body, "timestamps_granularity", payload.timestamps_granularity);
  }

  const path = pathToFunc("/v2/proxy/audio/transcriptions")();

  const headers = new Headers(compactMap({
    Accept: "application/json",
  }));

  const secConfig = await extractSecurity(client._options.apiKey);
  const securityInput = secConfig == null ? {} : { apiKey: secConfig };
  const requestSecurity = resolveGlobalSecurity(securityInput);

  const context = {
    options: client._options,
    baseURL: options?.serverURL ?? client._baseURL ?? "",
    operationID: "post_/v2/proxy/audio/transcriptions",
    oAuth2Scopes: [],

    resolvedSecurity: requestSecurity,

    securitySource: client._options.apiKey,
    retryConfig: options?.retries
      || client._options.retryConfig
      || { strategy: "none" },
    retryCodes: options?.retryCodes || ["429", "500", "502", "503", "504"],
  };

  const requestRes = client._createRequest(context, {
    security: requestSecurity,
    method: "POST",
    baseURL: options?.serverURL,
    path: path,
    headers: headers,
    body: body,
    userAgent: client._options.userAgent,
    timeoutMs: options?.timeoutMs || client._options.timeoutMs || 600000,
  }, options);
  if (!requestRes.ok) {
    return [requestRes, { status: "invalid" }];
  }
  const req = requestRes.value;

  const doResult = await client._do(req, {
    context,
    errorCodes: ["422", "4XX", "5XX"],
    retryConfig: context.retryConfig,
    retryCodes: context.retryCodes,
  });
  if (!doResult.ok) {
    return [doResult, { status: "request-error", request: req }];
  }
  const response = doResult.value;

  const responseFields = {
    HttpMeta: { Response: response, Request: req },
  };

  const [result] = await M.match<
    operations.PostV2ProxyAudioTranscriptionsResponseBody,
    | errors.PostV2ProxyAudioTranscriptionsResponseBody
    | OrqError
    | ResponseValidationError
    | ConnectionError
    | RequestAbortedError
    | RequestTimeoutError
    | InvalidRequestError
    | UnexpectedClientError
    | SDKValidationError
  >(
    M.json(
      200,
      operations.PostV2ProxyAudioTranscriptionsResponseBody$inboundSchema,
    ),
    M.jsonErr(
      422,
      errors.PostV2ProxyAudioTranscriptionsResponseBody$inboundSchema,
    ),
    M.fail("4XX"),
    M.fail("5XX"),
  )(response, req, { extraFields: responseFields });
  if (!result.ok) {
    return [result, { status: "complete", request: req, response }];
  }

  return [result, { status: "complete", request: req, response }];
}
