/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { datasetsClear } from "../funcs/datasetsClear.js";
import { datasetsCreate } from "../funcs/datasetsCreate.js";
import { datasetsCreateDatapoint } from "../funcs/datasetsCreateDatapoint.js";
import { datasetsDelete } from "../funcs/datasetsDelete.js";
import { datasetsDeleteDatapoint } from "../funcs/datasetsDeleteDatapoint.js";
import { datasetsList } from "../funcs/datasetsList.js";
import { datasetsListDatapoints } from "../funcs/datasetsListDatapoints.js";
import { datasetsRetrieve } from "../funcs/datasetsRetrieve.js";
import { datasetsRetrieveDatapoint } from "../funcs/datasetsRetrieveDatapoint.js";
import { datasetsUpdate } from "../funcs/datasetsUpdate.js";
import { datasetsUpdateDatapoint } from "../funcs/datasetsUpdateDatapoint.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";

export class Datasets extends ClientSDK {
  /**
   * List datasets
   *
   * @remarks
   * Retrieves a paginated list of datasets for the current workspace. Results can be paginated using cursor-based pagination.
   */
  async list(
    request?: operations.ListDatasetsRequest | undefined,
    options?: RequestOptions,
  ): Promise<operations.ListDatasetsResponseBody> {
    return unwrapAsync(datasetsList(
      this,
      request,
      options,
    ));
  }

  /**
   * Create a dataset
   *
   * @remarks
   * Creates a new dataset in the specified project.
   */
  async create(
    request?: operations.CreateDatasetRequestBody | undefined,
    options?: RequestOptions,
  ): Promise<operations.CreateDatasetResponseBody> {
    return unwrapAsync(datasetsCreate(
      this,
      request,
      options,
    ));
  }

  /**
   * Retrieve a dataset
   *
   * @remarks
   * Retrieves a specific dataset by its unique identifier
   */
  async retrieve(
    request: operations.RetrieveDatasetRequest,
    options?: RequestOptions,
  ): Promise<operations.RetrieveDatasetResponseBody> {
    return unwrapAsync(datasetsRetrieve(
      this,
      request,
      options,
    ));
  }

  /**
   * Update a dataset
   *
   * @remarks
   * Update a dataset
   */
  async update(
    request: operations.UpdateDatasetRequest,
    options?: RequestOptions,
  ): Promise<operations.UpdateDatasetResponseBody> {
    return unwrapAsync(datasetsUpdate(
      this,
      request,
      options,
    ));
  }

  /**
   * Delete a dataset
   *
   * @remarks
   * Permanently deletes a dataset and all its datapoints. This action is irreversible.
   */
  async delete(
    request: operations.DeleteDatasetRequest,
    options?: RequestOptions,
  ): Promise<void> {
    return unwrapAsync(datasetsDelete(
      this,
      request,
      options,
    ));
  }

  /**
   * List datapoints
   *
   * @remarks
   * Retrieves a paginated list of datapoints from a specific dataset.
   */
  async listDatapoints(
    request: operations.ListDatasetDatapointsRequest,
    options?: RequestOptions,
  ): Promise<operations.ListDatasetDatapointsResponseBody> {
    return unwrapAsync(datasetsListDatapoints(
      this,
      request,
      options,
    ));
  }

  /**
   * Create a datapoint
   *
   * @remarks
   * Creates a new datapoint in the specified dataset.
   */
  async createDatapoint(
    request: operations.CreateDatasetItemRequest,
    options?: RequestOptions,
  ): Promise<Array<operations.ResponseBody>> {
    return unwrapAsync(datasetsCreateDatapoint(
      this,
      request,
      options,
    ));
  }

  /**
   * Retrieve a datapoint
   *
   * @remarks
   * Retrieves a datapoint object
   */
  async retrieveDatapoint(
    request: operations.RetrieveDatapointRequest,
    options?: RequestOptions,
  ): Promise<operations.RetrieveDatapointResponseBody> {
    return unwrapAsync(datasetsRetrieveDatapoint(
      this,
      request,
      options,
    ));
  }

  /**
   * Update a datapoint
   */
  async updateDatapoint(
    request: operations.UpdateDatapointRequest,
    options?: RequestOptions,
  ): Promise<operations.UpdateDatapointResponseBody> {
    return unwrapAsync(datasetsUpdateDatapoint(
      this,
      request,
      options,
    ));
  }

  /**
   * Delete a datapoint
   *
   * @remarks
   * Permanently deletes a specific datapoint from a dataset.
   */
  async deleteDatapoint(
    request: operations.DeleteDatapointRequest,
    options?: RequestOptions,
  ): Promise<void> {
    return unwrapAsync(datasetsDeleteDatapoint(
      this,
      request,
      options,
    ));
  }

  /**
   * Delete all datapoints
   *
   * @remarks
   * Delete all datapoints from a dataset. This action is irreversible.
   */
  async clear(
    request: operations.ClearDatasetRequest,
    options?: RequestOptions,
  ): Promise<void> {
    return unwrapAsync(datasetsClear(
      this,
      request,
      options,
    ));
  }
}
