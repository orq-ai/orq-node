/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { evalsAgeAppropriate } from "../funcs/evalsAgeAppropriate.js";
import { evalsAll } from "../funcs/evalsAll.js";
import { evalsBertScore } from "../funcs/evalsBertScore.js";
import { evalsBleuScore } from "../funcs/evalsBleuScore.js";
import { evalsBotDetection } from "../funcs/evalsBotDetection.js";
import { evalsContains } from "../funcs/evalsContains.js";
import { evalsContainsAll } from "../funcs/evalsContainsAll.js";
import { evalsContainsAny } from "../funcs/evalsContainsAny.js";
import { evalsContainsEmail } from "../funcs/evalsContainsEmail.js";
import { evalsContainsNone } from "../funcs/evalsContainsNone.js";
import { evalsContainsUrl } from "../funcs/evalsContainsUrl.js";
import { evalsContainsValidLink } from "../funcs/evalsContainsValidLink.js";
import { evalsCreate } from "../funcs/evalsCreate.js";
import { evalsDelete } from "../funcs/evalsDelete.js";
import { evalsEndsWith } from "../funcs/evalsEndsWith.js";
import { evalsExactMatch } from "../funcs/evalsExactMatch.js";
import { evalsFactCheckingKnowledgeBase } from "../funcs/evalsFactCheckingKnowledgeBase.js";
import { evalsGrammar } from "../funcs/evalsGrammar.js";
import { evalsInvoke } from "../funcs/evalsInvoke.js";
import { evalsLengthBetween } from "../funcs/evalsLengthBetween.js";
import { evalsLengthGreaterThan } from "../funcs/evalsLengthGreaterThan.js";
import { evalsLengthLessThan } from "../funcs/evalsLengthLessThan.js";
import { evalsLocalization } from "../funcs/evalsLocalization.js";
import { evalsPii } from "../funcs/evalsPii.js";
import { evalsRagasCoherence } from "../funcs/evalsRagasCoherence.js";
import { evalsRagasConciseness } from "../funcs/evalsRagasConciseness.js";
import { evalsRagasContextPrecision } from "../funcs/evalsRagasContextPrecision.js";
import { evalsRagasCorrectness } from "../funcs/evalsRagasCorrectness.js";
import { evalsRagasFaithfulness } from "../funcs/evalsRagasFaithfulness.js";
import { evalsRagasHarmfulness } from "../funcs/evalsRagasHarmfulness.js";
import { evalsRagasMaliciousness } from "../funcs/evalsRagasMaliciousness.js";
import { evalsRagasResponseRelevancy } from "../funcs/evalsRagasResponseRelevancy.js";
import { evalsRagasSummarization } from "../funcs/evalsRagasSummarization.js";
import { evalsSentimentClassification } from "../funcs/evalsSentimentClassification.js";
import { evalsSummarization } from "../funcs/evalsSummarization.js";
import { evalsToneOfVoice } from "../funcs/evalsToneOfVoice.js";
import { evalsTranslation } from "../funcs/evalsTranslation.js";
import { evalsUpdate } from "../funcs/evalsUpdate.js";
import { evalsValidJson } from "../funcs/evalsValidJson.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";

export class Evals extends ClientSDK {
  /**
   * Get all Evaluators
   */
  async all(
    request?: operations.GetEvalsRequest | undefined,
    options?: RequestOptions,
  ): Promise<operations.GetEvalsResponseBody> {
    return unwrapAsync(evalsAll(
      this,
      request,
      options,
    ));
  }

  /**
   * Create an Evaluator
   */
  async create(
    request?: operations.CreateEvalRequestBody | undefined,
    options?: RequestOptions,
  ): Promise<operations.CreateEvalResponseBody> {
    return unwrapAsync(evalsCreate(
      this,
      request,
      options,
    ));
  }

  /**
   * Update an Evaluator
   */
  async update(
    request: operations.UpdateEvalRequest,
    options?: RequestOptions,
  ): Promise<operations.UpdateEvalResponseBody> {
    return unwrapAsync(evalsUpdate(
      this,
      request,
      options,
    ));
  }

  /**
   * Delete an Evaluator
   */
  async delete(
    request: operations.DeleteEvalRequest,
    options?: RequestOptions,
  ): Promise<void> {
    return unwrapAsync(evalsDelete(
      this,
      request,
      options,
    ));
  }

  /**
   * Run BertScore Evaluator
   */
  async bertScore(
    request?: operations.EvalsBertScoreRequestBody | undefined,
    options?: RequestOptions,
  ): Promise<operations.EvalsBertScoreResponseBody> {
    return unwrapAsync(evalsBertScore(
      this,
      request,
      options,
    ));
  }

  /**
   * Run BLEU Score Evaluator
   */
  async bleuScore(
    request?: operations.EvalsBleuScoreRequestBody | undefined,
    options?: RequestOptions,
  ): Promise<operations.EvalsBleuScoreResponseBody> {
    return unwrapAsync(evalsBleuScore(
      this,
      request,
      options,
    ));
  }

  /**
   * Run Contains All Evaluator
   */
  async containsAll(
    request?: operations.EvalsContainsAllRequestBody | undefined,
    options?: RequestOptions,
  ): Promise<operations.EvalsContainsAllResponseBody> {
    return unwrapAsync(evalsContainsAll(
      this,
      request,
      options,
    ));
  }

  /**
   * Run Contains Any Evaluator
   */
  async containsAny(
    request?: operations.EvalsContainsAnyRequestBody | undefined,
    options?: RequestOptions,
  ): Promise<operations.EvalsContainsAnyResponseBody> {
    return unwrapAsync(evalsContainsAny(
      this,
      request,
      options,
    ));
  }

  /**
   * Run Contains Email Evaluator
   */
  async containsEmail(
    request?: operations.EvalsContainsEmailRequestBody | undefined,
    options?: RequestOptions,
  ): Promise<operations.EvalsContainsEmailResponseBody> {
    return unwrapAsync(evalsContainsEmail(
      this,
      request,
      options,
    ));
  }

  /**
   * Run Contains None Evaluator
   */
  async containsNone(
    request?: operations.EvalsContainsNoneRequestBody | undefined,
    options?: RequestOptions,
  ): Promise<operations.EvalsContainsNoneResponseBody> {
    return unwrapAsync(evalsContainsNone(
      this,
      request,
      options,
    ));
  }

  /**
   * Run Contains URL Evaluator
   */
  async containsUrl(
    request?: operations.EvalsContainsUrlRequestBody | undefined,
    options?: RequestOptions,
  ): Promise<operations.EvalsContainsUrlResponseBody> {
    return unwrapAsync(evalsContainsUrl(
      this,
      request,
      options,
    ));
  }

  /**
   * Run Contains Valid Link Evaluator
   */
  async containsValidLink(
    request?: operations.EvalsContainsValidLinkRequestBody | undefined,
    options?: RequestOptions,
  ): Promise<operations.EvalsContainsValidLinkResponseBody> {
    return unwrapAsync(evalsContainsValidLink(
      this,
      request,
      options,
    ));
  }

  /**
   * Run Contains Evaluator
   */
  async contains(
    request?: operations.EvalsContainsRequestBody | undefined,
    options?: RequestOptions,
  ): Promise<operations.EvalsContainsResponseBody> {
    return unwrapAsync(evalsContains(
      this,
      request,
      options,
    ));
  }

  /**
   * Run Ends With Evaluator
   */
  async endsWith(
    request?: operations.EvalsEndsWithRequestBody | undefined,
    options?: RequestOptions,
  ): Promise<operations.EvalsEndsWithResponseBody> {
    return unwrapAsync(evalsEndsWith(
      this,
      request,
      options,
    ));
  }

  /**
   * Run Exact Match Evaluator
   */
  async exactMatch(
    request?: operations.EvalsExactMatchRequestBody | undefined,
    options?: RequestOptions,
  ): Promise<operations.EvalsExactMatchResponseBody> {
    return unwrapAsync(evalsExactMatch(
      this,
      request,
      options,
    ));
  }

  /**
   * Run Length Between Evaluator
   */
  async lengthBetween(
    request?: operations.EvalsLengthBetweenRequestBody | undefined,
    options?: RequestOptions,
  ): Promise<operations.EvalsLengthBetweenResponseBody> {
    return unwrapAsync(evalsLengthBetween(
      this,
      request,
      options,
    ));
  }

  /**
   * Run Length Greater Than Evaluator
   */
  async lengthGreaterThan(
    request?: operations.EvalsLengthGreaterThanRequestBody | undefined,
    options?: RequestOptions,
  ): Promise<operations.EvalsLengthGreaterThanResponseBody> {
    return unwrapAsync(evalsLengthGreaterThan(
      this,
      request,
      options,
    ));
  }

  /**
   * Run Length Less Than Evaluator
   */
  async lengthLessThan(
    request?: operations.EvalsLengthLessThanRequestBody | undefined,
    options?: RequestOptions,
  ): Promise<operations.EvalsLengthLessThanResponseBody> {
    return unwrapAsync(evalsLengthLessThan(
      this,
      request,
      options,
    ));
  }

  /**
   * Run JSON Validation Evaluator
   */
  async validJson(
    request?: operations.EvalsValidJsonRequestBody | undefined,
    options?: RequestOptions,
  ): Promise<operations.EvalsValidJsonResponseBody> {
    return unwrapAsync(evalsValidJson(
      this,
      request,
      options,
    ));
  }

  /**
   * Run Age Appropriate Evaluator
   */
  async ageAppropriate(
    request?: operations.EvalsAgeAppropriateRequestBody | undefined,
    options?: RequestOptions,
  ): Promise<operations.EvalsAgeAppropriateResponseBody> {
    return unwrapAsync(evalsAgeAppropriate(
      this,
      request,
      options,
    ));
  }

  /**
   * Run Bot Detection Evaluator
   */
  async botDetection(
    request?: operations.EvalsBotDetectionRequestBody | undefined,
    options?: RequestOptions,
  ): Promise<operations.EvalsBotDetectionResponseBody> {
    return unwrapAsync(evalsBotDetection(
      this,
      request,
      options,
    ));
  }

  /**
   * Run Fact Checking Knowledge Base Evaluator
   */
  async factCheckingKnowledgeBase(
    request?: operations.EvalsFactCheckingKnowledgeBaseRequestBody | undefined,
    options?: RequestOptions,
  ): Promise<operations.EvalsFactCheckingKnowledgeBaseResponseBody> {
    return unwrapAsync(evalsFactCheckingKnowledgeBase(
      this,
      request,
      options,
    ));
  }

  /**
   * Run Grammar Evaluator
   */
  async grammar(
    request?: operations.EvalsGrammarRequestBody | undefined,
    options?: RequestOptions,
  ): Promise<operations.EvalsGrammarResponseBody> {
    return unwrapAsync(evalsGrammar(
      this,
      request,
      options,
    ));
  }

  /**
   * Run Localization Evaluator
   */
  async localization(
    request?: operations.EvalsLocalizationRequestBody | undefined,
    options?: RequestOptions,
  ): Promise<operations.EvalsLocalizationResponseBody> {
    return unwrapAsync(evalsLocalization(
      this,
      request,
      options,
    ));
  }

  /**
   * Run PII Evaluator
   */
  async pii(
    request?: operations.EvalsPiiRequestBody | undefined,
    options?: RequestOptions,
  ): Promise<operations.EvalsPiiResponseBody> {
    return unwrapAsync(evalsPii(
      this,
      request,
      options,
    ));
  }

  /**
   * Run Sentiment Classification Evaluator
   */
  async sentimentClassification(
    request?: operations.EvalsSentimentClassificationRequestBody | undefined,
    options?: RequestOptions,
  ): Promise<operations.EvalsSentimentClassificationResponseBody> {
    return unwrapAsync(evalsSentimentClassification(
      this,
      request,
      options,
    ));
  }

  /**
   * Run Summarization Evaluator
   */
  async summarization(
    request?: operations.EvalsSummarizationRequestBody | undefined,
    options?: RequestOptions,
  ): Promise<operations.EvalsSummarizationResponseBody> {
    return unwrapAsync(evalsSummarization(
      this,
      request,
      options,
    ));
  }

  /**
   * Run Tone of Voice Evaluator
   */
  async toneOfVoice(
    request?: operations.EvalsToneOfVoiceRequestBody | undefined,
    options?: RequestOptions,
  ): Promise<operations.EvalsToneOfVoiceResponseBody> {
    return unwrapAsync(evalsToneOfVoice(
      this,
      request,
      options,
    ));
  }

  /**
   * Run Translation Evaluator
   */
  async translation(
    request?: operations.EvalsTranslationRequestBody | undefined,
    options?: RequestOptions,
  ): Promise<operations.EvalsTranslationResponseBody> {
    return unwrapAsync(evalsTranslation(
      this,
      request,
      options,
    ));
  }

  /**
   * Run Coherence Evaluator
   */
  async ragasCoherence(
    request?: operations.EvalsRagasCoherenceRequestBody | undefined,
    options?: RequestOptions,
  ): Promise<operations.EvalsRagasCoherenceResponseBody> {
    return unwrapAsync(evalsRagasCoherence(
      this,
      request,
      options,
    ));
  }

  /**
   * Run Conciseness Evaluator
   */
  async ragasConciseness(
    request?: operations.EvalsRagasConcisenessRequestBody | undefined,
    options?: RequestOptions,
  ): Promise<operations.EvalsRagasConcisenessResponseBody> {
    return unwrapAsync(evalsRagasConciseness(
      this,
      request,
      options,
    ));
  }

  /**
   * Run Context Precision Evaluator
   */
  async ragasContextPrecision(
    request?: operations.EvalsRagasContextPrecisionRequestBody | undefined,
    options?: RequestOptions,
  ): Promise<operations.EvalsRagasContextPrecisionResponseBody> {
    return unwrapAsync(evalsRagasContextPrecision(
      this,
      request,
      options,
    ));
  }

  /**
   * Run Correctness Evaluator
   */
  async ragasCorrectness(
    request?: operations.EvalsRagasCorrectnessRequestBody | undefined,
    options?: RequestOptions,
  ): Promise<operations.EvalsRagasCorrectnessResponseBody> {
    return unwrapAsync(evalsRagasCorrectness(
      this,
      request,
      options,
    ));
  }

  /**
   * Run Faithfulness Evaluator
   */
  async ragasFaithfulness(
    request?: operations.EvalsRagasFaithfulnessRequestBody | undefined,
    options?: RequestOptions,
  ): Promise<operations.EvalsRagasFaithfulnessResponseBody> {
    return unwrapAsync(evalsRagasFaithfulness(
      this,
      request,
      options,
    ));
  }

  /**
   * Run Harmfulness Evaluator
   */
  async ragasHarmfulness(
    request?: operations.EvalsRagasHarmfulnessRequestBody | undefined,
    options?: RequestOptions,
  ): Promise<operations.EvalsRagasHarmfulnessResponseBody> {
    return unwrapAsync(evalsRagasHarmfulness(
      this,
      request,
      options,
    ));
  }

  /**
   * Run Maliciousness Evaluator
   */
  async ragasMaliciousness(
    request?: operations.EvalsRagasMaliciousnessRequestBody | undefined,
    options?: RequestOptions,
  ): Promise<operations.EvalsRagasMaliciousnessResponseBody> {
    return unwrapAsync(evalsRagasMaliciousness(
      this,
      request,
      options,
    ));
  }

  /**
   * Run Response Relevancy Evaluator
   */
  async ragasResponseRelevancy(
    request?: operations.EvalsRagasResponseRelevancyRequestBody | undefined,
    options?: RequestOptions,
  ): Promise<operations.EvalsRagasResponseRelevancyResponseBody> {
    return unwrapAsync(evalsRagasResponseRelevancy(
      this,
      request,
      options,
    ));
  }

  /**
   * Run Summarization Evaluator
   */
  async ragasSummarization(
    request?: operations.EvalsRagasSummarizationRequestBody | undefined,
    options?: RequestOptions,
  ): Promise<operations.EvalsRagasSummarizationResponseBody> {
    return unwrapAsync(evalsRagasSummarization(
      this,
      request,
      options,
    ));
  }

  /**
   * Invoke a Custom Evaluator
   */
  async invoke(
    request: operations.InvokeEvalRequest,
    options?: RequestOptions,
  ): Promise<operations.InvokeEvalResponseBody> {
    return unwrapAsync(evalsInvoke(
      this,
      request,
      options,
    ));
  }
}
