/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";

/**
 * Prompt not found.
 */
export type UpdatePromptResponseBodyData = {
  message: string;
};

/**
 * Prompt not found.
 */
export class UpdatePromptResponseBody extends Error {
  /** The original data that was passed to this error instance. */
  data$: UpdatePromptResponseBodyData;

  constructor(err: UpdatePromptResponseBodyData) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message);
    this.data$ = err;

    this.name = "UpdatePromptResponseBody";
  }
}

/** @internal */
export const UpdatePromptResponseBody$inboundSchema: z.ZodType<
  UpdatePromptResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  message: z.string(),
})
  .transform((v) => {
    return new UpdatePromptResponseBody(v);
  });

/** @internal */
export type UpdatePromptResponseBody$Outbound = {
  message: string;
};

/** @internal */
export const UpdatePromptResponseBody$outboundSchema: z.ZodType<
  UpdatePromptResponseBody$Outbound,
  z.ZodTypeDef,
  UpdatePromptResponseBody
> = z.instanceof(UpdatePromptResponseBody)
  .transform(v => v.data$)
  .pipe(z.object({
    message: z.string(),
  }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdatePromptResponseBody$ {
  /** @deprecated use `UpdatePromptResponseBody$inboundSchema` instead. */
  export const inboundSchema = UpdatePromptResponseBody$inboundSchema;
  /** @deprecated use `UpdatePromptResponseBody$outboundSchema` instead. */
  export const outboundSchema = UpdatePromptResponseBody$outboundSchema;
  /** @deprecated use `UpdatePromptResponseBody$Outbound` instead. */
  export type Outbound = UpdatePromptResponseBody$Outbound;
}
