/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { OrqError } from "./orqerror.js";

/**
 * Internal server error
 */
export type EvalsContainsNoneEvalsResponseBodyData = {
  message: string;
};

/**
 * Internal server error
 */
export class EvalsContainsNoneEvalsResponseBody extends OrqError {
  /** The original data that was passed to this error instance. */
  data$: EvalsContainsNoneEvalsResponseBodyData;

  constructor(
    err: EvalsContainsNoneEvalsResponseBodyData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = err.message || `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;

    this.name = "EvalsContainsNoneEvalsResponseBody";
  }
}

/**
 * Evaluator not found
 */
export type EvalsContainsNoneResponseBodyData = {
  message: string;
};

/**
 * Evaluator not found
 */
export class EvalsContainsNoneResponseBody extends OrqError {
  /** The original data that was passed to this error instance. */
  data$: EvalsContainsNoneResponseBodyData;

  constructor(
    err: EvalsContainsNoneResponseBodyData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = err.message || `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;

    this.name = "EvalsContainsNoneResponseBody";
  }
}

/** @internal */
export const EvalsContainsNoneEvalsResponseBody$inboundSchema: z.ZodType<
  EvalsContainsNoneEvalsResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  message: z.string(),
  request$: z.instanceof(Request),
  response$: z.instanceof(Response),
  body$: z.string(),
})
  .transform((v) => {
    return new EvalsContainsNoneEvalsResponseBody(v, {
      request: v.request$,
      response: v.response$,
      body: v.body$,
    });
  });

/** @internal */
export type EvalsContainsNoneEvalsResponseBody$Outbound = {
  message: string;
};

/** @internal */
export const EvalsContainsNoneEvalsResponseBody$outboundSchema: z.ZodType<
  EvalsContainsNoneEvalsResponseBody$Outbound,
  z.ZodTypeDef,
  EvalsContainsNoneEvalsResponseBody
> = z.instanceof(EvalsContainsNoneEvalsResponseBody)
  .transform(v => v.data$)
  .pipe(z.object({
    message: z.string(),
  }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EvalsContainsNoneEvalsResponseBody$ {
  /** @deprecated use `EvalsContainsNoneEvalsResponseBody$inboundSchema` instead. */
  export const inboundSchema = EvalsContainsNoneEvalsResponseBody$inboundSchema;
  /** @deprecated use `EvalsContainsNoneEvalsResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    EvalsContainsNoneEvalsResponseBody$outboundSchema;
  /** @deprecated use `EvalsContainsNoneEvalsResponseBody$Outbound` instead. */
  export type Outbound = EvalsContainsNoneEvalsResponseBody$Outbound;
}

/** @internal */
export const EvalsContainsNoneResponseBody$inboundSchema: z.ZodType<
  EvalsContainsNoneResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  message: z.string(),
  request$: z.instanceof(Request),
  response$: z.instanceof(Response),
  body$: z.string(),
})
  .transform((v) => {
    return new EvalsContainsNoneResponseBody(v, {
      request: v.request$,
      response: v.response$,
      body: v.body$,
    });
  });

/** @internal */
export type EvalsContainsNoneResponseBody$Outbound = {
  message: string;
};

/** @internal */
export const EvalsContainsNoneResponseBody$outboundSchema: z.ZodType<
  EvalsContainsNoneResponseBody$Outbound,
  z.ZodTypeDef,
  EvalsContainsNoneResponseBody
> = z.instanceof(EvalsContainsNoneResponseBody)
  .transform(v => v.data$)
  .pipe(z.object({
    message: z.string(),
  }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EvalsContainsNoneResponseBody$ {
  /** @deprecated use `EvalsContainsNoneResponseBody$inboundSchema` instead. */
  export const inboundSchema = EvalsContainsNoneResponseBody$inboundSchema;
  /** @deprecated use `EvalsContainsNoneResponseBody$outboundSchema` instead. */
  export const outboundSchema = EvalsContainsNoneResponseBody$outboundSchema;
  /** @deprecated use `EvalsContainsNoneResponseBody$Outbound` instead. */
  export type Outbound = EvalsContainsNoneResponseBody$Outbound;
}
