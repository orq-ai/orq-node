/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { OrqError } from "./orqerror.js";

/**
 * Internal server error
 */
export type EvalsGrammarEvalsResponseBodyData = {
  message: string;
};

/**
 * Internal server error
 */
export class EvalsGrammarEvalsResponseBody extends OrqError {
  /** The original data that was passed to this error instance. */
  data$: EvalsGrammarEvalsResponseBodyData;

  constructor(
    err: EvalsGrammarEvalsResponseBodyData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = err.message || `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;

    this.name = "EvalsGrammarEvalsResponseBody";
  }
}

/**
 * Evaluator not found
 */
export type EvalsGrammarResponseBodyData = {
  message: string;
};

/**
 * Evaluator not found
 */
export class EvalsGrammarResponseBody extends OrqError {
  /** The original data that was passed to this error instance. */
  data$: EvalsGrammarResponseBodyData;

  constructor(
    err: EvalsGrammarResponseBodyData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = err.message || `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;

    this.name = "EvalsGrammarResponseBody";
  }
}

/** @internal */
export const EvalsGrammarEvalsResponseBody$inboundSchema: z.ZodType<
  EvalsGrammarEvalsResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  message: z.string(),
  request$: z.instanceof(Request),
  response$: z.instanceof(Response),
  body$: z.string(),
})
  .transform((v) => {
    return new EvalsGrammarEvalsResponseBody(v, {
      request: v.request$,
      response: v.response$,
      body: v.body$,
    });
  });

/** @internal */
export type EvalsGrammarEvalsResponseBody$Outbound = {
  message: string;
};

/** @internal */
export const EvalsGrammarEvalsResponseBody$outboundSchema: z.ZodType<
  EvalsGrammarEvalsResponseBody$Outbound,
  z.ZodTypeDef,
  EvalsGrammarEvalsResponseBody
> = z.instanceof(EvalsGrammarEvalsResponseBody)
  .transform(v => v.data$)
  .pipe(z.object({
    message: z.string(),
  }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EvalsGrammarEvalsResponseBody$ {
  /** @deprecated use `EvalsGrammarEvalsResponseBody$inboundSchema` instead. */
  export const inboundSchema = EvalsGrammarEvalsResponseBody$inboundSchema;
  /** @deprecated use `EvalsGrammarEvalsResponseBody$outboundSchema` instead. */
  export const outboundSchema = EvalsGrammarEvalsResponseBody$outboundSchema;
  /** @deprecated use `EvalsGrammarEvalsResponseBody$Outbound` instead. */
  export type Outbound = EvalsGrammarEvalsResponseBody$Outbound;
}

/** @internal */
export const EvalsGrammarResponseBody$inboundSchema: z.ZodType<
  EvalsGrammarResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  message: z.string(),
  request$: z.instanceof(Request),
  response$: z.instanceof(Response),
  body$: z.string(),
})
  .transform((v) => {
    return new EvalsGrammarResponseBody(v, {
      request: v.request$,
      response: v.response$,
      body: v.body$,
    });
  });

/** @internal */
export type EvalsGrammarResponseBody$Outbound = {
  message: string;
};

/** @internal */
export const EvalsGrammarResponseBody$outboundSchema: z.ZodType<
  EvalsGrammarResponseBody$Outbound,
  z.ZodTypeDef,
  EvalsGrammarResponseBody
> = z.instanceof(EvalsGrammarResponseBody)
  .transform(v => v.data$)
  .pipe(z.object({
    message: z.string(),
  }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EvalsGrammarResponseBody$ {
  /** @deprecated use `EvalsGrammarResponseBody$inboundSchema` instead. */
  export const inboundSchema = EvalsGrammarResponseBody$inboundSchema;
  /** @deprecated use `EvalsGrammarResponseBody$outboundSchema` instead. */
  export const outboundSchema = EvalsGrammarResponseBody$outboundSchema;
  /** @deprecated use `EvalsGrammarResponseBody$Outbound` instead. */
  export type Outbound = EvalsGrammarResponseBody$Outbound;
}
