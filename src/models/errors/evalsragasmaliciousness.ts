/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { OrqError } from "./orqerror.js";

/**
 * Internal server error
 */
export type EvalsRagasMaliciousnessEvalsResponseBodyData = {
  message: string;
};

/**
 * Internal server error
 */
export class EvalsRagasMaliciousnessEvalsResponseBody extends OrqError {
  /** The original data that was passed to this error instance. */
  data$: EvalsRagasMaliciousnessEvalsResponseBodyData;

  constructor(
    err: EvalsRagasMaliciousnessEvalsResponseBodyData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;

    this.name = "EvalsRagasMaliciousnessEvalsResponseBody";
  }
}

/**
 * Evaluator not found
 */
export type EvalsRagasMaliciousnessResponseBodyData = {
  message: string;
};

/**
 * Evaluator not found
 */
export class EvalsRagasMaliciousnessResponseBody extends OrqError {
  /** The original data that was passed to this error instance. */
  data$: EvalsRagasMaliciousnessResponseBodyData;

  constructor(
    err: EvalsRagasMaliciousnessResponseBodyData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;

    this.name = "EvalsRagasMaliciousnessResponseBody";
  }
}

/** @internal */
export const EvalsRagasMaliciousnessEvalsResponseBody$inboundSchema: z.ZodType<
  EvalsRagasMaliciousnessEvalsResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  message: z.string(),
  request$: z.instanceof(Request),
  response$: z.instanceof(Response),
  body$: z.string(),
})
  .transform((v) => {
    return new EvalsRagasMaliciousnessEvalsResponseBody(v, {
      request: v.request$,
      response: v.response$,
      body: v.body$,
    });
  });

/** @internal */
export type EvalsRagasMaliciousnessEvalsResponseBody$Outbound = {
  message: string;
};

/** @internal */
export const EvalsRagasMaliciousnessEvalsResponseBody$outboundSchema: z.ZodType<
  EvalsRagasMaliciousnessEvalsResponseBody$Outbound,
  z.ZodTypeDef,
  EvalsRagasMaliciousnessEvalsResponseBody
> = z.instanceof(EvalsRagasMaliciousnessEvalsResponseBody)
  .transform(v => v.data$)
  .pipe(z.object({
    message: z.string(),
  }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EvalsRagasMaliciousnessEvalsResponseBody$ {
  /** @deprecated use `EvalsRagasMaliciousnessEvalsResponseBody$inboundSchema` instead. */
  export const inboundSchema =
    EvalsRagasMaliciousnessEvalsResponseBody$inboundSchema;
  /** @deprecated use `EvalsRagasMaliciousnessEvalsResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    EvalsRagasMaliciousnessEvalsResponseBody$outboundSchema;
  /** @deprecated use `EvalsRagasMaliciousnessEvalsResponseBody$Outbound` instead. */
  export type Outbound = EvalsRagasMaliciousnessEvalsResponseBody$Outbound;
}

/** @internal */
export const EvalsRagasMaliciousnessResponseBody$inboundSchema: z.ZodType<
  EvalsRagasMaliciousnessResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  message: z.string(),
  request$: z.instanceof(Request),
  response$: z.instanceof(Response),
  body$: z.string(),
})
  .transform((v) => {
    return new EvalsRagasMaliciousnessResponseBody(v, {
      request: v.request$,
      response: v.response$,
      body: v.body$,
    });
  });

/** @internal */
export type EvalsRagasMaliciousnessResponseBody$Outbound = {
  message: string;
};

/** @internal */
export const EvalsRagasMaliciousnessResponseBody$outboundSchema: z.ZodType<
  EvalsRagasMaliciousnessResponseBody$Outbound,
  z.ZodTypeDef,
  EvalsRagasMaliciousnessResponseBody
> = z.instanceof(EvalsRagasMaliciousnessResponseBody)
  .transform(v => v.data$)
  .pipe(z.object({
    message: z.string(),
  }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EvalsRagasMaliciousnessResponseBody$ {
  /** @deprecated use `EvalsRagasMaliciousnessResponseBody$inboundSchema` instead. */
  export const inboundSchema =
    EvalsRagasMaliciousnessResponseBody$inboundSchema;
  /** @deprecated use `EvalsRagasMaliciousnessResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    EvalsRagasMaliciousnessResponseBody$outboundSchema;
  /** @deprecated use `EvalsRagasMaliciousnessResponseBody$Outbound` instead. */
  export type Outbound = EvalsRagasMaliciousnessResponseBody$Outbound;
}
