/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { OrqError } from "./orqerror.js";

/**
 * Internal server error
 */
export type EvalsContainsAnyEvalsResponseBodyData = {
  message: string;
};

/**
 * Internal server error
 */
export class EvalsContainsAnyEvalsResponseBody extends OrqError {
  /** The original data that was passed to this error instance. */
  data$: EvalsContainsAnyEvalsResponseBodyData;

  constructor(
    err: EvalsContainsAnyEvalsResponseBodyData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;

    this.name = "EvalsContainsAnyEvalsResponseBody";
  }
}

/**
 * Evaluator not found
 */
export type EvalsContainsAnyResponseBodyData = {
  message: string;
};

/**
 * Evaluator not found
 */
export class EvalsContainsAnyResponseBody extends OrqError {
  /** The original data that was passed to this error instance. */
  data$: EvalsContainsAnyResponseBodyData;

  constructor(
    err: EvalsContainsAnyResponseBodyData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;

    this.name = "EvalsContainsAnyResponseBody";
  }
}

/** @internal */
export const EvalsContainsAnyEvalsResponseBody$inboundSchema: z.ZodType<
  EvalsContainsAnyEvalsResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  message: z.string(),
  request$: z.instanceof(Request),
  response$: z.instanceof(Response),
  body$: z.string(),
})
  .transform((v) => {
    return new EvalsContainsAnyEvalsResponseBody(v, {
      request: v.request$,
      response: v.response$,
      body: v.body$,
    });
  });

/** @internal */
export type EvalsContainsAnyEvalsResponseBody$Outbound = {
  message: string;
};

/** @internal */
export const EvalsContainsAnyEvalsResponseBody$outboundSchema: z.ZodType<
  EvalsContainsAnyEvalsResponseBody$Outbound,
  z.ZodTypeDef,
  EvalsContainsAnyEvalsResponseBody
> = z.instanceof(EvalsContainsAnyEvalsResponseBody)
  .transform(v => v.data$)
  .pipe(z.object({
    message: z.string(),
  }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EvalsContainsAnyEvalsResponseBody$ {
  /** @deprecated use `EvalsContainsAnyEvalsResponseBody$inboundSchema` instead. */
  export const inboundSchema = EvalsContainsAnyEvalsResponseBody$inboundSchema;
  /** @deprecated use `EvalsContainsAnyEvalsResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    EvalsContainsAnyEvalsResponseBody$outboundSchema;
  /** @deprecated use `EvalsContainsAnyEvalsResponseBody$Outbound` instead. */
  export type Outbound = EvalsContainsAnyEvalsResponseBody$Outbound;
}

/** @internal */
export const EvalsContainsAnyResponseBody$inboundSchema: z.ZodType<
  EvalsContainsAnyResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  message: z.string(),
  request$: z.instanceof(Request),
  response$: z.instanceof(Response),
  body$: z.string(),
})
  .transform((v) => {
    return new EvalsContainsAnyResponseBody(v, {
      request: v.request$,
      response: v.response$,
      body: v.body$,
    });
  });

/** @internal */
export type EvalsContainsAnyResponseBody$Outbound = {
  message: string;
};

/** @internal */
export const EvalsContainsAnyResponseBody$outboundSchema: z.ZodType<
  EvalsContainsAnyResponseBody$Outbound,
  z.ZodTypeDef,
  EvalsContainsAnyResponseBody
> = z.instanceof(EvalsContainsAnyResponseBody)
  .transform(v => v.data$)
  .pipe(z.object({
    message: z.string(),
  }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EvalsContainsAnyResponseBody$ {
  /** @deprecated use `EvalsContainsAnyResponseBody$inboundSchema` instead. */
  export const inboundSchema = EvalsContainsAnyResponseBody$inboundSchema;
  /** @deprecated use `EvalsContainsAnyResponseBody$outboundSchema` instead. */
  export const outboundSchema = EvalsContainsAnyResponseBody$outboundSchema;
  /** @deprecated use `EvalsContainsAnyResponseBody$Outbound` instead. */
  export type Outbound = EvalsContainsAnyResponseBody$Outbound;
}
