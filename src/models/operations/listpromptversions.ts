/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type ListPromptVersionsRequest = {
  promptId: string;
  /**
   * A limit on the number of objects to be returned. Limit can range between 1 and 50, and the default is 10
   */
  limit?: number | undefined;
  /**
   * A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 20 objects, ending with `01JJ1HDHN79XAS7A01WB3HYSDB`, your subsequent call can include `after=01JJ1HDHN79XAS7A01WB3HYSDB` in order to fetch the next page of the list.
   */
  startingAfter?: string | undefined;
  /**
   * A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 20 objects, starting with `01JJ1HDHN79XAS7A01WB3HYSDB`, your subsequent call can include `before=01JJ1HDHN79XAS7A01WB3HYSDB` in order to fetch the previous page of the list.
   */
  endingBefore?: string | undefined;
};

export const ListPromptVersionsObject = {
  List: "list",
} as const;
export type ListPromptVersionsObject = ClosedEnum<
  typeof ListPromptVersionsObject
>;

/**
 * The modality of the model
 */
export const ListPromptVersionsModelType = {
  Chat: "chat",
  Completion: "completion",
  Embedding: "embedding",
  Vision: "vision",
  Image: "image",
  Tts: "tts",
  Stt: "stt",
  Rerank: "rerank",
  Moderations: "moderations",
} as const;
/**
 * The modality of the model
 */
export type ListPromptVersionsModelType = ClosedEnum<
  typeof ListPromptVersionsModelType
>;

/**
 * Only supported on `image` models.
 */
export const ListPromptVersionsFormat = {
  Url: "url",
  B64Json: "b64_json",
  Text: "text",
  JsonObject: "json_object",
} as const;
/**
 * Only supported on `image` models.
 */
export type ListPromptVersionsFormat = ClosedEnum<
  typeof ListPromptVersionsFormat
>;

export const ListPromptVersionsResponseFormatPromptsType = {
  JsonObject: "json_object",
} as const;
export type ListPromptVersionsResponseFormatPromptsType = ClosedEnum<
  typeof ListPromptVersionsResponseFormatPromptsType
>;

export type ListPromptVersionsResponseFormat2 = {
  type: ListPromptVersionsResponseFormatPromptsType;
};

export const ListPromptVersionsResponseFormatType = {
  JsonSchema: "json_schema",
} as const;
export type ListPromptVersionsResponseFormatType = ClosedEnum<
  typeof ListPromptVersionsResponseFormatType
>;

export type ListPromptVersionsResponseFormatJsonSchema = {
  name: string;
  strict?: boolean | undefined;
  schema: { [k: string]: any };
};

export type ListPromptVersionsResponseFormat1 = {
  type: ListPromptVersionsResponseFormatType;
  jsonSchema: ListPromptVersionsResponseFormatJsonSchema;
};

/**
 * An object specifying the format that the model must output.
 *
 * @remarks
 *
 *  Setting to `{ "type": "json_schema", "json_schema": {...} }` enables Structured Outputs which ensures the model will match your supplied JSON schema
 *
 *  Setting to `{ "type": "json_object" }` enables JSON mode, which ensures the message the model generates is valid JSON.
 *
 * Important: when using JSON mode, you must also instruct the model to produce JSON yourself via a system or user message. Without this, the model may generate an unending stream of whitespace until the generation reaches the token limit, resulting in a long-running and seemingly "stuck" request. Also note that the message content may be partially cut off if finish_reason="length", which indicates the generation exceeded max_tokens or the conversation exceeded the max context length.
 */
export type ListPromptVersionsResponseFormat =
  | ListPromptVersionsResponseFormat1
  | ListPromptVersionsResponseFormat2;

/**
 * The version of photoReal to use. Must be v1 or v2. Only available for `leonardoai` provider
 */
export const ListPromptVersionsPhotoRealVersion = {
  V1: "v1",
  V2: "v2",
} as const;
/**
 * The version of photoReal to use. Must be v1 or v2. Only available for `leonardoai` provider
 */
export type ListPromptVersionsPhotoRealVersion = ClosedEnum<
  typeof ListPromptVersionsPhotoRealVersion
>;

/**
 * The format to return the embeddings
 */
export const ListPromptVersionsEncodingFormat = {
  Float: "float",
  Base64: "base64",
} as const;
/**
 * The format to return the embeddings
 */
export type ListPromptVersionsEncodingFormat = ClosedEnum<
  typeof ListPromptVersionsEncodingFormat
>;

/**
 * Constrains effort on reasoning for reasoning models. Reducing reasoning effort can result in faster responses and fewer tokens used on reasoning in a response.
 */
export const ListPromptVersionsReasoningEffort = {
  Disable: "disable",
  Low: "low",
  Medium: "medium",
  High: "high",
} as const;
/**
 * Constrains effort on reasoning for reasoning models. Reducing reasoning effort can result in faster responses and fewer tokens used on reasoning in a response.
 */
export type ListPromptVersionsReasoningEffort = ClosedEnum<
  typeof ListPromptVersionsReasoningEffort
>;

/**
 * Model Parameters: Not all parameters apply to every model
 */
export type ListPromptVersionsModelParameters = {
  /**
   * Only supported on `chat` and `completion` models.
   */
  temperature?: number | undefined;
  /**
   * Only supported on `chat` and `completion` models.
   */
  maxTokens?: number | undefined;
  /**
   * Only supported on `chat` and `completion` models.
   */
  topK?: number | undefined;
  /**
   * Only supported on `chat` and `completion` models.
   */
  topP?: number | undefined;
  /**
   * Only supported on `chat` and `completion` models.
   */
  frequencyPenalty?: number | undefined;
  /**
   * Only supported on `chat` and `completion` models.
   */
  presencePenalty?: number | undefined;
  /**
   * Only supported on `image` models.
   */
  numImages?: number | undefined;
  /**
   * Best effort deterministic seed for the model. Currently only OpenAI models support these
   */
  seed?: number | undefined;
  /**
   * Only supported on `image` models.
   */
  format?: ListPromptVersionsFormat | undefined;
  /**
   * Only supported on `image` models.
   */
  dimensions?: string | undefined;
  /**
   * Only supported on `image` models.
   */
  quality?: string | undefined;
  /**
   * Only supported on `image` models.
   */
  style?: string | undefined;
  /**
   * An object specifying the format that the model must output.
   *
   * @remarks
   *
   *  Setting to `{ "type": "json_schema", "json_schema": {...} }` enables Structured Outputs which ensures the model will match your supplied JSON schema
   *
   *  Setting to `{ "type": "json_object" }` enables JSON mode, which ensures the message the model generates is valid JSON.
   *
   * Important: when using JSON mode, you must also instruct the model to produce JSON yourself via a system or user message. Without this, the model may generate an unending stream of whitespace until the generation reaches the token limit, resulting in a long-running and seemingly "stuck" request. Also note that the message content may be partially cut off if finish_reason="length", which indicates the generation exceeded max_tokens or the conversation exceeded the max context length.
   */
  responseFormat?:
    | ListPromptVersionsResponseFormat1
    | ListPromptVersionsResponseFormat2
    | null
    | undefined;
  /**
   * The version of photoReal to use. Must be v1 or v2. Only available for `leonardoai` provider
   */
  photoRealVersion?: ListPromptVersionsPhotoRealVersion | undefined;
  /**
   * The format to return the embeddings
   */
  encodingFormat?: ListPromptVersionsEncodingFormat | undefined;
  /**
   * Constrains effort on reasoning for reasoning models. Reducing reasoning effort can result in faster responses and fewer tokens used on reasoning in a response.
   */
  reasoningEffort?: ListPromptVersionsReasoningEffort | undefined;
  /**
   * Gives the model enhanced reasoning capabilities for complex tasks. A value of 0 disables thinking. The minimum budget tokens for thinking are 1024. The Budget Tokens should never exceed the Max Tokens parameter. Only supported by `Anthropic`
   */
  budgetTokens?: number | undefined;
};

export const ListPromptVersionsProvider = {
  Cohere: "cohere",
  Openai: "openai",
  Anthropic: "anthropic",
  Huggingface: "huggingface",
  Replicate: "replicate",
  Google: "google",
  GoogleAi: "google-ai",
  Azure: "azure",
  Aws: "aws",
  Anyscale: "anyscale",
  Perplexity: "perplexity",
  Groq: "groq",
  Fal: "fal",
  Leonardoai: "leonardoai",
  Nvidia: "nvidia",
  Jina: "jina",
  Togetherai: "togetherai",
  Elevenlabs: "elevenlabs",
  Litellm: "litellm",
  Openailike: "openailike",
} as const;
export type ListPromptVersionsProvider = ClosedEnum<
  typeof ListPromptVersionsProvider
>;

/**
 * The role of the prompt message
 */
export const ListPromptVersionsRole = {
  System: "system",
  Assistant: "assistant",
  User: "user",
  Exception: "exception",
  Tool: "tool",
  Prompt: "prompt",
  Correction: "correction",
  ExpectedOutput: "expected_output",
} as const;
/**
 * The role of the prompt message
 */
export type ListPromptVersionsRole = ClosedEnum<typeof ListPromptVersionsRole>;

/**
 * The type of the content part. Always `file`.
 */
export const ListPromptVersions2PromptsResponseType = {
  File: "file",
} as const;
/**
 * The type of the content part. Always `file`.
 */
export type ListPromptVersions2PromptsResponseType = ClosedEnum<
  typeof ListPromptVersions2PromptsResponseType
>;

export type ListPromptVersions2File = {
  /**
   * The base64 encoded file data, used when passing the file to the model as a string.
   */
  fileData: string;
  /**
   * The name of the file, used when passing the file to the model as a string.
   */
  filename?: string | undefined;
};

export type ListPromptVersions23 = {
  /**
   * The type of the content part. Always `file`.
   */
  type: ListPromptVersions2PromptsResponseType;
  file: ListPromptVersions2File;
};

export const ListPromptVersions2PromptsType = {
  ImageUrl: "image_url",
} as const;
export type ListPromptVersions2PromptsType = ClosedEnum<
  typeof ListPromptVersions2PromptsType
>;

export type ListPromptVersions2ImageUrl = {
  /**
   * The orq.ai id of the image
   */
  id?: string | undefined;
  /**
   * Either a URL of the image or the base64 encoded data URI.
   */
  url: string;
  /**
   * Specifies the detail level of the image. Currently only supported with OpenAI models
   */
  detail?: string | undefined;
};

/**
 * The image part of the prompt message. Only supported with vision models.
 */
export type ListPromptVersions22 = {
  type: ListPromptVersions2PromptsType;
  imageUrl: ListPromptVersions2ImageUrl;
};

export const ListPromptVersions2Type = {
  Text: "text",
} as const;
export type ListPromptVersions2Type = ClosedEnum<
  typeof ListPromptVersions2Type
>;

/**
 * Text content part of a prompt message
 */
export type ListPromptVersions21 = {
  type: ListPromptVersions2Type;
  text: string;
};

export type ListPromptVersionsContent2 =
  | ListPromptVersions21
  | ListPromptVersions22
  | ListPromptVersions23;

/**
 * The contents of the user message. Either the text content of the message or an array of content parts with a defined type, each can be of type `text` or `image_url` when passing in images. You can pass multiple images by adding multiple `image_url` content parts.
 */
export type ListPromptVersionsContent =
  | string
  | Array<ListPromptVersions21 | ListPromptVersions22 | ListPromptVersions23>;

export const ListPromptVersionsType = {
  Function: "function",
} as const;
export type ListPromptVersionsType = ClosedEnum<typeof ListPromptVersionsType>;

export type ListPromptVersionsFunction = {
  name: string;
  /**
   * JSON string arguments for the functions
   */
  arguments: string;
};

export type ListPromptVersionsToolCalls = {
  id?: string | undefined;
  index?: number | undefined;
  type: ListPromptVersionsType;
  function: ListPromptVersionsFunction;
};

export type ListPromptVersionsMessages = {
  /**
   * The role of the prompt message
   */
  role: ListPromptVersionsRole;
  /**
   * The contents of the user message. Either the text content of the message or an array of content parts with a defined type, each can be of type `text` or `image_url` when passing in images. You can pass multiple images by adding multiple `image_url` content parts.
   */
  content:
    | string
    | Array<ListPromptVersions21 | ListPromptVersions22 | ListPromptVersions23>;
  toolCalls?: Array<ListPromptVersionsToolCalls> | undefined;
  toolCallId?: string | undefined;
};

/**
 * A list of messages compatible with the openAI schema
 */
export type ListPromptVersionsPromptConfig = {
  stream?: boolean | undefined;
  model?: string | undefined;
  /**
   * The id of the resource
   */
  modelDbId?: string | null | undefined;
  /**
   * The modality of the model
   */
  modelType?: ListPromptVersionsModelType | null | undefined;
  /**
   * Model Parameters: Not all parameters apply to every model
   */
  modelParameters?: ListPromptVersionsModelParameters | undefined;
  provider?: ListPromptVersionsProvider | undefined;
  /**
   * The id of the resource
   */
  integrationId?: string | null | undefined;
  version?: string | undefined;
  messages: Array<ListPromptVersionsMessages>;
};

export const ListPromptVersionsUseCases = {
  AgentsSimulations: "Agents simulations",
  Agents: "Agents",
  APIInteraction: "API interaction",
  AutonomousAgents: "Autonomous Agents",
  Chatbots: "Chatbots",
  Classification: "Classification",
  CodeUnderstanding: "Code understanding",
  CodeWriting: "Code writing",
  Conversation: "Conversation",
  DocumentsQA: "Documents QA",
  Evaluation: "Evaluation",
  Extraction: "Extraction",
  MultiModal: "Multi-modal",
  SelfChecking: "Self-checking",
  SentimentAnalysis: "Sentiment analysis",
  Sql: "SQL",
  Summarization: "Summarization",
  Tagging: "Tagging",
  TranslationDocument: "Translation (document)",
  TranslationSentences: "Translation (sentences)",
} as const;
export type ListPromptVersionsUseCases = ClosedEnum<
  typeof ListPromptVersionsUseCases
>;

/**
 * The language that the prompt is written in. Use this field to categorize the prompt for your own purpose
 */
export const ListPromptVersionsLanguage = {
  Chinese: "Chinese",
  Dutch: "Dutch",
  English: "English",
  French: "French",
  German: "German",
  Russian: "Russian",
  Spanish: "Spanish",
} as const;
/**
 * The language that the prompt is written in. Use this field to categorize the prompt for your own purpose
 */
export type ListPromptVersionsLanguage = ClosedEnum<
  typeof ListPromptVersionsLanguage
>;

export type ListPromptVersionsMetadata = {
  /**
   * A list of use cases that the prompt is meant to be used for. Use this field to categorize the prompt for your own purpose
   */
  useCases?: Array<ListPromptVersionsUseCases> | undefined;
  /**
   * The language that the prompt is written in. Use this field to categorize the prompt for your own purpose
   */
  language?: ListPromptVersionsLanguage | null | undefined;
};

export type ListPromptVersionsData = {
  id: string;
  createdById?: string | null | undefined;
  updatedById?: string | null | undefined;
  /**
   * The prompt’s description, meant to be displayable in the UI. Use this field to optionally store a long form explanation of the prompt for your own purpose
   */
  description?: string | null | undefined;
  /**
   * A list of messages compatible with the openAI schema
   */
  promptConfig: ListPromptVersionsPromptConfig;
  metadata?: ListPromptVersionsMetadata | undefined;
  timestamp: string;
};

/**
 * Prompt versions retrieved.
 */
export type ListPromptVersionsResponseBody = {
  object: ListPromptVersionsObject;
  data: Array<ListPromptVersionsData>;
  hasMore: boolean;
};

/** @internal */
export const ListPromptVersionsRequest$inboundSchema: z.ZodType<
  ListPromptVersionsRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  prompt_id: z.string(),
  limit: z.number().default(10),
  starting_after: z.string().optional(),
  ending_before: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "prompt_id": "promptId",
    "starting_after": "startingAfter",
    "ending_before": "endingBefore",
  });
});

/** @internal */
export type ListPromptVersionsRequest$Outbound = {
  prompt_id: string;
  limit: number;
  starting_after?: string | undefined;
  ending_before?: string | undefined;
};

/** @internal */
export const ListPromptVersionsRequest$outboundSchema: z.ZodType<
  ListPromptVersionsRequest$Outbound,
  z.ZodTypeDef,
  ListPromptVersionsRequest
> = z.object({
  promptId: z.string(),
  limit: z.number().default(10),
  startingAfter: z.string().optional(),
  endingBefore: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    promptId: "prompt_id",
    startingAfter: "starting_after",
    endingBefore: "ending_before",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListPromptVersionsRequest$ {
  /** @deprecated use `ListPromptVersionsRequest$inboundSchema` instead. */
  export const inboundSchema = ListPromptVersionsRequest$inboundSchema;
  /** @deprecated use `ListPromptVersionsRequest$outboundSchema` instead. */
  export const outboundSchema = ListPromptVersionsRequest$outboundSchema;
  /** @deprecated use `ListPromptVersionsRequest$Outbound` instead. */
  export type Outbound = ListPromptVersionsRequest$Outbound;
}

export function listPromptVersionsRequestToJSON(
  listPromptVersionsRequest: ListPromptVersionsRequest,
): string {
  return JSON.stringify(
    ListPromptVersionsRequest$outboundSchema.parse(listPromptVersionsRequest),
  );
}

export function listPromptVersionsRequestFromJSON(
  jsonString: string,
): SafeParseResult<ListPromptVersionsRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListPromptVersionsRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListPromptVersionsRequest' from JSON`,
  );
}

/** @internal */
export const ListPromptVersionsObject$inboundSchema: z.ZodNativeEnum<
  typeof ListPromptVersionsObject
> = z.nativeEnum(ListPromptVersionsObject);

/** @internal */
export const ListPromptVersionsObject$outboundSchema: z.ZodNativeEnum<
  typeof ListPromptVersionsObject
> = ListPromptVersionsObject$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListPromptVersionsObject$ {
  /** @deprecated use `ListPromptVersionsObject$inboundSchema` instead. */
  export const inboundSchema = ListPromptVersionsObject$inboundSchema;
  /** @deprecated use `ListPromptVersionsObject$outboundSchema` instead. */
  export const outboundSchema = ListPromptVersionsObject$outboundSchema;
}

/** @internal */
export const ListPromptVersionsModelType$inboundSchema: z.ZodNativeEnum<
  typeof ListPromptVersionsModelType
> = z.nativeEnum(ListPromptVersionsModelType);

/** @internal */
export const ListPromptVersionsModelType$outboundSchema: z.ZodNativeEnum<
  typeof ListPromptVersionsModelType
> = ListPromptVersionsModelType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListPromptVersionsModelType$ {
  /** @deprecated use `ListPromptVersionsModelType$inboundSchema` instead. */
  export const inboundSchema = ListPromptVersionsModelType$inboundSchema;
  /** @deprecated use `ListPromptVersionsModelType$outboundSchema` instead. */
  export const outboundSchema = ListPromptVersionsModelType$outboundSchema;
}

/** @internal */
export const ListPromptVersionsFormat$inboundSchema: z.ZodNativeEnum<
  typeof ListPromptVersionsFormat
> = z.nativeEnum(ListPromptVersionsFormat);

/** @internal */
export const ListPromptVersionsFormat$outboundSchema: z.ZodNativeEnum<
  typeof ListPromptVersionsFormat
> = ListPromptVersionsFormat$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListPromptVersionsFormat$ {
  /** @deprecated use `ListPromptVersionsFormat$inboundSchema` instead. */
  export const inboundSchema = ListPromptVersionsFormat$inboundSchema;
  /** @deprecated use `ListPromptVersionsFormat$outboundSchema` instead. */
  export const outboundSchema = ListPromptVersionsFormat$outboundSchema;
}

/** @internal */
export const ListPromptVersionsResponseFormatPromptsType$inboundSchema:
  z.ZodNativeEnum<typeof ListPromptVersionsResponseFormatPromptsType> = z
    .nativeEnum(ListPromptVersionsResponseFormatPromptsType);

/** @internal */
export const ListPromptVersionsResponseFormatPromptsType$outboundSchema:
  z.ZodNativeEnum<typeof ListPromptVersionsResponseFormatPromptsType> =
    ListPromptVersionsResponseFormatPromptsType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListPromptVersionsResponseFormatPromptsType$ {
  /** @deprecated use `ListPromptVersionsResponseFormatPromptsType$inboundSchema` instead. */
  export const inboundSchema =
    ListPromptVersionsResponseFormatPromptsType$inboundSchema;
  /** @deprecated use `ListPromptVersionsResponseFormatPromptsType$outboundSchema` instead. */
  export const outboundSchema =
    ListPromptVersionsResponseFormatPromptsType$outboundSchema;
}

/** @internal */
export const ListPromptVersionsResponseFormat2$inboundSchema: z.ZodType<
  ListPromptVersionsResponseFormat2,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: ListPromptVersionsResponseFormatPromptsType$inboundSchema,
});

/** @internal */
export type ListPromptVersionsResponseFormat2$Outbound = {
  type: string;
};

/** @internal */
export const ListPromptVersionsResponseFormat2$outboundSchema: z.ZodType<
  ListPromptVersionsResponseFormat2$Outbound,
  z.ZodTypeDef,
  ListPromptVersionsResponseFormat2
> = z.object({
  type: ListPromptVersionsResponseFormatPromptsType$outboundSchema,
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListPromptVersionsResponseFormat2$ {
  /** @deprecated use `ListPromptVersionsResponseFormat2$inboundSchema` instead. */
  export const inboundSchema = ListPromptVersionsResponseFormat2$inboundSchema;
  /** @deprecated use `ListPromptVersionsResponseFormat2$outboundSchema` instead. */
  export const outboundSchema =
    ListPromptVersionsResponseFormat2$outboundSchema;
  /** @deprecated use `ListPromptVersionsResponseFormat2$Outbound` instead. */
  export type Outbound = ListPromptVersionsResponseFormat2$Outbound;
}

export function listPromptVersionsResponseFormat2ToJSON(
  listPromptVersionsResponseFormat2: ListPromptVersionsResponseFormat2,
): string {
  return JSON.stringify(
    ListPromptVersionsResponseFormat2$outboundSchema.parse(
      listPromptVersionsResponseFormat2,
    ),
  );
}

export function listPromptVersionsResponseFormat2FromJSON(
  jsonString: string,
): SafeParseResult<ListPromptVersionsResponseFormat2, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListPromptVersionsResponseFormat2$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListPromptVersionsResponseFormat2' from JSON`,
  );
}

/** @internal */
export const ListPromptVersionsResponseFormatType$inboundSchema:
  z.ZodNativeEnum<typeof ListPromptVersionsResponseFormatType> = z.nativeEnum(
    ListPromptVersionsResponseFormatType,
  );

/** @internal */
export const ListPromptVersionsResponseFormatType$outboundSchema:
  z.ZodNativeEnum<typeof ListPromptVersionsResponseFormatType> =
    ListPromptVersionsResponseFormatType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListPromptVersionsResponseFormatType$ {
  /** @deprecated use `ListPromptVersionsResponseFormatType$inboundSchema` instead. */
  export const inboundSchema =
    ListPromptVersionsResponseFormatType$inboundSchema;
  /** @deprecated use `ListPromptVersionsResponseFormatType$outboundSchema` instead. */
  export const outboundSchema =
    ListPromptVersionsResponseFormatType$outboundSchema;
}

/** @internal */
export const ListPromptVersionsResponseFormatJsonSchema$inboundSchema:
  z.ZodType<ListPromptVersionsResponseFormatJsonSchema, z.ZodTypeDef, unknown> =
    z.object({
      name: z.string(),
      strict: z.boolean().optional(),
      schema: z.record(z.any()),
    });

/** @internal */
export type ListPromptVersionsResponseFormatJsonSchema$Outbound = {
  name: string;
  strict?: boolean | undefined;
  schema: { [k: string]: any };
};

/** @internal */
export const ListPromptVersionsResponseFormatJsonSchema$outboundSchema:
  z.ZodType<
    ListPromptVersionsResponseFormatJsonSchema$Outbound,
    z.ZodTypeDef,
    ListPromptVersionsResponseFormatJsonSchema
  > = z.object({
    name: z.string(),
    strict: z.boolean().optional(),
    schema: z.record(z.any()),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListPromptVersionsResponseFormatJsonSchema$ {
  /** @deprecated use `ListPromptVersionsResponseFormatJsonSchema$inboundSchema` instead. */
  export const inboundSchema =
    ListPromptVersionsResponseFormatJsonSchema$inboundSchema;
  /** @deprecated use `ListPromptVersionsResponseFormatJsonSchema$outboundSchema` instead. */
  export const outboundSchema =
    ListPromptVersionsResponseFormatJsonSchema$outboundSchema;
  /** @deprecated use `ListPromptVersionsResponseFormatJsonSchema$Outbound` instead. */
  export type Outbound = ListPromptVersionsResponseFormatJsonSchema$Outbound;
}

export function listPromptVersionsResponseFormatJsonSchemaToJSON(
  listPromptVersionsResponseFormatJsonSchema:
    ListPromptVersionsResponseFormatJsonSchema,
): string {
  return JSON.stringify(
    ListPromptVersionsResponseFormatJsonSchema$outboundSchema.parse(
      listPromptVersionsResponseFormatJsonSchema,
    ),
  );
}

export function listPromptVersionsResponseFormatJsonSchemaFromJSON(
  jsonString: string,
): SafeParseResult<
  ListPromptVersionsResponseFormatJsonSchema,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      ListPromptVersionsResponseFormatJsonSchema$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'ListPromptVersionsResponseFormatJsonSchema' from JSON`,
  );
}

/** @internal */
export const ListPromptVersionsResponseFormat1$inboundSchema: z.ZodType<
  ListPromptVersionsResponseFormat1,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: ListPromptVersionsResponseFormatType$inboundSchema,
  json_schema: z.lazy(() =>
    ListPromptVersionsResponseFormatJsonSchema$inboundSchema
  ),
}).transform((v) => {
  return remap$(v, {
    "json_schema": "jsonSchema",
  });
});

/** @internal */
export type ListPromptVersionsResponseFormat1$Outbound = {
  type: string;
  json_schema: ListPromptVersionsResponseFormatJsonSchema$Outbound;
};

/** @internal */
export const ListPromptVersionsResponseFormat1$outboundSchema: z.ZodType<
  ListPromptVersionsResponseFormat1$Outbound,
  z.ZodTypeDef,
  ListPromptVersionsResponseFormat1
> = z.object({
  type: ListPromptVersionsResponseFormatType$outboundSchema,
  jsonSchema: z.lazy(() =>
    ListPromptVersionsResponseFormatJsonSchema$outboundSchema
  ),
}).transform((v) => {
  return remap$(v, {
    jsonSchema: "json_schema",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListPromptVersionsResponseFormat1$ {
  /** @deprecated use `ListPromptVersionsResponseFormat1$inboundSchema` instead. */
  export const inboundSchema = ListPromptVersionsResponseFormat1$inboundSchema;
  /** @deprecated use `ListPromptVersionsResponseFormat1$outboundSchema` instead. */
  export const outboundSchema =
    ListPromptVersionsResponseFormat1$outboundSchema;
  /** @deprecated use `ListPromptVersionsResponseFormat1$Outbound` instead. */
  export type Outbound = ListPromptVersionsResponseFormat1$Outbound;
}

export function listPromptVersionsResponseFormat1ToJSON(
  listPromptVersionsResponseFormat1: ListPromptVersionsResponseFormat1,
): string {
  return JSON.stringify(
    ListPromptVersionsResponseFormat1$outboundSchema.parse(
      listPromptVersionsResponseFormat1,
    ),
  );
}

export function listPromptVersionsResponseFormat1FromJSON(
  jsonString: string,
): SafeParseResult<ListPromptVersionsResponseFormat1, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListPromptVersionsResponseFormat1$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListPromptVersionsResponseFormat1' from JSON`,
  );
}

/** @internal */
export const ListPromptVersionsResponseFormat$inboundSchema: z.ZodType<
  ListPromptVersionsResponseFormat,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => ListPromptVersionsResponseFormat1$inboundSchema),
  z.lazy(() => ListPromptVersionsResponseFormat2$inboundSchema),
]);

/** @internal */
export type ListPromptVersionsResponseFormat$Outbound =
  | ListPromptVersionsResponseFormat1$Outbound
  | ListPromptVersionsResponseFormat2$Outbound;

/** @internal */
export const ListPromptVersionsResponseFormat$outboundSchema: z.ZodType<
  ListPromptVersionsResponseFormat$Outbound,
  z.ZodTypeDef,
  ListPromptVersionsResponseFormat
> = z.union([
  z.lazy(() => ListPromptVersionsResponseFormat1$outboundSchema),
  z.lazy(() => ListPromptVersionsResponseFormat2$outboundSchema),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListPromptVersionsResponseFormat$ {
  /** @deprecated use `ListPromptVersionsResponseFormat$inboundSchema` instead. */
  export const inboundSchema = ListPromptVersionsResponseFormat$inboundSchema;
  /** @deprecated use `ListPromptVersionsResponseFormat$outboundSchema` instead. */
  export const outboundSchema = ListPromptVersionsResponseFormat$outboundSchema;
  /** @deprecated use `ListPromptVersionsResponseFormat$Outbound` instead. */
  export type Outbound = ListPromptVersionsResponseFormat$Outbound;
}

export function listPromptVersionsResponseFormatToJSON(
  listPromptVersionsResponseFormat: ListPromptVersionsResponseFormat,
): string {
  return JSON.stringify(
    ListPromptVersionsResponseFormat$outboundSchema.parse(
      listPromptVersionsResponseFormat,
    ),
  );
}

export function listPromptVersionsResponseFormatFromJSON(
  jsonString: string,
): SafeParseResult<ListPromptVersionsResponseFormat, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListPromptVersionsResponseFormat$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListPromptVersionsResponseFormat' from JSON`,
  );
}

/** @internal */
export const ListPromptVersionsPhotoRealVersion$inboundSchema: z.ZodNativeEnum<
  typeof ListPromptVersionsPhotoRealVersion
> = z.nativeEnum(ListPromptVersionsPhotoRealVersion);

/** @internal */
export const ListPromptVersionsPhotoRealVersion$outboundSchema: z.ZodNativeEnum<
  typeof ListPromptVersionsPhotoRealVersion
> = ListPromptVersionsPhotoRealVersion$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListPromptVersionsPhotoRealVersion$ {
  /** @deprecated use `ListPromptVersionsPhotoRealVersion$inboundSchema` instead. */
  export const inboundSchema = ListPromptVersionsPhotoRealVersion$inboundSchema;
  /** @deprecated use `ListPromptVersionsPhotoRealVersion$outboundSchema` instead. */
  export const outboundSchema =
    ListPromptVersionsPhotoRealVersion$outboundSchema;
}

/** @internal */
export const ListPromptVersionsEncodingFormat$inboundSchema: z.ZodNativeEnum<
  typeof ListPromptVersionsEncodingFormat
> = z.nativeEnum(ListPromptVersionsEncodingFormat);

/** @internal */
export const ListPromptVersionsEncodingFormat$outboundSchema: z.ZodNativeEnum<
  typeof ListPromptVersionsEncodingFormat
> = ListPromptVersionsEncodingFormat$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListPromptVersionsEncodingFormat$ {
  /** @deprecated use `ListPromptVersionsEncodingFormat$inboundSchema` instead. */
  export const inboundSchema = ListPromptVersionsEncodingFormat$inboundSchema;
  /** @deprecated use `ListPromptVersionsEncodingFormat$outboundSchema` instead. */
  export const outboundSchema = ListPromptVersionsEncodingFormat$outboundSchema;
}

/** @internal */
export const ListPromptVersionsReasoningEffort$inboundSchema: z.ZodNativeEnum<
  typeof ListPromptVersionsReasoningEffort
> = z.nativeEnum(ListPromptVersionsReasoningEffort);

/** @internal */
export const ListPromptVersionsReasoningEffort$outboundSchema: z.ZodNativeEnum<
  typeof ListPromptVersionsReasoningEffort
> = ListPromptVersionsReasoningEffort$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListPromptVersionsReasoningEffort$ {
  /** @deprecated use `ListPromptVersionsReasoningEffort$inboundSchema` instead. */
  export const inboundSchema = ListPromptVersionsReasoningEffort$inboundSchema;
  /** @deprecated use `ListPromptVersionsReasoningEffort$outboundSchema` instead. */
  export const outboundSchema =
    ListPromptVersionsReasoningEffort$outboundSchema;
}

/** @internal */
export const ListPromptVersionsModelParameters$inboundSchema: z.ZodType<
  ListPromptVersionsModelParameters,
  z.ZodTypeDef,
  unknown
> = z.object({
  temperature: z.number().optional(),
  maxTokens: z.number().optional(),
  topK: z.number().optional(),
  topP: z.number().optional(),
  frequencyPenalty: z.number().optional(),
  presencePenalty: z.number().optional(),
  numImages: z.number().optional(),
  seed: z.number().optional(),
  format: ListPromptVersionsFormat$inboundSchema.optional(),
  dimensions: z.string().optional(),
  quality: z.string().optional(),
  style: z.string().optional(),
  responseFormat: z.nullable(
    z.union([
      z.lazy(() => ListPromptVersionsResponseFormat1$inboundSchema),
      z.lazy(() => ListPromptVersionsResponseFormat2$inboundSchema),
    ]),
  ).optional(),
  photoRealVersion: ListPromptVersionsPhotoRealVersion$inboundSchema.optional(),
  encoding_format: ListPromptVersionsEncodingFormat$inboundSchema.optional(),
  reasoningEffort: ListPromptVersionsReasoningEffort$inboundSchema.optional(),
  budgetTokens: z.number().optional(),
}).transform((v) => {
  return remap$(v, {
    "encoding_format": "encodingFormat",
  });
});

/** @internal */
export type ListPromptVersionsModelParameters$Outbound = {
  temperature?: number | undefined;
  maxTokens?: number | undefined;
  topK?: number | undefined;
  topP?: number | undefined;
  frequencyPenalty?: number | undefined;
  presencePenalty?: number | undefined;
  numImages?: number | undefined;
  seed?: number | undefined;
  format?: string | undefined;
  dimensions?: string | undefined;
  quality?: string | undefined;
  style?: string | undefined;
  responseFormat?:
    | ListPromptVersionsResponseFormat1$Outbound
    | ListPromptVersionsResponseFormat2$Outbound
    | null
    | undefined;
  photoRealVersion?: string | undefined;
  encoding_format?: string | undefined;
  reasoningEffort?: string | undefined;
  budgetTokens?: number | undefined;
};

/** @internal */
export const ListPromptVersionsModelParameters$outboundSchema: z.ZodType<
  ListPromptVersionsModelParameters$Outbound,
  z.ZodTypeDef,
  ListPromptVersionsModelParameters
> = z.object({
  temperature: z.number().optional(),
  maxTokens: z.number().optional(),
  topK: z.number().optional(),
  topP: z.number().optional(),
  frequencyPenalty: z.number().optional(),
  presencePenalty: z.number().optional(),
  numImages: z.number().optional(),
  seed: z.number().optional(),
  format: ListPromptVersionsFormat$outboundSchema.optional(),
  dimensions: z.string().optional(),
  quality: z.string().optional(),
  style: z.string().optional(),
  responseFormat: z.nullable(
    z.union([
      z.lazy(() => ListPromptVersionsResponseFormat1$outboundSchema),
      z.lazy(() => ListPromptVersionsResponseFormat2$outboundSchema),
    ]),
  ).optional(),
  photoRealVersion: ListPromptVersionsPhotoRealVersion$outboundSchema
    .optional(),
  encodingFormat: ListPromptVersionsEncodingFormat$outboundSchema.optional(),
  reasoningEffort: ListPromptVersionsReasoningEffort$outboundSchema.optional(),
  budgetTokens: z.number().optional(),
}).transform((v) => {
  return remap$(v, {
    encodingFormat: "encoding_format",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListPromptVersionsModelParameters$ {
  /** @deprecated use `ListPromptVersionsModelParameters$inboundSchema` instead. */
  export const inboundSchema = ListPromptVersionsModelParameters$inboundSchema;
  /** @deprecated use `ListPromptVersionsModelParameters$outboundSchema` instead. */
  export const outboundSchema =
    ListPromptVersionsModelParameters$outboundSchema;
  /** @deprecated use `ListPromptVersionsModelParameters$Outbound` instead. */
  export type Outbound = ListPromptVersionsModelParameters$Outbound;
}

export function listPromptVersionsModelParametersToJSON(
  listPromptVersionsModelParameters: ListPromptVersionsModelParameters,
): string {
  return JSON.stringify(
    ListPromptVersionsModelParameters$outboundSchema.parse(
      listPromptVersionsModelParameters,
    ),
  );
}

export function listPromptVersionsModelParametersFromJSON(
  jsonString: string,
): SafeParseResult<ListPromptVersionsModelParameters, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListPromptVersionsModelParameters$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListPromptVersionsModelParameters' from JSON`,
  );
}

/** @internal */
export const ListPromptVersionsProvider$inboundSchema: z.ZodNativeEnum<
  typeof ListPromptVersionsProvider
> = z.nativeEnum(ListPromptVersionsProvider);

/** @internal */
export const ListPromptVersionsProvider$outboundSchema: z.ZodNativeEnum<
  typeof ListPromptVersionsProvider
> = ListPromptVersionsProvider$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListPromptVersionsProvider$ {
  /** @deprecated use `ListPromptVersionsProvider$inboundSchema` instead. */
  export const inboundSchema = ListPromptVersionsProvider$inboundSchema;
  /** @deprecated use `ListPromptVersionsProvider$outboundSchema` instead. */
  export const outboundSchema = ListPromptVersionsProvider$outboundSchema;
}

/** @internal */
export const ListPromptVersionsRole$inboundSchema: z.ZodNativeEnum<
  typeof ListPromptVersionsRole
> = z.nativeEnum(ListPromptVersionsRole);

/** @internal */
export const ListPromptVersionsRole$outboundSchema: z.ZodNativeEnum<
  typeof ListPromptVersionsRole
> = ListPromptVersionsRole$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListPromptVersionsRole$ {
  /** @deprecated use `ListPromptVersionsRole$inboundSchema` instead. */
  export const inboundSchema = ListPromptVersionsRole$inboundSchema;
  /** @deprecated use `ListPromptVersionsRole$outboundSchema` instead. */
  export const outboundSchema = ListPromptVersionsRole$outboundSchema;
}

/** @internal */
export const ListPromptVersions2PromptsResponseType$inboundSchema:
  z.ZodNativeEnum<typeof ListPromptVersions2PromptsResponseType> = z.nativeEnum(
    ListPromptVersions2PromptsResponseType,
  );

/** @internal */
export const ListPromptVersions2PromptsResponseType$outboundSchema:
  z.ZodNativeEnum<typeof ListPromptVersions2PromptsResponseType> =
    ListPromptVersions2PromptsResponseType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListPromptVersions2PromptsResponseType$ {
  /** @deprecated use `ListPromptVersions2PromptsResponseType$inboundSchema` instead. */
  export const inboundSchema =
    ListPromptVersions2PromptsResponseType$inboundSchema;
  /** @deprecated use `ListPromptVersions2PromptsResponseType$outboundSchema` instead. */
  export const outboundSchema =
    ListPromptVersions2PromptsResponseType$outboundSchema;
}

/** @internal */
export const ListPromptVersions2File$inboundSchema: z.ZodType<
  ListPromptVersions2File,
  z.ZodTypeDef,
  unknown
> = z.object({
  file_data: z.string(),
  filename: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "file_data": "fileData",
  });
});

/** @internal */
export type ListPromptVersions2File$Outbound = {
  file_data: string;
  filename?: string | undefined;
};

/** @internal */
export const ListPromptVersions2File$outboundSchema: z.ZodType<
  ListPromptVersions2File$Outbound,
  z.ZodTypeDef,
  ListPromptVersions2File
> = z.object({
  fileData: z.string(),
  filename: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    fileData: "file_data",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListPromptVersions2File$ {
  /** @deprecated use `ListPromptVersions2File$inboundSchema` instead. */
  export const inboundSchema = ListPromptVersions2File$inboundSchema;
  /** @deprecated use `ListPromptVersions2File$outboundSchema` instead. */
  export const outboundSchema = ListPromptVersions2File$outboundSchema;
  /** @deprecated use `ListPromptVersions2File$Outbound` instead. */
  export type Outbound = ListPromptVersions2File$Outbound;
}

export function listPromptVersions2FileToJSON(
  listPromptVersions2File: ListPromptVersions2File,
): string {
  return JSON.stringify(
    ListPromptVersions2File$outboundSchema.parse(listPromptVersions2File),
  );
}

export function listPromptVersions2FileFromJSON(
  jsonString: string,
): SafeParseResult<ListPromptVersions2File, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListPromptVersions2File$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListPromptVersions2File' from JSON`,
  );
}

/** @internal */
export const ListPromptVersions23$inboundSchema: z.ZodType<
  ListPromptVersions23,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: ListPromptVersions2PromptsResponseType$inboundSchema,
  file: z.lazy(() => ListPromptVersions2File$inboundSchema),
});

/** @internal */
export type ListPromptVersions23$Outbound = {
  type: string;
  file: ListPromptVersions2File$Outbound;
};

/** @internal */
export const ListPromptVersions23$outboundSchema: z.ZodType<
  ListPromptVersions23$Outbound,
  z.ZodTypeDef,
  ListPromptVersions23
> = z.object({
  type: ListPromptVersions2PromptsResponseType$outboundSchema,
  file: z.lazy(() => ListPromptVersions2File$outboundSchema),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListPromptVersions23$ {
  /** @deprecated use `ListPromptVersions23$inboundSchema` instead. */
  export const inboundSchema = ListPromptVersions23$inboundSchema;
  /** @deprecated use `ListPromptVersions23$outboundSchema` instead. */
  export const outboundSchema = ListPromptVersions23$outboundSchema;
  /** @deprecated use `ListPromptVersions23$Outbound` instead. */
  export type Outbound = ListPromptVersions23$Outbound;
}

export function listPromptVersions23ToJSON(
  listPromptVersions23: ListPromptVersions23,
): string {
  return JSON.stringify(
    ListPromptVersions23$outboundSchema.parse(listPromptVersions23),
  );
}

export function listPromptVersions23FromJSON(
  jsonString: string,
): SafeParseResult<ListPromptVersions23, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListPromptVersions23$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListPromptVersions23' from JSON`,
  );
}

/** @internal */
export const ListPromptVersions2PromptsType$inboundSchema: z.ZodNativeEnum<
  typeof ListPromptVersions2PromptsType
> = z.nativeEnum(ListPromptVersions2PromptsType);

/** @internal */
export const ListPromptVersions2PromptsType$outboundSchema: z.ZodNativeEnum<
  typeof ListPromptVersions2PromptsType
> = ListPromptVersions2PromptsType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListPromptVersions2PromptsType$ {
  /** @deprecated use `ListPromptVersions2PromptsType$inboundSchema` instead. */
  export const inboundSchema = ListPromptVersions2PromptsType$inboundSchema;
  /** @deprecated use `ListPromptVersions2PromptsType$outboundSchema` instead. */
  export const outboundSchema = ListPromptVersions2PromptsType$outboundSchema;
}

/** @internal */
export const ListPromptVersions2ImageUrl$inboundSchema: z.ZodType<
  ListPromptVersions2ImageUrl,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string().optional(),
  url: z.string(),
  detail: z.string().optional(),
});

/** @internal */
export type ListPromptVersions2ImageUrl$Outbound = {
  id?: string | undefined;
  url: string;
  detail?: string | undefined;
};

/** @internal */
export const ListPromptVersions2ImageUrl$outboundSchema: z.ZodType<
  ListPromptVersions2ImageUrl$Outbound,
  z.ZodTypeDef,
  ListPromptVersions2ImageUrl
> = z.object({
  id: z.string().optional(),
  url: z.string(),
  detail: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListPromptVersions2ImageUrl$ {
  /** @deprecated use `ListPromptVersions2ImageUrl$inboundSchema` instead. */
  export const inboundSchema = ListPromptVersions2ImageUrl$inboundSchema;
  /** @deprecated use `ListPromptVersions2ImageUrl$outboundSchema` instead. */
  export const outboundSchema = ListPromptVersions2ImageUrl$outboundSchema;
  /** @deprecated use `ListPromptVersions2ImageUrl$Outbound` instead. */
  export type Outbound = ListPromptVersions2ImageUrl$Outbound;
}

export function listPromptVersions2ImageUrlToJSON(
  listPromptVersions2ImageUrl: ListPromptVersions2ImageUrl,
): string {
  return JSON.stringify(
    ListPromptVersions2ImageUrl$outboundSchema.parse(
      listPromptVersions2ImageUrl,
    ),
  );
}

export function listPromptVersions2ImageUrlFromJSON(
  jsonString: string,
): SafeParseResult<ListPromptVersions2ImageUrl, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListPromptVersions2ImageUrl$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListPromptVersions2ImageUrl' from JSON`,
  );
}

/** @internal */
export const ListPromptVersions22$inboundSchema: z.ZodType<
  ListPromptVersions22,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: ListPromptVersions2PromptsType$inboundSchema,
  image_url: z.lazy(() => ListPromptVersions2ImageUrl$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "image_url": "imageUrl",
  });
});

/** @internal */
export type ListPromptVersions22$Outbound = {
  type: string;
  image_url: ListPromptVersions2ImageUrl$Outbound;
};

/** @internal */
export const ListPromptVersions22$outboundSchema: z.ZodType<
  ListPromptVersions22$Outbound,
  z.ZodTypeDef,
  ListPromptVersions22
> = z.object({
  type: ListPromptVersions2PromptsType$outboundSchema,
  imageUrl: z.lazy(() => ListPromptVersions2ImageUrl$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    imageUrl: "image_url",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListPromptVersions22$ {
  /** @deprecated use `ListPromptVersions22$inboundSchema` instead. */
  export const inboundSchema = ListPromptVersions22$inboundSchema;
  /** @deprecated use `ListPromptVersions22$outboundSchema` instead. */
  export const outboundSchema = ListPromptVersions22$outboundSchema;
  /** @deprecated use `ListPromptVersions22$Outbound` instead. */
  export type Outbound = ListPromptVersions22$Outbound;
}

export function listPromptVersions22ToJSON(
  listPromptVersions22: ListPromptVersions22,
): string {
  return JSON.stringify(
    ListPromptVersions22$outboundSchema.parse(listPromptVersions22),
  );
}

export function listPromptVersions22FromJSON(
  jsonString: string,
): SafeParseResult<ListPromptVersions22, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListPromptVersions22$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListPromptVersions22' from JSON`,
  );
}

/** @internal */
export const ListPromptVersions2Type$inboundSchema: z.ZodNativeEnum<
  typeof ListPromptVersions2Type
> = z.nativeEnum(ListPromptVersions2Type);

/** @internal */
export const ListPromptVersions2Type$outboundSchema: z.ZodNativeEnum<
  typeof ListPromptVersions2Type
> = ListPromptVersions2Type$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListPromptVersions2Type$ {
  /** @deprecated use `ListPromptVersions2Type$inboundSchema` instead. */
  export const inboundSchema = ListPromptVersions2Type$inboundSchema;
  /** @deprecated use `ListPromptVersions2Type$outboundSchema` instead. */
  export const outboundSchema = ListPromptVersions2Type$outboundSchema;
}

/** @internal */
export const ListPromptVersions21$inboundSchema: z.ZodType<
  ListPromptVersions21,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: ListPromptVersions2Type$inboundSchema,
  text: z.string(),
});

/** @internal */
export type ListPromptVersions21$Outbound = {
  type: string;
  text: string;
};

/** @internal */
export const ListPromptVersions21$outboundSchema: z.ZodType<
  ListPromptVersions21$Outbound,
  z.ZodTypeDef,
  ListPromptVersions21
> = z.object({
  type: ListPromptVersions2Type$outboundSchema,
  text: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListPromptVersions21$ {
  /** @deprecated use `ListPromptVersions21$inboundSchema` instead. */
  export const inboundSchema = ListPromptVersions21$inboundSchema;
  /** @deprecated use `ListPromptVersions21$outboundSchema` instead. */
  export const outboundSchema = ListPromptVersions21$outboundSchema;
  /** @deprecated use `ListPromptVersions21$Outbound` instead. */
  export type Outbound = ListPromptVersions21$Outbound;
}

export function listPromptVersions21ToJSON(
  listPromptVersions21: ListPromptVersions21,
): string {
  return JSON.stringify(
    ListPromptVersions21$outboundSchema.parse(listPromptVersions21),
  );
}

export function listPromptVersions21FromJSON(
  jsonString: string,
): SafeParseResult<ListPromptVersions21, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListPromptVersions21$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListPromptVersions21' from JSON`,
  );
}

/** @internal */
export const ListPromptVersionsContent2$inboundSchema: z.ZodType<
  ListPromptVersionsContent2,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => ListPromptVersions21$inboundSchema),
  z.lazy(() => ListPromptVersions22$inboundSchema),
  z.lazy(() => ListPromptVersions23$inboundSchema),
]);

/** @internal */
export type ListPromptVersionsContent2$Outbound =
  | ListPromptVersions21$Outbound
  | ListPromptVersions22$Outbound
  | ListPromptVersions23$Outbound;

/** @internal */
export const ListPromptVersionsContent2$outboundSchema: z.ZodType<
  ListPromptVersionsContent2$Outbound,
  z.ZodTypeDef,
  ListPromptVersionsContent2
> = z.union([
  z.lazy(() => ListPromptVersions21$outboundSchema),
  z.lazy(() => ListPromptVersions22$outboundSchema),
  z.lazy(() => ListPromptVersions23$outboundSchema),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListPromptVersionsContent2$ {
  /** @deprecated use `ListPromptVersionsContent2$inboundSchema` instead. */
  export const inboundSchema = ListPromptVersionsContent2$inboundSchema;
  /** @deprecated use `ListPromptVersionsContent2$outboundSchema` instead. */
  export const outboundSchema = ListPromptVersionsContent2$outboundSchema;
  /** @deprecated use `ListPromptVersionsContent2$Outbound` instead. */
  export type Outbound = ListPromptVersionsContent2$Outbound;
}

export function listPromptVersionsContent2ToJSON(
  listPromptVersionsContent2: ListPromptVersionsContent2,
): string {
  return JSON.stringify(
    ListPromptVersionsContent2$outboundSchema.parse(listPromptVersionsContent2),
  );
}

export function listPromptVersionsContent2FromJSON(
  jsonString: string,
): SafeParseResult<ListPromptVersionsContent2, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListPromptVersionsContent2$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListPromptVersionsContent2' from JSON`,
  );
}

/** @internal */
export const ListPromptVersionsContent$inboundSchema: z.ZodType<
  ListPromptVersionsContent,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.string(),
  z.array(z.union([
    z.lazy(() => ListPromptVersions21$inboundSchema),
    z.lazy(() => ListPromptVersions22$inboundSchema),
    z.lazy(() => ListPromptVersions23$inboundSchema),
  ])),
]);

/** @internal */
export type ListPromptVersionsContent$Outbound =
  | string
  | Array<
    | ListPromptVersions21$Outbound
    | ListPromptVersions22$Outbound
    | ListPromptVersions23$Outbound
  >;

/** @internal */
export const ListPromptVersionsContent$outboundSchema: z.ZodType<
  ListPromptVersionsContent$Outbound,
  z.ZodTypeDef,
  ListPromptVersionsContent
> = z.union([
  z.string(),
  z.array(z.union([
    z.lazy(() => ListPromptVersions21$outboundSchema),
    z.lazy(() => ListPromptVersions22$outboundSchema),
    z.lazy(() => ListPromptVersions23$outboundSchema),
  ])),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListPromptVersionsContent$ {
  /** @deprecated use `ListPromptVersionsContent$inboundSchema` instead. */
  export const inboundSchema = ListPromptVersionsContent$inboundSchema;
  /** @deprecated use `ListPromptVersionsContent$outboundSchema` instead. */
  export const outboundSchema = ListPromptVersionsContent$outboundSchema;
  /** @deprecated use `ListPromptVersionsContent$Outbound` instead. */
  export type Outbound = ListPromptVersionsContent$Outbound;
}

export function listPromptVersionsContentToJSON(
  listPromptVersionsContent: ListPromptVersionsContent,
): string {
  return JSON.stringify(
    ListPromptVersionsContent$outboundSchema.parse(listPromptVersionsContent),
  );
}

export function listPromptVersionsContentFromJSON(
  jsonString: string,
): SafeParseResult<ListPromptVersionsContent, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListPromptVersionsContent$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListPromptVersionsContent' from JSON`,
  );
}

/** @internal */
export const ListPromptVersionsType$inboundSchema: z.ZodNativeEnum<
  typeof ListPromptVersionsType
> = z.nativeEnum(ListPromptVersionsType);

/** @internal */
export const ListPromptVersionsType$outboundSchema: z.ZodNativeEnum<
  typeof ListPromptVersionsType
> = ListPromptVersionsType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListPromptVersionsType$ {
  /** @deprecated use `ListPromptVersionsType$inboundSchema` instead. */
  export const inboundSchema = ListPromptVersionsType$inboundSchema;
  /** @deprecated use `ListPromptVersionsType$outboundSchema` instead. */
  export const outboundSchema = ListPromptVersionsType$outboundSchema;
}

/** @internal */
export const ListPromptVersionsFunction$inboundSchema: z.ZodType<
  ListPromptVersionsFunction,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.string(),
  arguments: z.string(),
});

/** @internal */
export type ListPromptVersionsFunction$Outbound = {
  name: string;
  arguments: string;
};

/** @internal */
export const ListPromptVersionsFunction$outboundSchema: z.ZodType<
  ListPromptVersionsFunction$Outbound,
  z.ZodTypeDef,
  ListPromptVersionsFunction
> = z.object({
  name: z.string(),
  arguments: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListPromptVersionsFunction$ {
  /** @deprecated use `ListPromptVersionsFunction$inboundSchema` instead. */
  export const inboundSchema = ListPromptVersionsFunction$inboundSchema;
  /** @deprecated use `ListPromptVersionsFunction$outboundSchema` instead. */
  export const outboundSchema = ListPromptVersionsFunction$outboundSchema;
  /** @deprecated use `ListPromptVersionsFunction$Outbound` instead. */
  export type Outbound = ListPromptVersionsFunction$Outbound;
}

export function listPromptVersionsFunctionToJSON(
  listPromptVersionsFunction: ListPromptVersionsFunction,
): string {
  return JSON.stringify(
    ListPromptVersionsFunction$outboundSchema.parse(listPromptVersionsFunction),
  );
}

export function listPromptVersionsFunctionFromJSON(
  jsonString: string,
): SafeParseResult<ListPromptVersionsFunction, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListPromptVersionsFunction$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListPromptVersionsFunction' from JSON`,
  );
}

/** @internal */
export const ListPromptVersionsToolCalls$inboundSchema: z.ZodType<
  ListPromptVersionsToolCalls,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string().optional(),
  index: z.number().optional(),
  type: ListPromptVersionsType$inboundSchema,
  function: z.lazy(() => ListPromptVersionsFunction$inboundSchema),
});

/** @internal */
export type ListPromptVersionsToolCalls$Outbound = {
  id?: string | undefined;
  index?: number | undefined;
  type: string;
  function: ListPromptVersionsFunction$Outbound;
};

/** @internal */
export const ListPromptVersionsToolCalls$outboundSchema: z.ZodType<
  ListPromptVersionsToolCalls$Outbound,
  z.ZodTypeDef,
  ListPromptVersionsToolCalls
> = z.object({
  id: z.string().optional(),
  index: z.number().optional(),
  type: ListPromptVersionsType$outboundSchema,
  function: z.lazy(() => ListPromptVersionsFunction$outboundSchema),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListPromptVersionsToolCalls$ {
  /** @deprecated use `ListPromptVersionsToolCalls$inboundSchema` instead. */
  export const inboundSchema = ListPromptVersionsToolCalls$inboundSchema;
  /** @deprecated use `ListPromptVersionsToolCalls$outboundSchema` instead. */
  export const outboundSchema = ListPromptVersionsToolCalls$outboundSchema;
  /** @deprecated use `ListPromptVersionsToolCalls$Outbound` instead. */
  export type Outbound = ListPromptVersionsToolCalls$Outbound;
}

export function listPromptVersionsToolCallsToJSON(
  listPromptVersionsToolCalls: ListPromptVersionsToolCalls,
): string {
  return JSON.stringify(
    ListPromptVersionsToolCalls$outboundSchema.parse(
      listPromptVersionsToolCalls,
    ),
  );
}

export function listPromptVersionsToolCallsFromJSON(
  jsonString: string,
): SafeParseResult<ListPromptVersionsToolCalls, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListPromptVersionsToolCalls$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListPromptVersionsToolCalls' from JSON`,
  );
}

/** @internal */
export const ListPromptVersionsMessages$inboundSchema: z.ZodType<
  ListPromptVersionsMessages,
  z.ZodTypeDef,
  unknown
> = z.object({
  role: ListPromptVersionsRole$inboundSchema,
  content: z.union([
    z.string(),
    z.array(z.union([
      z.lazy(() => ListPromptVersions21$inboundSchema),
      z.lazy(() => ListPromptVersions22$inboundSchema),
      z.lazy(() => ListPromptVersions23$inboundSchema),
    ])),
  ]),
  tool_calls: z.array(z.lazy(() => ListPromptVersionsToolCalls$inboundSchema))
    .optional(),
  tool_call_id: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "tool_calls": "toolCalls",
    "tool_call_id": "toolCallId",
  });
});

/** @internal */
export type ListPromptVersionsMessages$Outbound = {
  role: string;
  content:
    | string
    | Array<
      | ListPromptVersions21$Outbound
      | ListPromptVersions22$Outbound
      | ListPromptVersions23$Outbound
    >;
  tool_calls?: Array<ListPromptVersionsToolCalls$Outbound> | undefined;
  tool_call_id?: string | undefined;
};

/** @internal */
export const ListPromptVersionsMessages$outboundSchema: z.ZodType<
  ListPromptVersionsMessages$Outbound,
  z.ZodTypeDef,
  ListPromptVersionsMessages
> = z.object({
  role: ListPromptVersionsRole$outboundSchema,
  content: z.union([
    z.string(),
    z.array(z.union([
      z.lazy(() => ListPromptVersions21$outboundSchema),
      z.lazy(() => ListPromptVersions22$outboundSchema),
      z.lazy(() => ListPromptVersions23$outboundSchema),
    ])),
  ]),
  toolCalls: z.array(z.lazy(() => ListPromptVersionsToolCalls$outboundSchema))
    .optional(),
  toolCallId: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    toolCalls: "tool_calls",
    toolCallId: "tool_call_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListPromptVersionsMessages$ {
  /** @deprecated use `ListPromptVersionsMessages$inboundSchema` instead. */
  export const inboundSchema = ListPromptVersionsMessages$inboundSchema;
  /** @deprecated use `ListPromptVersionsMessages$outboundSchema` instead. */
  export const outboundSchema = ListPromptVersionsMessages$outboundSchema;
  /** @deprecated use `ListPromptVersionsMessages$Outbound` instead. */
  export type Outbound = ListPromptVersionsMessages$Outbound;
}

export function listPromptVersionsMessagesToJSON(
  listPromptVersionsMessages: ListPromptVersionsMessages,
): string {
  return JSON.stringify(
    ListPromptVersionsMessages$outboundSchema.parse(listPromptVersionsMessages),
  );
}

export function listPromptVersionsMessagesFromJSON(
  jsonString: string,
): SafeParseResult<ListPromptVersionsMessages, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListPromptVersionsMessages$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListPromptVersionsMessages' from JSON`,
  );
}

/** @internal */
export const ListPromptVersionsPromptConfig$inboundSchema: z.ZodType<
  ListPromptVersionsPromptConfig,
  z.ZodTypeDef,
  unknown
> = z.object({
  stream: z.boolean().optional(),
  model: z.string().optional(),
  model_db_id: z.nullable(z.string()).optional(),
  model_type: z.nullable(ListPromptVersionsModelType$inboundSchema).optional(),
  model_parameters: z.lazy(() =>
    ListPromptVersionsModelParameters$inboundSchema
  ).optional(),
  provider: ListPromptVersionsProvider$inboundSchema.optional(),
  integration_id: z.nullable(z.string()).optional(),
  version: z.string().optional(),
  messages: z.array(z.lazy(() => ListPromptVersionsMessages$inboundSchema)),
}).transform((v) => {
  return remap$(v, {
    "model_db_id": "modelDbId",
    "model_type": "modelType",
    "model_parameters": "modelParameters",
    "integration_id": "integrationId",
  });
});

/** @internal */
export type ListPromptVersionsPromptConfig$Outbound = {
  stream?: boolean | undefined;
  model?: string | undefined;
  model_db_id?: string | null | undefined;
  model_type?: string | null | undefined;
  model_parameters?: ListPromptVersionsModelParameters$Outbound | undefined;
  provider?: string | undefined;
  integration_id?: string | null | undefined;
  version?: string | undefined;
  messages: Array<ListPromptVersionsMessages$Outbound>;
};

/** @internal */
export const ListPromptVersionsPromptConfig$outboundSchema: z.ZodType<
  ListPromptVersionsPromptConfig$Outbound,
  z.ZodTypeDef,
  ListPromptVersionsPromptConfig
> = z.object({
  stream: z.boolean().optional(),
  model: z.string().optional(),
  modelDbId: z.nullable(z.string()).optional(),
  modelType: z.nullable(ListPromptVersionsModelType$outboundSchema).optional(),
  modelParameters: z.lazy(() =>
    ListPromptVersionsModelParameters$outboundSchema
  ).optional(),
  provider: ListPromptVersionsProvider$outboundSchema.optional(),
  integrationId: z.nullable(z.string()).optional(),
  version: z.string().optional(),
  messages: z.array(z.lazy(() => ListPromptVersionsMessages$outboundSchema)),
}).transform((v) => {
  return remap$(v, {
    modelDbId: "model_db_id",
    modelType: "model_type",
    modelParameters: "model_parameters",
    integrationId: "integration_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListPromptVersionsPromptConfig$ {
  /** @deprecated use `ListPromptVersionsPromptConfig$inboundSchema` instead. */
  export const inboundSchema = ListPromptVersionsPromptConfig$inboundSchema;
  /** @deprecated use `ListPromptVersionsPromptConfig$outboundSchema` instead. */
  export const outboundSchema = ListPromptVersionsPromptConfig$outboundSchema;
  /** @deprecated use `ListPromptVersionsPromptConfig$Outbound` instead. */
  export type Outbound = ListPromptVersionsPromptConfig$Outbound;
}

export function listPromptVersionsPromptConfigToJSON(
  listPromptVersionsPromptConfig: ListPromptVersionsPromptConfig,
): string {
  return JSON.stringify(
    ListPromptVersionsPromptConfig$outboundSchema.parse(
      listPromptVersionsPromptConfig,
    ),
  );
}

export function listPromptVersionsPromptConfigFromJSON(
  jsonString: string,
): SafeParseResult<ListPromptVersionsPromptConfig, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListPromptVersionsPromptConfig$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListPromptVersionsPromptConfig' from JSON`,
  );
}

/** @internal */
export const ListPromptVersionsUseCases$inboundSchema: z.ZodNativeEnum<
  typeof ListPromptVersionsUseCases
> = z.nativeEnum(ListPromptVersionsUseCases);

/** @internal */
export const ListPromptVersionsUseCases$outboundSchema: z.ZodNativeEnum<
  typeof ListPromptVersionsUseCases
> = ListPromptVersionsUseCases$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListPromptVersionsUseCases$ {
  /** @deprecated use `ListPromptVersionsUseCases$inboundSchema` instead. */
  export const inboundSchema = ListPromptVersionsUseCases$inboundSchema;
  /** @deprecated use `ListPromptVersionsUseCases$outboundSchema` instead. */
  export const outboundSchema = ListPromptVersionsUseCases$outboundSchema;
}

/** @internal */
export const ListPromptVersionsLanguage$inboundSchema: z.ZodNativeEnum<
  typeof ListPromptVersionsLanguage
> = z.nativeEnum(ListPromptVersionsLanguage);

/** @internal */
export const ListPromptVersionsLanguage$outboundSchema: z.ZodNativeEnum<
  typeof ListPromptVersionsLanguage
> = ListPromptVersionsLanguage$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListPromptVersionsLanguage$ {
  /** @deprecated use `ListPromptVersionsLanguage$inboundSchema` instead. */
  export const inboundSchema = ListPromptVersionsLanguage$inboundSchema;
  /** @deprecated use `ListPromptVersionsLanguage$outboundSchema` instead. */
  export const outboundSchema = ListPromptVersionsLanguage$outboundSchema;
}

/** @internal */
export const ListPromptVersionsMetadata$inboundSchema: z.ZodType<
  ListPromptVersionsMetadata,
  z.ZodTypeDef,
  unknown
> = z.object({
  use_cases: z.array(ListPromptVersionsUseCases$inboundSchema).optional(),
  language: z.nullable(ListPromptVersionsLanguage$inboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    "use_cases": "useCases",
  });
});

/** @internal */
export type ListPromptVersionsMetadata$Outbound = {
  use_cases?: Array<string> | undefined;
  language?: string | null | undefined;
};

/** @internal */
export const ListPromptVersionsMetadata$outboundSchema: z.ZodType<
  ListPromptVersionsMetadata$Outbound,
  z.ZodTypeDef,
  ListPromptVersionsMetadata
> = z.object({
  useCases: z.array(ListPromptVersionsUseCases$outboundSchema).optional(),
  language: z.nullable(ListPromptVersionsLanguage$outboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    useCases: "use_cases",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListPromptVersionsMetadata$ {
  /** @deprecated use `ListPromptVersionsMetadata$inboundSchema` instead. */
  export const inboundSchema = ListPromptVersionsMetadata$inboundSchema;
  /** @deprecated use `ListPromptVersionsMetadata$outboundSchema` instead. */
  export const outboundSchema = ListPromptVersionsMetadata$outboundSchema;
  /** @deprecated use `ListPromptVersionsMetadata$Outbound` instead. */
  export type Outbound = ListPromptVersionsMetadata$Outbound;
}

export function listPromptVersionsMetadataToJSON(
  listPromptVersionsMetadata: ListPromptVersionsMetadata,
): string {
  return JSON.stringify(
    ListPromptVersionsMetadata$outboundSchema.parse(listPromptVersionsMetadata),
  );
}

export function listPromptVersionsMetadataFromJSON(
  jsonString: string,
): SafeParseResult<ListPromptVersionsMetadata, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListPromptVersionsMetadata$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListPromptVersionsMetadata' from JSON`,
  );
}

/** @internal */
export const ListPromptVersionsData$inboundSchema: z.ZodType<
  ListPromptVersionsData,
  z.ZodTypeDef,
  unknown
> = z.object({
  _id: z.string(),
  created_by_id: z.nullable(z.string()).optional(),
  updated_by_id: z.nullable(z.string()).optional(),
  description: z.nullable(z.string()).optional(),
  prompt_config: z.lazy(() => ListPromptVersionsPromptConfig$inboundSchema),
  metadata: z.lazy(() => ListPromptVersionsMetadata$inboundSchema).optional(),
  timestamp: z.string(),
}).transform((v) => {
  return remap$(v, {
    "_id": "id",
    "created_by_id": "createdById",
    "updated_by_id": "updatedById",
    "prompt_config": "promptConfig",
  });
});

/** @internal */
export type ListPromptVersionsData$Outbound = {
  _id: string;
  created_by_id?: string | null | undefined;
  updated_by_id?: string | null | undefined;
  description?: string | null | undefined;
  prompt_config: ListPromptVersionsPromptConfig$Outbound;
  metadata?: ListPromptVersionsMetadata$Outbound | undefined;
  timestamp: string;
};

/** @internal */
export const ListPromptVersionsData$outboundSchema: z.ZodType<
  ListPromptVersionsData$Outbound,
  z.ZodTypeDef,
  ListPromptVersionsData
> = z.object({
  id: z.string(),
  createdById: z.nullable(z.string()).optional(),
  updatedById: z.nullable(z.string()).optional(),
  description: z.nullable(z.string()).optional(),
  promptConfig: z.lazy(() => ListPromptVersionsPromptConfig$outboundSchema),
  metadata: z.lazy(() => ListPromptVersionsMetadata$outboundSchema).optional(),
  timestamp: z.string(),
}).transform((v) => {
  return remap$(v, {
    id: "_id",
    createdById: "created_by_id",
    updatedById: "updated_by_id",
    promptConfig: "prompt_config",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListPromptVersionsData$ {
  /** @deprecated use `ListPromptVersionsData$inboundSchema` instead. */
  export const inboundSchema = ListPromptVersionsData$inboundSchema;
  /** @deprecated use `ListPromptVersionsData$outboundSchema` instead. */
  export const outboundSchema = ListPromptVersionsData$outboundSchema;
  /** @deprecated use `ListPromptVersionsData$Outbound` instead. */
  export type Outbound = ListPromptVersionsData$Outbound;
}

export function listPromptVersionsDataToJSON(
  listPromptVersionsData: ListPromptVersionsData,
): string {
  return JSON.stringify(
    ListPromptVersionsData$outboundSchema.parse(listPromptVersionsData),
  );
}

export function listPromptVersionsDataFromJSON(
  jsonString: string,
): SafeParseResult<ListPromptVersionsData, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListPromptVersionsData$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListPromptVersionsData' from JSON`,
  );
}

/** @internal */
export const ListPromptVersionsResponseBody$inboundSchema: z.ZodType<
  ListPromptVersionsResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  object: ListPromptVersionsObject$inboundSchema,
  data: z.array(z.lazy(() => ListPromptVersionsData$inboundSchema)),
  has_more: z.boolean(),
}).transform((v) => {
  return remap$(v, {
    "has_more": "hasMore",
  });
});

/** @internal */
export type ListPromptVersionsResponseBody$Outbound = {
  object: string;
  data: Array<ListPromptVersionsData$Outbound>;
  has_more: boolean;
};

/** @internal */
export const ListPromptVersionsResponseBody$outboundSchema: z.ZodType<
  ListPromptVersionsResponseBody$Outbound,
  z.ZodTypeDef,
  ListPromptVersionsResponseBody
> = z.object({
  object: ListPromptVersionsObject$outboundSchema,
  data: z.array(z.lazy(() => ListPromptVersionsData$outboundSchema)),
  hasMore: z.boolean(),
}).transform((v) => {
  return remap$(v, {
    hasMore: "has_more",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListPromptVersionsResponseBody$ {
  /** @deprecated use `ListPromptVersionsResponseBody$inboundSchema` instead. */
  export const inboundSchema = ListPromptVersionsResponseBody$inboundSchema;
  /** @deprecated use `ListPromptVersionsResponseBody$outboundSchema` instead. */
  export const outboundSchema = ListPromptVersionsResponseBody$outboundSchema;
  /** @deprecated use `ListPromptVersionsResponseBody$Outbound` instead. */
  export type Outbound = ListPromptVersionsResponseBody$Outbound;
}

export function listPromptVersionsResponseBodyToJSON(
  listPromptVersionsResponseBody: ListPromptVersionsResponseBody,
): string {
  return JSON.stringify(
    ListPromptVersionsResponseBody$outboundSchema.parse(
      listPromptVersionsResponseBody,
    ),
  );
}

export function listPromptVersionsResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<ListPromptVersionsResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListPromptVersionsResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListPromptVersionsResponseBody' from JSON`,
  );
}
