/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * The role of the prompt message
 */
export const CreateDatasetItemRole = {
  System: "system",
  Assistant: "assistant",
  User: "user",
  Exception: "exception",
  Tool: "tool",
  Prompt: "prompt",
  Correction: "correction",
  ExpectedOutput: "expected_output",
} as const;
/**
 * The role of the prompt message
 */
export type CreateDatasetItemRole = ClosedEnum<typeof CreateDatasetItemRole>;

export const CreateDatasetItem2DatasetsType = {
  ImageUrl: "image_url",
} as const;
export type CreateDatasetItem2DatasetsType = ClosedEnum<
  typeof CreateDatasetItem2DatasetsType
>;

export type CreateDatasetItem2ImageUrl = {
  /**
   * Either a URL of the image or the base64 encoded data URI.
   */
  url: string;
  /**
   * Specifies the detail level of the image. Currently only supported with OpenAI models
   */
  detail?: string | undefined;
};

/**
 * The image part of the prompt message. Only supported with vision models.
 */
export type CreateDatasetItem22 = {
  type: CreateDatasetItem2DatasetsType;
  imageUrl: CreateDatasetItem2ImageUrl;
};

export const CreateDatasetItem2Type = {
  Text: "text",
} as const;
export type CreateDatasetItem2Type = ClosedEnum<typeof CreateDatasetItem2Type>;

/**
 * Text content part of a prompt message
 */
export type CreateDatasetItem21 = {
  type: CreateDatasetItem2Type;
  text: string;
};

export type CreateDatasetItemContent2 =
  | CreateDatasetItem21
  | CreateDatasetItem22;

/**
 * The contents of the user message. Either the text content of the message or an array of content parts with a defined type, each can be of type `text` or `image_url` when passing in images. You can pass multiple images by adding multiple `image_url` content parts.
 */
export type CreateDatasetItemContent =
  | string
  | Array<CreateDatasetItem21 | CreateDatasetItem22>;

export const CreateDatasetItemType = {
  Function: "function",
} as const;
export type CreateDatasetItemType = ClosedEnum<typeof CreateDatasetItemType>;

export type CreateDatasetItemFunction = {
  name: string;
  /**
   * JSON string arguments for the functions
   */
  arguments: string;
};

export type CreateDatasetItemToolCalls = {
  id?: string | undefined;
  index?: number | undefined;
  type: CreateDatasetItemType;
  function: CreateDatasetItemFunction;
};

export type CreateDatasetItemMessages = {
  /**
   * The role of the prompt message
   */
  role: CreateDatasetItemRole;
  /**
   * The contents of the user message. Either the text content of the message or an array of content parts with a defined type, each can be of type `text` or `image_url` when passing in images. You can pass multiple images by adding multiple `image_url` content parts.
   */
  content: string | Array<CreateDatasetItem21 | CreateDatasetItem22>;
  toolCalls?: Array<CreateDatasetItemToolCalls> | undefined;
};

export type CreateDatasetItemRequestBody = {
  /**
   * The inputs of the dataset. Key value pairs where the key is the input name and the value is the input value. Nested objects are not supported.
   */
  inputs?: { [k: string]: any } | undefined;
  /**
   * The prompt template messages
   */
  messages?: Array<CreateDatasetItemMessages> | undefined;
  expectedOutput?: string | undefined;
};

export type CreateDatasetItemRequest = {
  datasetId: string;
  requestBody?: CreateDatasetItemRequestBody | undefined;
};

/**
 * The role of the prompt message
 */
export const CreateDatasetItemDatasetsRole = {
  System: "system",
  Assistant: "assistant",
  User: "user",
  Exception: "exception",
  Tool: "tool",
  Prompt: "prompt",
  Correction: "correction",
  ExpectedOutput: "expected_output",
} as const;
/**
 * The role of the prompt message
 */
export type CreateDatasetItemDatasetsRole = ClosedEnum<
  typeof CreateDatasetItemDatasetsRole
>;

export const CreateDatasetItem2DatasetsResponse200Type = {
  ImageUrl: "image_url",
} as const;
export type CreateDatasetItem2DatasetsResponse200Type = ClosedEnum<
  typeof CreateDatasetItem2DatasetsResponse200Type
>;

export type CreateDatasetItem2DatasetsImageUrl = {
  /**
   * The orq.ai id of the image
   */
  id?: string | undefined;
  /**
   * Either a URL of the image or the base64 encoded data URI.
   */
  url: string;
  /**
   * Specifies the detail level of the image. Currently only supported with OpenAI models
   */
  detail?: string | undefined;
};

/**
 * The image part of the prompt message. Only supported with vision models.
 */
export type CreateDatasetItem2Datasets2 = {
  type: CreateDatasetItem2DatasetsResponse200Type;
  imageUrl: CreateDatasetItem2DatasetsImageUrl;
};

export const CreateDatasetItem2DatasetsResponseType = {
  Text: "text",
} as const;
export type CreateDatasetItem2DatasetsResponseType = ClosedEnum<
  typeof CreateDatasetItem2DatasetsResponseType
>;

/**
 * Text content part of a prompt message
 */
export type CreateDatasetItem2Datasets1 = {
  type: CreateDatasetItem2DatasetsResponseType;
  text: string;
};

export type CreateDatasetItemContentDatasets2 =
  | CreateDatasetItem2Datasets1
  | CreateDatasetItem2Datasets2;

/**
 * The contents of the user message. Either the text content of the message or an array of content parts with a defined type, each can be of type `text` or `image_url` when passing in images. You can pass multiple images by adding multiple `image_url` content parts.
 */
export type CreateDatasetItemDatasetsContent =
  | string
  | Array<CreateDatasetItem2Datasets1 | CreateDatasetItem2Datasets2>;

export const CreateDatasetItemDatasetsType = {
  Function: "function",
} as const;
export type CreateDatasetItemDatasetsType = ClosedEnum<
  typeof CreateDatasetItemDatasetsType
>;

export type CreateDatasetItemDatasetsFunction = {
  name: string;
  /**
   * JSON string arguments for the functions
   */
  arguments: string;
};

export type CreateDatasetItemDatasetsToolCalls = {
  id?: string | undefined;
  index?: number | undefined;
  type: CreateDatasetItemDatasetsType;
  function: CreateDatasetItemDatasetsFunction;
};

export type CreateDatasetItemDatasetsMessages = {
  /**
   * The role of the prompt message
   */
  role: CreateDatasetItemDatasetsRole;
  /**
   * The contents of the user message. Either the text content of the message or an array of content parts with a defined type, each can be of type `text` or `image_url` when passing in images. You can pass multiple images by adding multiple `image_url` content parts.
   */
  content:
    | string
    | Array<CreateDatasetItem2Datasets1 | CreateDatasetItem2Datasets2>;
  toolCalls?: Array<CreateDatasetItemDatasetsToolCalls> | undefined;
};

/**
 * Datapoint created successfully. Returns the newly created datapoint object.
 */
export type CreateDatasetItemResponseBody = {
  /**
   * The unique identifier of the dataset item
   */
  id: string;
  /**
   * The unique identifier of the workspace it belongs to
   */
  workspaceId: string;
  /**
   * The inputs of the dataset. Key value pairs where the key is the input name and the value is the input value. Nested objects are not supported.
   */
  inputs?: { [k: string]: any } | undefined;
  /**
   * The prompt template messages
   */
  messages?: Array<CreateDatasetItemDatasetsMessages> | undefined;
  expectedOutput?: string | undefined;
  /**
   * The unique identifier of the dataset
   */
  datasetId: string;
  /**
   * The unique identifier of the user who created the dataset
   */
  createdById?: string | undefined;
  /**
   * The unique identifier of the user who last updated the dataset
   */
  updatedById?: string | undefined;
  /**
   * The date and time the resource was created
   */
  created?: Date | undefined;
  /**
   * The date and time the resource was last updated
   */
  updated?: Date | undefined;
};

/** @internal */
export const CreateDatasetItemRole$inboundSchema: z.ZodNativeEnum<
  typeof CreateDatasetItemRole
> = z.nativeEnum(CreateDatasetItemRole);

/** @internal */
export const CreateDatasetItemRole$outboundSchema: z.ZodNativeEnum<
  typeof CreateDatasetItemRole
> = CreateDatasetItemRole$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateDatasetItemRole$ {
  /** @deprecated use `CreateDatasetItemRole$inboundSchema` instead. */
  export const inboundSchema = CreateDatasetItemRole$inboundSchema;
  /** @deprecated use `CreateDatasetItemRole$outboundSchema` instead. */
  export const outboundSchema = CreateDatasetItemRole$outboundSchema;
}

/** @internal */
export const CreateDatasetItem2DatasetsType$inboundSchema: z.ZodNativeEnum<
  typeof CreateDatasetItem2DatasetsType
> = z.nativeEnum(CreateDatasetItem2DatasetsType);

/** @internal */
export const CreateDatasetItem2DatasetsType$outboundSchema: z.ZodNativeEnum<
  typeof CreateDatasetItem2DatasetsType
> = CreateDatasetItem2DatasetsType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateDatasetItem2DatasetsType$ {
  /** @deprecated use `CreateDatasetItem2DatasetsType$inboundSchema` instead. */
  export const inboundSchema = CreateDatasetItem2DatasetsType$inboundSchema;
  /** @deprecated use `CreateDatasetItem2DatasetsType$outboundSchema` instead. */
  export const outboundSchema = CreateDatasetItem2DatasetsType$outboundSchema;
}

/** @internal */
export const CreateDatasetItem2ImageUrl$inboundSchema: z.ZodType<
  CreateDatasetItem2ImageUrl,
  z.ZodTypeDef,
  unknown
> = z.object({
  url: z.string(),
  detail: z.string().optional(),
});

/** @internal */
export type CreateDatasetItem2ImageUrl$Outbound = {
  url: string;
  detail?: string | undefined;
};

/** @internal */
export const CreateDatasetItem2ImageUrl$outboundSchema: z.ZodType<
  CreateDatasetItem2ImageUrl$Outbound,
  z.ZodTypeDef,
  CreateDatasetItem2ImageUrl
> = z.object({
  url: z.string(),
  detail: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateDatasetItem2ImageUrl$ {
  /** @deprecated use `CreateDatasetItem2ImageUrl$inboundSchema` instead. */
  export const inboundSchema = CreateDatasetItem2ImageUrl$inboundSchema;
  /** @deprecated use `CreateDatasetItem2ImageUrl$outboundSchema` instead. */
  export const outboundSchema = CreateDatasetItem2ImageUrl$outboundSchema;
  /** @deprecated use `CreateDatasetItem2ImageUrl$Outbound` instead. */
  export type Outbound = CreateDatasetItem2ImageUrl$Outbound;
}

export function createDatasetItem2ImageUrlToJSON(
  createDatasetItem2ImageUrl: CreateDatasetItem2ImageUrl,
): string {
  return JSON.stringify(
    CreateDatasetItem2ImageUrl$outboundSchema.parse(createDatasetItem2ImageUrl),
  );
}

export function createDatasetItem2ImageUrlFromJSON(
  jsonString: string,
): SafeParseResult<CreateDatasetItem2ImageUrl, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateDatasetItem2ImageUrl$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateDatasetItem2ImageUrl' from JSON`,
  );
}

/** @internal */
export const CreateDatasetItem22$inboundSchema: z.ZodType<
  CreateDatasetItem22,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: CreateDatasetItem2DatasetsType$inboundSchema,
  image_url: z.lazy(() => CreateDatasetItem2ImageUrl$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "image_url": "imageUrl",
  });
});

/** @internal */
export type CreateDatasetItem22$Outbound = {
  type: string;
  image_url: CreateDatasetItem2ImageUrl$Outbound;
};

/** @internal */
export const CreateDatasetItem22$outboundSchema: z.ZodType<
  CreateDatasetItem22$Outbound,
  z.ZodTypeDef,
  CreateDatasetItem22
> = z.object({
  type: CreateDatasetItem2DatasetsType$outboundSchema,
  imageUrl: z.lazy(() => CreateDatasetItem2ImageUrl$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    imageUrl: "image_url",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateDatasetItem22$ {
  /** @deprecated use `CreateDatasetItem22$inboundSchema` instead. */
  export const inboundSchema = CreateDatasetItem22$inboundSchema;
  /** @deprecated use `CreateDatasetItem22$outboundSchema` instead. */
  export const outboundSchema = CreateDatasetItem22$outboundSchema;
  /** @deprecated use `CreateDatasetItem22$Outbound` instead. */
  export type Outbound = CreateDatasetItem22$Outbound;
}

export function createDatasetItem22ToJSON(
  createDatasetItem22: CreateDatasetItem22,
): string {
  return JSON.stringify(
    CreateDatasetItem22$outboundSchema.parse(createDatasetItem22),
  );
}

export function createDatasetItem22FromJSON(
  jsonString: string,
): SafeParseResult<CreateDatasetItem22, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateDatasetItem22$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateDatasetItem22' from JSON`,
  );
}

/** @internal */
export const CreateDatasetItem2Type$inboundSchema: z.ZodNativeEnum<
  typeof CreateDatasetItem2Type
> = z.nativeEnum(CreateDatasetItem2Type);

/** @internal */
export const CreateDatasetItem2Type$outboundSchema: z.ZodNativeEnum<
  typeof CreateDatasetItem2Type
> = CreateDatasetItem2Type$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateDatasetItem2Type$ {
  /** @deprecated use `CreateDatasetItem2Type$inboundSchema` instead. */
  export const inboundSchema = CreateDatasetItem2Type$inboundSchema;
  /** @deprecated use `CreateDatasetItem2Type$outboundSchema` instead. */
  export const outboundSchema = CreateDatasetItem2Type$outboundSchema;
}

/** @internal */
export const CreateDatasetItem21$inboundSchema: z.ZodType<
  CreateDatasetItem21,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: CreateDatasetItem2Type$inboundSchema,
  text: z.string(),
});

/** @internal */
export type CreateDatasetItem21$Outbound = {
  type: string;
  text: string;
};

/** @internal */
export const CreateDatasetItem21$outboundSchema: z.ZodType<
  CreateDatasetItem21$Outbound,
  z.ZodTypeDef,
  CreateDatasetItem21
> = z.object({
  type: CreateDatasetItem2Type$outboundSchema,
  text: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateDatasetItem21$ {
  /** @deprecated use `CreateDatasetItem21$inboundSchema` instead. */
  export const inboundSchema = CreateDatasetItem21$inboundSchema;
  /** @deprecated use `CreateDatasetItem21$outboundSchema` instead. */
  export const outboundSchema = CreateDatasetItem21$outboundSchema;
  /** @deprecated use `CreateDatasetItem21$Outbound` instead. */
  export type Outbound = CreateDatasetItem21$Outbound;
}

export function createDatasetItem21ToJSON(
  createDatasetItem21: CreateDatasetItem21,
): string {
  return JSON.stringify(
    CreateDatasetItem21$outboundSchema.parse(createDatasetItem21),
  );
}

export function createDatasetItem21FromJSON(
  jsonString: string,
): SafeParseResult<CreateDatasetItem21, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateDatasetItem21$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateDatasetItem21' from JSON`,
  );
}

/** @internal */
export const CreateDatasetItemContent2$inboundSchema: z.ZodType<
  CreateDatasetItemContent2,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => CreateDatasetItem21$inboundSchema),
  z.lazy(() => CreateDatasetItem22$inboundSchema),
]);

/** @internal */
export type CreateDatasetItemContent2$Outbound =
  | CreateDatasetItem21$Outbound
  | CreateDatasetItem22$Outbound;

/** @internal */
export const CreateDatasetItemContent2$outboundSchema: z.ZodType<
  CreateDatasetItemContent2$Outbound,
  z.ZodTypeDef,
  CreateDatasetItemContent2
> = z.union([
  z.lazy(() => CreateDatasetItem21$outboundSchema),
  z.lazy(() => CreateDatasetItem22$outboundSchema),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateDatasetItemContent2$ {
  /** @deprecated use `CreateDatasetItemContent2$inboundSchema` instead. */
  export const inboundSchema = CreateDatasetItemContent2$inboundSchema;
  /** @deprecated use `CreateDatasetItemContent2$outboundSchema` instead. */
  export const outboundSchema = CreateDatasetItemContent2$outboundSchema;
  /** @deprecated use `CreateDatasetItemContent2$Outbound` instead. */
  export type Outbound = CreateDatasetItemContent2$Outbound;
}

export function createDatasetItemContent2ToJSON(
  createDatasetItemContent2: CreateDatasetItemContent2,
): string {
  return JSON.stringify(
    CreateDatasetItemContent2$outboundSchema.parse(createDatasetItemContent2),
  );
}

export function createDatasetItemContent2FromJSON(
  jsonString: string,
): SafeParseResult<CreateDatasetItemContent2, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateDatasetItemContent2$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateDatasetItemContent2' from JSON`,
  );
}

/** @internal */
export const CreateDatasetItemContent$inboundSchema: z.ZodType<
  CreateDatasetItemContent,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.string(),
  z.array(z.union([
    z.lazy(() => CreateDatasetItem21$inboundSchema),
    z.lazy(() => CreateDatasetItem22$inboundSchema),
  ])),
]);

/** @internal */
export type CreateDatasetItemContent$Outbound =
  | string
  | Array<CreateDatasetItem21$Outbound | CreateDatasetItem22$Outbound>;

/** @internal */
export const CreateDatasetItemContent$outboundSchema: z.ZodType<
  CreateDatasetItemContent$Outbound,
  z.ZodTypeDef,
  CreateDatasetItemContent
> = z.union([
  z.string(),
  z.array(z.union([
    z.lazy(() => CreateDatasetItem21$outboundSchema),
    z.lazy(() => CreateDatasetItem22$outboundSchema),
  ])),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateDatasetItemContent$ {
  /** @deprecated use `CreateDatasetItemContent$inboundSchema` instead. */
  export const inboundSchema = CreateDatasetItemContent$inboundSchema;
  /** @deprecated use `CreateDatasetItemContent$outboundSchema` instead. */
  export const outboundSchema = CreateDatasetItemContent$outboundSchema;
  /** @deprecated use `CreateDatasetItemContent$Outbound` instead. */
  export type Outbound = CreateDatasetItemContent$Outbound;
}

export function createDatasetItemContentToJSON(
  createDatasetItemContent: CreateDatasetItemContent,
): string {
  return JSON.stringify(
    CreateDatasetItemContent$outboundSchema.parse(createDatasetItemContent),
  );
}

export function createDatasetItemContentFromJSON(
  jsonString: string,
): SafeParseResult<CreateDatasetItemContent, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateDatasetItemContent$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateDatasetItemContent' from JSON`,
  );
}

/** @internal */
export const CreateDatasetItemType$inboundSchema: z.ZodNativeEnum<
  typeof CreateDatasetItemType
> = z.nativeEnum(CreateDatasetItemType);

/** @internal */
export const CreateDatasetItemType$outboundSchema: z.ZodNativeEnum<
  typeof CreateDatasetItemType
> = CreateDatasetItemType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateDatasetItemType$ {
  /** @deprecated use `CreateDatasetItemType$inboundSchema` instead. */
  export const inboundSchema = CreateDatasetItemType$inboundSchema;
  /** @deprecated use `CreateDatasetItemType$outboundSchema` instead. */
  export const outboundSchema = CreateDatasetItemType$outboundSchema;
}

/** @internal */
export const CreateDatasetItemFunction$inboundSchema: z.ZodType<
  CreateDatasetItemFunction,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.string(),
  arguments: z.string(),
});

/** @internal */
export type CreateDatasetItemFunction$Outbound = {
  name: string;
  arguments: string;
};

/** @internal */
export const CreateDatasetItemFunction$outboundSchema: z.ZodType<
  CreateDatasetItemFunction$Outbound,
  z.ZodTypeDef,
  CreateDatasetItemFunction
> = z.object({
  name: z.string(),
  arguments: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateDatasetItemFunction$ {
  /** @deprecated use `CreateDatasetItemFunction$inboundSchema` instead. */
  export const inboundSchema = CreateDatasetItemFunction$inboundSchema;
  /** @deprecated use `CreateDatasetItemFunction$outboundSchema` instead. */
  export const outboundSchema = CreateDatasetItemFunction$outboundSchema;
  /** @deprecated use `CreateDatasetItemFunction$Outbound` instead. */
  export type Outbound = CreateDatasetItemFunction$Outbound;
}

export function createDatasetItemFunctionToJSON(
  createDatasetItemFunction: CreateDatasetItemFunction,
): string {
  return JSON.stringify(
    CreateDatasetItemFunction$outboundSchema.parse(createDatasetItemFunction),
  );
}

export function createDatasetItemFunctionFromJSON(
  jsonString: string,
): SafeParseResult<CreateDatasetItemFunction, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateDatasetItemFunction$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateDatasetItemFunction' from JSON`,
  );
}

/** @internal */
export const CreateDatasetItemToolCalls$inboundSchema: z.ZodType<
  CreateDatasetItemToolCalls,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string().optional(),
  index: z.number().optional(),
  type: CreateDatasetItemType$inboundSchema,
  function: z.lazy(() => CreateDatasetItemFunction$inboundSchema),
});

/** @internal */
export type CreateDatasetItemToolCalls$Outbound = {
  id?: string | undefined;
  index?: number | undefined;
  type: string;
  function: CreateDatasetItemFunction$Outbound;
};

/** @internal */
export const CreateDatasetItemToolCalls$outboundSchema: z.ZodType<
  CreateDatasetItemToolCalls$Outbound,
  z.ZodTypeDef,
  CreateDatasetItemToolCalls
> = z.object({
  id: z.string().optional(),
  index: z.number().optional(),
  type: CreateDatasetItemType$outboundSchema,
  function: z.lazy(() => CreateDatasetItemFunction$outboundSchema),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateDatasetItemToolCalls$ {
  /** @deprecated use `CreateDatasetItemToolCalls$inboundSchema` instead. */
  export const inboundSchema = CreateDatasetItemToolCalls$inboundSchema;
  /** @deprecated use `CreateDatasetItemToolCalls$outboundSchema` instead. */
  export const outboundSchema = CreateDatasetItemToolCalls$outboundSchema;
  /** @deprecated use `CreateDatasetItemToolCalls$Outbound` instead. */
  export type Outbound = CreateDatasetItemToolCalls$Outbound;
}

export function createDatasetItemToolCallsToJSON(
  createDatasetItemToolCalls: CreateDatasetItemToolCalls,
): string {
  return JSON.stringify(
    CreateDatasetItemToolCalls$outboundSchema.parse(createDatasetItemToolCalls),
  );
}

export function createDatasetItemToolCallsFromJSON(
  jsonString: string,
): SafeParseResult<CreateDatasetItemToolCalls, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateDatasetItemToolCalls$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateDatasetItemToolCalls' from JSON`,
  );
}

/** @internal */
export const CreateDatasetItemMessages$inboundSchema: z.ZodType<
  CreateDatasetItemMessages,
  z.ZodTypeDef,
  unknown
> = z.object({
  role: CreateDatasetItemRole$inboundSchema,
  content: z.union([
    z.string(),
    z.array(z.union([
      z.lazy(() => CreateDatasetItem21$inboundSchema),
      z.lazy(() => CreateDatasetItem22$inboundSchema),
    ])),
  ]),
  tool_calls: z.array(z.lazy(() => CreateDatasetItemToolCalls$inboundSchema))
    .optional(),
}).transform((v) => {
  return remap$(v, {
    "tool_calls": "toolCalls",
  });
});

/** @internal */
export type CreateDatasetItemMessages$Outbound = {
  role: string;
  content:
    | string
    | Array<CreateDatasetItem21$Outbound | CreateDatasetItem22$Outbound>;
  tool_calls?: Array<CreateDatasetItemToolCalls$Outbound> | undefined;
};

/** @internal */
export const CreateDatasetItemMessages$outboundSchema: z.ZodType<
  CreateDatasetItemMessages$Outbound,
  z.ZodTypeDef,
  CreateDatasetItemMessages
> = z.object({
  role: CreateDatasetItemRole$outboundSchema,
  content: z.union([
    z.string(),
    z.array(z.union([
      z.lazy(() => CreateDatasetItem21$outboundSchema),
      z.lazy(() => CreateDatasetItem22$outboundSchema),
    ])),
  ]),
  toolCalls: z.array(z.lazy(() => CreateDatasetItemToolCalls$outboundSchema))
    .optional(),
}).transform((v) => {
  return remap$(v, {
    toolCalls: "tool_calls",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateDatasetItemMessages$ {
  /** @deprecated use `CreateDatasetItemMessages$inboundSchema` instead. */
  export const inboundSchema = CreateDatasetItemMessages$inboundSchema;
  /** @deprecated use `CreateDatasetItemMessages$outboundSchema` instead. */
  export const outboundSchema = CreateDatasetItemMessages$outboundSchema;
  /** @deprecated use `CreateDatasetItemMessages$Outbound` instead. */
  export type Outbound = CreateDatasetItemMessages$Outbound;
}

export function createDatasetItemMessagesToJSON(
  createDatasetItemMessages: CreateDatasetItemMessages,
): string {
  return JSON.stringify(
    CreateDatasetItemMessages$outboundSchema.parse(createDatasetItemMessages),
  );
}

export function createDatasetItemMessagesFromJSON(
  jsonString: string,
): SafeParseResult<CreateDatasetItemMessages, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateDatasetItemMessages$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateDatasetItemMessages' from JSON`,
  );
}

/** @internal */
export const CreateDatasetItemRequestBody$inboundSchema: z.ZodType<
  CreateDatasetItemRequestBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  inputs: z.record(z.any()).optional(),
  messages: z.array(z.lazy(() => CreateDatasetItemMessages$inboundSchema))
    .optional(),
  expected_output: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "expected_output": "expectedOutput",
  });
});

/** @internal */
export type CreateDatasetItemRequestBody$Outbound = {
  inputs?: { [k: string]: any } | undefined;
  messages?: Array<CreateDatasetItemMessages$Outbound> | undefined;
  expected_output?: string | undefined;
};

/** @internal */
export const CreateDatasetItemRequestBody$outboundSchema: z.ZodType<
  CreateDatasetItemRequestBody$Outbound,
  z.ZodTypeDef,
  CreateDatasetItemRequestBody
> = z.object({
  inputs: z.record(z.any()).optional(),
  messages: z.array(z.lazy(() => CreateDatasetItemMessages$outboundSchema))
    .optional(),
  expectedOutput: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    expectedOutput: "expected_output",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateDatasetItemRequestBody$ {
  /** @deprecated use `CreateDatasetItemRequestBody$inboundSchema` instead. */
  export const inboundSchema = CreateDatasetItemRequestBody$inboundSchema;
  /** @deprecated use `CreateDatasetItemRequestBody$outboundSchema` instead. */
  export const outboundSchema = CreateDatasetItemRequestBody$outboundSchema;
  /** @deprecated use `CreateDatasetItemRequestBody$Outbound` instead. */
  export type Outbound = CreateDatasetItemRequestBody$Outbound;
}

export function createDatasetItemRequestBodyToJSON(
  createDatasetItemRequestBody: CreateDatasetItemRequestBody,
): string {
  return JSON.stringify(
    CreateDatasetItemRequestBody$outboundSchema.parse(
      createDatasetItemRequestBody,
    ),
  );
}

export function createDatasetItemRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<CreateDatasetItemRequestBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateDatasetItemRequestBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateDatasetItemRequestBody' from JSON`,
  );
}

/** @internal */
export const CreateDatasetItemRequest$inboundSchema: z.ZodType<
  CreateDatasetItemRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  dataset_id: z.string(),
  RequestBody: z.lazy(() => CreateDatasetItemRequestBody$inboundSchema)
    .optional(),
}).transform((v) => {
  return remap$(v, {
    "dataset_id": "datasetId",
    "RequestBody": "requestBody",
  });
});

/** @internal */
export type CreateDatasetItemRequest$Outbound = {
  dataset_id: string;
  RequestBody?: CreateDatasetItemRequestBody$Outbound | undefined;
};

/** @internal */
export const CreateDatasetItemRequest$outboundSchema: z.ZodType<
  CreateDatasetItemRequest$Outbound,
  z.ZodTypeDef,
  CreateDatasetItemRequest
> = z.object({
  datasetId: z.string(),
  requestBody: z.lazy(() => CreateDatasetItemRequestBody$outboundSchema)
    .optional(),
}).transform((v) => {
  return remap$(v, {
    datasetId: "dataset_id",
    requestBody: "RequestBody",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateDatasetItemRequest$ {
  /** @deprecated use `CreateDatasetItemRequest$inboundSchema` instead. */
  export const inboundSchema = CreateDatasetItemRequest$inboundSchema;
  /** @deprecated use `CreateDatasetItemRequest$outboundSchema` instead. */
  export const outboundSchema = CreateDatasetItemRequest$outboundSchema;
  /** @deprecated use `CreateDatasetItemRequest$Outbound` instead. */
  export type Outbound = CreateDatasetItemRequest$Outbound;
}

export function createDatasetItemRequestToJSON(
  createDatasetItemRequest: CreateDatasetItemRequest,
): string {
  return JSON.stringify(
    CreateDatasetItemRequest$outboundSchema.parse(createDatasetItemRequest),
  );
}

export function createDatasetItemRequestFromJSON(
  jsonString: string,
): SafeParseResult<CreateDatasetItemRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateDatasetItemRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateDatasetItemRequest' from JSON`,
  );
}

/** @internal */
export const CreateDatasetItemDatasetsRole$inboundSchema: z.ZodNativeEnum<
  typeof CreateDatasetItemDatasetsRole
> = z.nativeEnum(CreateDatasetItemDatasetsRole);

/** @internal */
export const CreateDatasetItemDatasetsRole$outboundSchema: z.ZodNativeEnum<
  typeof CreateDatasetItemDatasetsRole
> = CreateDatasetItemDatasetsRole$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateDatasetItemDatasetsRole$ {
  /** @deprecated use `CreateDatasetItemDatasetsRole$inboundSchema` instead. */
  export const inboundSchema = CreateDatasetItemDatasetsRole$inboundSchema;
  /** @deprecated use `CreateDatasetItemDatasetsRole$outboundSchema` instead. */
  export const outboundSchema = CreateDatasetItemDatasetsRole$outboundSchema;
}

/** @internal */
export const CreateDatasetItem2DatasetsResponse200Type$inboundSchema:
  z.ZodNativeEnum<typeof CreateDatasetItem2DatasetsResponse200Type> = z
    .nativeEnum(CreateDatasetItem2DatasetsResponse200Type);

/** @internal */
export const CreateDatasetItem2DatasetsResponse200Type$outboundSchema:
  z.ZodNativeEnum<typeof CreateDatasetItem2DatasetsResponse200Type> =
    CreateDatasetItem2DatasetsResponse200Type$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateDatasetItem2DatasetsResponse200Type$ {
  /** @deprecated use `CreateDatasetItem2DatasetsResponse200Type$inboundSchema` instead. */
  export const inboundSchema =
    CreateDatasetItem2DatasetsResponse200Type$inboundSchema;
  /** @deprecated use `CreateDatasetItem2DatasetsResponse200Type$outboundSchema` instead. */
  export const outboundSchema =
    CreateDatasetItem2DatasetsResponse200Type$outboundSchema;
}

/** @internal */
export const CreateDatasetItem2DatasetsImageUrl$inboundSchema: z.ZodType<
  CreateDatasetItem2DatasetsImageUrl,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string().optional(),
  url: z.string(),
  detail: z.string().optional(),
});

/** @internal */
export type CreateDatasetItem2DatasetsImageUrl$Outbound = {
  id?: string | undefined;
  url: string;
  detail?: string | undefined;
};

/** @internal */
export const CreateDatasetItem2DatasetsImageUrl$outboundSchema: z.ZodType<
  CreateDatasetItem2DatasetsImageUrl$Outbound,
  z.ZodTypeDef,
  CreateDatasetItem2DatasetsImageUrl
> = z.object({
  id: z.string().optional(),
  url: z.string(),
  detail: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateDatasetItem2DatasetsImageUrl$ {
  /** @deprecated use `CreateDatasetItem2DatasetsImageUrl$inboundSchema` instead. */
  export const inboundSchema = CreateDatasetItem2DatasetsImageUrl$inboundSchema;
  /** @deprecated use `CreateDatasetItem2DatasetsImageUrl$outboundSchema` instead. */
  export const outboundSchema =
    CreateDatasetItem2DatasetsImageUrl$outboundSchema;
  /** @deprecated use `CreateDatasetItem2DatasetsImageUrl$Outbound` instead. */
  export type Outbound = CreateDatasetItem2DatasetsImageUrl$Outbound;
}

export function createDatasetItem2DatasetsImageUrlToJSON(
  createDatasetItem2DatasetsImageUrl: CreateDatasetItem2DatasetsImageUrl,
): string {
  return JSON.stringify(
    CreateDatasetItem2DatasetsImageUrl$outboundSchema.parse(
      createDatasetItem2DatasetsImageUrl,
    ),
  );
}

export function createDatasetItem2DatasetsImageUrlFromJSON(
  jsonString: string,
): SafeParseResult<CreateDatasetItem2DatasetsImageUrl, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      CreateDatasetItem2DatasetsImageUrl$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateDatasetItem2DatasetsImageUrl' from JSON`,
  );
}

/** @internal */
export const CreateDatasetItem2Datasets2$inboundSchema: z.ZodType<
  CreateDatasetItem2Datasets2,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: CreateDatasetItem2DatasetsResponse200Type$inboundSchema,
  image_url: z.lazy(() => CreateDatasetItem2DatasetsImageUrl$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "image_url": "imageUrl",
  });
});

/** @internal */
export type CreateDatasetItem2Datasets2$Outbound = {
  type: string;
  image_url: CreateDatasetItem2DatasetsImageUrl$Outbound;
};

/** @internal */
export const CreateDatasetItem2Datasets2$outboundSchema: z.ZodType<
  CreateDatasetItem2Datasets2$Outbound,
  z.ZodTypeDef,
  CreateDatasetItem2Datasets2
> = z.object({
  type: CreateDatasetItem2DatasetsResponse200Type$outboundSchema,
  imageUrl: z.lazy(() => CreateDatasetItem2DatasetsImageUrl$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    imageUrl: "image_url",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateDatasetItem2Datasets2$ {
  /** @deprecated use `CreateDatasetItem2Datasets2$inboundSchema` instead. */
  export const inboundSchema = CreateDatasetItem2Datasets2$inboundSchema;
  /** @deprecated use `CreateDatasetItem2Datasets2$outboundSchema` instead. */
  export const outboundSchema = CreateDatasetItem2Datasets2$outboundSchema;
  /** @deprecated use `CreateDatasetItem2Datasets2$Outbound` instead. */
  export type Outbound = CreateDatasetItem2Datasets2$Outbound;
}

export function createDatasetItem2Datasets2ToJSON(
  createDatasetItem2Datasets2: CreateDatasetItem2Datasets2,
): string {
  return JSON.stringify(
    CreateDatasetItem2Datasets2$outboundSchema.parse(
      createDatasetItem2Datasets2,
    ),
  );
}

export function createDatasetItem2Datasets2FromJSON(
  jsonString: string,
): SafeParseResult<CreateDatasetItem2Datasets2, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateDatasetItem2Datasets2$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateDatasetItem2Datasets2' from JSON`,
  );
}

/** @internal */
export const CreateDatasetItem2DatasetsResponseType$inboundSchema:
  z.ZodNativeEnum<typeof CreateDatasetItem2DatasetsResponseType> = z.nativeEnum(
    CreateDatasetItem2DatasetsResponseType,
  );

/** @internal */
export const CreateDatasetItem2DatasetsResponseType$outboundSchema:
  z.ZodNativeEnum<typeof CreateDatasetItem2DatasetsResponseType> =
    CreateDatasetItem2DatasetsResponseType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateDatasetItem2DatasetsResponseType$ {
  /** @deprecated use `CreateDatasetItem2DatasetsResponseType$inboundSchema` instead. */
  export const inboundSchema =
    CreateDatasetItem2DatasetsResponseType$inboundSchema;
  /** @deprecated use `CreateDatasetItem2DatasetsResponseType$outboundSchema` instead. */
  export const outboundSchema =
    CreateDatasetItem2DatasetsResponseType$outboundSchema;
}

/** @internal */
export const CreateDatasetItem2Datasets1$inboundSchema: z.ZodType<
  CreateDatasetItem2Datasets1,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: CreateDatasetItem2DatasetsResponseType$inboundSchema,
  text: z.string(),
});

/** @internal */
export type CreateDatasetItem2Datasets1$Outbound = {
  type: string;
  text: string;
};

/** @internal */
export const CreateDatasetItem2Datasets1$outboundSchema: z.ZodType<
  CreateDatasetItem2Datasets1$Outbound,
  z.ZodTypeDef,
  CreateDatasetItem2Datasets1
> = z.object({
  type: CreateDatasetItem2DatasetsResponseType$outboundSchema,
  text: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateDatasetItem2Datasets1$ {
  /** @deprecated use `CreateDatasetItem2Datasets1$inboundSchema` instead. */
  export const inboundSchema = CreateDatasetItem2Datasets1$inboundSchema;
  /** @deprecated use `CreateDatasetItem2Datasets1$outboundSchema` instead. */
  export const outboundSchema = CreateDatasetItem2Datasets1$outboundSchema;
  /** @deprecated use `CreateDatasetItem2Datasets1$Outbound` instead. */
  export type Outbound = CreateDatasetItem2Datasets1$Outbound;
}

export function createDatasetItem2Datasets1ToJSON(
  createDatasetItem2Datasets1: CreateDatasetItem2Datasets1,
): string {
  return JSON.stringify(
    CreateDatasetItem2Datasets1$outboundSchema.parse(
      createDatasetItem2Datasets1,
    ),
  );
}

export function createDatasetItem2Datasets1FromJSON(
  jsonString: string,
): SafeParseResult<CreateDatasetItem2Datasets1, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateDatasetItem2Datasets1$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateDatasetItem2Datasets1' from JSON`,
  );
}

/** @internal */
export const CreateDatasetItemContentDatasets2$inboundSchema: z.ZodType<
  CreateDatasetItemContentDatasets2,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => CreateDatasetItem2Datasets1$inboundSchema),
  z.lazy(() => CreateDatasetItem2Datasets2$inboundSchema),
]);

/** @internal */
export type CreateDatasetItemContentDatasets2$Outbound =
  | CreateDatasetItem2Datasets1$Outbound
  | CreateDatasetItem2Datasets2$Outbound;

/** @internal */
export const CreateDatasetItemContentDatasets2$outboundSchema: z.ZodType<
  CreateDatasetItemContentDatasets2$Outbound,
  z.ZodTypeDef,
  CreateDatasetItemContentDatasets2
> = z.union([
  z.lazy(() => CreateDatasetItem2Datasets1$outboundSchema),
  z.lazy(() => CreateDatasetItem2Datasets2$outboundSchema),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateDatasetItemContentDatasets2$ {
  /** @deprecated use `CreateDatasetItemContentDatasets2$inboundSchema` instead. */
  export const inboundSchema = CreateDatasetItemContentDatasets2$inboundSchema;
  /** @deprecated use `CreateDatasetItemContentDatasets2$outboundSchema` instead. */
  export const outboundSchema =
    CreateDatasetItemContentDatasets2$outboundSchema;
  /** @deprecated use `CreateDatasetItemContentDatasets2$Outbound` instead. */
  export type Outbound = CreateDatasetItemContentDatasets2$Outbound;
}

export function createDatasetItemContentDatasets2ToJSON(
  createDatasetItemContentDatasets2: CreateDatasetItemContentDatasets2,
): string {
  return JSON.stringify(
    CreateDatasetItemContentDatasets2$outboundSchema.parse(
      createDatasetItemContentDatasets2,
    ),
  );
}

export function createDatasetItemContentDatasets2FromJSON(
  jsonString: string,
): SafeParseResult<CreateDatasetItemContentDatasets2, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateDatasetItemContentDatasets2$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateDatasetItemContentDatasets2' from JSON`,
  );
}

/** @internal */
export const CreateDatasetItemDatasetsContent$inboundSchema: z.ZodType<
  CreateDatasetItemDatasetsContent,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.string(),
  z.array(z.union([
    z.lazy(() => CreateDatasetItem2Datasets1$inboundSchema),
    z.lazy(() => CreateDatasetItem2Datasets2$inboundSchema),
  ])),
]);

/** @internal */
export type CreateDatasetItemDatasetsContent$Outbound =
  | string
  | Array<
    CreateDatasetItem2Datasets1$Outbound | CreateDatasetItem2Datasets2$Outbound
  >;

/** @internal */
export const CreateDatasetItemDatasetsContent$outboundSchema: z.ZodType<
  CreateDatasetItemDatasetsContent$Outbound,
  z.ZodTypeDef,
  CreateDatasetItemDatasetsContent
> = z.union([
  z.string(),
  z.array(z.union([
    z.lazy(() => CreateDatasetItem2Datasets1$outboundSchema),
    z.lazy(() => CreateDatasetItem2Datasets2$outboundSchema),
  ])),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateDatasetItemDatasetsContent$ {
  /** @deprecated use `CreateDatasetItemDatasetsContent$inboundSchema` instead. */
  export const inboundSchema = CreateDatasetItemDatasetsContent$inboundSchema;
  /** @deprecated use `CreateDatasetItemDatasetsContent$outboundSchema` instead. */
  export const outboundSchema = CreateDatasetItemDatasetsContent$outboundSchema;
  /** @deprecated use `CreateDatasetItemDatasetsContent$Outbound` instead. */
  export type Outbound = CreateDatasetItemDatasetsContent$Outbound;
}

export function createDatasetItemDatasetsContentToJSON(
  createDatasetItemDatasetsContent: CreateDatasetItemDatasetsContent,
): string {
  return JSON.stringify(
    CreateDatasetItemDatasetsContent$outboundSchema.parse(
      createDatasetItemDatasetsContent,
    ),
  );
}

export function createDatasetItemDatasetsContentFromJSON(
  jsonString: string,
): SafeParseResult<CreateDatasetItemDatasetsContent, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateDatasetItemDatasetsContent$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateDatasetItemDatasetsContent' from JSON`,
  );
}

/** @internal */
export const CreateDatasetItemDatasetsType$inboundSchema: z.ZodNativeEnum<
  typeof CreateDatasetItemDatasetsType
> = z.nativeEnum(CreateDatasetItemDatasetsType);

/** @internal */
export const CreateDatasetItemDatasetsType$outboundSchema: z.ZodNativeEnum<
  typeof CreateDatasetItemDatasetsType
> = CreateDatasetItemDatasetsType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateDatasetItemDatasetsType$ {
  /** @deprecated use `CreateDatasetItemDatasetsType$inboundSchema` instead. */
  export const inboundSchema = CreateDatasetItemDatasetsType$inboundSchema;
  /** @deprecated use `CreateDatasetItemDatasetsType$outboundSchema` instead. */
  export const outboundSchema = CreateDatasetItemDatasetsType$outboundSchema;
}

/** @internal */
export const CreateDatasetItemDatasetsFunction$inboundSchema: z.ZodType<
  CreateDatasetItemDatasetsFunction,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.string(),
  arguments: z.string(),
});

/** @internal */
export type CreateDatasetItemDatasetsFunction$Outbound = {
  name: string;
  arguments: string;
};

/** @internal */
export const CreateDatasetItemDatasetsFunction$outboundSchema: z.ZodType<
  CreateDatasetItemDatasetsFunction$Outbound,
  z.ZodTypeDef,
  CreateDatasetItemDatasetsFunction
> = z.object({
  name: z.string(),
  arguments: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateDatasetItemDatasetsFunction$ {
  /** @deprecated use `CreateDatasetItemDatasetsFunction$inboundSchema` instead. */
  export const inboundSchema = CreateDatasetItemDatasetsFunction$inboundSchema;
  /** @deprecated use `CreateDatasetItemDatasetsFunction$outboundSchema` instead. */
  export const outboundSchema =
    CreateDatasetItemDatasetsFunction$outboundSchema;
  /** @deprecated use `CreateDatasetItemDatasetsFunction$Outbound` instead. */
  export type Outbound = CreateDatasetItemDatasetsFunction$Outbound;
}

export function createDatasetItemDatasetsFunctionToJSON(
  createDatasetItemDatasetsFunction: CreateDatasetItemDatasetsFunction,
): string {
  return JSON.stringify(
    CreateDatasetItemDatasetsFunction$outboundSchema.parse(
      createDatasetItemDatasetsFunction,
    ),
  );
}

export function createDatasetItemDatasetsFunctionFromJSON(
  jsonString: string,
): SafeParseResult<CreateDatasetItemDatasetsFunction, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateDatasetItemDatasetsFunction$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateDatasetItemDatasetsFunction' from JSON`,
  );
}

/** @internal */
export const CreateDatasetItemDatasetsToolCalls$inboundSchema: z.ZodType<
  CreateDatasetItemDatasetsToolCalls,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string().optional(),
  index: z.number().optional(),
  type: CreateDatasetItemDatasetsType$inboundSchema,
  function: z.lazy(() => CreateDatasetItemDatasetsFunction$inboundSchema),
});

/** @internal */
export type CreateDatasetItemDatasetsToolCalls$Outbound = {
  id?: string | undefined;
  index?: number | undefined;
  type: string;
  function: CreateDatasetItemDatasetsFunction$Outbound;
};

/** @internal */
export const CreateDatasetItemDatasetsToolCalls$outboundSchema: z.ZodType<
  CreateDatasetItemDatasetsToolCalls$Outbound,
  z.ZodTypeDef,
  CreateDatasetItemDatasetsToolCalls
> = z.object({
  id: z.string().optional(),
  index: z.number().optional(),
  type: CreateDatasetItemDatasetsType$outboundSchema,
  function: z.lazy(() => CreateDatasetItemDatasetsFunction$outboundSchema),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateDatasetItemDatasetsToolCalls$ {
  /** @deprecated use `CreateDatasetItemDatasetsToolCalls$inboundSchema` instead. */
  export const inboundSchema = CreateDatasetItemDatasetsToolCalls$inboundSchema;
  /** @deprecated use `CreateDatasetItemDatasetsToolCalls$outboundSchema` instead. */
  export const outboundSchema =
    CreateDatasetItemDatasetsToolCalls$outboundSchema;
  /** @deprecated use `CreateDatasetItemDatasetsToolCalls$Outbound` instead. */
  export type Outbound = CreateDatasetItemDatasetsToolCalls$Outbound;
}

export function createDatasetItemDatasetsToolCallsToJSON(
  createDatasetItemDatasetsToolCalls: CreateDatasetItemDatasetsToolCalls,
): string {
  return JSON.stringify(
    CreateDatasetItemDatasetsToolCalls$outboundSchema.parse(
      createDatasetItemDatasetsToolCalls,
    ),
  );
}

export function createDatasetItemDatasetsToolCallsFromJSON(
  jsonString: string,
): SafeParseResult<CreateDatasetItemDatasetsToolCalls, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      CreateDatasetItemDatasetsToolCalls$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateDatasetItemDatasetsToolCalls' from JSON`,
  );
}

/** @internal */
export const CreateDatasetItemDatasetsMessages$inboundSchema: z.ZodType<
  CreateDatasetItemDatasetsMessages,
  z.ZodTypeDef,
  unknown
> = z.object({
  role: CreateDatasetItemDatasetsRole$inboundSchema,
  content: z.union([
    z.string(),
    z.array(z.union([
      z.lazy(() => CreateDatasetItem2Datasets1$inboundSchema),
      z.lazy(() => CreateDatasetItem2Datasets2$inboundSchema),
    ])),
  ]),
  tool_calls: z.array(
    z.lazy(() => CreateDatasetItemDatasetsToolCalls$inboundSchema),
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    "tool_calls": "toolCalls",
  });
});

/** @internal */
export type CreateDatasetItemDatasetsMessages$Outbound = {
  role: string;
  content:
    | string
    | Array<
      | CreateDatasetItem2Datasets1$Outbound
      | CreateDatasetItem2Datasets2$Outbound
    >;
  tool_calls?: Array<CreateDatasetItemDatasetsToolCalls$Outbound> | undefined;
};

/** @internal */
export const CreateDatasetItemDatasetsMessages$outboundSchema: z.ZodType<
  CreateDatasetItemDatasetsMessages$Outbound,
  z.ZodTypeDef,
  CreateDatasetItemDatasetsMessages
> = z.object({
  role: CreateDatasetItemDatasetsRole$outboundSchema,
  content: z.union([
    z.string(),
    z.array(z.union([
      z.lazy(() => CreateDatasetItem2Datasets1$outboundSchema),
      z.lazy(() => CreateDatasetItem2Datasets2$outboundSchema),
    ])),
  ]),
  toolCalls: z.array(
    z.lazy(() => CreateDatasetItemDatasetsToolCalls$outboundSchema),
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    toolCalls: "tool_calls",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateDatasetItemDatasetsMessages$ {
  /** @deprecated use `CreateDatasetItemDatasetsMessages$inboundSchema` instead. */
  export const inboundSchema = CreateDatasetItemDatasetsMessages$inboundSchema;
  /** @deprecated use `CreateDatasetItemDatasetsMessages$outboundSchema` instead. */
  export const outboundSchema =
    CreateDatasetItemDatasetsMessages$outboundSchema;
  /** @deprecated use `CreateDatasetItemDatasetsMessages$Outbound` instead. */
  export type Outbound = CreateDatasetItemDatasetsMessages$Outbound;
}

export function createDatasetItemDatasetsMessagesToJSON(
  createDatasetItemDatasetsMessages: CreateDatasetItemDatasetsMessages,
): string {
  return JSON.stringify(
    CreateDatasetItemDatasetsMessages$outboundSchema.parse(
      createDatasetItemDatasetsMessages,
    ),
  );
}

export function createDatasetItemDatasetsMessagesFromJSON(
  jsonString: string,
): SafeParseResult<CreateDatasetItemDatasetsMessages, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateDatasetItemDatasetsMessages$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateDatasetItemDatasetsMessages' from JSON`,
  );
}

/** @internal */
export const CreateDatasetItemResponseBody$inboundSchema: z.ZodType<
  CreateDatasetItemResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  _id: z.string(),
  workspace_id: z.string(),
  inputs: z.record(z.any()).optional(),
  messages: z.array(
    z.lazy(() => CreateDatasetItemDatasetsMessages$inboundSchema),
  ).optional(),
  expected_output: z.string().optional(),
  dataset_id: z.string(),
  created_by_id: z.string().optional(),
  updated_by_id: z.string().optional(),
  created: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
  updated: z.string().datetime({ offset: true }).default(
    "2025-04-03T19:41:53.128Z",
  ).transform(v => new Date(v)),
}).transform((v) => {
  return remap$(v, {
    "_id": "id",
    "workspace_id": "workspaceId",
    "expected_output": "expectedOutput",
    "dataset_id": "datasetId",
    "created_by_id": "createdById",
    "updated_by_id": "updatedById",
  });
});

/** @internal */
export type CreateDatasetItemResponseBody$Outbound = {
  _id: string;
  workspace_id: string;
  inputs?: { [k: string]: any } | undefined;
  messages?: Array<CreateDatasetItemDatasetsMessages$Outbound> | undefined;
  expected_output?: string | undefined;
  dataset_id: string;
  created_by_id?: string | undefined;
  updated_by_id?: string | undefined;
  created?: string | undefined;
  updated: string;
};

/** @internal */
export const CreateDatasetItemResponseBody$outboundSchema: z.ZodType<
  CreateDatasetItemResponseBody$Outbound,
  z.ZodTypeDef,
  CreateDatasetItemResponseBody
> = z.object({
  id: z.string(),
  workspaceId: z.string(),
  inputs: z.record(z.any()).optional(),
  messages: z.array(
    z.lazy(() => CreateDatasetItemDatasetsMessages$outboundSchema),
  ).optional(),
  expectedOutput: z.string().optional(),
  datasetId: z.string(),
  createdById: z.string().optional(),
  updatedById: z.string().optional(),
  created: z.date().transform(v => v.toISOString()).optional(),
  updated: z.date().default(() => new Date("2025-04-03T19:41:53.128Z"))
    .transform(v => v.toISOString()),
}).transform((v) => {
  return remap$(v, {
    id: "_id",
    workspaceId: "workspace_id",
    expectedOutput: "expected_output",
    datasetId: "dataset_id",
    createdById: "created_by_id",
    updatedById: "updated_by_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateDatasetItemResponseBody$ {
  /** @deprecated use `CreateDatasetItemResponseBody$inboundSchema` instead. */
  export const inboundSchema = CreateDatasetItemResponseBody$inboundSchema;
  /** @deprecated use `CreateDatasetItemResponseBody$outboundSchema` instead. */
  export const outboundSchema = CreateDatasetItemResponseBody$outboundSchema;
  /** @deprecated use `CreateDatasetItemResponseBody$Outbound` instead. */
  export type Outbound = CreateDatasetItemResponseBody$Outbound;
}

export function createDatasetItemResponseBodyToJSON(
  createDatasetItemResponseBody: CreateDatasetItemResponseBody,
): string {
  return JSON.stringify(
    CreateDatasetItemResponseBody$outboundSchema.parse(
      createDatasetItemResponseBody,
    ),
  );
}

export function createDatasetItemResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<CreateDatasetItemResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateDatasetItemResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateDatasetItemResponseBody' from JSON`,
  );
}
