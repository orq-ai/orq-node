/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type DeleteMemoryStoreRequest = {
  /**
   * The unique key identifier of the memory store
   */
  memoryStoreKey: string;
};

/** @internal */
export const DeleteMemoryStoreRequest$inboundSchema: z.ZodType<
  DeleteMemoryStoreRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  memory_store_key: z.string(),
}).transform((v) => {
  return remap$(v, {
    "memory_store_key": "memoryStoreKey",
  });
});

/** @internal */
export type DeleteMemoryStoreRequest$Outbound = {
  memory_store_key: string;
};

/** @internal */
export const DeleteMemoryStoreRequest$outboundSchema: z.ZodType<
  DeleteMemoryStoreRequest$Outbound,
  z.ZodTypeDef,
  DeleteMemoryStoreRequest
> = z.object({
  memoryStoreKey: z.string(),
}).transform((v) => {
  return remap$(v, {
    memoryStoreKey: "memory_store_key",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeleteMemoryStoreRequest$ {
  /** @deprecated use `DeleteMemoryStoreRequest$inboundSchema` instead. */
  export const inboundSchema = DeleteMemoryStoreRequest$inboundSchema;
  /** @deprecated use `DeleteMemoryStoreRequest$outboundSchema` instead. */
  export const outboundSchema = DeleteMemoryStoreRequest$outboundSchema;
  /** @deprecated use `DeleteMemoryStoreRequest$Outbound` instead. */
  export type Outbound = DeleteMemoryStoreRequest$Outbound;
}

export function deleteMemoryStoreRequestToJSON(
  deleteMemoryStoreRequest: DeleteMemoryStoreRequest,
): string {
  return JSON.stringify(
    DeleteMemoryStoreRequest$outboundSchema.parse(deleteMemoryStoreRequest),
  );
}

export function deleteMemoryStoreRequestFromJSON(
  jsonString: string,
): SafeParseResult<DeleteMemoryStoreRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DeleteMemoryStoreRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DeleteMemoryStoreRequest' from JSON`,
  );
}
