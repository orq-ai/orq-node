/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type DeleteChunkRequest = {
  /**
   * The unique identifier of the chunk
   */
  chunkId: string;
  /**
   * The unique identifier of the data source
   */
  datasourceId: string;
  /**
   * The unique identifier of the knowledge base
   */
  knowledgeId: string;
};

/** @internal */
export const DeleteChunkRequest$inboundSchema: z.ZodType<
  DeleteChunkRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  chunk_id: z.string(),
  datasource_id: z.string(),
  knowledge_id: z.string(),
}).transform((v) => {
  return remap$(v, {
    "chunk_id": "chunkId",
    "datasource_id": "datasourceId",
    "knowledge_id": "knowledgeId",
  });
});

/** @internal */
export type DeleteChunkRequest$Outbound = {
  chunk_id: string;
  datasource_id: string;
  knowledge_id: string;
};

/** @internal */
export const DeleteChunkRequest$outboundSchema: z.ZodType<
  DeleteChunkRequest$Outbound,
  z.ZodTypeDef,
  DeleteChunkRequest
> = z.object({
  chunkId: z.string(),
  datasourceId: z.string(),
  knowledgeId: z.string(),
}).transform((v) => {
  return remap$(v, {
    chunkId: "chunk_id",
    datasourceId: "datasource_id",
    knowledgeId: "knowledge_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeleteChunkRequest$ {
  /** @deprecated use `DeleteChunkRequest$inboundSchema` instead. */
  export const inboundSchema = DeleteChunkRequest$inboundSchema;
  /** @deprecated use `DeleteChunkRequest$outboundSchema` instead. */
  export const outboundSchema = DeleteChunkRequest$outboundSchema;
  /** @deprecated use `DeleteChunkRequest$Outbound` instead. */
  export type Outbound = DeleteChunkRequest$Outbound;
}

export function deleteChunkRequestToJSON(
  deleteChunkRequest: DeleteChunkRequest,
): string {
  return JSON.stringify(
    DeleteChunkRequest$outboundSchema.parse(deleteChunkRequest),
  );
}

export function deleteChunkRequestFromJSON(
  jsonString: string,
): SafeParseResult<DeleteChunkRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DeleteChunkRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DeleteChunkRequest' from JSON`,
  );
}
