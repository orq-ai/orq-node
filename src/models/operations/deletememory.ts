/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type DeleteMemoryRequest = {
  /**
   * The unique key identifier of the memory store
   */
  memoryStoreKey: string;
  /**
   * The unique identifier of the memory
   */
  memoryId: string;
};

/** @internal */
export const DeleteMemoryRequest$inboundSchema: z.ZodType<
  DeleteMemoryRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  memory_store_key: z.string(),
  memory_id: z.string(),
}).transform((v) => {
  return remap$(v, {
    "memory_store_key": "memoryStoreKey",
    "memory_id": "memoryId",
  });
});

/** @internal */
export type DeleteMemoryRequest$Outbound = {
  memory_store_key: string;
  memory_id: string;
};

/** @internal */
export const DeleteMemoryRequest$outboundSchema: z.ZodType<
  DeleteMemoryRequest$Outbound,
  z.ZodTypeDef,
  DeleteMemoryRequest
> = z.object({
  memoryStoreKey: z.string(),
  memoryId: z.string(),
}).transform((v) => {
  return remap$(v, {
    memoryStoreKey: "memory_store_key",
    memoryId: "memory_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeleteMemoryRequest$ {
  /** @deprecated use `DeleteMemoryRequest$inboundSchema` instead. */
  export const inboundSchema = DeleteMemoryRequest$inboundSchema;
  /** @deprecated use `DeleteMemoryRequest$outboundSchema` instead. */
  export const outboundSchema = DeleteMemoryRequest$outboundSchema;
  /** @deprecated use `DeleteMemoryRequest$Outbound` instead. */
  export type Outbound = DeleteMemoryRequest$Outbound;
}

export function deleteMemoryRequestToJSON(
  deleteMemoryRequest: DeleteMemoryRequest,
): string {
  return JSON.stringify(
    DeleteMemoryRequest$outboundSchema.parse(deleteMemoryRequest),
  );
}

export function deleteMemoryRequestFromJSON(
  jsonString: string,
): SafeParseResult<DeleteMemoryRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DeleteMemoryRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DeleteMemoryRequest' from JSON`,
  );
}
