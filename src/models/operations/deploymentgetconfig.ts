/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type Inputs = string | number | boolean;

/**
 * The role of the prompt message
 */
export const Role = {
  System: "system",
  Assistant: "assistant",
  User: "user",
  Exception: "exception",
  Tool: "tool",
  Prompt: "prompt",
  Correction: "correction",
  ExpectedOutput: "expected_output",
} as const;
/**
 * The role of the prompt message
 */
export type Role = ClosedEnum<typeof Role>;

export const TwoType = {
  ImageUrl: "image_url",
} as const;
export type TwoType = ClosedEnum<typeof TwoType>;

export type ImageUrl = {
  /**
   * Either a URL of the image or the base64 encoded data URI.
   */
  url: string;
  /**
   * Specifies the detail level of the image. Currently only supported with OpenAI models
   */
  detail?: string | undefined;
};

/**
 * The image part of the prompt message. Only supported with vision models.
 */
export type Two2 = {
  type: TwoType;
  imageUrl: ImageUrl;
};

export const Type = {
  Text: "text",
} as const;
export type Type = ClosedEnum<typeof Type>;

/**
 * Text content part of a prompt message
 */
export type One = {
  type: Type;
  text: string;
};

export type Two = One | Two2;

/**
 * The contents of the user message. Either the text content of the message or an array of content parts with a defined type, each can be of type `text` or `image_url` when passing in images. You can pass multiple images by adding multiple `image_url` content parts.
 */
export type Content = string | Array<One | Two2>;

export const DeploymentGetConfigType = {
  Function: "function",
} as const;
export type DeploymentGetConfigType = ClosedEnum<
  typeof DeploymentGetConfigType
>;

export type FunctionT = {
  name: string;
  /**
   * JSON string arguments for the functions
   */
  arguments: string;
};

export type ToolCalls = {
  id?: string | undefined;
  index?: number | undefined;
  type: DeploymentGetConfigType;
  function: FunctionT;
};

export type PrefixMessages = {
  /**
   * The role of the prompt message
   */
  role: Role;
  /**
   * The contents of the user message. Either the text content of the message or an array of content parts with a defined type, each can be of type `text` or `image_url` when passing in images. You can pass multiple images by adding multiple `image_url` content parts.
   */
  content: string | Array<One | Two2>;
  toolCalls?: Array<ToolCalls> | undefined;
};

/**
 * The role of the prompt message
 */
export const DeploymentGetConfigRole = {
  System: "system",
  Assistant: "assistant",
  User: "user",
  Exception: "exception",
  Tool: "tool",
  Prompt: "prompt",
  Correction: "correction",
  ExpectedOutput: "expected_output",
} as const;
/**
 * The role of the prompt message
 */
export type DeploymentGetConfigRole = ClosedEnum<
  typeof DeploymentGetConfigRole
>;

export const DeploymentGetConfig2DeploymentsType = {
  ImageUrl: "image_url",
} as const;
export type DeploymentGetConfig2DeploymentsType = ClosedEnum<
  typeof DeploymentGetConfig2DeploymentsType
>;

export type TwoImageUrl = {
  /**
   * Either a URL of the image or the base64 encoded data URI.
   */
  url: string;
  /**
   * Specifies the detail level of the image. Currently only supported with OpenAI models
   */
  detail?: string | undefined;
};

/**
 * The image part of the prompt message. Only supported with vision models.
 */
export type DeploymentGetConfig22 = {
  type: DeploymentGetConfig2DeploymentsType;
  imageUrl: TwoImageUrl;
};

export const DeploymentGetConfig2Type = {
  Text: "text",
} as const;
export type DeploymentGetConfig2Type = ClosedEnum<
  typeof DeploymentGetConfig2Type
>;

/**
 * Text content part of a prompt message
 */
export type Two1 = {
  type: DeploymentGetConfig2Type;
  text: string;
};

export type Content2 = Two1 | DeploymentGetConfig22;

/**
 * The contents of the user message. Either the text content of the message or an array of content parts with a defined type, each can be of type `text` or `image_url` when passing in images. You can pass multiple images by adding multiple `image_url` content parts.
 */
export type DeploymentGetConfigContent =
  | string
  | Array<Two1 | DeploymentGetConfig22>;

export const DeploymentGetConfigDeploymentsType = {
  Function: "function",
} as const;
export type DeploymentGetConfigDeploymentsType = ClosedEnum<
  typeof DeploymentGetConfigDeploymentsType
>;

export type DeploymentGetConfigFunction = {
  name: string;
  /**
   * JSON string arguments for the functions
   */
  arguments: string;
};

export type DeploymentGetConfigToolCalls = {
  id?: string | undefined;
  index?: number | undefined;
  type: DeploymentGetConfigDeploymentsType;
  function: DeploymentGetConfigFunction;
};

export type Messages = {
  /**
   * The role of the prompt message
   */
  role: DeploymentGetConfigRole;
  /**
   * The contents of the user message. Either the text content of the message or an array of content parts with a defined type, each can be of type `text` or `image_url` when passing in images. You can pass multiple images by adding multiple `image_url` content parts.
   */
  content: string | Array<Two1 | DeploymentGetConfig22>;
  toolCalls?: Array<DeploymentGetConfigToolCalls> | undefined;
};

/**
 * Unique ID that identifies a user. This is useful for tracking the same user across multiple requests
 */
export type UserId = string | number;

export type InvokeOptions = {
  /**
   * Whether to include the retrieved knowledge chunks in the response.
   */
  includeRetrievals?: boolean | undefined;
};

export type DeploymentGetConfigRequestBody = {
  /**
   * The deployment id to invoke
   */
  key: string;
  /**
   * Key-value pairs variables to replace in your prompts. If a variable is not provided that is defined in the prompt, the default variables are used.
   */
  inputs?: { [k: string]: string | number | boolean } | undefined;
  /**
   * Key-value pairs that match your data model and fields declared in your configuration matrix. If you send multiple prompt keys, the context will be applied to the evaluation of each key.
   */
  context?: { [k: string]: any } | undefined;
  /**
   * A list of messages to include after the `System` message, but before the  `User` and `Assistant` pairs configured in your deployment.
   */
  prefixMessages?: Array<PrefixMessages> | undefined;
  /**
   * A list of messages to send to the deployment.
   */
  messages?: Array<Messages> | undefined;
  /**
   * A list of file IDs that are associated with the deployment request.
   */
  fileIds?: Array<string> | undefined;
  /**
   * Key-value pairs that you want to attach to the log generated by this request.
   */
  metadata?: { [k: string]: any } | undefined;
  /**
   * Unique ID that identifies a chaining operation. This is useful for tracking a chain of completions across multiple
   */
  chainId?: string | undefined;
  /**
   * Unique ID that identifies a chat conversation. This is useful for tracking the same conversation across multiple requests
   */
  conversationId?: string | undefined;
  /**
   * Unique ID that identifies a user. This is useful for tracking the same user across multiple requests
   */
  userId?: string | number | undefined;
  /**
   * Unique ID that identifies a deployment entity.
   */
  deploymentId?: string | undefined;
  /**
   * Unique ID that identifies a specific variant of a deployment.
   */
  deploymentVariantId?: string | undefined;
  /**
   * Utilized for passing additional parameters to the model provider. Exercise caution when using this feature, as the included parameters will overwrite any parameters specified in the deployment prompt configuration.
   */
  extraParams?: { [k: string]: any } | undefined;
  invokeOptions?: InvokeOptions | undefined;
};

/**
 * The type of the model. Current `chat`,`completion` and `image` are supported
 */
export const DeploymentGetConfigDeploymentsResponseType = {
  Chat: "chat",
  Completion: "completion",
  Embedding: "embedding",
  Vision: "vision",
  Image: "image",
  Tts: "tts",
  Stt: "stt",
  Rerank: "rerank",
} as const;
/**
 * The type of the model. Current `chat`,`completion` and `image` are supported
 */
export type DeploymentGetConfigDeploymentsResponseType = ClosedEnum<
  typeof DeploymentGetConfigDeploymentsResponseType
>;

/**
 * The role of the prompt message
 */
export const DeploymentGetConfigDeploymentsRole = {
  System: "system",
  Assistant: "assistant",
  User: "user",
  Exception: "exception",
  Tool: "tool",
  Prompt: "prompt",
  Correction: "correction",
  ExpectedOutput: "expected_output",
} as const;
/**
 * The role of the prompt message
 */
export type DeploymentGetConfigDeploymentsRole = ClosedEnum<
  typeof DeploymentGetConfigDeploymentsRole
>;

export const DeploymentGetConfig2DeploymentsResponse200Type = {
  ImageUrl: "image_url",
} as const;
export type DeploymentGetConfig2DeploymentsResponse200Type = ClosedEnum<
  typeof DeploymentGetConfig2DeploymentsResponse200Type
>;

export type DeploymentGetConfig2ImageUrl = {
  /**
   * The orq.ai id of the image
   */
  id?: string | undefined;
  /**
   * Either a URL of the image or the base64 encoded data URI.
   */
  url: string;
  /**
   * Specifies the detail level of the image. Currently only supported with OpenAI models
   */
  detail?: string | undefined;
};

/**
 * The image part of the prompt message. Only supported with vision models.
 */
export type DeploymentGetConfig2Deployments2 = {
  type: DeploymentGetConfig2DeploymentsResponse200Type;
  imageUrl: DeploymentGetConfig2ImageUrl;
};

export const DeploymentGetConfig2DeploymentsResponseType = {
  Text: "text",
} as const;
export type DeploymentGetConfig2DeploymentsResponseType = ClosedEnum<
  typeof DeploymentGetConfig2DeploymentsResponseType
>;

/**
 * Text content part of a prompt message
 */
export type DeploymentGetConfig21 = {
  type: DeploymentGetConfig2DeploymentsResponseType;
  text: string;
};

export type DeploymentGetConfigContent2 =
  | DeploymentGetConfig21
  | DeploymentGetConfig2Deployments2;

/**
 * The contents of the user message. Either the text content of the message or an array of content parts with a defined type, each can be of type `text` or `image_url` when passing in images. You can pass multiple images by adding multiple `image_url` content parts.
 */
export type DeploymentGetConfigDeploymentsContent =
  | string
  | Array<DeploymentGetConfig21 | DeploymentGetConfig2Deployments2>;

export const DeploymentGetConfigDeploymentsResponse200ApplicationJSONType = {
  Function: "function",
} as const;
export type DeploymentGetConfigDeploymentsResponse200ApplicationJSONType =
  ClosedEnum<
    typeof DeploymentGetConfigDeploymentsResponse200ApplicationJSONType
  >;

export type DeploymentGetConfigDeploymentsResponseFunction = {
  name: string;
  /**
   * JSON string arguments for the functions
   */
  arguments: string;
};

export type DeploymentGetConfigDeploymentsToolCalls = {
  id?: string | undefined;
  index?: number | undefined;
  type: DeploymentGetConfigDeploymentsResponse200ApplicationJSONType;
  function: DeploymentGetConfigDeploymentsResponseFunction;
};

export type DeploymentGetConfigMessages = {
  /**
   * The role of the prompt message
   */
  role: DeploymentGetConfigDeploymentsRole;
  /**
   * The contents of the user message. Either the text content of the message or an array of content parts with a defined type, each can be of type `text` or `image_url` when passing in images. You can pass multiple images by adding multiple `image_url` content parts.
   */
  content:
    | string
    | Array<DeploymentGetConfig21 | DeploymentGetConfig2Deployments2>;
  toolCalls?: Array<DeploymentGetConfigDeploymentsToolCalls> | undefined;
};

/**
 * Only supported on `image` models.
 */
export const DeploymentGetConfigFormat = {
  Url: "url",
  B64Json: "b64_json",
  Text: "text",
  JsonObject: "json_object",
} as const;
/**
 * Only supported on `image` models.
 */
export type DeploymentGetConfigFormat = ClosedEnum<
  typeof DeploymentGetConfigFormat
>;

/**
 * Only supported on `image` models.
 */
export const DeploymentGetConfigQuality = {
  Standard: "standard",
  Hd: "hd",
} as const;
/**
 * Only supported on `image` models.
 */
export type DeploymentGetConfigQuality = ClosedEnum<
  typeof DeploymentGetConfigQuality
>;

export const DeploymentGetConfigResponseFormatType = {
  JsonObject: "json_object",
} as const;
export type DeploymentGetConfigResponseFormatType = ClosedEnum<
  typeof DeploymentGetConfigResponseFormatType
>;

export type DeploymentGetConfigResponseFormat2 = {
  type: DeploymentGetConfigResponseFormatType;
};

export const DeploymentGetConfigResponseFormatDeploymentsType = {
  JsonSchema: "json_schema",
} as const;
export type DeploymentGetConfigResponseFormatDeploymentsType = ClosedEnum<
  typeof DeploymentGetConfigResponseFormatDeploymentsType
>;

export type DeploymentGetConfigResponseFormatJsonSchema = {
  name: string;
  strict: boolean;
  schema: { [k: string]: any };
};

export type DeploymentGetConfigResponseFormat1 = {
  type: DeploymentGetConfigResponseFormatDeploymentsType;
  jsonSchema: DeploymentGetConfigResponseFormatJsonSchema;
};

/**
 * An object specifying the format that the model must output.
 *
 * @remarks
 *
 *  Setting to `{ "type": "json_schema", "json_schema": {...} }` enables Structured Outputs which ensures the model will match your supplied JSON schema
 *
 *  Setting to `{ "type": "json_object" }` enables JSON mode, which ensures the message the model generates is valid JSON.
 *
 * Important: when using JSON mode, you must also instruct the model to produce JSON yourself via a system or user message. Without this, the model may generate an unending stream of whitespace until the generation reaches the token limit, resulting in a long-running and seemingly "stuck" request. Also note that the message content may be partially cut off if finish_reason="length", which indicates the generation exceeded max_tokens or the conversation exceeded the max context length.
 */
export type DeploymentGetConfigResponseFormat =
  | DeploymentGetConfigResponseFormat2
  | DeploymentGetConfigResponseFormat1;

/**
 * The version of photoReal to use. Must be v1 or v2. Only available for `leonardoai` provider
 */
export const DeploymentGetConfigPhotoRealVersion = {
  V1: "v1",
  V2: "v2",
} as const;
/**
 * The version of photoReal to use. Must be v1 or v2. Only available for `leonardoai` provider
 */
export type DeploymentGetConfigPhotoRealVersion = ClosedEnum<
  typeof DeploymentGetConfigPhotoRealVersion
>;

/**
 * The format to return the embeddings
 */
export const DeploymentGetConfigEncodingFormat = {
  Float: "float",
  Base64: "base64",
} as const;
/**
 * The format to return the embeddings
 */
export type DeploymentGetConfigEncodingFormat = ClosedEnum<
  typeof DeploymentGetConfigEncodingFormat
>;

/**
 * Model Parameters: Not all parameters apply to every model
 */
export type ParametersT = {
  /**
   * Only supported on `chat` and `completion` models.
   */
  temperature?: number | undefined;
  /**
   * Only supported on `chat` and `completion` models.
   */
  maxTokens?: number | undefined;
  /**
   * Only supported on `chat` and `completion` models.
   */
  topK?: number | undefined;
  /**
   * Only supported on `chat` and `completion` models.
   */
  topP?: number | undefined;
  /**
   * Only supported on `chat` and `completion` models.
   */
  frequencyPenalty?: number | undefined;
  /**
   * Only supported on `chat` and `completion` models.
   */
  presencePenalty?: number | undefined;
  /**
   * Only supported on `image` models.
   */
  numImages?: number | undefined;
  /**
   * Best effort deterministic seed for the model. Currently only OpenAI models support these
   */
  seed?: number | undefined;
  /**
   * Only supported on `image` models.
   */
  format?: DeploymentGetConfigFormat | undefined;
  /**
   * Only supported on `image` models.
   */
  dimensions?: string | undefined;
  /**
   * Only supported on `image` models.
   */
  quality?: DeploymentGetConfigQuality | undefined;
  /**
   * Only supported on `image` models.
   */
  style?: string | undefined;
  /**
   * An object specifying the format that the model must output.
   *
   * @remarks
   *
   *  Setting to `{ "type": "json_schema", "json_schema": {...} }` enables Structured Outputs which ensures the model will match your supplied JSON schema
   *
   *  Setting to `{ "type": "json_object" }` enables JSON mode, which ensures the message the model generates is valid JSON.
   *
   * Important: when using JSON mode, you must also instruct the model to produce JSON yourself via a system or user message. Without this, the model may generate an unending stream of whitespace until the generation reaches the token limit, resulting in a long-running and seemingly "stuck" request. Also note that the message content may be partially cut off if finish_reason="length", which indicates the generation exceeded max_tokens or the conversation exceeded the max context length.
   */
  responseFormat?:
    | DeploymentGetConfigResponseFormat2
    | DeploymentGetConfigResponseFormat1
    | null
    | undefined;
  /**
   * The version of photoReal to use. Must be v1 or v2. Only available for `leonardoai` provider
   */
  photoRealVersion?: DeploymentGetConfigPhotoRealVersion | undefined;
  /**
   * The format to return the embeddings
   */
  encodingFormat?: DeploymentGetConfigEncodingFormat | undefined;
};

/**
 * The type of the tool. Currently, only `function` is supported.
 */
export const DeploymentGetConfigDeploymentsResponse200Type = {
  Function: "function",
} as const;
/**
 * The type of the tool. Currently, only `function` is supported.
 */
export type DeploymentGetConfigDeploymentsResponse200Type = ClosedEnum<
  typeof DeploymentGetConfigDeploymentsResponse200Type
>;

export type DeploymentGetConfigDeploymentsFunction = {
  /**
   * The name of the function to be called. Must be a-z, A-Z, 0-9, or contain underscores and dashes, with a maximum length of 64.
   */
  name: string;
  /**
   * A description of what the function does, used by the model to choose when and how to call the function.
   */
  description?: string | undefined;
  /**
   * The parameters the functions accepts, described as a JSON Schema object.
   *
   * @remarks
   *
   *  Omitting `parameters` defines a function with an empty parameter list.
   */
  parameters?: { [k: string]: any } | undefined;
};

export type Tools = {
  /**
   * The type of the tool. Currently, only `function` is supported.
   */
  type: DeploymentGetConfigDeploymentsResponse200Type;
  function: DeploymentGetConfigDeploymentsFunction;
};

/**
 * The deployment configuration
 */
export type DeploymentGetConfigResponseBody = {
  /**
   * A unique identifier for the response. Can be used to add metrics to the transaction.
   */
  id: string;
  /**
   * The provider of the model
   */
  provider: string;
  /**
   * The model of the configuration
   */
  model: string;
  /**
   * The type of the model. Current `chat`,`completion` and `image` are supported
   */
  type?: DeploymentGetConfigDeploymentsResponseType | undefined;
  /**
   * The current version of the deployment
   */
  version: string;
  messages: Array<DeploymentGetConfigMessages>;
  /**
   * Model Parameters: Not all parameters apply to every model
   */
  parameters: ParametersT;
  /**
   * A list of tools the model may call. Currently, only functions are supported as a tool. Use this to provide a list of functions the model may generate JSON inputs for.
   */
  tools?: Array<Tools> | undefined;
};

/** @internal */
export const Inputs$inboundSchema: z.ZodType<Inputs, z.ZodTypeDef, unknown> = z
  .union([z.string(), z.number(), z.boolean()]);

/** @internal */
export type Inputs$Outbound = string | number | boolean;

/** @internal */
export const Inputs$outboundSchema: z.ZodType<
  Inputs$Outbound,
  z.ZodTypeDef,
  Inputs
> = z.union([z.string(), z.number(), z.boolean()]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Inputs$ {
  /** @deprecated use `Inputs$inboundSchema` instead. */
  export const inboundSchema = Inputs$inboundSchema;
  /** @deprecated use `Inputs$outboundSchema` instead. */
  export const outboundSchema = Inputs$outboundSchema;
  /** @deprecated use `Inputs$Outbound` instead. */
  export type Outbound = Inputs$Outbound;
}

export function inputsToJSON(inputs: Inputs): string {
  return JSON.stringify(Inputs$outboundSchema.parse(inputs));
}

export function inputsFromJSON(
  jsonString: string,
): SafeParseResult<Inputs, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Inputs$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Inputs' from JSON`,
  );
}

/** @internal */
export const Role$inboundSchema: z.ZodNativeEnum<typeof Role> = z.nativeEnum(
  Role,
);

/** @internal */
export const Role$outboundSchema: z.ZodNativeEnum<typeof Role> =
  Role$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Role$ {
  /** @deprecated use `Role$inboundSchema` instead. */
  export const inboundSchema = Role$inboundSchema;
  /** @deprecated use `Role$outboundSchema` instead. */
  export const outboundSchema = Role$outboundSchema;
}

/** @internal */
export const TwoType$inboundSchema: z.ZodNativeEnum<typeof TwoType> = z
  .nativeEnum(TwoType);

/** @internal */
export const TwoType$outboundSchema: z.ZodNativeEnum<typeof TwoType> =
  TwoType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TwoType$ {
  /** @deprecated use `TwoType$inboundSchema` instead. */
  export const inboundSchema = TwoType$inboundSchema;
  /** @deprecated use `TwoType$outboundSchema` instead. */
  export const outboundSchema = TwoType$outboundSchema;
}

/** @internal */
export const ImageUrl$inboundSchema: z.ZodType<
  ImageUrl,
  z.ZodTypeDef,
  unknown
> = z.object({
  url: z.string(),
  detail: z.string().optional(),
});

/** @internal */
export type ImageUrl$Outbound = {
  url: string;
  detail?: string | undefined;
};

/** @internal */
export const ImageUrl$outboundSchema: z.ZodType<
  ImageUrl$Outbound,
  z.ZodTypeDef,
  ImageUrl
> = z.object({
  url: z.string(),
  detail: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ImageUrl$ {
  /** @deprecated use `ImageUrl$inboundSchema` instead. */
  export const inboundSchema = ImageUrl$inboundSchema;
  /** @deprecated use `ImageUrl$outboundSchema` instead. */
  export const outboundSchema = ImageUrl$outboundSchema;
  /** @deprecated use `ImageUrl$Outbound` instead. */
  export type Outbound = ImageUrl$Outbound;
}

export function imageUrlToJSON(imageUrl: ImageUrl): string {
  return JSON.stringify(ImageUrl$outboundSchema.parse(imageUrl));
}

export function imageUrlFromJSON(
  jsonString: string,
): SafeParseResult<ImageUrl, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ImageUrl$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ImageUrl' from JSON`,
  );
}

/** @internal */
export const Two2$inboundSchema: z.ZodType<Two2, z.ZodTypeDef, unknown> = z
  .object({
    type: TwoType$inboundSchema,
    image_url: z.lazy(() => ImageUrl$inboundSchema),
  }).transform((v) => {
    return remap$(v, {
      "image_url": "imageUrl",
    });
  });

/** @internal */
export type Two2$Outbound = {
  type: string;
  image_url: ImageUrl$Outbound;
};

/** @internal */
export const Two2$outboundSchema: z.ZodType<Two2$Outbound, z.ZodTypeDef, Two2> =
  z.object({
    type: TwoType$outboundSchema,
    imageUrl: z.lazy(() => ImageUrl$outboundSchema),
  }).transform((v) => {
    return remap$(v, {
      imageUrl: "image_url",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Two2$ {
  /** @deprecated use `Two2$inboundSchema` instead. */
  export const inboundSchema = Two2$inboundSchema;
  /** @deprecated use `Two2$outboundSchema` instead. */
  export const outboundSchema = Two2$outboundSchema;
  /** @deprecated use `Two2$Outbound` instead. */
  export type Outbound = Two2$Outbound;
}

export function two2ToJSON(two2: Two2): string {
  return JSON.stringify(Two2$outboundSchema.parse(two2));
}

export function two2FromJSON(
  jsonString: string,
): SafeParseResult<Two2, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Two2$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Two2' from JSON`,
  );
}

/** @internal */
export const Type$inboundSchema: z.ZodNativeEnum<typeof Type> = z.nativeEnum(
  Type,
);

/** @internal */
export const Type$outboundSchema: z.ZodNativeEnum<typeof Type> =
  Type$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Type$ {
  /** @deprecated use `Type$inboundSchema` instead. */
  export const inboundSchema = Type$inboundSchema;
  /** @deprecated use `Type$outboundSchema` instead. */
  export const outboundSchema = Type$outboundSchema;
}

/** @internal */
export const One$inboundSchema: z.ZodType<One, z.ZodTypeDef, unknown> = z
  .object({
    type: Type$inboundSchema,
    text: z.string(),
  });

/** @internal */
export type One$Outbound = {
  type: string;
  text: string;
};

/** @internal */
export const One$outboundSchema: z.ZodType<One$Outbound, z.ZodTypeDef, One> = z
  .object({
    type: Type$outboundSchema,
    text: z.string(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace One$ {
  /** @deprecated use `One$inboundSchema` instead. */
  export const inboundSchema = One$inboundSchema;
  /** @deprecated use `One$outboundSchema` instead. */
  export const outboundSchema = One$outboundSchema;
  /** @deprecated use `One$Outbound` instead. */
  export type Outbound = One$Outbound;
}

export function oneToJSON(one: One): string {
  return JSON.stringify(One$outboundSchema.parse(one));
}

export function oneFromJSON(
  jsonString: string,
): SafeParseResult<One, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => One$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'One' from JSON`,
  );
}

/** @internal */
export const Two$inboundSchema: z.ZodType<Two, z.ZodTypeDef, unknown> = z.union(
  [z.lazy(() => One$inboundSchema), z.lazy(() => Two2$inboundSchema)],
);

/** @internal */
export type Two$Outbound = One$Outbound | Two2$Outbound;

/** @internal */
export const Two$outboundSchema: z.ZodType<Two$Outbound, z.ZodTypeDef, Two> = z
  .union([z.lazy(() => One$outboundSchema), z.lazy(() => Two2$outboundSchema)]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Two$ {
  /** @deprecated use `Two$inboundSchema` instead. */
  export const inboundSchema = Two$inboundSchema;
  /** @deprecated use `Two$outboundSchema` instead. */
  export const outboundSchema = Two$outboundSchema;
  /** @deprecated use `Two$Outbound` instead. */
  export type Outbound = Two$Outbound;
}

export function twoToJSON(two: Two): string {
  return JSON.stringify(Two$outboundSchema.parse(two));
}

export function twoFromJSON(
  jsonString: string,
): SafeParseResult<Two, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Two$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Two' from JSON`,
  );
}

/** @internal */
export const Content$inboundSchema: z.ZodType<Content, z.ZodTypeDef, unknown> =
  z.union([
    z.string(),
    z.array(z.union([
      z.lazy(() => One$inboundSchema),
      z.lazy(() => Two2$inboundSchema),
    ])),
  ]);

/** @internal */
export type Content$Outbound = string | Array<One$Outbound | Two2$Outbound>;

/** @internal */
export const Content$outboundSchema: z.ZodType<
  Content$Outbound,
  z.ZodTypeDef,
  Content
> = z.union([
  z.string(),
  z.array(z.union([
    z.lazy(() => One$outboundSchema),
    z.lazy(() => Two2$outboundSchema),
  ])),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Content$ {
  /** @deprecated use `Content$inboundSchema` instead. */
  export const inboundSchema = Content$inboundSchema;
  /** @deprecated use `Content$outboundSchema` instead. */
  export const outboundSchema = Content$outboundSchema;
  /** @deprecated use `Content$Outbound` instead. */
  export type Outbound = Content$Outbound;
}

export function contentToJSON(content: Content): string {
  return JSON.stringify(Content$outboundSchema.parse(content));
}

export function contentFromJSON(
  jsonString: string,
): SafeParseResult<Content, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Content$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Content' from JSON`,
  );
}

/** @internal */
export const DeploymentGetConfigType$inboundSchema: z.ZodNativeEnum<
  typeof DeploymentGetConfigType
> = z.nativeEnum(DeploymentGetConfigType);

/** @internal */
export const DeploymentGetConfigType$outboundSchema: z.ZodNativeEnum<
  typeof DeploymentGetConfigType
> = DeploymentGetConfigType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeploymentGetConfigType$ {
  /** @deprecated use `DeploymentGetConfigType$inboundSchema` instead. */
  export const inboundSchema = DeploymentGetConfigType$inboundSchema;
  /** @deprecated use `DeploymentGetConfigType$outboundSchema` instead. */
  export const outboundSchema = DeploymentGetConfigType$outboundSchema;
}

/** @internal */
export const FunctionT$inboundSchema: z.ZodType<
  FunctionT,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.string(),
  arguments: z.string(),
});

/** @internal */
export type FunctionT$Outbound = {
  name: string;
  arguments: string;
};

/** @internal */
export const FunctionT$outboundSchema: z.ZodType<
  FunctionT$Outbound,
  z.ZodTypeDef,
  FunctionT
> = z.object({
  name: z.string(),
  arguments: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FunctionT$ {
  /** @deprecated use `FunctionT$inboundSchema` instead. */
  export const inboundSchema = FunctionT$inboundSchema;
  /** @deprecated use `FunctionT$outboundSchema` instead. */
  export const outboundSchema = FunctionT$outboundSchema;
  /** @deprecated use `FunctionT$Outbound` instead. */
  export type Outbound = FunctionT$Outbound;
}

export function functionTToJSON(functionT: FunctionT): string {
  return JSON.stringify(FunctionT$outboundSchema.parse(functionT));
}

export function functionTFromJSON(
  jsonString: string,
): SafeParseResult<FunctionT, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => FunctionT$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'FunctionT' from JSON`,
  );
}

/** @internal */
export const ToolCalls$inboundSchema: z.ZodType<
  ToolCalls,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string().optional(),
  index: z.number().optional(),
  type: DeploymentGetConfigType$inboundSchema,
  function: z.lazy(() => FunctionT$inboundSchema),
});

/** @internal */
export type ToolCalls$Outbound = {
  id?: string | undefined;
  index?: number | undefined;
  type: string;
  function: FunctionT$Outbound;
};

/** @internal */
export const ToolCalls$outboundSchema: z.ZodType<
  ToolCalls$Outbound,
  z.ZodTypeDef,
  ToolCalls
> = z.object({
  id: z.string().optional(),
  index: z.number().optional(),
  type: DeploymentGetConfigType$outboundSchema,
  function: z.lazy(() => FunctionT$outboundSchema),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ToolCalls$ {
  /** @deprecated use `ToolCalls$inboundSchema` instead. */
  export const inboundSchema = ToolCalls$inboundSchema;
  /** @deprecated use `ToolCalls$outboundSchema` instead. */
  export const outboundSchema = ToolCalls$outboundSchema;
  /** @deprecated use `ToolCalls$Outbound` instead. */
  export type Outbound = ToolCalls$Outbound;
}

export function toolCallsToJSON(toolCalls: ToolCalls): string {
  return JSON.stringify(ToolCalls$outboundSchema.parse(toolCalls));
}

export function toolCallsFromJSON(
  jsonString: string,
): SafeParseResult<ToolCalls, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ToolCalls$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ToolCalls' from JSON`,
  );
}

/** @internal */
export const PrefixMessages$inboundSchema: z.ZodType<
  PrefixMessages,
  z.ZodTypeDef,
  unknown
> = z.object({
  role: Role$inboundSchema,
  content: z.union([
    z.string(),
    z.array(z.union([
      z.lazy(() => One$inboundSchema),
      z.lazy(() => Two2$inboundSchema),
    ])),
  ]),
  tool_calls: z.array(z.lazy(() => ToolCalls$inboundSchema)).optional(),
}).transform((v) => {
  return remap$(v, {
    "tool_calls": "toolCalls",
  });
});

/** @internal */
export type PrefixMessages$Outbound = {
  role: string;
  content: string | Array<One$Outbound | Two2$Outbound>;
  tool_calls?: Array<ToolCalls$Outbound> | undefined;
};

/** @internal */
export const PrefixMessages$outboundSchema: z.ZodType<
  PrefixMessages$Outbound,
  z.ZodTypeDef,
  PrefixMessages
> = z.object({
  role: Role$outboundSchema,
  content: z.union([
    z.string(),
    z.array(z.union([
      z.lazy(() => One$outboundSchema),
      z.lazy(() => Two2$outboundSchema),
    ])),
  ]),
  toolCalls: z.array(z.lazy(() => ToolCalls$outboundSchema)).optional(),
}).transform((v) => {
  return remap$(v, {
    toolCalls: "tool_calls",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PrefixMessages$ {
  /** @deprecated use `PrefixMessages$inboundSchema` instead. */
  export const inboundSchema = PrefixMessages$inboundSchema;
  /** @deprecated use `PrefixMessages$outboundSchema` instead. */
  export const outboundSchema = PrefixMessages$outboundSchema;
  /** @deprecated use `PrefixMessages$Outbound` instead. */
  export type Outbound = PrefixMessages$Outbound;
}

export function prefixMessagesToJSON(prefixMessages: PrefixMessages): string {
  return JSON.stringify(PrefixMessages$outboundSchema.parse(prefixMessages));
}

export function prefixMessagesFromJSON(
  jsonString: string,
): SafeParseResult<PrefixMessages, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PrefixMessages$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PrefixMessages' from JSON`,
  );
}

/** @internal */
export const DeploymentGetConfigRole$inboundSchema: z.ZodNativeEnum<
  typeof DeploymentGetConfigRole
> = z.nativeEnum(DeploymentGetConfigRole);

/** @internal */
export const DeploymentGetConfigRole$outboundSchema: z.ZodNativeEnum<
  typeof DeploymentGetConfigRole
> = DeploymentGetConfigRole$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeploymentGetConfigRole$ {
  /** @deprecated use `DeploymentGetConfigRole$inboundSchema` instead. */
  export const inboundSchema = DeploymentGetConfigRole$inboundSchema;
  /** @deprecated use `DeploymentGetConfigRole$outboundSchema` instead. */
  export const outboundSchema = DeploymentGetConfigRole$outboundSchema;
}

/** @internal */
export const DeploymentGetConfig2DeploymentsType$inboundSchema: z.ZodNativeEnum<
  typeof DeploymentGetConfig2DeploymentsType
> = z.nativeEnum(DeploymentGetConfig2DeploymentsType);

/** @internal */
export const DeploymentGetConfig2DeploymentsType$outboundSchema:
  z.ZodNativeEnum<typeof DeploymentGetConfig2DeploymentsType> =
    DeploymentGetConfig2DeploymentsType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeploymentGetConfig2DeploymentsType$ {
  /** @deprecated use `DeploymentGetConfig2DeploymentsType$inboundSchema` instead. */
  export const inboundSchema =
    DeploymentGetConfig2DeploymentsType$inboundSchema;
  /** @deprecated use `DeploymentGetConfig2DeploymentsType$outboundSchema` instead. */
  export const outboundSchema =
    DeploymentGetConfig2DeploymentsType$outboundSchema;
}

/** @internal */
export const TwoImageUrl$inboundSchema: z.ZodType<
  TwoImageUrl,
  z.ZodTypeDef,
  unknown
> = z.object({
  url: z.string(),
  detail: z.string().optional(),
});

/** @internal */
export type TwoImageUrl$Outbound = {
  url: string;
  detail?: string | undefined;
};

/** @internal */
export const TwoImageUrl$outboundSchema: z.ZodType<
  TwoImageUrl$Outbound,
  z.ZodTypeDef,
  TwoImageUrl
> = z.object({
  url: z.string(),
  detail: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TwoImageUrl$ {
  /** @deprecated use `TwoImageUrl$inboundSchema` instead. */
  export const inboundSchema = TwoImageUrl$inboundSchema;
  /** @deprecated use `TwoImageUrl$outboundSchema` instead. */
  export const outboundSchema = TwoImageUrl$outboundSchema;
  /** @deprecated use `TwoImageUrl$Outbound` instead. */
  export type Outbound = TwoImageUrl$Outbound;
}

export function twoImageUrlToJSON(twoImageUrl: TwoImageUrl): string {
  return JSON.stringify(TwoImageUrl$outboundSchema.parse(twoImageUrl));
}

export function twoImageUrlFromJSON(
  jsonString: string,
): SafeParseResult<TwoImageUrl, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => TwoImageUrl$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TwoImageUrl' from JSON`,
  );
}

/** @internal */
export const DeploymentGetConfig22$inboundSchema: z.ZodType<
  DeploymentGetConfig22,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: DeploymentGetConfig2DeploymentsType$inboundSchema,
  image_url: z.lazy(() => TwoImageUrl$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "image_url": "imageUrl",
  });
});

/** @internal */
export type DeploymentGetConfig22$Outbound = {
  type: string;
  image_url: TwoImageUrl$Outbound;
};

/** @internal */
export const DeploymentGetConfig22$outboundSchema: z.ZodType<
  DeploymentGetConfig22$Outbound,
  z.ZodTypeDef,
  DeploymentGetConfig22
> = z.object({
  type: DeploymentGetConfig2DeploymentsType$outboundSchema,
  imageUrl: z.lazy(() => TwoImageUrl$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    imageUrl: "image_url",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeploymentGetConfig22$ {
  /** @deprecated use `DeploymentGetConfig22$inboundSchema` instead. */
  export const inboundSchema = DeploymentGetConfig22$inboundSchema;
  /** @deprecated use `DeploymentGetConfig22$outboundSchema` instead. */
  export const outboundSchema = DeploymentGetConfig22$outboundSchema;
  /** @deprecated use `DeploymentGetConfig22$Outbound` instead. */
  export type Outbound = DeploymentGetConfig22$Outbound;
}

export function deploymentGetConfig22ToJSON(
  deploymentGetConfig22: DeploymentGetConfig22,
): string {
  return JSON.stringify(
    DeploymentGetConfig22$outboundSchema.parse(deploymentGetConfig22),
  );
}

export function deploymentGetConfig22FromJSON(
  jsonString: string,
): SafeParseResult<DeploymentGetConfig22, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DeploymentGetConfig22$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DeploymentGetConfig22' from JSON`,
  );
}

/** @internal */
export const DeploymentGetConfig2Type$inboundSchema: z.ZodNativeEnum<
  typeof DeploymentGetConfig2Type
> = z.nativeEnum(DeploymentGetConfig2Type);

/** @internal */
export const DeploymentGetConfig2Type$outboundSchema: z.ZodNativeEnum<
  typeof DeploymentGetConfig2Type
> = DeploymentGetConfig2Type$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeploymentGetConfig2Type$ {
  /** @deprecated use `DeploymentGetConfig2Type$inboundSchema` instead. */
  export const inboundSchema = DeploymentGetConfig2Type$inboundSchema;
  /** @deprecated use `DeploymentGetConfig2Type$outboundSchema` instead. */
  export const outboundSchema = DeploymentGetConfig2Type$outboundSchema;
}

/** @internal */
export const Two1$inboundSchema: z.ZodType<Two1, z.ZodTypeDef, unknown> = z
  .object({
    type: DeploymentGetConfig2Type$inboundSchema,
    text: z.string(),
  });

/** @internal */
export type Two1$Outbound = {
  type: string;
  text: string;
};

/** @internal */
export const Two1$outboundSchema: z.ZodType<Two1$Outbound, z.ZodTypeDef, Two1> =
  z.object({
    type: DeploymentGetConfig2Type$outboundSchema,
    text: z.string(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Two1$ {
  /** @deprecated use `Two1$inboundSchema` instead. */
  export const inboundSchema = Two1$inboundSchema;
  /** @deprecated use `Two1$outboundSchema` instead. */
  export const outboundSchema = Two1$outboundSchema;
  /** @deprecated use `Two1$Outbound` instead. */
  export type Outbound = Two1$Outbound;
}

export function two1ToJSON(two1: Two1): string {
  return JSON.stringify(Two1$outboundSchema.parse(two1));
}

export function two1FromJSON(
  jsonString: string,
): SafeParseResult<Two1, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Two1$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Two1' from JSON`,
  );
}

/** @internal */
export const Content2$inboundSchema: z.ZodType<
  Content2,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => Two1$inboundSchema),
  z.lazy(() => DeploymentGetConfig22$inboundSchema),
]);

/** @internal */
export type Content2$Outbound = Two1$Outbound | DeploymentGetConfig22$Outbound;

/** @internal */
export const Content2$outboundSchema: z.ZodType<
  Content2$Outbound,
  z.ZodTypeDef,
  Content2
> = z.union([
  z.lazy(() => Two1$outboundSchema),
  z.lazy(() => DeploymentGetConfig22$outboundSchema),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Content2$ {
  /** @deprecated use `Content2$inboundSchema` instead. */
  export const inboundSchema = Content2$inboundSchema;
  /** @deprecated use `Content2$outboundSchema` instead. */
  export const outboundSchema = Content2$outboundSchema;
  /** @deprecated use `Content2$Outbound` instead. */
  export type Outbound = Content2$Outbound;
}

export function content2ToJSON(content2: Content2): string {
  return JSON.stringify(Content2$outboundSchema.parse(content2));
}

export function content2FromJSON(
  jsonString: string,
): SafeParseResult<Content2, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Content2$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Content2' from JSON`,
  );
}

/** @internal */
export const DeploymentGetConfigContent$inboundSchema: z.ZodType<
  DeploymentGetConfigContent,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.string(),
  z.array(z.union([
    z.lazy(() => Two1$inboundSchema),
    z.lazy(() => DeploymentGetConfig22$inboundSchema),
  ])),
]);

/** @internal */
export type DeploymentGetConfigContent$Outbound =
  | string
  | Array<Two1$Outbound | DeploymentGetConfig22$Outbound>;

/** @internal */
export const DeploymentGetConfigContent$outboundSchema: z.ZodType<
  DeploymentGetConfigContent$Outbound,
  z.ZodTypeDef,
  DeploymentGetConfigContent
> = z.union([
  z.string(),
  z.array(z.union([
    z.lazy(() => Two1$outboundSchema),
    z.lazy(() => DeploymentGetConfig22$outboundSchema),
  ])),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeploymentGetConfigContent$ {
  /** @deprecated use `DeploymentGetConfigContent$inboundSchema` instead. */
  export const inboundSchema = DeploymentGetConfigContent$inboundSchema;
  /** @deprecated use `DeploymentGetConfigContent$outboundSchema` instead. */
  export const outboundSchema = DeploymentGetConfigContent$outboundSchema;
  /** @deprecated use `DeploymentGetConfigContent$Outbound` instead. */
  export type Outbound = DeploymentGetConfigContent$Outbound;
}

export function deploymentGetConfigContentToJSON(
  deploymentGetConfigContent: DeploymentGetConfigContent,
): string {
  return JSON.stringify(
    DeploymentGetConfigContent$outboundSchema.parse(deploymentGetConfigContent),
  );
}

export function deploymentGetConfigContentFromJSON(
  jsonString: string,
): SafeParseResult<DeploymentGetConfigContent, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DeploymentGetConfigContent$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DeploymentGetConfigContent' from JSON`,
  );
}

/** @internal */
export const DeploymentGetConfigDeploymentsType$inboundSchema: z.ZodNativeEnum<
  typeof DeploymentGetConfigDeploymentsType
> = z.nativeEnum(DeploymentGetConfigDeploymentsType);

/** @internal */
export const DeploymentGetConfigDeploymentsType$outboundSchema: z.ZodNativeEnum<
  typeof DeploymentGetConfigDeploymentsType
> = DeploymentGetConfigDeploymentsType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeploymentGetConfigDeploymentsType$ {
  /** @deprecated use `DeploymentGetConfigDeploymentsType$inboundSchema` instead. */
  export const inboundSchema = DeploymentGetConfigDeploymentsType$inboundSchema;
  /** @deprecated use `DeploymentGetConfigDeploymentsType$outboundSchema` instead. */
  export const outboundSchema =
    DeploymentGetConfigDeploymentsType$outboundSchema;
}

/** @internal */
export const DeploymentGetConfigFunction$inboundSchema: z.ZodType<
  DeploymentGetConfigFunction,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.string(),
  arguments: z.string(),
});

/** @internal */
export type DeploymentGetConfigFunction$Outbound = {
  name: string;
  arguments: string;
};

/** @internal */
export const DeploymentGetConfigFunction$outboundSchema: z.ZodType<
  DeploymentGetConfigFunction$Outbound,
  z.ZodTypeDef,
  DeploymentGetConfigFunction
> = z.object({
  name: z.string(),
  arguments: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeploymentGetConfigFunction$ {
  /** @deprecated use `DeploymentGetConfigFunction$inboundSchema` instead. */
  export const inboundSchema = DeploymentGetConfigFunction$inboundSchema;
  /** @deprecated use `DeploymentGetConfigFunction$outboundSchema` instead. */
  export const outboundSchema = DeploymentGetConfigFunction$outboundSchema;
  /** @deprecated use `DeploymentGetConfigFunction$Outbound` instead. */
  export type Outbound = DeploymentGetConfigFunction$Outbound;
}

export function deploymentGetConfigFunctionToJSON(
  deploymentGetConfigFunction: DeploymentGetConfigFunction,
): string {
  return JSON.stringify(
    DeploymentGetConfigFunction$outboundSchema.parse(
      deploymentGetConfigFunction,
    ),
  );
}

export function deploymentGetConfigFunctionFromJSON(
  jsonString: string,
): SafeParseResult<DeploymentGetConfigFunction, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DeploymentGetConfigFunction$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DeploymentGetConfigFunction' from JSON`,
  );
}

/** @internal */
export const DeploymentGetConfigToolCalls$inboundSchema: z.ZodType<
  DeploymentGetConfigToolCalls,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string().optional(),
  index: z.number().optional(),
  type: DeploymentGetConfigDeploymentsType$inboundSchema,
  function: z.lazy(() => DeploymentGetConfigFunction$inboundSchema),
});

/** @internal */
export type DeploymentGetConfigToolCalls$Outbound = {
  id?: string | undefined;
  index?: number | undefined;
  type: string;
  function: DeploymentGetConfigFunction$Outbound;
};

/** @internal */
export const DeploymentGetConfigToolCalls$outboundSchema: z.ZodType<
  DeploymentGetConfigToolCalls$Outbound,
  z.ZodTypeDef,
  DeploymentGetConfigToolCalls
> = z.object({
  id: z.string().optional(),
  index: z.number().optional(),
  type: DeploymentGetConfigDeploymentsType$outboundSchema,
  function: z.lazy(() => DeploymentGetConfigFunction$outboundSchema),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeploymentGetConfigToolCalls$ {
  /** @deprecated use `DeploymentGetConfigToolCalls$inboundSchema` instead. */
  export const inboundSchema = DeploymentGetConfigToolCalls$inboundSchema;
  /** @deprecated use `DeploymentGetConfigToolCalls$outboundSchema` instead. */
  export const outboundSchema = DeploymentGetConfigToolCalls$outboundSchema;
  /** @deprecated use `DeploymentGetConfigToolCalls$Outbound` instead. */
  export type Outbound = DeploymentGetConfigToolCalls$Outbound;
}

export function deploymentGetConfigToolCallsToJSON(
  deploymentGetConfigToolCalls: DeploymentGetConfigToolCalls,
): string {
  return JSON.stringify(
    DeploymentGetConfigToolCalls$outboundSchema.parse(
      deploymentGetConfigToolCalls,
    ),
  );
}

export function deploymentGetConfigToolCallsFromJSON(
  jsonString: string,
): SafeParseResult<DeploymentGetConfigToolCalls, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DeploymentGetConfigToolCalls$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DeploymentGetConfigToolCalls' from JSON`,
  );
}

/** @internal */
export const Messages$inboundSchema: z.ZodType<
  Messages,
  z.ZodTypeDef,
  unknown
> = z.object({
  role: DeploymentGetConfigRole$inboundSchema,
  content: z.union([
    z.string(),
    z.array(z.union([
      z.lazy(() => Two1$inboundSchema),
      z.lazy(() => DeploymentGetConfig22$inboundSchema),
    ])),
  ]),
  tool_calls: z.array(z.lazy(() => DeploymentGetConfigToolCalls$inboundSchema))
    .optional(),
}).transform((v) => {
  return remap$(v, {
    "tool_calls": "toolCalls",
  });
});

/** @internal */
export type Messages$Outbound = {
  role: string;
  content: string | Array<Two1$Outbound | DeploymentGetConfig22$Outbound>;
  tool_calls?: Array<DeploymentGetConfigToolCalls$Outbound> | undefined;
};

/** @internal */
export const Messages$outboundSchema: z.ZodType<
  Messages$Outbound,
  z.ZodTypeDef,
  Messages
> = z.object({
  role: DeploymentGetConfigRole$outboundSchema,
  content: z.union([
    z.string(),
    z.array(z.union([
      z.lazy(() => Two1$outboundSchema),
      z.lazy(() => DeploymentGetConfig22$outboundSchema),
    ])),
  ]),
  toolCalls: z.array(z.lazy(() => DeploymentGetConfigToolCalls$outboundSchema))
    .optional(),
}).transform((v) => {
  return remap$(v, {
    toolCalls: "tool_calls",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Messages$ {
  /** @deprecated use `Messages$inboundSchema` instead. */
  export const inboundSchema = Messages$inboundSchema;
  /** @deprecated use `Messages$outboundSchema` instead. */
  export const outboundSchema = Messages$outboundSchema;
  /** @deprecated use `Messages$Outbound` instead. */
  export type Outbound = Messages$Outbound;
}

export function messagesToJSON(messages: Messages): string {
  return JSON.stringify(Messages$outboundSchema.parse(messages));
}

export function messagesFromJSON(
  jsonString: string,
): SafeParseResult<Messages, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Messages$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Messages' from JSON`,
  );
}

/** @internal */
export const UserId$inboundSchema: z.ZodType<UserId, z.ZodTypeDef, unknown> = z
  .union([z.string(), z.number()]);

/** @internal */
export type UserId$Outbound = string | number;

/** @internal */
export const UserId$outboundSchema: z.ZodType<
  UserId$Outbound,
  z.ZodTypeDef,
  UserId
> = z.union([z.string(), z.number()]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UserId$ {
  /** @deprecated use `UserId$inboundSchema` instead. */
  export const inboundSchema = UserId$inboundSchema;
  /** @deprecated use `UserId$outboundSchema` instead. */
  export const outboundSchema = UserId$outboundSchema;
  /** @deprecated use `UserId$Outbound` instead. */
  export type Outbound = UserId$Outbound;
}

export function userIdToJSON(userId: UserId): string {
  return JSON.stringify(UserId$outboundSchema.parse(userId));
}

export function userIdFromJSON(
  jsonString: string,
): SafeParseResult<UserId, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UserId$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UserId' from JSON`,
  );
}

/** @internal */
export const InvokeOptions$inboundSchema: z.ZodType<
  InvokeOptions,
  z.ZodTypeDef,
  unknown
> = z.object({
  include_retrievals: z.boolean().default(false),
}).transform((v) => {
  return remap$(v, {
    "include_retrievals": "includeRetrievals",
  });
});

/** @internal */
export type InvokeOptions$Outbound = {
  include_retrievals: boolean;
};

/** @internal */
export const InvokeOptions$outboundSchema: z.ZodType<
  InvokeOptions$Outbound,
  z.ZodTypeDef,
  InvokeOptions
> = z.object({
  includeRetrievals: z.boolean().default(false),
}).transform((v) => {
  return remap$(v, {
    includeRetrievals: "include_retrievals",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InvokeOptions$ {
  /** @deprecated use `InvokeOptions$inboundSchema` instead. */
  export const inboundSchema = InvokeOptions$inboundSchema;
  /** @deprecated use `InvokeOptions$outboundSchema` instead. */
  export const outboundSchema = InvokeOptions$outboundSchema;
  /** @deprecated use `InvokeOptions$Outbound` instead. */
  export type Outbound = InvokeOptions$Outbound;
}

export function invokeOptionsToJSON(invokeOptions: InvokeOptions): string {
  return JSON.stringify(InvokeOptions$outboundSchema.parse(invokeOptions));
}

export function invokeOptionsFromJSON(
  jsonString: string,
): SafeParseResult<InvokeOptions, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => InvokeOptions$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'InvokeOptions' from JSON`,
  );
}

/** @internal */
export const DeploymentGetConfigRequestBody$inboundSchema: z.ZodType<
  DeploymentGetConfigRequestBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  key: z.string(),
  inputs: z.record(z.union([z.string(), z.number(), z.boolean()])).optional(),
  context: z.record(z.any()).optional(),
  prefix_messages: z.array(z.lazy(() => PrefixMessages$inboundSchema))
    .optional(),
  messages: z.array(z.lazy(() => Messages$inboundSchema)).optional(),
  file_ids: z.array(z.string()).optional(),
  metadata: z.record(z.any()).optional(),
  chain_id: z.string().optional(),
  conversation_id: z.string().optional(),
  user_id: z.union([z.string(), z.number()]).optional(),
  deployment_id: z.string().optional(),
  deployment_variant_id: z.string().optional(),
  extra_params: z.record(z.any()).optional(),
  invoke_options: z.lazy(() => InvokeOptions$inboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    "prefix_messages": "prefixMessages",
    "file_ids": "fileIds",
    "chain_id": "chainId",
    "conversation_id": "conversationId",
    "user_id": "userId",
    "deployment_id": "deploymentId",
    "deployment_variant_id": "deploymentVariantId",
    "extra_params": "extraParams",
    "invoke_options": "invokeOptions",
  });
});

/** @internal */
export type DeploymentGetConfigRequestBody$Outbound = {
  key: string;
  inputs?: { [k: string]: string | number | boolean } | undefined;
  context?: { [k: string]: any } | undefined;
  prefix_messages?: Array<PrefixMessages$Outbound> | undefined;
  messages?: Array<Messages$Outbound> | undefined;
  file_ids?: Array<string> | undefined;
  metadata?: { [k: string]: any } | undefined;
  chain_id?: string | undefined;
  conversation_id?: string | undefined;
  user_id?: string | number | undefined;
  deployment_id?: string | undefined;
  deployment_variant_id?: string | undefined;
  extra_params?: { [k: string]: any } | undefined;
  invoke_options?: InvokeOptions$Outbound | undefined;
};

/** @internal */
export const DeploymentGetConfigRequestBody$outboundSchema: z.ZodType<
  DeploymentGetConfigRequestBody$Outbound,
  z.ZodTypeDef,
  DeploymentGetConfigRequestBody
> = z.object({
  key: z.string(),
  inputs: z.record(z.union([z.string(), z.number(), z.boolean()])).optional(),
  context: z.record(z.any()).optional(),
  prefixMessages: z.array(z.lazy(() => PrefixMessages$outboundSchema))
    .optional(),
  messages: z.array(z.lazy(() => Messages$outboundSchema)).optional(),
  fileIds: z.array(z.string()).optional(),
  metadata: z.record(z.any()).optional(),
  chainId: z.string().optional(),
  conversationId: z.string().optional(),
  userId: z.union([z.string(), z.number()]).optional(),
  deploymentId: z.string().optional(),
  deploymentVariantId: z.string().optional(),
  extraParams: z.record(z.any()).optional(),
  invokeOptions: z.lazy(() => InvokeOptions$outboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    prefixMessages: "prefix_messages",
    fileIds: "file_ids",
    chainId: "chain_id",
    conversationId: "conversation_id",
    userId: "user_id",
    deploymentId: "deployment_id",
    deploymentVariantId: "deployment_variant_id",
    extraParams: "extra_params",
    invokeOptions: "invoke_options",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeploymentGetConfigRequestBody$ {
  /** @deprecated use `DeploymentGetConfigRequestBody$inboundSchema` instead. */
  export const inboundSchema = DeploymentGetConfigRequestBody$inboundSchema;
  /** @deprecated use `DeploymentGetConfigRequestBody$outboundSchema` instead. */
  export const outboundSchema = DeploymentGetConfigRequestBody$outboundSchema;
  /** @deprecated use `DeploymentGetConfigRequestBody$Outbound` instead. */
  export type Outbound = DeploymentGetConfigRequestBody$Outbound;
}

export function deploymentGetConfigRequestBodyToJSON(
  deploymentGetConfigRequestBody: DeploymentGetConfigRequestBody,
): string {
  return JSON.stringify(
    DeploymentGetConfigRequestBody$outboundSchema.parse(
      deploymentGetConfigRequestBody,
    ),
  );
}

export function deploymentGetConfigRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<DeploymentGetConfigRequestBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DeploymentGetConfigRequestBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DeploymentGetConfigRequestBody' from JSON`,
  );
}

/** @internal */
export const DeploymentGetConfigDeploymentsResponseType$inboundSchema:
  z.ZodNativeEnum<typeof DeploymentGetConfigDeploymentsResponseType> = z
    .nativeEnum(DeploymentGetConfigDeploymentsResponseType);

/** @internal */
export const DeploymentGetConfigDeploymentsResponseType$outboundSchema:
  z.ZodNativeEnum<typeof DeploymentGetConfigDeploymentsResponseType> =
    DeploymentGetConfigDeploymentsResponseType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeploymentGetConfigDeploymentsResponseType$ {
  /** @deprecated use `DeploymentGetConfigDeploymentsResponseType$inboundSchema` instead. */
  export const inboundSchema =
    DeploymentGetConfigDeploymentsResponseType$inboundSchema;
  /** @deprecated use `DeploymentGetConfigDeploymentsResponseType$outboundSchema` instead. */
  export const outboundSchema =
    DeploymentGetConfigDeploymentsResponseType$outboundSchema;
}

/** @internal */
export const DeploymentGetConfigDeploymentsRole$inboundSchema: z.ZodNativeEnum<
  typeof DeploymentGetConfigDeploymentsRole
> = z.nativeEnum(DeploymentGetConfigDeploymentsRole);

/** @internal */
export const DeploymentGetConfigDeploymentsRole$outboundSchema: z.ZodNativeEnum<
  typeof DeploymentGetConfigDeploymentsRole
> = DeploymentGetConfigDeploymentsRole$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeploymentGetConfigDeploymentsRole$ {
  /** @deprecated use `DeploymentGetConfigDeploymentsRole$inboundSchema` instead. */
  export const inboundSchema = DeploymentGetConfigDeploymentsRole$inboundSchema;
  /** @deprecated use `DeploymentGetConfigDeploymentsRole$outboundSchema` instead. */
  export const outboundSchema =
    DeploymentGetConfigDeploymentsRole$outboundSchema;
}

/** @internal */
export const DeploymentGetConfig2DeploymentsResponse200Type$inboundSchema:
  z.ZodNativeEnum<typeof DeploymentGetConfig2DeploymentsResponse200Type> = z
    .nativeEnum(DeploymentGetConfig2DeploymentsResponse200Type);

/** @internal */
export const DeploymentGetConfig2DeploymentsResponse200Type$outboundSchema:
  z.ZodNativeEnum<typeof DeploymentGetConfig2DeploymentsResponse200Type> =
    DeploymentGetConfig2DeploymentsResponse200Type$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeploymentGetConfig2DeploymentsResponse200Type$ {
  /** @deprecated use `DeploymentGetConfig2DeploymentsResponse200Type$inboundSchema` instead. */
  export const inboundSchema =
    DeploymentGetConfig2DeploymentsResponse200Type$inboundSchema;
  /** @deprecated use `DeploymentGetConfig2DeploymentsResponse200Type$outboundSchema` instead. */
  export const outboundSchema =
    DeploymentGetConfig2DeploymentsResponse200Type$outboundSchema;
}

/** @internal */
export const DeploymentGetConfig2ImageUrl$inboundSchema: z.ZodType<
  DeploymentGetConfig2ImageUrl,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string().optional(),
  url: z.string(),
  detail: z.string().optional(),
});

/** @internal */
export type DeploymentGetConfig2ImageUrl$Outbound = {
  id?: string | undefined;
  url: string;
  detail?: string | undefined;
};

/** @internal */
export const DeploymentGetConfig2ImageUrl$outboundSchema: z.ZodType<
  DeploymentGetConfig2ImageUrl$Outbound,
  z.ZodTypeDef,
  DeploymentGetConfig2ImageUrl
> = z.object({
  id: z.string().optional(),
  url: z.string(),
  detail: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeploymentGetConfig2ImageUrl$ {
  /** @deprecated use `DeploymentGetConfig2ImageUrl$inboundSchema` instead. */
  export const inboundSchema = DeploymentGetConfig2ImageUrl$inboundSchema;
  /** @deprecated use `DeploymentGetConfig2ImageUrl$outboundSchema` instead. */
  export const outboundSchema = DeploymentGetConfig2ImageUrl$outboundSchema;
  /** @deprecated use `DeploymentGetConfig2ImageUrl$Outbound` instead. */
  export type Outbound = DeploymentGetConfig2ImageUrl$Outbound;
}

export function deploymentGetConfig2ImageUrlToJSON(
  deploymentGetConfig2ImageUrl: DeploymentGetConfig2ImageUrl,
): string {
  return JSON.stringify(
    DeploymentGetConfig2ImageUrl$outboundSchema.parse(
      deploymentGetConfig2ImageUrl,
    ),
  );
}

export function deploymentGetConfig2ImageUrlFromJSON(
  jsonString: string,
): SafeParseResult<DeploymentGetConfig2ImageUrl, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DeploymentGetConfig2ImageUrl$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DeploymentGetConfig2ImageUrl' from JSON`,
  );
}

/** @internal */
export const DeploymentGetConfig2Deployments2$inboundSchema: z.ZodType<
  DeploymentGetConfig2Deployments2,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: DeploymentGetConfig2DeploymentsResponse200Type$inboundSchema,
  image_url: z.lazy(() => DeploymentGetConfig2ImageUrl$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "image_url": "imageUrl",
  });
});

/** @internal */
export type DeploymentGetConfig2Deployments2$Outbound = {
  type: string;
  image_url: DeploymentGetConfig2ImageUrl$Outbound;
};

/** @internal */
export const DeploymentGetConfig2Deployments2$outboundSchema: z.ZodType<
  DeploymentGetConfig2Deployments2$Outbound,
  z.ZodTypeDef,
  DeploymentGetConfig2Deployments2
> = z.object({
  type: DeploymentGetConfig2DeploymentsResponse200Type$outboundSchema,
  imageUrl: z.lazy(() => DeploymentGetConfig2ImageUrl$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    imageUrl: "image_url",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeploymentGetConfig2Deployments2$ {
  /** @deprecated use `DeploymentGetConfig2Deployments2$inboundSchema` instead. */
  export const inboundSchema = DeploymentGetConfig2Deployments2$inboundSchema;
  /** @deprecated use `DeploymentGetConfig2Deployments2$outboundSchema` instead. */
  export const outboundSchema = DeploymentGetConfig2Deployments2$outboundSchema;
  /** @deprecated use `DeploymentGetConfig2Deployments2$Outbound` instead. */
  export type Outbound = DeploymentGetConfig2Deployments2$Outbound;
}

export function deploymentGetConfig2Deployments2ToJSON(
  deploymentGetConfig2Deployments2: DeploymentGetConfig2Deployments2,
): string {
  return JSON.stringify(
    DeploymentGetConfig2Deployments2$outboundSchema.parse(
      deploymentGetConfig2Deployments2,
    ),
  );
}

export function deploymentGetConfig2Deployments2FromJSON(
  jsonString: string,
): SafeParseResult<DeploymentGetConfig2Deployments2, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DeploymentGetConfig2Deployments2$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DeploymentGetConfig2Deployments2' from JSON`,
  );
}

/** @internal */
export const DeploymentGetConfig2DeploymentsResponseType$inboundSchema:
  z.ZodNativeEnum<typeof DeploymentGetConfig2DeploymentsResponseType> = z
    .nativeEnum(DeploymentGetConfig2DeploymentsResponseType);

/** @internal */
export const DeploymentGetConfig2DeploymentsResponseType$outboundSchema:
  z.ZodNativeEnum<typeof DeploymentGetConfig2DeploymentsResponseType> =
    DeploymentGetConfig2DeploymentsResponseType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeploymentGetConfig2DeploymentsResponseType$ {
  /** @deprecated use `DeploymentGetConfig2DeploymentsResponseType$inboundSchema` instead. */
  export const inboundSchema =
    DeploymentGetConfig2DeploymentsResponseType$inboundSchema;
  /** @deprecated use `DeploymentGetConfig2DeploymentsResponseType$outboundSchema` instead. */
  export const outboundSchema =
    DeploymentGetConfig2DeploymentsResponseType$outboundSchema;
}

/** @internal */
export const DeploymentGetConfig21$inboundSchema: z.ZodType<
  DeploymentGetConfig21,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: DeploymentGetConfig2DeploymentsResponseType$inboundSchema,
  text: z.string(),
});

/** @internal */
export type DeploymentGetConfig21$Outbound = {
  type: string;
  text: string;
};

/** @internal */
export const DeploymentGetConfig21$outboundSchema: z.ZodType<
  DeploymentGetConfig21$Outbound,
  z.ZodTypeDef,
  DeploymentGetConfig21
> = z.object({
  type: DeploymentGetConfig2DeploymentsResponseType$outboundSchema,
  text: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeploymentGetConfig21$ {
  /** @deprecated use `DeploymentGetConfig21$inboundSchema` instead. */
  export const inboundSchema = DeploymentGetConfig21$inboundSchema;
  /** @deprecated use `DeploymentGetConfig21$outboundSchema` instead. */
  export const outboundSchema = DeploymentGetConfig21$outboundSchema;
  /** @deprecated use `DeploymentGetConfig21$Outbound` instead. */
  export type Outbound = DeploymentGetConfig21$Outbound;
}

export function deploymentGetConfig21ToJSON(
  deploymentGetConfig21: DeploymentGetConfig21,
): string {
  return JSON.stringify(
    DeploymentGetConfig21$outboundSchema.parse(deploymentGetConfig21),
  );
}

export function deploymentGetConfig21FromJSON(
  jsonString: string,
): SafeParseResult<DeploymentGetConfig21, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DeploymentGetConfig21$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DeploymentGetConfig21' from JSON`,
  );
}

/** @internal */
export const DeploymentGetConfigContent2$inboundSchema: z.ZodType<
  DeploymentGetConfigContent2,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => DeploymentGetConfig21$inboundSchema),
  z.lazy(() => DeploymentGetConfig2Deployments2$inboundSchema),
]);

/** @internal */
export type DeploymentGetConfigContent2$Outbound =
  | DeploymentGetConfig21$Outbound
  | DeploymentGetConfig2Deployments2$Outbound;

/** @internal */
export const DeploymentGetConfigContent2$outboundSchema: z.ZodType<
  DeploymentGetConfigContent2$Outbound,
  z.ZodTypeDef,
  DeploymentGetConfigContent2
> = z.union([
  z.lazy(() => DeploymentGetConfig21$outboundSchema),
  z.lazy(() => DeploymentGetConfig2Deployments2$outboundSchema),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeploymentGetConfigContent2$ {
  /** @deprecated use `DeploymentGetConfigContent2$inboundSchema` instead. */
  export const inboundSchema = DeploymentGetConfigContent2$inboundSchema;
  /** @deprecated use `DeploymentGetConfigContent2$outboundSchema` instead. */
  export const outboundSchema = DeploymentGetConfigContent2$outboundSchema;
  /** @deprecated use `DeploymentGetConfigContent2$Outbound` instead. */
  export type Outbound = DeploymentGetConfigContent2$Outbound;
}

export function deploymentGetConfigContent2ToJSON(
  deploymentGetConfigContent2: DeploymentGetConfigContent2,
): string {
  return JSON.stringify(
    DeploymentGetConfigContent2$outboundSchema.parse(
      deploymentGetConfigContent2,
    ),
  );
}

export function deploymentGetConfigContent2FromJSON(
  jsonString: string,
): SafeParseResult<DeploymentGetConfigContent2, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DeploymentGetConfigContent2$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DeploymentGetConfigContent2' from JSON`,
  );
}

/** @internal */
export const DeploymentGetConfigDeploymentsContent$inboundSchema: z.ZodType<
  DeploymentGetConfigDeploymentsContent,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.string(),
  z.array(z.union([
    z.lazy(() => DeploymentGetConfig21$inboundSchema),
    z.lazy(() => DeploymentGetConfig2Deployments2$inboundSchema),
  ])),
]);

/** @internal */
export type DeploymentGetConfigDeploymentsContent$Outbound =
  | string
  | Array<
    DeploymentGetConfig21$Outbound | DeploymentGetConfig2Deployments2$Outbound
  >;

/** @internal */
export const DeploymentGetConfigDeploymentsContent$outboundSchema: z.ZodType<
  DeploymentGetConfigDeploymentsContent$Outbound,
  z.ZodTypeDef,
  DeploymentGetConfigDeploymentsContent
> = z.union([
  z.string(),
  z.array(z.union([
    z.lazy(() => DeploymentGetConfig21$outboundSchema),
    z.lazy(() => DeploymentGetConfig2Deployments2$outboundSchema),
  ])),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeploymentGetConfigDeploymentsContent$ {
  /** @deprecated use `DeploymentGetConfigDeploymentsContent$inboundSchema` instead. */
  export const inboundSchema =
    DeploymentGetConfigDeploymentsContent$inboundSchema;
  /** @deprecated use `DeploymentGetConfigDeploymentsContent$outboundSchema` instead. */
  export const outboundSchema =
    DeploymentGetConfigDeploymentsContent$outboundSchema;
  /** @deprecated use `DeploymentGetConfigDeploymentsContent$Outbound` instead. */
  export type Outbound = DeploymentGetConfigDeploymentsContent$Outbound;
}

export function deploymentGetConfigDeploymentsContentToJSON(
  deploymentGetConfigDeploymentsContent: DeploymentGetConfigDeploymentsContent,
): string {
  return JSON.stringify(
    DeploymentGetConfigDeploymentsContent$outboundSchema.parse(
      deploymentGetConfigDeploymentsContent,
    ),
  );
}

export function deploymentGetConfigDeploymentsContentFromJSON(
  jsonString: string,
): SafeParseResult<DeploymentGetConfigDeploymentsContent, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      DeploymentGetConfigDeploymentsContent$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DeploymentGetConfigDeploymentsContent' from JSON`,
  );
}

/** @internal */
export const DeploymentGetConfigDeploymentsResponse200ApplicationJSONType$inboundSchema:
  z.ZodNativeEnum<
    typeof DeploymentGetConfigDeploymentsResponse200ApplicationJSONType
  > = z.nativeEnum(
    DeploymentGetConfigDeploymentsResponse200ApplicationJSONType,
  );

/** @internal */
export const DeploymentGetConfigDeploymentsResponse200ApplicationJSONType$outboundSchema:
  z.ZodNativeEnum<
    typeof DeploymentGetConfigDeploymentsResponse200ApplicationJSONType
  > =
    DeploymentGetConfigDeploymentsResponse200ApplicationJSONType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeploymentGetConfigDeploymentsResponse200ApplicationJSONType$ {
  /** @deprecated use `DeploymentGetConfigDeploymentsResponse200ApplicationJSONType$inboundSchema` instead. */
  export const inboundSchema =
    DeploymentGetConfigDeploymentsResponse200ApplicationJSONType$inboundSchema;
  /** @deprecated use `DeploymentGetConfigDeploymentsResponse200ApplicationJSONType$outboundSchema` instead. */
  export const outboundSchema =
    DeploymentGetConfigDeploymentsResponse200ApplicationJSONType$outboundSchema;
}

/** @internal */
export const DeploymentGetConfigDeploymentsResponseFunction$inboundSchema:
  z.ZodType<
    DeploymentGetConfigDeploymentsResponseFunction,
    z.ZodTypeDef,
    unknown
  > = z.object({
    name: z.string(),
    arguments: z.string(),
  });

/** @internal */
export type DeploymentGetConfigDeploymentsResponseFunction$Outbound = {
  name: string;
  arguments: string;
};

/** @internal */
export const DeploymentGetConfigDeploymentsResponseFunction$outboundSchema:
  z.ZodType<
    DeploymentGetConfigDeploymentsResponseFunction$Outbound,
    z.ZodTypeDef,
    DeploymentGetConfigDeploymentsResponseFunction
  > = z.object({
    name: z.string(),
    arguments: z.string(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeploymentGetConfigDeploymentsResponseFunction$ {
  /** @deprecated use `DeploymentGetConfigDeploymentsResponseFunction$inboundSchema` instead. */
  export const inboundSchema =
    DeploymentGetConfigDeploymentsResponseFunction$inboundSchema;
  /** @deprecated use `DeploymentGetConfigDeploymentsResponseFunction$outboundSchema` instead. */
  export const outboundSchema =
    DeploymentGetConfigDeploymentsResponseFunction$outboundSchema;
  /** @deprecated use `DeploymentGetConfigDeploymentsResponseFunction$Outbound` instead. */
  export type Outbound =
    DeploymentGetConfigDeploymentsResponseFunction$Outbound;
}

export function deploymentGetConfigDeploymentsResponseFunctionToJSON(
  deploymentGetConfigDeploymentsResponseFunction:
    DeploymentGetConfigDeploymentsResponseFunction,
): string {
  return JSON.stringify(
    DeploymentGetConfigDeploymentsResponseFunction$outboundSchema.parse(
      deploymentGetConfigDeploymentsResponseFunction,
    ),
  );
}

export function deploymentGetConfigDeploymentsResponseFunctionFromJSON(
  jsonString: string,
): SafeParseResult<
  DeploymentGetConfigDeploymentsResponseFunction,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      DeploymentGetConfigDeploymentsResponseFunction$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'DeploymentGetConfigDeploymentsResponseFunction' from JSON`,
  );
}

/** @internal */
export const DeploymentGetConfigDeploymentsToolCalls$inboundSchema: z.ZodType<
  DeploymentGetConfigDeploymentsToolCalls,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string().optional(),
  index: z.number().optional(),
  type:
    DeploymentGetConfigDeploymentsResponse200ApplicationJSONType$inboundSchema,
  function: z.lazy(() =>
    DeploymentGetConfigDeploymentsResponseFunction$inboundSchema
  ),
});

/** @internal */
export type DeploymentGetConfigDeploymentsToolCalls$Outbound = {
  id?: string | undefined;
  index?: number | undefined;
  type: string;
  function: DeploymentGetConfigDeploymentsResponseFunction$Outbound;
};

/** @internal */
export const DeploymentGetConfigDeploymentsToolCalls$outboundSchema: z.ZodType<
  DeploymentGetConfigDeploymentsToolCalls$Outbound,
  z.ZodTypeDef,
  DeploymentGetConfigDeploymentsToolCalls
> = z.object({
  id: z.string().optional(),
  index: z.number().optional(),
  type:
    DeploymentGetConfigDeploymentsResponse200ApplicationJSONType$outboundSchema,
  function: z.lazy(() =>
    DeploymentGetConfigDeploymentsResponseFunction$outboundSchema
  ),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeploymentGetConfigDeploymentsToolCalls$ {
  /** @deprecated use `DeploymentGetConfigDeploymentsToolCalls$inboundSchema` instead. */
  export const inboundSchema =
    DeploymentGetConfigDeploymentsToolCalls$inboundSchema;
  /** @deprecated use `DeploymentGetConfigDeploymentsToolCalls$outboundSchema` instead. */
  export const outboundSchema =
    DeploymentGetConfigDeploymentsToolCalls$outboundSchema;
  /** @deprecated use `DeploymentGetConfigDeploymentsToolCalls$Outbound` instead. */
  export type Outbound = DeploymentGetConfigDeploymentsToolCalls$Outbound;
}

export function deploymentGetConfigDeploymentsToolCallsToJSON(
  deploymentGetConfigDeploymentsToolCalls:
    DeploymentGetConfigDeploymentsToolCalls,
): string {
  return JSON.stringify(
    DeploymentGetConfigDeploymentsToolCalls$outboundSchema.parse(
      deploymentGetConfigDeploymentsToolCalls,
    ),
  );
}

export function deploymentGetConfigDeploymentsToolCallsFromJSON(
  jsonString: string,
): SafeParseResult<
  DeploymentGetConfigDeploymentsToolCalls,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      DeploymentGetConfigDeploymentsToolCalls$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'DeploymentGetConfigDeploymentsToolCalls' from JSON`,
  );
}

/** @internal */
export const DeploymentGetConfigMessages$inboundSchema: z.ZodType<
  DeploymentGetConfigMessages,
  z.ZodTypeDef,
  unknown
> = z.object({
  role: DeploymentGetConfigDeploymentsRole$inboundSchema,
  content: z.union([
    z.string(),
    z.array(z.union([
      z.lazy(() => DeploymentGetConfig21$inboundSchema),
      z.lazy(() => DeploymentGetConfig2Deployments2$inboundSchema),
    ])),
  ]),
  tool_calls: z.array(
    z.lazy(() => DeploymentGetConfigDeploymentsToolCalls$inboundSchema),
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    "tool_calls": "toolCalls",
  });
});

/** @internal */
export type DeploymentGetConfigMessages$Outbound = {
  role: string;
  content:
    | string
    | Array<
      DeploymentGetConfig21$Outbound | DeploymentGetConfig2Deployments2$Outbound
    >;
  tool_calls?:
    | Array<DeploymentGetConfigDeploymentsToolCalls$Outbound>
    | undefined;
};

/** @internal */
export const DeploymentGetConfigMessages$outboundSchema: z.ZodType<
  DeploymentGetConfigMessages$Outbound,
  z.ZodTypeDef,
  DeploymentGetConfigMessages
> = z.object({
  role: DeploymentGetConfigDeploymentsRole$outboundSchema,
  content: z.union([
    z.string(),
    z.array(z.union([
      z.lazy(() => DeploymentGetConfig21$outboundSchema),
      z.lazy(() => DeploymentGetConfig2Deployments2$outboundSchema),
    ])),
  ]),
  toolCalls: z.array(
    z.lazy(() => DeploymentGetConfigDeploymentsToolCalls$outboundSchema),
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    toolCalls: "tool_calls",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeploymentGetConfigMessages$ {
  /** @deprecated use `DeploymentGetConfigMessages$inboundSchema` instead. */
  export const inboundSchema = DeploymentGetConfigMessages$inboundSchema;
  /** @deprecated use `DeploymentGetConfigMessages$outboundSchema` instead. */
  export const outboundSchema = DeploymentGetConfigMessages$outboundSchema;
  /** @deprecated use `DeploymentGetConfigMessages$Outbound` instead. */
  export type Outbound = DeploymentGetConfigMessages$Outbound;
}

export function deploymentGetConfigMessagesToJSON(
  deploymentGetConfigMessages: DeploymentGetConfigMessages,
): string {
  return JSON.stringify(
    DeploymentGetConfigMessages$outboundSchema.parse(
      deploymentGetConfigMessages,
    ),
  );
}

export function deploymentGetConfigMessagesFromJSON(
  jsonString: string,
): SafeParseResult<DeploymentGetConfigMessages, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DeploymentGetConfigMessages$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DeploymentGetConfigMessages' from JSON`,
  );
}

/** @internal */
export const DeploymentGetConfigFormat$inboundSchema: z.ZodNativeEnum<
  typeof DeploymentGetConfigFormat
> = z.nativeEnum(DeploymentGetConfigFormat);

/** @internal */
export const DeploymentGetConfigFormat$outboundSchema: z.ZodNativeEnum<
  typeof DeploymentGetConfigFormat
> = DeploymentGetConfigFormat$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeploymentGetConfigFormat$ {
  /** @deprecated use `DeploymentGetConfigFormat$inboundSchema` instead. */
  export const inboundSchema = DeploymentGetConfigFormat$inboundSchema;
  /** @deprecated use `DeploymentGetConfigFormat$outboundSchema` instead. */
  export const outboundSchema = DeploymentGetConfigFormat$outboundSchema;
}

/** @internal */
export const DeploymentGetConfigQuality$inboundSchema: z.ZodNativeEnum<
  typeof DeploymentGetConfigQuality
> = z.nativeEnum(DeploymentGetConfigQuality);

/** @internal */
export const DeploymentGetConfigQuality$outboundSchema: z.ZodNativeEnum<
  typeof DeploymentGetConfigQuality
> = DeploymentGetConfigQuality$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeploymentGetConfigQuality$ {
  /** @deprecated use `DeploymentGetConfigQuality$inboundSchema` instead. */
  export const inboundSchema = DeploymentGetConfigQuality$inboundSchema;
  /** @deprecated use `DeploymentGetConfigQuality$outboundSchema` instead. */
  export const outboundSchema = DeploymentGetConfigQuality$outboundSchema;
}

/** @internal */
export const DeploymentGetConfigResponseFormatType$inboundSchema:
  z.ZodNativeEnum<typeof DeploymentGetConfigResponseFormatType> = z.nativeEnum(
    DeploymentGetConfigResponseFormatType,
  );

/** @internal */
export const DeploymentGetConfigResponseFormatType$outboundSchema:
  z.ZodNativeEnum<typeof DeploymentGetConfigResponseFormatType> =
    DeploymentGetConfigResponseFormatType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeploymentGetConfigResponseFormatType$ {
  /** @deprecated use `DeploymentGetConfigResponseFormatType$inboundSchema` instead. */
  export const inboundSchema =
    DeploymentGetConfigResponseFormatType$inboundSchema;
  /** @deprecated use `DeploymentGetConfigResponseFormatType$outboundSchema` instead. */
  export const outboundSchema =
    DeploymentGetConfigResponseFormatType$outboundSchema;
}

/** @internal */
export const DeploymentGetConfigResponseFormat2$inboundSchema: z.ZodType<
  DeploymentGetConfigResponseFormat2,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: DeploymentGetConfigResponseFormatType$inboundSchema,
});

/** @internal */
export type DeploymentGetConfigResponseFormat2$Outbound = {
  type: string;
};

/** @internal */
export const DeploymentGetConfigResponseFormat2$outboundSchema: z.ZodType<
  DeploymentGetConfigResponseFormat2$Outbound,
  z.ZodTypeDef,
  DeploymentGetConfigResponseFormat2
> = z.object({
  type: DeploymentGetConfigResponseFormatType$outboundSchema,
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeploymentGetConfigResponseFormat2$ {
  /** @deprecated use `DeploymentGetConfigResponseFormat2$inboundSchema` instead. */
  export const inboundSchema = DeploymentGetConfigResponseFormat2$inboundSchema;
  /** @deprecated use `DeploymentGetConfigResponseFormat2$outboundSchema` instead. */
  export const outboundSchema =
    DeploymentGetConfigResponseFormat2$outboundSchema;
  /** @deprecated use `DeploymentGetConfigResponseFormat2$Outbound` instead. */
  export type Outbound = DeploymentGetConfigResponseFormat2$Outbound;
}

export function deploymentGetConfigResponseFormat2ToJSON(
  deploymentGetConfigResponseFormat2: DeploymentGetConfigResponseFormat2,
): string {
  return JSON.stringify(
    DeploymentGetConfigResponseFormat2$outboundSchema.parse(
      deploymentGetConfigResponseFormat2,
    ),
  );
}

export function deploymentGetConfigResponseFormat2FromJSON(
  jsonString: string,
): SafeParseResult<DeploymentGetConfigResponseFormat2, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      DeploymentGetConfigResponseFormat2$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DeploymentGetConfigResponseFormat2' from JSON`,
  );
}

/** @internal */
export const DeploymentGetConfigResponseFormatDeploymentsType$inboundSchema:
  z.ZodNativeEnum<typeof DeploymentGetConfigResponseFormatDeploymentsType> = z
    .nativeEnum(DeploymentGetConfigResponseFormatDeploymentsType);

/** @internal */
export const DeploymentGetConfigResponseFormatDeploymentsType$outboundSchema:
  z.ZodNativeEnum<typeof DeploymentGetConfigResponseFormatDeploymentsType> =
    DeploymentGetConfigResponseFormatDeploymentsType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeploymentGetConfigResponseFormatDeploymentsType$ {
  /** @deprecated use `DeploymentGetConfigResponseFormatDeploymentsType$inboundSchema` instead. */
  export const inboundSchema =
    DeploymentGetConfigResponseFormatDeploymentsType$inboundSchema;
  /** @deprecated use `DeploymentGetConfigResponseFormatDeploymentsType$outboundSchema` instead. */
  export const outboundSchema =
    DeploymentGetConfigResponseFormatDeploymentsType$outboundSchema;
}

/** @internal */
export const DeploymentGetConfigResponseFormatJsonSchema$inboundSchema:
  z.ZodType<
    DeploymentGetConfigResponseFormatJsonSchema,
    z.ZodTypeDef,
    unknown
  > = z.object({
    name: z.string(),
    strict: z.boolean(),
    schema: z.record(z.any()),
  });

/** @internal */
export type DeploymentGetConfigResponseFormatJsonSchema$Outbound = {
  name: string;
  strict: boolean;
  schema: { [k: string]: any };
};

/** @internal */
export const DeploymentGetConfigResponseFormatJsonSchema$outboundSchema:
  z.ZodType<
    DeploymentGetConfigResponseFormatJsonSchema$Outbound,
    z.ZodTypeDef,
    DeploymentGetConfigResponseFormatJsonSchema
  > = z.object({
    name: z.string(),
    strict: z.boolean(),
    schema: z.record(z.any()),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeploymentGetConfigResponseFormatJsonSchema$ {
  /** @deprecated use `DeploymentGetConfigResponseFormatJsonSchema$inboundSchema` instead. */
  export const inboundSchema =
    DeploymentGetConfigResponseFormatJsonSchema$inboundSchema;
  /** @deprecated use `DeploymentGetConfigResponseFormatJsonSchema$outboundSchema` instead. */
  export const outboundSchema =
    DeploymentGetConfigResponseFormatJsonSchema$outboundSchema;
  /** @deprecated use `DeploymentGetConfigResponseFormatJsonSchema$Outbound` instead. */
  export type Outbound = DeploymentGetConfigResponseFormatJsonSchema$Outbound;
}

export function deploymentGetConfigResponseFormatJsonSchemaToJSON(
  deploymentGetConfigResponseFormatJsonSchema:
    DeploymentGetConfigResponseFormatJsonSchema,
): string {
  return JSON.stringify(
    DeploymentGetConfigResponseFormatJsonSchema$outboundSchema.parse(
      deploymentGetConfigResponseFormatJsonSchema,
    ),
  );
}

export function deploymentGetConfigResponseFormatJsonSchemaFromJSON(
  jsonString: string,
): SafeParseResult<
  DeploymentGetConfigResponseFormatJsonSchema,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      DeploymentGetConfigResponseFormatJsonSchema$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'DeploymentGetConfigResponseFormatJsonSchema' from JSON`,
  );
}

/** @internal */
export const DeploymentGetConfigResponseFormat1$inboundSchema: z.ZodType<
  DeploymentGetConfigResponseFormat1,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: DeploymentGetConfigResponseFormatDeploymentsType$inboundSchema,
  json_schema: z.lazy(() =>
    DeploymentGetConfigResponseFormatJsonSchema$inboundSchema
  ),
}).transform((v) => {
  return remap$(v, {
    "json_schema": "jsonSchema",
  });
});

/** @internal */
export type DeploymentGetConfigResponseFormat1$Outbound = {
  type: string;
  json_schema: DeploymentGetConfigResponseFormatJsonSchema$Outbound;
};

/** @internal */
export const DeploymentGetConfigResponseFormat1$outboundSchema: z.ZodType<
  DeploymentGetConfigResponseFormat1$Outbound,
  z.ZodTypeDef,
  DeploymentGetConfigResponseFormat1
> = z.object({
  type: DeploymentGetConfigResponseFormatDeploymentsType$outboundSchema,
  jsonSchema: z.lazy(() =>
    DeploymentGetConfigResponseFormatJsonSchema$outboundSchema
  ),
}).transform((v) => {
  return remap$(v, {
    jsonSchema: "json_schema",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeploymentGetConfigResponseFormat1$ {
  /** @deprecated use `DeploymentGetConfigResponseFormat1$inboundSchema` instead. */
  export const inboundSchema = DeploymentGetConfigResponseFormat1$inboundSchema;
  /** @deprecated use `DeploymentGetConfigResponseFormat1$outboundSchema` instead. */
  export const outboundSchema =
    DeploymentGetConfigResponseFormat1$outboundSchema;
  /** @deprecated use `DeploymentGetConfigResponseFormat1$Outbound` instead. */
  export type Outbound = DeploymentGetConfigResponseFormat1$Outbound;
}

export function deploymentGetConfigResponseFormat1ToJSON(
  deploymentGetConfigResponseFormat1: DeploymentGetConfigResponseFormat1,
): string {
  return JSON.stringify(
    DeploymentGetConfigResponseFormat1$outboundSchema.parse(
      deploymentGetConfigResponseFormat1,
    ),
  );
}

export function deploymentGetConfigResponseFormat1FromJSON(
  jsonString: string,
): SafeParseResult<DeploymentGetConfigResponseFormat1, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      DeploymentGetConfigResponseFormat1$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DeploymentGetConfigResponseFormat1' from JSON`,
  );
}

/** @internal */
export const DeploymentGetConfigResponseFormat$inboundSchema: z.ZodType<
  DeploymentGetConfigResponseFormat,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => DeploymentGetConfigResponseFormat2$inboundSchema),
  z.lazy(() => DeploymentGetConfigResponseFormat1$inboundSchema),
]);

/** @internal */
export type DeploymentGetConfigResponseFormat$Outbound =
  | DeploymentGetConfigResponseFormat2$Outbound
  | DeploymentGetConfigResponseFormat1$Outbound;

/** @internal */
export const DeploymentGetConfigResponseFormat$outboundSchema: z.ZodType<
  DeploymentGetConfigResponseFormat$Outbound,
  z.ZodTypeDef,
  DeploymentGetConfigResponseFormat
> = z.union([
  z.lazy(() => DeploymentGetConfigResponseFormat2$outboundSchema),
  z.lazy(() => DeploymentGetConfigResponseFormat1$outboundSchema),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeploymentGetConfigResponseFormat$ {
  /** @deprecated use `DeploymentGetConfigResponseFormat$inboundSchema` instead. */
  export const inboundSchema = DeploymentGetConfigResponseFormat$inboundSchema;
  /** @deprecated use `DeploymentGetConfigResponseFormat$outboundSchema` instead. */
  export const outboundSchema =
    DeploymentGetConfigResponseFormat$outboundSchema;
  /** @deprecated use `DeploymentGetConfigResponseFormat$Outbound` instead. */
  export type Outbound = DeploymentGetConfigResponseFormat$Outbound;
}

export function deploymentGetConfigResponseFormatToJSON(
  deploymentGetConfigResponseFormat: DeploymentGetConfigResponseFormat,
): string {
  return JSON.stringify(
    DeploymentGetConfigResponseFormat$outboundSchema.parse(
      deploymentGetConfigResponseFormat,
    ),
  );
}

export function deploymentGetConfigResponseFormatFromJSON(
  jsonString: string,
): SafeParseResult<DeploymentGetConfigResponseFormat, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DeploymentGetConfigResponseFormat$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DeploymentGetConfigResponseFormat' from JSON`,
  );
}

/** @internal */
export const DeploymentGetConfigPhotoRealVersion$inboundSchema: z.ZodNativeEnum<
  typeof DeploymentGetConfigPhotoRealVersion
> = z.nativeEnum(DeploymentGetConfigPhotoRealVersion);

/** @internal */
export const DeploymentGetConfigPhotoRealVersion$outboundSchema:
  z.ZodNativeEnum<typeof DeploymentGetConfigPhotoRealVersion> =
    DeploymentGetConfigPhotoRealVersion$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeploymentGetConfigPhotoRealVersion$ {
  /** @deprecated use `DeploymentGetConfigPhotoRealVersion$inboundSchema` instead. */
  export const inboundSchema =
    DeploymentGetConfigPhotoRealVersion$inboundSchema;
  /** @deprecated use `DeploymentGetConfigPhotoRealVersion$outboundSchema` instead. */
  export const outboundSchema =
    DeploymentGetConfigPhotoRealVersion$outboundSchema;
}

/** @internal */
export const DeploymentGetConfigEncodingFormat$inboundSchema: z.ZodNativeEnum<
  typeof DeploymentGetConfigEncodingFormat
> = z.nativeEnum(DeploymentGetConfigEncodingFormat);

/** @internal */
export const DeploymentGetConfigEncodingFormat$outboundSchema: z.ZodNativeEnum<
  typeof DeploymentGetConfigEncodingFormat
> = DeploymentGetConfigEncodingFormat$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeploymentGetConfigEncodingFormat$ {
  /** @deprecated use `DeploymentGetConfigEncodingFormat$inboundSchema` instead. */
  export const inboundSchema = DeploymentGetConfigEncodingFormat$inboundSchema;
  /** @deprecated use `DeploymentGetConfigEncodingFormat$outboundSchema` instead. */
  export const outboundSchema =
    DeploymentGetConfigEncodingFormat$outboundSchema;
}

/** @internal */
export const ParametersT$inboundSchema: z.ZodType<
  ParametersT,
  z.ZodTypeDef,
  unknown
> = z.object({
  temperature: z.number().optional(),
  maxTokens: z.number().optional(),
  topK: z.number().optional(),
  topP: z.number().optional(),
  frequencyPenalty: z.number().optional(),
  presencePenalty: z.number().optional(),
  numImages: z.number().optional(),
  seed: z.number().optional(),
  format: DeploymentGetConfigFormat$inboundSchema.optional(),
  dimensions: z.string().optional(),
  quality: DeploymentGetConfigQuality$inboundSchema.optional(),
  style: z.string().optional(),
  responseFormat: z.nullable(
    z.union([
      z.lazy(() => DeploymentGetConfigResponseFormat2$inboundSchema),
      z.lazy(() => DeploymentGetConfigResponseFormat1$inboundSchema),
    ]),
  ).optional(),
  photoRealVersion: DeploymentGetConfigPhotoRealVersion$inboundSchema
    .optional(),
  encoding_format: DeploymentGetConfigEncodingFormat$inboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    "encoding_format": "encodingFormat",
  });
});

/** @internal */
export type ParametersT$Outbound = {
  temperature?: number | undefined;
  maxTokens?: number | undefined;
  topK?: number | undefined;
  topP?: number | undefined;
  frequencyPenalty?: number | undefined;
  presencePenalty?: number | undefined;
  numImages?: number | undefined;
  seed?: number | undefined;
  format?: string | undefined;
  dimensions?: string | undefined;
  quality?: string | undefined;
  style?: string | undefined;
  responseFormat?:
    | DeploymentGetConfigResponseFormat2$Outbound
    | DeploymentGetConfigResponseFormat1$Outbound
    | null
    | undefined;
  photoRealVersion?: string | undefined;
  encoding_format?: string | undefined;
};

/** @internal */
export const ParametersT$outboundSchema: z.ZodType<
  ParametersT$Outbound,
  z.ZodTypeDef,
  ParametersT
> = z.object({
  temperature: z.number().optional(),
  maxTokens: z.number().optional(),
  topK: z.number().optional(),
  topP: z.number().optional(),
  frequencyPenalty: z.number().optional(),
  presencePenalty: z.number().optional(),
  numImages: z.number().optional(),
  seed: z.number().optional(),
  format: DeploymentGetConfigFormat$outboundSchema.optional(),
  dimensions: z.string().optional(),
  quality: DeploymentGetConfigQuality$outboundSchema.optional(),
  style: z.string().optional(),
  responseFormat: z.nullable(
    z.union([
      z.lazy(() => DeploymentGetConfigResponseFormat2$outboundSchema),
      z.lazy(() => DeploymentGetConfigResponseFormat1$outboundSchema),
    ]),
  ).optional(),
  photoRealVersion: DeploymentGetConfigPhotoRealVersion$outboundSchema
    .optional(),
  encodingFormat: DeploymentGetConfigEncodingFormat$outboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    encodingFormat: "encoding_format",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ParametersT$ {
  /** @deprecated use `ParametersT$inboundSchema` instead. */
  export const inboundSchema = ParametersT$inboundSchema;
  /** @deprecated use `ParametersT$outboundSchema` instead. */
  export const outboundSchema = ParametersT$outboundSchema;
  /** @deprecated use `ParametersT$Outbound` instead. */
  export type Outbound = ParametersT$Outbound;
}

export function parametersTToJSON(parametersT: ParametersT): string {
  return JSON.stringify(ParametersT$outboundSchema.parse(parametersT));
}

export function parametersTFromJSON(
  jsonString: string,
): SafeParseResult<ParametersT, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ParametersT$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ParametersT' from JSON`,
  );
}

/** @internal */
export const DeploymentGetConfigDeploymentsResponse200Type$inboundSchema:
  z.ZodNativeEnum<typeof DeploymentGetConfigDeploymentsResponse200Type> = z
    .nativeEnum(DeploymentGetConfigDeploymentsResponse200Type);

/** @internal */
export const DeploymentGetConfigDeploymentsResponse200Type$outboundSchema:
  z.ZodNativeEnum<typeof DeploymentGetConfigDeploymentsResponse200Type> =
    DeploymentGetConfigDeploymentsResponse200Type$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeploymentGetConfigDeploymentsResponse200Type$ {
  /** @deprecated use `DeploymentGetConfigDeploymentsResponse200Type$inboundSchema` instead. */
  export const inboundSchema =
    DeploymentGetConfigDeploymentsResponse200Type$inboundSchema;
  /** @deprecated use `DeploymentGetConfigDeploymentsResponse200Type$outboundSchema` instead. */
  export const outboundSchema =
    DeploymentGetConfigDeploymentsResponse200Type$outboundSchema;
}

/** @internal */
export const DeploymentGetConfigDeploymentsFunction$inboundSchema: z.ZodType<
  DeploymentGetConfigDeploymentsFunction,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.string(),
  description: z.string().optional(),
  parameters: z.record(z.any()).optional(),
});

/** @internal */
export type DeploymentGetConfigDeploymentsFunction$Outbound = {
  name: string;
  description?: string | undefined;
  parameters?: { [k: string]: any } | undefined;
};

/** @internal */
export const DeploymentGetConfigDeploymentsFunction$outboundSchema: z.ZodType<
  DeploymentGetConfigDeploymentsFunction$Outbound,
  z.ZodTypeDef,
  DeploymentGetConfigDeploymentsFunction
> = z.object({
  name: z.string(),
  description: z.string().optional(),
  parameters: z.record(z.any()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeploymentGetConfigDeploymentsFunction$ {
  /** @deprecated use `DeploymentGetConfigDeploymentsFunction$inboundSchema` instead. */
  export const inboundSchema =
    DeploymentGetConfigDeploymentsFunction$inboundSchema;
  /** @deprecated use `DeploymentGetConfigDeploymentsFunction$outboundSchema` instead. */
  export const outboundSchema =
    DeploymentGetConfigDeploymentsFunction$outboundSchema;
  /** @deprecated use `DeploymentGetConfigDeploymentsFunction$Outbound` instead. */
  export type Outbound = DeploymentGetConfigDeploymentsFunction$Outbound;
}

export function deploymentGetConfigDeploymentsFunctionToJSON(
  deploymentGetConfigDeploymentsFunction:
    DeploymentGetConfigDeploymentsFunction,
): string {
  return JSON.stringify(
    DeploymentGetConfigDeploymentsFunction$outboundSchema.parse(
      deploymentGetConfigDeploymentsFunction,
    ),
  );
}

export function deploymentGetConfigDeploymentsFunctionFromJSON(
  jsonString: string,
): SafeParseResult<DeploymentGetConfigDeploymentsFunction, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      DeploymentGetConfigDeploymentsFunction$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DeploymentGetConfigDeploymentsFunction' from JSON`,
  );
}

/** @internal */
export const Tools$inboundSchema: z.ZodType<Tools, z.ZodTypeDef, unknown> = z
  .object({
    type: DeploymentGetConfigDeploymentsResponse200Type$inboundSchema,
    function: z.lazy(() =>
      DeploymentGetConfigDeploymentsFunction$inboundSchema
    ),
  });

/** @internal */
export type Tools$Outbound = {
  type: string;
  function: DeploymentGetConfigDeploymentsFunction$Outbound;
};

/** @internal */
export const Tools$outboundSchema: z.ZodType<
  Tools$Outbound,
  z.ZodTypeDef,
  Tools
> = z.object({
  type: DeploymentGetConfigDeploymentsResponse200Type$outboundSchema,
  function: z.lazy(() => DeploymentGetConfigDeploymentsFunction$outboundSchema),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Tools$ {
  /** @deprecated use `Tools$inboundSchema` instead. */
  export const inboundSchema = Tools$inboundSchema;
  /** @deprecated use `Tools$outboundSchema` instead. */
  export const outboundSchema = Tools$outboundSchema;
  /** @deprecated use `Tools$Outbound` instead. */
  export type Outbound = Tools$Outbound;
}

export function toolsToJSON(tools: Tools): string {
  return JSON.stringify(Tools$outboundSchema.parse(tools));
}

export function toolsFromJSON(
  jsonString: string,
): SafeParseResult<Tools, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Tools$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Tools' from JSON`,
  );
}

/** @internal */
export const DeploymentGetConfigResponseBody$inboundSchema: z.ZodType<
  DeploymentGetConfigResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  provider: z.string(),
  model: z.string(),
  type: DeploymentGetConfigDeploymentsResponseType$inboundSchema.optional(),
  version: z.string(),
  messages: z.array(z.lazy(() => DeploymentGetConfigMessages$inboundSchema)),
  parameters: z.lazy(() => ParametersT$inboundSchema),
  tools: z.array(z.lazy(() => Tools$inboundSchema)).optional(),
});

/** @internal */
export type DeploymentGetConfigResponseBody$Outbound = {
  id: string;
  provider: string;
  model: string;
  type?: string | undefined;
  version: string;
  messages: Array<DeploymentGetConfigMessages$Outbound>;
  parameters: ParametersT$Outbound;
  tools?: Array<Tools$Outbound> | undefined;
};

/** @internal */
export const DeploymentGetConfigResponseBody$outboundSchema: z.ZodType<
  DeploymentGetConfigResponseBody$Outbound,
  z.ZodTypeDef,
  DeploymentGetConfigResponseBody
> = z.object({
  id: z.string(),
  provider: z.string(),
  model: z.string(),
  type: DeploymentGetConfigDeploymentsResponseType$outboundSchema.optional(),
  version: z.string(),
  messages: z.array(z.lazy(() => DeploymentGetConfigMessages$outboundSchema)),
  parameters: z.lazy(() => ParametersT$outboundSchema),
  tools: z.array(z.lazy(() => Tools$outboundSchema)).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeploymentGetConfigResponseBody$ {
  /** @deprecated use `DeploymentGetConfigResponseBody$inboundSchema` instead. */
  export const inboundSchema = DeploymentGetConfigResponseBody$inboundSchema;
  /** @deprecated use `DeploymentGetConfigResponseBody$outboundSchema` instead. */
  export const outboundSchema = DeploymentGetConfigResponseBody$outboundSchema;
  /** @deprecated use `DeploymentGetConfigResponseBody$Outbound` instead. */
  export type Outbound = DeploymentGetConfigResponseBody$Outbound;
}

export function deploymentGetConfigResponseBodyToJSON(
  deploymentGetConfigResponseBody: DeploymentGetConfigResponseBody,
): string {
  return JSON.stringify(
    DeploymentGetConfigResponseBody$outboundSchema.parse(
      deploymentGetConfigResponseBody,
    ),
  );
}

export function deploymentGetConfigResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<DeploymentGetConfigResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DeploymentGetConfigResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DeploymentGetConfigResponseBody' from JSON`,
  );
}
