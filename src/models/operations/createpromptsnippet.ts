/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * The type of the model
 */
export const ModelType = {
  Chat: "chat",
  Completion: "completion",
  Embedding: "embedding",
  Vision: "vision",
  Image: "image",
  Tts: "tts",
  Stt: "stt",
  Rerank: "rerank",
  Moderations: "moderations",
} as const;
/**
 * The type of the model
 */
export type ModelType = ClosedEnum<typeof ModelType>;

/**
 * Only supported on `image` models.
 */
export const Format = {
  Url: "url",
  B64Json: "b64_json",
  Text: "text",
  JsonObject: "json_object",
} as const;
/**
 * Only supported on `image` models.
 */
export type Format = ClosedEnum<typeof Format>;

/**
 * Only supported on `image` models.
 */
export const Quality = {
  Standard: "standard",
  Hd: "hd",
} as const;
/**
 * Only supported on `image` models.
 */
export type Quality = ClosedEnum<typeof Quality>;

export const CreatePromptSnippetResponseFormatType = {
  JsonObject: "json_object",
} as const;
export type CreatePromptSnippetResponseFormatType = ClosedEnum<
  typeof CreatePromptSnippetResponseFormatType
>;

export type ResponseFormat2 = {
  type: CreatePromptSnippetResponseFormatType;
};

export const ResponseFormatType = {
  JsonSchema: "json_schema",
} as const;
export type ResponseFormatType = ClosedEnum<typeof ResponseFormatType>;

export type JsonSchema = {
  name: string;
  strict: boolean;
  schema: { [k: string]: any };
};

export type ResponseFormat1 = {
  type: ResponseFormatType;
  jsonSchema: JsonSchema;
};

/**
 * An object specifying the format that the model must output.
 *
 * @remarks
 *
 *  Setting to `{ "type": "json_schema", "json_schema": {...} }` enables Structured Outputs which ensures the model will match your supplied JSON schema
 *
 *  Setting to `{ "type": "json_object" }` enables JSON mode, which ensures the message the model generates is valid JSON.
 *
 * Important: when using JSON mode, you must also instruct the model to produce JSON yourself via a system or user message. Without this, the model may generate an unending stream of whitespace until the generation reaches the token limit, resulting in a long-running and seemingly "stuck" request. Also note that the message content may be partially cut off if finish_reason="length", which indicates the generation exceeded max_tokens or the conversation exceeded the max context length.
 */
export type ResponseFormat = ResponseFormat2 | ResponseFormat1;

/**
 * The version of photoReal to use. Must be v1 or v2. Only available for `leonardoai` provider
 */
export const PhotoRealVersion = {
  V1: "v1",
  V2: "v2",
} as const;
/**
 * The version of photoReal to use. Must be v1 or v2. Only available for `leonardoai` provider
 */
export type PhotoRealVersion = ClosedEnum<typeof PhotoRealVersion>;

/**
 * The format to return the embeddings
 */
export const EncodingFormat = {
  Float: "float",
  Base64: "base64",
} as const;
/**
 * The format to return the embeddings
 */
export type EncodingFormat = ClosedEnum<typeof EncodingFormat>;

/**
 * Constrains effort on reasoning for reasoning models. Reducing reasoning effort can result in faster responses and fewer tokens used on reasoning in a response.
 */
export const ReasoningEffort = {
  Low: "low",
  Medium: "medium",
  High: "high",
} as const;
/**
 * Constrains effort on reasoning for reasoning models. Reducing reasoning effort can result in faster responses and fewer tokens used on reasoning in a response.
 */
export type ReasoningEffort = ClosedEnum<typeof ReasoningEffort>;

/**
 * Model Parameters: Not all parameters apply to every model
 */
export type ModelParameters = {
  /**
   * Only supported on `chat` and `completion` models.
   */
  temperature?: number | undefined;
  /**
   * Only supported on `chat` and `completion` models.
   */
  maxTokens?: number | undefined;
  /**
   * Only supported on `chat` and `completion` models.
   */
  topK?: number | undefined;
  /**
   * Only supported on `chat` and `completion` models.
   */
  topP?: number | undefined;
  /**
   * Only supported on `chat` and `completion` models.
   */
  frequencyPenalty?: number | undefined;
  /**
   * Only supported on `chat` and `completion` models.
   */
  presencePenalty?: number | undefined;
  /**
   * Only supported on `image` models.
   */
  numImages?: number | undefined;
  /**
   * Best effort deterministic seed for the model. Currently only OpenAI models support these
   */
  seed?: number | undefined;
  /**
   * Only supported on `image` models.
   */
  format?: Format | undefined;
  /**
   * Only supported on `image` models.
   */
  dimensions?: string | undefined;
  /**
   * Only supported on `image` models.
   */
  quality?: Quality | undefined;
  /**
   * Only supported on `image` models.
   */
  style?: string | undefined;
  /**
   * An object specifying the format that the model must output.
   *
   * @remarks
   *
   *  Setting to `{ "type": "json_schema", "json_schema": {...} }` enables Structured Outputs which ensures the model will match your supplied JSON schema
   *
   *  Setting to `{ "type": "json_object" }` enables JSON mode, which ensures the message the model generates is valid JSON.
   *
   * Important: when using JSON mode, you must also instruct the model to produce JSON yourself via a system or user message. Without this, the model may generate an unending stream of whitespace until the generation reaches the token limit, resulting in a long-running and seemingly "stuck" request. Also note that the message content may be partially cut off if finish_reason="length", which indicates the generation exceeded max_tokens or the conversation exceeded the max context length.
   */
  responseFormat?: ResponseFormat2 | ResponseFormat1 | null | undefined;
  /**
   * The version of photoReal to use. Must be v1 or v2. Only available for `leonardoai` provider
   */
  photoRealVersion?: PhotoRealVersion | undefined;
  /**
   * The format to return the embeddings
   */
  encodingFormat?: EncodingFormat | undefined;
  /**
   * Constrains effort on reasoning for reasoning models. Reducing reasoning effort can result in faster responses and fewer tokens used on reasoning in a response.
   */
  reasoningEffort?: ReasoningEffort | undefined;
};

export const Provider = {
  Cohere: "cohere",
  Openai: "openai",
  Anthropic: "anthropic",
  Huggingface: "huggingface",
  Replicate: "replicate",
  Google: "google",
  GoogleAi: "google-ai",
  Azure: "azure",
  Aws: "aws",
  Anyscale: "anyscale",
  Perplexity: "perplexity",
  Groq: "groq",
  Fal: "fal",
  Leonardoai: "leonardoai",
  Nvidia: "nvidia",
  Jina: "jina",
  Togetherai: "togetherai",
  Elevenlabs: "elevenlabs",
} as const;
export type Provider = ClosedEnum<typeof Provider>;

/**
 * The role of the prompt message
 */
export const CreatePromptSnippetRole = {
  System: "system",
  Assistant: "assistant",
  User: "user",
  Exception: "exception",
  Tool: "tool",
  Prompt: "prompt",
  Correction: "correction",
  ExpectedOutput: "expected_output",
} as const;
/**
 * The role of the prompt message
 */
export type CreatePromptSnippetRole = ClosedEnum<
  typeof CreatePromptSnippetRole
>;

export const CreatePromptSnippet2PromptSnippetsType = {
  ImageUrl: "image_url",
} as const;
export type CreatePromptSnippet2PromptSnippetsType = ClosedEnum<
  typeof CreatePromptSnippet2PromptSnippetsType
>;

export type CreatePromptSnippet2ImageUrl = {
  /**
   * Either a URL of the image or the base64 encoded data URI.
   */
  url: string;
  /**
   * Specifies the detail level of the image. Currently only supported with OpenAI models
   */
  detail?: string | undefined;
};

/**
 * The image part of the prompt message. Only supported with vision models.
 */
export type CreatePromptSnippet22 = {
  type: CreatePromptSnippet2PromptSnippetsType;
  imageUrl: CreatePromptSnippet2ImageUrl;
};

export const CreatePromptSnippet2Type = {
  Text: "text",
} as const;
export type CreatePromptSnippet2Type = ClosedEnum<
  typeof CreatePromptSnippet2Type
>;

/**
 * Text content part of a prompt message
 */
export type CreatePromptSnippet21 = {
  type: CreatePromptSnippet2Type;
  text: string;
};

export type CreatePromptSnippetContent2 =
  | CreatePromptSnippet21
  | CreatePromptSnippet22;

/**
 * The contents of the user message. Either the text content of the message or an array of content parts with a defined type, each can be of type `text` or `image_url` when passing in images. You can pass multiple images by adding multiple `image_url` content parts.
 */
export type CreatePromptSnippetContent =
  | string
  | Array<CreatePromptSnippet21 | CreatePromptSnippet22>;

export const CreatePromptSnippetType = {
  Function: "function",
} as const;
export type CreatePromptSnippetType = ClosedEnum<
  typeof CreatePromptSnippetType
>;

export type CreatePromptSnippetFunction = {
  name: string;
  /**
   * JSON string arguments for the functions
   */
  arguments: string;
};

export type CreatePromptSnippetToolCalls = {
  id?: string | undefined;
  index?: number | undefined;
  type: CreatePromptSnippetType;
  function: CreatePromptSnippetFunction;
};

export type CreatePromptSnippetMessages = {
  /**
   * The role of the prompt message
   */
  role: CreatePromptSnippetRole;
  /**
   * The contents of the user message. Either the text content of the message or an array of content parts with a defined type, each can be of type `text` or `image_url` when passing in images. You can pass multiple images by adding multiple `image_url` content parts.
   */
  content: string | Array<CreatePromptSnippet21 | CreatePromptSnippet22>;
  toolCalls?: Array<CreatePromptSnippetToolCalls> | undefined;
};

/**
 * A list of messages compatible with the openAI schema
 */
export type PromptConfig = {
  stream?: boolean | undefined;
  model?: string | undefined;
  /**
   * The type of the model
   */
  modelType?: ModelType | undefined;
  /**
   * Model Parameters: Not all parameters apply to every model
   */
  modelParameters?: ModelParameters | undefined;
  provider?: Provider | undefined;
  version?: string | undefined;
  messages: Array<CreatePromptSnippetMessages>;
};

export const UseCases = {
  Agents: "Agents",
  AgentsSimulations: "Agents simulations",
  APIInteraction: "API interaction",
  AutonomousAgents: "Autonomous Agents",
  Chatbots: "Chatbots",
  Classification: "Classification",
  CodeUnderstanding: "Code understanding",
  CodeWriting: "Code writing",
  DocumentsQA: "Documents QA",
  Conversation: "Conversation",
  Extraction: "Extraction",
  MultiModal: "Multi-modal",
  SelfChecking: "Self-checking",
  Sql: "SQL",
  Summarization: "Summarization",
  Tagging: "Tagging",
} as const;
export type UseCases = ClosedEnum<typeof UseCases>;

/**
 * The language that the prompt is written in. Use this field to categorize the prompt for your own purpose
 */
export const Language = {
  Chinese: "Chinese",
  Dutch: "Dutch",
  English: "English",
  French: "French",
  German: "German",
  Russian: "Russian",
  Spanish: "Spanish",
} as const;
/**
 * The language that the prompt is written in. Use this field to categorize the prompt for your own purpose
 */
export type Language = ClosedEnum<typeof Language>;

export type CreatePromptSnippetMetadata = {
  /**
   * A list of use cases that the prompt is meant to be used for. Use this field to categorize the prompt for your own purpose
   */
  useCases?: Array<UseCases> | undefined;
  /**
   * The language that the prompt is written in. Use this field to categorize the prompt for your own purpose
   */
  language?: Language | undefined;
};

export type CreatePromptSnippetRequestBody = {
  key: string;
  /**
   * The prompt snippet’s description, meant to be displayable in the UI. Use this field to optionally store a long form explanation of the prompt for your own purpose
   */
  description?: string | null | undefined;
  /**
   * A list of messages compatible with the openAI schema
   */
  promptConfig: PromptConfig;
  metadata?: CreatePromptSnippetMetadata | undefined;
  /**
   * The path where the entity is stored in the project structure. The first element of the path always represents the project name. Any subsequent path element after the project will be created as a folder in the project if it does not exists.
   */
  path: string;
};

export const Owner2 = {
  Vendor: "vendor",
} as const;
export type Owner2 = ClosedEnum<typeof Owner2>;

export type Owner = string | Owner2;

/**
 * The type of the model
 */
export const CreatePromptSnippetModelType = {
  Chat: "chat",
  Completion: "completion",
  Embedding: "embedding",
  Vision: "vision",
  Image: "image",
  Tts: "tts",
  Stt: "stt",
  Rerank: "rerank",
  Moderations: "moderations",
} as const;
/**
 * The type of the model
 */
export type CreatePromptSnippetModelType = ClosedEnum<
  typeof CreatePromptSnippetModelType
>;

/**
 * Only supported on `image` models.
 */
export const CreatePromptSnippetFormat = {
  Url: "url",
  B64Json: "b64_json",
  Text: "text",
  JsonObject: "json_object",
} as const;
/**
 * Only supported on `image` models.
 */
export type CreatePromptSnippetFormat = ClosedEnum<
  typeof CreatePromptSnippetFormat
>;

/**
 * Only supported on `image` models.
 */
export const CreatePromptSnippetQuality = {
  Standard: "standard",
  Hd: "hd",
} as const;
/**
 * Only supported on `image` models.
 */
export type CreatePromptSnippetQuality = ClosedEnum<
  typeof CreatePromptSnippetQuality
>;

export const CreatePromptSnippetResponseFormatPromptSnippetsResponseType = {
  JsonObject: "json_object",
} as const;
export type CreatePromptSnippetResponseFormatPromptSnippetsResponseType =
  ClosedEnum<
    typeof CreatePromptSnippetResponseFormatPromptSnippetsResponseType
  >;

export type CreatePromptSnippetResponseFormat2 = {
  type: CreatePromptSnippetResponseFormatPromptSnippetsResponseType;
};

export const CreatePromptSnippetResponseFormatPromptSnippetsType = {
  JsonSchema: "json_schema",
} as const;
export type CreatePromptSnippetResponseFormatPromptSnippetsType = ClosedEnum<
  typeof CreatePromptSnippetResponseFormatPromptSnippetsType
>;

export type CreatePromptSnippetResponseFormatJsonSchema = {
  name: string;
  strict: boolean;
  schema: { [k: string]: any };
};

export type CreatePromptSnippetResponseFormat1 = {
  type: CreatePromptSnippetResponseFormatPromptSnippetsType;
  jsonSchema: CreatePromptSnippetResponseFormatJsonSchema;
};

/**
 * An object specifying the format that the model must output.
 *
 * @remarks
 *
 *  Setting to `{ "type": "json_schema", "json_schema": {...} }` enables Structured Outputs which ensures the model will match your supplied JSON schema
 *
 *  Setting to `{ "type": "json_object" }` enables JSON mode, which ensures the message the model generates is valid JSON.
 *
 * Important: when using JSON mode, you must also instruct the model to produce JSON yourself via a system or user message. Without this, the model may generate an unending stream of whitespace until the generation reaches the token limit, resulting in a long-running and seemingly "stuck" request. Also note that the message content may be partially cut off if finish_reason="length", which indicates the generation exceeded max_tokens or the conversation exceeded the max context length.
 */
export type CreatePromptSnippetResponseFormat =
  | CreatePromptSnippetResponseFormat2
  | CreatePromptSnippetResponseFormat1;

/**
 * The version of photoReal to use. Must be v1 or v2. Only available for `leonardoai` provider
 */
export const CreatePromptSnippetPhotoRealVersion = {
  V1: "v1",
  V2: "v2",
} as const;
/**
 * The version of photoReal to use. Must be v1 or v2. Only available for `leonardoai` provider
 */
export type CreatePromptSnippetPhotoRealVersion = ClosedEnum<
  typeof CreatePromptSnippetPhotoRealVersion
>;

/**
 * The format to return the embeddings
 */
export const CreatePromptSnippetEncodingFormat = {
  Float: "float",
  Base64: "base64",
} as const;
/**
 * The format to return the embeddings
 */
export type CreatePromptSnippetEncodingFormat = ClosedEnum<
  typeof CreatePromptSnippetEncodingFormat
>;

/**
 * Constrains effort on reasoning for reasoning models. Reducing reasoning effort can result in faster responses and fewer tokens used on reasoning in a response.
 */
export const CreatePromptSnippetReasoningEffort = {
  Low: "low",
  Medium: "medium",
  High: "high",
} as const;
/**
 * Constrains effort on reasoning for reasoning models. Reducing reasoning effort can result in faster responses and fewer tokens used on reasoning in a response.
 */
export type CreatePromptSnippetReasoningEffort = ClosedEnum<
  typeof CreatePromptSnippetReasoningEffort
>;

/**
 * Model Parameters: Not all parameters apply to every model
 */
export type CreatePromptSnippetModelParameters = {
  /**
   * Only supported on `chat` and `completion` models.
   */
  temperature?: number | undefined;
  /**
   * Only supported on `chat` and `completion` models.
   */
  maxTokens?: number | undefined;
  /**
   * Only supported on `chat` and `completion` models.
   */
  topK?: number | undefined;
  /**
   * Only supported on `chat` and `completion` models.
   */
  topP?: number | undefined;
  /**
   * Only supported on `chat` and `completion` models.
   */
  frequencyPenalty?: number | undefined;
  /**
   * Only supported on `chat` and `completion` models.
   */
  presencePenalty?: number | undefined;
  /**
   * Only supported on `image` models.
   */
  numImages?: number | undefined;
  /**
   * Best effort deterministic seed for the model. Currently only OpenAI models support these
   */
  seed?: number | undefined;
  /**
   * Only supported on `image` models.
   */
  format?: CreatePromptSnippetFormat | undefined;
  /**
   * Only supported on `image` models.
   */
  dimensions?: string | undefined;
  /**
   * Only supported on `image` models.
   */
  quality?: CreatePromptSnippetQuality | undefined;
  /**
   * Only supported on `image` models.
   */
  style?: string | undefined;
  /**
   * An object specifying the format that the model must output.
   *
   * @remarks
   *
   *  Setting to `{ "type": "json_schema", "json_schema": {...} }` enables Structured Outputs which ensures the model will match your supplied JSON schema
   *
   *  Setting to `{ "type": "json_object" }` enables JSON mode, which ensures the message the model generates is valid JSON.
   *
   * Important: when using JSON mode, you must also instruct the model to produce JSON yourself via a system or user message. Without this, the model may generate an unending stream of whitespace until the generation reaches the token limit, resulting in a long-running and seemingly "stuck" request. Also note that the message content may be partially cut off if finish_reason="length", which indicates the generation exceeded max_tokens or the conversation exceeded the max context length.
   */
  responseFormat?:
    | CreatePromptSnippetResponseFormat2
    | CreatePromptSnippetResponseFormat1
    | null
    | undefined;
  /**
   * The version of photoReal to use. Must be v1 or v2. Only available for `leonardoai` provider
   */
  photoRealVersion?: CreatePromptSnippetPhotoRealVersion | undefined;
  /**
   * The format to return the embeddings
   */
  encodingFormat?: CreatePromptSnippetEncodingFormat | undefined;
  /**
   * Constrains effort on reasoning for reasoning models. Reducing reasoning effort can result in faster responses and fewer tokens used on reasoning in a response.
   */
  reasoningEffort?: CreatePromptSnippetReasoningEffort | undefined;
};

export const CreatePromptSnippetProvider = {
  Cohere: "cohere",
  Openai: "openai",
  Anthropic: "anthropic",
  Huggingface: "huggingface",
  Replicate: "replicate",
  Google: "google",
  GoogleAi: "google-ai",
  Azure: "azure",
  Aws: "aws",
  Anyscale: "anyscale",
  Perplexity: "perplexity",
  Groq: "groq",
  Fal: "fal",
  Leonardoai: "leonardoai",
  Nvidia: "nvidia",
  Jina: "jina",
  Togetherai: "togetherai",
  Elevenlabs: "elevenlabs",
} as const;
export type CreatePromptSnippetProvider = ClosedEnum<
  typeof CreatePromptSnippetProvider
>;

/**
 * The role of the prompt message
 */
export const CreatePromptSnippetPromptSnippetsRole = {
  System: "system",
  Assistant: "assistant",
  User: "user",
  Exception: "exception",
  Tool: "tool",
  Prompt: "prompt",
  Correction: "correction",
  ExpectedOutput: "expected_output",
} as const;
/**
 * The role of the prompt message
 */
export type CreatePromptSnippetPromptSnippetsRole = ClosedEnum<
  typeof CreatePromptSnippetPromptSnippetsRole
>;

export const CreatePromptSnippet2PromptSnippetsResponse200Type = {
  ImageUrl: "image_url",
} as const;
export type CreatePromptSnippet2PromptSnippetsResponse200Type = ClosedEnum<
  typeof CreatePromptSnippet2PromptSnippetsResponse200Type
>;

export type CreatePromptSnippet2PromptSnippetsImageUrl = {
  /**
   * The orq.ai id of the image
   */
  id?: string | undefined;
  /**
   * Either a URL of the image or the base64 encoded data URI.
   */
  url: string;
  /**
   * Specifies the detail level of the image. Currently only supported with OpenAI models
   */
  detail?: string | undefined;
};

/**
 * The image part of the prompt message. Only supported with vision models.
 */
export type CreatePromptSnippet2PromptSnippets2 = {
  type: CreatePromptSnippet2PromptSnippetsResponse200Type;
  imageUrl: CreatePromptSnippet2PromptSnippetsImageUrl;
};

export const CreatePromptSnippet2PromptSnippetsResponseType = {
  Text: "text",
} as const;
export type CreatePromptSnippet2PromptSnippetsResponseType = ClosedEnum<
  typeof CreatePromptSnippet2PromptSnippetsResponseType
>;

/**
 * Text content part of a prompt message
 */
export type CreatePromptSnippet2PromptSnippets1 = {
  type: CreatePromptSnippet2PromptSnippetsResponseType;
  text: string;
};

export type CreatePromptSnippetContentPromptSnippets2 =
  | CreatePromptSnippet2PromptSnippets1
  | CreatePromptSnippet2PromptSnippets2;

/**
 * The contents of the user message. Either the text content of the message or an array of content parts with a defined type, each can be of type `text` or `image_url` when passing in images. You can pass multiple images by adding multiple `image_url` content parts.
 */
export type CreatePromptSnippetPromptSnippetsContent =
  | string
  | Array<
    CreatePromptSnippet2PromptSnippets1 | CreatePromptSnippet2PromptSnippets2
  >;

export const CreatePromptSnippetPromptSnippetsResponseType = {
  Function: "function",
} as const;
export type CreatePromptSnippetPromptSnippetsResponseType = ClosedEnum<
  typeof CreatePromptSnippetPromptSnippetsResponseType
>;

export type CreatePromptSnippetPromptSnippetsFunction = {
  name: string;
  /**
   * JSON string arguments for the functions
   */
  arguments: string;
};

export type CreatePromptSnippetPromptSnippetsToolCalls = {
  id?: string | undefined;
  index?: number | undefined;
  type: CreatePromptSnippetPromptSnippetsResponseType;
  function: CreatePromptSnippetPromptSnippetsFunction;
};

export type CreatePromptSnippetPromptSnippetsMessages = {
  /**
   * The role of the prompt message
   */
  role: CreatePromptSnippetPromptSnippetsRole;
  /**
   * The contents of the user message. Either the text content of the message or an array of content parts with a defined type, each can be of type `text` or `image_url` when passing in images. You can pass multiple images by adding multiple `image_url` content parts.
   */
  content:
    | string
    | Array<
      CreatePromptSnippet2PromptSnippets1 | CreatePromptSnippet2PromptSnippets2
    >;
  toolCalls?: Array<CreatePromptSnippetPromptSnippetsToolCalls> | undefined;
};

/**
 * A list of messages compatible with the openAI schema
 */
export type CreatePromptSnippetPromptConfig = {
  stream?: boolean | undefined;
  model?: string | undefined;
  /**
   * The id of the resource
   */
  modelDbId?: string | undefined;
  /**
   * The type of the model
   */
  modelType?: CreatePromptSnippetModelType | undefined;
  /**
   * Model Parameters: Not all parameters apply to every model
   */
  modelParameters?: CreatePromptSnippetModelParameters | undefined;
  provider?: CreatePromptSnippetProvider | undefined;
  /**
   * The id of the resource
   */
  integrationId?: string | null | undefined;
  version?: string | undefined;
  messages: Array<CreatePromptSnippetPromptSnippetsMessages>;
};

export const CreatePromptSnippetUseCases = {
  Agents: "Agents",
  AgentsSimulations: "Agents simulations",
  APIInteraction: "API interaction",
  AutonomousAgents: "Autonomous Agents",
  Chatbots: "Chatbots",
  Classification: "Classification",
  CodeUnderstanding: "Code understanding",
  CodeWriting: "Code writing",
  DocumentsQA: "Documents QA",
  Conversation: "Conversation",
  Extraction: "Extraction",
  MultiModal: "Multi-modal",
  SelfChecking: "Self-checking",
  Sql: "SQL",
  Summarization: "Summarization",
  Tagging: "Tagging",
} as const;
export type CreatePromptSnippetUseCases = ClosedEnum<
  typeof CreatePromptSnippetUseCases
>;

/**
 * The language that the prompt is written in. Use this field to categorize the prompt for your own purpose
 */
export const CreatePromptSnippetLanguage = {
  Chinese: "Chinese",
  Dutch: "Dutch",
  English: "English",
  French: "French",
  German: "German",
  Russian: "Russian",
  Spanish: "Spanish",
} as const;
/**
 * The language that the prompt is written in. Use this field to categorize the prompt for your own purpose
 */
export type CreatePromptSnippetLanguage = ClosedEnum<
  typeof CreatePromptSnippetLanguage
>;

export type CreatePromptSnippetPromptSnippetsMetadata = {
  /**
   * A list of use cases that the prompt is meant to be used for. Use this field to categorize the prompt for your own purpose
   */
  useCases?: Array<CreatePromptSnippetUseCases> | undefined;
  /**
   * The language that the prompt is written in. Use this field to categorize the prompt for your own purpose
   */
  language?: CreatePromptSnippetLanguage | undefined;
};

export const CreatePromptSnippetPromptSnippetsType = {
  Snippet: "snippet",
} as const;
export type CreatePromptSnippetPromptSnippetsType = ClosedEnum<
  typeof CreatePromptSnippetPromptSnippetsType
>;

/**
 * The type of the model
 */
export const CreatePromptSnippetPromptSnippetsModelType = {
  Chat: "chat",
  Completion: "completion",
  Embedding: "embedding",
  Vision: "vision",
  Image: "image",
  Tts: "tts",
  Stt: "stt",
  Rerank: "rerank",
  Moderations: "moderations",
} as const;
/**
 * The type of the model
 */
export type CreatePromptSnippetPromptSnippetsModelType = ClosedEnum<
  typeof CreatePromptSnippetPromptSnippetsModelType
>;

/**
 * Only supported on `image` models.
 */
export const CreatePromptSnippetPromptSnippetsFormat = {
  Url: "url",
  B64Json: "b64_json",
  Text: "text",
  JsonObject: "json_object",
} as const;
/**
 * Only supported on `image` models.
 */
export type CreatePromptSnippetPromptSnippetsFormat = ClosedEnum<
  typeof CreatePromptSnippetPromptSnippetsFormat
>;

/**
 * Only supported on `image` models.
 */
export const CreatePromptSnippetPromptSnippetsQuality = {
  Standard: "standard",
  Hd: "hd",
} as const;
/**
 * Only supported on `image` models.
 */
export type CreatePromptSnippetPromptSnippetsQuality = ClosedEnum<
  typeof CreatePromptSnippetPromptSnippetsQuality
>;

export const CreatePromptSnippetResponseFormatPromptSnippetsResponse200ApplicationJSONType =
  {
    JsonObject: "json_object",
  } as const;
export type CreatePromptSnippetResponseFormatPromptSnippetsResponse200ApplicationJSONType =
  ClosedEnum<
    typeof CreatePromptSnippetResponseFormatPromptSnippetsResponse200ApplicationJSONType
  >;

export type CreatePromptSnippetResponseFormatPromptSnippets2 = {
  type:
    CreatePromptSnippetResponseFormatPromptSnippetsResponse200ApplicationJSONType;
};

export const CreatePromptSnippetResponseFormatPromptSnippetsResponse200Type = {
  JsonSchema: "json_schema",
} as const;
export type CreatePromptSnippetResponseFormatPromptSnippetsResponse200Type =
  ClosedEnum<
    typeof CreatePromptSnippetResponseFormatPromptSnippetsResponse200Type
  >;

export type CreatePromptSnippetResponseFormatPromptSnippetsJsonSchema = {
  name: string;
  strict: boolean;
  schema: { [k: string]: any };
};

export type CreatePromptSnippetResponseFormatPromptSnippets1 = {
  type: CreatePromptSnippetResponseFormatPromptSnippetsResponse200Type;
  jsonSchema: CreatePromptSnippetResponseFormatPromptSnippetsJsonSchema;
};

/**
 * An object specifying the format that the model must output.
 *
 * @remarks
 *
 *  Setting to `{ "type": "json_schema", "json_schema": {...} }` enables Structured Outputs which ensures the model will match your supplied JSON schema
 *
 *  Setting to `{ "type": "json_object" }` enables JSON mode, which ensures the message the model generates is valid JSON.
 *
 * Important: when using JSON mode, you must also instruct the model to produce JSON yourself via a system or user message. Without this, the model may generate an unending stream of whitespace until the generation reaches the token limit, resulting in a long-running and seemingly "stuck" request. Also note that the message content may be partially cut off if finish_reason="length", which indicates the generation exceeded max_tokens or the conversation exceeded the max context length.
 */
export type CreatePromptSnippetPromptSnippetsResponseFormat =
  | CreatePromptSnippetResponseFormatPromptSnippets2
  | CreatePromptSnippetResponseFormatPromptSnippets1;

/**
 * The version of photoReal to use. Must be v1 or v2. Only available for `leonardoai` provider
 */
export const CreatePromptSnippetPromptSnippetsPhotoRealVersion = {
  V1: "v1",
  V2: "v2",
} as const;
/**
 * The version of photoReal to use. Must be v1 or v2. Only available for `leonardoai` provider
 */
export type CreatePromptSnippetPromptSnippetsPhotoRealVersion = ClosedEnum<
  typeof CreatePromptSnippetPromptSnippetsPhotoRealVersion
>;

/**
 * The format to return the embeddings
 */
export const CreatePromptSnippetPromptSnippetsEncodingFormat = {
  Float: "float",
  Base64: "base64",
} as const;
/**
 * The format to return the embeddings
 */
export type CreatePromptSnippetPromptSnippetsEncodingFormat = ClosedEnum<
  typeof CreatePromptSnippetPromptSnippetsEncodingFormat
>;

/**
 * Constrains effort on reasoning for reasoning models. Reducing reasoning effort can result in faster responses and fewer tokens used on reasoning in a response.
 */
export const CreatePromptSnippetPromptSnippetsReasoningEffort = {
  Low: "low",
  Medium: "medium",
  High: "high",
} as const;
/**
 * Constrains effort on reasoning for reasoning models. Reducing reasoning effort can result in faster responses and fewer tokens used on reasoning in a response.
 */
export type CreatePromptSnippetPromptSnippetsReasoningEffort = ClosedEnum<
  typeof CreatePromptSnippetPromptSnippetsReasoningEffort
>;

/**
 * Model Parameters: Not all parameters apply to every model
 */
export type CreatePromptSnippetPromptSnippetsModelParameters = {
  /**
   * Only supported on `chat` and `completion` models.
   */
  temperature?: number | undefined;
  /**
   * Only supported on `chat` and `completion` models.
   */
  maxTokens?: number | undefined;
  /**
   * Only supported on `chat` and `completion` models.
   */
  topK?: number | undefined;
  /**
   * Only supported on `chat` and `completion` models.
   */
  topP?: number | undefined;
  /**
   * Only supported on `chat` and `completion` models.
   */
  frequencyPenalty?: number | undefined;
  /**
   * Only supported on `chat` and `completion` models.
   */
  presencePenalty?: number | undefined;
  /**
   * Only supported on `image` models.
   */
  numImages?: number | undefined;
  /**
   * Best effort deterministic seed for the model. Currently only OpenAI models support these
   */
  seed?: number | undefined;
  /**
   * Only supported on `image` models.
   */
  format?: CreatePromptSnippetPromptSnippetsFormat | undefined;
  /**
   * Only supported on `image` models.
   */
  dimensions?: string | undefined;
  /**
   * Only supported on `image` models.
   */
  quality?: CreatePromptSnippetPromptSnippetsQuality | undefined;
  /**
   * Only supported on `image` models.
   */
  style?: string | undefined;
  /**
   * An object specifying the format that the model must output.
   *
   * @remarks
   *
   *  Setting to `{ "type": "json_schema", "json_schema": {...} }` enables Structured Outputs which ensures the model will match your supplied JSON schema
   *
   *  Setting to `{ "type": "json_object" }` enables JSON mode, which ensures the message the model generates is valid JSON.
   *
   * Important: when using JSON mode, you must also instruct the model to produce JSON yourself via a system or user message. Without this, the model may generate an unending stream of whitespace until the generation reaches the token limit, resulting in a long-running and seemingly "stuck" request. Also note that the message content may be partially cut off if finish_reason="length", which indicates the generation exceeded max_tokens or the conversation exceeded the max context length.
   */
  responseFormat?:
    | CreatePromptSnippetResponseFormatPromptSnippets2
    | CreatePromptSnippetResponseFormatPromptSnippets1
    | null
    | undefined;
  /**
   * The version of photoReal to use. Must be v1 or v2. Only available for `leonardoai` provider
   */
  photoRealVersion?:
    | CreatePromptSnippetPromptSnippetsPhotoRealVersion
    | undefined;
  /**
   * The format to return the embeddings
   */
  encodingFormat?: CreatePromptSnippetPromptSnippetsEncodingFormat | undefined;
  /**
   * Constrains effort on reasoning for reasoning models. Reducing reasoning effort can result in faster responses and fewer tokens used on reasoning in a response.
   */
  reasoningEffort?:
    | CreatePromptSnippetPromptSnippetsReasoningEffort
    | undefined;
};

export const CreatePromptSnippetPromptSnippetsProvider = {
  Cohere: "cohere",
  Openai: "openai",
  Anthropic: "anthropic",
  Huggingface: "huggingface",
  Replicate: "replicate",
  Google: "google",
  GoogleAi: "google-ai",
  Azure: "azure",
  Aws: "aws",
  Anyscale: "anyscale",
  Perplexity: "perplexity",
  Groq: "groq",
  Fal: "fal",
  Leonardoai: "leonardoai",
  Nvidia: "nvidia",
  Jina: "jina",
  Togetherai: "togetherai",
  Elevenlabs: "elevenlabs",
} as const;
export type CreatePromptSnippetPromptSnippetsProvider = ClosedEnum<
  typeof CreatePromptSnippetPromptSnippetsProvider
>;

/**
 * The role of the prompt message
 */
export const CreatePromptSnippetPromptSnippetsResponseRole = {
  System: "system",
  Assistant: "assistant",
  User: "user",
  Exception: "exception",
  Tool: "tool",
  Prompt: "prompt",
  Correction: "correction",
  ExpectedOutput: "expected_output",
} as const;
/**
 * The role of the prompt message
 */
export type CreatePromptSnippetPromptSnippetsResponseRole = ClosedEnum<
  typeof CreatePromptSnippetPromptSnippetsResponseRole
>;

export const CreatePromptSnippet2PromptSnippetsResponse200ApplicationJSONResponseBodyType =
  {
    ImageUrl: "image_url",
  } as const;
export type CreatePromptSnippet2PromptSnippetsResponse200ApplicationJSONResponseBodyType =
  ClosedEnum<
    typeof CreatePromptSnippet2PromptSnippetsResponse200ApplicationJSONResponseBodyType
  >;

export type CreatePromptSnippet2PromptSnippetsResponseImageUrl = {
  /**
   * The orq.ai id of the image
   */
  id?: string | undefined;
  /**
   * Either a URL of the image or the base64 encoded data URI.
   */
  url: string;
  /**
   * Specifies the detail level of the image. Currently only supported with OpenAI models
   */
  detail?: string | undefined;
};

/**
 * The image part of the prompt message. Only supported with vision models.
 */
export type CreatePromptSnippet2PromptSnippetsResponse2 = {
  type:
    CreatePromptSnippet2PromptSnippetsResponse200ApplicationJSONResponseBodyType;
  imageUrl: CreatePromptSnippet2PromptSnippetsResponseImageUrl;
};

export const CreatePromptSnippet2PromptSnippetsResponse200ApplicationJSONType =
  {
    Text: "text",
  } as const;
export type CreatePromptSnippet2PromptSnippetsResponse200ApplicationJSONType =
  ClosedEnum<
    typeof CreatePromptSnippet2PromptSnippetsResponse200ApplicationJSONType
  >;

/**
 * Text content part of a prompt message
 */
export type CreatePromptSnippet2PromptSnippetsResponse1 = {
  type: CreatePromptSnippet2PromptSnippetsResponse200ApplicationJSONType;
  text: string;
};

export type CreatePromptSnippetContentPromptSnippetsResponse2 =
  | CreatePromptSnippet2PromptSnippetsResponse1
  | CreatePromptSnippet2PromptSnippetsResponse2;

/**
 * The contents of the user message. Either the text content of the message or an array of content parts with a defined type, each can be of type `text` or `image_url` when passing in images. You can pass multiple images by adding multiple `image_url` content parts.
 */
export type CreatePromptSnippetPromptSnippetsResponseContent =
  | string
  | Array<
    | CreatePromptSnippet2PromptSnippetsResponse1
    | CreatePromptSnippet2PromptSnippetsResponse2
  >;

export const CreatePromptSnippetPromptSnippetsResponse200Type = {
  Function: "function",
} as const;
export type CreatePromptSnippetPromptSnippetsResponse200Type = ClosedEnum<
  typeof CreatePromptSnippetPromptSnippetsResponse200Type
>;

export type CreatePromptSnippetPromptSnippetsResponseFunction = {
  name: string;
  /**
   * JSON string arguments for the functions
   */
  arguments: string;
};

export type CreatePromptSnippetPromptSnippetsResponseToolCalls = {
  id?: string | undefined;
  index?: number | undefined;
  type: CreatePromptSnippetPromptSnippetsResponse200Type;
  function: CreatePromptSnippetPromptSnippetsResponseFunction;
};

export type CreatePromptSnippetPromptSnippetsResponseMessages = {
  /**
   * The role of the prompt message
   */
  role: CreatePromptSnippetPromptSnippetsResponseRole;
  /**
   * The contents of the user message. Either the text content of the message or an array of content parts with a defined type, each can be of type `text` or `image_url` when passing in images. You can pass multiple images by adding multiple `image_url` content parts.
   */
  content:
    | string
    | Array<
      | CreatePromptSnippet2PromptSnippetsResponse1
      | CreatePromptSnippet2PromptSnippetsResponse2
    >;
  toolCalls?:
    | Array<CreatePromptSnippetPromptSnippetsResponseToolCalls>
    | undefined;
};

/**
 * A list of messages compatible with the openAI schema
 */
export type CreatePromptSnippetPromptSnippetsPromptConfig = {
  stream?: boolean | undefined;
  model?: string | undefined;
  /**
   * The id of the resource
   */
  modelDbId?: string | undefined;
  /**
   * The type of the model
   */
  modelType?: CreatePromptSnippetPromptSnippetsModelType | undefined;
  /**
   * Model Parameters: Not all parameters apply to every model
   */
  modelParameters?:
    | CreatePromptSnippetPromptSnippetsModelParameters
    | undefined;
  provider?: CreatePromptSnippetPromptSnippetsProvider | undefined;
  /**
   * The id of the resource
   */
  integrationId?: string | null | undefined;
  version?: string | undefined;
  messages: Array<CreatePromptSnippetPromptSnippetsResponseMessages>;
};

export const CreatePromptSnippetPromptSnippetsUseCases = {
  Agents: "Agents",
  AgentsSimulations: "Agents simulations",
  APIInteraction: "API interaction",
  AutonomousAgents: "Autonomous Agents",
  Chatbots: "Chatbots",
  Classification: "Classification",
  CodeUnderstanding: "Code understanding",
  CodeWriting: "Code writing",
  DocumentsQA: "Documents QA",
  Conversation: "Conversation",
  Extraction: "Extraction",
  MultiModal: "Multi-modal",
  SelfChecking: "Self-checking",
  Sql: "SQL",
  Summarization: "Summarization",
  Tagging: "Tagging",
} as const;
export type CreatePromptSnippetPromptSnippetsUseCases = ClosedEnum<
  typeof CreatePromptSnippetPromptSnippetsUseCases
>;

/**
 * The language that the prompt is written in. Use this field to categorize the prompt for your own purpose
 */
export const CreatePromptSnippetPromptSnippetsLanguage = {
  Chinese: "Chinese",
  Dutch: "Dutch",
  English: "English",
  French: "French",
  German: "German",
  Russian: "Russian",
  Spanish: "Spanish",
} as const;
/**
 * The language that the prompt is written in. Use this field to categorize the prompt for your own purpose
 */
export type CreatePromptSnippetPromptSnippetsLanguage = ClosedEnum<
  typeof CreatePromptSnippetPromptSnippetsLanguage
>;

export type CreatePromptSnippetPromptSnippetsResponseMetadata = {
  /**
   * A list of use cases that the prompt is meant to be used for. Use this field to categorize the prompt for your own purpose
   */
  useCases?: Array<CreatePromptSnippetPromptSnippetsUseCases> | undefined;
  /**
   * The language that the prompt is written in. Use this field to categorize the prompt for your own purpose
   */
  language?: CreatePromptSnippetPromptSnippetsLanguage | undefined;
};

/**
 * Prompt version model returned from the API
 */
export type Versions = {
  id: string;
  /**
   * The prompt snippet’s description, meant to be displayable in the UI. Use this field to optionally store a long form explanation of the prompt for your own purpose
   */
  description?: string | null | undefined;
  /**
   * A list of messages compatible with the openAI schema
   */
  promptConfig: CreatePromptSnippetPromptSnippetsPromptConfig;
  metadata: CreatePromptSnippetPromptSnippetsResponseMetadata;
  createdById: string;
  updatedById: string;
  timestamp: string;
};

/**
 * Prompt snippet model returned from the API
 */
export type CreatePromptSnippetResponseBody = {
  id: string;
  owner: string | Owner2;
  domainId: string;
  key: string;
  /**
   * The prompt snippet’s description, meant to be displayable in the UI. Use this field to optionally store a long form explanation of the prompt for your own purpose
   */
  description?: string | null | undefined;
  /**
   * A list of messages compatible with the openAI schema
   */
  promptConfig: CreatePromptSnippetPromptConfig;
  metadata: CreatePromptSnippetPromptSnippetsMetadata;
  createdById: string;
  updatedById: string;
  /**
   * The date and time the resource was created
   */
  created?: Date | undefined;
  /**
   * The date and time the resource was last updated
   */
  updated?: Date | undefined;
  type: CreatePromptSnippetPromptSnippetsType;
  versions: Array<Versions>;
};

/** @internal */
export const ModelType$inboundSchema: z.ZodNativeEnum<typeof ModelType> = z
  .nativeEnum(ModelType);

/** @internal */
export const ModelType$outboundSchema: z.ZodNativeEnum<typeof ModelType> =
  ModelType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ModelType$ {
  /** @deprecated use `ModelType$inboundSchema` instead. */
  export const inboundSchema = ModelType$inboundSchema;
  /** @deprecated use `ModelType$outboundSchema` instead. */
  export const outboundSchema = ModelType$outboundSchema;
}

/** @internal */
export const Format$inboundSchema: z.ZodNativeEnum<typeof Format> = z
  .nativeEnum(Format);

/** @internal */
export const Format$outboundSchema: z.ZodNativeEnum<typeof Format> =
  Format$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Format$ {
  /** @deprecated use `Format$inboundSchema` instead. */
  export const inboundSchema = Format$inboundSchema;
  /** @deprecated use `Format$outboundSchema` instead. */
  export const outboundSchema = Format$outboundSchema;
}

/** @internal */
export const Quality$inboundSchema: z.ZodNativeEnum<typeof Quality> = z
  .nativeEnum(Quality);

/** @internal */
export const Quality$outboundSchema: z.ZodNativeEnum<typeof Quality> =
  Quality$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Quality$ {
  /** @deprecated use `Quality$inboundSchema` instead. */
  export const inboundSchema = Quality$inboundSchema;
  /** @deprecated use `Quality$outboundSchema` instead. */
  export const outboundSchema = Quality$outboundSchema;
}

/** @internal */
export const CreatePromptSnippetResponseFormatType$inboundSchema:
  z.ZodNativeEnum<typeof CreatePromptSnippetResponseFormatType> = z.nativeEnum(
    CreatePromptSnippetResponseFormatType,
  );

/** @internal */
export const CreatePromptSnippetResponseFormatType$outboundSchema:
  z.ZodNativeEnum<typeof CreatePromptSnippetResponseFormatType> =
    CreatePromptSnippetResponseFormatType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreatePromptSnippetResponseFormatType$ {
  /** @deprecated use `CreatePromptSnippetResponseFormatType$inboundSchema` instead. */
  export const inboundSchema =
    CreatePromptSnippetResponseFormatType$inboundSchema;
  /** @deprecated use `CreatePromptSnippetResponseFormatType$outboundSchema` instead. */
  export const outboundSchema =
    CreatePromptSnippetResponseFormatType$outboundSchema;
}

/** @internal */
export const ResponseFormat2$inboundSchema: z.ZodType<
  ResponseFormat2,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: CreatePromptSnippetResponseFormatType$inboundSchema,
});

/** @internal */
export type ResponseFormat2$Outbound = {
  type: string;
};

/** @internal */
export const ResponseFormat2$outboundSchema: z.ZodType<
  ResponseFormat2$Outbound,
  z.ZodTypeDef,
  ResponseFormat2
> = z.object({
  type: CreatePromptSnippetResponseFormatType$outboundSchema,
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ResponseFormat2$ {
  /** @deprecated use `ResponseFormat2$inboundSchema` instead. */
  export const inboundSchema = ResponseFormat2$inboundSchema;
  /** @deprecated use `ResponseFormat2$outboundSchema` instead. */
  export const outboundSchema = ResponseFormat2$outboundSchema;
  /** @deprecated use `ResponseFormat2$Outbound` instead. */
  export type Outbound = ResponseFormat2$Outbound;
}

export function responseFormat2ToJSON(
  responseFormat2: ResponseFormat2,
): string {
  return JSON.stringify(ResponseFormat2$outboundSchema.parse(responseFormat2));
}

export function responseFormat2FromJSON(
  jsonString: string,
): SafeParseResult<ResponseFormat2, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ResponseFormat2$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ResponseFormat2' from JSON`,
  );
}

/** @internal */
export const ResponseFormatType$inboundSchema: z.ZodNativeEnum<
  typeof ResponseFormatType
> = z.nativeEnum(ResponseFormatType);

/** @internal */
export const ResponseFormatType$outboundSchema: z.ZodNativeEnum<
  typeof ResponseFormatType
> = ResponseFormatType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ResponseFormatType$ {
  /** @deprecated use `ResponseFormatType$inboundSchema` instead. */
  export const inboundSchema = ResponseFormatType$inboundSchema;
  /** @deprecated use `ResponseFormatType$outboundSchema` instead. */
  export const outboundSchema = ResponseFormatType$outboundSchema;
}

/** @internal */
export const JsonSchema$inboundSchema: z.ZodType<
  JsonSchema,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.string(),
  strict: z.boolean(),
  schema: z.record(z.any()),
});

/** @internal */
export type JsonSchema$Outbound = {
  name: string;
  strict: boolean;
  schema: { [k: string]: any };
};

/** @internal */
export const JsonSchema$outboundSchema: z.ZodType<
  JsonSchema$Outbound,
  z.ZodTypeDef,
  JsonSchema
> = z.object({
  name: z.string(),
  strict: z.boolean(),
  schema: z.record(z.any()),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace JsonSchema$ {
  /** @deprecated use `JsonSchema$inboundSchema` instead. */
  export const inboundSchema = JsonSchema$inboundSchema;
  /** @deprecated use `JsonSchema$outboundSchema` instead. */
  export const outboundSchema = JsonSchema$outboundSchema;
  /** @deprecated use `JsonSchema$Outbound` instead. */
  export type Outbound = JsonSchema$Outbound;
}

export function jsonSchemaToJSON(jsonSchema: JsonSchema): string {
  return JSON.stringify(JsonSchema$outboundSchema.parse(jsonSchema));
}

export function jsonSchemaFromJSON(
  jsonString: string,
): SafeParseResult<JsonSchema, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => JsonSchema$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'JsonSchema' from JSON`,
  );
}

/** @internal */
export const ResponseFormat1$inboundSchema: z.ZodType<
  ResponseFormat1,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: ResponseFormatType$inboundSchema,
  json_schema: z.lazy(() => JsonSchema$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "json_schema": "jsonSchema",
  });
});

/** @internal */
export type ResponseFormat1$Outbound = {
  type: string;
  json_schema: JsonSchema$Outbound;
};

/** @internal */
export const ResponseFormat1$outboundSchema: z.ZodType<
  ResponseFormat1$Outbound,
  z.ZodTypeDef,
  ResponseFormat1
> = z.object({
  type: ResponseFormatType$outboundSchema,
  jsonSchema: z.lazy(() => JsonSchema$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    jsonSchema: "json_schema",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ResponseFormat1$ {
  /** @deprecated use `ResponseFormat1$inboundSchema` instead. */
  export const inboundSchema = ResponseFormat1$inboundSchema;
  /** @deprecated use `ResponseFormat1$outboundSchema` instead. */
  export const outboundSchema = ResponseFormat1$outboundSchema;
  /** @deprecated use `ResponseFormat1$Outbound` instead. */
  export type Outbound = ResponseFormat1$Outbound;
}

export function responseFormat1ToJSON(
  responseFormat1: ResponseFormat1,
): string {
  return JSON.stringify(ResponseFormat1$outboundSchema.parse(responseFormat1));
}

export function responseFormat1FromJSON(
  jsonString: string,
): SafeParseResult<ResponseFormat1, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ResponseFormat1$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ResponseFormat1' from JSON`,
  );
}

/** @internal */
export const ResponseFormat$inboundSchema: z.ZodType<
  ResponseFormat,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => ResponseFormat2$inboundSchema),
  z.lazy(() => ResponseFormat1$inboundSchema),
]);

/** @internal */
export type ResponseFormat$Outbound =
  | ResponseFormat2$Outbound
  | ResponseFormat1$Outbound;

/** @internal */
export const ResponseFormat$outboundSchema: z.ZodType<
  ResponseFormat$Outbound,
  z.ZodTypeDef,
  ResponseFormat
> = z.union([
  z.lazy(() => ResponseFormat2$outboundSchema),
  z.lazy(() => ResponseFormat1$outboundSchema),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ResponseFormat$ {
  /** @deprecated use `ResponseFormat$inboundSchema` instead. */
  export const inboundSchema = ResponseFormat$inboundSchema;
  /** @deprecated use `ResponseFormat$outboundSchema` instead. */
  export const outboundSchema = ResponseFormat$outboundSchema;
  /** @deprecated use `ResponseFormat$Outbound` instead. */
  export type Outbound = ResponseFormat$Outbound;
}

export function responseFormatToJSON(responseFormat: ResponseFormat): string {
  return JSON.stringify(ResponseFormat$outboundSchema.parse(responseFormat));
}

export function responseFormatFromJSON(
  jsonString: string,
): SafeParseResult<ResponseFormat, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ResponseFormat$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ResponseFormat' from JSON`,
  );
}

/** @internal */
export const PhotoRealVersion$inboundSchema: z.ZodNativeEnum<
  typeof PhotoRealVersion
> = z.nativeEnum(PhotoRealVersion);

/** @internal */
export const PhotoRealVersion$outboundSchema: z.ZodNativeEnum<
  typeof PhotoRealVersion
> = PhotoRealVersion$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PhotoRealVersion$ {
  /** @deprecated use `PhotoRealVersion$inboundSchema` instead. */
  export const inboundSchema = PhotoRealVersion$inboundSchema;
  /** @deprecated use `PhotoRealVersion$outboundSchema` instead. */
  export const outboundSchema = PhotoRealVersion$outboundSchema;
}

/** @internal */
export const EncodingFormat$inboundSchema: z.ZodNativeEnum<
  typeof EncodingFormat
> = z.nativeEnum(EncodingFormat);

/** @internal */
export const EncodingFormat$outboundSchema: z.ZodNativeEnum<
  typeof EncodingFormat
> = EncodingFormat$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EncodingFormat$ {
  /** @deprecated use `EncodingFormat$inboundSchema` instead. */
  export const inboundSchema = EncodingFormat$inboundSchema;
  /** @deprecated use `EncodingFormat$outboundSchema` instead. */
  export const outboundSchema = EncodingFormat$outboundSchema;
}

/** @internal */
export const ReasoningEffort$inboundSchema: z.ZodNativeEnum<
  typeof ReasoningEffort
> = z.nativeEnum(ReasoningEffort);

/** @internal */
export const ReasoningEffort$outboundSchema: z.ZodNativeEnum<
  typeof ReasoningEffort
> = ReasoningEffort$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ReasoningEffort$ {
  /** @deprecated use `ReasoningEffort$inboundSchema` instead. */
  export const inboundSchema = ReasoningEffort$inboundSchema;
  /** @deprecated use `ReasoningEffort$outboundSchema` instead. */
  export const outboundSchema = ReasoningEffort$outboundSchema;
}

/** @internal */
export const ModelParameters$inboundSchema: z.ZodType<
  ModelParameters,
  z.ZodTypeDef,
  unknown
> = z.object({
  temperature: z.number().optional(),
  maxTokens: z.number().optional(),
  topK: z.number().optional(),
  topP: z.number().optional(),
  frequencyPenalty: z.number().optional(),
  presencePenalty: z.number().optional(),
  numImages: z.number().optional(),
  seed: z.number().optional(),
  format: Format$inboundSchema.optional(),
  dimensions: z.string().optional(),
  quality: Quality$inboundSchema.optional(),
  style: z.string().optional(),
  responseFormat: z.nullable(
    z.union([
      z.lazy(() => ResponseFormat2$inboundSchema),
      z.lazy(() => ResponseFormat1$inboundSchema),
    ]),
  ).optional(),
  photoRealVersion: PhotoRealVersion$inboundSchema.optional(),
  encoding_format: EncodingFormat$inboundSchema.optional(),
  reasoningEffort: ReasoningEffort$inboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    "encoding_format": "encodingFormat",
  });
});

/** @internal */
export type ModelParameters$Outbound = {
  temperature?: number | undefined;
  maxTokens?: number | undefined;
  topK?: number | undefined;
  topP?: number | undefined;
  frequencyPenalty?: number | undefined;
  presencePenalty?: number | undefined;
  numImages?: number | undefined;
  seed?: number | undefined;
  format?: string | undefined;
  dimensions?: string | undefined;
  quality?: string | undefined;
  style?: string | undefined;
  responseFormat?:
    | ResponseFormat2$Outbound
    | ResponseFormat1$Outbound
    | null
    | undefined;
  photoRealVersion?: string | undefined;
  encoding_format?: string | undefined;
  reasoningEffort?: string | undefined;
};

/** @internal */
export const ModelParameters$outboundSchema: z.ZodType<
  ModelParameters$Outbound,
  z.ZodTypeDef,
  ModelParameters
> = z.object({
  temperature: z.number().optional(),
  maxTokens: z.number().optional(),
  topK: z.number().optional(),
  topP: z.number().optional(),
  frequencyPenalty: z.number().optional(),
  presencePenalty: z.number().optional(),
  numImages: z.number().optional(),
  seed: z.number().optional(),
  format: Format$outboundSchema.optional(),
  dimensions: z.string().optional(),
  quality: Quality$outboundSchema.optional(),
  style: z.string().optional(),
  responseFormat: z.nullable(
    z.union([
      z.lazy(() => ResponseFormat2$outboundSchema),
      z.lazy(() => ResponseFormat1$outboundSchema),
    ]),
  ).optional(),
  photoRealVersion: PhotoRealVersion$outboundSchema.optional(),
  encodingFormat: EncodingFormat$outboundSchema.optional(),
  reasoningEffort: ReasoningEffort$outboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    encodingFormat: "encoding_format",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ModelParameters$ {
  /** @deprecated use `ModelParameters$inboundSchema` instead. */
  export const inboundSchema = ModelParameters$inboundSchema;
  /** @deprecated use `ModelParameters$outboundSchema` instead. */
  export const outboundSchema = ModelParameters$outboundSchema;
  /** @deprecated use `ModelParameters$Outbound` instead. */
  export type Outbound = ModelParameters$Outbound;
}

export function modelParametersToJSON(
  modelParameters: ModelParameters,
): string {
  return JSON.stringify(ModelParameters$outboundSchema.parse(modelParameters));
}

export function modelParametersFromJSON(
  jsonString: string,
): SafeParseResult<ModelParameters, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ModelParameters$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ModelParameters' from JSON`,
  );
}

/** @internal */
export const Provider$inboundSchema: z.ZodNativeEnum<typeof Provider> = z
  .nativeEnum(Provider);

/** @internal */
export const Provider$outboundSchema: z.ZodNativeEnum<typeof Provider> =
  Provider$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Provider$ {
  /** @deprecated use `Provider$inboundSchema` instead. */
  export const inboundSchema = Provider$inboundSchema;
  /** @deprecated use `Provider$outboundSchema` instead. */
  export const outboundSchema = Provider$outboundSchema;
}

/** @internal */
export const CreatePromptSnippetRole$inboundSchema: z.ZodNativeEnum<
  typeof CreatePromptSnippetRole
> = z.nativeEnum(CreatePromptSnippetRole);

/** @internal */
export const CreatePromptSnippetRole$outboundSchema: z.ZodNativeEnum<
  typeof CreatePromptSnippetRole
> = CreatePromptSnippetRole$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreatePromptSnippetRole$ {
  /** @deprecated use `CreatePromptSnippetRole$inboundSchema` instead. */
  export const inboundSchema = CreatePromptSnippetRole$inboundSchema;
  /** @deprecated use `CreatePromptSnippetRole$outboundSchema` instead. */
  export const outboundSchema = CreatePromptSnippetRole$outboundSchema;
}

/** @internal */
export const CreatePromptSnippet2PromptSnippetsType$inboundSchema:
  z.ZodNativeEnum<typeof CreatePromptSnippet2PromptSnippetsType> = z.nativeEnum(
    CreatePromptSnippet2PromptSnippetsType,
  );

/** @internal */
export const CreatePromptSnippet2PromptSnippetsType$outboundSchema:
  z.ZodNativeEnum<typeof CreatePromptSnippet2PromptSnippetsType> =
    CreatePromptSnippet2PromptSnippetsType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreatePromptSnippet2PromptSnippetsType$ {
  /** @deprecated use `CreatePromptSnippet2PromptSnippetsType$inboundSchema` instead. */
  export const inboundSchema =
    CreatePromptSnippet2PromptSnippetsType$inboundSchema;
  /** @deprecated use `CreatePromptSnippet2PromptSnippetsType$outboundSchema` instead. */
  export const outboundSchema =
    CreatePromptSnippet2PromptSnippetsType$outboundSchema;
}

/** @internal */
export const CreatePromptSnippet2ImageUrl$inboundSchema: z.ZodType<
  CreatePromptSnippet2ImageUrl,
  z.ZodTypeDef,
  unknown
> = z.object({
  url: z.string(),
  detail: z.string().optional(),
});

/** @internal */
export type CreatePromptSnippet2ImageUrl$Outbound = {
  url: string;
  detail?: string | undefined;
};

/** @internal */
export const CreatePromptSnippet2ImageUrl$outboundSchema: z.ZodType<
  CreatePromptSnippet2ImageUrl$Outbound,
  z.ZodTypeDef,
  CreatePromptSnippet2ImageUrl
> = z.object({
  url: z.string(),
  detail: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreatePromptSnippet2ImageUrl$ {
  /** @deprecated use `CreatePromptSnippet2ImageUrl$inboundSchema` instead. */
  export const inboundSchema = CreatePromptSnippet2ImageUrl$inboundSchema;
  /** @deprecated use `CreatePromptSnippet2ImageUrl$outboundSchema` instead. */
  export const outboundSchema = CreatePromptSnippet2ImageUrl$outboundSchema;
  /** @deprecated use `CreatePromptSnippet2ImageUrl$Outbound` instead. */
  export type Outbound = CreatePromptSnippet2ImageUrl$Outbound;
}

export function createPromptSnippet2ImageUrlToJSON(
  createPromptSnippet2ImageUrl: CreatePromptSnippet2ImageUrl,
): string {
  return JSON.stringify(
    CreatePromptSnippet2ImageUrl$outboundSchema.parse(
      createPromptSnippet2ImageUrl,
    ),
  );
}

export function createPromptSnippet2ImageUrlFromJSON(
  jsonString: string,
): SafeParseResult<CreatePromptSnippet2ImageUrl, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreatePromptSnippet2ImageUrl$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreatePromptSnippet2ImageUrl' from JSON`,
  );
}

/** @internal */
export const CreatePromptSnippet22$inboundSchema: z.ZodType<
  CreatePromptSnippet22,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: CreatePromptSnippet2PromptSnippetsType$inboundSchema,
  image_url: z.lazy(() => CreatePromptSnippet2ImageUrl$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "image_url": "imageUrl",
  });
});

/** @internal */
export type CreatePromptSnippet22$Outbound = {
  type: string;
  image_url: CreatePromptSnippet2ImageUrl$Outbound;
};

/** @internal */
export const CreatePromptSnippet22$outboundSchema: z.ZodType<
  CreatePromptSnippet22$Outbound,
  z.ZodTypeDef,
  CreatePromptSnippet22
> = z.object({
  type: CreatePromptSnippet2PromptSnippetsType$outboundSchema,
  imageUrl: z.lazy(() => CreatePromptSnippet2ImageUrl$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    imageUrl: "image_url",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreatePromptSnippet22$ {
  /** @deprecated use `CreatePromptSnippet22$inboundSchema` instead. */
  export const inboundSchema = CreatePromptSnippet22$inboundSchema;
  /** @deprecated use `CreatePromptSnippet22$outboundSchema` instead. */
  export const outboundSchema = CreatePromptSnippet22$outboundSchema;
  /** @deprecated use `CreatePromptSnippet22$Outbound` instead. */
  export type Outbound = CreatePromptSnippet22$Outbound;
}

export function createPromptSnippet22ToJSON(
  createPromptSnippet22: CreatePromptSnippet22,
): string {
  return JSON.stringify(
    CreatePromptSnippet22$outboundSchema.parse(createPromptSnippet22),
  );
}

export function createPromptSnippet22FromJSON(
  jsonString: string,
): SafeParseResult<CreatePromptSnippet22, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreatePromptSnippet22$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreatePromptSnippet22' from JSON`,
  );
}

/** @internal */
export const CreatePromptSnippet2Type$inboundSchema: z.ZodNativeEnum<
  typeof CreatePromptSnippet2Type
> = z.nativeEnum(CreatePromptSnippet2Type);

/** @internal */
export const CreatePromptSnippet2Type$outboundSchema: z.ZodNativeEnum<
  typeof CreatePromptSnippet2Type
> = CreatePromptSnippet2Type$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreatePromptSnippet2Type$ {
  /** @deprecated use `CreatePromptSnippet2Type$inboundSchema` instead. */
  export const inboundSchema = CreatePromptSnippet2Type$inboundSchema;
  /** @deprecated use `CreatePromptSnippet2Type$outboundSchema` instead. */
  export const outboundSchema = CreatePromptSnippet2Type$outboundSchema;
}

/** @internal */
export const CreatePromptSnippet21$inboundSchema: z.ZodType<
  CreatePromptSnippet21,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: CreatePromptSnippet2Type$inboundSchema,
  text: z.string(),
});

/** @internal */
export type CreatePromptSnippet21$Outbound = {
  type: string;
  text: string;
};

/** @internal */
export const CreatePromptSnippet21$outboundSchema: z.ZodType<
  CreatePromptSnippet21$Outbound,
  z.ZodTypeDef,
  CreatePromptSnippet21
> = z.object({
  type: CreatePromptSnippet2Type$outboundSchema,
  text: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreatePromptSnippet21$ {
  /** @deprecated use `CreatePromptSnippet21$inboundSchema` instead. */
  export const inboundSchema = CreatePromptSnippet21$inboundSchema;
  /** @deprecated use `CreatePromptSnippet21$outboundSchema` instead. */
  export const outboundSchema = CreatePromptSnippet21$outboundSchema;
  /** @deprecated use `CreatePromptSnippet21$Outbound` instead. */
  export type Outbound = CreatePromptSnippet21$Outbound;
}

export function createPromptSnippet21ToJSON(
  createPromptSnippet21: CreatePromptSnippet21,
): string {
  return JSON.stringify(
    CreatePromptSnippet21$outboundSchema.parse(createPromptSnippet21),
  );
}

export function createPromptSnippet21FromJSON(
  jsonString: string,
): SafeParseResult<CreatePromptSnippet21, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreatePromptSnippet21$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreatePromptSnippet21' from JSON`,
  );
}

/** @internal */
export const CreatePromptSnippetContent2$inboundSchema: z.ZodType<
  CreatePromptSnippetContent2,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => CreatePromptSnippet21$inboundSchema),
  z.lazy(() => CreatePromptSnippet22$inboundSchema),
]);

/** @internal */
export type CreatePromptSnippetContent2$Outbound =
  | CreatePromptSnippet21$Outbound
  | CreatePromptSnippet22$Outbound;

/** @internal */
export const CreatePromptSnippetContent2$outboundSchema: z.ZodType<
  CreatePromptSnippetContent2$Outbound,
  z.ZodTypeDef,
  CreatePromptSnippetContent2
> = z.union([
  z.lazy(() => CreatePromptSnippet21$outboundSchema),
  z.lazy(() => CreatePromptSnippet22$outboundSchema),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreatePromptSnippetContent2$ {
  /** @deprecated use `CreatePromptSnippetContent2$inboundSchema` instead. */
  export const inboundSchema = CreatePromptSnippetContent2$inboundSchema;
  /** @deprecated use `CreatePromptSnippetContent2$outboundSchema` instead. */
  export const outboundSchema = CreatePromptSnippetContent2$outboundSchema;
  /** @deprecated use `CreatePromptSnippetContent2$Outbound` instead. */
  export type Outbound = CreatePromptSnippetContent2$Outbound;
}

export function createPromptSnippetContent2ToJSON(
  createPromptSnippetContent2: CreatePromptSnippetContent2,
): string {
  return JSON.stringify(
    CreatePromptSnippetContent2$outboundSchema.parse(
      createPromptSnippetContent2,
    ),
  );
}

export function createPromptSnippetContent2FromJSON(
  jsonString: string,
): SafeParseResult<CreatePromptSnippetContent2, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreatePromptSnippetContent2$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreatePromptSnippetContent2' from JSON`,
  );
}

/** @internal */
export const CreatePromptSnippetContent$inboundSchema: z.ZodType<
  CreatePromptSnippetContent,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.string(),
  z.array(z.union([
    z.lazy(() => CreatePromptSnippet21$inboundSchema),
    z.lazy(() => CreatePromptSnippet22$inboundSchema),
  ])),
]);

/** @internal */
export type CreatePromptSnippetContent$Outbound =
  | string
  | Array<CreatePromptSnippet21$Outbound | CreatePromptSnippet22$Outbound>;

/** @internal */
export const CreatePromptSnippetContent$outboundSchema: z.ZodType<
  CreatePromptSnippetContent$Outbound,
  z.ZodTypeDef,
  CreatePromptSnippetContent
> = z.union([
  z.string(),
  z.array(z.union([
    z.lazy(() => CreatePromptSnippet21$outboundSchema),
    z.lazy(() => CreatePromptSnippet22$outboundSchema),
  ])),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreatePromptSnippetContent$ {
  /** @deprecated use `CreatePromptSnippetContent$inboundSchema` instead. */
  export const inboundSchema = CreatePromptSnippetContent$inboundSchema;
  /** @deprecated use `CreatePromptSnippetContent$outboundSchema` instead. */
  export const outboundSchema = CreatePromptSnippetContent$outboundSchema;
  /** @deprecated use `CreatePromptSnippetContent$Outbound` instead. */
  export type Outbound = CreatePromptSnippetContent$Outbound;
}

export function createPromptSnippetContentToJSON(
  createPromptSnippetContent: CreatePromptSnippetContent,
): string {
  return JSON.stringify(
    CreatePromptSnippetContent$outboundSchema.parse(createPromptSnippetContent),
  );
}

export function createPromptSnippetContentFromJSON(
  jsonString: string,
): SafeParseResult<CreatePromptSnippetContent, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreatePromptSnippetContent$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreatePromptSnippetContent' from JSON`,
  );
}

/** @internal */
export const CreatePromptSnippetType$inboundSchema: z.ZodNativeEnum<
  typeof CreatePromptSnippetType
> = z.nativeEnum(CreatePromptSnippetType);

/** @internal */
export const CreatePromptSnippetType$outboundSchema: z.ZodNativeEnum<
  typeof CreatePromptSnippetType
> = CreatePromptSnippetType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreatePromptSnippetType$ {
  /** @deprecated use `CreatePromptSnippetType$inboundSchema` instead. */
  export const inboundSchema = CreatePromptSnippetType$inboundSchema;
  /** @deprecated use `CreatePromptSnippetType$outboundSchema` instead. */
  export const outboundSchema = CreatePromptSnippetType$outboundSchema;
}

/** @internal */
export const CreatePromptSnippetFunction$inboundSchema: z.ZodType<
  CreatePromptSnippetFunction,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.string(),
  arguments: z.string(),
});

/** @internal */
export type CreatePromptSnippetFunction$Outbound = {
  name: string;
  arguments: string;
};

/** @internal */
export const CreatePromptSnippetFunction$outboundSchema: z.ZodType<
  CreatePromptSnippetFunction$Outbound,
  z.ZodTypeDef,
  CreatePromptSnippetFunction
> = z.object({
  name: z.string(),
  arguments: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreatePromptSnippetFunction$ {
  /** @deprecated use `CreatePromptSnippetFunction$inboundSchema` instead. */
  export const inboundSchema = CreatePromptSnippetFunction$inboundSchema;
  /** @deprecated use `CreatePromptSnippetFunction$outboundSchema` instead. */
  export const outboundSchema = CreatePromptSnippetFunction$outboundSchema;
  /** @deprecated use `CreatePromptSnippetFunction$Outbound` instead. */
  export type Outbound = CreatePromptSnippetFunction$Outbound;
}

export function createPromptSnippetFunctionToJSON(
  createPromptSnippetFunction: CreatePromptSnippetFunction,
): string {
  return JSON.stringify(
    CreatePromptSnippetFunction$outboundSchema.parse(
      createPromptSnippetFunction,
    ),
  );
}

export function createPromptSnippetFunctionFromJSON(
  jsonString: string,
): SafeParseResult<CreatePromptSnippetFunction, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreatePromptSnippetFunction$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreatePromptSnippetFunction' from JSON`,
  );
}

/** @internal */
export const CreatePromptSnippetToolCalls$inboundSchema: z.ZodType<
  CreatePromptSnippetToolCalls,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string().optional(),
  index: z.number().optional(),
  type: CreatePromptSnippetType$inboundSchema,
  function: z.lazy(() => CreatePromptSnippetFunction$inboundSchema),
});

/** @internal */
export type CreatePromptSnippetToolCalls$Outbound = {
  id?: string | undefined;
  index?: number | undefined;
  type: string;
  function: CreatePromptSnippetFunction$Outbound;
};

/** @internal */
export const CreatePromptSnippetToolCalls$outboundSchema: z.ZodType<
  CreatePromptSnippetToolCalls$Outbound,
  z.ZodTypeDef,
  CreatePromptSnippetToolCalls
> = z.object({
  id: z.string().optional(),
  index: z.number().optional(),
  type: CreatePromptSnippetType$outboundSchema,
  function: z.lazy(() => CreatePromptSnippetFunction$outboundSchema),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreatePromptSnippetToolCalls$ {
  /** @deprecated use `CreatePromptSnippetToolCalls$inboundSchema` instead. */
  export const inboundSchema = CreatePromptSnippetToolCalls$inboundSchema;
  /** @deprecated use `CreatePromptSnippetToolCalls$outboundSchema` instead. */
  export const outboundSchema = CreatePromptSnippetToolCalls$outboundSchema;
  /** @deprecated use `CreatePromptSnippetToolCalls$Outbound` instead. */
  export type Outbound = CreatePromptSnippetToolCalls$Outbound;
}

export function createPromptSnippetToolCallsToJSON(
  createPromptSnippetToolCalls: CreatePromptSnippetToolCalls,
): string {
  return JSON.stringify(
    CreatePromptSnippetToolCalls$outboundSchema.parse(
      createPromptSnippetToolCalls,
    ),
  );
}

export function createPromptSnippetToolCallsFromJSON(
  jsonString: string,
): SafeParseResult<CreatePromptSnippetToolCalls, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreatePromptSnippetToolCalls$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreatePromptSnippetToolCalls' from JSON`,
  );
}

/** @internal */
export const CreatePromptSnippetMessages$inboundSchema: z.ZodType<
  CreatePromptSnippetMessages,
  z.ZodTypeDef,
  unknown
> = z.object({
  role: CreatePromptSnippetRole$inboundSchema,
  content: z.union([
    z.string(),
    z.array(z.union([
      z.lazy(() => CreatePromptSnippet21$inboundSchema),
      z.lazy(() => CreatePromptSnippet22$inboundSchema),
    ])),
  ]),
  tool_calls: z.array(z.lazy(() => CreatePromptSnippetToolCalls$inboundSchema))
    .optional(),
}).transform((v) => {
  return remap$(v, {
    "tool_calls": "toolCalls",
  });
});

/** @internal */
export type CreatePromptSnippetMessages$Outbound = {
  role: string;
  content:
    | string
    | Array<CreatePromptSnippet21$Outbound | CreatePromptSnippet22$Outbound>;
  tool_calls?: Array<CreatePromptSnippetToolCalls$Outbound> | undefined;
};

/** @internal */
export const CreatePromptSnippetMessages$outboundSchema: z.ZodType<
  CreatePromptSnippetMessages$Outbound,
  z.ZodTypeDef,
  CreatePromptSnippetMessages
> = z.object({
  role: CreatePromptSnippetRole$outboundSchema,
  content: z.union([
    z.string(),
    z.array(z.union([
      z.lazy(() => CreatePromptSnippet21$outboundSchema),
      z.lazy(() => CreatePromptSnippet22$outboundSchema),
    ])),
  ]),
  toolCalls: z.array(z.lazy(() => CreatePromptSnippetToolCalls$outboundSchema))
    .optional(),
}).transform((v) => {
  return remap$(v, {
    toolCalls: "tool_calls",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreatePromptSnippetMessages$ {
  /** @deprecated use `CreatePromptSnippetMessages$inboundSchema` instead. */
  export const inboundSchema = CreatePromptSnippetMessages$inboundSchema;
  /** @deprecated use `CreatePromptSnippetMessages$outboundSchema` instead. */
  export const outboundSchema = CreatePromptSnippetMessages$outboundSchema;
  /** @deprecated use `CreatePromptSnippetMessages$Outbound` instead. */
  export type Outbound = CreatePromptSnippetMessages$Outbound;
}

export function createPromptSnippetMessagesToJSON(
  createPromptSnippetMessages: CreatePromptSnippetMessages,
): string {
  return JSON.stringify(
    CreatePromptSnippetMessages$outboundSchema.parse(
      createPromptSnippetMessages,
    ),
  );
}

export function createPromptSnippetMessagesFromJSON(
  jsonString: string,
): SafeParseResult<CreatePromptSnippetMessages, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreatePromptSnippetMessages$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreatePromptSnippetMessages' from JSON`,
  );
}

/** @internal */
export const PromptConfig$inboundSchema: z.ZodType<
  PromptConfig,
  z.ZodTypeDef,
  unknown
> = z.object({
  stream: z.boolean().optional(),
  model: z.string().optional(),
  model_type: ModelType$inboundSchema.optional(),
  model_parameters: z.lazy(() => ModelParameters$inboundSchema).optional(),
  provider: Provider$inboundSchema.optional(),
  version: z.string().optional(),
  messages: z.array(z.lazy(() => CreatePromptSnippetMessages$inboundSchema)),
}).transform((v) => {
  return remap$(v, {
    "model_type": "modelType",
    "model_parameters": "modelParameters",
  });
});

/** @internal */
export type PromptConfig$Outbound = {
  stream?: boolean | undefined;
  model?: string | undefined;
  model_type?: string | undefined;
  model_parameters?: ModelParameters$Outbound | undefined;
  provider?: string | undefined;
  version?: string | undefined;
  messages: Array<CreatePromptSnippetMessages$Outbound>;
};

/** @internal */
export const PromptConfig$outboundSchema: z.ZodType<
  PromptConfig$Outbound,
  z.ZodTypeDef,
  PromptConfig
> = z.object({
  stream: z.boolean().optional(),
  model: z.string().optional(),
  modelType: ModelType$outboundSchema.optional(),
  modelParameters: z.lazy(() => ModelParameters$outboundSchema).optional(),
  provider: Provider$outboundSchema.optional(),
  version: z.string().optional(),
  messages: z.array(z.lazy(() => CreatePromptSnippetMessages$outboundSchema)),
}).transform((v) => {
  return remap$(v, {
    modelType: "model_type",
    modelParameters: "model_parameters",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PromptConfig$ {
  /** @deprecated use `PromptConfig$inboundSchema` instead. */
  export const inboundSchema = PromptConfig$inboundSchema;
  /** @deprecated use `PromptConfig$outboundSchema` instead. */
  export const outboundSchema = PromptConfig$outboundSchema;
  /** @deprecated use `PromptConfig$Outbound` instead. */
  export type Outbound = PromptConfig$Outbound;
}

export function promptConfigToJSON(promptConfig: PromptConfig): string {
  return JSON.stringify(PromptConfig$outboundSchema.parse(promptConfig));
}

export function promptConfigFromJSON(
  jsonString: string,
): SafeParseResult<PromptConfig, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PromptConfig$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PromptConfig' from JSON`,
  );
}

/** @internal */
export const UseCases$inboundSchema: z.ZodNativeEnum<typeof UseCases> = z
  .nativeEnum(UseCases);

/** @internal */
export const UseCases$outboundSchema: z.ZodNativeEnum<typeof UseCases> =
  UseCases$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UseCases$ {
  /** @deprecated use `UseCases$inboundSchema` instead. */
  export const inboundSchema = UseCases$inboundSchema;
  /** @deprecated use `UseCases$outboundSchema` instead. */
  export const outboundSchema = UseCases$outboundSchema;
}

/** @internal */
export const Language$inboundSchema: z.ZodNativeEnum<typeof Language> = z
  .nativeEnum(Language);

/** @internal */
export const Language$outboundSchema: z.ZodNativeEnum<typeof Language> =
  Language$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Language$ {
  /** @deprecated use `Language$inboundSchema` instead. */
  export const inboundSchema = Language$inboundSchema;
  /** @deprecated use `Language$outboundSchema` instead. */
  export const outboundSchema = Language$outboundSchema;
}

/** @internal */
export const CreatePromptSnippetMetadata$inboundSchema: z.ZodType<
  CreatePromptSnippetMetadata,
  z.ZodTypeDef,
  unknown
> = z.object({
  use_cases: z.array(UseCases$inboundSchema).optional(),
  language: Language$inboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    "use_cases": "useCases",
  });
});

/** @internal */
export type CreatePromptSnippetMetadata$Outbound = {
  use_cases?: Array<string> | undefined;
  language?: string | undefined;
};

/** @internal */
export const CreatePromptSnippetMetadata$outboundSchema: z.ZodType<
  CreatePromptSnippetMetadata$Outbound,
  z.ZodTypeDef,
  CreatePromptSnippetMetadata
> = z.object({
  useCases: z.array(UseCases$outboundSchema).optional(),
  language: Language$outboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    useCases: "use_cases",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreatePromptSnippetMetadata$ {
  /** @deprecated use `CreatePromptSnippetMetadata$inboundSchema` instead. */
  export const inboundSchema = CreatePromptSnippetMetadata$inboundSchema;
  /** @deprecated use `CreatePromptSnippetMetadata$outboundSchema` instead. */
  export const outboundSchema = CreatePromptSnippetMetadata$outboundSchema;
  /** @deprecated use `CreatePromptSnippetMetadata$Outbound` instead. */
  export type Outbound = CreatePromptSnippetMetadata$Outbound;
}

export function createPromptSnippetMetadataToJSON(
  createPromptSnippetMetadata: CreatePromptSnippetMetadata,
): string {
  return JSON.stringify(
    CreatePromptSnippetMetadata$outboundSchema.parse(
      createPromptSnippetMetadata,
    ),
  );
}

export function createPromptSnippetMetadataFromJSON(
  jsonString: string,
): SafeParseResult<CreatePromptSnippetMetadata, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreatePromptSnippetMetadata$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreatePromptSnippetMetadata' from JSON`,
  );
}

/** @internal */
export const CreatePromptSnippetRequestBody$inboundSchema: z.ZodType<
  CreatePromptSnippetRequestBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  key: z.string(),
  description: z.nullable(z.string()).optional(),
  prompt_config: z.lazy(() => PromptConfig$inboundSchema),
  metadata: z.lazy(() => CreatePromptSnippetMetadata$inboundSchema).optional(),
  path: z.string(),
}).transform((v) => {
  return remap$(v, {
    "prompt_config": "promptConfig",
  });
});

/** @internal */
export type CreatePromptSnippetRequestBody$Outbound = {
  key: string;
  description?: string | null | undefined;
  prompt_config: PromptConfig$Outbound;
  metadata?: CreatePromptSnippetMetadata$Outbound | undefined;
  path: string;
};

/** @internal */
export const CreatePromptSnippetRequestBody$outboundSchema: z.ZodType<
  CreatePromptSnippetRequestBody$Outbound,
  z.ZodTypeDef,
  CreatePromptSnippetRequestBody
> = z.object({
  key: z.string(),
  description: z.nullable(z.string()).optional(),
  promptConfig: z.lazy(() => PromptConfig$outboundSchema),
  metadata: z.lazy(() => CreatePromptSnippetMetadata$outboundSchema).optional(),
  path: z.string(),
}).transform((v) => {
  return remap$(v, {
    promptConfig: "prompt_config",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreatePromptSnippetRequestBody$ {
  /** @deprecated use `CreatePromptSnippetRequestBody$inboundSchema` instead. */
  export const inboundSchema = CreatePromptSnippetRequestBody$inboundSchema;
  /** @deprecated use `CreatePromptSnippetRequestBody$outboundSchema` instead. */
  export const outboundSchema = CreatePromptSnippetRequestBody$outboundSchema;
  /** @deprecated use `CreatePromptSnippetRequestBody$Outbound` instead. */
  export type Outbound = CreatePromptSnippetRequestBody$Outbound;
}

export function createPromptSnippetRequestBodyToJSON(
  createPromptSnippetRequestBody: CreatePromptSnippetRequestBody,
): string {
  return JSON.stringify(
    CreatePromptSnippetRequestBody$outboundSchema.parse(
      createPromptSnippetRequestBody,
    ),
  );
}

export function createPromptSnippetRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<CreatePromptSnippetRequestBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreatePromptSnippetRequestBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreatePromptSnippetRequestBody' from JSON`,
  );
}

/** @internal */
export const Owner2$inboundSchema: z.ZodNativeEnum<typeof Owner2> = z
  .nativeEnum(Owner2);

/** @internal */
export const Owner2$outboundSchema: z.ZodNativeEnum<typeof Owner2> =
  Owner2$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Owner2$ {
  /** @deprecated use `Owner2$inboundSchema` instead. */
  export const inboundSchema = Owner2$inboundSchema;
  /** @deprecated use `Owner2$outboundSchema` instead. */
  export const outboundSchema = Owner2$outboundSchema;
}

/** @internal */
export const Owner$inboundSchema: z.ZodType<Owner, z.ZodTypeDef, unknown> = z
  .union([z.string(), Owner2$inboundSchema]);

/** @internal */
export type Owner$Outbound = string | string;

/** @internal */
export const Owner$outboundSchema: z.ZodType<
  Owner$Outbound,
  z.ZodTypeDef,
  Owner
> = z.union([z.string(), Owner2$outboundSchema]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Owner$ {
  /** @deprecated use `Owner$inboundSchema` instead. */
  export const inboundSchema = Owner$inboundSchema;
  /** @deprecated use `Owner$outboundSchema` instead. */
  export const outboundSchema = Owner$outboundSchema;
  /** @deprecated use `Owner$Outbound` instead. */
  export type Outbound = Owner$Outbound;
}

export function ownerToJSON(owner: Owner): string {
  return JSON.stringify(Owner$outboundSchema.parse(owner));
}

export function ownerFromJSON(
  jsonString: string,
): SafeParseResult<Owner, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Owner$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Owner' from JSON`,
  );
}

/** @internal */
export const CreatePromptSnippetModelType$inboundSchema: z.ZodNativeEnum<
  typeof CreatePromptSnippetModelType
> = z.nativeEnum(CreatePromptSnippetModelType);

/** @internal */
export const CreatePromptSnippetModelType$outboundSchema: z.ZodNativeEnum<
  typeof CreatePromptSnippetModelType
> = CreatePromptSnippetModelType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreatePromptSnippetModelType$ {
  /** @deprecated use `CreatePromptSnippetModelType$inboundSchema` instead. */
  export const inboundSchema = CreatePromptSnippetModelType$inboundSchema;
  /** @deprecated use `CreatePromptSnippetModelType$outboundSchema` instead. */
  export const outboundSchema = CreatePromptSnippetModelType$outboundSchema;
}

/** @internal */
export const CreatePromptSnippetFormat$inboundSchema: z.ZodNativeEnum<
  typeof CreatePromptSnippetFormat
> = z.nativeEnum(CreatePromptSnippetFormat);

/** @internal */
export const CreatePromptSnippetFormat$outboundSchema: z.ZodNativeEnum<
  typeof CreatePromptSnippetFormat
> = CreatePromptSnippetFormat$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreatePromptSnippetFormat$ {
  /** @deprecated use `CreatePromptSnippetFormat$inboundSchema` instead. */
  export const inboundSchema = CreatePromptSnippetFormat$inboundSchema;
  /** @deprecated use `CreatePromptSnippetFormat$outboundSchema` instead. */
  export const outboundSchema = CreatePromptSnippetFormat$outboundSchema;
}

/** @internal */
export const CreatePromptSnippetQuality$inboundSchema: z.ZodNativeEnum<
  typeof CreatePromptSnippetQuality
> = z.nativeEnum(CreatePromptSnippetQuality);

/** @internal */
export const CreatePromptSnippetQuality$outboundSchema: z.ZodNativeEnum<
  typeof CreatePromptSnippetQuality
> = CreatePromptSnippetQuality$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreatePromptSnippetQuality$ {
  /** @deprecated use `CreatePromptSnippetQuality$inboundSchema` instead. */
  export const inboundSchema = CreatePromptSnippetQuality$inboundSchema;
  /** @deprecated use `CreatePromptSnippetQuality$outboundSchema` instead. */
  export const outboundSchema = CreatePromptSnippetQuality$outboundSchema;
}

/** @internal */
export const CreatePromptSnippetResponseFormatPromptSnippetsResponseType$inboundSchema:
  z.ZodNativeEnum<
    typeof CreatePromptSnippetResponseFormatPromptSnippetsResponseType
  > = z.nativeEnum(CreatePromptSnippetResponseFormatPromptSnippetsResponseType);

/** @internal */
export const CreatePromptSnippetResponseFormatPromptSnippetsResponseType$outboundSchema:
  z.ZodNativeEnum<
    typeof CreatePromptSnippetResponseFormatPromptSnippetsResponseType
  > = CreatePromptSnippetResponseFormatPromptSnippetsResponseType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreatePromptSnippetResponseFormatPromptSnippetsResponseType$ {
  /** @deprecated use `CreatePromptSnippetResponseFormatPromptSnippetsResponseType$inboundSchema` instead. */
  export const inboundSchema =
    CreatePromptSnippetResponseFormatPromptSnippetsResponseType$inboundSchema;
  /** @deprecated use `CreatePromptSnippetResponseFormatPromptSnippetsResponseType$outboundSchema` instead. */
  export const outboundSchema =
    CreatePromptSnippetResponseFormatPromptSnippetsResponseType$outboundSchema;
}

/** @internal */
export const CreatePromptSnippetResponseFormat2$inboundSchema: z.ZodType<
  CreatePromptSnippetResponseFormat2,
  z.ZodTypeDef,
  unknown
> = z.object({
  type:
    CreatePromptSnippetResponseFormatPromptSnippetsResponseType$inboundSchema,
});

/** @internal */
export type CreatePromptSnippetResponseFormat2$Outbound = {
  type: string;
};

/** @internal */
export const CreatePromptSnippetResponseFormat2$outboundSchema: z.ZodType<
  CreatePromptSnippetResponseFormat2$Outbound,
  z.ZodTypeDef,
  CreatePromptSnippetResponseFormat2
> = z.object({
  type:
    CreatePromptSnippetResponseFormatPromptSnippetsResponseType$outboundSchema,
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreatePromptSnippetResponseFormat2$ {
  /** @deprecated use `CreatePromptSnippetResponseFormat2$inboundSchema` instead. */
  export const inboundSchema = CreatePromptSnippetResponseFormat2$inboundSchema;
  /** @deprecated use `CreatePromptSnippetResponseFormat2$outboundSchema` instead. */
  export const outboundSchema =
    CreatePromptSnippetResponseFormat2$outboundSchema;
  /** @deprecated use `CreatePromptSnippetResponseFormat2$Outbound` instead. */
  export type Outbound = CreatePromptSnippetResponseFormat2$Outbound;
}

export function createPromptSnippetResponseFormat2ToJSON(
  createPromptSnippetResponseFormat2: CreatePromptSnippetResponseFormat2,
): string {
  return JSON.stringify(
    CreatePromptSnippetResponseFormat2$outboundSchema.parse(
      createPromptSnippetResponseFormat2,
    ),
  );
}

export function createPromptSnippetResponseFormat2FromJSON(
  jsonString: string,
): SafeParseResult<CreatePromptSnippetResponseFormat2, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      CreatePromptSnippetResponseFormat2$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreatePromptSnippetResponseFormat2' from JSON`,
  );
}

/** @internal */
export const CreatePromptSnippetResponseFormatPromptSnippetsType$inboundSchema:
  z.ZodNativeEnum<typeof CreatePromptSnippetResponseFormatPromptSnippetsType> =
    z.nativeEnum(CreatePromptSnippetResponseFormatPromptSnippetsType);

/** @internal */
export const CreatePromptSnippetResponseFormatPromptSnippetsType$outboundSchema:
  z.ZodNativeEnum<typeof CreatePromptSnippetResponseFormatPromptSnippetsType> =
    CreatePromptSnippetResponseFormatPromptSnippetsType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreatePromptSnippetResponseFormatPromptSnippetsType$ {
  /** @deprecated use `CreatePromptSnippetResponseFormatPromptSnippetsType$inboundSchema` instead. */
  export const inboundSchema =
    CreatePromptSnippetResponseFormatPromptSnippetsType$inboundSchema;
  /** @deprecated use `CreatePromptSnippetResponseFormatPromptSnippetsType$outboundSchema` instead. */
  export const outboundSchema =
    CreatePromptSnippetResponseFormatPromptSnippetsType$outboundSchema;
}

/** @internal */
export const CreatePromptSnippetResponseFormatJsonSchema$inboundSchema:
  z.ZodType<
    CreatePromptSnippetResponseFormatJsonSchema,
    z.ZodTypeDef,
    unknown
  > = z.object({
    name: z.string(),
    strict: z.boolean(),
    schema: z.record(z.any()),
  });

/** @internal */
export type CreatePromptSnippetResponseFormatJsonSchema$Outbound = {
  name: string;
  strict: boolean;
  schema: { [k: string]: any };
};

/** @internal */
export const CreatePromptSnippetResponseFormatJsonSchema$outboundSchema:
  z.ZodType<
    CreatePromptSnippetResponseFormatJsonSchema$Outbound,
    z.ZodTypeDef,
    CreatePromptSnippetResponseFormatJsonSchema
  > = z.object({
    name: z.string(),
    strict: z.boolean(),
    schema: z.record(z.any()),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreatePromptSnippetResponseFormatJsonSchema$ {
  /** @deprecated use `CreatePromptSnippetResponseFormatJsonSchema$inboundSchema` instead. */
  export const inboundSchema =
    CreatePromptSnippetResponseFormatJsonSchema$inboundSchema;
  /** @deprecated use `CreatePromptSnippetResponseFormatJsonSchema$outboundSchema` instead. */
  export const outboundSchema =
    CreatePromptSnippetResponseFormatJsonSchema$outboundSchema;
  /** @deprecated use `CreatePromptSnippetResponseFormatJsonSchema$Outbound` instead. */
  export type Outbound = CreatePromptSnippetResponseFormatJsonSchema$Outbound;
}

export function createPromptSnippetResponseFormatJsonSchemaToJSON(
  createPromptSnippetResponseFormatJsonSchema:
    CreatePromptSnippetResponseFormatJsonSchema,
): string {
  return JSON.stringify(
    CreatePromptSnippetResponseFormatJsonSchema$outboundSchema.parse(
      createPromptSnippetResponseFormatJsonSchema,
    ),
  );
}

export function createPromptSnippetResponseFormatJsonSchemaFromJSON(
  jsonString: string,
): SafeParseResult<
  CreatePromptSnippetResponseFormatJsonSchema,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      CreatePromptSnippetResponseFormatJsonSchema$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'CreatePromptSnippetResponseFormatJsonSchema' from JSON`,
  );
}

/** @internal */
export const CreatePromptSnippetResponseFormat1$inboundSchema: z.ZodType<
  CreatePromptSnippetResponseFormat1,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: CreatePromptSnippetResponseFormatPromptSnippetsType$inboundSchema,
  json_schema: z.lazy(() =>
    CreatePromptSnippetResponseFormatJsonSchema$inboundSchema
  ),
}).transform((v) => {
  return remap$(v, {
    "json_schema": "jsonSchema",
  });
});

/** @internal */
export type CreatePromptSnippetResponseFormat1$Outbound = {
  type: string;
  json_schema: CreatePromptSnippetResponseFormatJsonSchema$Outbound;
};

/** @internal */
export const CreatePromptSnippetResponseFormat1$outboundSchema: z.ZodType<
  CreatePromptSnippetResponseFormat1$Outbound,
  z.ZodTypeDef,
  CreatePromptSnippetResponseFormat1
> = z.object({
  type: CreatePromptSnippetResponseFormatPromptSnippetsType$outboundSchema,
  jsonSchema: z.lazy(() =>
    CreatePromptSnippetResponseFormatJsonSchema$outboundSchema
  ),
}).transform((v) => {
  return remap$(v, {
    jsonSchema: "json_schema",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreatePromptSnippetResponseFormat1$ {
  /** @deprecated use `CreatePromptSnippetResponseFormat1$inboundSchema` instead. */
  export const inboundSchema = CreatePromptSnippetResponseFormat1$inboundSchema;
  /** @deprecated use `CreatePromptSnippetResponseFormat1$outboundSchema` instead. */
  export const outboundSchema =
    CreatePromptSnippetResponseFormat1$outboundSchema;
  /** @deprecated use `CreatePromptSnippetResponseFormat1$Outbound` instead. */
  export type Outbound = CreatePromptSnippetResponseFormat1$Outbound;
}

export function createPromptSnippetResponseFormat1ToJSON(
  createPromptSnippetResponseFormat1: CreatePromptSnippetResponseFormat1,
): string {
  return JSON.stringify(
    CreatePromptSnippetResponseFormat1$outboundSchema.parse(
      createPromptSnippetResponseFormat1,
    ),
  );
}

export function createPromptSnippetResponseFormat1FromJSON(
  jsonString: string,
): SafeParseResult<CreatePromptSnippetResponseFormat1, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      CreatePromptSnippetResponseFormat1$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreatePromptSnippetResponseFormat1' from JSON`,
  );
}

/** @internal */
export const CreatePromptSnippetResponseFormat$inboundSchema: z.ZodType<
  CreatePromptSnippetResponseFormat,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => CreatePromptSnippetResponseFormat2$inboundSchema),
  z.lazy(() => CreatePromptSnippetResponseFormat1$inboundSchema),
]);

/** @internal */
export type CreatePromptSnippetResponseFormat$Outbound =
  | CreatePromptSnippetResponseFormat2$Outbound
  | CreatePromptSnippetResponseFormat1$Outbound;

/** @internal */
export const CreatePromptSnippetResponseFormat$outboundSchema: z.ZodType<
  CreatePromptSnippetResponseFormat$Outbound,
  z.ZodTypeDef,
  CreatePromptSnippetResponseFormat
> = z.union([
  z.lazy(() => CreatePromptSnippetResponseFormat2$outboundSchema),
  z.lazy(() => CreatePromptSnippetResponseFormat1$outboundSchema),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreatePromptSnippetResponseFormat$ {
  /** @deprecated use `CreatePromptSnippetResponseFormat$inboundSchema` instead. */
  export const inboundSchema = CreatePromptSnippetResponseFormat$inboundSchema;
  /** @deprecated use `CreatePromptSnippetResponseFormat$outboundSchema` instead. */
  export const outboundSchema =
    CreatePromptSnippetResponseFormat$outboundSchema;
  /** @deprecated use `CreatePromptSnippetResponseFormat$Outbound` instead. */
  export type Outbound = CreatePromptSnippetResponseFormat$Outbound;
}

export function createPromptSnippetResponseFormatToJSON(
  createPromptSnippetResponseFormat: CreatePromptSnippetResponseFormat,
): string {
  return JSON.stringify(
    CreatePromptSnippetResponseFormat$outboundSchema.parse(
      createPromptSnippetResponseFormat,
    ),
  );
}

export function createPromptSnippetResponseFormatFromJSON(
  jsonString: string,
): SafeParseResult<CreatePromptSnippetResponseFormat, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreatePromptSnippetResponseFormat$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreatePromptSnippetResponseFormat' from JSON`,
  );
}

/** @internal */
export const CreatePromptSnippetPhotoRealVersion$inboundSchema: z.ZodNativeEnum<
  typeof CreatePromptSnippetPhotoRealVersion
> = z.nativeEnum(CreatePromptSnippetPhotoRealVersion);

/** @internal */
export const CreatePromptSnippetPhotoRealVersion$outboundSchema:
  z.ZodNativeEnum<typeof CreatePromptSnippetPhotoRealVersion> =
    CreatePromptSnippetPhotoRealVersion$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreatePromptSnippetPhotoRealVersion$ {
  /** @deprecated use `CreatePromptSnippetPhotoRealVersion$inboundSchema` instead. */
  export const inboundSchema =
    CreatePromptSnippetPhotoRealVersion$inboundSchema;
  /** @deprecated use `CreatePromptSnippetPhotoRealVersion$outboundSchema` instead. */
  export const outboundSchema =
    CreatePromptSnippetPhotoRealVersion$outboundSchema;
}

/** @internal */
export const CreatePromptSnippetEncodingFormat$inboundSchema: z.ZodNativeEnum<
  typeof CreatePromptSnippetEncodingFormat
> = z.nativeEnum(CreatePromptSnippetEncodingFormat);

/** @internal */
export const CreatePromptSnippetEncodingFormat$outboundSchema: z.ZodNativeEnum<
  typeof CreatePromptSnippetEncodingFormat
> = CreatePromptSnippetEncodingFormat$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreatePromptSnippetEncodingFormat$ {
  /** @deprecated use `CreatePromptSnippetEncodingFormat$inboundSchema` instead. */
  export const inboundSchema = CreatePromptSnippetEncodingFormat$inboundSchema;
  /** @deprecated use `CreatePromptSnippetEncodingFormat$outboundSchema` instead. */
  export const outboundSchema =
    CreatePromptSnippetEncodingFormat$outboundSchema;
}

/** @internal */
export const CreatePromptSnippetReasoningEffort$inboundSchema: z.ZodNativeEnum<
  typeof CreatePromptSnippetReasoningEffort
> = z.nativeEnum(CreatePromptSnippetReasoningEffort);

/** @internal */
export const CreatePromptSnippetReasoningEffort$outboundSchema: z.ZodNativeEnum<
  typeof CreatePromptSnippetReasoningEffort
> = CreatePromptSnippetReasoningEffort$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreatePromptSnippetReasoningEffort$ {
  /** @deprecated use `CreatePromptSnippetReasoningEffort$inboundSchema` instead. */
  export const inboundSchema = CreatePromptSnippetReasoningEffort$inboundSchema;
  /** @deprecated use `CreatePromptSnippetReasoningEffort$outboundSchema` instead. */
  export const outboundSchema =
    CreatePromptSnippetReasoningEffort$outboundSchema;
}

/** @internal */
export const CreatePromptSnippetModelParameters$inboundSchema: z.ZodType<
  CreatePromptSnippetModelParameters,
  z.ZodTypeDef,
  unknown
> = z.object({
  temperature: z.number().optional(),
  maxTokens: z.number().optional(),
  topK: z.number().optional(),
  topP: z.number().optional(),
  frequencyPenalty: z.number().optional(),
  presencePenalty: z.number().optional(),
  numImages: z.number().optional(),
  seed: z.number().optional(),
  format: CreatePromptSnippetFormat$inboundSchema.optional(),
  dimensions: z.string().optional(),
  quality: CreatePromptSnippetQuality$inboundSchema.optional(),
  style: z.string().optional(),
  responseFormat: z.nullable(
    z.union([
      z.lazy(() => CreatePromptSnippetResponseFormat2$inboundSchema),
      z.lazy(() => CreatePromptSnippetResponseFormat1$inboundSchema),
    ]),
  ).optional(),
  photoRealVersion: CreatePromptSnippetPhotoRealVersion$inboundSchema
    .optional(),
  encoding_format: CreatePromptSnippetEncodingFormat$inboundSchema.optional(),
  reasoningEffort: CreatePromptSnippetReasoningEffort$inboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    "encoding_format": "encodingFormat",
  });
});

/** @internal */
export type CreatePromptSnippetModelParameters$Outbound = {
  temperature?: number | undefined;
  maxTokens?: number | undefined;
  topK?: number | undefined;
  topP?: number | undefined;
  frequencyPenalty?: number | undefined;
  presencePenalty?: number | undefined;
  numImages?: number | undefined;
  seed?: number | undefined;
  format?: string | undefined;
  dimensions?: string | undefined;
  quality?: string | undefined;
  style?: string | undefined;
  responseFormat?:
    | CreatePromptSnippetResponseFormat2$Outbound
    | CreatePromptSnippetResponseFormat1$Outbound
    | null
    | undefined;
  photoRealVersion?: string | undefined;
  encoding_format?: string | undefined;
  reasoningEffort?: string | undefined;
};

/** @internal */
export const CreatePromptSnippetModelParameters$outboundSchema: z.ZodType<
  CreatePromptSnippetModelParameters$Outbound,
  z.ZodTypeDef,
  CreatePromptSnippetModelParameters
> = z.object({
  temperature: z.number().optional(),
  maxTokens: z.number().optional(),
  topK: z.number().optional(),
  topP: z.number().optional(),
  frequencyPenalty: z.number().optional(),
  presencePenalty: z.number().optional(),
  numImages: z.number().optional(),
  seed: z.number().optional(),
  format: CreatePromptSnippetFormat$outboundSchema.optional(),
  dimensions: z.string().optional(),
  quality: CreatePromptSnippetQuality$outboundSchema.optional(),
  style: z.string().optional(),
  responseFormat: z.nullable(
    z.union([
      z.lazy(() => CreatePromptSnippetResponseFormat2$outboundSchema),
      z.lazy(() => CreatePromptSnippetResponseFormat1$outboundSchema),
    ]),
  ).optional(),
  photoRealVersion: CreatePromptSnippetPhotoRealVersion$outboundSchema
    .optional(),
  encodingFormat: CreatePromptSnippetEncodingFormat$outboundSchema.optional(),
  reasoningEffort: CreatePromptSnippetReasoningEffort$outboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    encodingFormat: "encoding_format",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreatePromptSnippetModelParameters$ {
  /** @deprecated use `CreatePromptSnippetModelParameters$inboundSchema` instead. */
  export const inboundSchema = CreatePromptSnippetModelParameters$inboundSchema;
  /** @deprecated use `CreatePromptSnippetModelParameters$outboundSchema` instead. */
  export const outboundSchema =
    CreatePromptSnippetModelParameters$outboundSchema;
  /** @deprecated use `CreatePromptSnippetModelParameters$Outbound` instead. */
  export type Outbound = CreatePromptSnippetModelParameters$Outbound;
}

export function createPromptSnippetModelParametersToJSON(
  createPromptSnippetModelParameters: CreatePromptSnippetModelParameters,
): string {
  return JSON.stringify(
    CreatePromptSnippetModelParameters$outboundSchema.parse(
      createPromptSnippetModelParameters,
    ),
  );
}

export function createPromptSnippetModelParametersFromJSON(
  jsonString: string,
): SafeParseResult<CreatePromptSnippetModelParameters, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      CreatePromptSnippetModelParameters$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreatePromptSnippetModelParameters' from JSON`,
  );
}

/** @internal */
export const CreatePromptSnippetProvider$inboundSchema: z.ZodNativeEnum<
  typeof CreatePromptSnippetProvider
> = z.nativeEnum(CreatePromptSnippetProvider);

/** @internal */
export const CreatePromptSnippetProvider$outboundSchema: z.ZodNativeEnum<
  typeof CreatePromptSnippetProvider
> = CreatePromptSnippetProvider$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreatePromptSnippetProvider$ {
  /** @deprecated use `CreatePromptSnippetProvider$inboundSchema` instead. */
  export const inboundSchema = CreatePromptSnippetProvider$inboundSchema;
  /** @deprecated use `CreatePromptSnippetProvider$outboundSchema` instead. */
  export const outboundSchema = CreatePromptSnippetProvider$outboundSchema;
}

/** @internal */
export const CreatePromptSnippetPromptSnippetsRole$inboundSchema:
  z.ZodNativeEnum<typeof CreatePromptSnippetPromptSnippetsRole> = z.nativeEnum(
    CreatePromptSnippetPromptSnippetsRole,
  );

/** @internal */
export const CreatePromptSnippetPromptSnippetsRole$outboundSchema:
  z.ZodNativeEnum<typeof CreatePromptSnippetPromptSnippetsRole> =
    CreatePromptSnippetPromptSnippetsRole$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreatePromptSnippetPromptSnippetsRole$ {
  /** @deprecated use `CreatePromptSnippetPromptSnippetsRole$inboundSchema` instead. */
  export const inboundSchema =
    CreatePromptSnippetPromptSnippetsRole$inboundSchema;
  /** @deprecated use `CreatePromptSnippetPromptSnippetsRole$outboundSchema` instead. */
  export const outboundSchema =
    CreatePromptSnippetPromptSnippetsRole$outboundSchema;
}

/** @internal */
export const CreatePromptSnippet2PromptSnippetsResponse200Type$inboundSchema:
  z.ZodNativeEnum<typeof CreatePromptSnippet2PromptSnippetsResponse200Type> = z
    .nativeEnum(CreatePromptSnippet2PromptSnippetsResponse200Type);

/** @internal */
export const CreatePromptSnippet2PromptSnippetsResponse200Type$outboundSchema:
  z.ZodNativeEnum<typeof CreatePromptSnippet2PromptSnippetsResponse200Type> =
    CreatePromptSnippet2PromptSnippetsResponse200Type$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreatePromptSnippet2PromptSnippetsResponse200Type$ {
  /** @deprecated use `CreatePromptSnippet2PromptSnippetsResponse200Type$inboundSchema` instead. */
  export const inboundSchema =
    CreatePromptSnippet2PromptSnippetsResponse200Type$inboundSchema;
  /** @deprecated use `CreatePromptSnippet2PromptSnippetsResponse200Type$outboundSchema` instead. */
  export const outboundSchema =
    CreatePromptSnippet2PromptSnippetsResponse200Type$outboundSchema;
}

/** @internal */
export const CreatePromptSnippet2PromptSnippetsImageUrl$inboundSchema:
  z.ZodType<CreatePromptSnippet2PromptSnippetsImageUrl, z.ZodTypeDef, unknown> =
    z.object({
      id: z.string().optional(),
      url: z.string(),
      detail: z.string().optional(),
    });

/** @internal */
export type CreatePromptSnippet2PromptSnippetsImageUrl$Outbound = {
  id?: string | undefined;
  url: string;
  detail?: string | undefined;
};

/** @internal */
export const CreatePromptSnippet2PromptSnippetsImageUrl$outboundSchema:
  z.ZodType<
    CreatePromptSnippet2PromptSnippetsImageUrl$Outbound,
    z.ZodTypeDef,
    CreatePromptSnippet2PromptSnippetsImageUrl
  > = z.object({
    id: z.string().optional(),
    url: z.string(),
    detail: z.string().optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreatePromptSnippet2PromptSnippetsImageUrl$ {
  /** @deprecated use `CreatePromptSnippet2PromptSnippetsImageUrl$inboundSchema` instead. */
  export const inboundSchema =
    CreatePromptSnippet2PromptSnippetsImageUrl$inboundSchema;
  /** @deprecated use `CreatePromptSnippet2PromptSnippetsImageUrl$outboundSchema` instead. */
  export const outboundSchema =
    CreatePromptSnippet2PromptSnippetsImageUrl$outboundSchema;
  /** @deprecated use `CreatePromptSnippet2PromptSnippetsImageUrl$Outbound` instead. */
  export type Outbound = CreatePromptSnippet2PromptSnippetsImageUrl$Outbound;
}

export function createPromptSnippet2PromptSnippetsImageUrlToJSON(
  createPromptSnippet2PromptSnippetsImageUrl:
    CreatePromptSnippet2PromptSnippetsImageUrl,
): string {
  return JSON.stringify(
    CreatePromptSnippet2PromptSnippetsImageUrl$outboundSchema.parse(
      createPromptSnippet2PromptSnippetsImageUrl,
    ),
  );
}

export function createPromptSnippet2PromptSnippetsImageUrlFromJSON(
  jsonString: string,
): SafeParseResult<
  CreatePromptSnippet2PromptSnippetsImageUrl,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      CreatePromptSnippet2PromptSnippetsImageUrl$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'CreatePromptSnippet2PromptSnippetsImageUrl' from JSON`,
  );
}

/** @internal */
export const CreatePromptSnippet2PromptSnippets2$inboundSchema: z.ZodType<
  CreatePromptSnippet2PromptSnippets2,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: CreatePromptSnippet2PromptSnippetsResponse200Type$inboundSchema,
  image_url: z.lazy(() =>
    CreatePromptSnippet2PromptSnippetsImageUrl$inboundSchema
  ),
}).transform((v) => {
  return remap$(v, {
    "image_url": "imageUrl",
  });
});

/** @internal */
export type CreatePromptSnippet2PromptSnippets2$Outbound = {
  type: string;
  image_url: CreatePromptSnippet2PromptSnippetsImageUrl$Outbound;
};

/** @internal */
export const CreatePromptSnippet2PromptSnippets2$outboundSchema: z.ZodType<
  CreatePromptSnippet2PromptSnippets2$Outbound,
  z.ZodTypeDef,
  CreatePromptSnippet2PromptSnippets2
> = z.object({
  type: CreatePromptSnippet2PromptSnippetsResponse200Type$outboundSchema,
  imageUrl: z.lazy(() =>
    CreatePromptSnippet2PromptSnippetsImageUrl$outboundSchema
  ),
}).transform((v) => {
  return remap$(v, {
    imageUrl: "image_url",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreatePromptSnippet2PromptSnippets2$ {
  /** @deprecated use `CreatePromptSnippet2PromptSnippets2$inboundSchema` instead. */
  export const inboundSchema =
    CreatePromptSnippet2PromptSnippets2$inboundSchema;
  /** @deprecated use `CreatePromptSnippet2PromptSnippets2$outboundSchema` instead. */
  export const outboundSchema =
    CreatePromptSnippet2PromptSnippets2$outboundSchema;
  /** @deprecated use `CreatePromptSnippet2PromptSnippets2$Outbound` instead. */
  export type Outbound = CreatePromptSnippet2PromptSnippets2$Outbound;
}

export function createPromptSnippet2PromptSnippets2ToJSON(
  createPromptSnippet2PromptSnippets2: CreatePromptSnippet2PromptSnippets2,
): string {
  return JSON.stringify(
    CreatePromptSnippet2PromptSnippets2$outboundSchema.parse(
      createPromptSnippet2PromptSnippets2,
    ),
  );
}

export function createPromptSnippet2PromptSnippets2FromJSON(
  jsonString: string,
): SafeParseResult<CreatePromptSnippet2PromptSnippets2, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      CreatePromptSnippet2PromptSnippets2$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreatePromptSnippet2PromptSnippets2' from JSON`,
  );
}

/** @internal */
export const CreatePromptSnippet2PromptSnippetsResponseType$inboundSchema:
  z.ZodNativeEnum<typeof CreatePromptSnippet2PromptSnippetsResponseType> = z
    .nativeEnum(CreatePromptSnippet2PromptSnippetsResponseType);

/** @internal */
export const CreatePromptSnippet2PromptSnippetsResponseType$outboundSchema:
  z.ZodNativeEnum<typeof CreatePromptSnippet2PromptSnippetsResponseType> =
    CreatePromptSnippet2PromptSnippetsResponseType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreatePromptSnippet2PromptSnippetsResponseType$ {
  /** @deprecated use `CreatePromptSnippet2PromptSnippetsResponseType$inboundSchema` instead. */
  export const inboundSchema =
    CreatePromptSnippet2PromptSnippetsResponseType$inboundSchema;
  /** @deprecated use `CreatePromptSnippet2PromptSnippetsResponseType$outboundSchema` instead. */
  export const outboundSchema =
    CreatePromptSnippet2PromptSnippetsResponseType$outboundSchema;
}

/** @internal */
export const CreatePromptSnippet2PromptSnippets1$inboundSchema: z.ZodType<
  CreatePromptSnippet2PromptSnippets1,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: CreatePromptSnippet2PromptSnippetsResponseType$inboundSchema,
  text: z.string(),
});

/** @internal */
export type CreatePromptSnippet2PromptSnippets1$Outbound = {
  type: string;
  text: string;
};

/** @internal */
export const CreatePromptSnippet2PromptSnippets1$outboundSchema: z.ZodType<
  CreatePromptSnippet2PromptSnippets1$Outbound,
  z.ZodTypeDef,
  CreatePromptSnippet2PromptSnippets1
> = z.object({
  type: CreatePromptSnippet2PromptSnippetsResponseType$outboundSchema,
  text: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreatePromptSnippet2PromptSnippets1$ {
  /** @deprecated use `CreatePromptSnippet2PromptSnippets1$inboundSchema` instead. */
  export const inboundSchema =
    CreatePromptSnippet2PromptSnippets1$inboundSchema;
  /** @deprecated use `CreatePromptSnippet2PromptSnippets1$outboundSchema` instead. */
  export const outboundSchema =
    CreatePromptSnippet2PromptSnippets1$outboundSchema;
  /** @deprecated use `CreatePromptSnippet2PromptSnippets1$Outbound` instead. */
  export type Outbound = CreatePromptSnippet2PromptSnippets1$Outbound;
}

export function createPromptSnippet2PromptSnippets1ToJSON(
  createPromptSnippet2PromptSnippets1: CreatePromptSnippet2PromptSnippets1,
): string {
  return JSON.stringify(
    CreatePromptSnippet2PromptSnippets1$outboundSchema.parse(
      createPromptSnippet2PromptSnippets1,
    ),
  );
}

export function createPromptSnippet2PromptSnippets1FromJSON(
  jsonString: string,
): SafeParseResult<CreatePromptSnippet2PromptSnippets1, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      CreatePromptSnippet2PromptSnippets1$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreatePromptSnippet2PromptSnippets1' from JSON`,
  );
}

/** @internal */
export const CreatePromptSnippetContentPromptSnippets2$inboundSchema: z.ZodType<
  CreatePromptSnippetContentPromptSnippets2,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => CreatePromptSnippet2PromptSnippets1$inboundSchema),
  z.lazy(() => CreatePromptSnippet2PromptSnippets2$inboundSchema),
]);

/** @internal */
export type CreatePromptSnippetContentPromptSnippets2$Outbound =
  | CreatePromptSnippet2PromptSnippets1$Outbound
  | CreatePromptSnippet2PromptSnippets2$Outbound;

/** @internal */
export const CreatePromptSnippetContentPromptSnippets2$outboundSchema:
  z.ZodType<
    CreatePromptSnippetContentPromptSnippets2$Outbound,
    z.ZodTypeDef,
    CreatePromptSnippetContentPromptSnippets2
  > = z.union([
    z.lazy(() => CreatePromptSnippet2PromptSnippets1$outboundSchema),
    z.lazy(() => CreatePromptSnippet2PromptSnippets2$outboundSchema),
  ]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreatePromptSnippetContentPromptSnippets2$ {
  /** @deprecated use `CreatePromptSnippetContentPromptSnippets2$inboundSchema` instead. */
  export const inboundSchema =
    CreatePromptSnippetContentPromptSnippets2$inboundSchema;
  /** @deprecated use `CreatePromptSnippetContentPromptSnippets2$outboundSchema` instead. */
  export const outboundSchema =
    CreatePromptSnippetContentPromptSnippets2$outboundSchema;
  /** @deprecated use `CreatePromptSnippetContentPromptSnippets2$Outbound` instead. */
  export type Outbound = CreatePromptSnippetContentPromptSnippets2$Outbound;
}

export function createPromptSnippetContentPromptSnippets2ToJSON(
  createPromptSnippetContentPromptSnippets2:
    CreatePromptSnippetContentPromptSnippets2,
): string {
  return JSON.stringify(
    CreatePromptSnippetContentPromptSnippets2$outboundSchema.parse(
      createPromptSnippetContentPromptSnippets2,
    ),
  );
}

export function createPromptSnippetContentPromptSnippets2FromJSON(
  jsonString: string,
): SafeParseResult<
  CreatePromptSnippetContentPromptSnippets2,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      CreatePromptSnippetContentPromptSnippets2$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'CreatePromptSnippetContentPromptSnippets2' from JSON`,
  );
}

/** @internal */
export const CreatePromptSnippetPromptSnippetsContent$inboundSchema: z.ZodType<
  CreatePromptSnippetPromptSnippetsContent,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.string(),
  z.array(z.union([
    z.lazy(() => CreatePromptSnippet2PromptSnippets1$inboundSchema),
    z.lazy(() => CreatePromptSnippet2PromptSnippets2$inboundSchema),
  ])),
]);

/** @internal */
export type CreatePromptSnippetPromptSnippetsContent$Outbound =
  | string
  | Array<
    | CreatePromptSnippet2PromptSnippets1$Outbound
    | CreatePromptSnippet2PromptSnippets2$Outbound
  >;

/** @internal */
export const CreatePromptSnippetPromptSnippetsContent$outboundSchema: z.ZodType<
  CreatePromptSnippetPromptSnippetsContent$Outbound,
  z.ZodTypeDef,
  CreatePromptSnippetPromptSnippetsContent
> = z.union([
  z.string(),
  z.array(z.union([
    z.lazy(() => CreatePromptSnippet2PromptSnippets1$outboundSchema),
    z.lazy(() => CreatePromptSnippet2PromptSnippets2$outboundSchema),
  ])),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreatePromptSnippetPromptSnippetsContent$ {
  /** @deprecated use `CreatePromptSnippetPromptSnippetsContent$inboundSchema` instead. */
  export const inboundSchema =
    CreatePromptSnippetPromptSnippetsContent$inboundSchema;
  /** @deprecated use `CreatePromptSnippetPromptSnippetsContent$outboundSchema` instead. */
  export const outboundSchema =
    CreatePromptSnippetPromptSnippetsContent$outboundSchema;
  /** @deprecated use `CreatePromptSnippetPromptSnippetsContent$Outbound` instead. */
  export type Outbound = CreatePromptSnippetPromptSnippetsContent$Outbound;
}

export function createPromptSnippetPromptSnippetsContentToJSON(
  createPromptSnippetPromptSnippetsContent:
    CreatePromptSnippetPromptSnippetsContent,
): string {
  return JSON.stringify(
    CreatePromptSnippetPromptSnippetsContent$outboundSchema.parse(
      createPromptSnippetPromptSnippetsContent,
    ),
  );
}

export function createPromptSnippetPromptSnippetsContentFromJSON(
  jsonString: string,
): SafeParseResult<
  CreatePromptSnippetPromptSnippetsContent,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      CreatePromptSnippetPromptSnippetsContent$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'CreatePromptSnippetPromptSnippetsContent' from JSON`,
  );
}

/** @internal */
export const CreatePromptSnippetPromptSnippetsResponseType$inboundSchema:
  z.ZodNativeEnum<typeof CreatePromptSnippetPromptSnippetsResponseType> = z
    .nativeEnum(CreatePromptSnippetPromptSnippetsResponseType);

/** @internal */
export const CreatePromptSnippetPromptSnippetsResponseType$outboundSchema:
  z.ZodNativeEnum<typeof CreatePromptSnippetPromptSnippetsResponseType> =
    CreatePromptSnippetPromptSnippetsResponseType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreatePromptSnippetPromptSnippetsResponseType$ {
  /** @deprecated use `CreatePromptSnippetPromptSnippetsResponseType$inboundSchema` instead. */
  export const inboundSchema =
    CreatePromptSnippetPromptSnippetsResponseType$inboundSchema;
  /** @deprecated use `CreatePromptSnippetPromptSnippetsResponseType$outboundSchema` instead. */
  export const outboundSchema =
    CreatePromptSnippetPromptSnippetsResponseType$outboundSchema;
}

/** @internal */
export const CreatePromptSnippetPromptSnippetsFunction$inboundSchema: z.ZodType<
  CreatePromptSnippetPromptSnippetsFunction,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.string(),
  arguments: z.string(),
});

/** @internal */
export type CreatePromptSnippetPromptSnippetsFunction$Outbound = {
  name: string;
  arguments: string;
};

/** @internal */
export const CreatePromptSnippetPromptSnippetsFunction$outboundSchema:
  z.ZodType<
    CreatePromptSnippetPromptSnippetsFunction$Outbound,
    z.ZodTypeDef,
    CreatePromptSnippetPromptSnippetsFunction
  > = z.object({
    name: z.string(),
    arguments: z.string(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreatePromptSnippetPromptSnippetsFunction$ {
  /** @deprecated use `CreatePromptSnippetPromptSnippetsFunction$inboundSchema` instead. */
  export const inboundSchema =
    CreatePromptSnippetPromptSnippetsFunction$inboundSchema;
  /** @deprecated use `CreatePromptSnippetPromptSnippetsFunction$outboundSchema` instead. */
  export const outboundSchema =
    CreatePromptSnippetPromptSnippetsFunction$outboundSchema;
  /** @deprecated use `CreatePromptSnippetPromptSnippetsFunction$Outbound` instead. */
  export type Outbound = CreatePromptSnippetPromptSnippetsFunction$Outbound;
}

export function createPromptSnippetPromptSnippetsFunctionToJSON(
  createPromptSnippetPromptSnippetsFunction:
    CreatePromptSnippetPromptSnippetsFunction,
): string {
  return JSON.stringify(
    CreatePromptSnippetPromptSnippetsFunction$outboundSchema.parse(
      createPromptSnippetPromptSnippetsFunction,
    ),
  );
}

export function createPromptSnippetPromptSnippetsFunctionFromJSON(
  jsonString: string,
): SafeParseResult<
  CreatePromptSnippetPromptSnippetsFunction,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      CreatePromptSnippetPromptSnippetsFunction$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'CreatePromptSnippetPromptSnippetsFunction' from JSON`,
  );
}

/** @internal */
export const CreatePromptSnippetPromptSnippetsToolCalls$inboundSchema:
  z.ZodType<CreatePromptSnippetPromptSnippetsToolCalls, z.ZodTypeDef, unknown> =
    z.object({
      id: z.string().optional(),
      index: z.number().optional(),
      type: CreatePromptSnippetPromptSnippetsResponseType$inboundSchema,
      function: z.lazy(() =>
        CreatePromptSnippetPromptSnippetsFunction$inboundSchema
      ),
    });

/** @internal */
export type CreatePromptSnippetPromptSnippetsToolCalls$Outbound = {
  id?: string | undefined;
  index?: number | undefined;
  type: string;
  function: CreatePromptSnippetPromptSnippetsFunction$Outbound;
};

/** @internal */
export const CreatePromptSnippetPromptSnippetsToolCalls$outboundSchema:
  z.ZodType<
    CreatePromptSnippetPromptSnippetsToolCalls$Outbound,
    z.ZodTypeDef,
    CreatePromptSnippetPromptSnippetsToolCalls
  > = z.object({
    id: z.string().optional(),
    index: z.number().optional(),
    type: CreatePromptSnippetPromptSnippetsResponseType$outboundSchema,
    function: z.lazy(() =>
      CreatePromptSnippetPromptSnippetsFunction$outboundSchema
    ),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreatePromptSnippetPromptSnippetsToolCalls$ {
  /** @deprecated use `CreatePromptSnippetPromptSnippetsToolCalls$inboundSchema` instead. */
  export const inboundSchema =
    CreatePromptSnippetPromptSnippetsToolCalls$inboundSchema;
  /** @deprecated use `CreatePromptSnippetPromptSnippetsToolCalls$outboundSchema` instead. */
  export const outboundSchema =
    CreatePromptSnippetPromptSnippetsToolCalls$outboundSchema;
  /** @deprecated use `CreatePromptSnippetPromptSnippetsToolCalls$Outbound` instead. */
  export type Outbound = CreatePromptSnippetPromptSnippetsToolCalls$Outbound;
}

export function createPromptSnippetPromptSnippetsToolCallsToJSON(
  createPromptSnippetPromptSnippetsToolCalls:
    CreatePromptSnippetPromptSnippetsToolCalls,
): string {
  return JSON.stringify(
    CreatePromptSnippetPromptSnippetsToolCalls$outboundSchema.parse(
      createPromptSnippetPromptSnippetsToolCalls,
    ),
  );
}

export function createPromptSnippetPromptSnippetsToolCallsFromJSON(
  jsonString: string,
): SafeParseResult<
  CreatePromptSnippetPromptSnippetsToolCalls,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      CreatePromptSnippetPromptSnippetsToolCalls$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'CreatePromptSnippetPromptSnippetsToolCalls' from JSON`,
  );
}

/** @internal */
export const CreatePromptSnippetPromptSnippetsMessages$inboundSchema: z.ZodType<
  CreatePromptSnippetPromptSnippetsMessages,
  z.ZodTypeDef,
  unknown
> = z.object({
  role: CreatePromptSnippetPromptSnippetsRole$inboundSchema,
  content: z.union([
    z.string(),
    z.array(z.union([
      z.lazy(() => CreatePromptSnippet2PromptSnippets1$inboundSchema),
      z.lazy(() => CreatePromptSnippet2PromptSnippets2$inboundSchema),
    ])),
  ]),
  tool_calls: z.array(
    z.lazy(() => CreatePromptSnippetPromptSnippetsToolCalls$inboundSchema),
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    "tool_calls": "toolCalls",
  });
});

/** @internal */
export type CreatePromptSnippetPromptSnippetsMessages$Outbound = {
  role: string;
  content:
    | string
    | Array<
      | CreatePromptSnippet2PromptSnippets1$Outbound
      | CreatePromptSnippet2PromptSnippets2$Outbound
    >;
  tool_calls?:
    | Array<CreatePromptSnippetPromptSnippetsToolCalls$Outbound>
    | undefined;
};

/** @internal */
export const CreatePromptSnippetPromptSnippetsMessages$outboundSchema:
  z.ZodType<
    CreatePromptSnippetPromptSnippetsMessages$Outbound,
    z.ZodTypeDef,
    CreatePromptSnippetPromptSnippetsMessages
  > = z.object({
    role: CreatePromptSnippetPromptSnippetsRole$outboundSchema,
    content: z.union([
      z.string(),
      z.array(z.union([
        z.lazy(() => CreatePromptSnippet2PromptSnippets1$outboundSchema),
        z.lazy(() => CreatePromptSnippet2PromptSnippets2$outboundSchema),
      ])),
    ]),
    toolCalls: z.array(
      z.lazy(() => CreatePromptSnippetPromptSnippetsToolCalls$outboundSchema),
    ).optional(),
  }).transform((v) => {
    return remap$(v, {
      toolCalls: "tool_calls",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreatePromptSnippetPromptSnippetsMessages$ {
  /** @deprecated use `CreatePromptSnippetPromptSnippetsMessages$inboundSchema` instead. */
  export const inboundSchema =
    CreatePromptSnippetPromptSnippetsMessages$inboundSchema;
  /** @deprecated use `CreatePromptSnippetPromptSnippetsMessages$outboundSchema` instead. */
  export const outboundSchema =
    CreatePromptSnippetPromptSnippetsMessages$outboundSchema;
  /** @deprecated use `CreatePromptSnippetPromptSnippetsMessages$Outbound` instead. */
  export type Outbound = CreatePromptSnippetPromptSnippetsMessages$Outbound;
}

export function createPromptSnippetPromptSnippetsMessagesToJSON(
  createPromptSnippetPromptSnippetsMessages:
    CreatePromptSnippetPromptSnippetsMessages,
): string {
  return JSON.stringify(
    CreatePromptSnippetPromptSnippetsMessages$outboundSchema.parse(
      createPromptSnippetPromptSnippetsMessages,
    ),
  );
}

export function createPromptSnippetPromptSnippetsMessagesFromJSON(
  jsonString: string,
): SafeParseResult<
  CreatePromptSnippetPromptSnippetsMessages,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      CreatePromptSnippetPromptSnippetsMessages$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'CreatePromptSnippetPromptSnippetsMessages' from JSON`,
  );
}

/** @internal */
export const CreatePromptSnippetPromptConfig$inboundSchema: z.ZodType<
  CreatePromptSnippetPromptConfig,
  z.ZodTypeDef,
  unknown
> = z.object({
  stream: z.boolean().optional(),
  model: z.string().optional(),
  model_db_id: z.string().optional(),
  model_type: CreatePromptSnippetModelType$inboundSchema.optional(),
  model_parameters: z.lazy(() =>
    CreatePromptSnippetModelParameters$inboundSchema
  ).optional(),
  provider: CreatePromptSnippetProvider$inboundSchema.optional(),
  integration_id: z.nullable(z.string()).optional(),
  version: z.string().optional(),
  messages: z.array(
    z.lazy(() => CreatePromptSnippetPromptSnippetsMessages$inboundSchema),
  ),
}).transform((v) => {
  return remap$(v, {
    "model_db_id": "modelDbId",
    "model_type": "modelType",
    "model_parameters": "modelParameters",
    "integration_id": "integrationId",
  });
});

/** @internal */
export type CreatePromptSnippetPromptConfig$Outbound = {
  stream?: boolean | undefined;
  model?: string | undefined;
  model_db_id?: string | undefined;
  model_type?: string | undefined;
  model_parameters?: CreatePromptSnippetModelParameters$Outbound | undefined;
  provider?: string | undefined;
  integration_id?: string | null | undefined;
  version?: string | undefined;
  messages: Array<CreatePromptSnippetPromptSnippetsMessages$Outbound>;
};

/** @internal */
export const CreatePromptSnippetPromptConfig$outboundSchema: z.ZodType<
  CreatePromptSnippetPromptConfig$Outbound,
  z.ZodTypeDef,
  CreatePromptSnippetPromptConfig
> = z.object({
  stream: z.boolean().optional(),
  model: z.string().optional(),
  modelDbId: z.string().optional(),
  modelType: CreatePromptSnippetModelType$outboundSchema.optional(),
  modelParameters: z.lazy(() =>
    CreatePromptSnippetModelParameters$outboundSchema
  ).optional(),
  provider: CreatePromptSnippetProvider$outboundSchema.optional(),
  integrationId: z.nullable(z.string()).optional(),
  version: z.string().optional(),
  messages: z.array(
    z.lazy(() => CreatePromptSnippetPromptSnippetsMessages$outboundSchema),
  ),
}).transform((v) => {
  return remap$(v, {
    modelDbId: "model_db_id",
    modelType: "model_type",
    modelParameters: "model_parameters",
    integrationId: "integration_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreatePromptSnippetPromptConfig$ {
  /** @deprecated use `CreatePromptSnippetPromptConfig$inboundSchema` instead. */
  export const inboundSchema = CreatePromptSnippetPromptConfig$inboundSchema;
  /** @deprecated use `CreatePromptSnippetPromptConfig$outboundSchema` instead. */
  export const outboundSchema = CreatePromptSnippetPromptConfig$outboundSchema;
  /** @deprecated use `CreatePromptSnippetPromptConfig$Outbound` instead. */
  export type Outbound = CreatePromptSnippetPromptConfig$Outbound;
}

export function createPromptSnippetPromptConfigToJSON(
  createPromptSnippetPromptConfig: CreatePromptSnippetPromptConfig,
): string {
  return JSON.stringify(
    CreatePromptSnippetPromptConfig$outboundSchema.parse(
      createPromptSnippetPromptConfig,
    ),
  );
}

export function createPromptSnippetPromptConfigFromJSON(
  jsonString: string,
): SafeParseResult<CreatePromptSnippetPromptConfig, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreatePromptSnippetPromptConfig$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreatePromptSnippetPromptConfig' from JSON`,
  );
}

/** @internal */
export const CreatePromptSnippetUseCases$inboundSchema: z.ZodNativeEnum<
  typeof CreatePromptSnippetUseCases
> = z.nativeEnum(CreatePromptSnippetUseCases);

/** @internal */
export const CreatePromptSnippetUseCases$outboundSchema: z.ZodNativeEnum<
  typeof CreatePromptSnippetUseCases
> = CreatePromptSnippetUseCases$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreatePromptSnippetUseCases$ {
  /** @deprecated use `CreatePromptSnippetUseCases$inboundSchema` instead. */
  export const inboundSchema = CreatePromptSnippetUseCases$inboundSchema;
  /** @deprecated use `CreatePromptSnippetUseCases$outboundSchema` instead. */
  export const outboundSchema = CreatePromptSnippetUseCases$outboundSchema;
}

/** @internal */
export const CreatePromptSnippetLanguage$inboundSchema: z.ZodNativeEnum<
  typeof CreatePromptSnippetLanguage
> = z.nativeEnum(CreatePromptSnippetLanguage);

/** @internal */
export const CreatePromptSnippetLanguage$outboundSchema: z.ZodNativeEnum<
  typeof CreatePromptSnippetLanguage
> = CreatePromptSnippetLanguage$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreatePromptSnippetLanguage$ {
  /** @deprecated use `CreatePromptSnippetLanguage$inboundSchema` instead. */
  export const inboundSchema = CreatePromptSnippetLanguage$inboundSchema;
  /** @deprecated use `CreatePromptSnippetLanguage$outboundSchema` instead. */
  export const outboundSchema = CreatePromptSnippetLanguage$outboundSchema;
}

/** @internal */
export const CreatePromptSnippetPromptSnippetsMetadata$inboundSchema: z.ZodType<
  CreatePromptSnippetPromptSnippetsMetadata,
  z.ZodTypeDef,
  unknown
> = z.object({
  use_cases: z.array(CreatePromptSnippetUseCases$inboundSchema).optional(),
  language: CreatePromptSnippetLanguage$inboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    "use_cases": "useCases",
  });
});

/** @internal */
export type CreatePromptSnippetPromptSnippetsMetadata$Outbound = {
  use_cases?: Array<string> | undefined;
  language?: string | undefined;
};

/** @internal */
export const CreatePromptSnippetPromptSnippetsMetadata$outboundSchema:
  z.ZodType<
    CreatePromptSnippetPromptSnippetsMetadata$Outbound,
    z.ZodTypeDef,
    CreatePromptSnippetPromptSnippetsMetadata
  > = z.object({
    useCases: z.array(CreatePromptSnippetUseCases$outboundSchema).optional(),
    language: CreatePromptSnippetLanguage$outboundSchema.optional(),
  }).transform((v) => {
    return remap$(v, {
      useCases: "use_cases",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreatePromptSnippetPromptSnippetsMetadata$ {
  /** @deprecated use `CreatePromptSnippetPromptSnippetsMetadata$inboundSchema` instead. */
  export const inboundSchema =
    CreatePromptSnippetPromptSnippetsMetadata$inboundSchema;
  /** @deprecated use `CreatePromptSnippetPromptSnippetsMetadata$outboundSchema` instead. */
  export const outboundSchema =
    CreatePromptSnippetPromptSnippetsMetadata$outboundSchema;
  /** @deprecated use `CreatePromptSnippetPromptSnippetsMetadata$Outbound` instead. */
  export type Outbound = CreatePromptSnippetPromptSnippetsMetadata$Outbound;
}

export function createPromptSnippetPromptSnippetsMetadataToJSON(
  createPromptSnippetPromptSnippetsMetadata:
    CreatePromptSnippetPromptSnippetsMetadata,
): string {
  return JSON.stringify(
    CreatePromptSnippetPromptSnippetsMetadata$outboundSchema.parse(
      createPromptSnippetPromptSnippetsMetadata,
    ),
  );
}

export function createPromptSnippetPromptSnippetsMetadataFromJSON(
  jsonString: string,
): SafeParseResult<
  CreatePromptSnippetPromptSnippetsMetadata,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      CreatePromptSnippetPromptSnippetsMetadata$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'CreatePromptSnippetPromptSnippetsMetadata' from JSON`,
  );
}

/** @internal */
export const CreatePromptSnippetPromptSnippetsType$inboundSchema:
  z.ZodNativeEnum<typeof CreatePromptSnippetPromptSnippetsType> = z.nativeEnum(
    CreatePromptSnippetPromptSnippetsType,
  );

/** @internal */
export const CreatePromptSnippetPromptSnippetsType$outboundSchema:
  z.ZodNativeEnum<typeof CreatePromptSnippetPromptSnippetsType> =
    CreatePromptSnippetPromptSnippetsType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreatePromptSnippetPromptSnippetsType$ {
  /** @deprecated use `CreatePromptSnippetPromptSnippetsType$inboundSchema` instead. */
  export const inboundSchema =
    CreatePromptSnippetPromptSnippetsType$inboundSchema;
  /** @deprecated use `CreatePromptSnippetPromptSnippetsType$outboundSchema` instead. */
  export const outboundSchema =
    CreatePromptSnippetPromptSnippetsType$outboundSchema;
}

/** @internal */
export const CreatePromptSnippetPromptSnippetsModelType$inboundSchema:
  z.ZodNativeEnum<typeof CreatePromptSnippetPromptSnippetsModelType> = z
    .nativeEnum(CreatePromptSnippetPromptSnippetsModelType);

/** @internal */
export const CreatePromptSnippetPromptSnippetsModelType$outboundSchema:
  z.ZodNativeEnum<typeof CreatePromptSnippetPromptSnippetsModelType> =
    CreatePromptSnippetPromptSnippetsModelType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreatePromptSnippetPromptSnippetsModelType$ {
  /** @deprecated use `CreatePromptSnippetPromptSnippetsModelType$inboundSchema` instead. */
  export const inboundSchema =
    CreatePromptSnippetPromptSnippetsModelType$inboundSchema;
  /** @deprecated use `CreatePromptSnippetPromptSnippetsModelType$outboundSchema` instead. */
  export const outboundSchema =
    CreatePromptSnippetPromptSnippetsModelType$outboundSchema;
}

/** @internal */
export const CreatePromptSnippetPromptSnippetsFormat$inboundSchema:
  z.ZodNativeEnum<typeof CreatePromptSnippetPromptSnippetsFormat> = z
    .nativeEnum(CreatePromptSnippetPromptSnippetsFormat);

/** @internal */
export const CreatePromptSnippetPromptSnippetsFormat$outboundSchema:
  z.ZodNativeEnum<typeof CreatePromptSnippetPromptSnippetsFormat> =
    CreatePromptSnippetPromptSnippetsFormat$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreatePromptSnippetPromptSnippetsFormat$ {
  /** @deprecated use `CreatePromptSnippetPromptSnippetsFormat$inboundSchema` instead. */
  export const inboundSchema =
    CreatePromptSnippetPromptSnippetsFormat$inboundSchema;
  /** @deprecated use `CreatePromptSnippetPromptSnippetsFormat$outboundSchema` instead. */
  export const outboundSchema =
    CreatePromptSnippetPromptSnippetsFormat$outboundSchema;
}

/** @internal */
export const CreatePromptSnippetPromptSnippetsQuality$inboundSchema:
  z.ZodNativeEnum<typeof CreatePromptSnippetPromptSnippetsQuality> = z
    .nativeEnum(CreatePromptSnippetPromptSnippetsQuality);

/** @internal */
export const CreatePromptSnippetPromptSnippetsQuality$outboundSchema:
  z.ZodNativeEnum<typeof CreatePromptSnippetPromptSnippetsQuality> =
    CreatePromptSnippetPromptSnippetsQuality$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreatePromptSnippetPromptSnippetsQuality$ {
  /** @deprecated use `CreatePromptSnippetPromptSnippetsQuality$inboundSchema` instead. */
  export const inboundSchema =
    CreatePromptSnippetPromptSnippetsQuality$inboundSchema;
  /** @deprecated use `CreatePromptSnippetPromptSnippetsQuality$outboundSchema` instead. */
  export const outboundSchema =
    CreatePromptSnippetPromptSnippetsQuality$outboundSchema;
}

/** @internal */
export const CreatePromptSnippetResponseFormatPromptSnippetsResponse200ApplicationJSONType$inboundSchema:
  z.ZodNativeEnum<
    typeof CreatePromptSnippetResponseFormatPromptSnippetsResponse200ApplicationJSONType
  > = z.nativeEnum(
    CreatePromptSnippetResponseFormatPromptSnippetsResponse200ApplicationJSONType,
  );

/** @internal */
export const CreatePromptSnippetResponseFormatPromptSnippetsResponse200ApplicationJSONType$outboundSchema:
  z.ZodNativeEnum<
    typeof CreatePromptSnippetResponseFormatPromptSnippetsResponse200ApplicationJSONType
  > =
    CreatePromptSnippetResponseFormatPromptSnippetsResponse200ApplicationJSONType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreatePromptSnippetResponseFormatPromptSnippetsResponse200ApplicationJSONType$ {
  /** @deprecated use `CreatePromptSnippetResponseFormatPromptSnippetsResponse200ApplicationJSONType$inboundSchema` instead. */
  export const inboundSchema =
    CreatePromptSnippetResponseFormatPromptSnippetsResponse200ApplicationJSONType$inboundSchema;
  /** @deprecated use `CreatePromptSnippetResponseFormatPromptSnippetsResponse200ApplicationJSONType$outboundSchema` instead. */
  export const outboundSchema =
    CreatePromptSnippetResponseFormatPromptSnippetsResponse200ApplicationJSONType$outboundSchema;
}

/** @internal */
export const CreatePromptSnippetResponseFormatPromptSnippets2$inboundSchema:
  z.ZodType<
    CreatePromptSnippetResponseFormatPromptSnippets2,
    z.ZodTypeDef,
    unknown
  > = z.object({
    type:
      CreatePromptSnippetResponseFormatPromptSnippetsResponse200ApplicationJSONType$inboundSchema,
  });

/** @internal */
export type CreatePromptSnippetResponseFormatPromptSnippets2$Outbound = {
  type: string;
};

/** @internal */
export const CreatePromptSnippetResponseFormatPromptSnippets2$outboundSchema:
  z.ZodType<
    CreatePromptSnippetResponseFormatPromptSnippets2$Outbound,
    z.ZodTypeDef,
    CreatePromptSnippetResponseFormatPromptSnippets2
  > = z.object({
    type:
      CreatePromptSnippetResponseFormatPromptSnippetsResponse200ApplicationJSONType$outboundSchema,
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreatePromptSnippetResponseFormatPromptSnippets2$ {
  /** @deprecated use `CreatePromptSnippetResponseFormatPromptSnippets2$inboundSchema` instead. */
  export const inboundSchema =
    CreatePromptSnippetResponseFormatPromptSnippets2$inboundSchema;
  /** @deprecated use `CreatePromptSnippetResponseFormatPromptSnippets2$outboundSchema` instead. */
  export const outboundSchema =
    CreatePromptSnippetResponseFormatPromptSnippets2$outboundSchema;
  /** @deprecated use `CreatePromptSnippetResponseFormatPromptSnippets2$Outbound` instead. */
  export type Outbound =
    CreatePromptSnippetResponseFormatPromptSnippets2$Outbound;
}

export function createPromptSnippetResponseFormatPromptSnippets2ToJSON(
  createPromptSnippetResponseFormatPromptSnippets2:
    CreatePromptSnippetResponseFormatPromptSnippets2,
): string {
  return JSON.stringify(
    CreatePromptSnippetResponseFormatPromptSnippets2$outboundSchema.parse(
      createPromptSnippetResponseFormatPromptSnippets2,
    ),
  );
}

export function createPromptSnippetResponseFormatPromptSnippets2FromJSON(
  jsonString: string,
): SafeParseResult<
  CreatePromptSnippetResponseFormatPromptSnippets2,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      CreatePromptSnippetResponseFormatPromptSnippets2$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'CreatePromptSnippetResponseFormatPromptSnippets2' from JSON`,
  );
}

/** @internal */
export const CreatePromptSnippetResponseFormatPromptSnippetsResponse200Type$inboundSchema:
  z.ZodNativeEnum<
    typeof CreatePromptSnippetResponseFormatPromptSnippetsResponse200Type
  > = z.nativeEnum(
    CreatePromptSnippetResponseFormatPromptSnippetsResponse200Type,
  );

/** @internal */
export const CreatePromptSnippetResponseFormatPromptSnippetsResponse200Type$outboundSchema:
  z.ZodNativeEnum<
    typeof CreatePromptSnippetResponseFormatPromptSnippetsResponse200Type
  > =
    CreatePromptSnippetResponseFormatPromptSnippetsResponse200Type$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreatePromptSnippetResponseFormatPromptSnippetsResponse200Type$ {
  /** @deprecated use `CreatePromptSnippetResponseFormatPromptSnippetsResponse200Type$inboundSchema` instead. */
  export const inboundSchema =
    CreatePromptSnippetResponseFormatPromptSnippetsResponse200Type$inboundSchema;
  /** @deprecated use `CreatePromptSnippetResponseFormatPromptSnippetsResponse200Type$outboundSchema` instead. */
  export const outboundSchema =
    CreatePromptSnippetResponseFormatPromptSnippetsResponse200Type$outboundSchema;
}

/** @internal */
export const CreatePromptSnippetResponseFormatPromptSnippetsJsonSchema$inboundSchema:
  z.ZodType<
    CreatePromptSnippetResponseFormatPromptSnippetsJsonSchema,
    z.ZodTypeDef,
    unknown
  > = z.object({
    name: z.string(),
    strict: z.boolean(),
    schema: z.record(z.any()),
  });

/** @internal */
export type CreatePromptSnippetResponseFormatPromptSnippetsJsonSchema$Outbound =
  {
    name: string;
    strict: boolean;
    schema: { [k: string]: any };
  };

/** @internal */
export const CreatePromptSnippetResponseFormatPromptSnippetsJsonSchema$outboundSchema:
  z.ZodType<
    CreatePromptSnippetResponseFormatPromptSnippetsJsonSchema$Outbound,
    z.ZodTypeDef,
    CreatePromptSnippetResponseFormatPromptSnippetsJsonSchema
  > = z.object({
    name: z.string(),
    strict: z.boolean(),
    schema: z.record(z.any()),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreatePromptSnippetResponseFormatPromptSnippetsJsonSchema$ {
  /** @deprecated use `CreatePromptSnippetResponseFormatPromptSnippetsJsonSchema$inboundSchema` instead. */
  export const inboundSchema =
    CreatePromptSnippetResponseFormatPromptSnippetsJsonSchema$inboundSchema;
  /** @deprecated use `CreatePromptSnippetResponseFormatPromptSnippetsJsonSchema$outboundSchema` instead. */
  export const outboundSchema =
    CreatePromptSnippetResponseFormatPromptSnippetsJsonSchema$outboundSchema;
  /** @deprecated use `CreatePromptSnippetResponseFormatPromptSnippetsJsonSchema$Outbound` instead. */
  export type Outbound =
    CreatePromptSnippetResponseFormatPromptSnippetsJsonSchema$Outbound;
}

export function createPromptSnippetResponseFormatPromptSnippetsJsonSchemaToJSON(
  createPromptSnippetResponseFormatPromptSnippetsJsonSchema:
    CreatePromptSnippetResponseFormatPromptSnippetsJsonSchema,
): string {
  return JSON.stringify(
    CreatePromptSnippetResponseFormatPromptSnippetsJsonSchema$outboundSchema
      .parse(createPromptSnippetResponseFormatPromptSnippetsJsonSchema),
  );
}

export function createPromptSnippetResponseFormatPromptSnippetsJsonSchemaFromJSON(
  jsonString: string,
): SafeParseResult<
  CreatePromptSnippetResponseFormatPromptSnippetsJsonSchema,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      CreatePromptSnippetResponseFormatPromptSnippetsJsonSchema$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'CreatePromptSnippetResponseFormatPromptSnippetsJsonSchema' from JSON`,
  );
}

/** @internal */
export const CreatePromptSnippetResponseFormatPromptSnippets1$inboundSchema:
  z.ZodType<
    CreatePromptSnippetResponseFormatPromptSnippets1,
    z.ZodTypeDef,
    unknown
  > = z.object({
    type:
      CreatePromptSnippetResponseFormatPromptSnippetsResponse200Type$inboundSchema,
    json_schema: z.lazy(() =>
      CreatePromptSnippetResponseFormatPromptSnippetsJsonSchema$inboundSchema
    ),
  }).transform((v) => {
    return remap$(v, {
      "json_schema": "jsonSchema",
    });
  });

/** @internal */
export type CreatePromptSnippetResponseFormatPromptSnippets1$Outbound = {
  type: string;
  json_schema:
    CreatePromptSnippetResponseFormatPromptSnippetsJsonSchema$Outbound;
};

/** @internal */
export const CreatePromptSnippetResponseFormatPromptSnippets1$outboundSchema:
  z.ZodType<
    CreatePromptSnippetResponseFormatPromptSnippets1$Outbound,
    z.ZodTypeDef,
    CreatePromptSnippetResponseFormatPromptSnippets1
  > = z.object({
    type:
      CreatePromptSnippetResponseFormatPromptSnippetsResponse200Type$outboundSchema,
    jsonSchema: z.lazy(() =>
      CreatePromptSnippetResponseFormatPromptSnippetsJsonSchema$outboundSchema
    ),
  }).transform((v) => {
    return remap$(v, {
      jsonSchema: "json_schema",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreatePromptSnippetResponseFormatPromptSnippets1$ {
  /** @deprecated use `CreatePromptSnippetResponseFormatPromptSnippets1$inboundSchema` instead. */
  export const inboundSchema =
    CreatePromptSnippetResponseFormatPromptSnippets1$inboundSchema;
  /** @deprecated use `CreatePromptSnippetResponseFormatPromptSnippets1$outboundSchema` instead. */
  export const outboundSchema =
    CreatePromptSnippetResponseFormatPromptSnippets1$outboundSchema;
  /** @deprecated use `CreatePromptSnippetResponseFormatPromptSnippets1$Outbound` instead. */
  export type Outbound =
    CreatePromptSnippetResponseFormatPromptSnippets1$Outbound;
}

export function createPromptSnippetResponseFormatPromptSnippets1ToJSON(
  createPromptSnippetResponseFormatPromptSnippets1:
    CreatePromptSnippetResponseFormatPromptSnippets1,
): string {
  return JSON.stringify(
    CreatePromptSnippetResponseFormatPromptSnippets1$outboundSchema.parse(
      createPromptSnippetResponseFormatPromptSnippets1,
    ),
  );
}

export function createPromptSnippetResponseFormatPromptSnippets1FromJSON(
  jsonString: string,
): SafeParseResult<
  CreatePromptSnippetResponseFormatPromptSnippets1,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      CreatePromptSnippetResponseFormatPromptSnippets1$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'CreatePromptSnippetResponseFormatPromptSnippets1' from JSON`,
  );
}

/** @internal */
export const CreatePromptSnippetPromptSnippetsResponseFormat$inboundSchema:
  z.ZodType<
    CreatePromptSnippetPromptSnippetsResponseFormat,
    z.ZodTypeDef,
    unknown
  > = z.union([
    z.lazy(() =>
      CreatePromptSnippetResponseFormatPromptSnippets2$inboundSchema
    ),
    z.lazy(() =>
      CreatePromptSnippetResponseFormatPromptSnippets1$inboundSchema
    ),
  ]);

/** @internal */
export type CreatePromptSnippetPromptSnippetsResponseFormat$Outbound =
  | CreatePromptSnippetResponseFormatPromptSnippets2$Outbound
  | CreatePromptSnippetResponseFormatPromptSnippets1$Outbound;

/** @internal */
export const CreatePromptSnippetPromptSnippetsResponseFormat$outboundSchema:
  z.ZodType<
    CreatePromptSnippetPromptSnippetsResponseFormat$Outbound,
    z.ZodTypeDef,
    CreatePromptSnippetPromptSnippetsResponseFormat
  > = z.union([
    z.lazy(() =>
      CreatePromptSnippetResponseFormatPromptSnippets2$outboundSchema
    ),
    z.lazy(() =>
      CreatePromptSnippetResponseFormatPromptSnippets1$outboundSchema
    ),
  ]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreatePromptSnippetPromptSnippetsResponseFormat$ {
  /** @deprecated use `CreatePromptSnippetPromptSnippetsResponseFormat$inboundSchema` instead. */
  export const inboundSchema =
    CreatePromptSnippetPromptSnippetsResponseFormat$inboundSchema;
  /** @deprecated use `CreatePromptSnippetPromptSnippetsResponseFormat$outboundSchema` instead. */
  export const outboundSchema =
    CreatePromptSnippetPromptSnippetsResponseFormat$outboundSchema;
  /** @deprecated use `CreatePromptSnippetPromptSnippetsResponseFormat$Outbound` instead. */
  export type Outbound =
    CreatePromptSnippetPromptSnippetsResponseFormat$Outbound;
}

export function createPromptSnippetPromptSnippetsResponseFormatToJSON(
  createPromptSnippetPromptSnippetsResponseFormat:
    CreatePromptSnippetPromptSnippetsResponseFormat,
): string {
  return JSON.stringify(
    CreatePromptSnippetPromptSnippetsResponseFormat$outboundSchema.parse(
      createPromptSnippetPromptSnippetsResponseFormat,
    ),
  );
}

export function createPromptSnippetPromptSnippetsResponseFormatFromJSON(
  jsonString: string,
): SafeParseResult<
  CreatePromptSnippetPromptSnippetsResponseFormat,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      CreatePromptSnippetPromptSnippetsResponseFormat$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'CreatePromptSnippetPromptSnippetsResponseFormat' from JSON`,
  );
}

/** @internal */
export const CreatePromptSnippetPromptSnippetsPhotoRealVersion$inboundSchema:
  z.ZodNativeEnum<typeof CreatePromptSnippetPromptSnippetsPhotoRealVersion> = z
    .nativeEnum(CreatePromptSnippetPromptSnippetsPhotoRealVersion);

/** @internal */
export const CreatePromptSnippetPromptSnippetsPhotoRealVersion$outboundSchema:
  z.ZodNativeEnum<typeof CreatePromptSnippetPromptSnippetsPhotoRealVersion> =
    CreatePromptSnippetPromptSnippetsPhotoRealVersion$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreatePromptSnippetPromptSnippetsPhotoRealVersion$ {
  /** @deprecated use `CreatePromptSnippetPromptSnippetsPhotoRealVersion$inboundSchema` instead. */
  export const inboundSchema =
    CreatePromptSnippetPromptSnippetsPhotoRealVersion$inboundSchema;
  /** @deprecated use `CreatePromptSnippetPromptSnippetsPhotoRealVersion$outboundSchema` instead. */
  export const outboundSchema =
    CreatePromptSnippetPromptSnippetsPhotoRealVersion$outboundSchema;
}

/** @internal */
export const CreatePromptSnippetPromptSnippetsEncodingFormat$inboundSchema:
  z.ZodNativeEnum<typeof CreatePromptSnippetPromptSnippetsEncodingFormat> = z
    .nativeEnum(CreatePromptSnippetPromptSnippetsEncodingFormat);

/** @internal */
export const CreatePromptSnippetPromptSnippetsEncodingFormat$outboundSchema:
  z.ZodNativeEnum<typeof CreatePromptSnippetPromptSnippetsEncodingFormat> =
    CreatePromptSnippetPromptSnippetsEncodingFormat$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreatePromptSnippetPromptSnippetsEncodingFormat$ {
  /** @deprecated use `CreatePromptSnippetPromptSnippetsEncodingFormat$inboundSchema` instead. */
  export const inboundSchema =
    CreatePromptSnippetPromptSnippetsEncodingFormat$inboundSchema;
  /** @deprecated use `CreatePromptSnippetPromptSnippetsEncodingFormat$outboundSchema` instead. */
  export const outboundSchema =
    CreatePromptSnippetPromptSnippetsEncodingFormat$outboundSchema;
}

/** @internal */
export const CreatePromptSnippetPromptSnippetsReasoningEffort$inboundSchema:
  z.ZodNativeEnum<typeof CreatePromptSnippetPromptSnippetsReasoningEffort> = z
    .nativeEnum(CreatePromptSnippetPromptSnippetsReasoningEffort);

/** @internal */
export const CreatePromptSnippetPromptSnippetsReasoningEffort$outboundSchema:
  z.ZodNativeEnum<typeof CreatePromptSnippetPromptSnippetsReasoningEffort> =
    CreatePromptSnippetPromptSnippetsReasoningEffort$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreatePromptSnippetPromptSnippetsReasoningEffort$ {
  /** @deprecated use `CreatePromptSnippetPromptSnippetsReasoningEffort$inboundSchema` instead. */
  export const inboundSchema =
    CreatePromptSnippetPromptSnippetsReasoningEffort$inboundSchema;
  /** @deprecated use `CreatePromptSnippetPromptSnippetsReasoningEffort$outboundSchema` instead. */
  export const outboundSchema =
    CreatePromptSnippetPromptSnippetsReasoningEffort$outboundSchema;
}

/** @internal */
export const CreatePromptSnippetPromptSnippetsModelParameters$inboundSchema:
  z.ZodType<
    CreatePromptSnippetPromptSnippetsModelParameters,
    z.ZodTypeDef,
    unknown
  > = z.object({
    temperature: z.number().optional(),
    maxTokens: z.number().optional(),
    topK: z.number().optional(),
    topP: z.number().optional(),
    frequencyPenalty: z.number().optional(),
    presencePenalty: z.number().optional(),
    numImages: z.number().optional(),
    seed: z.number().optional(),
    format: CreatePromptSnippetPromptSnippetsFormat$inboundSchema.optional(),
    dimensions: z.string().optional(),
    quality: CreatePromptSnippetPromptSnippetsQuality$inboundSchema.optional(),
    style: z.string().optional(),
    responseFormat: z.nullable(
      z.union([
        z.lazy(() =>
          CreatePromptSnippetResponseFormatPromptSnippets2$inboundSchema
        ),
        z.lazy(() =>
          CreatePromptSnippetResponseFormatPromptSnippets1$inboundSchema
        ),
      ]),
    ).optional(),
    photoRealVersion:
      CreatePromptSnippetPromptSnippetsPhotoRealVersion$inboundSchema
        .optional(),
    encoding_format:
      CreatePromptSnippetPromptSnippetsEncodingFormat$inboundSchema.optional(),
    reasoningEffort:
      CreatePromptSnippetPromptSnippetsReasoningEffort$inboundSchema.optional(),
  }).transform((v) => {
    return remap$(v, {
      "encoding_format": "encodingFormat",
    });
  });

/** @internal */
export type CreatePromptSnippetPromptSnippetsModelParameters$Outbound = {
  temperature?: number | undefined;
  maxTokens?: number | undefined;
  topK?: number | undefined;
  topP?: number | undefined;
  frequencyPenalty?: number | undefined;
  presencePenalty?: number | undefined;
  numImages?: number | undefined;
  seed?: number | undefined;
  format?: string | undefined;
  dimensions?: string | undefined;
  quality?: string | undefined;
  style?: string | undefined;
  responseFormat?:
    | CreatePromptSnippetResponseFormatPromptSnippets2$Outbound
    | CreatePromptSnippetResponseFormatPromptSnippets1$Outbound
    | null
    | undefined;
  photoRealVersion?: string | undefined;
  encoding_format?: string | undefined;
  reasoningEffort?: string | undefined;
};

/** @internal */
export const CreatePromptSnippetPromptSnippetsModelParameters$outboundSchema:
  z.ZodType<
    CreatePromptSnippetPromptSnippetsModelParameters$Outbound,
    z.ZodTypeDef,
    CreatePromptSnippetPromptSnippetsModelParameters
  > = z.object({
    temperature: z.number().optional(),
    maxTokens: z.number().optional(),
    topK: z.number().optional(),
    topP: z.number().optional(),
    frequencyPenalty: z.number().optional(),
    presencePenalty: z.number().optional(),
    numImages: z.number().optional(),
    seed: z.number().optional(),
    format: CreatePromptSnippetPromptSnippetsFormat$outboundSchema.optional(),
    dimensions: z.string().optional(),
    quality: CreatePromptSnippetPromptSnippetsQuality$outboundSchema.optional(),
    style: z.string().optional(),
    responseFormat: z.nullable(
      z.union([
        z.lazy(() =>
          CreatePromptSnippetResponseFormatPromptSnippets2$outboundSchema
        ),
        z.lazy(() =>
          CreatePromptSnippetResponseFormatPromptSnippets1$outboundSchema
        ),
      ]),
    ).optional(),
    photoRealVersion:
      CreatePromptSnippetPromptSnippetsPhotoRealVersion$outboundSchema
        .optional(),
    encodingFormat:
      CreatePromptSnippetPromptSnippetsEncodingFormat$outboundSchema.optional(),
    reasoningEffort:
      CreatePromptSnippetPromptSnippetsReasoningEffort$outboundSchema
        .optional(),
  }).transform((v) => {
    return remap$(v, {
      encodingFormat: "encoding_format",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreatePromptSnippetPromptSnippetsModelParameters$ {
  /** @deprecated use `CreatePromptSnippetPromptSnippetsModelParameters$inboundSchema` instead. */
  export const inboundSchema =
    CreatePromptSnippetPromptSnippetsModelParameters$inboundSchema;
  /** @deprecated use `CreatePromptSnippetPromptSnippetsModelParameters$outboundSchema` instead. */
  export const outboundSchema =
    CreatePromptSnippetPromptSnippetsModelParameters$outboundSchema;
  /** @deprecated use `CreatePromptSnippetPromptSnippetsModelParameters$Outbound` instead. */
  export type Outbound =
    CreatePromptSnippetPromptSnippetsModelParameters$Outbound;
}

export function createPromptSnippetPromptSnippetsModelParametersToJSON(
  createPromptSnippetPromptSnippetsModelParameters:
    CreatePromptSnippetPromptSnippetsModelParameters,
): string {
  return JSON.stringify(
    CreatePromptSnippetPromptSnippetsModelParameters$outboundSchema.parse(
      createPromptSnippetPromptSnippetsModelParameters,
    ),
  );
}

export function createPromptSnippetPromptSnippetsModelParametersFromJSON(
  jsonString: string,
): SafeParseResult<
  CreatePromptSnippetPromptSnippetsModelParameters,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      CreatePromptSnippetPromptSnippetsModelParameters$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'CreatePromptSnippetPromptSnippetsModelParameters' from JSON`,
  );
}

/** @internal */
export const CreatePromptSnippetPromptSnippetsProvider$inboundSchema:
  z.ZodNativeEnum<typeof CreatePromptSnippetPromptSnippetsProvider> = z
    .nativeEnum(CreatePromptSnippetPromptSnippetsProvider);

/** @internal */
export const CreatePromptSnippetPromptSnippetsProvider$outboundSchema:
  z.ZodNativeEnum<typeof CreatePromptSnippetPromptSnippetsProvider> =
    CreatePromptSnippetPromptSnippetsProvider$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreatePromptSnippetPromptSnippetsProvider$ {
  /** @deprecated use `CreatePromptSnippetPromptSnippetsProvider$inboundSchema` instead. */
  export const inboundSchema =
    CreatePromptSnippetPromptSnippetsProvider$inboundSchema;
  /** @deprecated use `CreatePromptSnippetPromptSnippetsProvider$outboundSchema` instead. */
  export const outboundSchema =
    CreatePromptSnippetPromptSnippetsProvider$outboundSchema;
}

/** @internal */
export const CreatePromptSnippetPromptSnippetsResponseRole$inboundSchema:
  z.ZodNativeEnum<typeof CreatePromptSnippetPromptSnippetsResponseRole> = z
    .nativeEnum(CreatePromptSnippetPromptSnippetsResponseRole);

/** @internal */
export const CreatePromptSnippetPromptSnippetsResponseRole$outboundSchema:
  z.ZodNativeEnum<typeof CreatePromptSnippetPromptSnippetsResponseRole> =
    CreatePromptSnippetPromptSnippetsResponseRole$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreatePromptSnippetPromptSnippetsResponseRole$ {
  /** @deprecated use `CreatePromptSnippetPromptSnippetsResponseRole$inboundSchema` instead. */
  export const inboundSchema =
    CreatePromptSnippetPromptSnippetsResponseRole$inboundSchema;
  /** @deprecated use `CreatePromptSnippetPromptSnippetsResponseRole$outboundSchema` instead. */
  export const outboundSchema =
    CreatePromptSnippetPromptSnippetsResponseRole$outboundSchema;
}

/** @internal */
export const CreatePromptSnippet2PromptSnippetsResponse200ApplicationJSONResponseBodyType$inboundSchema:
  z.ZodNativeEnum<
    typeof CreatePromptSnippet2PromptSnippetsResponse200ApplicationJSONResponseBodyType
  > = z.nativeEnum(
    CreatePromptSnippet2PromptSnippetsResponse200ApplicationJSONResponseBodyType,
  );

/** @internal */
export const CreatePromptSnippet2PromptSnippetsResponse200ApplicationJSONResponseBodyType$outboundSchema:
  z.ZodNativeEnum<
    typeof CreatePromptSnippet2PromptSnippetsResponse200ApplicationJSONResponseBodyType
  > =
    CreatePromptSnippet2PromptSnippetsResponse200ApplicationJSONResponseBodyType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreatePromptSnippet2PromptSnippetsResponse200ApplicationJSONResponseBodyType$ {
  /** @deprecated use `CreatePromptSnippet2PromptSnippetsResponse200ApplicationJSONResponseBodyType$inboundSchema` instead. */
  export const inboundSchema =
    CreatePromptSnippet2PromptSnippetsResponse200ApplicationJSONResponseBodyType$inboundSchema;
  /** @deprecated use `CreatePromptSnippet2PromptSnippetsResponse200ApplicationJSONResponseBodyType$outboundSchema` instead. */
  export const outboundSchema =
    CreatePromptSnippet2PromptSnippetsResponse200ApplicationJSONResponseBodyType$outboundSchema;
}

/** @internal */
export const CreatePromptSnippet2PromptSnippetsResponseImageUrl$inboundSchema:
  z.ZodType<
    CreatePromptSnippet2PromptSnippetsResponseImageUrl,
    z.ZodTypeDef,
    unknown
  > = z.object({
    id: z.string().optional(),
    url: z.string(),
    detail: z.string().optional(),
  });

/** @internal */
export type CreatePromptSnippet2PromptSnippetsResponseImageUrl$Outbound = {
  id?: string | undefined;
  url: string;
  detail?: string | undefined;
};

/** @internal */
export const CreatePromptSnippet2PromptSnippetsResponseImageUrl$outboundSchema:
  z.ZodType<
    CreatePromptSnippet2PromptSnippetsResponseImageUrl$Outbound,
    z.ZodTypeDef,
    CreatePromptSnippet2PromptSnippetsResponseImageUrl
  > = z.object({
    id: z.string().optional(),
    url: z.string(),
    detail: z.string().optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreatePromptSnippet2PromptSnippetsResponseImageUrl$ {
  /** @deprecated use `CreatePromptSnippet2PromptSnippetsResponseImageUrl$inboundSchema` instead. */
  export const inboundSchema =
    CreatePromptSnippet2PromptSnippetsResponseImageUrl$inboundSchema;
  /** @deprecated use `CreatePromptSnippet2PromptSnippetsResponseImageUrl$outboundSchema` instead. */
  export const outboundSchema =
    CreatePromptSnippet2PromptSnippetsResponseImageUrl$outboundSchema;
  /** @deprecated use `CreatePromptSnippet2PromptSnippetsResponseImageUrl$Outbound` instead. */
  export type Outbound =
    CreatePromptSnippet2PromptSnippetsResponseImageUrl$Outbound;
}

export function createPromptSnippet2PromptSnippetsResponseImageUrlToJSON(
  createPromptSnippet2PromptSnippetsResponseImageUrl:
    CreatePromptSnippet2PromptSnippetsResponseImageUrl,
): string {
  return JSON.stringify(
    CreatePromptSnippet2PromptSnippetsResponseImageUrl$outboundSchema.parse(
      createPromptSnippet2PromptSnippetsResponseImageUrl,
    ),
  );
}

export function createPromptSnippet2PromptSnippetsResponseImageUrlFromJSON(
  jsonString: string,
): SafeParseResult<
  CreatePromptSnippet2PromptSnippetsResponseImageUrl,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      CreatePromptSnippet2PromptSnippetsResponseImageUrl$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'CreatePromptSnippet2PromptSnippetsResponseImageUrl' from JSON`,
  );
}

/** @internal */
export const CreatePromptSnippet2PromptSnippetsResponse2$inboundSchema:
  z.ZodType<
    CreatePromptSnippet2PromptSnippetsResponse2,
    z.ZodTypeDef,
    unknown
  > = z.object({
    type:
      CreatePromptSnippet2PromptSnippetsResponse200ApplicationJSONResponseBodyType$inboundSchema,
    image_url: z.lazy(() =>
      CreatePromptSnippet2PromptSnippetsResponseImageUrl$inboundSchema
    ),
  }).transform((v) => {
    return remap$(v, {
      "image_url": "imageUrl",
    });
  });

/** @internal */
export type CreatePromptSnippet2PromptSnippetsResponse2$Outbound = {
  type: string;
  image_url: CreatePromptSnippet2PromptSnippetsResponseImageUrl$Outbound;
};

/** @internal */
export const CreatePromptSnippet2PromptSnippetsResponse2$outboundSchema:
  z.ZodType<
    CreatePromptSnippet2PromptSnippetsResponse2$Outbound,
    z.ZodTypeDef,
    CreatePromptSnippet2PromptSnippetsResponse2
  > = z.object({
    type:
      CreatePromptSnippet2PromptSnippetsResponse200ApplicationJSONResponseBodyType$outboundSchema,
    imageUrl: z.lazy(() =>
      CreatePromptSnippet2PromptSnippetsResponseImageUrl$outboundSchema
    ),
  }).transform((v) => {
    return remap$(v, {
      imageUrl: "image_url",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreatePromptSnippet2PromptSnippetsResponse2$ {
  /** @deprecated use `CreatePromptSnippet2PromptSnippetsResponse2$inboundSchema` instead. */
  export const inboundSchema =
    CreatePromptSnippet2PromptSnippetsResponse2$inboundSchema;
  /** @deprecated use `CreatePromptSnippet2PromptSnippetsResponse2$outboundSchema` instead. */
  export const outboundSchema =
    CreatePromptSnippet2PromptSnippetsResponse2$outboundSchema;
  /** @deprecated use `CreatePromptSnippet2PromptSnippetsResponse2$Outbound` instead. */
  export type Outbound = CreatePromptSnippet2PromptSnippetsResponse2$Outbound;
}

export function createPromptSnippet2PromptSnippetsResponse2ToJSON(
  createPromptSnippet2PromptSnippetsResponse2:
    CreatePromptSnippet2PromptSnippetsResponse2,
): string {
  return JSON.stringify(
    CreatePromptSnippet2PromptSnippetsResponse2$outboundSchema.parse(
      createPromptSnippet2PromptSnippetsResponse2,
    ),
  );
}

export function createPromptSnippet2PromptSnippetsResponse2FromJSON(
  jsonString: string,
): SafeParseResult<
  CreatePromptSnippet2PromptSnippetsResponse2,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      CreatePromptSnippet2PromptSnippetsResponse2$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'CreatePromptSnippet2PromptSnippetsResponse2' from JSON`,
  );
}

/** @internal */
export const CreatePromptSnippet2PromptSnippetsResponse200ApplicationJSONType$inboundSchema:
  z.ZodNativeEnum<
    typeof CreatePromptSnippet2PromptSnippetsResponse200ApplicationJSONType
  > = z.nativeEnum(
    CreatePromptSnippet2PromptSnippetsResponse200ApplicationJSONType,
  );

/** @internal */
export const CreatePromptSnippet2PromptSnippetsResponse200ApplicationJSONType$outboundSchema:
  z.ZodNativeEnum<
    typeof CreatePromptSnippet2PromptSnippetsResponse200ApplicationJSONType
  > =
    CreatePromptSnippet2PromptSnippetsResponse200ApplicationJSONType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreatePromptSnippet2PromptSnippetsResponse200ApplicationJSONType$ {
  /** @deprecated use `CreatePromptSnippet2PromptSnippetsResponse200ApplicationJSONType$inboundSchema` instead. */
  export const inboundSchema =
    CreatePromptSnippet2PromptSnippetsResponse200ApplicationJSONType$inboundSchema;
  /** @deprecated use `CreatePromptSnippet2PromptSnippetsResponse200ApplicationJSONType$outboundSchema` instead. */
  export const outboundSchema =
    CreatePromptSnippet2PromptSnippetsResponse200ApplicationJSONType$outboundSchema;
}

/** @internal */
export const CreatePromptSnippet2PromptSnippetsResponse1$inboundSchema:
  z.ZodType<
    CreatePromptSnippet2PromptSnippetsResponse1,
    z.ZodTypeDef,
    unknown
  > = z.object({
    type:
      CreatePromptSnippet2PromptSnippetsResponse200ApplicationJSONType$inboundSchema,
    text: z.string(),
  });

/** @internal */
export type CreatePromptSnippet2PromptSnippetsResponse1$Outbound = {
  type: string;
  text: string;
};

/** @internal */
export const CreatePromptSnippet2PromptSnippetsResponse1$outboundSchema:
  z.ZodType<
    CreatePromptSnippet2PromptSnippetsResponse1$Outbound,
    z.ZodTypeDef,
    CreatePromptSnippet2PromptSnippetsResponse1
  > = z.object({
    type:
      CreatePromptSnippet2PromptSnippetsResponse200ApplicationJSONType$outboundSchema,
    text: z.string(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreatePromptSnippet2PromptSnippetsResponse1$ {
  /** @deprecated use `CreatePromptSnippet2PromptSnippetsResponse1$inboundSchema` instead. */
  export const inboundSchema =
    CreatePromptSnippet2PromptSnippetsResponse1$inboundSchema;
  /** @deprecated use `CreatePromptSnippet2PromptSnippetsResponse1$outboundSchema` instead. */
  export const outboundSchema =
    CreatePromptSnippet2PromptSnippetsResponse1$outboundSchema;
  /** @deprecated use `CreatePromptSnippet2PromptSnippetsResponse1$Outbound` instead. */
  export type Outbound = CreatePromptSnippet2PromptSnippetsResponse1$Outbound;
}

export function createPromptSnippet2PromptSnippetsResponse1ToJSON(
  createPromptSnippet2PromptSnippetsResponse1:
    CreatePromptSnippet2PromptSnippetsResponse1,
): string {
  return JSON.stringify(
    CreatePromptSnippet2PromptSnippetsResponse1$outboundSchema.parse(
      createPromptSnippet2PromptSnippetsResponse1,
    ),
  );
}

export function createPromptSnippet2PromptSnippetsResponse1FromJSON(
  jsonString: string,
): SafeParseResult<
  CreatePromptSnippet2PromptSnippetsResponse1,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      CreatePromptSnippet2PromptSnippetsResponse1$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'CreatePromptSnippet2PromptSnippetsResponse1' from JSON`,
  );
}

/** @internal */
export const CreatePromptSnippetContentPromptSnippetsResponse2$inboundSchema:
  z.ZodType<
    CreatePromptSnippetContentPromptSnippetsResponse2,
    z.ZodTypeDef,
    unknown
  > = z.union([
    z.lazy(() => CreatePromptSnippet2PromptSnippetsResponse1$inboundSchema),
    z.lazy(() => CreatePromptSnippet2PromptSnippetsResponse2$inboundSchema),
  ]);

/** @internal */
export type CreatePromptSnippetContentPromptSnippetsResponse2$Outbound =
  | CreatePromptSnippet2PromptSnippetsResponse1$Outbound
  | CreatePromptSnippet2PromptSnippetsResponse2$Outbound;

/** @internal */
export const CreatePromptSnippetContentPromptSnippetsResponse2$outboundSchema:
  z.ZodType<
    CreatePromptSnippetContentPromptSnippetsResponse2$Outbound,
    z.ZodTypeDef,
    CreatePromptSnippetContentPromptSnippetsResponse2
  > = z.union([
    z.lazy(() => CreatePromptSnippet2PromptSnippetsResponse1$outboundSchema),
    z.lazy(() => CreatePromptSnippet2PromptSnippetsResponse2$outboundSchema),
  ]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreatePromptSnippetContentPromptSnippetsResponse2$ {
  /** @deprecated use `CreatePromptSnippetContentPromptSnippetsResponse2$inboundSchema` instead. */
  export const inboundSchema =
    CreatePromptSnippetContentPromptSnippetsResponse2$inboundSchema;
  /** @deprecated use `CreatePromptSnippetContentPromptSnippetsResponse2$outboundSchema` instead. */
  export const outboundSchema =
    CreatePromptSnippetContentPromptSnippetsResponse2$outboundSchema;
  /** @deprecated use `CreatePromptSnippetContentPromptSnippetsResponse2$Outbound` instead. */
  export type Outbound =
    CreatePromptSnippetContentPromptSnippetsResponse2$Outbound;
}

export function createPromptSnippetContentPromptSnippetsResponse2ToJSON(
  createPromptSnippetContentPromptSnippetsResponse2:
    CreatePromptSnippetContentPromptSnippetsResponse2,
): string {
  return JSON.stringify(
    CreatePromptSnippetContentPromptSnippetsResponse2$outboundSchema.parse(
      createPromptSnippetContentPromptSnippetsResponse2,
    ),
  );
}

export function createPromptSnippetContentPromptSnippetsResponse2FromJSON(
  jsonString: string,
): SafeParseResult<
  CreatePromptSnippetContentPromptSnippetsResponse2,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      CreatePromptSnippetContentPromptSnippetsResponse2$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'CreatePromptSnippetContentPromptSnippetsResponse2' from JSON`,
  );
}

/** @internal */
export const CreatePromptSnippetPromptSnippetsResponseContent$inboundSchema:
  z.ZodType<
    CreatePromptSnippetPromptSnippetsResponseContent,
    z.ZodTypeDef,
    unknown
  > = z.union([
    z.string(),
    z.array(z.union([
      z.lazy(() => CreatePromptSnippet2PromptSnippetsResponse1$inboundSchema),
      z.lazy(() => CreatePromptSnippet2PromptSnippetsResponse2$inboundSchema),
    ])),
  ]);

/** @internal */
export type CreatePromptSnippetPromptSnippetsResponseContent$Outbound =
  | string
  | Array<
    | CreatePromptSnippet2PromptSnippetsResponse1$Outbound
    | CreatePromptSnippet2PromptSnippetsResponse2$Outbound
  >;

/** @internal */
export const CreatePromptSnippetPromptSnippetsResponseContent$outboundSchema:
  z.ZodType<
    CreatePromptSnippetPromptSnippetsResponseContent$Outbound,
    z.ZodTypeDef,
    CreatePromptSnippetPromptSnippetsResponseContent
  > = z.union([
    z.string(),
    z.array(z.union([
      z.lazy(() => CreatePromptSnippet2PromptSnippetsResponse1$outboundSchema),
      z.lazy(() =>
        CreatePromptSnippet2PromptSnippetsResponse2$outboundSchema
      ),
    ])),
  ]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreatePromptSnippetPromptSnippetsResponseContent$ {
  /** @deprecated use `CreatePromptSnippetPromptSnippetsResponseContent$inboundSchema` instead. */
  export const inboundSchema =
    CreatePromptSnippetPromptSnippetsResponseContent$inboundSchema;
  /** @deprecated use `CreatePromptSnippetPromptSnippetsResponseContent$outboundSchema` instead. */
  export const outboundSchema =
    CreatePromptSnippetPromptSnippetsResponseContent$outboundSchema;
  /** @deprecated use `CreatePromptSnippetPromptSnippetsResponseContent$Outbound` instead. */
  export type Outbound =
    CreatePromptSnippetPromptSnippetsResponseContent$Outbound;
}

export function createPromptSnippetPromptSnippetsResponseContentToJSON(
  createPromptSnippetPromptSnippetsResponseContent:
    CreatePromptSnippetPromptSnippetsResponseContent,
): string {
  return JSON.stringify(
    CreatePromptSnippetPromptSnippetsResponseContent$outboundSchema.parse(
      createPromptSnippetPromptSnippetsResponseContent,
    ),
  );
}

export function createPromptSnippetPromptSnippetsResponseContentFromJSON(
  jsonString: string,
): SafeParseResult<
  CreatePromptSnippetPromptSnippetsResponseContent,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      CreatePromptSnippetPromptSnippetsResponseContent$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'CreatePromptSnippetPromptSnippetsResponseContent' from JSON`,
  );
}

/** @internal */
export const CreatePromptSnippetPromptSnippetsResponse200Type$inboundSchema:
  z.ZodNativeEnum<typeof CreatePromptSnippetPromptSnippetsResponse200Type> = z
    .nativeEnum(CreatePromptSnippetPromptSnippetsResponse200Type);

/** @internal */
export const CreatePromptSnippetPromptSnippetsResponse200Type$outboundSchema:
  z.ZodNativeEnum<typeof CreatePromptSnippetPromptSnippetsResponse200Type> =
    CreatePromptSnippetPromptSnippetsResponse200Type$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreatePromptSnippetPromptSnippetsResponse200Type$ {
  /** @deprecated use `CreatePromptSnippetPromptSnippetsResponse200Type$inboundSchema` instead. */
  export const inboundSchema =
    CreatePromptSnippetPromptSnippetsResponse200Type$inboundSchema;
  /** @deprecated use `CreatePromptSnippetPromptSnippetsResponse200Type$outboundSchema` instead. */
  export const outboundSchema =
    CreatePromptSnippetPromptSnippetsResponse200Type$outboundSchema;
}

/** @internal */
export const CreatePromptSnippetPromptSnippetsResponseFunction$inboundSchema:
  z.ZodType<
    CreatePromptSnippetPromptSnippetsResponseFunction,
    z.ZodTypeDef,
    unknown
  > = z.object({
    name: z.string(),
    arguments: z.string(),
  });

/** @internal */
export type CreatePromptSnippetPromptSnippetsResponseFunction$Outbound = {
  name: string;
  arguments: string;
};

/** @internal */
export const CreatePromptSnippetPromptSnippetsResponseFunction$outboundSchema:
  z.ZodType<
    CreatePromptSnippetPromptSnippetsResponseFunction$Outbound,
    z.ZodTypeDef,
    CreatePromptSnippetPromptSnippetsResponseFunction
  > = z.object({
    name: z.string(),
    arguments: z.string(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreatePromptSnippetPromptSnippetsResponseFunction$ {
  /** @deprecated use `CreatePromptSnippetPromptSnippetsResponseFunction$inboundSchema` instead. */
  export const inboundSchema =
    CreatePromptSnippetPromptSnippetsResponseFunction$inboundSchema;
  /** @deprecated use `CreatePromptSnippetPromptSnippetsResponseFunction$outboundSchema` instead. */
  export const outboundSchema =
    CreatePromptSnippetPromptSnippetsResponseFunction$outboundSchema;
  /** @deprecated use `CreatePromptSnippetPromptSnippetsResponseFunction$Outbound` instead. */
  export type Outbound =
    CreatePromptSnippetPromptSnippetsResponseFunction$Outbound;
}

export function createPromptSnippetPromptSnippetsResponseFunctionToJSON(
  createPromptSnippetPromptSnippetsResponseFunction:
    CreatePromptSnippetPromptSnippetsResponseFunction,
): string {
  return JSON.stringify(
    CreatePromptSnippetPromptSnippetsResponseFunction$outboundSchema.parse(
      createPromptSnippetPromptSnippetsResponseFunction,
    ),
  );
}

export function createPromptSnippetPromptSnippetsResponseFunctionFromJSON(
  jsonString: string,
): SafeParseResult<
  CreatePromptSnippetPromptSnippetsResponseFunction,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      CreatePromptSnippetPromptSnippetsResponseFunction$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'CreatePromptSnippetPromptSnippetsResponseFunction' from JSON`,
  );
}

/** @internal */
export const CreatePromptSnippetPromptSnippetsResponseToolCalls$inboundSchema:
  z.ZodType<
    CreatePromptSnippetPromptSnippetsResponseToolCalls,
    z.ZodTypeDef,
    unknown
  > = z.object({
    id: z.string().optional(),
    index: z.number().optional(),
    type: CreatePromptSnippetPromptSnippetsResponse200Type$inboundSchema,
    function: z.lazy(() =>
      CreatePromptSnippetPromptSnippetsResponseFunction$inboundSchema
    ),
  });

/** @internal */
export type CreatePromptSnippetPromptSnippetsResponseToolCalls$Outbound = {
  id?: string | undefined;
  index?: number | undefined;
  type: string;
  function: CreatePromptSnippetPromptSnippetsResponseFunction$Outbound;
};

/** @internal */
export const CreatePromptSnippetPromptSnippetsResponseToolCalls$outboundSchema:
  z.ZodType<
    CreatePromptSnippetPromptSnippetsResponseToolCalls$Outbound,
    z.ZodTypeDef,
    CreatePromptSnippetPromptSnippetsResponseToolCalls
  > = z.object({
    id: z.string().optional(),
    index: z.number().optional(),
    type: CreatePromptSnippetPromptSnippetsResponse200Type$outboundSchema,
    function: z.lazy(() =>
      CreatePromptSnippetPromptSnippetsResponseFunction$outboundSchema
    ),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreatePromptSnippetPromptSnippetsResponseToolCalls$ {
  /** @deprecated use `CreatePromptSnippetPromptSnippetsResponseToolCalls$inboundSchema` instead. */
  export const inboundSchema =
    CreatePromptSnippetPromptSnippetsResponseToolCalls$inboundSchema;
  /** @deprecated use `CreatePromptSnippetPromptSnippetsResponseToolCalls$outboundSchema` instead. */
  export const outboundSchema =
    CreatePromptSnippetPromptSnippetsResponseToolCalls$outboundSchema;
  /** @deprecated use `CreatePromptSnippetPromptSnippetsResponseToolCalls$Outbound` instead. */
  export type Outbound =
    CreatePromptSnippetPromptSnippetsResponseToolCalls$Outbound;
}

export function createPromptSnippetPromptSnippetsResponseToolCallsToJSON(
  createPromptSnippetPromptSnippetsResponseToolCalls:
    CreatePromptSnippetPromptSnippetsResponseToolCalls,
): string {
  return JSON.stringify(
    CreatePromptSnippetPromptSnippetsResponseToolCalls$outboundSchema.parse(
      createPromptSnippetPromptSnippetsResponseToolCalls,
    ),
  );
}

export function createPromptSnippetPromptSnippetsResponseToolCallsFromJSON(
  jsonString: string,
): SafeParseResult<
  CreatePromptSnippetPromptSnippetsResponseToolCalls,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      CreatePromptSnippetPromptSnippetsResponseToolCalls$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'CreatePromptSnippetPromptSnippetsResponseToolCalls' from JSON`,
  );
}

/** @internal */
export const CreatePromptSnippetPromptSnippetsResponseMessages$inboundSchema:
  z.ZodType<
    CreatePromptSnippetPromptSnippetsResponseMessages,
    z.ZodTypeDef,
    unknown
  > = z.object({
    role: CreatePromptSnippetPromptSnippetsResponseRole$inboundSchema,
    content: z.union([
      z.string(),
      z.array(z.union([
        z.lazy(() => CreatePromptSnippet2PromptSnippetsResponse1$inboundSchema),
        z.lazy(() =>
          CreatePromptSnippet2PromptSnippetsResponse2$inboundSchema
        ),
      ])),
    ]),
    tool_calls: z.array(
      z.lazy(() =>
        CreatePromptSnippetPromptSnippetsResponseToolCalls$inboundSchema
      ),
    ).optional(),
  }).transform((v) => {
    return remap$(v, {
      "tool_calls": "toolCalls",
    });
  });

/** @internal */
export type CreatePromptSnippetPromptSnippetsResponseMessages$Outbound = {
  role: string;
  content:
    | string
    | Array<
      | CreatePromptSnippet2PromptSnippetsResponse1$Outbound
      | CreatePromptSnippet2PromptSnippetsResponse2$Outbound
    >;
  tool_calls?:
    | Array<CreatePromptSnippetPromptSnippetsResponseToolCalls$Outbound>
    | undefined;
};

/** @internal */
export const CreatePromptSnippetPromptSnippetsResponseMessages$outboundSchema:
  z.ZodType<
    CreatePromptSnippetPromptSnippetsResponseMessages$Outbound,
    z.ZodTypeDef,
    CreatePromptSnippetPromptSnippetsResponseMessages
  > = z.object({
    role: CreatePromptSnippetPromptSnippetsResponseRole$outboundSchema,
    content: z.union([
      z.string(),
      z.array(z.union([
        z.lazy(() =>
          CreatePromptSnippet2PromptSnippetsResponse1$outboundSchema
        ),
        z.lazy(() =>
          CreatePromptSnippet2PromptSnippetsResponse2$outboundSchema
        ),
      ])),
    ]),
    toolCalls: z.array(
      z.lazy(() =>
        CreatePromptSnippetPromptSnippetsResponseToolCalls$outboundSchema
      ),
    ).optional(),
  }).transform((v) => {
    return remap$(v, {
      toolCalls: "tool_calls",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreatePromptSnippetPromptSnippetsResponseMessages$ {
  /** @deprecated use `CreatePromptSnippetPromptSnippetsResponseMessages$inboundSchema` instead. */
  export const inboundSchema =
    CreatePromptSnippetPromptSnippetsResponseMessages$inboundSchema;
  /** @deprecated use `CreatePromptSnippetPromptSnippetsResponseMessages$outboundSchema` instead. */
  export const outboundSchema =
    CreatePromptSnippetPromptSnippetsResponseMessages$outboundSchema;
  /** @deprecated use `CreatePromptSnippetPromptSnippetsResponseMessages$Outbound` instead. */
  export type Outbound =
    CreatePromptSnippetPromptSnippetsResponseMessages$Outbound;
}

export function createPromptSnippetPromptSnippetsResponseMessagesToJSON(
  createPromptSnippetPromptSnippetsResponseMessages:
    CreatePromptSnippetPromptSnippetsResponseMessages,
): string {
  return JSON.stringify(
    CreatePromptSnippetPromptSnippetsResponseMessages$outboundSchema.parse(
      createPromptSnippetPromptSnippetsResponseMessages,
    ),
  );
}

export function createPromptSnippetPromptSnippetsResponseMessagesFromJSON(
  jsonString: string,
): SafeParseResult<
  CreatePromptSnippetPromptSnippetsResponseMessages,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      CreatePromptSnippetPromptSnippetsResponseMessages$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'CreatePromptSnippetPromptSnippetsResponseMessages' from JSON`,
  );
}

/** @internal */
export const CreatePromptSnippetPromptSnippetsPromptConfig$inboundSchema:
  z.ZodType<
    CreatePromptSnippetPromptSnippetsPromptConfig,
    z.ZodTypeDef,
    unknown
  > = z.object({
    stream: z.boolean().optional(),
    model: z.string().optional(),
    model_db_id: z.string().optional(),
    model_type: CreatePromptSnippetPromptSnippetsModelType$inboundSchema
      .optional(),
    model_parameters: z.lazy(() =>
      CreatePromptSnippetPromptSnippetsModelParameters$inboundSchema
    ).optional(),
    provider: CreatePromptSnippetPromptSnippetsProvider$inboundSchema
      .optional(),
    integration_id: z.nullable(z.string()).optional(),
    version: z.string().optional(),
    messages: z.array(
      z.lazy(() =>
        CreatePromptSnippetPromptSnippetsResponseMessages$inboundSchema
      ),
    ),
  }).transform((v) => {
    return remap$(v, {
      "model_db_id": "modelDbId",
      "model_type": "modelType",
      "model_parameters": "modelParameters",
      "integration_id": "integrationId",
    });
  });

/** @internal */
export type CreatePromptSnippetPromptSnippetsPromptConfig$Outbound = {
  stream?: boolean | undefined;
  model?: string | undefined;
  model_db_id?: string | undefined;
  model_type?: string | undefined;
  model_parameters?:
    | CreatePromptSnippetPromptSnippetsModelParameters$Outbound
    | undefined;
  provider?: string | undefined;
  integration_id?: string | null | undefined;
  version?: string | undefined;
  messages: Array<CreatePromptSnippetPromptSnippetsResponseMessages$Outbound>;
};

/** @internal */
export const CreatePromptSnippetPromptSnippetsPromptConfig$outboundSchema:
  z.ZodType<
    CreatePromptSnippetPromptSnippetsPromptConfig$Outbound,
    z.ZodTypeDef,
    CreatePromptSnippetPromptSnippetsPromptConfig
  > = z.object({
    stream: z.boolean().optional(),
    model: z.string().optional(),
    modelDbId: z.string().optional(),
    modelType: CreatePromptSnippetPromptSnippetsModelType$outboundSchema
      .optional(),
    modelParameters: z.lazy(() =>
      CreatePromptSnippetPromptSnippetsModelParameters$outboundSchema
    ).optional(),
    provider: CreatePromptSnippetPromptSnippetsProvider$outboundSchema
      .optional(),
    integrationId: z.nullable(z.string()).optional(),
    version: z.string().optional(),
    messages: z.array(
      z.lazy(() =>
        CreatePromptSnippetPromptSnippetsResponseMessages$outboundSchema
      ),
    ),
  }).transform((v) => {
    return remap$(v, {
      modelDbId: "model_db_id",
      modelType: "model_type",
      modelParameters: "model_parameters",
      integrationId: "integration_id",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreatePromptSnippetPromptSnippetsPromptConfig$ {
  /** @deprecated use `CreatePromptSnippetPromptSnippetsPromptConfig$inboundSchema` instead. */
  export const inboundSchema =
    CreatePromptSnippetPromptSnippetsPromptConfig$inboundSchema;
  /** @deprecated use `CreatePromptSnippetPromptSnippetsPromptConfig$outboundSchema` instead. */
  export const outboundSchema =
    CreatePromptSnippetPromptSnippetsPromptConfig$outboundSchema;
  /** @deprecated use `CreatePromptSnippetPromptSnippetsPromptConfig$Outbound` instead. */
  export type Outbound = CreatePromptSnippetPromptSnippetsPromptConfig$Outbound;
}

export function createPromptSnippetPromptSnippetsPromptConfigToJSON(
  createPromptSnippetPromptSnippetsPromptConfig:
    CreatePromptSnippetPromptSnippetsPromptConfig,
): string {
  return JSON.stringify(
    CreatePromptSnippetPromptSnippetsPromptConfig$outboundSchema.parse(
      createPromptSnippetPromptSnippetsPromptConfig,
    ),
  );
}

export function createPromptSnippetPromptSnippetsPromptConfigFromJSON(
  jsonString: string,
): SafeParseResult<
  CreatePromptSnippetPromptSnippetsPromptConfig,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      CreatePromptSnippetPromptSnippetsPromptConfig$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'CreatePromptSnippetPromptSnippetsPromptConfig' from JSON`,
  );
}

/** @internal */
export const CreatePromptSnippetPromptSnippetsUseCases$inboundSchema:
  z.ZodNativeEnum<typeof CreatePromptSnippetPromptSnippetsUseCases> = z
    .nativeEnum(CreatePromptSnippetPromptSnippetsUseCases);

/** @internal */
export const CreatePromptSnippetPromptSnippetsUseCases$outboundSchema:
  z.ZodNativeEnum<typeof CreatePromptSnippetPromptSnippetsUseCases> =
    CreatePromptSnippetPromptSnippetsUseCases$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreatePromptSnippetPromptSnippetsUseCases$ {
  /** @deprecated use `CreatePromptSnippetPromptSnippetsUseCases$inboundSchema` instead. */
  export const inboundSchema =
    CreatePromptSnippetPromptSnippetsUseCases$inboundSchema;
  /** @deprecated use `CreatePromptSnippetPromptSnippetsUseCases$outboundSchema` instead. */
  export const outboundSchema =
    CreatePromptSnippetPromptSnippetsUseCases$outboundSchema;
}

/** @internal */
export const CreatePromptSnippetPromptSnippetsLanguage$inboundSchema:
  z.ZodNativeEnum<typeof CreatePromptSnippetPromptSnippetsLanguage> = z
    .nativeEnum(CreatePromptSnippetPromptSnippetsLanguage);

/** @internal */
export const CreatePromptSnippetPromptSnippetsLanguage$outboundSchema:
  z.ZodNativeEnum<typeof CreatePromptSnippetPromptSnippetsLanguage> =
    CreatePromptSnippetPromptSnippetsLanguage$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreatePromptSnippetPromptSnippetsLanguage$ {
  /** @deprecated use `CreatePromptSnippetPromptSnippetsLanguage$inboundSchema` instead. */
  export const inboundSchema =
    CreatePromptSnippetPromptSnippetsLanguage$inboundSchema;
  /** @deprecated use `CreatePromptSnippetPromptSnippetsLanguage$outboundSchema` instead. */
  export const outboundSchema =
    CreatePromptSnippetPromptSnippetsLanguage$outboundSchema;
}

/** @internal */
export const CreatePromptSnippetPromptSnippetsResponseMetadata$inboundSchema:
  z.ZodType<
    CreatePromptSnippetPromptSnippetsResponseMetadata,
    z.ZodTypeDef,
    unknown
  > = z.object({
    use_cases: z.array(CreatePromptSnippetPromptSnippetsUseCases$inboundSchema)
      .optional(),
    language: CreatePromptSnippetPromptSnippetsLanguage$inboundSchema
      .optional(),
  }).transform((v) => {
    return remap$(v, {
      "use_cases": "useCases",
    });
  });

/** @internal */
export type CreatePromptSnippetPromptSnippetsResponseMetadata$Outbound = {
  use_cases?: Array<string> | undefined;
  language?: string | undefined;
};

/** @internal */
export const CreatePromptSnippetPromptSnippetsResponseMetadata$outboundSchema:
  z.ZodType<
    CreatePromptSnippetPromptSnippetsResponseMetadata$Outbound,
    z.ZodTypeDef,
    CreatePromptSnippetPromptSnippetsResponseMetadata
  > = z.object({
    useCases: z.array(CreatePromptSnippetPromptSnippetsUseCases$outboundSchema)
      .optional(),
    language: CreatePromptSnippetPromptSnippetsLanguage$outboundSchema
      .optional(),
  }).transform((v) => {
    return remap$(v, {
      useCases: "use_cases",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreatePromptSnippetPromptSnippetsResponseMetadata$ {
  /** @deprecated use `CreatePromptSnippetPromptSnippetsResponseMetadata$inboundSchema` instead. */
  export const inboundSchema =
    CreatePromptSnippetPromptSnippetsResponseMetadata$inboundSchema;
  /** @deprecated use `CreatePromptSnippetPromptSnippetsResponseMetadata$outboundSchema` instead. */
  export const outboundSchema =
    CreatePromptSnippetPromptSnippetsResponseMetadata$outboundSchema;
  /** @deprecated use `CreatePromptSnippetPromptSnippetsResponseMetadata$Outbound` instead. */
  export type Outbound =
    CreatePromptSnippetPromptSnippetsResponseMetadata$Outbound;
}

export function createPromptSnippetPromptSnippetsResponseMetadataToJSON(
  createPromptSnippetPromptSnippetsResponseMetadata:
    CreatePromptSnippetPromptSnippetsResponseMetadata,
): string {
  return JSON.stringify(
    CreatePromptSnippetPromptSnippetsResponseMetadata$outboundSchema.parse(
      createPromptSnippetPromptSnippetsResponseMetadata,
    ),
  );
}

export function createPromptSnippetPromptSnippetsResponseMetadataFromJSON(
  jsonString: string,
): SafeParseResult<
  CreatePromptSnippetPromptSnippetsResponseMetadata,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      CreatePromptSnippetPromptSnippetsResponseMetadata$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'CreatePromptSnippetPromptSnippetsResponseMetadata' from JSON`,
  );
}

/** @internal */
export const Versions$inboundSchema: z.ZodType<
  Versions,
  z.ZodTypeDef,
  unknown
> = z.object({
  _id: z.string(),
  description: z.nullable(z.string()).optional(),
  prompt_config: z.lazy(() =>
    CreatePromptSnippetPromptSnippetsPromptConfig$inboundSchema
  ),
  metadata: z.lazy(() =>
    CreatePromptSnippetPromptSnippetsResponseMetadata$inboundSchema
  ),
  created_by_id: z.string(),
  updated_by_id: z.string(),
  timestamp: z.string(),
}).transform((v) => {
  return remap$(v, {
    "_id": "id",
    "prompt_config": "promptConfig",
    "created_by_id": "createdById",
    "updated_by_id": "updatedById",
  });
});

/** @internal */
export type Versions$Outbound = {
  _id: string;
  description?: string | null | undefined;
  prompt_config: CreatePromptSnippetPromptSnippetsPromptConfig$Outbound;
  metadata: CreatePromptSnippetPromptSnippetsResponseMetadata$Outbound;
  created_by_id: string;
  updated_by_id: string;
  timestamp: string;
};

/** @internal */
export const Versions$outboundSchema: z.ZodType<
  Versions$Outbound,
  z.ZodTypeDef,
  Versions
> = z.object({
  id: z.string(),
  description: z.nullable(z.string()).optional(),
  promptConfig: z.lazy(() =>
    CreatePromptSnippetPromptSnippetsPromptConfig$outboundSchema
  ),
  metadata: z.lazy(() =>
    CreatePromptSnippetPromptSnippetsResponseMetadata$outboundSchema
  ),
  createdById: z.string(),
  updatedById: z.string(),
  timestamp: z.string(),
}).transform((v) => {
  return remap$(v, {
    id: "_id",
    promptConfig: "prompt_config",
    createdById: "created_by_id",
    updatedById: "updated_by_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Versions$ {
  /** @deprecated use `Versions$inboundSchema` instead. */
  export const inboundSchema = Versions$inboundSchema;
  /** @deprecated use `Versions$outboundSchema` instead. */
  export const outboundSchema = Versions$outboundSchema;
  /** @deprecated use `Versions$Outbound` instead. */
  export type Outbound = Versions$Outbound;
}

export function versionsToJSON(versions: Versions): string {
  return JSON.stringify(Versions$outboundSchema.parse(versions));
}

export function versionsFromJSON(
  jsonString: string,
): SafeParseResult<Versions, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Versions$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Versions' from JSON`,
  );
}

/** @internal */
export const CreatePromptSnippetResponseBody$inboundSchema: z.ZodType<
  CreatePromptSnippetResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  _id: z.string(),
  owner: z.union([z.string(), Owner2$inboundSchema]),
  domain_id: z.string(),
  key: z.string(),
  description: z.nullable(z.string()).optional(),
  prompt_config: z.lazy(() => CreatePromptSnippetPromptConfig$inboundSchema),
  metadata: z.lazy(() =>
    CreatePromptSnippetPromptSnippetsMetadata$inboundSchema
  ),
  created_by_id: z.string(),
  updated_by_id: z.string(),
  created: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
  updated: z.string().datetime({ offset: true }).default(
    "2025-02-11T17:53:37.707Z",
  ).transform(v => new Date(v)),
  type: CreatePromptSnippetPromptSnippetsType$inboundSchema,
  versions: z.array(z.lazy(() => Versions$inboundSchema)),
}).transform((v) => {
  return remap$(v, {
    "_id": "id",
    "domain_id": "domainId",
    "prompt_config": "promptConfig",
    "created_by_id": "createdById",
    "updated_by_id": "updatedById",
  });
});

/** @internal */
export type CreatePromptSnippetResponseBody$Outbound = {
  _id: string;
  owner: string | string;
  domain_id: string;
  key: string;
  description?: string | null | undefined;
  prompt_config: CreatePromptSnippetPromptConfig$Outbound;
  metadata: CreatePromptSnippetPromptSnippetsMetadata$Outbound;
  created_by_id: string;
  updated_by_id: string;
  created?: string | undefined;
  updated: string;
  type: string;
  versions: Array<Versions$Outbound>;
};

/** @internal */
export const CreatePromptSnippetResponseBody$outboundSchema: z.ZodType<
  CreatePromptSnippetResponseBody$Outbound,
  z.ZodTypeDef,
  CreatePromptSnippetResponseBody
> = z.object({
  id: z.string(),
  owner: z.union([z.string(), Owner2$outboundSchema]),
  domainId: z.string(),
  key: z.string(),
  description: z.nullable(z.string()).optional(),
  promptConfig: z.lazy(() => CreatePromptSnippetPromptConfig$outboundSchema),
  metadata: z.lazy(() =>
    CreatePromptSnippetPromptSnippetsMetadata$outboundSchema
  ),
  createdById: z.string(),
  updatedById: z.string(),
  created: z.date().transform(v => v.toISOString()).optional(),
  updated: z.date().default(() => new Date("2025-02-11T17:53:37.707Z"))
    .transform(v => v.toISOString()),
  type: CreatePromptSnippetPromptSnippetsType$outboundSchema,
  versions: z.array(z.lazy(() => Versions$outboundSchema)),
}).transform((v) => {
  return remap$(v, {
    id: "_id",
    domainId: "domain_id",
    promptConfig: "prompt_config",
    createdById: "created_by_id",
    updatedById: "updated_by_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreatePromptSnippetResponseBody$ {
  /** @deprecated use `CreatePromptSnippetResponseBody$inboundSchema` instead. */
  export const inboundSchema = CreatePromptSnippetResponseBody$inboundSchema;
  /** @deprecated use `CreatePromptSnippetResponseBody$outboundSchema` instead. */
  export const outboundSchema = CreatePromptSnippetResponseBody$outboundSchema;
  /** @deprecated use `CreatePromptSnippetResponseBody$Outbound` instead. */
  export type Outbound = CreatePromptSnippetResponseBody$Outbound;
}

export function createPromptSnippetResponseBodyToJSON(
  createPromptSnippetResponseBody: CreatePromptSnippetResponseBody,
): string {
  return JSON.stringify(
    CreatePromptSnippetResponseBody$outboundSchema.parse(
      createPromptSnippetResponseBody,
    ),
  );
}

export function createPromptSnippetResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<CreatePromptSnippetResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreatePromptSnippetResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreatePromptSnippetResponseBody' from JSON`,
  );
}
