/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * The role of the prompt message
 */
export const UpdateDatapointRole = {
  System: "system",
  Assistant: "assistant",
  User: "user",
  Exception: "exception",
  Tool: "tool",
  Prompt: "prompt",
  Correction: "correction",
  ExpectedOutput: "expected_output",
} as const;
/**
 * The role of the prompt message
 */
export type UpdateDatapointRole = ClosedEnum<typeof UpdateDatapointRole>;

export const UpdateDatapoint2DatasetsType = {
  ImageUrl: "image_url",
} as const;
export type UpdateDatapoint2DatasetsType = ClosedEnum<
  typeof UpdateDatapoint2DatasetsType
>;

export type UpdateDatapoint2ImageUrl = {
  /**
   * Either a URL of the image or the base64 encoded data URI.
   */
  url: string;
  /**
   * Specifies the detail level of the image. Currently only supported with OpenAI models
   */
  detail?: string | undefined;
};

/**
 * The image part of the prompt message. Only supported with vision models.
 */
export type UpdateDatapoint22 = {
  type: UpdateDatapoint2DatasetsType;
  imageUrl: UpdateDatapoint2ImageUrl;
};

export const UpdateDatapoint2Type = {
  Text: "text",
} as const;
export type UpdateDatapoint2Type = ClosedEnum<typeof UpdateDatapoint2Type>;

/**
 * Text content part of a prompt message
 */
export type UpdateDatapoint21 = {
  type: UpdateDatapoint2Type;
  text: string;
};

export type UpdateDatapointContent2 = UpdateDatapoint21 | UpdateDatapoint22;

/**
 * The contents of the user message. Either the text content of the message or an array of content parts with a defined type, each can be of type `text` or `image_url` when passing in images. You can pass multiple images by adding multiple `image_url` content parts.
 */
export type UpdateDatapointContent =
  | string
  | Array<UpdateDatapoint21 | UpdateDatapoint22>;

export const UpdateDatapointType = {
  Function: "function",
} as const;
export type UpdateDatapointType = ClosedEnum<typeof UpdateDatapointType>;

export type UpdateDatapointFunction = {
  name: string;
  /**
   * JSON string arguments for the functions
   */
  arguments: string;
};

export type UpdateDatapointToolCalls = {
  id?: string | undefined;
  index?: number | undefined;
  type: UpdateDatapointType;
  function: UpdateDatapointFunction;
};

export type UpdateDatapointMessages = {
  /**
   * The role of the prompt message
   */
  role: UpdateDatapointRole;
  /**
   * The contents of the user message. Either the text content of the message or an array of content parts with a defined type, each can be of type `text` or `image_url` when passing in images. You can pass multiple images by adding multiple `image_url` content parts.
   */
  content: string | Array<UpdateDatapoint21 | UpdateDatapoint22>;
  toolCalls?: Array<UpdateDatapointToolCalls> | undefined;
};

export type UpdateDatapointRequestBody = {
  /**
   * The inputs of the dataset. Key value pairs where the key is the input name and the value is the input value. Nested objects are not supported.
   */
  inputs?: { [k: string]: any } | undefined;
  /**
   * The prompt template messages
   */
  messages?: Array<UpdateDatapointMessages> | undefined;
  expectedOutput?: string | undefined;
};

export type UpdateDatapointRequest = {
  datasetId: string;
  datapointId: string;
  requestBody?: UpdateDatapointRequestBody | undefined;
};

/**
 * The role of the prompt message
 */
export const UpdateDatapointDatasetsRole = {
  System: "system",
  Assistant: "assistant",
  User: "user",
  Exception: "exception",
  Tool: "tool",
  Prompt: "prompt",
  Correction: "correction",
  ExpectedOutput: "expected_output",
} as const;
/**
 * The role of the prompt message
 */
export type UpdateDatapointDatasetsRole = ClosedEnum<
  typeof UpdateDatapointDatasetsRole
>;

export const UpdateDatapoint2DatasetsResponse200Type = {
  ImageUrl: "image_url",
} as const;
export type UpdateDatapoint2DatasetsResponse200Type = ClosedEnum<
  typeof UpdateDatapoint2DatasetsResponse200Type
>;

export type UpdateDatapoint2DatasetsImageUrl = {
  /**
   * The orq.ai id of the image
   */
  id?: string | undefined;
  /**
   * Either a URL of the image or the base64 encoded data URI.
   */
  url: string;
  /**
   * Specifies the detail level of the image. Currently only supported with OpenAI models
   */
  detail?: string | undefined;
};

/**
 * The image part of the prompt message. Only supported with vision models.
 */
export type UpdateDatapoint2Datasets2 = {
  type: UpdateDatapoint2DatasetsResponse200Type;
  imageUrl: UpdateDatapoint2DatasetsImageUrl;
};

export const UpdateDatapoint2DatasetsResponseType = {
  Text: "text",
} as const;
export type UpdateDatapoint2DatasetsResponseType = ClosedEnum<
  typeof UpdateDatapoint2DatasetsResponseType
>;

/**
 * Text content part of a prompt message
 */
export type UpdateDatapoint2Datasets1 = {
  type: UpdateDatapoint2DatasetsResponseType;
  text: string;
};

export type UpdateDatapointContentDatasets2 =
  | UpdateDatapoint2Datasets1
  | UpdateDatapoint2Datasets2;

/**
 * The contents of the user message. Either the text content of the message or an array of content parts with a defined type, each can be of type `text` or `image_url` when passing in images. You can pass multiple images by adding multiple `image_url` content parts.
 */
export type UpdateDatapointDatasetsContent =
  | string
  | Array<UpdateDatapoint2Datasets1 | UpdateDatapoint2Datasets2>;

export const UpdateDatapointDatasetsType = {
  Function: "function",
} as const;
export type UpdateDatapointDatasetsType = ClosedEnum<
  typeof UpdateDatapointDatasetsType
>;

export type UpdateDatapointDatasetsFunction = {
  name: string;
  /**
   * JSON string arguments for the functions
   */
  arguments: string;
};

export type UpdateDatapointDatasetsToolCalls = {
  id?: string | undefined;
  index?: number | undefined;
  type: UpdateDatapointDatasetsType;
  function: UpdateDatapointDatasetsFunction;
};

export type UpdateDatapointDatasetsMessages = {
  /**
   * The role of the prompt message
   */
  role: UpdateDatapointDatasetsRole;
  /**
   * The contents of the user message. Either the text content of the message or an array of content parts with a defined type, each can be of type `text` or `image_url` when passing in images. You can pass multiple images by adding multiple `image_url` content parts.
   */
  content:
    | string
    | Array<UpdateDatapoint2Datasets1 | UpdateDatapoint2Datasets2>;
  toolCalls?: Array<UpdateDatapointDatasetsToolCalls> | undefined;
};

/**
 * Dataset item updated.
 */
export type UpdateDatapointResponseBody = {
  /**
   * The unique identifier of the dataset item
   */
  id: string;
  /**
   * The unique identifier of the workspace it belongs to
   */
  workspaceId: string;
  /**
   * The inputs of the dataset. Key value pairs where the key is the input name and the value is the input value. Nested objects are not supported.
   */
  inputs?: { [k: string]: any } | undefined;
  /**
   * The prompt template messages
   */
  messages?: Array<UpdateDatapointDatasetsMessages> | undefined;
  expectedOutput?: string | undefined;
  /**
   * The unique identifier of the dataset
   */
  datasetId: string;
  /**
   * The unique identifier of the user who created the dataset
   */
  createdById?: string | undefined;
  /**
   * The unique identifier of the user who last updated the dataset
   */
  updatedById?: string | undefined;
  /**
   * The date and time the resource was created
   */
  created?: Date | undefined;
  /**
   * The date and time the resource was last updated
   */
  updated?: Date | undefined;
};

/** @internal */
export const UpdateDatapointRole$inboundSchema: z.ZodNativeEnum<
  typeof UpdateDatapointRole
> = z.nativeEnum(UpdateDatapointRole);

/** @internal */
export const UpdateDatapointRole$outboundSchema: z.ZodNativeEnum<
  typeof UpdateDatapointRole
> = UpdateDatapointRole$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateDatapointRole$ {
  /** @deprecated use `UpdateDatapointRole$inboundSchema` instead. */
  export const inboundSchema = UpdateDatapointRole$inboundSchema;
  /** @deprecated use `UpdateDatapointRole$outboundSchema` instead. */
  export const outboundSchema = UpdateDatapointRole$outboundSchema;
}

/** @internal */
export const UpdateDatapoint2DatasetsType$inboundSchema: z.ZodNativeEnum<
  typeof UpdateDatapoint2DatasetsType
> = z.nativeEnum(UpdateDatapoint2DatasetsType);

/** @internal */
export const UpdateDatapoint2DatasetsType$outboundSchema: z.ZodNativeEnum<
  typeof UpdateDatapoint2DatasetsType
> = UpdateDatapoint2DatasetsType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateDatapoint2DatasetsType$ {
  /** @deprecated use `UpdateDatapoint2DatasetsType$inboundSchema` instead. */
  export const inboundSchema = UpdateDatapoint2DatasetsType$inboundSchema;
  /** @deprecated use `UpdateDatapoint2DatasetsType$outboundSchema` instead. */
  export const outboundSchema = UpdateDatapoint2DatasetsType$outboundSchema;
}

/** @internal */
export const UpdateDatapoint2ImageUrl$inboundSchema: z.ZodType<
  UpdateDatapoint2ImageUrl,
  z.ZodTypeDef,
  unknown
> = z.object({
  url: z.string(),
  detail: z.string().optional(),
});

/** @internal */
export type UpdateDatapoint2ImageUrl$Outbound = {
  url: string;
  detail?: string | undefined;
};

/** @internal */
export const UpdateDatapoint2ImageUrl$outboundSchema: z.ZodType<
  UpdateDatapoint2ImageUrl$Outbound,
  z.ZodTypeDef,
  UpdateDatapoint2ImageUrl
> = z.object({
  url: z.string(),
  detail: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateDatapoint2ImageUrl$ {
  /** @deprecated use `UpdateDatapoint2ImageUrl$inboundSchema` instead. */
  export const inboundSchema = UpdateDatapoint2ImageUrl$inboundSchema;
  /** @deprecated use `UpdateDatapoint2ImageUrl$outboundSchema` instead. */
  export const outboundSchema = UpdateDatapoint2ImageUrl$outboundSchema;
  /** @deprecated use `UpdateDatapoint2ImageUrl$Outbound` instead. */
  export type Outbound = UpdateDatapoint2ImageUrl$Outbound;
}

export function updateDatapoint2ImageUrlToJSON(
  updateDatapoint2ImageUrl: UpdateDatapoint2ImageUrl,
): string {
  return JSON.stringify(
    UpdateDatapoint2ImageUrl$outboundSchema.parse(updateDatapoint2ImageUrl),
  );
}

export function updateDatapoint2ImageUrlFromJSON(
  jsonString: string,
): SafeParseResult<UpdateDatapoint2ImageUrl, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateDatapoint2ImageUrl$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateDatapoint2ImageUrl' from JSON`,
  );
}

/** @internal */
export const UpdateDatapoint22$inboundSchema: z.ZodType<
  UpdateDatapoint22,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: UpdateDatapoint2DatasetsType$inboundSchema,
  image_url: z.lazy(() => UpdateDatapoint2ImageUrl$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "image_url": "imageUrl",
  });
});

/** @internal */
export type UpdateDatapoint22$Outbound = {
  type: string;
  image_url: UpdateDatapoint2ImageUrl$Outbound;
};

/** @internal */
export const UpdateDatapoint22$outboundSchema: z.ZodType<
  UpdateDatapoint22$Outbound,
  z.ZodTypeDef,
  UpdateDatapoint22
> = z.object({
  type: UpdateDatapoint2DatasetsType$outboundSchema,
  imageUrl: z.lazy(() => UpdateDatapoint2ImageUrl$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    imageUrl: "image_url",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateDatapoint22$ {
  /** @deprecated use `UpdateDatapoint22$inboundSchema` instead. */
  export const inboundSchema = UpdateDatapoint22$inboundSchema;
  /** @deprecated use `UpdateDatapoint22$outboundSchema` instead. */
  export const outboundSchema = UpdateDatapoint22$outboundSchema;
  /** @deprecated use `UpdateDatapoint22$Outbound` instead. */
  export type Outbound = UpdateDatapoint22$Outbound;
}

export function updateDatapoint22ToJSON(
  updateDatapoint22: UpdateDatapoint22,
): string {
  return JSON.stringify(
    UpdateDatapoint22$outboundSchema.parse(updateDatapoint22),
  );
}

export function updateDatapoint22FromJSON(
  jsonString: string,
): SafeParseResult<UpdateDatapoint22, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateDatapoint22$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateDatapoint22' from JSON`,
  );
}

/** @internal */
export const UpdateDatapoint2Type$inboundSchema: z.ZodNativeEnum<
  typeof UpdateDatapoint2Type
> = z.nativeEnum(UpdateDatapoint2Type);

/** @internal */
export const UpdateDatapoint2Type$outboundSchema: z.ZodNativeEnum<
  typeof UpdateDatapoint2Type
> = UpdateDatapoint2Type$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateDatapoint2Type$ {
  /** @deprecated use `UpdateDatapoint2Type$inboundSchema` instead. */
  export const inboundSchema = UpdateDatapoint2Type$inboundSchema;
  /** @deprecated use `UpdateDatapoint2Type$outboundSchema` instead. */
  export const outboundSchema = UpdateDatapoint2Type$outboundSchema;
}

/** @internal */
export const UpdateDatapoint21$inboundSchema: z.ZodType<
  UpdateDatapoint21,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: UpdateDatapoint2Type$inboundSchema,
  text: z.string(),
});

/** @internal */
export type UpdateDatapoint21$Outbound = {
  type: string;
  text: string;
};

/** @internal */
export const UpdateDatapoint21$outboundSchema: z.ZodType<
  UpdateDatapoint21$Outbound,
  z.ZodTypeDef,
  UpdateDatapoint21
> = z.object({
  type: UpdateDatapoint2Type$outboundSchema,
  text: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateDatapoint21$ {
  /** @deprecated use `UpdateDatapoint21$inboundSchema` instead. */
  export const inboundSchema = UpdateDatapoint21$inboundSchema;
  /** @deprecated use `UpdateDatapoint21$outboundSchema` instead. */
  export const outboundSchema = UpdateDatapoint21$outboundSchema;
  /** @deprecated use `UpdateDatapoint21$Outbound` instead. */
  export type Outbound = UpdateDatapoint21$Outbound;
}

export function updateDatapoint21ToJSON(
  updateDatapoint21: UpdateDatapoint21,
): string {
  return JSON.stringify(
    UpdateDatapoint21$outboundSchema.parse(updateDatapoint21),
  );
}

export function updateDatapoint21FromJSON(
  jsonString: string,
): SafeParseResult<UpdateDatapoint21, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateDatapoint21$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateDatapoint21' from JSON`,
  );
}

/** @internal */
export const UpdateDatapointContent2$inboundSchema: z.ZodType<
  UpdateDatapointContent2,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => UpdateDatapoint21$inboundSchema),
  z.lazy(() => UpdateDatapoint22$inboundSchema),
]);

/** @internal */
export type UpdateDatapointContent2$Outbound =
  | UpdateDatapoint21$Outbound
  | UpdateDatapoint22$Outbound;

/** @internal */
export const UpdateDatapointContent2$outboundSchema: z.ZodType<
  UpdateDatapointContent2$Outbound,
  z.ZodTypeDef,
  UpdateDatapointContent2
> = z.union([
  z.lazy(() => UpdateDatapoint21$outboundSchema),
  z.lazy(() => UpdateDatapoint22$outboundSchema),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateDatapointContent2$ {
  /** @deprecated use `UpdateDatapointContent2$inboundSchema` instead. */
  export const inboundSchema = UpdateDatapointContent2$inboundSchema;
  /** @deprecated use `UpdateDatapointContent2$outboundSchema` instead. */
  export const outboundSchema = UpdateDatapointContent2$outboundSchema;
  /** @deprecated use `UpdateDatapointContent2$Outbound` instead. */
  export type Outbound = UpdateDatapointContent2$Outbound;
}

export function updateDatapointContent2ToJSON(
  updateDatapointContent2: UpdateDatapointContent2,
): string {
  return JSON.stringify(
    UpdateDatapointContent2$outboundSchema.parse(updateDatapointContent2),
  );
}

export function updateDatapointContent2FromJSON(
  jsonString: string,
): SafeParseResult<UpdateDatapointContent2, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateDatapointContent2$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateDatapointContent2' from JSON`,
  );
}

/** @internal */
export const UpdateDatapointContent$inboundSchema: z.ZodType<
  UpdateDatapointContent,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.string(),
  z.array(z.union([
    z.lazy(() => UpdateDatapoint21$inboundSchema),
    z.lazy(() => UpdateDatapoint22$inboundSchema),
  ])),
]);

/** @internal */
export type UpdateDatapointContent$Outbound =
  | string
  | Array<UpdateDatapoint21$Outbound | UpdateDatapoint22$Outbound>;

/** @internal */
export const UpdateDatapointContent$outboundSchema: z.ZodType<
  UpdateDatapointContent$Outbound,
  z.ZodTypeDef,
  UpdateDatapointContent
> = z.union([
  z.string(),
  z.array(z.union([
    z.lazy(() => UpdateDatapoint21$outboundSchema),
    z.lazy(() => UpdateDatapoint22$outboundSchema),
  ])),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateDatapointContent$ {
  /** @deprecated use `UpdateDatapointContent$inboundSchema` instead. */
  export const inboundSchema = UpdateDatapointContent$inboundSchema;
  /** @deprecated use `UpdateDatapointContent$outboundSchema` instead. */
  export const outboundSchema = UpdateDatapointContent$outboundSchema;
  /** @deprecated use `UpdateDatapointContent$Outbound` instead. */
  export type Outbound = UpdateDatapointContent$Outbound;
}

export function updateDatapointContentToJSON(
  updateDatapointContent: UpdateDatapointContent,
): string {
  return JSON.stringify(
    UpdateDatapointContent$outboundSchema.parse(updateDatapointContent),
  );
}

export function updateDatapointContentFromJSON(
  jsonString: string,
): SafeParseResult<UpdateDatapointContent, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateDatapointContent$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateDatapointContent' from JSON`,
  );
}

/** @internal */
export const UpdateDatapointType$inboundSchema: z.ZodNativeEnum<
  typeof UpdateDatapointType
> = z.nativeEnum(UpdateDatapointType);

/** @internal */
export const UpdateDatapointType$outboundSchema: z.ZodNativeEnum<
  typeof UpdateDatapointType
> = UpdateDatapointType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateDatapointType$ {
  /** @deprecated use `UpdateDatapointType$inboundSchema` instead. */
  export const inboundSchema = UpdateDatapointType$inboundSchema;
  /** @deprecated use `UpdateDatapointType$outboundSchema` instead. */
  export const outboundSchema = UpdateDatapointType$outboundSchema;
}

/** @internal */
export const UpdateDatapointFunction$inboundSchema: z.ZodType<
  UpdateDatapointFunction,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.string(),
  arguments: z.string(),
});

/** @internal */
export type UpdateDatapointFunction$Outbound = {
  name: string;
  arguments: string;
};

/** @internal */
export const UpdateDatapointFunction$outboundSchema: z.ZodType<
  UpdateDatapointFunction$Outbound,
  z.ZodTypeDef,
  UpdateDatapointFunction
> = z.object({
  name: z.string(),
  arguments: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateDatapointFunction$ {
  /** @deprecated use `UpdateDatapointFunction$inboundSchema` instead. */
  export const inboundSchema = UpdateDatapointFunction$inboundSchema;
  /** @deprecated use `UpdateDatapointFunction$outboundSchema` instead. */
  export const outboundSchema = UpdateDatapointFunction$outboundSchema;
  /** @deprecated use `UpdateDatapointFunction$Outbound` instead. */
  export type Outbound = UpdateDatapointFunction$Outbound;
}

export function updateDatapointFunctionToJSON(
  updateDatapointFunction: UpdateDatapointFunction,
): string {
  return JSON.stringify(
    UpdateDatapointFunction$outboundSchema.parse(updateDatapointFunction),
  );
}

export function updateDatapointFunctionFromJSON(
  jsonString: string,
): SafeParseResult<UpdateDatapointFunction, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateDatapointFunction$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateDatapointFunction' from JSON`,
  );
}

/** @internal */
export const UpdateDatapointToolCalls$inboundSchema: z.ZodType<
  UpdateDatapointToolCalls,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string().optional(),
  index: z.number().optional(),
  type: UpdateDatapointType$inboundSchema,
  function: z.lazy(() => UpdateDatapointFunction$inboundSchema),
});

/** @internal */
export type UpdateDatapointToolCalls$Outbound = {
  id?: string | undefined;
  index?: number | undefined;
  type: string;
  function: UpdateDatapointFunction$Outbound;
};

/** @internal */
export const UpdateDatapointToolCalls$outboundSchema: z.ZodType<
  UpdateDatapointToolCalls$Outbound,
  z.ZodTypeDef,
  UpdateDatapointToolCalls
> = z.object({
  id: z.string().optional(),
  index: z.number().optional(),
  type: UpdateDatapointType$outboundSchema,
  function: z.lazy(() => UpdateDatapointFunction$outboundSchema),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateDatapointToolCalls$ {
  /** @deprecated use `UpdateDatapointToolCalls$inboundSchema` instead. */
  export const inboundSchema = UpdateDatapointToolCalls$inboundSchema;
  /** @deprecated use `UpdateDatapointToolCalls$outboundSchema` instead. */
  export const outboundSchema = UpdateDatapointToolCalls$outboundSchema;
  /** @deprecated use `UpdateDatapointToolCalls$Outbound` instead. */
  export type Outbound = UpdateDatapointToolCalls$Outbound;
}

export function updateDatapointToolCallsToJSON(
  updateDatapointToolCalls: UpdateDatapointToolCalls,
): string {
  return JSON.stringify(
    UpdateDatapointToolCalls$outboundSchema.parse(updateDatapointToolCalls),
  );
}

export function updateDatapointToolCallsFromJSON(
  jsonString: string,
): SafeParseResult<UpdateDatapointToolCalls, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateDatapointToolCalls$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateDatapointToolCalls' from JSON`,
  );
}

/** @internal */
export const UpdateDatapointMessages$inboundSchema: z.ZodType<
  UpdateDatapointMessages,
  z.ZodTypeDef,
  unknown
> = z.object({
  role: UpdateDatapointRole$inboundSchema,
  content: z.union([
    z.string(),
    z.array(z.union([
      z.lazy(() => UpdateDatapoint21$inboundSchema),
      z.lazy(() => UpdateDatapoint22$inboundSchema),
    ])),
  ]),
  tool_calls: z.array(z.lazy(() => UpdateDatapointToolCalls$inboundSchema))
    .optional(),
}).transform((v) => {
  return remap$(v, {
    "tool_calls": "toolCalls",
  });
});

/** @internal */
export type UpdateDatapointMessages$Outbound = {
  role: string;
  content:
    | string
    | Array<UpdateDatapoint21$Outbound | UpdateDatapoint22$Outbound>;
  tool_calls?: Array<UpdateDatapointToolCalls$Outbound> | undefined;
};

/** @internal */
export const UpdateDatapointMessages$outboundSchema: z.ZodType<
  UpdateDatapointMessages$Outbound,
  z.ZodTypeDef,
  UpdateDatapointMessages
> = z.object({
  role: UpdateDatapointRole$outboundSchema,
  content: z.union([
    z.string(),
    z.array(z.union([
      z.lazy(() => UpdateDatapoint21$outboundSchema),
      z.lazy(() => UpdateDatapoint22$outboundSchema),
    ])),
  ]),
  toolCalls: z.array(z.lazy(() => UpdateDatapointToolCalls$outboundSchema))
    .optional(),
}).transform((v) => {
  return remap$(v, {
    toolCalls: "tool_calls",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateDatapointMessages$ {
  /** @deprecated use `UpdateDatapointMessages$inboundSchema` instead. */
  export const inboundSchema = UpdateDatapointMessages$inboundSchema;
  /** @deprecated use `UpdateDatapointMessages$outboundSchema` instead. */
  export const outboundSchema = UpdateDatapointMessages$outboundSchema;
  /** @deprecated use `UpdateDatapointMessages$Outbound` instead. */
  export type Outbound = UpdateDatapointMessages$Outbound;
}

export function updateDatapointMessagesToJSON(
  updateDatapointMessages: UpdateDatapointMessages,
): string {
  return JSON.stringify(
    UpdateDatapointMessages$outboundSchema.parse(updateDatapointMessages),
  );
}

export function updateDatapointMessagesFromJSON(
  jsonString: string,
): SafeParseResult<UpdateDatapointMessages, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateDatapointMessages$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateDatapointMessages' from JSON`,
  );
}

/** @internal */
export const UpdateDatapointRequestBody$inboundSchema: z.ZodType<
  UpdateDatapointRequestBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  inputs: z.record(z.any()).optional(),
  messages: z.array(z.lazy(() => UpdateDatapointMessages$inboundSchema))
    .optional(),
  expected_output: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "expected_output": "expectedOutput",
  });
});

/** @internal */
export type UpdateDatapointRequestBody$Outbound = {
  inputs?: { [k: string]: any } | undefined;
  messages?: Array<UpdateDatapointMessages$Outbound> | undefined;
  expected_output?: string | undefined;
};

/** @internal */
export const UpdateDatapointRequestBody$outboundSchema: z.ZodType<
  UpdateDatapointRequestBody$Outbound,
  z.ZodTypeDef,
  UpdateDatapointRequestBody
> = z.object({
  inputs: z.record(z.any()).optional(),
  messages: z.array(z.lazy(() => UpdateDatapointMessages$outboundSchema))
    .optional(),
  expectedOutput: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    expectedOutput: "expected_output",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateDatapointRequestBody$ {
  /** @deprecated use `UpdateDatapointRequestBody$inboundSchema` instead. */
  export const inboundSchema = UpdateDatapointRequestBody$inboundSchema;
  /** @deprecated use `UpdateDatapointRequestBody$outboundSchema` instead. */
  export const outboundSchema = UpdateDatapointRequestBody$outboundSchema;
  /** @deprecated use `UpdateDatapointRequestBody$Outbound` instead. */
  export type Outbound = UpdateDatapointRequestBody$Outbound;
}

export function updateDatapointRequestBodyToJSON(
  updateDatapointRequestBody: UpdateDatapointRequestBody,
): string {
  return JSON.stringify(
    UpdateDatapointRequestBody$outboundSchema.parse(updateDatapointRequestBody),
  );
}

export function updateDatapointRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<UpdateDatapointRequestBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateDatapointRequestBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateDatapointRequestBody' from JSON`,
  );
}

/** @internal */
export const UpdateDatapointRequest$inboundSchema: z.ZodType<
  UpdateDatapointRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  dataset_id: z.string(),
  datapoint_id: z.string(),
  RequestBody: z.lazy(() => UpdateDatapointRequestBody$inboundSchema)
    .optional(),
}).transform((v) => {
  return remap$(v, {
    "dataset_id": "datasetId",
    "datapoint_id": "datapointId",
    "RequestBody": "requestBody",
  });
});

/** @internal */
export type UpdateDatapointRequest$Outbound = {
  dataset_id: string;
  datapoint_id: string;
  RequestBody?: UpdateDatapointRequestBody$Outbound | undefined;
};

/** @internal */
export const UpdateDatapointRequest$outboundSchema: z.ZodType<
  UpdateDatapointRequest$Outbound,
  z.ZodTypeDef,
  UpdateDatapointRequest
> = z.object({
  datasetId: z.string(),
  datapointId: z.string(),
  requestBody: z.lazy(() => UpdateDatapointRequestBody$outboundSchema)
    .optional(),
}).transform((v) => {
  return remap$(v, {
    datasetId: "dataset_id",
    datapointId: "datapoint_id",
    requestBody: "RequestBody",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateDatapointRequest$ {
  /** @deprecated use `UpdateDatapointRequest$inboundSchema` instead. */
  export const inboundSchema = UpdateDatapointRequest$inboundSchema;
  /** @deprecated use `UpdateDatapointRequest$outboundSchema` instead. */
  export const outboundSchema = UpdateDatapointRequest$outboundSchema;
  /** @deprecated use `UpdateDatapointRequest$Outbound` instead. */
  export type Outbound = UpdateDatapointRequest$Outbound;
}

export function updateDatapointRequestToJSON(
  updateDatapointRequest: UpdateDatapointRequest,
): string {
  return JSON.stringify(
    UpdateDatapointRequest$outboundSchema.parse(updateDatapointRequest),
  );
}

export function updateDatapointRequestFromJSON(
  jsonString: string,
): SafeParseResult<UpdateDatapointRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateDatapointRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateDatapointRequest' from JSON`,
  );
}

/** @internal */
export const UpdateDatapointDatasetsRole$inboundSchema: z.ZodNativeEnum<
  typeof UpdateDatapointDatasetsRole
> = z.nativeEnum(UpdateDatapointDatasetsRole);

/** @internal */
export const UpdateDatapointDatasetsRole$outboundSchema: z.ZodNativeEnum<
  typeof UpdateDatapointDatasetsRole
> = UpdateDatapointDatasetsRole$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateDatapointDatasetsRole$ {
  /** @deprecated use `UpdateDatapointDatasetsRole$inboundSchema` instead. */
  export const inboundSchema = UpdateDatapointDatasetsRole$inboundSchema;
  /** @deprecated use `UpdateDatapointDatasetsRole$outboundSchema` instead. */
  export const outboundSchema = UpdateDatapointDatasetsRole$outboundSchema;
}

/** @internal */
export const UpdateDatapoint2DatasetsResponse200Type$inboundSchema:
  z.ZodNativeEnum<typeof UpdateDatapoint2DatasetsResponse200Type> = z
    .nativeEnum(UpdateDatapoint2DatasetsResponse200Type);

/** @internal */
export const UpdateDatapoint2DatasetsResponse200Type$outboundSchema:
  z.ZodNativeEnum<typeof UpdateDatapoint2DatasetsResponse200Type> =
    UpdateDatapoint2DatasetsResponse200Type$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateDatapoint2DatasetsResponse200Type$ {
  /** @deprecated use `UpdateDatapoint2DatasetsResponse200Type$inboundSchema` instead. */
  export const inboundSchema =
    UpdateDatapoint2DatasetsResponse200Type$inboundSchema;
  /** @deprecated use `UpdateDatapoint2DatasetsResponse200Type$outboundSchema` instead. */
  export const outboundSchema =
    UpdateDatapoint2DatasetsResponse200Type$outboundSchema;
}

/** @internal */
export const UpdateDatapoint2DatasetsImageUrl$inboundSchema: z.ZodType<
  UpdateDatapoint2DatasetsImageUrl,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string().optional(),
  url: z.string(),
  detail: z.string().optional(),
});

/** @internal */
export type UpdateDatapoint2DatasetsImageUrl$Outbound = {
  id?: string | undefined;
  url: string;
  detail?: string | undefined;
};

/** @internal */
export const UpdateDatapoint2DatasetsImageUrl$outboundSchema: z.ZodType<
  UpdateDatapoint2DatasetsImageUrl$Outbound,
  z.ZodTypeDef,
  UpdateDatapoint2DatasetsImageUrl
> = z.object({
  id: z.string().optional(),
  url: z.string(),
  detail: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateDatapoint2DatasetsImageUrl$ {
  /** @deprecated use `UpdateDatapoint2DatasetsImageUrl$inboundSchema` instead. */
  export const inboundSchema = UpdateDatapoint2DatasetsImageUrl$inboundSchema;
  /** @deprecated use `UpdateDatapoint2DatasetsImageUrl$outboundSchema` instead. */
  export const outboundSchema = UpdateDatapoint2DatasetsImageUrl$outboundSchema;
  /** @deprecated use `UpdateDatapoint2DatasetsImageUrl$Outbound` instead. */
  export type Outbound = UpdateDatapoint2DatasetsImageUrl$Outbound;
}

export function updateDatapoint2DatasetsImageUrlToJSON(
  updateDatapoint2DatasetsImageUrl: UpdateDatapoint2DatasetsImageUrl,
): string {
  return JSON.stringify(
    UpdateDatapoint2DatasetsImageUrl$outboundSchema.parse(
      updateDatapoint2DatasetsImageUrl,
    ),
  );
}

export function updateDatapoint2DatasetsImageUrlFromJSON(
  jsonString: string,
): SafeParseResult<UpdateDatapoint2DatasetsImageUrl, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateDatapoint2DatasetsImageUrl$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateDatapoint2DatasetsImageUrl' from JSON`,
  );
}

/** @internal */
export const UpdateDatapoint2Datasets2$inboundSchema: z.ZodType<
  UpdateDatapoint2Datasets2,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: UpdateDatapoint2DatasetsResponse200Type$inboundSchema,
  image_url: z.lazy(() => UpdateDatapoint2DatasetsImageUrl$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "image_url": "imageUrl",
  });
});

/** @internal */
export type UpdateDatapoint2Datasets2$Outbound = {
  type: string;
  image_url: UpdateDatapoint2DatasetsImageUrl$Outbound;
};

/** @internal */
export const UpdateDatapoint2Datasets2$outboundSchema: z.ZodType<
  UpdateDatapoint2Datasets2$Outbound,
  z.ZodTypeDef,
  UpdateDatapoint2Datasets2
> = z.object({
  type: UpdateDatapoint2DatasetsResponse200Type$outboundSchema,
  imageUrl: z.lazy(() => UpdateDatapoint2DatasetsImageUrl$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    imageUrl: "image_url",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateDatapoint2Datasets2$ {
  /** @deprecated use `UpdateDatapoint2Datasets2$inboundSchema` instead. */
  export const inboundSchema = UpdateDatapoint2Datasets2$inboundSchema;
  /** @deprecated use `UpdateDatapoint2Datasets2$outboundSchema` instead. */
  export const outboundSchema = UpdateDatapoint2Datasets2$outboundSchema;
  /** @deprecated use `UpdateDatapoint2Datasets2$Outbound` instead. */
  export type Outbound = UpdateDatapoint2Datasets2$Outbound;
}

export function updateDatapoint2Datasets2ToJSON(
  updateDatapoint2Datasets2: UpdateDatapoint2Datasets2,
): string {
  return JSON.stringify(
    UpdateDatapoint2Datasets2$outboundSchema.parse(updateDatapoint2Datasets2),
  );
}

export function updateDatapoint2Datasets2FromJSON(
  jsonString: string,
): SafeParseResult<UpdateDatapoint2Datasets2, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateDatapoint2Datasets2$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateDatapoint2Datasets2' from JSON`,
  );
}

/** @internal */
export const UpdateDatapoint2DatasetsResponseType$inboundSchema:
  z.ZodNativeEnum<typeof UpdateDatapoint2DatasetsResponseType> = z.nativeEnum(
    UpdateDatapoint2DatasetsResponseType,
  );

/** @internal */
export const UpdateDatapoint2DatasetsResponseType$outboundSchema:
  z.ZodNativeEnum<typeof UpdateDatapoint2DatasetsResponseType> =
    UpdateDatapoint2DatasetsResponseType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateDatapoint2DatasetsResponseType$ {
  /** @deprecated use `UpdateDatapoint2DatasetsResponseType$inboundSchema` instead. */
  export const inboundSchema =
    UpdateDatapoint2DatasetsResponseType$inboundSchema;
  /** @deprecated use `UpdateDatapoint2DatasetsResponseType$outboundSchema` instead. */
  export const outboundSchema =
    UpdateDatapoint2DatasetsResponseType$outboundSchema;
}

/** @internal */
export const UpdateDatapoint2Datasets1$inboundSchema: z.ZodType<
  UpdateDatapoint2Datasets1,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: UpdateDatapoint2DatasetsResponseType$inboundSchema,
  text: z.string(),
});

/** @internal */
export type UpdateDatapoint2Datasets1$Outbound = {
  type: string;
  text: string;
};

/** @internal */
export const UpdateDatapoint2Datasets1$outboundSchema: z.ZodType<
  UpdateDatapoint2Datasets1$Outbound,
  z.ZodTypeDef,
  UpdateDatapoint2Datasets1
> = z.object({
  type: UpdateDatapoint2DatasetsResponseType$outboundSchema,
  text: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateDatapoint2Datasets1$ {
  /** @deprecated use `UpdateDatapoint2Datasets1$inboundSchema` instead. */
  export const inboundSchema = UpdateDatapoint2Datasets1$inboundSchema;
  /** @deprecated use `UpdateDatapoint2Datasets1$outboundSchema` instead. */
  export const outboundSchema = UpdateDatapoint2Datasets1$outboundSchema;
  /** @deprecated use `UpdateDatapoint2Datasets1$Outbound` instead. */
  export type Outbound = UpdateDatapoint2Datasets1$Outbound;
}

export function updateDatapoint2Datasets1ToJSON(
  updateDatapoint2Datasets1: UpdateDatapoint2Datasets1,
): string {
  return JSON.stringify(
    UpdateDatapoint2Datasets1$outboundSchema.parse(updateDatapoint2Datasets1),
  );
}

export function updateDatapoint2Datasets1FromJSON(
  jsonString: string,
): SafeParseResult<UpdateDatapoint2Datasets1, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateDatapoint2Datasets1$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateDatapoint2Datasets1' from JSON`,
  );
}

/** @internal */
export const UpdateDatapointContentDatasets2$inboundSchema: z.ZodType<
  UpdateDatapointContentDatasets2,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => UpdateDatapoint2Datasets1$inboundSchema),
  z.lazy(() => UpdateDatapoint2Datasets2$inboundSchema),
]);

/** @internal */
export type UpdateDatapointContentDatasets2$Outbound =
  | UpdateDatapoint2Datasets1$Outbound
  | UpdateDatapoint2Datasets2$Outbound;

/** @internal */
export const UpdateDatapointContentDatasets2$outboundSchema: z.ZodType<
  UpdateDatapointContentDatasets2$Outbound,
  z.ZodTypeDef,
  UpdateDatapointContentDatasets2
> = z.union([
  z.lazy(() => UpdateDatapoint2Datasets1$outboundSchema),
  z.lazy(() => UpdateDatapoint2Datasets2$outboundSchema),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateDatapointContentDatasets2$ {
  /** @deprecated use `UpdateDatapointContentDatasets2$inboundSchema` instead. */
  export const inboundSchema = UpdateDatapointContentDatasets2$inboundSchema;
  /** @deprecated use `UpdateDatapointContentDatasets2$outboundSchema` instead. */
  export const outboundSchema = UpdateDatapointContentDatasets2$outboundSchema;
  /** @deprecated use `UpdateDatapointContentDatasets2$Outbound` instead. */
  export type Outbound = UpdateDatapointContentDatasets2$Outbound;
}

export function updateDatapointContentDatasets2ToJSON(
  updateDatapointContentDatasets2: UpdateDatapointContentDatasets2,
): string {
  return JSON.stringify(
    UpdateDatapointContentDatasets2$outboundSchema.parse(
      updateDatapointContentDatasets2,
    ),
  );
}

export function updateDatapointContentDatasets2FromJSON(
  jsonString: string,
): SafeParseResult<UpdateDatapointContentDatasets2, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateDatapointContentDatasets2$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateDatapointContentDatasets2' from JSON`,
  );
}

/** @internal */
export const UpdateDatapointDatasetsContent$inboundSchema: z.ZodType<
  UpdateDatapointDatasetsContent,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.string(),
  z.array(z.union([
    z.lazy(() => UpdateDatapoint2Datasets1$inboundSchema),
    z.lazy(() => UpdateDatapoint2Datasets2$inboundSchema),
  ])),
]);

/** @internal */
export type UpdateDatapointDatasetsContent$Outbound =
  | string
  | Array<
    UpdateDatapoint2Datasets1$Outbound | UpdateDatapoint2Datasets2$Outbound
  >;

/** @internal */
export const UpdateDatapointDatasetsContent$outboundSchema: z.ZodType<
  UpdateDatapointDatasetsContent$Outbound,
  z.ZodTypeDef,
  UpdateDatapointDatasetsContent
> = z.union([
  z.string(),
  z.array(z.union([
    z.lazy(() => UpdateDatapoint2Datasets1$outboundSchema),
    z.lazy(() => UpdateDatapoint2Datasets2$outboundSchema),
  ])),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateDatapointDatasetsContent$ {
  /** @deprecated use `UpdateDatapointDatasetsContent$inboundSchema` instead. */
  export const inboundSchema = UpdateDatapointDatasetsContent$inboundSchema;
  /** @deprecated use `UpdateDatapointDatasetsContent$outboundSchema` instead. */
  export const outboundSchema = UpdateDatapointDatasetsContent$outboundSchema;
  /** @deprecated use `UpdateDatapointDatasetsContent$Outbound` instead. */
  export type Outbound = UpdateDatapointDatasetsContent$Outbound;
}

export function updateDatapointDatasetsContentToJSON(
  updateDatapointDatasetsContent: UpdateDatapointDatasetsContent,
): string {
  return JSON.stringify(
    UpdateDatapointDatasetsContent$outboundSchema.parse(
      updateDatapointDatasetsContent,
    ),
  );
}

export function updateDatapointDatasetsContentFromJSON(
  jsonString: string,
): SafeParseResult<UpdateDatapointDatasetsContent, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateDatapointDatasetsContent$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateDatapointDatasetsContent' from JSON`,
  );
}

/** @internal */
export const UpdateDatapointDatasetsType$inboundSchema: z.ZodNativeEnum<
  typeof UpdateDatapointDatasetsType
> = z.nativeEnum(UpdateDatapointDatasetsType);

/** @internal */
export const UpdateDatapointDatasetsType$outboundSchema: z.ZodNativeEnum<
  typeof UpdateDatapointDatasetsType
> = UpdateDatapointDatasetsType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateDatapointDatasetsType$ {
  /** @deprecated use `UpdateDatapointDatasetsType$inboundSchema` instead. */
  export const inboundSchema = UpdateDatapointDatasetsType$inboundSchema;
  /** @deprecated use `UpdateDatapointDatasetsType$outboundSchema` instead. */
  export const outboundSchema = UpdateDatapointDatasetsType$outboundSchema;
}

/** @internal */
export const UpdateDatapointDatasetsFunction$inboundSchema: z.ZodType<
  UpdateDatapointDatasetsFunction,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.string(),
  arguments: z.string(),
});

/** @internal */
export type UpdateDatapointDatasetsFunction$Outbound = {
  name: string;
  arguments: string;
};

/** @internal */
export const UpdateDatapointDatasetsFunction$outboundSchema: z.ZodType<
  UpdateDatapointDatasetsFunction$Outbound,
  z.ZodTypeDef,
  UpdateDatapointDatasetsFunction
> = z.object({
  name: z.string(),
  arguments: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateDatapointDatasetsFunction$ {
  /** @deprecated use `UpdateDatapointDatasetsFunction$inboundSchema` instead. */
  export const inboundSchema = UpdateDatapointDatasetsFunction$inboundSchema;
  /** @deprecated use `UpdateDatapointDatasetsFunction$outboundSchema` instead. */
  export const outboundSchema = UpdateDatapointDatasetsFunction$outboundSchema;
  /** @deprecated use `UpdateDatapointDatasetsFunction$Outbound` instead. */
  export type Outbound = UpdateDatapointDatasetsFunction$Outbound;
}

export function updateDatapointDatasetsFunctionToJSON(
  updateDatapointDatasetsFunction: UpdateDatapointDatasetsFunction,
): string {
  return JSON.stringify(
    UpdateDatapointDatasetsFunction$outboundSchema.parse(
      updateDatapointDatasetsFunction,
    ),
  );
}

export function updateDatapointDatasetsFunctionFromJSON(
  jsonString: string,
): SafeParseResult<UpdateDatapointDatasetsFunction, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateDatapointDatasetsFunction$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateDatapointDatasetsFunction' from JSON`,
  );
}

/** @internal */
export const UpdateDatapointDatasetsToolCalls$inboundSchema: z.ZodType<
  UpdateDatapointDatasetsToolCalls,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string().optional(),
  index: z.number().optional(),
  type: UpdateDatapointDatasetsType$inboundSchema,
  function: z.lazy(() => UpdateDatapointDatasetsFunction$inboundSchema),
});

/** @internal */
export type UpdateDatapointDatasetsToolCalls$Outbound = {
  id?: string | undefined;
  index?: number | undefined;
  type: string;
  function: UpdateDatapointDatasetsFunction$Outbound;
};

/** @internal */
export const UpdateDatapointDatasetsToolCalls$outboundSchema: z.ZodType<
  UpdateDatapointDatasetsToolCalls$Outbound,
  z.ZodTypeDef,
  UpdateDatapointDatasetsToolCalls
> = z.object({
  id: z.string().optional(),
  index: z.number().optional(),
  type: UpdateDatapointDatasetsType$outboundSchema,
  function: z.lazy(() => UpdateDatapointDatasetsFunction$outboundSchema),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateDatapointDatasetsToolCalls$ {
  /** @deprecated use `UpdateDatapointDatasetsToolCalls$inboundSchema` instead. */
  export const inboundSchema = UpdateDatapointDatasetsToolCalls$inboundSchema;
  /** @deprecated use `UpdateDatapointDatasetsToolCalls$outboundSchema` instead. */
  export const outboundSchema = UpdateDatapointDatasetsToolCalls$outboundSchema;
  /** @deprecated use `UpdateDatapointDatasetsToolCalls$Outbound` instead. */
  export type Outbound = UpdateDatapointDatasetsToolCalls$Outbound;
}

export function updateDatapointDatasetsToolCallsToJSON(
  updateDatapointDatasetsToolCalls: UpdateDatapointDatasetsToolCalls,
): string {
  return JSON.stringify(
    UpdateDatapointDatasetsToolCalls$outboundSchema.parse(
      updateDatapointDatasetsToolCalls,
    ),
  );
}

export function updateDatapointDatasetsToolCallsFromJSON(
  jsonString: string,
): SafeParseResult<UpdateDatapointDatasetsToolCalls, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateDatapointDatasetsToolCalls$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateDatapointDatasetsToolCalls' from JSON`,
  );
}

/** @internal */
export const UpdateDatapointDatasetsMessages$inboundSchema: z.ZodType<
  UpdateDatapointDatasetsMessages,
  z.ZodTypeDef,
  unknown
> = z.object({
  role: UpdateDatapointDatasetsRole$inboundSchema,
  content: z.union([
    z.string(),
    z.array(z.union([
      z.lazy(() => UpdateDatapoint2Datasets1$inboundSchema),
      z.lazy(() => UpdateDatapoint2Datasets2$inboundSchema),
    ])),
  ]),
  tool_calls: z.array(
    z.lazy(() => UpdateDatapointDatasetsToolCalls$inboundSchema),
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    "tool_calls": "toolCalls",
  });
});

/** @internal */
export type UpdateDatapointDatasetsMessages$Outbound = {
  role: string;
  content:
    | string
    | Array<
      UpdateDatapoint2Datasets1$Outbound | UpdateDatapoint2Datasets2$Outbound
    >;
  tool_calls?: Array<UpdateDatapointDatasetsToolCalls$Outbound> | undefined;
};

/** @internal */
export const UpdateDatapointDatasetsMessages$outboundSchema: z.ZodType<
  UpdateDatapointDatasetsMessages$Outbound,
  z.ZodTypeDef,
  UpdateDatapointDatasetsMessages
> = z.object({
  role: UpdateDatapointDatasetsRole$outboundSchema,
  content: z.union([
    z.string(),
    z.array(z.union([
      z.lazy(() => UpdateDatapoint2Datasets1$outboundSchema),
      z.lazy(() => UpdateDatapoint2Datasets2$outboundSchema),
    ])),
  ]),
  toolCalls: z.array(
    z.lazy(() => UpdateDatapointDatasetsToolCalls$outboundSchema),
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    toolCalls: "tool_calls",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateDatapointDatasetsMessages$ {
  /** @deprecated use `UpdateDatapointDatasetsMessages$inboundSchema` instead. */
  export const inboundSchema = UpdateDatapointDatasetsMessages$inboundSchema;
  /** @deprecated use `UpdateDatapointDatasetsMessages$outboundSchema` instead. */
  export const outboundSchema = UpdateDatapointDatasetsMessages$outboundSchema;
  /** @deprecated use `UpdateDatapointDatasetsMessages$Outbound` instead. */
  export type Outbound = UpdateDatapointDatasetsMessages$Outbound;
}

export function updateDatapointDatasetsMessagesToJSON(
  updateDatapointDatasetsMessages: UpdateDatapointDatasetsMessages,
): string {
  return JSON.stringify(
    UpdateDatapointDatasetsMessages$outboundSchema.parse(
      updateDatapointDatasetsMessages,
    ),
  );
}

export function updateDatapointDatasetsMessagesFromJSON(
  jsonString: string,
): SafeParseResult<UpdateDatapointDatasetsMessages, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateDatapointDatasetsMessages$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateDatapointDatasetsMessages' from JSON`,
  );
}

/** @internal */
export const UpdateDatapointResponseBody$inboundSchema: z.ZodType<
  UpdateDatapointResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  _id: z.string(),
  workspace_id: z.string(),
  inputs: z.record(z.any()).optional(),
  messages: z.array(z.lazy(() => UpdateDatapointDatasetsMessages$inboundSchema))
    .optional(),
  expected_output: z.string().optional(),
  dataset_id: z.string(),
  created_by_id: z.string().optional(),
  updated_by_id: z.string().optional(),
  created: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
  updated: z.string().datetime({ offset: true }).default(
    "2025-04-13T12:24:09.786Z",
  ).transform(v => new Date(v)),
}).transform((v) => {
  return remap$(v, {
    "_id": "id",
    "workspace_id": "workspaceId",
    "expected_output": "expectedOutput",
    "dataset_id": "datasetId",
    "created_by_id": "createdById",
    "updated_by_id": "updatedById",
  });
});

/** @internal */
export type UpdateDatapointResponseBody$Outbound = {
  _id: string;
  workspace_id: string;
  inputs?: { [k: string]: any } | undefined;
  messages?: Array<UpdateDatapointDatasetsMessages$Outbound> | undefined;
  expected_output?: string | undefined;
  dataset_id: string;
  created_by_id?: string | undefined;
  updated_by_id?: string | undefined;
  created?: string | undefined;
  updated: string;
};

/** @internal */
export const UpdateDatapointResponseBody$outboundSchema: z.ZodType<
  UpdateDatapointResponseBody$Outbound,
  z.ZodTypeDef,
  UpdateDatapointResponseBody
> = z.object({
  id: z.string(),
  workspaceId: z.string(),
  inputs: z.record(z.any()).optional(),
  messages: z.array(
    z.lazy(() => UpdateDatapointDatasetsMessages$outboundSchema),
  ).optional(),
  expectedOutput: z.string().optional(),
  datasetId: z.string(),
  createdById: z.string().optional(),
  updatedById: z.string().optional(),
  created: z.date().transform(v => v.toISOString()).optional(),
  updated: z.date().default(() => new Date("2025-04-13T12:24:09.786Z"))
    .transform(v => v.toISOString()),
}).transform((v) => {
  return remap$(v, {
    id: "_id",
    workspaceId: "workspace_id",
    expectedOutput: "expected_output",
    datasetId: "dataset_id",
    createdById: "created_by_id",
    updatedById: "updated_by_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateDatapointResponseBody$ {
  /** @deprecated use `UpdateDatapointResponseBody$inboundSchema` instead. */
  export const inboundSchema = UpdateDatapointResponseBody$inboundSchema;
  /** @deprecated use `UpdateDatapointResponseBody$outboundSchema` instead. */
  export const outboundSchema = UpdateDatapointResponseBody$outboundSchema;
  /** @deprecated use `UpdateDatapointResponseBody$Outbound` instead. */
  export type Outbound = UpdateDatapointResponseBody$Outbound;
}

export function updateDatapointResponseBodyToJSON(
  updateDatapointResponseBody: UpdateDatapointResponseBody,
): string {
  return JSON.stringify(
    UpdateDatapointResponseBody$outboundSchema.parse(
      updateDatapointResponseBody,
    ),
  );
}

export function updateDatapointResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<UpdateDatapointResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateDatapointResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateDatapointResponseBody' from JSON`,
  );
}
