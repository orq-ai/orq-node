/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * Tool message
 */
export const RoleToolMessage = {
  Tool: "tool",
} as const;
/**
 * Tool message
 */
export type RoleToolMessage = ClosedEnum<typeof RoleToolMessage>;

/**
 * User message
 */
export const RoleUserMessage = {
  User: "user",
} as const;
/**
 * User message
 */
export type RoleUserMessage = ClosedEnum<typeof RoleUserMessage>;

/**
 * Message role (user or tool for continuing executions)
 */
export type InvokeAgentRole = RoleUserMessage | RoleToolMessage;

export const InvokeAgentPublicMessagePartKind = {
  ToolResult: "tool_result",
} as const;
export type InvokeAgentPublicMessagePartKind = ClosedEnum<
  typeof InvokeAgentPublicMessagePartKind
>;

/**
 * Tool execution result part. Use this ONLY when providing results for a pending tool call from the agent. The tool_call_id must match the ID from the agent's tool call request.
 */
export type ToolResultPart = {
  kind: InvokeAgentPublicMessagePartKind;
  toolCallId: string;
  result?: any | undefined;
  metadata?: { [k: string]: any } | undefined;
};

export const PublicMessagePartKind = {
  File: "file",
} as const;
export type PublicMessagePartKind = ClosedEnum<typeof PublicMessagePartKind>;

/**
 * File in URI format. Check in the model's documentation for the supported mime types for the URI format
 */
export type FileInURIFormat = {
  /**
   * URL for the File content
   */
  uri: string;
  /**
   * Optional mimeType for the file
   */
  mimeType?: string | undefined;
  /**
   * Optional name for the file
   */
  name?: string | undefined;
};

/**
 * Binary in base64 format. Check in the model's documentation for the supported mime types for the binary format.
 */
export type BinaryFormat = {
  /**
   * base64 encoded content of the file
   */
  bytes: string;
  /**
   * Optional mimeType for the file
   */
  mimeType?: string | undefined;
  /**
   * Optional name for the file
   */
  name?: string | undefined;
};

export type PublicMessagePartFile = BinaryFormat | FileInURIFormat;

/**
 * File attachment part. Use this to send files (images, documents, etc.) to the agent for processing.
 */
export type FilePart = {
  kind: PublicMessagePartKind;
  file: BinaryFormat | FileInURIFormat;
  metadata?: { [k: string]: any } | undefined;
};

export const Kind = {
  Text: "text",
} as const;
export type Kind = ClosedEnum<typeof Kind>;

/**
 * Text content part. Use this to send text messages to the agent.
 */
export type TextPart = {
  kind: Kind;
  text: string;
};

/**
 * Message part that can be provided by users. Use "text" for regular messages, "file" for attachments, or "tool_result" when responding to tool call requests.
 */
export type PublicMessagePart = TextPart | FilePart | ToolResultPart;

export type Message = {
  /**
   * Optional A2A message ID in ULID format
   */
  messageId?: string | undefined;
  /**
   * Message role (user or tool for continuing executions)
   */
  role: RoleUserMessage | RoleToolMessage;
  /**
   * A2A message parts (text, file, or tool_result only)
   */
  parts: Array<TextPart | FilePart | ToolResultPart>;
};

/**
 * Information about the contact making the request. If the contact does not exist, it will be created automatically.
 */
export type Contact = {
  /**
   * Unique identifier for the contact
   */
  id: string;
  /**
   * Display name of the contact
   */
  displayName?: string | undefined;
  /**
   * Email address of the contact
   */
  email?: string | undefined;
  /**
   * A hash of key/value pairs containing any other data about the contact
   */
  metadata?: Array<{ [k: string]: any }> | undefined;
  /**
   * URL to the contact's avatar or logo
   */
  logoUrl?: string | undefined;
  /**
   * A list of tags associated with the contact
   */
  tags?: Array<string> | undefined;
};

/**
 * Thread information to group related requests
 */
export type InvokeAgentThread = {
  /**
   * Unique thread identifier to group related invocations.
   */
  id: string;
  /**
   * Optional tags to differentiate or categorize threads
   */
  tags?: Array<string> | undefined;
};

/**
 * Memory configuration for the agent execution. Used to associate memory stores with specific entities like users or sessions.
 */
export type Memory = {
  /**
   * An entity ID used to link memory stores to a specific user, session, or conversation. This ID is used to isolate and retrieve memories specific to the entity across agent executions.
   */
  entityId: string;
};

export type InvokeAgentRequestBody = {
  /**
   * Optional task ID to continue an existing agent execution. When provided, the agent will continue the conversation from the existing task state. The task must be in an inactive state to continue.
   */
  taskId?: string | undefined;
  message: Message;
  /**
   * Optional variables for template replacement in system prompt, instructions, and messages
   */
  variables?: { [k: string]: any } | undefined;
  /**
   * Information about the contact making the request. If the contact does not exist, it will be created automatically.
   */
  contact?: Contact | undefined;
  /**
   * Thread information to group related requests
   */
  thread?: InvokeAgentThread | undefined;
  /**
   * Memory configuration for the agent execution. Used to associate memory stores with specific entities like users or sessions.
   */
  memory?: Memory | undefined;
  /**
   * Optional metadata for the agent invocation as key-value pairs that will be included in traces
   */
  metadata?: { [k: string]: any } | undefined;
};

export type InvokeAgentRequest = {
  /**
   * The key or ID of the agent to invoke
   */
  key: string;
  requestBody?: InvokeAgentRequestBody | undefined;
};

/**
 * A2A entity type
 */
export const InvokeAgentKind = {
  Task: "task",
} as const;
/**
 * A2A entity type
 */
export type InvokeAgentKind = ClosedEnum<typeof InvokeAgentKind>;

/**
 * Current task state
 */
export const InvokeAgentState = {
  Submitted: "submitted",
  Working: "working",
  InputRequired: "input-required",
  Completed: "completed",
  Failed: "failed",
  Canceled: "canceled",
  Rejected: "rejected",
  AuthRequired: "auth-required",
  Unknown: "unknown",
} as const;
/**
 * Current task state
 */
export type InvokeAgentState = ClosedEnum<typeof InvokeAgentState>;

export const InvokeAgentAgentsKind = {
  Message: "message",
} as const;
export type InvokeAgentAgentsKind = ClosedEnum<typeof InvokeAgentAgentsKind>;

/**
 * Extended A2A message role
 */
export const InvokeAgentAgentsRole = {
  User: "user",
  Agent: "agent",
  Tool: "tool",
  System: "system",
} as const;
/**
 * Extended A2A message role
 */
export type InvokeAgentAgentsRole = ClosedEnum<typeof InvokeAgentAgentsRole>;

/**
 * Optional status message
 */
export type InvokeAgentMessage = {
  kind: InvokeAgentAgentsKind;
  messageId: string;
  /**
   * Extended A2A message role
   */
  role: InvokeAgentAgentsRole;
  parts: Array<any>;
};

/**
 * Task status information
 */
export type InvokeAgentStatus = {
  /**
   * Current task state
   */
  state: InvokeAgentState;
  /**
   * ISO timestamp of status update
   */
  timestamp?: string | undefined;
  /**
   * Optional status message
   */
  message?: InvokeAgentMessage | undefined;
};

/**
 * A2A Task response format
 */
export type InvokeAgentResponseBody = {
  /**
   * The ID of the created agent execution task
   */
  id: string;
  /**
   * The correlation ID for this execution
   */
  contextId: string;
  /**
   * A2A entity type
   */
  kind: InvokeAgentKind;
  /**
   * Task status information
   */
  status: InvokeAgentStatus;
  /**
   * Task metadata containing workspace_id and trace_id for feedback
   */
  metadata?: { [k: string]: any } | undefined;
};

/** @internal */
export const RoleToolMessage$inboundSchema: z.ZodNativeEnum<
  typeof RoleToolMessage
> = z.nativeEnum(RoleToolMessage);

/** @internal */
export const RoleToolMessage$outboundSchema: z.ZodNativeEnum<
  typeof RoleToolMessage
> = RoleToolMessage$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RoleToolMessage$ {
  /** @deprecated use `RoleToolMessage$inboundSchema` instead. */
  export const inboundSchema = RoleToolMessage$inboundSchema;
  /** @deprecated use `RoleToolMessage$outboundSchema` instead. */
  export const outboundSchema = RoleToolMessage$outboundSchema;
}

/** @internal */
export const RoleUserMessage$inboundSchema: z.ZodNativeEnum<
  typeof RoleUserMessage
> = z.nativeEnum(RoleUserMessage);

/** @internal */
export const RoleUserMessage$outboundSchema: z.ZodNativeEnum<
  typeof RoleUserMessage
> = RoleUserMessage$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RoleUserMessage$ {
  /** @deprecated use `RoleUserMessage$inboundSchema` instead. */
  export const inboundSchema = RoleUserMessage$inboundSchema;
  /** @deprecated use `RoleUserMessage$outboundSchema` instead. */
  export const outboundSchema = RoleUserMessage$outboundSchema;
}

/** @internal */
export const InvokeAgentRole$inboundSchema: z.ZodType<
  InvokeAgentRole,
  z.ZodTypeDef,
  unknown
> = z.union([RoleUserMessage$inboundSchema, RoleToolMessage$inboundSchema]);

/** @internal */
export type InvokeAgentRole$Outbound = string | string;

/** @internal */
export const InvokeAgentRole$outboundSchema: z.ZodType<
  InvokeAgentRole$Outbound,
  z.ZodTypeDef,
  InvokeAgentRole
> = z.union([RoleUserMessage$outboundSchema, RoleToolMessage$outboundSchema]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InvokeAgentRole$ {
  /** @deprecated use `InvokeAgentRole$inboundSchema` instead. */
  export const inboundSchema = InvokeAgentRole$inboundSchema;
  /** @deprecated use `InvokeAgentRole$outboundSchema` instead. */
  export const outboundSchema = InvokeAgentRole$outboundSchema;
  /** @deprecated use `InvokeAgentRole$Outbound` instead. */
  export type Outbound = InvokeAgentRole$Outbound;
}

export function invokeAgentRoleToJSON(
  invokeAgentRole: InvokeAgentRole,
): string {
  return JSON.stringify(InvokeAgentRole$outboundSchema.parse(invokeAgentRole));
}

export function invokeAgentRoleFromJSON(
  jsonString: string,
): SafeParseResult<InvokeAgentRole, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => InvokeAgentRole$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'InvokeAgentRole' from JSON`,
  );
}

/** @internal */
export const InvokeAgentPublicMessagePartKind$inboundSchema: z.ZodNativeEnum<
  typeof InvokeAgentPublicMessagePartKind
> = z.nativeEnum(InvokeAgentPublicMessagePartKind);

/** @internal */
export const InvokeAgentPublicMessagePartKind$outboundSchema: z.ZodNativeEnum<
  typeof InvokeAgentPublicMessagePartKind
> = InvokeAgentPublicMessagePartKind$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InvokeAgentPublicMessagePartKind$ {
  /** @deprecated use `InvokeAgentPublicMessagePartKind$inboundSchema` instead. */
  export const inboundSchema = InvokeAgentPublicMessagePartKind$inboundSchema;
  /** @deprecated use `InvokeAgentPublicMessagePartKind$outboundSchema` instead. */
  export const outboundSchema = InvokeAgentPublicMessagePartKind$outboundSchema;
}

/** @internal */
export const ToolResultPart$inboundSchema: z.ZodType<
  ToolResultPart,
  z.ZodTypeDef,
  unknown
> = z.object({
  kind: InvokeAgentPublicMessagePartKind$inboundSchema,
  tool_call_id: z.string(),
  result: z.any().optional(),
  metadata: z.record(z.any()).optional(),
}).transform((v) => {
  return remap$(v, {
    "tool_call_id": "toolCallId",
  });
});

/** @internal */
export type ToolResultPart$Outbound = {
  kind: string;
  tool_call_id: string;
  result?: any | undefined;
  metadata?: { [k: string]: any } | undefined;
};

/** @internal */
export const ToolResultPart$outboundSchema: z.ZodType<
  ToolResultPart$Outbound,
  z.ZodTypeDef,
  ToolResultPart
> = z.object({
  kind: InvokeAgentPublicMessagePartKind$outboundSchema,
  toolCallId: z.string(),
  result: z.any().optional(),
  metadata: z.record(z.any()).optional(),
}).transform((v) => {
  return remap$(v, {
    toolCallId: "tool_call_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ToolResultPart$ {
  /** @deprecated use `ToolResultPart$inboundSchema` instead. */
  export const inboundSchema = ToolResultPart$inboundSchema;
  /** @deprecated use `ToolResultPart$outboundSchema` instead. */
  export const outboundSchema = ToolResultPart$outboundSchema;
  /** @deprecated use `ToolResultPart$Outbound` instead. */
  export type Outbound = ToolResultPart$Outbound;
}

export function toolResultPartToJSON(toolResultPart: ToolResultPart): string {
  return JSON.stringify(ToolResultPart$outboundSchema.parse(toolResultPart));
}

export function toolResultPartFromJSON(
  jsonString: string,
): SafeParseResult<ToolResultPart, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ToolResultPart$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ToolResultPart' from JSON`,
  );
}

/** @internal */
export const PublicMessagePartKind$inboundSchema: z.ZodNativeEnum<
  typeof PublicMessagePartKind
> = z.nativeEnum(PublicMessagePartKind);

/** @internal */
export const PublicMessagePartKind$outboundSchema: z.ZodNativeEnum<
  typeof PublicMessagePartKind
> = PublicMessagePartKind$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PublicMessagePartKind$ {
  /** @deprecated use `PublicMessagePartKind$inboundSchema` instead. */
  export const inboundSchema = PublicMessagePartKind$inboundSchema;
  /** @deprecated use `PublicMessagePartKind$outboundSchema` instead. */
  export const outboundSchema = PublicMessagePartKind$outboundSchema;
}

/** @internal */
export const FileInURIFormat$inboundSchema: z.ZodType<
  FileInURIFormat,
  z.ZodTypeDef,
  unknown
> = z.object({
  uri: z.string(),
  mimeType: z.string().optional(),
  name: z.string().optional(),
});

/** @internal */
export type FileInURIFormat$Outbound = {
  uri: string;
  mimeType?: string | undefined;
  name?: string | undefined;
};

/** @internal */
export const FileInURIFormat$outboundSchema: z.ZodType<
  FileInURIFormat$Outbound,
  z.ZodTypeDef,
  FileInURIFormat
> = z.object({
  uri: z.string(),
  mimeType: z.string().optional(),
  name: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FileInURIFormat$ {
  /** @deprecated use `FileInURIFormat$inboundSchema` instead. */
  export const inboundSchema = FileInURIFormat$inboundSchema;
  /** @deprecated use `FileInURIFormat$outboundSchema` instead. */
  export const outboundSchema = FileInURIFormat$outboundSchema;
  /** @deprecated use `FileInURIFormat$Outbound` instead. */
  export type Outbound = FileInURIFormat$Outbound;
}

export function fileInURIFormatToJSON(
  fileInURIFormat: FileInURIFormat,
): string {
  return JSON.stringify(FileInURIFormat$outboundSchema.parse(fileInURIFormat));
}

export function fileInURIFormatFromJSON(
  jsonString: string,
): SafeParseResult<FileInURIFormat, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => FileInURIFormat$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'FileInURIFormat' from JSON`,
  );
}

/** @internal */
export const BinaryFormat$inboundSchema: z.ZodType<
  BinaryFormat,
  z.ZodTypeDef,
  unknown
> = z.object({
  bytes: z.string(),
  mimeType: z.string().optional(),
  name: z.string().optional(),
});

/** @internal */
export type BinaryFormat$Outbound = {
  bytes: string;
  mimeType?: string | undefined;
  name?: string | undefined;
};

/** @internal */
export const BinaryFormat$outboundSchema: z.ZodType<
  BinaryFormat$Outbound,
  z.ZodTypeDef,
  BinaryFormat
> = z.object({
  bytes: z.string(),
  mimeType: z.string().optional(),
  name: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace BinaryFormat$ {
  /** @deprecated use `BinaryFormat$inboundSchema` instead. */
  export const inboundSchema = BinaryFormat$inboundSchema;
  /** @deprecated use `BinaryFormat$outboundSchema` instead. */
  export const outboundSchema = BinaryFormat$outboundSchema;
  /** @deprecated use `BinaryFormat$Outbound` instead. */
  export type Outbound = BinaryFormat$Outbound;
}

export function binaryFormatToJSON(binaryFormat: BinaryFormat): string {
  return JSON.stringify(BinaryFormat$outboundSchema.parse(binaryFormat));
}

export function binaryFormatFromJSON(
  jsonString: string,
): SafeParseResult<BinaryFormat, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => BinaryFormat$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'BinaryFormat' from JSON`,
  );
}

/** @internal */
export const PublicMessagePartFile$inboundSchema: z.ZodType<
  PublicMessagePartFile,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => BinaryFormat$inboundSchema),
  z.lazy(() => FileInURIFormat$inboundSchema),
]);

/** @internal */
export type PublicMessagePartFile$Outbound =
  | BinaryFormat$Outbound
  | FileInURIFormat$Outbound;

/** @internal */
export const PublicMessagePartFile$outboundSchema: z.ZodType<
  PublicMessagePartFile$Outbound,
  z.ZodTypeDef,
  PublicMessagePartFile
> = z.union([
  z.lazy(() => BinaryFormat$outboundSchema),
  z.lazy(() => FileInURIFormat$outboundSchema),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PublicMessagePartFile$ {
  /** @deprecated use `PublicMessagePartFile$inboundSchema` instead. */
  export const inboundSchema = PublicMessagePartFile$inboundSchema;
  /** @deprecated use `PublicMessagePartFile$outboundSchema` instead. */
  export const outboundSchema = PublicMessagePartFile$outboundSchema;
  /** @deprecated use `PublicMessagePartFile$Outbound` instead. */
  export type Outbound = PublicMessagePartFile$Outbound;
}

export function publicMessagePartFileToJSON(
  publicMessagePartFile: PublicMessagePartFile,
): string {
  return JSON.stringify(
    PublicMessagePartFile$outboundSchema.parse(publicMessagePartFile),
  );
}

export function publicMessagePartFileFromJSON(
  jsonString: string,
): SafeParseResult<PublicMessagePartFile, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PublicMessagePartFile$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PublicMessagePartFile' from JSON`,
  );
}

/** @internal */
export const FilePart$inboundSchema: z.ZodType<
  FilePart,
  z.ZodTypeDef,
  unknown
> = z.object({
  kind: PublicMessagePartKind$inboundSchema,
  file: z.union([
    z.lazy(() => BinaryFormat$inboundSchema),
    z.lazy(() => FileInURIFormat$inboundSchema),
  ]),
  metadata: z.record(z.any()).optional(),
});

/** @internal */
export type FilePart$Outbound = {
  kind: string;
  file: BinaryFormat$Outbound | FileInURIFormat$Outbound;
  metadata?: { [k: string]: any } | undefined;
};

/** @internal */
export const FilePart$outboundSchema: z.ZodType<
  FilePart$Outbound,
  z.ZodTypeDef,
  FilePart
> = z.object({
  kind: PublicMessagePartKind$outboundSchema,
  file: z.union([
    z.lazy(() => BinaryFormat$outboundSchema),
    z.lazy(() => FileInURIFormat$outboundSchema),
  ]),
  metadata: z.record(z.any()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FilePart$ {
  /** @deprecated use `FilePart$inboundSchema` instead. */
  export const inboundSchema = FilePart$inboundSchema;
  /** @deprecated use `FilePart$outboundSchema` instead. */
  export const outboundSchema = FilePart$outboundSchema;
  /** @deprecated use `FilePart$Outbound` instead. */
  export type Outbound = FilePart$Outbound;
}

export function filePartToJSON(filePart: FilePart): string {
  return JSON.stringify(FilePart$outboundSchema.parse(filePart));
}

export function filePartFromJSON(
  jsonString: string,
): SafeParseResult<FilePart, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => FilePart$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'FilePart' from JSON`,
  );
}

/** @internal */
export const Kind$inboundSchema: z.ZodNativeEnum<typeof Kind> = z.nativeEnum(
  Kind,
);

/** @internal */
export const Kind$outboundSchema: z.ZodNativeEnum<typeof Kind> =
  Kind$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Kind$ {
  /** @deprecated use `Kind$inboundSchema` instead. */
  export const inboundSchema = Kind$inboundSchema;
  /** @deprecated use `Kind$outboundSchema` instead. */
  export const outboundSchema = Kind$outboundSchema;
}

/** @internal */
export const TextPart$inboundSchema: z.ZodType<
  TextPart,
  z.ZodTypeDef,
  unknown
> = z.object({
  kind: Kind$inboundSchema,
  text: z.string(),
});

/** @internal */
export type TextPart$Outbound = {
  kind: string;
  text: string;
};

/** @internal */
export const TextPart$outboundSchema: z.ZodType<
  TextPart$Outbound,
  z.ZodTypeDef,
  TextPart
> = z.object({
  kind: Kind$outboundSchema,
  text: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TextPart$ {
  /** @deprecated use `TextPart$inboundSchema` instead. */
  export const inboundSchema = TextPart$inboundSchema;
  /** @deprecated use `TextPart$outboundSchema` instead. */
  export const outboundSchema = TextPart$outboundSchema;
  /** @deprecated use `TextPart$Outbound` instead. */
  export type Outbound = TextPart$Outbound;
}

export function textPartToJSON(textPart: TextPart): string {
  return JSON.stringify(TextPart$outboundSchema.parse(textPart));
}

export function textPartFromJSON(
  jsonString: string,
): SafeParseResult<TextPart, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => TextPart$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TextPart' from JSON`,
  );
}

/** @internal */
export const PublicMessagePart$inboundSchema: z.ZodType<
  PublicMessagePart,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => TextPart$inboundSchema),
  z.lazy(() => FilePart$inboundSchema),
  z.lazy(() => ToolResultPart$inboundSchema),
]);

/** @internal */
export type PublicMessagePart$Outbound =
  | TextPart$Outbound
  | FilePart$Outbound
  | ToolResultPart$Outbound;

/** @internal */
export const PublicMessagePart$outboundSchema: z.ZodType<
  PublicMessagePart$Outbound,
  z.ZodTypeDef,
  PublicMessagePart
> = z.union([
  z.lazy(() => TextPart$outboundSchema),
  z.lazy(() => FilePart$outboundSchema),
  z.lazy(() => ToolResultPart$outboundSchema),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PublicMessagePart$ {
  /** @deprecated use `PublicMessagePart$inboundSchema` instead. */
  export const inboundSchema = PublicMessagePart$inboundSchema;
  /** @deprecated use `PublicMessagePart$outboundSchema` instead. */
  export const outboundSchema = PublicMessagePart$outboundSchema;
  /** @deprecated use `PublicMessagePart$Outbound` instead. */
  export type Outbound = PublicMessagePart$Outbound;
}

export function publicMessagePartToJSON(
  publicMessagePart: PublicMessagePart,
): string {
  return JSON.stringify(
    PublicMessagePart$outboundSchema.parse(publicMessagePart),
  );
}

export function publicMessagePartFromJSON(
  jsonString: string,
): SafeParseResult<PublicMessagePart, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PublicMessagePart$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PublicMessagePart' from JSON`,
  );
}

/** @internal */
export const Message$inboundSchema: z.ZodType<Message, z.ZodTypeDef, unknown> =
  z.object({
    messageId: z.string().optional(),
    role: z.union([
      RoleUserMessage$inboundSchema,
      RoleToolMessage$inboundSchema,
    ]),
    parts: z.array(
      z.union([
        z.lazy(() => TextPart$inboundSchema),
        z.lazy(() => FilePart$inboundSchema),
        z.lazy(() => ToolResultPart$inboundSchema),
      ]),
    ),
  });

/** @internal */
export type Message$Outbound = {
  messageId?: string | undefined;
  role: string | string;
  parts: Array<TextPart$Outbound | FilePart$Outbound | ToolResultPart$Outbound>;
};

/** @internal */
export const Message$outboundSchema: z.ZodType<
  Message$Outbound,
  z.ZodTypeDef,
  Message
> = z.object({
  messageId: z.string().optional(),
  role: z.union([
    RoleUserMessage$outboundSchema,
    RoleToolMessage$outboundSchema,
  ]),
  parts: z.array(
    z.union([
      z.lazy(() => TextPart$outboundSchema),
      z.lazy(() => FilePart$outboundSchema),
      z.lazy(() => ToolResultPart$outboundSchema),
    ]),
  ),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Message$ {
  /** @deprecated use `Message$inboundSchema` instead. */
  export const inboundSchema = Message$inboundSchema;
  /** @deprecated use `Message$outboundSchema` instead. */
  export const outboundSchema = Message$outboundSchema;
  /** @deprecated use `Message$Outbound` instead. */
  export type Outbound = Message$Outbound;
}

export function messageToJSON(message: Message): string {
  return JSON.stringify(Message$outboundSchema.parse(message));
}

export function messageFromJSON(
  jsonString: string,
): SafeParseResult<Message, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Message$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Message' from JSON`,
  );
}

/** @internal */
export const Contact$inboundSchema: z.ZodType<Contact, z.ZodTypeDef, unknown> =
  z.object({
    id: z.string(),
    display_name: z.string().optional(),
    email: z.string().optional(),
    metadata: z.array(z.record(z.any())).optional(),
    logo_url: z.string().optional(),
    tags: z.array(z.string()).optional(),
  }).transform((v) => {
    return remap$(v, {
      "display_name": "displayName",
      "logo_url": "logoUrl",
    });
  });

/** @internal */
export type Contact$Outbound = {
  id: string;
  display_name?: string | undefined;
  email?: string | undefined;
  metadata?: Array<{ [k: string]: any }> | undefined;
  logo_url?: string | undefined;
  tags?: Array<string> | undefined;
};

/** @internal */
export const Contact$outboundSchema: z.ZodType<
  Contact$Outbound,
  z.ZodTypeDef,
  Contact
> = z.object({
  id: z.string(),
  displayName: z.string().optional(),
  email: z.string().optional(),
  metadata: z.array(z.record(z.any())).optional(),
  logoUrl: z.string().optional(),
  tags: z.array(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    displayName: "display_name",
    logoUrl: "logo_url",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Contact$ {
  /** @deprecated use `Contact$inboundSchema` instead. */
  export const inboundSchema = Contact$inboundSchema;
  /** @deprecated use `Contact$outboundSchema` instead. */
  export const outboundSchema = Contact$outboundSchema;
  /** @deprecated use `Contact$Outbound` instead. */
  export type Outbound = Contact$Outbound;
}

export function contactToJSON(contact: Contact): string {
  return JSON.stringify(Contact$outboundSchema.parse(contact));
}

export function contactFromJSON(
  jsonString: string,
): SafeParseResult<Contact, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Contact$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Contact' from JSON`,
  );
}

/** @internal */
export const InvokeAgentThread$inboundSchema: z.ZodType<
  InvokeAgentThread,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  tags: z.array(z.string()).optional(),
});

/** @internal */
export type InvokeAgentThread$Outbound = {
  id: string;
  tags?: Array<string> | undefined;
};

/** @internal */
export const InvokeAgentThread$outboundSchema: z.ZodType<
  InvokeAgentThread$Outbound,
  z.ZodTypeDef,
  InvokeAgentThread
> = z.object({
  id: z.string(),
  tags: z.array(z.string()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InvokeAgentThread$ {
  /** @deprecated use `InvokeAgentThread$inboundSchema` instead. */
  export const inboundSchema = InvokeAgentThread$inboundSchema;
  /** @deprecated use `InvokeAgentThread$outboundSchema` instead. */
  export const outboundSchema = InvokeAgentThread$outboundSchema;
  /** @deprecated use `InvokeAgentThread$Outbound` instead. */
  export type Outbound = InvokeAgentThread$Outbound;
}

export function invokeAgentThreadToJSON(
  invokeAgentThread: InvokeAgentThread,
): string {
  return JSON.stringify(
    InvokeAgentThread$outboundSchema.parse(invokeAgentThread),
  );
}

export function invokeAgentThreadFromJSON(
  jsonString: string,
): SafeParseResult<InvokeAgentThread, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => InvokeAgentThread$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'InvokeAgentThread' from JSON`,
  );
}

/** @internal */
export const Memory$inboundSchema: z.ZodType<Memory, z.ZodTypeDef, unknown> = z
  .object({
    entity_id: z.string(),
  }).transform((v) => {
    return remap$(v, {
      "entity_id": "entityId",
    });
  });

/** @internal */
export type Memory$Outbound = {
  entity_id: string;
};

/** @internal */
export const Memory$outboundSchema: z.ZodType<
  Memory$Outbound,
  z.ZodTypeDef,
  Memory
> = z.object({
  entityId: z.string(),
}).transform((v) => {
  return remap$(v, {
    entityId: "entity_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Memory$ {
  /** @deprecated use `Memory$inboundSchema` instead. */
  export const inboundSchema = Memory$inboundSchema;
  /** @deprecated use `Memory$outboundSchema` instead. */
  export const outboundSchema = Memory$outboundSchema;
  /** @deprecated use `Memory$Outbound` instead. */
  export type Outbound = Memory$Outbound;
}

export function memoryToJSON(memory: Memory): string {
  return JSON.stringify(Memory$outboundSchema.parse(memory));
}

export function memoryFromJSON(
  jsonString: string,
): SafeParseResult<Memory, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Memory$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Memory' from JSON`,
  );
}

/** @internal */
export const InvokeAgentRequestBody$inboundSchema: z.ZodType<
  InvokeAgentRequestBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  task_id: z.string().optional(),
  message: z.lazy(() => Message$inboundSchema),
  variables: z.record(z.any()).optional(),
  contact: z.lazy(() => Contact$inboundSchema).optional(),
  thread: z.lazy(() => InvokeAgentThread$inboundSchema).optional(),
  memory: z.lazy(() => Memory$inboundSchema).optional(),
  metadata: z.record(z.any()).optional(),
}).transform((v) => {
  return remap$(v, {
    "task_id": "taskId",
  });
});

/** @internal */
export type InvokeAgentRequestBody$Outbound = {
  task_id?: string | undefined;
  message: Message$Outbound;
  variables?: { [k: string]: any } | undefined;
  contact?: Contact$Outbound | undefined;
  thread?: InvokeAgentThread$Outbound | undefined;
  memory?: Memory$Outbound | undefined;
  metadata?: { [k: string]: any } | undefined;
};

/** @internal */
export const InvokeAgentRequestBody$outboundSchema: z.ZodType<
  InvokeAgentRequestBody$Outbound,
  z.ZodTypeDef,
  InvokeAgentRequestBody
> = z.object({
  taskId: z.string().optional(),
  message: z.lazy(() => Message$outboundSchema),
  variables: z.record(z.any()).optional(),
  contact: z.lazy(() => Contact$outboundSchema).optional(),
  thread: z.lazy(() => InvokeAgentThread$outboundSchema).optional(),
  memory: z.lazy(() => Memory$outboundSchema).optional(),
  metadata: z.record(z.any()).optional(),
}).transform((v) => {
  return remap$(v, {
    taskId: "task_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InvokeAgentRequestBody$ {
  /** @deprecated use `InvokeAgentRequestBody$inboundSchema` instead. */
  export const inboundSchema = InvokeAgentRequestBody$inboundSchema;
  /** @deprecated use `InvokeAgentRequestBody$outboundSchema` instead. */
  export const outboundSchema = InvokeAgentRequestBody$outboundSchema;
  /** @deprecated use `InvokeAgentRequestBody$Outbound` instead. */
  export type Outbound = InvokeAgentRequestBody$Outbound;
}

export function invokeAgentRequestBodyToJSON(
  invokeAgentRequestBody: InvokeAgentRequestBody,
): string {
  return JSON.stringify(
    InvokeAgentRequestBody$outboundSchema.parse(invokeAgentRequestBody),
  );
}

export function invokeAgentRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<InvokeAgentRequestBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => InvokeAgentRequestBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'InvokeAgentRequestBody' from JSON`,
  );
}

/** @internal */
export const InvokeAgentRequest$inboundSchema: z.ZodType<
  InvokeAgentRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  key: z.string(),
  RequestBody: z.lazy(() => InvokeAgentRequestBody$inboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    "RequestBody": "requestBody",
  });
});

/** @internal */
export type InvokeAgentRequest$Outbound = {
  key: string;
  RequestBody?: InvokeAgentRequestBody$Outbound | undefined;
};

/** @internal */
export const InvokeAgentRequest$outboundSchema: z.ZodType<
  InvokeAgentRequest$Outbound,
  z.ZodTypeDef,
  InvokeAgentRequest
> = z.object({
  key: z.string(),
  requestBody: z.lazy(() => InvokeAgentRequestBody$outboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    requestBody: "RequestBody",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InvokeAgentRequest$ {
  /** @deprecated use `InvokeAgentRequest$inboundSchema` instead. */
  export const inboundSchema = InvokeAgentRequest$inboundSchema;
  /** @deprecated use `InvokeAgentRequest$outboundSchema` instead. */
  export const outboundSchema = InvokeAgentRequest$outboundSchema;
  /** @deprecated use `InvokeAgentRequest$Outbound` instead. */
  export type Outbound = InvokeAgentRequest$Outbound;
}

export function invokeAgentRequestToJSON(
  invokeAgentRequest: InvokeAgentRequest,
): string {
  return JSON.stringify(
    InvokeAgentRequest$outboundSchema.parse(invokeAgentRequest),
  );
}

export function invokeAgentRequestFromJSON(
  jsonString: string,
): SafeParseResult<InvokeAgentRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => InvokeAgentRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'InvokeAgentRequest' from JSON`,
  );
}

/** @internal */
export const InvokeAgentKind$inboundSchema: z.ZodNativeEnum<
  typeof InvokeAgentKind
> = z.nativeEnum(InvokeAgentKind);

/** @internal */
export const InvokeAgentKind$outboundSchema: z.ZodNativeEnum<
  typeof InvokeAgentKind
> = InvokeAgentKind$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InvokeAgentKind$ {
  /** @deprecated use `InvokeAgentKind$inboundSchema` instead. */
  export const inboundSchema = InvokeAgentKind$inboundSchema;
  /** @deprecated use `InvokeAgentKind$outboundSchema` instead. */
  export const outboundSchema = InvokeAgentKind$outboundSchema;
}

/** @internal */
export const InvokeAgentState$inboundSchema: z.ZodNativeEnum<
  typeof InvokeAgentState
> = z.nativeEnum(InvokeAgentState);

/** @internal */
export const InvokeAgentState$outboundSchema: z.ZodNativeEnum<
  typeof InvokeAgentState
> = InvokeAgentState$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InvokeAgentState$ {
  /** @deprecated use `InvokeAgentState$inboundSchema` instead. */
  export const inboundSchema = InvokeAgentState$inboundSchema;
  /** @deprecated use `InvokeAgentState$outboundSchema` instead. */
  export const outboundSchema = InvokeAgentState$outboundSchema;
}

/** @internal */
export const InvokeAgentAgentsKind$inboundSchema: z.ZodNativeEnum<
  typeof InvokeAgentAgentsKind
> = z.nativeEnum(InvokeAgentAgentsKind);

/** @internal */
export const InvokeAgentAgentsKind$outboundSchema: z.ZodNativeEnum<
  typeof InvokeAgentAgentsKind
> = InvokeAgentAgentsKind$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InvokeAgentAgentsKind$ {
  /** @deprecated use `InvokeAgentAgentsKind$inboundSchema` instead. */
  export const inboundSchema = InvokeAgentAgentsKind$inboundSchema;
  /** @deprecated use `InvokeAgentAgentsKind$outboundSchema` instead. */
  export const outboundSchema = InvokeAgentAgentsKind$outboundSchema;
}

/** @internal */
export const InvokeAgentAgentsRole$inboundSchema: z.ZodNativeEnum<
  typeof InvokeAgentAgentsRole
> = z.nativeEnum(InvokeAgentAgentsRole);

/** @internal */
export const InvokeAgentAgentsRole$outboundSchema: z.ZodNativeEnum<
  typeof InvokeAgentAgentsRole
> = InvokeAgentAgentsRole$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InvokeAgentAgentsRole$ {
  /** @deprecated use `InvokeAgentAgentsRole$inboundSchema` instead. */
  export const inboundSchema = InvokeAgentAgentsRole$inboundSchema;
  /** @deprecated use `InvokeAgentAgentsRole$outboundSchema` instead. */
  export const outboundSchema = InvokeAgentAgentsRole$outboundSchema;
}

/** @internal */
export const InvokeAgentMessage$inboundSchema: z.ZodType<
  InvokeAgentMessage,
  z.ZodTypeDef,
  unknown
> = z.object({
  kind: InvokeAgentAgentsKind$inboundSchema,
  messageId: z.string(),
  role: InvokeAgentAgentsRole$inboundSchema,
  parts: z.array(z.any()),
});

/** @internal */
export type InvokeAgentMessage$Outbound = {
  kind: string;
  messageId: string;
  role: string;
  parts: Array<any>;
};

/** @internal */
export const InvokeAgentMessage$outboundSchema: z.ZodType<
  InvokeAgentMessage$Outbound,
  z.ZodTypeDef,
  InvokeAgentMessage
> = z.object({
  kind: InvokeAgentAgentsKind$outboundSchema,
  messageId: z.string(),
  role: InvokeAgentAgentsRole$outboundSchema,
  parts: z.array(z.any()),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InvokeAgentMessage$ {
  /** @deprecated use `InvokeAgentMessage$inboundSchema` instead. */
  export const inboundSchema = InvokeAgentMessage$inboundSchema;
  /** @deprecated use `InvokeAgentMessage$outboundSchema` instead. */
  export const outboundSchema = InvokeAgentMessage$outboundSchema;
  /** @deprecated use `InvokeAgentMessage$Outbound` instead. */
  export type Outbound = InvokeAgentMessage$Outbound;
}

export function invokeAgentMessageToJSON(
  invokeAgentMessage: InvokeAgentMessage,
): string {
  return JSON.stringify(
    InvokeAgentMessage$outboundSchema.parse(invokeAgentMessage),
  );
}

export function invokeAgentMessageFromJSON(
  jsonString: string,
): SafeParseResult<InvokeAgentMessage, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => InvokeAgentMessage$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'InvokeAgentMessage' from JSON`,
  );
}

/** @internal */
export const InvokeAgentStatus$inboundSchema: z.ZodType<
  InvokeAgentStatus,
  z.ZodTypeDef,
  unknown
> = z.object({
  state: InvokeAgentState$inboundSchema,
  timestamp: z.string().optional(),
  message: z.lazy(() => InvokeAgentMessage$inboundSchema).optional(),
});

/** @internal */
export type InvokeAgentStatus$Outbound = {
  state: string;
  timestamp?: string | undefined;
  message?: InvokeAgentMessage$Outbound | undefined;
};

/** @internal */
export const InvokeAgentStatus$outboundSchema: z.ZodType<
  InvokeAgentStatus$Outbound,
  z.ZodTypeDef,
  InvokeAgentStatus
> = z.object({
  state: InvokeAgentState$outboundSchema,
  timestamp: z.string().optional(),
  message: z.lazy(() => InvokeAgentMessage$outboundSchema).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InvokeAgentStatus$ {
  /** @deprecated use `InvokeAgentStatus$inboundSchema` instead. */
  export const inboundSchema = InvokeAgentStatus$inboundSchema;
  /** @deprecated use `InvokeAgentStatus$outboundSchema` instead. */
  export const outboundSchema = InvokeAgentStatus$outboundSchema;
  /** @deprecated use `InvokeAgentStatus$Outbound` instead. */
  export type Outbound = InvokeAgentStatus$Outbound;
}

export function invokeAgentStatusToJSON(
  invokeAgentStatus: InvokeAgentStatus,
): string {
  return JSON.stringify(
    InvokeAgentStatus$outboundSchema.parse(invokeAgentStatus),
  );
}

export function invokeAgentStatusFromJSON(
  jsonString: string,
): SafeParseResult<InvokeAgentStatus, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => InvokeAgentStatus$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'InvokeAgentStatus' from JSON`,
  );
}

/** @internal */
export const InvokeAgentResponseBody$inboundSchema: z.ZodType<
  InvokeAgentResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  contextId: z.string(),
  kind: InvokeAgentKind$inboundSchema,
  status: z.lazy(() => InvokeAgentStatus$inboundSchema),
  metadata: z.record(z.any()).optional(),
});

/** @internal */
export type InvokeAgentResponseBody$Outbound = {
  id: string;
  contextId: string;
  kind: string;
  status: InvokeAgentStatus$Outbound;
  metadata?: { [k: string]: any } | undefined;
};

/** @internal */
export const InvokeAgentResponseBody$outboundSchema: z.ZodType<
  InvokeAgentResponseBody$Outbound,
  z.ZodTypeDef,
  InvokeAgentResponseBody
> = z.object({
  id: z.string(),
  contextId: z.string(),
  kind: InvokeAgentKind$outboundSchema,
  status: z.lazy(() => InvokeAgentStatus$outboundSchema),
  metadata: z.record(z.any()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InvokeAgentResponseBody$ {
  /** @deprecated use `InvokeAgentResponseBody$inboundSchema` instead. */
  export const inboundSchema = InvokeAgentResponseBody$inboundSchema;
  /** @deprecated use `InvokeAgentResponseBody$outboundSchema` instead. */
  export const outboundSchema = InvokeAgentResponseBody$outboundSchema;
  /** @deprecated use `InvokeAgentResponseBody$Outbound` instead. */
  export type Outbound = InvokeAgentResponseBody$Outbound;
}

export function invokeAgentResponseBodyToJSON(
  invokeAgentResponseBody: InvokeAgentResponseBody,
): string {
  return JSON.stringify(
    InvokeAgentResponseBody$outboundSchema.parse(invokeAgentResponseBody),
  );
}

export function invokeAgentResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<InvokeAgentResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => InvokeAgentResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'InvokeAgentResponseBody' from JSON`,
  );
}
