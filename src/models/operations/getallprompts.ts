/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * List sorting preference.
 */
export const GetAllPromptsQueryParamSort = {
  Asc: "asc",
  Desc: "desc",
} as const;
/**
 * List sorting preference.
 */
export type GetAllPromptsQueryParamSort = ClosedEnum<
  typeof GetAllPromptsQueryParamSort
>;

export type GetAllPromptsRequest = {
  /**
   * List sorting preference.
   */
  sort?: GetAllPromptsQueryParamSort | undefined;
  /**
   * A limit on the number of objects to be returned. Limit can range between 1 and 50, and the default is 10
   */
  limit?: number | undefined;
  /**
   * A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 20 objects, ending with `01JJ1HDHN79XAS7A01WB3HYSDB`, your subsequent call can include `after=01JJ1HDHN79XAS7A01WB3HYSDB` in order to fetch the next page of the list.
   */
  startingAfter?: string | undefined;
  /**
   * A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 20 objects, starting with `01JJ1HDHN79XAS7A01WB3HYSDB`, your subsequent call can include `before=01JJ1HDHN79XAS7A01WB3HYSDB` in order to fetch the previous page of the list.
   */
  endingBefore?: string | undefined;
};

export const GetAllPromptsObject = {
  List: "list",
} as const;
export type GetAllPromptsObject = ClosedEnum<typeof GetAllPromptsObject>;

export const GetAllPromptsType = {
  Prompt: "prompt",
} as const;
export type GetAllPromptsType = ClosedEnum<typeof GetAllPromptsType>;

/**
 * The type of the model
 */
export const GetAllPromptsModelType = {
  Chat: "chat",
  Completion: "completion",
  Embedding: "embedding",
  Vision: "vision",
  Image: "image",
  Tts: "tts",
  Stt: "stt",
  Rerank: "rerank",
  Moderations: "moderations",
} as const;
/**
 * The type of the model
 */
export type GetAllPromptsModelType = ClosedEnum<typeof GetAllPromptsModelType>;

/**
 * Only supported on `image` models.
 */
export const GetAllPromptsFormat = {
  Url: "url",
  B64Json: "b64_json",
  Text: "text",
  JsonObject: "json_object",
} as const;
/**
 * Only supported on `image` models.
 */
export type GetAllPromptsFormat = ClosedEnum<typeof GetAllPromptsFormat>;

/**
 * Only supported on `image` models.
 */
export const GetAllPromptsQuality = {
  Standard: "standard",
  Hd: "hd",
} as const;
/**
 * Only supported on `image` models.
 */
export type GetAllPromptsQuality = ClosedEnum<typeof GetAllPromptsQuality>;

export const GetAllPromptsResponseFormatPromptsType = {
  JsonObject: "json_object",
} as const;
export type GetAllPromptsResponseFormatPromptsType = ClosedEnum<
  typeof GetAllPromptsResponseFormatPromptsType
>;

export type GetAllPromptsResponseFormat2 = {
  type: GetAllPromptsResponseFormatPromptsType;
};

export const GetAllPromptsResponseFormatType = {
  JsonSchema: "json_schema",
} as const;
export type GetAllPromptsResponseFormatType = ClosedEnum<
  typeof GetAllPromptsResponseFormatType
>;

export type GetAllPromptsResponseFormatJsonSchema = {
  name: string;
  strict: boolean;
  schema: { [k: string]: any };
};

export type GetAllPromptsResponseFormat1 = {
  type: GetAllPromptsResponseFormatType;
  jsonSchema: GetAllPromptsResponseFormatJsonSchema;
};

/**
 * An object specifying the format that the model must output.
 *
 * @remarks
 *
 *  Setting to `{ "type": "json_schema", "json_schema": {...} }` enables Structured Outputs which ensures the model will match your supplied JSON schema
 *
 *  Setting to `{ "type": "json_object" }` enables JSON mode, which ensures the message the model generates is valid JSON.
 *
 * Important: when using JSON mode, you must also instruct the model to produce JSON yourself via a system or user message. Without this, the model may generate an unending stream of whitespace until the generation reaches the token limit, resulting in a long-running and seemingly "stuck" request. Also note that the message content may be partially cut off if finish_reason="length", which indicates the generation exceeded max_tokens or the conversation exceeded the max context length.
 */
export type GetAllPromptsResponseFormat =
  | GetAllPromptsResponseFormat2
  | GetAllPromptsResponseFormat1;

/**
 * The version of photoReal to use. Must be v1 or v2. Only available for `leonardoai` provider
 */
export const GetAllPromptsPhotoRealVersion = {
  V1: "v1",
  V2: "v2",
} as const;
/**
 * The version of photoReal to use. Must be v1 or v2. Only available for `leonardoai` provider
 */
export type GetAllPromptsPhotoRealVersion = ClosedEnum<
  typeof GetAllPromptsPhotoRealVersion
>;

/**
 * The format to return the embeddings
 */
export const GetAllPromptsEncodingFormat = {
  Float: "float",
  Base64: "base64",
} as const;
/**
 * The format to return the embeddings
 */
export type GetAllPromptsEncodingFormat = ClosedEnum<
  typeof GetAllPromptsEncodingFormat
>;

/**
 * Constrains effort on reasoning for reasoning models. Reducing reasoning effort can result in faster responses and fewer tokens used on reasoning in a response.
 */
export const GetAllPromptsReasoningEffort = {
  Low: "low",
  Medium: "medium",
  High: "high",
} as const;
/**
 * Constrains effort on reasoning for reasoning models. Reducing reasoning effort can result in faster responses and fewer tokens used on reasoning in a response.
 */
export type GetAllPromptsReasoningEffort = ClosedEnum<
  typeof GetAllPromptsReasoningEffort
>;

/**
 * Model Parameters: Not all parameters apply to every model
 */
export type GetAllPromptsModelParameters = {
  /**
   * Only supported on `chat` and `completion` models.
   */
  temperature?: number | undefined;
  /**
   * Only supported on `chat` and `completion` models.
   */
  maxTokens?: number | undefined;
  /**
   * Only supported on `chat` and `completion` models.
   */
  topK?: number | undefined;
  /**
   * Only supported on `chat` and `completion` models.
   */
  topP?: number | undefined;
  /**
   * Only supported on `chat` and `completion` models.
   */
  frequencyPenalty?: number | undefined;
  /**
   * Only supported on `chat` and `completion` models.
   */
  presencePenalty?: number | undefined;
  /**
   * Only supported on `image` models.
   */
  numImages?: number | undefined;
  /**
   * Best effort deterministic seed for the model. Currently only OpenAI models support these
   */
  seed?: number | undefined;
  /**
   * Only supported on `image` models.
   */
  format?: GetAllPromptsFormat | undefined;
  /**
   * Only supported on `image` models.
   */
  dimensions?: string | undefined;
  /**
   * Only supported on `image` models.
   */
  quality?: GetAllPromptsQuality | undefined;
  /**
   * Only supported on `image` models.
   */
  style?: string | undefined;
  /**
   * An object specifying the format that the model must output.
   *
   * @remarks
   *
   *  Setting to `{ "type": "json_schema", "json_schema": {...} }` enables Structured Outputs which ensures the model will match your supplied JSON schema
   *
   *  Setting to `{ "type": "json_object" }` enables JSON mode, which ensures the message the model generates is valid JSON.
   *
   * Important: when using JSON mode, you must also instruct the model to produce JSON yourself via a system or user message. Without this, the model may generate an unending stream of whitespace until the generation reaches the token limit, resulting in a long-running and seemingly "stuck" request. Also note that the message content may be partially cut off if finish_reason="length", which indicates the generation exceeded max_tokens or the conversation exceeded the max context length.
   */
  responseFormat?:
    | GetAllPromptsResponseFormat2
    | GetAllPromptsResponseFormat1
    | null
    | undefined;
  /**
   * The version of photoReal to use. Must be v1 or v2. Only available for `leonardoai` provider
   */
  photoRealVersion?: GetAllPromptsPhotoRealVersion | undefined;
  /**
   * The format to return the embeddings
   */
  encodingFormat?: GetAllPromptsEncodingFormat | undefined;
  /**
   * Constrains effort on reasoning for reasoning models. Reducing reasoning effort can result in faster responses and fewer tokens used on reasoning in a response.
   */
  reasoningEffort?: GetAllPromptsReasoningEffort | undefined;
  /**
   * Gives the model enhanced reasoning capabilities for complex tasks. A value of 0 disables thinking. The minimum budget tokens for thinking are 1024. The Budget Tokens should never exceed the Max Tokens parameter. Only supported by `Anthropic`
   */
  budgetTokens?: number | undefined;
};

export const GetAllPromptsProvider = {
  Cohere: "cohere",
  Openai: "openai",
  Anthropic: "anthropic",
  Huggingface: "huggingface",
  Replicate: "replicate",
  Google: "google",
  GoogleAi: "google-ai",
  Azure: "azure",
  Aws: "aws",
  Anyscale: "anyscale",
  Perplexity: "perplexity",
  Groq: "groq",
  Fal: "fal",
  Leonardoai: "leonardoai",
  Nvidia: "nvidia",
  Jina: "jina",
  Togetherai: "togetherai",
  Elevenlabs: "elevenlabs",
} as const;
export type GetAllPromptsProvider = ClosedEnum<typeof GetAllPromptsProvider>;

/**
 * The role of the prompt message
 */
export const GetAllPromptsRole = {
  System: "system",
  Assistant: "assistant",
  User: "user",
  Exception: "exception",
  Tool: "tool",
  Prompt: "prompt",
  Correction: "correction",
  ExpectedOutput: "expected_output",
} as const;
/**
 * The role of the prompt message
 */
export type GetAllPromptsRole = ClosedEnum<typeof GetAllPromptsRole>;

export const GetAllPrompts2PromptsType = {
  ImageUrl: "image_url",
} as const;
export type GetAllPrompts2PromptsType = ClosedEnum<
  typeof GetAllPrompts2PromptsType
>;

export type GetAllPrompts2ImageUrl = {
  /**
   * The orq.ai id of the image
   */
  id?: string | undefined;
  /**
   * Either a URL of the image or the base64 encoded data URI.
   */
  url: string;
  /**
   * Specifies the detail level of the image. Currently only supported with OpenAI models
   */
  detail?: string | undefined;
};

/**
 * The image part of the prompt message. Only supported with vision models.
 */
export type GetAllPrompts22 = {
  type: GetAllPrompts2PromptsType;
  imageUrl: GetAllPrompts2ImageUrl;
};

export const GetAllPrompts2Type = {
  Text: "text",
} as const;
export type GetAllPrompts2Type = ClosedEnum<typeof GetAllPrompts2Type>;

/**
 * Text content part of a prompt message
 */
export type GetAllPrompts21 = {
  type: GetAllPrompts2Type;
  text: string;
};

export type GetAllPromptsContent2 = GetAllPrompts21 | GetAllPrompts22;

/**
 * The contents of the user message. Either the text content of the message or an array of content parts with a defined type, each can be of type `text` or `image_url` when passing in images. You can pass multiple images by adding multiple `image_url` content parts.
 */
export type GetAllPromptsContent =
  | string
  | Array<GetAllPrompts21 | GetAllPrompts22>;

export const GetAllPromptsPromptsType = {
  Function: "function",
} as const;
export type GetAllPromptsPromptsType = ClosedEnum<
  typeof GetAllPromptsPromptsType
>;

export type GetAllPromptsFunction = {
  name: string;
  /**
   * JSON string arguments for the functions
   */
  arguments: string;
};

export type GetAllPromptsToolCalls = {
  id?: string | undefined;
  index?: number | undefined;
  type: GetAllPromptsPromptsType;
  function: GetAllPromptsFunction;
};

export type GetAllPromptsMessages = {
  /**
   * The role of the prompt message
   */
  role: GetAllPromptsRole;
  /**
   * The contents of the user message. Either the text content of the message or an array of content parts with a defined type, each can be of type `text` or `image_url` when passing in images. You can pass multiple images by adding multiple `image_url` content parts.
   */
  content: string | Array<GetAllPrompts21 | GetAllPrompts22>;
  toolCalls?: Array<GetAllPromptsToolCalls> | undefined;
};

/**
 * A list of messages compatible with the openAI schema
 */
export type GetAllPromptsPromptConfig = {
  stream?: boolean | undefined;
  model?: string | undefined;
  /**
   * The id of the resource
   */
  modelDbId?: string | undefined;
  /**
   * The type of the model
   */
  modelType?: GetAllPromptsModelType | undefined;
  /**
   * Model Parameters: Not all parameters apply to every model
   */
  modelParameters?: GetAllPromptsModelParameters | undefined;
  provider?: GetAllPromptsProvider | undefined;
  /**
   * The id of the resource
   */
  integrationId?: string | null | undefined;
  version?: string | undefined;
  messages: Array<GetAllPromptsMessages>;
};

export const GetAllPromptsUseCases = {
  Agents: "Agents",
  AgentsSimulations: "Agents simulations",
  APIInteraction: "API interaction",
  AutonomousAgents: "Autonomous Agents",
  Chatbots: "Chatbots",
  Classification: "Classification",
  CodeUnderstanding: "Code understanding",
  CodeWriting: "Code writing",
  DocumentsQA: "Documents QA",
  Conversation: "Conversation",
  Extraction: "Extraction",
  MultiModal: "Multi-modal",
  SelfChecking: "Self-checking",
  Sql: "SQL",
  Summarization: "Summarization",
  Tagging: "Tagging",
} as const;
export type GetAllPromptsUseCases = ClosedEnum<typeof GetAllPromptsUseCases>;

/**
 * The language that the prompt is written in. Use this field to categorize the prompt for your own purpose
 */
export const GetAllPromptsLanguage = {
  Chinese: "Chinese",
  Dutch: "Dutch",
  English: "English",
  French: "French",
  German: "German",
  Russian: "Russian",
  Spanish: "Spanish",
} as const;
/**
 * The language that the prompt is written in. Use this field to categorize the prompt for your own purpose
 */
export type GetAllPromptsLanguage = ClosedEnum<typeof GetAllPromptsLanguage>;

export type GetAllPromptsMetadata = {
  /**
   * A list of use cases that the prompt is meant to be used for. Use this field to categorize the prompt for your own purpose
   */
  useCases?: Array<GetAllPromptsUseCases> | undefined;
  /**
   * The language that the prompt is written in. Use this field to categorize the prompt for your own purpose
   */
  language?: GetAllPromptsLanguage | undefined;
};

export type GetAllPromptsData = {
  id: string;
  type: GetAllPromptsType;
  owner: string;
  domainId: string;
  created: string;
  updated: string;
  createdById?: string | null | undefined;
  updatedById?: string | null | undefined;
  /**
   * The prompt’s name, meant to be displayable in the UI.
   */
  displayName: string;
  /**
   * The prompt’s description, meant to be displayable in the UI. Use this field to optionally store a long form explanation of the prompt for your own purpose
   */
  description?: string | null | undefined;
  /**
   * A list of messages compatible with the openAI schema
   */
  promptConfig: GetAllPromptsPromptConfig;
  metadata?: GetAllPromptsMetadata | undefined;
};

/**
 * Prompts retrieved.
 */
export type GetAllPromptsResponseBody = {
  object: GetAllPromptsObject;
  data: Array<GetAllPromptsData>;
  hasMore: boolean;
};

/** @internal */
export const GetAllPromptsQueryParamSort$inboundSchema: z.ZodNativeEnum<
  typeof GetAllPromptsQueryParamSort
> = z.nativeEnum(GetAllPromptsQueryParamSort);

/** @internal */
export const GetAllPromptsQueryParamSort$outboundSchema: z.ZodNativeEnum<
  typeof GetAllPromptsQueryParamSort
> = GetAllPromptsQueryParamSort$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPromptsQueryParamSort$ {
  /** @deprecated use `GetAllPromptsQueryParamSort$inboundSchema` instead. */
  export const inboundSchema = GetAllPromptsQueryParamSort$inboundSchema;
  /** @deprecated use `GetAllPromptsQueryParamSort$outboundSchema` instead. */
  export const outboundSchema = GetAllPromptsQueryParamSort$outboundSchema;
}

/** @internal */
export const GetAllPromptsRequest$inboundSchema: z.ZodType<
  GetAllPromptsRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  sort: GetAllPromptsQueryParamSort$inboundSchema.default("asc"),
  limit: z.number().default(10),
  starting_after: z.string().optional(),
  ending_before: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "starting_after": "startingAfter",
    "ending_before": "endingBefore",
  });
});

/** @internal */
export type GetAllPromptsRequest$Outbound = {
  sort: string;
  limit: number;
  starting_after?: string | undefined;
  ending_before?: string | undefined;
};

/** @internal */
export const GetAllPromptsRequest$outboundSchema: z.ZodType<
  GetAllPromptsRequest$Outbound,
  z.ZodTypeDef,
  GetAllPromptsRequest
> = z.object({
  sort: GetAllPromptsQueryParamSort$outboundSchema.default("asc"),
  limit: z.number().default(10),
  startingAfter: z.string().optional(),
  endingBefore: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    startingAfter: "starting_after",
    endingBefore: "ending_before",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPromptsRequest$ {
  /** @deprecated use `GetAllPromptsRequest$inboundSchema` instead. */
  export const inboundSchema = GetAllPromptsRequest$inboundSchema;
  /** @deprecated use `GetAllPromptsRequest$outboundSchema` instead. */
  export const outboundSchema = GetAllPromptsRequest$outboundSchema;
  /** @deprecated use `GetAllPromptsRequest$Outbound` instead. */
  export type Outbound = GetAllPromptsRequest$Outbound;
}

export function getAllPromptsRequestToJSON(
  getAllPromptsRequest: GetAllPromptsRequest,
): string {
  return JSON.stringify(
    GetAllPromptsRequest$outboundSchema.parse(getAllPromptsRequest),
  );
}

export function getAllPromptsRequestFromJSON(
  jsonString: string,
): SafeParseResult<GetAllPromptsRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetAllPromptsRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetAllPromptsRequest' from JSON`,
  );
}

/** @internal */
export const GetAllPromptsObject$inboundSchema: z.ZodNativeEnum<
  typeof GetAllPromptsObject
> = z.nativeEnum(GetAllPromptsObject);

/** @internal */
export const GetAllPromptsObject$outboundSchema: z.ZodNativeEnum<
  typeof GetAllPromptsObject
> = GetAllPromptsObject$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPromptsObject$ {
  /** @deprecated use `GetAllPromptsObject$inboundSchema` instead. */
  export const inboundSchema = GetAllPromptsObject$inboundSchema;
  /** @deprecated use `GetAllPromptsObject$outboundSchema` instead. */
  export const outboundSchema = GetAllPromptsObject$outboundSchema;
}

/** @internal */
export const GetAllPromptsType$inboundSchema: z.ZodNativeEnum<
  typeof GetAllPromptsType
> = z.nativeEnum(GetAllPromptsType);

/** @internal */
export const GetAllPromptsType$outboundSchema: z.ZodNativeEnum<
  typeof GetAllPromptsType
> = GetAllPromptsType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPromptsType$ {
  /** @deprecated use `GetAllPromptsType$inboundSchema` instead. */
  export const inboundSchema = GetAllPromptsType$inboundSchema;
  /** @deprecated use `GetAllPromptsType$outboundSchema` instead. */
  export const outboundSchema = GetAllPromptsType$outboundSchema;
}

/** @internal */
export const GetAllPromptsModelType$inboundSchema: z.ZodNativeEnum<
  typeof GetAllPromptsModelType
> = z.nativeEnum(GetAllPromptsModelType);

/** @internal */
export const GetAllPromptsModelType$outboundSchema: z.ZodNativeEnum<
  typeof GetAllPromptsModelType
> = GetAllPromptsModelType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPromptsModelType$ {
  /** @deprecated use `GetAllPromptsModelType$inboundSchema` instead. */
  export const inboundSchema = GetAllPromptsModelType$inboundSchema;
  /** @deprecated use `GetAllPromptsModelType$outboundSchema` instead. */
  export const outboundSchema = GetAllPromptsModelType$outboundSchema;
}

/** @internal */
export const GetAllPromptsFormat$inboundSchema: z.ZodNativeEnum<
  typeof GetAllPromptsFormat
> = z.nativeEnum(GetAllPromptsFormat);

/** @internal */
export const GetAllPromptsFormat$outboundSchema: z.ZodNativeEnum<
  typeof GetAllPromptsFormat
> = GetAllPromptsFormat$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPromptsFormat$ {
  /** @deprecated use `GetAllPromptsFormat$inboundSchema` instead. */
  export const inboundSchema = GetAllPromptsFormat$inboundSchema;
  /** @deprecated use `GetAllPromptsFormat$outboundSchema` instead. */
  export const outboundSchema = GetAllPromptsFormat$outboundSchema;
}

/** @internal */
export const GetAllPromptsQuality$inboundSchema: z.ZodNativeEnum<
  typeof GetAllPromptsQuality
> = z.nativeEnum(GetAllPromptsQuality);

/** @internal */
export const GetAllPromptsQuality$outboundSchema: z.ZodNativeEnum<
  typeof GetAllPromptsQuality
> = GetAllPromptsQuality$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPromptsQuality$ {
  /** @deprecated use `GetAllPromptsQuality$inboundSchema` instead. */
  export const inboundSchema = GetAllPromptsQuality$inboundSchema;
  /** @deprecated use `GetAllPromptsQuality$outboundSchema` instead. */
  export const outboundSchema = GetAllPromptsQuality$outboundSchema;
}

/** @internal */
export const GetAllPromptsResponseFormatPromptsType$inboundSchema:
  z.ZodNativeEnum<typeof GetAllPromptsResponseFormatPromptsType> = z.nativeEnum(
    GetAllPromptsResponseFormatPromptsType,
  );

/** @internal */
export const GetAllPromptsResponseFormatPromptsType$outboundSchema:
  z.ZodNativeEnum<typeof GetAllPromptsResponseFormatPromptsType> =
    GetAllPromptsResponseFormatPromptsType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPromptsResponseFormatPromptsType$ {
  /** @deprecated use `GetAllPromptsResponseFormatPromptsType$inboundSchema` instead. */
  export const inboundSchema =
    GetAllPromptsResponseFormatPromptsType$inboundSchema;
  /** @deprecated use `GetAllPromptsResponseFormatPromptsType$outboundSchema` instead. */
  export const outboundSchema =
    GetAllPromptsResponseFormatPromptsType$outboundSchema;
}

/** @internal */
export const GetAllPromptsResponseFormat2$inboundSchema: z.ZodType<
  GetAllPromptsResponseFormat2,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: GetAllPromptsResponseFormatPromptsType$inboundSchema,
});

/** @internal */
export type GetAllPromptsResponseFormat2$Outbound = {
  type: string;
};

/** @internal */
export const GetAllPromptsResponseFormat2$outboundSchema: z.ZodType<
  GetAllPromptsResponseFormat2$Outbound,
  z.ZodTypeDef,
  GetAllPromptsResponseFormat2
> = z.object({
  type: GetAllPromptsResponseFormatPromptsType$outboundSchema,
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPromptsResponseFormat2$ {
  /** @deprecated use `GetAllPromptsResponseFormat2$inboundSchema` instead. */
  export const inboundSchema = GetAllPromptsResponseFormat2$inboundSchema;
  /** @deprecated use `GetAllPromptsResponseFormat2$outboundSchema` instead. */
  export const outboundSchema = GetAllPromptsResponseFormat2$outboundSchema;
  /** @deprecated use `GetAllPromptsResponseFormat2$Outbound` instead. */
  export type Outbound = GetAllPromptsResponseFormat2$Outbound;
}

export function getAllPromptsResponseFormat2ToJSON(
  getAllPromptsResponseFormat2: GetAllPromptsResponseFormat2,
): string {
  return JSON.stringify(
    GetAllPromptsResponseFormat2$outboundSchema.parse(
      getAllPromptsResponseFormat2,
    ),
  );
}

export function getAllPromptsResponseFormat2FromJSON(
  jsonString: string,
): SafeParseResult<GetAllPromptsResponseFormat2, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetAllPromptsResponseFormat2$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetAllPromptsResponseFormat2' from JSON`,
  );
}

/** @internal */
export const GetAllPromptsResponseFormatType$inboundSchema: z.ZodNativeEnum<
  typeof GetAllPromptsResponseFormatType
> = z.nativeEnum(GetAllPromptsResponseFormatType);

/** @internal */
export const GetAllPromptsResponseFormatType$outboundSchema: z.ZodNativeEnum<
  typeof GetAllPromptsResponseFormatType
> = GetAllPromptsResponseFormatType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPromptsResponseFormatType$ {
  /** @deprecated use `GetAllPromptsResponseFormatType$inboundSchema` instead. */
  export const inboundSchema = GetAllPromptsResponseFormatType$inboundSchema;
  /** @deprecated use `GetAllPromptsResponseFormatType$outboundSchema` instead. */
  export const outboundSchema = GetAllPromptsResponseFormatType$outboundSchema;
}

/** @internal */
export const GetAllPromptsResponseFormatJsonSchema$inboundSchema: z.ZodType<
  GetAllPromptsResponseFormatJsonSchema,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.string(),
  strict: z.boolean(),
  schema: z.record(z.any()),
});

/** @internal */
export type GetAllPromptsResponseFormatJsonSchema$Outbound = {
  name: string;
  strict: boolean;
  schema: { [k: string]: any };
};

/** @internal */
export const GetAllPromptsResponseFormatJsonSchema$outboundSchema: z.ZodType<
  GetAllPromptsResponseFormatJsonSchema$Outbound,
  z.ZodTypeDef,
  GetAllPromptsResponseFormatJsonSchema
> = z.object({
  name: z.string(),
  strict: z.boolean(),
  schema: z.record(z.any()),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPromptsResponseFormatJsonSchema$ {
  /** @deprecated use `GetAllPromptsResponseFormatJsonSchema$inboundSchema` instead. */
  export const inboundSchema =
    GetAllPromptsResponseFormatJsonSchema$inboundSchema;
  /** @deprecated use `GetAllPromptsResponseFormatJsonSchema$outboundSchema` instead. */
  export const outboundSchema =
    GetAllPromptsResponseFormatJsonSchema$outboundSchema;
  /** @deprecated use `GetAllPromptsResponseFormatJsonSchema$Outbound` instead. */
  export type Outbound = GetAllPromptsResponseFormatJsonSchema$Outbound;
}

export function getAllPromptsResponseFormatJsonSchemaToJSON(
  getAllPromptsResponseFormatJsonSchema: GetAllPromptsResponseFormatJsonSchema,
): string {
  return JSON.stringify(
    GetAllPromptsResponseFormatJsonSchema$outboundSchema.parse(
      getAllPromptsResponseFormatJsonSchema,
    ),
  );
}

export function getAllPromptsResponseFormatJsonSchemaFromJSON(
  jsonString: string,
): SafeParseResult<GetAllPromptsResponseFormatJsonSchema, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      GetAllPromptsResponseFormatJsonSchema$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetAllPromptsResponseFormatJsonSchema' from JSON`,
  );
}

/** @internal */
export const GetAllPromptsResponseFormat1$inboundSchema: z.ZodType<
  GetAllPromptsResponseFormat1,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: GetAllPromptsResponseFormatType$inboundSchema,
  json_schema: z.lazy(() =>
    GetAllPromptsResponseFormatJsonSchema$inboundSchema
  ),
}).transform((v) => {
  return remap$(v, {
    "json_schema": "jsonSchema",
  });
});

/** @internal */
export type GetAllPromptsResponseFormat1$Outbound = {
  type: string;
  json_schema: GetAllPromptsResponseFormatJsonSchema$Outbound;
};

/** @internal */
export const GetAllPromptsResponseFormat1$outboundSchema: z.ZodType<
  GetAllPromptsResponseFormat1$Outbound,
  z.ZodTypeDef,
  GetAllPromptsResponseFormat1
> = z.object({
  type: GetAllPromptsResponseFormatType$outboundSchema,
  jsonSchema: z.lazy(() =>
    GetAllPromptsResponseFormatJsonSchema$outboundSchema
  ),
}).transform((v) => {
  return remap$(v, {
    jsonSchema: "json_schema",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPromptsResponseFormat1$ {
  /** @deprecated use `GetAllPromptsResponseFormat1$inboundSchema` instead. */
  export const inboundSchema = GetAllPromptsResponseFormat1$inboundSchema;
  /** @deprecated use `GetAllPromptsResponseFormat1$outboundSchema` instead. */
  export const outboundSchema = GetAllPromptsResponseFormat1$outboundSchema;
  /** @deprecated use `GetAllPromptsResponseFormat1$Outbound` instead. */
  export type Outbound = GetAllPromptsResponseFormat1$Outbound;
}

export function getAllPromptsResponseFormat1ToJSON(
  getAllPromptsResponseFormat1: GetAllPromptsResponseFormat1,
): string {
  return JSON.stringify(
    GetAllPromptsResponseFormat1$outboundSchema.parse(
      getAllPromptsResponseFormat1,
    ),
  );
}

export function getAllPromptsResponseFormat1FromJSON(
  jsonString: string,
): SafeParseResult<GetAllPromptsResponseFormat1, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetAllPromptsResponseFormat1$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetAllPromptsResponseFormat1' from JSON`,
  );
}

/** @internal */
export const GetAllPromptsResponseFormat$inboundSchema: z.ZodType<
  GetAllPromptsResponseFormat,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => GetAllPromptsResponseFormat2$inboundSchema),
  z.lazy(() => GetAllPromptsResponseFormat1$inboundSchema),
]);

/** @internal */
export type GetAllPromptsResponseFormat$Outbound =
  | GetAllPromptsResponseFormat2$Outbound
  | GetAllPromptsResponseFormat1$Outbound;

/** @internal */
export const GetAllPromptsResponseFormat$outboundSchema: z.ZodType<
  GetAllPromptsResponseFormat$Outbound,
  z.ZodTypeDef,
  GetAllPromptsResponseFormat
> = z.union([
  z.lazy(() => GetAllPromptsResponseFormat2$outboundSchema),
  z.lazy(() => GetAllPromptsResponseFormat1$outboundSchema),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPromptsResponseFormat$ {
  /** @deprecated use `GetAllPromptsResponseFormat$inboundSchema` instead. */
  export const inboundSchema = GetAllPromptsResponseFormat$inboundSchema;
  /** @deprecated use `GetAllPromptsResponseFormat$outboundSchema` instead. */
  export const outboundSchema = GetAllPromptsResponseFormat$outboundSchema;
  /** @deprecated use `GetAllPromptsResponseFormat$Outbound` instead. */
  export type Outbound = GetAllPromptsResponseFormat$Outbound;
}

export function getAllPromptsResponseFormatToJSON(
  getAllPromptsResponseFormat: GetAllPromptsResponseFormat,
): string {
  return JSON.stringify(
    GetAllPromptsResponseFormat$outboundSchema.parse(
      getAllPromptsResponseFormat,
    ),
  );
}

export function getAllPromptsResponseFormatFromJSON(
  jsonString: string,
): SafeParseResult<GetAllPromptsResponseFormat, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetAllPromptsResponseFormat$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetAllPromptsResponseFormat' from JSON`,
  );
}

/** @internal */
export const GetAllPromptsPhotoRealVersion$inboundSchema: z.ZodNativeEnum<
  typeof GetAllPromptsPhotoRealVersion
> = z.nativeEnum(GetAllPromptsPhotoRealVersion);

/** @internal */
export const GetAllPromptsPhotoRealVersion$outboundSchema: z.ZodNativeEnum<
  typeof GetAllPromptsPhotoRealVersion
> = GetAllPromptsPhotoRealVersion$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPromptsPhotoRealVersion$ {
  /** @deprecated use `GetAllPromptsPhotoRealVersion$inboundSchema` instead. */
  export const inboundSchema = GetAllPromptsPhotoRealVersion$inboundSchema;
  /** @deprecated use `GetAllPromptsPhotoRealVersion$outboundSchema` instead. */
  export const outboundSchema = GetAllPromptsPhotoRealVersion$outboundSchema;
}

/** @internal */
export const GetAllPromptsEncodingFormat$inboundSchema: z.ZodNativeEnum<
  typeof GetAllPromptsEncodingFormat
> = z.nativeEnum(GetAllPromptsEncodingFormat);

/** @internal */
export const GetAllPromptsEncodingFormat$outboundSchema: z.ZodNativeEnum<
  typeof GetAllPromptsEncodingFormat
> = GetAllPromptsEncodingFormat$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPromptsEncodingFormat$ {
  /** @deprecated use `GetAllPromptsEncodingFormat$inboundSchema` instead. */
  export const inboundSchema = GetAllPromptsEncodingFormat$inboundSchema;
  /** @deprecated use `GetAllPromptsEncodingFormat$outboundSchema` instead. */
  export const outboundSchema = GetAllPromptsEncodingFormat$outboundSchema;
}

/** @internal */
export const GetAllPromptsReasoningEffort$inboundSchema: z.ZodNativeEnum<
  typeof GetAllPromptsReasoningEffort
> = z.nativeEnum(GetAllPromptsReasoningEffort);

/** @internal */
export const GetAllPromptsReasoningEffort$outboundSchema: z.ZodNativeEnum<
  typeof GetAllPromptsReasoningEffort
> = GetAllPromptsReasoningEffort$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPromptsReasoningEffort$ {
  /** @deprecated use `GetAllPromptsReasoningEffort$inboundSchema` instead. */
  export const inboundSchema = GetAllPromptsReasoningEffort$inboundSchema;
  /** @deprecated use `GetAllPromptsReasoningEffort$outboundSchema` instead. */
  export const outboundSchema = GetAllPromptsReasoningEffort$outboundSchema;
}

/** @internal */
export const GetAllPromptsModelParameters$inboundSchema: z.ZodType<
  GetAllPromptsModelParameters,
  z.ZodTypeDef,
  unknown
> = z.object({
  temperature: z.number().optional(),
  maxTokens: z.number().optional(),
  topK: z.number().optional(),
  topP: z.number().optional(),
  frequencyPenalty: z.number().optional(),
  presencePenalty: z.number().optional(),
  numImages: z.number().optional(),
  seed: z.number().optional(),
  format: GetAllPromptsFormat$inboundSchema.optional(),
  dimensions: z.string().optional(),
  quality: GetAllPromptsQuality$inboundSchema.optional(),
  style: z.string().optional(),
  responseFormat: z.nullable(
    z.union([
      z.lazy(() => GetAllPromptsResponseFormat2$inboundSchema),
      z.lazy(() => GetAllPromptsResponseFormat1$inboundSchema),
    ]),
  ).optional(),
  photoRealVersion: GetAllPromptsPhotoRealVersion$inboundSchema.optional(),
  encoding_format: GetAllPromptsEncodingFormat$inboundSchema.optional(),
  reasoningEffort: GetAllPromptsReasoningEffort$inboundSchema.optional(),
  budgetTokens: z.number().optional(),
}).transform((v) => {
  return remap$(v, {
    "encoding_format": "encodingFormat",
  });
});

/** @internal */
export type GetAllPromptsModelParameters$Outbound = {
  temperature?: number | undefined;
  maxTokens?: number | undefined;
  topK?: number | undefined;
  topP?: number | undefined;
  frequencyPenalty?: number | undefined;
  presencePenalty?: number | undefined;
  numImages?: number | undefined;
  seed?: number | undefined;
  format?: string | undefined;
  dimensions?: string | undefined;
  quality?: string | undefined;
  style?: string | undefined;
  responseFormat?:
    | GetAllPromptsResponseFormat2$Outbound
    | GetAllPromptsResponseFormat1$Outbound
    | null
    | undefined;
  photoRealVersion?: string | undefined;
  encoding_format?: string | undefined;
  reasoningEffort?: string | undefined;
  budgetTokens?: number | undefined;
};

/** @internal */
export const GetAllPromptsModelParameters$outboundSchema: z.ZodType<
  GetAllPromptsModelParameters$Outbound,
  z.ZodTypeDef,
  GetAllPromptsModelParameters
> = z.object({
  temperature: z.number().optional(),
  maxTokens: z.number().optional(),
  topK: z.number().optional(),
  topP: z.number().optional(),
  frequencyPenalty: z.number().optional(),
  presencePenalty: z.number().optional(),
  numImages: z.number().optional(),
  seed: z.number().optional(),
  format: GetAllPromptsFormat$outboundSchema.optional(),
  dimensions: z.string().optional(),
  quality: GetAllPromptsQuality$outboundSchema.optional(),
  style: z.string().optional(),
  responseFormat: z.nullable(
    z.union([
      z.lazy(() => GetAllPromptsResponseFormat2$outboundSchema),
      z.lazy(() => GetAllPromptsResponseFormat1$outboundSchema),
    ]),
  ).optional(),
  photoRealVersion: GetAllPromptsPhotoRealVersion$outboundSchema.optional(),
  encodingFormat: GetAllPromptsEncodingFormat$outboundSchema.optional(),
  reasoningEffort: GetAllPromptsReasoningEffort$outboundSchema.optional(),
  budgetTokens: z.number().optional(),
}).transform((v) => {
  return remap$(v, {
    encodingFormat: "encoding_format",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPromptsModelParameters$ {
  /** @deprecated use `GetAllPromptsModelParameters$inboundSchema` instead. */
  export const inboundSchema = GetAllPromptsModelParameters$inboundSchema;
  /** @deprecated use `GetAllPromptsModelParameters$outboundSchema` instead. */
  export const outboundSchema = GetAllPromptsModelParameters$outboundSchema;
  /** @deprecated use `GetAllPromptsModelParameters$Outbound` instead. */
  export type Outbound = GetAllPromptsModelParameters$Outbound;
}

export function getAllPromptsModelParametersToJSON(
  getAllPromptsModelParameters: GetAllPromptsModelParameters,
): string {
  return JSON.stringify(
    GetAllPromptsModelParameters$outboundSchema.parse(
      getAllPromptsModelParameters,
    ),
  );
}

export function getAllPromptsModelParametersFromJSON(
  jsonString: string,
): SafeParseResult<GetAllPromptsModelParameters, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetAllPromptsModelParameters$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetAllPromptsModelParameters' from JSON`,
  );
}

/** @internal */
export const GetAllPromptsProvider$inboundSchema: z.ZodNativeEnum<
  typeof GetAllPromptsProvider
> = z.nativeEnum(GetAllPromptsProvider);

/** @internal */
export const GetAllPromptsProvider$outboundSchema: z.ZodNativeEnum<
  typeof GetAllPromptsProvider
> = GetAllPromptsProvider$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPromptsProvider$ {
  /** @deprecated use `GetAllPromptsProvider$inboundSchema` instead. */
  export const inboundSchema = GetAllPromptsProvider$inboundSchema;
  /** @deprecated use `GetAllPromptsProvider$outboundSchema` instead. */
  export const outboundSchema = GetAllPromptsProvider$outboundSchema;
}

/** @internal */
export const GetAllPromptsRole$inboundSchema: z.ZodNativeEnum<
  typeof GetAllPromptsRole
> = z.nativeEnum(GetAllPromptsRole);

/** @internal */
export const GetAllPromptsRole$outboundSchema: z.ZodNativeEnum<
  typeof GetAllPromptsRole
> = GetAllPromptsRole$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPromptsRole$ {
  /** @deprecated use `GetAllPromptsRole$inboundSchema` instead. */
  export const inboundSchema = GetAllPromptsRole$inboundSchema;
  /** @deprecated use `GetAllPromptsRole$outboundSchema` instead. */
  export const outboundSchema = GetAllPromptsRole$outboundSchema;
}

/** @internal */
export const GetAllPrompts2PromptsType$inboundSchema: z.ZodNativeEnum<
  typeof GetAllPrompts2PromptsType
> = z.nativeEnum(GetAllPrompts2PromptsType);

/** @internal */
export const GetAllPrompts2PromptsType$outboundSchema: z.ZodNativeEnum<
  typeof GetAllPrompts2PromptsType
> = GetAllPrompts2PromptsType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPrompts2PromptsType$ {
  /** @deprecated use `GetAllPrompts2PromptsType$inboundSchema` instead. */
  export const inboundSchema = GetAllPrompts2PromptsType$inboundSchema;
  /** @deprecated use `GetAllPrompts2PromptsType$outboundSchema` instead. */
  export const outboundSchema = GetAllPrompts2PromptsType$outboundSchema;
}

/** @internal */
export const GetAllPrompts2ImageUrl$inboundSchema: z.ZodType<
  GetAllPrompts2ImageUrl,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string().optional(),
  url: z.string(),
  detail: z.string().optional(),
});

/** @internal */
export type GetAllPrompts2ImageUrl$Outbound = {
  id?: string | undefined;
  url: string;
  detail?: string | undefined;
};

/** @internal */
export const GetAllPrompts2ImageUrl$outboundSchema: z.ZodType<
  GetAllPrompts2ImageUrl$Outbound,
  z.ZodTypeDef,
  GetAllPrompts2ImageUrl
> = z.object({
  id: z.string().optional(),
  url: z.string(),
  detail: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPrompts2ImageUrl$ {
  /** @deprecated use `GetAllPrompts2ImageUrl$inboundSchema` instead. */
  export const inboundSchema = GetAllPrompts2ImageUrl$inboundSchema;
  /** @deprecated use `GetAllPrompts2ImageUrl$outboundSchema` instead. */
  export const outboundSchema = GetAllPrompts2ImageUrl$outboundSchema;
  /** @deprecated use `GetAllPrompts2ImageUrl$Outbound` instead. */
  export type Outbound = GetAllPrompts2ImageUrl$Outbound;
}

export function getAllPrompts2ImageUrlToJSON(
  getAllPrompts2ImageUrl: GetAllPrompts2ImageUrl,
): string {
  return JSON.stringify(
    GetAllPrompts2ImageUrl$outboundSchema.parse(getAllPrompts2ImageUrl),
  );
}

export function getAllPrompts2ImageUrlFromJSON(
  jsonString: string,
): SafeParseResult<GetAllPrompts2ImageUrl, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetAllPrompts2ImageUrl$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetAllPrompts2ImageUrl' from JSON`,
  );
}

/** @internal */
export const GetAllPrompts22$inboundSchema: z.ZodType<
  GetAllPrompts22,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: GetAllPrompts2PromptsType$inboundSchema,
  image_url: z.lazy(() => GetAllPrompts2ImageUrl$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "image_url": "imageUrl",
  });
});

/** @internal */
export type GetAllPrompts22$Outbound = {
  type: string;
  image_url: GetAllPrompts2ImageUrl$Outbound;
};

/** @internal */
export const GetAllPrompts22$outboundSchema: z.ZodType<
  GetAllPrompts22$Outbound,
  z.ZodTypeDef,
  GetAllPrompts22
> = z.object({
  type: GetAllPrompts2PromptsType$outboundSchema,
  imageUrl: z.lazy(() => GetAllPrompts2ImageUrl$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    imageUrl: "image_url",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPrompts22$ {
  /** @deprecated use `GetAllPrompts22$inboundSchema` instead. */
  export const inboundSchema = GetAllPrompts22$inboundSchema;
  /** @deprecated use `GetAllPrompts22$outboundSchema` instead. */
  export const outboundSchema = GetAllPrompts22$outboundSchema;
  /** @deprecated use `GetAllPrompts22$Outbound` instead. */
  export type Outbound = GetAllPrompts22$Outbound;
}

export function getAllPrompts22ToJSON(
  getAllPrompts22: GetAllPrompts22,
): string {
  return JSON.stringify(GetAllPrompts22$outboundSchema.parse(getAllPrompts22));
}

export function getAllPrompts22FromJSON(
  jsonString: string,
): SafeParseResult<GetAllPrompts22, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetAllPrompts22$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetAllPrompts22' from JSON`,
  );
}

/** @internal */
export const GetAllPrompts2Type$inboundSchema: z.ZodNativeEnum<
  typeof GetAllPrompts2Type
> = z.nativeEnum(GetAllPrompts2Type);

/** @internal */
export const GetAllPrompts2Type$outboundSchema: z.ZodNativeEnum<
  typeof GetAllPrompts2Type
> = GetAllPrompts2Type$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPrompts2Type$ {
  /** @deprecated use `GetAllPrompts2Type$inboundSchema` instead. */
  export const inboundSchema = GetAllPrompts2Type$inboundSchema;
  /** @deprecated use `GetAllPrompts2Type$outboundSchema` instead. */
  export const outboundSchema = GetAllPrompts2Type$outboundSchema;
}

/** @internal */
export const GetAllPrompts21$inboundSchema: z.ZodType<
  GetAllPrompts21,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: GetAllPrompts2Type$inboundSchema,
  text: z.string(),
});

/** @internal */
export type GetAllPrompts21$Outbound = {
  type: string;
  text: string;
};

/** @internal */
export const GetAllPrompts21$outboundSchema: z.ZodType<
  GetAllPrompts21$Outbound,
  z.ZodTypeDef,
  GetAllPrompts21
> = z.object({
  type: GetAllPrompts2Type$outboundSchema,
  text: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPrompts21$ {
  /** @deprecated use `GetAllPrompts21$inboundSchema` instead. */
  export const inboundSchema = GetAllPrompts21$inboundSchema;
  /** @deprecated use `GetAllPrompts21$outboundSchema` instead. */
  export const outboundSchema = GetAllPrompts21$outboundSchema;
  /** @deprecated use `GetAllPrompts21$Outbound` instead. */
  export type Outbound = GetAllPrompts21$Outbound;
}

export function getAllPrompts21ToJSON(
  getAllPrompts21: GetAllPrompts21,
): string {
  return JSON.stringify(GetAllPrompts21$outboundSchema.parse(getAllPrompts21));
}

export function getAllPrompts21FromJSON(
  jsonString: string,
): SafeParseResult<GetAllPrompts21, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetAllPrompts21$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetAllPrompts21' from JSON`,
  );
}

/** @internal */
export const GetAllPromptsContent2$inboundSchema: z.ZodType<
  GetAllPromptsContent2,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => GetAllPrompts21$inboundSchema),
  z.lazy(() => GetAllPrompts22$inboundSchema),
]);

/** @internal */
export type GetAllPromptsContent2$Outbound =
  | GetAllPrompts21$Outbound
  | GetAllPrompts22$Outbound;

/** @internal */
export const GetAllPromptsContent2$outboundSchema: z.ZodType<
  GetAllPromptsContent2$Outbound,
  z.ZodTypeDef,
  GetAllPromptsContent2
> = z.union([
  z.lazy(() => GetAllPrompts21$outboundSchema),
  z.lazy(() => GetAllPrompts22$outboundSchema),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPromptsContent2$ {
  /** @deprecated use `GetAllPromptsContent2$inboundSchema` instead. */
  export const inboundSchema = GetAllPromptsContent2$inboundSchema;
  /** @deprecated use `GetAllPromptsContent2$outboundSchema` instead. */
  export const outboundSchema = GetAllPromptsContent2$outboundSchema;
  /** @deprecated use `GetAllPromptsContent2$Outbound` instead. */
  export type Outbound = GetAllPromptsContent2$Outbound;
}

export function getAllPromptsContent2ToJSON(
  getAllPromptsContent2: GetAllPromptsContent2,
): string {
  return JSON.stringify(
    GetAllPromptsContent2$outboundSchema.parse(getAllPromptsContent2),
  );
}

export function getAllPromptsContent2FromJSON(
  jsonString: string,
): SafeParseResult<GetAllPromptsContent2, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetAllPromptsContent2$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetAllPromptsContent2' from JSON`,
  );
}

/** @internal */
export const GetAllPromptsContent$inboundSchema: z.ZodType<
  GetAllPromptsContent,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.string(),
  z.array(z.union([
    z.lazy(() => GetAllPrompts21$inboundSchema),
    z.lazy(() => GetAllPrompts22$inboundSchema),
  ])),
]);

/** @internal */
export type GetAllPromptsContent$Outbound =
  | string
  | Array<GetAllPrompts21$Outbound | GetAllPrompts22$Outbound>;

/** @internal */
export const GetAllPromptsContent$outboundSchema: z.ZodType<
  GetAllPromptsContent$Outbound,
  z.ZodTypeDef,
  GetAllPromptsContent
> = z.union([
  z.string(),
  z.array(z.union([
    z.lazy(() => GetAllPrompts21$outboundSchema),
    z.lazy(() => GetAllPrompts22$outboundSchema),
  ])),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPromptsContent$ {
  /** @deprecated use `GetAllPromptsContent$inboundSchema` instead. */
  export const inboundSchema = GetAllPromptsContent$inboundSchema;
  /** @deprecated use `GetAllPromptsContent$outboundSchema` instead. */
  export const outboundSchema = GetAllPromptsContent$outboundSchema;
  /** @deprecated use `GetAllPromptsContent$Outbound` instead. */
  export type Outbound = GetAllPromptsContent$Outbound;
}

export function getAllPromptsContentToJSON(
  getAllPromptsContent: GetAllPromptsContent,
): string {
  return JSON.stringify(
    GetAllPromptsContent$outboundSchema.parse(getAllPromptsContent),
  );
}

export function getAllPromptsContentFromJSON(
  jsonString: string,
): SafeParseResult<GetAllPromptsContent, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetAllPromptsContent$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetAllPromptsContent' from JSON`,
  );
}

/** @internal */
export const GetAllPromptsPromptsType$inboundSchema: z.ZodNativeEnum<
  typeof GetAllPromptsPromptsType
> = z.nativeEnum(GetAllPromptsPromptsType);

/** @internal */
export const GetAllPromptsPromptsType$outboundSchema: z.ZodNativeEnum<
  typeof GetAllPromptsPromptsType
> = GetAllPromptsPromptsType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPromptsPromptsType$ {
  /** @deprecated use `GetAllPromptsPromptsType$inboundSchema` instead. */
  export const inboundSchema = GetAllPromptsPromptsType$inboundSchema;
  /** @deprecated use `GetAllPromptsPromptsType$outboundSchema` instead. */
  export const outboundSchema = GetAllPromptsPromptsType$outboundSchema;
}

/** @internal */
export const GetAllPromptsFunction$inboundSchema: z.ZodType<
  GetAllPromptsFunction,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.string(),
  arguments: z.string(),
});

/** @internal */
export type GetAllPromptsFunction$Outbound = {
  name: string;
  arguments: string;
};

/** @internal */
export const GetAllPromptsFunction$outboundSchema: z.ZodType<
  GetAllPromptsFunction$Outbound,
  z.ZodTypeDef,
  GetAllPromptsFunction
> = z.object({
  name: z.string(),
  arguments: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPromptsFunction$ {
  /** @deprecated use `GetAllPromptsFunction$inboundSchema` instead. */
  export const inboundSchema = GetAllPromptsFunction$inboundSchema;
  /** @deprecated use `GetAllPromptsFunction$outboundSchema` instead. */
  export const outboundSchema = GetAllPromptsFunction$outboundSchema;
  /** @deprecated use `GetAllPromptsFunction$Outbound` instead. */
  export type Outbound = GetAllPromptsFunction$Outbound;
}

export function getAllPromptsFunctionToJSON(
  getAllPromptsFunction: GetAllPromptsFunction,
): string {
  return JSON.stringify(
    GetAllPromptsFunction$outboundSchema.parse(getAllPromptsFunction),
  );
}

export function getAllPromptsFunctionFromJSON(
  jsonString: string,
): SafeParseResult<GetAllPromptsFunction, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetAllPromptsFunction$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetAllPromptsFunction' from JSON`,
  );
}

/** @internal */
export const GetAllPromptsToolCalls$inboundSchema: z.ZodType<
  GetAllPromptsToolCalls,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string().optional(),
  index: z.number().optional(),
  type: GetAllPromptsPromptsType$inboundSchema,
  function: z.lazy(() => GetAllPromptsFunction$inboundSchema),
});

/** @internal */
export type GetAllPromptsToolCalls$Outbound = {
  id?: string | undefined;
  index?: number | undefined;
  type: string;
  function: GetAllPromptsFunction$Outbound;
};

/** @internal */
export const GetAllPromptsToolCalls$outboundSchema: z.ZodType<
  GetAllPromptsToolCalls$Outbound,
  z.ZodTypeDef,
  GetAllPromptsToolCalls
> = z.object({
  id: z.string().optional(),
  index: z.number().optional(),
  type: GetAllPromptsPromptsType$outboundSchema,
  function: z.lazy(() => GetAllPromptsFunction$outboundSchema),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPromptsToolCalls$ {
  /** @deprecated use `GetAllPromptsToolCalls$inboundSchema` instead. */
  export const inboundSchema = GetAllPromptsToolCalls$inboundSchema;
  /** @deprecated use `GetAllPromptsToolCalls$outboundSchema` instead. */
  export const outboundSchema = GetAllPromptsToolCalls$outboundSchema;
  /** @deprecated use `GetAllPromptsToolCalls$Outbound` instead. */
  export type Outbound = GetAllPromptsToolCalls$Outbound;
}

export function getAllPromptsToolCallsToJSON(
  getAllPromptsToolCalls: GetAllPromptsToolCalls,
): string {
  return JSON.stringify(
    GetAllPromptsToolCalls$outboundSchema.parse(getAllPromptsToolCalls),
  );
}

export function getAllPromptsToolCallsFromJSON(
  jsonString: string,
): SafeParseResult<GetAllPromptsToolCalls, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetAllPromptsToolCalls$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetAllPromptsToolCalls' from JSON`,
  );
}

/** @internal */
export const GetAllPromptsMessages$inboundSchema: z.ZodType<
  GetAllPromptsMessages,
  z.ZodTypeDef,
  unknown
> = z.object({
  role: GetAllPromptsRole$inboundSchema,
  content: z.union([
    z.string(),
    z.array(z.union([
      z.lazy(() => GetAllPrompts21$inboundSchema),
      z.lazy(() => GetAllPrompts22$inboundSchema),
    ])),
  ]),
  tool_calls: z.array(z.lazy(() => GetAllPromptsToolCalls$inboundSchema))
    .optional(),
}).transform((v) => {
  return remap$(v, {
    "tool_calls": "toolCalls",
  });
});

/** @internal */
export type GetAllPromptsMessages$Outbound = {
  role: string;
  content: string | Array<GetAllPrompts21$Outbound | GetAllPrompts22$Outbound>;
  tool_calls?: Array<GetAllPromptsToolCalls$Outbound> | undefined;
};

/** @internal */
export const GetAllPromptsMessages$outboundSchema: z.ZodType<
  GetAllPromptsMessages$Outbound,
  z.ZodTypeDef,
  GetAllPromptsMessages
> = z.object({
  role: GetAllPromptsRole$outboundSchema,
  content: z.union([
    z.string(),
    z.array(z.union([
      z.lazy(() => GetAllPrompts21$outboundSchema),
      z.lazy(() => GetAllPrompts22$outboundSchema),
    ])),
  ]),
  toolCalls: z.array(z.lazy(() => GetAllPromptsToolCalls$outboundSchema))
    .optional(),
}).transform((v) => {
  return remap$(v, {
    toolCalls: "tool_calls",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPromptsMessages$ {
  /** @deprecated use `GetAllPromptsMessages$inboundSchema` instead. */
  export const inboundSchema = GetAllPromptsMessages$inboundSchema;
  /** @deprecated use `GetAllPromptsMessages$outboundSchema` instead. */
  export const outboundSchema = GetAllPromptsMessages$outboundSchema;
  /** @deprecated use `GetAllPromptsMessages$Outbound` instead. */
  export type Outbound = GetAllPromptsMessages$Outbound;
}

export function getAllPromptsMessagesToJSON(
  getAllPromptsMessages: GetAllPromptsMessages,
): string {
  return JSON.stringify(
    GetAllPromptsMessages$outboundSchema.parse(getAllPromptsMessages),
  );
}

export function getAllPromptsMessagesFromJSON(
  jsonString: string,
): SafeParseResult<GetAllPromptsMessages, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetAllPromptsMessages$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetAllPromptsMessages' from JSON`,
  );
}

/** @internal */
export const GetAllPromptsPromptConfig$inboundSchema: z.ZodType<
  GetAllPromptsPromptConfig,
  z.ZodTypeDef,
  unknown
> = z.object({
  stream: z.boolean().optional(),
  model: z.string().optional(),
  model_db_id: z.string().optional(),
  model_type: GetAllPromptsModelType$inboundSchema.optional(),
  model_parameters: z.lazy(() => GetAllPromptsModelParameters$inboundSchema)
    .optional(),
  provider: GetAllPromptsProvider$inboundSchema.optional(),
  integration_id: z.nullable(z.string()).optional(),
  version: z.string().optional(),
  messages: z.array(z.lazy(() => GetAllPromptsMessages$inboundSchema)),
}).transform((v) => {
  return remap$(v, {
    "model_db_id": "modelDbId",
    "model_type": "modelType",
    "model_parameters": "modelParameters",
    "integration_id": "integrationId",
  });
});

/** @internal */
export type GetAllPromptsPromptConfig$Outbound = {
  stream?: boolean | undefined;
  model?: string | undefined;
  model_db_id?: string | undefined;
  model_type?: string | undefined;
  model_parameters?: GetAllPromptsModelParameters$Outbound | undefined;
  provider?: string | undefined;
  integration_id?: string | null | undefined;
  version?: string | undefined;
  messages: Array<GetAllPromptsMessages$Outbound>;
};

/** @internal */
export const GetAllPromptsPromptConfig$outboundSchema: z.ZodType<
  GetAllPromptsPromptConfig$Outbound,
  z.ZodTypeDef,
  GetAllPromptsPromptConfig
> = z.object({
  stream: z.boolean().optional(),
  model: z.string().optional(),
  modelDbId: z.string().optional(),
  modelType: GetAllPromptsModelType$outboundSchema.optional(),
  modelParameters: z.lazy(() => GetAllPromptsModelParameters$outboundSchema)
    .optional(),
  provider: GetAllPromptsProvider$outboundSchema.optional(),
  integrationId: z.nullable(z.string()).optional(),
  version: z.string().optional(),
  messages: z.array(z.lazy(() => GetAllPromptsMessages$outboundSchema)),
}).transform((v) => {
  return remap$(v, {
    modelDbId: "model_db_id",
    modelType: "model_type",
    modelParameters: "model_parameters",
    integrationId: "integration_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPromptsPromptConfig$ {
  /** @deprecated use `GetAllPromptsPromptConfig$inboundSchema` instead. */
  export const inboundSchema = GetAllPromptsPromptConfig$inboundSchema;
  /** @deprecated use `GetAllPromptsPromptConfig$outboundSchema` instead. */
  export const outboundSchema = GetAllPromptsPromptConfig$outboundSchema;
  /** @deprecated use `GetAllPromptsPromptConfig$Outbound` instead. */
  export type Outbound = GetAllPromptsPromptConfig$Outbound;
}

export function getAllPromptsPromptConfigToJSON(
  getAllPromptsPromptConfig: GetAllPromptsPromptConfig,
): string {
  return JSON.stringify(
    GetAllPromptsPromptConfig$outboundSchema.parse(getAllPromptsPromptConfig),
  );
}

export function getAllPromptsPromptConfigFromJSON(
  jsonString: string,
): SafeParseResult<GetAllPromptsPromptConfig, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetAllPromptsPromptConfig$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetAllPromptsPromptConfig' from JSON`,
  );
}

/** @internal */
export const GetAllPromptsUseCases$inboundSchema: z.ZodNativeEnum<
  typeof GetAllPromptsUseCases
> = z.nativeEnum(GetAllPromptsUseCases);

/** @internal */
export const GetAllPromptsUseCases$outboundSchema: z.ZodNativeEnum<
  typeof GetAllPromptsUseCases
> = GetAllPromptsUseCases$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPromptsUseCases$ {
  /** @deprecated use `GetAllPromptsUseCases$inboundSchema` instead. */
  export const inboundSchema = GetAllPromptsUseCases$inboundSchema;
  /** @deprecated use `GetAllPromptsUseCases$outboundSchema` instead. */
  export const outboundSchema = GetAllPromptsUseCases$outboundSchema;
}

/** @internal */
export const GetAllPromptsLanguage$inboundSchema: z.ZodNativeEnum<
  typeof GetAllPromptsLanguage
> = z.nativeEnum(GetAllPromptsLanguage);

/** @internal */
export const GetAllPromptsLanguage$outboundSchema: z.ZodNativeEnum<
  typeof GetAllPromptsLanguage
> = GetAllPromptsLanguage$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPromptsLanguage$ {
  /** @deprecated use `GetAllPromptsLanguage$inboundSchema` instead. */
  export const inboundSchema = GetAllPromptsLanguage$inboundSchema;
  /** @deprecated use `GetAllPromptsLanguage$outboundSchema` instead. */
  export const outboundSchema = GetAllPromptsLanguage$outboundSchema;
}

/** @internal */
export const GetAllPromptsMetadata$inboundSchema: z.ZodType<
  GetAllPromptsMetadata,
  z.ZodTypeDef,
  unknown
> = z.object({
  use_cases: z.array(GetAllPromptsUseCases$inboundSchema).optional(),
  language: GetAllPromptsLanguage$inboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    "use_cases": "useCases",
  });
});

/** @internal */
export type GetAllPromptsMetadata$Outbound = {
  use_cases?: Array<string> | undefined;
  language?: string | undefined;
};

/** @internal */
export const GetAllPromptsMetadata$outboundSchema: z.ZodType<
  GetAllPromptsMetadata$Outbound,
  z.ZodTypeDef,
  GetAllPromptsMetadata
> = z.object({
  useCases: z.array(GetAllPromptsUseCases$outboundSchema).optional(),
  language: GetAllPromptsLanguage$outboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    useCases: "use_cases",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPromptsMetadata$ {
  /** @deprecated use `GetAllPromptsMetadata$inboundSchema` instead. */
  export const inboundSchema = GetAllPromptsMetadata$inboundSchema;
  /** @deprecated use `GetAllPromptsMetadata$outboundSchema` instead. */
  export const outboundSchema = GetAllPromptsMetadata$outboundSchema;
  /** @deprecated use `GetAllPromptsMetadata$Outbound` instead. */
  export type Outbound = GetAllPromptsMetadata$Outbound;
}

export function getAllPromptsMetadataToJSON(
  getAllPromptsMetadata: GetAllPromptsMetadata,
): string {
  return JSON.stringify(
    GetAllPromptsMetadata$outboundSchema.parse(getAllPromptsMetadata),
  );
}

export function getAllPromptsMetadataFromJSON(
  jsonString: string,
): SafeParseResult<GetAllPromptsMetadata, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetAllPromptsMetadata$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetAllPromptsMetadata' from JSON`,
  );
}

/** @internal */
export const GetAllPromptsData$inboundSchema: z.ZodType<
  GetAllPromptsData,
  z.ZodTypeDef,
  unknown
> = z.object({
  _id: z.string(),
  type: GetAllPromptsType$inboundSchema,
  owner: z.string(),
  domain_id: z.string(),
  created: z.string(),
  updated: z.string(),
  created_by_id: z.nullable(z.string()).optional(),
  updated_by_id: z.nullable(z.string()).optional(),
  display_name: z.string(),
  description: z.nullable(z.string()).optional(),
  prompt_config: z.lazy(() => GetAllPromptsPromptConfig$inboundSchema),
  metadata: z.lazy(() => GetAllPromptsMetadata$inboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    "_id": "id",
    "domain_id": "domainId",
    "created_by_id": "createdById",
    "updated_by_id": "updatedById",
    "display_name": "displayName",
    "prompt_config": "promptConfig",
  });
});

/** @internal */
export type GetAllPromptsData$Outbound = {
  _id: string;
  type: string;
  owner: string;
  domain_id: string;
  created: string;
  updated: string;
  created_by_id?: string | null | undefined;
  updated_by_id?: string | null | undefined;
  display_name: string;
  description?: string | null | undefined;
  prompt_config: GetAllPromptsPromptConfig$Outbound;
  metadata?: GetAllPromptsMetadata$Outbound | undefined;
};

/** @internal */
export const GetAllPromptsData$outboundSchema: z.ZodType<
  GetAllPromptsData$Outbound,
  z.ZodTypeDef,
  GetAllPromptsData
> = z.object({
  id: z.string(),
  type: GetAllPromptsType$outboundSchema,
  owner: z.string(),
  domainId: z.string(),
  created: z.string(),
  updated: z.string(),
  createdById: z.nullable(z.string()).optional(),
  updatedById: z.nullable(z.string()).optional(),
  displayName: z.string(),
  description: z.nullable(z.string()).optional(),
  promptConfig: z.lazy(() => GetAllPromptsPromptConfig$outboundSchema),
  metadata: z.lazy(() => GetAllPromptsMetadata$outboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    id: "_id",
    domainId: "domain_id",
    createdById: "created_by_id",
    updatedById: "updated_by_id",
    displayName: "display_name",
    promptConfig: "prompt_config",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPromptsData$ {
  /** @deprecated use `GetAllPromptsData$inboundSchema` instead. */
  export const inboundSchema = GetAllPromptsData$inboundSchema;
  /** @deprecated use `GetAllPromptsData$outboundSchema` instead. */
  export const outboundSchema = GetAllPromptsData$outboundSchema;
  /** @deprecated use `GetAllPromptsData$Outbound` instead. */
  export type Outbound = GetAllPromptsData$Outbound;
}

export function getAllPromptsDataToJSON(
  getAllPromptsData: GetAllPromptsData,
): string {
  return JSON.stringify(
    GetAllPromptsData$outboundSchema.parse(getAllPromptsData),
  );
}

export function getAllPromptsDataFromJSON(
  jsonString: string,
): SafeParseResult<GetAllPromptsData, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetAllPromptsData$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetAllPromptsData' from JSON`,
  );
}

/** @internal */
export const GetAllPromptsResponseBody$inboundSchema: z.ZodType<
  GetAllPromptsResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  object: GetAllPromptsObject$inboundSchema,
  data: z.array(z.lazy(() => GetAllPromptsData$inboundSchema)),
  has_more: z.boolean(),
}).transform((v) => {
  return remap$(v, {
    "has_more": "hasMore",
  });
});

/** @internal */
export type GetAllPromptsResponseBody$Outbound = {
  object: string;
  data: Array<GetAllPromptsData$Outbound>;
  has_more: boolean;
};

/** @internal */
export const GetAllPromptsResponseBody$outboundSchema: z.ZodType<
  GetAllPromptsResponseBody$Outbound,
  z.ZodTypeDef,
  GetAllPromptsResponseBody
> = z.object({
  object: GetAllPromptsObject$outboundSchema,
  data: z.array(z.lazy(() => GetAllPromptsData$outboundSchema)),
  hasMore: z.boolean(),
}).transform((v) => {
  return remap$(v, {
    hasMore: "has_more",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPromptsResponseBody$ {
  /** @deprecated use `GetAllPromptsResponseBody$inboundSchema` instead. */
  export const inboundSchema = GetAllPromptsResponseBody$inboundSchema;
  /** @deprecated use `GetAllPromptsResponseBody$outboundSchema` instead. */
  export const outboundSchema = GetAllPromptsResponseBody$outboundSchema;
  /** @deprecated use `GetAllPromptsResponseBody$Outbound` instead. */
  export type Outbound = GetAllPromptsResponseBody$Outbound;
}

export function getAllPromptsResponseBodyToJSON(
  getAllPromptsResponseBody: GetAllPromptsResponseBody,
): string {
  return JSON.stringify(
    GetAllPromptsResponseBody$outboundSchema.parse(getAllPromptsResponseBody),
  );
}

export function getAllPromptsResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<GetAllPromptsResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetAllPromptsResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetAllPromptsResponseBody' from JSON`,
  );
}
