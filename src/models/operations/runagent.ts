/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * Tool message
 */
export const RunAgentRoleToolMessage = {
  Tool: "tool",
} as const;
/**
 * Tool message
 */
export type RunAgentRoleToolMessage = ClosedEnum<
  typeof RunAgentRoleToolMessage
>;

/**
 * User message
 */
export const RunAgentRoleUserMessage = {
  User: "user",
} as const;
/**
 * User message
 */
export type RunAgentRoleUserMessage = ClosedEnum<
  typeof RunAgentRoleUserMessage
>;

/**
 * Message role (user or tool for continuing executions)
 */
export type RunAgentRole = RunAgentRoleUserMessage | RunAgentRoleToolMessage;

export const RunAgentPublicMessagePartAgentsRequestKind = {
  ToolResult: "tool_result",
} as const;
export type RunAgentPublicMessagePartAgentsRequestKind = ClosedEnum<
  typeof RunAgentPublicMessagePartAgentsRequestKind
>;

/**
 * Tool execution result part. Use this ONLY when providing results for a pending tool call from the agent. The tool_call_id must match the ID from the agent's tool call request.
 */
export type PublicMessagePartToolResultPart = {
  kind: RunAgentPublicMessagePartAgentsRequestKind;
  toolCallId: string;
  result?: any | undefined;
  metadata?: { [k: string]: any } | undefined;
};

export const RunAgentPublicMessagePartAgentsKind = {
  File: "file",
} as const;
export type RunAgentPublicMessagePartAgentsKind = ClosedEnum<
  typeof RunAgentPublicMessagePartAgentsKind
>;

/**
 * File in URI format. Check in the model's documentation for the supported mime types for the URI format
 */
export type FileFileInURIFormat = {
  /**
   * URL for the File content
   */
  uri: string;
  /**
   * Optional mimeType for the file
   */
  mimeType?: string | undefined;
  /**
   * Optional name for the file
   */
  name?: string | undefined;
};

/**
 * Binary in base64 format. Check in the model's documentation for the supported mime types for the binary format.
 */
export type FileBinaryFormat = {
  /**
   * base64 encoded content of the file
   */
  bytes: string;
  /**
   * Optional mimeType for the file
   */
  mimeType?: string | undefined;
  /**
   * Optional name for the file
   */
  name?: string | undefined;
};

export type RunAgentPublicMessagePartFile =
  | FileBinaryFormat
  | FileFileInURIFormat;

/**
 * File attachment part. Use this to send files (images, documents, etc.) to the agent for processing.
 */
export type PublicMessagePartFilePart = {
  kind: RunAgentPublicMessagePartAgentsKind;
  file: FileBinaryFormat | FileFileInURIFormat;
  metadata?: { [k: string]: any } | undefined;
};

export const RunAgentPublicMessagePartKind = {
  Text: "text",
} as const;
export type RunAgentPublicMessagePartKind = ClosedEnum<
  typeof RunAgentPublicMessagePartKind
>;

/**
 * Text content part. Use this to send text messages to the agent.
 */
export type PublicMessagePartTextPart = {
  kind: RunAgentPublicMessagePartKind;
  text: string;
};

/**
 * Message part that can be provided by users. Use "text" for regular messages, "file" for attachments, or "tool_result" when responding to tool call requests.
 */
export type RunAgentPublicMessagePart =
  | PublicMessagePartTextPart
  | PublicMessagePartFilePart
  | PublicMessagePartToolResultPart;

/**
 * The A2A format message containing the task for the agent to perform.
 */
export type RunAgentMessage = {
  /**
   * Optional A2A message ID in ULID format
   */
  messageId?: string | undefined;
  /**
   * Message role (user or tool for continuing executions)
   */
  role: RunAgentRoleUserMessage | RunAgentRoleToolMessage;
  /**
   * A2A message parts (text, file, or tool_result only)
   */
  parts: Array<
    | PublicMessagePartTextPart
    | PublicMessagePartFilePart
    | PublicMessagePartToolResultPart
  >;
};

/**
 * Information about the contact making the request. If the contact does not exist, it will be created automatically.
 */
export type RunAgentContact = {
  /**
   * Unique identifier for the contact
   */
  id: string;
  /**
   * Display name of the contact
   */
  displayName?: string | undefined;
  /**
   * Email address of the contact
   */
  email?: string | undefined;
  /**
   * A hash of key/value pairs containing any other data about the contact
   */
  metadata?: Array<{ [k: string]: any }> | undefined;
  /**
   * URL to the contact's avatar or logo
   */
  logoUrl?: string | undefined;
  /**
   * A list of tags associated with the contact
   */
  tags?: Array<string> | undefined;
};

/**
 * Thread information to group related requests
 */
export type RunAgentThread = {
  /**
   * Unique thread identifier to group related invocations.
   */
  id: string;
  /**
   * Optional tags to differentiate or categorize threads
   */
  tags?: Array<string> | undefined;
};

/**
 * Memory configuration for the agent execution. Used to associate memory stores with specific entities like users or sessions.
 */
export type RunAgentMemory = {
  /**
   * An entity ID used to link memory stores to a specific user, session, or conversation. This ID is used to isolate and retrieve memories specific to the entity across agent executions.
   */
  entityId: string;
};

export type RunAgentKnowledgeBases = {
  /**
   * Unique identifier of the knowledge base to search
   */
  knowledgeId: string;
};

export type RunAgentTeamOfAgents = {
  /**
   * The unique key of the agent within the workspace
   */
  key: string;
  /**
   * The role of the agent in this context. This is used to give extra information to the leader to help it decide which agent to hand off to.
   */
  role?: string | undefined;
};

export const RunAgentAgentToolInputRunAgentsRequestRequestBodySettingsTools14Type =
  {
    Function: "function",
  } as const;
export type RunAgentAgentToolInputRunAgentsRequestRequestBodySettingsTools14Type =
  ClosedEnum<
    typeof RunAgentAgentToolInputRunAgentsRequestRequestBodySettingsTools14Type
  >;

export type AgentToolInputRunFunction = {
  /**
   * The name of the function to be called. Must be a-z, A-Z, 0-9, or contain underscores and dashes, with a maximum length of 64.
   */
  name: string;
  /**
   * A description of what the function does, used by the model to choose when and how to call the function.
   */
  description?: string | undefined;
  /**
   * Whether to enable strict schema adherence when generating the function call. If set to true, the model will follow the exact schema defined in the `parameters` field. Only a subset of JSON Schema is supported when `strict` is `true`. Currently only compatible with `OpenAI` models.
   */
  strict?: boolean | undefined;
  /**
   * The parameters the functions accepts, described as a JSON Schema object. See the `OpenAI` [guide](https://platform.openai.com/docs/guides/function-calling) for examples, and the [JSON Schema reference](https://json-schema.org/understanding-json-schema/) for documentation about the format.
   */
  parameters?: { [k: string]: any } | undefined;
};

/**
 * Function tool with inline definition for on-the-fly creation in run endpoint
 */
export type FunctionToolRun = {
  type: RunAgentAgentToolInputRunAgentsRequestRequestBodySettingsTools14Type;
  /**
   * Unique key of the tool as it will be displayed in the UI
   */
  key: string;
  id?: string | undefined;
  displayName?: string | undefined;
  description?: string | undefined;
  function: AgentToolInputRunFunction;
  requiresApproval?: boolean | undefined;
};

export const RunAgentAgentToolInputRunAgentsRequestRequestBodySettingsTools13Type =
  {
    Code: "code",
  } as const;
export type RunAgentAgentToolInputRunAgentsRequestRequestBodySettingsTools13Type =
  ClosedEnum<
    typeof RunAgentAgentToolInputRunAgentsRequestRequestBodySettingsTools13Type
  >;

export const Language = {
  Python: "python",
} as const;
export type Language = ClosedEnum<typeof Language>;

export type CodeTool = {
  /**
   * The parameters the functions accepts, described as a JSON Schema object. See the `OpenAI` [guide](https://platform.openai.com/docs/guides/function-calling) for examples, and the [JSON Schema reference](https://json-schema.org/understanding-json-schema/) for documentation about the format.
   */
  parameters?: { [k: string]: any } | undefined;
  language: Language;
  /**
   * The code to execute.
   */
  code: string;
};

/**
 * Code execution tool with inline definition for on-the-fly creation in run endpoint
 */
export type CodeToolRun = {
  type: RunAgentAgentToolInputRunAgentsRequestRequestBodySettingsTools13Type;
  /**
   * Unique key of the tool as it will be displayed in the UI
   */
  key: string;
  id?: string | undefined;
  displayName?: string | undefined;
  /**
   * A description of the tool, used by the model to choose when and how to call the tool. We do recommend using the `description` field as accurate as possible to give enough context to the model to make the right decision.
   */
  description: string;
  codeTool: CodeTool;
  requiresApproval?: boolean | undefined;
};

export const RunAgentAgentToolInputRunAgentsRequestRequestBodySettingsTools12Type =
  {
    Http: "http",
  } as const;
export type RunAgentAgentToolInputRunAgentsRequestRequestBodySettingsTools12Type =
  ClosedEnum<
    typeof RunAgentAgentToolInputRunAgentsRequestRequestBodySettingsTools12Type
  >;

/**
 * The HTTP method to use.
 */
export const Method = {
  Get: "GET",
  Post: "POST",
  Put: "PUT",
  Delete: "DELETE",
} as const;
/**
 * The HTTP method to use.
 */
export type Method = ClosedEnum<typeof Method>;

/**
 * The blueprint for the HTTP request. The `arguments` field will be used to replace the placeholders in the `url`, `headers`, `body`, and `arguments` fields.
 */
export type Blueprint = {
  /**
   * The URL to send the request to.
   */
  url: string;
  /**
   * The HTTP method to use.
   */
  method: Method;
  /**
   * The headers to send with the request.
   */
  headers?: { [k: string]: string } | undefined;
  /**
   * The body to send with the request.
   */
  body?: { [k: string]: any } | undefined;
};

/**
 * The type of the argument.
 */
export const RunAgentAgentToolInputRunAgentsRequestRequestBodySettingsTools12HttpType =
  {
    String: "string",
    Number: "number",
    Boolean: "boolean",
  } as const;
/**
 * The type of the argument.
 */
export type RunAgentAgentToolInputRunAgentsRequestRequestBodySettingsTools12HttpType =
  ClosedEnum<
    typeof RunAgentAgentToolInputRunAgentsRequestRequestBodySettingsTools12HttpType
  >;

/**
 * The default value of the argument.
 */
export type DefaultValue = string | number | boolean;

export type Arguments = {
  /**
   * The type of the argument.
   */
  type:
    RunAgentAgentToolInputRunAgentsRequestRequestBodySettingsTools12HttpType;
  /**
   * A description of the argument.
   */
  description: string;
  /**
   * Whether to send the argument to the model. If set to false, the argument will not be sent to the model and needs to be provided by the user or it will be left blank.
   */
  sendToModel?: boolean | undefined;
  /**
   * The default value of the argument.
   */
  defaultValue?: string | number | boolean | undefined;
};

export type Http = {
  /**
   * The blueprint for the HTTP request. The `arguments` field will be used to replace the placeholders in the `url`, `headers`, `body`, and `arguments` fields.
   */
  blueprint: Blueprint;
  /**
   * The arguments to send with the request. The keys will be used to replace the placeholders in the `blueprint` field.
   */
  arguments?: { [k: string]: Arguments } | undefined;
};

/**
 * HTTP tool with inline definition for on-the-fly creation in run endpoint
 */
export type HTTPToolRun = {
  type: RunAgentAgentToolInputRunAgentsRequestRequestBodySettingsTools12Type;
  /**
   * Unique key of the tool as it will be displayed in the UI
   */
  key: string;
  id?: string | undefined;
  displayName?: string | undefined;
  /**
   * A description of the tool, used by the model to choose when and how to call the tool. We do recommend using the `description` field as accurate as possible to give enough context to the model to make the right decision.
   */
  description: string;
  http: Http;
  requiresApproval?: boolean | undefined;
};

export const RunAgentAgentToolInputRunAgentsRequestRequestBodySettingsTools11Type =
  {
    CurrentDate: "current_date",
  } as const;
export type RunAgentAgentToolInputRunAgentsRequestRequestBodySettingsTools11Type =
  ClosedEnum<
    typeof RunAgentAgentToolInputRunAgentsRequestRequestBodySettingsTools11Type
  >;

/**
 * Returns the current date and time
 */
export type AgentToolInputRunCurrentDateTool = {
  type: RunAgentAgentToolInputRunAgentsRequestRequestBodySettingsTools11Type;
  /**
   * Whether this tool requires approval before execution
   */
  requiresApproval?: boolean | undefined;
};

export const RunAgentAgentToolInputRunAgentsRequestRequestBodySettingsTools10Type =
  {
    QueryKnowledgeBase: "query_knowledge_base",
  } as const;
export type RunAgentAgentToolInputRunAgentsRequestRequestBodySettingsTools10Type =
  ClosedEnum<
    typeof RunAgentAgentToolInputRunAgentsRequestRequestBodySettingsTools10Type
  >;

/**
 * Queries knowledge bases for information
 */
export type AgentToolInputRunQueryKnowledgeBaseTool = {
  type: RunAgentAgentToolInputRunAgentsRequestRequestBodySettingsTools10Type;
  /**
   * Whether this tool requires approval before execution
   */
  requiresApproval?: boolean | undefined;
};

export const RunAgentAgentToolInputRunAgentsRequestRequestBodySettingsTools9Type =
  {
    RetrieveKnowledgeBases: "retrieve_knowledge_bases",
  } as const;
export type RunAgentAgentToolInputRunAgentsRequestRequestBodySettingsTools9Type =
  ClosedEnum<
    typeof RunAgentAgentToolInputRunAgentsRequestRequestBodySettingsTools9Type
  >;

/**
 * Lists available knowledge bases
 */
export type AgentToolInputRunRetrieveKnowledgeBasesTool = {
  type: RunAgentAgentToolInputRunAgentsRequestRequestBodySettingsTools9Type;
  /**
   * Whether this tool requires approval before execution
   */
  requiresApproval?: boolean | undefined;
};

export const RunAgentAgentToolInputRunAgentsRequestRequestBodySettingsTools8Type =
  {
    DeleteMemoryDocument: "delete_memory_document",
  } as const;
export type RunAgentAgentToolInputRunAgentsRequestRequestBodySettingsTools8Type =
  ClosedEnum<
    typeof RunAgentAgentToolInputRunAgentsRequestRequestBodySettingsTools8Type
  >;

/**
 * Deletes documents from memory stores
 */
export type AgentToolInputRunDeleteMemoryDocumentTool = {
  type: RunAgentAgentToolInputRunAgentsRequestRequestBodySettingsTools8Type;
  /**
   * Whether this tool requires approval before execution
   */
  requiresApproval?: boolean | undefined;
};

export const RunAgentAgentToolInputRunAgentsRequestRequestBodySettingsToolsType =
  {
    RetrieveMemoryStores: "retrieve_memory_stores",
  } as const;
export type RunAgentAgentToolInputRunAgentsRequestRequestBodySettingsToolsType =
  ClosedEnum<
    typeof RunAgentAgentToolInputRunAgentsRequestRequestBodySettingsToolsType
  >;

/**
 * Lists available memory stores
 */
export type AgentToolInputRunRetrieveMemoryStoresTool = {
  type: RunAgentAgentToolInputRunAgentsRequestRequestBodySettingsToolsType;
  /**
   * Whether this tool requires approval before execution
   */
  requiresApproval?: boolean | undefined;
};

export const RunAgentAgentToolInputRunAgentsRequestRequestBodySettingsType = {
  WriteMemoryStore: "write_memory_store",
} as const;
export type RunAgentAgentToolInputRunAgentsRequestRequestBodySettingsType =
  ClosedEnum<
    typeof RunAgentAgentToolInputRunAgentsRequestRequestBodySettingsType
  >;

/**
 * Writes information to agent memory stores
 */
export type AgentToolInputRunWriteMemoryStoreTool = {
  type: RunAgentAgentToolInputRunAgentsRequestRequestBodySettingsType;
  /**
   * Whether this tool requires approval before execution
   */
  requiresApproval?: boolean | undefined;
};

export const RunAgentAgentToolInputRunAgentsRequestRequestBodyType = {
  QueryMemoryStore: "query_memory_store",
} as const;
export type RunAgentAgentToolInputRunAgentsRequestRequestBodyType = ClosedEnum<
  typeof RunAgentAgentToolInputRunAgentsRequestRequestBodyType
>;

/**
 * Queries agent memory stores for context
 */
export type AgentToolInputRunQueryMemoryStoreTool = {
  type: RunAgentAgentToolInputRunAgentsRequestRequestBodyType;
  /**
   * Whether this tool requires approval before execution
   */
  requiresApproval?: boolean | undefined;
};

export const RunAgentAgentToolInputRunAgentsRequestType = {
  RetrieveAgents: "retrieve_agents",
} as const;
export type RunAgentAgentToolInputRunAgentsRequestType = ClosedEnum<
  typeof RunAgentAgentToolInputRunAgentsRequestType
>;

/**
 * Retrieves available agents in the system
 */
export type AgentToolInputRunRetrieveAgentsTool = {
  type: RunAgentAgentToolInputRunAgentsRequestType;
  /**
   * Whether this tool requires approval before execution
   */
  requiresApproval?: boolean | undefined;
};

export const RunAgentAgentToolInputRunAgentsType = {
  CallSubAgent: "call_sub_agent",
} as const;
export type RunAgentAgentToolInputRunAgentsType = ClosedEnum<
  typeof RunAgentAgentToolInputRunAgentsType
>;

/**
 * Delegates tasks to specialized sub-agents
 */
export type AgentToolInputRunCallSubAgentTool = {
  type: RunAgentAgentToolInputRunAgentsType;
  /**
   * Whether this tool requires approval before execution
   */
  requiresApproval?: boolean | undefined;
};

export const RunAgentAgentToolInputRunType = {
  WebScraper: "web_scraper",
} as const;
export type RunAgentAgentToolInputRunType = ClosedEnum<
  typeof RunAgentAgentToolInputRunType
>;

/**
 * Scrapes and extracts content from web pages
 */
export type AgentToolInputRunWebScraperTool = {
  type: RunAgentAgentToolInputRunType;
  /**
   * Whether this tool requires approval before execution
   */
  requiresApproval?: boolean | undefined;
};

export const AgentToolInputRunType = {
  GoogleSearch: "google_search",
} as const;
export type AgentToolInputRunType = ClosedEnum<typeof AgentToolInputRunType>;

/**
 * Performs Google searches to retrieve web content
 */
export type AgentToolInputRunGoogleSearchTool = {
  type: AgentToolInputRunType;
  /**
   * Whether this tool requires approval before execution
   */
  requiresApproval?: boolean | undefined;
};

/**
 * Tool configuration for agent run operations. Built-in tools only require a type and requires_approval, while custom tools (http, code, function) support full inline definitions for on-the-fly creation.
 */
export type AgentToolInputRun =
  | HTTPToolRun
  | CodeToolRun
  | FunctionToolRun
  | AgentToolInputRunGoogleSearchTool
  | AgentToolInputRunWebScraperTool
  | AgentToolInputRunCallSubAgentTool
  | AgentToolInputRunRetrieveAgentsTool
  | AgentToolInputRunQueryMemoryStoreTool
  | AgentToolInputRunWriteMemoryStoreTool
  | AgentToolInputRunRetrieveMemoryStoresTool
  | AgentToolInputRunDeleteMemoryDocumentTool
  | AgentToolInputRunRetrieveKnowledgeBasesTool
  | AgentToolInputRunQueryKnowledgeBaseTool
  | AgentToolInputRunCurrentDateTool;

/**
 * If all, the agent will require approval for all tools. If respect_tool, the agent will require approval for tools that have the requires_approval flag set to true. If none, the agent will not require approval for any tools.
 */
export const RunAgentToolApprovalRequired = {
  All: "all",
  RespectTool: "respect_tool",
  None: "none",
} as const;
/**
 * If all, the agent will require approval for all tools. If respect_tool, the agent will require approval for tools that have the requires_approval flag set to true. If none, the agent will not require approval for any tools.
 */
export type RunAgentToolApprovalRequired = ClosedEnum<
  typeof RunAgentToolApprovalRequired
>;

export type RunAgentSettings = {
  /**
   * Tools available to the agent
   */
  tools: Array<
    | HTTPToolRun
    | CodeToolRun
    | FunctionToolRun
    | AgentToolInputRunGoogleSearchTool
    | AgentToolInputRunWebScraperTool
    | AgentToolInputRunCallSubAgentTool
    | AgentToolInputRunRetrieveAgentsTool
    | AgentToolInputRunQueryMemoryStoreTool
    | AgentToolInputRunWriteMemoryStoreTool
    | AgentToolInputRunRetrieveMemoryStoresTool
    | AgentToolInputRunDeleteMemoryDocumentTool
    | AgentToolInputRunRetrieveKnowledgeBasesTool
    | AgentToolInputRunQueryKnowledgeBaseTool
    | AgentToolInputRunCurrentDateTool
  >;
  /**
   * If all, the agent will require approval for all tools. If respect_tool, the agent will require approval for tools that have the requires_approval flag set to true. If none, the agent will not require approval for any tools.
   */
  toolApprovalRequired?: RunAgentToolApprovalRequired | undefined;
  /**
   * Maximum iterations(llm calls) before the agent will stop executing.
   */
  maxIterations?: number | undefined;
  /**
   * Maximum time (in seconds) for the agent thinking process. This does not include the time for tool calls and sub agent calls. It will be loosely enforced, the in progress LLM calls will not be terminated and the last assistant message will be returned.
   */
  maxExecutionTime?: number | undefined;
};

export type RunAgentRequestBody = {
  /**
   * A unique identifier for the agent. This key must be unique within the same workspace and cannot be reused. When executing the agent, this key determines if the agent already exists. If the agent version differs, a new version is created at the end of the execution, except for the task. All agent parameters are evaluated to decide if a new version is needed.
   */
  key: string;
  /**
   * Optional task ID to continue an existing agent execution. When provided, the agent will continue the conversation from the existing task state. The task must be in an inactive state to continue.
   */
  taskId?: string | undefined;
  /**
   * The language model that powers the agent. The model must support tool calling capabilities.
   */
  model: string;
  /**
   * Optional array of fallback model IDs to use when the primary model fails. Models are tried in order. All models must support tool calling capabilities.
   */
  fallbackModels?: Array<string> | undefined;
  /**
   * Specifies the agent's function and area of expertise.
   */
  role: string;
  /**
   * Provides context and purpose for the agent. Combined with the system prompt template to generate the agent's instructions.
   */
  instructions: string;
  /**
   * The A2A format message containing the task for the agent to perform.
   */
  message: RunAgentMessage;
  /**
   * Optional variables for template replacement in system prompt, instructions, and messages
   */
  variables?: { [k: string]: any } | undefined;
  /**
   * Information about the contact making the request. If the contact does not exist, it will be created automatically.
   */
  contact?: RunAgentContact | undefined;
  /**
   * Thread information to group related requests
   */
  thread?: RunAgentThread | undefined;
  /**
   * Memory configuration for the agent execution. Used to associate memory stores with specific entities like users or sessions.
   */
  memory?: RunAgentMemory | undefined;
  /**
   * The path where the entity is stored in the project structure. The first element of the path always represents the project name. Any subsequent path element after the project will be created as a folder in the project if it does not exists.
   */
  path: string;
  /**
   * A brief summary of the agent's purpose.
   */
  description?: string | undefined;
  /**
   * A custom system prompt template for the agent. If omitted, the default template is used.
   */
  systemPrompt?: string | undefined;
  /**
   * The list of keys of the memory stores that are accessible to the agent.
   */
  memoryStores?: Array<string> | undefined;
  /**
   * Knowledge base configurations for the agent to access
   */
  knowledgeBases?: Array<RunAgentKnowledgeBases> | undefined;
  /**
   * The agents that are accessible to this orchestrator. The main agent can hand off to these agents to perform tasks.
   */
  teamOfAgents?: Array<RunAgentTeamOfAgents> | undefined;
  settings: RunAgentSettings;
  /**
   * Optional metadata for the agent run as key-value pairs that will be included in traces
   */
  metadata?: { [k: string]: any } | undefined;
};

/**
 * A2A entity type
 */
export const RunAgentKind = {
  Task: "task",
} as const;
/**
 * A2A entity type
 */
export type RunAgentKind = ClosedEnum<typeof RunAgentKind>;

/**
 * Current task state
 */
export const RunAgentState = {
  Submitted: "submitted",
  Working: "working",
  InputRequired: "input-required",
  Completed: "completed",
  Failed: "failed",
  Canceled: "canceled",
  Rejected: "rejected",
  AuthRequired: "auth-required",
  Unknown: "unknown",
} as const;
/**
 * Current task state
 */
export type RunAgentState = ClosedEnum<typeof RunAgentState>;

export const RunAgentAgentsKind = {
  Message: "message",
} as const;
export type RunAgentAgentsKind = ClosedEnum<typeof RunAgentAgentsKind>;

/**
 * Extended A2A message role
 */
export const RunAgentAgentsRole = {
  User: "user",
  Agent: "agent",
  Tool: "tool",
  System: "system",
} as const;
/**
 * Extended A2A message role
 */
export type RunAgentAgentsRole = ClosedEnum<typeof RunAgentAgentsRole>;

/**
 * Optional status message
 */
export type RunAgentAgentsMessage = {
  kind: RunAgentAgentsKind;
  messageId: string;
  /**
   * Extended A2A message role
   */
  role: RunAgentAgentsRole;
  parts: Array<any>;
};

/**
 * Task status information
 */
export type RunAgentStatus = {
  /**
   * Current task state
   */
  state: RunAgentState;
  /**
   * ISO timestamp of status update
   */
  timestamp?: string | undefined;
  /**
   * Optional status message
   */
  message?: RunAgentAgentsMessage | undefined;
};

/**
 * A2A Task response format
 */
export type RunAgentResponseBody = {
  /**
   * The ID of the created agent execution task
   */
  id: string;
  /**
   * The correlation ID for this execution
   */
  contextId: string;
  /**
   * A2A entity type
   */
  kind: RunAgentKind;
  /**
   * Task status information
   */
  status: RunAgentStatus;
  /**
   * Task metadata containing workspace_id and trace_id for feedback
   */
  metadata?: { [k: string]: any } | undefined;
};

/** @internal */
export const RunAgentRoleToolMessage$inboundSchema: z.ZodNativeEnum<
  typeof RunAgentRoleToolMessage
> = z.nativeEnum(RunAgentRoleToolMessage);

/** @internal */
export const RunAgentRoleToolMessage$outboundSchema: z.ZodNativeEnum<
  typeof RunAgentRoleToolMessage
> = RunAgentRoleToolMessage$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RunAgentRoleToolMessage$ {
  /** @deprecated use `RunAgentRoleToolMessage$inboundSchema` instead. */
  export const inboundSchema = RunAgentRoleToolMessage$inboundSchema;
  /** @deprecated use `RunAgentRoleToolMessage$outboundSchema` instead. */
  export const outboundSchema = RunAgentRoleToolMessage$outboundSchema;
}

/** @internal */
export const RunAgentRoleUserMessage$inboundSchema: z.ZodNativeEnum<
  typeof RunAgentRoleUserMessage
> = z.nativeEnum(RunAgentRoleUserMessage);

/** @internal */
export const RunAgentRoleUserMessage$outboundSchema: z.ZodNativeEnum<
  typeof RunAgentRoleUserMessage
> = RunAgentRoleUserMessage$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RunAgentRoleUserMessage$ {
  /** @deprecated use `RunAgentRoleUserMessage$inboundSchema` instead. */
  export const inboundSchema = RunAgentRoleUserMessage$inboundSchema;
  /** @deprecated use `RunAgentRoleUserMessage$outboundSchema` instead. */
  export const outboundSchema = RunAgentRoleUserMessage$outboundSchema;
}

/** @internal */
export const RunAgentRole$inboundSchema: z.ZodType<
  RunAgentRole,
  z.ZodTypeDef,
  unknown
> = z.union([
  RunAgentRoleUserMessage$inboundSchema,
  RunAgentRoleToolMessage$inboundSchema,
]);

/** @internal */
export type RunAgentRole$Outbound = string | string;

/** @internal */
export const RunAgentRole$outboundSchema: z.ZodType<
  RunAgentRole$Outbound,
  z.ZodTypeDef,
  RunAgentRole
> = z.union([
  RunAgentRoleUserMessage$outboundSchema,
  RunAgentRoleToolMessage$outboundSchema,
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RunAgentRole$ {
  /** @deprecated use `RunAgentRole$inboundSchema` instead. */
  export const inboundSchema = RunAgentRole$inboundSchema;
  /** @deprecated use `RunAgentRole$outboundSchema` instead. */
  export const outboundSchema = RunAgentRole$outboundSchema;
  /** @deprecated use `RunAgentRole$Outbound` instead. */
  export type Outbound = RunAgentRole$Outbound;
}

export function runAgentRoleToJSON(runAgentRole: RunAgentRole): string {
  return JSON.stringify(RunAgentRole$outboundSchema.parse(runAgentRole));
}

export function runAgentRoleFromJSON(
  jsonString: string,
): SafeParseResult<RunAgentRole, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => RunAgentRole$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RunAgentRole' from JSON`,
  );
}

/** @internal */
export const RunAgentPublicMessagePartAgentsRequestKind$inboundSchema:
  z.ZodNativeEnum<typeof RunAgentPublicMessagePartAgentsRequestKind> = z
    .nativeEnum(RunAgentPublicMessagePartAgentsRequestKind);

/** @internal */
export const RunAgentPublicMessagePartAgentsRequestKind$outboundSchema:
  z.ZodNativeEnum<typeof RunAgentPublicMessagePartAgentsRequestKind> =
    RunAgentPublicMessagePartAgentsRequestKind$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RunAgentPublicMessagePartAgentsRequestKind$ {
  /** @deprecated use `RunAgentPublicMessagePartAgentsRequestKind$inboundSchema` instead. */
  export const inboundSchema =
    RunAgentPublicMessagePartAgentsRequestKind$inboundSchema;
  /** @deprecated use `RunAgentPublicMessagePartAgentsRequestKind$outboundSchema` instead. */
  export const outboundSchema =
    RunAgentPublicMessagePartAgentsRequestKind$outboundSchema;
}

/** @internal */
export const PublicMessagePartToolResultPart$inboundSchema: z.ZodType<
  PublicMessagePartToolResultPart,
  z.ZodTypeDef,
  unknown
> = z.object({
  kind: RunAgentPublicMessagePartAgentsRequestKind$inboundSchema,
  tool_call_id: z.string(),
  result: z.any().optional(),
  metadata: z.record(z.any()).optional(),
}).transform((v) => {
  return remap$(v, {
    "tool_call_id": "toolCallId",
  });
});

/** @internal */
export type PublicMessagePartToolResultPart$Outbound = {
  kind: string;
  tool_call_id: string;
  result?: any | undefined;
  metadata?: { [k: string]: any } | undefined;
};

/** @internal */
export const PublicMessagePartToolResultPart$outboundSchema: z.ZodType<
  PublicMessagePartToolResultPart$Outbound,
  z.ZodTypeDef,
  PublicMessagePartToolResultPart
> = z.object({
  kind: RunAgentPublicMessagePartAgentsRequestKind$outboundSchema,
  toolCallId: z.string(),
  result: z.any().optional(),
  metadata: z.record(z.any()).optional(),
}).transform((v) => {
  return remap$(v, {
    toolCallId: "tool_call_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PublicMessagePartToolResultPart$ {
  /** @deprecated use `PublicMessagePartToolResultPart$inboundSchema` instead. */
  export const inboundSchema = PublicMessagePartToolResultPart$inboundSchema;
  /** @deprecated use `PublicMessagePartToolResultPart$outboundSchema` instead. */
  export const outboundSchema = PublicMessagePartToolResultPart$outboundSchema;
  /** @deprecated use `PublicMessagePartToolResultPart$Outbound` instead. */
  export type Outbound = PublicMessagePartToolResultPart$Outbound;
}

export function publicMessagePartToolResultPartToJSON(
  publicMessagePartToolResultPart: PublicMessagePartToolResultPart,
): string {
  return JSON.stringify(
    PublicMessagePartToolResultPart$outboundSchema.parse(
      publicMessagePartToolResultPart,
    ),
  );
}

export function publicMessagePartToolResultPartFromJSON(
  jsonString: string,
): SafeParseResult<PublicMessagePartToolResultPart, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PublicMessagePartToolResultPart$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PublicMessagePartToolResultPart' from JSON`,
  );
}

/** @internal */
export const RunAgentPublicMessagePartAgentsKind$inboundSchema: z.ZodNativeEnum<
  typeof RunAgentPublicMessagePartAgentsKind
> = z.nativeEnum(RunAgentPublicMessagePartAgentsKind);

/** @internal */
export const RunAgentPublicMessagePartAgentsKind$outboundSchema:
  z.ZodNativeEnum<typeof RunAgentPublicMessagePartAgentsKind> =
    RunAgentPublicMessagePartAgentsKind$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RunAgentPublicMessagePartAgentsKind$ {
  /** @deprecated use `RunAgentPublicMessagePartAgentsKind$inboundSchema` instead. */
  export const inboundSchema =
    RunAgentPublicMessagePartAgentsKind$inboundSchema;
  /** @deprecated use `RunAgentPublicMessagePartAgentsKind$outboundSchema` instead. */
  export const outboundSchema =
    RunAgentPublicMessagePartAgentsKind$outboundSchema;
}

/** @internal */
export const FileFileInURIFormat$inboundSchema: z.ZodType<
  FileFileInURIFormat,
  z.ZodTypeDef,
  unknown
> = z.object({
  uri: z.string(),
  mimeType: z.string().optional(),
  name: z.string().optional(),
});

/** @internal */
export type FileFileInURIFormat$Outbound = {
  uri: string;
  mimeType?: string | undefined;
  name?: string | undefined;
};

/** @internal */
export const FileFileInURIFormat$outboundSchema: z.ZodType<
  FileFileInURIFormat$Outbound,
  z.ZodTypeDef,
  FileFileInURIFormat
> = z.object({
  uri: z.string(),
  mimeType: z.string().optional(),
  name: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FileFileInURIFormat$ {
  /** @deprecated use `FileFileInURIFormat$inboundSchema` instead. */
  export const inboundSchema = FileFileInURIFormat$inboundSchema;
  /** @deprecated use `FileFileInURIFormat$outboundSchema` instead. */
  export const outboundSchema = FileFileInURIFormat$outboundSchema;
  /** @deprecated use `FileFileInURIFormat$Outbound` instead. */
  export type Outbound = FileFileInURIFormat$Outbound;
}

export function fileFileInURIFormatToJSON(
  fileFileInURIFormat: FileFileInURIFormat,
): string {
  return JSON.stringify(
    FileFileInURIFormat$outboundSchema.parse(fileFileInURIFormat),
  );
}

export function fileFileInURIFormatFromJSON(
  jsonString: string,
): SafeParseResult<FileFileInURIFormat, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => FileFileInURIFormat$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'FileFileInURIFormat' from JSON`,
  );
}

/** @internal */
export const FileBinaryFormat$inboundSchema: z.ZodType<
  FileBinaryFormat,
  z.ZodTypeDef,
  unknown
> = z.object({
  bytes: z.string(),
  mimeType: z.string().optional(),
  name: z.string().optional(),
});

/** @internal */
export type FileBinaryFormat$Outbound = {
  bytes: string;
  mimeType?: string | undefined;
  name?: string | undefined;
};

/** @internal */
export const FileBinaryFormat$outboundSchema: z.ZodType<
  FileBinaryFormat$Outbound,
  z.ZodTypeDef,
  FileBinaryFormat
> = z.object({
  bytes: z.string(),
  mimeType: z.string().optional(),
  name: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FileBinaryFormat$ {
  /** @deprecated use `FileBinaryFormat$inboundSchema` instead. */
  export const inboundSchema = FileBinaryFormat$inboundSchema;
  /** @deprecated use `FileBinaryFormat$outboundSchema` instead. */
  export const outboundSchema = FileBinaryFormat$outboundSchema;
  /** @deprecated use `FileBinaryFormat$Outbound` instead. */
  export type Outbound = FileBinaryFormat$Outbound;
}

export function fileBinaryFormatToJSON(
  fileBinaryFormat: FileBinaryFormat,
): string {
  return JSON.stringify(
    FileBinaryFormat$outboundSchema.parse(fileBinaryFormat),
  );
}

export function fileBinaryFormatFromJSON(
  jsonString: string,
): SafeParseResult<FileBinaryFormat, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => FileBinaryFormat$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'FileBinaryFormat' from JSON`,
  );
}

/** @internal */
export const RunAgentPublicMessagePartFile$inboundSchema: z.ZodType<
  RunAgentPublicMessagePartFile,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => FileBinaryFormat$inboundSchema),
  z.lazy(() => FileFileInURIFormat$inboundSchema),
]);

/** @internal */
export type RunAgentPublicMessagePartFile$Outbound =
  | FileBinaryFormat$Outbound
  | FileFileInURIFormat$Outbound;

/** @internal */
export const RunAgentPublicMessagePartFile$outboundSchema: z.ZodType<
  RunAgentPublicMessagePartFile$Outbound,
  z.ZodTypeDef,
  RunAgentPublicMessagePartFile
> = z.union([
  z.lazy(() => FileBinaryFormat$outboundSchema),
  z.lazy(() => FileFileInURIFormat$outboundSchema),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RunAgentPublicMessagePartFile$ {
  /** @deprecated use `RunAgentPublicMessagePartFile$inboundSchema` instead. */
  export const inboundSchema = RunAgentPublicMessagePartFile$inboundSchema;
  /** @deprecated use `RunAgentPublicMessagePartFile$outboundSchema` instead. */
  export const outboundSchema = RunAgentPublicMessagePartFile$outboundSchema;
  /** @deprecated use `RunAgentPublicMessagePartFile$Outbound` instead. */
  export type Outbound = RunAgentPublicMessagePartFile$Outbound;
}

export function runAgentPublicMessagePartFileToJSON(
  runAgentPublicMessagePartFile: RunAgentPublicMessagePartFile,
): string {
  return JSON.stringify(
    RunAgentPublicMessagePartFile$outboundSchema.parse(
      runAgentPublicMessagePartFile,
    ),
  );
}

export function runAgentPublicMessagePartFileFromJSON(
  jsonString: string,
): SafeParseResult<RunAgentPublicMessagePartFile, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => RunAgentPublicMessagePartFile$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RunAgentPublicMessagePartFile' from JSON`,
  );
}

/** @internal */
export const PublicMessagePartFilePart$inboundSchema: z.ZodType<
  PublicMessagePartFilePart,
  z.ZodTypeDef,
  unknown
> = z.object({
  kind: RunAgentPublicMessagePartAgentsKind$inboundSchema,
  file: z.union([
    z.lazy(() => FileBinaryFormat$inboundSchema),
    z.lazy(() => FileFileInURIFormat$inboundSchema),
  ]),
  metadata: z.record(z.any()).optional(),
});

/** @internal */
export type PublicMessagePartFilePart$Outbound = {
  kind: string;
  file: FileBinaryFormat$Outbound | FileFileInURIFormat$Outbound;
  metadata?: { [k: string]: any } | undefined;
};

/** @internal */
export const PublicMessagePartFilePart$outboundSchema: z.ZodType<
  PublicMessagePartFilePart$Outbound,
  z.ZodTypeDef,
  PublicMessagePartFilePart
> = z.object({
  kind: RunAgentPublicMessagePartAgentsKind$outboundSchema,
  file: z.union([
    z.lazy(() => FileBinaryFormat$outboundSchema),
    z.lazy(() => FileFileInURIFormat$outboundSchema),
  ]),
  metadata: z.record(z.any()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PublicMessagePartFilePart$ {
  /** @deprecated use `PublicMessagePartFilePart$inboundSchema` instead. */
  export const inboundSchema = PublicMessagePartFilePart$inboundSchema;
  /** @deprecated use `PublicMessagePartFilePart$outboundSchema` instead. */
  export const outboundSchema = PublicMessagePartFilePart$outboundSchema;
  /** @deprecated use `PublicMessagePartFilePart$Outbound` instead. */
  export type Outbound = PublicMessagePartFilePart$Outbound;
}

export function publicMessagePartFilePartToJSON(
  publicMessagePartFilePart: PublicMessagePartFilePart,
): string {
  return JSON.stringify(
    PublicMessagePartFilePart$outboundSchema.parse(publicMessagePartFilePart),
  );
}

export function publicMessagePartFilePartFromJSON(
  jsonString: string,
): SafeParseResult<PublicMessagePartFilePart, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PublicMessagePartFilePart$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PublicMessagePartFilePart' from JSON`,
  );
}

/** @internal */
export const RunAgentPublicMessagePartKind$inboundSchema: z.ZodNativeEnum<
  typeof RunAgentPublicMessagePartKind
> = z.nativeEnum(RunAgentPublicMessagePartKind);

/** @internal */
export const RunAgentPublicMessagePartKind$outboundSchema: z.ZodNativeEnum<
  typeof RunAgentPublicMessagePartKind
> = RunAgentPublicMessagePartKind$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RunAgentPublicMessagePartKind$ {
  /** @deprecated use `RunAgentPublicMessagePartKind$inboundSchema` instead. */
  export const inboundSchema = RunAgentPublicMessagePartKind$inboundSchema;
  /** @deprecated use `RunAgentPublicMessagePartKind$outboundSchema` instead. */
  export const outboundSchema = RunAgentPublicMessagePartKind$outboundSchema;
}

/** @internal */
export const PublicMessagePartTextPart$inboundSchema: z.ZodType<
  PublicMessagePartTextPart,
  z.ZodTypeDef,
  unknown
> = z.object({
  kind: RunAgentPublicMessagePartKind$inboundSchema,
  text: z.string(),
});

/** @internal */
export type PublicMessagePartTextPart$Outbound = {
  kind: string;
  text: string;
};

/** @internal */
export const PublicMessagePartTextPart$outboundSchema: z.ZodType<
  PublicMessagePartTextPart$Outbound,
  z.ZodTypeDef,
  PublicMessagePartTextPart
> = z.object({
  kind: RunAgentPublicMessagePartKind$outboundSchema,
  text: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PublicMessagePartTextPart$ {
  /** @deprecated use `PublicMessagePartTextPart$inboundSchema` instead. */
  export const inboundSchema = PublicMessagePartTextPart$inboundSchema;
  /** @deprecated use `PublicMessagePartTextPart$outboundSchema` instead. */
  export const outboundSchema = PublicMessagePartTextPart$outboundSchema;
  /** @deprecated use `PublicMessagePartTextPart$Outbound` instead. */
  export type Outbound = PublicMessagePartTextPart$Outbound;
}

export function publicMessagePartTextPartToJSON(
  publicMessagePartTextPart: PublicMessagePartTextPart,
): string {
  return JSON.stringify(
    PublicMessagePartTextPart$outboundSchema.parse(publicMessagePartTextPart),
  );
}

export function publicMessagePartTextPartFromJSON(
  jsonString: string,
): SafeParseResult<PublicMessagePartTextPart, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PublicMessagePartTextPart$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PublicMessagePartTextPart' from JSON`,
  );
}

/** @internal */
export const RunAgentPublicMessagePart$inboundSchema: z.ZodType<
  RunAgentPublicMessagePart,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => PublicMessagePartTextPart$inboundSchema),
  z.lazy(() => PublicMessagePartFilePart$inboundSchema),
  z.lazy(() => PublicMessagePartToolResultPart$inboundSchema),
]);

/** @internal */
export type RunAgentPublicMessagePart$Outbound =
  | PublicMessagePartTextPart$Outbound
  | PublicMessagePartFilePart$Outbound
  | PublicMessagePartToolResultPart$Outbound;

/** @internal */
export const RunAgentPublicMessagePart$outboundSchema: z.ZodType<
  RunAgentPublicMessagePart$Outbound,
  z.ZodTypeDef,
  RunAgentPublicMessagePart
> = z.union([
  z.lazy(() => PublicMessagePartTextPart$outboundSchema),
  z.lazy(() => PublicMessagePartFilePart$outboundSchema),
  z.lazy(() => PublicMessagePartToolResultPart$outboundSchema),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RunAgentPublicMessagePart$ {
  /** @deprecated use `RunAgentPublicMessagePart$inboundSchema` instead. */
  export const inboundSchema = RunAgentPublicMessagePart$inboundSchema;
  /** @deprecated use `RunAgentPublicMessagePart$outboundSchema` instead. */
  export const outboundSchema = RunAgentPublicMessagePart$outboundSchema;
  /** @deprecated use `RunAgentPublicMessagePart$Outbound` instead. */
  export type Outbound = RunAgentPublicMessagePart$Outbound;
}

export function runAgentPublicMessagePartToJSON(
  runAgentPublicMessagePart: RunAgentPublicMessagePart,
): string {
  return JSON.stringify(
    RunAgentPublicMessagePart$outboundSchema.parse(runAgentPublicMessagePart),
  );
}

export function runAgentPublicMessagePartFromJSON(
  jsonString: string,
): SafeParseResult<RunAgentPublicMessagePart, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => RunAgentPublicMessagePart$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RunAgentPublicMessagePart' from JSON`,
  );
}

/** @internal */
export const RunAgentMessage$inboundSchema: z.ZodType<
  RunAgentMessage,
  z.ZodTypeDef,
  unknown
> = z.object({
  messageId: z.string().optional(),
  role: z.union([
    RunAgentRoleUserMessage$inboundSchema,
    RunAgentRoleToolMessage$inboundSchema,
  ]),
  parts: z.array(
    z.union([
      z.lazy(() => PublicMessagePartTextPart$inboundSchema),
      z.lazy(() => PublicMessagePartFilePart$inboundSchema),
      z.lazy(() => PublicMessagePartToolResultPart$inboundSchema),
    ]),
  ),
});

/** @internal */
export type RunAgentMessage$Outbound = {
  messageId?: string | undefined;
  role: string | string;
  parts: Array<
    | PublicMessagePartTextPart$Outbound
    | PublicMessagePartFilePart$Outbound
    | PublicMessagePartToolResultPart$Outbound
  >;
};

/** @internal */
export const RunAgentMessage$outboundSchema: z.ZodType<
  RunAgentMessage$Outbound,
  z.ZodTypeDef,
  RunAgentMessage
> = z.object({
  messageId: z.string().optional(),
  role: z.union([
    RunAgentRoleUserMessage$outboundSchema,
    RunAgentRoleToolMessage$outboundSchema,
  ]),
  parts: z.array(
    z.union([
      z.lazy(() => PublicMessagePartTextPart$outboundSchema),
      z.lazy(() => PublicMessagePartFilePart$outboundSchema),
      z.lazy(() => PublicMessagePartToolResultPart$outboundSchema),
    ]),
  ),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RunAgentMessage$ {
  /** @deprecated use `RunAgentMessage$inboundSchema` instead. */
  export const inboundSchema = RunAgentMessage$inboundSchema;
  /** @deprecated use `RunAgentMessage$outboundSchema` instead. */
  export const outboundSchema = RunAgentMessage$outboundSchema;
  /** @deprecated use `RunAgentMessage$Outbound` instead. */
  export type Outbound = RunAgentMessage$Outbound;
}

export function runAgentMessageToJSON(
  runAgentMessage: RunAgentMessage,
): string {
  return JSON.stringify(RunAgentMessage$outboundSchema.parse(runAgentMessage));
}

export function runAgentMessageFromJSON(
  jsonString: string,
): SafeParseResult<RunAgentMessage, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => RunAgentMessage$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RunAgentMessage' from JSON`,
  );
}

/** @internal */
export const RunAgentContact$inboundSchema: z.ZodType<
  RunAgentContact,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  display_name: z.string().optional(),
  email: z.string().optional(),
  metadata: z.array(z.record(z.any())).optional(),
  logo_url: z.string().optional(),
  tags: z.array(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    "display_name": "displayName",
    "logo_url": "logoUrl",
  });
});

/** @internal */
export type RunAgentContact$Outbound = {
  id: string;
  display_name?: string | undefined;
  email?: string | undefined;
  metadata?: Array<{ [k: string]: any }> | undefined;
  logo_url?: string | undefined;
  tags?: Array<string> | undefined;
};

/** @internal */
export const RunAgentContact$outboundSchema: z.ZodType<
  RunAgentContact$Outbound,
  z.ZodTypeDef,
  RunAgentContact
> = z.object({
  id: z.string(),
  displayName: z.string().optional(),
  email: z.string().optional(),
  metadata: z.array(z.record(z.any())).optional(),
  logoUrl: z.string().optional(),
  tags: z.array(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    displayName: "display_name",
    logoUrl: "logo_url",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RunAgentContact$ {
  /** @deprecated use `RunAgentContact$inboundSchema` instead. */
  export const inboundSchema = RunAgentContact$inboundSchema;
  /** @deprecated use `RunAgentContact$outboundSchema` instead. */
  export const outboundSchema = RunAgentContact$outboundSchema;
  /** @deprecated use `RunAgentContact$Outbound` instead. */
  export type Outbound = RunAgentContact$Outbound;
}

export function runAgentContactToJSON(
  runAgentContact: RunAgentContact,
): string {
  return JSON.stringify(RunAgentContact$outboundSchema.parse(runAgentContact));
}

export function runAgentContactFromJSON(
  jsonString: string,
): SafeParseResult<RunAgentContact, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => RunAgentContact$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RunAgentContact' from JSON`,
  );
}

/** @internal */
export const RunAgentThread$inboundSchema: z.ZodType<
  RunAgentThread,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  tags: z.array(z.string()).optional(),
});

/** @internal */
export type RunAgentThread$Outbound = {
  id: string;
  tags?: Array<string> | undefined;
};

/** @internal */
export const RunAgentThread$outboundSchema: z.ZodType<
  RunAgentThread$Outbound,
  z.ZodTypeDef,
  RunAgentThread
> = z.object({
  id: z.string(),
  tags: z.array(z.string()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RunAgentThread$ {
  /** @deprecated use `RunAgentThread$inboundSchema` instead. */
  export const inboundSchema = RunAgentThread$inboundSchema;
  /** @deprecated use `RunAgentThread$outboundSchema` instead. */
  export const outboundSchema = RunAgentThread$outboundSchema;
  /** @deprecated use `RunAgentThread$Outbound` instead. */
  export type Outbound = RunAgentThread$Outbound;
}

export function runAgentThreadToJSON(runAgentThread: RunAgentThread): string {
  return JSON.stringify(RunAgentThread$outboundSchema.parse(runAgentThread));
}

export function runAgentThreadFromJSON(
  jsonString: string,
): SafeParseResult<RunAgentThread, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => RunAgentThread$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RunAgentThread' from JSON`,
  );
}

/** @internal */
export const RunAgentMemory$inboundSchema: z.ZodType<
  RunAgentMemory,
  z.ZodTypeDef,
  unknown
> = z.object({
  entity_id: z.string(),
}).transform((v) => {
  return remap$(v, {
    "entity_id": "entityId",
  });
});

/** @internal */
export type RunAgentMemory$Outbound = {
  entity_id: string;
};

/** @internal */
export const RunAgentMemory$outboundSchema: z.ZodType<
  RunAgentMemory$Outbound,
  z.ZodTypeDef,
  RunAgentMemory
> = z.object({
  entityId: z.string(),
}).transform((v) => {
  return remap$(v, {
    entityId: "entity_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RunAgentMemory$ {
  /** @deprecated use `RunAgentMemory$inboundSchema` instead. */
  export const inboundSchema = RunAgentMemory$inboundSchema;
  /** @deprecated use `RunAgentMemory$outboundSchema` instead. */
  export const outboundSchema = RunAgentMemory$outboundSchema;
  /** @deprecated use `RunAgentMemory$Outbound` instead. */
  export type Outbound = RunAgentMemory$Outbound;
}

export function runAgentMemoryToJSON(runAgentMemory: RunAgentMemory): string {
  return JSON.stringify(RunAgentMemory$outboundSchema.parse(runAgentMemory));
}

export function runAgentMemoryFromJSON(
  jsonString: string,
): SafeParseResult<RunAgentMemory, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => RunAgentMemory$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RunAgentMemory' from JSON`,
  );
}

/** @internal */
export const RunAgentKnowledgeBases$inboundSchema: z.ZodType<
  RunAgentKnowledgeBases,
  z.ZodTypeDef,
  unknown
> = z.object({
  knowledge_id: z.string(),
}).transform((v) => {
  return remap$(v, {
    "knowledge_id": "knowledgeId",
  });
});

/** @internal */
export type RunAgentKnowledgeBases$Outbound = {
  knowledge_id: string;
};

/** @internal */
export const RunAgentKnowledgeBases$outboundSchema: z.ZodType<
  RunAgentKnowledgeBases$Outbound,
  z.ZodTypeDef,
  RunAgentKnowledgeBases
> = z.object({
  knowledgeId: z.string(),
}).transform((v) => {
  return remap$(v, {
    knowledgeId: "knowledge_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RunAgentKnowledgeBases$ {
  /** @deprecated use `RunAgentKnowledgeBases$inboundSchema` instead. */
  export const inboundSchema = RunAgentKnowledgeBases$inboundSchema;
  /** @deprecated use `RunAgentKnowledgeBases$outboundSchema` instead. */
  export const outboundSchema = RunAgentKnowledgeBases$outboundSchema;
  /** @deprecated use `RunAgentKnowledgeBases$Outbound` instead. */
  export type Outbound = RunAgentKnowledgeBases$Outbound;
}

export function runAgentKnowledgeBasesToJSON(
  runAgentKnowledgeBases: RunAgentKnowledgeBases,
): string {
  return JSON.stringify(
    RunAgentKnowledgeBases$outboundSchema.parse(runAgentKnowledgeBases),
  );
}

export function runAgentKnowledgeBasesFromJSON(
  jsonString: string,
): SafeParseResult<RunAgentKnowledgeBases, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => RunAgentKnowledgeBases$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RunAgentKnowledgeBases' from JSON`,
  );
}

/** @internal */
export const RunAgentTeamOfAgents$inboundSchema: z.ZodType<
  RunAgentTeamOfAgents,
  z.ZodTypeDef,
  unknown
> = z.object({
  key: z.string(),
  role: z.string().optional(),
});

/** @internal */
export type RunAgentTeamOfAgents$Outbound = {
  key: string;
  role?: string | undefined;
};

/** @internal */
export const RunAgentTeamOfAgents$outboundSchema: z.ZodType<
  RunAgentTeamOfAgents$Outbound,
  z.ZodTypeDef,
  RunAgentTeamOfAgents
> = z.object({
  key: z.string(),
  role: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RunAgentTeamOfAgents$ {
  /** @deprecated use `RunAgentTeamOfAgents$inboundSchema` instead. */
  export const inboundSchema = RunAgentTeamOfAgents$inboundSchema;
  /** @deprecated use `RunAgentTeamOfAgents$outboundSchema` instead. */
  export const outboundSchema = RunAgentTeamOfAgents$outboundSchema;
  /** @deprecated use `RunAgentTeamOfAgents$Outbound` instead. */
  export type Outbound = RunAgentTeamOfAgents$Outbound;
}

export function runAgentTeamOfAgentsToJSON(
  runAgentTeamOfAgents: RunAgentTeamOfAgents,
): string {
  return JSON.stringify(
    RunAgentTeamOfAgents$outboundSchema.parse(runAgentTeamOfAgents),
  );
}

export function runAgentTeamOfAgentsFromJSON(
  jsonString: string,
): SafeParseResult<RunAgentTeamOfAgents, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => RunAgentTeamOfAgents$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RunAgentTeamOfAgents' from JSON`,
  );
}

/** @internal */
export const RunAgentAgentToolInputRunAgentsRequestRequestBodySettingsTools14Type$inboundSchema:
  z.ZodNativeEnum<
    typeof RunAgentAgentToolInputRunAgentsRequestRequestBodySettingsTools14Type
  > = z.nativeEnum(
    RunAgentAgentToolInputRunAgentsRequestRequestBodySettingsTools14Type,
  );

/** @internal */
export const RunAgentAgentToolInputRunAgentsRequestRequestBodySettingsTools14Type$outboundSchema:
  z.ZodNativeEnum<
    typeof RunAgentAgentToolInputRunAgentsRequestRequestBodySettingsTools14Type
  > =
    RunAgentAgentToolInputRunAgentsRequestRequestBodySettingsTools14Type$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RunAgentAgentToolInputRunAgentsRequestRequestBodySettingsTools14Type$ {
  /** @deprecated use `RunAgentAgentToolInputRunAgentsRequestRequestBodySettingsTools14Type$inboundSchema` instead. */
  export const inboundSchema =
    RunAgentAgentToolInputRunAgentsRequestRequestBodySettingsTools14Type$inboundSchema;
  /** @deprecated use `RunAgentAgentToolInputRunAgentsRequestRequestBodySettingsTools14Type$outboundSchema` instead. */
  export const outboundSchema =
    RunAgentAgentToolInputRunAgentsRequestRequestBodySettingsTools14Type$outboundSchema;
}

/** @internal */
export const AgentToolInputRunFunction$inboundSchema: z.ZodType<
  AgentToolInputRunFunction,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.string(),
  description: z.string().optional(),
  strict: z.boolean().optional(),
  parameters: z.record(z.any()).optional(),
});

/** @internal */
export type AgentToolInputRunFunction$Outbound = {
  name: string;
  description?: string | undefined;
  strict?: boolean | undefined;
  parameters?: { [k: string]: any } | undefined;
};

/** @internal */
export const AgentToolInputRunFunction$outboundSchema: z.ZodType<
  AgentToolInputRunFunction$Outbound,
  z.ZodTypeDef,
  AgentToolInputRunFunction
> = z.object({
  name: z.string(),
  description: z.string().optional(),
  strict: z.boolean().optional(),
  parameters: z.record(z.any()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AgentToolInputRunFunction$ {
  /** @deprecated use `AgentToolInputRunFunction$inboundSchema` instead. */
  export const inboundSchema = AgentToolInputRunFunction$inboundSchema;
  /** @deprecated use `AgentToolInputRunFunction$outboundSchema` instead. */
  export const outboundSchema = AgentToolInputRunFunction$outboundSchema;
  /** @deprecated use `AgentToolInputRunFunction$Outbound` instead. */
  export type Outbound = AgentToolInputRunFunction$Outbound;
}

export function agentToolInputRunFunctionToJSON(
  agentToolInputRunFunction: AgentToolInputRunFunction,
): string {
  return JSON.stringify(
    AgentToolInputRunFunction$outboundSchema.parse(agentToolInputRunFunction),
  );
}

export function agentToolInputRunFunctionFromJSON(
  jsonString: string,
): SafeParseResult<AgentToolInputRunFunction, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AgentToolInputRunFunction$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AgentToolInputRunFunction' from JSON`,
  );
}

/** @internal */
export const FunctionToolRun$inboundSchema: z.ZodType<
  FunctionToolRun,
  z.ZodTypeDef,
  unknown
> = z.object({
  type:
    RunAgentAgentToolInputRunAgentsRequestRequestBodySettingsTools14Type$inboundSchema,
  key: z.string(),
  _id: z.string().optional(),
  display_name: z.string().optional(),
  description: z.string().optional(),
  function: z.lazy(() => AgentToolInputRunFunction$inboundSchema),
  requires_approval: z.boolean().default(false),
}).transform((v) => {
  return remap$(v, {
    "_id": "id",
    "display_name": "displayName",
    "requires_approval": "requiresApproval",
  });
});

/** @internal */
export type FunctionToolRun$Outbound = {
  type: string;
  key: string;
  _id?: string | undefined;
  display_name?: string | undefined;
  description?: string | undefined;
  function: AgentToolInputRunFunction$Outbound;
  requires_approval: boolean;
};

/** @internal */
export const FunctionToolRun$outboundSchema: z.ZodType<
  FunctionToolRun$Outbound,
  z.ZodTypeDef,
  FunctionToolRun
> = z.object({
  type:
    RunAgentAgentToolInputRunAgentsRequestRequestBodySettingsTools14Type$outboundSchema,
  key: z.string(),
  id: z.string().optional(),
  displayName: z.string().optional(),
  description: z.string().optional(),
  function: z.lazy(() => AgentToolInputRunFunction$outboundSchema),
  requiresApproval: z.boolean().default(false),
}).transform((v) => {
  return remap$(v, {
    id: "_id",
    displayName: "display_name",
    requiresApproval: "requires_approval",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FunctionToolRun$ {
  /** @deprecated use `FunctionToolRun$inboundSchema` instead. */
  export const inboundSchema = FunctionToolRun$inboundSchema;
  /** @deprecated use `FunctionToolRun$outboundSchema` instead. */
  export const outboundSchema = FunctionToolRun$outboundSchema;
  /** @deprecated use `FunctionToolRun$Outbound` instead. */
  export type Outbound = FunctionToolRun$Outbound;
}

export function functionToolRunToJSON(
  functionToolRun: FunctionToolRun,
): string {
  return JSON.stringify(FunctionToolRun$outboundSchema.parse(functionToolRun));
}

export function functionToolRunFromJSON(
  jsonString: string,
): SafeParseResult<FunctionToolRun, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => FunctionToolRun$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'FunctionToolRun' from JSON`,
  );
}

/** @internal */
export const RunAgentAgentToolInputRunAgentsRequestRequestBodySettingsTools13Type$inboundSchema:
  z.ZodNativeEnum<
    typeof RunAgentAgentToolInputRunAgentsRequestRequestBodySettingsTools13Type
  > = z.nativeEnum(
    RunAgentAgentToolInputRunAgentsRequestRequestBodySettingsTools13Type,
  );

/** @internal */
export const RunAgentAgentToolInputRunAgentsRequestRequestBodySettingsTools13Type$outboundSchema:
  z.ZodNativeEnum<
    typeof RunAgentAgentToolInputRunAgentsRequestRequestBodySettingsTools13Type
  > =
    RunAgentAgentToolInputRunAgentsRequestRequestBodySettingsTools13Type$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RunAgentAgentToolInputRunAgentsRequestRequestBodySettingsTools13Type$ {
  /** @deprecated use `RunAgentAgentToolInputRunAgentsRequestRequestBodySettingsTools13Type$inboundSchema` instead. */
  export const inboundSchema =
    RunAgentAgentToolInputRunAgentsRequestRequestBodySettingsTools13Type$inboundSchema;
  /** @deprecated use `RunAgentAgentToolInputRunAgentsRequestRequestBodySettingsTools13Type$outboundSchema` instead. */
  export const outboundSchema =
    RunAgentAgentToolInputRunAgentsRequestRequestBodySettingsTools13Type$outboundSchema;
}

/** @internal */
export const Language$inboundSchema: z.ZodNativeEnum<typeof Language> = z
  .nativeEnum(Language);

/** @internal */
export const Language$outboundSchema: z.ZodNativeEnum<typeof Language> =
  Language$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Language$ {
  /** @deprecated use `Language$inboundSchema` instead. */
  export const inboundSchema = Language$inboundSchema;
  /** @deprecated use `Language$outboundSchema` instead. */
  export const outboundSchema = Language$outboundSchema;
}

/** @internal */
export const CodeTool$inboundSchema: z.ZodType<
  CodeTool,
  z.ZodTypeDef,
  unknown
> = z.object({
  parameters: z.record(z.any()).optional(),
  language: Language$inboundSchema,
  code: z.string(),
});

/** @internal */
export type CodeTool$Outbound = {
  parameters?: { [k: string]: any } | undefined;
  language: string;
  code: string;
};

/** @internal */
export const CodeTool$outboundSchema: z.ZodType<
  CodeTool$Outbound,
  z.ZodTypeDef,
  CodeTool
> = z.object({
  parameters: z.record(z.any()).optional(),
  language: Language$outboundSchema,
  code: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CodeTool$ {
  /** @deprecated use `CodeTool$inboundSchema` instead. */
  export const inboundSchema = CodeTool$inboundSchema;
  /** @deprecated use `CodeTool$outboundSchema` instead. */
  export const outboundSchema = CodeTool$outboundSchema;
  /** @deprecated use `CodeTool$Outbound` instead. */
  export type Outbound = CodeTool$Outbound;
}

export function codeToolToJSON(codeTool: CodeTool): string {
  return JSON.stringify(CodeTool$outboundSchema.parse(codeTool));
}

export function codeToolFromJSON(
  jsonString: string,
): SafeParseResult<CodeTool, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CodeTool$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CodeTool' from JSON`,
  );
}

/** @internal */
export const CodeToolRun$inboundSchema: z.ZodType<
  CodeToolRun,
  z.ZodTypeDef,
  unknown
> = z.object({
  type:
    RunAgentAgentToolInputRunAgentsRequestRequestBodySettingsTools13Type$inboundSchema,
  key: z.string(),
  _id: z.string().optional(),
  display_name: z.string().optional(),
  description: z.string(),
  code_tool: z.lazy(() => CodeTool$inboundSchema),
  requires_approval: z.boolean().default(false),
}).transform((v) => {
  return remap$(v, {
    "_id": "id",
    "display_name": "displayName",
    "code_tool": "codeTool",
    "requires_approval": "requiresApproval",
  });
});

/** @internal */
export type CodeToolRun$Outbound = {
  type: string;
  key: string;
  _id?: string | undefined;
  display_name?: string | undefined;
  description: string;
  code_tool: CodeTool$Outbound;
  requires_approval: boolean;
};

/** @internal */
export const CodeToolRun$outboundSchema: z.ZodType<
  CodeToolRun$Outbound,
  z.ZodTypeDef,
  CodeToolRun
> = z.object({
  type:
    RunAgentAgentToolInputRunAgentsRequestRequestBodySettingsTools13Type$outboundSchema,
  key: z.string(),
  id: z.string().optional(),
  displayName: z.string().optional(),
  description: z.string(),
  codeTool: z.lazy(() => CodeTool$outboundSchema),
  requiresApproval: z.boolean().default(false),
}).transform((v) => {
  return remap$(v, {
    id: "_id",
    displayName: "display_name",
    codeTool: "code_tool",
    requiresApproval: "requires_approval",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CodeToolRun$ {
  /** @deprecated use `CodeToolRun$inboundSchema` instead. */
  export const inboundSchema = CodeToolRun$inboundSchema;
  /** @deprecated use `CodeToolRun$outboundSchema` instead. */
  export const outboundSchema = CodeToolRun$outboundSchema;
  /** @deprecated use `CodeToolRun$Outbound` instead. */
  export type Outbound = CodeToolRun$Outbound;
}

export function codeToolRunToJSON(codeToolRun: CodeToolRun): string {
  return JSON.stringify(CodeToolRun$outboundSchema.parse(codeToolRun));
}

export function codeToolRunFromJSON(
  jsonString: string,
): SafeParseResult<CodeToolRun, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CodeToolRun$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CodeToolRun' from JSON`,
  );
}

/** @internal */
export const RunAgentAgentToolInputRunAgentsRequestRequestBodySettingsTools12Type$inboundSchema:
  z.ZodNativeEnum<
    typeof RunAgentAgentToolInputRunAgentsRequestRequestBodySettingsTools12Type
  > = z.nativeEnum(
    RunAgentAgentToolInputRunAgentsRequestRequestBodySettingsTools12Type,
  );

/** @internal */
export const RunAgentAgentToolInputRunAgentsRequestRequestBodySettingsTools12Type$outboundSchema:
  z.ZodNativeEnum<
    typeof RunAgentAgentToolInputRunAgentsRequestRequestBodySettingsTools12Type
  > =
    RunAgentAgentToolInputRunAgentsRequestRequestBodySettingsTools12Type$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RunAgentAgentToolInputRunAgentsRequestRequestBodySettingsTools12Type$ {
  /** @deprecated use `RunAgentAgentToolInputRunAgentsRequestRequestBodySettingsTools12Type$inboundSchema` instead. */
  export const inboundSchema =
    RunAgentAgentToolInputRunAgentsRequestRequestBodySettingsTools12Type$inboundSchema;
  /** @deprecated use `RunAgentAgentToolInputRunAgentsRequestRequestBodySettingsTools12Type$outboundSchema` instead. */
  export const outboundSchema =
    RunAgentAgentToolInputRunAgentsRequestRequestBodySettingsTools12Type$outboundSchema;
}

/** @internal */
export const Method$inboundSchema: z.ZodNativeEnum<typeof Method> = z
  .nativeEnum(Method);

/** @internal */
export const Method$outboundSchema: z.ZodNativeEnum<typeof Method> =
  Method$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Method$ {
  /** @deprecated use `Method$inboundSchema` instead. */
  export const inboundSchema = Method$inboundSchema;
  /** @deprecated use `Method$outboundSchema` instead. */
  export const outboundSchema = Method$outboundSchema;
}

/** @internal */
export const Blueprint$inboundSchema: z.ZodType<
  Blueprint,
  z.ZodTypeDef,
  unknown
> = z.object({
  url: z.string(),
  method: Method$inboundSchema,
  headers: z.record(z.string()).optional(),
  body: z.record(z.any()).optional(),
});

/** @internal */
export type Blueprint$Outbound = {
  url: string;
  method: string;
  headers?: { [k: string]: string } | undefined;
  body?: { [k: string]: any } | undefined;
};

/** @internal */
export const Blueprint$outboundSchema: z.ZodType<
  Blueprint$Outbound,
  z.ZodTypeDef,
  Blueprint
> = z.object({
  url: z.string(),
  method: Method$outboundSchema,
  headers: z.record(z.string()).optional(),
  body: z.record(z.any()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Blueprint$ {
  /** @deprecated use `Blueprint$inboundSchema` instead. */
  export const inboundSchema = Blueprint$inboundSchema;
  /** @deprecated use `Blueprint$outboundSchema` instead. */
  export const outboundSchema = Blueprint$outboundSchema;
  /** @deprecated use `Blueprint$Outbound` instead. */
  export type Outbound = Blueprint$Outbound;
}

export function blueprintToJSON(blueprint: Blueprint): string {
  return JSON.stringify(Blueprint$outboundSchema.parse(blueprint));
}

export function blueprintFromJSON(
  jsonString: string,
): SafeParseResult<Blueprint, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Blueprint$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Blueprint' from JSON`,
  );
}

/** @internal */
export const RunAgentAgentToolInputRunAgentsRequestRequestBodySettingsTools12HttpType$inboundSchema:
  z.ZodNativeEnum<
    typeof RunAgentAgentToolInputRunAgentsRequestRequestBodySettingsTools12HttpType
  > = z.nativeEnum(
    RunAgentAgentToolInputRunAgentsRequestRequestBodySettingsTools12HttpType,
  );

/** @internal */
export const RunAgentAgentToolInputRunAgentsRequestRequestBodySettingsTools12HttpType$outboundSchema:
  z.ZodNativeEnum<
    typeof RunAgentAgentToolInputRunAgentsRequestRequestBodySettingsTools12HttpType
  > =
    RunAgentAgentToolInputRunAgentsRequestRequestBodySettingsTools12HttpType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RunAgentAgentToolInputRunAgentsRequestRequestBodySettingsTools12HttpType$ {
  /** @deprecated use `RunAgentAgentToolInputRunAgentsRequestRequestBodySettingsTools12HttpType$inboundSchema` instead. */
  export const inboundSchema =
    RunAgentAgentToolInputRunAgentsRequestRequestBodySettingsTools12HttpType$inboundSchema;
  /** @deprecated use `RunAgentAgentToolInputRunAgentsRequestRequestBodySettingsTools12HttpType$outboundSchema` instead. */
  export const outboundSchema =
    RunAgentAgentToolInputRunAgentsRequestRequestBodySettingsTools12HttpType$outboundSchema;
}

/** @internal */
export const DefaultValue$inboundSchema: z.ZodType<
  DefaultValue,
  z.ZodTypeDef,
  unknown
> = z.union([z.string(), z.number(), z.boolean()]);

/** @internal */
export type DefaultValue$Outbound = string | number | boolean;

/** @internal */
export const DefaultValue$outboundSchema: z.ZodType<
  DefaultValue$Outbound,
  z.ZodTypeDef,
  DefaultValue
> = z.union([z.string(), z.number(), z.boolean()]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DefaultValue$ {
  /** @deprecated use `DefaultValue$inboundSchema` instead. */
  export const inboundSchema = DefaultValue$inboundSchema;
  /** @deprecated use `DefaultValue$outboundSchema` instead. */
  export const outboundSchema = DefaultValue$outboundSchema;
  /** @deprecated use `DefaultValue$Outbound` instead. */
  export type Outbound = DefaultValue$Outbound;
}

export function defaultValueToJSON(defaultValue: DefaultValue): string {
  return JSON.stringify(DefaultValue$outboundSchema.parse(defaultValue));
}

export function defaultValueFromJSON(
  jsonString: string,
): SafeParseResult<DefaultValue, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DefaultValue$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DefaultValue' from JSON`,
  );
}

/** @internal */
export const Arguments$inboundSchema: z.ZodType<
  Arguments,
  z.ZodTypeDef,
  unknown
> = z.object({
  type:
    RunAgentAgentToolInputRunAgentsRequestRequestBodySettingsTools12HttpType$inboundSchema,
  description: z.string(),
  send_to_model: z.boolean().default(true),
  default_value: z.union([z.string(), z.number(), z.boolean()]).optional(),
}).transform((v) => {
  return remap$(v, {
    "send_to_model": "sendToModel",
    "default_value": "defaultValue",
  });
});

/** @internal */
export type Arguments$Outbound = {
  type: string;
  description: string;
  send_to_model: boolean;
  default_value?: string | number | boolean | undefined;
};

/** @internal */
export const Arguments$outboundSchema: z.ZodType<
  Arguments$Outbound,
  z.ZodTypeDef,
  Arguments
> = z.object({
  type:
    RunAgentAgentToolInputRunAgentsRequestRequestBodySettingsTools12HttpType$outboundSchema,
  description: z.string(),
  sendToModel: z.boolean().default(true),
  defaultValue: z.union([z.string(), z.number(), z.boolean()]).optional(),
}).transform((v) => {
  return remap$(v, {
    sendToModel: "send_to_model",
    defaultValue: "default_value",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Arguments$ {
  /** @deprecated use `Arguments$inboundSchema` instead. */
  export const inboundSchema = Arguments$inboundSchema;
  /** @deprecated use `Arguments$outboundSchema` instead. */
  export const outboundSchema = Arguments$outboundSchema;
  /** @deprecated use `Arguments$Outbound` instead. */
  export type Outbound = Arguments$Outbound;
}

export function argumentsToJSON(value: Arguments): string {
  return JSON.stringify(Arguments$outboundSchema.parse(value));
}

export function argumentsFromJSON(
  jsonString: string,
): SafeParseResult<Arguments, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Arguments$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Arguments' from JSON`,
  );
}

/** @internal */
export const Http$inboundSchema: z.ZodType<Http, z.ZodTypeDef, unknown> = z
  .object({
    blueprint: z.lazy(() => Blueprint$inboundSchema),
    arguments: z.record(z.lazy(() => Arguments$inboundSchema)).optional(),
  });

/** @internal */
export type Http$Outbound = {
  blueprint: Blueprint$Outbound;
  arguments?: { [k: string]: Arguments$Outbound } | undefined;
};

/** @internal */
export const Http$outboundSchema: z.ZodType<Http$Outbound, z.ZodTypeDef, Http> =
  z.object({
    blueprint: z.lazy(() => Blueprint$outboundSchema),
    arguments: z.record(z.lazy(() => Arguments$outboundSchema)).optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Http$ {
  /** @deprecated use `Http$inboundSchema` instead. */
  export const inboundSchema = Http$inboundSchema;
  /** @deprecated use `Http$outboundSchema` instead. */
  export const outboundSchema = Http$outboundSchema;
  /** @deprecated use `Http$Outbound` instead. */
  export type Outbound = Http$Outbound;
}

export function httpToJSON(http: Http): string {
  return JSON.stringify(Http$outboundSchema.parse(http));
}

export function httpFromJSON(
  jsonString: string,
): SafeParseResult<Http, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Http$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Http' from JSON`,
  );
}

/** @internal */
export const HTTPToolRun$inboundSchema: z.ZodType<
  HTTPToolRun,
  z.ZodTypeDef,
  unknown
> = z.object({
  type:
    RunAgentAgentToolInputRunAgentsRequestRequestBodySettingsTools12Type$inboundSchema,
  key: z.string(),
  _id: z.string().optional(),
  display_name: z.string().optional(),
  description: z.string(),
  http: z.lazy(() => Http$inboundSchema),
  requires_approval: z.boolean().default(false),
}).transform((v) => {
  return remap$(v, {
    "_id": "id",
    "display_name": "displayName",
    "requires_approval": "requiresApproval",
  });
});

/** @internal */
export type HTTPToolRun$Outbound = {
  type: string;
  key: string;
  _id?: string | undefined;
  display_name?: string | undefined;
  description: string;
  http: Http$Outbound;
  requires_approval: boolean;
};

/** @internal */
export const HTTPToolRun$outboundSchema: z.ZodType<
  HTTPToolRun$Outbound,
  z.ZodTypeDef,
  HTTPToolRun
> = z.object({
  type:
    RunAgentAgentToolInputRunAgentsRequestRequestBodySettingsTools12Type$outboundSchema,
  key: z.string(),
  id: z.string().optional(),
  displayName: z.string().optional(),
  description: z.string(),
  http: z.lazy(() => Http$outboundSchema),
  requiresApproval: z.boolean().default(false),
}).transform((v) => {
  return remap$(v, {
    id: "_id",
    displayName: "display_name",
    requiresApproval: "requires_approval",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HTTPToolRun$ {
  /** @deprecated use `HTTPToolRun$inboundSchema` instead. */
  export const inboundSchema = HTTPToolRun$inboundSchema;
  /** @deprecated use `HTTPToolRun$outboundSchema` instead. */
  export const outboundSchema = HTTPToolRun$outboundSchema;
  /** @deprecated use `HTTPToolRun$Outbound` instead. */
  export type Outbound = HTTPToolRun$Outbound;
}

export function httpToolRunToJSON(httpToolRun: HTTPToolRun): string {
  return JSON.stringify(HTTPToolRun$outboundSchema.parse(httpToolRun));
}

export function httpToolRunFromJSON(
  jsonString: string,
): SafeParseResult<HTTPToolRun, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => HTTPToolRun$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'HTTPToolRun' from JSON`,
  );
}

/** @internal */
export const RunAgentAgentToolInputRunAgentsRequestRequestBodySettingsTools11Type$inboundSchema:
  z.ZodNativeEnum<
    typeof RunAgentAgentToolInputRunAgentsRequestRequestBodySettingsTools11Type
  > = z.nativeEnum(
    RunAgentAgentToolInputRunAgentsRequestRequestBodySettingsTools11Type,
  );

/** @internal */
export const RunAgentAgentToolInputRunAgentsRequestRequestBodySettingsTools11Type$outboundSchema:
  z.ZodNativeEnum<
    typeof RunAgentAgentToolInputRunAgentsRequestRequestBodySettingsTools11Type
  > =
    RunAgentAgentToolInputRunAgentsRequestRequestBodySettingsTools11Type$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RunAgentAgentToolInputRunAgentsRequestRequestBodySettingsTools11Type$ {
  /** @deprecated use `RunAgentAgentToolInputRunAgentsRequestRequestBodySettingsTools11Type$inboundSchema` instead. */
  export const inboundSchema =
    RunAgentAgentToolInputRunAgentsRequestRequestBodySettingsTools11Type$inboundSchema;
  /** @deprecated use `RunAgentAgentToolInputRunAgentsRequestRequestBodySettingsTools11Type$outboundSchema` instead. */
  export const outboundSchema =
    RunAgentAgentToolInputRunAgentsRequestRequestBodySettingsTools11Type$outboundSchema;
}

/** @internal */
export const AgentToolInputRunCurrentDateTool$inboundSchema: z.ZodType<
  AgentToolInputRunCurrentDateTool,
  z.ZodTypeDef,
  unknown
> = z.object({
  type:
    RunAgentAgentToolInputRunAgentsRequestRequestBodySettingsTools11Type$inboundSchema,
  requires_approval: z.boolean().default(false),
}).transform((v) => {
  return remap$(v, {
    "requires_approval": "requiresApproval",
  });
});

/** @internal */
export type AgentToolInputRunCurrentDateTool$Outbound = {
  type: string;
  requires_approval: boolean;
};

/** @internal */
export const AgentToolInputRunCurrentDateTool$outboundSchema: z.ZodType<
  AgentToolInputRunCurrentDateTool$Outbound,
  z.ZodTypeDef,
  AgentToolInputRunCurrentDateTool
> = z.object({
  type:
    RunAgentAgentToolInputRunAgentsRequestRequestBodySettingsTools11Type$outboundSchema,
  requiresApproval: z.boolean().default(false),
}).transform((v) => {
  return remap$(v, {
    requiresApproval: "requires_approval",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AgentToolInputRunCurrentDateTool$ {
  /** @deprecated use `AgentToolInputRunCurrentDateTool$inboundSchema` instead. */
  export const inboundSchema = AgentToolInputRunCurrentDateTool$inboundSchema;
  /** @deprecated use `AgentToolInputRunCurrentDateTool$outboundSchema` instead. */
  export const outboundSchema = AgentToolInputRunCurrentDateTool$outboundSchema;
  /** @deprecated use `AgentToolInputRunCurrentDateTool$Outbound` instead. */
  export type Outbound = AgentToolInputRunCurrentDateTool$Outbound;
}

export function agentToolInputRunCurrentDateToolToJSON(
  agentToolInputRunCurrentDateTool: AgentToolInputRunCurrentDateTool,
): string {
  return JSON.stringify(
    AgentToolInputRunCurrentDateTool$outboundSchema.parse(
      agentToolInputRunCurrentDateTool,
    ),
  );
}

export function agentToolInputRunCurrentDateToolFromJSON(
  jsonString: string,
): SafeParseResult<AgentToolInputRunCurrentDateTool, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AgentToolInputRunCurrentDateTool$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AgentToolInputRunCurrentDateTool' from JSON`,
  );
}

/** @internal */
export const RunAgentAgentToolInputRunAgentsRequestRequestBodySettingsTools10Type$inboundSchema:
  z.ZodNativeEnum<
    typeof RunAgentAgentToolInputRunAgentsRequestRequestBodySettingsTools10Type
  > = z.nativeEnum(
    RunAgentAgentToolInputRunAgentsRequestRequestBodySettingsTools10Type,
  );

/** @internal */
export const RunAgentAgentToolInputRunAgentsRequestRequestBodySettingsTools10Type$outboundSchema:
  z.ZodNativeEnum<
    typeof RunAgentAgentToolInputRunAgentsRequestRequestBodySettingsTools10Type
  > =
    RunAgentAgentToolInputRunAgentsRequestRequestBodySettingsTools10Type$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RunAgentAgentToolInputRunAgentsRequestRequestBodySettingsTools10Type$ {
  /** @deprecated use `RunAgentAgentToolInputRunAgentsRequestRequestBodySettingsTools10Type$inboundSchema` instead. */
  export const inboundSchema =
    RunAgentAgentToolInputRunAgentsRequestRequestBodySettingsTools10Type$inboundSchema;
  /** @deprecated use `RunAgentAgentToolInputRunAgentsRequestRequestBodySettingsTools10Type$outboundSchema` instead. */
  export const outboundSchema =
    RunAgentAgentToolInputRunAgentsRequestRequestBodySettingsTools10Type$outboundSchema;
}

/** @internal */
export const AgentToolInputRunQueryKnowledgeBaseTool$inboundSchema: z.ZodType<
  AgentToolInputRunQueryKnowledgeBaseTool,
  z.ZodTypeDef,
  unknown
> = z.object({
  type:
    RunAgentAgentToolInputRunAgentsRequestRequestBodySettingsTools10Type$inboundSchema,
  requires_approval: z.boolean().default(false),
}).transform((v) => {
  return remap$(v, {
    "requires_approval": "requiresApproval",
  });
});

/** @internal */
export type AgentToolInputRunQueryKnowledgeBaseTool$Outbound = {
  type: string;
  requires_approval: boolean;
};

/** @internal */
export const AgentToolInputRunQueryKnowledgeBaseTool$outboundSchema: z.ZodType<
  AgentToolInputRunQueryKnowledgeBaseTool$Outbound,
  z.ZodTypeDef,
  AgentToolInputRunQueryKnowledgeBaseTool
> = z.object({
  type:
    RunAgentAgentToolInputRunAgentsRequestRequestBodySettingsTools10Type$outboundSchema,
  requiresApproval: z.boolean().default(false),
}).transform((v) => {
  return remap$(v, {
    requiresApproval: "requires_approval",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AgentToolInputRunQueryKnowledgeBaseTool$ {
  /** @deprecated use `AgentToolInputRunQueryKnowledgeBaseTool$inboundSchema` instead. */
  export const inboundSchema =
    AgentToolInputRunQueryKnowledgeBaseTool$inboundSchema;
  /** @deprecated use `AgentToolInputRunQueryKnowledgeBaseTool$outboundSchema` instead. */
  export const outboundSchema =
    AgentToolInputRunQueryKnowledgeBaseTool$outboundSchema;
  /** @deprecated use `AgentToolInputRunQueryKnowledgeBaseTool$Outbound` instead. */
  export type Outbound = AgentToolInputRunQueryKnowledgeBaseTool$Outbound;
}

export function agentToolInputRunQueryKnowledgeBaseToolToJSON(
  agentToolInputRunQueryKnowledgeBaseTool:
    AgentToolInputRunQueryKnowledgeBaseTool,
): string {
  return JSON.stringify(
    AgentToolInputRunQueryKnowledgeBaseTool$outboundSchema.parse(
      agentToolInputRunQueryKnowledgeBaseTool,
    ),
  );
}

export function agentToolInputRunQueryKnowledgeBaseToolFromJSON(
  jsonString: string,
): SafeParseResult<
  AgentToolInputRunQueryKnowledgeBaseTool,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      AgentToolInputRunQueryKnowledgeBaseTool$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'AgentToolInputRunQueryKnowledgeBaseTool' from JSON`,
  );
}

/** @internal */
export const RunAgentAgentToolInputRunAgentsRequestRequestBodySettingsTools9Type$inboundSchema:
  z.ZodNativeEnum<
    typeof RunAgentAgentToolInputRunAgentsRequestRequestBodySettingsTools9Type
  > = z.nativeEnum(
    RunAgentAgentToolInputRunAgentsRequestRequestBodySettingsTools9Type,
  );

/** @internal */
export const RunAgentAgentToolInputRunAgentsRequestRequestBodySettingsTools9Type$outboundSchema:
  z.ZodNativeEnum<
    typeof RunAgentAgentToolInputRunAgentsRequestRequestBodySettingsTools9Type
  > =
    RunAgentAgentToolInputRunAgentsRequestRequestBodySettingsTools9Type$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RunAgentAgentToolInputRunAgentsRequestRequestBodySettingsTools9Type$ {
  /** @deprecated use `RunAgentAgentToolInputRunAgentsRequestRequestBodySettingsTools9Type$inboundSchema` instead. */
  export const inboundSchema =
    RunAgentAgentToolInputRunAgentsRequestRequestBodySettingsTools9Type$inboundSchema;
  /** @deprecated use `RunAgentAgentToolInputRunAgentsRequestRequestBodySettingsTools9Type$outboundSchema` instead. */
  export const outboundSchema =
    RunAgentAgentToolInputRunAgentsRequestRequestBodySettingsTools9Type$outboundSchema;
}

/** @internal */
export const AgentToolInputRunRetrieveKnowledgeBasesTool$inboundSchema:
  z.ZodType<
    AgentToolInputRunRetrieveKnowledgeBasesTool,
    z.ZodTypeDef,
    unknown
  > = z.object({
    type:
      RunAgentAgentToolInputRunAgentsRequestRequestBodySettingsTools9Type$inboundSchema,
    requires_approval: z.boolean().default(false),
  }).transform((v) => {
    return remap$(v, {
      "requires_approval": "requiresApproval",
    });
  });

/** @internal */
export type AgentToolInputRunRetrieveKnowledgeBasesTool$Outbound = {
  type: string;
  requires_approval: boolean;
};

/** @internal */
export const AgentToolInputRunRetrieveKnowledgeBasesTool$outboundSchema:
  z.ZodType<
    AgentToolInputRunRetrieveKnowledgeBasesTool$Outbound,
    z.ZodTypeDef,
    AgentToolInputRunRetrieveKnowledgeBasesTool
  > = z.object({
    type:
      RunAgentAgentToolInputRunAgentsRequestRequestBodySettingsTools9Type$outboundSchema,
    requiresApproval: z.boolean().default(false),
  }).transform((v) => {
    return remap$(v, {
      requiresApproval: "requires_approval",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AgentToolInputRunRetrieveKnowledgeBasesTool$ {
  /** @deprecated use `AgentToolInputRunRetrieveKnowledgeBasesTool$inboundSchema` instead. */
  export const inboundSchema =
    AgentToolInputRunRetrieveKnowledgeBasesTool$inboundSchema;
  /** @deprecated use `AgentToolInputRunRetrieveKnowledgeBasesTool$outboundSchema` instead. */
  export const outboundSchema =
    AgentToolInputRunRetrieveKnowledgeBasesTool$outboundSchema;
  /** @deprecated use `AgentToolInputRunRetrieveKnowledgeBasesTool$Outbound` instead. */
  export type Outbound = AgentToolInputRunRetrieveKnowledgeBasesTool$Outbound;
}

export function agentToolInputRunRetrieveKnowledgeBasesToolToJSON(
  agentToolInputRunRetrieveKnowledgeBasesTool:
    AgentToolInputRunRetrieveKnowledgeBasesTool,
): string {
  return JSON.stringify(
    AgentToolInputRunRetrieveKnowledgeBasesTool$outboundSchema.parse(
      agentToolInputRunRetrieveKnowledgeBasesTool,
    ),
  );
}

export function agentToolInputRunRetrieveKnowledgeBasesToolFromJSON(
  jsonString: string,
): SafeParseResult<
  AgentToolInputRunRetrieveKnowledgeBasesTool,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      AgentToolInputRunRetrieveKnowledgeBasesTool$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'AgentToolInputRunRetrieveKnowledgeBasesTool' from JSON`,
  );
}

/** @internal */
export const RunAgentAgentToolInputRunAgentsRequestRequestBodySettingsTools8Type$inboundSchema:
  z.ZodNativeEnum<
    typeof RunAgentAgentToolInputRunAgentsRequestRequestBodySettingsTools8Type
  > = z.nativeEnum(
    RunAgentAgentToolInputRunAgentsRequestRequestBodySettingsTools8Type,
  );

/** @internal */
export const RunAgentAgentToolInputRunAgentsRequestRequestBodySettingsTools8Type$outboundSchema:
  z.ZodNativeEnum<
    typeof RunAgentAgentToolInputRunAgentsRequestRequestBodySettingsTools8Type
  > =
    RunAgentAgentToolInputRunAgentsRequestRequestBodySettingsTools8Type$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RunAgentAgentToolInputRunAgentsRequestRequestBodySettingsTools8Type$ {
  /** @deprecated use `RunAgentAgentToolInputRunAgentsRequestRequestBodySettingsTools8Type$inboundSchema` instead. */
  export const inboundSchema =
    RunAgentAgentToolInputRunAgentsRequestRequestBodySettingsTools8Type$inboundSchema;
  /** @deprecated use `RunAgentAgentToolInputRunAgentsRequestRequestBodySettingsTools8Type$outboundSchema` instead. */
  export const outboundSchema =
    RunAgentAgentToolInputRunAgentsRequestRequestBodySettingsTools8Type$outboundSchema;
}

/** @internal */
export const AgentToolInputRunDeleteMemoryDocumentTool$inboundSchema: z.ZodType<
  AgentToolInputRunDeleteMemoryDocumentTool,
  z.ZodTypeDef,
  unknown
> = z.object({
  type:
    RunAgentAgentToolInputRunAgentsRequestRequestBodySettingsTools8Type$inboundSchema,
  requires_approval: z.boolean().default(false),
}).transform((v) => {
  return remap$(v, {
    "requires_approval": "requiresApproval",
  });
});

/** @internal */
export type AgentToolInputRunDeleteMemoryDocumentTool$Outbound = {
  type: string;
  requires_approval: boolean;
};

/** @internal */
export const AgentToolInputRunDeleteMemoryDocumentTool$outboundSchema:
  z.ZodType<
    AgentToolInputRunDeleteMemoryDocumentTool$Outbound,
    z.ZodTypeDef,
    AgentToolInputRunDeleteMemoryDocumentTool
  > = z.object({
    type:
      RunAgentAgentToolInputRunAgentsRequestRequestBodySettingsTools8Type$outboundSchema,
    requiresApproval: z.boolean().default(false),
  }).transform((v) => {
    return remap$(v, {
      requiresApproval: "requires_approval",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AgentToolInputRunDeleteMemoryDocumentTool$ {
  /** @deprecated use `AgentToolInputRunDeleteMemoryDocumentTool$inboundSchema` instead. */
  export const inboundSchema =
    AgentToolInputRunDeleteMemoryDocumentTool$inboundSchema;
  /** @deprecated use `AgentToolInputRunDeleteMemoryDocumentTool$outboundSchema` instead. */
  export const outboundSchema =
    AgentToolInputRunDeleteMemoryDocumentTool$outboundSchema;
  /** @deprecated use `AgentToolInputRunDeleteMemoryDocumentTool$Outbound` instead. */
  export type Outbound = AgentToolInputRunDeleteMemoryDocumentTool$Outbound;
}

export function agentToolInputRunDeleteMemoryDocumentToolToJSON(
  agentToolInputRunDeleteMemoryDocumentTool:
    AgentToolInputRunDeleteMemoryDocumentTool,
): string {
  return JSON.stringify(
    AgentToolInputRunDeleteMemoryDocumentTool$outboundSchema.parse(
      agentToolInputRunDeleteMemoryDocumentTool,
    ),
  );
}

export function agentToolInputRunDeleteMemoryDocumentToolFromJSON(
  jsonString: string,
): SafeParseResult<
  AgentToolInputRunDeleteMemoryDocumentTool,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      AgentToolInputRunDeleteMemoryDocumentTool$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'AgentToolInputRunDeleteMemoryDocumentTool' from JSON`,
  );
}

/** @internal */
export const RunAgentAgentToolInputRunAgentsRequestRequestBodySettingsToolsType$inboundSchema:
  z.ZodNativeEnum<
    typeof RunAgentAgentToolInputRunAgentsRequestRequestBodySettingsToolsType
  > = z.nativeEnum(
    RunAgentAgentToolInputRunAgentsRequestRequestBodySettingsToolsType,
  );

/** @internal */
export const RunAgentAgentToolInputRunAgentsRequestRequestBodySettingsToolsType$outboundSchema:
  z.ZodNativeEnum<
    typeof RunAgentAgentToolInputRunAgentsRequestRequestBodySettingsToolsType
  > =
    RunAgentAgentToolInputRunAgentsRequestRequestBodySettingsToolsType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RunAgentAgentToolInputRunAgentsRequestRequestBodySettingsToolsType$ {
  /** @deprecated use `RunAgentAgentToolInputRunAgentsRequestRequestBodySettingsToolsType$inboundSchema` instead. */
  export const inboundSchema =
    RunAgentAgentToolInputRunAgentsRequestRequestBodySettingsToolsType$inboundSchema;
  /** @deprecated use `RunAgentAgentToolInputRunAgentsRequestRequestBodySettingsToolsType$outboundSchema` instead. */
  export const outboundSchema =
    RunAgentAgentToolInputRunAgentsRequestRequestBodySettingsToolsType$outboundSchema;
}

/** @internal */
export const AgentToolInputRunRetrieveMemoryStoresTool$inboundSchema: z.ZodType<
  AgentToolInputRunRetrieveMemoryStoresTool,
  z.ZodTypeDef,
  unknown
> = z.object({
  type:
    RunAgentAgentToolInputRunAgentsRequestRequestBodySettingsToolsType$inboundSchema,
  requires_approval: z.boolean().default(false),
}).transform((v) => {
  return remap$(v, {
    "requires_approval": "requiresApproval",
  });
});

/** @internal */
export type AgentToolInputRunRetrieveMemoryStoresTool$Outbound = {
  type: string;
  requires_approval: boolean;
};

/** @internal */
export const AgentToolInputRunRetrieveMemoryStoresTool$outboundSchema:
  z.ZodType<
    AgentToolInputRunRetrieveMemoryStoresTool$Outbound,
    z.ZodTypeDef,
    AgentToolInputRunRetrieveMemoryStoresTool
  > = z.object({
    type:
      RunAgentAgentToolInputRunAgentsRequestRequestBodySettingsToolsType$outboundSchema,
    requiresApproval: z.boolean().default(false),
  }).transform((v) => {
    return remap$(v, {
      requiresApproval: "requires_approval",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AgentToolInputRunRetrieveMemoryStoresTool$ {
  /** @deprecated use `AgentToolInputRunRetrieveMemoryStoresTool$inboundSchema` instead. */
  export const inboundSchema =
    AgentToolInputRunRetrieveMemoryStoresTool$inboundSchema;
  /** @deprecated use `AgentToolInputRunRetrieveMemoryStoresTool$outboundSchema` instead. */
  export const outboundSchema =
    AgentToolInputRunRetrieveMemoryStoresTool$outboundSchema;
  /** @deprecated use `AgentToolInputRunRetrieveMemoryStoresTool$Outbound` instead. */
  export type Outbound = AgentToolInputRunRetrieveMemoryStoresTool$Outbound;
}

export function agentToolInputRunRetrieveMemoryStoresToolToJSON(
  agentToolInputRunRetrieveMemoryStoresTool:
    AgentToolInputRunRetrieveMemoryStoresTool,
): string {
  return JSON.stringify(
    AgentToolInputRunRetrieveMemoryStoresTool$outboundSchema.parse(
      agentToolInputRunRetrieveMemoryStoresTool,
    ),
  );
}

export function agentToolInputRunRetrieveMemoryStoresToolFromJSON(
  jsonString: string,
): SafeParseResult<
  AgentToolInputRunRetrieveMemoryStoresTool,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      AgentToolInputRunRetrieveMemoryStoresTool$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'AgentToolInputRunRetrieveMemoryStoresTool' from JSON`,
  );
}

/** @internal */
export const RunAgentAgentToolInputRunAgentsRequestRequestBodySettingsType$inboundSchema:
  z.ZodNativeEnum<
    typeof RunAgentAgentToolInputRunAgentsRequestRequestBodySettingsType
  > = z.nativeEnum(
    RunAgentAgentToolInputRunAgentsRequestRequestBodySettingsType,
  );

/** @internal */
export const RunAgentAgentToolInputRunAgentsRequestRequestBodySettingsType$outboundSchema:
  z.ZodNativeEnum<
    typeof RunAgentAgentToolInputRunAgentsRequestRequestBodySettingsType
  > =
    RunAgentAgentToolInputRunAgentsRequestRequestBodySettingsType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RunAgentAgentToolInputRunAgentsRequestRequestBodySettingsType$ {
  /** @deprecated use `RunAgentAgentToolInputRunAgentsRequestRequestBodySettingsType$inboundSchema` instead. */
  export const inboundSchema =
    RunAgentAgentToolInputRunAgentsRequestRequestBodySettingsType$inboundSchema;
  /** @deprecated use `RunAgentAgentToolInputRunAgentsRequestRequestBodySettingsType$outboundSchema` instead. */
  export const outboundSchema =
    RunAgentAgentToolInputRunAgentsRequestRequestBodySettingsType$outboundSchema;
}

/** @internal */
export const AgentToolInputRunWriteMemoryStoreTool$inboundSchema: z.ZodType<
  AgentToolInputRunWriteMemoryStoreTool,
  z.ZodTypeDef,
  unknown
> = z.object({
  type:
    RunAgentAgentToolInputRunAgentsRequestRequestBodySettingsType$inboundSchema,
  requires_approval: z.boolean().default(false),
}).transform((v) => {
  return remap$(v, {
    "requires_approval": "requiresApproval",
  });
});

/** @internal */
export type AgentToolInputRunWriteMemoryStoreTool$Outbound = {
  type: string;
  requires_approval: boolean;
};

/** @internal */
export const AgentToolInputRunWriteMemoryStoreTool$outboundSchema: z.ZodType<
  AgentToolInputRunWriteMemoryStoreTool$Outbound,
  z.ZodTypeDef,
  AgentToolInputRunWriteMemoryStoreTool
> = z.object({
  type:
    RunAgentAgentToolInputRunAgentsRequestRequestBodySettingsType$outboundSchema,
  requiresApproval: z.boolean().default(false),
}).transform((v) => {
  return remap$(v, {
    requiresApproval: "requires_approval",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AgentToolInputRunWriteMemoryStoreTool$ {
  /** @deprecated use `AgentToolInputRunWriteMemoryStoreTool$inboundSchema` instead. */
  export const inboundSchema =
    AgentToolInputRunWriteMemoryStoreTool$inboundSchema;
  /** @deprecated use `AgentToolInputRunWriteMemoryStoreTool$outboundSchema` instead. */
  export const outboundSchema =
    AgentToolInputRunWriteMemoryStoreTool$outboundSchema;
  /** @deprecated use `AgentToolInputRunWriteMemoryStoreTool$Outbound` instead. */
  export type Outbound = AgentToolInputRunWriteMemoryStoreTool$Outbound;
}

export function agentToolInputRunWriteMemoryStoreToolToJSON(
  agentToolInputRunWriteMemoryStoreTool: AgentToolInputRunWriteMemoryStoreTool,
): string {
  return JSON.stringify(
    AgentToolInputRunWriteMemoryStoreTool$outboundSchema.parse(
      agentToolInputRunWriteMemoryStoreTool,
    ),
  );
}

export function agentToolInputRunWriteMemoryStoreToolFromJSON(
  jsonString: string,
): SafeParseResult<AgentToolInputRunWriteMemoryStoreTool, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      AgentToolInputRunWriteMemoryStoreTool$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AgentToolInputRunWriteMemoryStoreTool' from JSON`,
  );
}

/** @internal */
export const RunAgentAgentToolInputRunAgentsRequestRequestBodyType$inboundSchema:
  z.ZodNativeEnum<
    typeof RunAgentAgentToolInputRunAgentsRequestRequestBodyType
  > = z.nativeEnum(RunAgentAgentToolInputRunAgentsRequestRequestBodyType);

/** @internal */
export const RunAgentAgentToolInputRunAgentsRequestRequestBodyType$outboundSchema:
  z.ZodNativeEnum<
    typeof RunAgentAgentToolInputRunAgentsRequestRequestBodyType
  > = RunAgentAgentToolInputRunAgentsRequestRequestBodyType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RunAgentAgentToolInputRunAgentsRequestRequestBodyType$ {
  /** @deprecated use `RunAgentAgentToolInputRunAgentsRequestRequestBodyType$inboundSchema` instead. */
  export const inboundSchema =
    RunAgentAgentToolInputRunAgentsRequestRequestBodyType$inboundSchema;
  /** @deprecated use `RunAgentAgentToolInputRunAgentsRequestRequestBodyType$outboundSchema` instead. */
  export const outboundSchema =
    RunAgentAgentToolInputRunAgentsRequestRequestBodyType$outboundSchema;
}

/** @internal */
export const AgentToolInputRunQueryMemoryStoreTool$inboundSchema: z.ZodType<
  AgentToolInputRunQueryMemoryStoreTool,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: RunAgentAgentToolInputRunAgentsRequestRequestBodyType$inboundSchema,
  requires_approval: z.boolean().default(false),
}).transform((v) => {
  return remap$(v, {
    "requires_approval": "requiresApproval",
  });
});

/** @internal */
export type AgentToolInputRunQueryMemoryStoreTool$Outbound = {
  type: string;
  requires_approval: boolean;
};

/** @internal */
export const AgentToolInputRunQueryMemoryStoreTool$outboundSchema: z.ZodType<
  AgentToolInputRunQueryMemoryStoreTool$Outbound,
  z.ZodTypeDef,
  AgentToolInputRunQueryMemoryStoreTool
> = z.object({
  type: RunAgentAgentToolInputRunAgentsRequestRequestBodyType$outboundSchema,
  requiresApproval: z.boolean().default(false),
}).transform((v) => {
  return remap$(v, {
    requiresApproval: "requires_approval",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AgentToolInputRunQueryMemoryStoreTool$ {
  /** @deprecated use `AgentToolInputRunQueryMemoryStoreTool$inboundSchema` instead. */
  export const inboundSchema =
    AgentToolInputRunQueryMemoryStoreTool$inboundSchema;
  /** @deprecated use `AgentToolInputRunQueryMemoryStoreTool$outboundSchema` instead. */
  export const outboundSchema =
    AgentToolInputRunQueryMemoryStoreTool$outboundSchema;
  /** @deprecated use `AgentToolInputRunQueryMemoryStoreTool$Outbound` instead. */
  export type Outbound = AgentToolInputRunQueryMemoryStoreTool$Outbound;
}

export function agentToolInputRunQueryMemoryStoreToolToJSON(
  agentToolInputRunQueryMemoryStoreTool: AgentToolInputRunQueryMemoryStoreTool,
): string {
  return JSON.stringify(
    AgentToolInputRunQueryMemoryStoreTool$outboundSchema.parse(
      agentToolInputRunQueryMemoryStoreTool,
    ),
  );
}

export function agentToolInputRunQueryMemoryStoreToolFromJSON(
  jsonString: string,
): SafeParseResult<AgentToolInputRunQueryMemoryStoreTool, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      AgentToolInputRunQueryMemoryStoreTool$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AgentToolInputRunQueryMemoryStoreTool' from JSON`,
  );
}

/** @internal */
export const RunAgentAgentToolInputRunAgentsRequestType$inboundSchema:
  z.ZodNativeEnum<typeof RunAgentAgentToolInputRunAgentsRequestType> = z
    .nativeEnum(RunAgentAgentToolInputRunAgentsRequestType);

/** @internal */
export const RunAgentAgentToolInputRunAgentsRequestType$outboundSchema:
  z.ZodNativeEnum<typeof RunAgentAgentToolInputRunAgentsRequestType> =
    RunAgentAgentToolInputRunAgentsRequestType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RunAgentAgentToolInputRunAgentsRequestType$ {
  /** @deprecated use `RunAgentAgentToolInputRunAgentsRequestType$inboundSchema` instead. */
  export const inboundSchema =
    RunAgentAgentToolInputRunAgentsRequestType$inboundSchema;
  /** @deprecated use `RunAgentAgentToolInputRunAgentsRequestType$outboundSchema` instead. */
  export const outboundSchema =
    RunAgentAgentToolInputRunAgentsRequestType$outboundSchema;
}

/** @internal */
export const AgentToolInputRunRetrieveAgentsTool$inboundSchema: z.ZodType<
  AgentToolInputRunRetrieveAgentsTool,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: RunAgentAgentToolInputRunAgentsRequestType$inboundSchema,
  requires_approval: z.boolean().default(false),
}).transform((v) => {
  return remap$(v, {
    "requires_approval": "requiresApproval",
  });
});

/** @internal */
export type AgentToolInputRunRetrieveAgentsTool$Outbound = {
  type: string;
  requires_approval: boolean;
};

/** @internal */
export const AgentToolInputRunRetrieveAgentsTool$outboundSchema: z.ZodType<
  AgentToolInputRunRetrieveAgentsTool$Outbound,
  z.ZodTypeDef,
  AgentToolInputRunRetrieveAgentsTool
> = z.object({
  type: RunAgentAgentToolInputRunAgentsRequestType$outboundSchema,
  requiresApproval: z.boolean().default(false),
}).transform((v) => {
  return remap$(v, {
    requiresApproval: "requires_approval",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AgentToolInputRunRetrieveAgentsTool$ {
  /** @deprecated use `AgentToolInputRunRetrieveAgentsTool$inboundSchema` instead. */
  export const inboundSchema =
    AgentToolInputRunRetrieveAgentsTool$inboundSchema;
  /** @deprecated use `AgentToolInputRunRetrieveAgentsTool$outboundSchema` instead. */
  export const outboundSchema =
    AgentToolInputRunRetrieveAgentsTool$outboundSchema;
  /** @deprecated use `AgentToolInputRunRetrieveAgentsTool$Outbound` instead. */
  export type Outbound = AgentToolInputRunRetrieveAgentsTool$Outbound;
}

export function agentToolInputRunRetrieveAgentsToolToJSON(
  agentToolInputRunRetrieveAgentsTool: AgentToolInputRunRetrieveAgentsTool,
): string {
  return JSON.stringify(
    AgentToolInputRunRetrieveAgentsTool$outboundSchema.parse(
      agentToolInputRunRetrieveAgentsTool,
    ),
  );
}

export function agentToolInputRunRetrieveAgentsToolFromJSON(
  jsonString: string,
): SafeParseResult<AgentToolInputRunRetrieveAgentsTool, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      AgentToolInputRunRetrieveAgentsTool$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AgentToolInputRunRetrieveAgentsTool' from JSON`,
  );
}

/** @internal */
export const RunAgentAgentToolInputRunAgentsType$inboundSchema: z.ZodNativeEnum<
  typeof RunAgentAgentToolInputRunAgentsType
> = z.nativeEnum(RunAgentAgentToolInputRunAgentsType);

/** @internal */
export const RunAgentAgentToolInputRunAgentsType$outboundSchema:
  z.ZodNativeEnum<typeof RunAgentAgentToolInputRunAgentsType> =
    RunAgentAgentToolInputRunAgentsType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RunAgentAgentToolInputRunAgentsType$ {
  /** @deprecated use `RunAgentAgentToolInputRunAgentsType$inboundSchema` instead. */
  export const inboundSchema =
    RunAgentAgentToolInputRunAgentsType$inboundSchema;
  /** @deprecated use `RunAgentAgentToolInputRunAgentsType$outboundSchema` instead. */
  export const outboundSchema =
    RunAgentAgentToolInputRunAgentsType$outboundSchema;
}

/** @internal */
export const AgentToolInputRunCallSubAgentTool$inboundSchema: z.ZodType<
  AgentToolInputRunCallSubAgentTool,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: RunAgentAgentToolInputRunAgentsType$inboundSchema,
  requires_approval: z.boolean().default(false),
}).transform((v) => {
  return remap$(v, {
    "requires_approval": "requiresApproval",
  });
});

/** @internal */
export type AgentToolInputRunCallSubAgentTool$Outbound = {
  type: string;
  requires_approval: boolean;
};

/** @internal */
export const AgentToolInputRunCallSubAgentTool$outboundSchema: z.ZodType<
  AgentToolInputRunCallSubAgentTool$Outbound,
  z.ZodTypeDef,
  AgentToolInputRunCallSubAgentTool
> = z.object({
  type: RunAgentAgentToolInputRunAgentsType$outboundSchema,
  requiresApproval: z.boolean().default(false),
}).transform((v) => {
  return remap$(v, {
    requiresApproval: "requires_approval",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AgentToolInputRunCallSubAgentTool$ {
  /** @deprecated use `AgentToolInputRunCallSubAgentTool$inboundSchema` instead. */
  export const inboundSchema = AgentToolInputRunCallSubAgentTool$inboundSchema;
  /** @deprecated use `AgentToolInputRunCallSubAgentTool$outboundSchema` instead. */
  export const outboundSchema =
    AgentToolInputRunCallSubAgentTool$outboundSchema;
  /** @deprecated use `AgentToolInputRunCallSubAgentTool$Outbound` instead. */
  export type Outbound = AgentToolInputRunCallSubAgentTool$Outbound;
}

export function agentToolInputRunCallSubAgentToolToJSON(
  agentToolInputRunCallSubAgentTool: AgentToolInputRunCallSubAgentTool,
): string {
  return JSON.stringify(
    AgentToolInputRunCallSubAgentTool$outboundSchema.parse(
      agentToolInputRunCallSubAgentTool,
    ),
  );
}

export function agentToolInputRunCallSubAgentToolFromJSON(
  jsonString: string,
): SafeParseResult<AgentToolInputRunCallSubAgentTool, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AgentToolInputRunCallSubAgentTool$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AgentToolInputRunCallSubAgentTool' from JSON`,
  );
}

/** @internal */
export const RunAgentAgentToolInputRunType$inboundSchema: z.ZodNativeEnum<
  typeof RunAgentAgentToolInputRunType
> = z.nativeEnum(RunAgentAgentToolInputRunType);

/** @internal */
export const RunAgentAgentToolInputRunType$outboundSchema: z.ZodNativeEnum<
  typeof RunAgentAgentToolInputRunType
> = RunAgentAgentToolInputRunType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RunAgentAgentToolInputRunType$ {
  /** @deprecated use `RunAgentAgentToolInputRunType$inboundSchema` instead. */
  export const inboundSchema = RunAgentAgentToolInputRunType$inboundSchema;
  /** @deprecated use `RunAgentAgentToolInputRunType$outboundSchema` instead. */
  export const outboundSchema = RunAgentAgentToolInputRunType$outboundSchema;
}

/** @internal */
export const AgentToolInputRunWebScraperTool$inboundSchema: z.ZodType<
  AgentToolInputRunWebScraperTool,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: RunAgentAgentToolInputRunType$inboundSchema,
  requires_approval: z.boolean().default(false),
}).transform((v) => {
  return remap$(v, {
    "requires_approval": "requiresApproval",
  });
});

/** @internal */
export type AgentToolInputRunWebScraperTool$Outbound = {
  type: string;
  requires_approval: boolean;
};

/** @internal */
export const AgentToolInputRunWebScraperTool$outboundSchema: z.ZodType<
  AgentToolInputRunWebScraperTool$Outbound,
  z.ZodTypeDef,
  AgentToolInputRunWebScraperTool
> = z.object({
  type: RunAgentAgentToolInputRunType$outboundSchema,
  requiresApproval: z.boolean().default(false),
}).transform((v) => {
  return remap$(v, {
    requiresApproval: "requires_approval",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AgentToolInputRunWebScraperTool$ {
  /** @deprecated use `AgentToolInputRunWebScraperTool$inboundSchema` instead. */
  export const inboundSchema = AgentToolInputRunWebScraperTool$inboundSchema;
  /** @deprecated use `AgentToolInputRunWebScraperTool$outboundSchema` instead. */
  export const outboundSchema = AgentToolInputRunWebScraperTool$outboundSchema;
  /** @deprecated use `AgentToolInputRunWebScraperTool$Outbound` instead. */
  export type Outbound = AgentToolInputRunWebScraperTool$Outbound;
}

export function agentToolInputRunWebScraperToolToJSON(
  agentToolInputRunWebScraperTool: AgentToolInputRunWebScraperTool,
): string {
  return JSON.stringify(
    AgentToolInputRunWebScraperTool$outboundSchema.parse(
      agentToolInputRunWebScraperTool,
    ),
  );
}

export function agentToolInputRunWebScraperToolFromJSON(
  jsonString: string,
): SafeParseResult<AgentToolInputRunWebScraperTool, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AgentToolInputRunWebScraperTool$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AgentToolInputRunWebScraperTool' from JSON`,
  );
}

/** @internal */
export const AgentToolInputRunType$inboundSchema: z.ZodNativeEnum<
  typeof AgentToolInputRunType
> = z.nativeEnum(AgentToolInputRunType);

/** @internal */
export const AgentToolInputRunType$outboundSchema: z.ZodNativeEnum<
  typeof AgentToolInputRunType
> = AgentToolInputRunType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AgentToolInputRunType$ {
  /** @deprecated use `AgentToolInputRunType$inboundSchema` instead. */
  export const inboundSchema = AgentToolInputRunType$inboundSchema;
  /** @deprecated use `AgentToolInputRunType$outboundSchema` instead. */
  export const outboundSchema = AgentToolInputRunType$outboundSchema;
}

/** @internal */
export const AgentToolInputRunGoogleSearchTool$inboundSchema: z.ZodType<
  AgentToolInputRunGoogleSearchTool,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: AgentToolInputRunType$inboundSchema,
  requires_approval: z.boolean().default(false),
}).transform((v) => {
  return remap$(v, {
    "requires_approval": "requiresApproval",
  });
});

/** @internal */
export type AgentToolInputRunGoogleSearchTool$Outbound = {
  type: string;
  requires_approval: boolean;
};

/** @internal */
export const AgentToolInputRunGoogleSearchTool$outboundSchema: z.ZodType<
  AgentToolInputRunGoogleSearchTool$Outbound,
  z.ZodTypeDef,
  AgentToolInputRunGoogleSearchTool
> = z.object({
  type: AgentToolInputRunType$outboundSchema,
  requiresApproval: z.boolean().default(false),
}).transform((v) => {
  return remap$(v, {
    requiresApproval: "requires_approval",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AgentToolInputRunGoogleSearchTool$ {
  /** @deprecated use `AgentToolInputRunGoogleSearchTool$inboundSchema` instead. */
  export const inboundSchema = AgentToolInputRunGoogleSearchTool$inboundSchema;
  /** @deprecated use `AgentToolInputRunGoogleSearchTool$outboundSchema` instead. */
  export const outboundSchema =
    AgentToolInputRunGoogleSearchTool$outboundSchema;
  /** @deprecated use `AgentToolInputRunGoogleSearchTool$Outbound` instead. */
  export type Outbound = AgentToolInputRunGoogleSearchTool$Outbound;
}

export function agentToolInputRunGoogleSearchToolToJSON(
  agentToolInputRunGoogleSearchTool: AgentToolInputRunGoogleSearchTool,
): string {
  return JSON.stringify(
    AgentToolInputRunGoogleSearchTool$outboundSchema.parse(
      agentToolInputRunGoogleSearchTool,
    ),
  );
}

export function agentToolInputRunGoogleSearchToolFromJSON(
  jsonString: string,
): SafeParseResult<AgentToolInputRunGoogleSearchTool, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AgentToolInputRunGoogleSearchTool$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AgentToolInputRunGoogleSearchTool' from JSON`,
  );
}

/** @internal */
export const AgentToolInputRun$inboundSchema: z.ZodType<
  AgentToolInputRun,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => HTTPToolRun$inboundSchema),
  z.lazy(() => CodeToolRun$inboundSchema),
  z.lazy(() => FunctionToolRun$inboundSchema),
  z.lazy(() => AgentToolInputRunGoogleSearchTool$inboundSchema),
  z.lazy(() => AgentToolInputRunWebScraperTool$inboundSchema),
  z.lazy(() => AgentToolInputRunCallSubAgentTool$inboundSchema),
  z.lazy(() => AgentToolInputRunRetrieveAgentsTool$inboundSchema),
  z.lazy(() => AgentToolInputRunQueryMemoryStoreTool$inboundSchema),
  z.lazy(() => AgentToolInputRunWriteMemoryStoreTool$inboundSchema),
  z.lazy(() => AgentToolInputRunRetrieveMemoryStoresTool$inboundSchema),
  z.lazy(() => AgentToolInputRunDeleteMemoryDocumentTool$inboundSchema),
  z.lazy(() => AgentToolInputRunRetrieveKnowledgeBasesTool$inboundSchema),
  z.lazy(() => AgentToolInputRunQueryKnowledgeBaseTool$inboundSchema),
  z.lazy(() => AgentToolInputRunCurrentDateTool$inboundSchema),
]);

/** @internal */
export type AgentToolInputRun$Outbound =
  | HTTPToolRun$Outbound
  | CodeToolRun$Outbound
  | FunctionToolRun$Outbound
  | AgentToolInputRunGoogleSearchTool$Outbound
  | AgentToolInputRunWebScraperTool$Outbound
  | AgentToolInputRunCallSubAgentTool$Outbound
  | AgentToolInputRunRetrieveAgentsTool$Outbound
  | AgentToolInputRunQueryMemoryStoreTool$Outbound
  | AgentToolInputRunWriteMemoryStoreTool$Outbound
  | AgentToolInputRunRetrieveMemoryStoresTool$Outbound
  | AgentToolInputRunDeleteMemoryDocumentTool$Outbound
  | AgentToolInputRunRetrieveKnowledgeBasesTool$Outbound
  | AgentToolInputRunQueryKnowledgeBaseTool$Outbound
  | AgentToolInputRunCurrentDateTool$Outbound;

/** @internal */
export const AgentToolInputRun$outboundSchema: z.ZodType<
  AgentToolInputRun$Outbound,
  z.ZodTypeDef,
  AgentToolInputRun
> = z.union([
  z.lazy(() => HTTPToolRun$outboundSchema),
  z.lazy(() => CodeToolRun$outboundSchema),
  z.lazy(() => FunctionToolRun$outboundSchema),
  z.lazy(() => AgentToolInputRunGoogleSearchTool$outboundSchema),
  z.lazy(() => AgentToolInputRunWebScraperTool$outboundSchema),
  z.lazy(() => AgentToolInputRunCallSubAgentTool$outboundSchema),
  z.lazy(() => AgentToolInputRunRetrieveAgentsTool$outboundSchema),
  z.lazy(() => AgentToolInputRunQueryMemoryStoreTool$outboundSchema),
  z.lazy(() => AgentToolInputRunWriteMemoryStoreTool$outboundSchema),
  z.lazy(() => AgentToolInputRunRetrieveMemoryStoresTool$outboundSchema),
  z.lazy(() => AgentToolInputRunDeleteMemoryDocumentTool$outboundSchema),
  z.lazy(() => AgentToolInputRunRetrieveKnowledgeBasesTool$outboundSchema),
  z.lazy(() => AgentToolInputRunQueryKnowledgeBaseTool$outboundSchema),
  z.lazy(() => AgentToolInputRunCurrentDateTool$outboundSchema),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AgentToolInputRun$ {
  /** @deprecated use `AgentToolInputRun$inboundSchema` instead. */
  export const inboundSchema = AgentToolInputRun$inboundSchema;
  /** @deprecated use `AgentToolInputRun$outboundSchema` instead. */
  export const outboundSchema = AgentToolInputRun$outboundSchema;
  /** @deprecated use `AgentToolInputRun$Outbound` instead. */
  export type Outbound = AgentToolInputRun$Outbound;
}

export function agentToolInputRunToJSON(
  agentToolInputRun: AgentToolInputRun,
): string {
  return JSON.stringify(
    AgentToolInputRun$outboundSchema.parse(agentToolInputRun),
  );
}

export function agentToolInputRunFromJSON(
  jsonString: string,
): SafeParseResult<AgentToolInputRun, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AgentToolInputRun$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AgentToolInputRun' from JSON`,
  );
}

/** @internal */
export const RunAgentToolApprovalRequired$inboundSchema: z.ZodNativeEnum<
  typeof RunAgentToolApprovalRequired
> = z.nativeEnum(RunAgentToolApprovalRequired);

/** @internal */
export const RunAgentToolApprovalRequired$outboundSchema: z.ZodNativeEnum<
  typeof RunAgentToolApprovalRequired
> = RunAgentToolApprovalRequired$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RunAgentToolApprovalRequired$ {
  /** @deprecated use `RunAgentToolApprovalRequired$inboundSchema` instead. */
  export const inboundSchema = RunAgentToolApprovalRequired$inboundSchema;
  /** @deprecated use `RunAgentToolApprovalRequired$outboundSchema` instead. */
  export const outboundSchema = RunAgentToolApprovalRequired$outboundSchema;
}

/** @internal */
export const RunAgentSettings$inboundSchema: z.ZodType<
  RunAgentSettings,
  z.ZodTypeDef,
  unknown
> = z.object({
  tools: z.array(
    z.union([
      z.lazy(() => HTTPToolRun$inboundSchema),
      z.lazy(() => CodeToolRun$inboundSchema),
      z.lazy(() => FunctionToolRun$inboundSchema),
      z.lazy(() => AgentToolInputRunGoogleSearchTool$inboundSchema),
      z.lazy(() => AgentToolInputRunWebScraperTool$inboundSchema),
      z.lazy(() => AgentToolInputRunCallSubAgentTool$inboundSchema),
      z.lazy(() => AgentToolInputRunRetrieveAgentsTool$inboundSchema),
      z.lazy(() => AgentToolInputRunQueryMemoryStoreTool$inboundSchema),
      z.lazy(() => AgentToolInputRunWriteMemoryStoreTool$inboundSchema),
      z.lazy(() => AgentToolInputRunRetrieveMemoryStoresTool$inboundSchema),
      z.lazy(() => AgentToolInputRunDeleteMemoryDocumentTool$inboundSchema),
      z.lazy(() => AgentToolInputRunRetrieveKnowledgeBasesTool$inboundSchema),
      z.lazy(() => AgentToolInputRunQueryKnowledgeBaseTool$inboundSchema),
      z.lazy(() => AgentToolInputRunCurrentDateTool$inboundSchema),
    ]),
  ),
  tool_approval_required: RunAgentToolApprovalRequired$inboundSchema.default(
    "none",
  ),
  max_iterations: z.number().int().default(15),
  max_execution_time: z.number().int().default(300),
}).transform((v) => {
  return remap$(v, {
    "tool_approval_required": "toolApprovalRequired",
    "max_iterations": "maxIterations",
    "max_execution_time": "maxExecutionTime",
  });
});

/** @internal */
export type RunAgentSettings$Outbound = {
  tools: Array<
    | HTTPToolRun$Outbound
    | CodeToolRun$Outbound
    | FunctionToolRun$Outbound
    | AgentToolInputRunGoogleSearchTool$Outbound
    | AgentToolInputRunWebScraperTool$Outbound
    | AgentToolInputRunCallSubAgentTool$Outbound
    | AgentToolInputRunRetrieveAgentsTool$Outbound
    | AgentToolInputRunQueryMemoryStoreTool$Outbound
    | AgentToolInputRunWriteMemoryStoreTool$Outbound
    | AgentToolInputRunRetrieveMemoryStoresTool$Outbound
    | AgentToolInputRunDeleteMemoryDocumentTool$Outbound
    | AgentToolInputRunRetrieveKnowledgeBasesTool$Outbound
    | AgentToolInputRunQueryKnowledgeBaseTool$Outbound
    | AgentToolInputRunCurrentDateTool$Outbound
  >;
  tool_approval_required: string;
  max_iterations: number;
  max_execution_time: number;
};

/** @internal */
export const RunAgentSettings$outboundSchema: z.ZodType<
  RunAgentSettings$Outbound,
  z.ZodTypeDef,
  RunAgentSettings
> = z.object({
  tools: z.array(
    z.union([
      z.lazy(() => HTTPToolRun$outboundSchema),
      z.lazy(() => CodeToolRun$outboundSchema),
      z.lazy(() => FunctionToolRun$outboundSchema),
      z.lazy(() => AgentToolInputRunGoogleSearchTool$outboundSchema),
      z.lazy(() => AgentToolInputRunWebScraperTool$outboundSchema),
      z.lazy(() => AgentToolInputRunCallSubAgentTool$outboundSchema),
      z.lazy(() => AgentToolInputRunRetrieveAgentsTool$outboundSchema),
      z.lazy(() => AgentToolInputRunQueryMemoryStoreTool$outboundSchema),
      z.lazy(() => AgentToolInputRunWriteMemoryStoreTool$outboundSchema),
      z.lazy(() => AgentToolInputRunRetrieveMemoryStoresTool$outboundSchema),
      z.lazy(() => AgentToolInputRunDeleteMemoryDocumentTool$outboundSchema),
      z.lazy(() => AgentToolInputRunRetrieveKnowledgeBasesTool$outboundSchema),
      z.lazy(() => AgentToolInputRunQueryKnowledgeBaseTool$outboundSchema),
      z.lazy(() => AgentToolInputRunCurrentDateTool$outboundSchema),
    ]),
  ),
  toolApprovalRequired: RunAgentToolApprovalRequired$outboundSchema.default(
    "none",
  ),
  maxIterations: z.number().int().default(15),
  maxExecutionTime: z.number().int().default(300),
}).transform((v) => {
  return remap$(v, {
    toolApprovalRequired: "tool_approval_required",
    maxIterations: "max_iterations",
    maxExecutionTime: "max_execution_time",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RunAgentSettings$ {
  /** @deprecated use `RunAgentSettings$inboundSchema` instead. */
  export const inboundSchema = RunAgentSettings$inboundSchema;
  /** @deprecated use `RunAgentSettings$outboundSchema` instead. */
  export const outboundSchema = RunAgentSettings$outboundSchema;
  /** @deprecated use `RunAgentSettings$Outbound` instead. */
  export type Outbound = RunAgentSettings$Outbound;
}

export function runAgentSettingsToJSON(
  runAgentSettings: RunAgentSettings,
): string {
  return JSON.stringify(
    RunAgentSettings$outboundSchema.parse(runAgentSettings),
  );
}

export function runAgentSettingsFromJSON(
  jsonString: string,
): SafeParseResult<RunAgentSettings, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => RunAgentSettings$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RunAgentSettings' from JSON`,
  );
}

/** @internal */
export const RunAgentRequestBody$inboundSchema: z.ZodType<
  RunAgentRequestBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  key: z.string(),
  task_id: z.string().optional(),
  model: z.string(),
  fallback_models: z.array(z.string()).optional(),
  role: z.string(),
  instructions: z.string(),
  message: z.lazy(() => RunAgentMessage$inboundSchema),
  variables: z.record(z.any()).optional(),
  contact: z.lazy(() => RunAgentContact$inboundSchema).optional(),
  thread: z.lazy(() => RunAgentThread$inboundSchema).optional(),
  memory: z.lazy(() => RunAgentMemory$inboundSchema).optional(),
  path: z.string(),
  description: z.string().optional(),
  system_prompt: z.string().optional(),
  memory_stores: z.array(z.string()).optional(),
  knowledge_bases: z.array(z.lazy(() => RunAgentKnowledgeBases$inboundSchema))
    .optional(),
  team_of_agents: z.array(z.lazy(() => RunAgentTeamOfAgents$inboundSchema))
    .optional(),
  settings: z.lazy(() => RunAgentSettings$inboundSchema),
  metadata: z.record(z.any()).optional(),
}).transform((v) => {
  return remap$(v, {
    "task_id": "taskId",
    "fallback_models": "fallbackModels",
    "system_prompt": "systemPrompt",
    "memory_stores": "memoryStores",
    "knowledge_bases": "knowledgeBases",
    "team_of_agents": "teamOfAgents",
  });
});

/** @internal */
export type RunAgentRequestBody$Outbound = {
  key: string;
  task_id?: string | undefined;
  model: string;
  fallback_models?: Array<string> | undefined;
  role: string;
  instructions: string;
  message: RunAgentMessage$Outbound;
  variables?: { [k: string]: any } | undefined;
  contact?: RunAgentContact$Outbound | undefined;
  thread?: RunAgentThread$Outbound | undefined;
  memory?: RunAgentMemory$Outbound | undefined;
  path: string;
  description?: string | undefined;
  system_prompt?: string | undefined;
  memory_stores?: Array<string> | undefined;
  knowledge_bases?: Array<RunAgentKnowledgeBases$Outbound> | undefined;
  team_of_agents?: Array<RunAgentTeamOfAgents$Outbound> | undefined;
  settings: RunAgentSettings$Outbound;
  metadata?: { [k: string]: any } | undefined;
};

/** @internal */
export const RunAgentRequestBody$outboundSchema: z.ZodType<
  RunAgentRequestBody$Outbound,
  z.ZodTypeDef,
  RunAgentRequestBody
> = z.object({
  key: z.string(),
  taskId: z.string().optional(),
  model: z.string(),
  fallbackModels: z.array(z.string()).optional(),
  role: z.string(),
  instructions: z.string(),
  message: z.lazy(() => RunAgentMessage$outboundSchema),
  variables: z.record(z.any()).optional(),
  contact: z.lazy(() => RunAgentContact$outboundSchema).optional(),
  thread: z.lazy(() => RunAgentThread$outboundSchema).optional(),
  memory: z.lazy(() => RunAgentMemory$outboundSchema).optional(),
  path: z.string(),
  description: z.string().optional(),
  systemPrompt: z.string().optional(),
  memoryStores: z.array(z.string()).optional(),
  knowledgeBases: z.array(z.lazy(() => RunAgentKnowledgeBases$outboundSchema))
    .optional(),
  teamOfAgents: z.array(z.lazy(() => RunAgentTeamOfAgents$outboundSchema))
    .optional(),
  settings: z.lazy(() => RunAgentSettings$outboundSchema),
  metadata: z.record(z.any()).optional(),
}).transform((v) => {
  return remap$(v, {
    taskId: "task_id",
    fallbackModels: "fallback_models",
    systemPrompt: "system_prompt",
    memoryStores: "memory_stores",
    knowledgeBases: "knowledge_bases",
    teamOfAgents: "team_of_agents",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RunAgentRequestBody$ {
  /** @deprecated use `RunAgentRequestBody$inboundSchema` instead. */
  export const inboundSchema = RunAgentRequestBody$inboundSchema;
  /** @deprecated use `RunAgentRequestBody$outboundSchema` instead. */
  export const outboundSchema = RunAgentRequestBody$outboundSchema;
  /** @deprecated use `RunAgentRequestBody$Outbound` instead. */
  export type Outbound = RunAgentRequestBody$Outbound;
}

export function runAgentRequestBodyToJSON(
  runAgentRequestBody: RunAgentRequestBody,
): string {
  return JSON.stringify(
    RunAgentRequestBody$outboundSchema.parse(runAgentRequestBody),
  );
}

export function runAgentRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<RunAgentRequestBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => RunAgentRequestBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RunAgentRequestBody' from JSON`,
  );
}

/** @internal */
export const RunAgentKind$inboundSchema: z.ZodNativeEnum<typeof RunAgentKind> =
  z.nativeEnum(RunAgentKind);

/** @internal */
export const RunAgentKind$outboundSchema: z.ZodNativeEnum<typeof RunAgentKind> =
  RunAgentKind$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RunAgentKind$ {
  /** @deprecated use `RunAgentKind$inboundSchema` instead. */
  export const inboundSchema = RunAgentKind$inboundSchema;
  /** @deprecated use `RunAgentKind$outboundSchema` instead. */
  export const outboundSchema = RunAgentKind$outboundSchema;
}

/** @internal */
export const RunAgentState$inboundSchema: z.ZodNativeEnum<
  typeof RunAgentState
> = z.nativeEnum(RunAgentState);

/** @internal */
export const RunAgentState$outboundSchema: z.ZodNativeEnum<
  typeof RunAgentState
> = RunAgentState$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RunAgentState$ {
  /** @deprecated use `RunAgentState$inboundSchema` instead. */
  export const inboundSchema = RunAgentState$inboundSchema;
  /** @deprecated use `RunAgentState$outboundSchema` instead. */
  export const outboundSchema = RunAgentState$outboundSchema;
}

/** @internal */
export const RunAgentAgentsKind$inboundSchema: z.ZodNativeEnum<
  typeof RunAgentAgentsKind
> = z.nativeEnum(RunAgentAgentsKind);

/** @internal */
export const RunAgentAgentsKind$outboundSchema: z.ZodNativeEnum<
  typeof RunAgentAgentsKind
> = RunAgentAgentsKind$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RunAgentAgentsKind$ {
  /** @deprecated use `RunAgentAgentsKind$inboundSchema` instead. */
  export const inboundSchema = RunAgentAgentsKind$inboundSchema;
  /** @deprecated use `RunAgentAgentsKind$outboundSchema` instead. */
  export const outboundSchema = RunAgentAgentsKind$outboundSchema;
}

/** @internal */
export const RunAgentAgentsRole$inboundSchema: z.ZodNativeEnum<
  typeof RunAgentAgentsRole
> = z.nativeEnum(RunAgentAgentsRole);

/** @internal */
export const RunAgentAgentsRole$outboundSchema: z.ZodNativeEnum<
  typeof RunAgentAgentsRole
> = RunAgentAgentsRole$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RunAgentAgentsRole$ {
  /** @deprecated use `RunAgentAgentsRole$inboundSchema` instead. */
  export const inboundSchema = RunAgentAgentsRole$inboundSchema;
  /** @deprecated use `RunAgentAgentsRole$outboundSchema` instead. */
  export const outboundSchema = RunAgentAgentsRole$outboundSchema;
}

/** @internal */
export const RunAgentAgentsMessage$inboundSchema: z.ZodType<
  RunAgentAgentsMessage,
  z.ZodTypeDef,
  unknown
> = z.object({
  kind: RunAgentAgentsKind$inboundSchema,
  messageId: z.string(),
  role: RunAgentAgentsRole$inboundSchema,
  parts: z.array(z.any()),
});

/** @internal */
export type RunAgentAgentsMessage$Outbound = {
  kind: string;
  messageId: string;
  role: string;
  parts: Array<any>;
};

/** @internal */
export const RunAgentAgentsMessage$outboundSchema: z.ZodType<
  RunAgentAgentsMessage$Outbound,
  z.ZodTypeDef,
  RunAgentAgentsMessage
> = z.object({
  kind: RunAgentAgentsKind$outboundSchema,
  messageId: z.string(),
  role: RunAgentAgentsRole$outboundSchema,
  parts: z.array(z.any()),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RunAgentAgentsMessage$ {
  /** @deprecated use `RunAgentAgentsMessage$inboundSchema` instead. */
  export const inboundSchema = RunAgentAgentsMessage$inboundSchema;
  /** @deprecated use `RunAgentAgentsMessage$outboundSchema` instead. */
  export const outboundSchema = RunAgentAgentsMessage$outboundSchema;
  /** @deprecated use `RunAgentAgentsMessage$Outbound` instead. */
  export type Outbound = RunAgentAgentsMessage$Outbound;
}

export function runAgentAgentsMessageToJSON(
  runAgentAgentsMessage: RunAgentAgentsMessage,
): string {
  return JSON.stringify(
    RunAgentAgentsMessage$outboundSchema.parse(runAgentAgentsMessage),
  );
}

export function runAgentAgentsMessageFromJSON(
  jsonString: string,
): SafeParseResult<RunAgentAgentsMessage, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => RunAgentAgentsMessage$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RunAgentAgentsMessage' from JSON`,
  );
}

/** @internal */
export const RunAgentStatus$inboundSchema: z.ZodType<
  RunAgentStatus,
  z.ZodTypeDef,
  unknown
> = z.object({
  state: RunAgentState$inboundSchema,
  timestamp: z.string().optional(),
  message: z.lazy(() => RunAgentAgentsMessage$inboundSchema).optional(),
});

/** @internal */
export type RunAgentStatus$Outbound = {
  state: string;
  timestamp?: string | undefined;
  message?: RunAgentAgentsMessage$Outbound | undefined;
};

/** @internal */
export const RunAgentStatus$outboundSchema: z.ZodType<
  RunAgentStatus$Outbound,
  z.ZodTypeDef,
  RunAgentStatus
> = z.object({
  state: RunAgentState$outboundSchema,
  timestamp: z.string().optional(),
  message: z.lazy(() => RunAgentAgentsMessage$outboundSchema).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RunAgentStatus$ {
  /** @deprecated use `RunAgentStatus$inboundSchema` instead. */
  export const inboundSchema = RunAgentStatus$inboundSchema;
  /** @deprecated use `RunAgentStatus$outboundSchema` instead. */
  export const outboundSchema = RunAgentStatus$outboundSchema;
  /** @deprecated use `RunAgentStatus$Outbound` instead. */
  export type Outbound = RunAgentStatus$Outbound;
}

export function runAgentStatusToJSON(runAgentStatus: RunAgentStatus): string {
  return JSON.stringify(RunAgentStatus$outboundSchema.parse(runAgentStatus));
}

export function runAgentStatusFromJSON(
  jsonString: string,
): SafeParseResult<RunAgentStatus, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => RunAgentStatus$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RunAgentStatus' from JSON`,
  );
}

/** @internal */
export const RunAgentResponseBody$inboundSchema: z.ZodType<
  RunAgentResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  contextId: z.string(),
  kind: RunAgentKind$inboundSchema,
  status: z.lazy(() => RunAgentStatus$inboundSchema),
  metadata: z.record(z.any()).optional(),
});

/** @internal */
export type RunAgentResponseBody$Outbound = {
  id: string;
  contextId: string;
  kind: string;
  status: RunAgentStatus$Outbound;
  metadata?: { [k: string]: any } | undefined;
};

/** @internal */
export const RunAgentResponseBody$outboundSchema: z.ZodType<
  RunAgentResponseBody$Outbound,
  z.ZodTypeDef,
  RunAgentResponseBody
> = z.object({
  id: z.string(),
  contextId: z.string(),
  kind: RunAgentKind$outboundSchema,
  status: z.lazy(() => RunAgentStatus$outboundSchema),
  metadata: z.record(z.any()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RunAgentResponseBody$ {
  /** @deprecated use `RunAgentResponseBody$inboundSchema` instead. */
  export const inboundSchema = RunAgentResponseBody$inboundSchema;
  /** @deprecated use `RunAgentResponseBody$outboundSchema` instead. */
  export const outboundSchema = RunAgentResponseBody$outboundSchema;
  /** @deprecated use `RunAgentResponseBody$Outbound` instead. */
  export type Outbound = RunAgentResponseBody$Outbound;
}

export function runAgentResponseBodyToJSON(
  runAgentResponseBody: RunAgentResponseBody,
): string {
  return JSON.stringify(
    RunAgentResponseBody$outboundSchema.parse(runAgentResponseBody),
  );
}

export function runAgentResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<RunAgentResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => RunAgentResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RunAgentResponseBody' from JSON`,
  );
}
