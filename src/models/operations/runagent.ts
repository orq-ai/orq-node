/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * Tool message
 */
export const RoleToolMessage = {
  Tool: "tool",
} as const;
/**
 * Tool message
 */
export type RoleToolMessage = ClosedEnum<typeof RoleToolMessage>;

/**
 * User message
 */
export const RoleUserMessage = {
  User: "user",
} as const;
/**
 * User message
 */
export type RoleUserMessage = ClosedEnum<typeof RoleUserMessage>;

/**
 * Message role (user or tool for continuing executions)
 */
export type RunAgentRole = RoleUserMessage | RoleToolMessage;

export const RunAgentPublicMessagePartKind = {
  ToolResult: "tool_result",
} as const;
export type RunAgentPublicMessagePartKind = ClosedEnum<
  typeof RunAgentPublicMessagePartKind
>;

/**
 * Tool execution result part. Use this ONLY when providing results for a pending tool call from the agent. The tool_call_id must match the ID from the agent's tool call request.
 */
export type ToolResultPart = {
  kind: RunAgentPublicMessagePartKind;
  toolCallId: string;
  result?: any | undefined;
  metadata?: { [k: string]: any } | undefined;
};

export const PublicMessagePartKind = {
  File: "file",
} as const;
export type PublicMessagePartKind = ClosedEnum<typeof PublicMessagePartKind>;

/**
 * File in URI format. Check in the model's documentation for the supported mime types for the URI format
 */
export type FileInURIFormat = {
  /**
   * URL for the File content
   */
  uri: string;
  /**
   * Optional mimeType for the file
   */
  mimeType?: string | undefined;
  /**
   * Optional name for the file
   */
  name?: string | undefined;
};

/**
 * Binary in base64 format. Check in the model's documentation for the supported mime types for the binary format.
 */
export type BinaryFormat = {
  /**
   * base64 encoded content of the file
   */
  bytes: string;
  /**
   * Optional mimeType for the file
   */
  mimeType?: string | undefined;
  /**
   * Optional name for the file
   */
  name?: string | undefined;
};

export type PublicMessagePartFile = BinaryFormat | FileInURIFormat;

/**
 * File attachment part. Use this to send files (images, documents, etc.) to the agent for processing.
 */
export type FilePart = {
  kind: PublicMessagePartKind;
  file: BinaryFormat | FileInURIFormat;
  metadata?: { [k: string]: any } | undefined;
};

export const Kind = {
  Text: "text",
} as const;
export type Kind = ClosedEnum<typeof Kind>;

/**
 * Text content part. Use this to send text messages to the agent.
 */
export type TextPart = {
  kind: Kind;
  text: string;
};

/**
 * Message part that can be provided by users. Use "text" for regular messages, "file" for attachments, or "tool_result" when responding to tool call requests.
 */
export type PublicMessagePart = TextPart | FilePart | ToolResultPart;

/**
 * The A2A format message containing the task for the agent to perform.
 */
export type Message = {
  /**
   * Optional A2A message ID in ULID format
   */
  messageId?: string | undefined;
  /**
   * Message role (user or tool for continuing executions)
   */
  role: RoleUserMessage | RoleToolMessage;
  /**
   * A2A message parts (text, file, or tool_result only)
   */
  parts: Array<TextPart | FilePart | ToolResultPart>;
};

/**
 * Information about the contact making the request. If the contact does not exist, it will be created automatically.
 */
export type Contact = {
  /**
   * Unique identifier for the contact
   */
  id: string;
  /**
   * Display name of the contact
   */
  displayName?: string | undefined;
  /**
   * Email address of the contact
   */
  email?: string | undefined;
  /**
   * A hash of key/value pairs containing any other data about the contact
   */
  metadata?: Array<{ [k: string]: any }> | undefined;
  /**
   * URL to the contact's avatar or logo
   */
  logoUrl?: string | undefined;
  /**
   * A list of tags associated with the contact
   */
  tags?: Array<string> | undefined;
};

/**
 * Thread information to group related requests
 */
export type RunAgentThread = {
  /**
   * Unique thread identifier to group related invocations.
   */
  id: string;
  /**
   * Optional tags to differentiate or categorize threads
   */
  tags?: Array<string> | undefined;
};

/**
 * Memory configuration for the agent execution. Used to associate memory stores with specific entities like users or sessions.
 */
export type Memory = {
  /**
   * An entity ID used to link memory stores to a specific user, session, or conversation. This ID is used to isolate and retrieve memories specific to the entity across agent executions.
   */
  entityId: string;
};

export const RunAgentKnowledgeBaseConfigurationType = {
  Query: "query",
} as const;
export type RunAgentKnowledgeBaseConfigurationType = ClosedEnum<
  typeof RunAgentKnowledgeBaseConfigurationType
>;

/**
 * Defines the configuration settings for a static query.
 */
export type KnowledgeBaseStaticQuery = {
  type: RunAgentKnowledgeBaseConfigurationType;
  query: string;
};

export const KnowledgeBaseConfigurationType = {
  LastUserMessage: "last_user_message",
} as const;
export type KnowledgeBaseConfigurationType = ClosedEnum<
  typeof KnowledgeBaseConfigurationType
>;

/**
 * Defines the configuration settings for a last user message type retrieval.
 */
export type KnowledgeBaseLastUserMessage = {
  type: KnowledgeBaseConfigurationType;
};

/**
 * Defines the configuration settings which can either be for a user message or a text entry.
 */
export type KnowledgeBaseConfiguration =
  | KnowledgeBaseStaticQuery
  | KnowledgeBaseLastUserMessage;

export type KnowledgeBases = {
  /**
   * Defines the configuration settings which can either be for a user message or a text entry.
   */
  configuration: KnowledgeBaseStaticQuery | KnowledgeBaseLastUserMessage;
};

export type TeamOfAgents = {
  id: string;
  /**
   * The role of the agent in this context. This is used to give extra information to the leader to help it decide which agent to hand off to.
   */
  role?: string | undefined;
};

export const RunAgentRunAgentRequestToolAgentsRequestRequestBodySettingsTools14Type =
  {
    Function: "function",
  } as const;
export type RunAgentRunAgentRequestToolAgentsRequestRequestBodySettingsTools14Type =
  ClosedEnum<
    typeof RunAgentRunAgentRequestToolAgentsRequestRequestBodySettingsTools14Type
  >;

export type RunAgentRequestToolFunction = {
  name: string;
  description?: string | undefined;
  strict?: boolean | undefined;
  parameters?: { [k: string]: any } | undefined;
};

/**
 * Custom function tool with configurable parameters
 */
export type FunctionTool = {
  type: RunAgentRunAgentRequestToolAgentsRequestRequestBodySettingsTools14Type;
  id?: string | undefined;
  key: string;
  displayName?: string | undefined;
  description?: string | undefined;
  requiresApproval?: boolean | undefined;
  function: RunAgentRequestToolFunction;
};

export const RunAgentRunAgentRequestToolAgentsRequestRequestBodySettingsTools13Type =
  {
    Code: "code",
  } as const;
export type RunAgentRunAgentRequestToolAgentsRequestRequestBodySettingsTools13Type =
  ClosedEnum<
    typeof RunAgentRunAgentRequestToolAgentsRequestRequestBodySettingsTools13Type
  >;

export const Language = {
  Python: "python",
} as const;
export type Language = ClosedEnum<typeof Language>;

export type CodeTool = {
  /**
   * The parameters the functions accepts, described as a JSON Schema object. See the `OpenAI` [guide](https://platform.openai.com/docs/guides/function-calling) for examples, and the [JSON Schema reference](https://json-schema.org/understanding-json-schema/) for documentation about the format.
   */
  parameters?: { [k: string]: any } | undefined;
  language: Language;
  /**
   * The code to execute.
   */
  code: string;
};

/**
 * Executes code in a secure sandbox environment
 */
export type CodeExecutionTool = {
  /**
   * Unique key of the tool as it will be displayed in the UI
   */
  key: string;
  /**
   * The name of the tool as it will be displayed in the UI. This is optional and if not provided, the `key` will be used.
   */
  displayName: string;
  /**
   * A description of the tool, used by the model to choose when and how to call the tool. We do recommend using the `description` field as accurate as possible to give enough context to the model to make the right decision.
   */
  description: string;
  type: RunAgentRunAgentRequestToolAgentsRequestRequestBodySettingsTools13Type;
  codeTool: CodeTool;
  id?: string | undefined;
  requiresApproval?: boolean | undefined;
};

export const RunAgentRunAgentRequestToolAgentsRequestRequestBodySettingsTools12Type =
  {
    Http: "http",
  } as const;
export type RunAgentRunAgentRequestToolAgentsRequestRequestBodySettingsTools12Type =
  ClosedEnum<
    typeof RunAgentRunAgentRequestToolAgentsRequestRequestBodySettingsTools12Type
  >;

/**
 * The HTTP method to use.
 */
export const Method = {
  Get: "GET",
  Post: "POST",
  Put: "PUT",
  Delete: "DELETE",
} as const;
/**
 * The HTTP method to use.
 */
export type Method = ClosedEnum<typeof Method>;

/**
 * The blueprint for the HTTP request. The `arguments` field will be used to replace the placeholders in the `url`, `headers`, `body`, and `arguments` fields.
 */
export type Blueprint = {
  /**
   * The URL to send the request to.
   */
  url: string;
  /**
   * The HTTP method to use.
   */
  method: Method;
  /**
   * The headers to send with the request.
   */
  headers?: { [k: string]: string } | undefined;
  /**
   * The body to send with the request.
   */
  body?: { [k: string]: any } | undefined;
};

/**
 * The type of the argument.
 */
export const RunAgentRunAgentRequestToolAgentsRequestRequestBodySettingsTools12HttpType =
  {
    String: "string",
    Number: "number",
    Boolean: "boolean",
  } as const;
/**
 * The type of the argument.
 */
export type RunAgentRunAgentRequestToolAgentsRequestRequestBodySettingsTools12HttpType =
  ClosedEnum<
    typeof RunAgentRunAgentRequestToolAgentsRequestRequestBodySettingsTools12HttpType
  >;

/**
 * The default value of the argument.
 */
export type DefaultValue = string | number | boolean;

export type Arguments = {
  /**
   * The type of the argument.
   */
  type:
    RunAgentRunAgentRequestToolAgentsRequestRequestBodySettingsTools12HttpType;
  /**
   * A description of the argument.
   */
  description: string;
  /**
   * Whether to send the argument to the model. If set to false, the argument will not be sent to the model and needs to be provided by the user or it will be left blank.
   */
  sendToModel?: boolean | undefined;
  /**
   * The default value of the argument.
   */
  defaultValue?: string | number | boolean | undefined;
};

export type Http = {
  /**
   * The blueprint for the HTTP request. The `arguments` field will be used to replace the placeholders in the `url`, `headers`, `body`, and `arguments` fields.
   */
  blueprint: Blueprint;
  /**
   * The arguments to send with the request. The keys will be used to replace the placeholders in the `blueprint` field.
   */
  arguments?: { [k: string]: Arguments } | undefined;
};

/**
 * Makes HTTP requests to external APIs
 */
export type HTTPTool = {
  id?: string | undefined;
  /**
   * Unique key of the tool as it will be displayed in the UI
   */
  key: string;
  /**
   * The name of the tool as it will be displayed in the UI. This is optional and if not provided, the `key` will be used.
   */
  displayName: string;
  /**
   * A description of the tool, used by the model to choose when and how to call the tool. We do recommend using the `description` field as accurate as possible to give enough context to the model to make the right decision.
   */
  description: string;
  type: RunAgentRunAgentRequestToolAgentsRequestRequestBodySettingsTools12Type;
  http: Http;
  requiresApproval?: boolean | undefined;
};

export const RunAgentRunAgentRequestToolAgentsRequestRequestBodySettingsTools11Type =
  {
    CurrentDate: "current_date",
  } as const;
export type RunAgentRunAgentRequestToolAgentsRequestRequestBodySettingsTools11Type =
  ClosedEnum<
    typeof RunAgentRunAgentRequestToolAgentsRequestRequestBodySettingsTools11Type
  >;

/**
 * Provides the current date and time
 */
export type CurrentDateTool = {
  type: RunAgentRunAgentRequestToolAgentsRequestRequestBodySettingsTools11Type;
  requiresApproval?: boolean | undefined;
};

export const RunAgentRunAgentRequestToolAgentsRequestRequestBodySettingsTools10Type =
  {
    QueryKnowledgeBase: "query_knowledge_base",
  } as const;
export type RunAgentRunAgentRequestToolAgentsRequestRequestBodySettingsTools10Type =
  ClosedEnum<
    typeof RunAgentRunAgentRequestToolAgentsRequestRequestBodySettingsTools10Type
  >;

/**
 * Queries knowledge bases for information
 */
export type QueryKnowledgeBaseTool = {
  type: RunAgentRunAgentRequestToolAgentsRequestRequestBodySettingsTools10Type;
  requiresApproval?: boolean | undefined;
};

export const RunAgentRunAgentRequestToolAgentsRequestRequestBodySettingsTools9Type =
  {
    RetrieveKnowledgeBases: "retrieve_knowledge_bases",
  } as const;
export type RunAgentRunAgentRequestToolAgentsRequestRequestBodySettingsTools9Type =
  ClosedEnum<
    typeof RunAgentRunAgentRequestToolAgentsRequestRequestBodySettingsTools9Type
  >;

/**
 * Lists available knowledge bases
 */
export type RetrieveKnowledgeBasesTool = {
  type: RunAgentRunAgentRequestToolAgentsRequestRequestBodySettingsTools9Type;
  requiresApproval?: boolean | undefined;
};

export const RunAgentRunAgentRequestToolAgentsRequestRequestBodySettingsTools8Type =
  {
    DeleteMemoryDocument: "delete_memory_document",
  } as const;
export type RunAgentRunAgentRequestToolAgentsRequestRequestBodySettingsTools8Type =
  ClosedEnum<
    typeof RunAgentRunAgentRequestToolAgentsRequestRequestBodySettingsTools8Type
  >;

/**
 * Deletes a memory store
 */
export type DeleteMemoryStoreTool = {
  type: RunAgentRunAgentRequestToolAgentsRequestRequestBodySettingsTools8Type;
  requiresApproval?: boolean | undefined;
};

export const RunAgentRunAgentRequestToolAgentsRequestRequestBodySettingsToolsType =
  {
    RetrieveMemoryStores: "retrieve_memory_stores",
  } as const;
export type RunAgentRunAgentRequestToolAgentsRequestRequestBodySettingsToolsType =
  ClosedEnum<
    typeof RunAgentRunAgentRequestToolAgentsRequestRequestBodySettingsToolsType
  >;

/**
 * Lists available memory stores
 */
export type RetrieveMemoryStoresTool = {
  type: RunAgentRunAgentRequestToolAgentsRequestRequestBodySettingsToolsType;
  requiresApproval?: boolean | undefined;
};

export const RunAgentRunAgentRequestToolAgentsRequestRequestBodySettingsType = {
  WriteMemoryStore: "write_memory_store",
} as const;
export type RunAgentRunAgentRequestToolAgentsRequestRequestBodySettingsType =
  ClosedEnum<
    typeof RunAgentRunAgentRequestToolAgentsRequestRequestBodySettingsType
  >;

/**
 * Writes information to agent memory stores
 */
export type WriteMemoryStoreTool = {
  type: RunAgentRunAgentRequestToolAgentsRequestRequestBodySettingsType;
  requiresApproval?: boolean | undefined;
};

export const RunAgentRunAgentRequestToolAgentsRequestRequestBodyType = {
  QueryMemoryStore: "query_memory_store",
} as const;
export type RunAgentRunAgentRequestToolAgentsRequestRequestBodyType =
  ClosedEnum<typeof RunAgentRunAgentRequestToolAgentsRequestRequestBodyType>;

/**
 * Queries agent memory stores for context
 */
export type QueryMemoryStoreTool = {
  type: RunAgentRunAgentRequestToolAgentsRequestRequestBodyType;
  requiresApproval?: boolean | undefined;
};

export const RunAgentRunAgentRequestToolAgentsRequestType = {
  RetrieveAgents: "retrieve_agents",
} as const;
export type RunAgentRunAgentRequestToolAgentsRequestType = ClosedEnum<
  typeof RunAgentRunAgentRequestToolAgentsRequestType
>;

/**
 * Retrieves available agents in the system
 */
export type RetrieveAgentsTool = {
  type: RunAgentRunAgentRequestToolAgentsRequestType;
  requiresApproval?: boolean | undefined;
};

export const RunAgentRunAgentRequestToolAgentsType = {
  CallSubAgent: "call_sub_agent",
} as const;
export type RunAgentRunAgentRequestToolAgentsType = ClosedEnum<
  typeof RunAgentRunAgentRequestToolAgentsType
>;

/**
 * Delegates tasks to specialized sub-agents
 */
export type CallSubAgentTool = {
  type: RunAgentRunAgentRequestToolAgentsType;
  requiresApproval?: boolean | undefined;
};

export const RunAgentRunAgentRequestToolType = {
  WebScraper: "web_scraper",
} as const;
export type RunAgentRunAgentRequestToolType = ClosedEnum<
  typeof RunAgentRunAgentRequestToolType
>;

/**
 * Scrapes and extracts content from web pages
 */
export type WebScraperTool = {
  type: RunAgentRunAgentRequestToolType;
  requiresApproval?: boolean | undefined;
};

export const RunAgentRequestToolType = {
  GoogleSearch: "google_search",
} as const;
export type RunAgentRequestToolType = ClosedEnum<
  typeof RunAgentRequestToolType
>;

/**
 * Performs Google searches to retrieve web content
 */
export type GoogleSearchTool = {
  type: RunAgentRequestToolType;
  requiresApproval?: boolean | undefined;
};

/**
 * Available tools for agent execution. Each tool provides specific capabilities to interact with external systems, retrieve information, or perform specialized tasks.
 */
export type RunAgentRequestTool =
  | HTTPTool
  | CodeExecutionTool
  | FunctionTool
  | GoogleSearchTool
  | WebScraperTool
  | CallSubAgentTool
  | RetrieveAgentsTool
  | QueryMemoryStoreTool
  | WriteMemoryStoreTool
  | RetrieveMemoryStoresTool
  | DeleteMemoryStoreTool
  | RetrieveKnowledgeBasesTool
  | QueryKnowledgeBaseTool
  | CurrentDateTool;

/**
 * If all, the agent will require approval for all tools. If respect_tool, the agent will require approval for tools that have the requires_approval flag set to true. If none, the agent will not require approval for any tools.
 */
export const ToolApprovalRequired = {
  All: "all",
  RespectTool: "respect_tool",
  None: "none",
} as const;
/**
 * If all, the agent will require approval for all tools. If respect_tool, the agent will require approval for tools that have the requires_approval flag set to true. If none, the agent will not require approval for any tools.
 */
export type ToolApprovalRequired = ClosedEnum<typeof ToolApprovalRequired>;

export type Settings = {
  /**
   * Tools available to the agent
   */
  tools: Array<
    | HTTPTool
    | CodeExecutionTool
    | FunctionTool
    | GoogleSearchTool
    | WebScraperTool
    | CallSubAgentTool
    | RetrieveAgentsTool
    | QueryMemoryStoreTool
    | WriteMemoryStoreTool
    | RetrieveMemoryStoresTool
    | DeleteMemoryStoreTool
    | RetrieveKnowledgeBasesTool
    | QueryKnowledgeBaseTool
    | CurrentDateTool
  >;
  /**
   * If all, the agent will require approval for all tools. If respect_tool, the agent will require approval for tools that have the requires_approval flag set to true. If none, the agent will not require approval for any tools.
   */
  toolApprovalRequired?: ToolApprovalRequired | undefined;
  /**
   * Maximum iterations(llm calls) before the agent will stop executing.
   */
  maxIterations?: number | undefined;
  /**
   * Maximum time (in seconds) for the agent thinking process. This does not include the time for tool calls and sub agent calls. It will be loosely enforced, the in progress LLM calls will not be terminated and the last assistant message will be returned.
   */
  maxExecutionTime?: number | undefined;
};

export type RunAgentRequestBody = {
  /**
   * A unique identifier for the agent. This key must be unique within the same workspace and cannot be reused. When executing the agent, this key determines if the agent already exists. If the agent version differs, a new version is created at the end of the execution, except for the task. All agent parameters are evaluated to decide if a new version is needed.
   */
  key: string;
  /**
   * Optional task ID to continue an existing agent execution. When provided, the agent will continue the conversation from the existing task state. The task must be in an inactive state to continue.
   */
  taskId?: string | undefined;
  /**
   * The language model that powers the agent. The model must support tool calling capabilities.
   */
  model: string;
  /**
   * Optional array of fallback model IDs to use when the primary model fails. Models are tried in order. All models must support tool calling capabilities.
   */
  fallbackModels?: Array<string> | undefined;
  /**
   * Specifies the agent's function and area of expertise.
   */
  role: string;
  /**
   * Provides context and purpose for the agent. Combined with the system prompt template to generate the agent's instructions.
   */
  instructions: string;
  /**
   * The A2A format message containing the task for the agent to perform.
   */
  message: Message;
  /**
   * Optional variables for template replacement in system prompt, instructions, and messages
   */
  variables?: { [k: string]: any } | undefined;
  /**
   * Information about the contact making the request. If the contact does not exist, it will be created automatically.
   */
  contact?: Contact | undefined;
  /**
   * Thread information to group related requests
   */
  thread?: RunAgentThread | undefined;
  /**
   * Memory configuration for the agent execution. Used to associate memory stores with specific entities like users or sessions.
   */
  memory?: Memory | undefined;
  /**
   * The path where the entity is stored in the project structure. The first element of the path always represents the project name. Any subsequent path element after the project will be created as a folder in the project if it does not exists.
   */
  path: string;
  /**
   * A brief summary of the agent's purpose.
   */
  description?: string | undefined;
  /**
   * A custom system prompt template for the agent. If omitted, the default template is used.
   */
  systemPrompt?: string | undefined;
  /**
   * The list of keys of the memory stores that are accessible to the agent.
   */
  memoryStores?: Array<string> | undefined;
  knowledgeBases?: Array<KnowledgeBases> | undefined;
  /**
   * The agents that are accessible to this orchestrator. The main agent can hand off to these agents to perform tasks.
   */
  teamOfAgents?: Array<TeamOfAgents> | undefined;
  settings: Settings;
  /**
   * Optional metadata for the agent run as key-value pairs that will be included in traces
   */
  metadata?: { [k: string]: any } | undefined;
};

/**
 * A2A entity type
 */
export const RunAgentKind = {
  Task: "task",
} as const;
/**
 * A2A entity type
 */
export type RunAgentKind = ClosedEnum<typeof RunAgentKind>;

/**
 * Current task state
 */
export const RunAgentState = {
  Submitted: "submitted",
  Working: "working",
  InputRequired: "input-required",
  Completed: "completed",
  Failed: "failed",
  Canceled: "canceled",
  Rejected: "rejected",
  AuthRequired: "auth-required",
  Unknown: "unknown",
} as const;
/**
 * Current task state
 */
export type RunAgentState = ClosedEnum<typeof RunAgentState>;

export const RunAgentAgentsKind = {
  Message: "message",
} as const;
export type RunAgentAgentsKind = ClosedEnum<typeof RunAgentAgentsKind>;

/**
 * Extended A2A message role
 */
export const RunAgentAgentsRole = {
  User: "user",
  Agent: "agent",
  Tool: "tool",
  System: "system",
} as const;
/**
 * Extended A2A message role
 */
export type RunAgentAgentsRole = ClosedEnum<typeof RunAgentAgentsRole>;

/**
 * Optional status message
 */
export type RunAgentMessage = {
  kind: RunAgentAgentsKind;
  messageId: string;
  /**
   * Extended A2A message role
   */
  role: RunAgentAgentsRole;
  parts: Array<any>;
};

/**
 * Task status information
 */
export type RunAgentStatus = {
  /**
   * Current task state
   */
  state: RunAgentState;
  /**
   * ISO timestamp of status update
   */
  timestamp?: string | undefined;
  /**
   * Optional status message
   */
  message?: RunAgentMessage | undefined;
};

/**
 * A2A Task response format
 */
export type RunAgentResponseBody = {
  /**
   * The ID of the created agent execution task
   */
  id: string;
  /**
   * The context ID (workspace ID)
   */
  contextId: string;
  /**
   * A2A entity type
   */
  kind: RunAgentKind;
  /**
   * Task status information
   */
  status: RunAgentStatus;
  /**
   * Task metadata
   */
  metadata?: { [k: string]: any } | undefined;
};

/** @internal */
export const RoleToolMessage$inboundSchema: z.ZodNativeEnum<
  typeof RoleToolMessage
> = z.nativeEnum(RoleToolMessage);

/** @internal */
export const RoleToolMessage$outboundSchema: z.ZodNativeEnum<
  typeof RoleToolMessage
> = RoleToolMessage$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RoleToolMessage$ {
  /** @deprecated use `RoleToolMessage$inboundSchema` instead. */
  export const inboundSchema = RoleToolMessage$inboundSchema;
  /** @deprecated use `RoleToolMessage$outboundSchema` instead. */
  export const outboundSchema = RoleToolMessage$outboundSchema;
}

/** @internal */
export const RoleUserMessage$inboundSchema: z.ZodNativeEnum<
  typeof RoleUserMessage
> = z.nativeEnum(RoleUserMessage);

/** @internal */
export const RoleUserMessage$outboundSchema: z.ZodNativeEnum<
  typeof RoleUserMessage
> = RoleUserMessage$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RoleUserMessage$ {
  /** @deprecated use `RoleUserMessage$inboundSchema` instead. */
  export const inboundSchema = RoleUserMessage$inboundSchema;
  /** @deprecated use `RoleUserMessage$outboundSchema` instead. */
  export const outboundSchema = RoleUserMessage$outboundSchema;
}

/** @internal */
export const RunAgentRole$inboundSchema: z.ZodType<
  RunAgentRole,
  z.ZodTypeDef,
  unknown
> = z.union([RoleUserMessage$inboundSchema, RoleToolMessage$inboundSchema]);

/** @internal */
export type RunAgentRole$Outbound = string | string;

/** @internal */
export const RunAgentRole$outboundSchema: z.ZodType<
  RunAgentRole$Outbound,
  z.ZodTypeDef,
  RunAgentRole
> = z.union([RoleUserMessage$outboundSchema, RoleToolMessage$outboundSchema]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RunAgentRole$ {
  /** @deprecated use `RunAgentRole$inboundSchema` instead. */
  export const inboundSchema = RunAgentRole$inboundSchema;
  /** @deprecated use `RunAgentRole$outboundSchema` instead. */
  export const outboundSchema = RunAgentRole$outboundSchema;
  /** @deprecated use `RunAgentRole$Outbound` instead. */
  export type Outbound = RunAgentRole$Outbound;
}

export function runAgentRoleToJSON(runAgentRole: RunAgentRole): string {
  return JSON.stringify(RunAgentRole$outboundSchema.parse(runAgentRole));
}

export function runAgentRoleFromJSON(
  jsonString: string,
): SafeParseResult<RunAgentRole, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => RunAgentRole$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RunAgentRole' from JSON`,
  );
}

/** @internal */
export const RunAgentPublicMessagePartKind$inboundSchema: z.ZodNativeEnum<
  typeof RunAgentPublicMessagePartKind
> = z.nativeEnum(RunAgentPublicMessagePartKind);

/** @internal */
export const RunAgentPublicMessagePartKind$outboundSchema: z.ZodNativeEnum<
  typeof RunAgentPublicMessagePartKind
> = RunAgentPublicMessagePartKind$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RunAgentPublicMessagePartKind$ {
  /** @deprecated use `RunAgentPublicMessagePartKind$inboundSchema` instead. */
  export const inboundSchema = RunAgentPublicMessagePartKind$inboundSchema;
  /** @deprecated use `RunAgentPublicMessagePartKind$outboundSchema` instead. */
  export const outboundSchema = RunAgentPublicMessagePartKind$outboundSchema;
}

/** @internal */
export const ToolResultPart$inboundSchema: z.ZodType<
  ToolResultPart,
  z.ZodTypeDef,
  unknown
> = z.object({
  kind: RunAgentPublicMessagePartKind$inboundSchema,
  tool_call_id: z.string(),
  result: z.any().optional(),
  metadata: z.record(z.any()).optional(),
}).transform((v) => {
  return remap$(v, {
    "tool_call_id": "toolCallId",
  });
});

/** @internal */
export type ToolResultPart$Outbound = {
  kind: string;
  tool_call_id: string;
  result?: any | undefined;
  metadata?: { [k: string]: any } | undefined;
};

/** @internal */
export const ToolResultPart$outboundSchema: z.ZodType<
  ToolResultPart$Outbound,
  z.ZodTypeDef,
  ToolResultPart
> = z.object({
  kind: RunAgentPublicMessagePartKind$outboundSchema,
  toolCallId: z.string(),
  result: z.any().optional(),
  metadata: z.record(z.any()).optional(),
}).transform((v) => {
  return remap$(v, {
    toolCallId: "tool_call_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ToolResultPart$ {
  /** @deprecated use `ToolResultPart$inboundSchema` instead. */
  export const inboundSchema = ToolResultPart$inboundSchema;
  /** @deprecated use `ToolResultPart$outboundSchema` instead. */
  export const outboundSchema = ToolResultPart$outboundSchema;
  /** @deprecated use `ToolResultPart$Outbound` instead. */
  export type Outbound = ToolResultPart$Outbound;
}

export function toolResultPartToJSON(toolResultPart: ToolResultPart): string {
  return JSON.stringify(ToolResultPart$outboundSchema.parse(toolResultPart));
}

export function toolResultPartFromJSON(
  jsonString: string,
): SafeParseResult<ToolResultPart, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ToolResultPart$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ToolResultPart' from JSON`,
  );
}

/** @internal */
export const PublicMessagePartKind$inboundSchema: z.ZodNativeEnum<
  typeof PublicMessagePartKind
> = z.nativeEnum(PublicMessagePartKind);

/** @internal */
export const PublicMessagePartKind$outboundSchema: z.ZodNativeEnum<
  typeof PublicMessagePartKind
> = PublicMessagePartKind$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PublicMessagePartKind$ {
  /** @deprecated use `PublicMessagePartKind$inboundSchema` instead. */
  export const inboundSchema = PublicMessagePartKind$inboundSchema;
  /** @deprecated use `PublicMessagePartKind$outboundSchema` instead. */
  export const outboundSchema = PublicMessagePartKind$outboundSchema;
}

/** @internal */
export const FileInURIFormat$inboundSchema: z.ZodType<
  FileInURIFormat,
  z.ZodTypeDef,
  unknown
> = z.object({
  uri: z.string(),
  mimeType: z.string().optional(),
  name: z.string().optional(),
});

/** @internal */
export type FileInURIFormat$Outbound = {
  uri: string;
  mimeType?: string | undefined;
  name?: string | undefined;
};

/** @internal */
export const FileInURIFormat$outboundSchema: z.ZodType<
  FileInURIFormat$Outbound,
  z.ZodTypeDef,
  FileInURIFormat
> = z.object({
  uri: z.string(),
  mimeType: z.string().optional(),
  name: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FileInURIFormat$ {
  /** @deprecated use `FileInURIFormat$inboundSchema` instead. */
  export const inboundSchema = FileInURIFormat$inboundSchema;
  /** @deprecated use `FileInURIFormat$outboundSchema` instead. */
  export const outboundSchema = FileInURIFormat$outboundSchema;
  /** @deprecated use `FileInURIFormat$Outbound` instead. */
  export type Outbound = FileInURIFormat$Outbound;
}

export function fileInURIFormatToJSON(
  fileInURIFormat: FileInURIFormat,
): string {
  return JSON.stringify(FileInURIFormat$outboundSchema.parse(fileInURIFormat));
}

export function fileInURIFormatFromJSON(
  jsonString: string,
): SafeParseResult<FileInURIFormat, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => FileInURIFormat$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'FileInURIFormat' from JSON`,
  );
}

/** @internal */
export const BinaryFormat$inboundSchema: z.ZodType<
  BinaryFormat,
  z.ZodTypeDef,
  unknown
> = z.object({
  bytes: z.string(),
  mimeType: z.string().optional(),
  name: z.string().optional(),
});

/** @internal */
export type BinaryFormat$Outbound = {
  bytes: string;
  mimeType?: string | undefined;
  name?: string | undefined;
};

/** @internal */
export const BinaryFormat$outboundSchema: z.ZodType<
  BinaryFormat$Outbound,
  z.ZodTypeDef,
  BinaryFormat
> = z.object({
  bytes: z.string(),
  mimeType: z.string().optional(),
  name: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace BinaryFormat$ {
  /** @deprecated use `BinaryFormat$inboundSchema` instead. */
  export const inboundSchema = BinaryFormat$inboundSchema;
  /** @deprecated use `BinaryFormat$outboundSchema` instead. */
  export const outboundSchema = BinaryFormat$outboundSchema;
  /** @deprecated use `BinaryFormat$Outbound` instead. */
  export type Outbound = BinaryFormat$Outbound;
}

export function binaryFormatToJSON(binaryFormat: BinaryFormat): string {
  return JSON.stringify(BinaryFormat$outboundSchema.parse(binaryFormat));
}

export function binaryFormatFromJSON(
  jsonString: string,
): SafeParseResult<BinaryFormat, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => BinaryFormat$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'BinaryFormat' from JSON`,
  );
}

/** @internal */
export const PublicMessagePartFile$inboundSchema: z.ZodType<
  PublicMessagePartFile,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => BinaryFormat$inboundSchema),
  z.lazy(() => FileInURIFormat$inboundSchema),
]);

/** @internal */
export type PublicMessagePartFile$Outbound =
  | BinaryFormat$Outbound
  | FileInURIFormat$Outbound;

/** @internal */
export const PublicMessagePartFile$outboundSchema: z.ZodType<
  PublicMessagePartFile$Outbound,
  z.ZodTypeDef,
  PublicMessagePartFile
> = z.union([
  z.lazy(() => BinaryFormat$outboundSchema),
  z.lazy(() => FileInURIFormat$outboundSchema),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PublicMessagePartFile$ {
  /** @deprecated use `PublicMessagePartFile$inboundSchema` instead. */
  export const inboundSchema = PublicMessagePartFile$inboundSchema;
  /** @deprecated use `PublicMessagePartFile$outboundSchema` instead. */
  export const outboundSchema = PublicMessagePartFile$outboundSchema;
  /** @deprecated use `PublicMessagePartFile$Outbound` instead. */
  export type Outbound = PublicMessagePartFile$Outbound;
}

export function publicMessagePartFileToJSON(
  publicMessagePartFile: PublicMessagePartFile,
): string {
  return JSON.stringify(
    PublicMessagePartFile$outboundSchema.parse(publicMessagePartFile),
  );
}

export function publicMessagePartFileFromJSON(
  jsonString: string,
): SafeParseResult<PublicMessagePartFile, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PublicMessagePartFile$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PublicMessagePartFile' from JSON`,
  );
}

/** @internal */
export const FilePart$inboundSchema: z.ZodType<
  FilePart,
  z.ZodTypeDef,
  unknown
> = z.object({
  kind: PublicMessagePartKind$inboundSchema,
  file: z.union([
    z.lazy(() => BinaryFormat$inboundSchema),
    z.lazy(() => FileInURIFormat$inboundSchema),
  ]),
  metadata: z.record(z.any()).optional(),
});

/** @internal */
export type FilePart$Outbound = {
  kind: string;
  file: BinaryFormat$Outbound | FileInURIFormat$Outbound;
  metadata?: { [k: string]: any } | undefined;
};

/** @internal */
export const FilePart$outboundSchema: z.ZodType<
  FilePart$Outbound,
  z.ZodTypeDef,
  FilePart
> = z.object({
  kind: PublicMessagePartKind$outboundSchema,
  file: z.union([
    z.lazy(() => BinaryFormat$outboundSchema),
    z.lazy(() => FileInURIFormat$outboundSchema),
  ]),
  metadata: z.record(z.any()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FilePart$ {
  /** @deprecated use `FilePart$inboundSchema` instead. */
  export const inboundSchema = FilePart$inboundSchema;
  /** @deprecated use `FilePart$outboundSchema` instead. */
  export const outboundSchema = FilePart$outboundSchema;
  /** @deprecated use `FilePart$Outbound` instead. */
  export type Outbound = FilePart$Outbound;
}

export function filePartToJSON(filePart: FilePart): string {
  return JSON.stringify(FilePart$outboundSchema.parse(filePart));
}

export function filePartFromJSON(
  jsonString: string,
): SafeParseResult<FilePart, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => FilePart$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'FilePart' from JSON`,
  );
}

/** @internal */
export const Kind$inboundSchema: z.ZodNativeEnum<typeof Kind> = z.nativeEnum(
  Kind,
);

/** @internal */
export const Kind$outboundSchema: z.ZodNativeEnum<typeof Kind> =
  Kind$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Kind$ {
  /** @deprecated use `Kind$inboundSchema` instead. */
  export const inboundSchema = Kind$inboundSchema;
  /** @deprecated use `Kind$outboundSchema` instead. */
  export const outboundSchema = Kind$outboundSchema;
}

/** @internal */
export const TextPart$inboundSchema: z.ZodType<
  TextPart,
  z.ZodTypeDef,
  unknown
> = z.object({
  kind: Kind$inboundSchema,
  text: z.string(),
});

/** @internal */
export type TextPart$Outbound = {
  kind: string;
  text: string;
};

/** @internal */
export const TextPart$outboundSchema: z.ZodType<
  TextPart$Outbound,
  z.ZodTypeDef,
  TextPart
> = z.object({
  kind: Kind$outboundSchema,
  text: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TextPart$ {
  /** @deprecated use `TextPart$inboundSchema` instead. */
  export const inboundSchema = TextPart$inboundSchema;
  /** @deprecated use `TextPart$outboundSchema` instead. */
  export const outboundSchema = TextPart$outboundSchema;
  /** @deprecated use `TextPart$Outbound` instead. */
  export type Outbound = TextPart$Outbound;
}

export function textPartToJSON(textPart: TextPart): string {
  return JSON.stringify(TextPart$outboundSchema.parse(textPart));
}

export function textPartFromJSON(
  jsonString: string,
): SafeParseResult<TextPart, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => TextPart$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TextPart' from JSON`,
  );
}

/** @internal */
export const PublicMessagePart$inboundSchema: z.ZodType<
  PublicMessagePart,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => TextPart$inboundSchema),
  z.lazy(() => FilePart$inboundSchema),
  z.lazy(() => ToolResultPart$inboundSchema),
]);

/** @internal */
export type PublicMessagePart$Outbound =
  | TextPart$Outbound
  | FilePart$Outbound
  | ToolResultPart$Outbound;

/** @internal */
export const PublicMessagePart$outboundSchema: z.ZodType<
  PublicMessagePart$Outbound,
  z.ZodTypeDef,
  PublicMessagePart
> = z.union([
  z.lazy(() => TextPart$outboundSchema),
  z.lazy(() => FilePart$outboundSchema),
  z.lazy(() => ToolResultPart$outboundSchema),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PublicMessagePart$ {
  /** @deprecated use `PublicMessagePart$inboundSchema` instead. */
  export const inboundSchema = PublicMessagePart$inboundSchema;
  /** @deprecated use `PublicMessagePart$outboundSchema` instead. */
  export const outboundSchema = PublicMessagePart$outboundSchema;
  /** @deprecated use `PublicMessagePart$Outbound` instead. */
  export type Outbound = PublicMessagePart$Outbound;
}

export function publicMessagePartToJSON(
  publicMessagePart: PublicMessagePart,
): string {
  return JSON.stringify(
    PublicMessagePart$outboundSchema.parse(publicMessagePart),
  );
}

export function publicMessagePartFromJSON(
  jsonString: string,
): SafeParseResult<PublicMessagePart, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PublicMessagePart$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PublicMessagePart' from JSON`,
  );
}

/** @internal */
export const Message$inboundSchema: z.ZodType<Message, z.ZodTypeDef, unknown> =
  z.object({
    messageId: z.string().optional(),
    role: z.union([
      RoleUserMessage$inboundSchema,
      RoleToolMessage$inboundSchema,
    ]),
    parts: z.array(
      z.union([
        z.lazy(() => TextPart$inboundSchema),
        z.lazy(() => FilePart$inboundSchema),
        z.lazy(() => ToolResultPart$inboundSchema),
      ]),
    ),
  });

/** @internal */
export type Message$Outbound = {
  messageId?: string | undefined;
  role: string | string;
  parts: Array<TextPart$Outbound | FilePart$Outbound | ToolResultPart$Outbound>;
};

/** @internal */
export const Message$outboundSchema: z.ZodType<
  Message$Outbound,
  z.ZodTypeDef,
  Message
> = z.object({
  messageId: z.string().optional(),
  role: z.union([
    RoleUserMessage$outboundSchema,
    RoleToolMessage$outboundSchema,
  ]),
  parts: z.array(
    z.union([
      z.lazy(() => TextPart$outboundSchema),
      z.lazy(() => FilePart$outboundSchema),
      z.lazy(() => ToolResultPart$outboundSchema),
    ]),
  ),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Message$ {
  /** @deprecated use `Message$inboundSchema` instead. */
  export const inboundSchema = Message$inboundSchema;
  /** @deprecated use `Message$outboundSchema` instead. */
  export const outboundSchema = Message$outboundSchema;
  /** @deprecated use `Message$Outbound` instead. */
  export type Outbound = Message$Outbound;
}

export function messageToJSON(message: Message): string {
  return JSON.stringify(Message$outboundSchema.parse(message));
}

export function messageFromJSON(
  jsonString: string,
): SafeParseResult<Message, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Message$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Message' from JSON`,
  );
}

/** @internal */
export const Contact$inboundSchema: z.ZodType<Contact, z.ZodTypeDef, unknown> =
  z.object({
    id: z.string(),
    display_name: z.string().optional(),
    email: z.string().optional(),
    metadata: z.array(z.record(z.any())).optional(),
    logo_url: z.string().optional(),
    tags: z.array(z.string()).optional(),
  }).transform((v) => {
    return remap$(v, {
      "display_name": "displayName",
      "logo_url": "logoUrl",
    });
  });

/** @internal */
export type Contact$Outbound = {
  id: string;
  display_name?: string | undefined;
  email?: string | undefined;
  metadata?: Array<{ [k: string]: any }> | undefined;
  logo_url?: string | undefined;
  tags?: Array<string> | undefined;
};

/** @internal */
export const Contact$outboundSchema: z.ZodType<
  Contact$Outbound,
  z.ZodTypeDef,
  Contact
> = z.object({
  id: z.string(),
  displayName: z.string().optional(),
  email: z.string().optional(),
  metadata: z.array(z.record(z.any())).optional(),
  logoUrl: z.string().optional(),
  tags: z.array(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    displayName: "display_name",
    logoUrl: "logo_url",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Contact$ {
  /** @deprecated use `Contact$inboundSchema` instead. */
  export const inboundSchema = Contact$inboundSchema;
  /** @deprecated use `Contact$outboundSchema` instead. */
  export const outboundSchema = Contact$outboundSchema;
  /** @deprecated use `Contact$Outbound` instead. */
  export type Outbound = Contact$Outbound;
}

export function contactToJSON(contact: Contact): string {
  return JSON.stringify(Contact$outboundSchema.parse(contact));
}

export function contactFromJSON(
  jsonString: string,
): SafeParseResult<Contact, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Contact$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Contact' from JSON`,
  );
}

/** @internal */
export const RunAgentThread$inboundSchema: z.ZodType<
  RunAgentThread,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  tags: z.array(z.string()).optional(),
});

/** @internal */
export type RunAgentThread$Outbound = {
  id: string;
  tags?: Array<string> | undefined;
};

/** @internal */
export const RunAgentThread$outboundSchema: z.ZodType<
  RunAgentThread$Outbound,
  z.ZodTypeDef,
  RunAgentThread
> = z.object({
  id: z.string(),
  tags: z.array(z.string()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RunAgentThread$ {
  /** @deprecated use `RunAgentThread$inboundSchema` instead. */
  export const inboundSchema = RunAgentThread$inboundSchema;
  /** @deprecated use `RunAgentThread$outboundSchema` instead. */
  export const outboundSchema = RunAgentThread$outboundSchema;
  /** @deprecated use `RunAgentThread$Outbound` instead. */
  export type Outbound = RunAgentThread$Outbound;
}

export function runAgentThreadToJSON(runAgentThread: RunAgentThread): string {
  return JSON.stringify(RunAgentThread$outboundSchema.parse(runAgentThread));
}

export function runAgentThreadFromJSON(
  jsonString: string,
): SafeParseResult<RunAgentThread, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => RunAgentThread$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RunAgentThread' from JSON`,
  );
}

/** @internal */
export const Memory$inboundSchema: z.ZodType<Memory, z.ZodTypeDef, unknown> = z
  .object({
    entity_id: z.string(),
  }).transform((v) => {
    return remap$(v, {
      "entity_id": "entityId",
    });
  });

/** @internal */
export type Memory$Outbound = {
  entity_id: string;
};

/** @internal */
export const Memory$outboundSchema: z.ZodType<
  Memory$Outbound,
  z.ZodTypeDef,
  Memory
> = z.object({
  entityId: z.string(),
}).transform((v) => {
  return remap$(v, {
    entityId: "entity_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Memory$ {
  /** @deprecated use `Memory$inboundSchema` instead. */
  export const inboundSchema = Memory$inboundSchema;
  /** @deprecated use `Memory$outboundSchema` instead. */
  export const outboundSchema = Memory$outboundSchema;
  /** @deprecated use `Memory$Outbound` instead. */
  export type Outbound = Memory$Outbound;
}

export function memoryToJSON(memory: Memory): string {
  return JSON.stringify(Memory$outboundSchema.parse(memory));
}

export function memoryFromJSON(
  jsonString: string,
): SafeParseResult<Memory, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Memory$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Memory' from JSON`,
  );
}

/** @internal */
export const RunAgentKnowledgeBaseConfigurationType$inboundSchema:
  z.ZodNativeEnum<typeof RunAgentKnowledgeBaseConfigurationType> = z.nativeEnum(
    RunAgentKnowledgeBaseConfigurationType,
  );

/** @internal */
export const RunAgentKnowledgeBaseConfigurationType$outboundSchema:
  z.ZodNativeEnum<typeof RunAgentKnowledgeBaseConfigurationType> =
    RunAgentKnowledgeBaseConfigurationType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RunAgentKnowledgeBaseConfigurationType$ {
  /** @deprecated use `RunAgentKnowledgeBaseConfigurationType$inboundSchema` instead. */
  export const inboundSchema =
    RunAgentKnowledgeBaseConfigurationType$inboundSchema;
  /** @deprecated use `RunAgentKnowledgeBaseConfigurationType$outboundSchema` instead. */
  export const outboundSchema =
    RunAgentKnowledgeBaseConfigurationType$outboundSchema;
}

/** @internal */
export const KnowledgeBaseStaticQuery$inboundSchema: z.ZodType<
  KnowledgeBaseStaticQuery,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: RunAgentKnowledgeBaseConfigurationType$inboundSchema,
  query: z.string(),
});

/** @internal */
export type KnowledgeBaseStaticQuery$Outbound = {
  type: string;
  query: string;
};

/** @internal */
export const KnowledgeBaseStaticQuery$outboundSchema: z.ZodType<
  KnowledgeBaseStaticQuery$Outbound,
  z.ZodTypeDef,
  KnowledgeBaseStaticQuery
> = z.object({
  type: RunAgentKnowledgeBaseConfigurationType$outboundSchema,
  query: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace KnowledgeBaseStaticQuery$ {
  /** @deprecated use `KnowledgeBaseStaticQuery$inboundSchema` instead. */
  export const inboundSchema = KnowledgeBaseStaticQuery$inboundSchema;
  /** @deprecated use `KnowledgeBaseStaticQuery$outboundSchema` instead. */
  export const outboundSchema = KnowledgeBaseStaticQuery$outboundSchema;
  /** @deprecated use `KnowledgeBaseStaticQuery$Outbound` instead. */
  export type Outbound = KnowledgeBaseStaticQuery$Outbound;
}

export function knowledgeBaseStaticQueryToJSON(
  knowledgeBaseStaticQuery: KnowledgeBaseStaticQuery,
): string {
  return JSON.stringify(
    KnowledgeBaseStaticQuery$outboundSchema.parse(knowledgeBaseStaticQuery),
  );
}

export function knowledgeBaseStaticQueryFromJSON(
  jsonString: string,
): SafeParseResult<KnowledgeBaseStaticQuery, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => KnowledgeBaseStaticQuery$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'KnowledgeBaseStaticQuery' from JSON`,
  );
}

/** @internal */
export const KnowledgeBaseConfigurationType$inboundSchema: z.ZodNativeEnum<
  typeof KnowledgeBaseConfigurationType
> = z.nativeEnum(KnowledgeBaseConfigurationType);

/** @internal */
export const KnowledgeBaseConfigurationType$outboundSchema: z.ZodNativeEnum<
  typeof KnowledgeBaseConfigurationType
> = KnowledgeBaseConfigurationType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace KnowledgeBaseConfigurationType$ {
  /** @deprecated use `KnowledgeBaseConfigurationType$inboundSchema` instead. */
  export const inboundSchema = KnowledgeBaseConfigurationType$inboundSchema;
  /** @deprecated use `KnowledgeBaseConfigurationType$outboundSchema` instead. */
  export const outboundSchema = KnowledgeBaseConfigurationType$outboundSchema;
}

/** @internal */
export const KnowledgeBaseLastUserMessage$inboundSchema: z.ZodType<
  KnowledgeBaseLastUserMessage,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: KnowledgeBaseConfigurationType$inboundSchema,
});

/** @internal */
export type KnowledgeBaseLastUserMessage$Outbound = {
  type: string;
};

/** @internal */
export const KnowledgeBaseLastUserMessage$outboundSchema: z.ZodType<
  KnowledgeBaseLastUserMessage$Outbound,
  z.ZodTypeDef,
  KnowledgeBaseLastUserMessage
> = z.object({
  type: KnowledgeBaseConfigurationType$outboundSchema,
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace KnowledgeBaseLastUserMessage$ {
  /** @deprecated use `KnowledgeBaseLastUserMessage$inboundSchema` instead. */
  export const inboundSchema = KnowledgeBaseLastUserMessage$inboundSchema;
  /** @deprecated use `KnowledgeBaseLastUserMessage$outboundSchema` instead. */
  export const outboundSchema = KnowledgeBaseLastUserMessage$outboundSchema;
  /** @deprecated use `KnowledgeBaseLastUserMessage$Outbound` instead. */
  export type Outbound = KnowledgeBaseLastUserMessage$Outbound;
}

export function knowledgeBaseLastUserMessageToJSON(
  knowledgeBaseLastUserMessage: KnowledgeBaseLastUserMessage,
): string {
  return JSON.stringify(
    KnowledgeBaseLastUserMessage$outboundSchema.parse(
      knowledgeBaseLastUserMessage,
    ),
  );
}

export function knowledgeBaseLastUserMessageFromJSON(
  jsonString: string,
): SafeParseResult<KnowledgeBaseLastUserMessage, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => KnowledgeBaseLastUserMessage$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'KnowledgeBaseLastUserMessage' from JSON`,
  );
}

/** @internal */
export const KnowledgeBaseConfiguration$inboundSchema: z.ZodType<
  KnowledgeBaseConfiguration,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => KnowledgeBaseStaticQuery$inboundSchema),
  z.lazy(() => KnowledgeBaseLastUserMessage$inboundSchema),
]);

/** @internal */
export type KnowledgeBaseConfiguration$Outbound =
  | KnowledgeBaseStaticQuery$Outbound
  | KnowledgeBaseLastUserMessage$Outbound;

/** @internal */
export const KnowledgeBaseConfiguration$outboundSchema: z.ZodType<
  KnowledgeBaseConfiguration$Outbound,
  z.ZodTypeDef,
  KnowledgeBaseConfiguration
> = z.union([
  z.lazy(() => KnowledgeBaseStaticQuery$outboundSchema),
  z.lazy(() => KnowledgeBaseLastUserMessage$outboundSchema),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace KnowledgeBaseConfiguration$ {
  /** @deprecated use `KnowledgeBaseConfiguration$inboundSchema` instead. */
  export const inboundSchema = KnowledgeBaseConfiguration$inboundSchema;
  /** @deprecated use `KnowledgeBaseConfiguration$outboundSchema` instead. */
  export const outboundSchema = KnowledgeBaseConfiguration$outboundSchema;
  /** @deprecated use `KnowledgeBaseConfiguration$Outbound` instead. */
  export type Outbound = KnowledgeBaseConfiguration$Outbound;
}

export function knowledgeBaseConfigurationToJSON(
  knowledgeBaseConfiguration: KnowledgeBaseConfiguration,
): string {
  return JSON.stringify(
    KnowledgeBaseConfiguration$outboundSchema.parse(knowledgeBaseConfiguration),
  );
}

export function knowledgeBaseConfigurationFromJSON(
  jsonString: string,
): SafeParseResult<KnowledgeBaseConfiguration, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => KnowledgeBaseConfiguration$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'KnowledgeBaseConfiguration' from JSON`,
  );
}

/** @internal */
export const KnowledgeBases$inboundSchema: z.ZodType<
  KnowledgeBases,
  z.ZodTypeDef,
  unknown
> = z.object({
  configuration: z.union([
    z.lazy(() => KnowledgeBaseStaticQuery$inboundSchema),
    z.lazy(() => KnowledgeBaseLastUserMessage$inboundSchema),
  ]),
});

/** @internal */
export type KnowledgeBases$Outbound = {
  configuration:
    | KnowledgeBaseStaticQuery$Outbound
    | KnowledgeBaseLastUserMessage$Outbound;
};

/** @internal */
export const KnowledgeBases$outboundSchema: z.ZodType<
  KnowledgeBases$Outbound,
  z.ZodTypeDef,
  KnowledgeBases
> = z.object({
  configuration: z.union([
    z.lazy(() => KnowledgeBaseStaticQuery$outboundSchema),
    z.lazy(() => KnowledgeBaseLastUserMessage$outboundSchema),
  ]),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace KnowledgeBases$ {
  /** @deprecated use `KnowledgeBases$inboundSchema` instead. */
  export const inboundSchema = KnowledgeBases$inboundSchema;
  /** @deprecated use `KnowledgeBases$outboundSchema` instead. */
  export const outboundSchema = KnowledgeBases$outboundSchema;
  /** @deprecated use `KnowledgeBases$Outbound` instead. */
  export type Outbound = KnowledgeBases$Outbound;
}

export function knowledgeBasesToJSON(knowledgeBases: KnowledgeBases): string {
  return JSON.stringify(KnowledgeBases$outboundSchema.parse(knowledgeBases));
}

export function knowledgeBasesFromJSON(
  jsonString: string,
): SafeParseResult<KnowledgeBases, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => KnowledgeBases$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'KnowledgeBases' from JSON`,
  );
}

/** @internal */
export const TeamOfAgents$inboundSchema: z.ZodType<
  TeamOfAgents,
  z.ZodTypeDef,
  unknown
> = z.object({
  _id: z.string(),
  role: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "_id": "id",
  });
});

/** @internal */
export type TeamOfAgents$Outbound = {
  _id: string;
  role?: string | undefined;
};

/** @internal */
export const TeamOfAgents$outboundSchema: z.ZodType<
  TeamOfAgents$Outbound,
  z.ZodTypeDef,
  TeamOfAgents
> = z.object({
  id: z.string(),
  role: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    id: "_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TeamOfAgents$ {
  /** @deprecated use `TeamOfAgents$inboundSchema` instead. */
  export const inboundSchema = TeamOfAgents$inboundSchema;
  /** @deprecated use `TeamOfAgents$outboundSchema` instead. */
  export const outboundSchema = TeamOfAgents$outboundSchema;
  /** @deprecated use `TeamOfAgents$Outbound` instead. */
  export type Outbound = TeamOfAgents$Outbound;
}

export function teamOfAgentsToJSON(teamOfAgents: TeamOfAgents): string {
  return JSON.stringify(TeamOfAgents$outboundSchema.parse(teamOfAgents));
}

export function teamOfAgentsFromJSON(
  jsonString: string,
): SafeParseResult<TeamOfAgents, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => TeamOfAgents$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TeamOfAgents' from JSON`,
  );
}

/** @internal */
export const RunAgentRunAgentRequestToolAgentsRequestRequestBodySettingsTools14Type$inboundSchema:
  z.ZodNativeEnum<
    typeof RunAgentRunAgentRequestToolAgentsRequestRequestBodySettingsTools14Type
  > = z.nativeEnum(
    RunAgentRunAgentRequestToolAgentsRequestRequestBodySettingsTools14Type,
  );

/** @internal */
export const RunAgentRunAgentRequestToolAgentsRequestRequestBodySettingsTools14Type$outboundSchema:
  z.ZodNativeEnum<
    typeof RunAgentRunAgentRequestToolAgentsRequestRequestBodySettingsTools14Type
  > =
    RunAgentRunAgentRequestToolAgentsRequestRequestBodySettingsTools14Type$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RunAgentRunAgentRequestToolAgentsRequestRequestBodySettingsTools14Type$ {
  /** @deprecated use `RunAgentRunAgentRequestToolAgentsRequestRequestBodySettingsTools14Type$inboundSchema` instead. */
  export const inboundSchema =
    RunAgentRunAgentRequestToolAgentsRequestRequestBodySettingsTools14Type$inboundSchema;
  /** @deprecated use `RunAgentRunAgentRequestToolAgentsRequestRequestBodySettingsTools14Type$outboundSchema` instead. */
  export const outboundSchema =
    RunAgentRunAgentRequestToolAgentsRequestRequestBodySettingsTools14Type$outboundSchema;
}

/** @internal */
export const RunAgentRequestToolFunction$inboundSchema: z.ZodType<
  RunAgentRequestToolFunction,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.string(),
  description: z.string().optional(),
  strict: z.boolean().optional(),
  parameters: z.record(z.any()).optional(),
});

/** @internal */
export type RunAgentRequestToolFunction$Outbound = {
  name: string;
  description?: string | undefined;
  strict?: boolean | undefined;
  parameters?: { [k: string]: any } | undefined;
};

/** @internal */
export const RunAgentRequestToolFunction$outboundSchema: z.ZodType<
  RunAgentRequestToolFunction$Outbound,
  z.ZodTypeDef,
  RunAgentRequestToolFunction
> = z.object({
  name: z.string(),
  description: z.string().optional(),
  strict: z.boolean().optional(),
  parameters: z.record(z.any()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RunAgentRequestToolFunction$ {
  /** @deprecated use `RunAgentRequestToolFunction$inboundSchema` instead. */
  export const inboundSchema = RunAgentRequestToolFunction$inboundSchema;
  /** @deprecated use `RunAgentRequestToolFunction$outboundSchema` instead. */
  export const outboundSchema = RunAgentRequestToolFunction$outboundSchema;
  /** @deprecated use `RunAgentRequestToolFunction$Outbound` instead. */
  export type Outbound = RunAgentRequestToolFunction$Outbound;
}

export function runAgentRequestToolFunctionToJSON(
  runAgentRequestToolFunction: RunAgentRequestToolFunction,
): string {
  return JSON.stringify(
    RunAgentRequestToolFunction$outboundSchema.parse(
      runAgentRequestToolFunction,
    ),
  );
}

export function runAgentRequestToolFunctionFromJSON(
  jsonString: string,
): SafeParseResult<RunAgentRequestToolFunction, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => RunAgentRequestToolFunction$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RunAgentRequestToolFunction' from JSON`,
  );
}

/** @internal */
export const FunctionTool$inboundSchema: z.ZodType<
  FunctionTool,
  z.ZodTypeDef,
  unknown
> = z.object({
  type:
    RunAgentRunAgentRequestToolAgentsRequestRequestBodySettingsTools14Type$inboundSchema,
  _id: z.string().optional(),
  key: z.string(),
  display_name: z.string().optional(),
  description: z.string().optional(),
  requires_approval: z.boolean().default(false),
  function: z.lazy(() => RunAgentRequestToolFunction$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "_id": "id",
    "display_name": "displayName",
    "requires_approval": "requiresApproval",
  });
});

/** @internal */
export type FunctionTool$Outbound = {
  type: string;
  _id?: string | undefined;
  key: string;
  display_name?: string | undefined;
  description?: string | undefined;
  requires_approval: boolean;
  function: RunAgentRequestToolFunction$Outbound;
};

/** @internal */
export const FunctionTool$outboundSchema: z.ZodType<
  FunctionTool$Outbound,
  z.ZodTypeDef,
  FunctionTool
> = z.object({
  type:
    RunAgentRunAgentRequestToolAgentsRequestRequestBodySettingsTools14Type$outboundSchema,
  id: z.string().optional(),
  key: z.string(),
  displayName: z.string().optional(),
  description: z.string().optional(),
  requiresApproval: z.boolean().default(false),
  function: z.lazy(() => RunAgentRequestToolFunction$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    id: "_id",
    displayName: "display_name",
    requiresApproval: "requires_approval",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FunctionTool$ {
  /** @deprecated use `FunctionTool$inboundSchema` instead. */
  export const inboundSchema = FunctionTool$inboundSchema;
  /** @deprecated use `FunctionTool$outboundSchema` instead. */
  export const outboundSchema = FunctionTool$outboundSchema;
  /** @deprecated use `FunctionTool$Outbound` instead. */
  export type Outbound = FunctionTool$Outbound;
}

export function functionToolToJSON(functionTool: FunctionTool): string {
  return JSON.stringify(FunctionTool$outboundSchema.parse(functionTool));
}

export function functionToolFromJSON(
  jsonString: string,
): SafeParseResult<FunctionTool, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => FunctionTool$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'FunctionTool' from JSON`,
  );
}

/** @internal */
export const RunAgentRunAgentRequestToolAgentsRequestRequestBodySettingsTools13Type$inboundSchema:
  z.ZodNativeEnum<
    typeof RunAgentRunAgentRequestToolAgentsRequestRequestBodySettingsTools13Type
  > = z.nativeEnum(
    RunAgentRunAgentRequestToolAgentsRequestRequestBodySettingsTools13Type,
  );

/** @internal */
export const RunAgentRunAgentRequestToolAgentsRequestRequestBodySettingsTools13Type$outboundSchema:
  z.ZodNativeEnum<
    typeof RunAgentRunAgentRequestToolAgentsRequestRequestBodySettingsTools13Type
  > =
    RunAgentRunAgentRequestToolAgentsRequestRequestBodySettingsTools13Type$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RunAgentRunAgentRequestToolAgentsRequestRequestBodySettingsTools13Type$ {
  /** @deprecated use `RunAgentRunAgentRequestToolAgentsRequestRequestBodySettingsTools13Type$inboundSchema` instead. */
  export const inboundSchema =
    RunAgentRunAgentRequestToolAgentsRequestRequestBodySettingsTools13Type$inboundSchema;
  /** @deprecated use `RunAgentRunAgentRequestToolAgentsRequestRequestBodySettingsTools13Type$outboundSchema` instead. */
  export const outboundSchema =
    RunAgentRunAgentRequestToolAgentsRequestRequestBodySettingsTools13Type$outboundSchema;
}

/** @internal */
export const Language$inboundSchema: z.ZodNativeEnum<typeof Language> = z
  .nativeEnum(Language);

/** @internal */
export const Language$outboundSchema: z.ZodNativeEnum<typeof Language> =
  Language$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Language$ {
  /** @deprecated use `Language$inboundSchema` instead. */
  export const inboundSchema = Language$inboundSchema;
  /** @deprecated use `Language$outboundSchema` instead. */
  export const outboundSchema = Language$outboundSchema;
}

/** @internal */
export const CodeTool$inboundSchema: z.ZodType<
  CodeTool,
  z.ZodTypeDef,
  unknown
> = z.object({
  parameters: z.record(z.any()).optional(),
  language: Language$inboundSchema,
  code: z.string(),
});

/** @internal */
export type CodeTool$Outbound = {
  parameters?: { [k: string]: any } | undefined;
  language: string;
  code: string;
};

/** @internal */
export const CodeTool$outboundSchema: z.ZodType<
  CodeTool$Outbound,
  z.ZodTypeDef,
  CodeTool
> = z.object({
  parameters: z.record(z.any()).optional(),
  language: Language$outboundSchema,
  code: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CodeTool$ {
  /** @deprecated use `CodeTool$inboundSchema` instead. */
  export const inboundSchema = CodeTool$inboundSchema;
  /** @deprecated use `CodeTool$outboundSchema` instead. */
  export const outboundSchema = CodeTool$outboundSchema;
  /** @deprecated use `CodeTool$Outbound` instead. */
  export type Outbound = CodeTool$Outbound;
}

export function codeToolToJSON(codeTool: CodeTool): string {
  return JSON.stringify(CodeTool$outboundSchema.parse(codeTool));
}

export function codeToolFromJSON(
  jsonString: string,
): SafeParseResult<CodeTool, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CodeTool$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CodeTool' from JSON`,
  );
}

/** @internal */
export const CodeExecutionTool$inboundSchema: z.ZodType<
  CodeExecutionTool,
  z.ZodTypeDef,
  unknown
> = z.object({
  key: z.string(),
  display_name: z.string(),
  description: z.string(),
  type:
    RunAgentRunAgentRequestToolAgentsRequestRequestBodySettingsTools13Type$inboundSchema,
  code_tool: z.lazy(() => CodeTool$inboundSchema),
  _id: z.string().optional(),
  requires_approval: z.boolean().default(false),
}).transform((v) => {
  return remap$(v, {
    "display_name": "displayName",
    "code_tool": "codeTool",
    "_id": "id",
    "requires_approval": "requiresApproval",
  });
});

/** @internal */
export type CodeExecutionTool$Outbound = {
  key: string;
  display_name: string;
  description: string;
  type: string;
  code_tool: CodeTool$Outbound;
  _id?: string | undefined;
  requires_approval: boolean;
};

/** @internal */
export const CodeExecutionTool$outboundSchema: z.ZodType<
  CodeExecutionTool$Outbound,
  z.ZodTypeDef,
  CodeExecutionTool
> = z.object({
  key: z.string(),
  displayName: z.string(),
  description: z.string(),
  type:
    RunAgentRunAgentRequestToolAgentsRequestRequestBodySettingsTools13Type$outboundSchema,
  codeTool: z.lazy(() => CodeTool$outboundSchema),
  id: z.string().optional(),
  requiresApproval: z.boolean().default(false),
}).transform((v) => {
  return remap$(v, {
    displayName: "display_name",
    codeTool: "code_tool",
    id: "_id",
    requiresApproval: "requires_approval",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CodeExecutionTool$ {
  /** @deprecated use `CodeExecutionTool$inboundSchema` instead. */
  export const inboundSchema = CodeExecutionTool$inboundSchema;
  /** @deprecated use `CodeExecutionTool$outboundSchema` instead. */
  export const outboundSchema = CodeExecutionTool$outboundSchema;
  /** @deprecated use `CodeExecutionTool$Outbound` instead. */
  export type Outbound = CodeExecutionTool$Outbound;
}

export function codeExecutionToolToJSON(
  codeExecutionTool: CodeExecutionTool,
): string {
  return JSON.stringify(
    CodeExecutionTool$outboundSchema.parse(codeExecutionTool),
  );
}

export function codeExecutionToolFromJSON(
  jsonString: string,
): SafeParseResult<CodeExecutionTool, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CodeExecutionTool$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CodeExecutionTool' from JSON`,
  );
}

/** @internal */
export const RunAgentRunAgentRequestToolAgentsRequestRequestBodySettingsTools12Type$inboundSchema:
  z.ZodNativeEnum<
    typeof RunAgentRunAgentRequestToolAgentsRequestRequestBodySettingsTools12Type
  > = z.nativeEnum(
    RunAgentRunAgentRequestToolAgentsRequestRequestBodySettingsTools12Type,
  );

/** @internal */
export const RunAgentRunAgentRequestToolAgentsRequestRequestBodySettingsTools12Type$outboundSchema:
  z.ZodNativeEnum<
    typeof RunAgentRunAgentRequestToolAgentsRequestRequestBodySettingsTools12Type
  > =
    RunAgentRunAgentRequestToolAgentsRequestRequestBodySettingsTools12Type$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RunAgentRunAgentRequestToolAgentsRequestRequestBodySettingsTools12Type$ {
  /** @deprecated use `RunAgentRunAgentRequestToolAgentsRequestRequestBodySettingsTools12Type$inboundSchema` instead. */
  export const inboundSchema =
    RunAgentRunAgentRequestToolAgentsRequestRequestBodySettingsTools12Type$inboundSchema;
  /** @deprecated use `RunAgentRunAgentRequestToolAgentsRequestRequestBodySettingsTools12Type$outboundSchema` instead. */
  export const outboundSchema =
    RunAgentRunAgentRequestToolAgentsRequestRequestBodySettingsTools12Type$outboundSchema;
}

/** @internal */
export const Method$inboundSchema: z.ZodNativeEnum<typeof Method> = z
  .nativeEnum(Method);

/** @internal */
export const Method$outboundSchema: z.ZodNativeEnum<typeof Method> =
  Method$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Method$ {
  /** @deprecated use `Method$inboundSchema` instead. */
  export const inboundSchema = Method$inboundSchema;
  /** @deprecated use `Method$outboundSchema` instead. */
  export const outboundSchema = Method$outboundSchema;
}

/** @internal */
export const Blueprint$inboundSchema: z.ZodType<
  Blueprint,
  z.ZodTypeDef,
  unknown
> = z.object({
  url: z.string(),
  method: Method$inboundSchema,
  headers: z.record(z.string()).optional(),
  body: z.record(z.any()).optional(),
});

/** @internal */
export type Blueprint$Outbound = {
  url: string;
  method: string;
  headers?: { [k: string]: string } | undefined;
  body?: { [k: string]: any } | undefined;
};

/** @internal */
export const Blueprint$outboundSchema: z.ZodType<
  Blueprint$Outbound,
  z.ZodTypeDef,
  Blueprint
> = z.object({
  url: z.string(),
  method: Method$outboundSchema,
  headers: z.record(z.string()).optional(),
  body: z.record(z.any()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Blueprint$ {
  /** @deprecated use `Blueprint$inboundSchema` instead. */
  export const inboundSchema = Blueprint$inboundSchema;
  /** @deprecated use `Blueprint$outboundSchema` instead. */
  export const outboundSchema = Blueprint$outboundSchema;
  /** @deprecated use `Blueprint$Outbound` instead. */
  export type Outbound = Blueprint$Outbound;
}

export function blueprintToJSON(blueprint: Blueprint): string {
  return JSON.stringify(Blueprint$outboundSchema.parse(blueprint));
}

export function blueprintFromJSON(
  jsonString: string,
): SafeParseResult<Blueprint, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Blueprint$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Blueprint' from JSON`,
  );
}

/** @internal */
export const RunAgentRunAgentRequestToolAgentsRequestRequestBodySettingsTools12HttpType$inboundSchema:
  z.ZodNativeEnum<
    typeof RunAgentRunAgentRequestToolAgentsRequestRequestBodySettingsTools12HttpType
  > = z.nativeEnum(
    RunAgentRunAgentRequestToolAgentsRequestRequestBodySettingsTools12HttpType,
  );

/** @internal */
export const RunAgentRunAgentRequestToolAgentsRequestRequestBodySettingsTools12HttpType$outboundSchema:
  z.ZodNativeEnum<
    typeof RunAgentRunAgentRequestToolAgentsRequestRequestBodySettingsTools12HttpType
  > =
    RunAgentRunAgentRequestToolAgentsRequestRequestBodySettingsTools12HttpType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RunAgentRunAgentRequestToolAgentsRequestRequestBodySettingsTools12HttpType$ {
  /** @deprecated use `RunAgentRunAgentRequestToolAgentsRequestRequestBodySettingsTools12HttpType$inboundSchema` instead. */
  export const inboundSchema =
    RunAgentRunAgentRequestToolAgentsRequestRequestBodySettingsTools12HttpType$inboundSchema;
  /** @deprecated use `RunAgentRunAgentRequestToolAgentsRequestRequestBodySettingsTools12HttpType$outboundSchema` instead. */
  export const outboundSchema =
    RunAgentRunAgentRequestToolAgentsRequestRequestBodySettingsTools12HttpType$outboundSchema;
}

/** @internal */
export const DefaultValue$inboundSchema: z.ZodType<
  DefaultValue,
  z.ZodTypeDef,
  unknown
> = z.union([z.string(), z.number(), z.boolean()]);

/** @internal */
export type DefaultValue$Outbound = string | number | boolean;

/** @internal */
export const DefaultValue$outboundSchema: z.ZodType<
  DefaultValue$Outbound,
  z.ZodTypeDef,
  DefaultValue
> = z.union([z.string(), z.number(), z.boolean()]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DefaultValue$ {
  /** @deprecated use `DefaultValue$inboundSchema` instead. */
  export const inboundSchema = DefaultValue$inboundSchema;
  /** @deprecated use `DefaultValue$outboundSchema` instead. */
  export const outboundSchema = DefaultValue$outboundSchema;
  /** @deprecated use `DefaultValue$Outbound` instead. */
  export type Outbound = DefaultValue$Outbound;
}

export function defaultValueToJSON(defaultValue: DefaultValue): string {
  return JSON.stringify(DefaultValue$outboundSchema.parse(defaultValue));
}

export function defaultValueFromJSON(
  jsonString: string,
): SafeParseResult<DefaultValue, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DefaultValue$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DefaultValue' from JSON`,
  );
}

/** @internal */
export const Arguments$inboundSchema: z.ZodType<
  Arguments,
  z.ZodTypeDef,
  unknown
> = z.object({
  type:
    RunAgentRunAgentRequestToolAgentsRequestRequestBodySettingsTools12HttpType$inboundSchema,
  description: z.string(),
  send_to_model: z.boolean().default(true),
  default_value: z.union([z.string(), z.number(), z.boolean()]).optional(),
}).transform((v) => {
  return remap$(v, {
    "send_to_model": "sendToModel",
    "default_value": "defaultValue",
  });
});

/** @internal */
export type Arguments$Outbound = {
  type: string;
  description: string;
  send_to_model: boolean;
  default_value?: string | number | boolean | undefined;
};

/** @internal */
export const Arguments$outboundSchema: z.ZodType<
  Arguments$Outbound,
  z.ZodTypeDef,
  Arguments
> = z.object({
  type:
    RunAgentRunAgentRequestToolAgentsRequestRequestBodySettingsTools12HttpType$outboundSchema,
  description: z.string(),
  sendToModel: z.boolean().default(true),
  defaultValue: z.union([z.string(), z.number(), z.boolean()]).optional(),
}).transform((v) => {
  return remap$(v, {
    sendToModel: "send_to_model",
    defaultValue: "default_value",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Arguments$ {
  /** @deprecated use `Arguments$inboundSchema` instead. */
  export const inboundSchema = Arguments$inboundSchema;
  /** @deprecated use `Arguments$outboundSchema` instead. */
  export const outboundSchema = Arguments$outboundSchema;
  /** @deprecated use `Arguments$Outbound` instead. */
  export type Outbound = Arguments$Outbound;
}

export function argumentsToJSON(value: Arguments): string {
  return JSON.stringify(Arguments$outboundSchema.parse(value));
}

export function argumentsFromJSON(
  jsonString: string,
): SafeParseResult<Arguments, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Arguments$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Arguments' from JSON`,
  );
}

/** @internal */
export const Http$inboundSchema: z.ZodType<Http, z.ZodTypeDef, unknown> = z
  .object({
    blueprint: z.lazy(() => Blueprint$inboundSchema),
    arguments: z.record(z.lazy(() => Arguments$inboundSchema)).optional(),
  });

/** @internal */
export type Http$Outbound = {
  blueprint: Blueprint$Outbound;
  arguments?: { [k: string]: Arguments$Outbound } | undefined;
};

/** @internal */
export const Http$outboundSchema: z.ZodType<Http$Outbound, z.ZodTypeDef, Http> =
  z.object({
    blueprint: z.lazy(() => Blueprint$outboundSchema),
    arguments: z.record(z.lazy(() => Arguments$outboundSchema)).optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Http$ {
  /** @deprecated use `Http$inboundSchema` instead. */
  export const inboundSchema = Http$inboundSchema;
  /** @deprecated use `Http$outboundSchema` instead. */
  export const outboundSchema = Http$outboundSchema;
  /** @deprecated use `Http$Outbound` instead. */
  export type Outbound = Http$Outbound;
}

export function httpToJSON(http: Http): string {
  return JSON.stringify(Http$outboundSchema.parse(http));
}

export function httpFromJSON(
  jsonString: string,
): SafeParseResult<Http, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Http$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Http' from JSON`,
  );
}

/** @internal */
export const HTTPTool$inboundSchema: z.ZodType<
  HTTPTool,
  z.ZodTypeDef,
  unknown
> = z.object({
  _id: z.string().default("01K6J2WBQ9PZV48R9EDRBYRKK1"),
  key: z.string(),
  display_name: z.string(),
  description: z.string(),
  type:
    RunAgentRunAgentRequestToolAgentsRequestRequestBodySettingsTools12Type$inboundSchema,
  http: z.lazy(() => Http$inboundSchema),
  requires_approval: z.boolean().default(false),
}).transform((v) => {
  return remap$(v, {
    "_id": "id",
    "display_name": "displayName",
    "requires_approval": "requiresApproval",
  });
});

/** @internal */
export type HTTPTool$Outbound = {
  _id: string;
  key: string;
  display_name: string;
  description: string;
  type: string;
  http: Http$Outbound;
  requires_approval: boolean;
};

/** @internal */
export const HTTPTool$outboundSchema: z.ZodType<
  HTTPTool$Outbound,
  z.ZodTypeDef,
  HTTPTool
> = z.object({
  id: z.string().default("01K6J2WBQ9PZV48R9EDRBYRKK1"),
  key: z.string(),
  displayName: z.string(),
  description: z.string(),
  type:
    RunAgentRunAgentRequestToolAgentsRequestRequestBodySettingsTools12Type$outboundSchema,
  http: z.lazy(() => Http$outboundSchema),
  requiresApproval: z.boolean().default(false),
}).transform((v) => {
  return remap$(v, {
    id: "_id",
    displayName: "display_name",
    requiresApproval: "requires_approval",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HTTPTool$ {
  /** @deprecated use `HTTPTool$inboundSchema` instead. */
  export const inboundSchema = HTTPTool$inboundSchema;
  /** @deprecated use `HTTPTool$outboundSchema` instead. */
  export const outboundSchema = HTTPTool$outboundSchema;
  /** @deprecated use `HTTPTool$Outbound` instead. */
  export type Outbound = HTTPTool$Outbound;
}

export function httpToolToJSON(httpTool: HTTPTool): string {
  return JSON.stringify(HTTPTool$outboundSchema.parse(httpTool));
}

export function httpToolFromJSON(
  jsonString: string,
): SafeParseResult<HTTPTool, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => HTTPTool$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'HTTPTool' from JSON`,
  );
}

/** @internal */
export const RunAgentRunAgentRequestToolAgentsRequestRequestBodySettingsTools11Type$inboundSchema:
  z.ZodNativeEnum<
    typeof RunAgentRunAgentRequestToolAgentsRequestRequestBodySettingsTools11Type
  > = z.nativeEnum(
    RunAgentRunAgentRequestToolAgentsRequestRequestBodySettingsTools11Type,
  );

/** @internal */
export const RunAgentRunAgentRequestToolAgentsRequestRequestBodySettingsTools11Type$outboundSchema:
  z.ZodNativeEnum<
    typeof RunAgentRunAgentRequestToolAgentsRequestRequestBodySettingsTools11Type
  > =
    RunAgentRunAgentRequestToolAgentsRequestRequestBodySettingsTools11Type$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RunAgentRunAgentRequestToolAgentsRequestRequestBodySettingsTools11Type$ {
  /** @deprecated use `RunAgentRunAgentRequestToolAgentsRequestRequestBodySettingsTools11Type$inboundSchema` instead. */
  export const inboundSchema =
    RunAgentRunAgentRequestToolAgentsRequestRequestBodySettingsTools11Type$inboundSchema;
  /** @deprecated use `RunAgentRunAgentRequestToolAgentsRequestRequestBodySettingsTools11Type$outboundSchema` instead. */
  export const outboundSchema =
    RunAgentRunAgentRequestToolAgentsRequestRequestBodySettingsTools11Type$outboundSchema;
}

/** @internal */
export const CurrentDateTool$inboundSchema: z.ZodType<
  CurrentDateTool,
  z.ZodTypeDef,
  unknown
> = z.object({
  type:
    RunAgentRunAgentRequestToolAgentsRequestRequestBodySettingsTools11Type$inboundSchema,
  requires_approval: z.boolean().default(false),
}).transform((v) => {
  return remap$(v, {
    "requires_approval": "requiresApproval",
  });
});

/** @internal */
export type CurrentDateTool$Outbound = {
  type: string;
  requires_approval: boolean;
};

/** @internal */
export const CurrentDateTool$outboundSchema: z.ZodType<
  CurrentDateTool$Outbound,
  z.ZodTypeDef,
  CurrentDateTool
> = z.object({
  type:
    RunAgentRunAgentRequestToolAgentsRequestRequestBodySettingsTools11Type$outboundSchema,
  requiresApproval: z.boolean().default(false),
}).transform((v) => {
  return remap$(v, {
    requiresApproval: "requires_approval",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CurrentDateTool$ {
  /** @deprecated use `CurrentDateTool$inboundSchema` instead. */
  export const inboundSchema = CurrentDateTool$inboundSchema;
  /** @deprecated use `CurrentDateTool$outboundSchema` instead. */
  export const outboundSchema = CurrentDateTool$outboundSchema;
  /** @deprecated use `CurrentDateTool$Outbound` instead. */
  export type Outbound = CurrentDateTool$Outbound;
}

export function currentDateToolToJSON(
  currentDateTool: CurrentDateTool,
): string {
  return JSON.stringify(CurrentDateTool$outboundSchema.parse(currentDateTool));
}

export function currentDateToolFromJSON(
  jsonString: string,
): SafeParseResult<CurrentDateTool, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CurrentDateTool$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CurrentDateTool' from JSON`,
  );
}

/** @internal */
export const RunAgentRunAgentRequestToolAgentsRequestRequestBodySettingsTools10Type$inboundSchema:
  z.ZodNativeEnum<
    typeof RunAgentRunAgentRequestToolAgentsRequestRequestBodySettingsTools10Type
  > = z.nativeEnum(
    RunAgentRunAgentRequestToolAgentsRequestRequestBodySettingsTools10Type,
  );

/** @internal */
export const RunAgentRunAgentRequestToolAgentsRequestRequestBodySettingsTools10Type$outboundSchema:
  z.ZodNativeEnum<
    typeof RunAgentRunAgentRequestToolAgentsRequestRequestBodySettingsTools10Type
  > =
    RunAgentRunAgentRequestToolAgentsRequestRequestBodySettingsTools10Type$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RunAgentRunAgentRequestToolAgentsRequestRequestBodySettingsTools10Type$ {
  /** @deprecated use `RunAgentRunAgentRequestToolAgentsRequestRequestBodySettingsTools10Type$inboundSchema` instead. */
  export const inboundSchema =
    RunAgentRunAgentRequestToolAgentsRequestRequestBodySettingsTools10Type$inboundSchema;
  /** @deprecated use `RunAgentRunAgentRequestToolAgentsRequestRequestBodySettingsTools10Type$outboundSchema` instead. */
  export const outboundSchema =
    RunAgentRunAgentRequestToolAgentsRequestRequestBodySettingsTools10Type$outboundSchema;
}

/** @internal */
export const QueryKnowledgeBaseTool$inboundSchema: z.ZodType<
  QueryKnowledgeBaseTool,
  z.ZodTypeDef,
  unknown
> = z.object({
  type:
    RunAgentRunAgentRequestToolAgentsRequestRequestBodySettingsTools10Type$inboundSchema,
  requires_approval: z.boolean().default(false),
}).transform((v) => {
  return remap$(v, {
    "requires_approval": "requiresApproval",
  });
});

/** @internal */
export type QueryKnowledgeBaseTool$Outbound = {
  type: string;
  requires_approval: boolean;
};

/** @internal */
export const QueryKnowledgeBaseTool$outboundSchema: z.ZodType<
  QueryKnowledgeBaseTool$Outbound,
  z.ZodTypeDef,
  QueryKnowledgeBaseTool
> = z.object({
  type:
    RunAgentRunAgentRequestToolAgentsRequestRequestBodySettingsTools10Type$outboundSchema,
  requiresApproval: z.boolean().default(false),
}).transform((v) => {
  return remap$(v, {
    requiresApproval: "requires_approval",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace QueryKnowledgeBaseTool$ {
  /** @deprecated use `QueryKnowledgeBaseTool$inboundSchema` instead. */
  export const inboundSchema = QueryKnowledgeBaseTool$inboundSchema;
  /** @deprecated use `QueryKnowledgeBaseTool$outboundSchema` instead. */
  export const outboundSchema = QueryKnowledgeBaseTool$outboundSchema;
  /** @deprecated use `QueryKnowledgeBaseTool$Outbound` instead. */
  export type Outbound = QueryKnowledgeBaseTool$Outbound;
}

export function queryKnowledgeBaseToolToJSON(
  queryKnowledgeBaseTool: QueryKnowledgeBaseTool,
): string {
  return JSON.stringify(
    QueryKnowledgeBaseTool$outboundSchema.parse(queryKnowledgeBaseTool),
  );
}

export function queryKnowledgeBaseToolFromJSON(
  jsonString: string,
): SafeParseResult<QueryKnowledgeBaseTool, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => QueryKnowledgeBaseTool$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'QueryKnowledgeBaseTool' from JSON`,
  );
}

/** @internal */
export const RunAgentRunAgentRequestToolAgentsRequestRequestBodySettingsTools9Type$inboundSchema:
  z.ZodNativeEnum<
    typeof RunAgentRunAgentRequestToolAgentsRequestRequestBodySettingsTools9Type
  > = z.nativeEnum(
    RunAgentRunAgentRequestToolAgentsRequestRequestBodySettingsTools9Type,
  );

/** @internal */
export const RunAgentRunAgentRequestToolAgentsRequestRequestBodySettingsTools9Type$outboundSchema:
  z.ZodNativeEnum<
    typeof RunAgentRunAgentRequestToolAgentsRequestRequestBodySettingsTools9Type
  > =
    RunAgentRunAgentRequestToolAgentsRequestRequestBodySettingsTools9Type$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RunAgentRunAgentRequestToolAgentsRequestRequestBodySettingsTools9Type$ {
  /** @deprecated use `RunAgentRunAgentRequestToolAgentsRequestRequestBodySettingsTools9Type$inboundSchema` instead. */
  export const inboundSchema =
    RunAgentRunAgentRequestToolAgentsRequestRequestBodySettingsTools9Type$inboundSchema;
  /** @deprecated use `RunAgentRunAgentRequestToolAgentsRequestRequestBodySettingsTools9Type$outboundSchema` instead. */
  export const outboundSchema =
    RunAgentRunAgentRequestToolAgentsRequestRequestBodySettingsTools9Type$outboundSchema;
}

/** @internal */
export const RetrieveKnowledgeBasesTool$inboundSchema: z.ZodType<
  RetrieveKnowledgeBasesTool,
  z.ZodTypeDef,
  unknown
> = z.object({
  type:
    RunAgentRunAgentRequestToolAgentsRequestRequestBodySettingsTools9Type$inboundSchema,
  requires_approval: z.boolean().default(false),
}).transform((v) => {
  return remap$(v, {
    "requires_approval": "requiresApproval",
  });
});

/** @internal */
export type RetrieveKnowledgeBasesTool$Outbound = {
  type: string;
  requires_approval: boolean;
};

/** @internal */
export const RetrieveKnowledgeBasesTool$outboundSchema: z.ZodType<
  RetrieveKnowledgeBasesTool$Outbound,
  z.ZodTypeDef,
  RetrieveKnowledgeBasesTool
> = z.object({
  type:
    RunAgentRunAgentRequestToolAgentsRequestRequestBodySettingsTools9Type$outboundSchema,
  requiresApproval: z.boolean().default(false),
}).transform((v) => {
  return remap$(v, {
    requiresApproval: "requires_approval",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RetrieveKnowledgeBasesTool$ {
  /** @deprecated use `RetrieveKnowledgeBasesTool$inboundSchema` instead. */
  export const inboundSchema = RetrieveKnowledgeBasesTool$inboundSchema;
  /** @deprecated use `RetrieveKnowledgeBasesTool$outboundSchema` instead. */
  export const outboundSchema = RetrieveKnowledgeBasesTool$outboundSchema;
  /** @deprecated use `RetrieveKnowledgeBasesTool$Outbound` instead. */
  export type Outbound = RetrieveKnowledgeBasesTool$Outbound;
}

export function retrieveKnowledgeBasesToolToJSON(
  retrieveKnowledgeBasesTool: RetrieveKnowledgeBasesTool,
): string {
  return JSON.stringify(
    RetrieveKnowledgeBasesTool$outboundSchema.parse(retrieveKnowledgeBasesTool),
  );
}

export function retrieveKnowledgeBasesToolFromJSON(
  jsonString: string,
): SafeParseResult<RetrieveKnowledgeBasesTool, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => RetrieveKnowledgeBasesTool$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RetrieveKnowledgeBasesTool' from JSON`,
  );
}

/** @internal */
export const RunAgentRunAgentRequestToolAgentsRequestRequestBodySettingsTools8Type$inboundSchema:
  z.ZodNativeEnum<
    typeof RunAgentRunAgentRequestToolAgentsRequestRequestBodySettingsTools8Type
  > = z.nativeEnum(
    RunAgentRunAgentRequestToolAgentsRequestRequestBodySettingsTools8Type,
  );

/** @internal */
export const RunAgentRunAgentRequestToolAgentsRequestRequestBodySettingsTools8Type$outboundSchema:
  z.ZodNativeEnum<
    typeof RunAgentRunAgentRequestToolAgentsRequestRequestBodySettingsTools8Type
  > =
    RunAgentRunAgentRequestToolAgentsRequestRequestBodySettingsTools8Type$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RunAgentRunAgentRequestToolAgentsRequestRequestBodySettingsTools8Type$ {
  /** @deprecated use `RunAgentRunAgentRequestToolAgentsRequestRequestBodySettingsTools8Type$inboundSchema` instead. */
  export const inboundSchema =
    RunAgentRunAgentRequestToolAgentsRequestRequestBodySettingsTools8Type$inboundSchema;
  /** @deprecated use `RunAgentRunAgentRequestToolAgentsRequestRequestBodySettingsTools8Type$outboundSchema` instead. */
  export const outboundSchema =
    RunAgentRunAgentRequestToolAgentsRequestRequestBodySettingsTools8Type$outboundSchema;
}

/** @internal */
export const DeleteMemoryStoreTool$inboundSchema: z.ZodType<
  DeleteMemoryStoreTool,
  z.ZodTypeDef,
  unknown
> = z.object({
  type:
    RunAgentRunAgentRequestToolAgentsRequestRequestBodySettingsTools8Type$inboundSchema,
  requires_approval: z.boolean().default(false),
}).transform((v) => {
  return remap$(v, {
    "requires_approval": "requiresApproval",
  });
});

/** @internal */
export type DeleteMemoryStoreTool$Outbound = {
  type: string;
  requires_approval: boolean;
};

/** @internal */
export const DeleteMemoryStoreTool$outboundSchema: z.ZodType<
  DeleteMemoryStoreTool$Outbound,
  z.ZodTypeDef,
  DeleteMemoryStoreTool
> = z.object({
  type:
    RunAgentRunAgentRequestToolAgentsRequestRequestBodySettingsTools8Type$outboundSchema,
  requiresApproval: z.boolean().default(false),
}).transform((v) => {
  return remap$(v, {
    requiresApproval: "requires_approval",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeleteMemoryStoreTool$ {
  /** @deprecated use `DeleteMemoryStoreTool$inboundSchema` instead. */
  export const inboundSchema = DeleteMemoryStoreTool$inboundSchema;
  /** @deprecated use `DeleteMemoryStoreTool$outboundSchema` instead. */
  export const outboundSchema = DeleteMemoryStoreTool$outboundSchema;
  /** @deprecated use `DeleteMemoryStoreTool$Outbound` instead. */
  export type Outbound = DeleteMemoryStoreTool$Outbound;
}

export function deleteMemoryStoreToolToJSON(
  deleteMemoryStoreTool: DeleteMemoryStoreTool,
): string {
  return JSON.stringify(
    DeleteMemoryStoreTool$outboundSchema.parse(deleteMemoryStoreTool),
  );
}

export function deleteMemoryStoreToolFromJSON(
  jsonString: string,
): SafeParseResult<DeleteMemoryStoreTool, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DeleteMemoryStoreTool$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DeleteMemoryStoreTool' from JSON`,
  );
}

/** @internal */
export const RunAgentRunAgentRequestToolAgentsRequestRequestBodySettingsToolsType$inboundSchema:
  z.ZodNativeEnum<
    typeof RunAgentRunAgentRequestToolAgentsRequestRequestBodySettingsToolsType
  > = z.nativeEnum(
    RunAgentRunAgentRequestToolAgentsRequestRequestBodySettingsToolsType,
  );

/** @internal */
export const RunAgentRunAgentRequestToolAgentsRequestRequestBodySettingsToolsType$outboundSchema:
  z.ZodNativeEnum<
    typeof RunAgentRunAgentRequestToolAgentsRequestRequestBodySettingsToolsType
  > =
    RunAgentRunAgentRequestToolAgentsRequestRequestBodySettingsToolsType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RunAgentRunAgentRequestToolAgentsRequestRequestBodySettingsToolsType$ {
  /** @deprecated use `RunAgentRunAgentRequestToolAgentsRequestRequestBodySettingsToolsType$inboundSchema` instead. */
  export const inboundSchema =
    RunAgentRunAgentRequestToolAgentsRequestRequestBodySettingsToolsType$inboundSchema;
  /** @deprecated use `RunAgentRunAgentRequestToolAgentsRequestRequestBodySettingsToolsType$outboundSchema` instead. */
  export const outboundSchema =
    RunAgentRunAgentRequestToolAgentsRequestRequestBodySettingsToolsType$outboundSchema;
}

/** @internal */
export const RetrieveMemoryStoresTool$inboundSchema: z.ZodType<
  RetrieveMemoryStoresTool,
  z.ZodTypeDef,
  unknown
> = z.object({
  type:
    RunAgentRunAgentRequestToolAgentsRequestRequestBodySettingsToolsType$inboundSchema,
  requires_approval: z.boolean().default(false),
}).transform((v) => {
  return remap$(v, {
    "requires_approval": "requiresApproval",
  });
});

/** @internal */
export type RetrieveMemoryStoresTool$Outbound = {
  type: string;
  requires_approval: boolean;
};

/** @internal */
export const RetrieveMemoryStoresTool$outboundSchema: z.ZodType<
  RetrieveMemoryStoresTool$Outbound,
  z.ZodTypeDef,
  RetrieveMemoryStoresTool
> = z.object({
  type:
    RunAgentRunAgentRequestToolAgentsRequestRequestBodySettingsToolsType$outboundSchema,
  requiresApproval: z.boolean().default(false),
}).transform((v) => {
  return remap$(v, {
    requiresApproval: "requires_approval",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RetrieveMemoryStoresTool$ {
  /** @deprecated use `RetrieveMemoryStoresTool$inboundSchema` instead. */
  export const inboundSchema = RetrieveMemoryStoresTool$inboundSchema;
  /** @deprecated use `RetrieveMemoryStoresTool$outboundSchema` instead. */
  export const outboundSchema = RetrieveMemoryStoresTool$outboundSchema;
  /** @deprecated use `RetrieveMemoryStoresTool$Outbound` instead. */
  export type Outbound = RetrieveMemoryStoresTool$Outbound;
}

export function retrieveMemoryStoresToolToJSON(
  retrieveMemoryStoresTool: RetrieveMemoryStoresTool,
): string {
  return JSON.stringify(
    RetrieveMemoryStoresTool$outboundSchema.parse(retrieveMemoryStoresTool),
  );
}

export function retrieveMemoryStoresToolFromJSON(
  jsonString: string,
): SafeParseResult<RetrieveMemoryStoresTool, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => RetrieveMemoryStoresTool$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RetrieveMemoryStoresTool' from JSON`,
  );
}

/** @internal */
export const RunAgentRunAgentRequestToolAgentsRequestRequestBodySettingsType$inboundSchema:
  z.ZodNativeEnum<
    typeof RunAgentRunAgentRequestToolAgentsRequestRequestBodySettingsType
  > = z.nativeEnum(
    RunAgentRunAgentRequestToolAgentsRequestRequestBodySettingsType,
  );

/** @internal */
export const RunAgentRunAgentRequestToolAgentsRequestRequestBodySettingsType$outboundSchema:
  z.ZodNativeEnum<
    typeof RunAgentRunAgentRequestToolAgentsRequestRequestBodySettingsType
  > =
    RunAgentRunAgentRequestToolAgentsRequestRequestBodySettingsType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RunAgentRunAgentRequestToolAgentsRequestRequestBodySettingsType$ {
  /** @deprecated use `RunAgentRunAgentRequestToolAgentsRequestRequestBodySettingsType$inboundSchema` instead. */
  export const inboundSchema =
    RunAgentRunAgentRequestToolAgentsRequestRequestBodySettingsType$inboundSchema;
  /** @deprecated use `RunAgentRunAgentRequestToolAgentsRequestRequestBodySettingsType$outboundSchema` instead. */
  export const outboundSchema =
    RunAgentRunAgentRequestToolAgentsRequestRequestBodySettingsType$outboundSchema;
}

/** @internal */
export const WriteMemoryStoreTool$inboundSchema: z.ZodType<
  WriteMemoryStoreTool,
  z.ZodTypeDef,
  unknown
> = z.object({
  type:
    RunAgentRunAgentRequestToolAgentsRequestRequestBodySettingsType$inboundSchema,
  requires_approval: z.boolean().default(false),
}).transform((v) => {
  return remap$(v, {
    "requires_approval": "requiresApproval",
  });
});

/** @internal */
export type WriteMemoryStoreTool$Outbound = {
  type: string;
  requires_approval: boolean;
};

/** @internal */
export const WriteMemoryStoreTool$outboundSchema: z.ZodType<
  WriteMemoryStoreTool$Outbound,
  z.ZodTypeDef,
  WriteMemoryStoreTool
> = z.object({
  type:
    RunAgentRunAgentRequestToolAgentsRequestRequestBodySettingsType$outboundSchema,
  requiresApproval: z.boolean().default(false),
}).transform((v) => {
  return remap$(v, {
    requiresApproval: "requires_approval",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace WriteMemoryStoreTool$ {
  /** @deprecated use `WriteMemoryStoreTool$inboundSchema` instead. */
  export const inboundSchema = WriteMemoryStoreTool$inboundSchema;
  /** @deprecated use `WriteMemoryStoreTool$outboundSchema` instead. */
  export const outboundSchema = WriteMemoryStoreTool$outboundSchema;
  /** @deprecated use `WriteMemoryStoreTool$Outbound` instead. */
  export type Outbound = WriteMemoryStoreTool$Outbound;
}

export function writeMemoryStoreToolToJSON(
  writeMemoryStoreTool: WriteMemoryStoreTool,
): string {
  return JSON.stringify(
    WriteMemoryStoreTool$outboundSchema.parse(writeMemoryStoreTool),
  );
}

export function writeMemoryStoreToolFromJSON(
  jsonString: string,
): SafeParseResult<WriteMemoryStoreTool, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => WriteMemoryStoreTool$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'WriteMemoryStoreTool' from JSON`,
  );
}

/** @internal */
export const RunAgentRunAgentRequestToolAgentsRequestRequestBodyType$inboundSchema:
  z.ZodNativeEnum<
    typeof RunAgentRunAgentRequestToolAgentsRequestRequestBodyType
  > = z.nativeEnum(RunAgentRunAgentRequestToolAgentsRequestRequestBodyType);

/** @internal */
export const RunAgentRunAgentRequestToolAgentsRequestRequestBodyType$outboundSchema:
  z.ZodNativeEnum<
    typeof RunAgentRunAgentRequestToolAgentsRequestRequestBodyType
  > = RunAgentRunAgentRequestToolAgentsRequestRequestBodyType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RunAgentRunAgentRequestToolAgentsRequestRequestBodyType$ {
  /** @deprecated use `RunAgentRunAgentRequestToolAgentsRequestRequestBodyType$inboundSchema` instead. */
  export const inboundSchema =
    RunAgentRunAgentRequestToolAgentsRequestRequestBodyType$inboundSchema;
  /** @deprecated use `RunAgentRunAgentRequestToolAgentsRequestRequestBodyType$outboundSchema` instead. */
  export const outboundSchema =
    RunAgentRunAgentRequestToolAgentsRequestRequestBodyType$outboundSchema;
}

/** @internal */
export const QueryMemoryStoreTool$inboundSchema: z.ZodType<
  QueryMemoryStoreTool,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: RunAgentRunAgentRequestToolAgentsRequestRequestBodyType$inboundSchema,
  requires_approval: z.boolean().default(false),
}).transform((v) => {
  return remap$(v, {
    "requires_approval": "requiresApproval",
  });
});

/** @internal */
export type QueryMemoryStoreTool$Outbound = {
  type: string;
  requires_approval: boolean;
};

/** @internal */
export const QueryMemoryStoreTool$outboundSchema: z.ZodType<
  QueryMemoryStoreTool$Outbound,
  z.ZodTypeDef,
  QueryMemoryStoreTool
> = z.object({
  type: RunAgentRunAgentRequestToolAgentsRequestRequestBodyType$outboundSchema,
  requiresApproval: z.boolean().default(false),
}).transform((v) => {
  return remap$(v, {
    requiresApproval: "requires_approval",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace QueryMemoryStoreTool$ {
  /** @deprecated use `QueryMemoryStoreTool$inboundSchema` instead. */
  export const inboundSchema = QueryMemoryStoreTool$inboundSchema;
  /** @deprecated use `QueryMemoryStoreTool$outboundSchema` instead. */
  export const outboundSchema = QueryMemoryStoreTool$outboundSchema;
  /** @deprecated use `QueryMemoryStoreTool$Outbound` instead. */
  export type Outbound = QueryMemoryStoreTool$Outbound;
}

export function queryMemoryStoreToolToJSON(
  queryMemoryStoreTool: QueryMemoryStoreTool,
): string {
  return JSON.stringify(
    QueryMemoryStoreTool$outboundSchema.parse(queryMemoryStoreTool),
  );
}

export function queryMemoryStoreToolFromJSON(
  jsonString: string,
): SafeParseResult<QueryMemoryStoreTool, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => QueryMemoryStoreTool$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'QueryMemoryStoreTool' from JSON`,
  );
}

/** @internal */
export const RunAgentRunAgentRequestToolAgentsRequestType$inboundSchema:
  z.ZodNativeEnum<typeof RunAgentRunAgentRequestToolAgentsRequestType> = z
    .nativeEnum(RunAgentRunAgentRequestToolAgentsRequestType);

/** @internal */
export const RunAgentRunAgentRequestToolAgentsRequestType$outboundSchema:
  z.ZodNativeEnum<typeof RunAgentRunAgentRequestToolAgentsRequestType> =
    RunAgentRunAgentRequestToolAgentsRequestType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RunAgentRunAgentRequestToolAgentsRequestType$ {
  /** @deprecated use `RunAgentRunAgentRequestToolAgentsRequestType$inboundSchema` instead. */
  export const inboundSchema =
    RunAgentRunAgentRequestToolAgentsRequestType$inboundSchema;
  /** @deprecated use `RunAgentRunAgentRequestToolAgentsRequestType$outboundSchema` instead. */
  export const outboundSchema =
    RunAgentRunAgentRequestToolAgentsRequestType$outboundSchema;
}

/** @internal */
export const RetrieveAgentsTool$inboundSchema: z.ZodType<
  RetrieveAgentsTool,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: RunAgentRunAgentRequestToolAgentsRequestType$inboundSchema,
  requires_approval: z.boolean().default(false),
}).transform((v) => {
  return remap$(v, {
    "requires_approval": "requiresApproval",
  });
});

/** @internal */
export type RetrieveAgentsTool$Outbound = {
  type: string;
  requires_approval: boolean;
};

/** @internal */
export const RetrieveAgentsTool$outboundSchema: z.ZodType<
  RetrieveAgentsTool$Outbound,
  z.ZodTypeDef,
  RetrieveAgentsTool
> = z.object({
  type: RunAgentRunAgentRequestToolAgentsRequestType$outboundSchema,
  requiresApproval: z.boolean().default(false),
}).transform((v) => {
  return remap$(v, {
    requiresApproval: "requires_approval",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RetrieveAgentsTool$ {
  /** @deprecated use `RetrieveAgentsTool$inboundSchema` instead. */
  export const inboundSchema = RetrieveAgentsTool$inboundSchema;
  /** @deprecated use `RetrieveAgentsTool$outboundSchema` instead. */
  export const outboundSchema = RetrieveAgentsTool$outboundSchema;
  /** @deprecated use `RetrieveAgentsTool$Outbound` instead. */
  export type Outbound = RetrieveAgentsTool$Outbound;
}

export function retrieveAgentsToolToJSON(
  retrieveAgentsTool: RetrieveAgentsTool,
): string {
  return JSON.stringify(
    RetrieveAgentsTool$outboundSchema.parse(retrieveAgentsTool),
  );
}

export function retrieveAgentsToolFromJSON(
  jsonString: string,
): SafeParseResult<RetrieveAgentsTool, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => RetrieveAgentsTool$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RetrieveAgentsTool' from JSON`,
  );
}

/** @internal */
export const RunAgentRunAgentRequestToolAgentsType$inboundSchema:
  z.ZodNativeEnum<typeof RunAgentRunAgentRequestToolAgentsType> = z.nativeEnum(
    RunAgentRunAgentRequestToolAgentsType,
  );

/** @internal */
export const RunAgentRunAgentRequestToolAgentsType$outboundSchema:
  z.ZodNativeEnum<typeof RunAgentRunAgentRequestToolAgentsType> =
    RunAgentRunAgentRequestToolAgentsType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RunAgentRunAgentRequestToolAgentsType$ {
  /** @deprecated use `RunAgentRunAgentRequestToolAgentsType$inboundSchema` instead. */
  export const inboundSchema =
    RunAgentRunAgentRequestToolAgentsType$inboundSchema;
  /** @deprecated use `RunAgentRunAgentRequestToolAgentsType$outboundSchema` instead. */
  export const outboundSchema =
    RunAgentRunAgentRequestToolAgentsType$outboundSchema;
}

/** @internal */
export const CallSubAgentTool$inboundSchema: z.ZodType<
  CallSubAgentTool,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: RunAgentRunAgentRequestToolAgentsType$inboundSchema,
  requires_approval: z.boolean().default(false),
}).transform((v) => {
  return remap$(v, {
    "requires_approval": "requiresApproval",
  });
});

/** @internal */
export type CallSubAgentTool$Outbound = {
  type: string;
  requires_approval: boolean;
};

/** @internal */
export const CallSubAgentTool$outboundSchema: z.ZodType<
  CallSubAgentTool$Outbound,
  z.ZodTypeDef,
  CallSubAgentTool
> = z.object({
  type: RunAgentRunAgentRequestToolAgentsType$outboundSchema,
  requiresApproval: z.boolean().default(false),
}).transform((v) => {
  return remap$(v, {
    requiresApproval: "requires_approval",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CallSubAgentTool$ {
  /** @deprecated use `CallSubAgentTool$inboundSchema` instead. */
  export const inboundSchema = CallSubAgentTool$inboundSchema;
  /** @deprecated use `CallSubAgentTool$outboundSchema` instead. */
  export const outboundSchema = CallSubAgentTool$outboundSchema;
  /** @deprecated use `CallSubAgentTool$Outbound` instead. */
  export type Outbound = CallSubAgentTool$Outbound;
}

export function callSubAgentToolToJSON(
  callSubAgentTool: CallSubAgentTool,
): string {
  return JSON.stringify(
    CallSubAgentTool$outboundSchema.parse(callSubAgentTool),
  );
}

export function callSubAgentToolFromJSON(
  jsonString: string,
): SafeParseResult<CallSubAgentTool, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CallSubAgentTool$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CallSubAgentTool' from JSON`,
  );
}

/** @internal */
export const RunAgentRunAgentRequestToolType$inboundSchema: z.ZodNativeEnum<
  typeof RunAgentRunAgentRequestToolType
> = z.nativeEnum(RunAgentRunAgentRequestToolType);

/** @internal */
export const RunAgentRunAgentRequestToolType$outboundSchema: z.ZodNativeEnum<
  typeof RunAgentRunAgentRequestToolType
> = RunAgentRunAgentRequestToolType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RunAgentRunAgentRequestToolType$ {
  /** @deprecated use `RunAgentRunAgentRequestToolType$inboundSchema` instead. */
  export const inboundSchema = RunAgentRunAgentRequestToolType$inboundSchema;
  /** @deprecated use `RunAgentRunAgentRequestToolType$outboundSchema` instead. */
  export const outboundSchema = RunAgentRunAgentRequestToolType$outboundSchema;
}

/** @internal */
export const WebScraperTool$inboundSchema: z.ZodType<
  WebScraperTool,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: RunAgentRunAgentRequestToolType$inboundSchema,
  requires_approval: z.boolean().default(false),
}).transform((v) => {
  return remap$(v, {
    "requires_approval": "requiresApproval",
  });
});

/** @internal */
export type WebScraperTool$Outbound = {
  type: string;
  requires_approval: boolean;
};

/** @internal */
export const WebScraperTool$outboundSchema: z.ZodType<
  WebScraperTool$Outbound,
  z.ZodTypeDef,
  WebScraperTool
> = z.object({
  type: RunAgentRunAgentRequestToolType$outboundSchema,
  requiresApproval: z.boolean().default(false),
}).transform((v) => {
  return remap$(v, {
    requiresApproval: "requires_approval",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace WebScraperTool$ {
  /** @deprecated use `WebScraperTool$inboundSchema` instead. */
  export const inboundSchema = WebScraperTool$inboundSchema;
  /** @deprecated use `WebScraperTool$outboundSchema` instead. */
  export const outboundSchema = WebScraperTool$outboundSchema;
  /** @deprecated use `WebScraperTool$Outbound` instead. */
  export type Outbound = WebScraperTool$Outbound;
}

export function webScraperToolToJSON(webScraperTool: WebScraperTool): string {
  return JSON.stringify(WebScraperTool$outboundSchema.parse(webScraperTool));
}

export function webScraperToolFromJSON(
  jsonString: string,
): SafeParseResult<WebScraperTool, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => WebScraperTool$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'WebScraperTool' from JSON`,
  );
}

/** @internal */
export const RunAgentRequestToolType$inboundSchema: z.ZodNativeEnum<
  typeof RunAgentRequestToolType
> = z.nativeEnum(RunAgentRequestToolType);

/** @internal */
export const RunAgentRequestToolType$outboundSchema: z.ZodNativeEnum<
  typeof RunAgentRequestToolType
> = RunAgentRequestToolType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RunAgentRequestToolType$ {
  /** @deprecated use `RunAgentRequestToolType$inboundSchema` instead. */
  export const inboundSchema = RunAgentRequestToolType$inboundSchema;
  /** @deprecated use `RunAgentRequestToolType$outboundSchema` instead. */
  export const outboundSchema = RunAgentRequestToolType$outboundSchema;
}

/** @internal */
export const GoogleSearchTool$inboundSchema: z.ZodType<
  GoogleSearchTool,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: RunAgentRequestToolType$inboundSchema,
  requires_approval: z.boolean().default(false),
}).transform((v) => {
  return remap$(v, {
    "requires_approval": "requiresApproval",
  });
});

/** @internal */
export type GoogleSearchTool$Outbound = {
  type: string;
  requires_approval: boolean;
};

/** @internal */
export const GoogleSearchTool$outboundSchema: z.ZodType<
  GoogleSearchTool$Outbound,
  z.ZodTypeDef,
  GoogleSearchTool
> = z.object({
  type: RunAgentRequestToolType$outboundSchema,
  requiresApproval: z.boolean().default(false),
}).transform((v) => {
  return remap$(v, {
    requiresApproval: "requires_approval",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GoogleSearchTool$ {
  /** @deprecated use `GoogleSearchTool$inboundSchema` instead. */
  export const inboundSchema = GoogleSearchTool$inboundSchema;
  /** @deprecated use `GoogleSearchTool$outboundSchema` instead. */
  export const outboundSchema = GoogleSearchTool$outboundSchema;
  /** @deprecated use `GoogleSearchTool$Outbound` instead. */
  export type Outbound = GoogleSearchTool$Outbound;
}

export function googleSearchToolToJSON(
  googleSearchTool: GoogleSearchTool,
): string {
  return JSON.stringify(
    GoogleSearchTool$outboundSchema.parse(googleSearchTool),
  );
}

export function googleSearchToolFromJSON(
  jsonString: string,
): SafeParseResult<GoogleSearchTool, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GoogleSearchTool$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GoogleSearchTool' from JSON`,
  );
}

/** @internal */
export const RunAgentRequestTool$inboundSchema: z.ZodType<
  RunAgentRequestTool,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => HTTPTool$inboundSchema),
  z.lazy(() => CodeExecutionTool$inboundSchema),
  z.lazy(() => FunctionTool$inboundSchema),
  z.lazy(() => GoogleSearchTool$inboundSchema),
  z.lazy(() => WebScraperTool$inboundSchema),
  z.lazy(() => CallSubAgentTool$inboundSchema),
  z.lazy(() => RetrieveAgentsTool$inboundSchema),
  z.lazy(() => QueryMemoryStoreTool$inboundSchema),
  z.lazy(() => WriteMemoryStoreTool$inboundSchema),
  z.lazy(() => RetrieveMemoryStoresTool$inboundSchema),
  z.lazy(() => DeleteMemoryStoreTool$inboundSchema),
  z.lazy(() => RetrieveKnowledgeBasesTool$inboundSchema),
  z.lazy(() => QueryKnowledgeBaseTool$inboundSchema),
  z.lazy(() => CurrentDateTool$inboundSchema),
]);

/** @internal */
export type RunAgentRequestTool$Outbound =
  | HTTPTool$Outbound
  | CodeExecutionTool$Outbound
  | FunctionTool$Outbound
  | GoogleSearchTool$Outbound
  | WebScraperTool$Outbound
  | CallSubAgentTool$Outbound
  | RetrieveAgentsTool$Outbound
  | QueryMemoryStoreTool$Outbound
  | WriteMemoryStoreTool$Outbound
  | RetrieveMemoryStoresTool$Outbound
  | DeleteMemoryStoreTool$Outbound
  | RetrieveKnowledgeBasesTool$Outbound
  | QueryKnowledgeBaseTool$Outbound
  | CurrentDateTool$Outbound;

/** @internal */
export const RunAgentRequestTool$outboundSchema: z.ZodType<
  RunAgentRequestTool$Outbound,
  z.ZodTypeDef,
  RunAgentRequestTool
> = z.union([
  z.lazy(() => HTTPTool$outboundSchema),
  z.lazy(() => CodeExecutionTool$outboundSchema),
  z.lazy(() => FunctionTool$outboundSchema),
  z.lazy(() => GoogleSearchTool$outboundSchema),
  z.lazy(() => WebScraperTool$outboundSchema),
  z.lazy(() => CallSubAgentTool$outboundSchema),
  z.lazy(() => RetrieveAgentsTool$outboundSchema),
  z.lazy(() => QueryMemoryStoreTool$outboundSchema),
  z.lazy(() => WriteMemoryStoreTool$outboundSchema),
  z.lazy(() => RetrieveMemoryStoresTool$outboundSchema),
  z.lazy(() => DeleteMemoryStoreTool$outboundSchema),
  z.lazy(() => RetrieveKnowledgeBasesTool$outboundSchema),
  z.lazy(() => QueryKnowledgeBaseTool$outboundSchema),
  z.lazy(() => CurrentDateTool$outboundSchema),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RunAgentRequestTool$ {
  /** @deprecated use `RunAgentRequestTool$inboundSchema` instead. */
  export const inboundSchema = RunAgentRequestTool$inboundSchema;
  /** @deprecated use `RunAgentRequestTool$outboundSchema` instead. */
  export const outboundSchema = RunAgentRequestTool$outboundSchema;
  /** @deprecated use `RunAgentRequestTool$Outbound` instead. */
  export type Outbound = RunAgentRequestTool$Outbound;
}

export function runAgentRequestToolToJSON(
  runAgentRequestTool: RunAgentRequestTool,
): string {
  return JSON.stringify(
    RunAgentRequestTool$outboundSchema.parse(runAgentRequestTool),
  );
}

export function runAgentRequestToolFromJSON(
  jsonString: string,
): SafeParseResult<RunAgentRequestTool, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => RunAgentRequestTool$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RunAgentRequestTool' from JSON`,
  );
}

/** @internal */
export const ToolApprovalRequired$inboundSchema: z.ZodNativeEnum<
  typeof ToolApprovalRequired
> = z.nativeEnum(ToolApprovalRequired);

/** @internal */
export const ToolApprovalRequired$outboundSchema: z.ZodNativeEnum<
  typeof ToolApprovalRequired
> = ToolApprovalRequired$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ToolApprovalRequired$ {
  /** @deprecated use `ToolApprovalRequired$inboundSchema` instead. */
  export const inboundSchema = ToolApprovalRequired$inboundSchema;
  /** @deprecated use `ToolApprovalRequired$outboundSchema` instead. */
  export const outboundSchema = ToolApprovalRequired$outboundSchema;
}

/** @internal */
export const Settings$inboundSchema: z.ZodType<
  Settings,
  z.ZodTypeDef,
  unknown
> = z.object({
  tools: z.array(
    z.union([
      z.lazy(() => HTTPTool$inboundSchema),
      z.lazy(() => CodeExecutionTool$inboundSchema),
      z.lazy(() => FunctionTool$inboundSchema),
      z.lazy(() => GoogleSearchTool$inboundSchema),
      z.lazy(() => WebScraperTool$inboundSchema),
      z.lazy(() => CallSubAgentTool$inboundSchema),
      z.lazy(() => RetrieveAgentsTool$inboundSchema),
      z.lazy(() => QueryMemoryStoreTool$inboundSchema),
      z.lazy(() => WriteMemoryStoreTool$inboundSchema),
      z.lazy(() => RetrieveMemoryStoresTool$inboundSchema),
      z.lazy(() => DeleteMemoryStoreTool$inboundSchema),
      z.lazy(() => RetrieveKnowledgeBasesTool$inboundSchema),
      z.lazy(() => QueryKnowledgeBaseTool$inboundSchema),
      z.lazy(() => CurrentDateTool$inboundSchema),
    ]),
  ),
  tool_approval_required: ToolApprovalRequired$inboundSchema.default("none"),
  max_iterations: z.number().int().default(15),
  max_execution_time: z.number().int().default(300),
}).transform((v) => {
  return remap$(v, {
    "tool_approval_required": "toolApprovalRequired",
    "max_iterations": "maxIterations",
    "max_execution_time": "maxExecutionTime",
  });
});

/** @internal */
export type Settings$Outbound = {
  tools: Array<
    | HTTPTool$Outbound
    | CodeExecutionTool$Outbound
    | FunctionTool$Outbound
    | GoogleSearchTool$Outbound
    | WebScraperTool$Outbound
    | CallSubAgentTool$Outbound
    | RetrieveAgentsTool$Outbound
    | QueryMemoryStoreTool$Outbound
    | WriteMemoryStoreTool$Outbound
    | RetrieveMemoryStoresTool$Outbound
    | DeleteMemoryStoreTool$Outbound
    | RetrieveKnowledgeBasesTool$Outbound
    | QueryKnowledgeBaseTool$Outbound
    | CurrentDateTool$Outbound
  >;
  tool_approval_required: string;
  max_iterations: number;
  max_execution_time: number;
};

/** @internal */
export const Settings$outboundSchema: z.ZodType<
  Settings$Outbound,
  z.ZodTypeDef,
  Settings
> = z.object({
  tools: z.array(
    z.union([
      z.lazy(() => HTTPTool$outboundSchema),
      z.lazy(() => CodeExecutionTool$outboundSchema),
      z.lazy(() => FunctionTool$outboundSchema),
      z.lazy(() => GoogleSearchTool$outboundSchema),
      z.lazy(() => WebScraperTool$outboundSchema),
      z.lazy(() => CallSubAgentTool$outboundSchema),
      z.lazy(() => RetrieveAgentsTool$outboundSchema),
      z.lazy(() => QueryMemoryStoreTool$outboundSchema),
      z.lazy(() => WriteMemoryStoreTool$outboundSchema),
      z.lazy(() => RetrieveMemoryStoresTool$outboundSchema),
      z.lazy(() => DeleteMemoryStoreTool$outboundSchema),
      z.lazy(() => RetrieveKnowledgeBasesTool$outboundSchema),
      z.lazy(() => QueryKnowledgeBaseTool$outboundSchema),
      z.lazy(() => CurrentDateTool$outboundSchema),
    ]),
  ),
  toolApprovalRequired: ToolApprovalRequired$outboundSchema.default("none"),
  maxIterations: z.number().int().default(15),
  maxExecutionTime: z.number().int().default(300),
}).transform((v) => {
  return remap$(v, {
    toolApprovalRequired: "tool_approval_required",
    maxIterations: "max_iterations",
    maxExecutionTime: "max_execution_time",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Settings$ {
  /** @deprecated use `Settings$inboundSchema` instead. */
  export const inboundSchema = Settings$inboundSchema;
  /** @deprecated use `Settings$outboundSchema` instead. */
  export const outboundSchema = Settings$outboundSchema;
  /** @deprecated use `Settings$Outbound` instead. */
  export type Outbound = Settings$Outbound;
}

export function settingsToJSON(settings: Settings): string {
  return JSON.stringify(Settings$outboundSchema.parse(settings));
}

export function settingsFromJSON(
  jsonString: string,
): SafeParseResult<Settings, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Settings$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Settings' from JSON`,
  );
}

/** @internal */
export const RunAgentRequestBody$inboundSchema: z.ZodType<
  RunAgentRequestBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  key: z.string(),
  taskId: z.string().optional(),
  model: z.string(),
  fallback_models: z.array(z.string()).optional(),
  role: z.string(),
  instructions: z.string(),
  message: z.lazy(() => Message$inboundSchema),
  variables: z.record(z.any()).optional(),
  contact: z.lazy(() => Contact$inboundSchema).optional(),
  thread: z.lazy(() => RunAgentThread$inboundSchema).optional(),
  memory: z.lazy(() => Memory$inboundSchema).optional(),
  path: z.string(),
  description: z.string().optional(),
  system_prompt: z.string().optional(),
  memory_stores: z.array(z.string()).optional(),
  knowledge_bases: z.array(z.lazy(() => KnowledgeBases$inboundSchema))
    .optional(),
  team_of_agents: z.array(z.lazy(() => TeamOfAgents$inboundSchema)).optional(),
  settings: z.lazy(() => Settings$inboundSchema),
  metadata: z.record(z.any()).optional(),
}).transform((v) => {
  return remap$(v, {
    "fallback_models": "fallbackModels",
    "system_prompt": "systemPrompt",
    "memory_stores": "memoryStores",
    "knowledge_bases": "knowledgeBases",
    "team_of_agents": "teamOfAgents",
  });
});

/** @internal */
export type RunAgentRequestBody$Outbound = {
  key: string;
  taskId?: string | undefined;
  model: string;
  fallback_models?: Array<string> | undefined;
  role: string;
  instructions: string;
  message: Message$Outbound;
  variables?: { [k: string]: any } | undefined;
  contact?: Contact$Outbound | undefined;
  thread?: RunAgentThread$Outbound | undefined;
  memory?: Memory$Outbound | undefined;
  path: string;
  description?: string | undefined;
  system_prompt?: string | undefined;
  memory_stores?: Array<string> | undefined;
  knowledge_bases?: Array<KnowledgeBases$Outbound> | undefined;
  team_of_agents?: Array<TeamOfAgents$Outbound> | undefined;
  settings: Settings$Outbound;
  metadata?: { [k: string]: any } | undefined;
};

/** @internal */
export const RunAgentRequestBody$outboundSchema: z.ZodType<
  RunAgentRequestBody$Outbound,
  z.ZodTypeDef,
  RunAgentRequestBody
> = z.object({
  key: z.string(),
  taskId: z.string().optional(),
  model: z.string(),
  fallbackModels: z.array(z.string()).optional(),
  role: z.string(),
  instructions: z.string(),
  message: z.lazy(() => Message$outboundSchema),
  variables: z.record(z.any()).optional(),
  contact: z.lazy(() => Contact$outboundSchema).optional(),
  thread: z.lazy(() => RunAgentThread$outboundSchema).optional(),
  memory: z.lazy(() => Memory$outboundSchema).optional(),
  path: z.string(),
  description: z.string().optional(),
  systemPrompt: z.string().optional(),
  memoryStores: z.array(z.string()).optional(),
  knowledgeBases: z.array(z.lazy(() => KnowledgeBases$outboundSchema))
    .optional(),
  teamOfAgents: z.array(z.lazy(() => TeamOfAgents$outboundSchema)).optional(),
  settings: z.lazy(() => Settings$outboundSchema),
  metadata: z.record(z.any()).optional(),
}).transform((v) => {
  return remap$(v, {
    fallbackModels: "fallback_models",
    systemPrompt: "system_prompt",
    memoryStores: "memory_stores",
    knowledgeBases: "knowledge_bases",
    teamOfAgents: "team_of_agents",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RunAgentRequestBody$ {
  /** @deprecated use `RunAgentRequestBody$inboundSchema` instead. */
  export const inboundSchema = RunAgentRequestBody$inboundSchema;
  /** @deprecated use `RunAgentRequestBody$outboundSchema` instead. */
  export const outboundSchema = RunAgentRequestBody$outboundSchema;
  /** @deprecated use `RunAgentRequestBody$Outbound` instead. */
  export type Outbound = RunAgentRequestBody$Outbound;
}

export function runAgentRequestBodyToJSON(
  runAgentRequestBody: RunAgentRequestBody,
): string {
  return JSON.stringify(
    RunAgentRequestBody$outboundSchema.parse(runAgentRequestBody),
  );
}

export function runAgentRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<RunAgentRequestBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => RunAgentRequestBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RunAgentRequestBody' from JSON`,
  );
}

/** @internal */
export const RunAgentKind$inboundSchema: z.ZodNativeEnum<typeof RunAgentKind> =
  z.nativeEnum(RunAgentKind);

/** @internal */
export const RunAgentKind$outboundSchema: z.ZodNativeEnum<typeof RunAgentKind> =
  RunAgentKind$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RunAgentKind$ {
  /** @deprecated use `RunAgentKind$inboundSchema` instead. */
  export const inboundSchema = RunAgentKind$inboundSchema;
  /** @deprecated use `RunAgentKind$outboundSchema` instead. */
  export const outboundSchema = RunAgentKind$outboundSchema;
}

/** @internal */
export const RunAgentState$inboundSchema: z.ZodNativeEnum<
  typeof RunAgentState
> = z.nativeEnum(RunAgentState);

/** @internal */
export const RunAgentState$outboundSchema: z.ZodNativeEnum<
  typeof RunAgentState
> = RunAgentState$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RunAgentState$ {
  /** @deprecated use `RunAgentState$inboundSchema` instead. */
  export const inboundSchema = RunAgentState$inboundSchema;
  /** @deprecated use `RunAgentState$outboundSchema` instead. */
  export const outboundSchema = RunAgentState$outboundSchema;
}

/** @internal */
export const RunAgentAgentsKind$inboundSchema: z.ZodNativeEnum<
  typeof RunAgentAgentsKind
> = z.nativeEnum(RunAgentAgentsKind);

/** @internal */
export const RunAgentAgentsKind$outboundSchema: z.ZodNativeEnum<
  typeof RunAgentAgentsKind
> = RunAgentAgentsKind$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RunAgentAgentsKind$ {
  /** @deprecated use `RunAgentAgentsKind$inboundSchema` instead. */
  export const inboundSchema = RunAgentAgentsKind$inboundSchema;
  /** @deprecated use `RunAgentAgentsKind$outboundSchema` instead. */
  export const outboundSchema = RunAgentAgentsKind$outboundSchema;
}

/** @internal */
export const RunAgentAgentsRole$inboundSchema: z.ZodNativeEnum<
  typeof RunAgentAgentsRole
> = z.nativeEnum(RunAgentAgentsRole);

/** @internal */
export const RunAgentAgentsRole$outboundSchema: z.ZodNativeEnum<
  typeof RunAgentAgentsRole
> = RunAgentAgentsRole$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RunAgentAgentsRole$ {
  /** @deprecated use `RunAgentAgentsRole$inboundSchema` instead. */
  export const inboundSchema = RunAgentAgentsRole$inboundSchema;
  /** @deprecated use `RunAgentAgentsRole$outboundSchema` instead. */
  export const outboundSchema = RunAgentAgentsRole$outboundSchema;
}

/** @internal */
export const RunAgentMessage$inboundSchema: z.ZodType<
  RunAgentMessage,
  z.ZodTypeDef,
  unknown
> = z.object({
  kind: RunAgentAgentsKind$inboundSchema,
  messageId: z.string(),
  role: RunAgentAgentsRole$inboundSchema,
  parts: z.array(z.any()),
});

/** @internal */
export type RunAgentMessage$Outbound = {
  kind: string;
  messageId: string;
  role: string;
  parts: Array<any>;
};

/** @internal */
export const RunAgentMessage$outboundSchema: z.ZodType<
  RunAgentMessage$Outbound,
  z.ZodTypeDef,
  RunAgentMessage
> = z.object({
  kind: RunAgentAgentsKind$outboundSchema,
  messageId: z.string(),
  role: RunAgentAgentsRole$outboundSchema,
  parts: z.array(z.any()),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RunAgentMessage$ {
  /** @deprecated use `RunAgentMessage$inboundSchema` instead. */
  export const inboundSchema = RunAgentMessage$inboundSchema;
  /** @deprecated use `RunAgentMessage$outboundSchema` instead. */
  export const outboundSchema = RunAgentMessage$outboundSchema;
  /** @deprecated use `RunAgentMessage$Outbound` instead. */
  export type Outbound = RunAgentMessage$Outbound;
}

export function runAgentMessageToJSON(
  runAgentMessage: RunAgentMessage,
): string {
  return JSON.stringify(RunAgentMessage$outboundSchema.parse(runAgentMessage));
}

export function runAgentMessageFromJSON(
  jsonString: string,
): SafeParseResult<RunAgentMessage, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => RunAgentMessage$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RunAgentMessage' from JSON`,
  );
}

/** @internal */
export const RunAgentStatus$inboundSchema: z.ZodType<
  RunAgentStatus,
  z.ZodTypeDef,
  unknown
> = z.object({
  state: RunAgentState$inboundSchema,
  timestamp: z.string().optional(),
  message: z.lazy(() => RunAgentMessage$inboundSchema).optional(),
});

/** @internal */
export type RunAgentStatus$Outbound = {
  state: string;
  timestamp?: string | undefined;
  message?: RunAgentMessage$Outbound | undefined;
};

/** @internal */
export const RunAgentStatus$outboundSchema: z.ZodType<
  RunAgentStatus$Outbound,
  z.ZodTypeDef,
  RunAgentStatus
> = z.object({
  state: RunAgentState$outboundSchema,
  timestamp: z.string().optional(),
  message: z.lazy(() => RunAgentMessage$outboundSchema).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RunAgentStatus$ {
  /** @deprecated use `RunAgentStatus$inboundSchema` instead. */
  export const inboundSchema = RunAgentStatus$inboundSchema;
  /** @deprecated use `RunAgentStatus$outboundSchema` instead. */
  export const outboundSchema = RunAgentStatus$outboundSchema;
  /** @deprecated use `RunAgentStatus$Outbound` instead. */
  export type Outbound = RunAgentStatus$Outbound;
}

export function runAgentStatusToJSON(runAgentStatus: RunAgentStatus): string {
  return JSON.stringify(RunAgentStatus$outboundSchema.parse(runAgentStatus));
}

export function runAgentStatusFromJSON(
  jsonString: string,
): SafeParseResult<RunAgentStatus, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => RunAgentStatus$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RunAgentStatus' from JSON`,
  );
}

/** @internal */
export const RunAgentResponseBody$inboundSchema: z.ZodType<
  RunAgentResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  contextId: z.string(),
  kind: RunAgentKind$inboundSchema,
  status: z.lazy(() => RunAgentStatus$inboundSchema),
  metadata: z.record(z.any()).optional(),
});

/** @internal */
export type RunAgentResponseBody$Outbound = {
  id: string;
  contextId: string;
  kind: string;
  status: RunAgentStatus$Outbound;
  metadata?: { [k: string]: any } | undefined;
};

/** @internal */
export const RunAgentResponseBody$outboundSchema: z.ZodType<
  RunAgentResponseBody$Outbound,
  z.ZodTypeDef,
  RunAgentResponseBody
> = z.object({
  id: z.string(),
  contextId: z.string(),
  kind: RunAgentKind$outboundSchema,
  status: z.lazy(() => RunAgentStatus$outboundSchema),
  metadata: z.record(z.any()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RunAgentResponseBody$ {
  /** @deprecated use `RunAgentResponseBody$inboundSchema` instead. */
  export const inboundSchema = RunAgentResponseBody$inboundSchema;
  /** @deprecated use `RunAgentResponseBody$outboundSchema` instead. */
  export const outboundSchema = RunAgentResponseBody$outboundSchema;
  /** @deprecated use `RunAgentResponseBody$Outbound` instead. */
  export type Outbound = RunAgentResponseBody$Outbound;
}

export function runAgentResponseBodyToJSON(
  runAgentResponseBody: RunAgentResponseBody,
): string {
  return JSON.stringify(
    RunAgentResponseBody$outboundSchema.parse(runAgentResponseBody),
  );
}

export function runAgentResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<RunAgentResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => RunAgentResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RunAgentResponseBody' from JSON`,
  );
}
