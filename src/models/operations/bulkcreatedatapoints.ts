/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * The role of the prompt message
 */
export const BulkCreateDatapointsRole = {
  System: "system",
  Assistant: "assistant",
  User: "user",
  Exception: "exception",
  Tool: "tool",
  Prompt: "prompt",
  Correction: "correction",
  ExpectedOutput: "expected_output",
} as const;
/**
 * The role of the prompt message
 */
export type BulkCreateDatapointsRole = ClosedEnum<
  typeof BulkCreateDatapointsRole
>;

export const BulkCreateDatapoints2DatasetsType = {
  ImageUrl: "image_url",
} as const;
export type BulkCreateDatapoints2DatasetsType = ClosedEnum<
  typeof BulkCreateDatapoints2DatasetsType
>;

export type BulkCreateDatapoints2ImageUrl = {
  /**
   * Either a URL of the image or the base64 encoded data URI.
   */
  url: string;
  /**
   * Specifies the detail level of the image. Currently only supported with OpenAI models
   */
  detail?: string | undefined;
};

/**
 * The image part of the prompt message. Only supported with vision models.
 */
export type BulkCreateDatapoints22 = {
  type: BulkCreateDatapoints2DatasetsType;
  imageUrl: BulkCreateDatapoints2ImageUrl;
};

export const BulkCreateDatapoints2Type = {
  Text: "text",
} as const;
export type BulkCreateDatapoints2Type = ClosedEnum<
  typeof BulkCreateDatapoints2Type
>;

/**
 * Text content part of a prompt message
 */
export type BulkCreateDatapoints21 = {
  type: BulkCreateDatapoints2Type;
  text: string;
};

export type BulkCreateDatapointsContent2 =
  | BulkCreateDatapoints21
  | BulkCreateDatapoints22;

/**
 * The contents of the user message. Either the text content of the message or an array of content parts with a defined type, each can be of type `text` or `image_url` when passing in images. You can pass multiple images by adding multiple `image_url` content parts.
 */
export type BulkCreateDatapointsContent =
  | string
  | Array<BulkCreateDatapoints21 | BulkCreateDatapoints22>;

export const BulkCreateDatapointsType = {
  Function: "function",
} as const;
export type BulkCreateDatapointsType = ClosedEnum<
  typeof BulkCreateDatapointsType
>;

export type BulkCreateDatapointsFunction = {
  name: string;
  /**
   * JSON string arguments for the functions
   */
  arguments: string;
};

export type BulkCreateDatapointsToolCalls = {
  id?: string | undefined;
  index?: number | undefined;
  type: BulkCreateDatapointsType;
  function: BulkCreateDatapointsFunction;
};

export type BulkCreateDatapointsMessages = {
  /**
   * The role of the prompt message
   */
  role: BulkCreateDatapointsRole;
  /**
   * The contents of the user message. Either the text content of the message or an array of content parts with a defined type, each can be of type `text` or `image_url` when passing in images. You can pass multiple images by adding multiple `image_url` content parts.
   */
  content: string | Array<BulkCreateDatapoints21 | BulkCreateDatapoints22>;
  toolCalls?: Array<BulkCreateDatapointsToolCalls> | undefined;
};

export type Items = {
  /**
   * The inputs of the dataset. Key value pairs where the key is the input name and the value is the input value. Nested objects are not supported.
   */
  inputs?: { [k: string]: any } | undefined;
  /**
   * The prompt template messages
   */
  messages?: Array<BulkCreateDatapointsMessages> | undefined;
  expectedOutput?: string | undefined;
};

export type BulkCreateDatapointsRequestBody = {
  items: Array<Items>;
};

export type BulkCreateDatapointsRequest = {
  datasetId: string;
  requestBody?: BulkCreateDatapointsRequestBody | undefined;
};

/**
 * The role of the prompt message
 */
export const BulkCreateDatapointsDatasetsRole = {
  System: "system",
  Assistant: "assistant",
  User: "user",
  Exception: "exception",
  Tool: "tool",
  Prompt: "prompt",
  Correction: "correction",
  ExpectedOutput: "expected_output",
} as const;
/**
 * The role of the prompt message
 */
export type BulkCreateDatapointsDatasetsRole = ClosedEnum<
  typeof BulkCreateDatapointsDatasetsRole
>;

export const BulkCreateDatapoints2DatasetsResponse200Type = {
  ImageUrl: "image_url",
} as const;
export type BulkCreateDatapoints2DatasetsResponse200Type = ClosedEnum<
  typeof BulkCreateDatapoints2DatasetsResponse200Type
>;

export type BulkCreateDatapoints2DatasetsImageUrl = {
  /**
   * The orq.ai id of the image
   */
  id?: string | undefined;
  /**
   * Either a URL of the image or the base64 encoded data URI.
   */
  url: string;
  /**
   * Specifies the detail level of the image. Currently only supported with OpenAI models
   */
  detail?: string | undefined;
};

/**
 * The image part of the prompt message. Only supported with vision models.
 */
export type BulkCreateDatapoints2Datasets2 = {
  type: BulkCreateDatapoints2DatasetsResponse200Type;
  imageUrl: BulkCreateDatapoints2DatasetsImageUrl;
};

export const BulkCreateDatapoints2DatasetsResponseType = {
  Text: "text",
} as const;
export type BulkCreateDatapoints2DatasetsResponseType = ClosedEnum<
  typeof BulkCreateDatapoints2DatasetsResponseType
>;

/**
 * Text content part of a prompt message
 */
export type BulkCreateDatapoints2Datasets1 = {
  type: BulkCreateDatapoints2DatasetsResponseType;
  text: string;
};

export type BulkCreateDatapointsContentDatasets2 =
  | BulkCreateDatapoints2Datasets1
  | BulkCreateDatapoints2Datasets2;

/**
 * The contents of the user message. Either the text content of the message or an array of content parts with a defined type, each can be of type `text` or `image_url` when passing in images. You can pass multiple images by adding multiple `image_url` content parts.
 */
export type BulkCreateDatapointsDatasetsContent =
  | string
  | Array<BulkCreateDatapoints2Datasets1 | BulkCreateDatapoints2Datasets2>;

export const BulkCreateDatapointsDatasetsType = {
  Function: "function",
} as const;
export type BulkCreateDatapointsDatasetsType = ClosedEnum<
  typeof BulkCreateDatapointsDatasetsType
>;

export type BulkCreateDatapointsDatasetsFunction = {
  name: string;
  /**
   * JSON string arguments for the functions
   */
  arguments: string;
};

export type BulkCreateDatapointsDatasetsToolCalls = {
  id?: string | undefined;
  index?: number | undefined;
  type: BulkCreateDatapointsDatasetsType;
  function: BulkCreateDatapointsDatasetsFunction;
};

export type BulkCreateDatapointsDatasetsMessages = {
  /**
   * The role of the prompt message
   */
  role: BulkCreateDatapointsDatasetsRole;
  /**
   * The contents of the user message. Either the text content of the message or an array of content parts with a defined type, each can be of type `text` or `image_url` when passing in images. You can pass multiple images by adding multiple `image_url` content parts.
   */
  content:
    | string
    | Array<BulkCreateDatapoints2Datasets1 | BulkCreateDatapoints2Datasets2>;
  toolCalls?: Array<BulkCreateDatapointsDatasetsToolCalls> | undefined;
};

export type ResponseBody = {
  /**
   * The unique identifier of the dataset item
   */
  id: string;
  /**
   * The unique identifier of the workspace it belongs to
   */
  workspaceId: string;
  /**
   * The inputs of the dataset. Key value pairs where the key is the input name and the value is the input value. Nested objects are not supported.
   */
  inputs?: { [k: string]: any } | undefined;
  /**
   * The prompt template messages
   */
  messages?: Array<BulkCreateDatapointsDatasetsMessages> | undefined;
  expectedOutput?: string | undefined;
  /**
   * The unique identifier of the dataset
   */
  datasetId: string;
  /**
   * The unique identifier of the user who created the dataset
   */
  createdById?: string | undefined;
  /**
   * The unique identifier of the user who last updated the dataset
   */
  updatedById?: string | undefined;
  /**
   * The date and time the resource was created
   */
  created?: Date | undefined;
  /**
   * The date and time the resource was last updated
   */
  updated?: Date | undefined;
};

/** @internal */
export const BulkCreateDatapointsRole$inboundSchema: z.ZodNativeEnum<
  typeof BulkCreateDatapointsRole
> = z.nativeEnum(BulkCreateDatapointsRole);

/** @internal */
export const BulkCreateDatapointsRole$outboundSchema: z.ZodNativeEnum<
  typeof BulkCreateDatapointsRole
> = BulkCreateDatapointsRole$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace BulkCreateDatapointsRole$ {
  /** @deprecated use `BulkCreateDatapointsRole$inboundSchema` instead. */
  export const inboundSchema = BulkCreateDatapointsRole$inboundSchema;
  /** @deprecated use `BulkCreateDatapointsRole$outboundSchema` instead. */
  export const outboundSchema = BulkCreateDatapointsRole$outboundSchema;
}

/** @internal */
export const BulkCreateDatapoints2DatasetsType$inboundSchema: z.ZodNativeEnum<
  typeof BulkCreateDatapoints2DatasetsType
> = z.nativeEnum(BulkCreateDatapoints2DatasetsType);

/** @internal */
export const BulkCreateDatapoints2DatasetsType$outboundSchema: z.ZodNativeEnum<
  typeof BulkCreateDatapoints2DatasetsType
> = BulkCreateDatapoints2DatasetsType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace BulkCreateDatapoints2DatasetsType$ {
  /** @deprecated use `BulkCreateDatapoints2DatasetsType$inboundSchema` instead. */
  export const inboundSchema = BulkCreateDatapoints2DatasetsType$inboundSchema;
  /** @deprecated use `BulkCreateDatapoints2DatasetsType$outboundSchema` instead. */
  export const outboundSchema =
    BulkCreateDatapoints2DatasetsType$outboundSchema;
}

/** @internal */
export const BulkCreateDatapoints2ImageUrl$inboundSchema: z.ZodType<
  BulkCreateDatapoints2ImageUrl,
  z.ZodTypeDef,
  unknown
> = z.object({
  url: z.string(),
  detail: z.string().optional(),
});

/** @internal */
export type BulkCreateDatapoints2ImageUrl$Outbound = {
  url: string;
  detail?: string | undefined;
};

/** @internal */
export const BulkCreateDatapoints2ImageUrl$outboundSchema: z.ZodType<
  BulkCreateDatapoints2ImageUrl$Outbound,
  z.ZodTypeDef,
  BulkCreateDatapoints2ImageUrl
> = z.object({
  url: z.string(),
  detail: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace BulkCreateDatapoints2ImageUrl$ {
  /** @deprecated use `BulkCreateDatapoints2ImageUrl$inboundSchema` instead. */
  export const inboundSchema = BulkCreateDatapoints2ImageUrl$inboundSchema;
  /** @deprecated use `BulkCreateDatapoints2ImageUrl$outboundSchema` instead. */
  export const outboundSchema = BulkCreateDatapoints2ImageUrl$outboundSchema;
  /** @deprecated use `BulkCreateDatapoints2ImageUrl$Outbound` instead. */
  export type Outbound = BulkCreateDatapoints2ImageUrl$Outbound;
}

export function bulkCreateDatapoints2ImageUrlToJSON(
  bulkCreateDatapoints2ImageUrl: BulkCreateDatapoints2ImageUrl,
): string {
  return JSON.stringify(
    BulkCreateDatapoints2ImageUrl$outboundSchema.parse(
      bulkCreateDatapoints2ImageUrl,
    ),
  );
}

export function bulkCreateDatapoints2ImageUrlFromJSON(
  jsonString: string,
): SafeParseResult<BulkCreateDatapoints2ImageUrl, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => BulkCreateDatapoints2ImageUrl$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'BulkCreateDatapoints2ImageUrl' from JSON`,
  );
}

/** @internal */
export const BulkCreateDatapoints22$inboundSchema: z.ZodType<
  BulkCreateDatapoints22,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: BulkCreateDatapoints2DatasetsType$inboundSchema,
  image_url: z.lazy(() => BulkCreateDatapoints2ImageUrl$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "image_url": "imageUrl",
  });
});

/** @internal */
export type BulkCreateDatapoints22$Outbound = {
  type: string;
  image_url: BulkCreateDatapoints2ImageUrl$Outbound;
};

/** @internal */
export const BulkCreateDatapoints22$outboundSchema: z.ZodType<
  BulkCreateDatapoints22$Outbound,
  z.ZodTypeDef,
  BulkCreateDatapoints22
> = z.object({
  type: BulkCreateDatapoints2DatasetsType$outboundSchema,
  imageUrl: z.lazy(() => BulkCreateDatapoints2ImageUrl$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    imageUrl: "image_url",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace BulkCreateDatapoints22$ {
  /** @deprecated use `BulkCreateDatapoints22$inboundSchema` instead. */
  export const inboundSchema = BulkCreateDatapoints22$inboundSchema;
  /** @deprecated use `BulkCreateDatapoints22$outboundSchema` instead. */
  export const outboundSchema = BulkCreateDatapoints22$outboundSchema;
  /** @deprecated use `BulkCreateDatapoints22$Outbound` instead. */
  export type Outbound = BulkCreateDatapoints22$Outbound;
}

export function bulkCreateDatapoints22ToJSON(
  bulkCreateDatapoints22: BulkCreateDatapoints22,
): string {
  return JSON.stringify(
    BulkCreateDatapoints22$outboundSchema.parse(bulkCreateDatapoints22),
  );
}

export function bulkCreateDatapoints22FromJSON(
  jsonString: string,
): SafeParseResult<BulkCreateDatapoints22, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => BulkCreateDatapoints22$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'BulkCreateDatapoints22' from JSON`,
  );
}

/** @internal */
export const BulkCreateDatapoints2Type$inboundSchema: z.ZodNativeEnum<
  typeof BulkCreateDatapoints2Type
> = z.nativeEnum(BulkCreateDatapoints2Type);

/** @internal */
export const BulkCreateDatapoints2Type$outboundSchema: z.ZodNativeEnum<
  typeof BulkCreateDatapoints2Type
> = BulkCreateDatapoints2Type$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace BulkCreateDatapoints2Type$ {
  /** @deprecated use `BulkCreateDatapoints2Type$inboundSchema` instead. */
  export const inboundSchema = BulkCreateDatapoints2Type$inboundSchema;
  /** @deprecated use `BulkCreateDatapoints2Type$outboundSchema` instead. */
  export const outboundSchema = BulkCreateDatapoints2Type$outboundSchema;
}

/** @internal */
export const BulkCreateDatapoints21$inboundSchema: z.ZodType<
  BulkCreateDatapoints21,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: BulkCreateDatapoints2Type$inboundSchema,
  text: z.string(),
});

/** @internal */
export type BulkCreateDatapoints21$Outbound = {
  type: string;
  text: string;
};

/** @internal */
export const BulkCreateDatapoints21$outboundSchema: z.ZodType<
  BulkCreateDatapoints21$Outbound,
  z.ZodTypeDef,
  BulkCreateDatapoints21
> = z.object({
  type: BulkCreateDatapoints2Type$outboundSchema,
  text: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace BulkCreateDatapoints21$ {
  /** @deprecated use `BulkCreateDatapoints21$inboundSchema` instead. */
  export const inboundSchema = BulkCreateDatapoints21$inboundSchema;
  /** @deprecated use `BulkCreateDatapoints21$outboundSchema` instead. */
  export const outboundSchema = BulkCreateDatapoints21$outboundSchema;
  /** @deprecated use `BulkCreateDatapoints21$Outbound` instead. */
  export type Outbound = BulkCreateDatapoints21$Outbound;
}

export function bulkCreateDatapoints21ToJSON(
  bulkCreateDatapoints21: BulkCreateDatapoints21,
): string {
  return JSON.stringify(
    BulkCreateDatapoints21$outboundSchema.parse(bulkCreateDatapoints21),
  );
}

export function bulkCreateDatapoints21FromJSON(
  jsonString: string,
): SafeParseResult<BulkCreateDatapoints21, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => BulkCreateDatapoints21$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'BulkCreateDatapoints21' from JSON`,
  );
}

/** @internal */
export const BulkCreateDatapointsContent2$inboundSchema: z.ZodType<
  BulkCreateDatapointsContent2,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => BulkCreateDatapoints21$inboundSchema),
  z.lazy(() => BulkCreateDatapoints22$inboundSchema),
]);

/** @internal */
export type BulkCreateDatapointsContent2$Outbound =
  | BulkCreateDatapoints21$Outbound
  | BulkCreateDatapoints22$Outbound;

/** @internal */
export const BulkCreateDatapointsContent2$outboundSchema: z.ZodType<
  BulkCreateDatapointsContent2$Outbound,
  z.ZodTypeDef,
  BulkCreateDatapointsContent2
> = z.union([
  z.lazy(() => BulkCreateDatapoints21$outboundSchema),
  z.lazy(() => BulkCreateDatapoints22$outboundSchema),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace BulkCreateDatapointsContent2$ {
  /** @deprecated use `BulkCreateDatapointsContent2$inboundSchema` instead. */
  export const inboundSchema = BulkCreateDatapointsContent2$inboundSchema;
  /** @deprecated use `BulkCreateDatapointsContent2$outboundSchema` instead. */
  export const outboundSchema = BulkCreateDatapointsContent2$outboundSchema;
  /** @deprecated use `BulkCreateDatapointsContent2$Outbound` instead. */
  export type Outbound = BulkCreateDatapointsContent2$Outbound;
}

export function bulkCreateDatapointsContent2ToJSON(
  bulkCreateDatapointsContent2: BulkCreateDatapointsContent2,
): string {
  return JSON.stringify(
    BulkCreateDatapointsContent2$outboundSchema.parse(
      bulkCreateDatapointsContent2,
    ),
  );
}

export function bulkCreateDatapointsContent2FromJSON(
  jsonString: string,
): SafeParseResult<BulkCreateDatapointsContent2, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => BulkCreateDatapointsContent2$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'BulkCreateDatapointsContent2' from JSON`,
  );
}

/** @internal */
export const BulkCreateDatapointsContent$inboundSchema: z.ZodType<
  BulkCreateDatapointsContent,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.string(),
  z.array(z.union([
    z.lazy(() => BulkCreateDatapoints21$inboundSchema),
    z.lazy(() => BulkCreateDatapoints22$inboundSchema),
  ])),
]);

/** @internal */
export type BulkCreateDatapointsContent$Outbound =
  | string
  | Array<BulkCreateDatapoints21$Outbound | BulkCreateDatapoints22$Outbound>;

/** @internal */
export const BulkCreateDatapointsContent$outboundSchema: z.ZodType<
  BulkCreateDatapointsContent$Outbound,
  z.ZodTypeDef,
  BulkCreateDatapointsContent
> = z.union([
  z.string(),
  z.array(z.union([
    z.lazy(() => BulkCreateDatapoints21$outboundSchema),
    z.lazy(() => BulkCreateDatapoints22$outboundSchema),
  ])),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace BulkCreateDatapointsContent$ {
  /** @deprecated use `BulkCreateDatapointsContent$inboundSchema` instead. */
  export const inboundSchema = BulkCreateDatapointsContent$inboundSchema;
  /** @deprecated use `BulkCreateDatapointsContent$outboundSchema` instead. */
  export const outboundSchema = BulkCreateDatapointsContent$outboundSchema;
  /** @deprecated use `BulkCreateDatapointsContent$Outbound` instead. */
  export type Outbound = BulkCreateDatapointsContent$Outbound;
}

export function bulkCreateDatapointsContentToJSON(
  bulkCreateDatapointsContent: BulkCreateDatapointsContent,
): string {
  return JSON.stringify(
    BulkCreateDatapointsContent$outboundSchema.parse(
      bulkCreateDatapointsContent,
    ),
  );
}

export function bulkCreateDatapointsContentFromJSON(
  jsonString: string,
): SafeParseResult<BulkCreateDatapointsContent, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => BulkCreateDatapointsContent$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'BulkCreateDatapointsContent' from JSON`,
  );
}

/** @internal */
export const BulkCreateDatapointsType$inboundSchema: z.ZodNativeEnum<
  typeof BulkCreateDatapointsType
> = z.nativeEnum(BulkCreateDatapointsType);

/** @internal */
export const BulkCreateDatapointsType$outboundSchema: z.ZodNativeEnum<
  typeof BulkCreateDatapointsType
> = BulkCreateDatapointsType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace BulkCreateDatapointsType$ {
  /** @deprecated use `BulkCreateDatapointsType$inboundSchema` instead. */
  export const inboundSchema = BulkCreateDatapointsType$inboundSchema;
  /** @deprecated use `BulkCreateDatapointsType$outboundSchema` instead. */
  export const outboundSchema = BulkCreateDatapointsType$outboundSchema;
}

/** @internal */
export const BulkCreateDatapointsFunction$inboundSchema: z.ZodType<
  BulkCreateDatapointsFunction,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.string(),
  arguments: z.string(),
});

/** @internal */
export type BulkCreateDatapointsFunction$Outbound = {
  name: string;
  arguments: string;
};

/** @internal */
export const BulkCreateDatapointsFunction$outboundSchema: z.ZodType<
  BulkCreateDatapointsFunction$Outbound,
  z.ZodTypeDef,
  BulkCreateDatapointsFunction
> = z.object({
  name: z.string(),
  arguments: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace BulkCreateDatapointsFunction$ {
  /** @deprecated use `BulkCreateDatapointsFunction$inboundSchema` instead. */
  export const inboundSchema = BulkCreateDatapointsFunction$inboundSchema;
  /** @deprecated use `BulkCreateDatapointsFunction$outboundSchema` instead. */
  export const outboundSchema = BulkCreateDatapointsFunction$outboundSchema;
  /** @deprecated use `BulkCreateDatapointsFunction$Outbound` instead. */
  export type Outbound = BulkCreateDatapointsFunction$Outbound;
}

export function bulkCreateDatapointsFunctionToJSON(
  bulkCreateDatapointsFunction: BulkCreateDatapointsFunction,
): string {
  return JSON.stringify(
    BulkCreateDatapointsFunction$outboundSchema.parse(
      bulkCreateDatapointsFunction,
    ),
  );
}

export function bulkCreateDatapointsFunctionFromJSON(
  jsonString: string,
): SafeParseResult<BulkCreateDatapointsFunction, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => BulkCreateDatapointsFunction$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'BulkCreateDatapointsFunction' from JSON`,
  );
}

/** @internal */
export const BulkCreateDatapointsToolCalls$inboundSchema: z.ZodType<
  BulkCreateDatapointsToolCalls,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string().optional(),
  index: z.number().optional(),
  type: BulkCreateDatapointsType$inboundSchema,
  function: z.lazy(() => BulkCreateDatapointsFunction$inboundSchema),
});

/** @internal */
export type BulkCreateDatapointsToolCalls$Outbound = {
  id?: string | undefined;
  index?: number | undefined;
  type: string;
  function: BulkCreateDatapointsFunction$Outbound;
};

/** @internal */
export const BulkCreateDatapointsToolCalls$outboundSchema: z.ZodType<
  BulkCreateDatapointsToolCalls$Outbound,
  z.ZodTypeDef,
  BulkCreateDatapointsToolCalls
> = z.object({
  id: z.string().optional(),
  index: z.number().optional(),
  type: BulkCreateDatapointsType$outboundSchema,
  function: z.lazy(() => BulkCreateDatapointsFunction$outboundSchema),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace BulkCreateDatapointsToolCalls$ {
  /** @deprecated use `BulkCreateDatapointsToolCalls$inboundSchema` instead. */
  export const inboundSchema = BulkCreateDatapointsToolCalls$inboundSchema;
  /** @deprecated use `BulkCreateDatapointsToolCalls$outboundSchema` instead. */
  export const outboundSchema = BulkCreateDatapointsToolCalls$outboundSchema;
  /** @deprecated use `BulkCreateDatapointsToolCalls$Outbound` instead. */
  export type Outbound = BulkCreateDatapointsToolCalls$Outbound;
}

export function bulkCreateDatapointsToolCallsToJSON(
  bulkCreateDatapointsToolCalls: BulkCreateDatapointsToolCalls,
): string {
  return JSON.stringify(
    BulkCreateDatapointsToolCalls$outboundSchema.parse(
      bulkCreateDatapointsToolCalls,
    ),
  );
}

export function bulkCreateDatapointsToolCallsFromJSON(
  jsonString: string,
): SafeParseResult<BulkCreateDatapointsToolCalls, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => BulkCreateDatapointsToolCalls$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'BulkCreateDatapointsToolCalls' from JSON`,
  );
}

/** @internal */
export const BulkCreateDatapointsMessages$inboundSchema: z.ZodType<
  BulkCreateDatapointsMessages,
  z.ZodTypeDef,
  unknown
> = z.object({
  role: BulkCreateDatapointsRole$inboundSchema,
  content: z.union([
    z.string(),
    z.array(z.union([
      z.lazy(() => BulkCreateDatapoints21$inboundSchema),
      z.lazy(() => BulkCreateDatapoints22$inboundSchema),
    ])),
  ]),
  tool_calls: z.array(z.lazy(() => BulkCreateDatapointsToolCalls$inboundSchema))
    .optional(),
}).transform((v) => {
  return remap$(v, {
    "tool_calls": "toolCalls",
  });
});

/** @internal */
export type BulkCreateDatapointsMessages$Outbound = {
  role: string;
  content:
    | string
    | Array<BulkCreateDatapoints21$Outbound | BulkCreateDatapoints22$Outbound>;
  tool_calls?: Array<BulkCreateDatapointsToolCalls$Outbound> | undefined;
};

/** @internal */
export const BulkCreateDatapointsMessages$outboundSchema: z.ZodType<
  BulkCreateDatapointsMessages$Outbound,
  z.ZodTypeDef,
  BulkCreateDatapointsMessages
> = z.object({
  role: BulkCreateDatapointsRole$outboundSchema,
  content: z.union([
    z.string(),
    z.array(z.union([
      z.lazy(() => BulkCreateDatapoints21$outboundSchema),
      z.lazy(() => BulkCreateDatapoints22$outboundSchema),
    ])),
  ]),
  toolCalls: z.array(z.lazy(() => BulkCreateDatapointsToolCalls$outboundSchema))
    .optional(),
}).transform((v) => {
  return remap$(v, {
    toolCalls: "tool_calls",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace BulkCreateDatapointsMessages$ {
  /** @deprecated use `BulkCreateDatapointsMessages$inboundSchema` instead. */
  export const inboundSchema = BulkCreateDatapointsMessages$inboundSchema;
  /** @deprecated use `BulkCreateDatapointsMessages$outboundSchema` instead. */
  export const outboundSchema = BulkCreateDatapointsMessages$outboundSchema;
  /** @deprecated use `BulkCreateDatapointsMessages$Outbound` instead. */
  export type Outbound = BulkCreateDatapointsMessages$Outbound;
}

export function bulkCreateDatapointsMessagesToJSON(
  bulkCreateDatapointsMessages: BulkCreateDatapointsMessages,
): string {
  return JSON.stringify(
    BulkCreateDatapointsMessages$outboundSchema.parse(
      bulkCreateDatapointsMessages,
    ),
  );
}

export function bulkCreateDatapointsMessagesFromJSON(
  jsonString: string,
): SafeParseResult<BulkCreateDatapointsMessages, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => BulkCreateDatapointsMessages$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'BulkCreateDatapointsMessages' from JSON`,
  );
}

/** @internal */
export const Items$inboundSchema: z.ZodType<Items, z.ZodTypeDef, unknown> = z
  .object({
    inputs: z.record(z.any()).optional(),
    messages: z.array(z.lazy(() => BulkCreateDatapointsMessages$inboundSchema))
      .optional(),
    expected_output: z.string().optional(),
  }).transform((v) => {
    return remap$(v, {
      "expected_output": "expectedOutput",
    });
  });

/** @internal */
export type Items$Outbound = {
  inputs?: { [k: string]: any } | undefined;
  messages?: Array<BulkCreateDatapointsMessages$Outbound> | undefined;
  expected_output?: string | undefined;
};

/** @internal */
export const Items$outboundSchema: z.ZodType<
  Items$Outbound,
  z.ZodTypeDef,
  Items
> = z.object({
  inputs: z.record(z.any()).optional(),
  messages: z.array(z.lazy(() => BulkCreateDatapointsMessages$outboundSchema))
    .optional(),
  expectedOutput: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    expectedOutput: "expected_output",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Items$ {
  /** @deprecated use `Items$inboundSchema` instead. */
  export const inboundSchema = Items$inboundSchema;
  /** @deprecated use `Items$outboundSchema` instead. */
  export const outboundSchema = Items$outboundSchema;
  /** @deprecated use `Items$Outbound` instead. */
  export type Outbound = Items$Outbound;
}

export function itemsToJSON(items: Items): string {
  return JSON.stringify(Items$outboundSchema.parse(items));
}

export function itemsFromJSON(
  jsonString: string,
): SafeParseResult<Items, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Items$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Items' from JSON`,
  );
}

/** @internal */
export const BulkCreateDatapointsRequestBody$inboundSchema: z.ZodType<
  BulkCreateDatapointsRequestBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  items: z.array(z.lazy(() => Items$inboundSchema)),
});

/** @internal */
export type BulkCreateDatapointsRequestBody$Outbound = {
  items: Array<Items$Outbound>;
};

/** @internal */
export const BulkCreateDatapointsRequestBody$outboundSchema: z.ZodType<
  BulkCreateDatapointsRequestBody$Outbound,
  z.ZodTypeDef,
  BulkCreateDatapointsRequestBody
> = z.object({
  items: z.array(z.lazy(() => Items$outboundSchema)),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace BulkCreateDatapointsRequestBody$ {
  /** @deprecated use `BulkCreateDatapointsRequestBody$inboundSchema` instead. */
  export const inboundSchema = BulkCreateDatapointsRequestBody$inboundSchema;
  /** @deprecated use `BulkCreateDatapointsRequestBody$outboundSchema` instead. */
  export const outboundSchema = BulkCreateDatapointsRequestBody$outboundSchema;
  /** @deprecated use `BulkCreateDatapointsRequestBody$Outbound` instead. */
  export type Outbound = BulkCreateDatapointsRequestBody$Outbound;
}

export function bulkCreateDatapointsRequestBodyToJSON(
  bulkCreateDatapointsRequestBody: BulkCreateDatapointsRequestBody,
): string {
  return JSON.stringify(
    BulkCreateDatapointsRequestBody$outboundSchema.parse(
      bulkCreateDatapointsRequestBody,
    ),
  );
}

export function bulkCreateDatapointsRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<BulkCreateDatapointsRequestBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => BulkCreateDatapointsRequestBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'BulkCreateDatapointsRequestBody' from JSON`,
  );
}

/** @internal */
export const BulkCreateDatapointsRequest$inboundSchema: z.ZodType<
  BulkCreateDatapointsRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  dataset_id: z.string(),
  RequestBody: z.lazy(() => BulkCreateDatapointsRequestBody$inboundSchema)
    .optional(),
}).transform((v) => {
  return remap$(v, {
    "dataset_id": "datasetId",
    "RequestBody": "requestBody",
  });
});

/** @internal */
export type BulkCreateDatapointsRequest$Outbound = {
  dataset_id: string;
  RequestBody?: BulkCreateDatapointsRequestBody$Outbound | undefined;
};

/** @internal */
export const BulkCreateDatapointsRequest$outboundSchema: z.ZodType<
  BulkCreateDatapointsRequest$Outbound,
  z.ZodTypeDef,
  BulkCreateDatapointsRequest
> = z.object({
  datasetId: z.string(),
  requestBody: z.lazy(() => BulkCreateDatapointsRequestBody$outboundSchema)
    .optional(),
}).transform((v) => {
  return remap$(v, {
    datasetId: "dataset_id",
    requestBody: "RequestBody",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace BulkCreateDatapointsRequest$ {
  /** @deprecated use `BulkCreateDatapointsRequest$inboundSchema` instead. */
  export const inboundSchema = BulkCreateDatapointsRequest$inboundSchema;
  /** @deprecated use `BulkCreateDatapointsRequest$outboundSchema` instead. */
  export const outboundSchema = BulkCreateDatapointsRequest$outboundSchema;
  /** @deprecated use `BulkCreateDatapointsRequest$Outbound` instead. */
  export type Outbound = BulkCreateDatapointsRequest$Outbound;
}

export function bulkCreateDatapointsRequestToJSON(
  bulkCreateDatapointsRequest: BulkCreateDatapointsRequest,
): string {
  return JSON.stringify(
    BulkCreateDatapointsRequest$outboundSchema.parse(
      bulkCreateDatapointsRequest,
    ),
  );
}

export function bulkCreateDatapointsRequestFromJSON(
  jsonString: string,
): SafeParseResult<BulkCreateDatapointsRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => BulkCreateDatapointsRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'BulkCreateDatapointsRequest' from JSON`,
  );
}

/** @internal */
export const BulkCreateDatapointsDatasetsRole$inboundSchema: z.ZodNativeEnum<
  typeof BulkCreateDatapointsDatasetsRole
> = z.nativeEnum(BulkCreateDatapointsDatasetsRole);

/** @internal */
export const BulkCreateDatapointsDatasetsRole$outboundSchema: z.ZodNativeEnum<
  typeof BulkCreateDatapointsDatasetsRole
> = BulkCreateDatapointsDatasetsRole$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace BulkCreateDatapointsDatasetsRole$ {
  /** @deprecated use `BulkCreateDatapointsDatasetsRole$inboundSchema` instead. */
  export const inboundSchema = BulkCreateDatapointsDatasetsRole$inboundSchema;
  /** @deprecated use `BulkCreateDatapointsDatasetsRole$outboundSchema` instead. */
  export const outboundSchema = BulkCreateDatapointsDatasetsRole$outboundSchema;
}

/** @internal */
export const BulkCreateDatapoints2DatasetsResponse200Type$inboundSchema:
  z.ZodNativeEnum<typeof BulkCreateDatapoints2DatasetsResponse200Type> = z
    .nativeEnum(BulkCreateDatapoints2DatasetsResponse200Type);

/** @internal */
export const BulkCreateDatapoints2DatasetsResponse200Type$outboundSchema:
  z.ZodNativeEnum<typeof BulkCreateDatapoints2DatasetsResponse200Type> =
    BulkCreateDatapoints2DatasetsResponse200Type$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace BulkCreateDatapoints2DatasetsResponse200Type$ {
  /** @deprecated use `BulkCreateDatapoints2DatasetsResponse200Type$inboundSchema` instead. */
  export const inboundSchema =
    BulkCreateDatapoints2DatasetsResponse200Type$inboundSchema;
  /** @deprecated use `BulkCreateDatapoints2DatasetsResponse200Type$outboundSchema` instead. */
  export const outboundSchema =
    BulkCreateDatapoints2DatasetsResponse200Type$outboundSchema;
}

/** @internal */
export const BulkCreateDatapoints2DatasetsImageUrl$inboundSchema: z.ZodType<
  BulkCreateDatapoints2DatasetsImageUrl,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string().optional(),
  url: z.string(),
  detail: z.string().optional(),
});

/** @internal */
export type BulkCreateDatapoints2DatasetsImageUrl$Outbound = {
  id?: string | undefined;
  url: string;
  detail?: string | undefined;
};

/** @internal */
export const BulkCreateDatapoints2DatasetsImageUrl$outboundSchema: z.ZodType<
  BulkCreateDatapoints2DatasetsImageUrl$Outbound,
  z.ZodTypeDef,
  BulkCreateDatapoints2DatasetsImageUrl
> = z.object({
  id: z.string().optional(),
  url: z.string(),
  detail: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace BulkCreateDatapoints2DatasetsImageUrl$ {
  /** @deprecated use `BulkCreateDatapoints2DatasetsImageUrl$inboundSchema` instead. */
  export const inboundSchema =
    BulkCreateDatapoints2DatasetsImageUrl$inboundSchema;
  /** @deprecated use `BulkCreateDatapoints2DatasetsImageUrl$outboundSchema` instead. */
  export const outboundSchema =
    BulkCreateDatapoints2DatasetsImageUrl$outboundSchema;
  /** @deprecated use `BulkCreateDatapoints2DatasetsImageUrl$Outbound` instead. */
  export type Outbound = BulkCreateDatapoints2DatasetsImageUrl$Outbound;
}

export function bulkCreateDatapoints2DatasetsImageUrlToJSON(
  bulkCreateDatapoints2DatasetsImageUrl: BulkCreateDatapoints2DatasetsImageUrl,
): string {
  return JSON.stringify(
    BulkCreateDatapoints2DatasetsImageUrl$outboundSchema.parse(
      bulkCreateDatapoints2DatasetsImageUrl,
    ),
  );
}

export function bulkCreateDatapoints2DatasetsImageUrlFromJSON(
  jsonString: string,
): SafeParseResult<BulkCreateDatapoints2DatasetsImageUrl, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      BulkCreateDatapoints2DatasetsImageUrl$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'BulkCreateDatapoints2DatasetsImageUrl' from JSON`,
  );
}

/** @internal */
export const BulkCreateDatapoints2Datasets2$inboundSchema: z.ZodType<
  BulkCreateDatapoints2Datasets2,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: BulkCreateDatapoints2DatasetsResponse200Type$inboundSchema,
  image_url: z.lazy(() => BulkCreateDatapoints2DatasetsImageUrl$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "image_url": "imageUrl",
  });
});

/** @internal */
export type BulkCreateDatapoints2Datasets2$Outbound = {
  type: string;
  image_url: BulkCreateDatapoints2DatasetsImageUrl$Outbound;
};

/** @internal */
export const BulkCreateDatapoints2Datasets2$outboundSchema: z.ZodType<
  BulkCreateDatapoints2Datasets2$Outbound,
  z.ZodTypeDef,
  BulkCreateDatapoints2Datasets2
> = z.object({
  type: BulkCreateDatapoints2DatasetsResponse200Type$outboundSchema,
  imageUrl: z.lazy(() => BulkCreateDatapoints2DatasetsImageUrl$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    imageUrl: "image_url",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace BulkCreateDatapoints2Datasets2$ {
  /** @deprecated use `BulkCreateDatapoints2Datasets2$inboundSchema` instead. */
  export const inboundSchema = BulkCreateDatapoints2Datasets2$inboundSchema;
  /** @deprecated use `BulkCreateDatapoints2Datasets2$outboundSchema` instead. */
  export const outboundSchema = BulkCreateDatapoints2Datasets2$outboundSchema;
  /** @deprecated use `BulkCreateDatapoints2Datasets2$Outbound` instead. */
  export type Outbound = BulkCreateDatapoints2Datasets2$Outbound;
}

export function bulkCreateDatapoints2Datasets2ToJSON(
  bulkCreateDatapoints2Datasets2: BulkCreateDatapoints2Datasets2,
): string {
  return JSON.stringify(
    BulkCreateDatapoints2Datasets2$outboundSchema.parse(
      bulkCreateDatapoints2Datasets2,
    ),
  );
}

export function bulkCreateDatapoints2Datasets2FromJSON(
  jsonString: string,
): SafeParseResult<BulkCreateDatapoints2Datasets2, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => BulkCreateDatapoints2Datasets2$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'BulkCreateDatapoints2Datasets2' from JSON`,
  );
}

/** @internal */
export const BulkCreateDatapoints2DatasetsResponseType$inboundSchema:
  z.ZodNativeEnum<typeof BulkCreateDatapoints2DatasetsResponseType> = z
    .nativeEnum(BulkCreateDatapoints2DatasetsResponseType);

/** @internal */
export const BulkCreateDatapoints2DatasetsResponseType$outboundSchema:
  z.ZodNativeEnum<typeof BulkCreateDatapoints2DatasetsResponseType> =
    BulkCreateDatapoints2DatasetsResponseType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace BulkCreateDatapoints2DatasetsResponseType$ {
  /** @deprecated use `BulkCreateDatapoints2DatasetsResponseType$inboundSchema` instead. */
  export const inboundSchema =
    BulkCreateDatapoints2DatasetsResponseType$inboundSchema;
  /** @deprecated use `BulkCreateDatapoints2DatasetsResponseType$outboundSchema` instead. */
  export const outboundSchema =
    BulkCreateDatapoints2DatasetsResponseType$outboundSchema;
}

/** @internal */
export const BulkCreateDatapoints2Datasets1$inboundSchema: z.ZodType<
  BulkCreateDatapoints2Datasets1,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: BulkCreateDatapoints2DatasetsResponseType$inboundSchema,
  text: z.string(),
});

/** @internal */
export type BulkCreateDatapoints2Datasets1$Outbound = {
  type: string;
  text: string;
};

/** @internal */
export const BulkCreateDatapoints2Datasets1$outboundSchema: z.ZodType<
  BulkCreateDatapoints2Datasets1$Outbound,
  z.ZodTypeDef,
  BulkCreateDatapoints2Datasets1
> = z.object({
  type: BulkCreateDatapoints2DatasetsResponseType$outboundSchema,
  text: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace BulkCreateDatapoints2Datasets1$ {
  /** @deprecated use `BulkCreateDatapoints2Datasets1$inboundSchema` instead. */
  export const inboundSchema = BulkCreateDatapoints2Datasets1$inboundSchema;
  /** @deprecated use `BulkCreateDatapoints2Datasets1$outboundSchema` instead. */
  export const outboundSchema = BulkCreateDatapoints2Datasets1$outboundSchema;
  /** @deprecated use `BulkCreateDatapoints2Datasets1$Outbound` instead. */
  export type Outbound = BulkCreateDatapoints2Datasets1$Outbound;
}

export function bulkCreateDatapoints2Datasets1ToJSON(
  bulkCreateDatapoints2Datasets1: BulkCreateDatapoints2Datasets1,
): string {
  return JSON.stringify(
    BulkCreateDatapoints2Datasets1$outboundSchema.parse(
      bulkCreateDatapoints2Datasets1,
    ),
  );
}

export function bulkCreateDatapoints2Datasets1FromJSON(
  jsonString: string,
): SafeParseResult<BulkCreateDatapoints2Datasets1, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => BulkCreateDatapoints2Datasets1$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'BulkCreateDatapoints2Datasets1' from JSON`,
  );
}

/** @internal */
export const BulkCreateDatapointsContentDatasets2$inboundSchema: z.ZodType<
  BulkCreateDatapointsContentDatasets2,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => BulkCreateDatapoints2Datasets1$inboundSchema),
  z.lazy(() => BulkCreateDatapoints2Datasets2$inboundSchema),
]);

/** @internal */
export type BulkCreateDatapointsContentDatasets2$Outbound =
  | BulkCreateDatapoints2Datasets1$Outbound
  | BulkCreateDatapoints2Datasets2$Outbound;

/** @internal */
export const BulkCreateDatapointsContentDatasets2$outboundSchema: z.ZodType<
  BulkCreateDatapointsContentDatasets2$Outbound,
  z.ZodTypeDef,
  BulkCreateDatapointsContentDatasets2
> = z.union([
  z.lazy(() => BulkCreateDatapoints2Datasets1$outboundSchema),
  z.lazy(() => BulkCreateDatapoints2Datasets2$outboundSchema),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace BulkCreateDatapointsContentDatasets2$ {
  /** @deprecated use `BulkCreateDatapointsContentDatasets2$inboundSchema` instead. */
  export const inboundSchema =
    BulkCreateDatapointsContentDatasets2$inboundSchema;
  /** @deprecated use `BulkCreateDatapointsContentDatasets2$outboundSchema` instead. */
  export const outboundSchema =
    BulkCreateDatapointsContentDatasets2$outboundSchema;
  /** @deprecated use `BulkCreateDatapointsContentDatasets2$Outbound` instead. */
  export type Outbound = BulkCreateDatapointsContentDatasets2$Outbound;
}

export function bulkCreateDatapointsContentDatasets2ToJSON(
  bulkCreateDatapointsContentDatasets2: BulkCreateDatapointsContentDatasets2,
): string {
  return JSON.stringify(
    BulkCreateDatapointsContentDatasets2$outboundSchema.parse(
      bulkCreateDatapointsContentDatasets2,
    ),
  );
}

export function bulkCreateDatapointsContentDatasets2FromJSON(
  jsonString: string,
): SafeParseResult<BulkCreateDatapointsContentDatasets2, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      BulkCreateDatapointsContentDatasets2$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'BulkCreateDatapointsContentDatasets2' from JSON`,
  );
}

/** @internal */
export const BulkCreateDatapointsDatasetsContent$inboundSchema: z.ZodType<
  BulkCreateDatapointsDatasetsContent,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.string(),
  z.array(z.union([
    z.lazy(() => BulkCreateDatapoints2Datasets1$inboundSchema),
    z.lazy(() => BulkCreateDatapoints2Datasets2$inboundSchema),
  ])),
]);

/** @internal */
export type BulkCreateDatapointsDatasetsContent$Outbound =
  | string
  | Array<
    | BulkCreateDatapoints2Datasets1$Outbound
    | BulkCreateDatapoints2Datasets2$Outbound
  >;

/** @internal */
export const BulkCreateDatapointsDatasetsContent$outboundSchema: z.ZodType<
  BulkCreateDatapointsDatasetsContent$Outbound,
  z.ZodTypeDef,
  BulkCreateDatapointsDatasetsContent
> = z.union([
  z.string(),
  z.array(z.union([
    z.lazy(() => BulkCreateDatapoints2Datasets1$outboundSchema),
    z.lazy(() => BulkCreateDatapoints2Datasets2$outboundSchema),
  ])),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace BulkCreateDatapointsDatasetsContent$ {
  /** @deprecated use `BulkCreateDatapointsDatasetsContent$inboundSchema` instead. */
  export const inboundSchema =
    BulkCreateDatapointsDatasetsContent$inboundSchema;
  /** @deprecated use `BulkCreateDatapointsDatasetsContent$outboundSchema` instead. */
  export const outboundSchema =
    BulkCreateDatapointsDatasetsContent$outboundSchema;
  /** @deprecated use `BulkCreateDatapointsDatasetsContent$Outbound` instead. */
  export type Outbound = BulkCreateDatapointsDatasetsContent$Outbound;
}

export function bulkCreateDatapointsDatasetsContentToJSON(
  bulkCreateDatapointsDatasetsContent: BulkCreateDatapointsDatasetsContent,
): string {
  return JSON.stringify(
    BulkCreateDatapointsDatasetsContent$outboundSchema.parse(
      bulkCreateDatapointsDatasetsContent,
    ),
  );
}

export function bulkCreateDatapointsDatasetsContentFromJSON(
  jsonString: string,
): SafeParseResult<BulkCreateDatapointsDatasetsContent, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      BulkCreateDatapointsDatasetsContent$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'BulkCreateDatapointsDatasetsContent' from JSON`,
  );
}

/** @internal */
export const BulkCreateDatapointsDatasetsType$inboundSchema: z.ZodNativeEnum<
  typeof BulkCreateDatapointsDatasetsType
> = z.nativeEnum(BulkCreateDatapointsDatasetsType);

/** @internal */
export const BulkCreateDatapointsDatasetsType$outboundSchema: z.ZodNativeEnum<
  typeof BulkCreateDatapointsDatasetsType
> = BulkCreateDatapointsDatasetsType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace BulkCreateDatapointsDatasetsType$ {
  /** @deprecated use `BulkCreateDatapointsDatasetsType$inboundSchema` instead. */
  export const inboundSchema = BulkCreateDatapointsDatasetsType$inboundSchema;
  /** @deprecated use `BulkCreateDatapointsDatasetsType$outboundSchema` instead. */
  export const outboundSchema = BulkCreateDatapointsDatasetsType$outboundSchema;
}

/** @internal */
export const BulkCreateDatapointsDatasetsFunction$inboundSchema: z.ZodType<
  BulkCreateDatapointsDatasetsFunction,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.string(),
  arguments: z.string(),
});

/** @internal */
export type BulkCreateDatapointsDatasetsFunction$Outbound = {
  name: string;
  arguments: string;
};

/** @internal */
export const BulkCreateDatapointsDatasetsFunction$outboundSchema: z.ZodType<
  BulkCreateDatapointsDatasetsFunction$Outbound,
  z.ZodTypeDef,
  BulkCreateDatapointsDatasetsFunction
> = z.object({
  name: z.string(),
  arguments: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace BulkCreateDatapointsDatasetsFunction$ {
  /** @deprecated use `BulkCreateDatapointsDatasetsFunction$inboundSchema` instead. */
  export const inboundSchema =
    BulkCreateDatapointsDatasetsFunction$inboundSchema;
  /** @deprecated use `BulkCreateDatapointsDatasetsFunction$outboundSchema` instead. */
  export const outboundSchema =
    BulkCreateDatapointsDatasetsFunction$outboundSchema;
  /** @deprecated use `BulkCreateDatapointsDatasetsFunction$Outbound` instead. */
  export type Outbound = BulkCreateDatapointsDatasetsFunction$Outbound;
}

export function bulkCreateDatapointsDatasetsFunctionToJSON(
  bulkCreateDatapointsDatasetsFunction: BulkCreateDatapointsDatasetsFunction,
): string {
  return JSON.stringify(
    BulkCreateDatapointsDatasetsFunction$outboundSchema.parse(
      bulkCreateDatapointsDatasetsFunction,
    ),
  );
}

export function bulkCreateDatapointsDatasetsFunctionFromJSON(
  jsonString: string,
): SafeParseResult<BulkCreateDatapointsDatasetsFunction, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      BulkCreateDatapointsDatasetsFunction$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'BulkCreateDatapointsDatasetsFunction' from JSON`,
  );
}

/** @internal */
export const BulkCreateDatapointsDatasetsToolCalls$inboundSchema: z.ZodType<
  BulkCreateDatapointsDatasetsToolCalls,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string().optional(),
  index: z.number().optional(),
  type: BulkCreateDatapointsDatasetsType$inboundSchema,
  function: z.lazy(() => BulkCreateDatapointsDatasetsFunction$inboundSchema),
});

/** @internal */
export type BulkCreateDatapointsDatasetsToolCalls$Outbound = {
  id?: string | undefined;
  index?: number | undefined;
  type: string;
  function: BulkCreateDatapointsDatasetsFunction$Outbound;
};

/** @internal */
export const BulkCreateDatapointsDatasetsToolCalls$outboundSchema: z.ZodType<
  BulkCreateDatapointsDatasetsToolCalls$Outbound,
  z.ZodTypeDef,
  BulkCreateDatapointsDatasetsToolCalls
> = z.object({
  id: z.string().optional(),
  index: z.number().optional(),
  type: BulkCreateDatapointsDatasetsType$outboundSchema,
  function: z.lazy(() => BulkCreateDatapointsDatasetsFunction$outboundSchema),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace BulkCreateDatapointsDatasetsToolCalls$ {
  /** @deprecated use `BulkCreateDatapointsDatasetsToolCalls$inboundSchema` instead. */
  export const inboundSchema =
    BulkCreateDatapointsDatasetsToolCalls$inboundSchema;
  /** @deprecated use `BulkCreateDatapointsDatasetsToolCalls$outboundSchema` instead. */
  export const outboundSchema =
    BulkCreateDatapointsDatasetsToolCalls$outboundSchema;
  /** @deprecated use `BulkCreateDatapointsDatasetsToolCalls$Outbound` instead. */
  export type Outbound = BulkCreateDatapointsDatasetsToolCalls$Outbound;
}

export function bulkCreateDatapointsDatasetsToolCallsToJSON(
  bulkCreateDatapointsDatasetsToolCalls: BulkCreateDatapointsDatasetsToolCalls,
): string {
  return JSON.stringify(
    BulkCreateDatapointsDatasetsToolCalls$outboundSchema.parse(
      bulkCreateDatapointsDatasetsToolCalls,
    ),
  );
}

export function bulkCreateDatapointsDatasetsToolCallsFromJSON(
  jsonString: string,
): SafeParseResult<BulkCreateDatapointsDatasetsToolCalls, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      BulkCreateDatapointsDatasetsToolCalls$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'BulkCreateDatapointsDatasetsToolCalls' from JSON`,
  );
}

/** @internal */
export const BulkCreateDatapointsDatasetsMessages$inboundSchema: z.ZodType<
  BulkCreateDatapointsDatasetsMessages,
  z.ZodTypeDef,
  unknown
> = z.object({
  role: BulkCreateDatapointsDatasetsRole$inboundSchema,
  content: z.union([
    z.string(),
    z.array(z.union([
      z.lazy(() => BulkCreateDatapoints2Datasets1$inboundSchema),
      z.lazy(() => BulkCreateDatapoints2Datasets2$inboundSchema),
    ])),
  ]),
  tool_calls: z.array(
    z.lazy(() => BulkCreateDatapointsDatasetsToolCalls$inboundSchema),
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    "tool_calls": "toolCalls",
  });
});

/** @internal */
export type BulkCreateDatapointsDatasetsMessages$Outbound = {
  role: string;
  content:
    | string
    | Array<
      | BulkCreateDatapoints2Datasets1$Outbound
      | BulkCreateDatapoints2Datasets2$Outbound
    >;
  tool_calls?:
    | Array<BulkCreateDatapointsDatasetsToolCalls$Outbound>
    | undefined;
};

/** @internal */
export const BulkCreateDatapointsDatasetsMessages$outboundSchema: z.ZodType<
  BulkCreateDatapointsDatasetsMessages$Outbound,
  z.ZodTypeDef,
  BulkCreateDatapointsDatasetsMessages
> = z.object({
  role: BulkCreateDatapointsDatasetsRole$outboundSchema,
  content: z.union([
    z.string(),
    z.array(z.union([
      z.lazy(() => BulkCreateDatapoints2Datasets1$outboundSchema),
      z.lazy(() => BulkCreateDatapoints2Datasets2$outboundSchema),
    ])),
  ]),
  toolCalls: z.array(
    z.lazy(() => BulkCreateDatapointsDatasetsToolCalls$outboundSchema),
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    toolCalls: "tool_calls",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace BulkCreateDatapointsDatasetsMessages$ {
  /** @deprecated use `BulkCreateDatapointsDatasetsMessages$inboundSchema` instead. */
  export const inboundSchema =
    BulkCreateDatapointsDatasetsMessages$inboundSchema;
  /** @deprecated use `BulkCreateDatapointsDatasetsMessages$outboundSchema` instead. */
  export const outboundSchema =
    BulkCreateDatapointsDatasetsMessages$outboundSchema;
  /** @deprecated use `BulkCreateDatapointsDatasetsMessages$Outbound` instead. */
  export type Outbound = BulkCreateDatapointsDatasetsMessages$Outbound;
}

export function bulkCreateDatapointsDatasetsMessagesToJSON(
  bulkCreateDatapointsDatasetsMessages: BulkCreateDatapointsDatasetsMessages,
): string {
  return JSON.stringify(
    BulkCreateDatapointsDatasetsMessages$outboundSchema.parse(
      bulkCreateDatapointsDatasetsMessages,
    ),
  );
}

export function bulkCreateDatapointsDatasetsMessagesFromJSON(
  jsonString: string,
): SafeParseResult<BulkCreateDatapointsDatasetsMessages, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      BulkCreateDatapointsDatasetsMessages$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'BulkCreateDatapointsDatasetsMessages' from JSON`,
  );
}

/** @internal */
export const ResponseBody$inboundSchema: z.ZodType<
  ResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  _id: z.string(),
  workspace_id: z.string(),
  inputs: z.record(z.any()).optional(),
  messages: z.array(
    z.lazy(() => BulkCreateDatapointsDatasetsMessages$inboundSchema),
  ).optional(),
  expected_output: z.string().optional(),
  dataset_id: z.string(),
  created_by_id: z.string().optional(),
  updated_by_id: z.string().optional(),
  created: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
  updated: z.string().datetime({ offset: true }).default(
    "2025-04-07T17:38:38.902Z",
  ).transform(v => new Date(v)),
}).transform((v) => {
  return remap$(v, {
    "_id": "id",
    "workspace_id": "workspaceId",
    "expected_output": "expectedOutput",
    "dataset_id": "datasetId",
    "created_by_id": "createdById",
    "updated_by_id": "updatedById",
  });
});

/** @internal */
export type ResponseBody$Outbound = {
  _id: string;
  workspace_id: string;
  inputs?: { [k: string]: any } | undefined;
  messages?: Array<BulkCreateDatapointsDatasetsMessages$Outbound> | undefined;
  expected_output?: string | undefined;
  dataset_id: string;
  created_by_id?: string | undefined;
  updated_by_id?: string | undefined;
  created?: string | undefined;
  updated: string;
};

/** @internal */
export const ResponseBody$outboundSchema: z.ZodType<
  ResponseBody$Outbound,
  z.ZodTypeDef,
  ResponseBody
> = z.object({
  id: z.string(),
  workspaceId: z.string(),
  inputs: z.record(z.any()).optional(),
  messages: z.array(
    z.lazy(() => BulkCreateDatapointsDatasetsMessages$outboundSchema),
  ).optional(),
  expectedOutput: z.string().optional(),
  datasetId: z.string(),
  createdById: z.string().optional(),
  updatedById: z.string().optional(),
  created: z.date().transform(v => v.toISOString()).optional(),
  updated: z.date().default(() => new Date("2025-04-07T17:38:38.902Z"))
    .transform(v => v.toISOString()),
}).transform((v) => {
  return remap$(v, {
    id: "_id",
    workspaceId: "workspace_id",
    expectedOutput: "expected_output",
    datasetId: "dataset_id",
    createdById: "created_by_id",
    updatedById: "updated_by_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ResponseBody$ {
  /** @deprecated use `ResponseBody$inboundSchema` instead. */
  export const inboundSchema = ResponseBody$inboundSchema;
  /** @deprecated use `ResponseBody$outboundSchema` instead. */
  export const outboundSchema = ResponseBody$outboundSchema;
  /** @deprecated use `ResponseBody$Outbound` instead. */
  export type Outbound = ResponseBody$Outbound;
}

export function responseBodyToJSON(responseBody: ResponseBody): string {
  return JSON.stringify(ResponseBody$outboundSchema.parse(responseBody));
}

export function responseBodyFromJSON(
  jsonString: string,
): SafeParseResult<ResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ResponseBody' from JSON`,
  );
}
