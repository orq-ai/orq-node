/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type ListActionsRequest = {
  agentKey: string;
  taskId: string;
};

export const ListActionsObject = {
  List: "list",
} as const;
export type ListActionsObject = ClosedEnum<typeof ListActionsObject>;

export type ListActionsTool = {
  /**
   * The tool' id in orq
   */
  id: string;
  displayName: string;
  requiresApproval?: boolean | undefined;
};

export const ListActionsReview = {
  Approved: "approved",
  Rejected: "rejected",
} as const;
export type ListActionsReview = ClosedEnum<typeof ListActionsReview>;

/**
 * An action is a tool that an agent chooses to use. If executed is false, together with the output being there, it can indicate that a tool was mocked
 */
export type ListActionsState = {
  review?: ListActionsReview | null | undefined;
  /**
   * The source of the review, where it was approved or rejected
   */
  reviewSource?: string | undefined;
  /**
   * Only refers to an internal user of the platform, who approved or rejected the tool execution
   */
  reviewedById?: string | undefined;
  executed?: boolean | undefined;
  error?: string | undefined;
  input: { [k: string]: any };
  output: { [k: string]: any };
};

export type ListActionsData = {
  /**
   * Internal id for the action
   */
  id: string;
  /**
   * The tool call id what the agent chooses to use and generates
   */
  agentToolCallId: string;
  tool: ListActionsTool;
  created: string;
  updated: string;
  started?: string | undefined;
  finished?: string | undefined;
  agentId: string;
  actionType: string;
  agentExecutionId: string;
  workspaceId: string;
  /**
   * An action is a tool that an agent chooses to use. If executed is false, together with the output being there, it can indicate that a tool was mocked
   */
  state: ListActionsState;
};

/**
 * List of actions
 */
export type ListActionsResponseBody = {
  object: ListActionsObject;
  data: Array<ListActionsData>;
  hasMore: boolean;
};

/** @internal */
export const ListActionsRequest$inboundSchema: z.ZodType<
  ListActionsRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  agent_key: z.string(),
  task_id: z.string(),
}).transform((v) => {
  return remap$(v, {
    "agent_key": "agentKey",
    "task_id": "taskId",
  });
});

/** @internal */
export type ListActionsRequest$Outbound = {
  agent_key: string;
  task_id: string;
};

/** @internal */
export const ListActionsRequest$outboundSchema: z.ZodType<
  ListActionsRequest$Outbound,
  z.ZodTypeDef,
  ListActionsRequest
> = z.object({
  agentKey: z.string(),
  taskId: z.string(),
}).transform((v) => {
  return remap$(v, {
    agentKey: "agent_key",
    taskId: "task_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListActionsRequest$ {
  /** @deprecated use `ListActionsRequest$inboundSchema` instead. */
  export const inboundSchema = ListActionsRequest$inboundSchema;
  /** @deprecated use `ListActionsRequest$outboundSchema` instead. */
  export const outboundSchema = ListActionsRequest$outboundSchema;
  /** @deprecated use `ListActionsRequest$Outbound` instead. */
  export type Outbound = ListActionsRequest$Outbound;
}

export function listActionsRequestToJSON(
  listActionsRequest: ListActionsRequest,
): string {
  return JSON.stringify(
    ListActionsRequest$outboundSchema.parse(listActionsRequest),
  );
}

export function listActionsRequestFromJSON(
  jsonString: string,
): SafeParseResult<ListActionsRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListActionsRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListActionsRequest' from JSON`,
  );
}

/** @internal */
export const ListActionsObject$inboundSchema: z.ZodNativeEnum<
  typeof ListActionsObject
> = z.nativeEnum(ListActionsObject);

/** @internal */
export const ListActionsObject$outboundSchema: z.ZodNativeEnum<
  typeof ListActionsObject
> = ListActionsObject$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListActionsObject$ {
  /** @deprecated use `ListActionsObject$inboundSchema` instead. */
  export const inboundSchema = ListActionsObject$inboundSchema;
  /** @deprecated use `ListActionsObject$outboundSchema` instead. */
  export const outboundSchema = ListActionsObject$outboundSchema;
}

/** @internal */
export const ListActionsTool$inboundSchema: z.ZodType<
  ListActionsTool,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  display_name: z.string(),
  requires_approval: z.boolean().default(false),
}).transform((v) => {
  return remap$(v, {
    "display_name": "displayName",
    "requires_approval": "requiresApproval",
  });
});

/** @internal */
export type ListActionsTool$Outbound = {
  id: string;
  display_name: string;
  requires_approval: boolean;
};

/** @internal */
export const ListActionsTool$outboundSchema: z.ZodType<
  ListActionsTool$Outbound,
  z.ZodTypeDef,
  ListActionsTool
> = z.object({
  id: z.string(),
  displayName: z.string(),
  requiresApproval: z.boolean().default(false),
}).transform((v) => {
  return remap$(v, {
    displayName: "display_name",
    requiresApproval: "requires_approval",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListActionsTool$ {
  /** @deprecated use `ListActionsTool$inboundSchema` instead. */
  export const inboundSchema = ListActionsTool$inboundSchema;
  /** @deprecated use `ListActionsTool$outboundSchema` instead. */
  export const outboundSchema = ListActionsTool$outboundSchema;
  /** @deprecated use `ListActionsTool$Outbound` instead. */
  export type Outbound = ListActionsTool$Outbound;
}

export function listActionsToolToJSON(
  listActionsTool: ListActionsTool,
): string {
  return JSON.stringify(ListActionsTool$outboundSchema.parse(listActionsTool));
}

export function listActionsToolFromJSON(
  jsonString: string,
): SafeParseResult<ListActionsTool, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListActionsTool$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListActionsTool' from JSON`,
  );
}

/** @internal */
export const ListActionsReview$inboundSchema: z.ZodNativeEnum<
  typeof ListActionsReview
> = z.nativeEnum(ListActionsReview);

/** @internal */
export const ListActionsReview$outboundSchema: z.ZodNativeEnum<
  typeof ListActionsReview
> = ListActionsReview$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListActionsReview$ {
  /** @deprecated use `ListActionsReview$inboundSchema` instead. */
  export const inboundSchema = ListActionsReview$inboundSchema;
  /** @deprecated use `ListActionsReview$outboundSchema` instead. */
  export const outboundSchema = ListActionsReview$outboundSchema;
}

/** @internal */
export const ListActionsState$inboundSchema: z.ZodType<
  ListActionsState,
  z.ZodTypeDef,
  unknown
> = z.object({
  review: z.nullable(ListActionsReview$inboundSchema).optional(),
  review_source: z.string().optional(),
  reviewed_by_id: z.string().optional(),
  executed: z.boolean().default(false),
  error: z.string().optional(),
  input: z.record(z.any()),
  output: z.record(z.any()),
}).transform((v) => {
  return remap$(v, {
    "review_source": "reviewSource",
    "reviewed_by_id": "reviewedById",
  });
});

/** @internal */
export type ListActionsState$Outbound = {
  review?: string | null | undefined;
  review_source?: string | undefined;
  reviewed_by_id?: string | undefined;
  executed: boolean;
  error?: string | undefined;
  input: { [k: string]: any };
  output: { [k: string]: any };
};

/** @internal */
export const ListActionsState$outboundSchema: z.ZodType<
  ListActionsState$Outbound,
  z.ZodTypeDef,
  ListActionsState
> = z.object({
  review: z.nullable(ListActionsReview$outboundSchema).optional(),
  reviewSource: z.string().optional(),
  reviewedById: z.string().optional(),
  executed: z.boolean().default(false),
  error: z.string().optional(),
  input: z.record(z.any()),
  output: z.record(z.any()),
}).transform((v) => {
  return remap$(v, {
    reviewSource: "review_source",
    reviewedById: "reviewed_by_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListActionsState$ {
  /** @deprecated use `ListActionsState$inboundSchema` instead. */
  export const inboundSchema = ListActionsState$inboundSchema;
  /** @deprecated use `ListActionsState$outboundSchema` instead. */
  export const outboundSchema = ListActionsState$outboundSchema;
  /** @deprecated use `ListActionsState$Outbound` instead. */
  export type Outbound = ListActionsState$Outbound;
}

export function listActionsStateToJSON(
  listActionsState: ListActionsState,
): string {
  return JSON.stringify(
    ListActionsState$outboundSchema.parse(listActionsState),
  );
}

export function listActionsStateFromJSON(
  jsonString: string,
): SafeParseResult<ListActionsState, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListActionsState$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListActionsState' from JSON`,
  );
}

/** @internal */
export const ListActionsData$inboundSchema: z.ZodType<
  ListActionsData,
  z.ZodTypeDef,
  unknown
> = z.object({
  _id: z.string(),
  agent_tool_call_id: z.string(),
  tool: z.lazy(() => ListActionsTool$inboundSchema),
  created: z.string(),
  updated: z.string(),
  started: z.string().optional(),
  finished: z.string().optional(),
  agent_id: z.string(),
  action_type: z.string(),
  agent_execution_id: z.string(),
  workspace_id: z.string(),
  state: z.lazy(() => ListActionsState$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "_id": "id",
    "agent_tool_call_id": "agentToolCallId",
    "agent_id": "agentId",
    "action_type": "actionType",
    "agent_execution_id": "agentExecutionId",
    "workspace_id": "workspaceId",
  });
});

/** @internal */
export type ListActionsData$Outbound = {
  _id: string;
  agent_tool_call_id: string;
  tool: ListActionsTool$Outbound;
  created: string;
  updated: string;
  started?: string | undefined;
  finished?: string | undefined;
  agent_id: string;
  action_type: string;
  agent_execution_id: string;
  workspace_id: string;
  state: ListActionsState$Outbound;
};

/** @internal */
export const ListActionsData$outboundSchema: z.ZodType<
  ListActionsData$Outbound,
  z.ZodTypeDef,
  ListActionsData
> = z.object({
  id: z.string(),
  agentToolCallId: z.string(),
  tool: z.lazy(() => ListActionsTool$outboundSchema),
  created: z.string(),
  updated: z.string(),
  started: z.string().optional(),
  finished: z.string().optional(),
  agentId: z.string(),
  actionType: z.string(),
  agentExecutionId: z.string(),
  workspaceId: z.string(),
  state: z.lazy(() => ListActionsState$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    id: "_id",
    agentToolCallId: "agent_tool_call_id",
    agentId: "agent_id",
    actionType: "action_type",
    agentExecutionId: "agent_execution_id",
    workspaceId: "workspace_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListActionsData$ {
  /** @deprecated use `ListActionsData$inboundSchema` instead. */
  export const inboundSchema = ListActionsData$inboundSchema;
  /** @deprecated use `ListActionsData$outboundSchema` instead. */
  export const outboundSchema = ListActionsData$outboundSchema;
  /** @deprecated use `ListActionsData$Outbound` instead. */
  export type Outbound = ListActionsData$Outbound;
}

export function listActionsDataToJSON(
  listActionsData: ListActionsData,
): string {
  return JSON.stringify(ListActionsData$outboundSchema.parse(listActionsData));
}

export function listActionsDataFromJSON(
  jsonString: string,
): SafeParseResult<ListActionsData, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListActionsData$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListActionsData' from JSON`,
  );
}

/** @internal */
export const ListActionsResponseBody$inboundSchema: z.ZodType<
  ListActionsResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  object: ListActionsObject$inboundSchema,
  data: z.array(z.lazy(() => ListActionsData$inboundSchema)),
  has_more: z.boolean(),
}).transform((v) => {
  return remap$(v, {
    "has_more": "hasMore",
  });
});

/** @internal */
export type ListActionsResponseBody$Outbound = {
  object: string;
  data: Array<ListActionsData$Outbound>;
  has_more: boolean;
};

/** @internal */
export const ListActionsResponseBody$outboundSchema: z.ZodType<
  ListActionsResponseBody$Outbound,
  z.ZodTypeDef,
  ListActionsResponseBody
> = z.object({
  object: ListActionsObject$outboundSchema,
  data: z.array(z.lazy(() => ListActionsData$outboundSchema)),
  hasMore: z.boolean(),
}).transform((v) => {
  return remap$(v, {
    hasMore: "has_more",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListActionsResponseBody$ {
  /** @deprecated use `ListActionsResponseBody$inboundSchema` instead. */
  export const inboundSchema = ListActionsResponseBody$inboundSchema;
  /** @deprecated use `ListActionsResponseBody$outboundSchema` instead. */
  export const outboundSchema = ListActionsResponseBody$outboundSchema;
  /** @deprecated use `ListActionsResponseBody$Outbound` instead. */
  export type Outbound = ListActionsResponseBody$Outbound;
}

export function listActionsResponseBodyToJSON(
  listActionsResponseBody: ListActionsResponseBody,
): string {
  return JSON.stringify(
    ListActionsResponseBody$outboundSchema.parse(listActionsResponseBody),
  );
}

export function listActionsResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<ListActionsResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListActionsResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListActionsResponseBody' from JSON`,
  );
}
