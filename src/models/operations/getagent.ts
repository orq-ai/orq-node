/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type GetAgentRequest = {
  /**
   * The unique key of the agent to retrieve
   */
  agentKey: string;
};

/**
 * The status of the agent. `Live` is the latest version of the agent. `Draft` is a version that is not yet published. `Pending` is a version that is pending approval. `Published` is a version that was live and has been replaced by a new version.
 */
export const GetAgentStatus = {
  Live: "live",
  Draft: "draft",
  Pending: "pending",
  Published: "published",
} as const;
/**
 * The status of the agent. `Live` is the latest version of the agent. `Draft` is a version that is not yet published. `Pending` is a version that is pending approval. `Published` is a version that was live and has been replaced by a new version.
 */
export type GetAgentStatus = ClosedEnum<typeof GetAgentStatus>;

/**
 * If all, the agent will require approval for all tools. If respect_tool, the agent will require approval for tools that have the requires_approval flag set to true. If none, the agent will not require approval for any tools.
 */
export const GetAgentToolApprovalRequired = {
  All: "all",
  RespectTool: "respect_tool",
  None: "none",
} as const;
/**
 * If all, the agent will require approval for all tools. If respect_tool, the agent will require approval for tools that have the requires_approval flag set to true. If none, the agent will not require approval for any tools.
 */
export type GetAgentToolApprovalRequired = ClosedEnum<
  typeof GetAgentToolApprovalRequired
>;

export type GetAgentConditions = {
  /**
   * The argument of the tool call to evaluate
   */
  condition: string;
  /**
   * The operator to use
   */
  operator: string;
  /**
   * The value to compare against
   */
  value: string;
};

export type GetAgentTools = {
  /**
   * The id of the resource
   */
  id: string;
  /**
   * Optional tool key for custom tools
   */
  key?: string | undefined;
  actionType: string;
  displayName?: string | undefined;
  requiresApproval?: boolean | undefined;
  conditions?: Array<GetAgentConditions> | undefined;
  /**
   * Optional MCP server reference for tools from MCP servers
   */
  mcpServer?: string | undefined;
  /**
   * Tool execution timeout in seconds (default: 2 minutes, max: 10 minutes)
   */
  timeout?: number | undefined;
};

export type GetAgentSettings = {
  /**
   * Maximum iterations(llm calls) before the agent will stop executing.
   */
  maxIterations?: number | undefined;
  /**
   * Maximum time (in seconds) for the agent thinking process. This does not include the time for tool calls and sub agent calls. It will be loosely enforced, the in progress LLM calls will not be terminated and the last assistant message will be returned.
   */
  maxExecutionTime?: number | undefined;
  /**
   * If all, the agent will require approval for all tools. If respect_tool, the agent will require approval for tools that have the requires_approval flag set to true. If none, the agent will not require approval for any tools.
   */
  toolApprovalRequired?: GetAgentToolApprovalRequired | undefined;
  tools?: Array<GetAgentTools> | undefined;
};

export type GetAgentModel = {
  /**
   * The database ID of the primary model
   */
  id: string;
  /**
   * Optional integration ID for custom model configurations
   */
  integrationId?: string | null | undefined;
  /**
   * Optional array of fallback model IDs that will be used automatically in order if the primary model fails
   */
  fallbackModels?: Array<string> | null | undefined;
  /**
   * Maximum number of tokens for model responses
   */
  maxTokens?: number | undefined;
  /**
   * Temperature setting for model responses
   */
  temperature?: number | undefined;
};

export type GetAgentTeamOfAgents = {
  /**
   * The unique key of the agent within the workspace
   */
  key: string;
  /**
   * The role of the agent in this context. This is used to give extra information to the leader to help it decide which agent to hand off to.
   */
  role?: string | undefined;
};

export type GetAgentMetrics = {
  totalCost?: number | undefined;
};

export type GetAgentKnowledgeBases = {
  /**
   * Unique identifier of the knowledge base to search
   */
  knowledgeId: string;
};

export const GetAgentHiddenPanels = {
  Model: "model",
  Tools: "tools",
  KnowledgeBases: "knowledge_bases",
  Variables: "variables",
  RuntimeConstraints: "runtime_constraints",
} as const;
export type GetAgentHiddenPanels = ClosedEnum<typeof GetAgentHiddenPanels>;

/**
 * Agent retrieved successfully
 */
export type GetAgentResponseBody = {
  id: string;
  key: string;
  workspaceId: string;
  projectId: string;
  createdById?: string | null | undefined;
  updatedById?: string | null | undefined;
  created?: string | undefined;
  updated?: string | undefined;
  role: string;
  description: string;
  systemPrompt?: string | undefined;
  instructions: string;
  /**
   * The status of the agent. `Live` is the latest version of the agent. `Draft` is a version that is not yet published. `Pending` is a version that is pending approval. `Published` is a version that was live and has been replaced by a new version.
   */
  status: GetAgentStatus;
  settings?: GetAgentSettings | undefined;
  model: GetAgentModel;
  versionHash?: string | undefined;
  /**
   * Entity storage path in the format: `project/folder/subfolder/...`
   *
   * @remarks
   *
   * The first element identifies the project, followed by nested folders (auto-created as needed).
   *
   * With project-based API keys, the first element is treated as a folder name, as the project is predetermined by the API key.
   */
  path: string;
  memoryStores: Array<string>;
  /**
   * The agents that are accessible to this orchestrator. The main agent can hand off to these agents to perform tasks.
   */
  teamOfAgents: Array<GetAgentTeamOfAgents>;
  metrics?: GetAgentMetrics | undefined;
  /**
   * Extracted variables from agent instructions
   */
  variables?: { [k: string]: any } | undefined;
  /**
   * Agent knowledge bases reference
   */
  knowledgeBases?: Array<GetAgentKnowledgeBases> | undefined;
  /**
   * List of hidden collapsed panels in configuration. Duplicates are not allowed.
   */
  hiddenPanels?: Array<GetAgentHiddenPanels> | undefined;
};

/** @internal */
export const GetAgentRequest$inboundSchema: z.ZodType<
  GetAgentRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  agent_key: z.string(),
}).transform((v) => {
  return remap$(v, {
    "agent_key": "agentKey",
  });
});

/** @internal */
export type GetAgentRequest$Outbound = {
  agent_key: string;
};

/** @internal */
export const GetAgentRequest$outboundSchema: z.ZodType<
  GetAgentRequest$Outbound,
  z.ZodTypeDef,
  GetAgentRequest
> = z.object({
  agentKey: z.string(),
}).transform((v) => {
  return remap$(v, {
    agentKey: "agent_key",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAgentRequest$ {
  /** @deprecated use `GetAgentRequest$inboundSchema` instead. */
  export const inboundSchema = GetAgentRequest$inboundSchema;
  /** @deprecated use `GetAgentRequest$outboundSchema` instead. */
  export const outboundSchema = GetAgentRequest$outboundSchema;
  /** @deprecated use `GetAgentRequest$Outbound` instead. */
  export type Outbound = GetAgentRequest$Outbound;
}

export function getAgentRequestToJSON(
  getAgentRequest: GetAgentRequest,
): string {
  return JSON.stringify(GetAgentRequest$outboundSchema.parse(getAgentRequest));
}

export function getAgentRequestFromJSON(
  jsonString: string,
): SafeParseResult<GetAgentRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetAgentRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetAgentRequest' from JSON`,
  );
}

/** @internal */
export const GetAgentStatus$inboundSchema: z.ZodNativeEnum<
  typeof GetAgentStatus
> = z.nativeEnum(GetAgentStatus);

/** @internal */
export const GetAgentStatus$outboundSchema: z.ZodNativeEnum<
  typeof GetAgentStatus
> = GetAgentStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAgentStatus$ {
  /** @deprecated use `GetAgentStatus$inboundSchema` instead. */
  export const inboundSchema = GetAgentStatus$inboundSchema;
  /** @deprecated use `GetAgentStatus$outboundSchema` instead. */
  export const outboundSchema = GetAgentStatus$outboundSchema;
}

/** @internal */
export const GetAgentToolApprovalRequired$inboundSchema: z.ZodNativeEnum<
  typeof GetAgentToolApprovalRequired
> = z.nativeEnum(GetAgentToolApprovalRequired);

/** @internal */
export const GetAgentToolApprovalRequired$outboundSchema: z.ZodNativeEnum<
  typeof GetAgentToolApprovalRequired
> = GetAgentToolApprovalRequired$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAgentToolApprovalRequired$ {
  /** @deprecated use `GetAgentToolApprovalRequired$inboundSchema` instead. */
  export const inboundSchema = GetAgentToolApprovalRequired$inboundSchema;
  /** @deprecated use `GetAgentToolApprovalRequired$outboundSchema` instead. */
  export const outboundSchema = GetAgentToolApprovalRequired$outboundSchema;
}

/** @internal */
export const GetAgentConditions$inboundSchema: z.ZodType<
  GetAgentConditions,
  z.ZodTypeDef,
  unknown
> = z.object({
  condition: z.string(),
  operator: z.string(),
  value: z.string(),
});

/** @internal */
export type GetAgentConditions$Outbound = {
  condition: string;
  operator: string;
  value: string;
};

/** @internal */
export const GetAgentConditions$outboundSchema: z.ZodType<
  GetAgentConditions$Outbound,
  z.ZodTypeDef,
  GetAgentConditions
> = z.object({
  condition: z.string(),
  operator: z.string(),
  value: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAgentConditions$ {
  /** @deprecated use `GetAgentConditions$inboundSchema` instead. */
  export const inboundSchema = GetAgentConditions$inboundSchema;
  /** @deprecated use `GetAgentConditions$outboundSchema` instead. */
  export const outboundSchema = GetAgentConditions$outboundSchema;
  /** @deprecated use `GetAgentConditions$Outbound` instead. */
  export type Outbound = GetAgentConditions$Outbound;
}

export function getAgentConditionsToJSON(
  getAgentConditions: GetAgentConditions,
): string {
  return JSON.stringify(
    GetAgentConditions$outboundSchema.parse(getAgentConditions),
  );
}

export function getAgentConditionsFromJSON(
  jsonString: string,
): SafeParseResult<GetAgentConditions, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetAgentConditions$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetAgentConditions' from JSON`,
  );
}

/** @internal */
export const GetAgentTools$inboundSchema: z.ZodType<
  GetAgentTools,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  key: z.string().optional(),
  action_type: z.string(),
  display_name: z.string().optional(),
  requires_approval: z.boolean().default(false),
  conditions: z.array(z.lazy(() => GetAgentConditions$inboundSchema))
    .optional(),
  mcpServer: z.string().optional(),
  timeout: z.number().default(120),
}).transform((v) => {
  return remap$(v, {
    "action_type": "actionType",
    "display_name": "displayName",
    "requires_approval": "requiresApproval",
  });
});

/** @internal */
export type GetAgentTools$Outbound = {
  id: string;
  key?: string | undefined;
  action_type: string;
  display_name?: string | undefined;
  requires_approval: boolean;
  conditions?: Array<GetAgentConditions$Outbound> | undefined;
  mcpServer?: string | undefined;
  timeout: number;
};

/** @internal */
export const GetAgentTools$outboundSchema: z.ZodType<
  GetAgentTools$Outbound,
  z.ZodTypeDef,
  GetAgentTools
> = z.object({
  id: z.string(),
  key: z.string().optional(),
  actionType: z.string(),
  displayName: z.string().optional(),
  requiresApproval: z.boolean().default(false),
  conditions: z.array(z.lazy(() => GetAgentConditions$outboundSchema))
    .optional(),
  mcpServer: z.string().optional(),
  timeout: z.number().default(120),
}).transform((v) => {
  return remap$(v, {
    actionType: "action_type",
    displayName: "display_name",
    requiresApproval: "requires_approval",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAgentTools$ {
  /** @deprecated use `GetAgentTools$inboundSchema` instead. */
  export const inboundSchema = GetAgentTools$inboundSchema;
  /** @deprecated use `GetAgentTools$outboundSchema` instead. */
  export const outboundSchema = GetAgentTools$outboundSchema;
  /** @deprecated use `GetAgentTools$Outbound` instead. */
  export type Outbound = GetAgentTools$Outbound;
}

export function getAgentToolsToJSON(getAgentTools: GetAgentTools): string {
  return JSON.stringify(GetAgentTools$outboundSchema.parse(getAgentTools));
}

export function getAgentToolsFromJSON(
  jsonString: string,
): SafeParseResult<GetAgentTools, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetAgentTools$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetAgentTools' from JSON`,
  );
}

/** @internal */
export const GetAgentSettings$inboundSchema: z.ZodType<
  GetAgentSettings,
  z.ZodTypeDef,
  unknown
> = z.object({
  max_iterations: z.number().int().default(15),
  max_execution_time: z.number().int().default(300),
  tool_approval_required: GetAgentToolApprovalRequired$inboundSchema.default(
    "respect_tool",
  ),
  tools: z.array(z.lazy(() => GetAgentTools$inboundSchema)).optional(),
}).transform((v) => {
  return remap$(v, {
    "max_iterations": "maxIterations",
    "max_execution_time": "maxExecutionTime",
    "tool_approval_required": "toolApprovalRequired",
  });
});

/** @internal */
export type GetAgentSettings$Outbound = {
  max_iterations: number;
  max_execution_time: number;
  tool_approval_required: string;
  tools?: Array<GetAgentTools$Outbound> | undefined;
};

/** @internal */
export const GetAgentSettings$outboundSchema: z.ZodType<
  GetAgentSettings$Outbound,
  z.ZodTypeDef,
  GetAgentSettings
> = z.object({
  maxIterations: z.number().int().default(15),
  maxExecutionTime: z.number().int().default(300),
  toolApprovalRequired: GetAgentToolApprovalRequired$outboundSchema.default(
    "respect_tool",
  ),
  tools: z.array(z.lazy(() => GetAgentTools$outboundSchema)).optional(),
}).transform((v) => {
  return remap$(v, {
    maxIterations: "max_iterations",
    maxExecutionTime: "max_execution_time",
    toolApprovalRequired: "tool_approval_required",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAgentSettings$ {
  /** @deprecated use `GetAgentSettings$inboundSchema` instead. */
  export const inboundSchema = GetAgentSettings$inboundSchema;
  /** @deprecated use `GetAgentSettings$outboundSchema` instead. */
  export const outboundSchema = GetAgentSettings$outboundSchema;
  /** @deprecated use `GetAgentSettings$Outbound` instead. */
  export type Outbound = GetAgentSettings$Outbound;
}

export function getAgentSettingsToJSON(
  getAgentSettings: GetAgentSettings,
): string {
  return JSON.stringify(
    GetAgentSettings$outboundSchema.parse(getAgentSettings),
  );
}

export function getAgentSettingsFromJSON(
  jsonString: string,
): SafeParseResult<GetAgentSettings, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetAgentSettings$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetAgentSettings' from JSON`,
  );
}

/** @internal */
export const GetAgentModel$inboundSchema: z.ZodType<
  GetAgentModel,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  integration_id: z.nullable(z.string()).optional(),
  fallback_models: z.nullable(z.array(z.string())).optional(),
  max_tokens: z.number().int().optional(),
  temperature: z.number().optional(),
}).transform((v) => {
  return remap$(v, {
    "integration_id": "integrationId",
    "fallback_models": "fallbackModels",
    "max_tokens": "maxTokens",
  });
});

/** @internal */
export type GetAgentModel$Outbound = {
  id: string;
  integration_id?: string | null | undefined;
  fallback_models?: Array<string> | null | undefined;
  max_tokens?: number | undefined;
  temperature?: number | undefined;
};

/** @internal */
export const GetAgentModel$outboundSchema: z.ZodType<
  GetAgentModel$Outbound,
  z.ZodTypeDef,
  GetAgentModel
> = z.object({
  id: z.string(),
  integrationId: z.nullable(z.string()).optional(),
  fallbackModels: z.nullable(z.array(z.string())).optional(),
  maxTokens: z.number().int().optional(),
  temperature: z.number().optional(),
}).transform((v) => {
  return remap$(v, {
    integrationId: "integration_id",
    fallbackModels: "fallback_models",
    maxTokens: "max_tokens",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAgentModel$ {
  /** @deprecated use `GetAgentModel$inboundSchema` instead. */
  export const inboundSchema = GetAgentModel$inboundSchema;
  /** @deprecated use `GetAgentModel$outboundSchema` instead. */
  export const outboundSchema = GetAgentModel$outboundSchema;
  /** @deprecated use `GetAgentModel$Outbound` instead. */
  export type Outbound = GetAgentModel$Outbound;
}

export function getAgentModelToJSON(getAgentModel: GetAgentModel): string {
  return JSON.stringify(GetAgentModel$outboundSchema.parse(getAgentModel));
}

export function getAgentModelFromJSON(
  jsonString: string,
): SafeParseResult<GetAgentModel, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetAgentModel$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetAgentModel' from JSON`,
  );
}

/** @internal */
export const GetAgentTeamOfAgents$inboundSchema: z.ZodType<
  GetAgentTeamOfAgents,
  z.ZodTypeDef,
  unknown
> = z.object({
  key: z.string(),
  role: z.string().optional(),
});

/** @internal */
export type GetAgentTeamOfAgents$Outbound = {
  key: string;
  role?: string | undefined;
};

/** @internal */
export const GetAgentTeamOfAgents$outboundSchema: z.ZodType<
  GetAgentTeamOfAgents$Outbound,
  z.ZodTypeDef,
  GetAgentTeamOfAgents
> = z.object({
  key: z.string(),
  role: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAgentTeamOfAgents$ {
  /** @deprecated use `GetAgentTeamOfAgents$inboundSchema` instead. */
  export const inboundSchema = GetAgentTeamOfAgents$inboundSchema;
  /** @deprecated use `GetAgentTeamOfAgents$outboundSchema` instead. */
  export const outboundSchema = GetAgentTeamOfAgents$outboundSchema;
  /** @deprecated use `GetAgentTeamOfAgents$Outbound` instead. */
  export type Outbound = GetAgentTeamOfAgents$Outbound;
}

export function getAgentTeamOfAgentsToJSON(
  getAgentTeamOfAgents: GetAgentTeamOfAgents,
): string {
  return JSON.stringify(
    GetAgentTeamOfAgents$outboundSchema.parse(getAgentTeamOfAgents),
  );
}

export function getAgentTeamOfAgentsFromJSON(
  jsonString: string,
): SafeParseResult<GetAgentTeamOfAgents, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetAgentTeamOfAgents$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetAgentTeamOfAgents' from JSON`,
  );
}

/** @internal */
export const GetAgentMetrics$inboundSchema: z.ZodType<
  GetAgentMetrics,
  z.ZodTypeDef,
  unknown
> = z.object({
  total_cost: z.number().default(0),
}).transform((v) => {
  return remap$(v, {
    "total_cost": "totalCost",
  });
});

/** @internal */
export type GetAgentMetrics$Outbound = {
  total_cost: number;
};

/** @internal */
export const GetAgentMetrics$outboundSchema: z.ZodType<
  GetAgentMetrics$Outbound,
  z.ZodTypeDef,
  GetAgentMetrics
> = z.object({
  totalCost: z.number().default(0),
}).transform((v) => {
  return remap$(v, {
    totalCost: "total_cost",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAgentMetrics$ {
  /** @deprecated use `GetAgentMetrics$inboundSchema` instead. */
  export const inboundSchema = GetAgentMetrics$inboundSchema;
  /** @deprecated use `GetAgentMetrics$outboundSchema` instead. */
  export const outboundSchema = GetAgentMetrics$outboundSchema;
  /** @deprecated use `GetAgentMetrics$Outbound` instead. */
  export type Outbound = GetAgentMetrics$Outbound;
}

export function getAgentMetricsToJSON(
  getAgentMetrics: GetAgentMetrics,
): string {
  return JSON.stringify(GetAgentMetrics$outboundSchema.parse(getAgentMetrics));
}

export function getAgentMetricsFromJSON(
  jsonString: string,
): SafeParseResult<GetAgentMetrics, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetAgentMetrics$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetAgentMetrics' from JSON`,
  );
}

/** @internal */
export const GetAgentKnowledgeBases$inboundSchema: z.ZodType<
  GetAgentKnowledgeBases,
  z.ZodTypeDef,
  unknown
> = z.object({
  knowledge_id: z.string(),
}).transform((v) => {
  return remap$(v, {
    "knowledge_id": "knowledgeId",
  });
});

/** @internal */
export type GetAgentKnowledgeBases$Outbound = {
  knowledge_id: string;
};

/** @internal */
export const GetAgentKnowledgeBases$outboundSchema: z.ZodType<
  GetAgentKnowledgeBases$Outbound,
  z.ZodTypeDef,
  GetAgentKnowledgeBases
> = z.object({
  knowledgeId: z.string(),
}).transform((v) => {
  return remap$(v, {
    knowledgeId: "knowledge_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAgentKnowledgeBases$ {
  /** @deprecated use `GetAgentKnowledgeBases$inboundSchema` instead. */
  export const inboundSchema = GetAgentKnowledgeBases$inboundSchema;
  /** @deprecated use `GetAgentKnowledgeBases$outboundSchema` instead. */
  export const outboundSchema = GetAgentKnowledgeBases$outboundSchema;
  /** @deprecated use `GetAgentKnowledgeBases$Outbound` instead. */
  export type Outbound = GetAgentKnowledgeBases$Outbound;
}

export function getAgentKnowledgeBasesToJSON(
  getAgentKnowledgeBases: GetAgentKnowledgeBases,
): string {
  return JSON.stringify(
    GetAgentKnowledgeBases$outboundSchema.parse(getAgentKnowledgeBases),
  );
}

export function getAgentKnowledgeBasesFromJSON(
  jsonString: string,
): SafeParseResult<GetAgentKnowledgeBases, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetAgentKnowledgeBases$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetAgentKnowledgeBases' from JSON`,
  );
}

/** @internal */
export const GetAgentHiddenPanels$inboundSchema: z.ZodNativeEnum<
  typeof GetAgentHiddenPanels
> = z.nativeEnum(GetAgentHiddenPanels);

/** @internal */
export const GetAgentHiddenPanels$outboundSchema: z.ZodNativeEnum<
  typeof GetAgentHiddenPanels
> = GetAgentHiddenPanels$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAgentHiddenPanels$ {
  /** @deprecated use `GetAgentHiddenPanels$inboundSchema` instead. */
  export const inboundSchema = GetAgentHiddenPanels$inboundSchema;
  /** @deprecated use `GetAgentHiddenPanels$outboundSchema` instead. */
  export const outboundSchema = GetAgentHiddenPanels$outboundSchema;
}

/** @internal */
export const GetAgentResponseBody$inboundSchema: z.ZodType<
  GetAgentResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  _id: z.string(),
  key: z.string(),
  workspace_id: z.string(),
  project_id: z.string(),
  created_by_id: z.nullable(z.string()).optional(),
  updated_by_id: z.nullable(z.string()).optional(),
  created: z.string().optional(),
  updated: z.string().optional(),
  role: z.string(),
  description: z.string(),
  system_prompt: z.string().optional(),
  instructions: z.string(),
  status: GetAgentStatus$inboundSchema,
  settings: z.lazy(() => GetAgentSettings$inboundSchema).optional(),
  model: z.lazy(() => GetAgentModel$inboundSchema),
  version_hash: z.string().optional(),
  path: z.string(),
  memory_stores: z.array(z.string()),
  team_of_agents: z.array(z.lazy(() => GetAgentTeamOfAgents$inboundSchema)),
  metrics: z.lazy(() => GetAgentMetrics$inboundSchema).optional(),
  variables: z.record(z.any()).optional(),
  knowledge_bases: z.array(z.lazy(() => GetAgentKnowledgeBases$inboundSchema))
    .optional(),
  hidden_panels: z.array(GetAgentHiddenPanels$inboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    "_id": "id",
    "workspace_id": "workspaceId",
    "project_id": "projectId",
    "created_by_id": "createdById",
    "updated_by_id": "updatedById",
    "system_prompt": "systemPrompt",
    "version_hash": "versionHash",
    "memory_stores": "memoryStores",
    "team_of_agents": "teamOfAgents",
    "knowledge_bases": "knowledgeBases",
    "hidden_panels": "hiddenPanels",
  });
});

/** @internal */
export type GetAgentResponseBody$Outbound = {
  _id: string;
  key: string;
  workspace_id: string;
  project_id: string;
  created_by_id?: string | null | undefined;
  updated_by_id?: string | null | undefined;
  created?: string | undefined;
  updated?: string | undefined;
  role: string;
  description: string;
  system_prompt?: string | undefined;
  instructions: string;
  status: string;
  settings?: GetAgentSettings$Outbound | undefined;
  model: GetAgentModel$Outbound;
  version_hash?: string | undefined;
  path: string;
  memory_stores: Array<string>;
  team_of_agents: Array<GetAgentTeamOfAgents$Outbound>;
  metrics?: GetAgentMetrics$Outbound | undefined;
  variables?: { [k: string]: any } | undefined;
  knowledge_bases?: Array<GetAgentKnowledgeBases$Outbound> | undefined;
  hidden_panels?: Array<string> | undefined;
};

/** @internal */
export const GetAgentResponseBody$outboundSchema: z.ZodType<
  GetAgentResponseBody$Outbound,
  z.ZodTypeDef,
  GetAgentResponseBody
> = z.object({
  id: z.string(),
  key: z.string(),
  workspaceId: z.string(),
  projectId: z.string(),
  createdById: z.nullable(z.string()).optional(),
  updatedById: z.nullable(z.string()).optional(),
  created: z.string().optional(),
  updated: z.string().optional(),
  role: z.string(),
  description: z.string(),
  systemPrompt: z.string().optional(),
  instructions: z.string(),
  status: GetAgentStatus$outboundSchema,
  settings: z.lazy(() => GetAgentSettings$outboundSchema).optional(),
  model: z.lazy(() => GetAgentModel$outboundSchema),
  versionHash: z.string().optional(),
  path: z.string(),
  memoryStores: z.array(z.string()),
  teamOfAgents: z.array(z.lazy(() => GetAgentTeamOfAgents$outboundSchema)),
  metrics: z.lazy(() => GetAgentMetrics$outboundSchema).optional(),
  variables: z.record(z.any()).optional(),
  knowledgeBases: z.array(z.lazy(() => GetAgentKnowledgeBases$outboundSchema))
    .optional(),
  hiddenPanels: z.array(GetAgentHiddenPanels$outboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    id: "_id",
    workspaceId: "workspace_id",
    projectId: "project_id",
    createdById: "created_by_id",
    updatedById: "updated_by_id",
    systemPrompt: "system_prompt",
    versionHash: "version_hash",
    memoryStores: "memory_stores",
    teamOfAgents: "team_of_agents",
    knowledgeBases: "knowledge_bases",
    hiddenPanels: "hidden_panels",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAgentResponseBody$ {
  /** @deprecated use `GetAgentResponseBody$inboundSchema` instead. */
  export const inboundSchema = GetAgentResponseBody$inboundSchema;
  /** @deprecated use `GetAgentResponseBody$outboundSchema` instead. */
  export const outboundSchema = GetAgentResponseBody$outboundSchema;
  /** @deprecated use `GetAgentResponseBody$Outbound` instead. */
  export type Outbound = GetAgentResponseBody$Outbound;
}

export function getAgentResponseBodyToJSON(
  getAgentResponseBody: GetAgentResponseBody,
): string {
  return JSON.stringify(
    GetAgentResponseBody$outboundSchema.parse(getAgentResponseBody),
  );
}

export function getAgentResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<GetAgentResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetAgentResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetAgentResponseBody' from JSON`,
  );
}
