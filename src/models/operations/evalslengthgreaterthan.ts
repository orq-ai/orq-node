/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type EvalsLengthGreaterThanFunctionParams = {
  length: number;
};

export type EvalsLengthGreaterThanRequestBody = {
  output: string;
  functionParams: EvalsLengthGreaterThanFunctionParams;
};

export type EvalsLengthGreaterThanValue = boolean | string | number;

/**
 * Returns the result of the evaluator run
 */
export type EvalsLengthGreaterThanResponseBody = {
  value: boolean | string | number | null;
};

/** @internal */
export const EvalsLengthGreaterThanFunctionParams$inboundSchema: z.ZodType<
  EvalsLengthGreaterThanFunctionParams,
  z.ZodTypeDef,
  unknown
> = z.object({
  length: z.number(),
});

/** @internal */
export type EvalsLengthGreaterThanFunctionParams$Outbound = {
  length: number;
};

/** @internal */
export const EvalsLengthGreaterThanFunctionParams$outboundSchema: z.ZodType<
  EvalsLengthGreaterThanFunctionParams$Outbound,
  z.ZodTypeDef,
  EvalsLengthGreaterThanFunctionParams
> = z.object({
  length: z.number(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EvalsLengthGreaterThanFunctionParams$ {
  /** @deprecated use `EvalsLengthGreaterThanFunctionParams$inboundSchema` instead. */
  export const inboundSchema =
    EvalsLengthGreaterThanFunctionParams$inboundSchema;
  /** @deprecated use `EvalsLengthGreaterThanFunctionParams$outboundSchema` instead. */
  export const outboundSchema =
    EvalsLengthGreaterThanFunctionParams$outboundSchema;
  /** @deprecated use `EvalsLengthGreaterThanFunctionParams$Outbound` instead. */
  export type Outbound = EvalsLengthGreaterThanFunctionParams$Outbound;
}

export function evalsLengthGreaterThanFunctionParamsToJSON(
  evalsLengthGreaterThanFunctionParams: EvalsLengthGreaterThanFunctionParams,
): string {
  return JSON.stringify(
    EvalsLengthGreaterThanFunctionParams$outboundSchema.parse(
      evalsLengthGreaterThanFunctionParams,
    ),
  );
}

export function evalsLengthGreaterThanFunctionParamsFromJSON(
  jsonString: string,
): SafeParseResult<EvalsLengthGreaterThanFunctionParams, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      EvalsLengthGreaterThanFunctionParams$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'EvalsLengthGreaterThanFunctionParams' from JSON`,
  );
}

/** @internal */
export const EvalsLengthGreaterThanRequestBody$inboundSchema: z.ZodType<
  EvalsLengthGreaterThanRequestBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  output: z.string(),
  function_params: z.lazy(() =>
    EvalsLengthGreaterThanFunctionParams$inboundSchema
  ),
}).transform((v) => {
  return remap$(v, {
    "function_params": "functionParams",
  });
});

/** @internal */
export type EvalsLengthGreaterThanRequestBody$Outbound = {
  output: string;
  function_params: EvalsLengthGreaterThanFunctionParams$Outbound;
};

/** @internal */
export const EvalsLengthGreaterThanRequestBody$outboundSchema: z.ZodType<
  EvalsLengthGreaterThanRequestBody$Outbound,
  z.ZodTypeDef,
  EvalsLengthGreaterThanRequestBody
> = z.object({
  output: z.string(),
  functionParams: z.lazy(() =>
    EvalsLengthGreaterThanFunctionParams$outboundSchema
  ),
}).transform((v) => {
  return remap$(v, {
    functionParams: "function_params",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EvalsLengthGreaterThanRequestBody$ {
  /** @deprecated use `EvalsLengthGreaterThanRequestBody$inboundSchema` instead. */
  export const inboundSchema = EvalsLengthGreaterThanRequestBody$inboundSchema;
  /** @deprecated use `EvalsLengthGreaterThanRequestBody$outboundSchema` instead. */
  export const outboundSchema =
    EvalsLengthGreaterThanRequestBody$outboundSchema;
  /** @deprecated use `EvalsLengthGreaterThanRequestBody$Outbound` instead. */
  export type Outbound = EvalsLengthGreaterThanRequestBody$Outbound;
}

export function evalsLengthGreaterThanRequestBodyToJSON(
  evalsLengthGreaterThanRequestBody: EvalsLengthGreaterThanRequestBody,
): string {
  return JSON.stringify(
    EvalsLengthGreaterThanRequestBody$outboundSchema.parse(
      evalsLengthGreaterThanRequestBody,
    ),
  );
}

export function evalsLengthGreaterThanRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<EvalsLengthGreaterThanRequestBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => EvalsLengthGreaterThanRequestBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'EvalsLengthGreaterThanRequestBody' from JSON`,
  );
}

/** @internal */
export const EvalsLengthGreaterThanValue$inboundSchema: z.ZodType<
  EvalsLengthGreaterThanValue,
  z.ZodTypeDef,
  unknown
> = z.union([z.boolean(), z.string(), z.number()]);

/** @internal */
export type EvalsLengthGreaterThanValue$Outbound = boolean | string | number;

/** @internal */
export const EvalsLengthGreaterThanValue$outboundSchema: z.ZodType<
  EvalsLengthGreaterThanValue$Outbound,
  z.ZodTypeDef,
  EvalsLengthGreaterThanValue
> = z.union([z.boolean(), z.string(), z.number()]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EvalsLengthGreaterThanValue$ {
  /** @deprecated use `EvalsLengthGreaterThanValue$inboundSchema` instead. */
  export const inboundSchema = EvalsLengthGreaterThanValue$inboundSchema;
  /** @deprecated use `EvalsLengthGreaterThanValue$outboundSchema` instead. */
  export const outboundSchema = EvalsLengthGreaterThanValue$outboundSchema;
  /** @deprecated use `EvalsLengthGreaterThanValue$Outbound` instead. */
  export type Outbound = EvalsLengthGreaterThanValue$Outbound;
}

export function evalsLengthGreaterThanValueToJSON(
  evalsLengthGreaterThanValue: EvalsLengthGreaterThanValue,
): string {
  return JSON.stringify(
    EvalsLengthGreaterThanValue$outboundSchema.parse(
      evalsLengthGreaterThanValue,
    ),
  );
}

export function evalsLengthGreaterThanValueFromJSON(
  jsonString: string,
): SafeParseResult<EvalsLengthGreaterThanValue, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => EvalsLengthGreaterThanValue$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'EvalsLengthGreaterThanValue' from JSON`,
  );
}

/** @internal */
export const EvalsLengthGreaterThanResponseBody$inboundSchema: z.ZodType<
  EvalsLengthGreaterThanResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  value: z.nullable(z.union([z.boolean(), z.string(), z.number()])),
});

/** @internal */
export type EvalsLengthGreaterThanResponseBody$Outbound = {
  value: boolean | string | number | null;
};

/** @internal */
export const EvalsLengthGreaterThanResponseBody$outboundSchema: z.ZodType<
  EvalsLengthGreaterThanResponseBody$Outbound,
  z.ZodTypeDef,
  EvalsLengthGreaterThanResponseBody
> = z.object({
  value: z.nullable(z.union([z.boolean(), z.string(), z.number()])),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EvalsLengthGreaterThanResponseBody$ {
  /** @deprecated use `EvalsLengthGreaterThanResponseBody$inboundSchema` instead. */
  export const inboundSchema = EvalsLengthGreaterThanResponseBody$inboundSchema;
  /** @deprecated use `EvalsLengthGreaterThanResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    EvalsLengthGreaterThanResponseBody$outboundSchema;
  /** @deprecated use `EvalsLengthGreaterThanResponseBody$Outbound` instead. */
  export type Outbound = EvalsLengthGreaterThanResponseBody$Outbound;
}

export function evalsLengthGreaterThanResponseBodyToJSON(
  evalsLengthGreaterThanResponseBody: EvalsLengthGreaterThanResponseBody,
): string {
  return JSON.stringify(
    EvalsLengthGreaterThanResponseBody$outboundSchema.parse(
      evalsLengthGreaterThanResponseBody,
    ),
  );
}

export function evalsLengthGreaterThanResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<EvalsLengthGreaterThanResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      EvalsLengthGreaterThanResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'EvalsLengthGreaterThanResponseBody' from JSON`,
  );
}
