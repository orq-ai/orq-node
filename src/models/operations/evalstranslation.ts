/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type EvalsTranslationRequestBody = {
  query: string;
  output: string;
  model: string;
};

export type EvalsTranslationEvalsValue = number | boolean | string;

export type EvalsTranslationValue = {
  value: number | boolean | string;
  explanation?: string | null | undefined;
};

/**
 * Returns the result of the evaluator run
 */
export type EvalsTranslationResponseBody = {
  value: EvalsTranslationValue | null;
};

/** @internal */
export const EvalsTranslationRequestBody$inboundSchema: z.ZodType<
  EvalsTranslationRequestBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  query: z.string(),
  output: z.string(),
  model: z.string(),
});

/** @internal */
export type EvalsTranslationRequestBody$Outbound = {
  query: string;
  output: string;
  model: string;
};

/** @internal */
export const EvalsTranslationRequestBody$outboundSchema: z.ZodType<
  EvalsTranslationRequestBody$Outbound,
  z.ZodTypeDef,
  EvalsTranslationRequestBody
> = z.object({
  query: z.string(),
  output: z.string(),
  model: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EvalsTranslationRequestBody$ {
  /** @deprecated use `EvalsTranslationRequestBody$inboundSchema` instead. */
  export const inboundSchema = EvalsTranslationRequestBody$inboundSchema;
  /** @deprecated use `EvalsTranslationRequestBody$outboundSchema` instead. */
  export const outboundSchema = EvalsTranslationRequestBody$outboundSchema;
  /** @deprecated use `EvalsTranslationRequestBody$Outbound` instead. */
  export type Outbound = EvalsTranslationRequestBody$Outbound;
}

export function evalsTranslationRequestBodyToJSON(
  evalsTranslationRequestBody: EvalsTranslationRequestBody,
): string {
  return JSON.stringify(
    EvalsTranslationRequestBody$outboundSchema.parse(
      evalsTranslationRequestBody,
    ),
  );
}

export function evalsTranslationRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<EvalsTranslationRequestBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => EvalsTranslationRequestBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'EvalsTranslationRequestBody' from JSON`,
  );
}

/** @internal */
export const EvalsTranslationEvalsValue$inboundSchema: z.ZodType<
  EvalsTranslationEvalsValue,
  z.ZodTypeDef,
  unknown
> = z.union([z.number(), z.boolean(), z.string()]);

/** @internal */
export type EvalsTranslationEvalsValue$Outbound = number | boolean | string;

/** @internal */
export const EvalsTranslationEvalsValue$outboundSchema: z.ZodType<
  EvalsTranslationEvalsValue$Outbound,
  z.ZodTypeDef,
  EvalsTranslationEvalsValue
> = z.union([z.number(), z.boolean(), z.string()]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EvalsTranslationEvalsValue$ {
  /** @deprecated use `EvalsTranslationEvalsValue$inboundSchema` instead. */
  export const inboundSchema = EvalsTranslationEvalsValue$inboundSchema;
  /** @deprecated use `EvalsTranslationEvalsValue$outboundSchema` instead. */
  export const outboundSchema = EvalsTranslationEvalsValue$outboundSchema;
  /** @deprecated use `EvalsTranslationEvalsValue$Outbound` instead. */
  export type Outbound = EvalsTranslationEvalsValue$Outbound;
}

export function evalsTranslationEvalsValueToJSON(
  evalsTranslationEvalsValue: EvalsTranslationEvalsValue,
): string {
  return JSON.stringify(
    EvalsTranslationEvalsValue$outboundSchema.parse(evalsTranslationEvalsValue),
  );
}

export function evalsTranslationEvalsValueFromJSON(
  jsonString: string,
): SafeParseResult<EvalsTranslationEvalsValue, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => EvalsTranslationEvalsValue$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'EvalsTranslationEvalsValue' from JSON`,
  );
}

/** @internal */
export const EvalsTranslationValue$inboundSchema: z.ZodType<
  EvalsTranslationValue,
  z.ZodTypeDef,
  unknown
> = z.object({
  value: z.union([z.number(), z.boolean(), z.string()]),
  explanation: z.nullable(z.string()).optional(),
});

/** @internal */
export type EvalsTranslationValue$Outbound = {
  value: number | boolean | string;
  explanation?: string | null | undefined;
};

/** @internal */
export const EvalsTranslationValue$outboundSchema: z.ZodType<
  EvalsTranslationValue$Outbound,
  z.ZodTypeDef,
  EvalsTranslationValue
> = z.object({
  value: z.union([z.number(), z.boolean(), z.string()]),
  explanation: z.nullable(z.string()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EvalsTranslationValue$ {
  /** @deprecated use `EvalsTranslationValue$inboundSchema` instead. */
  export const inboundSchema = EvalsTranslationValue$inboundSchema;
  /** @deprecated use `EvalsTranslationValue$outboundSchema` instead. */
  export const outboundSchema = EvalsTranslationValue$outboundSchema;
  /** @deprecated use `EvalsTranslationValue$Outbound` instead. */
  export type Outbound = EvalsTranslationValue$Outbound;
}

export function evalsTranslationValueToJSON(
  evalsTranslationValue: EvalsTranslationValue,
): string {
  return JSON.stringify(
    EvalsTranslationValue$outboundSchema.parse(evalsTranslationValue),
  );
}

export function evalsTranslationValueFromJSON(
  jsonString: string,
): SafeParseResult<EvalsTranslationValue, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => EvalsTranslationValue$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'EvalsTranslationValue' from JSON`,
  );
}

/** @internal */
export const EvalsTranslationResponseBody$inboundSchema: z.ZodType<
  EvalsTranslationResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  value: z.nullable(z.lazy(() => EvalsTranslationValue$inboundSchema)),
});

/** @internal */
export type EvalsTranslationResponseBody$Outbound = {
  value: EvalsTranslationValue$Outbound | null;
};

/** @internal */
export const EvalsTranslationResponseBody$outboundSchema: z.ZodType<
  EvalsTranslationResponseBody$Outbound,
  z.ZodTypeDef,
  EvalsTranslationResponseBody
> = z.object({
  value: z.nullable(z.lazy(() => EvalsTranslationValue$outboundSchema)),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EvalsTranslationResponseBody$ {
  /** @deprecated use `EvalsTranslationResponseBody$inboundSchema` instead. */
  export const inboundSchema = EvalsTranslationResponseBody$inboundSchema;
  /** @deprecated use `EvalsTranslationResponseBody$outboundSchema` instead. */
  export const outboundSchema = EvalsTranslationResponseBody$outboundSchema;
  /** @deprecated use `EvalsTranslationResponseBody$Outbound` instead. */
  export type Outbound = EvalsTranslationResponseBody$Outbound;
}

export function evalsTranslationResponseBodyToJSON(
  evalsTranslationResponseBody: EvalsTranslationResponseBody,
): string {
  return JSON.stringify(
    EvalsTranslationResponseBody$outboundSchema.parse(
      evalsTranslationResponseBody,
    ),
  );
}

export function evalsTranslationResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<EvalsTranslationResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => EvalsTranslationResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'EvalsTranslationResponseBody' from JSON`,
  );
}
