/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type RetrieveToolRequest = {
  toolKey: string;
};

/**
 * The status of the tool. `Live` is the latest version of the tool. `Draft` is a version that is not yet published. `Pending` is a version that is pending approval. `Published` is a version that was live and has been replaced by a new version.
 */
export const RetrieveToolResponseBodyToolsResponse200ApplicationJSONStatus = {
  Live: "live",
  Draft: "draft",
  Pending: "pending",
  Published: "published",
} as const;
/**
 * The status of the tool. `Live` is the latest version of the tool. `Draft` is a version that is not yet published. `Pending` is a version that is pending approval. `Published` is a version that was live and has been replaced by a new version.
 */
export type RetrieveToolResponseBodyToolsResponse200ApplicationJSONStatus =
  ClosedEnum<
    typeof RetrieveToolResponseBodyToolsResponse200ApplicationJSONStatus
  >;

export const RetrieveToolResponseBodyToolsResponse200ApplicationJSONType = {
  Code: "code",
} as const;
export type RetrieveToolResponseBodyToolsResponse200ApplicationJSONType =
  ClosedEnum<
    typeof RetrieveToolResponseBodyToolsResponse200ApplicationJSONType
  >;

export const RetrieveToolResponseBodyLanguage = {
  Python: "python",
} as const;
export type RetrieveToolResponseBodyLanguage = ClosedEnum<
  typeof RetrieveToolResponseBodyLanguage
>;

export type RetrieveToolResponseBodyCodeTool = {
  /**
   * The parameters the functions accepts, described as a JSON Schema object. See the `OpenAI` [guide](https://platform.openai.com/docs/guides/function-calling) for examples, and the [JSON Schema reference](https://json-schema.org/understanding-json-schema/) for documentation about the format.
   */
  parameters?: { [k: string]: any } | undefined;
  language: RetrieveToolResponseBodyLanguage;
  /**
   * The code to execute.
   */
  code: string;
};

export type RetrieveToolResponseBody5 = {
  id?: string | undefined;
  /**
   * The path where the entity is stored in the project structure. The first element of the path always represents the project name. Any subsequent path element after the project will be created as a folder in the project if it does not exists.
   */
  path: string;
  /**
   * Unique key of the tool as it will be displayed in the UI
   */
  key: string;
  /**
   * The name of the tool as it will be displayed in the UI. This is optional and if not provided, the `key` will be used.
   */
  displayName: string;
  /**
   * A description of the tool, used by the model to choose when and how to call the tool. We do recommend using the `description` field as accurate as possible to give enough context to the model to make the right decision.
   */
  description: string;
  /**
   * The id of the user that created the tool
   */
  createdById?: string | undefined;
  /**
   * The id of the user that last updated the tool
   */
  updatedById?: string | undefined;
  projectId: string;
  workspaceId: string;
  created: string;
  updated: string;
  /**
   * The status of the tool. `Live` is the latest version of the tool. `Draft` is a version that is not yet published. `Pending` is a version that is pending approval. `Published` is a version that was live and has been replaced by a new version.
   */
  status?:
    | RetrieveToolResponseBodyToolsResponse200ApplicationJSONStatus
    | undefined;
  versionHash?: string | undefined;
  type: RetrieveToolResponseBodyToolsResponse200ApplicationJSONType;
  codeTool: RetrieveToolResponseBodyCodeTool;
};

/**
 * The status of the tool. `Live` is the latest version of the tool. `Draft` is a version that is not yet published. `Pending` is a version that is pending approval. `Published` is a version that was live and has been replaced by a new version.
 */
export const RetrieveToolResponseBodyToolsResponse200Status = {
  Live: "live",
  Draft: "draft",
  Pending: "pending",
  Published: "published",
} as const;
/**
 * The status of the tool. `Live` is the latest version of the tool. `Draft` is a version that is not yet published. `Pending` is a version that is pending approval. `Published` is a version that was live and has been replaced by a new version.
 */
export type RetrieveToolResponseBodyToolsResponse200Status = ClosedEnum<
  typeof RetrieveToolResponseBodyToolsResponse200Status
>;

export const RetrieveToolResponseBodyToolsResponse200Type = {
  Mcp: "mcp",
} as const;
export type RetrieveToolResponseBodyToolsResponse200Type = ClosedEnum<
  typeof RetrieveToolResponseBodyToolsResponse200Type
>;

export type RetrieveToolResponseBodyHeaders = {
  value: string;
  encrypted?: boolean | undefined;
};

export const RetrieveToolResponseBodyToolsResponse200ApplicationJson4Type = {
  Object: "object",
} as const;
export type RetrieveToolResponseBodyToolsResponse200ApplicationJson4Type =
  ClosedEnum<
    typeof RetrieveToolResponseBodyToolsResponse200ApplicationJson4Type
  >;

/**
 * The original MCP tool input schema for LLM conversion
 */
export type RetrieveToolResponseBodyInputSchema = {
  type: RetrieveToolResponseBodyToolsResponse200ApplicationJson4Type;
  properties?: { [k: string]: any } | undefined;
  required?: Array<string> | undefined;
};

/**
 * The connection type used by the MCP server
 */
export const RetrieveToolResponseBodyConnectionType = {
  Http: "http",
  Sse: "sse",
} as const;
/**
 * The connection type used by the MCP server
 */
export type RetrieveToolResponseBodyConnectionType = ClosedEnum<
  typeof RetrieveToolResponseBodyConnectionType
>;

export type RetrieveToolResponseBodyMcp = {
  /**
   * The ID of the MCP server this tool belongs to
   */
  serverId: string;
  /**
   * The original tool name from the MCP server
   */
  toolName: string;
  /**
   * The MCP server URL (cached for execution)
   */
  serverUrl: string;
  /**
   * HTTP headers for MCP server requests (encrypted format)
   */
  headers?: { [k: string]: RetrieveToolResponseBodyHeaders } | undefined;
  /**
   * The original MCP tool input schema for LLM conversion
   */
  inputSchema: RetrieveToolResponseBodyInputSchema;
  /**
   * The connection type used by the MCP server
   */
  connectionType: RetrieveToolResponseBodyConnectionType;
};

export type RetrieveToolResponseBody4 = {
  id?: string | undefined;
  /**
   * The path where the entity is stored in the project structure. The first element of the path always represents the project name. Any subsequent path element after the project will be created as a folder in the project if it does not exists.
   */
  path: string;
  /**
   * Unique key of the tool as it will be displayed in the UI
   */
  key: string;
  /**
   * The name of the tool as it will be displayed in the UI. This is optional and if not provided, the `key` will be used.
   */
  displayName: string;
  /**
   * A description of the tool, used by the model to choose when and how to call the tool. We do recommend using the `description` field as accurate as possible to give enough context to the model to make the right decision.
   */
  description: string;
  /**
   * The id of the user that created the tool
   */
  createdById?: string | undefined;
  /**
   * The id of the user that last updated the tool
   */
  updatedById?: string | undefined;
  projectId: string;
  workspaceId: string;
  created: string;
  updated: string;
  /**
   * The status of the tool. `Live` is the latest version of the tool. `Draft` is a version that is not yet published. `Pending` is a version that is pending approval. `Published` is a version that was live and has been replaced by a new version.
   */
  status?: RetrieveToolResponseBodyToolsResponse200Status | undefined;
  versionHash?: string | undefined;
  type: RetrieveToolResponseBodyToolsResponse200Type;
  mcp: RetrieveToolResponseBodyMcp;
};

/**
 * The status of the tool. `Live` is the latest version of the tool. `Draft` is a version that is not yet published. `Pending` is a version that is pending approval. `Published` is a version that was live and has been replaced by a new version.
 */
export const RetrieveToolResponseBodyToolsResponseStatus = {
  Live: "live",
  Draft: "draft",
  Pending: "pending",
  Published: "published",
} as const;
/**
 * The status of the tool. `Live` is the latest version of the tool. `Draft` is a version that is not yet published. `Pending` is a version that is pending approval. `Published` is a version that was live and has been replaced by a new version.
 */
export type RetrieveToolResponseBodyToolsResponseStatus = ClosedEnum<
  typeof RetrieveToolResponseBodyToolsResponseStatus
>;

export const RetrieveToolResponseBodyToolsResponseType = {
  Http: "http",
} as const;
export type RetrieveToolResponseBodyToolsResponseType = ClosedEnum<
  typeof RetrieveToolResponseBodyToolsResponseType
>;

/**
 * The HTTP method to use.
 */
export const RetrieveToolResponseBodyMethod = {
  Get: "GET",
  Post: "POST",
  Put: "PUT",
  Delete: "DELETE",
} as const;
/**
 * The HTTP method to use.
 */
export type RetrieveToolResponseBodyMethod = ClosedEnum<
  typeof RetrieveToolResponseBodyMethod
>;

/**
 * The blueprint for the HTTP request. The `arguments` field will be used to replace the placeholders in the `url`, `headers`, `body`, and `arguments` fields.
 */
export type RetrieveToolResponseBodyBlueprint = {
  /**
   * The URL to send the request to.
   */
  url: string;
  /**
   * The HTTP method to use.
   */
  method: RetrieveToolResponseBodyMethod;
  /**
   * The headers to send with the request.
   */
  headers?: { [k: string]: string } | undefined;
  /**
   * The body to send with the request.
   */
  body?: { [k: string]: any } | undefined;
};

/**
 * The type of the argument.
 */
export const RetrieveToolResponseBodyToolsResponse200ApplicationJson3Type = {
  String: "string",
  Number: "number",
  Boolean: "boolean",
} as const;
/**
 * The type of the argument.
 */
export type RetrieveToolResponseBodyToolsResponse200ApplicationJson3Type =
  ClosedEnum<
    typeof RetrieveToolResponseBodyToolsResponse200ApplicationJson3Type
  >;

/**
 * The default value of the argument.
 */
export type RetrieveToolResponseBodyDefaultValue = string | number | boolean;

export type RetrieveToolResponseBodyArguments = {
  /**
   * The type of the argument.
   */
  type: RetrieveToolResponseBodyToolsResponse200ApplicationJson3Type;
  /**
   * A description of the argument.
   */
  description: string;
  /**
   * Whether to send the argument to the model. If set to false, the argument will not be sent to the model and needs to be provided by the user or it will be left blank.
   */
  sendToModel?: boolean | undefined;
  /**
   * The default value of the argument.
   */
  defaultValue?: string | number | boolean | undefined;
};

export type RetrieveToolResponseBodyHttp = {
  /**
   * The blueprint for the HTTP request. The `arguments` field will be used to replace the placeholders in the `url`, `headers`, `body`, and `arguments` fields.
   */
  blueprint: RetrieveToolResponseBodyBlueprint;
  /**
   * The arguments to send with the request. The keys will be used to replace the placeholders in the `blueprint` field.
   */
  arguments?: { [k: string]: RetrieveToolResponseBodyArguments } | undefined;
};

export type RetrieveToolResponseBody3 = {
  id?: string | undefined;
  /**
   * The path where the entity is stored in the project structure. The first element of the path always represents the project name. Any subsequent path element after the project will be created as a folder in the project if it does not exists.
   */
  path: string;
  /**
   * Unique key of the tool as it will be displayed in the UI
   */
  key: string;
  /**
   * The name of the tool as it will be displayed in the UI. This is optional and if not provided, the `key` will be used.
   */
  displayName: string;
  /**
   * A description of the tool, used by the model to choose when and how to call the tool. We do recommend using the `description` field as accurate as possible to give enough context to the model to make the right decision.
   */
  description: string;
  /**
   * The id of the user that created the tool
   */
  createdById?: string | undefined;
  /**
   * The id of the user that last updated the tool
   */
  updatedById?: string | undefined;
  projectId: string;
  workspaceId: string;
  created: string;
  updated: string;
  /**
   * The status of the tool. `Live` is the latest version of the tool. `Draft` is a version that is not yet published. `Pending` is a version that is pending approval. `Published` is a version that was live and has been replaced by a new version.
   */
  status?: RetrieveToolResponseBodyToolsResponseStatus | undefined;
  versionHash?: string | undefined;
  type: RetrieveToolResponseBodyToolsResponseType;
  http: RetrieveToolResponseBodyHttp;
};

/**
 * The status of the tool. `Live` is the latest version of the tool. `Draft` is a version that is not yet published. `Pending` is a version that is pending approval. `Published` is a version that was live and has been replaced by a new version.
 */
export const RetrieveToolResponseBodyToolsStatus = {
  Live: "live",
  Draft: "draft",
  Pending: "pending",
  Published: "published",
} as const;
/**
 * The status of the tool. `Live` is the latest version of the tool. `Draft` is a version that is not yet published. `Pending` is a version that is pending approval. `Published` is a version that was live and has been replaced by a new version.
 */
export type RetrieveToolResponseBodyToolsStatus = ClosedEnum<
  typeof RetrieveToolResponseBodyToolsStatus
>;

export const RetrieveToolResponseBodyToolsType = {
  JsonSchema: "json_schema",
} as const;
export type RetrieveToolResponseBodyToolsType = ClosedEnum<
  typeof RetrieveToolResponseBodyToolsType
>;

export type RetrieveToolResponseBodyJsonSchema = {
  /**
   * The name of the response format. Must be a-z, A-Z, 0-9, or contain underscores and dashes, with a maximum length of 64.
   */
  name: string;
  /**
   * A description of what the response format is for. This will be shown to the user.
   */
  description?: string | undefined;
  /**
   * The schema for the response format, described as a JSON Schema object. See the [JSON Schema reference](https://json-schema.org/understanding-json-schema/) for documentation about the format.
   */
  schema: { [k: string]: any };
  /**
   * Whether to enable strict schema adherence when generating the output. If set to true, the model will always follow the exact schema defined in the `schema` field. Only a subset of JSON Schema is supported when `strict` is `true`. Only compatible with `OpenAI` models.
   */
  strict?: boolean | null | undefined;
};

export type RetrieveToolResponseBody2 = {
  id?: string | undefined;
  /**
   * The path where the entity is stored in the project structure. The first element of the path always represents the project name. Any subsequent path element after the project will be created as a folder in the project if it does not exists.
   */
  path: string;
  /**
   * Unique key of the tool as it will be displayed in the UI
   */
  key: string;
  /**
   * The name of the tool as it will be displayed in the UI. This is optional and if not provided, the `key` will be used.
   */
  displayName: string;
  /**
   * A description of the tool, used by the model to choose when and how to call the tool. We do recommend using the `description` field as accurate as possible to give enough context to the model to make the right decision.
   */
  description: string;
  /**
   * The id of the user that created the tool
   */
  createdById?: string | undefined;
  /**
   * The id of the user that last updated the tool
   */
  updatedById?: string | undefined;
  projectId: string;
  workspaceId: string;
  created: string;
  updated: string;
  /**
   * The status of the tool. `Live` is the latest version of the tool. `Draft` is a version that is not yet published. `Pending` is a version that is pending approval. `Published` is a version that was live and has been replaced by a new version.
   */
  status?: RetrieveToolResponseBodyToolsStatus | undefined;
  versionHash?: string | undefined;
  type: RetrieveToolResponseBodyToolsType;
  jsonSchema: RetrieveToolResponseBodyJsonSchema;
};

/**
 * The status of the tool. `Live` is the latest version of the tool. `Draft` is a version that is not yet published. `Pending` is a version that is pending approval. `Published` is a version that was live and has been replaced by a new version.
 */
export const RetrieveToolResponseBodyStatus = {
  Live: "live",
  Draft: "draft",
  Pending: "pending",
  Published: "published",
} as const;
/**
 * The status of the tool. `Live` is the latest version of the tool. `Draft` is a version that is not yet published. `Pending` is a version that is pending approval. `Published` is a version that was live and has been replaced by a new version.
 */
export type RetrieveToolResponseBodyStatus = ClosedEnum<
  typeof RetrieveToolResponseBodyStatus
>;

export const RetrieveToolResponseBodyType = {
  Function: "function",
} as const;
export type RetrieveToolResponseBodyType = ClosedEnum<
  typeof RetrieveToolResponseBodyType
>;

export type RetrieveToolResponseBodyFunction = {
  /**
   * The name of the function to be called. Must be a-z, A-Z, 0-9, or contain underscores and dashes, with a maximum length of 64.
   */
  name: string;
  /**
   * A description of what the function does, used by the model to choose when and how to call the function.
   */
  description?: string | undefined;
  /**
   * Whether to enable strict schema adherence when generating the function call. If set to true, the model will follow the exact schema defined in the `parameters` field. Only a subset of JSON Schema is supported when `strict` is `true`. Currently only compatible with `OpenAI` models.
   */
  strict?: boolean | undefined;
  /**
   * The parameters the functions accepts, described as a JSON Schema object. See the `OpenAI` [guide](https://platform.openai.com/docs/guides/function-calling) for examples, and the [JSON Schema reference](https://json-schema.org/understanding-json-schema/) for documentation about the format.
   */
  parameters?: { [k: string]: any } | undefined;
};

export type RetrieveToolResponseBody1 = {
  id?: string | undefined;
  /**
   * The path where the entity is stored in the project structure. The first element of the path always represents the project name. Any subsequent path element after the project will be created as a folder in the project if it does not exists.
   */
  path: string;
  /**
   * Unique key of the tool as it will be displayed in the UI
   */
  key: string;
  /**
   * The name of the tool as it will be displayed in the UI. This is optional and if not provided, the `key` will be used.
   */
  displayName: string;
  /**
   * A description of the tool, used by the model to choose when and how to call the tool. We do recommend using the `description` field as accurate as possible to give enough context to the model to make the right decision.
   */
  description: string;
  /**
   * The id of the user that created the tool
   */
  createdById?: string | undefined;
  /**
   * The id of the user that last updated the tool
   */
  updatedById?: string | undefined;
  projectId: string;
  workspaceId: string;
  created: string;
  updated: string;
  /**
   * The status of the tool. `Live` is the latest version of the tool. `Draft` is a version that is not yet published. `Pending` is a version that is pending approval. `Published` is a version that was live and has been replaced by a new version.
   */
  status?: RetrieveToolResponseBodyStatus | undefined;
  versionHash?: string | undefined;
  type: RetrieveToolResponseBodyType;
  function: RetrieveToolResponseBodyFunction;
};

/**
 * Successfully retrieved the tool.
 */
export type RetrieveToolResponseBody =
  | RetrieveToolResponseBody1
  | RetrieveToolResponseBody2
  | RetrieveToolResponseBody3
  | RetrieveToolResponseBody4
  | RetrieveToolResponseBody5;

/** @internal */
export const RetrieveToolRequest$inboundSchema: z.ZodType<
  RetrieveToolRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  tool_key: z.string(),
}).transform((v) => {
  return remap$(v, {
    "tool_key": "toolKey",
  });
});

/** @internal */
export type RetrieveToolRequest$Outbound = {
  tool_key: string;
};

/** @internal */
export const RetrieveToolRequest$outboundSchema: z.ZodType<
  RetrieveToolRequest$Outbound,
  z.ZodTypeDef,
  RetrieveToolRequest
> = z.object({
  toolKey: z.string(),
}).transform((v) => {
  return remap$(v, {
    toolKey: "tool_key",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RetrieveToolRequest$ {
  /** @deprecated use `RetrieveToolRequest$inboundSchema` instead. */
  export const inboundSchema = RetrieveToolRequest$inboundSchema;
  /** @deprecated use `RetrieveToolRequest$outboundSchema` instead. */
  export const outboundSchema = RetrieveToolRequest$outboundSchema;
  /** @deprecated use `RetrieveToolRequest$Outbound` instead. */
  export type Outbound = RetrieveToolRequest$Outbound;
}

export function retrieveToolRequestToJSON(
  retrieveToolRequest: RetrieveToolRequest,
): string {
  return JSON.stringify(
    RetrieveToolRequest$outboundSchema.parse(retrieveToolRequest),
  );
}

export function retrieveToolRequestFromJSON(
  jsonString: string,
): SafeParseResult<RetrieveToolRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => RetrieveToolRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RetrieveToolRequest' from JSON`,
  );
}

/** @internal */
export const RetrieveToolResponseBodyToolsResponse200ApplicationJSONStatus$inboundSchema:
  z.ZodNativeEnum<
    typeof RetrieveToolResponseBodyToolsResponse200ApplicationJSONStatus
  > = z.nativeEnum(
    RetrieveToolResponseBodyToolsResponse200ApplicationJSONStatus,
  );

/** @internal */
export const RetrieveToolResponseBodyToolsResponse200ApplicationJSONStatus$outboundSchema:
  z.ZodNativeEnum<
    typeof RetrieveToolResponseBodyToolsResponse200ApplicationJSONStatus
  > =
    RetrieveToolResponseBodyToolsResponse200ApplicationJSONStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RetrieveToolResponseBodyToolsResponse200ApplicationJSONStatus$ {
  /** @deprecated use `RetrieveToolResponseBodyToolsResponse200ApplicationJSONStatus$inboundSchema` instead. */
  export const inboundSchema =
    RetrieveToolResponseBodyToolsResponse200ApplicationJSONStatus$inboundSchema;
  /** @deprecated use `RetrieveToolResponseBodyToolsResponse200ApplicationJSONStatus$outboundSchema` instead. */
  export const outboundSchema =
    RetrieveToolResponseBodyToolsResponse200ApplicationJSONStatus$outboundSchema;
}

/** @internal */
export const RetrieveToolResponseBodyToolsResponse200ApplicationJSONType$inboundSchema:
  z.ZodNativeEnum<
    typeof RetrieveToolResponseBodyToolsResponse200ApplicationJSONType
  > = z.nativeEnum(RetrieveToolResponseBodyToolsResponse200ApplicationJSONType);

/** @internal */
export const RetrieveToolResponseBodyToolsResponse200ApplicationJSONType$outboundSchema:
  z.ZodNativeEnum<
    typeof RetrieveToolResponseBodyToolsResponse200ApplicationJSONType
  > = RetrieveToolResponseBodyToolsResponse200ApplicationJSONType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RetrieveToolResponseBodyToolsResponse200ApplicationJSONType$ {
  /** @deprecated use `RetrieveToolResponseBodyToolsResponse200ApplicationJSONType$inboundSchema` instead. */
  export const inboundSchema =
    RetrieveToolResponseBodyToolsResponse200ApplicationJSONType$inboundSchema;
  /** @deprecated use `RetrieveToolResponseBodyToolsResponse200ApplicationJSONType$outboundSchema` instead. */
  export const outboundSchema =
    RetrieveToolResponseBodyToolsResponse200ApplicationJSONType$outboundSchema;
}

/** @internal */
export const RetrieveToolResponseBodyLanguage$inboundSchema: z.ZodNativeEnum<
  typeof RetrieveToolResponseBodyLanguage
> = z.nativeEnum(RetrieveToolResponseBodyLanguage);

/** @internal */
export const RetrieveToolResponseBodyLanguage$outboundSchema: z.ZodNativeEnum<
  typeof RetrieveToolResponseBodyLanguage
> = RetrieveToolResponseBodyLanguage$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RetrieveToolResponseBodyLanguage$ {
  /** @deprecated use `RetrieveToolResponseBodyLanguage$inboundSchema` instead. */
  export const inboundSchema = RetrieveToolResponseBodyLanguage$inboundSchema;
  /** @deprecated use `RetrieveToolResponseBodyLanguage$outboundSchema` instead. */
  export const outboundSchema = RetrieveToolResponseBodyLanguage$outboundSchema;
}

/** @internal */
export const RetrieveToolResponseBodyCodeTool$inboundSchema: z.ZodType<
  RetrieveToolResponseBodyCodeTool,
  z.ZodTypeDef,
  unknown
> = z.object({
  parameters: z.record(z.any()).optional(),
  language: RetrieveToolResponseBodyLanguage$inboundSchema,
  code: z.string(),
});

/** @internal */
export type RetrieveToolResponseBodyCodeTool$Outbound = {
  parameters?: { [k: string]: any } | undefined;
  language: string;
  code: string;
};

/** @internal */
export const RetrieveToolResponseBodyCodeTool$outboundSchema: z.ZodType<
  RetrieveToolResponseBodyCodeTool$Outbound,
  z.ZodTypeDef,
  RetrieveToolResponseBodyCodeTool
> = z.object({
  parameters: z.record(z.any()).optional(),
  language: RetrieveToolResponseBodyLanguage$outboundSchema,
  code: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RetrieveToolResponseBodyCodeTool$ {
  /** @deprecated use `RetrieveToolResponseBodyCodeTool$inboundSchema` instead. */
  export const inboundSchema = RetrieveToolResponseBodyCodeTool$inboundSchema;
  /** @deprecated use `RetrieveToolResponseBodyCodeTool$outboundSchema` instead. */
  export const outboundSchema = RetrieveToolResponseBodyCodeTool$outboundSchema;
  /** @deprecated use `RetrieveToolResponseBodyCodeTool$Outbound` instead. */
  export type Outbound = RetrieveToolResponseBodyCodeTool$Outbound;
}

export function retrieveToolResponseBodyCodeToolToJSON(
  retrieveToolResponseBodyCodeTool: RetrieveToolResponseBodyCodeTool,
): string {
  return JSON.stringify(
    RetrieveToolResponseBodyCodeTool$outboundSchema.parse(
      retrieveToolResponseBodyCodeTool,
    ),
  );
}

export function retrieveToolResponseBodyCodeToolFromJSON(
  jsonString: string,
): SafeParseResult<RetrieveToolResponseBodyCodeTool, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => RetrieveToolResponseBodyCodeTool$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RetrieveToolResponseBodyCodeTool' from JSON`,
  );
}

/** @internal */
export const RetrieveToolResponseBody5$inboundSchema: z.ZodType<
  RetrieveToolResponseBody5,
  z.ZodTypeDef,
  unknown
> = z.object({
  _id: z.string().default("01K6G6607BFJNN0QBD3PYFZNE4"),
  path: z.string(),
  key: z.string(),
  display_name: z.string(),
  description: z.string(),
  created_by_id: z.string().optional(),
  updated_by_id: z.string().optional(),
  project_id: z.string(),
  workspace_id: z.string(),
  created: z.string(),
  updated: z.string(),
  status:
    RetrieveToolResponseBodyToolsResponse200ApplicationJSONStatus$inboundSchema
      .default("live"),
  version_hash: z.string().optional(),
  type:
    RetrieveToolResponseBodyToolsResponse200ApplicationJSONType$inboundSchema,
  code_tool: z.lazy(() => RetrieveToolResponseBodyCodeTool$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "_id": "id",
    "display_name": "displayName",
    "created_by_id": "createdById",
    "updated_by_id": "updatedById",
    "project_id": "projectId",
    "workspace_id": "workspaceId",
    "version_hash": "versionHash",
    "code_tool": "codeTool",
  });
});

/** @internal */
export type RetrieveToolResponseBody5$Outbound = {
  _id: string;
  path: string;
  key: string;
  display_name: string;
  description: string;
  created_by_id?: string | undefined;
  updated_by_id?: string | undefined;
  project_id: string;
  workspace_id: string;
  created: string;
  updated: string;
  status: string;
  version_hash?: string | undefined;
  type: string;
  code_tool: RetrieveToolResponseBodyCodeTool$Outbound;
};

/** @internal */
export const RetrieveToolResponseBody5$outboundSchema: z.ZodType<
  RetrieveToolResponseBody5$Outbound,
  z.ZodTypeDef,
  RetrieveToolResponseBody5
> = z.object({
  id: z.string().default("01K6G6607BFJNN0QBD3PYFZNE4"),
  path: z.string(),
  key: z.string(),
  displayName: z.string(),
  description: z.string(),
  createdById: z.string().optional(),
  updatedById: z.string().optional(),
  projectId: z.string(),
  workspaceId: z.string(),
  created: z.string(),
  updated: z.string(),
  status:
    RetrieveToolResponseBodyToolsResponse200ApplicationJSONStatus$outboundSchema
      .default("live"),
  versionHash: z.string().optional(),
  type:
    RetrieveToolResponseBodyToolsResponse200ApplicationJSONType$outboundSchema,
  codeTool: z.lazy(() => RetrieveToolResponseBodyCodeTool$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    id: "_id",
    displayName: "display_name",
    createdById: "created_by_id",
    updatedById: "updated_by_id",
    projectId: "project_id",
    workspaceId: "workspace_id",
    versionHash: "version_hash",
    codeTool: "code_tool",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RetrieveToolResponseBody5$ {
  /** @deprecated use `RetrieveToolResponseBody5$inboundSchema` instead. */
  export const inboundSchema = RetrieveToolResponseBody5$inboundSchema;
  /** @deprecated use `RetrieveToolResponseBody5$outboundSchema` instead. */
  export const outboundSchema = RetrieveToolResponseBody5$outboundSchema;
  /** @deprecated use `RetrieveToolResponseBody5$Outbound` instead. */
  export type Outbound = RetrieveToolResponseBody5$Outbound;
}

export function retrieveToolResponseBody5ToJSON(
  retrieveToolResponseBody5: RetrieveToolResponseBody5,
): string {
  return JSON.stringify(
    RetrieveToolResponseBody5$outboundSchema.parse(retrieveToolResponseBody5),
  );
}

export function retrieveToolResponseBody5FromJSON(
  jsonString: string,
): SafeParseResult<RetrieveToolResponseBody5, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => RetrieveToolResponseBody5$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RetrieveToolResponseBody5' from JSON`,
  );
}

/** @internal */
export const RetrieveToolResponseBodyToolsResponse200Status$inboundSchema:
  z.ZodNativeEnum<typeof RetrieveToolResponseBodyToolsResponse200Status> = z
    .nativeEnum(RetrieveToolResponseBodyToolsResponse200Status);

/** @internal */
export const RetrieveToolResponseBodyToolsResponse200Status$outboundSchema:
  z.ZodNativeEnum<typeof RetrieveToolResponseBodyToolsResponse200Status> =
    RetrieveToolResponseBodyToolsResponse200Status$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RetrieveToolResponseBodyToolsResponse200Status$ {
  /** @deprecated use `RetrieveToolResponseBodyToolsResponse200Status$inboundSchema` instead. */
  export const inboundSchema =
    RetrieveToolResponseBodyToolsResponse200Status$inboundSchema;
  /** @deprecated use `RetrieveToolResponseBodyToolsResponse200Status$outboundSchema` instead. */
  export const outboundSchema =
    RetrieveToolResponseBodyToolsResponse200Status$outboundSchema;
}

/** @internal */
export const RetrieveToolResponseBodyToolsResponse200Type$inboundSchema:
  z.ZodNativeEnum<typeof RetrieveToolResponseBodyToolsResponse200Type> = z
    .nativeEnum(RetrieveToolResponseBodyToolsResponse200Type);

/** @internal */
export const RetrieveToolResponseBodyToolsResponse200Type$outboundSchema:
  z.ZodNativeEnum<typeof RetrieveToolResponseBodyToolsResponse200Type> =
    RetrieveToolResponseBodyToolsResponse200Type$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RetrieveToolResponseBodyToolsResponse200Type$ {
  /** @deprecated use `RetrieveToolResponseBodyToolsResponse200Type$inboundSchema` instead. */
  export const inboundSchema =
    RetrieveToolResponseBodyToolsResponse200Type$inboundSchema;
  /** @deprecated use `RetrieveToolResponseBodyToolsResponse200Type$outboundSchema` instead. */
  export const outboundSchema =
    RetrieveToolResponseBodyToolsResponse200Type$outboundSchema;
}

/** @internal */
export const RetrieveToolResponseBodyHeaders$inboundSchema: z.ZodType<
  RetrieveToolResponseBodyHeaders,
  z.ZodTypeDef,
  unknown
> = z.object({
  value: z.string(),
  encrypted: z.boolean().default(false),
});

/** @internal */
export type RetrieveToolResponseBodyHeaders$Outbound = {
  value: string;
  encrypted: boolean;
};

/** @internal */
export const RetrieveToolResponseBodyHeaders$outboundSchema: z.ZodType<
  RetrieveToolResponseBodyHeaders$Outbound,
  z.ZodTypeDef,
  RetrieveToolResponseBodyHeaders
> = z.object({
  value: z.string(),
  encrypted: z.boolean().default(false),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RetrieveToolResponseBodyHeaders$ {
  /** @deprecated use `RetrieveToolResponseBodyHeaders$inboundSchema` instead. */
  export const inboundSchema = RetrieveToolResponseBodyHeaders$inboundSchema;
  /** @deprecated use `RetrieveToolResponseBodyHeaders$outboundSchema` instead. */
  export const outboundSchema = RetrieveToolResponseBodyHeaders$outboundSchema;
  /** @deprecated use `RetrieveToolResponseBodyHeaders$Outbound` instead. */
  export type Outbound = RetrieveToolResponseBodyHeaders$Outbound;
}

export function retrieveToolResponseBodyHeadersToJSON(
  retrieveToolResponseBodyHeaders: RetrieveToolResponseBodyHeaders,
): string {
  return JSON.stringify(
    RetrieveToolResponseBodyHeaders$outboundSchema.parse(
      retrieveToolResponseBodyHeaders,
    ),
  );
}

export function retrieveToolResponseBodyHeadersFromJSON(
  jsonString: string,
): SafeParseResult<RetrieveToolResponseBodyHeaders, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => RetrieveToolResponseBodyHeaders$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RetrieveToolResponseBodyHeaders' from JSON`,
  );
}

/** @internal */
export const RetrieveToolResponseBodyToolsResponse200ApplicationJson4Type$inboundSchema:
  z.ZodNativeEnum<
    typeof RetrieveToolResponseBodyToolsResponse200ApplicationJson4Type
  > = z.nativeEnum(
    RetrieveToolResponseBodyToolsResponse200ApplicationJson4Type,
  );

/** @internal */
export const RetrieveToolResponseBodyToolsResponse200ApplicationJson4Type$outboundSchema:
  z.ZodNativeEnum<
    typeof RetrieveToolResponseBodyToolsResponse200ApplicationJson4Type
  > =
    RetrieveToolResponseBodyToolsResponse200ApplicationJson4Type$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RetrieveToolResponseBodyToolsResponse200ApplicationJson4Type$ {
  /** @deprecated use `RetrieveToolResponseBodyToolsResponse200ApplicationJson4Type$inboundSchema` instead. */
  export const inboundSchema =
    RetrieveToolResponseBodyToolsResponse200ApplicationJson4Type$inboundSchema;
  /** @deprecated use `RetrieveToolResponseBodyToolsResponse200ApplicationJson4Type$outboundSchema` instead. */
  export const outboundSchema =
    RetrieveToolResponseBodyToolsResponse200ApplicationJson4Type$outboundSchema;
}

/** @internal */
export const RetrieveToolResponseBodyInputSchema$inboundSchema: z.ZodType<
  RetrieveToolResponseBodyInputSchema,
  z.ZodTypeDef,
  unknown
> = z.object({
  type:
    RetrieveToolResponseBodyToolsResponse200ApplicationJson4Type$inboundSchema,
  properties: z.record(z.any()).optional(),
  required: z.array(z.string()).optional(),
});

/** @internal */
export type RetrieveToolResponseBodyInputSchema$Outbound = {
  type: string;
  properties?: { [k: string]: any } | undefined;
  required?: Array<string> | undefined;
};

/** @internal */
export const RetrieveToolResponseBodyInputSchema$outboundSchema: z.ZodType<
  RetrieveToolResponseBodyInputSchema$Outbound,
  z.ZodTypeDef,
  RetrieveToolResponseBodyInputSchema
> = z.object({
  type:
    RetrieveToolResponseBodyToolsResponse200ApplicationJson4Type$outboundSchema,
  properties: z.record(z.any()).optional(),
  required: z.array(z.string()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RetrieveToolResponseBodyInputSchema$ {
  /** @deprecated use `RetrieveToolResponseBodyInputSchema$inboundSchema` instead. */
  export const inboundSchema =
    RetrieveToolResponseBodyInputSchema$inboundSchema;
  /** @deprecated use `RetrieveToolResponseBodyInputSchema$outboundSchema` instead. */
  export const outboundSchema =
    RetrieveToolResponseBodyInputSchema$outboundSchema;
  /** @deprecated use `RetrieveToolResponseBodyInputSchema$Outbound` instead. */
  export type Outbound = RetrieveToolResponseBodyInputSchema$Outbound;
}

export function retrieveToolResponseBodyInputSchemaToJSON(
  retrieveToolResponseBodyInputSchema: RetrieveToolResponseBodyInputSchema,
): string {
  return JSON.stringify(
    RetrieveToolResponseBodyInputSchema$outboundSchema.parse(
      retrieveToolResponseBodyInputSchema,
    ),
  );
}

export function retrieveToolResponseBodyInputSchemaFromJSON(
  jsonString: string,
): SafeParseResult<RetrieveToolResponseBodyInputSchema, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      RetrieveToolResponseBodyInputSchema$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RetrieveToolResponseBodyInputSchema' from JSON`,
  );
}

/** @internal */
export const RetrieveToolResponseBodyConnectionType$inboundSchema:
  z.ZodNativeEnum<typeof RetrieveToolResponseBodyConnectionType> = z.nativeEnum(
    RetrieveToolResponseBodyConnectionType,
  );

/** @internal */
export const RetrieveToolResponseBodyConnectionType$outboundSchema:
  z.ZodNativeEnum<typeof RetrieveToolResponseBodyConnectionType> =
    RetrieveToolResponseBodyConnectionType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RetrieveToolResponseBodyConnectionType$ {
  /** @deprecated use `RetrieveToolResponseBodyConnectionType$inboundSchema` instead. */
  export const inboundSchema =
    RetrieveToolResponseBodyConnectionType$inboundSchema;
  /** @deprecated use `RetrieveToolResponseBodyConnectionType$outboundSchema` instead. */
  export const outboundSchema =
    RetrieveToolResponseBodyConnectionType$outboundSchema;
}

/** @internal */
export const RetrieveToolResponseBodyMcp$inboundSchema: z.ZodType<
  RetrieveToolResponseBodyMcp,
  z.ZodTypeDef,
  unknown
> = z.object({
  server_id: z.string(),
  tool_name: z.string(),
  server_url: z.string(),
  headers: z.record(z.lazy(() => RetrieveToolResponseBodyHeaders$inboundSchema))
    .optional(),
  input_schema: z.lazy(() => RetrieveToolResponseBodyInputSchema$inboundSchema),
  connection_type: RetrieveToolResponseBodyConnectionType$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "server_id": "serverId",
    "tool_name": "toolName",
    "server_url": "serverUrl",
    "input_schema": "inputSchema",
    "connection_type": "connectionType",
  });
});

/** @internal */
export type RetrieveToolResponseBodyMcp$Outbound = {
  server_id: string;
  tool_name: string;
  server_url: string;
  headers?:
    | { [k: string]: RetrieveToolResponseBodyHeaders$Outbound }
    | undefined;
  input_schema: RetrieveToolResponseBodyInputSchema$Outbound;
  connection_type: string;
};

/** @internal */
export const RetrieveToolResponseBodyMcp$outboundSchema: z.ZodType<
  RetrieveToolResponseBodyMcp$Outbound,
  z.ZodTypeDef,
  RetrieveToolResponseBodyMcp
> = z.object({
  serverId: z.string(),
  toolName: z.string(),
  serverUrl: z.string(),
  headers: z.record(
    z.lazy(() => RetrieveToolResponseBodyHeaders$outboundSchema),
  ).optional(),
  inputSchema: z.lazy(() => RetrieveToolResponseBodyInputSchema$outboundSchema),
  connectionType: RetrieveToolResponseBodyConnectionType$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    serverId: "server_id",
    toolName: "tool_name",
    serverUrl: "server_url",
    inputSchema: "input_schema",
    connectionType: "connection_type",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RetrieveToolResponseBodyMcp$ {
  /** @deprecated use `RetrieveToolResponseBodyMcp$inboundSchema` instead. */
  export const inboundSchema = RetrieveToolResponseBodyMcp$inboundSchema;
  /** @deprecated use `RetrieveToolResponseBodyMcp$outboundSchema` instead. */
  export const outboundSchema = RetrieveToolResponseBodyMcp$outboundSchema;
  /** @deprecated use `RetrieveToolResponseBodyMcp$Outbound` instead. */
  export type Outbound = RetrieveToolResponseBodyMcp$Outbound;
}

export function retrieveToolResponseBodyMcpToJSON(
  retrieveToolResponseBodyMcp: RetrieveToolResponseBodyMcp,
): string {
  return JSON.stringify(
    RetrieveToolResponseBodyMcp$outboundSchema.parse(
      retrieveToolResponseBodyMcp,
    ),
  );
}

export function retrieveToolResponseBodyMcpFromJSON(
  jsonString: string,
): SafeParseResult<RetrieveToolResponseBodyMcp, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => RetrieveToolResponseBodyMcp$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RetrieveToolResponseBodyMcp' from JSON`,
  );
}

/** @internal */
export const RetrieveToolResponseBody4$inboundSchema: z.ZodType<
  RetrieveToolResponseBody4,
  z.ZodTypeDef,
  unknown
> = z.object({
  _id: z.string().default("01K6G6607AA1DVN6GT3BG28KWR"),
  path: z.string(),
  key: z.string(),
  display_name: z.string(),
  description: z.string(),
  created_by_id: z.string().optional(),
  updated_by_id: z.string().optional(),
  project_id: z.string(),
  workspace_id: z.string(),
  created: z.string(),
  updated: z.string(),
  status: RetrieveToolResponseBodyToolsResponse200Status$inboundSchema.default(
    "live",
  ),
  version_hash: z.string().optional(),
  type: RetrieveToolResponseBodyToolsResponse200Type$inboundSchema,
  mcp: z.lazy(() => RetrieveToolResponseBodyMcp$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "_id": "id",
    "display_name": "displayName",
    "created_by_id": "createdById",
    "updated_by_id": "updatedById",
    "project_id": "projectId",
    "workspace_id": "workspaceId",
    "version_hash": "versionHash",
  });
});

/** @internal */
export type RetrieveToolResponseBody4$Outbound = {
  _id: string;
  path: string;
  key: string;
  display_name: string;
  description: string;
  created_by_id?: string | undefined;
  updated_by_id?: string | undefined;
  project_id: string;
  workspace_id: string;
  created: string;
  updated: string;
  status: string;
  version_hash?: string | undefined;
  type: string;
  mcp: RetrieveToolResponseBodyMcp$Outbound;
};

/** @internal */
export const RetrieveToolResponseBody4$outboundSchema: z.ZodType<
  RetrieveToolResponseBody4$Outbound,
  z.ZodTypeDef,
  RetrieveToolResponseBody4
> = z.object({
  id: z.string().default("01K6G6607AA1DVN6GT3BG28KWR"),
  path: z.string(),
  key: z.string(),
  displayName: z.string(),
  description: z.string(),
  createdById: z.string().optional(),
  updatedById: z.string().optional(),
  projectId: z.string(),
  workspaceId: z.string(),
  created: z.string(),
  updated: z.string(),
  status: RetrieveToolResponseBodyToolsResponse200Status$outboundSchema.default(
    "live",
  ),
  versionHash: z.string().optional(),
  type: RetrieveToolResponseBodyToolsResponse200Type$outboundSchema,
  mcp: z.lazy(() => RetrieveToolResponseBodyMcp$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    id: "_id",
    displayName: "display_name",
    createdById: "created_by_id",
    updatedById: "updated_by_id",
    projectId: "project_id",
    workspaceId: "workspace_id",
    versionHash: "version_hash",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RetrieveToolResponseBody4$ {
  /** @deprecated use `RetrieveToolResponseBody4$inboundSchema` instead. */
  export const inboundSchema = RetrieveToolResponseBody4$inboundSchema;
  /** @deprecated use `RetrieveToolResponseBody4$outboundSchema` instead. */
  export const outboundSchema = RetrieveToolResponseBody4$outboundSchema;
  /** @deprecated use `RetrieveToolResponseBody4$Outbound` instead. */
  export type Outbound = RetrieveToolResponseBody4$Outbound;
}

export function retrieveToolResponseBody4ToJSON(
  retrieveToolResponseBody4: RetrieveToolResponseBody4,
): string {
  return JSON.stringify(
    RetrieveToolResponseBody4$outboundSchema.parse(retrieveToolResponseBody4),
  );
}

export function retrieveToolResponseBody4FromJSON(
  jsonString: string,
): SafeParseResult<RetrieveToolResponseBody4, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => RetrieveToolResponseBody4$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RetrieveToolResponseBody4' from JSON`,
  );
}

/** @internal */
export const RetrieveToolResponseBodyToolsResponseStatus$inboundSchema:
  z.ZodNativeEnum<typeof RetrieveToolResponseBodyToolsResponseStatus> = z
    .nativeEnum(RetrieveToolResponseBodyToolsResponseStatus);

/** @internal */
export const RetrieveToolResponseBodyToolsResponseStatus$outboundSchema:
  z.ZodNativeEnum<typeof RetrieveToolResponseBodyToolsResponseStatus> =
    RetrieveToolResponseBodyToolsResponseStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RetrieveToolResponseBodyToolsResponseStatus$ {
  /** @deprecated use `RetrieveToolResponseBodyToolsResponseStatus$inboundSchema` instead. */
  export const inboundSchema =
    RetrieveToolResponseBodyToolsResponseStatus$inboundSchema;
  /** @deprecated use `RetrieveToolResponseBodyToolsResponseStatus$outboundSchema` instead. */
  export const outboundSchema =
    RetrieveToolResponseBodyToolsResponseStatus$outboundSchema;
}

/** @internal */
export const RetrieveToolResponseBodyToolsResponseType$inboundSchema:
  z.ZodNativeEnum<typeof RetrieveToolResponseBodyToolsResponseType> = z
    .nativeEnum(RetrieveToolResponseBodyToolsResponseType);

/** @internal */
export const RetrieveToolResponseBodyToolsResponseType$outboundSchema:
  z.ZodNativeEnum<typeof RetrieveToolResponseBodyToolsResponseType> =
    RetrieveToolResponseBodyToolsResponseType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RetrieveToolResponseBodyToolsResponseType$ {
  /** @deprecated use `RetrieveToolResponseBodyToolsResponseType$inboundSchema` instead. */
  export const inboundSchema =
    RetrieveToolResponseBodyToolsResponseType$inboundSchema;
  /** @deprecated use `RetrieveToolResponseBodyToolsResponseType$outboundSchema` instead. */
  export const outboundSchema =
    RetrieveToolResponseBodyToolsResponseType$outboundSchema;
}

/** @internal */
export const RetrieveToolResponseBodyMethod$inboundSchema: z.ZodNativeEnum<
  typeof RetrieveToolResponseBodyMethod
> = z.nativeEnum(RetrieveToolResponseBodyMethod);

/** @internal */
export const RetrieveToolResponseBodyMethod$outboundSchema: z.ZodNativeEnum<
  typeof RetrieveToolResponseBodyMethod
> = RetrieveToolResponseBodyMethod$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RetrieveToolResponseBodyMethod$ {
  /** @deprecated use `RetrieveToolResponseBodyMethod$inboundSchema` instead. */
  export const inboundSchema = RetrieveToolResponseBodyMethod$inboundSchema;
  /** @deprecated use `RetrieveToolResponseBodyMethod$outboundSchema` instead. */
  export const outboundSchema = RetrieveToolResponseBodyMethod$outboundSchema;
}

/** @internal */
export const RetrieveToolResponseBodyBlueprint$inboundSchema: z.ZodType<
  RetrieveToolResponseBodyBlueprint,
  z.ZodTypeDef,
  unknown
> = z.object({
  url: z.string(),
  method: RetrieveToolResponseBodyMethod$inboundSchema,
  headers: z.record(z.string()).optional(),
  body: z.record(z.any()).optional(),
});

/** @internal */
export type RetrieveToolResponseBodyBlueprint$Outbound = {
  url: string;
  method: string;
  headers?: { [k: string]: string } | undefined;
  body?: { [k: string]: any } | undefined;
};

/** @internal */
export const RetrieveToolResponseBodyBlueprint$outboundSchema: z.ZodType<
  RetrieveToolResponseBodyBlueprint$Outbound,
  z.ZodTypeDef,
  RetrieveToolResponseBodyBlueprint
> = z.object({
  url: z.string(),
  method: RetrieveToolResponseBodyMethod$outboundSchema,
  headers: z.record(z.string()).optional(),
  body: z.record(z.any()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RetrieveToolResponseBodyBlueprint$ {
  /** @deprecated use `RetrieveToolResponseBodyBlueprint$inboundSchema` instead. */
  export const inboundSchema = RetrieveToolResponseBodyBlueprint$inboundSchema;
  /** @deprecated use `RetrieveToolResponseBodyBlueprint$outboundSchema` instead. */
  export const outboundSchema =
    RetrieveToolResponseBodyBlueprint$outboundSchema;
  /** @deprecated use `RetrieveToolResponseBodyBlueprint$Outbound` instead. */
  export type Outbound = RetrieveToolResponseBodyBlueprint$Outbound;
}

export function retrieveToolResponseBodyBlueprintToJSON(
  retrieveToolResponseBodyBlueprint: RetrieveToolResponseBodyBlueprint,
): string {
  return JSON.stringify(
    RetrieveToolResponseBodyBlueprint$outboundSchema.parse(
      retrieveToolResponseBodyBlueprint,
    ),
  );
}

export function retrieveToolResponseBodyBlueprintFromJSON(
  jsonString: string,
): SafeParseResult<RetrieveToolResponseBodyBlueprint, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => RetrieveToolResponseBodyBlueprint$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RetrieveToolResponseBodyBlueprint' from JSON`,
  );
}

/** @internal */
export const RetrieveToolResponseBodyToolsResponse200ApplicationJson3Type$inboundSchema:
  z.ZodNativeEnum<
    typeof RetrieveToolResponseBodyToolsResponse200ApplicationJson3Type
  > = z.nativeEnum(
    RetrieveToolResponseBodyToolsResponse200ApplicationJson3Type,
  );

/** @internal */
export const RetrieveToolResponseBodyToolsResponse200ApplicationJson3Type$outboundSchema:
  z.ZodNativeEnum<
    typeof RetrieveToolResponseBodyToolsResponse200ApplicationJson3Type
  > =
    RetrieveToolResponseBodyToolsResponse200ApplicationJson3Type$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RetrieveToolResponseBodyToolsResponse200ApplicationJson3Type$ {
  /** @deprecated use `RetrieveToolResponseBodyToolsResponse200ApplicationJson3Type$inboundSchema` instead. */
  export const inboundSchema =
    RetrieveToolResponseBodyToolsResponse200ApplicationJson3Type$inboundSchema;
  /** @deprecated use `RetrieveToolResponseBodyToolsResponse200ApplicationJson3Type$outboundSchema` instead. */
  export const outboundSchema =
    RetrieveToolResponseBodyToolsResponse200ApplicationJson3Type$outboundSchema;
}

/** @internal */
export const RetrieveToolResponseBodyDefaultValue$inboundSchema: z.ZodType<
  RetrieveToolResponseBodyDefaultValue,
  z.ZodTypeDef,
  unknown
> = z.union([z.string(), z.number(), z.boolean()]);

/** @internal */
export type RetrieveToolResponseBodyDefaultValue$Outbound =
  | string
  | number
  | boolean;

/** @internal */
export const RetrieveToolResponseBodyDefaultValue$outboundSchema: z.ZodType<
  RetrieveToolResponseBodyDefaultValue$Outbound,
  z.ZodTypeDef,
  RetrieveToolResponseBodyDefaultValue
> = z.union([z.string(), z.number(), z.boolean()]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RetrieveToolResponseBodyDefaultValue$ {
  /** @deprecated use `RetrieveToolResponseBodyDefaultValue$inboundSchema` instead. */
  export const inboundSchema =
    RetrieveToolResponseBodyDefaultValue$inboundSchema;
  /** @deprecated use `RetrieveToolResponseBodyDefaultValue$outboundSchema` instead. */
  export const outboundSchema =
    RetrieveToolResponseBodyDefaultValue$outboundSchema;
  /** @deprecated use `RetrieveToolResponseBodyDefaultValue$Outbound` instead. */
  export type Outbound = RetrieveToolResponseBodyDefaultValue$Outbound;
}

export function retrieveToolResponseBodyDefaultValueToJSON(
  retrieveToolResponseBodyDefaultValue: RetrieveToolResponseBodyDefaultValue,
): string {
  return JSON.stringify(
    RetrieveToolResponseBodyDefaultValue$outboundSchema.parse(
      retrieveToolResponseBodyDefaultValue,
    ),
  );
}

export function retrieveToolResponseBodyDefaultValueFromJSON(
  jsonString: string,
): SafeParseResult<RetrieveToolResponseBodyDefaultValue, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      RetrieveToolResponseBodyDefaultValue$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RetrieveToolResponseBodyDefaultValue' from JSON`,
  );
}

/** @internal */
export const RetrieveToolResponseBodyArguments$inboundSchema: z.ZodType<
  RetrieveToolResponseBodyArguments,
  z.ZodTypeDef,
  unknown
> = z.object({
  type:
    RetrieveToolResponseBodyToolsResponse200ApplicationJson3Type$inboundSchema,
  description: z.string(),
  send_to_model: z.boolean().default(true),
  default_value: z.union([z.string(), z.number(), z.boolean()]).optional(),
}).transform((v) => {
  return remap$(v, {
    "send_to_model": "sendToModel",
    "default_value": "defaultValue",
  });
});

/** @internal */
export type RetrieveToolResponseBodyArguments$Outbound = {
  type: string;
  description: string;
  send_to_model: boolean;
  default_value?: string | number | boolean | undefined;
};

/** @internal */
export const RetrieveToolResponseBodyArguments$outboundSchema: z.ZodType<
  RetrieveToolResponseBodyArguments$Outbound,
  z.ZodTypeDef,
  RetrieveToolResponseBodyArguments
> = z.object({
  type:
    RetrieveToolResponseBodyToolsResponse200ApplicationJson3Type$outboundSchema,
  description: z.string(),
  sendToModel: z.boolean().default(true),
  defaultValue: z.union([z.string(), z.number(), z.boolean()]).optional(),
}).transform((v) => {
  return remap$(v, {
    sendToModel: "send_to_model",
    defaultValue: "default_value",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RetrieveToolResponseBodyArguments$ {
  /** @deprecated use `RetrieveToolResponseBodyArguments$inboundSchema` instead. */
  export const inboundSchema = RetrieveToolResponseBodyArguments$inboundSchema;
  /** @deprecated use `RetrieveToolResponseBodyArguments$outboundSchema` instead. */
  export const outboundSchema =
    RetrieveToolResponseBodyArguments$outboundSchema;
  /** @deprecated use `RetrieveToolResponseBodyArguments$Outbound` instead. */
  export type Outbound = RetrieveToolResponseBodyArguments$Outbound;
}

export function retrieveToolResponseBodyArgumentsToJSON(
  retrieveToolResponseBodyArguments: RetrieveToolResponseBodyArguments,
): string {
  return JSON.stringify(
    RetrieveToolResponseBodyArguments$outboundSchema.parse(
      retrieveToolResponseBodyArguments,
    ),
  );
}

export function retrieveToolResponseBodyArgumentsFromJSON(
  jsonString: string,
): SafeParseResult<RetrieveToolResponseBodyArguments, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => RetrieveToolResponseBodyArguments$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RetrieveToolResponseBodyArguments' from JSON`,
  );
}

/** @internal */
export const RetrieveToolResponseBodyHttp$inboundSchema: z.ZodType<
  RetrieveToolResponseBodyHttp,
  z.ZodTypeDef,
  unknown
> = z.object({
  blueprint: z.lazy(() => RetrieveToolResponseBodyBlueprint$inboundSchema),
  arguments: z.record(
    z.lazy(() => RetrieveToolResponseBodyArguments$inboundSchema),
  ).optional(),
});

/** @internal */
export type RetrieveToolResponseBodyHttp$Outbound = {
  blueprint: RetrieveToolResponseBodyBlueprint$Outbound;
  arguments?:
    | { [k: string]: RetrieveToolResponseBodyArguments$Outbound }
    | undefined;
};

/** @internal */
export const RetrieveToolResponseBodyHttp$outboundSchema: z.ZodType<
  RetrieveToolResponseBodyHttp$Outbound,
  z.ZodTypeDef,
  RetrieveToolResponseBodyHttp
> = z.object({
  blueprint: z.lazy(() => RetrieveToolResponseBodyBlueprint$outboundSchema),
  arguments: z.record(
    z.lazy(() => RetrieveToolResponseBodyArguments$outboundSchema),
  ).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RetrieveToolResponseBodyHttp$ {
  /** @deprecated use `RetrieveToolResponseBodyHttp$inboundSchema` instead. */
  export const inboundSchema = RetrieveToolResponseBodyHttp$inboundSchema;
  /** @deprecated use `RetrieveToolResponseBodyHttp$outboundSchema` instead. */
  export const outboundSchema = RetrieveToolResponseBodyHttp$outboundSchema;
  /** @deprecated use `RetrieveToolResponseBodyHttp$Outbound` instead. */
  export type Outbound = RetrieveToolResponseBodyHttp$Outbound;
}

export function retrieveToolResponseBodyHttpToJSON(
  retrieveToolResponseBodyHttp: RetrieveToolResponseBodyHttp,
): string {
  return JSON.stringify(
    RetrieveToolResponseBodyHttp$outboundSchema.parse(
      retrieveToolResponseBodyHttp,
    ),
  );
}

export function retrieveToolResponseBodyHttpFromJSON(
  jsonString: string,
): SafeParseResult<RetrieveToolResponseBodyHttp, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => RetrieveToolResponseBodyHttp$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RetrieveToolResponseBodyHttp' from JSON`,
  );
}

/** @internal */
export const RetrieveToolResponseBody3$inboundSchema: z.ZodType<
  RetrieveToolResponseBody3,
  z.ZodTypeDef,
  unknown
> = z.object({
  _id: z.string().default("01K6G6607AW2S86ND5T1SNFB81"),
  path: z.string(),
  key: z.string(),
  display_name: z.string(),
  description: z.string(),
  created_by_id: z.string().optional(),
  updated_by_id: z.string().optional(),
  project_id: z.string(),
  workspace_id: z.string(),
  created: z.string(),
  updated: z.string(),
  status: RetrieveToolResponseBodyToolsResponseStatus$inboundSchema.default(
    "live",
  ),
  version_hash: z.string().optional(),
  type: RetrieveToolResponseBodyToolsResponseType$inboundSchema,
  http: z.lazy(() => RetrieveToolResponseBodyHttp$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "_id": "id",
    "display_name": "displayName",
    "created_by_id": "createdById",
    "updated_by_id": "updatedById",
    "project_id": "projectId",
    "workspace_id": "workspaceId",
    "version_hash": "versionHash",
  });
});

/** @internal */
export type RetrieveToolResponseBody3$Outbound = {
  _id: string;
  path: string;
  key: string;
  display_name: string;
  description: string;
  created_by_id?: string | undefined;
  updated_by_id?: string | undefined;
  project_id: string;
  workspace_id: string;
  created: string;
  updated: string;
  status: string;
  version_hash?: string | undefined;
  type: string;
  http: RetrieveToolResponseBodyHttp$Outbound;
};

/** @internal */
export const RetrieveToolResponseBody3$outboundSchema: z.ZodType<
  RetrieveToolResponseBody3$Outbound,
  z.ZodTypeDef,
  RetrieveToolResponseBody3
> = z.object({
  id: z.string().default("01K6G6607AW2S86ND5T1SNFB81"),
  path: z.string(),
  key: z.string(),
  displayName: z.string(),
  description: z.string(),
  createdById: z.string().optional(),
  updatedById: z.string().optional(),
  projectId: z.string(),
  workspaceId: z.string(),
  created: z.string(),
  updated: z.string(),
  status: RetrieveToolResponseBodyToolsResponseStatus$outboundSchema.default(
    "live",
  ),
  versionHash: z.string().optional(),
  type: RetrieveToolResponseBodyToolsResponseType$outboundSchema,
  http: z.lazy(() => RetrieveToolResponseBodyHttp$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    id: "_id",
    displayName: "display_name",
    createdById: "created_by_id",
    updatedById: "updated_by_id",
    projectId: "project_id",
    workspaceId: "workspace_id",
    versionHash: "version_hash",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RetrieveToolResponseBody3$ {
  /** @deprecated use `RetrieveToolResponseBody3$inboundSchema` instead. */
  export const inboundSchema = RetrieveToolResponseBody3$inboundSchema;
  /** @deprecated use `RetrieveToolResponseBody3$outboundSchema` instead. */
  export const outboundSchema = RetrieveToolResponseBody3$outboundSchema;
  /** @deprecated use `RetrieveToolResponseBody3$Outbound` instead. */
  export type Outbound = RetrieveToolResponseBody3$Outbound;
}

export function retrieveToolResponseBody3ToJSON(
  retrieveToolResponseBody3: RetrieveToolResponseBody3,
): string {
  return JSON.stringify(
    RetrieveToolResponseBody3$outboundSchema.parse(retrieveToolResponseBody3),
  );
}

export function retrieveToolResponseBody3FromJSON(
  jsonString: string,
): SafeParseResult<RetrieveToolResponseBody3, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => RetrieveToolResponseBody3$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RetrieveToolResponseBody3' from JSON`,
  );
}

/** @internal */
export const RetrieveToolResponseBodyToolsStatus$inboundSchema: z.ZodNativeEnum<
  typeof RetrieveToolResponseBodyToolsStatus
> = z.nativeEnum(RetrieveToolResponseBodyToolsStatus);

/** @internal */
export const RetrieveToolResponseBodyToolsStatus$outboundSchema:
  z.ZodNativeEnum<typeof RetrieveToolResponseBodyToolsStatus> =
    RetrieveToolResponseBodyToolsStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RetrieveToolResponseBodyToolsStatus$ {
  /** @deprecated use `RetrieveToolResponseBodyToolsStatus$inboundSchema` instead. */
  export const inboundSchema =
    RetrieveToolResponseBodyToolsStatus$inboundSchema;
  /** @deprecated use `RetrieveToolResponseBodyToolsStatus$outboundSchema` instead. */
  export const outboundSchema =
    RetrieveToolResponseBodyToolsStatus$outboundSchema;
}

/** @internal */
export const RetrieveToolResponseBodyToolsType$inboundSchema: z.ZodNativeEnum<
  typeof RetrieveToolResponseBodyToolsType
> = z.nativeEnum(RetrieveToolResponseBodyToolsType);

/** @internal */
export const RetrieveToolResponseBodyToolsType$outboundSchema: z.ZodNativeEnum<
  typeof RetrieveToolResponseBodyToolsType
> = RetrieveToolResponseBodyToolsType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RetrieveToolResponseBodyToolsType$ {
  /** @deprecated use `RetrieveToolResponseBodyToolsType$inboundSchema` instead. */
  export const inboundSchema = RetrieveToolResponseBodyToolsType$inboundSchema;
  /** @deprecated use `RetrieveToolResponseBodyToolsType$outboundSchema` instead. */
  export const outboundSchema =
    RetrieveToolResponseBodyToolsType$outboundSchema;
}

/** @internal */
export const RetrieveToolResponseBodyJsonSchema$inboundSchema: z.ZodType<
  RetrieveToolResponseBodyJsonSchema,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.string(),
  description: z.string().optional(),
  schema: z.record(z.any()),
  strict: z.nullable(z.boolean().default(false)),
});

/** @internal */
export type RetrieveToolResponseBodyJsonSchema$Outbound = {
  name: string;
  description?: string | undefined;
  schema: { [k: string]: any };
  strict: boolean | null;
};

/** @internal */
export const RetrieveToolResponseBodyJsonSchema$outboundSchema: z.ZodType<
  RetrieveToolResponseBodyJsonSchema$Outbound,
  z.ZodTypeDef,
  RetrieveToolResponseBodyJsonSchema
> = z.object({
  name: z.string(),
  description: z.string().optional(),
  schema: z.record(z.any()),
  strict: z.nullable(z.boolean().default(false)),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RetrieveToolResponseBodyJsonSchema$ {
  /** @deprecated use `RetrieveToolResponseBodyJsonSchema$inboundSchema` instead. */
  export const inboundSchema = RetrieveToolResponseBodyJsonSchema$inboundSchema;
  /** @deprecated use `RetrieveToolResponseBodyJsonSchema$outboundSchema` instead. */
  export const outboundSchema =
    RetrieveToolResponseBodyJsonSchema$outboundSchema;
  /** @deprecated use `RetrieveToolResponseBodyJsonSchema$Outbound` instead. */
  export type Outbound = RetrieveToolResponseBodyJsonSchema$Outbound;
}

export function retrieveToolResponseBodyJsonSchemaToJSON(
  retrieveToolResponseBodyJsonSchema: RetrieveToolResponseBodyJsonSchema,
): string {
  return JSON.stringify(
    RetrieveToolResponseBodyJsonSchema$outboundSchema.parse(
      retrieveToolResponseBodyJsonSchema,
    ),
  );
}

export function retrieveToolResponseBodyJsonSchemaFromJSON(
  jsonString: string,
): SafeParseResult<RetrieveToolResponseBodyJsonSchema, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      RetrieveToolResponseBodyJsonSchema$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RetrieveToolResponseBodyJsonSchema' from JSON`,
  );
}

/** @internal */
export const RetrieveToolResponseBody2$inboundSchema: z.ZodType<
  RetrieveToolResponseBody2,
  z.ZodTypeDef,
  unknown
> = z.object({
  _id: z.string().default("01K6G66079R3FSZX4GTREBJ6FG"),
  path: z.string(),
  key: z.string(),
  display_name: z.string(),
  description: z.string(),
  created_by_id: z.string().optional(),
  updated_by_id: z.string().optional(),
  project_id: z.string(),
  workspace_id: z.string(),
  created: z.string(),
  updated: z.string(),
  status: RetrieveToolResponseBodyToolsStatus$inboundSchema.default("live"),
  version_hash: z.string().optional(),
  type: RetrieveToolResponseBodyToolsType$inboundSchema,
  json_schema: z.lazy(() => RetrieveToolResponseBodyJsonSchema$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "_id": "id",
    "display_name": "displayName",
    "created_by_id": "createdById",
    "updated_by_id": "updatedById",
    "project_id": "projectId",
    "workspace_id": "workspaceId",
    "version_hash": "versionHash",
    "json_schema": "jsonSchema",
  });
});

/** @internal */
export type RetrieveToolResponseBody2$Outbound = {
  _id: string;
  path: string;
  key: string;
  display_name: string;
  description: string;
  created_by_id?: string | undefined;
  updated_by_id?: string | undefined;
  project_id: string;
  workspace_id: string;
  created: string;
  updated: string;
  status: string;
  version_hash?: string | undefined;
  type: string;
  json_schema: RetrieveToolResponseBodyJsonSchema$Outbound;
};

/** @internal */
export const RetrieveToolResponseBody2$outboundSchema: z.ZodType<
  RetrieveToolResponseBody2$Outbound,
  z.ZodTypeDef,
  RetrieveToolResponseBody2
> = z.object({
  id: z.string().default("01K6G66079R3FSZX4GTREBJ6FG"),
  path: z.string(),
  key: z.string(),
  displayName: z.string(),
  description: z.string(),
  createdById: z.string().optional(),
  updatedById: z.string().optional(),
  projectId: z.string(),
  workspaceId: z.string(),
  created: z.string(),
  updated: z.string(),
  status: RetrieveToolResponseBodyToolsStatus$outboundSchema.default("live"),
  versionHash: z.string().optional(),
  type: RetrieveToolResponseBodyToolsType$outboundSchema,
  jsonSchema: z.lazy(() => RetrieveToolResponseBodyJsonSchema$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    id: "_id",
    displayName: "display_name",
    createdById: "created_by_id",
    updatedById: "updated_by_id",
    projectId: "project_id",
    workspaceId: "workspace_id",
    versionHash: "version_hash",
    jsonSchema: "json_schema",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RetrieveToolResponseBody2$ {
  /** @deprecated use `RetrieveToolResponseBody2$inboundSchema` instead. */
  export const inboundSchema = RetrieveToolResponseBody2$inboundSchema;
  /** @deprecated use `RetrieveToolResponseBody2$outboundSchema` instead. */
  export const outboundSchema = RetrieveToolResponseBody2$outboundSchema;
  /** @deprecated use `RetrieveToolResponseBody2$Outbound` instead. */
  export type Outbound = RetrieveToolResponseBody2$Outbound;
}

export function retrieveToolResponseBody2ToJSON(
  retrieveToolResponseBody2: RetrieveToolResponseBody2,
): string {
  return JSON.stringify(
    RetrieveToolResponseBody2$outboundSchema.parse(retrieveToolResponseBody2),
  );
}

export function retrieveToolResponseBody2FromJSON(
  jsonString: string,
): SafeParseResult<RetrieveToolResponseBody2, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => RetrieveToolResponseBody2$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RetrieveToolResponseBody2' from JSON`,
  );
}

/** @internal */
export const RetrieveToolResponseBodyStatus$inboundSchema: z.ZodNativeEnum<
  typeof RetrieveToolResponseBodyStatus
> = z.nativeEnum(RetrieveToolResponseBodyStatus);

/** @internal */
export const RetrieveToolResponseBodyStatus$outboundSchema: z.ZodNativeEnum<
  typeof RetrieveToolResponseBodyStatus
> = RetrieveToolResponseBodyStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RetrieveToolResponseBodyStatus$ {
  /** @deprecated use `RetrieveToolResponseBodyStatus$inboundSchema` instead. */
  export const inboundSchema = RetrieveToolResponseBodyStatus$inboundSchema;
  /** @deprecated use `RetrieveToolResponseBodyStatus$outboundSchema` instead. */
  export const outboundSchema = RetrieveToolResponseBodyStatus$outboundSchema;
}

/** @internal */
export const RetrieveToolResponseBodyType$inboundSchema: z.ZodNativeEnum<
  typeof RetrieveToolResponseBodyType
> = z.nativeEnum(RetrieveToolResponseBodyType);

/** @internal */
export const RetrieveToolResponseBodyType$outboundSchema: z.ZodNativeEnum<
  typeof RetrieveToolResponseBodyType
> = RetrieveToolResponseBodyType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RetrieveToolResponseBodyType$ {
  /** @deprecated use `RetrieveToolResponseBodyType$inboundSchema` instead. */
  export const inboundSchema = RetrieveToolResponseBodyType$inboundSchema;
  /** @deprecated use `RetrieveToolResponseBodyType$outboundSchema` instead. */
  export const outboundSchema = RetrieveToolResponseBodyType$outboundSchema;
}

/** @internal */
export const RetrieveToolResponseBodyFunction$inboundSchema: z.ZodType<
  RetrieveToolResponseBodyFunction,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.string(),
  description: z.string().optional(),
  strict: z.boolean().optional(),
  parameters: z.record(z.any()).optional(),
});

/** @internal */
export type RetrieveToolResponseBodyFunction$Outbound = {
  name: string;
  description?: string | undefined;
  strict?: boolean | undefined;
  parameters?: { [k: string]: any } | undefined;
};

/** @internal */
export const RetrieveToolResponseBodyFunction$outboundSchema: z.ZodType<
  RetrieveToolResponseBodyFunction$Outbound,
  z.ZodTypeDef,
  RetrieveToolResponseBodyFunction
> = z.object({
  name: z.string(),
  description: z.string().optional(),
  strict: z.boolean().optional(),
  parameters: z.record(z.any()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RetrieveToolResponseBodyFunction$ {
  /** @deprecated use `RetrieveToolResponseBodyFunction$inboundSchema` instead. */
  export const inboundSchema = RetrieveToolResponseBodyFunction$inboundSchema;
  /** @deprecated use `RetrieveToolResponseBodyFunction$outboundSchema` instead. */
  export const outboundSchema = RetrieveToolResponseBodyFunction$outboundSchema;
  /** @deprecated use `RetrieveToolResponseBodyFunction$Outbound` instead. */
  export type Outbound = RetrieveToolResponseBodyFunction$Outbound;
}

export function retrieveToolResponseBodyFunctionToJSON(
  retrieveToolResponseBodyFunction: RetrieveToolResponseBodyFunction,
): string {
  return JSON.stringify(
    RetrieveToolResponseBodyFunction$outboundSchema.parse(
      retrieveToolResponseBodyFunction,
    ),
  );
}

export function retrieveToolResponseBodyFunctionFromJSON(
  jsonString: string,
): SafeParseResult<RetrieveToolResponseBodyFunction, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => RetrieveToolResponseBodyFunction$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RetrieveToolResponseBodyFunction' from JSON`,
  );
}

/** @internal */
export const RetrieveToolResponseBody1$inboundSchema: z.ZodType<
  RetrieveToolResponseBody1,
  z.ZodTypeDef,
  unknown
> = z.object({
  _id: z.string().default("01K6G66079YN9B405E5PTM0M9G"),
  path: z.string(),
  key: z.string(),
  display_name: z.string(),
  description: z.string(),
  created_by_id: z.string().optional(),
  updated_by_id: z.string().optional(),
  project_id: z.string(),
  workspace_id: z.string(),
  created: z.string(),
  updated: z.string(),
  status: RetrieveToolResponseBodyStatus$inboundSchema.default("live"),
  version_hash: z.string().optional(),
  type: RetrieveToolResponseBodyType$inboundSchema,
  function: z.lazy(() => RetrieveToolResponseBodyFunction$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "_id": "id",
    "display_name": "displayName",
    "created_by_id": "createdById",
    "updated_by_id": "updatedById",
    "project_id": "projectId",
    "workspace_id": "workspaceId",
    "version_hash": "versionHash",
  });
});

/** @internal */
export type RetrieveToolResponseBody1$Outbound = {
  _id: string;
  path: string;
  key: string;
  display_name: string;
  description: string;
  created_by_id?: string | undefined;
  updated_by_id?: string | undefined;
  project_id: string;
  workspace_id: string;
  created: string;
  updated: string;
  status: string;
  version_hash?: string | undefined;
  type: string;
  function: RetrieveToolResponseBodyFunction$Outbound;
};

/** @internal */
export const RetrieveToolResponseBody1$outboundSchema: z.ZodType<
  RetrieveToolResponseBody1$Outbound,
  z.ZodTypeDef,
  RetrieveToolResponseBody1
> = z.object({
  id: z.string().default("01K6G66079YN9B405E5PTM0M9G"),
  path: z.string(),
  key: z.string(),
  displayName: z.string(),
  description: z.string(),
  createdById: z.string().optional(),
  updatedById: z.string().optional(),
  projectId: z.string(),
  workspaceId: z.string(),
  created: z.string(),
  updated: z.string(),
  status: RetrieveToolResponseBodyStatus$outboundSchema.default("live"),
  versionHash: z.string().optional(),
  type: RetrieveToolResponseBodyType$outboundSchema,
  function: z.lazy(() => RetrieveToolResponseBodyFunction$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    id: "_id",
    displayName: "display_name",
    createdById: "created_by_id",
    updatedById: "updated_by_id",
    projectId: "project_id",
    workspaceId: "workspace_id",
    versionHash: "version_hash",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RetrieveToolResponseBody1$ {
  /** @deprecated use `RetrieveToolResponseBody1$inboundSchema` instead. */
  export const inboundSchema = RetrieveToolResponseBody1$inboundSchema;
  /** @deprecated use `RetrieveToolResponseBody1$outboundSchema` instead. */
  export const outboundSchema = RetrieveToolResponseBody1$outboundSchema;
  /** @deprecated use `RetrieveToolResponseBody1$Outbound` instead. */
  export type Outbound = RetrieveToolResponseBody1$Outbound;
}

export function retrieveToolResponseBody1ToJSON(
  retrieveToolResponseBody1: RetrieveToolResponseBody1,
): string {
  return JSON.stringify(
    RetrieveToolResponseBody1$outboundSchema.parse(retrieveToolResponseBody1),
  );
}

export function retrieveToolResponseBody1FromJSON(
  jsonString: string,
): SafeParseResult<RetrieveToolResponseBody1, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => RetrieveToolResponseBody1$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RetrieveToolResponseBody1' from JSON`,
  );
}

/** @internal */
export const RetrieveToolResponseBody$inboundSchema: z.ZodType<
  RetrieveToolResponseBody,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => RetrieveToolResponseBody1$inboundSchema),
  z.lazy(() => RetrieveToolResponseBody2$inboundSchema),
  z.lazy(() => RetrieveToolResponseBody3$inboundSchema),
  z.lazy(() => RetrieveToolResponseBody4$inboundSchema),
  z.lazy(() => RetrieveToolResponseBody5$inboundSchema),
]);

/** @internal */
export type RetrieveToolResponseBody$Outbound =
  | RetrieveToolResponseBody1$Outbound
  | RetrieveToolResponseBody2$Outbound
  | RetrieveToolResponseBody3$Outbound
  | RetrieveToolResponseBody4$Outbound
  | RetrieveToolResponseBody5$Outbound;

/** @internal */
export const RetrieveToolResponseBody$outboundSchema: z.ZodType<
  RetrieveToolResponseBody$Outbound,
  z.ZodTypeDef,
  RetrieveToolResponseBody
> = z.union([
  z.lazy(() => RetrieveToolResponseBody1$outboundSchema),
  z.lazy(() => RetrieveToolResponseBody2$outboundSchema),
  z.lazy(() => RetrieveToolResponseBody3$outboundSchema),
  z.lazy(() => RetrieveToolResponseBody4$outboundSchema),
  z.lazy(() => RetrieveToolResponseBody5$outboundSchema),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RetrieveToolResponseBody$ {
  /** @deprecated use `RetrieveToolResponseBody$inboundSchema` instead. */
  export const inboundSchema = RetrieveToolResponseBody$inboundSchema;
  /** @deprecated use `RetrieveToolResponseBody$outboundSchema` instead. */
  export const outboundSchema = RetrieveToolResponseBody$outboundSchema;
  /** @deprecated use `RetrieveToolResponseBody$Outbound` instead. */
  export type Outbound = RetrieveToolResponseBody$Outbound;
}

export function retrieveToolResponseBodyToJSON(
  retrieveToolResponseBody: RetrieveToolResponseBody,
): string {
  return JSON.stringify(
    RetrieveToolResponseBody$outboundSchema.parse(retrieveToolResponseBody),
  );
}

export function retrieveToolResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<RetrieveToolResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => RetrieveToolResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RetrieveToolResponseBody' from JSON`,
  );
}
