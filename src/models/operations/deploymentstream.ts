/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type DeploymentStreamGlobals = {
  environment?: string | undefined;
  contactId?: string | undefined;
};

export type DeploymentStreamInputs = string | number | boolean;

/**
 * The role of the prompt message
 */
export const DeploymentStreamRole = {
  System: "system",
  Assistant: "assistant",
  User: "user",
  Exception: "exception",
  Tool: "tool",
  Prompt: "prompt",
  Correction: "correction",
  ExpectedOutput: "expected_output",
} as const;
/**
 * The role of the prompt message
 */
export type DeploymentStreamRole = ClosedEnum<typeof DeploymentStreamRole>;

export const DeploymentStream2DeploymentsType = {
  ImageUrl: "image_url",
} as const;
export type DeploymentStream2DeploymentsType = ClosedEnum<
  typeof DeploymentStream2DeploymentsType
>;

export type DeploymentStream2ImageUrl = {
  /**
   * Either a URL of the image or the base64 encoded data URI.
   */
  url: string;
  /**
   * Specifies the detail level of the image. Currently only supported with OpenAI models
   */
  detail?: string | undefined;
};

/**
 * The image part of the prompt message. Only supported with vision models.
 */
export type DeploymentStream22 = {
  type: DeploymentStream2DeploymentsType;
  imageUrl: DeploymentStream2ImageUrl;
};

export const DeploymentStream2Type = {
  Text: "text",
} as const;
export type DeploymentStream2Type = ClosedEnum<typeof DeploymentStream2Type>;

/**
 * Text content part of a prompt message
 */
export type DeploymentStream21 = {
  type: DeploymentStream2Type;
  text: string;
};

export type DeploymentStreamContent2 = DeploymentStream21 | DeploymentStream22;

/**
 * The contents of the user message. Either the text content of the message or an array of content parts with a defined type, each can be of type `text` or `image_url` when passing in images. You can pass multiple images by adding multiple `image_url` content parts.
 */
export type DeploymentStreamContent =
  | string
  | Array<DeploymentStream21 | DeploymentStream22>;

export const DeploymentStreamType = {
  Function: "function",
} as const;
export type DeploymentStreamType = ClosedEnum<typeof DeploymentStreamType>;

export type DeploymentStreamFunction = {
  name: string;
  /**
   * JSON string arguments for the functions
   */
  arguments: string;
};

export type DeploymentStreamToolCalls = {
  id?: string | undefined;
  index?: number | undefined;
  type: DeploymentStreamType;
  function: DeploymentStreamFunction;
};

export type DeploymentStreamPrefixMessages = {
  /**
   * The role of the prompt message
   */
  role: DeploymentStreamRole;
  /**
   * The contents of the user message. Either the text content of the message or an array of content parts with a defined type, each can be of type `text` or `image_url` when passing in images. You can pass multiple images by adding multiple `image_url` content parts.
   */
  content: string | Array<DeploymentStream21 | DeploymentStream22>;
  toolCalls?: Array<DeploymentStreamToolCalls> | undefined;
};

/**
 * The role of the prompt message
 */
export const DeploymentStreamDeploymentsRole = {
  System: "system",
  Assistant: "assistant",
  User: "user",
  Exception: "exception",
  Tool: "tool",
  Prompt: "prompt",
  Correction: "correction",
  ExpectedOutput: "expected_output",
} as const;
/**
 * The role of the prompt message
 */
export type DeploymentStreamDeploymentsRole = ClosedEnum<
  typeof DeploymentStreamDeploymentsRole
>;

export const DeploymentStream2DeploymentsRequestRequestBodyType = {
  ImageUrl: "image_url",
} as const;
export type DeploymentStream2DeploymentsRequestRequestBodyType = ClosedEnum<
  typeof DeploymentStream2DeploymentsRequestRequestBodyType
>;

export type DeploymentStream2ImageUrlInput = {
  /**
   * Either a URL of the image or the base64 encoded data URI.
   */
  url: string;
  /**
   * Specifies the detail level of the image. Currently only supported with OpenAI models
   */
  detail?: string | undefined;
};

/**
 * The image part of the prompt message. Only supported with vision models.
 */
export type DeploymentStream22Input = {
  type: DeploymentStream2DeploymentsRequestRequestBodyType;
  imageUrl: DeploymentStream2ImageUrlInput;
};

export const DeploymentStream2DeploymentsRequestType = {
  Text: "text",
} as const;
export type DeploymentStream2DeploymentsRequestType = ClosedEnum<
  typeof DeploymentStream2DeploymentsRequestType
>;

/**
 * Text content part of a prompt message
 */
export type DeploymentStream2Deployments1 = {
  type: DeploymentStream2DeploymentsRequestType;
  text: string;
};

export type DeploymentStreamContent2Input =
  | DeploymentStream2Deployments1
  | DeploymentStream22Input;

/**
 * The contents of the user message. Either the text content of the message or an array of content parts with a defined type, each can be of type `text` or `image_url` when passing in images. You can pass multiple images by adding multiple `image_url` content parts.
 */
export type DeploymentStreamContentInput =
  | string
  | Array<DeploymentStream2Deployments1 | DeploymentStream22Input>;

export const DeploymentStreamDeploymentsType = {
  Function: "function",
} as const;
export type DeploymentStreamDeploymentsType = ClosedEnum<
  typeof DeploymentStreamDeploymentsType
>;

export type DeploymentStreamDeploymentsFunction = {
  name: string;
  /**
   * JSON string arguments for the functions
   */
  arguments: string;
};

export type DeploymentStreamDeploymentsToolCalls = {
  id?: string | undefined;
  index?: number | undefined;
  type: DeploymentStreamDeploymentsType;
  function: DeploymentStreamDeploymentsFunction;
};

export type DeploymentStreamMessages = {
  /**
   * The role of the prompt message
   */
  role: DeploymentStreamDeploymentsRole;
  /**
   * The contents of the user message. Either the text content of the message or an array of content parts with a defined type, each can be of type `text` or `image_url` when passing in images. You can pass multiple images by adding multiple `image_url` content parts.
   */
  content:
    | string
    | Array<DeploymentStream2Deployments1 | DeploymentStream22Input>;
  toolCalls?: Array<DeploymentStreamDeploymentsToolCalls> | undefined;
};

/**
 * Metadata about the document
 */
export type DeploymentStreamMetadata = {
  /**
   * Name of the file the text is from.
   */
  fileName?: string | undefined;
  /**
   * Content type of the file the text is from.
   */
  fileType?: string | undefined;
  /**
   * The page number the text is from.
   */
  pageNumber?: number | undefined;
};

export type DeploymentStreamDocuments = {
  /**
   * The text content of the document
   */
  text: string;
  /**
   * Metadata about the document
   */
  metadata?: DeploymentStreamMetadata | undefined;
};

export type DeploymentStreamInvokeOptions = {
  /**
   * Whether to include the retrieved knowledge chunks in the response.
   */
  includeRetrievals?: boolean | undefined;
};

export type DeploymentStreamRequestBody = {
  /**
   * The deployment key to invoke
   */
  key: string;
  /**
   * Key-value pairs variables to replace in your prompts. If a variable is not provided that is defined in the prompt, the default variables are used.
   */
  inputs?: { [k: string]: string | number | boolean } | undefined;
  /**
   * Key-value pairs that match your data model and fields declared in your configuration matrix. If you send multiple prompt keys, the context will be applied to the evaluation of each key.
   */
  context?: { [k: string]: any } | undefined;
  /**
   * A list of messages to include after the `System` message, but before the  `User` and `Assistant` pairs configured in your deployment.
   */
  prefixMessages?: Array<DeploymentStreamPrefixMessages> | undefined;
  /**
   * A list of messages to send to the deployment.
   */
  messages?: Array<DeploymentStreamMessages> | undefined;
  /**
   * A list of file IDs that are associated with the deployment request.
   */
  fileIds?: Array<string> | undefined;
  /**
   * Key-value pairs that you want to attach to the log generated by this request.
   */
  metadata?: { [k: string]: any } | undefined;
  /**
   * Utilized for passing additional parameters to the model provider. Exercise caution when using this feature, as the included parameters will overwrite any parameters specified in the deployment prompt configuration.
   */
  extraParams?: { [k: string]: any } | undefined;
  /**
   * A list of relevant documents that evaluators and guardrails can cite to evaluate the user input or the model response based on your deployment settings.
   */
  documents?: Array<DeploymentStreamDocuments> | undefined;
  invokeOptions?: DeploymentStreamInvokeOptions | undefined;
};

/**
 * Indicates the type of model used to generate the response
 */
export const DeploymentStreamObject = {
  Chat: "chat",
  Completion: "completion",
  Image: "image",
  Vision: "vision",
} as const;
/**
 * Indicates the type of model used to generate the response
 */
export type DeploymentStreamObject = ClosedEnum<typeof DeploymentStreamObject>;

/**
 * The provider used to generate the response
 */
export const DeploymentStreamProvider = {
  Cohere: "cohere",
  Openai: "openai",
  Anthropic: "anthropic",
  Huggingface: "huggingface",
  Replicate: "replicate",
  Google: "google",
  GoogleAi: "google-ai",
  Azure: "azure",
  Aws: "aws",
  Anyscale: "anyscale",
  Perplexity: "perplexity",
  Groq: "groq",
  Fal: "fal",
  Leonardoai: "leonardoai",
  Nvidia: "nvidia",
  Jina: "jina",
  Togetherai: "togetherai",
  Elevenlabs: "elevenlabs",
} as const;
/**
 * The provider used to generate the response
 */
export type DeploymentStreamProvider = ClosedEnum<
  typeof DeploymentStreamProvider
>;

/**
 * The role of the prompt message
 */
export const DeploymentStreamMessageDeploymentsResponseRole = {
  System: "system",
  Assistant: "assistant",
  User: "user",
  Exception: "exception",
  Tool: "tool",
  Prompt: "prompt",
  Correction: "correction",
  ExpectedOutput: "expected_output",
} as const;
/**
 * The role of the prompt message
 */
export type DeploymentStreamMessageDeploymentsResponseRole = ClosedEnum<
  typeof DeploymentStreamMessageDeploymentsResponseRole
>;

export type DeploymentStreamMessage3 = {
  /**
   * The role of the prompt message
   */
  role: DeploymentStreamMessageDeploymentsResponseRole;
  url: string;
};

/**
 * The role of the prompt message
 */
export const DeploymentStreamMessageDeploymentsRole = {
  System: "system",
  Assistant: "assistant",
  User: "user",
  Exception: "exception",
  Tool: "tool",
  Prompt: "prompt",
  Correction: "correction",
  ExpectedOutput: "expected_output",
} as const;
/**
 * The role of the prompt message
 */
export type DeploymentStreamMessageDeploymentsRole = ClosedEnum<
  typeof DeploymentStreamMessageDeploymentsRole
>;

export type DeploymentStreamMessage2 = {
  /**
   * The role of the prompt message
   */
  role: DeploymentStreamMessageDeploymentsRole;
  content: string | null;
};

/**
 * The role of the prompt message
 */
export const DeploymentStreamMessageRole = {
  System: "system",
  Assistant: "assistant",
  User: "user",
  Exception: "exception",
  Tool: "tool",
  Prompt: "prompt",
  Correction: "correction",
  ExpectedOutput: "expected_output",
} as const;
/**
 * The role of the prompt message
 */
export type DeploymentStreamMessageRole = ClosedEnum<
  typeof DeploymentStreamMessageRole
>;

export const DeploymentStreamMessageType = {
  Function: "function",
} as const;
export type DeploymentStreamMessageType = ClosedEnum<
  typeof DeploymentStreamMessageType
>;

export type DeploymentStreamMessageFunction = {
  name: string;
  /**
   * JSON string arguments for the functions
   */
  arguments: string;
};

export type DeploymentStreamMessageToolCalls = {
  id?: string | undefined;
  index?: number | undefined;
  type: DeploymentStreamMessageType;
  function: DeploymentStreamMessageFunction;
};

export type DeploymentStreamMessage1 = {
  /**
   * The role of the prompt message
   */
  role: DeploymentStreamMessageRole;
  content?: string | null | undefined;
  toolCalls: Array<DeploymentStreamMessageToolCalls>;
};

export type DeploymentStreamMessage =
  | DeploymentStreamMessage2
  | DeploymentStreamMessage3
  | DeploymentStreamMessage1;

export type DeploymentStreamChoices = {
  index: number;
  message?:
    | DeploymentStreamMessage2
    | DeploymentStreamMessage3
    | DeploymentStreamMessage1
    | undefined;
  finishReason?: string | null | undefined;
};

/**
 * Metadata of the retrieved chunk from the knowledge base
 */
export type DeploymentStreamDeploymentsMetadata = {
  /**
   * Name of the file
   */
  fileName: string;
  /**
   * Page number of the chunk
   */
  pageNumber: number | null;
  /**
   * Type of the file
   */
  fileType: string;
  /**
   * Rerank scores are normalized to be in the range [0, 1]. Scores close to 1 indicate a high relevance to the query, and scores closer to 0 indicate low relevance. It is not accurate to assume a score of 0.9 means the document is 2x more relevant than a document with a score of 0.45
   */
  rerankScore?: number | undefined;
  /**
   * Search scores are normalized to be in the range [0, 1]. Search score is calculated based on `[Cosine Similarity](https://en.wikipedia.org/wiki/Cosine_similarity)` algorithm. Scores close to 1 indicate the document is closer to the query, and scores closer to 0 indicate the document is farther from the query.
   */
  searchScore: number;
};

export type DeploymentStreamRetrievals = {
  /**
   * Content of the retrieved chunk from the knowledge base
   */
  document: string;
  /**
   * Metadata of the retrieved chunk from the knowledge base
   */
  metadata: DeploymentStreamDeploymentsMetadata;
};

export type DeploymentStreamData = {
  /**
   * A unique identifier for the response. Can be used to add metrics to the transaction.
   */
  id?: string | undefined;
  /**
   * A timestamp indicating when the object was created. Usually in a standardized format like ISO 8601
   */
  created?: Date | undefined;
  /**
   * Indicates the type of model used to generate the response
   */
  object?: DeploymentStreamObject | undefined;
  /**
   * The model used to generate the response
   */
  model?: string | undefined;
  /**
   * The provider used to generate the response
   */
  provider?: DeploymentStreamProvider | undefined;
  /**
   * Indicates if the response is the final response
   */
  isFinal?: boolean | undefined;
  /**
   * Indicates integration id used to generate the response
   */
  integrationId?: string | undefined;
  /**
   * A timestamp indicating when the object was finalized. Usually in a standardized format like ISO 8601
   */
  finalized?: Date | undefined;
  /**
   * Provider backed system fingerprint.
   */
  systemFingerprint?: string | null | undefined;
  /**
   * A list of choices generated by the model
   */
  choices?: Array<DeploymentStreamChoices> | undefined;
  /**
   * List of documents retrieved from the knowledge base. This property is only available when the `include_retrievals` flag is set to `true` in the invoke settings. When stream is set to true, the `retrievals` property will be returned in the last streamed chunk where the property `is_final` is set to `true`.
   */
  retrievals?: Array<DeploymentStreamRetrievals> | undefined;
  /**
   * Response returned by the model provider. This functionality is only supported when streaming is not used. If streaming is used, the `provider_response` property will be set to `null`.
   */
  providerResponse?: any | undefined;
};

/**
 * Response from the gateway
 */
export type DeploymentStreamResponseBody = {
  data?: DeploymentStreamData | undefined;
};

/** @internal */
export const DeploymentStreamGlobals$inboundSchema: z.ZodType<
  DeploymentStreamGlobals,
  z.ZodTypeDef,
  unknown
> = z.object({
  environment: z.string().optional(),
  contactId: z.string().optional(),
});

/** @internal */
export type DeploymentStreamGlobals$Outbound = {
  environment?: string | undefined;
  contactId?: string | undefined;
};

/** @internal */
export const DeploymentStreamGlobals$outboundSchema: z.ZodType<
  DeploymentStreamGlobals$Outbound,
  z.ZodTypeDef,
  DeploymentStreamGlobals
> = z.object({
  environment: z.string().optional(),
  contactId: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeploymentStreamGlobals$ {
  /** @deprecated use `DeploymentStreamGlobals$inboundSchema` instead. */
  export const inboundSchema = DeploymentStreamGlobals$inboundSchema;
  /** @deprecated use `DeploymentStreamGlobals$outboundSchema` instead. */
  export const outboundSchema = DeploymentStreamGlobals$outboundSchema;
  /** @deprecated use `DeploymentStreamGlobals$Outbound` instead. */
  export type Outbound = DeploymentStreamGlobals$Outbound;
}

export function deploymentStreamGlobalsToJSON(
  deploymentStreamGlobals: DeploymentStreamGlobals,
): string {
  return JSON.stringify(
    DeploymentStreamGlobals$outboundSchema.parse(deploymentStreamGlobals),
  );
}

export function deploymentStreamGlobalsFromJSON(
  jsonString: string,
): SafeParseResult<DeploymentStreamGlobals, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DeploymentStreamGlobals$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DeploymentStreamGlobals' from JSON`,
  );
}

/** @internal */
export const DeploymentStreamInputs$inboundSchema: z.ZodType<
  DeploymentStreamInputs,
  z.ZodTypeDef,
  unknown
> = z.union([z.string(), z.number(), z.boolean()]);

/** @internal */
export type DeploymentStreamInputs$Outbound = string | number | boolean;

/** @internal */
export const DeploymentStreamInputs$outboundSchema: z.ZodType<
  DeploymentStreamInputs$Outbound,
  z.ZodTypeDef,
  DeploymentStreamInputs
> = z.union([z.string(), z.number(), z.boolean()]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeploymentStreamInputs$ {
  /** @deprecated use `DeploymentStreamInputs$inboundSchema` instead. */
  export const inboundSchema = DeploymentStreamInputs$inboundSchema;
  /** @deprecated use `DeploymentStreamInputs$outboundSchema` instead. */
  export const outboundSchema = DeploymentStreamInputs$outboundSchema;
  /** @deprecated use `DeploymentStreamInputs$Outbound` instead. */
  export type Outbound = DeploymentStreamInputs$Outbound;
}

export function deploymentStreamInputsToJSON(
  deploymentStreamInputs: DeploymentStreamInputs,
): string {
  return JSON.stringify(
    DeploymentStreamInputs$outboundSchema.parse(deploymentStreamInputs),
  );
}

export function deploymentStreamInputsFromJSON(
  jsonString: string,
): SafeParseResult<DeploymentStreamInputs, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DeploymentStreamInputs$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DeploymentStreamInputs' from JSON`,
  );
}

/** @internal */
export const DeploymentStreamRole$inboundSchema: z.ZodNativeEnum<
  typeof DeploymentStreamRole
> = z.nativeEnum(DeploymentStreamRole);

/** @internal */
export const DeploymentStreamRole$outboundSchema: z.ZodNativeEnum<
  typeof DeploymentStreamRole
> = DeploymentStreamRole$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeploymentStreamRole$ {
  /** @deprecated use `DeploymentStreamRole$inboundSchema` instead. */
  export const inboundSchema = DeploymentStreamRole$inboundSchema;
  /** @deprecated use `DeploymentStreamRole$outboundSchema` instead. */
  export const outboundSchema = DeploymentStreamRole$outboundSchema;
}

/** @internal */
export const DeploymentStream2DeploymentsType$inboundSchema: z.ZodNativeEnum<
  typeof DeploymentStream2DeploymentsType
> = z.nativeEnum(DeploymentStream2DeploymentsType);

/** @internal */
export const DeploymentStream2DeploymentsType$outboundSchema: z.ZodNativeEnum<
  typeof DeploymentStream2DeploymentsType
> = DeploymentStream2DeploymentsType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeploymentStream2DeploymentsType$ {
  /** @deprecated use `DeploymentStream2DeploymentsType$inboundSchema` instead. */
  export const inboundSchema = DeploymentStream2DeploymentsType$inboundSchema;
  /** @deprecated use `DeploymentStream2DeploymentsType$outboundSchema` instead. */
  export const outboundSchema = DeploymentStream2DeploymentsType$outboundSchema;
}

/** @internal */
export const DeploymentStream2ImageUrl$inboundSchema: z.ZodType<
  DeploymentStream2ImageUrl,
  z.ZodTypeDef,
  unknown
> = z.object({
  url: z.string(),
  detail: z.string().optional(),
});

/** @internal */
export type DeploymentStream2ImageUrl$Outbound = {
  url: string;
  detail?: string | undefined;
};

/** @internal */
export const DeploymentStream2ImageUrl$outboundSchema: z.ZodType<
  DeploymentStream2ImageUrl$Outbound,
  z.ZodTypeDef,
  DeploymentStream2ImageUrl
> = z.object({
  url: z.string(),
  detail: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeploymentStream2ImageUrl$ {
  /** @deprecated use `DeploymentStream2ImageUrl$inboundSchema` instead. */
  export const inboundSchema = DeploymentStream2ImageUrl$inboundSchema;
  /** @deprecated use `DeploymentStream2ImageUrl$outboundSchema` instead. */
  export const outboundSchema = DeploymentStream2ImageUrl$outboundSchema;
  /** @deprecated use `DeploymentStream2ImageUrl$Outbound` instead. */
  export type Outbound = DeploymentStream2ImageUrl$Outbound;
}

export function deploymentStream2ImageUrlToJSON(
  deploymentStream2ImageUrl: DeploymentStream2ImageUrl,
): string {
  return JSON.stringify(
    DeploymentStream2ImageUrl$outboundSchema.parse(deploymentStream2ImageUrl),
  );
}

export function deploymentStream2ImageUrlFromJSON(
  jsonString: string,
): SafeParseResult<DeploymentStream2ImageUrl, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DeploymentStream2ImageUrl$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DeploymentStream2ImageUrl' from JSON`,
  );
}

/** @internal */
export const DeploymentStream22$inboundSchema: z.ZodType<
  DeploymentStream22,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: DeploymentStream2DeploymentsType$inboundSchema,
  image_url: z.lazy(() => DeploymentStream2ImageUrl$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "image_url": "imageUrl",
  });
});

/** @internal */
export type DeploymentStream22$Outbound = {
  type: string;
  image_url: DeploymentStream2ImageUrl$Outbound;
};

/** @internal */
export const DeploymentStream22$outboundSchema: z.ZodType<
  DeploymentStream22$Outbound,
  z.ZodTypeDef,
  DeploymentStream22
> = z.object({
  type: DeploymentStream2DeploymentsType$outboundSchema,
  imageUrl: z.lazy(() => DeploymentStream2ImageUrl$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    imageUrl: "image_url",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeploymentStream22$ {
  /** @deprecated use `DeploymentStream22$inboundSchema` instead. */
  export const inboundSchema = DeploymentStream22$inboundSchema;
  /** @deprecated use `DeploymentStream22$outboundSchema` instead. */
  export const outboundSchema = DeploymentStream22$outboundSchema;
  /** @deprecated use `DeploymentStream22$Outbound` instead. */
  export type Outbound = DeploymentStream22$Outbound;
}

export function deploymentStream22ToJSON(
  deploymentStream22: DeploymentStream22,
): string {
  return JSON.stringify(
    DeploymentStream22$outboundSchema.parse(deploymentStream22),
  );
}

export function deploymentStream22FromJSON(
  jsonString: string,
): SafeParseResult<DeploymentStream22, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DeploymentStream22$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DeploymentStream22' from JSON`,
  );
}

/** @internal */
export const DeploymentStream2Type$inboundSchema: z.ZodNativeEnum<
  typeof DeploymentStream2Type
> = z.nativeEnum(DeploymentStream2Type);

/** @internal */
export const DeploymentStream2Type$outboundSchema: z.ZodNativeEnum<
  typeof DeploymentStream2Type
> = DeploymentStream2Type$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeploymentStream2Type$ {
  /** @deprecated use `DeploymentStream2Type$inboundSchema` instead. */
  export const inboundSchema = DeploymentStream2Type$inboundSchema;
  /** @deprecated use `DeploymentStream2Type$outboundSchema` instead. */
  export const outboundSchema = DeploymentStream2Type$outboundSchema;
}

/** @internal */
export const DeploymentStream21$inboundSchema: z.ZodType<
  DeploymentStream21,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: DeploymentStream2Type$inboundSchema,
  text: z.string(),
});

/** @internal */
export type DeploymentStream21$Outbound = {
  type: string;
  text: string;
};

/** @internal */
export const DeploymentStream21$outboundSchema: z.ZodType<
  DeploymentStream21$Outbound,
  z.ZodTypeDef,
  DeploymentStream21
> = z.object({
  type: DeploymentStream2Type$outboundSchema,
  text: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeploymentStream21$ {
  /** @deprecated use `DeploymentStream21$inboundSchema` instead. */
  export const inboundSchema = DeploymentStream21$inboundSchema;
  /** @deprecated use `DeploymentStream21$outboundSchema` instead. */
  export const outboundSchema = DeploymentStream21$outboundSchema;
  /** @deprecated use `DeploymentStream21$Outbound` instead. */
  export type Outbound = DeploymentStream21$Outbound;
}

export function deploymentStream21ToJSON(
  deploymentStream21: DeploymentStream21,
): string {
  return JSON.stringify(
    DeploymentStream21$outboundSchema.parse(deploymentStream21),
  );
}

export function deploymentStream21FromJSON(
  jsonString: string,
): SafeParseResult<DeploymentStream21, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DeploymentStream21$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DeploymentStream21' from JSON`,
  );
}

/** @internal */
export const DeploymentStreamContent2$inboundSchema: z.ZodType<
  DeploymentStreamContent2,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => DeploymentStream21$inboundSchema),
  z.lazy(() => DeploymentStream22$inboundSchema),
]);

/** @internal */
export type DeploymentStreamContent2$Outbound =
  | DeploymentStream21$Outbound
  | DeploymentStream22$Outbound;

/** @internal */
export const DeploymentStreamContent2$outboundSchema: z.ZodType<
  DeploymentStreamContent2$Outbound,
  z.ZodTypeDef,
  DeploymentStreamContent2
> = z.union([
  z.lazy(() => DeploymentStream21$outboundSchema),
  z.lazy(() => DeploymentStream22$outboundSchema),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeploymentStreamContent2$ {
  /** @deprecated use `DeploymentStreamContent2$inboundSchema` instead. */
  export const inboundSchema = DeploymentStreamContent2$inboundSchema;
  /** @deprecated use `DeploymentStreamContent2$outboundSchema` instead. */
  export const outboundSchema = DeploymentStreamContent2$outboundSchema;
  /** @deprecated use `DeploymentStreamContent2$Outbound` instead. */
  export type Outbound = DeploymentStreamContent2$Outbound;
}

export function deploymentStreamContent2ToJSON(
  deploymentStreamContent2: DeploymentStreamContent2,
): string {
  return JSON.stringify(
    DeploymentStreamContent2$outboundSchema.parse(deploymentStreamContent2),
  );
}

export function deploymentStreamContent2FromJSON(
  jsonString: string,
): SafeParseResult<DeploymentStreamContent2, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DeploymentStreamContent2$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DeploymentStreamContent2' from JSON`,
  );
}

/** @internal */
export const DeploymentStreamContent$inboundSchema: z.ZodType<
  DeploymentStreamContent,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.string(),
  z.array(z.union([
    z.lazy(() => DeploymentStream21$inboundSchema),
    z.lazy(() => DeploymentStream22$inboundSchema),
  ])),
]);

/** @internal */
export type DeploymentStreamContent$Outbound =
  | string
  | Array<DeploymentStream21$Outbound | DeploymentStream22$Outbound>;

/** @internal */
export const DeploymentStreamContent$outboundSchema: z.ZodType<
  DeploymentStreamContent$Outbound,
  z.ZodTypeDef,
  DeploymentStreamContent
> = z.union([
  z.string(),
  z.array(z.union([
    z.lazy(() => DeploymentStream21$outboundSchema),
    z.lazy(() => DeploymentStream22$outboundSchema),
  ])),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeploymentStreamContent$ {
  /** @deprecated use `DeploymentStreamContent$inboundSchema` instead. */
  export const inboundSchema = DeploymentStreamContent$inboundSchema;
  /** @deprecated use `DeploymentStreamContent$outboundSchema` instead. */
  export const outboundSchema = DeploymentStreamContent$outboundSchema;
  /** @deprecated use `DeploymentStreamContent$Outbound` instead. */
  export type Outbound = DeploymentStreamContent$Outbound;
}

export function deploymentStreamContentToJSON(
  deploymentStreamContent: DeploymentStreamContent,
): string {
  return JSON.stringify(
    DeploymentStreamContent$outboundSchema.parse(deploymentStreamContent),
  );
}

export function deploymentStreamContentFromJSON(
  jsonString: string,
): SafeParseResult<DeploymentStreamContent, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DeploymentStreamContent$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DeploymentStreamContent' from JSON`,
  );
}

/** @internal */
export const DeploymentStreamType$inboundSchema: z.ZodNativeEnum<
  typeof DeploymentStreamType
> = z.nativeEnum(DeploymentStreamType);

/** @internal */
export const DeploymentStreamType$outboundSchema: z.ZodNativeEnum<
  typeof DeploymentStreamType
> = DeploymentStreamType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeploymentStreamType$ {
  /** @deprecated use `DeploymentStreamType$inboundSchema` instead. */
  export const inboundSchema = DeploymentStreamType$inboundSchema;
  /** @deprecated use `DeploymentStreamType$outboundSchema` instead. */
  export const outboundSchema = DeploymentStreamType$outboundSchema;
}

/** @internal */
export const DeploymentStreamFunction$inboundSchema: z.ZodType<
  DeploymentStreamFunction,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.string(),
  arguments: z.string(),
});

/** @internal */
export type DeploymentStreamFunction$Outbound = {
  name: string;
  arguments: string;
};

/** @internal */
export const DeploymentStreamFunction$outboundSchema: z.ZodType<
  DeploymentStreamFunction$Outbound,
  z.ZodTypeDef,
  DeploymentStreamFunction
> = z.object({
  name: z.string(),
  arguments: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeploymentStreamFunction$ {
  /** @deprecated use `DeploymentStreamFunction$inboundSchema` instead. */
  export const inboundSchema = DeploymentStreamFunction$inboundSchema;
  /** @deprecated use `DeploymentStreamFunction$outboundSchema` instead. */
  export const outboundSchema = DeploymentStreamFunction$outboundSchema;
  /** @deprecated use `DeploymentStreamFunction$Outbound` instead. */
  export type Outbound = DeploymentStreamFunction$Outbound;
}

export function deploymentStreamFunctionToJSON(
  deploymentStreamFunction: DeploymentStreamFunction,
): string {
  return JSON.stringify(
    DeploymentStreamFunction$outboundSchema.parse(deploymentStreamFunction),
  );
}

export function deploymentStreamFunctionFromJSON(
  jsonString: string,
): SafeParseResult<DeploymentStreamFunction, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DeploymentStreamFunction$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DeploymentStreamFunction' from JSON`,
  );
}

/** @internal */
export const DeploymentStreamToolCalls$inboundSchema: z.ZodType<
  DeploymentStreamToolCalls,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string().optional(),
  index: z.number().optional(),
  type: DeploymentStreamType$inboundSchema,
  function: z.lazy(() => DeploymentStreamFunction$inboundSchema),
});

/** @internal */
export type DeploymentStreamToolCalls$Outbound = {
  id?: string | undefined;
  index?: number | undefined;
  type: string;
  function: DeploymentStreamFunction$Outbound;
};

/** @internal */
export const DeploymentStreamToolCalls$outboundSchema: z.ZodType<
  DeploymentStreamToolCalls$Outbound,
  z.ZodTypeDef,
  DeploymentStreamToolCalls
> = z.object({
  id: z.string().optional(),
  index: z.number().optional(),
  type: DeploymentStreamType$outboundSchema,
  function: z.lazy(() => DeploymentStreamFunction$outboundSchema),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeploymentStreamToolCalls$ {
  /** @deprecated use `DeploymentStreamToolCalls$inboundSchema` instead. */
  export const inboundSchema = DeploymentStreamToolCalls$inboundSchema;
  /** @deprecated use `DeploymentStreamToolCalls$outboundSchema` instead. */
  export const outboundSchema = DeploymentStreamToolCalls$outboundSchema;
  /** @deprecated use `DeploymentStreamToolCalls$Outbound` instead. */
  export type Outbound = DeploymentStreamToolCalls$Outbound;
}

export function deploymentStreamToolCallsToJSON(
  deploymentStreamToolCalls: DeploymentStreamToolCalls,
): string {
  return JSON.stringify(
    DeploymentStreamToolCalls$outboundSchema.parse(deploymentStreamToolCalls),
  );
}

export function deploymentStreamToolCallsFromJSON(
  jsonString: string,
): SafeParseResult<DeploymentStreamToolCalls, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DeploymentStreamToolCalls$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DeploymentStreamToolCalls' from JSON`,
  );
}

/** @internal */
export const DeploymentStreamPrefixMessages$inboundSchema: z.ZodType<
  DeploymentStreamPrefixMessages,
  z.ZodTypeDef,
  unknown
> = z.object({
  role: DeploymentStreamRole$inboundSchema,
  content: z.union([
    z.string(),
    z.array(z.union([
      z.lazy(() => DeploymentStream21$inboundSchema),
      z.lazy(() => DeploymentStream22$inboundSchema),
    ])),
  ]),
  tool_calls: z.array(z.lazy(() => DeploymentStreamToolCalls$inboundSchema))
    .optional(),
}).transform((v) => {
  return remap$(v, {
    "tool_calls": "toolCalls",
  });
});

/** @internal */
export type DeploymentStreamPrefixMessages$Outbound = {
  role: string;
  content:
    | string
    | Array<DeploymentStream21$Outbound | DeploymentStream22$Outbound>;
  tool_calls?: Array<DeploymentStreamToolCalls$Outbound> | undefined;
};

/** @internal */
export const DeploymentStreamPrefixMessages$outboundSchema: z.ZodType<
  DeploymentStreamPrefixMessages$Outbound,
  z.ZodTypeDef,
  DeploymentStreamPrefixMessages
> = z.object({
  role: DeploymentStreamRole$outboundSchema,
  content: z.union([
    z.string(),
    z.array(z.union([
      z.lazy(() => DeploymentStream21$outboundSchema),
      z.lazy(() => DeploymentStream22$outboundSchema),
    ])),
  ]),
  toolCalls: z.array(z.lazy(() => DeploymentStreamToolCalls$outboundSchema))
    .optional(),
}).transform((v) => {
  return remap$(v, {
    toolCalls: "tool_calls",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeploymentStreamPrefixMessages$ {
  /** @deprecated use `DeploymentStreamPrefixMessages$inboundSchema` instead. */
  export const inboundSchema = DeploymentStreamPrefixMessages$inboundSchema;
  /** @deprecated use `DeploymentStreamPrefixMessages$outboundSchema` instead. */
  export const outboundSchema = DeploymentStreamPrefixMessages$outboundSchema;
  /** @deprecated use `DeploymentStreamPrefixMessages$Outbound` instead. */
  export type Outbound = DeploymentStreamPrefixMessages$Outbound;
}

export function deploymentStreamPrefixMessagesToJSON(
  deploymentStreamPrefixMessages: DeploymentStreamPrefixMessages,
): string {
  return JSON.stringify(
    DeploymentStreamPrefixMessages$outboundSchema.parse(
      deploymentStreamPrefixMessages,
    ),
  );
}

export function deploymentStreamPrefixMessagesFromJSON(
  jsonString: string,
): SafeParseResult<DeploymentStreamPrefixMessages, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DeploymentStreamPrefixMessages$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DeploymentStreamPrefixMessages' from JSON`,
  );
}

/** @internal */
export const DeploymentStreamDeploymentsRole$inboundSchema: z.ZodNativeEnum<
  typeof DeploymentStreamDeploymentsRole
> = z.nativeEnum(DeploymentStreamDeploymentsRole);

/** @internal */
export const DeploymentStreamDeploymentsRole$outboundSchema: z.ZodNativeEnum<
  typeof DeploymentStreamDeploymentsRole
> = DeploymentStreamDeploymentsRole$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeploymentStreamDeploymentsRole$ {
  /** @deprecated use `DeploymentStreamDeploymentsRole$inboundSchema` instead. */
  export const inboundSchema = DeploymentStreamDeploymentsRole$inboundSchema;
  /** @deprecated use `DeploymentStreamDeploymentsRole$outboundSchema` instead. */
  export const outboundSchema = DeploymentStreamDeploymentsRole$outboundSchema;
}

/** @internal */
export const DeploymentStream2DeploymentsRequestRequestBodyType$inboundSchema:
  z.ZodNativeEnum<typeof DeploymentStream2DeploymentsRequestRequestBodyType> = z
    .nativeEnum(DeploymentStream2DeploymentsRequestRequestBodyType);

/** @internal */
export const DeploymentStream2DeploymentsRequestRequestBodyType$outboundSchema:
  z.ZodNativeEnum<typeof DeploymentStream2DeploymentsRequestRequestBodyType> =
    DeploymentStream2DeploymentsRequestRequestBodyType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeploymentStream2DeploymentsRequestRequestBodyType$ {
  /** @deprecated use `DeploymentStream2DeploymentsRequestRequestBodyType$inboundSchema` instead. */
  export const inboundSchema =
    DeploymentStream2DeploymentsRequestRequestBodyType$inboundSchema;
  /** @deprecated use `DeploymentStream2DeploymentsRequestRequestBodyType$outboundSchema` instead. */
  export const outboundSchema =
    DeploymentStream2DeploymentsRequestRequestBodyType$outboundSchema;
}

/** @internal */
export const DeploymentStream2ImageUrlInput$inboundSchema: z.ZodType<
  DeploymentStream2ImageUrlInput,
  z.ZodTypeDef,
  unknown
> = z.object({
  url: z.string(),
  detail: z.string().optional(),
});

/** @internal */
export type DeploymentStream2ImageUrlInput$Outbound = {
  url: string;
  detail?: string | undefined;
};

/** @internal */
export const DeploymentStream2ImageUrlInput$outboundSchema: z.ZodType<
  DeploymentStream2ImageUrlInput$Outbound,
  z.ZodTypeDef,
  DeploymentStream2ImageUrlInput
> = z.object({
  url: z.string(),
  detail: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeploymentStream2ImageUrlInput$ {
  /** @deprecated use `DeploymentStream2ImageUrlInput$inboundSchema` instead. */
  export const inboundSchema = DeploymentStream2ImageUrlInput$inboundSchema;
  /** @deprecated use `DeploymentStream2ImageUrlInput$outboundSchema` instead. */
  export const outboundSchema = DeploymentStream2ImageUrlInput$outboundSchema;
  /** @deprecated use `DeploymentStream2ImageUrlInput$Outbound` instead. */
  export type Outbound = DeploymentStream2ImageUrlInput$Outbound;
}

export function deploymentStream2ImageUrlInputToJSON(
  deploymentStream2ImageUrlInput: DeploymentStream2ImageUrlInput,
): string {
  return JSON.stringify(
    DeploymentStream2ImageUrlInput$outboundSchema.parse(
      deploymentStream2ImageUrlInput,
    ),
  );
}

export function deploymentStream2ImageUrlInputFromJSON(
  jsonString: string,
): SafeParseResult<DeploymentStream2ImageUrlInput, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DeploymentStream2ImageUrlInput$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DeploymentStream2ImageUrlInput' from JSON`,
  );
}

/** @internal */
export const DeploymentStream22Input$inboundSchema: z.ZodType<
  DeploymentStream22Input,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: DeploymentStream2DeploymentsRequestRequestBodyType$inboundSchema,
  image_url: z.lazy(() => DeploymentStream2ImageUrlInput$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "image_url": "imageUrl",
  });
});

/** @internal */
export type DeploymentStream22Input$Outbound = {
  type: string;
  image_url: DeploymentStream2ImageUrlInput$Outbound;
};

/** @internal */
export const DeploymentStream22Input$outboundSchema: z.ZodType<
  DeploymentStream22Input$Outbound,
  z.ZodTypeDef,
  DeploymentStream22Input
> = z.object({
  type: DeploymentStream2DeploymentsRequestRequestBodyType$outboundSchema,
  imageUrl: z.lazy(() => DeploymentStream2ImageUrlInput$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    imageUrl: "image_url",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeploymentStream22Input$ {
  /** @deprecated use `DeploymentStream22Input$inboundSchema` instead. */
  export const inboundSchema = DeploymentStream22Input$inboundSchema;
  /** @deprecated use `DeploymentStream22Input$outboundSchema` instead. */
  export const outboundSchema = DeploymentStream22Input$outboundSchema;
  /** @deprecated use `DeploymentStream22Input$Outbound` instead. */
  export type Outbound = DeploymentStream22Input$Outbound;
}

export function deploymentStream22InputToJSON(
  deploymentStream22Input: DeploymentStream22Input,
): string {
  return JSON.stringify(
    DeploymentStream22Input$outboundSchema.parse(deploymentStream22Input),
  );
}

export function deploymentStream22InputFromJSON(
  jsonString: string,
): SafeParseResult<DeploymentStream22Input, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DeploymentStream22Input$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DeploymentStream22Input' from JSON`,
  );
}

/** @internal */
export const DeploymentStream2DeploymentsRequestType$inboundSchema:
  z.ZodNativeEnum<typeof DeploymentStream2DeploymentsRequestType> = z
    .nativeEnum(DeploymentStream2DeploymentsRequestType);

/** @internal */
export const DeploymentStream2DeploymentsRequestType$outboundSchema:
  z.ZodNativeEnum<typeof DeploymentStream2DeploymentsRequestType> =
    DeploymentStream2DeploymentsRequestType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeploymentStream2DeploymentsRequestType$ {
  /** @deprecated use `DeploymentStream2DeploymentsRequestType$inboundSchema` instead. */
  export const inboundSchema =
    DeploymentStream2DeploymentsRequestType$inboundSchema;
  /** @deprecated use `DeploymentStream2DeploymentsRequestType$outboundSchema` instead. */
  export const outboundSchema =
    DeploymentStream2DeploymentsRequestType$outboundSchema;
}

/** @internal */
export const DeploymentStream2Deployments1$inboundSchema: z.ZodType<
  DeploymentStream2Deployments1,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: DeploymentStream2DeploymentsRequestType$inboundSchema,
  text: z.string(),
});

/** @internal */
export type DeploymentStream2Deployments1$Outbound = {
  type: string;
  text: string;
};

/** @internal */
export const DeploymentStream2Deployments1$outboundSchema: z.ZodType<
  DeploymentStream2Deployments1$Outbound,
  z.ZodTypeDef,
  DeploymentStream2Deployments1
> = z.object({
  type: DeploymentStream2DeploymentsRequestType$outboundSchema,
  text: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeploymentStream2Deployments1$ {
  /** @deprecated use `DeploymentStream2Deployments1$inboundSchema` instead. */
  export const inboundSchema = DeploymentStream2Deployments1$inboundSchema;
  /** @deprecated use `DeploymentStream2Deployments1$outboundSchema` instead. */
  export const outboundSchema = DeploymentStream2Deployments1$outboundSchema;
  /** @deprecated use `DeploymentStream2Deployments1$Outbound` instead. */
  export type Outbound = DeploymentStream2Deployments1$Outbound;
}

export function deploymentStream2Deployments1ToJSON(
  deploymentStream2Deployments1: DeploymentStream2Deployments1,
): string {
  return JSON.stringify(
    DeploymentStream2Deployments1$outboundSchema.parse(
      deploymentStream2Deployments1,
    ),
  );
}

export function deploymentStream2Deployments1FromJSON(
  jsonString: string,
): SafeParseResult<DeploymentStream2Deployments1, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DeploymentStream2Deployments1$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DeploymentStream2Deployments1' from JSON`,
  );
}

/** @internal */
export const DeploymentStreamContent2Input$inboundSchema: z.ZodType<
  DeploymentStreamContent2Input,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => DeploymentStream2Deployments1$inboundSchema),
  z.lazy(() => DeploymentStream22Input$inboundSchema),
]);

/** @internal */
export type DeploymentStreamContent2Input$Outbound =
  | DeploymentStream2Deployments1$Outbound
  | DeploymentStream22Input$Outbound;

/** @internal */
export const DeploymentStreamContent2Input$outboundSchema: z.ZodType<
  DeploymentStreamContent2Input$Outbound,
  z.ZodTypeDef,
  DeploymentStreamContent2Input
> = z.union([
  z.lazy(() => DeploymentStream2Deployments1$outboundSchema),
  z.lazy(() => DeploymentStream22Input$outboundSchema),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeploymentStreamContent2Input$ {
  /** @deprecated use `DeploymentStreamContent2Input$inboundSchema` instead. */
  export const inboundSchema = DeploymentStreamContent2Input$inboundSchema;
  /** @deprecated use `DeploymentStreamContent2Input$outboundSchema` instead. */
  export const outboundSchema = DeploymentStreamContent2Input$outboundSchema;
  /** @deprecated use `DeploymentStreamContent2Input$Outbound` instead. */
  export type Outbound = DeploymentStreamContent2Input$Outbound;
}

export function deploymentStreamContent2InputToJSON(
  deploymentStreamContent2Input: DeploymentStreamContent2Input,
): string {
  return JSON.stringify(
    DeploymentStreamContent2Input$outboundSchema.parse(
      deploymentStreamContent2Input,
    ),
  );
}

export function deploymentStreamContent2InputFromJSON(
  jsonString: string,
): SafeParseResult<DeploymentStreamContent2Input, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DeploymentStreamContent2Input$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DeploymentStreamContent2Input' from JSON`,
  );
}

/** @internal */
export const DeploymentStreamContentInput$inboundSchema: z.ZodType<
  DeploymentStreamContentInput,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.string(),
  z.array(z.union([
    z.lazy(() => DeploymentStream2Deployments1$inboundSchema),
    z.lazy(() => DeploymentStream22Input$inboundSchema),
  ])),
]);

/** @internal */
export type DeploymentStreamContentInput$Outbound =
  | string
  | Array<
    DeploymentStream2Deployments1$Outbound | DeploymentStream22Input$Outbound
  >;

/** @internal */
export const DeploymentStreamContentInput$outboundSchema: z.ZodType<
  DeploymentStreamContentInput$Outbound,
  z.ZodTypeDef,
  DeploymentStreamContentInput
> = z.union([
  z.string(),
  z.array(z.union([
    z.lazy(() => DeploymentStream2Deployments1$outboundSchema),
    z.lazy(() => DeploymentStream22Input$outboundSchema),
  ])),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeploymentStreamContentInput$ {
  /** @deprecated use `DeploymentStreamContentInput$inboundSchema` instead. */
  export const inboundSchema = DeploymentStreamContentInput$inboundSchema;
  /** @deprecated use `DeploymentStreamContentInput$outboundSchema` instead. */
  export const outboundSchema = DeploymentStreamContentInput$outboundSchema;
  /** @deprecated use `DeploymentStreamContentInput$Outbound` instead. */
  export type Outbound = DeploymentStreamContentInput$Outbound;
}

export function deploymentStreamContentInputToJSON(
  deploymentStreamContentInput: DeploymentStreamContentInput,
): string {
  return JSON.stringify(
    DeploymentStreamContentInput$outboundSchema.parse(
      deploymentStreamContentInput,
    ),
  );
}

export function deploymentStreamContentInputFromJSON(
  jsonString: string,
): SafeParseResult<DeploymentStreamContentInput, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DeploymentStreamContentInput$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DeploymentStreamContentInput' from JSON`,
  );
}

/** @internal */
export const DeploymentStreamDeploymentsType$inboundSchema: z.ZodNativeEnum<
  typeof DeploymentStreamDeploymentsType
> = z.nativeEnum(DeploymentStreamDeploymentsType);

/** @internal */
export const DeploymentStreamDeploymentsType$outboundSchema: z.ZodNativeEnum<
  typeof DeploymentStreamDeploymentsType
> = DeploymentStreamDeploymentsType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeploymentStreamDeploymentsType$ {
  /** @deprecated use `DeploymentStreamDeploymentsType$inboundSchema` instead. */
  export const inboundSchema = DeploymentStreamDeploymentsType$inboundSchema;
  /** @deprecated use `DeploymentStreamDeploymentsType$outboundSchema` instead. */
  export const outboundSchema = DeploymentStreamDeploymentsType$outboundSchema;
}

/** @internal */
export const DeploymentStreamDeploymentsFunction$inboundSchema: z.ZodType<
  DeploymentStreamDeploymentsFunction,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.string(),
  arguments: z.string(),
});

/** @internal */
export type DeploymentStreamDeploymentsFunction$Outbound = {
  name: string;
  arguments: string;
};

/** @internal */
export const DeploymentStreamDeploymentsFunction$outboundSchema: z.ZodType<
  DeploymentStreamDeploymentsFunction$Outbound,
  z.ZodTypeDef,
  DeploymentStreamDeploymentsFunction
> = z.object({
  name: z.string(),
  arguments: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeploymentStreamDeploymentsFunction$ {
  /** @deprecated use `DeploymentStreamDeploymentsFunction$inboundSchema` instead. */
  export const inboundSchema =
    DeploymentStreamDeploymentsFunction$inboundSchema;
  /** @deprecated use `DeploymentStreamDeploymentsFunction$outboundSchema` instead. */
  export const outboundSchema =
    DeploymentStreamDeploymentsFunction$outboundSchema;
  /** @deprecated use `DeploymentStreamDeploymentsFunction$Outbound` instead. */
  export type Outbound = DeploymentStreamDeploymentsFunction$Outbound;
}

export function deploymentStreamDeploymentsFunctionToJSON(
  deploymentStreamDeploymentsFunction: DeploymentStreamDeploymentsFunction,
): string {
  return JSON.stringify(
    DeploymentStreamDeploymentsFunction$outboundSchema.parse(
      deploymentStreamDeploymentsFunction,
    ),
  );
}

export function deploymentStreamDeploymentsFunctionFromJSON(
  jsonString: string,
): SafeParseResult<DeploymentStreamDeploymentsFunction, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      DeploymentStreamDeploymentsFunction$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DeploymentStreamDeploymentsFunction' from JSON`,
  );
}

/** @internal */
export const DeploymentStreamDeploymentsToolCalls$inboundSchema: z.ZodType<
  DeploymentStreamDeploymentsToolCalls,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string().optional(),
  index: z.number().optional(),
  type: DeploymentStreamDeploymentsType$inboundSchema,
  function: z.lazy(() => DeploymentStreamDeploymentsFunction$inboundSchema),
});

/** @internal */
export type DeploymentStreamDeploymentsToolCalls$Outbound = {
  id?: string | undefined;
  index?: number | undefined;
  type: string;
  function: DeploymentStreamDeploymentsFunction$Outbound;
};

/** @internal */
export const DeploymentStreamDeploymentsToolCalls$outboundSchema: z.ZodType<
  DeploymentStreamDeploymentsToolCalls$Outbound,
  z.ZodTypeDef,
  DeploymentStreamDeploymentsToolCalls
> = z.object({
  id: z.string().optional(),
  index: z.number().optional(),
  type: DeploymentStreamDeploymentsType$outboundSchema,
  function: z.lazy(() => DeploymentStreamDeploymentsFunction$outboundSchema),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeploymentStreamDeploymentsToolCalls$ {
  /** @deprecated use `DeploymentStreamDeploymentsToolCalls$inboundSchema` instead. */
  export const inboundSchema =
    DeploymentStreamDeploymentsToolCalls$inboundSchema;
  /** @deprecated use `DeploymentStreamDeploymentsToolCalls$outboundSchema` instead. */
  export const outboundSchema =
    DeploymentStreamDeploymentsToolCalls$outboundSchema;
  /** @deprecated use `DeploymentStreamDeploymentsToolCalls$Outbound` instead. */
  export type Outbound = DeploymentStreamDeploymentsToolCalls$Outbound;
}

export function deploymentStreamDeploymentsToolCallsToJSON(
  deploymentStreamDeploymentsToolCalls: DeploymentStreamDeploymentsToolCalls,
): string {
  return JSON.stringify(
    DeploymentStreamDeploymentsToolCalls$outboundSchema.parse(
      deploymentStreamDeploymentsToolCalls,
    ),
  );
}

export function deploymentStreamDeploymentsToolCallsFromJSON(
  jsonString: string,
): SafeParseResult<DeploymentStreamDeploymentsToolCalls, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      DeploymentStreamDeploymentsToolCalls$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DeploymentStreamDeploymentsToolCalls' from JSON`,
  );
}

/** @internal */
export const DeploymentStreamMessages$inboundSchema: z.ZodType<
  DeploymentStreamMessages,
  z.ZodTypeDef,
  unknown
> = z.object({
  role: DeploymentStreamDeploymentsRole$inboundSchema,
  content: z.union([
    z.string(),
    z.array(z.union([
      z.lazy(() => DeploymentStream2Deployments1$inboundSchema),
      z.lazy(() => DeploymentStream22Input$inboundSchema),
    ])),
  ]),
  tool_calls: z.array(
    z.lazy(() => DeploymentStreamDeploymentsToolCalls$inboundSchema),
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    "tool_calls": "toolCalls",
  });
});

/** @internal */
export type DeploymentStreamMessages$Outbound = {
  role: string;
  content:
    | string
    | Array<
      DeploymentStream2Deployments1$Outbound | DeploymentStream22Input$Outbound
    >;
  tool_calls?: Array<DeploymentStreamDeploymentsToolCalls$Outbound> | undefined;
};

/** @internal */
export const DeploymentStreamMessages$outboundSchema: z.ZodType<
  DeploymentStreamMessages$Outbound,
  z.ZodTypeDef,
  DeploymentStreamMessages
> = z.object({
  role: DeploymentStreamDeploymentsRole$outboundSchema,
  content: z.union([
    z.string(),
    z.array(z.union([
      z.lazy(() => DeploymentStream2Deployments1$outboundSchema),
      z.lazy(() => DeploymentStream22Input$outboundSchema),
    ])),
  ]),
  toolCalls: z.array(
    z.lazy(() => DeploymentStreamDeploymentsToolCalls$outboundSchema),
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    toolCalls: "tool_calls",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeploymentStreamMessages$ {
  /** @deprecated use `DeploymentStreamMessages$inboundSchema` instead. */
  export const inboundSchema = DeploymentStreamMessages$inboundSchema;
  /** @deprecated use `DeploymentStreamMessages$outboundSchema` instead. */
  export const outboundSchema = DeploymentStreamMessages$outboundSchema;
  /** @deprecated use `DeploymentStreamMessages$Outbound` instead. */
  export type Outbound = DeploymentStreamMessages$Outbound;
}

export function deploymentStreamMessagesToJSON(
  deploymentStreamMessages: DeploymentStreamMessages,
): string {
  return JSON.stringify(
    DeploymentStreamMessages$outboundSchema.parse(deploymentStreamMessages),
  );
}

export function deploymentStreamMessagesFromJSON(
  jsonString: string,
): SafeParseResult<DeploymentStreamMessages, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DeploymentStreamMessages$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DeploymentStreamMessages' from JSON`,
  );
}

/** @internal */
export const DeploymentStreamMetadata$inboundSchema: z.ZodType<
  DeploymentStreamMetadata,
  z.ZodTypeDef,
  unknown
> = z.object({
  file_name: z.string().optional(),
  file_type: z.string().optional(),
  page_number: z.number().optional(),
}).transform((v) => {
  return remap$(v, {
    "file_name": "fileName",
    "file_type": "fileType",
    "page_number": "pageNumber",
  });
});

/** @internal */
export type DeploymentStreamMetadata$Outbound = {
  file_name?: string | undefined;
  file_type?: string | undefined;
  page_number?: number | undefined;
};

/** @internal */
export const DeploymentStreamMetadata$outboundSchema: z.ZodType<
  DeploymentStreamMetadata$Outbound,
  z.ZodTypeDef,
  DeploymentStreamMetadata
> = z.object({
  fileName: z.string().optional(),
  fileType: z.string().optional(),
  pageNumber: z.number().optional(),
}).transform((v) => {
  return remap$(v, {
    fileName: "file_name",
    fileType: "file_type",
    pageNumber: "page_number",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeploymentStreamMetadata$ {
  /** @deprecated use `DeploymentStreamMetadata$inboundSchema` instead. */
  export const inboundSchema = DeploymentStreamMetadata$inboundSchema;
  /** @deprecated use `DeploymentStreamMetadata$outboundSchema` instead. */
  export const outboundSchema = DeploymentStreamMetadata$outboundSchema;
  /** @deprecated use `DeploymentStreamMetadata$Outbound` instead. */
  export type Outbound = DeploymentStreamMetadata$Outbound;
}

export function deploymentStreamMetadataToJSON(
  deploymentStreamMetadata: DeploymentStreamMetadata,
): string {
  return JSON.stringify(
    DeploymentStreamMetadata$outboundSchema.parse(deploymentStreamMetadata),
  );
}

export function deploymentStreamMetadataFromJSON(
  jsonString: string,
): SafeParseResult<DeploymentStreamMetadata, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DeploymentStreamMetadata$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DeploymentStreamMetadata' from JSON`,
  );
}

/** @internal */
export const DeploymentStreamDocuments$inboundSchema: z.ZodType<
  DeploymentStreamDocuments,
  z.ZodTypeDef,
  unknown
> = z.object({
  text: z.string(),
  metadata: z.lazy(() => DeploymentStreamMetadata$inboundSchema).optional(),
});

/** @internal */
export type DeploymentStreamDocuments$Outbound = {
  text: string;
  metadata?: DeploymentStreamMetadata$Outbound | undefined;
};

/** @internal */
export const DeploymentStreamDocuments$outboundSchema: z.ZodType<
  DeploymentStreamDocuments$Outbound,
  z.ZodTypeDef,
  DeploymentStreamDocuments
> = z.object({
  text: z.string(),
  metadata: z.lazy(() => DeploymentStreamMetadata$outboundSchema).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeploymentStreamDocuments$ {
  /** @deprecated use `DeploymentStreamDocuments$inboundSchema` instead. */
  export const inboundSchema = DeploymentStreamDocuments$inboundSchema;
  /** @deprecated use `DeploymentStreamDocuments$outboundSchema` instead. */
  export const outboundSchema = DeploymentStreamDocuments$outboundSchema;
  /** @deprecated use `DeploymentStreamDocuments$Outbound` instead. */
  export type Outbound = DeploymentStreamDocuments$Outbound;
}

export function deploymentStreamDocumentsToJSON(
  deploymentStreamDocuments: DeploymentStreamDocuments,
): string {
  return JSON.stringify(
    DeploymentStreamDocuments$outboundSchema.parse(deploymentStreamDocuments),
  );
}

export function deploymentStreamDocumentsFromJSON(
  jsonString: string,
): SafeParseResult<DeploymentStreamDocuments, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DeploymentStreamDocuments$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DeploymentStreamDocuments' from JSON`,
  );
}

/** @internal */
export const DeploymentStreamInvokeOptions$inboundSchema: z.ZodType<
  DeploymentStreamInvokeOptions,
  z.ZodTypeDef,
  unknown
> = z.object({
  include_retrievals: z.boolean().default(false),
}).transform((v) => {
  return remap$(v, {
    "include_retrievals": "includeRetrievals",
  });
});

/** @internal */
export type DeploymentStreamInvokeOptions$Outbound = {
  include_retrievals: boolean;
};

/** @internal */
export const DeploymentStreamInvokeOptions$outboundSchema: z.ZodType<
  DeploymentStreamInvokeOptions$Outbound,
  z.ZodTypeDef,
  DeploymentStreamInvokeOptions
> = z.object({
  includeRetrievals: z.boolean().default(false),
}).transform((v) => {
  return remap$(v, {
    includeRetrievals: "include_retrievals",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeploymentStreamInvokeOptions$ {
  /** @deprecated use `DeploymentStreamInvokeOptions$inboundSchema` instead. */
  export const inboundSchema = DeploymentStreamInvokeOptions$inboundSchema;
  /** @deprecated use `DeploymentStreamInvokeOptions$outboundSchema` instead. */
  export const outboundSchema = DeploymentStreamInvokeOptions$outboundSchema;
  /** @deprecated use `DeploymentStreamInvokeOptions$Outbound` instead. */
  export type Outbound = DeploymentStreamInvokeOptions$Outbound;
}

export function deploymentStreamInvokeOptionsToJSON(
  deploymentStreamInvokeOptions: DeploymentStreamInvokeOptions,
): string {
  return JSON.stringify(
    DeploymentStreamInvokeOptions$outboundSchema.parse(
      deploymentStreamInvokeOptions,
    ),
  );
}

export function deploymentStreamInvokeOptionsFromJSON(
  jsonString: string,
): SafeParseResult<DeploymentStreamInvokeOptions, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DeploymentStreamInvokeOptions$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DeploymentStreamInvokeOptions' from JSON`,
  );
}

/** @internal */
export const DeploymentStreamRequestBody$inboundSchema: z.ZodType<
  DeploymentStreamRequestBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  key: z.string(),
  inputs: z.record(z.union([z.string(), z.number(), z.boolean()])).optional(),
  context: z.record(z.any()).optional(),
  prefix_messages: z.array(
    z.lazy(() => DeploymentStreamPrefixMessages$inboundSchema),
  ).optional(),
  messages: z.array(z.lazy(() => DeploymentStreamMessages$inboundSchema))
    .optional(),
  file_ids: z.array(z.string()).optional(),
  metadata: z.record(z.any()).optional(),
  extra_params: z.record(z.any()).optional(),
  documents: z.array(z.lazy(() => DeploymentStreamDocuments$inboundSchema))
    .optional(),
  invoke_options: z.lazy(() => DeploymentStreamInvokeOptions$inboundSchema)
    .optional(),
}).transform((v) => {
  return remap$(v, {
    "prefix_messages": "prefixMessages",
    "file_ids": "fileIds",
    "extra_params": "extraParams",
    "invoke_options": "invokeOptions",
  });
});

/** @internal */
export type DeploymentStreamRequestBody$Outbound = {
  key: string;
  inputs?: { [k: string]: string | number | boolean } | undefined;
  context?: { [k: string]: any } | undefined;
  prefix_messages?: Array<DeploymentStreamPrefixMessages$Outbound> | undefined;
  messages?: Array<DeploymentStreamMessages$Outbound> | undefined;
  file_ids?: Array<string> | undefined;
  metadata?: { [k: string]: any } | undefined;
  extra_params?: { [k: string]: any } | undefined;
  documents?: Array<DeploymentStreamDocuments$Outbound> | undefined;
  invoke_options?: DeploymentStreamInvokeOptions$Outbound | undefined;
};

/** @internal */
export const DeploymentStreamRequestBody$outboundSchema: z.ZodType<
  DeploymentStreamRequestBody$Outbound,
  z.ZodTypeDef,
  DeploymentStreamRequestBody
> = z.object({
  key: z.string(),
  inputs: z.record(z.union([z.string(), z.number(), z.boolean()])).optional(),
  context: z.record(z.any()).optional(),
  prefixMessages: z.array(
    z.lazy(() => DeploymentStreamPrefixMessages$outboundSchema),
  ).optional(),
  messages: z.array(z.lazy(() => DeploymentStreamMessages$outboundSchema))
    .optional(),
  fileIds: z.array(z.string()).optional(),
  metadata: z.record(z.any()).optional(),
  extraParams: z.record(z.any()).optional(),
  documents: z.array(z.lazy(() => DeploymentStreamDocuments$outboundSchema))
    .optional(),
  invokeOptions: z.lazy(() => DeploymentStreamInvokeOptions$outboundSchema)
    .optional(),
}).transform((v) => {
  return remap$(v, {
    prefixMessages: "prefix_messages",
    fileIds: "file_ids",
    extraParams: "extra_params",
    invokeOptions: "invoke_options",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeploymentStreamRequestBody$ {
  /** @deprecated use `DeploymentStreamRequestBody$inboundSchema` instead. */
  export const inboundSchema = DeploymentStreamRequestBody$inboundSchema;
  /** @deprecated use `DeploymentStreamRequestBody$outboundSchema` instead. */
  export const outboundSchema = DeploymentStreamRequestBody$outboundSchema;
  /** @deprecated use `DeploymentStreamRequestBody$Outbound` instead. */
  export type Outbound = DeploymentStreamRequestBody$Outbound;
}

export function deploymentStreamRequestBodyToJSON(
  deploymentStreamRequestBody: DeploymentStreamRequestBody,
): string {
  return JSON.stringify(
    DeploymentStreamRequestBody$outboundSchema.parse(
      deploymentStreamRequestBody,
    ),
  );
}

export function deploymentStreamRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<DeploymentStreamRequestBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DeploymentStreamRequestBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DeploymentStreamRequestBody' from JSON`,
  );
}

/** @internal */
export const DeploymentStreamObject$inboundSchema: z.ZodNativeEnum<
  typeof DeploymentStreamObject
> = z.nativeEnum(DeploymentStreamObject);

/** @internal */
export const DeploymentStreamObject$outboundSchema: z.ZodNativeEnum<
  typeof DeploymentStreamObject
> = DeploymentStreamObject$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeploymentStreamObject$ {
  /** @deprecated use `DeploymentStreamObject$inboundSchema` instead. */
  export const inboundSchema = DeploymentStreamObject$inboundSchema;
  /** @deprecated use `DeploymentStreamObject$outboundSchema` instead. */
  export const outboundSchema = DeploymentStreamObject$outboundSchema;
}

/** @internal */
export const DeploymentStreamProvider$inboundSchema: z.ZodNativeEnum<
  typeof DeploymentStreamProvider
> = z.nativeEnum(DeploymentStreamProvider);

/** @internal */
export const DeploymentStreamProvider$outboundSchema: z.ZodNativeEnum<
  typeof DeploymentStreamProvider
> = DeploymentStreamProvider$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeploymentStreamProvider$ {
  /** @deprecated use `DeploymentStreamProvider$inboundSchema` instead. */
  export const inboundSchema = DeploymentStreamProvider$inboundSchema;
  /** @deprecated use `DeploymentStreamProvider$outboundSchema` instead. */
  export const outboundSchema = DeploymentStreamProvider$outboundSchema;
}

/** @internal */
export const DeploymentStreamMessageDeploymentsResponseRole$inboundSchema:
  z.ZodNativeEnum<typeof DeploymentStreamMessageDeploymentsResponseRole> = z
    .nativeEnum(DeploymentStreamMessageDeploymentsResponseRole);

/** @internal */
export const DeploymentStreamMessageDeploymentsResponseRole$outboundSchema:
  z.ZodNativeEnum<typeof DeploymentStreamMessageDeploymentsResponseRole> =
    DeploymentStreamMessageDeploymentsResponseRole$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeploymentStreamMessageDeploymentsResponseRole$ {
  /** @deprecated use `DeploymentStreamMessageDeploymentsResponseRole$inboundSchema` instead. */
  export const inboundSchema =
    DeploymentStreamMessageDeploymentsResponseRole$inboundSchema;
  /** @deprecated use `DeploymentStreamMessageDeploymentsResponseRole$outboundSchema` instead. */
  export const outboundSchema =
    DeploymentStreamMessageDeploymentsResponseRole$outboundSchema;
}

/** @internal */
export const DeploymentStreamMessage3$inboundSchema: z.ZodType<
  DeploymentStreamMessage3,
  z.ZodTypeDef,
  unknown
> = z.object({
  role: DeploymentStreamMessageDeploymentsResponseRole$inboundSchema,
  url: z.string(),
});

/** @internal */
export type DeploymentStreamMessage3$Outbound = {
  role: string;
  url: string;
};

/** @internal */
export const DeploymentStreamMessage3$outboundSchema: z.ZodType<
  DeploymentStreamMessage3$Outbound,
  z.ZodTypeDef,
  DeploymentStreamMessage3
> = z.object({
  role: DeploymentStreamMessageDeploymentsResponseRole$outboundSchema,
  url: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeploymentStreamMessage3$ {
  /** @deprecated use `DeploymentStreamMessage3$inboundSchema` instead. */
  export const inboundSchema = DeploymentStreamMessage3$inboundSchema;
  /** @deprecated use `DeploymentStreamMessage3$outboundSchema` instead. */
  export const outboundSchema = DeploymentStreamMessage3$outboundSchema;
  /** @deprecated use `DeploymentStreamMessage3$Outbound` instead. */
  export type Outbound = DeploymentStreamMessage3$Outbound;
}

export function deploymentStreamMessage3ToJSON(
  deploymentStreamMessage3: DeploymentStreamMessage3,
): string {
  return JSON.stringify(
    DeploymentStreamMessage3$outboundSchema.parse(deploymentStreamMessage3),
  );
}

export function deploymentStreamMessage3FromJSON(
  jsonString: string,
): SafeParseResult<DeploymentStreamMessage3, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DeploymentStreamMessage3$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DeploymentStreamMessage3' from JSON`,
  );
}

/** @internal */
export const DeploymentStreamMessageDeploymentsRole$inboundSchema:
  z.ZodNativeEnum<typeof DeploymentStreamMessageDeploymentsRole> = z.nativeEnum(
    DeploymentStreamMessageDeploymentsRole,
  );

/** @internal */
export const DeploymentStreamMessageDeploymentsRole$outboundSchema:
  z.ZodNativeEnum<typeof DeploymentStreamMessageDeploymentsRole> =
    DeploymentStreamMessageDeploymentsRole$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeploymentStreamMessageDeploymentsRole$ {
  /** @deprecated use `DeploymentStreamMessageDeploymentsRole$inboundSchema` instead. */
  export const inboundSchema =
    DeploymentStreamMessageDeploymentsRole$inboundSchema;
  /** @deprecated use `DeploymentStreamMessageDeploymentsRole$outboundSchema` instead. */
  export const outboundSchema =
    DeploymentStreamMessageDeploymentsRole$outboundSchema;
}

/** @internal */
export const DeploymentStreamMessage2$inboundSchema: z.ZodType<
  DeploymentStreamMessage2,
  z.ZodTypeDef,
  unknown
> = z.object({
  role: DeploymentStreamMessageDeploymentsRole$inboundSchema,
  content: z.nullable(z.string()),
});

/** @internal */
export type DeploymentStreamMessage2$Outbound = {
  role: string;
  content: string | null;
};

/** @internal */
export const DeploymentStreamMessage2$outboundSchema: z.ZodType<
  DeploymentStreamMessage2$Outbound,
  z.ZodTypeDef,
  DeploymentStreamMessage2
> = z.object({
  role: DeploymentStreamMessageDeploymentsRole$outboundSchema,
  content: z.nullable(z.string()),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeploymentStreamMessage2$ {
  /** @deprecated use `DeploymentStreamMessage2$inboundSchema` instead. */
  export const inboundSchema = DeploymentStreamMessage2$inboundSchema;
  /** @deprecated use `DeploymentStreamMessage2$outboundSchema` instead. */
  export const outboundSchema = DeploymentStreamMessage2$outboundSchema;
  /** @deprecated use `DeploymentStreamMessage2$Outbound` instead. */
  export type Outbound = DeploymentStreamMessage2$Outbound;
}

export function deploymentStreamMessage2ToJSON(
  deploymentStreamMessage2: DeploymentStreamMessage2,
): string {
  return JSON.stringify(
    DeploymentStreamMessage2$outboundSchema.parse(deploymentStreamMessage2),
  );
}

export function deploymentStreamMessage2FromJSON(
  jsonString: string,
): SafeParseResult<DeploymentStreamMessage2, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DeploymentStreamMessage2$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DeploymentStreamMessage2' from JSON`,
  );
}

/** @internal */
export const DeploymentStreamMessageRole$inboundSchema: z.ZodNativeEnum<
  typeof DeploymentStreamMessageRole
> = z.nativeEnum(DeploymentStreamMessageRole);

/** @internal */
export const DeploymentStreamMessageRole$outboundSchema: z.ZodNativeEnum<
  typeof DeploymentStreamMessageRole
> = DeploymentStreamMessageRole$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeploymentStreamMessageRole$ {
  /** @deprecated use `DeploymentStreamMessageRole$inboundSchema` instead. */
  export const inboundSchema = DeploymentStreamMessageRole$inboundSchema;
  /** @deprecated use `DeploymentStreamMessageRole$outboundSchema` instead. */
  export const outboundSchema = DeploymentStreamMessageRole$outboundSchema;
}

/** @internal */
export const DeploymentStreamMessageType$inboundSchema: z.ZodNativeEnum<
  typeof DeploymentStreamMessageType
> = z.nativeEnum(DeploymentStreamMessageType);

/** @internal */
export const DeploymentStreamMessageType$outboundSchema: z.ZodNativeEnum<
  typeof DeploymentStreamMessageType
> = DeploymentStreamMessageType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeploymentStreamMessageType$ {
  /** @deprecated use `DeploymentStreamMessageType$inboundSchema` instead. */
  export const inboundSchema = DeploymentStreamMessageType$inboundSchema;
  /** @deprecated use `DeploymentStreamMessageType$outboundSchema` instead. */
  export const outboundSchema = DeploymentStreamMessageType$outboundSchema;
}

/** @internal */
export const DeploymentStreamMessageFunction$inboundSchema: z.ZodType<
  DeploymentStreamMessageFunction,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.string(),
  arguments: z.string(),
});

/** @internal */
export type DeploymentStreamMessageFunction$Outbound = {
  name: string;
  arguments: string;
};

/** @internal */
export const DeploymentStreamMessageFunction$outboundSchema: z.ZodType<
  DeploymentStreamMessageFunction$Outbound,
  z.ZodTypeDef,
  DeploymentStreamMessageFunction
> = z.object({
  name: z.string(),
  arguments: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeploymentStreamMessageFunction$ {
  /** @deprecated use `DeploymentStreamMessageFunction$inboundSchema` instead. */
  export const inboundSchema = DeploymentStreamMessageFunction$inboundSchema;
  /** @deprecated use `DeploymentStreamMessageFunction$outboundSchema` instead. */
  export const outboundSchema = DeploymentStreamMessageFunction$outboundSchema;
  /** @deprecated use `DeploymentStreamMessageFunction$Outbound` instead. */
  export type Outbound = DeploymentStreamMessageFunction$Outbound;
}

export function deploymentStreamMessageFunctionToJSON(
  deploymentStreamMessageFunction: DeploymentStreamMessageFunction,
): string {
  return JSON.stringify(
    DeploymentStreamMessageFunction$outboundSchema.parse(
      deploymentStreamMessageFunction,
    ),
  );
}

export function deploymentStreamMessageFunctionFromJSON(
  jsonString: string,
): SafeParseResult<DeploymentStreamMessageFunction, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DeploymentStreamMessageFunction$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DeploymentStreamMessageFunction' from JSON`,
  );
}

/** @internal */
export const DeploymentStreamMessageToolCalls$inboundSchema: z.ZodType<
  DeploymentStreamMessageToolCalls,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string().optional(),
  index: z.number().optional(),
  type: DeploymentStreamMessageType$inboundSchema,
  function: z.lazy(() => DeploymentStreamMessageFunction$inboundSchema),
});

/** @internal */
export type DeploymentStreamMessageToolCalls$Outbound = {
  id?: string | undefined;
  index?: number | undefined;
  type: string;
  function: DeploymentStreamMessageFunction$Outbound;
};

/** @internal */
export const DeploymentStreamMessageToolCalls$outboundSchema: z.ZodType<
  DeploymentStreamMessageToolCalls$Outbound,
  z.ZodTypeDef,
  DeploymentStreamMessageToolCalls
> = z.object({
  id: z.string().optional(),
  index: z.number().optional(),
  type: DeploymentStreamMessageType$outboundSchema,
  function: z.lazy(() => DeploymentStreamMessageFunction$outboundSchema),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeploymentStreamMessageToolCalls$ {
  /** @deprecated use `DeploymentStreamMessageToolCalls$inboundSchema` instead. */
  export const inboundSchema = DeploymentStreamMessageToolCalls$inboundSchema;
  /** @deprecated use `DeploymentStreamMessageToolCalls$outboundSchema` instead. */
  export const outboundSchema = DeploymentStreamMessageToolCalls$outboundSchema;
  /** @deprecated use `DeploymentStreamMessageToolCalls$Outbound` instead. */
  export type Outbound = DeploymentStreamMessageToolCalls$Outbound;
}

export function deploymentStreamMessageToolCallsToJSON(
  deploymentStreamMessageToolCalls: DeploymentStreamMessageToolCalls,
): string {
  return JSON.stringify(
    DeploymentStreamMessageToolCalls$outboundSchema.parse(
      deploymentStreamMessageToolCalls,
    ),
  );
}

export function deploymentStreamMessageToolCallsFromJSON(
  jsonString: string,
): SafeParseResult<DeploymentStreamMessageToolCalls, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DeploymentStreamMessageToolCalls$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DeploymentStreamMessageToolCalls' from JSON`,
  );
}

/** @internal */
export const DeploymentStreamMessage1$inboundSchema: z.ZodType<
  DeploymentStreamMessage1,
  z.ZodTypeDef,
  unknown
> = z.object({
  role: DeploymentStreamMessageRole$inboundSchema,
  content: z.nullable(z.string()).optional(),
  tool_calls: z.array(
    z.lazy(() => DeploymentStreamMessageToolCalls$inboundSchema),
  ),
}).transform((v) => {
  return remap$(v, {
    "tool_calls": "toolCalls",
  });
});

/** @internal */
export type DeploymentStreamMessage1$Outbound = {
  role: string;
  content?: string | null | undefined;
  tool_calls: Array<DeploymentStreamMessageToolCalls$Outbound>;
};

/** @internal */
export const DeploymentStreamMessage1$outboundSchema: z.ZodType<
  DeploymentStreamMessage1$Outbound,
  z.ZodTypeDef,
  DeploymentStreamMessage1
> = z.object({
  role: DeploymentStreamMessageRole$outboundSchema,
  content: z.nullable(z.string()).optional(),
  toolCalls: z.array(
    z.lazy(() => DeploymentStreamMessageToolCalls$outboundSchema),
  ),
}).transform((v) => {
  return remap$(v, {
    toolCalls: "tool_calls",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeploymentStreamMessage1$ {
  /** @deprecated use `DeploymentStreamMessage1$inboundSchema` instead. */
  export const inboundSchema = DeploymentStreamMessage1$inboundSchema;
  /** @deprecated use `DeploymentStreamMessage1$outboundSchema` instead. */
  export const outboundSchema = DeploymentStreamMessage1$outboundSchema;
  /** @deprecated use `DeploymentStreamMessage1$Outbound` instead. */
  export type Outbound = DeploymentStreamMessage1$Outbound;
}

export function deploymentStreamMessage1ToJSON(
  deploymentStreamMessage1: DeploymentStreamMessage1,
): string {
  return JSON.stringify(
    DeploymentStreamMessage1$outboundSchema.parse(deploymentStreamMessage1),
  );
}

export function deploymentStreamMessage1FromJSON(
  jsonString: string,
): SafeParseResult<DeploymentStreamMessage1, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DeploymentStreamMessage1$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DeploymentStreamMessage1' from JSON`,
  );
}

/** @internal */
export const DeploymentStreamMessage$inboundSchema: z.ZodType<
  DeploymentStreamMessage,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => DeploymentStreamMessage2$inboundSchema),
  z.lazy(() => DeploymentStreamMessage3$inboundSchema),
  z.lazy(() => DeploymentStreamMessage1$inboundSchema),
]);

/** @internal */
export type DeploymentStreamMessage$Outbound =
  | DeploymentStreamMessage2$Outbound
  | DeploymentStreamMessage3$Outbound
  | DeploymentStreamMessage1$Outbound;

/** @internal */
export const DeploymentStreamMessage$outboundSchema: z.ZodType<
  DeploymentStreamMessage$Outbound,
  z.ZodTypeDef,
  DeploymentStreamMessage
> = z.union([
  z.lazy(() => DeploymentStreamMessage2$outboundSchema),
  z.lazy(() => DeploymentStreamMessage3$outboundSchema),
  z.lazy(() => DeploymentStreamMessage1$outboundSchema),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeploymentStreamMessage$ {
  /** @deprecated use `DeploymentStreamMessage$inboundSchema` instead. */
  export const inboundSchema = DeploymentStreamMessage$inboundSchema;
  /** @deprecated use `DeploymentStreamMessage$outboundSchema` instead. */
  export const outboundSchema = DeploymentStreamMessage$outboundSchema;
  /** @deprecated use `DeploymentStreamMessage$Outbound` instead. */
  export type Outbound = DeploymentStreamMessage$Outbound;
}

export function deploymentStreamMessageToJSON(
  deploymentStreamMessage: DeploymentStreamMessage,
): string {
  return JSON.stringify(
    DeploymentStreamMessage$outboundSchema.parse(deploymentStreamMessage),
  );
}

export function deploymentStreamMessageFromJSON(
  jsonString: string,
): SafeParseResult<DeploymentStreamMessage, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DeploymentStreamMessage$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DeploymentStreamMessage' from JSON`,
  );
}

/** @internal */
export const DeploymentStreamChoices$inboundSchema: z.ZodType<
  DeploymentStreamChoices,
  z.ZodTypeDef,
  unknown
> = z.object({
  index: z.number(),
  message: z.union([
    z.lazy(() => DeploymentStreamMessage2$inboundSchema),
    z.lazy(() => DeploymentStreamMessage3$inboundSchema),
    z.lazy(() => DeploymentStreamMessage1$inboundSchema),
  ]).optional(),
  finish_reason: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    "finish_reason": "finishReason",
  });
});

/** @internal */
export type DeploymentStreamChoices$Outbound = {
  index: number;
  message?:
    | DeploymentStreamMessage2$Outbound
    | DeploymentStreamMessage3$Outbound
    | DeploymentStreamMessage1$Outbound
    | undefined;
  finish_reason?: string | null | undefined;
};

/** @internal */
export const DeploymentStreamChoices$outboundSchema: z.ZodType<
  DeploymentStreamChoices$Outbound,
  z.ZodTypeDef,
  DeploymentStreamChoices
> = z.object({
  index: z.number(),
  message: z.union([
    z.lazy(() => DeploymentStreamMessage2$outboundSchema),
    z.lazy(() => DeploymentStreamMessage3$outboundSchema),
    z.lazy(() => DeploymentStreamMessage1$outboundSchema),
  ]).optional(),
  finishReason: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    finishReason: "finish_reason",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeploymentStreamChoices$ {
  /** @deprecated use `DeploymentStreamChoices$inboundSchema` instead. */
  export const inboundSchema = DeploymentStreamChoices$inboundSchema;
  /** @deprecated use `DeploymentStreamChoices$outboundSchema` instead. */
  export const outboundSchema = DeploymentStreamChoices$outboundSchema;
  /** @deprecated use `DeploymentStreamChoices$Outbound` instead. */
  export type Outbound = DeploymentStreamChoices$Outbound;
}

export function deploymentStreamChoicesToJSON(
  deploymentStreamChoices: DeploymentStreamChoices,
): string {
  return JSON.stringify(
    DeploymentStreamChoices$outboundSchema.parse(deploymentStreamChoices),
  );
}

export function deploymentStreamChoicesFromJSON(
  jsonString: string,
): SafeParseResult<DeploymentStreamChoices, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DeploymentStreamChoices$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DeploymentStreamChoices' from JSON`,
  );
}

/** @internal */
export const DeploymentStreamDeploymentsMetadata$inboundSchema: z.ZodType<
  DeploymentStreamDeploymentsMetadata,
  z.ZodTypeDef,
  unknown
> = z.object({
  file_name: z.string(),
  page_number: z.nullable(z.number()),
  file_type: z.string(),
  rerank_score: z.number().optional(),
  search_score: z.number(),
}).transform((v) => {
  return remap$(v, {
    "file_name": "fileName",
    "page_number": "pageNumber",
    "file_type": "fileType",
    "rerank_score": "rerankScore",
    "search_score": "searchScore",
  });
});

/** @internal */
export type DeploymentStreamDeploymentsMetadata$Outbound = {
  file_name: string;
  page_number: number | null;
  file_type: string;
  rerank_score?: number | undefined;
  search_score: number;
};

/** @internal */
export const DeploymentStreamDeploymentsMetadata$outboundSchema: z.ZodType<
  DeploymentStreamDeploymentsMetadata$Outbound,
  z.ZodTypeDef,
  DeploymentStreamDeploymentsMetadata
> = z.object({
  fileName: z.string(),
  pageNumber: z.nullable(z.number()),
  fileType: z.string(),
  rerankScore: z.number().optional(),
  searchScore: z.number(),
}).transform((v) => {
  return remap$(v, {
    fileName: "file_name",
    pageNumber: "page_number",
    fileType: "file_type",
    rerankScore: "rerank_score",
    searchScore: "search_score",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeploymentStreamDeploymentsMetadata$ {
  /** @deprecated use `DeploymentStreamDeploymentsMetadata$inboundSchema` instead. */
  export const inboundSchema =
    DeploymentStreamDeploymentsMetadata$inboundSchema;
  /** @deprecated use `DeploymentStreamDeploymentsMetadata$outboundSchema` instead. */
  export const outboundSchema =
    DeploymentStreamDeploymentsMetadata$outboundSchema;
  /** @deprecated use `DeploymentStreamDeploymentsMetadata$Outbound` instead. */
  export type Outbound = DeploymentStreamDeploymentsMetadata$Outbound;
}

export function deploymentStreamDeploymentsMetadataToJSON(
  deploymentStreamDeploymentsMetadata: DeploymentStreamDeploymentsMetadata,
): string {
  return JSON.stringify(
    DeploymentStreamDeploymentsMetadata$outboundSchema.parse(
      deploymentStreamDeploymentsMetadata,
    ),
  );
}

export function deploymentStreamDeploymentsMetadataFromJSON(
  jsonString: string,
): SafeParseResult<DeploymentStreamDeploymentsMetadata, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      DeploymentStreamDeploymentsMetadata$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DeploymentStreamDeploymentsMetadata' from JSON`,
  );
}

/** @internal */
export const DeploymentStreamRetrievals$inboundSchema: z.ZodType<
  DeploymentStreamRetrievals,
  z.ZodTypeDef,
  unknown
> = z.object({
  document: z.string(),
  metadata: z.lazy(() => DeploymentStreamDeploymentsMetadata$inboundSchema),
});

/** @internal */
export type DeploymentStreamRetrievals$Outbound = {
  document: string;
  metadata: DeploymentStreamDeploymentsMetadata$Outbound;
};

/** @internal */
export const DeploymentStreamRetrievals$outboundSchema: z.ZodType<
  DeploymentStreamRetrievals$Outbound,
  z.ZodTypeDef,
  DeploymentStreamRetrievals
> = z.object({
  document: z.string(),
  metadata: z.lazy(() => DeploymentStreamDeploymentsMetadata$outboundSchema),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeploymentStreamRetrievals$ {
  /** @deprecated use `DeploymentStreamRetrievals$inboundSchema` instead. */
  export const inboundSchema = DeploymentStreamRetrievals$inboundSchema;
  /** @deprecated use `DeploymentStreamRetrievals$outboundSchema` instead. */
  export const outboundSchema = DeploymentStreamRetrievals$outboundSchema;
  /** @deprecated use `DeploymentStreamRetrievals$Outbound` instead. */
  export type Outbound = DeploymentStreamRetrievals$Outbound;
}

export function deploymentStreamRetrievalsToJSON(
  deploymentStreamRetrievals: DeploymentStreamRetrievals,
): string {
  return JSON.stringify(
    DeploymentStreamRetrievals$outboundSchema.parse(deploymentStreamRetrievals),
  );
}

export function deploymentStreamRetrievalsFromJSON(
  jsonString: string,
): SafeParseResult<DeploymentStreamRetrievals, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DeploymentStreamRetrievals$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DeploymentStreamRetrievals' from JSON`,
  );
}

/** @internal */
export const DeploymentStreamData$inboundSchema: z.ZodType<
  DeploymentStreamData,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string().optional(),
  created: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
  object: DeploymentStreamObject$inboundSchema.optional(),
  model: z.string().optional(),
  provider: DeploymentStreamProvider$inboundSchema.optional(),
  is_final: z.boolean().optional(),
  integration_id: z.string().optional(),
  finalized: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
  system_fingerprint: z.nullable(z.string()).optional(),
  choices: z.array(z.lazy(() => DeploymentStreamChoices$inboundSchema))
    .optional(),
  retrievals: z.array(z.lazy(() => DeploymentStreamRetrievals$inboundSchema))
    .optional(),
  provider_response: z.any().optional(),
}).transform((v) => {
  return remap$(v, {
    "is_final": "isFinal",
    "integration_id": "integrationId",
    "system_fingerprint": "systemFingerprint",
    "provider_response": "providerResponse",
  });
});

/** @internal */
export type DeploymentStreamData$Outbound = {
  id?: string | undefined;
  created?: string | undefined;
  object?: string | undefined;
  model?: string | undefined;
  provider?: string | undefined;
  is_final?: boolean | undefined;
  integration_id?: string | undefined;
  finalized?: string | undefined;
  system_fingerprint?: string | null | undefined;
  choices?: Array<DeploymentStreamChoices$Outbound> | undefined;
  retrievals?: Array<DeploymentStreamRetrievals$Outbound> | undefined;
  provider_response?: any | undefined;
};

/** @internal */
export const DeploymentStreamData$outboundSchema: z.ZodType<
  DeploymentStreamData$Outbound,
  z.ZodTypeDef,
  DeploymentStreamData
> = z.object({
  id: z.string().optional(),
  created: z.date().transform(v => v.toISOString()).optional(),
  object: DeploymentStreamObject$outboundSchema.optional(),
  model: z.string().optional(),
  provider: DeploymentStreamProvider$outboundSchema.optional(),
  isFinal: z.boolean().optional(),
  integrationId: z.string().optional(),
  finalized: z.date().transform(v => v.toISOString()).optional(),
  systemFingerprint: z.nullable(z.string()).optional(),
  choices: z.array(z.lazy(() => DeploymentStreamChoices$outboundSchema))
    .optional(),
  retrievals: z.array(z.lazy(() => DeploymentStreamRetrievals$outboundSchema))
    .optional(),
  providerResponse: z.any().optional(),
}).transform((v) => {
  return remap$(v, {
    isFinal: "is_final",
    integrationId: "integration_id",
    systemFingerprint: "system_fingerprint",
    providerResponse: "provider_response",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeploymentStreamData$ {
  /** @deprecated use `DeploymentStreamData$inboundSchema` instead. */
  export const inboundSchema = DeploymentStreamData$inboundSchema;
  /** @deprecated use `DeploymentStreamData$outboundSchema` instead. */
  export const outboundSchema = DeploymentStreamData$outboundSchema;
  /** @deprecated use `DeploymentStreamData$Outbound` instead. */
  export type Outbound = DeploymentStreamData$Outbound;
}

export function deploymentStreamDataToJSON(
  deploymentStreamData: DeploymentStreamData,
): string {
  return JSON.stringify(
    DeploymentStreamData$outboundSchema.parse(deploymentStreamData),
  );
}

export function deploymentStreamDataFromJSON(
  jsonString: string,
): SafeParseResult<DeploymentStreamData, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DeploymentStreamData$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DeploymentStreamData' from JSON`,
  );
}

/** @internal */
export const DeploymentStreamResponseBody$inboundSchema: z.ZodType<
  DeploymentStreamResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  data: z.string().transform((v, ctx) => {
    try {
      return JSON.parse(v);
    } catch (err) {
      ctx.addIssue({
        code: z.ZodIssueCode.custom,
        message: `malformed json: ${err}`,
      });
      return z.NEVER;
    }
  }).pipe(z.lazy(() => DeploymentStreamData$inboundSchema).optional()),
});

/** @internal */
export type DeploymentStreamResponseBody$Outbound = {
  data?: DeploymentStreamData$Outbound | undefined;
};

/** @internal */
export const DeploymentStreamResponseBody$outboundSchema: z.ZodType<
  DeploymentStreamResponseBody$Outbound,
  z.ZodTypeDef,
  DeploymentStreamResponseBody
> = z.object({
  data: z.lazy(() => DeploymentStreamData$outboundSchema).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeploymentStreamResponseBody$ {
  /** @deprecated use `DeploymentStreamResponseBody$inboundSchema` instead. */
  export const inboundSchema = DeploymentStreamResponseBody$inboundSchema;
  /** @deprecated use `DeploymentStreamResponseBody$outboundSchema` instead. */
  export const outboundSchema = DeploymentStreamResponseBody$outboundSchema;
  /** @deprecated use `DeploymentStreamResponseBody$Outbound` instead. */
  export type Outbound = DeploymentStreamResponseBody$Outbound;
}

export function deploymentStreamResponseBodyToJSON(
  deploymentStreamResponseBody: DeploymentStreamResponseBody,
): string {
  return JSON.stringify(
    DeploymentStreamResponseBody$outboundSchema.parse(
      deploymentStreamResponseBody,
    ),
  );
}

export function deploymentStreamResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<DeploymentStreamResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DeploymentStreamResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DeploymentStreamResponseBody' from JSON`,
  );
}
