/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * The retrieval type to use for the knowledge base. If not provided, Hybrid Search will be used as a default query strategy.
 */
export const RetrievalType = {
  VectorSearch: "vector_search",
  KeywordSearch: "keyword_search",
  HybridSearch: "hybrid_search",
} as const;
/**
 * The retrieval type to use for the knowledge base. If not provided, Hybrid Search will be used as a default query strategy.
 */
export type RetrievalType = ClosedEnum<typeof RetrievalType>;

/**
 * The rerank configuration for the knowledge base. In case the model is provided it will be used to enhance the search precision.
 */
export type RerankConfig = {
  /**
   * The number of results to return by the reranking model
   */
  topK?: number | undefined;
  /**
   * The threshold value used to filter the rerank results, only documents with a relevance score greater than the threshold will be returned
   */
  rerankThreshold?: number | undefined;
  /**
   * The rerank model to use for the knowledge base.
   */
  rerankModel: string;
};

/**
 * The Agentic RAG configuration for the knowledge base. If `null` is provided, Agentic RAG will be disabled.
 */
export type AgenticRagConfig = {
  /**
   * The model to use for the Agentic RAG
   */
  model: string;
};

/**
 * The retrieval settings for the knowledge base. If not provider, Hybrid Search will be used as a default query strategy.
 */
export type RetrievalSettings = {
  /**
   * The retrieval type to use for the knowledge base. If not provided, Hybrid Search will be used as a default query strategy.
   */
  retrievalType?: RetrievalType | undefined;
  /**
   * The number of results to return from the search.
   */
  topK?: number | undefined;
  /**
   * The threshold value used to filter the search results, only documents with a relevance score greater than the threshold will be returned
   */
  threshold?: number | undefined;
  /**
   * The rerank configuration for the knowledge base. In case the model is provided it will be used to enhance the search precision.
   */
  rerankConfig?: RerankConfig | null | undefined;
  /**
   * The Agentic RAG configuration for the knowledge base. If `null` is provided, Agentic RAG will be disabled.
   */
  agenticRagConfig?: AgenticRagConfig | null | undefined;
};

export type CreateKnowledgeRequestBody = {
  key: string;
  description?: string | undefined;
  /**
   * The embeddings model to use for the knowledge base. This model will be used to embed the chunks when they are added to the knowledge base.
   */
  embeddingModel: string;
  /**
   * The retrieval settings for the knowledge base. If not provider, Hybrid Search will be used as a default query strategy.
   */
  retrievalSettings?: RetrievalSettings | undefined;
  /**
   * The path where the entity is stored in the project structure. The first element of the path always represents the project name. Any subsequent path element after the project will be created as a folder in the project if it does not exists.
   */
  path: string;
};

/**
 * The retrieval type to use for the knowledge base. If not provided, Hybrid Search will be used as a default query strategy.
 */
export const CreateKnowledgeRetrievalType = {
  VectorSearch: "vector_search",
  KeywordSearch: "keyword_search",
  HybridSearch: "hybrid_search",
} as const;
/**
 * The retrieval type to use for the knowledge base. If not provided, Hybrid Search will be used as a default query strategy.
 */
export type CreateKnowledgeRetrievalType = ClosedEnum<
  typeof CreateKnowledgeRetrievalType
>;

/**
 * The rerank configuration for the knowledge base. In case the model is provided it will be used to enhance the search precision.
 */
export type CreateKnowledgeRerankConfig = {
  /**
   * The number of results to return by the reranking model
   */
  topK?: number | undefined;
  /**
   * The threshold value used to filter the rerank results, only documents with a relevance score greater than the threshold will be returned
   */
  rerankThreshold?: number | undefined;
  /**
   * The rerank model to use for the knowledge base.
   */
  rerankModel: string;
};

/**
 * The Agentic RAG configuration for the knowledge base. If `null` is provided, Agentic RAG will be disabled.
 */
export type CreateKnowledgeAgenticRagConfig = {
  /**
   * The model to use for the Agentic RAG
   */
  model: string;
};

/**
 * The retrieval settings for the knowledge base. If not provider, Hybrid Search will be used as a default query strategy.
 */
export type CreateKnowledgeRetrievalSettings = {
  /**
   * The retrieval type to use for the knowledge base. If not provided, Hybrid Search will be used as a default query strategy.
   */
  retrievalType?: CreateKnowledgeRetrievalType | undefined;
  /**
   * The number of results to return from the search.
   */
  topK?: number | undefined;
  /**
   * The threshold value used to filter the search results, only documents with a relevance score greater than the threshold will be returned
   */
  threshold?: number | undefined;
  /**
   * The rerank configuration for the knowledge base. In case the model is provided it will be used to enhance the search precision.
   */
  rerankConfig?: CreateKnowledgeRerankConfig | null | undefined;
  /**
   * The Agentic RAG configuration for the knowledge base. If `null` is provided, Agentic RAG will be disabled.
   */
  agenticRagConfig?: CreateKnowledgeAgenticRagConfig | null | undefined;
};

/**
 * Knowledge Base object
 */
export type CreateKnowledgeResponseBody = {
  /**
   * The unique identifier of the knowledge base.
   */
  id: string;
  /**
   * The creation date of the knowledge base.
   */
  created: string;
  /**
   * The description of the knowledge base.
   */
  description?: string | undefined;
  /**
   * The unique key of the knowledge base.
   */
  key: string;
  /**
   * The embeddings model used for the knowledge base.
   */
  model: string;
  /**
   * The project/domain ID of the knowledge base.
   */
  domainId: string;
  /**
   * The path where the entity is stored in the project structure. The first element of the path always represents the project name. Any subsequent path element after the project will be created as a folder in the project if it does not exists.
   */
  path?: string | undefined;
  /**
   * The retrieval settings for the knowledge base. If not provider, Hybrid Search will be used as a default query strategy.
   */
  retrievalSettings?: CreateKnowledgeRetrievalSettings | undefined;
  createdById?: string | null | undefined;
  updatedById?: string | null | undefined;
  /**
   * The last update date of the knowledge base.
   */
  updated: string;
};

/** @internal */
export const RetrievalType$inboundSchema: z.ZodNativeEnum<
  typeof RetrievalType
> = z.nativeEnum(RetrievalType);

/** @internal */
export const RetrievalType$outboundSchema: z.ZodNativeEnum<
  typeof RetrievalType
> = RetrievalType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RetrievalType$ {
  /** @deprecated use `RetrievalType$inboundSchema` instead. */
  export const inboundSchema = RetrievalType$inboundSchema;
  /** @deprecated use `RetrievalType$outboundSchema` instead. */
  export const outboundSchema = RetrievalType$outboundSchema;
}

/** @internal */
export const RerankConfig$inboundSchema: z.ZodType<
  RerankConfig,
  z.ZodTypeDef,
  unknown
> = z.object({
  top_k: z.number().int().default(5),
  rerank_threshold: z.number().default(0.5),
  rerank_model: z.string(),
}).transform((v) => {
  return remap$(v, {
    "top_k": "topK",
    "rerank_threshold": "rerankThreshold",
    "rerank_model": "rerankModel",
  });
});

/** @internal */
export type RerankConfig$Outbound = {
  top_k: number;
  rerank_threshold: number;
  rerank_model: string;
};

/** @internal */
export const RerankConfig$outboundSchema: z.ZodType<
  RerankConfig$Outbound,
  z.ZodTypeDef,
  RerankConfig
> = z.object({
  topK: z.number().int().default(5),
  rerankThreshold: z.number().default(0.5),
  rerankModel: z.string(),
}).transform((v) => {
  return remap$(v, {
    topK: "top_k",
    rerankThreshold: "rerank_threshold",
    rerankModel: "rerank_model",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RerankConfig$ {
  /** @deprecated use `RerankConfig$inboundSchema` instead. */
  export const inboundSchema = RerankConfig$inboundSchema;
  /** @deprecated use `RerankConfig$outboundSchema` instead. */
  export const outboundSchema = RerankConfig$outboundSchema;
  /** @deprecated use `RerankConfig$Outbound` instead. */
  export type Outbound = RerankConfig$Outbound;
}

export function rerankConfigToJSON(rerankConfig: RerankConfig): string {
  return JSON.stringify(RerankConfig$outboundSchema.parse(rerankConfig));
}

export function rerankConfigFromJSON(
  jsonString: string,
): SafeParseResult<RerankConfig, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => RerankConfig$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RerankConfig' from JSON`,
  );
}

/** @internal */
export const AgenticRagConfig$inboundSchema: z.ZodType<
  AgenticRagConfig,
  z.ZodTypeDef,
  unknown
> = z.object({
  model: z.string(),
});

/** @internal */
export type AgenticRagConfig$Outbound = {
  model: string;
};

/** @internal */
export const AgenticRagConfig$outboundSchema: z.ZodType<
  AgenticRagConfig$Outbound,
  z.ZodTypeDef,
  AgenticRagConfig
> = z.object({
  model: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AgenticRagConfig$ {
  /** @deprecated use `AgenticRagConfig$inboundSchema` instead. */
  export const inboundSchema = AgenticRagConfig$inboundSchema;
  /** @deprecated use `AgenticRagConfig$outboundSchema` instead. */
  export const outboundSchema = AgenticRagConfig$outboundSchema;
  /** @deprecated use `AgenticRagConfig$Outbound` instead. */
  export type Outbound = AgenticRagConfig$Outbound;
}

export function agenticRagConfigToJSON(
  agenticRagConfig: AgenticRagConfig,
): string {
  return JSON.stringify(
    AgenticRagConfig$outboundSchema.parse(agenticRagConfig),
  );
}

export function agenticRagConfigFromJSON(
  jsonString: string,
): SafeParseResult<AgenticRagConfig, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AgenticRagConfig$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AgenticRagConfig' from JSON`,
  );
}

/** @internal */
export const RetrievalSettings$inboundSchema: z.ZodType<
  RetrievalSettings,
  z.ZodTypeDef,
  unknown
> = z.object({
  retrieval_type: RetrievalType$inboundSchema.default("hybrid_search"),
  top_k: z.number().int().default(5),
  threshold: z.number().default(0),
  rerank_config: z.nullable(z.lazy(() => RerankConfig$inboundSchema))
    .optional(),
  agentic_rag_config: z.nullable(z.lazy(() => AgenticRagConfig$inboundSchema))
    .optional(),
}).transform((v) => {
  return remap$(v, {
    "retrieval_type": "retrievalType",
    "top_k": "topK",
    "rerank_config": "rerankConfig",
    "agentic_rag_config": "agenticRagConfig",
  });
});

/** @internal */
export type RetrievalSettings$Outbound = {
  retrieval_type: string;
  top_k: number;
  threshold: number;
  rerank_config?: RerankConfig$Outbound | null | undefined;
  agentic_rag_config?: AgenticRagConfig$Outbound | null | undefined;
};

/** @internal */
export const RetrievalSettings$outboundSchema: z.ZodType<
  RetrievalSettings$Outbound,
  z.ZodTypeDef,
  RetrievalSettings
> = z.object({
  retrievalType: RetrievalType$outboundSchema.default("hybrid_search"),
  topK: z.number().int().default(5),
  threshold: z.number().default(0),
  rerankConfig: z.nullable(z.lazy(() => RerankConfig$outboundSchema))
    .optional(),
  agenticRagConfig: z.nullable(z.lazy(() => AgenticRagConfig$outboundSchema))
    .optional(),
}).transform((v) => {
  return remap$(v, {
    retrievalType: "retrieval_type",
    topK: "top_k",
    rerankConfig: "rerank_config",
    agenticRagConfig: "agentic_rag_config",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RetrievalSettings$ {
  /** @deprecated use `RetrievalSettings$inboundSchema` instead. */
  export const inboundSchema = RetrievalSettings$inboundSchema;
  /** @deprecated use `RetrievalSettings$outboundSchema` instead. */
  export const outboundSchema = RetrievalSettings$outboundSchema;
  /** @deprecated use `RetrievalSettings$Outbound` instead. */
  export type Outbound = RetrievalSettings$Outbound;
}

export function retrievalSettingsToJSON(
  retrievalSettings: RetrievalSettings,
): string {
  return JSON.stringify(
    RetrievalSettings$outboundSchema.parse(retrievalSettings),
  );
}

export function retrievalSettingsFromJSON(
  jsonString: string,
): SafeParseResult<RetrievalSettings, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => RetrievalSettings$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RetrievalSettings' from JSON`,
  );
}

/** @internal */
export const CreateKnowledgeRequestBody$inboundSchema: z.ZodType<
  CreateKnowledgeRequestBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  key: z.string(),
  description: z.string().optional(),
  embedding_model: z.string(),
  retrieval_settings: z.lazy(() => RetrievalSettings$inboundSchema).optional(),
  path: z.string(),
}).transform((v) => {
  return remap$(v, {
    "embedding_model": "embeddingModel",
    "retrieval_settings": "retrievalSettings",
  });
});

/** @internal */
export type CreateKnowledgeRequestBody$Outbound = {
  key: string;
  description?: string | undefined;
  embedding_model: string;
  retrieval_settings?: RetrievalSettings$Outbound | undefined;
  path: string;
};

/** @internal */
export const CreateKnowledgeRequestBody$outboundSchema: z.ZodType<
  CreateKnowledgeRequestBody$Outbound,
  z.ZodTypeDef,
  CreateKnowledgeRequestBody
> = z.object({
  key: z.string(),
  description: z.string().optional(),
  embeddingModel: z.string(),
  retrievalSettings: z.lazy(() => RetrievalSettings$outboundSchema).optional(),
  path: z.string(),
}).transform((v) => {
  return remap$(v, {
    embeddingModel: "embedding_model",
    retrievalSettings: "retrieval_settings",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateKnowledgeRequestBody$ {
  /** @deprecated use `CreateKnowledgeRequestBody$inboundSchema` instead. */
  export const inboundSchema = CreateKnowledgeRequestBody$inboundSchema;
  /** @deprecated use `CreateKnowledgeRequestBody$outboundSchema` instead. */
  export const outboundSchema = CreateKnowledgeRequestBody$outboundSchema;
  /** @deprecated use `CreateKnowledgeRequestBody$Outbound` instead. */
  export type Outbound = CreateKnowledgeRequestBody$Outbound;
}

export function createKnowledgeRequestBodyToJSON(
  createKnowledgeRequestBody: CreateKnowledgeRequestBody,
): string {
  return JSON.stringify(
    CreateKnowledgeRequestBody$outboundSchema.parse(createKnowledgeRequestBody),
  );
}

export function createKnowledgeRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<CreateKnowledgeRequestBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateKnowledgeRequestBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateKnowledgeRequestBody' from JSON`,
  );
}

/** @internal */
export const CreateKnowledgeRetrievalType$inboundSchema: z.ZodNativeEnum<
  typeof CreateKnowledgeRetrievalType
> = z.nativeEnum(CreateKnowledgeRetrievalType);

/** @internal */
export const CreateKnowledgeRetrievalType$outboundSchema: z.ZodNativeEnum<
  typeof CreateKnowledgeRetrievalType
> = CreateKnowledgeRetrievalType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateKnowledgeRetrievalType$ {
  /** @deprecated use `CreateKnowledgeRetrievalType$inboundSchema` instead. */
  export const inboundSchema = CreateKnowledgeRetrievalType$inboundSchema;
  /** @deprecated use `CreateKnowledgeRetrievalType$outboundSchema` instead. */
  export const outboundSchema = CreateKnowledgeRetrievalType$outboundSchema;
}

/** @internal */
export const CreateKnowledgeRerankConfig$inboundSchema: z.ZodType<
  CreateKnowledgeRerankConfig,
  z.ZodTypeDef,
  unknown
> = z.object({
  top_k: z.number().int().default(5),
  rerank_threshold: z.number().default(0.5),
  rerank_model: z.string(),
}).transform((v) => {
  return remap$(v, {
    "top_k": "topK",
    "rerank_threshold": "rerankThreshold",
    "rerank_model": "rerankModel",
  });
});

/** @internal */
export type CreateKnowledgeRerankConfig$Outbound = {
  top_k: number;
  rerank_threshold: number;
  rerank_model: string;
};

/** @internal */
export const CreateKnowledgeRerankConfig$outboundSchema: z.ZodType<
  CreateKnowledgeRerankConfig$Outbound,
  z.ZodTypeDef,
  CreateKnowledgeRerankConfig
> = z.object({
  topK: z.number().int().default(5),
  rerankThreshold: z.number().default(0.5),
  rerankModel: z.string(),
}).transform((v) => {
  return remap$(v, {
    topK: "top_k",
    rerankThreshold: "rerank_threshold",
    rerankModel: "rerank_model",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateKnowledgeRerankConfig$ {
  /** @deprecated use `CreateKnowledgeRerankConfig$inboundSchema` instead. */
  export const inboundSchema = CreateKnowledgeRerankConfig$inboundSchema;
  /** @deprecated use `CreateKnowledgeRerankConfig$outboundSchema` instead. */
  export const outboundSchema = CreateKnowledgeRerankConfig$outboundSchema;
  /** @deprecated use `CreateKnowledgeRerankConfig$Outbound` instead. */
  export type Outbound = CreateKnowledgeRerankConfig$Outbound;
}

export function createKnowledgeRerankConfigToJSON(
  createKnowledgeRerankConfig: CreateKnowledgeRerankConfig,
): string {
  return JSON.stringify(
    CreateKnowledgeRerankConfig$outboundSchema.parse(
      createKnowledgeRerankConfig,
    ),
  );
}

export function createKnowledgeRerankConfigFromJSON(
  jsonString: string,
): SafeParseResult<CreateKnowledgeRerankConfig, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateKnowledgeRerankConfig$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateKnowledgeRerankConfig' from JSON`,
  );
}

/** @internal */
export const CreateKnowledgeAgenticRagConfig$inboundSchema: z.ZodType<
  CreateKnowledgeAgenticRagConfig,
  z.ZodTypeDef,
  unknown
> = z.object({
  model: z.string(),
});

/** @internal */
export type CreateKnowledgeAgenticRagConfig$Outbound = {
  model: string;
};

/** @internal */
export const CreateKnowledgeAgenticRagConfig$outboundSchema: z.ZodType<
  CreateKnowledgeAgenticRagConfig$Outbound,
  z.ZodTypeDef,
  CreateKnowledgeAgenticRagConfig
> = z.object({
  model: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateKnowledgeAgenticRagConfig$ {
  /** @deprecated use `CreateKnowledgeAgenticRagConfig$inboundSchema` instead. */
  export const inboundSchema = CreateKnowledgeAgenticRagConfig$inboundSchema;
  /** @deprecated use `CreateKnowledgeAgenticRagConfig$outboundSchema` instead. */
  export const outboundSchema = CreateKnowledgeAgenticRagConfig$outboundSchema;
  /** @deprecated use `CreateKnowledgeAgenticRagConfig$Outbound` instead. */
  export type Outbound = CreateKnowledgeAgenticRagConfig$Outbound;
}

export function createKnowledgeAgenticRagConfigToJSON(
  createKnowledgeAgenticRagConfig: CreateKnowledgeAgenticRagConfig,
): string {
  return JSON.stringify(
    CreateKnowledgeAgenticRagConfig$outboundSchema.parse(
      createKnowledgeAgenticRagConfig,
    ),
  );
}

export function createKnowledgeAgenticRagConfigFromJSON(
  jsonString: string,
): SafeParseResult<CreateKnowledgeAgenticRagConfig, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateKnowledgeAgenticRagConfig$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateKnowledgeAgenticRagConfig' from JSON`,
  );
}

/** @internal */
export const CreateKnowledgeRetrievalSettings$inboundSchema: z.ZodType<
  CreateKnowledgeRetrievalSettings,
  z.ZodTypeDef,
  unknown
> = z.object({
  retrieval_type: CreateKnowledgeRetrievalType$inboundSchema.default(
    "hybrid_search",
  ),
  top_k: z.number().int().default(5),
  threshold: z.number().default(0),
  rerank_config: z.nullable(
    z.lazy(() => CreateKnowledgeRerankConfig$inboundSchema),
  ).optional(),
  agentic_rag_config: z.nullable(
    z.lazy(() => CreateKnowledgeAgenticRagConfig$inboundSchema),
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    "retrieval_type": "retrievalType",
    "top_k": "topK",
    "rerank_config": "rerankConfig",
    "agentic_rag_config": "agenticRagConfig",
  });
});

/** @internal */
export type CreateKnowledgeRetrievalSettings$Outbound = {
  retrieval_type: string;
  top_k: number;
  threshold: number;
  rerank_config?: CreateKnowledgeRerankConfig$Outbound | null | undefined;
  agentic_rag_config?:
    | CreateKnowledgeAgenticRagConfig$Outbound
    | null
    | undefined;
};

/** @internal */
export const CreateKnowledgeRetrievalSettings$outboundSchema: z.ZodType<
  CreateKnowledgeRetrievalSettings$Outbound,
  z.ZodTypeDef,
  CreateKnowledgeRetrievalSettings
> = z.object({
  retrievalType: CreateKnowledgeRetrievalType$outboundSchema.default(
    "hybrid_search",
  ),
  topK: z.number().int().default(5),
  threshold: z.number().default(0),
  rerankConfig: z.nullable(
    z.lazy(() => CreateKnowledgeRerankConfig$outboundSchema),
  ).optional(),
  agenticRagConfig: z.nullable(
    z.lazy(() => CreateKnowledgeAgenticRagConfig$outboundSchema),
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    retrievalType: "retrieval_type",
    topK: "top_k",
    rerankConfig: "rerank_config",
    agenticRagConfig: "agentic_rag_config",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateKnowledgeRetrievalSettings$ {
  /** @deprecated use `CreateKnowledgeRetrievalSettings$inboundSchema` instead. */
  export const inboundSchema = CreateKnowledgeRetrievalSettings$inboundSchema;
  /** @deprecated use `CreateKnowledgeRetrievalSettings$outboundSchema` instead. */
  export const outboundSchema = CreateKnowledgeRetrievalSettings$outboundSchema;
  /** @deprecated use `CreateKnowledgeRetrievalSettings$Outbound` instead. */
  export type Outbound = CreateKnowledgeRetrievalSettings$Outbound;
}

export function createKnowledgeRetrievalSettingsToJSON(
  createKnowledgeRetrievalSettings: CreateKnowledgeRetrievalSettings,
): string {
  return JSON.stringify(
    CreateKnowledgeRetrievalSettings$outboundSchema.parse(
      createKnowledgeRetrievalSettings,
    ),
  );
}

export function createKnowledgeRetrievalSettingsFromJSON(
  jsonString: string,
): SafeParseResult<CreateKnowledgeRetrievalSettings, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateKnowledgeRetrievalSettings$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateKnowledgeRetrievalSettings' from JSON`,
  );
}

/** @internal */
export const CreateKnowledgeResponseBody$inboundSchema: z.ZodType<
  CreateKnowledgeResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  _id: z.string(),
  created: z.string(),
  description: z.string().optional(),
  key: z.string(),
  model: z.string(),
  domain_id: z.string(),
  path: z.string().optional(),
  retrieval_settings: z.lazy(() =>
    CreateKnowledgeRetrievalSettings$inboundSchema
  ).optional(),
  created_by_id: z.nullable(z.string()).optional(),
  updated_by_id: z.nullable(z.string()).optional(),
  updated: z.string(),
}).transform((v) => {
  return remap$(v, {
    "_id": "id",
    "domain_id": "domainId",
    "retrieval_settings": "retrievalSettings",
    "created_by_id": "createdById",
    "updated_by_id": "updatedById",
  });
});

/** @internal */
export type CreateKnowledgeResponseBody$Outbound = {
  _id: string;
  created: string;
  description?: string | undefined;
  key: string;
  model: string;
  domain_id: string;
  path?: string | undefined;
  retrieval_settings?: CreateKnowledgeRetrievalSettings$Outbound | undefined;
  created_by_id?: string | null | undefined;
  updated_by_id?: string | null | undefined;
  updated: string;
};

/** @internal */
export const CreateKnowledgeResponseBody$outboundSchema: z.ZodType<
  CreateKnowledgeResponseBody$Outbound,
  z.ZodTypeDef,
  CreateKnowledgeResponseBody
> = z.object({
  id: z.string(),
  created: z.string(),
  description: z.string().optional(),
  key: z.string(),
  model: z.string(),
  domainId: z.string(),
  path: z.string().optional(),
  retrievalSettings: z.lazy(() =>
    CreateKnowledgeRetrievalSettings$outboundSchema
  ).optional(),
  createdById: z.nullable(z.string()).optional(),
  updatedById: z.nullable(z.string()).optional(),
  updated: z.string(),
}).transform((v) => {
  return remap$(v, {
    id: "_id",
    domainId: "domain_id",
    retrievalSettings: "retrieval_settings",
    createdById: "created_by_id",
    updatedById: "updated_by_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateKnowledgeResponseBody$ {
  /** @deprecated use `CreateKnowledgeResponseBody$inboundSchema` instead. */
  export const inboundSchema = CreateKnowledgeResponseBody$inboundSchema;
  /** @deprecated use `CreateKnowledgeResponseBody$outboundSchema` instead. */
  export const outboundSchema = CreateKnowledgeResponseBody$outboundSchema;
  /** @deprecated use `CreateKnowledgeResponseBody$Outbound` instead. */
  export type Outbound = CreateKnowledgeResponseBody$Outbound;
}

export function createKnowledgeResponseBodyToJSON(
  createKnowledgeResponseBody: CreateKnowledgeResponseBody,
): string {
  return JSON.stringify(
    CreateKnowledgeResponseBody$outboundSchema.parse(
      createKnowledgeResponseBody,
    ),
  );
}

export function createKnowledgeResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<CreateKnowledgeResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateKnowledgeResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateKnowledgeResponseBody' from JSON`,
  );
}
