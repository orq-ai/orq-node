/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type GetOneChunkRequest = {
  /**
   * The unique identifier of the chunk
   */
  chunkId: string;
  /**
   * The unique identifier of the data source
   */
  datasourceId: string;
  /**
   * The unique identifier of the knowledge base
   */
  knowledgeId: string;
};

export type GetOneChunkMetadata = string | number | boolean;

/**
 * The status of the chunk
 */
export const GetOneChunkStatus = {
  Pending: "pending",
  Processing: "processing",
  Completed: "completed",
  Failed: "failed",
  Queued: "queued",
} as const;
/**
 * The status of the chunk
 */
export type GetOneChunkStatus = ClosedEnum<typeof GetOneChunkStatus>;

/**
 * Chunk successfully retrieved
 */
export type GetOneChunkResponseBody = {
  /**
   * The unique identifier of the chunk
   */
  id: string;
  /**
   * The text content of the chunk
   */
  text: string;
  /**
   * Metadata of the chunk. Can include `page_number` or any other key-value pairs
   */
  metadata?: { [k: string]: string | number | boolean } | undefined;
  /**
   * Whether the chunk is enabled
   */
  enabled: boolean;
  /**
   * The status of the chunk
   */
  status: GetOneChunkStatus;
  /**
   * The date and time the chunk was created
   */
  created: string;
  /**
   * The date and time the chunk was updated
   */
  updated: string;
  /**
   * The unique identifier of the user who created the chunk
   */
  createdById?: string | null | undefined;
  /**
   * The unique identifier of the user who updated the chunk
   */
  updateById?: string | null | undefined;
};

/** @internal */
export const GetOneChunkRequest$inboundSchema: z.ZodType<
  GetOneChunkRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  chunk_id: z.string(),
  datasource_id: z.string(),
  knowledge_id: z.string(),
}).transform((v) => {
  return remap$(v, {
    "chunk_id": "chunkId",
    "datasource_id": "datasourceId",
    "knowledge_id": "knowledgeId",
  });
});

/** @internal */
export type GetOneChunkRequest$Outbound = {
  chunk_id: string;
  datasource_id: string;
  knowledge_id: string;
};

/** @internal */
export const GetOneChunkRequest$outboundSchema: z.ZodType<
  GetOneChunkRequest$Outbound,
  z.ZodTypeDef,
  GetOneChunkRequest
> = z.object({
  chunkId: z.string(),
  datasourceId: z.string(),
  knowledgeId: z.string(),
}).transform((v) => {
  return remap$(v, {
    chunkId: "chunk_id",
    datasourceId: "datasource_id",
    knowledgeId: "knowledge_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetOneChunkRequest$ {
  /** @deprecated use `GetOneChunkRequest$inboundSchema` instead. */
  export const inboundSchema = GetOneChunkRequest$inboundSchema;
  /** @deprecated use `GetOneChunkRequest$outboundSchema` instead. */
  export const outboundSchema = GetOneChunkRequest$outboundSchema;
  /** @deprecated use `GetOneChunkRequest$Outbound` instead. */
  export type Outbound = GetOneChunkRequest$Outbound;
}

export function getOneChunkRequestToJSON(
  getOneChunkRequest: GetOneChunkRequest,
): string {
  return JSON.stringify(
    GetOneChunkRequest$outboundSchema.parse(getOneChunkRequest),
  );
}

export function getOneChunkRequestFromJSON(
  jsonString: string,
): SafeParseResult<GetOneChunkRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetOneChunkRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetOneChunkRequest' from JSON`,
  );
}

/** @internal */
export const GetOneChunkMetadata$inboundSchema: z.ZodType<
  GetOneChunkMetadata,
  z.ZodTypeDef,
  unknown
> = z.union([z.string(), z.number(), z.boolean()]);

/** @internal */
export type GetOneChunkMetadata$Outbound = string | number | boolean;

/** @internal */
export const GetOneChunkMetadata$outboundSchema: z.ZodType<
  GetOneChunkMetadata$Outbound,
  z.ZodTypeDef,
  GetOneChunkMetadata
> = z.union([z.string(), z.number(), z.boolean()]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetOneChunkMetadata$ {
  /** @deprecated use `GetOneChunkMetadata$inboundSchema` instead. */
  export const inboundSchema = GetOneChunkMetadata$inboundSchema;
  /** @deprecated use `GetOneChunkMetadata$outboundSchema` instead. */
  export const outboundSchema = GetOneChunkMetadata$outboundSchema;
  /** @deprecated use `GetOneChunkMetadata$Outbound` instead. */
  export type Outbound = GetOneChunkMetadata$Outbound;
}

export function getOneChunkMetadataToJSON(
  getOneChunkMetadata: GetOneChunkMetadata,
): string {
  return JSON.stringify(
    GetOneChunkMetadata$outboundSchema.parse(getOneChunkMetadata),
  );
}

export function getOneChunkMetadataFromJSON(
  jsonString: string,
): SafeParseResult<GetOneChunkMetadata, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetOneChunkMetadata$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetOneChunkMetadata' from JSON`,
  );
}

/** @internal */
export const GetOneChunkStatus$inboundSchema: z.ZodNativeEnum<
  typeof GetOneChunkStatus
> = z.nativeEnum(GetOneChunkStatus);

/** @internal */
export const GetOneChunkStatus$outboundSchema: z.ZodNativeEnum<
  typeof GetOneChunkStatus
> = GetOneChunkStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetOneChunkStatus$ {
  /** @deprecated use `GetOneChunkStatus$inboundSchema` instead. */
  export const inboundSchema = GetOneChunkStatus$inboundSchema;
  /** @deprecated use `GetOneChunkStatus$outboundSchema` instead. */
  export const outboundSchema = GetOneChunkStatus$outboundSchema;
}

/** @internal */
export const GetOneChunkResponseBody$inboundSchema: z.ZodType<
  GetOneChunkResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  _id: z.string(),
  text: z.string(),
  metadata: z.record(z.union([z.string(), z.number(), z.boolean()])).optional(),
  enabled: z.boolean(),
  status: GetOneChunkStatus$inboundSchema,
  created: z.string(),
  updated: z.string(),
  created_by_id: z.nullable(z.string()).optional(),
  update_by_id: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    "_id": "id",
    "created_by_id": "createdById",
    "update_by_id": "updateById",
  });
});

/** @internal */
export type GetOneChunkResponseBody$Outbound = {
  _id: string;
  text: string;
  metadata?: { [k: string]: string | number | boolean } | undefined;
  enabled: boolean;
  status: string;
  created: string;
  updated: string;
  created_by_id?: string | null | undefined;
  update_by_id?: string | null | undefined;
};

/** @internal */
export const GetOneChunkResponseBody$outboundSchema: z.ZodType<
  GetOneChunkResponseBody$Outbound,
  z.ZodTypeDef,
  GetOneChunkResponseBody
> = z.object({
  id: z.string(),
  text: z.string(),
  metadata: z.record(z.union([z.string(), z.number(), z.boolean()])).optional(),
  enabled: z.boolean(),
  status: GetOneChunkStatus$outboundSchema,
  created: z.string(),
  updated: z.string(),
  createdById: z.nullable(z.string()).optional(),
  updateById: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    id: "_id",
    createdById: "created_by_id",
    updateById: "update_by_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetOneChunkResponseBody$ {
  /** @deprecated use `GetOneChunkResponseBody$inboundSchema` instead. */
  export const inboundSchema = GetOneChunkResponseBody$inboundSchema;
  /** @deprecated use `GetOneChunkResponseBody$outboundSchema` instead. */
  export const outboundSchema = GetOneChunkResponseBody$outboundSchema;
  /** @deprecated use `GetOneChunkResponseBody$Outbound` instead. */
  export type Outbound = GetOneChunkResponseBody$Outbound;
}

export function getOneChunkResponseBodyToJSON(
  getOneChunkResponseBody: GetOneChunkResponseBody,
): string {
  return JSON.stringify(
    GetOneChunkResponseBody$outboundSchema.parse(getOneChunkResponseBody),
  );
}

export function getOneChunkResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<GetOneChunkResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetOneChunkResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetOneChunkResponseBody' from JSON`,
  );
}
