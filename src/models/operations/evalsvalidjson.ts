/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type EvalsValidJsonRequestBody = {
  output: string;
};

export type EvalsValidJsonValue = boolean | string | number;

/**
 * Returns whether the input is valid JSON
 */
export type EvalsValidJsonResponseBody = {
  value: boolean | string | number | null;
};

/** @internal */
export const EvalsValidJsonRequestBody$inboundSchema: z.ZodType<
  EvalsValidJsonRequestBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  output: z.string(),
});

/** @internal */
export type EvalsValidJsonRequestBody$Outbound = {
  output: string;
};

/** @internal */
export const EvalsValidJsonRequestBody$outboundSchema: z.ZodType<
  EvalsValidJsonRequestBody$Outbound,
  z.ZodTypeDef,
  EvalsValidJsonRequestBody
> = z.object({
  output: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EvalsValidJsonRequestBody$ {
  /** @deprecated use `EvalsValidJsonRequestBody$inboundSchema` instead. */
  export const inboundSchema = EvalsValidJsonRequestBody$inboundSchema;
  /** @deprecated use `EvalsValidJsonRequestBody$outboundSchema` instead. */
  export const outboundSchema = EvalsValidJsonRequestBody$outboundSchema;
  /** @deprecated use `EvalsValidJsonRequestBody$Outbound` instead. */
  export type Outbound = EvalsValidJsonRequestBody$Outbound;
}

export function evalsValidJsonRequestBodyToJSON(
  evalsValidJsonRequestBody: EvalsValidJsonRequestBody,
): string {
  return JSON.stringify(
    EvalsValidJsonRequestBody$outboundSchema.parse(evalsValidJsonRequestBody),
  );
}

export function evalsValidJsonRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<EvalsValidJsonRequestBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => EvalsValidJsonRequestBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'EvalsValidJsonRequestBody' from JSON`,
  );
}

/** @internal */
export const EvalsValidJsonValue$inboundSchema: z.ZodType<
  EvalsValidJsonValue,
  z.ZodTypeDef,
  unknown
> = z.union([z.boolean(), z.string(), z.number()]);

/** @internal */
export type EvalsValidJsonValue$Outbound = boolean | string | number;

/** @internal */
export const EvalsValidJsonValue$outboundSchema: z.ZodType<
  EvalsValidJsonValue$Outbound,
  z.ZodTypeDef,
  EvalsValidJsonValue
> = z.union([z.boolean(), z.string(), z.number()]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EvalsValidJsonValue$ {
  /** @deprecated use `EvalsValidJsonValue$inboundSchema` instead. */
  export const inboundSchema = EvalsValidJsonValue$inboundSchema;
  /** @deprecated use `EvalsValidJsonValue$outboundSchema` instead. */
  export const outboundSchema = EvalsValidJsonValue$outboundSchema;
  /** @deprecated use `EvalsValidJsonValue$Outbound` instead. */
  export type Outbound = EvalsValidJsonValue$Outbound;
}

export function evalsValidJsonValueToJSON(
  evalsValidJsonValue: EvalsValidJsonValue,
): string {
  return JSON.stringify(
    EvalsValidJsonValue$outboundSchema.parse(evalsValidJsonValue),
  );
}

export function evalsValidJsonValueFromJSON(
  jsonString: string,
): SafeParseResult<EvalsValidJsonValue, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => EvalsValidJsonValue$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'EvalsValidJsonValue' from JSON`,
  );
}

/** @internal */
export const EvalsValidJsonResponseBody$inboundSchema: z.ZodType<
  EvalsValidJsonResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  value: z.nullable(z.union([z.boolean(), z.string(), z.number()])),
});

/** @internal */
export type EvalsValidJsonResponseBody$Outbound = {
  value: boolean | string | number | null;
};

/** @internal */
export const EvalsValidJsonResponseBody$outboundSchema: z.ZodType<
  EvalsValidJsonResponseBody$Outbound,
  z.ZodTypeDef,
  EvalsValidJsonResponseBody
> = z.object({
  value: z.nullable(z.union([z.boolean(), z.string(), z.number()])),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EvalsValidJsonResponseBody$ {
  /** @deprecated use `EvalsValidJsonResponseBody$inboundSchema` instead. */
  export const inboundSchema = EvalsValidJsonResponseBody$inboundSchema;
  /** @deprecated use `EvalsValidJsonResponseBody$outboundSchema` instead. */
  export const outboundSchema = EvalsValidJsonResponseBody$outboundSchema;
  /** @deprecated use `EvalsValidJsonResponseBody$Outbound` instead. */
  export type Outbound = EvalsValidJsonResponseBody$Outbound;
}

export function evalsValidJsonResponseBodyToJSON(
  evalsValidJsonResponseBody: EvalsValidJsonResponseBody,
): string {
  return JSON.stringify(
    EvalsValidJsonResponseBody$outboundSchema.parse(evalsValidJsonResponseBody),
  );
}

export function evalsValidJsonResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<EvalsValidJsonResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => EvalsValidJsonResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'EvalsValidJsonResponseBody' from JSON`,
  );
}
