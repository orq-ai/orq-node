/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type DeploymentsRequest = {
  /**
   * A limit on the number of objects to be returned. Limit can range between 1 and 50, and the default is 10
   */
  limit?: number | undefined;
  /**
   * A cursor for use in pagination. `after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 20 objects, ending with `ed33dade-ae32-4959-8c5c-7ae4aad748b5`, your subsequent call can include `after=ed33dade-ae32-4959-8c5c-7ae4aad748b5` in order to fetch the next page of the list.
   */
  after?: string | undefined;
};

export const ObjectT = {
  List: "list",
} as const;
export type ObjectT = ClosedEnum<typeof ObjectT>;

/**
 * The type of the tool. Currently, only `function` is supported.
 */
export const DeploymentsType = {
  Function: "function",
} as const;
/**
 * The type of the tool. Currently, only `function` is supported.
 */
export type DeploymentsType = ClosedEnum<typeof DeploymentsType>;

export const DeploymentsDeploymentsResponseType = {
  Object: "object",
} as const;
export type DeploymentsDeploymentsResponseType = ClosedEnum<
  typeof DeploymentsDeploymentsResponseType
>;

/**
 * The parameters the functions accepts, described as a JSON Schema object.
 *
 * @remarks
 *
 *  Omitting `parameters` defines a function with an empty parameter list.
 */
export type DeploymentsParameters = {
  type: DeploymentsDeploymentsResponseType;
  properties: { [k: string]: any };
  required?: Array<string> | undefined;
  additionalProperties?: boolean | undefined;
};

export type DeploymentsFunction = {
  /**
   * The name of the function to be called. Must be a-z, A-Z, 0-9, or contain underscores and dashes, with a maximum length of 64.
   */
  name: string;
  /**
   * A description of what the function does, used by the model to choose when and how to call the function.
   */
  description?: string | undefined;
  strict?: boolean | undefined;
  /**
   * The parameters the functions accepts, described as a JSON Schema object.
   *
   * @remarks
   *
   *  Omitting `parameters` defines a function with an empty parameter list.
   */
  parameters: DeploymentsParameters;
};

export type DeploymentsTools = {
  /**
   * The type of the tool. Currently, only `function` is supported.
   */
  type: DeploymentsType;
  function: DeploymentsFunction;
  id?: number | undefined;
};

/**
 * The type of the model
 */
export const DeploymentsModelType = {
  Chat: "chat",
  Completion: "completion",
  Embedding: "embedding",
  Vision: "vision",
  Image: "image",
  Tts: "tts",
  Stt: "stt",
  Rerank: "rerank",
} as const;
/**
 * The type of the model
 */
export type DeploymentsModelType = ClosedEnum<typeof DeploymentsModelType>;

/**
 * Only supported on `image` models.
 */
export const DeploymentsFormat = {
  Url: "url",
  B64Json: "b64_json",
  Text: "text",
  JsonObject: "json_object",
} as const;
/**
 * Only supported on `image` models.
 */
export type DeploymentsFormat = ClosedEnum<typeof DeploymentsFormat>;

/**
 * Only supported on `image` models.
 */
export const DeploymentsQuality = {
  Standard: "standard",
  Hd: "hd",
} as const;
/**
 * Only supported on `image` models.
 */
export type DeploymentsQuality = ClosedEnum<typeof DeploymentsQuality>;

export const DeploymentsResponseFormatType = {
  JsonObject: "json_object",
} as const;
export type DeploymentsResponseFormatType = ClosedEnum<
  typeof DeploymentsResponseFormatType
>;

export type DeploymentsResponseFormat2 = {
  type: DeploymentsResponseFormatType;
};

export const DeploymentsResponseFormatDeploymentsType = {
  JsonSchema: "json_schema",
} as const;
export type DeploymentsResponseFormatDeploymentsType = ClosedEnum<
  typeof DeploymentsResponseFormatDeploymentsType
>;

export type DeploymentsResponseFormatJsonSchema = {
  name: string;
  strict: boolean;
  schema: { [k: string]: any };
};

export type DeploymentsResponseFormat1 = {
  type: DeploymentsResponseFormatDeploymentsType;
  jsonSchema: DeploymentsResponseFormatJsonSchema;
};

/**
 * An object specifying the format that the model must output.
 *
 * @remarks
 *
 *  Setting to `{ "type": "json_schema", "json_schema": {...} }` enables Structured Outputs which ensures the model will match your supplied JSON schema
 *
 *  Setting to `{ "type": "json_object" }` enables JSON mode, which ensures the message the model generates is valid JSON.
 *
 * Important: when using JSON mode, you must also instruct the model to produce JSON yourself via a system or user message. Without this, the model may generate an unending stream of whitespace until the generation reaches the token limit, resulting in a long-running and seemingly "stuck" request. Also note that the message content may be partially cut off if finish_reason="length", which indicates the generation exceeded max_tokens or the conversation exceeded the max context length.
 */
export type DeploymentsResponseFormat =
  | DeploymentsResponseFormat2
  | DeploymentsResponseFormat1;

/**
 * The version of photoReal to use. Must be v1 or v2. Only available for `leonardoai` provider
 */
export const DeploymentsPhotoRealVersion = {
  V1: "v1",
  V2: "v2",
} as const;
/**
 * The version of photoReal to use. Must be v1 or v2. Only available for `leonardoai` provider
 */
export type DeploymentsPhotoRealVersion = ClosedEnum<
  typeof DeploymentsPhotoRealVersion
>;

/**
 * The format to return the embeddings
 */
export const DeploymentsEncodingFormat = {
  Float: "float",
  Base64: "base64",
} as const;
/**
 * The format to return the embeddings
 */
export type DeploymentsEncodingFormat = ClosedEnum<
  typeof DeploymentsEncodingFormat
>;

/**
 * Model Parameters: Not all parameters apply to every model
 */
export type DeploymentsModelParameters = {
  /**
   * Only supported on `chat` and `completion` models.
   */
  temperature?: number | undefined;
  /**
   * Only supported on `chat` and `completion` models.
   */
  maxTokens?: number | undefined;
  /**
   * Only supported on `chat` and `completion` models.
   */
  topK?: number | undefined;
  /**
   * Only supported on `chat` and `completion` models.
   */
  topP?: number | undefined;
  /**
   * Only supported on `chat` and `completion` models.
   */
  frequencyPenalty?: number | undefined;
  /**
   * Only supported on `chat` and `completion` models.
   */
  presencePenalty?: number | undefined;
  /**
   * Only supported on `image` models.
   */
  numImages?: number | undefined;
  /**
   * Best effort deterministic seed for the model. Currently only OpenAI models support these
   */
  seed?: number | undefined;
  /**
   * Only supported on `image` models.
   */
  format?: DeploymentsFormat | undefined;
  /**
   * Only supported on `image` models.
   */
  dimensions?: string | undefined;
  /**
   * Only supported on `image` models.
   */
  quality?: DeploymentsQuality | undefined;
  /**
   * Only supported on `image` models.
   */
  style?: string | undefined;
  /**
   * An object specifying the format that the model must output.
   *
   * @remarks
   *
   *  Setting to `{ "type": "json_schema", "json_schema": {...} }` enables Structured Outputs which ensures the model will match your supplied JSON schema
   *
   *  Setting to `{ "type": "json_object" }` enables JSON mode, which ensures the message the model generates is valid JSON.
   *
   * Important: when using JSON mode, you must also instruct the model to produce JSON yourself via a system or user message. Without this, the model may generate an unending stream of whitespace until the generation reaches the token limit, resulting in a long-running and seemingly "stuck" request. Also note that the message content may be partially cut off if finish_reason="length", which indicates the generation exceeded max_tokens or the conversation exceeded the max context length.
   */
  responseFormat?:
    | DeploymentsResponseFormat2
    | DeploymentsResponseFormat1
    | null
    | undefined;
  /**
   * The version of photoReal to use. Must be v1 or v2. Only available for `leonardoai` provider
   */
  photoRealVersion?: DeploymentsPhotoRealVersion | undefined;
  /**
   * The format to return the embeddings
   */
  encodingFormat?: DeploymentsEncodingFormat | undefined;
};

export const DeploymentsProvider = {
  Cohere: "cohere",
  Openai: "openai",
  Anthropic: "anthropic",
  Huggingface: "huggingface",
  Replicate: "replicate",
  Google: "google",
  GoogleAi: "google-ai",
  Azure: "azure",
  Aws: "aws",
  Anyscale: "anyscale",
  Perplexity: "perplexity",
  Groq: "groq",
  Fal: "fal",
  Leonardoai: "leonardoai",
  Nvidia: "nvidia",
} as const;
export type DeploymentsProvider = ClosedEnum<typeof DeploymentsProvider>;

/**
 * The role of the prompt message
 */
export const DeploymentsRole = {
  System: "system",
  Assistant: "assistant",
  User: "user",
  Exception: "exception",
  Tool: "tool",
  Prompt: "prompt",
  Correction: "correction",
  ExpectedOutput: "expected_output",
} as const;
/**
 * The role of the prompt message
 */
export type DeploymentsRole = ClosedEnum<typeof DeploymentsRole>;

export const Deployments2Type = {
  ImageUrl: "image_url",
} as const;
export type Deployments2Type = ClosedEnum<typeof Deployments2Type>;

export type Deployments2ImageUrl = {
  /**
   * The orq.ai id of the image
   */
  id?: string | undefined;
  /**
   * Either a URL of the image or the base64 encoded data URI.
   */
  url: string;
  /**
   * Specifies the detail level of the image. Currently only supported with OpenAI models
   */
  detail?: string | undefined;
};

/**
 * The image part of the prompt message. Only supported with vision models.
 */
export type Deployments22 = {
  type: Deployments2Type;
  imageUrl: Deployments2ImageUrl;
};

export const Deployments2DeploymentsType = {
  Text: "text",
} as const;
export type Deployments2DeploymentsType = ClosedEnum<
  typeof Deployments2DeploymentsType
>;

/**
 * Text content part of a prompt message
 */
export type Deployments21 = {
  type: Deployments2DeploymentsType;
  text: string;
};

export type DeploymentsContent2 = Deployments21 | Deployments22;

/**
 * The contents of the user message. Either the text content of the message or an array of content parts with a defined type, each can be of type `text` or `image_url` when passing in images. You can pass multiple images by adding multiple `image_url` content parts.
 */
export type DeploymentsContent = string | Array<Deployments21 | Deployments22>;

export const DeploymentsDeploymentsType = {
  Function: "function",
} as const;
export type DeploymentsDeploymentsType = ClosedEnum<
  typeof DeploymentsDeploymentsType
>;

export type DeploymentsDeploymentsFunction = {
  name: string;
  /**
   * JSON string arguments for the functions
   */
  arguments: string;
};

export type DeploymentsToolCalls = {
  id?: string | undefined;
  index?: number | undefined;
  type: DeploymentsDeploymentsType;
  function: DeploymentsDeploymentsFunction;
};

export type DeploymentsMessages = {
  /**
   * The role of the prompt message
   */
  role: DeploymentsRole;
  /**
   * The contents of the user message. Either the text content of the message or an array of content parts with a defined type, each can be of type `text` or `image_url` when passing in images. You can pass multiple images by adding multiple `image_url` content parts.
   */
  content: string | Array<Deployments21 | Deployments22>;
  toolCalls?: Array<DeploymentsToolCalls> | undefined;
};

export type DeploymentsPromptConfig = {
  tools: Array<DeploymentsTools>;
  model: string;
  /**
   * The type of the model
   */
  modelType: DeploymentsModelType;
  /**
   * Model Parameters: Not all parameters apply to every model
   */
  modelParameters: DeploymentsModelParameters;
  provider: DeploymentsProvider;
  messages: Array<DeploymentsMessages>;
};

export type Data = {
  /**
   * Unique identifier for the object.
   */
  id: string;
  /**
   * Date in ISO 8601 format at which the object was created.
   */
  created: string;
  /**
   * Date in ISO 8601 format at which the object was last updated.
   */
  updated: string;
  /**
   * The deployment unique key
   */
  key: string;
  /**
   * An arbitrary string attached to the object. Often useful for displaying to users.
   */
  description: string;
  promptConfig: DeploymentsPromptConfig;
  /**
   * THe version of the deployment
   */
  version: string;
};

/**
 * List of deployments
 */
export type DeploymentsResponseBody = {
  object: ObjectT;
  data: Array<Data>;
  hasMore: boolean;
};

/** @internal */
export const DeploymentsRequest$inboundSchema: z.ZodType<
  DeploymentsRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  limit: z.number().default(10),
  after: z.string().optional(),
});

/** @internal */
export type DeploymentsRequest$Outbound = {
  limit: number;
  after?: string | undefined;
};

/** @internal */
export const DeploymentsRequest$outboundSchema: z.ZodType<
  DeploymentsRequest$Outbound,
  z.ZodTypeDef,
  DeploymentsRequest
> = z.object({
  limit: z.number().default(10),
  after: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeploymentsRequest$ {
  /** @deprecated use `DeploymentsRequest$inboundSchema` instead. */
  export const inboundSchema = DeploymentsRequest$inboundSchema;
  /** @deprecated use `DeploymentsRequest$outboundSchema` instead. */
  export const outboundSchema = DeploymentsRequest$outboundSchema;
  /** @deprecated use `DeploymentsRequest$Outbound` instead. */
  export type Outbound = DeploymentsRequest$Outbound;
}

export function deploymentsRequestToJSON(
  deploymentsRequest: DeploymentsRequest,
): string {
  return JSON.stringify(
    DeploymentsRequest$outboundSchema.parse(deploymentsRequest),
  );
}

export function deploymentsRequestFromJSON(
  jsonString: string,
): SafeParseResult<DeploymentsRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DeploymentsRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DeploymentsRequest' from JSON`,
  );
}

/** @internal */
export const ObjectT$inboundSchema: z.ZodNativeEnum<typeof ObjectT> = z
  .nativeEnum(ObjectT);

/** @internal */
export const ObjectT$outboundSchema: z.ZodNativeEnum<typeof ObjectT> =
  ObjectT$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ObjectT$ {
  /** @deprecated use `ObjectT$inboundSchema` instead. */
  export const inboundSchema = ObjectT$inboundSchema;
  /** @deprecated use `ObjectT$outboundSchema` instead. */
  export const outboundSchema = ObjectT$outboundSchema;
}

/** @internal */
export const DeploymentsType$inboundSchema: z.ZodNativeEnum<
  typeof DeploymentsType
> = z.nativeEnum(DeploymentsType);

/** @internal */
export const DeploymentsType$outboundSchema: z.ZodNativeEnum<
  typeof DeploymentsType
> = DeploymentsType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeploymentsType$ {
  /** @deprecated use `DeploymentsType$inboundSchema` instead. */
  export const inboundSchema = DeploymentsType$inboundSchema;
  /** @deprecated use `DeploymentsType$outboundSchema` instead. */
  export const outboundSchema = DeploymentsType$outboundSchema;
}

/** @internal */
export const DeploymentsDeploymentsResponseType$inboundSchema: z.ZodNativeEnum<
  typeof DeploymentsDeploymentsResponseType
> = z.nativeEnum(DeploymentsDeploymentsResponseType);

/** @internal */
export const DeploymentsDeploymentsResponseType$outboundSchema: z.ZodNativeEnum<
  typeof DeploymentsDeploymentsResponseType
> = DeploymentsDeploymentsResponseType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeploymentsDeploymentsResponseType$ {
  /** @deprecated use `DeploymentsDeploymentsResponseType$inboundSchema` instead. */
  export const inboundSchema = DeploymentsDeploymentsResponseType$inboundSchema;
  /** @deprecated use `DeploymentsDeploymentsResponseType$outboundSchema` instead. */
  export const outboundSchema =
    DeploymentsDeploymentsResponseType$outboundSchema;
}

/** @internal */
export const DeploymentsParameters$inboundSchema: z.ZodType<
  DeploymentsParameters,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: DeploymentsDeploymentsResponseType$inboundSchema,
  properties: z.record(z.any()),
  required: z.array(z.string()).optional(),
  additionalProperties: z.boolean().optional(),
});

/** @internal */
export type DeploymentsParameters$Outbound = {
  type: string;
  properties: { [k: string]: any };
  required?: Array<string> | undefined;
  additionalProperties?: boolean | undefined;
};

/** @internal */
export const DeploymentsParameters$outboundSchema: z.ZodType<
  DeploymentsParameters$Outbound,
  z.ZodTypeDef,
  DeploymentsParameters
> = z.object({
  type: DeploymentsDeploymentsResponseType$outboundSchema,
  properties: z.record(z.any()),
  required: z.array(z.string()).optional(),
  additionalProperties: z.boolean().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeploymentsParameters$ {
  /** @deprecated use `DeploymentsParameters$inboundSchema` instead. */
  export const inboundSchema = DeploymentsParameters$inboundSchema;
  /** @deprecated use `DeploymentsParameters$outboundSchema` instead. */
  export const outboundSchema = DeploymentsParameters$outboundSchema;
  /** @deprecated use `DeploymentsParameters$Outbound` instead. */
  export type Outbound = DeploymentsParameters$Outbound;
}

export function deploymentsParametersToJSON(
  deploymentsParameters: DeploymentsParameters,
): string {
  return JSON.stringify(
    DeploymentsParameters$outboundSchema.parse(deploymentsParameters),
  );
}

export function deploymentsParametersFromJSON(
  jsonString: string,
): SafeParseResult<DeploymentsParameters, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DeploymentsParameters$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DeploymentsParameters' from JSON`,
  );
}

/** @internal */
export const DeploymentsFunction$inboundSchema: z.ZodType<
  DeploymentsFunction,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.string(),
  description: z.string().optional(),
  strict: z.boolean().optional(),
  parameters: z.lazy(() => DeploymentsParameters$inboundSchema),
});

/** @internal */
export type DeploymentsFunction$Outbound = {
  name: string;
  description?: string | undefined;
  strict?: boolean | undefined;
  parameters: DeploymentsParameters$Outbound;
};

/** @internal */
export const DeploymentsFunction$outboundSchema: z.ZodType<
  DeploymentsFunction$Outbound,
  z.ZodTypeDef,
  DeploymentsFunction
> = z.object({
  name: z.string(),
  description: z.string().optional(),
  strict: z.boolean().optional(),
  parameters: z.lazy(() => DeploymentsParameters$outboundSchema),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeploymentsFunction$ {
  /** @deprecated use `DeploymentsFunction$inboundSchema` instead. */
  export const inboundSchema = DeploymentsFunction$inboundSchema;
  /** @deprecated use `DeploymentsFunction$outboundSchema` instead. */
  export const outboundSchema = DeploymentsFunction$outboundSchema;
  /** @deprecated use `DeploymentsFunction$Outbound` instead. */
  export type Outbound = DeploymentsFunction$Outbound;
}

export function deploymentsFunctionToJSON(
  deploymentsFunction: DeploymentsFunction,
): string {
  return JSON.stringify(
    DeploymentsFunction$outboundSchema.parse(deploymentsFunction),
  );
}

export function deploymentsFunctionFromJSON(
  jsonString: string,
): SafeParseResult<DeploymentsFunction, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DeploymentsFunction$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DeploymentsFunction' from JSON`,
  );
}

/** @internal */
export const DeploymentsTools$inboundSchema: z.ZodType<
  DeploymentsTools,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: DeploymentsType$inboundSchema,
  function: z.lazy(() => DeploymentsFunction$inboundSchema),
  id: z.number().optional(),
});

/** @internal */
export type DeploymentsTools$Outbound = {
  type: string;
  function: DeploymentsFunction$Outbound;
  id?: number | undefined;
};

/** @internal */
export const DeploymentsTools$outboundSchema: z.ZodType<
  DeploymentsTools$Outbound,
  z.ZodTypeDef,
  DeploymentsTools
> = z.object({
  type: DeploymentsType$outboundSchema,
  function: z.lazy(() => DeploymentsFunction$outboundSchema),
  id: z.number().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeploymentsTools$ {
  /** @deprecated use `DeploymentsTools$inboundSchema` instead. */
  export const inboundSchema = DeploymentsTools$inboundSchema;
  /** @deprecated use `DeploymentsTools$outboundSchema` instead. */
  export const outboundSchema = DeploymentsTools$outboundSchema;
  /** @deprecated use `DeploymentsTools$Outbound` instead. */
  export type Outbound = DeploymentsTools$Outbound;
}

export function deploymentsToolsToJSON(
  deploymentsTools: DeploymentsTools,
): string {
  return JSON.stringify(
    DeploymentsTools$outboundSchema.parse(deploymentsTools),
  );
}

export function deploymentsToolsFromJSON(
  jsonString: string,
): SafeParseResult<DeploymentsTools, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DeploymentsTools$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DeploymentsTools' from JSON`,
  );
}

/** @internal */
export const DeploymentsModelType$inboundSchema: z.ZodNativeEnum<
  typeof DeploymentsModelType
> = z.nativeEnum(DeploymentsModelType);

/** @internal */
export const DeploymentsModelType$outboundSchema: z.ZodNativeEnum<
  typeof DeploymentsModelType
> = DeploymentsModelType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeploymentsModelType$ {
  /** @deprecated use `DeploymentsModelType$inboundSchema` instead. */
  export const inboundSchema = DeploymentsModelType$inboundSchema;
  /** @deprecated use `DeploymentsModelType$outboundSchema` instead. */
  export const outboundSchema = DeploymentsModelType$outboundSchema;
}

/** @internal */
export const DeploymentsFormat$inboundSchema: z.ZodNativeEnum<
  typeof DeploymentsFormat
> = z.nativeEnum(DeploymentsFormat);

/** @internal */
export const DeploymentsFormat$outboundSchema: z.ZodNativeEnum<
  typeof DeploymentsFormat
> = DeploymentsFormat$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeploymentsFormat$ {
  /** @deprecated use `DeploymentsFormat$inboundSchema` instead. */
  export const inboundSchema = DeploymentsFormat$inboundSchema;
  /** @deprecated use `DeploymentsFormat$outboundSchema` instead. */
  export const outboundSchema = DeploymentsFormat$outboundSchema;
}

/** @internal */
export const DeploymentsQuality$inboundSchema: z.ZodNativeEnum<
  typeof DeploymentsQuality
> = z.nativeEnum(DeploymentsQuality);

/** @internal */
export const DeploymentsQuality$outboundSchema: z.ZodNativeEnum<
  typeof DeploymentsQuality
> = DeploymentsQuality$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeploymentsQuality$ {
  /** @deprecated use `DeploymentsQuality$inboundSchema` instead. */
  export const inboundSchema = DeploymentsQuality$inboundSchema;
  /** @deprecated use `DeploymentsQuality$outboundSchema` instead. */
  export const outboundSchema = DeploymentsQuality$outboundSchema;
}

/** @internal */
export const DeploymentsResponseFormatType$inboundSchema: z.ZodNativeEnum<
  typeof DeploymentsResponseFormatType
> = z.nativeEnum(DeploymentsResponseFormatType);

/** @internal */
export const DeploymentsResponseFormatType$outboundSchema: z.ZodNativeEnum<
  typeof DeploymentsResponseFormatType
> = DeploymentsResponseFormatType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeploymentsResponseFormatType$ {
  /** @deprecated use `DeploymentsResponseFormatType$inboundSchema` instead. */
  export const inboundSchema = DeploymentsResponseFormatType$inboundSchema;
  /** @deprecated use `DeploymentsResponseFormatType$outboundSchema` instead. */
  export const outboundSchema = DeploymentsResponseFormatType$outboundSchema;
}

/** @internal */
export const DeploymentsResponseFormat2$inboundSchema: z.ZodType<
  DeploymentsResponseFormat2,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: DeploymentsResponseFormatType$inboundSchema,
});

/** @internal */
export type DeploymentsResponseFormat2$Outbound = {
  type: string;
};

/** @internal */
export const DeploymentsResponseFormat2$outboundSchema: z.ZodType<
  DeploymentsResponseFormat2$Outbound,
  z.ZodTypeDef,
  DeploymentsResponseFormat2
> = z.object({
  type: DeploymentsResponseFormatType$outboundSchema,
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeploymentsResponseFormat2$ {
  /** @deprecated use `DeploymentsResponseFormat2$inboundSchema` instead. */
  export const inboundSchema = DeploymentsResponseFormat2$inboundSchema;
  /** @deprecated use `DeploymentsResponseFormat2$outboundSchema` instead. */
  export const outboundSchema = DeploymentsResponseFormat2$outboundSchema;
  /** @deprecated use `DeploymentsResponseFormat2$Outbound` instead. */
  export type Outbound = DeploymentsResponseFormat2$Outbound;
}

export function deploymentsResponseFormat2ToJSON(
  deploymentsResponseFormat2: DeploymentsResponseFormat2,
): string {
  return JSON.stringify(
    DeploymentsResponseFormat2$outboundSchema.parse(deploymentsResponseFormat2),
  );
}

export function deploymentsResponseFormat2FromJSON(
  jsonString: string,
): SafeParseResult<DeploymentsResponseFormat2, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DeploymentsResponseFormat2$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DeploymentsResponseFormat2' from JSON`,
  );
}

/** @internal */
export const DeploymentsResponseFormatDeploymentsType$inboundSchema:
  z.ZodNativeEnum<typeof DeploymentsResponseFormatDeploymentsType> = z
    .nativeEnum(DeploymentsResponseFormatDeploymentsType);

/** @internal */
export const DeploymentsResponseFormatDeploymentsType$outboundSchema:
  z.ZodNativeEnum<typeof DeploymentsResponseFormatDeploymentsType> =
    DeploymentsResponseFormatDeploymentsType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeploymentsResponseFormatDeploymentsType$ {
  /** @deprecated use `DeploymentsResponseFormatDeploymentsType$inboundSchema` instead. */
  export const inboundSchema =
    DeploymentsResponseFormatDeploymentsType$inboundSchema;
  /** @deprecated use `DeploymentsResponseFormatDeploymentsType$outboundSchema` instead. */
  export const outboundSchema =
    DeploymentsResponseFormatDeploymentsType$outboundSchema;
}

/** @internal */
export const DeploymentsResponseFormatJsonSchema$inboundSchema: z.ZodType<
  DeploymentsResponseFormatJsonSchema,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.string(),
  strict: z.boolean(),
  schema: z.record(z.any()),
});

/** @internal */
export type DeploymentsResponseFormatJsonSchema$Outbound = {
  name: string;
  strict: boolean;
  schema: { [k: string]: any };
};

/** @internal */
export const DeploymentsResponseFormatJsonSchema$outboundSchema: z.ZodType<
  DeploymentsResponseFormatJsonSchema$Outbound,
  z.ZodTypeDef,
  DeploymentsResponseFormatJsonSchema
> = z.object({
  name: z.string(),
  strict: z.boolean(),
  schema: z.record(z.any()),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeploymentsResponseFormatJsonSchema$ {
  /** @deprecated use `DeploymentsResponseFormatJsonSchema$inboundSchema` instead. */
  export const inboundSchema =
    DeploymentsResponseFormatJsonSchema$inboundSchema;
  /** @deprecated use `DeploymentsResponseFormatJsonSchema$outboundSchema` instead. */
  export const outboundSchema =
    DeploymentsResponseFormatJsonSchema$outboundSchema;
  /** @deprecated use `DeploymentsResponseFormatJsonSchema$Outbound` instead. */
  export type Outbound = DeploymentsResponseFormatJsonSchema$Outbound;
}

export function deploymentsResponseFormatJsonSchemaToJSON(
  deploymentsResponseFormatJsonSchema: DeploymentsResponseFormatJsonSchema,
): string {
  return JSON.stringify(
    DeploymentsResponseFormatJsonSchema$outboundSchema.parse(
      deploymentsResponseFormatJsonSchema,
    ),
  );
}

export function deploymentsResponseFormatJsonSchemaFromJSON(
  jsonString: string,
): SafeParseResult<DeploymentsResponseFormatJsonSchema, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      DeploymentsResponseFormatJsonSchema$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DeploymentsResponseFormatJsonSchema' from JSON`,
  );
}

/** @internal */
export const DeploymentsResponseFormat1$inboundSchema: z.ZodType<
  DeploymentsResponseFormat1,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: DeploymentsResponseFormatDeploymentsType$inboundSchema,
  json_schema: z.lazy(() => DeploymentsResponseFormatJsonSchema$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "json_schema": "jsonSchema",
  });
});

/** @internal */
export type DeploymentsResponseFormat1$Outbound = {
  type: string;
  json_schema: DeploymentsResponseFormatJsonSchema$Outbound;
};

/** @internal */
export const DeploymentsResponseFormat1$outboundSchema: z.ZodType<
  DeploymentsResponseFormat1$Outbound,
  z.ZodTypeDef,
  DeploymentsResponseFormat1
> = z.object({
  type: DeploymentsResponseFormatDeploymentsType$outboundSchema,
  jsonSchema: z.lazy(() => DeploymentsResponseFormatJsonSchema$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    jsonSchema: "json_schema",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeploymentsResponseFormat1$ {
  /** @deprecated use `DeploymentsResponseFormat1$inboundSchema` instead. */
  export const inboundSchema = DeploymentsResponseFormat1$inboundSchema;
  /** @deprecated use `DeploymentsResponseFormat1$outboundSchema` instead. */
  export const outboundSchema = DeploymentsResponseFormat1$outboundSchema;
  /** @deprecated use `DeploymentsResponseFormat1$Outbound` instead. */
  export type Outbound = DeploymentsResponseFormat1$Outbound;
}

export function deploymentsResponseFormat1ToJSON(
  deploymentsResponseFormat1: DeploymentsResponseFormat1,
): string {
  return JSON.stringify(
    DeploymentsResponseFormat1$outboundSchema.parse(deploymentsResponseFormat1),
  );
}

export function deploymentsResponseFormat1FromJSON(
  jsonString: string,
): SafeParseResult<DeploymentsResponseFormat1, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DeploymentsResponseFormat1$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DeploymentsResponseFormat1' from JSON`,
  );
}

/** @internal */
export const DeploymentsResponseFormat$inboundSchema: z.ZodType<
  DeploymentsResponseFormat,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => DeploymentsResponseFormat2$inboundSchema),
  z.lazy(() => DeploymentsResponseFormat1$inboundSchema),
]);

/** @internal */
export type DeploymentsResponseFormat$Outbound =
  | DeploymentsResponseFormat2$Outbound
  | DeploymentsResponseFormat1$Outbound;

/** @internal */
export const DeploymentsResponseFormat$outboundSchema: z.ZodType<
  DeploymentsResponseFormat$Outbound,
  z.ZodTypeDef,
  DeploymentsResponseFormat
> = z.union([
  z.lazy(() => DeploymentsResponseFormat2$outboundSchema),
  z.lazy(() => DeploymentsResponseFormat1$outboundSchema),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeploymentsResponseFormat$ {
  /** @deprecated use `DeploymentsResponseFormat$inboundSchema` instead. */
  export const inboundSchema = DeploymentsResponseFormat$inboundSchema;
  /** @deprecated use `DeploymentsResponseFormat$outboundSchema` instead. */
  export const outboundSchema = DeploymentsResponseFormat$outboundSchema;
  /** @deprecated use `DeploymentsResponseFormat$Outbound` instead. */
  export type Outbound = DeploymentsResponseFormat$Outbound;
}

export function deploymentsResponseFormatToJSON(
  deploymentsResponseFormat: DeploymentsResponseFormat,
): string {
  return JSON.stringify(
    DeploymentsResponseFormat$outboundSchema.parse(deploymentsResponseFormat),
  );
}

export function deploymentsResponseFormatFromJSON(
  jsonString: string,
): SafeParseResult<DeploymentsResponseFormat, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DeploymentsResponseFormat$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DeploymentsResponseFormat' from JSON`,
  );
}

/** @internal */
export const DeploymentsPhotoRealVersion$inboundSchema: z.ZodNativeEnum<
  typeof DeploymentsPhotoRealVersion
> = z.nativeEnum(DeploymentsPhotoRealVersion);

/** @internal */
export const DeploymentsPhotoRealVersion$outboundSchema: z.ZodNativeEnum<
  typeof DeploymentsPhotoRealVersion
> = DeploymentsPhotoRealVersion$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeploymentsPhotoRealVersion$ {
  /** @deprecated use `DeploymentsPhotoRealVersion$inboundSchema` instead. */
  export const inboundSchema = DeploymentsPhotoRealVersion$inboundSchema;
  /** @deprecated use `DeploymentsPhotoRealVersion$outboundSchema` instead. */
  export const outboundSchema = DeploymentsPhotoRealVersion$outboundSchema;
}

/** @internal */
export const DeploymentsEncodingFormat$inboundSchema: z.ZodNativeEnum<
  typeof DeploymentsEncodingFormat
> = z.nativeEnum(DeploymentsEncodingFormat);

/** @internal */
export const DeploymentsEncodingFormat$outboundSchema: z.ZodNativeEnum<
  typeof DeploymentsEncodingFormat
> = DeploymentsEncodingFormat$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeploymentsEncodingFormat$ {
  /** @deprecated use `DeploymentsEncodingFormat$inboundSchema` instead. */
  export const inboundSchema = DeploymentsEncodingFormat$inboundSchema;
  /** @deprecated use `DeploymentsEncodingFormat$outboundSchema` instead. */
  export const outboundSchema = DeploymentsEncodingFormat$outboundSchema;
}

/** @internal */
export const DeploymentsModelParameters$inboundSchema: z.ZodType<
  DeploymentsModelParameters,
  z.ZodTypeDef,
  unknown
> = z.object({
  temperature: z.number().optional(),
  maxTokens: z.number().optional(),
  topK: z.number().optional(),
  topP: z.number().optional(),
  frequencyPenalty: z.number().optional(),
  presencePenalty: z.number().optional(),
  numImages: z.number().optional(),
  seed: z.number().optional(),
  format: DeploymentsFormat$inboundSchema.optional(),
  dimensions: z.string().optional(),
  quality: DeploymentsQuality$inboundSchema.optional(),
  style: z.string().optional(),
  responseFormat: z.nullable(
    z.union([
      z.lazy(() => DeploymentsResponseFormat2$inboundSchema),
      z.lazy(() => DeploymentsResponseFormat1$inboundSchema),
    ]),
  ).optional(),
  photoRealVersion: DeploymentsPhotoRealVersion$inboundSchema.optional(),
  encoding_format: DeploymentsEncodingFormat$inboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    "encoding_format": "encodingFormat",
  });
});

/** @internal */
export type DeploymentsModelParameters$Outbound = {
  temperature?: number | undefined;
  maxTokens?: number | undefined;
  topK?: number | undefined;
  topP?: number | undefined;
  frequencyPenalty?: number | undefined;
  presencePenalty?: number | undefined;
  numImages?: number | undefined;
  seed?: number | undefined;
  format?: string | undefined;
  dimensions?: string | undefined;
  quality?: string | undefined;
  style?: string | undefined;
  responseFormat?:
    | DeploymentsResponseFormat2$Outbound
    | DeploymentsResponseFormat1$Outbound
    | null
    | undefined;
  photoRealVersion?: string | undefined;
  encoding_format?: string | undefined;
};

/** @internal */
export const DeploymentsModelParameters$outboundSchema: z.ZodType<
  DeploymentsModelParameters$Outbound,
  z.ZodTypeDef,
  DeploymentsModelParameters
> = z.object({
  temperature: z.number().optional(),
  maxTokens: z.number().optional(),
  topK: z.number().optional(),
  topP: z.number().optional(),
  frequencyPenalty: z.number().optional(),
  presencePenalty: z.number().optional(),
  numImages: z.number().optional(),
  seed: z.number().optional(),
  format: DeploymentsFormat$outboundSchema.optional(),
  dimensions: z.string().optional(),
  quality: DeploymentsQuality$outboundSchema.optional(),
  style: z.string().optional(),
  responseFormat: z.nullable(
    z.union([
      z.lazy(() => DeploymentsResponseFormat2$outboundSchema),
      z.lazy(() => DeploymentsResponseFormat1$outboundSchema),
    ]),
  ).optional(),
  photoRealVersion: DeploymentsPhotoRealVersion$outboundSchema.optional(),
  encodingFormat: DeploymentsEncodingFormat$outboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    encodingFormat: "encoding_format",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeploymentsModelParameters$ {
  /** @deprecated use `DeploymentsModelParameters$inboundSchema` instead. */
  export const inboundSchema = DeploymentsModelParameters$inboundSchema;
  /** @deprecated use `DeploymentsModelParameters$outboundSchema` instead. */
  export const outboundSchema = DeploymentsModelParameters$outboundSchema;
  /** @deprecated use `DeploymentsModelParameters$Outbound` instead. */
  export type Outbound = DeploymentsModelParameters$Outbound;
}

export function deploymentsModelParametersToJSON(
  deploymentsModelParameters: DeploymentsModelParameters,
): string {
  return JSON.stringify(
    DeploymentsModelParameters$outboundSchema.parse(deploymentsModelParameters),
  );
}

export function deploymentsModelParametersFromJSON(
  jsonString: string,
): SafeParseResult<DeploymentsModelParameters, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DeploymentsModelParameters$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DeploymentsModelParameters' from JSON`,
  );
}

/** @internal */
export const DeploymentsProvider$inboundSchema: z.ZodNativeEnum<
  typeof DeploymentsProvider
> = z.nativeEnum(DeploymentsProvider);

/** @internal */
export const DeploymentsProvider$outboundSchema: z.ZodNativeEnum<
  typeof DeploymentsProvider
> = DeploymentsProvider$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeploymentsProvider$ {
  /** @deprecated use `DeploymentsProvider$inboundSchema` instead. */
  export const inboundSchema = DeploymentsProvider$inboundSchema;
  /** @deprecated use `DeploymentsProvider$outboundSchema` instead. */
  export const outboundSchema = DeploymentsProvider$outboundSchema;
}

/** @internal */
export const DeploymentsRole$inboundSchema: z.ZodNativeEnum<
  typeof DeploymentsRole
> = z.nativeEnum(DeploymentsRole);

/** @internal */
export const DeploymentsRole$outboundSchema: z.ZodNativeEnum<
  typeof DeploymentsRole
> = DeploymentsRole$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeploymentsRole$ {
  /** @deprecated use `DeploymentsRole$inboundSchema` instead. */
  export const inboundSchema = DeploymentsRole$inboundSchema;
  /** @deprecated use `DeploymentsRole$outboundSchema` instead. */
  export const outboundSchema = DeploymentsRole$outboundSchema;
}

/** @internal */
export const Deployments2Type$inboundSchema: z.ZodNativeEnum<
  typeof Deployments2Type
> = z.nativeEnum(Deployments2Type);

/** @internal */
export const Deployments2Type$outboundSchema: z.ZodNativeEnum<
  typeof Deployments2Type
> = Deployments2Type$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Deployments2Type$ {
  /** @deprecated use `Deployments2Type$inboundSchema` instead. */
  export const inboundSchema = Deployments2Type$inboundSchema;
  /** @deprecated use `Deployments2Type$outboundSchema` instead. */
  export const outboundSchema = Deployments2Type$outboundSchema;
}

/** @internal */
export const Deployments2ImageUrl$inboundSchema: z.ZodType<
  Deployments2ImageUrl,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string().optional(),
  url: z.string(),
  detail: z.string().optional(),
});

/** @internal */
export type Deployments2ImageUrl$Outbound = {
  id?: string | undefined;
  url: string;
  detail?: string | undefined;
};

/** @internal */
export const Deployments2ImageUrl$outboundSchema: z.ZodType<
  Deployments2ImageUrl$Outbound,
  z.ZodTypeDef,
  Deployments2ImageUrl
> = z.object({
  id: z.string().optional(),
  url: z.string(),
  detail: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Deployments2ImageUrl$ {
  /** @deprecated use `Deployments2ImageUrl$inboundSchema` instead. */
  export const inboundSchema = Deployments2ImageUrl$inboundSchema;
  /** @deprecated use `Deployments2ImageUrl$outboundSchema` instead. */
  export const outboundSchema = Deployments2ImageUrl$outboundSchema;
  /** @deprecated use `Deployments2ImageUrl$Outbound` instead. */
  export type Outbound = Deployments2ImageUrl$Outbound;
}

export function deployments2ImageUrlToJSON(
  deployments2ImageUrl: Deployments2ImageUrl,
): string {
  return JSON.stringify(
    Deployments2ImageUrl$outboundSchema.parse(deployments2ImageUrl),
  );
}

export function deployments2ImageUrlFromJSON(
  jsonString: string,
): SafeParseResult<Deployments2ImageUrl, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Deployments2ImageUrl$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Deployments2ImageUrl' from JSON`,
  );
}

/** @internal */
export const Deployments22$inboundSchema: z.ZodType<
  Deployments22,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: Deployments2Type$inboundSchema,
  image_url: z.lazy(() => Deployments2ImageUrl$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "image_url": "imageUrl",
  });
});

/** @internal */
export type Deployments22$Outbound = {
  type: string;
  image_url: Deployments2ImageUrl$Outbound;
};

/** @internal */
export const Deployments22$outboundSchema: z.ZodType<
  Deployments22$Outbound,
  z.ZodTypeDef,
  Deployments22
> = z.object({
  type: Deployments2Type$outboundSchema,
  imageUrl: z.lazy(() => Deployments2ImageUrl$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    imageUrl: "image_url",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Deployments22$ {
  /** @deprecated use `Deployments22$inboundSchema` instead. */
  export const inboundSchema = Deployments22$inboundSchema;
  /** @deprecated use `Deployments22$outboundSchema` instead. */
  export const outboundSchema = Deployments22$outboundSchema;
  /** @deprecated use `Deployments22$Outbound` instead. */
  export type Outbound = Deployments22$Outbound;
}

export function deployments22ToJSON(deployments22: Deployments22): string {
  return JSON.stringify(Deployments22$outboundSchema.parse(deployments22));
}

export function deployments22FromJSON(
  jsonString: string,
): SafeParseResult<Deployments22, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Deployments22$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Deployments22' from JSON`,
  );
}

/** @internal */
export const Deployments2DeploymentsType$inboundSchema: z.ZodNativeEnum<
  typeof Deployments2DeploymentsType
> = z.nativeEnum(Deployments2DeploymentsType);

/** @internal */
export const Deployments2DeploymentsType$outboundSchema: z.ZodNativeEnum<
  typeof Deployments2DeploymentsType
> = Deployments2DeploymentsType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Deployments2DeploymentsType$ {
  /** @deprecated use `Deployments2DeploymentsType$inboundSchema` instead. */
  export const inboundSchema = Deployments2DeploymentsType$inboundSchema;
  /** @deprecated use `Deployments2DeploymentsType$outboundSchema` instead. */
  export const outboundSchema = Deployments2DeploymentsType$outboundSchema;
}

/** @internal */
export const Deployments21$inboundSchema: z.ZodType<
  Deployments21,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: Deployments2DeploymentsType$inboundSchema,
  text: z.string(),
});

/** @internal */
export type Deployments21$Outbound = {
  type: string;
  text: string;
};

/** @internal */
export const Deployments21$outboundSchema: z.ZodType<
  Deployments21$Outbound,
  z.ZodTypeDef,
  Deployments21
> = z.object({
  type: Deployments2DeploymentsType$outboundSchema,
  text: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Deployments21$ {
  /** @deprecated use `Deployments21$inboundSchema` instead. */
  export const inboundSchema = Deployments21$inboundSchema;
  /** @deprecated use `Deployments21$outboundSchema` instead. */
  export const outboundSchema = Deployments21$outboundSchema;
  /** @deprecated use `Deployments21$Outbound` instead. */
  export type Outbound = Deployments21$Outbound;
}

export function deployments21ToJSON(deployments21: Deployments21): string {
  return JSON.stringify(Deployments21$outboundSchema.parse(deployments21));
}

export function deployments21FromJSON(
  jsonString: string,
): SafeParseResult<Deployments21, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Deployments21$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Deployments21' from JSON`,
  );
}

/** @internal */
export const DeploymentsContent2$inboundSchema: z.ZodType<
  DeploymentsContent2,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => Deployments21$inboundSchema),
  z.lazy(() => Deployments22$inboundSchema),
]);

/** @internal */
export type DeploymentsContent2$Outbound =
  | Deployments21$Outbound
  | Deployments22$Outbound;

/** @internal */
export const DeploymentsContent2$outboundSchema: z.ZodType<
  DeploymentsContent2$Outbound,
  z.ZodTypeDef,
  DeploymentsContent2
> = z.union([
  z.lazy(() => Deployments21$outboundSchema),
  z.lazy(() => Deployments22$outboundSchema),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeploymentsContent2$ {
  /** @deprecated use `DeploymentsContent2$inboundSchema` instead. */
  export const inboundSchema = DeploymentsContent2$inboundSchema;
  /** @deprecated use `DeploymentsContent2$outboundSchema` instead. */
  export const outboundSchema = DeploymentsContent2$outboundSchema;
  /** @deprecated use `DeploymentsContent2$Outbound` instead. */
  export type Outbound = DeploymentsContent2$Outbound;
}

export function deploymentsContent2ToJSON(
  deploymentsContent2: DeploymentsContent2,
): string {
  return JSON.stringify(
    DeploymentsContent2$outboundSchema.parse(deploymentsContent2),
  );
}

export function deploymentsContent2FromJSON(
  jsonString: string,
): SafeParseResult<DeploymentsContent2, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DeploymentsContent2$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DeploymentsContent2' from JSON`,
  );
}

/** @internal */
export const DeploymentsContent$inboundSchema: z.ZodType<
  DeploymentsContent,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.string(),
  z.array(z.union([
    z.lazy(() => Deployments21$inboundSchema),
    z.lazy(() => Deployments22$inboundSchema),
  ])),
]);

/** @internal */
export type DeploymentsContent$Outbound =
  | string
  | Array<Deployments21$Outbound | Deployments22$Outbound>;

/** @internal */
export const DeploymentsContent$outboundSchema: z.ZodType<
  DeploymentsContent$Outbound,
  z.ZodTypeDef,
  DeploymentsContent
> = z.union([
  z.string(),
  z.array(z.union([
    z.lazy(() => Deployments21$outboundSchema),
    z.lazy(() => Deployments22$outboundSchema),
  ])),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeploymentsContent$ {
  /** @deprecated use `DeploymentsContent$inboundSchema` instead. */
  export const inboundSchema = DeploymentsContent$inboundSchema;
  /** @deprecated use `DeploymentsContent$outboundSchema` instead. */
  export const outboundSchema = DeploymentsContent$outboundSchema;
  /** @deprecated use `DeploymentsContent$Outbound` instead. */
  export type Outbound = DeploymentsContent$Outbound;
}

export function deploymentsContentToJSON(
  deploymentsContent: DeploymentsContent,
): string {
  return JSON.stringify(
    DeploymentsContent$outboundSchema.parse(deploymentsContent),
  );
}

export function deploymentsContentFromJSON(
  jsonString: string,
): SafeParseResult<DeploymentsContent, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DeploymentsContent$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DeploymentsContent' from JSON`,
  );
}

/** @internal */
export const DeploymentsDeploymentsType$inboundSchema: z.ZodNativeEnum<
  typeof DeploymentsDeploymentsType
> = z.nativeEnum(DeploymentsDeploymentsType);

/** @internal */
export const DeploymentsDeploymentsType$outboundSchema: z.ZodNativeEnum<
  typeof DeploymentsDeploymentsType
> = DeploymentsDeploymentsType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeploymentsDeploymentsType$ {
  /** @deprecated use `DeploymentsDeploymentsType$inboundSchema` instead. */
  export const inboundSchema = DeploymentsDeploymentsType$inboundSchema;
  /** @deprecated use `DeploymentsDeploymentsType$outboundSchema` instead. */
  export const outboundSchema = DeploymentsDeploymentsType$outboundSchema;
}

/** @internal */
export const DeploymentsDeploymentsFunction$inboundSchema: z.ZodType<
  DeploymentsDeploymentsFunction,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.string(),
  arguments: z.string(),
});

/** @internal */
export type DeploymentsDeploymentsFunction$Outbound = {
  name: string;
  arguments: string;
};

/** @internal */
export const DeploymentsDeploymentsFunction$outboundSchema: z.ZodType<
  DeploymentsDeploymentsFunction$Outbound,
  z.ZodTypeDef,
  DeploymentsDeploymentsFunction
> = z.object({
  name: z.string(),
  arguments: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeploymentsDeploymentsFunction$ {
  /** @deprecated use `DeploymentsDeploymentsFunction$inboundSchema` instead. */
  export const inboundSchema = DeploymentsDeploymentsFunction$inboundSchema;
  /** @deprecated use `DeploymentsDeploymentsFunction$outboundSchema` instead. */
  export const outboundSchema = DeploymentsDeploymentsFunction$outboundSchema;
  /** @deprecated use `DeploymentsDeploymentsFunction$Outbound` instead. */
  export type Outbound = DeploymentsDeploymentsFunction$Outbound;
}

export function deploymentsDeploymentsFunctionToJSON(
  deploymentsDeploymentsFunction: DeploymentsDeploymentsFunction,
): string {
  return JSON.stringify(
    DeploymentsDeploymentsFunction$outboundSchema.parse(
      deploymentsDeploymentsFunction,
    ),
  );
}

export function deploymentsDeploymentsFunctionFromJSON(
  jsonString: string,
): SafeParseResult<DeploymentsDeploymentsFunction, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DeploymentsDeploymentsFunction$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DeploymentsDeploymentsFunction' from JSON`,
  );
}

/** @internal */
export const DeploymentsToolCalls$inboundSchema: z.ZodType<
  DeploymentsToolCalls,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string().optional(),
  index: z.number().optional(),
  type: DeploymentsDeploymentsType$inboundSchema,
  function: z.lazy(() => DeploymentsDeploymentsFunction$inboundSchema),
});

/** @internal */
export type DeploymentsToolCalls$Outbound = {
  id?: string | undefined;
  index?: number | undefined;
  type: string;
  function: DeploymentsDeploymentsFunction$Outbound;
};

/** @internal */
export const DeploymentsToolCalls$outboundSchema: z.ZodType<
  DeploymentsToolCalls$Outbound,
  z.ZodTypeDef,
  DeploymentsToolCalls
> = z.object({
  id: z.string().optional(),
  index: z.number().optional(),
  type: DeploymentsDeploymentsType$outboundSchema,
  function: z.lazy(() => DeploymentsDeploymentsFunction$outboundSchema),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeploymentsToolCalls$ {
  /** @deprecated use `DeploymentsToolCalls$inboundSchema` instead. */
  export const inboundSchema = DeploymentsToolCalls$inboundSchema;
  /** @deprecated use `DeploymentsToolCalls$outboundSchema` instead. */
  export const outboundSchema = DeploymentsToolCalls$outboundSchema;
  /** @deprecated use `DeploymentsToolCalls$Outbound` instead. */
  export type Outbound = DeploymentsToolCalls$Outbound;
}

export function deploymentsToolCallsToJSON(
  deploymentsToolCalls: DeploymentsToolCalls,
): string {
  return JSON.stringify(
    DeploymentsToolCalls$outboundSchema.parse(deploymentsToolCalls),
  );
}

export function deploymentsToolCallsFromJSON(
  jsonString: string,
): SafeParseResult<DeploymentsToolCalls, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DeploymentsToolCalls$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DeploymentsToolCalls' from JSON`,
  );
}

/** @internal */
export const DeploymentsMessages$inboundSchema: z.ZodType<
  DeploymentsMessages,
  z.ZodTypeDef,
  unknown
> = z.object({
  role: DeploymentsRole$inboundSchema,
  content: z.union([
    z.string(),
    z.array(z.union([
      z.lazy(() => Deployments21$inboundSchema),
      z.lazy(() => Deployments22$inboundSchema),
    ])),
  ]),
  tool_calls: z.array(z.lazy(() => DeploymentsToolCalls$inboundSchema))
    .optional(),
}).transform((v) => {
  return remap$(v, {
    "tool_calls": "toolCalls",
  });
});

/** @internal */
export type DeploymentsMessages$Outbound = {
  role: string;
  content: string | Array<Deployments21$Outbound | Deployments22$Outbound>;
  tool_calls?: Array<DeploymentsToolCalls$Outbound> | undefined;
};

/** @internal */
export const DeploymentsMessages$outboundSchema: z.ZodType<
  DeploymentsMessages$Outbound,
  z.ZodTypeDef,
  DeploymentsMessages
> = z.object({
  role: DeploymentsRole$outboundSchema,
  content: z.union([
    z.string(),
    z.array(z.union([
      z.lazy(() => Deployments21$outboundSchema),
      z.lazy(() => Deployments22$outboundSchema),
    ])),
  ]),
  toolCalls: z.array(z.lazy(() => DeploymentsToolCalls$outboundSchema))
    .optional(),
}).transform((v) => {
  return remap$(v, {
    toolCalls: "tool_calls",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeploymentsMessages$ {
  /** @deprecated use `DeploymentsMessages$inboundSchema` instead. */
  export const inboundSchema = DeploymentsMessages$inboundSchema;
  /** @deprecated use `DeploymentsMessages$outboundSchema` instead. */
  export const outboundSchema = DeploymentsMessages$outboundSchema;
  /** @deprecated use `DeploymentsMessages$Outbound` instead. */
  export type Outbound = DeploymentsMessages$Outbound;
}

export function deploymentsMessagesToJSON(
  deploymentsMessages: DeploymentsMessages,
): string {
  return JSON.stringify(
    DeploymentsMessages$outboundSchema.parse(deploymentsMessages),
  );
}

export function deploymentsMessagesFromJSON(
  jsonString: string,
): SafeParseResult<DeploymentsMessages, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DeploymentsMessages$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DeploymentsMessages' from JSON`,
  );
}

/** @internal */
export const DeploymentsPromptConfig$inboundSchema: z.ZodType<
  DeploymentsPromptConfig,
  z.ZodTypeDef,
  unknown
> = z.object({
  tools: z.array(z.lazy(() => DeploymentsTools$inboundSchema)),
  model: z.string(),
  model_type: DeploymentsModelType$inboundSchema,
  model_parameters: z.lazy(() => DeploymentsModelParameters$inboundSchema),
  provider: DeploymentsProvider$inboundSchema,
  messages: z.array(z.lazy(() => DeploymentsMessages$inboundSchema)),
}).transform((v) => {
  return remap$(v, {
    "model_type": "modelType",
    "model_parameters": "modelParameters",
  });
});

/** @internal */
export type DeploymentsPromptConfig$Outbound = {
  tools: Array<DeploymentsTools$Outbound>;
  model: string;
  model_type: string;
  model_parameters: DeploymentsModelParameters$Outbound;
  provider: string;
  messages: Array<DeploymentsMessages$Outbound>;
};

/** @internal */
export const DeploymentsPromptConfig$outboundSchema: z.ZodType<
  DeploymentsPromptConfig$Outbound,
  z.ZodTypeDef,
  DeploymentsPromptConfig
> = z.object({
  tools: z.array(z.lazy(() => DeploymentsTools$outboundSchema)),
  model: z.string(),
  modelType: DeploymentsModelType$outboundSchema,
  modelParameters: z.lazy(() => DeploymentsModelParameters$outboundSchema),
  provider: DeploymentsProvider$outboundSchema,
  messages: z.array(z.lazy(() => DeploymentsMessages$outboundSchema)),
}).transform((v) => {
  return remap$(v, {
    modelType: "model_type",
    modelParameters: "model_parameters",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeploymentsPromptConfig$ {
  /** @deprecated use `DeploymentsPromptConfig$inboundSchema` instead. */
  export const inboundSchema = DeploymentsPromptConfig$inboundSchema;
  /** @deprecated use `DeploymentsPromptConfig$outboundSchema` instead. */
  export const outboundSchema = DeploymentsPromptConfig$outboundSchema;
  /** @deprecated use `DeploymentsPromptConfig$Outbound` instead. */
  export type Outbound = DeploymentsPromptConfig$Outbound;
}

export function deploymentsPromptConfigToJSON(
  deploymentsPromptConfig: DeploymentsPromptConfig,
): string {
  return JSON.stringify(
    DeploymentsPromptConfig$outboundSchema.parse(deploymentsPromptConfig),
  );
}

export function deploymentsPromptConfigFromJSON(
  jsonString: string,
): SafeParseResult<DeploymentsPromptConfig, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DeploymentsPromptConfig$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DeploymentsPromptConfig' from JSON`,
  );
}

/** @internal */
export const Data$inboundSchema: z.ZodType<Data, z.ZodTypeDef, unknown> = z
  .object({
    id: z.string(),
    created: z.string(),
    updated: z.string(),
    key: z.string(),
    description: z.string(),
    prompt_config: z.lazy(() => DeploymentsPromptConfig$inboundSchema),
    version: z.string(),
  }).transform((v) => {
    return remap$(v, {
      "prompt_config": "promptConfig",
    });
  });

/** @internal */
export type Data$Outbound = {
  id: string;
  created: string;
  updated: string;
  key: string;
  description: string;
  prompt_config: DeploymentsPromptConfig$Outbound;
  version: string;
};

/** @internal */
export const Data$outboundSchema: z.ZodType<Data$Outbound, z.ZodTypeDef, Data> =
  z.object({
    id: z.string(),
    created: z.string(),
    updated: z.string(),
    key: z.string(),
    description: z.string(),
    promptConfig: z.lazy(() => DeploymentsPromptConfig$outboundSchema),
    version: z.string(),
  }).transform((v) => {
    return remap$(v, {
      promptConfig: "prompt_config",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Data$ {
  /** @deprecated use `Data$inboundSchema` instead. */
  export const inboundSchema = Data$inboundSchema;
  /** @deprecated use `Data$outboundSchema` instead. */
  export const outboundSchema = Data$outboundSchema;
  /** @deprecated use `Data$Outbound` instead. */
  export type Outbound = Data$Outbound;
}

export function dataToJSON(data: Data): string {
  return JSON.stringify(Data$outboundSchema.parse(data));
}

export function dataFromJSON(
  jsonString: string,
): SafeParseResult<Data, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Data$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Data' from JSON`,
  );
}

/** @internal */
export const DeploymentsResponseBody$inboundSchema: z.ZodType<
  DeploymentsResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  object: ObjectT$inboundSchema,
  data: z.array(z.lazy(() => Data$inboundSchema)),
  has_more: z.boolean(),
}).transform((v) => {
  return remap$(v, {
    "has_more": "hasMore",
  });
});

/** @internal */
export type DeploymentsResponseBody$Outbound = {
  object: string;
  data: Array<Data$Outbound>;
  has_more: boolean;
};

/** @internal */
export const DeploymentsResponseBody$outboundSchema: z.ZodType<
  DeploymentsResponseBody$Outbound,
  z.ZodTypeDef,
  DeploymentsResponseBody
> = z.object({
  object: ObjectT$outboundSchema,
  data: z.array(z.lazy(() => Data$outboundSchema)),
  hasMore: z.boolean(),
}).transform((v) => {
  return remap$(v, {
    hasMore: "has_more",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeploymentsResponseBody$ {
  /** @deprecated use `DeploymentsResponseBody$inboundSchema` instead. */
  export const inboundSchema = DeploymentsResponseBody$inboundSchema;
  /** @deprecated use `DeploymentsResponseBody$outboundSchema` instead. */
  export const outboundSchema = DeploymentsResponseBody$outboundSchema;
  /** @deprecated use `DeploymentsResponseBody$Outbound` instead. */
  export type Outbound = DeploymentsResponseBody$Outbound;
}

export function deploymentsResponseBodyToJSON(
  deploymentsResponseBody: DeploymentsResponseBody,
): string {
  return JSON.stringify(
    DeploymentsResponseBody$outboundSchema.parse(deploymentsResponseBody),
  );
}

export function deploymentsResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<DeploymentsResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DeploymentsResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DeploymentsResponseBody' from JSON`,
  );
}
