/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * Tool message
 */
export const StreamRunAgentRoleToolMessage = {
  Tool: "tool",
} as const;
/**
 * Tool message
 */
export type StreamRunAgentRoleToolMessage = ClosedEnum<
  typeof StreamRunAgentRoleToolMessage
>;

/**
 * User message
 */
export const StreamRunAgentRoleUserMessage = {
  User: "user",
} as const;
/**
 * User message
 */
export type StreamRunAgentRoleUserMessage = ClosedEnum<
  typeof StreamRunAgentRoleUserMessage
>;

/**
 * Message role (user or tool for continuing executions)
 */
export type StreamRunAgentRole =
  | StreamRunAgentRoleUserMessage
  | StreamRunAgentRoleToolMessage;

export const StreamRunAgentPublicMessagePartAgentsRequestKind = {
  ToolResult: "tool_result",
} as const;
export type StreamRunAgentPublicMessagePartAgentsRequestKind = ClosedEnum<
  typeof StreamRunAgentPublicMessagePartAgentsRequestKind
>;

/**
 * Tool execution result part. Use this ONLY when providing results for a pending tool call from the agent. The tool_call_id must match the ID from the agent's tool call request.
 */
export type PublicMessagePartToolResultPart = {
  kind: StreamRunAgentPublicMessagePartAgentsRequestKind;
  toolCallId: string;
  result?: any | undefined;
  metadata?: { [k: string]: any } | undefined;
};

export const StreamRunAgentPublicMessagePartAgentsKind = {
  File: "file",
} as const;
export type StreamRunAgentPublicMessagePartAgentsKind = ClosedEnum<
  typeof StreamRunAgentPublicMessagePartAgentsKind
>;

/**
 * File in URI format. Check in the model's documentation for the supported mime types for the URI format
 */
export type FileFileInURIFormat = {
  /**
   * URL for the File content
   */
  uri: string;
  /**
   * Optional mimeType for the file
   */
  mimeType?: string | undefined;
  /**
   * Optional name for the file
   */
  name?: string | undefined;
};

/**
 * Binary in base64 format. Check in the model's documentation for the supported mime types for the binary format.
 */
export type FileBinaryFormat = {
  /**
   * base64 encoded content of the file
   */
  bytes: string;
  /**
   * Optional mimeType for the file
   */
  mimeType?: string | undefined;
  /**
   * Optional name for the file
   */
  name?: string | undefined;
};

export type StreamRunAgentPublicMessagePartFile =
  | FileBinaryFormat
  | FileFileInURIFormat;

/**
 * File attachment part. Use this to send files (images, documents, etc.) to the agent for processing.
 */
export type PublicMessagePartFilePart = {
  kind: StreamRunAgentPublicMessagePartAgentsKind;
  file: FileBinaryFormat | FileFileInURIFormat;
  metadata?: { [k: string]: any } | undefined;
};

export const StreamRunAgentPublicMessagePartKind = {
  Text: "text",
} as const;
export type StreamRunAgentPublicMessagePartKind = ClosedEnum<
  typeof StreamRunAgentPublicMessagePartKind
>;

/**
 * Text content part. Use this to send text messages to the agent.
 */
export type PublicMessagePartTextPart = {
  kind: StreamRunAgentPublicMessagePartKind;
  text: string;
};

/**
 * Message part that can be provided by users. Use "text" for regular messages, "file" for attachments, or "tool_result" when responding to tool call requests.
 */
export type StreamRunAgentPublicMessagePart =
  | PublicMessagePartTextPart
  | PublicMessagePartFilePart
  | PublicMessagePartToolResultPart;

/**
 * The A2A format message containing the task for the agent to perform.
 */
export type StreamRunAgentMessage = {
  /**
   * Optional A2A message ID in ULID format
   */
  messageId?: string | undefined;
  /**
   * Message role (user or tool for continuing executions)
   */
  role: StreamRunAgentRoleUserMessage | StreamRunAgentRoleToolMessage;
  /**
   * A2A message parts (text, file, or tool_result only)
   */
  parts: Array<
    | PublicMessagePartTextPart
    | PublicMessagePartFilePart
    | PublicMessagePartToolResultPart
  >;
};

/**
 * Information about the contact making the request. If the contact does not exist, it will be created automatically.
 */
export type StreamRunAgentContact = {
  /**
   * Unique identifier for the contact
   */
  id: string;
  /**
   * Display name of the contact
   */
  displayName?: string | undefined;
  /**
   * Email address of the contact
   */
  email?: string | undefined;
  /**
   * A hash of key/value pairs containing any other data about the contact
   */
  metadata?: Array<{ [k: string]: any }> | undefined;
  /**
   * URL to the contact's avatar or logo
   */
  logoUrl?: string | undefined;
  /**
   * A list of tags associated with the contact
   */
  tags?: Array<string> | undefined;
};

/**
 * Thread information to group related requests
 */
export type StreamRunAgentThread = {
  /**
   * Unique thread identifier to group related invocations.
   */
  id: string;
  /**
   * Optional tags to differentiate or categorize threads
   */
  tags?: Array<string> | undefined;
};

/**
 * Memory configuration for the agent execution. Used to associate memory stores with specific entities like users or sessions.
 */
export type StreamRunAgentMemory = {
  /**
   * An entity ID used to link memory stores to a specific user, session, or conversation. This ID is used to isolate and retrieve memories specific to the entity across agent executions.
   */
  entityId: string;
};

export const StreamRunAgentKnowledgeBaseConfigurationAgentsType = {
  Query: "query",
} as const;
export type StreamRunAgentKnowledgeBaseConfigurationAgentsType = ClosedEnum<
  typeof StreamRunAgentKnowledgeBaseConfigurationAgentsType
>;

/**
 * Defines the configuration settings for a static query.
 */
export type KnowledgeBaseConfigurationKnowledgeBaseStaticQuery = {
  type: StreamRunAgentKnowledgeBaseConfigurationAgentsType;
  query: string;
};

export const StreamRunAgentKnowledgeBaseConfigurationType = {
  LastUserMessage: "last_user_message",
} as const;
export type StreamRunAgentKnowledgeBaseConfigurationType = ClosedEnum<
  typeof StreamRunAgentKnowledgeBaseConfigurationType
>;

/**
 * Defines the configuration settings for a last user message type retrieval.
 */
export type KnowledgeBaseConfigurationKnowledgeBaseLastUserMessage = {
  type: StreamRunAgentKnowledgeBaseConfigurationType;
};

/**
 * Defines the configuration settings which can either be for a user message or a text entry.
 */
export type StreamRunAgentKnowledgeBaseConfiguration =
  | KnowledgeBaseConfigurationKnowledgeBaseStaticQuery
  | KnowledgeBaseConfigurationKnowledgeBaseLastUserMessage;

export type StreamRunAgentKnowledgeBases = {
  /**
   * Defines the configuration settings which can either be for a user message or a text entry.
   */
  configuration:
    | KnowledgeBaseConfigurationKnowledgeBaseStaticQuery
    | KnowledgeBaseConfigurationKnowledgeBaseLastUserMessage;
};

export type StreamRunAgentTeamOfAgents = {
  /**
   * The unique key of the agent within the workspace
   */
  key: string;
  /**
   * The role of the agent in this context. This is used to give extra information to the leader to help it decide which agent to hand off to.
   */
  role?: string | undefined;
};

export const StreamRunAgentRunAgentRequestToolAgentsRequestRequestBodySettingsTools14Type =
  {
    Function: "function",
  } as const;
export type StreamRunAgentRunAgentRequestToolAgentsRequestRequestBodySettingsTools14Type =
  ClosedEnum<
    typeof StreamRunAgentRunAgentRequestToolAgentsRequestRequestBodySettingsTools14Type
  >;

export type StreamRunAgentRunAgentRequestToolFunction = {
  name: string;
  description?: string | undefined;
  strict?: boolean | undefined;
  parameters?: { [k: string]: any } | undefined;
};

/**
 * Custom function tool with configurable parameters
 */
export type RunAgentRequestToolFunctionTool = {
  type:
    StreamRunAgentRunAgentRequestToolAgentsRequestRequestBodySettingsTools14Type;
  id?: string | undefined;
  key: string;
  displayName?: string | undefined;
  description?: string | undefined;
  requiresApproval?: boolean | undefined;
  function: StreamRunAgentRunAgentRequestToolFunction;
};

export const StreamRunAgentRunAgentRequestToolAgentsRequestRequestBodySettingsTools13Type =
  {
    Code: "code",
  } as const;
export type StreamRunAgentRunAgentRequestToolAgentsRequestRequestBodySettingsTools13Type =
  ClosedEnum<
    typeof StreamRunAgentRunAgentRequestToolAgentsRequestRequestBodySettingsTools13Type
  >;

export const RunAgentRequestToolLanguage = {
  Python: "python",
} as const;
export type RunAgentRequestToolLanguage = ClosedEnum<
  typeof RunAgentRequestToolLanguage
>;

export type RunAgentRequestToolCodeTool = {
  /**
   * The parameters the functions accepts, described as a JSON Schema object. See the `OpenAI` [guide](https://platform.openai.com/docs/guides/function-calling) for examples, and the [JSON Schema reference](https://json-schema.org/understanding-json-schema/) for documentation about the format.
   */
  parameters?: { [k: string]: any } | undefined;
  language: RunAgentRequestToolLanguage;
  /**
   * The code to execute.
   */
  code: string;
};

/**
 * Executes code in a secure sandbox environment
 */
export type RunAgentRequestToolCodeExecutionTool = {
  /**
   * Unique key of the tool as it will be displayed in the UI
   */
  key: string;
  /**
   * The name of the tool as it will be displayed in the UI. This is optional and if not provided, the `key` will be used.
   */
  displayName: string;
  /**
   * A description of the tool, used by the model to choose when and how to call the tool. We do recommend using the `description` field as accurate as possible to give enough context to the model to make the right decision.
   */
  description: string;
  type:
    StreamRunAgentRunAgentRequestToolAgentsRequestRequestBodySettingsTools13Type;
  codeTool: RunAgentRequestToolCodeTool;
  id?: string | undefined;
  requiresApproval?: boolean | undefined;
};

export const StreamRunAgentRunAgentRequestToolAgentsRequestRequestBodySettingsTools12Type =
  {
    Http: "http",
  } as const;
export type StreamRunAgentRunAgentRequestToolAgentsRequestRequestBodySettingsTools12Type =
  ClosedEnum<
    typeof StreamRunAgentRunAgentRequestToolAgentsRequestRequestBodySettingsTools12Type
  >;

/**
 * The HTTP method to use.
 */
export const RunAgentRequestToolMethod = {
  Get: "GET",
  Post: "POST",
  Put: "PUT",
  Delete: "DELETE",
} as const;
/**
 * The HTTP method to use.
 */
export type RunAgentRequestToolMethod = ClosedEnum<
  typeof RunAgentRequestToolMethod
>;

/**
 * The blueprint for the HTTP request. The `arguments` field will be used to replace the placeholders in the `url`, `headers`, `body`, and `arguments` fields.
 */
export type RunAgentRequestToolBlueprint = {
  /**
   * The URL to send the request to.
   */
  url: string;
  /**
   * The HTTP method to use.
   */
  method: RunAgentRequestToolMethod;
  /**
   * The headers to send with the request.
   */
  headers?: { [k: string]: string } | undefined;
  /**
   * The body to send with the request.
   */
  body?: { [k: string]: any } | undefined;
};

/**
 * The type of the argument.
 */
export const StreamRunAgentRunAgentRequestToolAgentsRequestRequestBodySettingsTools12HttpType =
  {
    String: "string",
    Number: "number",
    Boolean: "boolean",
  } as const;
/**
 * The type of the argument.
 */
export type StreamRunAgentRunAgentRequestToolAgentsRequestRequestBodySettingsTools12HttpType =
  ClosedEnum<
    typeof StreamRunAgentRunAgentRequestToolAgentsRequestRequestBodySettingsTools12HttpType
  >;

/**
 * The default value of the argument.
 */
export type RunAgentRequestToolDefaultValue = string | number | boolean;

export type RunAgentRequestToolArguments = {
  /**
   * The type of the argument.
   */
  type:
    StreamRunAgentRunAgentRequestToolAgentsRequestRequestBodySettingsTools12HttpType;
  /**
   * A description of the argument.
   */
  description: string;
  /**
   * Whether to send the argument to the model. If set to false, the argument will not be sent to the model and needs to be provided by the user or it will be left blank.
   */
  sendToModel?: boolean | undefined;
  /**
   * The default value of the argument.
   */
  defaultValue?: string | number | boolean | undefined;
};

export type RunAgentRequestToolHttp = {
  /**
   * The blueprint for the HTTP request. The `arguments` field will be used to replace the placeholders in the `url`, `headers`, `body`, and `arguments` fields.
   */
  blueprint: RunAgentRequestToolBlueprint;
  /**
   * The arguments to send with the request. The keys will be used to replace the placeholders in the `blueprint` field.
   */
  arguments?: { [k: string]: RunAgentRequestToolArguments } | undefined;
};

/**
 * Makes HTTP requests to external APIs
 */
export type RunAgentRequestToolHTTPTool = {
  id?: string | undefined;
  /**
   * Unique key of the tool as it will be displayed in the UI
   */
  key: string;
  /**
   * The name of the tool as it will be displayed in the UI. This is optional and if not provided, the `key` will be used.
   */
  displayName: string;
  /**
   * A description of the tool, used by the model to choose when and how to call the tool. We do recommend using the `description` field as accurate as possible to give enough context to the model to make the right decision.
   */
  description: string;
  type:
    StreamRunAgentRunAgentRequestToolAgentsRequestRequestBodySettingsTools12Type;
  http: RunAgentRequestToolHttp;
  requiresApproval?: boolean | undefined;
};

export const StreamRunAgentRunAgentRequestToolAgentsRequestRequestBodySettingsTools11Type =
  {
    CurrentDate: "current_date",
  } as const;
export type StreamRunAgentRunAgentRequestToolAgentsRequestRequestBodySettingsTools11Type =
  ClosedEnum<
    typeof StreamRunAgentRunAgentRequestToolAgentsRequestRequestBodySettingsTools11Type
  >;

/**
 * Provides the current date and time
 */
export type RunAgentRequestToolCurrentDateTool = {
  type:
    StreamRunAgentRunAgentRequestToolAgentsRequestRequestBodySettingsTools11Type;
  requiresApproval?: boolean | undefined;
};

export const StreamRunAgentRunAgentRequestToolAgentsRequestRequestBodySettingsTools10Type =
  {
    QueryKnowledgeBase: "query_knowledge_base",
  } as const;
export type StreamRunAgentRunAgentRequestToolAgentsRequestRequestBodySettingsTools10Type =
  ClosedEnum<
    typeof StreamRunAgentRunAgentRequestToolAgentsRequestRequestBodySettingsTools10Type
  >;

/**
 * Queries knowledge bases for information
 */
export type RunAgentRequestToolQueryKnowledgeBaseTool = {
  type:
    StreamRunAgentRunAgentRequestToolAgentsRequestRequestBodySettingsTools10Type;
  requiresApproval?: boolean | undefined;
};

export const StreamRunAgentRunAgentRequestToolAgentsRequestRequestBodySettingsTools9Type =
  {
    RetrieveKnowledgeBases: "retrieve_knowledge_bases",
  } as const;
export type StreamRunAgentRunAgentRequestToolAgentsRequestRequestBodySettingsTools9Type =
  ClosedEnum<
    typeof StreamRunAgentRunAgentRequestToolAgentsRequestRequestBodySettingsTools9Type
  >;

/**
 * Lists available knowledge bases
 */
export type RunAgentRequestToolRetrieveKnowledgeBasesTool = {
  type:
    StreamRunAgentRunAgentRequestToolAgentsRequestRequestBodySettingsTools9Type;
  requiresApproval?: boolean | undefined;
};

export const StreamRunAgentRunAgentRequestToolAgentsRequestRequestBodySettingsTools8Type =
  {
    DeleteMemoryDocument: "delete_memory_document",
  } as const;
export type StreamRunAgentRunAgentRequestToolAgentsRequestRequestBodySettingsTools8Type =
  ClosedEnum<
    typeof StreamRunAgentRunAgentRequestToolAgentsRequestRequestBodySettingsTools8Type
  >;

/**
 * Deletes a memory store
 */
export type RunAgentRequestToolDeleteMemoryStoreTool = {
  type:
    StreamRunAgentRunAgentRequestToolAgentsRequestRequestBodySettingsTools8Type;
  requiresApproval?: boolean | undefined;
};

export const StreamRunAgentRunAgentRequestToolAgentsRequestRequestBodySettingsTools7Type =
  {
    RetrieveMemoryStores: "retrieve_memory_stores",
  } as const;
export type StreamRunAgentRunAgentRequestToolAgentsRequestRequestBodySettingsTools7Type =
  ClosedEnum<
    typeof StreamRunAgentRunAgentRequestToolAgentsRequestRequestBodySettingsTools7Type
  >;

/**
 * Lists available memory stores
 */
export type RunAgentRequestToolRetrieveMemoryStoresTool = {
  type:
    StreamRunAgentRunAgentRequestToolAgentsRequestRequestBodySettingsTools7Type;
  requiresApproval?: boolean | undefined;
};

export const StreamRunAgentRunAgentRequestToolAgentsRequestRequestBodySettingsToolsType =
  {
    WriteMemoryStore: "write_memory_store",
  } as const;
export type StreamRunAgentRunAgentRequestToolAgentsRequestRequestBodySettingsToolsType =
  ClosedEnum<
    typeof StreamRunAgentRunAgentRequestToolAgentsRequestRequestBodySettingsToolsType
  >;

/**
 * Writes information to agent memory stores
 */
export type RunAgentRequestToolWriteMemoryStoreTool = {
  type:
    StreamRunAgentRunAgentRequestToolAgentsRequestRequestBodySettingsToolsType;
  requiresApproval?: boolean | undefined;
};

export const StreamRunAgentRunAgentRequestToolAgentsRequestRequestBodySettingsType =
  {
    QueryMemoryStore: "query_memory_store",
  } as const;
export type StreamRunAgentRunAgentRequestToolAgentsRequestRequestBodySettingsType =
  ClosedEnum<
    typeof StreamRunAgentRunAgentRequestToolAgentsRequestRequestBodySettingsType
  >;

/**
 * Queries agent memory stores for context
 */
export type RunAgentRequestToolQueryMemoryStoreTool = {
  type: StreamRunAgentRunAgentRequestToolAgentsRequestRequestBodySettingsType;
  requiresApproval?: boolean | undefined;
};

export const StreamRunAgentRunAgentRequestToolAgentsRequestRequestBodyType = {
  RetrieveAgents: "retrieve_agents",
} as const;
export type StreamRunAgentRunAgentRequestToolAgentsRequestRequestBodyType =
  ClosedEnum<
    typeof StreamRunAgentRunAgentRequestToolAgentsRequestRequestBodyType
  >;

/**
 * Retrieves available agents in the system
 */
export type RunAgentRequestToolRetrieveAgentsTool = {
  type: StreamRunAgentRunAgentRequestToolAgentsRequestRequestBodyType;
  requiresApproval?: boolean | undefined;
};

export const StreamRunAgentRunAgentRequestToolAgentsRequestType = {
  CallSubAgent: "call_sub_agent",
} as const;
export type StreamRunAgentRunAgentRequestToolAgentsRequestType = ClosedEnum<
  typeof StreamRunAgentRunAgentRequestToolAgentsRequestType
>;

/**
 * Delegates tasks to specialized sub-agents
 */
export type RunAgentRequestToolCallSubAgentTool = {
  type: StreamRunAgentRunAgentRequestToolAgentsRequestType;
  requiresApproval?: boolean | undefined;
};

export const StreamRunAgentRunAgentRequestToolAgentsType = {
  WebScraper: "web_scraper",
} as const;
export type StreamRunAgentRunAgentRequestToolAgentsType = ClosedEnum<
  typeof StreamRunAgentRunAgentRequestToolAgentsType
>;

/**
 * Scrapes and extracts content from web pages
 */
export type RunAgentRequestToolWebScraperTool = {
  type: StreamRunAgentRunAgentRequestToolAgentsType;
  requiresApproval?: boolean | undefined;
};

export const StreamRunAgentRunAgentRequestToolType = {
  GoogleSearch: "google_search",
} as const;
export type StreamRunAgentRunAgentRequestToolType = ClosedEnum<
  typeof StreamRunAgentRunAgentRequestToolType
>;

/**
 * Performs Google searches to retrieve web content
 */
export type RunAgentRequestToolGoogleSearchTool = {
  type: StreamRunAgentRunAgentRequestToolType;
  requiresApproval?: boolean | undefined;
};

/**
 * Available tools for agent execution. Each tool provides specific capabilities to interact with external systems, retrieve information, or perform specialized tasks.
 */
export type StreamRunAgentRunAgentRequestTool =
  | RunAgentRequestToolHTTPTool
  | RunAgentRequestToolCodeExecutionTool
  | RunAgentRequestToolFunctionTool
  | RunAgentRequestToolGoogleSearchTool
  | RunAgentRequestToolWebScraperTool
  | RunAgentRequestToolCallSubAgentTool
  | RunAgentRequestToolRetrieveAgentsTool
  | RunAgentRequestToolQueryMemoryStoreTool
  | RunAgentRequestToolWriteMemoryStoreTool
  | RunAgentRequestToolRetrieveMemoryStoresTool
  | RunAgentRequestToolDeleteMemoryStoreTool
  | RunAgentRequestToolRetrieveKnowledgeBasesTool
  | RunAgentRequestToolQueryKnowledgeBaseTool
  | RunAgentRequestToolCurrentDateTool;

/**
 * If all, the agent will require approval for all tools. If respect_tool, the agent will require approval for tools that have the requires_approval flag set to true. If none, the agent will not require approval for any tools.
 */
export const StreamRunAgentToolApprovalRequired = {
  All: "all",
  RespectTool: "respect_tool",
  None: "none",
} as const;
/**
 * If all, the agent will require approval for all tools. If respect_tool, the agent will require approval for tools that have the requires_approval flag set to true. If none, the agent will not require approval for any tools.
 */
export type StreamRunAgentToolApprovalRequired = ClosedEnum<
  typeof StreamRunAgentToolApprovalRequired
>;

export type StreamRunAgentSettings = {
  /**
   * Tools available to the agent
   */
  tools: Array<
    | RunAgentRequestToolHTTPTool
    | RunAgentRequestToolCodeExecutionTool
    | RunAgentRequestToolFunctionTool
    | RunAgentRequestToolGoogleSearchTool
    | RunAgentRequestToolWebScraperTool
    | RunAgentRequestToolCallSubAgentTool
    | RunAgentRequestToolRetrieveAgentsTool
    | RunAgentRequestToolQueryMemoryStoreTool
    | RunAgentRequestToolWriteMemoryStoreTool
    | RunAgentRequestToolRetrieveMemoryStoresTool
    | RunAgentRequestToolDeleteMemoryStoreTool
    | RunAgentRequestToolRetrieveKnowledgeBasesTool
    | RunAgentRequestToolQueryKnowledgeBaseTool
    | RunAgentRequestToolCurrentDateTool
  >;
  /**
   * If all, the agent will require approval for all tools. If respect_tool, the agent will require approval for tools that have the requires_approval flag set to true. If none, the agent will not require approval for any tools.
   */
  toolApprovalRequired?: StreamRunAgentToolApprovalRequired | undefined;
  /**
   * Maximum iterations(llm calls) before the agent will stop executing.
   */
  maxIterations?: number | undefined;
  /**
   * Maximum time (in seconds) for the agent thinking process. This does not include the time for tool calls and sub agent calls. It will be loosely enforced, the in progress LLM calls will not be terminated and the last assistant message will be returned.
   */
  maxExecutionTime?: number | undefined;
};

export type StreamRunAgentRequestBody = {
  /**
   * A unique identifier for the agent. This key must be unique within the same workspace and cannot be reused. When executing the agent, this key determines if the agent already exists. If the agent version differs, a new version is created at the end of the execution, except for the task. All agent parameters are evaluated to decide if a new version is needed.
   */
  key: string;
  /**
   * Optional task ID to continue an existing agent execution. When provided, the agent will continue the conversation from the existing task state. The task must be in an inactive state to continue.
   */
  taskId?: string | undefined;
  /**
   * The language model that powers the agent. The model must support tool calling capabilities.
   */
  model: string;
  /**
   * Optional array of fallback model IDs to use when the primary model fails. Models are tried in order. All models must support tool calling capabilities.
   */
  fallbackModels?: Array<string> | undefined;
  /**
   * Specifies the agent's function and area of expertise.
   */
  role: string;
  /**
   * Provides context and purpose for the agent. Combined with the system prompt template to generate the agent's instructions.
   */
  instructions: string;
  /**
   * The A2A format message containing the task for the agent to perform.
   */
  message: StreamRunAgentMessage;
  /**
   * Optional variables for template replacement in system prompt, instructions, and messages
   */
  variables?: { [k: string]: any } | undefined;
  /**
   * Information about the contact making the request. If the contact does not exist, it will be created automatically.
   */
  contact?: StreamRunAgentContact | undefined;
  /**
   * Thread information to group related requests
   */
  thread?: StreamRunAgentThread | undefined;
  /**
   * Memory configuration for the agent execution. Used to associate memory stores with specific entities like users or sessions.
   */
  memory?: StreamRunAgentMemory | undefined;
  /**
   * The path where the entity is stored in the project structure. The first element of the path always represents the project name. Any subsequent path element after the project will be created as a folder in the project if it does not exists.
   */
  path: string;
  /**
   * A brief summary of the agent's purpose.
   */
  description?: string | undefined;
  /**
   * A custom system prompt template for the agent. If omitted, the default template is used.
   */
  systemPrompt?: string | undefined;
  /**
   * The list of keys of the memory stores that are accessible to the agent.
   */
  memoryStores?: Array<string> | undefined;
  knowledgeBases?: Array<StreamRunAgentKnowledgeBases> | undefined;
  /**
   * The agents that are accessible to this orchestrator. The main agent can hand off to these agents to perform tasks.
   */
  teamOfAgents?: Array<StreamRunAgentTeamOfAgents> | undefined;
  settings: StreamRunAgentSettings;
  /**
   * Optional metadata for the agent run as key-value pairs that will be included in traces
   */
  metadata?: { [k: string]: any } | undefined;
  /**
   * Stream timeout in seconds (1-3600). Default: 1800 (30 minutes)
   */
  streamTimeoutSeconds?: number | undefined;
};

/**
 * SSE stream of agent events
 */
export type StreamRunAgentResponseBody = {
  /**
   * JSON-encoded event data
   */
  data: string;
};

/** @internal */
export const StreamRunAgentRoleToolMessage$inboundSchema: z.ZodNativeEnum<
  typeof StreamRunAgentRoleToolMessage
> = z.nativeEnum(StreamRunAgentRoleToolMessage);

/** @internal */
export const StreamRunAgentRoleToolMessage$outboundSchema: z.ZodNativeEnum<
  typeof StreamRunAgentRoleToolMessage
> = StreamRunAgentRoleToolMessage$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace StreamRunAgentRoleToolMessage$ {
  /** @deprecated use `StreamRunAgentRoleToolMessage$inboundSchema` instead. */
  export const inboundSchema = StreamRunAgentRoleToolMessage$inboundSchema;
  /** @deprecated use `StreamRunAgentRoleToolMessage$outboundSchema` instead. */
  export const outboundSchema = StreamRunAgentRoleToolMessage$outboundSchema;
}

/** @internal */
export const StreamRunAgentRoleUserMessage$inboundSchema: z.ZodNativeEnum<
  typeof StreamRunAgentRoleUserMessage
> = z.nativeEnum(StreamRunAgentRoleUserMessage);

/** @internal */
export const StreamRunAgentRoleUserMessage$outboundSchema: z.ZodNativeEnum<
  typeof StreamRunAgentRoleUserMessage
> = StreamRunAgentRoleUserMessage$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace StreamRunAgentRoleUserMessage$ {
  /** @deprecated use `StreamRunAgentRoleUserMessage$inboundSchema` instead. */
  export const inboundSchema = StreamRunAgentRoleUserMessage$inboundSchema;
  /** @deprecated use `StreamRunAgentRoleUserMessage$outboundSchema` instead. */
  export const outboundSchema = StreamRunAgentRoleUserMessage$outboundSchema;
}

/** @internal */
export const StreamRunAgentRole$inboundSchema: z.ZodType<
  StreamRunAgentRole,
  z.ZodTypeDef,
  unknown
> = z.union([
  StreamRunAgentRoleUserMessage$inboundSchema,
  StreamRunAgentRoleToolMessage$inboundSchema,
]);

/** @internal */
export type StreamRunAgentRole$Outbound = string | string;

/** @internal */
export const StreamRunAgentRole$outboundSchema: z.ZodType<
  StreamRunAgentRole$Outbound,
  z.ZodTypeDef,
  StreamRunAgentRole
> = z.union([
  StreamRunAgentRoleUserMessage$outboundSchema,
  StreamRunAgentRoleToolMessage$outboundSchema,
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace StreamRunAgentRole$ {
  /** @deprecated use `StreamRunAgentRole$inboundSchema` instead. */
  export const inboundSchema = StreamRunAgentRole$inboundSchema;
  /** @deprecated use `StreamRunAgentRole$outboundSchema` instead. */
  export const outboundSchema = StreamRunAgentRole$outboundSchema;
  /** @deprecated use `StreamRunAgentRole$Outbound` instead. */
  export type Outbound = StreamRunAgentRole$Outbound;
}

export function streamRunAgentRoleToJSON(
  streamRunAgentRole: StreamRunAgentRole,
): string {
  return JSON.stringify(
    StreamRunAgentRole$outboundSchema.parse(streamRunAgentRole),
  );
}

export function streamRunAgentRoleFromJSON(
  jsonString: string,
): SafeParseResult<StreamRunAgentRole, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => StreamRunAgentRole$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'StreamRunAgentRole' from JSON`,
  );
}

/** @internal */
export const StreamRunAgentPublicMessagePartAgentsRequestKind$inboundSchema:
  z.ZodNativeEnum<typeof StreamRunAgentPublicMessagePartAgentsRequestKind> = z
    .nativeEnum(StreamRunAgentPublicMessagePartAgentsRequestKind);

/** @internal */
export const StreamRunAgentPublicMessagePartAgentsRequestKind$outboundSchema:
  z.ZodNativeEnum<typeof StreamRunAgentPublicMessagePartAgentsRequestKind> =
    StreamRunAgentPublicMessagePartAgentsRequestKind$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace StreamRunAgentPublicMessagePartAgentsRequestKind$ {
  /** @deprecated use `StreamRunAgentPublicMessagePartAgentsRequestKind$inboundSchema` instead. */
  export const inboundSchema =
    StreamRunAgentPublicMessagePartAgentsRequestKind$inboundSchema;
  /** @deprecated use `StreamRunAgentPublicMessagePartAgentsRequestKind$outboundSchema` instead. */
  export const outboundSchema =
    StreamRunAgentPublicMessagePartAgentsRequestKind$outboundSchema;
}

/** @internal */
export const PublicMessagePartToolResultPart$inboundSchema: z.ZodType<
  PublicMessagePartToolResultPart,
  z.ZodTypeDef,
  unknown
> = z.object({
  kind: StreamRunAgentPublicMessagePartAgentsRequestKind$inboundSchema,
  tool_call_id: z.string(),
  result: z.any().optional(),
  metadata: z.record(z.any()).optional(),
}).transform((v) => {
  return remap$(v, {
    "tool_call_id": "toolCallId",
  });
});

/** @internal */
export type PublicMessagePartToolResultPart$Outbound = {
  kind: string;
  tool_call_id: string;
  result?: any | undefined;
  metadata?: { [k: string]: any } | undefined;
};

/** @internal */
export const PublicMessagePartToolResultPart$outboundSchema: z.ZodType<
  PublicMessagePartToolResultPart$Outbound,
  z.ZodTypeDef,
  PublicMessagePartToolResultPart
> = z.object({
  kind: StreamRunAgentPublicMessagePartAgentsRequestKind$outboundSchema,
  toolCallId: z.string(),
  result: z.any().optional(),
  metadata: z.record(z.any()).optional(),
}).transform((v) => {
  return remap$(v, {
    toolCallId: "tool_call_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PublicMessagePartToolResultPart$ {
  /** @deprecated use `PublicMessagePartToolResultPart$inboundSchema` instead. */
  export const inboundSchema = PublicMessagePartToolResultPart$inboundSchema;
  /** @deprecated use `PublicMessagePartToolResultPart$outboundSchema` instead. */
  export const outboundSchema = PublicMessagePartToolResultPart$outboundSchema;
  /** @deprecated use `PublicMessagePartToolResultPart$Outbound` instead. */
  export type Outbound = PublicMessagePartToolResultPart$Outbound;
}

export function publicMessagePartToolResultPartToJSON(
  publicMessagePartToolResultPart: PublicMessagePartToolResultPart,
): string {
  return JSON.stringify(
    PublicMessagePartToolResultPart$outboundSchema.parse(
      publicMessagePartToolResultPart,
    ),
  );
}

export function publicMessagePartToolResultPartFromJSON(
  jsonString: string,
): SafeParseResult<PublicMessagePartToolResultPart, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PublicMessagePartToolResultPart$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PublicMessagePartToolResultPart' from JSON`,
  );
}

/** @internal */
export const StreamRunAgentPublicMessagePartAgentsKind$inboundSchema:
  z.ZodNativeEnum<typeof StreamRunAgentPublicMessagePartAgentsKind> = z
    .nativeEnum(StreamRunAgentPublicMessagePartAgentsKind);

/** @internal */
export const StreamRunAgentPublicMessagePartAgentsKind$outboundSchema:
  z.ZodNativeEnum<typeof StreamRunAgentPublicMessagePartAgentsKind> =
    StreamRunAgentPublicMessagePartAgentsKind$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace StreamRunAgentPublicMessagePartAgentsKind$ {
  /** @deprecated use `StreamRunAgentPublicMessagePartAgentsKind$inboundSchema` instead. */
  export const inboundSchema =
    StreamRunAgentPublicMessagePartAgentsKind$inboundSchema;
  /** @deprecated use `StreamRunAgentPublicMessagePartAgentsKind$outboundSchema` instead. */
  export const outboundSchema =
    StreamRunAgentPublicMessagePartAgentsKind$outboundSchema;
}

/** @internal */
export const FileFileInURIFormat$inboundSchema: z.ZodType<
  FileFileInURIFormat,
  z.ZodTypeDef,
  unknown
> = z.object({
  uri: z.string(),
  mimeType: z.string().optional(),
  name: z.string().optional(),
});

/** @internal */
export type FileFileInURIFormat$Outbound = {
  uri: string;
  mimeType?: string | undefined;
  name?: string | undefined;
};

/** @internal */
export const FileFileInURIFormat$outboundSchema: z.ZodType<
  FileFileInURIFormat$Outbound,
  z.ZodTypeDef,
  FileFileInURIFormat
> = z.object({
  uri: z.string(),
  mimeType: z.string().optional(),
  name: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FileFileInURIFormat$ {
  /** @deprecated use `FileFileInURIFormat$inboundSchema` instead. */
  export const inboundSchema = FileFileInURIFormat$inboundSchema;
  /** @deprecated use `FileFileInURIFormat$outboundSchema` instead. */
  export const outboundSchema = FileFileInURIFormat$outboundSchema;
  /** @deprecated use `FileFileInURIFormat$Outbound` instead. */
  export type Outbound = FileFileInURIFormat$Outbound;
}

export function fileFileInURIFormatToJSON(
  fileFileInURIFormat: FileFileInURIFormat,
): string {
  return JSON.stringify(
    FileFileInURIFormat$outboundSchema.parse(fileFileInURIFormat),
  );
}

export function fileFileInURIFormatFromJSON(
  jsonString: string,
): SafeParseResult<FileFileInURIFormat, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => FileFileInURIFormat$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'FileFileInURIFormat' from JSON`,
  );
}

/** @internal */
export const FileBinaryFormat$inboundSchema: z.ZodType<
  FileBinaryFormat,
  z.ZodTypeDef,
  unknown
> = z.object({
  bytes: z.string(),
  mimeType: z.string().optional(),
  name: z.string().optional(),
});

/** @internal */
export type FileBinaryFormat$Outbound = {
  bytes: string;
  mimeType?: string | undefined;
  name?: string | undefined;
};

/** @internal */
export const FileBinaryFormat$outboundSchema: z.ZodType<
  FileBinaryFormat$Outbound,
  z.ZodTypeDef,
  FileBinaryFormat
> = z.object({
  bytes: z.string(),
  mimeType: z.string().optional(),
  name: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FileBinaryFormat$ {
  /** @deprecated use `FileBinaryFormat$inboundSchema` instead. */
  export const inboundSchema = FileBinaryFormat$inboundSchema;
  /** @deprecated use `FileBinaryFormat$outboundSchema` instead. */
  export const outboundSchema = FileBinaryFormat$outboundSchema;
  /** @deprecated use `FileBinaryFormat$Outbound` instead. */
  export type Outbound = FileBinaryFormat$Outbound;
}

export function fileBinaryFormatToJSON(
  fileBinaryFormat: FileBinaryFormat,
): string {
  return JSON.stringify(
    FileBinaryFormat$outboundSchema.parse(fileBinaryFormat),
  );
}

export function fileBinaryFormatFromJSON(
  jsonString: string,
): SafeParseResult<FileBinaryFormat, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => FileBinaryFormat$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'FileBinaryFormat' from JSON`,
  );
}

/** @internal */
export const StreamRunAgentPublicMessagePartFile$inboundSchema: z.ZodType<
  StreamRunAgentPublicMessagePartFile,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => FileBinaryFormat$inboundSchema),
  z.lazy(() => FileFileInURIFormat$inboundSchema),
]);

/** @internal */
export type StreamRunAgentPublicMessagePartFile$Outbound =
  | FileBinaryFormat$Outbound
  | FileFileInURIFormat$Outbound;

/** @internal */
export const StreamRunAgentPublicMessagePartFile$outboundSchema: z.ZodType<
  StreamRunAgentPublicMessagePartFile$Outbound,
  z.ZodTypeDef,
  StreamRunAgentPublicMessagePartFile
> = z.union([
  z.lazy(() => FileBinaryFormat$outboundSchema),
  z.lazy(() => FileFileInURIFormat$outboundSchema),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace StreamRunAgentPublicMessagePartFile$ {
  /** @deprecated use `StreamRunAgentPublicMessagePartFile$inboundSchema` instead. */
  export const inboundSchema =
    StreamRunAgentPublicMessagePartFile$inboundSchema;
  /** @deprecated use `StreamRunAgentPublicMessagePartFile$outboundSchema` instead. */
  export const outboundSchema =
    StreamRunAgentPublicMessagePartFile$outboundSchema;
  /** @deprecated use `StreamRunAgentPublicMessagePartFile$Outbound` instead. */
  export type Outbound = StreamRunAgentPublicMessagePartFile$Outbound;
}

export function streamRunAgentPublicMessagePartFileToJSON(
  streamRunAgentPublicMessagePartFile: StreamRunAgentPublicMessagePartFile,
): string {
  return JSON.stringify(
    StreamRunAgentPublicMessagePartFile$outboundSchema.parse(
      streamRunAgentPublicMessagePartFile,
    ),
  );
}

export function streamRunAgentPublicMessagePartFileFromJSON(
  jsonString: string,
): SafeParseResult<StreamRunAgentPublicMessagePartFile, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      StreamRunAgentPublicMessagePartFile$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'StreamRunAgentPublicMessagePartFile' from JSON`,
  );
}

/** @internal */
export const PublicMessagePartFilePart$inboundSchema: z.ZodType<
  PublicMessagePartFilePart,
  z.ZodTypeDef,
  unknown
> = z.object({
  kind: StreamRunAgentPublicMessagePartAgentsKind$inboundSchema,
  file: z.union([
    z.lazy(() => FileBinaryFormat$inboundSchema),
    z.lazy(() => FileFileInURIFormat$inboundSchema),
  ]),
  metadata: z.record(z.any()).optional(),
});

/** @internal */
export type PublicMessagePartFilePart$Outbound = {
  kind: string;
  file: FileBinaryFormat$Outbound | FileFileInURIFormat$Outbound;
  metadata?: { [k: string]: any } | undefined;
};

/** @internal */
export const PublicMessagePartFilePart$outboundSchema: z.ZodType<
  PublicMessagePartFilePart$Outbound,
  z.ZodTypeDef,
  PublicMessagePartFilePart
> = z.object({
  kind: StreamRunAgentPublicMessagePartAgentsKind$outboundSchema,
  file: z.union([
    z.lazy(() => FileBinaryFormat$outboundSchema),
    z.lazy(() => FileFileInURIFormat$outboundSchema),
  ]),
  metadata: z.record(z.any()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PublicMessagePartFilePart$ {
  /** @deprecated use `PublicMessagePartFilePart$inboundSchema` instead. */
  export const inboundSchema = PublicMessagePartFilePart$inboundSchema;
  /** @deprecated use `PublicMessagePartFilePart$outboundSchema` instead. */
  export const outboundSchema = PublicMessagePartFilePart$outboundSchema;
  /** @deprecated use `PublicMessagePartFilePart$Outbound` instead. */
  export type Outbound = PublicMessagePartFilePart$Outbound;
}

export function publicMessagePartFilePartToJSON(
  publicMessagePartFilePart: PublicMessagePartFilePart,
): string {
  return JSON.stringify(
    PublicMessagePartFilePart$outboundSchema.parse(publicMessagePartFilePart),
  );
}

export function publicMessagePartFilePartFromJSON(
  jsonString: string,
): SafeParseResult<PublicMessagePartFilePart, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PublicMessagePartFilePart$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PublicMessagePartFilePart' from JSON`,
  );
}

/** @internal */
export const StreamRunAgentPublicMessagePartKind$inboundSchema: z.ZodNativeEnum<
  typeof StreamRunAgentPublicMessagePartKind
> = z.nativeEnum(StreamRunAgentPublicMessagePartKind);

/** @internal */
export const StreamRunAgentPublicMessagePartKind$outboundSchema:
  z.ZodNativeEnum<typeof StreamRunAgentPublicMessagePartKind> =
    StreamRunAgentPublicMessagePartKind$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace StreamRunAgentPublicMessagePartKind$ {
  /** @deprecated use `StreamRunAgentPublicMessagePartKind$inboundSchema` instead. */
  export const inboundSchema =
    StreamRunAgentPublicMessagePartKind$inboundSchema;
  /** @deprecated use `StreamRunAgentPublicMessagePartKind$outboundSchema` instead. */
  export const outboundSchema =
    StreamRunAgentPublicMessagePartKind$outboundSchema;
}

/** @internal */
export const PublicMessagePartTextPart$inboundSchema: z.ZodType<
  PublicMessagePartTextPart,
  z.ZodTypeDef,
  unknown
> = z.object({
  kind: StreamRunAgentPublicMessagePartKind$inboundSchema,
  text: z.string(),
});

/** @internal */
export type PublicMessagePartTextPart$Outbound = {
  kind: string;
  text: string;
};

/** @internal */
export const PublicMessagePartTextPart$outboundSchema: z.ZodType<
  PublicMessagePartTextPart$Outbound,
  z.ZodTypeDef,
  PublicMessagePartTextPart
> = z.object({
  kind: StreamRunAgentPublicMessagePartKind$outboundSchema,
  text: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PublicMessagePartTextPart$ {
  /** @deprecated use `PublicMessagePartTextPart$inboundSchema` instead. */
  export const inboundSchema = PublicMessagePartTextPart$inboundSchema;
  /** @deprecated use `PublicMessagePartTextPart$outboundSchema` instead. */
  export const outboundSchema = PublicMessagePartTextPart$outboundSchema;
  /** @deprecated use `PublicMessagePartTextPart$Outbound` instead. */
  export type Outbound = PublicMessagePartTextPart$Outbound;
}

export function publicMessagePartTextPartToJSON(
  publicMessagePartTextPart: PublicMessagePartTextPart,
): string {
  return JSON.stringify(
    PublicMessagePartTextPart$outboundSchema.parse(publicMessagePartTextPart),
  );
}

export function publicMessagePartTextPartFromJSON(
  jsonString: string,
): SafeParseResult<PublicMessagePartTextPart, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PublicMessagePartTextPart$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PublicMessagePartTextPart' from JSON`,
  );
}

/** @internal */
export const StreamRunAgentPublicMessagePart$inboundSchema: z.ZodType<
  StreamRunAgentPublicMessagePart,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => PublicMessagePartTextPart$inboundSchema),
  z.lazy(() => PublicMessagePartFilePart$inboundSchema),
  z.lazy(() => PublicMessagePartToolResultPart$inboundSchema),
]);

/** @internal */
export type StreamRunAgentPublicMessagePart$Outbound =
  | PublicMessagePartTextPart$Outbound
  | PublicMessagePartFilePart$Outbound
  | PublicMessagePartToolResultPart$Outbound;

/** @internal */
export const StreamRunAgentPublicMessagePart$outboundSchema: z.ZodType<
  StreamRunAgentPublicMessagePart$Outbound,
  z.ZodTypeDef,
  StreamRunAgentPublicMessagePart
> = z.union([
  z.lazy(() => PublicMessagePartTextPart$outboundSchema),
  z.lazy(() => PublicMessagePartFilePart$outboundSchema),
  z.lazy(() => PublicMessagePartToolResultPart$outboundSchema),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace StreamRunAgentPublicMessagePart$ {
  /** @deprecated use `StreamRunAgentPublicMessagePart$inboundSchema` instead. */
  export const inboundSchema = StreamRunAgentPublicMessagePart$inboundSchema;
  /** @deprecated use `StreamRunAgentPublicMessagePart$outboundSchema` instead. */
  export const outboundSchema = StreamRunAgentPublicMessagePart$outboundSchema;
  /** @deprecated use `StreamRunAgentPublicMessagePart$Outbound` instead. */
  export type Outbound = StreamRunAgentPublicMessagePart$Outbound;
}

export function streamRunAgentPublicMessagePartToJSON(
  streamRunAgentPublicMessagePart: StreamRunAgentPublicMessagePart,
): string {
  return JSON.stringify(
    StreamRunAgentPublicMessagePart$outboundSchema.parse(
      streamRunAgentPublicMessagePart,
    ),
  );
}

export function streamRunAgentPublicMessagePartFromJSON(
  jsonString: string,
): SafeParseResult<StreamRunAgentPublicMessagePart, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => StreamRunAgentPublicMessagePart$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'StreamRunAgentPublicMessagePart' from JSON`,
  );
}

/** @internal */
export const StreamRunAgentMessage$inboundSchema: z.ZodType<
  StreamRunAgentMessage,
  z.ZodTypeDef,
  unknown
> = z.object({
  messageId: z.string().optional(),
  role: z.union([
    StreamRunAgentRoleUserMessage$inboundSchema,
    StreamRunAgentRoleToolMessage$inboundSchema,
  ]),
  parts: z.array(
    z.union([
      z.lazy(() => PublicMessagePartTextPart$inboundSchema),
      z.lazy(() => PublicMessagePartFilePart$inboundSchema),
      z.lazy(() => PublicMessagePartToolResultPart$inboundSchema),
    ]),
  ),
});

/** @internal */
export type StreamRunAgentMessage$Outbound = {
  messageId?: string | undefined;
  role: string | string;
  parts: Array<
    | PublicMessagePartTextPart$Outbound
    | PublicMessagePartFilePart$Outbound
    | PublicMessagePartToolResultPart$Outbound
  >;
};

/** @internal */
export const StreamRunAgentMessage$outboundSchema: z.ZodType<
  StreamRunAgentMessage$Outbound,
  z.ZodTypeDef,
  StreamRunAgentMessage
> = z.object({
  messageId: z.string().optional(),
  role: z.union([
    StreamRunAgentRoleUserMessage$outboundSchema,
    StreamRunAgentRoleToolMessage$outboundSchema,
  ]),
  parts: z.array(
    z.union([
      z.lazy(() => PublicMessagePartTextPart$outboundSchema),
      z.lazy(() => PublicMessagePartFilePart$outboundSchema),
      z.lazy(() => PublicMessagePartToolResultPart$outboundSchema),
    ]),
  ),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace StreamRunAgentMessage$ {
  /** @deprecated use `StreamRunAgentMessage$inboundSchema` instead. */
  export const inboundSchema = StreamRunAgentMessage$inboundSchema;
  /** @deprecated use `StreamRunAgentMessage$outboundSchema` instead. */
  export const outboundSchema = StreamRunAgentMessage$outboundSchema;
  /** @deprecated use `StreamRunAgentMessage$Outbound` instead. */
  export type Outbound = StreamRunAgentMessage$Outbound;
}

export function streamRunAgentMessageToJSON(
  streamRunAgentMessage: StreamRunAgentMessage,
): string {
  return JSON.stringify(
    StreamRunAgentMessage$outboundSchema.parse(streamRunAgentMessage),
  );
}

export function streamRunAgentMessageFromJSON(
  jsonString: string,
): SafeParseResult<StreamRunAgentMessage, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => StreamRunAgentMessage$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'StreamRunAgentMessage' from JSON`,
  );
}

/** @internal */
export const StreamRunAgentContact$inboundSchema: z.ZodType<
  StreamRunAgentContact,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  display_name: z.string().optional(),
  email: z.string().optional(),
  metadata: z.array(z.record(z.any())).optional(),
  logo_url: z.string().optional(),
  tags: z.array(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    "display_name": "displayName",
    "logo_url": "logoUrl",
  });
});

/** @internal */
export type StreamRunAgentContact$Outbound = {
  id: string;
  display_name?: string | undefined;
  email?: string | undefined;
  metadata?: Array<{ [k: string]: any }> | undefined;
  logo_url?: string | undefined;
  tags?: Array<string> | undefined;
};

/** @internal */
export const StreamRunAgentContact$outboundSchema: z.ZodType<
  StreamRunAgentContact$Outbound,
  z.ZodTypeDef,
  StreamRunAgentContact
> = z.object({
  id: z.string(),
  displayName: z.string().optional(),
  email: z.string().optional(),
  metadata: z.array(z.record(z.any())).optional(),
  logoUrl: z.string().optional(),
  tags: z.array(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    displayName: "display_name",
    logoUrl: "logo_url",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace StreamRunAgentContact$ {
  /** @deprecated use `StreamRunAgentContact$inboundSchema` instead. */
  export const inboundSchema = StreamRunAgentContact$inboundSchema;
  /** @deprecated use `StreamRunAgentContact$outboundSchema` instead. */
  export const outboundSchema = StreamRunAgentContact$outboundSchema;
  /** @deprecated use `StreamRunAgentContact$Outbound` instead. */
  export type Outbound = StreamRunAgentContact$Outbound;
}

export function streamRunAgentContactToJSON(
  streamRunAgentContact: StreamRunAgentContact,
): string {
  return JSON.stringify(
    StreamRunAgentContact$outboundSchema.parse(streamRunAgentContact),
  );
}

export function streamRunAgentContactFromJSON(
  jsonString: string,
): SafeParseResult<StreamRunAgentContact, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => StreamRunAgentContact$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'StreamRunAgentContact' from JSON`,
  );
}

/** @internal */
export const StreamRunAgentThread$inboundSchema: z.ZodType<
  StreamRunAgentThread,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  tags: z.array(z.string()).optional(),
});

/** @internal */
export type StreamRunAgentThread$Outbound = {
  id: string;
  tags?: Array<string> | undefined;
};

/** @internal */
export const StreamRunAgentThread$outboundSchema: z.ZodType<
  StreamRunAgentThread$Outbound,
  z.ZodTypeDef,
  StreamRunAgentThread
> = z.object({
  id: z.string(),
  tags: z.array(z.string()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace StreamRunAgentThread$ {
  /** @deprecated use `StreamRunAgentThread$inboundSchema` instead. */
  export const inboundSchema = StreamRunAgentThread$inboundSchema;
  /** @deprecated use `StreamRunAgentThread$outboundSchema` instead. */
  export const outboundSchema = StreamRunAgentThread$outboundSchema;
  /** @deprecated use `StreamRunAgentThread$Outbound` instead. */
  export type Outbound = StreamRunAgentThread$Outbound;
}

export function streamRunAgentThreadToJSON(
  streamRunAgentThread: StreamRunAgentThread,
): string {
  return JSON.stringify(
    StreamRunAgentThread$outboundSchema.parse(streamRunAgentThread),
  );
}

export function streamRunAgentThreadFromJSON(
  jsonString: string,
): SafeParseResult<StreamRunAgentThread, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => StreamRunAgentThread$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'StreamRunAgentThread' from JSON`,
  );
}

/** @internal */
export const StreamRunAgentMemory$inboundSchema: z.ZodType<
  StreamRunAgentMemory,
  z.ZodTypeDef,
  unknown
> = z.object({
  entity_id: z.string(),
}).transform((v) => {
  return remap$(v, {
    "entity_id": "entityId",
  });
});

/** @internal */
export type StreamRunAgentMemory$Outbound = {
  entity_id: string;
};

/** @internal */
export const StreamRunAgentMemory$outboundSchema: z.ZodType<
  StreamRunAgentMemory$Outbound,
  z.ZodTypeDef,
  StreamRunAgentMemory
> = z.object({
  entityId: z.string(),
}).transform((v) => {
  return remap$(v, {
    entityId: "entity_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace StreamRunAgentMemory$ {
  /** @deprecated use `StreamRunAgentMemory$inboundSchema` instead. */
  export const inboundSchema = StreamRunAgentMemory$inboundSchema;
  /** @deprecated use `StreamRunAgentMemory$outboundSchema` instead. */
  export const outboundSchema = StreamRunAgentMemory$outboundSchema;
  /** @deprecated use `StreamRunAgentMemory$Outbound` instead. */
  export type Outbound = StreamRunAgentMemory$Outbound;
}

export function streamRunAgentMemoryToJSON(
  streamRunAgentMemory: StreamRunAgentMemory,
): string {
  return JSON.stringify(
    StreamRunAgentMemory$outboundSchema.parse(streamRunAgentMemory),
  );
}

export function streamRunAgentMemoryFromJSON(
  jsonString: string,
): SafeParseResult<StreamRunAgentMemory, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => StreamRunAgentMemory$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'StreamRunAgentMemory' from JSON`,
  );
}

/** @internal */
export const StreamRunAgentKnowledgeBaseConfigurationAgentsType$inboundSchema:
  z.ZodNativeEnum<typeof StreamRunAgentKnowledgeBaseConfigurationAgentsType> = z
    .nativeEnum(StreamRunAgentKnowledgeBaseConfigurationAgentsType);

/** @internal */
export const StreamRunAgentKnowledgeBaseConfigurationAgentsType$outboundSchema:
  z.ZodNativeEnum<typeof StreamRunAgentKnowledgeBaseConfigurationAgentsType> =
    StreamRunAgentKnowledgeBaseConfigurationAgentsType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace StreamRunAgentKnowledgeBaseConfigurationAgentsType$ {
  /** @deprecated use `StreamRunAgentKnowledgeBaseConfigurationAgentsType$inboundSchema` instead. */
  export const inboundSchema =
    StreamRunAgentKnowledgeBaseConfigurationAgentsType$inboundSchema;
  /** @deprecated use `StreamRunAgentKnowledgeBaseConfigurationAgentsType$outboundSchema` instead. */
  export const outboundSchema =
    StreamRunAgentKnowledgeBaseConfigurationAgentsType$outboundSchema;
}

/** @internal */
export const KnowledgeBaseConfigurationKnowledgeBaseStaticQuery$inboundSchema:
  z.ZodType<
    KnowledgeBaseConfigurationKnowledgeBaseStaticQuery,
    z.ZodTypeDef,
    unknown
  > = z.object({
    type: StreamRunAgentKnowledgeBaseConfigurationAgentsType$inboundSchema,
    query: z.string(),
  });

/** @internal */
export type KnowledgeBaseConfigurationKnowledgeBaseStaticQuery$Outbound = {
  type: string;
  query: string;
};

/** @internal */
export const KnowledgeBaseConfigurationKnowledgeBaseStaticQuery$outboundSchema:
  z.ZodType<
    KnowledgeBaseConfigurationKnowledgeBaseStaticQuery$Outbound,
    z.ZodTypeDef,
    KnowledgeBaseConfigurationKnowledgeBaseStaticQuery
  > = z.object({
    type: StreamRunAgentKnowledgeBaseConfigurationAgentsType$outboundSchema,
    query: z.string(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace KnowledgeBaseConfigurationKnowledgeBaseStaticQuery$ {
  /** @deprecated use `KnowledgeBaseConfigurationKnowledgeBaseStaticQuery$inboundSchema` instead. */
  export const inboundSchema =
    KnowledgeBaseConfigurationKnowledgeBaseStaticQuery$inboundSchema;
  /** @deprecated use `KnowledgeBaseConfigurationKnowledgeBaseStaticQuery$outboundSchema` instead. */
  export const outboundSchema =
    KnowledgeBaseConfigurationKnowledgeBaseStaticQuery$outboundSchema;
  /** @deprecated use `KnowledgeBaseConfigurationKnowledgeBaseStaticQuery$Outbound` instead. */
  export type Outbound =
    KnowledgeBaseConfigurationKnowledgeBaseStaticQuery$Outbound;
}

export function knowledgeBaseConfigurationKnowledgeBaseStaticQueryToJSON(
  knowledgeBaseConfigurationKnowledgeBaseStaticQuery:
    KnowledgeBaseConfigurationKnowledgeBaseStaticQuery,
): string {
  return JSON.stringify(
    KnowledgeBaseConfigurationKnowledgeBaseStaticQuery$outboundSchema.parse(
      knowledgeBaseConfigurationKnowledgeBaseStaticQuery,
    ),
  );
}

export function knowledgeBaseConfigurationKnowledgeBaseStaticQueryFromJSON(
  jsonString: string,
): SafeParseResult<
  KnowledgeBaseConfigurationKnowledgeBaseStaticQuery,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      KnowledgeBaseConfigurationKnowledgeBaseStaticQuery$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'KnowledgeBaseConfigurationKnowledgeBaseStaticQuery' from JSON`,
  );
}

/** @internal */
export const StreamRunAgentKnowledgeBaseConfigurationType$inboundSchema:
  z.ZodNativeEnum<typeof StreamRunAgentKnowledgeBaseConfigurationType> = z
    .nativeEnum(StreamRunAgentKnowledgeBaseConfigurationType);

/** @internal */
export const StreamRunAgentKnowledgeBaseConfigurationType$outboundSchema:
  z.ZodNativeEnum<typeof StreamRunAgentKnowledgeBaseConfigurationType> =
    StreamRunAgentKnowledgeBaseConfigurationType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace StreamRunAgentKnowledgeBaseConfigurationType$ {
  /** @deprecated use `StreamRunAgentKnowledgeBaseConfigurationType$inboundSchema` instead. */
  export const inboundSchema =
    StreamRunAgentKnowledgeBaseConfigurationType$inboundSchema;
  /** @deprecated use `StreamRunAgentKnowledgeBaseConfigurationType$outboundSchema` instead. */
  export const outboundSchema =
    StreamRunAgentKnowledgeBaseConfigurationType$outboundSchema;
}

/** @internal */
export const KnowledgeBaseConfigurationKnowledgeBaseLastUserMessage$inboundSchema:
  z.ZodType<
    KnowledgeBaseConfigurationKnowledgeBaseLastUserMessage,
    z.ZodTypeDef,
    unknown
  > = z.object({
    type: StreamRunAgentKnowledgeBaseConfigurationType$inboundSchema,
  });

/** @internal */
export type KnowledgeBaseConfigurationKnowledgeBaseLastUserMessage$Outbound = {
  type: string;
};

/** @internal */
export const KnowledgeBaseConfigurationKnowledgeBaseLastUserMessage$outboundSchema:
  z.ZodType<
    KnowledgeBaseConfigurationKnowledgeBaseLastUserMessage$Outbound,
    z.ZodTypeDef,
    KnowledgeBaseConfigurationKnowledgeBaseLastUserMessage
  > = z.object({
    type: StreamRunAgentKnowledgeBaseConfigurationType$outboundSchema,
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace KnowledgeBaseConfigurationKnowledgeBaseLastUserMessage$ {
  /** @deprecated use `KnowledgeBaseConfigurationKnowledgeBaseLastUserMessage$inboundSchema` instead. */
  export const inboundSchema =
    KnowledgeBaseConfigurationKnowledgeBaseLastUserMessage$inboundSchema;
  /** @deprecated use `KnowledgeBaseConfigurationKnowledgeBaseLastUserMessage$outboundSchema` instead. */
  export const outboundSchema =
    KnowledgeBaseConfigurationKnowledgeBaseLastUserMessage$outboundSchema;
  /** @deprecated use `KnowledgeBaseConfigurationKnowledgeBaseLastUserMessage$Outbound` instead. */
  export type Outbound =
    KnowledgeBaseConfigurationKnowledgeBaseLastUserMessage$Outbound;
}

export function knowledgeBaseConfigurationKnowledgeBaseLastUserMessageToJSON(
  knowledgeBaseConfigurationKnowledgeBaseLastUserMessage:
    KnowledgeBaseConfigurationKnowledgeBaseLastUserMessage,
): string {
  return JSON.stringify(
    KnowledgeBaseConfigurationKnowledgeBaseLastUserMessage$outboundSchema.parse(
      knowledgeBaseConfigurationKnowledgeBaseLastUserMessage,
    ),
  );
}

export function knowledgeBaseConfigurationKnowledgeBaseLastUserMessageFromJSON(
  jsonString: string,
): SafeParseResult<
  KnowledgeBaseConfigurationKnowledgeBaseLastUserMessage,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      KnowledgeBaseConfigurationKnowledgeBaseLastUserMessage$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'KnowledgeBaseConfigurationKnowledgeBaseLastUserMessage' from JSON`,
  );
}

/** @internal */
export const StreamRunAgentKnowledgeBaseConfiguration$inboundSchema: z.ZodType<
  StreamRunAgentKnowledgeBaseConfiguration,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() =>
    KnowledgeBaseConfigurationKnowledgeBaseStaticQuery$inboundSchema
  ),
  z.lazy(() =>
    KnowledgeBaseConfigurationKnowledgeBaseLastUserMessage$inboundSchema
  ),
]);

/** @internal */
export type StreamRunAgentKnowledgeBaseConfiguration$Outbound =
  | KnowledgeBaseConfigurationKnowledgeBaseStaticQuery$Outbound
  | KnowledgeBaseConfigurationKnowledgeBaseLastUserMessage$Outbound;

/** @internal */
export const StreamRunAgentKnowledgeBaseConfiguration$outboundSchema: z.ZodType<
  StreamRunAgentKnowledgeBaseConfiguration$Outbound,
  z.ZodTypeDef,
  StreamRunAgentKnowledgeBaseConfiguration
> = z.union([
  z.lazy(() =>
    KnowledgeBaseConfigurationKnowledgeBaseStaticQuery$outboundSchema
  ),
  z.lazy(() =>
    KnowledgeBaseConfigurationKnowledgeBaseLastUserMessage$outboundSchema
  ),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace StreamRunAgentKnowledgeBaseConfiguration$ {
  /** @deprecated use `StreamRunAgentKnowledgeBaseConfiguration$inboundSchema` instead. */
  export const inboundSchema =
    StreamRunAgentKnowledgeBaseConfiguration$inboundSchema;
  /** @deprecated use `StreamRunAgentKnowledgeBaseConfiguration$outboundSchema` instead. */
  export const outboundSchema =
    StreamRunAgentKnowledgeBaseConfiguration$outboundSchema;
  /** @deprecated use `StreamRunAgentKnowledgeBaseConfiguration$Outbound` instead. */
  export type Outbound = StreamRunAgentKnowledgeBaseConfiguration$Outbound;
}

export function streamRunAgentKnowledgeBaseConfigurationToJSON(
  streamRunAgentKnowledgeBaseConfiguration:
    StreamRunAgentKnowledgeBaseConfiguration,
): string {
  return JSON.stringify(
    StreamRunAgentKnowledgeBaseConfiguration$outboundSchema.parse(
      streamRunAgentKnowledgeBaseConfiguration,
    ),
  );
}

export function streamRunAgentKnowledgeBaseConfigurationFromJSON(
  jsonString: string,
): SafeParseResult<
  StreamRunAgentKnowledgeBaseConfiguration,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      StreamRunAgentKnowledgeBaseConfiguration$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'StreamRunAgentKnowledgeBaseConfiguration' from JSON`,
  );
}

/** @internal */
export const StreamRunAgentKnowledgeBases$inboundSchema: z.ZodType<
  StreamRunAgentKnowledgeBases,
  z.ZodTypeDef,
  unknown
> = z.object({
  configuration: z.union([
    z.lazy(() =>
      KnowledgeBaseConfigurationKnowledgeBaseStaticQuery$inboundSchema
    ),
    z.lazy(() =>
      KnowledgeBaseConfigurationKnowledgeBaseLastUserMessage$inboundSchema
    ),
  ]),
});

/** @internal */
export type StreamRunAgentKnowledgeBases$Outbound = {
  configuration:
    | KnowledgeBaseConfigurationKnowledgeBaseStaticQuery$Outbound
    | KnowledgeBaseConfigurationKnowledgeBaseLastUserMessage$Outbound;
};

/** @internal */
export const StreamRunAgentKnowledgeBases$outboundSchema: z.ZodType<
  StreamRunAgentKnowledgeBases$Outbound,
  z.ZodTypeDef,
  StreamRunAgentKnowledgeBases
> = z.object({
  configuration: z.union([
    z.lazy(() =>
      KnowledgeBaseConfigurationKnowledgeBaseStaticQuery$outboundSchema
    ),
    z.lazy(() =>
      KnowledgeBaseConfigurationKnowledgeBaseLastUserMessage$outboundSchema
    ),
  ]),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace StreamRunAgentKnowledgeBases$ {
  /** @deprecated use `StreamRunAgentKnowledgeBases$inboundSchema` instead. */
  export const inboundSchema = StreamRunAgentKnowledgeBases$inboundSchema;
  /** @deprecated use `StreamRunAgentKnowledgeBases$outboundSchema` instead. */
  export const outboundSchema = StreamRunAgentKnowledgeBases$outboundSchema;
  /** @deprecated use `StreamRunAgentKnowledgeBases$Outbound` instead. */
  export type Outbound = StreamRunAgentKnowledgeBases$Outbound;
}

export function streamRunAgentKnowledgeBasesToJSON(
  streamRunAgentKnowledgeBases: StreamRunAgentKnowledgeBases,
): string {
  return JSON.stringify(
    StreamRunAgentKnowledgeBases$outboundSchema.parse(
      streamRunAgentKnowledgeBases,
    ),
  );
}

export function streamRunAgentKnowledgeBasesFromJSON(
  jsonString: string,
): SafeParseResult<StreamRunAgentKnowledgeBases, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => StreamRunAgentKnowledgeBases$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'StreamRunAgentKnowledgeBases' from JSON`,
  );
}

/** @internal */
export const StreamRunAgentTeamOfAgents$inboundSchema: z.ZodType<
  StreamRunAgentTeamOfAgents,
  z.ZodTypeDef,
  unknown
> = z.object({
  key: z.string(),
  role: z.string().optional(),
});

/** @internal */
export type StreamRunAgentTeamOfAgents$Outbound = {
  key: string;
  role?: string | undefined;
};

/** @internal */
export const StreamRunAgentTeamOfAgents$outboundSchema: z.ZodType<
  StreamRunAgentTeamOfAgents$Outbound,
  z.ZodTypeDef,
  StreamRunAgentTeamOfAgents
> = z.object({
  key: z.string(),
  role: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace StreamRunAgentTeamOfAgents$ {
  /** @deprecated use `StreamRunAgentTeamOfAgents$inboundSchema` instead. */
  export const inboundSchema = StreamRunAgentTeamOfAgents$inboundSchema;
  /** @deprecated use `StreamRunAgentTeamOfAgents$outboundSchema` instead. */
  export const outboundSchema = StreamRunAgentTeamOfAgents$outboundSchema;
  /** @deprecated use `StreamRunAgentTeamOfAgents$Outbound` instead. */
  export type Outbound = StreamRunAgentTeamOfAgents$Outbound;
}

export function streamRunAgentTeamOfAgentsToJSON(
  streamRunAgentTeamOfAgents: StreamRunAgentTeamOfAgents,
): string {
  return JSON.stringify(
    StreamRunAgentTeamOfAgents$outboundSchema.parse(streamRunAgentTeamOfAgents),
  );
}

export function streamRunAgentTeamOfAgentsFromJSON(
  jsonString: string,
): SafeParseResult<StreamRunAgentTeamOfAgents, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => StreamRunAgentTeamOfAgents$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'StreamRunAgentTeamOfAgents' from JSON`,
  );
}

/** @internal */
export const StreamRunAgentRunAgentRequestToolAgentsRequestRequestBodySettingsTools14Type$inboundSchema:
  z.ZodNativeEnum<
    typeof StreamRunAgentRunAgentRequestToolAgentsRequestRequestBodySettingsTools14Type
  > = z.nativeEnum(
    StreamRunAgentRunAgentRequestToolAgentsRequestRequestBodySettingsTools14Type,
  );

/** @internal */
export const StreamRunAgentRunAgentRequestToolAgentsRequestRequestBodySettingsTools14Type$outboundSchema:
  z.ZodNativeEnum<
    typeof StreamRunAgentRunAgentRequestToolAgentsRequestRequestBodySettingsTools14Type
  > =
    StreamRunAgentRunAgentRequestToolAgentsRequestRequestBodySettingsTools14Type$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace StreamRunAgentRunAgentRequestToolAgentsRequestRequestBodySettingsTools14Type$ {
  /** @deprecated use `StreamRunAgentRunAgentRequestToolAgentsRequestRequestBodySettingsTools14Type$inboundSchema` instead. */
  export const inboundSchema =
    StreamRunAgentRunAgentRequestToolAgentsRequestRequestBodySettingsTools14Type$inboundSchema;
  /** @deprecated use `StreamRunAgentRunAgentRequestToolAgentsRequestRequestBodySettingsTools14Type$outboundSchema` instead. */
  export const outboundSchema =
    StreamRunAgentRunAgentRequestToolAgentsRequestRequestBodySettingsTools14Type$outboundSchema;
}

/** @internal */
export const StreamRunAgentRunAgentRequestToolFunction$inboundSchema: z.ZodType<
  StreamRunAgentRunAgentRequestToolFunction,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.string(),
  description: z.string().optional(),
  strict: z.boolean().optional(),
  parameters: z.record(z.any()).optional(),
});

/** @internal */
export type StreamRunAgentRunAgentRequestToolFunction$Outbound = {
  name: string;
  description?: string | undefined;
  strict?: boolean | undefined;
  parameters?: { [k: string]: any } | undefined;
};

/** @internal */
export const StreamRunAgentRunAgentRequestToolFunction$outboundSchema:
  z.ZodType<
    StreamRunAgentRunAgentRequestToolFunction$Outbound,
    z.ZodTypeDef,
    StreamRunAgentRunAgentRequestToolFunction
  > = z.object({
    name: z.string(),
    description: z.string().optional(),
    strict: z.boolean().optional(),
    parameters: z.record(z.any()).optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace StreamRunAgentRunAgentRequestToolFunction$ {
  /** @deprecated use `StreamRunAgentRunAgentRequestToolFunction$inboundSchema` instead. */
  export const inboundSchema =
    StreamRunAgentRunAgentRequestToolFunction$inboundSchema;
  /** @deprecated use `StreamRunAgentRunAgentRequestToolFunction$outboundSchema` instead. */
  export const outboundSchema =
    StreamRunAgentRunAgentRequestToolFunction$outboundSchema;
  /** @deprecated use `StreamRunAgentRunAgentRequestToolFunction$Outbound` instead. */
  export type Outbound = StreamRunAgentRunAgentRequestToolFunction$Outbound;
}

export function streamRunAgentRunAgentRequestToolFunctionToJSON(
  streamRunAgentRunAgentRequestToolFunction:
    StreamRunAgentRunAgentRequestToolFunction,
): string {
  return JSON.stringify(
    StreamRunAgentRunAgentRequestToolFunction$outboundSchema.parse(
      streamRunAgentRunAgentRequestToolFunction,
    ),
  );
}

export function streamRunAgentRunAgentRequestToolFunctionFromJSON(
  jsonString: string,
): SafeParseResult<
  StreamRunAgentRunAgentRequestToolFunction,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      StreamRunAgentRunAgentRequestToolFunction$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'StreamRunAgentRunAgentRequestToolFunction' from JSON`,
  );
}

/** @internal */
export const RunAgentRequestToolFunctionTool$inboundSchema: z.ZodType<
  RunAgentRequestToolFunctionTool,
  z.ZodTypeDef,
  unknown
> = z.object({
  type:
    StreamRunAgentRunAgentRequestToolAgentsRequestRequestBodySettingsTools14Type$inboundSchema,
  _id: z.string().optional(),
  key: z.string(),
  display_name: z.string().optional(),
  description: z.string().optional(),
  requires_approval: z.boolean().default(false),
  function: z.lazy(() =>
    StreamRunAgentRunAgentRequestToolFunction$inboundSchema
  ),
}).transform((v) => {
  return remap$(v, {
    "_id": "id",
    "display_name": "displayName",
    "requires_approval": "requiresApproval",
  });
});

/** @internal */
export type RunAgentRequestToolFunctionTool$Outbound = {
  type: string;
  _id?: string | undefined;
  key: string;
  display_name?: string | undefined;
  description?: string | undefined;
  requires_approval: boolean;
  function: StreamRunAgentRunAgentRequestToolFunction$Outbound;
};

/** @internal */
export const RunAgentRequestToolFunctionTool$outboundSchema: z.ZodType<
  RunAgentRequestToolFunctionTool$Outbound,
  z.ZodTypeDef,
  RunAgentRequestToolFunctionTool
> = z.object({
  type:
    StreamRunAgentRunAgentRequestToolAgentsRequestRequestBodySettingsTools14Type$outboundSchema,
  id: z.string().optional(),
  key: z.string(),
  displayName: z.string().optional(),
  description: z.string().optional(),
  requiresApproval: z.boolean().default(false),
  function: z.lazy(() =>
    StreamRunAgentRunAgentRequestToolFunction$outboundSchema
  ),
}).transform((v) => {
  return remap$(v, {
    id: "_id",
    displayName: "display_name",
    requiresApproval: "requires_approval",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RunAgentRequestToolFunctionTool$ {
  /** @deprecated use `RunAgentRequestToolFunctionTool$inboundSchema` instead. */
  export const inboundSchema = RunAgentRequestToolFunctionTool$inboundSchema;
  /** @deprecated use `RunAgentRequestToolFunctionTool$outboundSchema` instead. */
  export const outboundSchema = RunAgentRequestToolFunctionTool$outboundSchema;
  /** @deprecated use `RunAgentRequestToolFunctionTool$Outbound` instead. */
  export type Outbound = RunAgentRequestToolFunctionTool$Outbound;
}

export function runAgentRequestToolFunctionToolToJSON(
  runAgentRequestToolFunctionTool: RunAgentRequestToolFunctionTool,
): string {
  return JSON.stringify(
    RunAgentRequestToolFunctionTool$outboundSchema.parse(
      runAgentRequestToolFunctionTool,
    ),
  );
}

export function runAgentRequestToolFunctionToolFromJSON(
  jsonString: string,
): SafeParseResult<RunAgentRequestToolFunctionTool, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => RunAgentRequestToolFunctionTool$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RunAgentRequestToolFunctionTool' from JSON`,
  );
}

/** @internal */
export const StreamRunAgentRunAgentRequestToolAgentsRequestRequestBodySettingsTools13Type$inboundSchema:
  z.ZodNativeEnum<
    typeof StreamRunAgentRunAgentRequestToolAgentsRequestRequestBodySettingsTools13Type
  > = z.nativeEnum(
    StreamRunAgentRunAgentRequestToolAgentsRequestRequestBodySettingsTools13Type,
  );

/** @internal */
export const StreamRunAgentRunAgentRequestToolAgentsRequestRequestBodySettingsTools13Type$outboundSchema:
  z.ZodNativeEnum<
    typeof StreamRunAgentRunAgentRequestToolAgentsRequestRequestBodySettingsTools13Type
  > =
    StreamRunAgentRunAgentRequestToolAgentsRequestRequestBodySettingsTools13Type$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace StreamRunAgentRunAgentRequestToolAgentsRequestRequestBodySettingsTools13Type$ {
  /** @deprecated use `StreamRunAgentRunAgentRequestToolAgentsRequestRequestBodySettingsTools13Type$inboundSchema` instead. */
  export const inboundSchema =
    StreamRunAgentRunAgentRequestToolAgentsRequestRequestBodySettingsTools13Type$inboundSchema;
  /** @deprecated use `StreamRunAgentRunAgentRequestToolAgentsRequestRequestBodySettingsTools13Type$outboundSchema` instead. */
  export const outboundSchema =
    StreamRunAgentRunAgentRequestToolAgentsRequestRequestBodySettingsTools13Type$outboundSchema;
}

/** @internal */
export const RunAgentRequestToolLanguage$inboundSchema: z.ZodNativeEnum<
  typeof RunAgentRequestToolLanguage
> = z.nativeEnum(RunAgentRequestToolLanguage);

/** @internal */
export const RunAgentRequestToolLanguage$outboundSchema: z.ZodNativeEnum<
  typeof RunAgentRequestToolLanguage
> = RunAgentRequestToolLanguage$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RunAgentRequestToolLanguage$ {
  /** @deprecated use `RunAgentRequestToolLanguage$inboundSchema` instead. */
  export const inboundSchema = RunAgentRequestToolLanguage$inboundSchema;
  /** @deprecated use `RunAgentRequestToolLanguage$outboundSchema` instead. */
  export const outboundSchema = RunAgentRequestToolLanguage$outboundSchema;
}

/** @internal */
export const RunAgentRequestToolCodeTool$inboundSchema: z.ZodType<
  RunAgentRequestToolCodeTool,
  z.ZodTypeDef,
  unknown
> = z.object({
  parameters: z.record(z.any()).optional(),
  language: RunAgentRequestToolLanguage$inboundSchema,
  code: z.string(),
});

/** @internal */
export type RunAgentRequestToolCodeTool$Outbound = {
  parameters?: { [k: string]: any } | undefined;
  language: string;
  code: string;
};

/** @internal */
export const RunAgentRequestToolCodeTool$outboundSchema: z.ZodType<
  RunAgentRequestToolCodeTool$Outbound,
  z.ZodTypeDef,
  RunAgentRequestToolCodeTool
> = z.object({
  parameters: z.record(z.any()).optional(),
  language: RunAgentRequestToolLanguage$outboundSchema,
  code: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RunAgentRequestToolCodeTool$ {
  /** @deprecated use `RunAgentRequestToolCodeTool$inboundSchema` instead. */
  export const inboundSchema = RunAgentRequestToolCodeTool$inboundSchema;
  /** @deprecated use `RunAgentRequestToolCodeTool$outboundSchema` instead. */
  export const outboundSchema = RunAgentRequestToolCodeTool$outboundSchema;
  /** @deprecated use `RunAgentRequestToolCodeTool$Outbound` instead. */
  export type Outbound = RunAgentRequestToolCodeTool$Outbound;
}

export function runAgentRequestToolCodeToolToJSON(
  runAgentRequestToolCodeTool: RunAgentRequestToolCodeTool,
): string {
  return JSON.stringify(
    RunAgentRequestToolCodeTool$outboundSchema.parse(
      runAgentRequestToolCodeTool,
    ),
  );
}

export function runAgentRequestToolCodeToolFromJSON(
  jsonString: string,
): SafeParseResult<RunAgentRequestToolCodeTool, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => RunAgentRequestToolCodeTool$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RunAgentRequestToolCodeTool' from JSON`,
  );
}

/** @internal */
export const RunAgentRequestToolCodeExecutionTool$inboundSchema: z.ZodType<
  RunAgentRequestToolCodeExecutionTool,
  z.ZodTypeDef,
  unknown
> = z.object({
  key: z.string(),
  display_name: z.string(),
  description: z.string(),
  type:
    StreamRunAgentRunAgentRequestToolAgentsRequestRequestBodySettingsTools13Type$inboundSchema,
  code_tool: z.lazy(() => RunAgentRequestToolCodeTool$inboundSchema),
  _id: z.string().optional(),
  requires_approval: z.boolean().default(false),
}).transform((v) => {
  return remap$(v, {
    "display_name": "displayName",
    "code_tool": "codeTool",
    "_id": "id",
    "requires_approval": "requiresApproval",
  });
});

/** @internal */
export type RunAgentRequestToolCodeExecutionTool$Outbound = {
  key: string;
  display_name: string;
  description: string;
  type: string;
  code_tool: RunAgentRequestToolCodeTool$Outbound;
  _id?: string | undefined;
  requires_approval: boolean;
};

/** @internal */
export const RunAgentRequestToolCodeExecutionTool$outboundSchema: z.ZodType<
  RunAgentRequestToolCodeExecutionTool$Outbound,
  z.ZodTypeDef,
  RunAgentRequestToolCodeExecutionTool
> = z.object({
  key: z.string(),
  displayName: z.string(),
  description: z.string(),
  type:
    StreamRunAgentRunAgentRequestToolAgentsRequestRequestBodySettingsTools13Type$outboundSchema,
  codeTool: z.lazy(() => RunAgentRequestToolCodeTool$outboundSchema),
  id: z.string().optional(),
  requiresApproval: z.boolean().default(false),
}).transform((v) => {
  return remap$(v, {
    displayName: "display_name",
    codeTool: "code_tool",
    id: "_id",
    requiresApproval: "requires_approval",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RunAgentRequestToolCodeExecutionTool$ {
  /** @deprecated use `RunAgentRequestToolCodeExecutionTool$inboundSchema` instead. */
  export const inboundSchema =
    RunAgentRequestToolCodeExecutionTool$inboundSchema;
  /** @deprecated use `RunAgentRequestToolCodeExecutionTool$outboundSchema` instead. */
  export const outboundSchema =
    RunAgentRequestToolCodeExecutionTool$outboundSchema;
  /** @deprecated use `RunAgentRequestToolCodeExecutionTool$Outbound` instead. */
  export type Outbound = RunAgentRequestToolCodeExecutionTool$Outbound;
}

export function runAgentRequestToolCodeExecutionToolToJSON(
  runAgentRequestToolCodeExecutionTool: RunAgentRequestToolCodeExecutionTool,
): string {
  return JSON.stringify(
    RunAgentRequestToolCodeExecutionTool$outboundSchema.parse(
      runAgentRequestToolCodeExecutionTool,
    ),
  );
}

export function runAgentRequestToolCodeExecutionToolFromJSON(
  jsonString: string,
): SafeParseResult<RunAgentRequestToolCodeExecutionTool, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      RunAgentRequestToolCodeExecutionTool$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RunAgentRequestToolCodeExecutionTool' from JSON`,
  );
}

/** @internal */
export const StreamRunAgentRunAgentRequestToolAgentsRequestRequestBodySettingsTools12Type$inboundSchema:
  z.ZodNativeEnum<
    typeof StreamRunAgentRunAgentRequestToolAgentsRequestRequestBodySettingsTools12Type
  > = z.nativeEnum(
    StreamRunAgentRunAgentRequestToolAgentsRequestRequestBodySettingsTools12Type,
  );

/** @internal */
export const StreamRunAgentRunAgentRequestToolAgentsRequestRequestBodySettingsTools12Type$outboundSchema:
  z.ZodNativeEnum<
    typeof StreamRunAgentRunAgentRequestToolAgentsRequestRequestBodySettingsTools12Type
  > =
    StreamRunAgentRunAgentRequestToolAgentsRequestRequestBodySettingsTools12Type$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace StreamRunAgentRunAgentRequestToolAgentsRequestRequestBodySettingsTools12Type$ {
  /** @deprecated use `StreamRunAgentRunAgentRequestToolAgentsRequestRequestBodySettingsTools12Type$inboundSchema` instead. */
  export const inboundSchema =
    StreamRunAgentRunAgentRequestToolAgentsRequestRequestBodySettingsTools12Type$inboundSchema;
  /** @deprecated use `StreamRunAgentRunAgentRequestToolAgentsRequestRequestBodySettingsTools12Type$outboundSchema` instead. */
  export const outboundSchema =
    StreamRunAgentRunAgentRequestToolAgentsRequestRequestBodySettingsTools12Type$outboundSchema;
}

/** @internal */
export const RunAgentRequestToolMethod$inboundSchema: z.ZodNativeEnum<
  typeof RunAgentRequestToolMethod
> = z.nativeEnum(RunAgentRequestToolMethod);

/** @internal */
export const RunAgentRequestToolMethod$outboundSchema: z.ZodNativeEnum<
  typeof RunAgentRequestToolMethod
> = RunAgentRequestToolMethod$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RunAgentRequestToolMethod$ {
  /** @deprecated use `RunAgentRequestToolMethod$inboundSchema` instead. */
  export const inboundSchema = RunAgentRequestToolMethod$inboundSchema;
  /** @deprecated use `RunAgentRequestToolMethod$outboundSchema` instead. */
  export const outboundSchema = RunAgentRequestToolMethod$outboundSchema;
}

/** @internal */
export const RunAgentRequestToolBlueprint$inboundSchema: z.ZodType<
  RunAgentRequestToolBlueprint,
  z.ZodTypeDef,
  unknown
> = z.object({
  url: z.string(),
  method: RunAgentRequestToolMethod$inboundSchema,
  headers: z.record(z.string()).optional(),
  body: z.record(z.any()).optional(),
});

/** @internal */
export type RunAgentRequestToolBlueprint$Outbound = {
  url: string;
  method: string;
  headers?: { [k: string]: string } | undefined;
  body?: { [k: string]: any } | undefined;
};

/** @internal */
export const RunAgentRequestToolBlueprint$outboundSchema: z.ZodType<
  RunAgentRequestToolBlueprint$Outbound,
  z.ZodTypeDef,
  RunAgentRequestToolBlueprint
> = z.object({
  url: z.string(),
  method: RunAgentRequestToolMethod$outboundSchema,
  headers: z.record(z.string()).optional(),
  body: z.record(z.any()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RunAgentRequestToolBlueprint$ {
  /** @deprecated use `RunAgentRequestToolBlueprint$inboundSchema` instead. */
  export const inboundSchema = RunAgentRequestToolBlueprint$inboundSchema;
  /** @deprecated use `RunAgentRequestToolBlueprint$outboundSchema` instead. */
  export const outboundSchema = RunAgentRequestToolBlueprint$outboundSchema;
  /** @deprecated use `RunAgentRequestToolBlueprint$Outbound` instead. */
  export type Outbound = RunAgentRequestToolBlueprint$Outbound;
}

export function runAgentRequestToolBlueprintToJSON(
  runAgentRequestToolBlueprint: RunAgentRequestToolBlueprint,
): string {
  return JSON.stringify(
    RunAgentRequestToolBlueprint$outboundSchema.parse(
      runAgentRequestToolBlueprint,
    ),
  );
}

export function runAgentRequestToolBlueprintFromJSON(
  jsonString: string,
): SafeParseResult<RunAgentRequestToolBlueprint, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => RunAgentRequestToolBlueprint$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RunAgentRequestToolBlueprint' from JSON`,
  );
}

/** @internal */
export const StreamRunAgentRunAgentRequestToolAgentsRequestRequestBodySettingsTools12HttpType$inboundSchema:
  z.ZodNativeEnum<
    typeof StreamRunAgentRunAgentRequestToolAgentsRequestRequestBodySettingsTools12HttpType
  > = z.nativeEnum(
    StreamRunAgentRunAgentRequestToolAgentsRequestRequestBodySettingsTools12HttpType,
  );

/** @internal */
export const StreamRunAgentRunAgentRequestToolAgentsRequestRequestBodySettingsTools12HttpType$outboundSchema:
  z.ZodNativeEnum<
    typeof StreamRunAgentRunAgentRequestToolAgentsRequestRequestBodySettingsTools12HttpType
  > =
    StreamRunAgentRunAgentRequestToolAgentsRequestRequestBodySettingsTools12HttpType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace StreamRunAgentRunAgentRequestToolAgentsRequestRequestBodySettingsTools12HttpType$ {
  /** @deprecated use `StreamRunAgentRunAgentRequestToolAgentsRequestRequestBodySettingsTools12HttpType$inboundSchema` instead. */
  export const inboundSchema =
    StreamRunAgentRunAgentRequestToolAgentsRequestRequestBodySettingsTools12HttpType$inboundSchema;
  /** @deprecated use `StreamRunAgentRunAgentRequestToolAgentsRequestRequestBodySettingsTools12HttpType$outboundSchema` instead. */
  export const outboundSchema =
    StreamRunAgentRunAgentRequestToolAgentsRequestRequestBodySettingsTools12HttpType$outboundSchema;
}

/** @internal */
export const RunAgentRequestToolDefaultValue$inboundSchema: z.ZodType<
  RunAgentRequestToolDefaultValue,
  z.ZodTypeDef,
  unknown
> = z.union([z.string(), z.number(), z.boolean()]);

/** @internal */
export type RunAgentRequestToolDefaultValue$Outbound =
  | string
  | number
  | boolean;

/** @internal */
export const RunAgentRequestToolDefaultValue$outboundSchema: z.ZodType<
  RunAgentRequestToolDefaultValue$Outbound,
  z.ZodTypeDef,
  RunAgentRequestToolDefaultValue
> = z.union([z.string(), z.number(), z.boolean()]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RunAgentRequestToolDefaultValue$ {
  /** @deprecated use `RunAgentRequestToolDefaultValue$inboundSchema` instead. */
  export const inboundSchema = RunAgentRequestToolDefaultValue$inboundSchema;
  /** @deprecated use `RunAgentRequestToolDefaultValue$outboundSchema` instead. */
  export const outboundSchema = RunAgentRequestToolDefaultValue$outboundSchema;
  /** @deprecated use `RunAgentRequestToolDefaultValue$Outbound` instead. */
  export type Outbound = RunAgentRequestToolDefaultValue$Outbound;
}

export function runAgentRequestToolDefaultValueToJSON(
  runAgentRequestToolDefaultValue: RunAgentRequestToolDefaultValue,
): string {
  return JSON.stringify(
    RunAgentRequestToolDefaultValue$outboundSchema.parse(
      runAgentRequestToolDefaultValue,
    ),
  );
}

export function runAgentRequestToolDefaultValueFromJSON(
  jsonString: string,
): SafeParseResult<RunAgentRequestToolDefaultValue, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => RunAgentRequestToolDefaultValue$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RunAgentRequestToolDefaultValue' from JSON`,
  );
}

/** @internal */
export const RunAgentRequestToolArguments$inboundSchema: z.ZodType<
  RunAgentRequestToolArguments,
  z.ZodTypeDef,
  unknown
> = z.object({
  type:
    StreamRunAgentRunAgentRequestToolAgentsRequestRequestBodySettingsTools12HttpType$inboundSchema,
  description: z.string(),
  send_to_model: z.boolean().default(true),
  default_value: z.union([z.string(), z.number(), z.boolean()]).optional(),
}).transform((v) => {
  return remap$(v, {
    "send_to_model": "sendToModel",
    "default_value": "defaultValue",
  });
});

/** @internal */
export type RunAgentRequestToolArguments$Outbound = {
  type: string;
  description: string;
  send_to_model: boolean;
  default_value?: string | number | boolean | undefined;
};

/** @internal */
export const RunAgentRequestToolArguments$outboundSchema: z.ZodType<
  RunAgentRequestToolArguments$Outbound,
  z.ZodTypeDef,
  RunAgentRequestToolArguments
> = z.object({
  type:
    StreamRunAgentRunAgentRequestToolAgentsRequestRequestBodySettingsTools12HttpType$outboundSchema,
  description: z.string(),
  sendToModel: z.boolean().default(true),
  defaultValue: z.union([z.string(), z.number(), z.boolean()]).optional(),
}).transform((v) => {
  return remap$(v, {
    sendToModel: "send_to_model",
    defaultValue: "default_value",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RunAgentRequestToolArguments$ {
  /** @deprecated use `RunAgentRequestToolArguments$inboundSchema` instead. */
  export const inboundSchema = RunAgentRequestToolArguments$inboundSchema;
  /** @deprecated use `RunAgentRequestToolArguments$outboundSchema` instead. */
  export const outboundSchema = RunAgentRequestToolArguments$outboundSchema;
  /** @deprecated use `RunAgentRequestToolArguments$Outbound` instead. */
  export type Outbound = RunAgentRequestToolArguments$Outbound;
}

export function runAgentRequestToolArgumentsToJSON(
  runAgentRequestToolArguments: RunAgentRequestToolArguments,
): string {
  return JSON.stringify(
    RunAgentRequestToolArguments$outboundSchema.parse(
      runAgentRequestToolArguments,
    ),
  );
}

export function runAgentRequestToolArgumentsFromJSON(
  jsonString: string,
): SafeParseResult<RunAgentRequestToolArguments, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => RunAgentRequestToolArguments$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RunAgentRequestToolArguments' from JSON`,
  );
}

/** @internal */
export const RunAgentRequestToolHttp$inboundSchema: z.ZodType<
  RunAgentRequestToolHttp,
  z.ZodTypeDef,
  unknown
> = z.object({
  blueprint: z.lazy(() => RunAgentRequestToolBlueprint$inboundSchema),
  arguments: z.record(z.lazy(() => RunAgentRequestToolArguments$inboundSchema))
    .optional(),
});

/** @internal */
export type RunAgentRequestToolHttp$Outbound = {
  blueprint: RunAgentRequestToolBlueprint$Outbound;
  arguments?:
    | { [k: string]: RunAgentRequestToolArguments$Outbound }
    | undefined;
};

/** @internal */
export const RunAgentRequestToolHttp$outboundSchema: z.ZodType<
  RunAgentRequestToolHttp$Outbound,
  z.ZodTypeDef,
  RunAgentRequestToolHttp
> = z.object({
  blueprint: z.lazy(() => RunAgentRequestToolBlueprint$outboundSchema),
  arguments: z.record(z.lazy(() => RunAgentRequestToolArguments$outboundSchema))
    .optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RunAgentRequestToolHttp$ {
  /** @deprecated use `RunAgentRequestToolHttp$inboundSchema` instead. */
  export const inboundSchema = RunAgentRequestToolHttp$inboundSchema;
  /** @deprecated use `RunAgentRequestToolHttp$outboundSchema` instead. */
  export const outboundSchema = RunAgentRequestToolHttp$outboundSchema;
  /** @deprecated use `RunAgentRequestToolHttp$Outbound` instead. */
  export type Outbound = RunAgentRequestToolHttp$Outbound;
}

export function runAgentRequestToolHttpToJSON(
  runAgentRequestToolHttp: RunAgentRequestToolHttp,
): string {
  return JSON.stringify(
    RunAgentRequestToolHttp$outboundSchema.parse(runAgentRequestToolHttp),
  );
}

export function runAgentRequestToolHttpFromJSON(
  jsonString: string,
): SafeParseResult<RunAgentRequestToolHttp, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => RunAgentRequestToolHttp$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RunAgentRequestToolHttp' from JSON`,
  );
}

/** @internal */
export const RunAgentRequestToolHTTPTool$inboundSchema: z.ZodType<
  RunAgentRequestToolHTTPTool,
  z.ZodTypeDef,
  unknown
> = z.object({
  _id: z.string().default("01K7H8C0WY1K0846NP0RD0Z40R"),
  key: z.string(),
  display_name: z.string(),
  description: z.string(),
  type:
    StreamRunAgentRunAgentRequestToolAgentsRequestRequestBodySettingsTools12Type$inboundSchema,
  http: z.lazy(() => RunAgentRequestToolHttp$inboundSchema),
  requires_approval: z.boolean().default(false),
}).transform((v) => {
  return remap$(v, {
    "_id": "id",
    "display_name": "displayName",
    "requires_approval": "requiresApproval",
  });
});

/** @internal */
export type RunAgentRequestToolHTTPTool$Outbound = {
  _id: string;
  key: string;
  display_name: string;
  description: string;
  type: string;
  http: RunAgentRequestToolHttp$Outbound;
  requires_approval: boolean;
};

/** @internal */
export const RunAgentRequestToolHTTPTool$outboundSchema: z.ZodType<
  RunAgentRequestToolHTTPTool$Outbound,
  z.ZodTypeDef,
  RunAgentRequestToolHTTPTool
> = z.object({
  id: z.string().default("01K7H8C0WY1K0846NP0RD0Z40R"),
  key: z.string(),
  displayName: z.string(),
  description: z.string(),
  type:
    StreamRunAgentRunAgentRequestToolAgentsRequestRequestBodySettingsTools12Type$outboundSchema,
  http: z.lazy(() => RunAgentRequestToolHttp$outboundSchema),
  requiresApproval: z.boolean().default(false),
}).transform((v) => {
  return remap$(v, {
    id: "_id",
    displayName: "display_name",
    requiresApproval: "requires_approval",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RunAgentRequestToolHTTPTool$ {
  /** @deprecated use `RunAgentRequestToolHTTPTool$inboundSchema` instead. */
  export const inboundSchema = RunAgentRequestToolHTTPTool$inboundSchema;
  /** @deprecated use `RunAgentRequestToolHTTPTool$outboundSchema` instead. */
  export const outboundSchema = RunAgentRequestToolHTTPTool$outboundSchema;
  /** @deprecated use `RunAgentRequestToolHTTPTool$Outbound` instead. */
  export type Outbound = RunAgentRequestToolHTTPTool$Outbound;
}

export function runAgentRequestToolHTTPToolToJSON(
  runAgentRequestToolHTTPTool: RunAgentRequestToolHTTPTool,
): string {
  return JSON.stringify(
    RunAgentRequestToolHTTPTool$outboundSchema.parse(
      runAgentRequestToolHTTPTool,
    ),
  );
}

export function runAgentRequestToolHTTPToolFromJSON(
  jsonString: string,
): SafeParseResult<RunAgentRequestToolHTTPTool, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => RunAgentRequestToolHTTPTool$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RunAgentRequestToolHTTPTool' from JSON`,
  );
}

/** @internal */
export const StreamRunAgentRunAgentRequestToolAgentsRequestRequestBodySettingsTools11Type$inboundSchema:
  z.ZodNativeEnum<
    typeof StreamRunAgentRunAgentRequestToolAgentsRequestRequestBodySettingsTools11Type
  > = z.nativeEnum(
    StreamRunAgentRunAgentRequestToolAgentsRequestRequestBodySettingsTools11Type,
  );

/** @internal */
export const StreamRunAgentRunAgentRequestToolAgentsRequestRequestBodySettingsTools11Type$outboundSchema:
  z.ZodNativeEnum<
    typeof StreamRunAgentRunAgentRequestToolAgentsRequestRequestBodySettingsTools11Type
  > =
    StreamRunAgentRunAgentRequestToolAgentsRequestRequestBodySettingsTools11Type$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace StreamRunAgentRunAgentRequestToolAgentsRequestRequestBodySettingsTools11Type$ {
  /** @deprecated use `StreamRunAgentRunAgentRequestToolAgentsRequestRequestBodySettingsTools11Type$inboundSchema` instead. */
  export const inboundSchema =
    StreamRunAgentRunAgentRequestToolAgentsRequestRequestBodySettingsTools11Type$inboundSchema;
  /** @deprecated use `StreamRunAgentRunAgentRequestToolAgentsRequestRequestBodySettingsTools11Type$outboundSchema` instead. */
  export const outboundSchema =
    StreamRunAgentRunAgentRequestToolAgentsRequestRequestBodySettingsTools11Type$outboundSchema;
}

/** @internal */
export const RunAgentRequestToolCurrentDateTool$inboundSchema: z.ZodType<
  RunAgentRequestToolCurrentDateTool,
  z.ZodTypeDef,
  unknown
> = z.object({
  type:
    StreamRunAgentRunAgentRequestToolAgentsRequestRequestBodySettingsTools11Type$inboundSchema,
  requires_approval: z.boolean().default(false),
}).transform((v) => {
  return remap$(v, {
    "requires_approval": "requiresApproval",
  });
});

/** @internal */
export type RunAgentRequestToolCurrentDateTool$Outbound = {
  type: string;
  requires_approval: boolean;
};

/** @internal */
export const RunAgentRequestToolCurrentDateTool$outboundSchema: z.ZodType<
  RunAgentRequestToolCurrentDateTool$Outbound,
  z.ZodTypeDef,
  RunAgentRequestToolCurrentDateTool
> = z.object({
  type:
    StreamRunAgentRunAgentRequestToolAgentsRequestRequestBodySettingsTools11Type$outboundSchema,
  requiresApproval: z.boolean().default(false),
}).transform((v) => {
  return remap$(v, {
    requiresApproval: "requires_approval",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RunAgentRequestToolCurrentDateTool$ {
  /** @deprecated use `RunAgentRequestToolCurrentDateTool$inboundSchema` instead. */
  export const inboundSchema = RunAgentRequestToolCurrentDateTool$inboundSchema;
  /** @deprecated use `RunAgentRequestToolCurrentDateTool$outboundSchema` instead. */
  export const outboundSchema =
    RunAgentRequestToolCurrentDateTool$outboundSchema;
  /** @deprecated use `RunAgentRequestToolCurrentDateTool$Outbound` instead. */
  export type Outbound = RunAgentRequestToolCurrentDateTool$Outbound;
}

export function runAgentRequestToolCurrentDateToolToJSON(
  runAgentRequestToolCurrentDateTool: RunAgentRequestToolCurrentDateTool,
): string {
  return JSON.stringify(
    RunAgentRequestToolCurrentDateTool$outboundSchema.parse(
      runAgentRequestToolCurrentDateTool,
    ),
  );
}

export function runAgentRequestToolCurrentDateToolFromJSON(
  jsonString: string,
): SafeParseResult<RunAgentRequestToolCurrentDateTool, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      RunAgentRequestToolCurrentDateTool$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RunAgentRequestToolCurrentDateTool' from JSON`,
  );
}

/** @internal */
export const StreamRunAgentRunAgentRequestToolAgentsRequestRequestBodySettingsTools10Type$inboundSchema:
  z.ZodNativeEnum<
    typeof StreamRunAgentRunAgentRequestToolAgentsRequestRequestBodySettingsTools10Type
  > = z.nativeEnum(
    StreamRunAgentRunAgentRequestToolAgentsRequestRequestBodySettingsTools10Type,
  );

/** @internal */
export const StreamRunAgentRunAgentRequestToolAgentsRequestRequestBodySettingsTools10Type$outboundSchema:
  z.ZodNativeEnum<
    typeof StreamRunAgentRunAgentRequestToolAgentsRequestRequestBodySettingsTools10Type
  > =
    StreamRunAgentRunAgentRequestToolAgentsRequestRequestBodySettingsTools10Type$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace StreamRunAgentRunAgentRequestToolAgentsRequestRequestBodySettingsTools10Type$ {
  /** @deprecated use `StreamRunAgentRunAgentRequestToolAgentsRequestRequestBodySettingsTools10Type$inboundSchema` instead. */
  export const inboundSchema =
    StreamRunAgentRunAgentRequestToolAgentsRequestRequestBodySettingsTools10Type$inboundSchema;
  /** @deprecated use `StreamRunAgentRunAgentRequestToolAgentsRequestRequestBodySettingsTools10Type$outboundSchema` instead. */
  export const outboundSchema =
    StreamRunAgentRunAgentRequestToolAgentsRequestRequestBodySettingsTools10Type$outboundSchema;
}

/** @internal */
export const RunAgentRequestToolQueryKnowledgeBaseTool$inboundSchema: z.ZodType<
  RunAgentRequestToolQueryKnowledgeBaseTool,
  z.ZodTypeDef,
  unknown
> = z.object({
  type:
    StreamRunAgentRunAgentRequestToolAgentsRequestRequestBodySettingsTools10Type$inboundSchema,
  requires_approval: z.boolean().default(false),
}).transform((v) => {
  return remap$(v, {
    "requires_approval": "requiresApproval",
  });
});

/** @internal */
export type RunAgentRequestToolQueryKnowledgeBaseTool$Outbound = {
  type: string;
  requires_approval: boolean;
};

/** @internal */
export const RunAgentRequestToolQueryKnowledgeBaseTool$outboundSchema:
  z.ZodType<
    RunAgentRequestToolQueryKnowledgeBaseTool$Outbound,
    z.ZodTypeDef,
    RunAgentRequestToolQueryKnowledgeBaseTool
  > = z.object({
    type:
      StreamRunAgentRunAgentRequestToolAgentsRequestRequestBodySettingsTools10Type$outboundSchema,
    requiresApproval: z.boolean().default(false),
  }).transform((v) => {
    return remap$(v, {
      requiresApproval: "requires_approval",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RunAgentRequestToolQueryKnowledgeBaseTool$ {
  /** @deprecated use `RunAgentRequestToolQueryKnowledgeBaseTool$inboundSchema` instead. */
  export const inboundSchema =
    RunAgentRequestToolQueryKnowledgeBaseTool$inboundSchema;
  /** @deprecated use `RunAgentRequestToolQueryKnowledgeBaseTool$outboundSchema` instead. */
  export const outboundSchema =
    RunAgentRequestToolQueryKnowledgeBaseTool$outboundSchema;
  /** @deprecated use `RunAgentRequestToolQueryKnowledgeBaseTool$Outbound` instead. */
  export type Outbound = RunAgentRequestToolQueryKnowledgeBaseTool$Outbound;
}

export function runAgentRequestToolQueryKnowledgeBaseToolToJSON(
  runAgentRequestToolQueryKnowledgeBaseTool:
    RunAgentRequestToolQueryKnowledgeBaseTool,
): string {
  return JSON.stringify(
    RunAgentRequestToolQueryKnowledgeBaseTool$outboundSchema.parse(
      runAgentRequestToolQueryKnowledgeBaseTool,
    ),
  );
}

export function runAgentRequestToolQueryKnowledgeBaseToolFromJSON(
  jsonString: string,
): SafeParseResult<
  RunAgentRequestToolQueryKnowledgeBaseTool,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      RunAgentRequestToolQueryKnowledgeBaseTool$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'RunAgentRequestToolQueryKnowledgeBaseTool' from JSON`,
  );
}

/** @internal */
export const StreamRunAgentRunAgentRequestToolAgentsRequestRequestBodySettingsTools9Type$inboundSchema:
  z.ZodNativeEnum<
    typeof StreamRunAgentRunAgentRequestToolAgentsRequestRequestBodySettingsTools9Type
  > = z.nativeEnum(
    StreamRunAgentRunAgentRequestToolAgentsRequestRequestBodySettingsTools9Type,
  );

/** @internal */
export const StreamRunAgentRunAgentRequestToolAgentsRequestRequestBodySettingsTools9Type$outboundSchema:
  z.ZodNativeEnum<
    typeof StreamRunAgentRunAgentRequestToolAgentsRequestRequestBodySettingsTools9Type
  > =
    StreamRunAgentRunAgentRequestToolAgentsRequestRequestBodySettingsTools9Type$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace StreamRunAgentRunAgentRequestToolAgentsRequestRequestBodySettingsTools9Type$ {
  /** @deprecated use `StreamRunAgentRunAgentRequestToolAgentsRequestRequestBodySettingsTools9Type$inboundSchema` instead. */
  export const inboundSchema =
    StreamRunAgentRunAgentRequestToolAgentsRequestRequestBodySettingsTools9Type$inboundSchema;
  /** @deprecated use `StreamRunAgentRunAgentRequestToolAgentsRequestRequestBodySettingsTools9Type$outboundSchema` instead. */
  export const outboundSchema =
    StreamRunAgentRunAgentRequestToolAgentsRequestRequestBodySettingsTools9Type$outboundSchema;
}

/** @internal */
export const RunAgentRequestToolRetrieveKnowledgeBasesTool$inboundSchema:
  z.ZodType<
    RunAgentRequestToolRetrieveKnowledgeBasesTool,
    z.ZodTypeDef,
    unknown
  > = z.object({
    type:
      StreamRunAgentRunAgentRequestToolAgentsRequestRequestBodySettingsTools9Type$inboundSchema,
    requires_approval: z.boolean().default(false),
  }).transform((v) => {
    return remap$(v, {
      "requires_approval": "requiresApproval",
    });
  });

/** @internal */
export type RunAgentRequestToolRetrieveKnowledgeBasesTool$Outbound = {
  type: string;
  requires_approval: boolean;
};

/** @internal */
export const RunAgentRequestToolRetrieveKnowledgeBasesTool$outboundSchema:
  z.ZodType<
    RunAgentRequestToolRetrieveKnowledgeBasesTool$Outbound,
    z.ZodTypeDef,
    RunAgentRequestToolRetrieveKnowledgeBasesTool
  > = z.object({
    type:
      StreamRunAgentRunAgentRequestToolAgentsRequestRequestBodySettingsTools9Type$outboundSchema,
    requiresApproval: z.boolean().default(false),
  }).transform((v) => {
    return remap$(v, {
      requiresApproval: "requires_approval",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RunAgentRequestToolRetrieveKnowledgeBasesTool$ {
  /** @deprecated use `RunAgentRequestToolRetrieveKnowledgeBasesTool$inboundSchema` instead. */
  export const inboundSchema =
    RunAgentRequestToolRetrieveKnowledgeBasesTool$inboundSchema;
  /** @deprecated use `RunAgentRequestToolRetrieveKnowledgeBasesTool$outboundSchema` instead. */
  export const outboundSchema =
    RunAgentRequestToolRetrieveKnowledgeBasesTool$outboundSchema;
  /** @deprecated use `RunAgentRequestToolRetrieveKnowledgeBasesTool$Outbound` instead. */
  export type Outbound = RunAgentRequestToolRetrieveKnowledgeBasesTool$Outbound;
}

export function runAgentRequestToolRetrieveKnowledgeBasesToolToJSON(
  runAgentRequestToolRetrieveKnowledgeBasesTool:
    RunAgentRequestToolRetrieveKnowledgeBasesTool,
): string {
  return JSON.stringify(
    RunAgentRequestToolRetrieveKnowledgeBasesTool$outboundSchema.parse(
      runAgentRequestToolRetrieveKnowledgeBasesTool,
    ),
  );
}

export function runAgentRequestToolRetrieveKnowledgeBasesToolFromJSON(
  jsonString: string,
): SafeParseResult<
  RunAgentRequestToolRetrieveKnowledgeBasesTool,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      RunAgentRequestToolRetrieveKnowledgeBasesTool$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'RunAgentRequestToolRetrieveKnowledgeBasesTool' from JSON`,
  );
}

/** @internal */
export const StreamRunAgentRunAgentRequestToolAgentsRequestRequestBodySettingsTools8Type$inboundSchema:
  z.ZodNativeEnum<
    typeof StreamRunAgentRunAgentRequestToolAgentsRequestRequestBodySettingsTools8Type
  > = z.nativeEnum(
    StreamRunAgentRunAgentRequestToolAgentsRequestRequestBodySettingsTools8Type,
  );

/** @internal */
export const StreamRunAgentRunAgentRequestToolAgentsRequestRequestBodySettingsTools8Type$outboundSchema:
  z.ZodNativeEnum<
    typeof StreamRunAgentRunAgentRequestToolAgentsRequestRequestBodySettingsTools8Type
  > =
    StreamRunAgentRunAgentRequestToolAgentsRequestRequestBodySettingsTools8Type$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace StreamRunAgentRunAgentRequestToolAgentsRequestRequestBodySettingsTools8Type$ {
  /** @deprecated use `StreamRunAgentRunAgentRequestToolAgentsRequestRequestBodySettingsTools8Type$inboundSchema` instead. */
  export const inboundSchema =
    StreamRunAgentRunAgentRequestToolAgentsRequestRequestBodySettingsTools8Type$inboundSchema;
  /** @deprecated use `StreamRunAgentRunAgentRequestToolAgentsRequestRequestBodySettingsTools8Type$outboundSchema` instead. */
  export const outboundSchema =
    StreamRunAgentRunAgentRequestToolAgentsRequestRequestBodySettingsTools8Type$outboundSchema;
}

/** @internal */
export const RunAgentRequestToolDeleteMemoryStoreTool$inboundSchema: z.ZodType<
  RunAgentRequestToolDeleteMemoryStoreTool,
  z.ZodTypeDef,
  unknown
> = z.object({
  type:
    StreamRunAgentRunAgentRequestToolAgentsRequestRequestBodySettingsTools8Type$inboundSchema,
  requires_approval: z.boolean().default(false),
}).transform((v) => {
  return remap$(v, {
    "requires_approval": "requiresApproval",
  });
});

/** @internal */
export type RunAgentRequestToolDeleteMemoryStoreTool$Outbound = {
  type: string;
  requires_approval: boolean;
};

/** @internal */
export const RunAgentRequestToolDeleteMemoryStoreTool$outboundSchema: z.ZodType<
  RunAgentRequestToolDeleteMemoryStoreTool$Outbound,
  z.ZodTypeDef,
  RunAgentRequestToolDeleteMemoryStoreTool
> = z.object({
  type:
    StreamRunAgentRunAgentRequestToolAgentsRequestRequestBodySettingsTools8Type$outboundSchema,
  requiresApproval: z.boolean().default(false),
}).transform((v) => {
  return remap$(v, {
    requiresApproval: "requires_approval",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RunAgentRequestToolDeleteMemoryStoreTool$ {
  /** @deprecated use `RunAgentRequestToolDeleteMemoryStoreTool$inboundSchema` instead. */
  export const inboundSchema =
    RunAgentRequestToolDeleteMemoryStoreTool$inboundSchema;
  /** @deprecated use `RunAgentRequestToolDeleteMemoryStoreTool$outboundSchema` instead. */
  export const outboundSchema =
    RunAgentRequestToolDeleteMemoryStoreTool$outboundSchema;
  /** @deprecated use `RunAgentRequestToolDeleteMemoryStoreTool$Outbound` instead. */
  export type Outbound = RunAgentRequestToolDeleteMemoryStoreTool$Outbound;
}

export function runAgentRequestToolDeleteMemoryStoreToolToJSON(
  runAgentRequestToolDeleteMemoryStoreTool:
    RunAgentRequestToolDeleteMemoryStoreTool,
): string {
  return JSON.stringify(
    RunAgentRequestToolDeleteMemoryStoreTool$outboundSchema.parse(
      runAgentRequestToolDeleteMemoryStoreTool,
    ),
  );
}

export function runAgentRequestToolDeleteMemoryStoreToolFromJSON(
  jsonString: string,
): SafeParseResult<
  RunAgentRequestToolDeleteMemoryStoreTool,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      RunAgentRequestToolDeleteMemoryStoreTool$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'RunAgentRequestToolDeleteMemoryStoreTool' from JSON`,
  );
}

/** @internal */
export const StreamRunAgentRunAgentRequestToolAgentsRequestRequestBodySettingsTools7Type$inboundSchema:
  z.ZodNativeEnum<
    typeof StreamRunAgentRunAgentRequestToolAgentsRequestRequestBodySettingsTools7Type
  > = z.nativeEnum(
    StreamRunAgentRunAgentRequestToolAgentsRequestRequestBodySettingsTools7Type,
  );

/** @internal */
export const StreamRunAgentRunAgentRequestToolAgentsRequestRequestBodySettingsTools7Type$outboundSchema:
  z.ZodNativeEnum<
    typeof StreamRunAgentRunAgentRequestToolAgentsRequestRequestBodySettingsTools7Type
  > =
    StreamRunAgentRunAgentRequestToolAgentsRequestRequestBodySettingsTools7Type$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace StreamRunAgentRunAgentRequestToolAgentsRequestRequestBodySettingsTools7Type$ {
  /** @deprecated use `StreamRunAgentRunAgentRequestToolAgentsRequestRequestBodySettingsTools7Type$inboundSchema` instead. */
  export const inboundSchema =
    StreamRunAgentRunAgentRequestToolAgentsRequestRequestBodySettingsTools7Type$inboundSchema;
  /** @deprecated use `StreamRunAgentRunAgentRequestToolAgentsRequestRequestBodySettingsTools7Type$outboundSchema` instead. */
  export const outboundSchema =
    StreamRunAgentRunAgentRequestToolAgentsRequestRequestBodySettingsTools7Type$outboundSchema;
}

/** @internal */
export const RunAgentRequestToolRetrieveMemoryStoresTool$inboundSchema:
  z.ZodType<
    RunAgentRequestToolRetrieveMemoryStoresTool,
    z.ZodTypeDef,
    unknown
  > = z.object({
    type:
      StreamRunAgentRunAgentRequestToolAgentsRequestRequestBodySettingsTools7Type$inboundSchema,
    requires_approval: z.boolean().default(false),
  }).transform((v) => {
    return remap$(v, {
      "requires_approval": "requiresApproval",
    });
  });

/** @internal */
export type RunAgentRequestToolRetrieveMemoryStoresTool$Outbound = {
  type: string;
  requires_approval: boolean;
};

/** @internal */
export const RunAgentRequestToolRetrieveMemoryStoresTool$outboundSchema:
  z.ZodType<
    RunAgentRequestToolRetrieveMemoryStoresTool$Outbound,
    z.ZodTypeDef,
    RunAgentRequestToolRetrieveMemoryStoresTool
  > = z.object({
    type:
      StreamRunAgentRunAgentRequestToolAgentsRequestRequestBodySettingsTools7Type$outboundSchema,
    requiresApproval: z.boolean().default(false),
  }).transform((v) => {
    return remap$(v, {
      requiresApproval: "requires_approval",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RunAgentRequestToolRetrieveMemoryStoresTool$ {
  /** @deprecated use `RunAgentRequestToolRetrieveMemoryStoresTool$inboundSchema` instead. */
  export const inboundSchema =
    RunAgentRequestToolRetrieveMemoryStoresTool$inboundSchema;
  /** @deprecated use `RunAgentRequestToolRetrieveMemoryStoresTool$outboundSchema` instead. */
  export const outboundSchema =
    RunAgentRequestToolRetrieveMemoryStoresTool$outboundSchema;
  /** @deprecated use `RunAgentRequestToolRetrieveMemoryStoresTool$Outbound` instead. */
  export type Outbound = RunAgentRequestToolRetrieveMemoryStoresTool$Outbound;
}

export function runAgentRequestToolRetrieveMemoryStoresToolToJSON(
  runAgentRequestToolRetrieveMemoryStoresTool:
    RunAgentRequestToolRetrieveMemoryStoresTool,
): string {
  return JSON.stringify(
    RunAgentRequestToolRetrieveMemoryStoresTool$outboundSchema.parse(
      runAgentRequestToolRetrieveMemoryStoresTool,
    ),
  );
}

export function runAgentRequestToolRetrieveMemoryStoresToolFromJSON(
  jsonString: string,
): SafeParseResult<
  RunAgentRequestToolRetrieveMemoryStoresTool,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      RunAgentRequestToolRetrieveMemoryStoresTool$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'RunAgentRequestToolRetrieveMemoryStoresTool' from JSON`,
  );
}

/** @internal */
export const StreamRunAgentRunAgentRequestToolAgentsRequestRequestBodySettingsToolsType$inboundSchema:
  z.ZodNativeEnum<
    typeof StreamRunAgentRunAgentRequestToolAgentsRequestRequestBodySettingsToolsType
  > = z.nativeEnum(
    StreamRunAgentRunAgentRequestToolAgentsRequestRequestBodySettingsToolsType,
  );

/** @internal */
export const StreamRunAgentRunAgentRequestToolAgentsRequestRequestBodySettingsToolsType$outboundSchema:
  z.ZodNativeEnum<
    typeof StreamRunAgentRunAgentRequestToolAgentsRequestRequestBodySettingsToolsType
  > =
    StreamRunAgentRunAgentRequestToolAgentsRequestRequestBodySettingsToolsType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace StreamRunAgentRunAgentRequestToolAgentsRequestRequestBodySettingsToolsType$ {
  /** @deprecated use `StreamRunAgentRunAgentRequestToolAgentsRequestRequestBodySettingsToolsType$inboundSchema` instead. */
  export const inboundSchema =
    StreamRunAgentRunAgentRequestToolAgentsRequestRequestBodySettingsToolsType$inboundSchema;
  /** @deprecated use `StreamRunAgentRunAgentRequestToolAgentsRequestRequestBodySettingsToolsType$outboundSchema` instead. */
  export const outboundSchema =
    StreamRunAgentRunAgentRequestToolAgentsRequestRequestBodySettingsToolsType$outboundSchema;
}

/** @internal */
export const RunAgentRequestToolWriteMemoryStoreTool$inboundSchema: z.ZodType<
  RunAgentRequestToolWriteMemoryStoreTool,
  z.ZodTypeDef,
  unknown
> = z.object({
  type:
    StreamRunAgentRunAgentRequestToolAgentsRequestRequestBodySettingsToolsType$inboundSchema,
  requires_approval: z.boolean().default(false),
}).transform((v) => {
  return remap$(v, {
    "requires_approval": "requiresApproval",
  });
});

/** @internal */
export type RunAgentRequestToolWriteMemoryStoreTool$Outbound = {
  type: string;
  requires_approval: boolean;
};

/** @internal */
export const RunAgentRequestToolWriteMemoryStoreTool$outboundSchema: z.ZodType<
  RunAgentRequestToolWriteMemoryStoreTool$Outbound,
  z.ZodTypeDef,
  RunAgentRequestToolWriteMemoryStoreTool
> = z.object({
  type:
    StreamRunAgentRunAgentRequestToolAgentsRequestRequestBodySettingsToolsType$outboundSchema,
  requiresApproval: z.boolean().default(false),
}).transform((v) => {
  return remap$(v, {
    requiresApproval: "requires_approval",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RunAgentRequestToolWriteMemoryStoreTool$ {
  /** @deprecated use `RunAgentRequestToolWriteMemoryStoreTool$inboundSchema` instead. */
  export const inboundSchema =
    RunAgentRequestToolWriteMemoryStoreTool$inboundSchema;
  /** @deprecated use `RunAgentRequestToolWriteMemoryStoreTool$outboundSchema` instead. */
  export const outboundSchema =
    RunAgentRequestToolWriteMemoryStoreTool$outboundSchema;
  /** @deprecated use `RunAgentRequestToolWriteMemoryStoreTool$Outbound` instead. */
  export type Outbound = RunAgentRequestToolWriteMemoryStoreTool$Outbound;
}

export function runAgentRequestToolWriteMemoryStoreToolToJSON(
  runAgentRequestToolWriteMemoryStoreTool:
    RunAgentRequestToolWriteMemoryStoreTool,
): string {
  return JSON.stringify(
    RunAgentRequestToolWriteMemoryStoreTool$outboundSchema.parse(
      runAgentRequestToolWriteMemoryStoreTool,
    ),
  );
}

export function runAgentRequestToolWriteMemoryStoreToolFromJSON(
  jsonString: string,
): SafeParseResult<
  RunAgentRequestToolWriteMemoryStoreTool,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      RunAgentRequestToolWriteMemoryStoreTool$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'RunAgentRequestToolWriteMemoryStoreTool' from JSON`,
  );
}

/** @internal */
export const StreamRunAgentRunAgentRequestToolAgentsRequestRequestBodySettingsType$inboundSchema:
  z.ZodNativeEnum<
    typeof StreamRunAgentRunAgentRequestToolAgentsRequestRequestBodySettingsType
  > = z.nativeEnum(
    StreamRunAgentRunAgentRequestToolAgentsRequestRequestBodySettingsType,
  );

/** @internal */
export const StreamRunAgentRunAgentRequestToolAgentsRequestRequestBodySettingsType$outboundSchema:
  z.ZodNativeEnum<
    typeof StreamRunAgentRunAgentRequestToolAgentsRequestRequestBodySettingsType
  > =
    StreamRunAgentRunAgentRequestToolAgentsRequestRequestBodySettingsType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace StreamRunAgentRunAgentRequestToolAgentsRequestRequestBodySettingsType$ {
  /** @deprecated use `StreamRunAgentRunAgentRequestToolAgentsRequestRequestBodySettingsType$inboundSchema` instead. */
  export const inboundSchema =
    StreamRunAgentRunAgentRequestToolAgentsRequestRequestBodySettingsType$inboundSchema;
  /** @deprecated use `StreamRunAgentRunAgentRequestToolAgentsRequestRequestBodySettingsType$outboundSchema` instead. */
  export const outboundSchema =
    StreamRunAgentRunAgentRequestToolAgentsRequestRequestBodySettingsType$outboundSchema;
}

/** @internal */
export const RunAgentRequestToolQueryMemoryStoreTool$inboundSchema: z.ZodType<
  RunAgentRequestToolQueryMemoryStoreTool,
  z.ZodTypeDef,
  unknown
> = z.object({
  type:
    StreamRunAgentRunAgentRequestToolAgentsRequestRequestBodySettingsType$inboundSchema,
  requires_approval: z.boolean().default(false),
}).transform((v) => {
  return remap$(v, {
    "requires_approval": "requiresApproval",
  });
});

/** @internal */
export type RunAgentRequestToolQueryMemoryStoreTool$Outbound = {
  type: string;
  requires_approval: boolean;
};

/** @internal */
export const RunAgentRequestToolQueryMemoryStoreTool$outboundSchema: z.ZodType<
  RunAgentRequestToolQueryMemoryStoreTool$Outbound,
  z.ZodTypeDef,
  RunAgentRequestToolQueryMemoryStoreTool
> = z.object({
  type:
    StreamRunAgentRunAgentRequestToolAgentsRequestRequestBodySettingsType$outboundSchema,
  requiresApproval: z.boolean().default(false),
}).transform((v) => {
  return remap$(v, {
    requiresApproval: "requires_approval",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RunAgentRequestToolQueryMemoryStoreTool$ {
  /** @deprecated use `RunAgentRequestToolQueryMemoryStoreTool$inboundSchema` instead. */
  export const inboundSchema =
    RunAgentRequestToolQueryMemoryStoreTool$inboundSchema;
  /** @deprecated use `RunAgentRequestToolQueryMemoryStoreTool$outboundSchema` instead. */
  export const outboundSchema =
    RunAgentRequestToolQueryMemoryStoreTool$outboundSchema;
  /** @deprecated use `RunAgentRequestToolQueryMemoryStoreTool$Outbound` instead. */
  export type Outbound = RunAgentRequestToolQueryMemoryStoreTool$Outbound;
}

export function runAgentRequestToolQueryMemoryStoreToolToJSON(
  runAgentRequestToolQueryMemoryStoreTool:
    RunAgentRequestToolQueryMemoryStoreTool,
): string {
  return JSON.stringify(
    RunAgentRequestToolQueryMemoryStoreTool$outboundSchema.parse(
      runAgentRequestToolQueryMemoryStoreTool,
    ),
  );
}

export function runAgentRequestToolQueryMemoryStoreToolFromJSON(
  jsonString: string,
): SafeParseResult<
  RunAgentRequestToolQueryMemoryStoreTool,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      RunAgentRequestToolQueryMemoryStoreTool$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'RunAgentRequestToolQueryMemoryStoreTool' from JSON`,
  );
}

/** @internal */
export const StreamRunAgentRunAgentRequestToolAgentsRequestRequestBodyType$inboundSchema:
  z.ZodNativeEnum<
    typeof StreamRunAgentRunAgentRequestToolAgentsRequestRequestBodyType
  > = z.nativeEnum(
    StreamRunAgentRunAgentRequestToolAgentsRequestRequestBodyType,
  );

/** @internal */
export const StreamRunAgentRunAgentRequestToolAgentsRequestRequestBodyType$outboundSchema:
  z.ZodNativeEnum<
    typeof StreamRunAgentRunAgentRequestToolAgentsRequestRequestBodyType
  > =
    StreamRunAgentRunAgentRequestToolAgentsRequestRequestBodyType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace StreamRunAgentRunAgentRequestToolAgentsRequestRequestBodyType$ {
  /** @deprecated use `StreamRunAgentRunAgentRequestToolAgentsRequestRequestBodyType$inboundSchema` instead. */
  export const inboundSchema =
    StreamRunAgentRunAgentRequestToolAgentsRequestRequestBodyType$inboundSchema;
  /** @deprecated use `StreamRunAgentRunAgentRequestToolAgentsRequestRequestBodyType$outboundSchema` instead. */
  export const outboundSchema =
    StreamRunAgentRunAgentRequestToolAgentsRequestRequestBodyType$outboundSchema;
}

/** @internal */
export const RunAgentRequestToolRetrieveAgentsTool$inboundSchema: z.ZodType<
  RunAgentRequestToolRetrieveAgentsTool,
  z.ZodTypeDef,
  unknown
> = z.object({
  type:
    StreamRunAgentRunAgentRequestToolAgentsRequestRequestBodyType$inboundSchema,
  requires_approval: z.boolean().default(false),
}).transform((v) => {
  return remap$(v, {
    "requires_approval": "requiresApproval",
  });
});

/** @internal */
export type RunAgentRequestToolRetrieveAgentsTool$Outbound = {
  type: string;
  requires_approval: boolean;
};

/** @internal */
export const RunAgentRequestToolRetrieveAgentsTool$outboundSchema: z.ZodType<
  RunAgentRequestToolRetrieveAgentsTool$Outbound,
  z.ZodTypeDef,
  RunAgentRequestToolRetrieveAgentsTool
> = z.object({
  type:
    StreamRunAgentRunAgentRequestToolAgentsRequestRequestBodyType$outboundSchema,
  requiresApproval: z.boolean().default(false),
}).transform((v) => {
  return remap$(v, {
    requiresApproval: "requires_approval",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RunAgentRequestToolRetrieveAgentsTool$ {
  /** @deprecated use `RunAgentRequestToolRetrieveAgentsTool$inboundSchema` instead. */
  export const inboundSchema =
    RunAgentRequestToolRetrieveAgentsTool$inboundSchema;
  /** @deprecated use `RunAgentRequestToolRetrieveAgentsTool$outboundSchema` instead. */
  export const outboundSchema =
    RunAgentRequestToolRetrieveAgentsTool$outboundSchema;
  /** @deprecated use `RunAgentRequestToolRetrieveAgentsTool$Outbound` instead. */
  export type Outbound = RunAgentRequestToolRetrieveAgentsTool$Outbound;
}

export function runAgentRequestToolRetrieveAgentsToolToJSON(
  runAgentRequestToolRetrieveAgentsTool: RunAgentRequestToolRetrieveAgentsTool,
): string {
  return JSON.stringify(
    RunAgentRequestToolRetrieveAgentsTool$outboundSchema.parse(
      runAgentRequestToolRetrieveAgentsTool,
    ),
  );
}

export function runAgentRequestToolRetrieveAgentsToolFromJSON(
  jsonString: string,
): SafeParseResult<RunAgentRequestToolRetrieveAgentsTool, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      RunAgentRequestToolRetrieveAgentsTool$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RunAgentRequestToolRetrieveAgentsTool' from JSON`,
  );
}

/** @internal */
export const StreamRunAgentRunAgentRequestToolAgentsRequestType$inboundSchema:
  z.ZodNativeEnum<typeof StreamRunAgentRunAgentRequestToolAgentsRequestType> = z
    .nativeEnum(StreamRunAgentRunAgentRequestToolAgentsRequestType);

/** @internal */
export const StreamRunAgentRunAgentRequestToolAgentsRequestType$outboundSchema:
  z.ZodNativeEnum<typeof StreamRunAgentRunAgentRequestToolAgentsRequestType> =
    StreamRunAgentRunAgentRequestToolAgentsRequestType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace StreamRunAgentRunAgentRequestToolAgentsRequestType$ {
  /** @deprecated use `StreamRunAgentRunAgentRequestToolAgentsRequestType$inboundSchema` instead. */
  export const inboundSchema =
    StreamRunAgentRunAgentRequestToolAgentsRequestType$inboundSchema;
  /** @deprecated use `StreamRunAgentRunAgentRequestToolAgentsRequestType$outboundSchema` instead. */
  export const outboundSchema =
    StreamRunAgentRunAgentRequestToolAgentsRequestType$outboundSchema;
}

/** @internal */
export const RunAgentRequestToolCallSubAgentTool$inboundSchema: z.ZodType<
  RunAgentRequestToolCallSubAgentTool,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: StreamRunAgentRunAgentRequestToolAgentsRequestType$inboundSchema,
  requires_approval: z.boolean().default(false),
}).transform((v) => {
  return remap$(v, {
    "requires_approval": "requiresApproval",
  });
});

/** @internal */
export type RunAgentRequestToolCallSubAgentTool$Outbound = {
  type: string;
  requires_approval: boolean;
};

/** @internal */
export const RunAgentRequestToolCallSubAgentTool$outboundSchema: z.ZodType<
  RunAgentRequestToolCallSubAgentTool$Outbound,
  z.ZodTypeDef,
  RunAgentRequestToolCallSubAgentTool
> = z.object({
  type: StreamRunAgentRunAgentRequestToolAgentsRequestType$outboundSchema,
  requiresApproval: z.boolean().default(false),
}).transform((v) => {
  return remap$(v, {
    requiresApproval: "requires_approval",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RunAgentRequestToolCallSubAgentTool$ {
  /** @deprecated use `RunAgentRequestToolCallSubAgentTool$inboundSchema` instead. */
  export const inboundSchema =
    RunAgentRequestToolCallSubAgentTool$inboundSchema;
  /** @deprecated use `RunAgentRequestToolCallSubAgentTool$outboundSchema` instead. */
  export const outboundSchema =
    RunAgentRequestToolCallSubAgentTool$outboundSchema;
  /** @deprecated use `RunAgentRequestToolCallSubAgentTool$Outbound` instead. */
  export type Outbound = RunAgentRequestToolCallSubAgentTool$Outbound;
}

export function runAgentRequestToolCallSubAgentToolToJSON(
  runAgentRequestToolCallSubAgentTool: RunAgentRequestToolCallSubAgentTool,
): string {
  return JSON.stringify(
    RunAgentRequestToolCallSubAgentTool$outboundSchema.parse(
      runAgentRequestToolCallSubAgentTool,
    ),
  );
}

export function runAgentRequestToolCallSubAgentToolFromJSON(
  jsonString: string,
): SafeParseResult<RunAgentRequestToolCallSubAgentTool, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      RunAgentRequestToolCallSubAgentTool$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RunAgentRequestToolCallSubAgentTool' from JSON`,
  );
}

/** @internal */
export const StreamRunAgentRunAgentRequestToolAgentsType$inboundSchema:
  z.ZodNativeEnum<typeof StreamRunAgentRunAgentRequestToolAgentsType> = z
    .nativeEnum(StreamRunAgentRunAgentRequestToolAgentsType);

/** @internal */
export const StreamRunAgentRunAgentRequestToolAgentsType$outboundSchema:
  z.ZodNativeEnum<typeof StreamRunAgentRunAgentRequestToolAgentsType> =
    StreamRunAgentRunAgentRequestToolAgentsType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace StreamRunAgentRunAgentRequestToolAgentsType$ {
  /** @deprecated use `StreamRunAgentRunAgentRequestToolAgentsType$inboundSchema` instead. */
  export const inboundSchema =
    StreamRunAgentRunAgentRequestToolAgentsType$inboundSchema;
  /** @deprecated use `StreamRunAgentRunAgentRequestToolAgentsType$outboundSchema` instead. */
  export const outboundSchema =
    StreamRunAgentRunAgentRequestToolAgentsType$outboundSchema;
}

/** @internal */
export const RunAgentRequestToolWebScraperTool$inboundSchema: z.ZodType<
  RunAgentRequestToolWebScraperTool,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: StreamRunAgentRunAgentRequestToolAgentsType$inboundSchema,
  requires_approval: z.boolean().default(false),
}).transform((v) => {
  return remap$(v, {
    "requires_approval": "requiresApproval",
  });
});

/** @internal */
export type RunAgentRequestToolWebScraperTool$Outbound = {
  type: string;
  requires_approval: boolean;
};

/** @internal */
export const RunAgentRequestToolWebScraperTool$outboundSchema: z.ZodType<
  RunAgentRequestToolWebScraperTool$Outbound,
  z.ZodTypeDef,
  RunAgentRequestToolWebScraperTool
> = z.object({
  type: StreamRunAgentRunAgentRequestToolAgentsType$outboundSchema,
  requiresApproval: z.boolean().default(false),
}).transform((v) => {
  return remap$(v, {
    requiresApproval: "requires_approval",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RunAgentRequestToolWebScraperTool$ {
  /** @deprecated use `RunAgentRequestToolWebScraperTool$inboundSchema` instead. */
  export const inboundSchema = RunAgentRequestToolWebScraperTool$inboundSchema;
  /** @deprecated use `RunAgentRequestToolWebScraperTool$outboundSchema` instead. */
  export const outboundSchema =
    RunAgentRequestToolWebScraperTool$outboundSchema;
  /** @deprecated use `RunAgentRequestToolWebScraperTool$Outbound` instead. */
  export type Outbound = RunAgentRequestToolWebScraperTool$Outbound;
}

export function runAgentRequestToolWebScraperToolToJSON(
  runAgentRequestToolWebScraperTool: RunAgentRequestToolWebScraperTool,
): string {
  return JSON.stringify(
    RunAgentRequestToolWebScraperTool$outboundSchema.parse(
      runAgentRequestToolWebScraperTool,
    ),
  );
}

export function runAgentRequestToolWebScraperToolFromJSON(
  jsonString: string,
): SafeParseResult<RunAgentRequestToolWebScraperTool, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => RunAgentRequestToolWebScraperTool$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RunAgentRequestToolWebScraperTool' from JSON`,
  );
}

/** @internal */
export const StreamRunAgentRunAgentRequestToolType$inboundSchema:
  z.ZodNativeEnum<typeof StreamRunAgentRunAgentRequestToolType> = z.nativeEnum(
    StreamRunAgentRunAgentRequestToolType,
  );

/** @internal */
export const StreamRunAgentRunAgentRequestToolType$outboundSchema:
  z.ZodNativeEnum<typeof StreamRunAgentRunAgentRequestToolType> =
    StreamRunAgentRunAgentRequestToolType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace StreamRunAgentRunAgentRequestToolType$ {
  /** @deprecated use `StreamRunAgentRunAgentRequestToolType$inboundSchema` instead. */
  export const inboundSchema =
    StreamRunAgentRunAgentRequestToolType$inboundSchema;
  /** @deprecated use `StreamRunAgentRunAgentRequestToolType$outboundSchema` instead. */
  export const outboundSchema =
    StreamRunAgentRunAgentRequestToolType$outboundSchema;
}

/** @internal */
export const RunAgentRequestToolGoogleSearchTool$inboundSchema: z.ZodType<
  RunAgentRequestToolGoogleSearchTool,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: StreamRunAgentRunAgentRequestToolType$inboundSchema,
  requires_approval: z.boolean().default(false),
}).transform((v) => {
  return remap$(v, {
    "requires_approval": "requiresApproval",
  });
});

/** @internal */
export type RunAgentRequestToolGoogleSearchTool$Outbound = {
  type: string;
  requires_approval: boolean;
};

/** @internal */
export const RunAgentRequestToolGoogleSearchTool$outboundSchema: z.ZodType<
  RunAgentRequestToolGoogleSearchTool$Outbound,
  z.ZodTypeDef,
  RunAgentRequestToolGoogleSearchTool
> = z.object({
  type: StreamRunAgentRunAgentRequestToolType$outboundSchema,
  requiresApproval: z.boolean().default(false),
}).transform((v) => {
  return remap$(v, {
    requiresApproval: "requires_approval",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RunAgentRequestToolGoogleSearchTool$ {
  /** @deprecated use `RunAgentRequestToolGoogleSearchTool$inboundSchema` instead. */
  export const inboundSchema =
    RunAgentRequestToolGoogleSearchTool$inboundSchema;
  /** @deprecated use `RunAgentRequestToolGoogleSearchTool$outboundSchema` instead. */
  export const outboundSchema =
    RunAgentRequestToolGoogleSearchTool$outboundSchema;
  /** @deprecated use `RunAgentRequestToolGoogleSearchTool$Outbound` instead. */
  export type Outbound = RunAgentRequestToolGoogleSearchTool$Outbound;
}

export function runAgentRequestToolGoogleSearchToolToJSON(
  runAgentRequestToolGoogleSearchTool: RunAgentRequestToolGoogleSearchTool,
): string {
  return JSON.stringify(
    RunAgentRequestToolGoogleSearchTool$outboundSchema.parse(
      runAgentRequestToolGoogleSearchTool,
    ),
  );
}

export function runAgentRequestToolGoogleSearchToolFromJSON(
  jsonString: string,
): SafeParseResult<RunAgentRequestToolGoogleSearchTool, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      RunAgentRequestToolGoogleSearchTool$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RunAgentRequestToolGoogleSearchTool' from JSON`,
  );
}

/** @internal */
export const StreamRunAgentRunAgentRequestTool$inboundSchema: z.ZodType<
  StreamRunAgentRunAgentRequestTool,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => RunAgentRequestToolHTTPTool$inboundSchema),
  z.lazy(() => RunAgentRequestToolCodeExecutionTool$inboundSchema),
  z.lazy(() => RunAgentRequestToolFunctionTool$inboundSchema),
  z.lazy(() => RunAgentRequestToolGoogleSearchTool$inboundSchema),
  z.lazy(() => RunAgentRequestToolWebScraperTool$inboundSchema),
  z.lazy(() => RunAgentRequestToolCallSubAgentTool$inboundSchema),
  z.lazy(() => RunAgentRequestToolRetrieveAgentsTool$inboundSchema),
  z.lazy(() => RunAgentRequestToolQueryMemoryStoreTool$inboundSchema),
  z.lazy(() => RunAgentRequestToolWriteMemoryStoreTool$inboundSchema),
  z.lazy(() => RunAgentRequestToolRetrieveMemoryStoresTool$inboundSchema),
  z.lazy(() => RunAgentRequestToolDeleteMemoryStoreTool$inboundSchema),
  z.lazy(() => RunAgentRequestToolRetrieveKnowledgeBasesTool$inboundSchema),
  z.lazy(() => RunAgentRequestToolQueryKnowledgeBaseTool$inboundSchema),
  z.lazy(() => RunAgentRequestToolCurrentDateTool$inboundSchema),
]);

/** @internal */
export type StreamRunAgentRunAgentRequestTool$Outbound =
  | RunAgentRequestToolHTTPTool$Outbound
  | RunAgentRequestToolCodeExecutionTool$Outbound
  | RunAgentRequestToolFunctionTool$Outbound
  | RunAgentRequestToolGoogleSearchTool$Outbound
  | RunAgentRequestToolWebScraperTool$Outbound
  | RunAgentRequestToolCallSubAgentTool$Outbound
  | RunAgentRequestToolRetrieveAgentsTool$Outbound
  | RunAgentRequestToolQueryMemoryStoreTool$Outbound
  | RunAgentRequestToolWriteMemoryStoreTool$Outbound
  | RunAgentRequestToolRetrieveMemoryStoresTool$Outbound
  | RunAgentRequestToolDeleteMemoryStoreTool$Outbound
  | RunAgentRequestToolRetrieveKnowledgeBasesTool$Outbound
  | RunAgentRequestToolQueryKnowledgeBaseTool$Outbound
  | RunAgentRequestToolCurrentDateTool$Outbound;

/** @internal */
export const StreamRunAgentRunAgentRequestTool$outboundSchema: z.ZodType<
  StreamRunAgentRunAgentRequestTool$Outbound,
  z.ZodTypeDef,
  StreamRunAgentRunAgentRequestTool
> = z.union([
  z.lazy(() => RunAgentRequestToolHTTPTool$outboundSchema),
  z.lazy(() => RunAgentRequestToolCodeExecutionTool$outboundSchema),
  z.lazy(() => RunAgentRequestToolFunctionTool$outboundSchema),
  z.lazy(() => RunAgentRequestToolGoogleSearchTool$outboundSchema),
  z.lazy(() => RunAgentRequestToolWebScraperTool$outboundSchema),
  z.lazy(() => RunAgentRequestToolCallSubAgentTool$outboundSchema),
  z.lazy(() => RunAgentRequestToolRetrieveAgentsTool$outboundSchema),
  z.lazy(() => RunAgentRequestToolQueryMemoryStoreTool$outboundSchema),
  z.lazy(() => RunAgentRequestToolWriteMemoryStoreTool$outboundSchema),
  z.lazy(() => RunAgentRequestToolRetrieveMemoryStoresTool$outboundSchema),
  z.lazy(() => RunAgentRequestToolDeleteMemoryStoreTool$outboundSchema),
  z.lazy(() => RunAgentRequestToolRetrieveKnowledgeBasesTool$outboundSchema),
  z.lazy(() => RunAgentRequestToolQueryKnowledgeBaseTool$outboundSchema),
  z.lazy(() => RunAgentRequestToolCurrentDateTool$outboundSchema),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace StreamRunAgentRunAgentRequestTool$ {
  /** @deprecated use `StreamRunAgentRunAgentRequestTool$inboundSchema` instead. */
  export const inboundSchema = StreamRunAgentRunAgentRequestTool$inboundSchema;
  /** @deprecated use `StreamRunAgentRunAgentRequestTool$outboundSchema` instead. */
  export const outboundSchema =
    StreamRunAgentRunAgentRequestTool$outboundSchema;
  /** @deprecated use `StreamRunAgentRunAgentRequestTool$Outbound` instead. */
  export type Outbound = StreamRunAgentRunAgentRequestTool$Outbound;
}

export function streamRunAgentRunAgentRequestToolToJSON(
  streamRunAgentRunAgentRequestTool: StreamRunAgentRunAgentRequestTool,
): string {
  return JSON.stringify(
    StreamRunAgentRunAgentRequestTool$outboundSchema.parse(
      streamRunAgentRunAgentRequestTool,
    ),
  );
}

export function streamRunAgentRunAgentRequestToolFromJSON(
  jsonString: string,
): SafeParseResult<StreamRunAgentRunAgentRequestTool, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => StreamRunAgentRunAgentRequestTool$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'StreamRunAgentRunAgentRequestTool' from JSON`,
  );
}

/** @internal */
export const StreamRunAgentToolApprovalRequired$inboundSchema: z.ZodNativeEnum<
  typeof StreamRunAgentToolApprovalRequired
> = z.nativeEnum(StreamRunAgentToolApprovalRequired);

/** @internal */
export const StreamRunAgentToolApprovalRequired$outboundSchema: z.ZodNativeEnum<
  typeof StreamRunAgentToolApprovalRequired
> = StreamRunAgentToolApprovalRequired$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace StreamRunAgentToolApprovalRequired$ {
  /** @deprecated use `StreamRunAgentToolApprovalRequired$inboundSchema` instead. */
  export const inboundSchema = StreamRunAgentToolApprovalRequired$inboundSchema;
  /** @deprecated use `StreamRunAgentToolApprovalRequired$outboundSchema` instead. */
  export const outboundSchema =
    StreamRunAgentToolApprovalRequired$outboundSchema;
}

/** @internal */
export const StreamRunAgentSettings$inboundSchema: z.ZodType<
  StreamRunAgentSettings,
  z.ZodTypeDef,
  unknown
> = z.object({
  tools: z.array(
    z.union([
      z.lazy(() => RunAgentRequestToolHTTPTool$inboundSchema),
      z.lazy(() => RunAgentRequestToolCodeExecutionTool$inboundSchema),
      z.lazy(() => RunAgentRequestToolFunctionTool$inboundSchema),
      z.lazy(() => RunAgentRequestToolGoogleSearchTool$inboundSchema),
      z.lazy(() => RunAgentRequestToolWebScraperTool$inboundSchema),
      z.lazy(() => RunAgentRequestToolCallSubAgentTool$inboundSchema),
      z.lazy(() => RunAgentRequestToolRetrieveAgentsTool$inboundSchema),
      z.lazy(() => RunAgentRequestToolQueryMemoryStoreTool$inboundSchema),
      z.lazy(() => RunAgentRequestToolWriteMemoryStoreTool$inboundSchema),
      z.lazy(() => RunAgentRequestToolRetrieveMemoryStoresTool$inboundSchema),
      z.lazy(() => RunAgentRequestToolDeleteMemoryStoreTool$inboundSchema),
      z.lazy(() => RunAgentRequestToolRetrieveKnowledgeBasesTool$inboundSchema),
      z.lazy(() => RunAgentRequestToolQueryKnowledgeBaseTool$inboundSchema),
      z.lazy(() => RunAgentRequestToolCurrentDateTool$inboundSchema),
    ]),
  ),
  tool_approval_required: StreamRunAgentToolApprovalRequired$inboundSchema
    .default("none"),
  max_iterations: z.number().int().default(15),
  max_execution_time: z.number().int().default(300),
}).transform((v) => {
  return remap$(v, {
    "tool_approval_required": "toolApprovalRequired",
    "max_iterations": "maxIterations",
    "max_execution_time": "maxExecutionTime",
  });
});

/** @internal */
export type StreamRunAgentSettings$Outbound = {
  tools: Array<
    | RunAgentRequestToolHTTPTool$Outbound
    | RunAgentRequestToolCodeExecutionTool$Outbound
    | RunAgentRequestToolFunctionTool$Outbound
    | RunAgentRequestToolGoogleSearchTool$Outbound
    | RunAgentRequestToolWebScraperTool$Outbound
    | RunAgentRequestToolCallSubAgentTool$Outbound
    | RunAgentRequestToolRetrieveAgentsTool$Outbound
    | RunAgentRequestToolQueryMemoryStoreTool$Outbound
    | RunAgentRequestToolWriteMemoryStoreTool$Outbound
    | RunAgentRequestToolRetrieveMemoryStoresTool$Outbound
    | RunAgentRequestToolDeleteMemoryStoreTool$Outbound
    | RunAgentRequestToolRetrieveKnowledgeBasesTool$Outbound
    | RunAgentRequestToolQueryKnowledgeBaseTool$Outbound
    | RunAgentRequestToolCurrentDateTool$Outbound
  >;
  tool_approval_required: string;
  max_iterations: number;
  max_execution_time: number;
};

/** @internal */
export const StreamRunAgentSettings$outboundSchema: z.ZodType<
  StreamRunAgentSettings$Outbound,
  z.ZodTypeDef,
  StreamRunAgentSettings
> = z.object({
  tools: z.array(
    z.union([
      z.lazy(() => RunAgentRequestToolHTTPTool$outboundSchema),
      z.lazy(() => RunAgentRequestToolCodeExecutionTool$outboundSchema),
      z.lazy(() => RunAgentRequestToolFunctionTool$outboundSchema),
      z.lazy(() => RunAgentRequestToolGoogleSearchTool$outboundSchema),
      z.lazy(() => RunAgentRequestToolWebScraperTool$outboundSchema),
      z.lazy(() => RunAgentRequestToolCallSubAgentTool$outboundSchema),
      z.lazy(() => RunAgentRequestToolRetrieveAgentsTool$outboundSchema),
      z.lazy(() => RunAgentRequestToolQueryMemoryStoreTool$outboundSchema),
      z.lazy(() => RunAgentRequestToolWriteMemoryStoreTool$outboundSchema),
      z.lazy(() => RunAgentRequestToolRetrieveMemoryStoresTool$outboundSchema),
      z.lazy(() => RunAgentRequestToolDeleteMemoryStoreTool$outboundSchema),
      z.lazy(() =>
        RunAgentRequestToolRetrieveKnowledgeBasesTool$outboundSchema
      ),
      z.lazy(() => RunAgentRequestToolQueryKnowledgeBaseTool$outboundSchema),
      z.lazy(() => RunAgentRequestToolCurrentDateTool$outboundSchema),
    ]),
  ),
  toolApprovalRequired: StreamRunAgentToolApprovalRequired$outboundSchema
    .default("none"),
  maxIterations: z.number().int().default(15),
  maxExecutionTime: z.number().int().default(300),
}).transform((v) => {
  return remap$(v, {
    toolApprovalRequired: "tool_approval_required",
    maxIterations: "max_iterations",
    maxExecutionTime: "max_execution_time",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace StreamRunAgentSettings$ {
  /** @deprecated use `StreamRunAgentSettings$inboundSchema` instead. */
  export const inboundSchema = StreamRunAgentSettings$inboundSchema;
  /** @deprecated use `StreamRunAgentSettings$outboundSchema` instead. */
  export const outboundSchema = StreamRunAgentSettings$outboundSchema;
  /** @deprecated use `StreamRunAgentSettings$Outbound` instead. */
  export type Outbound = StreamRunAgentSettings$Outbound;
}

export function streamRunAgentSettingsToJSON(
  streamRunAgentSettings: StreamRunAgentSettings,
): string {
  return JSON.stringify(
    StreamRunAgentSettings$outboundSchema.parse(streamRunAgentSettings),
  );
}

export function streamRunAgentSettingsFromJSON(
  jsonString: string,
): SafeParseResult<StreamRunAgentSettings, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => StreamRunAgentSettings$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'StreamRunAgentSettings' from JSON`,
  );
}

/** @internal */
export const StreamRunAgentRequestBody$inboundSchema: z.ZodType<
  StreamRunAgentRequestBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  key: z.string(),
  taskId: z.string().optional(),
  model: z.string(),
  fallback_models: z.array(z.string()).optional(),
  role: z.string(),
  instructions: z.string(),
  message: z.lazy(() => StreamRunAgentMessage$inboundSchema),
  variables: z.record(z.any()).optional(),
  contact: z.lazy(() => StreamRunAgentContact$inboundSchema).optional(),
  thread: z.lazy(() => StreamRunAgentThread$inboundSchema).optional(),
  memory: z.lazy(() => StreamRunAgentMemory$inboundSchema).optional(),
  path: z.string(),
  description: z.string().optional(),
  system_prompt: z.string().optional(),
  memory_stores: z.array(z.string()).optional(),
  knowledge_bases: z.array(
    z.lazy(() => StreamRunAgentKnowledgeBases$inboundSchema),
  ).optional(),
  team_of_agents: z.array(
    z.lazy(() => StreamRunAgentTeamOfAgents$inboundSchema),
  ).optional(),
  settings: z.lazy(() => StreamRunAgentSettings$inboundSchema),
  metadata: z.record(z.any()).optional(),
  stream_timeout_seconds: z.number().optional(),
}).transform((v) => {
  return remap$(v, {
    "fallback_models": "fallbackModels",
    "system_prompt": "systemPrompt",
    "memory_stores": "memoryStores",
    "knowledge_bases": "knowledgeBases",
    "team_of_agents": "teamOfAgents",
    "stream_timeout_seconds": "streamTimeoutSeconds",
  });
});

/** @internal */
export type StreamRunAgentRequestBody$Outbound = {
  key: string;
  taskId?: string | undefined;
  model: string;
  fallback_models?: Array<string> | undefined;
  role: string;
  instructions: string;
  message: StreamRunAgentMessage$Outbound;
  variables?: { [k: string]: any } | undefined;
  contact?: StreamRunAgentContact$Outbound | undefined;
  thread?: StreamRunAgentThread$Outbound | undefined;
  memory?: StreamRunAgentMemory$Outbound | undefined;
  path: string;
  description?: string | undefined;
  system_prompt?: string | undefined;
  memory_stores?: Array<string> | undefined;
  knowledge_bases?: Array<StreamRunAgentKnowledgeBases$Outbound> | undefined;
  team_of_agents?: Array<StreamRunAgentTeamOfAgents$Outbound> | undefined;
  settings: StreamRunAgentSettings$Outbound;
  metadata?: { [k: string]: any } | undefined;
  stream_timeout_seconds?: number | undefined;
};

/** @internal */
export const StreamRunAgentRequestBody$outboundSchema: z.ZodType<
  StreamRunAgentRequestBody$Outbound,
  z.ZodTypeDef,
  StreamRunAgentRequestBody
> = z.object({
  key: z.string(),
  taskId: z.string().optional(),
  model: z.string(),
  fallbackModels: z.array(z.string()).optional(),
  role: z.string(),
  instructions: z.string(),
  message: z.lazy(() => StreamRunAgentMessage$outboundSchema),
  variables: z.record(z.any()).optional(),
  contact: z.lazy(() => StreamRunAgentContact$outboundSchema).optional(),
  thread: z.lazy(() => StreamRunAgentThread$outboundSchema).optional(),
  memory: z.lazy(() => StreamRunAgentMemory$outboundSchema).optional(),
  path: z.string(),
  description: z.string().optional(),
  systemPrompt: z.string().optional(),
  memoryStores: z.array(z.string()).optional(),
  knowledgeBases: z.array(
    z.lazy(() => StreamRunAgentKnowledgeBases$outboundSchema),
  ).optional(),
  teamOfAgents: z.array(z.lazy(() => StreamRunAgentTeamOfAgents$outboundSchema))
    .optional(),
  settings: z.lazy(() => StreamRunAgentSettings$outboundSchema),
  metadata: z.record(z.any()).optional(),
  streamTimeoutSeconds: z.number().optional(),
}).transform((v) => {
  return remap$(v, {
    fallbackModels: "fallback_models",
    systemPrompt: "system_prompt",
    memoryStores: "memory_stores",
    knowledgeBases: "knowledge_bases",
    teamOfAgents: "team_of_agents",
    streamTimeoutSeconds: "stream_timeout_seconds",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace StreamRunAgentRequestBody$ {
  /** @deprecated use `StreamRunAgentRequestBody$inboundSchema` instead. */
  export const inboundSchema = StreamRunAgentRequestBody$inboundSchema;
  /** @deprecated use `StreamRunAgentRequestBody$outboundSchema` instead. */
  export const outboundSchema = StreamRunAgentRequestBody$outboundSchema;
  /** @deprecated use `StreamRunAgentRequestBody$Outbound` instead. */
  export type Outbound = StreamRunAgentRequestBody$Outbound;
}

export function streamRunAgentRequestBodyToJSON(
  streamRunAgentRequestBody: StreamRunAgentRequestBody,
): string {
  return JSON.stringify(
    StreamRunAgentRequestBody$outboundSchema.parse(streamRunAgentRequestBody),
  );
}

export function streamRunAgentRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<StreamRunAgentRequestBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => StreamRunAgentRequestBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'StreamRunAgentRequestBody' from JSON`,
  );
}

/** @internal */
export const StreamRunAgentResponseBody$inboundSchema: z.ZodType<
  StreamRunAgentResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  data: z.string(),
});

/** @internal */
export type StreamRunAgentResponseBody$Outbound = {
  data: string;
};

/** @internal */
export const StreamRunAgentResponseBody$outboundSchema: z.ZodType<
  StreamRunAgentResponseBody$Outbound,
  z.ZodTypeDef,
  StreamRunAgentResponseBody
> = z.object({
  data: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace StreamRunAgentResponseBody$ {
  /** @deprecated use `StreamRunAgentResponseBody$inboundSchema` instead. */
  export const inboundSchema = StreamRunAgentResponseBody$inboundSchema;
  /** @deprecated use `StreamRunAgentResponseBody$outboundSchema` instead. */
  export const outboundSchema = StreamRunAgentResponseBody$outboundSchema;
  /** @deprecated use `StreamRunAgentResponseBody$Outbound` instead. */
  export type Outbound = StreamRunAgentResponseBody$Outbound;
}

export function streamRunAgentResponseBodyToJSON(
  streamRunAgentResponseBody: StreamRunAgentResponseBody,
): string {
  return JSON.stringify(
    StreamRunAgentResponseBody$outboundSchema.parse(streamRunAgentResponseBody),
  );
}

export function streamRunAgentResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<StreamRunAgentResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => StreamRunAgentResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'StreamRunAgentResponseBody' from JSON`,
  );
}
