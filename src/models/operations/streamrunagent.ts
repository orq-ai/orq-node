/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * Tool message
 */
export const StreamRunAgentRoleToolMessage = {
  Tool: "tool",
} as const;
/**
 * Tool message
 */
export type StreamRunAgentRoleToolMessage = ClosedEnum<
  typeof StreamRunAgentRoleToolMessage
>;

/**
 * User message
 */
export const StreamRunAgentRoleUserMessage = {
  User: "user",
} as const;
/**
 * User message
 */
export type StreamRunAgentRoleUserMessage = ClosedEnum<
  typeof StreamRunAgentRoleUserMessage
>;

/**
 * Message role (user or tool for continuing executions)
 */
export type StreamRunAgentRole =
  | StreamRunAgentRoleUserMessage
  | StreamRunAgentRoleToolMessage;

export const StreamRunAgentPublicMessagePartAgentsRequestKind = {
  ToolResult: "tool_result",
} as const;
export type StreamRunAgentPublicMessagePartAgentsRequestKind = ClosedEnum<
  typeof StreamRunAgentPublicMessagePartAgentsRequestKind
>;

/**
 * Tool execution result part. Use this ONLY when providing results for a pending tool call from the agent. The tool_call_id must match the ID from the agent's tool call request.
 */
export type StreamRunAgentPublicMessagePartToolResultPart = {
  kind: StreamRunAgentPublicMessagePartAgentsRequestKind;
  toolCallId: string;
  result?: any | undefined;
  metadata?: { [k: string]: any } | undefined;
};

export const StreamRunAgentPublicMessagePartAgentsKind = {
  File: "file",
} as const;
export type StreamRunAgentPublicMessagePartAgentsKind = ClosedEnum<
  typeof StreamRunAgentPublicMessagePartAgentsKind
>;

/**
 * File in URI format. Check in the model's documentation for the supported mime types for the URI format
 */
export type StreamRunAgentFileFileInURIFormat = {
  /**
   * URL for the File content
   */
  uri: string;
  /**
   * Optional mimeType for the file
   */
  mimeType?: string | undefined;
  /**
   * Optional name for the file
   */
  name?: string | undefined;
};

/**
 * Binary in base64 format. Check in the model's documentation for the supported mime types for the binary format.
 */
export type StreamRunAgentFileBinaryFormat = {
  /**
   * base64 encoded content of the file
   */
  bytes: string;
  /**
   * Optional mimeType for the file
   */
  mimeType?: string | undefined;
  /**
   * Optional name for the file
   */
  name?: string | undefined;
};

export type StreamRunAgentPublicMessagePartFile =
  | StreamRunAgentFileBinaryFormat
  | StreamRunAgentFileFileInURIFormat;

/**
 * File attachment part. Use this to send files (images, documents, etc.) to the agent for processing.
 */
export type StreamRunAgentPublicMessagePartFilePart = {
  kind: StreamRunAgentPublicMessagePartAgentsKind;
  file: StreamRunAgentFileBinaryFormat | StreamRunAgentFileFileInURIFormat;
  metadata?: { [k: string]: any } | undefined;
};

export const StreamRunAgentPublicMessagePartKind = {
  Text: "text",
} as const;
export type StreamRunAgentPublicMessagePartKind = ClosedEnum<
  typeof StreamRunAgentPublicMessagePartKind
>;

/**
 * Text content part. Use this to send text messages to the agent.
 */
export type StreamRunAgentPublicMessagePartTextPart = {
  kind: StreamRunAgentPublicMessagePartKind;
  text: string;
};

/**
 * Message part that can be provided by users. Use "text" for regular messages, "file" for attachments, or "tool_result" when responding to tool call requests.
 */
export type StreamRunAgentPublicMessagePart =
  | StreamRunAgentPublicMessagePartTextPart
  | StreamRunAgentPublicMessagePartFilePart
  | StreamRunAgentPublicMessagePartToolResultPart;

/**
 * The A2A format message containing the task for the agent to perform.
 */
export type StreamRunAgentMessage = {
  /**
   * Optional A2A message ID in ULID format
   */
  messageId?: string | undefined;
  /**
   * Message role (user or tool for continuing executions)
   */
  role: StreamRunAgentRoleUserMessage | StreamRunAgentRoleToolMessage;
  /**
   * A2A message parts (text, file, or tool_result only)
   */
  parts: Array<
    | StreamRunAgentPublicMessagePartTextPart
    | StreamRunAgentPublicMessagePartFilePart
    | StreamRunAgentPublicMessagePartToolResultPart
  >;
};

/**
 * Information about the contact making the request. If the contact does not exist, it will be created automatically.
 */
export type StreamRunAgentContact = {
  /**
   * Unique identifier for the contact
   */
  id: string;
  /**
   * Display name of the contact
   */
  displayName?: string | undefined;
  /**
   * Email address of the contact
   */
  email?: string | undefined;
  /**
   * A hash of key/value pairs containing any other data about the contact
   */
  metadata?: Array<{ [k: string]: any }> | undefined;
  /**
   * URL to the contact's avatar or logo
   */
  logoUrl?: string | undefined;
  /**
   * A list of tags associated with the contact
   */
  tags?: Array<string> | undefined;
};

/**
 * Thread information to group related requests
 */
export type StreamRunAgentThread = {
  /**
   * Unique thread identifier to group related invocations.
   */
  id: string;
  /**
   * Optional tags to differentiate or categorize threads
   */
  tags?: Array<string> | undefined;
};

/**
 * Memory configuration for the agent execution. Used to associate memory stores with specific entities like users or sessions.
 */
export type StreamRunAgentMemory = {
  /**
   * An entity ID used to link memory stores to a specific user, session, or conversation. This ID is used to isolate and retrieve memories specific to the entity across agent executions.
   */
  entityId: string;
};

export type StreamRunAgentKnowledgeBases = {
  /**
   * Unique identifier of the knowledge base to search
   */
  knowledgeId: string;
};

export type StreamRunAgentTeamOfAgents = {
  /**
   * The unique key of the agent within the workspace
   */
  key: string;
  /**
   * The role of the agent in this context. This is used to give extra information to the leader to help it decide which agent to hand off to.
   */
  role?: string | undefined;
};

export const StreamRunAgentAgentToolInputRunAgentsRequestRequestBodySettingsTools14Type =
  {
    Function: "function",
  } as const;
export type StreamRunAgentAgentToolInputRunAgentsRequestRequestBodySettingsTools14Type =
  ClosedEnum<
    typeof StreamRunAgentAgentToolInputRunAgentsRequestRequestBodySettingsTools14Type
  >;

export type StreamRunAgentAgentToolInputRunFunction = {
  /**
   * The name of the function to be called. Must be a-z, A-Z, 0-9, or contain underscores and dashes, with a maximum length of 64.
   */
  name: string;
  /**
   * A description of what the function does, used by the model to choose when and how to call the function.
   */
  description?: string | undefined;
  /**
   * Whether to enable strict schema adherence when generating the function call. If set to true, the model will follow the exact schema defined in the `parameters` field. Only a subset of JSON Schema is supported when `strict` is `true`. Currently only compatible with `OpenAI` models.
   */
  strict?: boolean | undefined;
  /**
   * The parameters the functions accepts, described as a JSON Schema object. See the `OpenAI` [guide](https://platform.openai.com/docs/guides/function-calling) for examples, and the [JSON Schema reference](https://json-schema.org/understanding-json-schema/) for documentation about the format.
   */
  parameters?: { [k: string]: any } | undefined;
};

/**
 * Function tool with inline definition for on-the-fly creation in run endpoint
 */
export type AgentToolInputRunFunctionToolRun = {
  type:
    StreamRunAgentAgentToolInputRunAgentsRequestRequestBodySettingsTools14Type;
  /**
   * Unique key of the tool as it will be displayed in the UI
   */
  key: string;
  id?: string | undefined;
  displayName?: string | undefined;
  description?: string | undefined;
  function: StreamRunAgentAgentToolInputRunFunction;
  requiresApproval?: boolean | undefined;
};

export const StreamRunAgentAgentToolInputRunAgentsRequestRequestBodySettingsTools13Type =
  {
    Code: "code",
  } as const;
export type StreamRunAgentAgentToolInputRunAgentsRequestRequestBodySettingsTools13Type =
  ClosedEnum<
    typeof StreamRunAgentAgentToolInputRunAgentsRequestRequestBodySettingsTools13Type
  >;

export const AgentToolInputRunLanguage = {
  Python: "python",
} as const;
export type AgentToolInputRunLanguage = ClosedEnum<
  typeof AgentToolInputRunLanguage
>;

export type AgentToolInputRunCodeTool = {
  /**
   * The parameters the functions accepts, described as a JSON Schema object. See the `OpenAI` [guide](https://platform.openai.com/docs/guides/function-calling) for examples, and the [JSON Schema reference](https://json-schema.org/understanding-json-schema/) for documentation about the format.
   */
  parameters?: { [k: string]: any } | undefined;
  language: AgentToolInputRunLanguage;
  /**
   * The code to execute.
   */
  code: string;
};

/**
 * Code execution tool with inline definition for on-the-fly creation in run endpoint
 */
export type AgentToolInputRunCodeToolRun = {
  type:
    StreamRunAgentAgentToolInputRunAgentsRequestRequestBodySettingsTools13Type;
  /**
   * Unique key of the tool as it will be displayed in the UI
   */
  key: string;
  id?: string | undefined;
  displayName?: string | undefined;
  /**
   * A description of the tool, used by the model to choose when and how to call the tool. We do recommend using the `description` field as accurate as possible to give enough context to the model to make the right decision.
   */
  description: string;
  codeTool: AgentToolInputRunCodeTool;
  requiresApproval?: boolean | undefined;
};

export const StreamRunAgentAgentToolInputRunAgentsRequestRequestBodySettingsTools12Type =
  {
    Http: "http",
  } as const;
export type StreamRunAgentAgentToolInputRunAgentsRequestRequestBodySettingsTools12Type =
  ClosedEnum<
    typeof StreamRunAgentAgentToolInputRunAgentsRequestRequestBodySettingsTools12Type
  >;

/**
 * The HTTP method to use.
 */
export const AgentToolInputRunMethod = {
  Get: "GET",
  Post: "POST",
  Put: "PUT",
  Delete: "DELETE",
} as const;
/**
 * The HTTP method to use.
 */
export type AgentToolInputRunMethod = ClosedEnum<
  typeof AgentToolInputRunMethod
>;

/**
 * The blueprint for the HTTP request. The `arguments` field will be used to replace the placeholders in the `url`, `headers`, `body`, and `arguments` fields.
 */
export type AgentToolInputRunBlueprint = {
  /**
   * The URL to send the request to.
   */
  url: string;
  /**
   * The HTTP method to use.
   */
  method: AgentToolInputRunMethod;
  /**
   * The headers to send with the request.
   */
  headers?: { [k: string]: string } | undefined;
  /**
   * The body to send with the request.
   */
  body?: { [k: string]: any } | undefined;
};

/**
 * The type of the argument.
 */
export const StreamRunAgentAgentToolInputRunAgentsRequestRequestBodySettingsTools12HttpType =
  {
    String: "string",
    Number: "number",
    Boolean: "boolean",
  } as const;
/**
 * The type of the argument.
 */
export type StreamRunAgentAgentToolInputRunAgentsRequestRequestBodySettingsTools12HttpType =
  ClosedEnum<
    typeof StreamRunAgentAgentToolInputRunAgentsRequestRequestBodySettingsTools12HttpType
  >;

/**
 * The default value of the argument.
 */
export type AgentToolInputRunDefaultValue = string | number | boolean;

export type AgentToolInputRunArguments = {
  /**
   * The type of the argument.
   */
  type:
    StreamRunAgentAgentToolInputRunAgentsRequestRequestBodySettingsTools12HttpType;
  /**
   * A description of the argument.
   */
  description: string;
  /**
   * Whether to send the argument to the model. If set to false, the argument will not be sent to the model and needs to be provided by the user or it will be left blank.
   */
  sendToModel?: boolean | undefined;
  /**
   * The default value of the argument.
   */
  defaultValue?: string | number | boolean | undefined;
};

export type AgentToolInputRunHttp = {
  /**
   * The blueprint for the HTTP request. The `arguments` field will be used to replace the placeholders in the `url`, `headers`, `body`, and `arguments` fields.
   */
  blueprint: AgentToolInputRunBlueprint;
  /**
   * The arguments to send with the request. The keys will be used to replace the placeholders in the `blueprint` field.
   */
  arguments?: { [k: string]: AgentToolInputRunArguments } | undefined;
};

/**
 * HTTP tool with inline definition for on-the-fly creation in run endpoint
 */
export type AgentToolInputRunHTTPToolRun = {
  type:
    StreamRunAgentAgentToolInputRunAgentsRequestRequestBodySettingsTools12Type;
  /**
   * Unique key of the tool as it will be displayed in the UI
   */
  key: string;
  id?: string | undefined;
  displayName?: string | undefined;
  /**
   * A description of the tool, used by the model to choose when and how to call the tool. We do recommend using the `description` field as accurate as possible to give enough context to the model to make the right decision.
   */
  description: string;
  http: AgentToolInputRunHttp;
  requiresApproval?: boolean | undefined;
};

export const StreamRunAgentAgentToolInputRunAgentsRequestRequestBodySettingsTools11Type =
  {
    CurrentDate: "current_date",
  } as const;
export type StreamRunAgentAgentToolInputRunAgentsRequestRequestBodySettingsTools11Type =
  ClosedEnum<
    typeof StreamRunAgentAgentToolInputRunAgentsRequestRequestBodySettingsTools11Type
  >;

/**
 * Returns the current date and time
 */
export type StreamRunAgentAgentToolInputRunCurrentDateTool = {
  type:
    StreamRunAgentAgentToolInputRunAgentsRequestRequestBodySettingsTools11Type;
  /**
   * Whether this tool requires approval before execution
   */
  requiresApproval?: boolean | undefined;
};

export const StreamRunAgentAgentToolInputRunAgentsRequestRequestBodySettingsTools10Type =
  {
    QueryKnowledgeBase: "query_knowledge_base",
  } as const;
export type StreamRunAgentAgentToolInputRunAgentsRequestRequestBodySettingsTools10Type =
  ClosedEnum<
    typeof StreamRunAgentAgentToolInputRunAgentsRequestRequestBodySettingsTools10Type
  >;

/**
 * Queries knowledge bases for information
 */
export type StreamRunAgentAgentToolInputRunQueryKnowledgeBaseTool = {
  type:
    StreamRunAgentAgentToolInputRunAgentsRequestRequestBodySettingsTools10Type;
  /**
   * Whether this tool requires approval before execution
   */
  requiresApproval?: boolean | undefined;
};

export const StreamRunAgentAgentToolInputRunAgentsRequestRequestBodySettingsTools9Type =
  {
    RetrieveKnowledgeBases: "retrieve_knowledge_bases",
  } as const;
export type StreamRunAgentAgentToolInputRunAgentsRequestRequestBodySettingsTools9Type =
  ClosedEnum<
    typeof StreamRunAgentAgentToolInputRunAgentsRequestRequestBodySettingsTools9Type
  >;

/**
 * Lists available knowledge bases
 */
export type StreamRunAgentAgentToolInputRunRetrieveKnowledgeBasesTool = {
  type:
    StreamRunAgentAgentToolInputRunAgentsRequestRequestBodySettingsTools9Type;
  /**
   * Whether this tool requires approval before execution
   */
  requiresApproval?: boolean | undefined;
};

export const StreamRunAgentAgentToolInputRunAgentsRequestRequestBodySettingsTools8Type =
  {
    DeleteMemoryDocument: "delete_memory_document",
  } as const;
export type StreamRunAgentAgentToolInputRunAgentsRequestRequestBodySettingsTools8Type =
  ClosedEnum<
    typeof StreamRunAgentAgentToolInputRunAgentsRequestRequestBodySettingsTools8Type
  >;

/**
 * Deletes documents from memory stores
 */
export type StreamRunAgentAgentToolInputRunDeleteMemoryDocumentTool = {
  type:
    StreamRunAgentAgentToolInputRunAgentsRequestRequestBodySettingsTools8Type;
  /**
   * Whether this tool requires approval before execution
   */
  requiresApproval?: boolean | undefined;
};

export const StreamRunAgentAgentToolInputRunAgentsRequestRequestBodySettingsTools7Type =
  {
    RetrieveMemoryStores: "retrieve_memory_stores",
  } as const;
export type StreamRunAgentAgentToolInputRunAgentsRequestRequestBodySettingsTools7Type =
  ClosedEnum<
    typeof StreamRunAgentAgentToolInputRunAgentsRequestRequestBodySettingsTools7Type
  >;

/**
 * Lists available memory stores
 */
export type StreamRunAgentAgentToolInputRunRetrieveMemoryStoresTool = {
  type:
    StreamRunAgentAgentToolInputRunAgentsRequestRequestBodySettingsTools7Type;
  /**
   * Whether this tool requires approval before execution
   */
  requiresApproval?: boolean | undefined;
};

export const StreamRunAgentAgentToolInputRunAgentsRequestRequestBodySettingsToolsType =
  {
    WriteMemoryStore: "write_memory_store",
  } as const;
export type StreamRunAgentAgentToolInputRunAgentsRequestRequestBodySettingsToolsType =
  ClosedEnum<
    typeof StreamRunAgentAgentToolInputRunAgentsRequestRequestBodySettingsToolsType
  >;

/**
 * Writes information to agent memory stores
 */
export type StreamRunAgentAgentToolInputRunWriteMemoryStoreTool = {
  type:
    StreamRunAgentAgentToolInputRunAgentsRequestRequestBodySettingsToolsType;
  /**
   * Whether this tool requires approval before execution
   */
  requiresApproval?: boolean | undefined;
};

export const StreamRunAgentAgentToolInputRunAgentsRequestRequestBodySettingsType =
  {
    QueryMemoryStore: "query_memory_store",
  } as const;
export type StreamRunAgentAgentToolInputRunAgentsRequestRequestBodySettingsType =
  ClosedEnum<
    typeof StreamRunAgentAgentToolInputRunAgentsRequestRequestBodySettingsType
  >;

/**
 * Queries agent memory stores for context
 */
export type StreamRunAgentAgentToolInputRunQueryMemoryStoreTool = {
  type: StreamRunAgentAgentToolInputRunAgentsRequestRequestBodySettingsType;
  /**
   * Whether this tool requires approval before execution
   */
  requiresApproval?: boolean | undefined;
};

export const StreamRunAgentAgentToolInputRunAgentsRequestRequestBodyType = {
  RetrieveAgents: "retrieve_agents",
} as const;
export type StreamRunAgentAgentToolInputRunAgentsRequestRequestBodyType =
  ClosedEnum<
    typeof StreamRunAgentAgentToolInputRunAgentsRequestRequestBodyType
  >;

/**
 * Retrieves available agents in the system
 */
export type StreamRunAgentAgentToolInputRunRetrieveAgentsTool = {
  type: StreamRunAgentAgentToolInputRunAgentsRequestRequestBodyType;
  /**
   * Whether this tool requires approval before execution
   */
  requiresApproval?: boolean | undefined;
};

export const StreamRunAgentAgentToolInputRunAgentsRequestType = {
  CallSubAgent: "call_sub_agent",
} as const;
export type StreamRunAgentAgentToolInputRunAgentsRequestType = ClosedEnum<
  typeof StreamRunAgentAgentToolInputRunAgentsRequestType
>;

/**
 * Delegates tasks to specialized sub-agents
 */
export type StreamRunAgentAgentToolInputRunCallSubAgentTool = {
  type: StreamRunAgentAgentToolInputRunAgentsRequestType;
  /**
   * Whether this tool requires approval before execution
   */
  requiresApproval?: boolean | undefined;
};

export const StreamRunAgentAgentToolInputRunAgentsType = {
  WebScraper: "web_scraper",
} as const;
export type StreamRunAgentAgentToolInputRunAgentsType = ClosedEnum<
  typeof StreamRunAgentAgentToolInputRunAgentsType
>;

/**
 * Scrapes and extracts content from web pages
 */
export type StreamRunAgentAgentToolInputRunWebScraperTool = {
  type: StreamRunAgentAgentToolInputRunAgentsType;
  /**
   * Whether this tool requires approval before execution
   */
  requiresApproval?: boolean | undefined;
};

export const StreamRunAgentAgentToolInputRunType = {
  GoogleSearch: "google_search",
} as const;
export type StreamRunAgentAgentToolInputRunType = ClosedEnum<
  typeof StreamRunAgentAgentToolInputRunType
>;

/**
 * Performs Google searches to retrieve web content
 */
export type StreamRunAgentAgentToolInputRunGoogleSearchTool = {
  type: StreamRunAgentAgentToolInputRunType;
  /**
   * Whether this tool requires approval before execution
   */
  requiresApproval?: boolean | undefined;
};

/**
 * Tool configuration for agent run operations. Built-in tools only require a type and requires_approval, while custom tools (http, code, function) support full inline definitions for on-the-fly creation.
 */
export type StreamRunAgentAgentToolInputRun =
  | AgentToolInputRunHTTPToolRun
  | AgentToolInputRunCodeToolRun
  | AgentToolInputRunFunctionToolRun
  | StreamRunAgentAgentToolInputRunGoogleSearchTool
  | StreamRunAgentAgentToolInputRunWebScraperTool
  | StreamRunAgentAgentToolInputRunCallSubAgentTool
  | StreamRunAgentAgentToolInputRunRetrieveAgentsTool
  | StreamRunAgentAgentToolInputRunQueryMemoryStoreTool
  | StreamRunAgentAgentToolInputRunWriteMemoryStoreTool
  | StreamRunAgentAgentToolInputRunRetrieveMemoryStoresTool
  | StreamRunAgentAgentToolInputRunDeleteMemoryDocumentTool
  | StreamRunAgentAgentToolInputRunRetrieveKnowledgeBasesTool
  | StreamRunAgentAgentToolInputRunQueryKnowledgeBaseTool
  | StreamRunAgentAgentToolInputRunCurrentDateTool;

/**
 * If all, the agent will require approval for all tools. If respect_tool, the agent will require approval for tools that have the requires_approval flag set to true. If none, the agent will not require approval for any tools.
 */
export const StreamRunAgentToolApprovalRequired = {
  All: "all",
  RespectTool: "respect_tool",
  None: "none",
} as const;
/**
 * If all, the agent will require approval for all tools. If respect_tool, the agent will require approval for tools that have the requires_approval flag set to true. If none, the agent will not require approval for any tools.
 */
export type StreamRunAgentToolApprovalRequired = ClosedEnum<
  typeof StreamRunAgentToolApprovalRequired
>;

export type StreamRunAgentSettings = {
  /**
   * Tools available to the agent
   */
  tools: Array<
    | AgentToolInputRunHTTPToolRun
    | AgentToolInputRunCodeToolRun
    | AgentToolInputRunFunctionToolRun
    | StreamRunAgentAgentToolInputRunGoogleSearchTool
    | StreamRunAgentAgentToolInputRunWebScraperTool
    | StreamRunAgentAgentToolInputRunCallSubAgentTool
    | StreamRunAgentAgentToolInputRunRetrieveAgentsTool
    | StreamRunAgentAgentToolInputRunQueryMemoryStoreTool
    | StreamRunAgentAgentToolInputRunWriteMemoryStoreTool
    | StreamRunAgentAgentToolInputRunRetrieveMemoryStoresTool
    | StreamRunAgentAgentToolInputRunDeleteMemoryDocumentTool
    | StreamRunAgentAgentToolInputRunRetrieveKnowledgeBasesTool
    | StreamRunAgentAgentToolInputRunQueryKnowledgeBaseTool
    | StreamRunAgentAgentToolInputRunCurrentDateTool
  >;
  /**
   * If all, the agent will require approval for all tools. If respect_tool, the agent will require approval for tools that have the requires_approval flag set to true. If none, the agent will not require approval for any tools.
   */
  toolApprovalRequired?: StreamRunAgentToolApprovalRequired | undefined;
  /**
   * Maximum iterations(llm calls) before the agent will stop executing.
   */
  maxIterations?: number | undefined;
  /**
   * Maximum time (in seconds) for the agent thinking process. This does not include the time for tool calls and sub agent calls. It will be loosely enforced, the in progress LLM calls will not be terminated and the last assistant message will be returned.
   */
  maxExecutionTime?: number | undefined;
};

export type StreamRunAgentRequestBody = {
  /**
   * A unique identifier for the agent. This key must be unique within the same workspace and cannot be reused. When executing the agent, this key determines if the agent already exists. If the agent version differs, a new version is created at the end of the execution, except for the task. All agent parameters are evaluated to decide if a new version is needed.
   */
  key: string;
  /**
   * Optional task ID to continue an existing agent execution. When provided, the agent will continue the conversation from the existing task state. The task must be in an inactive state to continue.
   */
  taskId?: string | undefined;
  /**
   * The language model that powers the agent. The model must support tool calling capabilities.
   */
  model: string;
  /**
   * Optional array of fallback model IDs to use when the primary model fails. Models are tried in order. All models must support tool calling capabilities.
   */
  fallbackModels?: Array<string> | undefined;
  /**
   * Specifies the agent's function and area of expertise.
   */
  role: string;
  /**
   * Provides context and purpose for the agent. Combined with the system prompt template to generate the agent's instructions.
   */
  instructions: string;
  /**
   * The A2A format message containing the task for the agent to perform.
   */
  message: StreamRunAgentMessage;
  /**
   * Optional variables for template replacement in system prompt, instructions, and messages
   */
  variables?: { [k: string]: any } | undefined;
  /**
   * Information about the contact making the request. If the contact does not exist, it will be created automatically.
   */
  contact?: StreamRunAgentContact | undefined;
  /**
   * Thread information to group related requests
   */
  thread?: StreamRunAgentThread | undefined;
  /**
   * Memory configuration for the agent execution. Used to associate memory stores with specific entities like users or sessions.
   */
  memory?: StreamRunAgentMemory | undefined;
  /**
   * The path where the entity is stored in the project structure. The first element of the path always represents the project name. Any subsequent path element after the project will be created as a folder in the project if it does not exists.
   */
  path: string;
  /**
   * A brief summary of the agent's purpose.
   */
  description?: string | undefined;
  /**
   * A custom system prompt template for the agent. If omitted, the default template is used.
   */
  systemPrompt?: string | undefined;
  /**
   * The list of keys of the memory stores that are accessible to the agent.
   */
  memoryStores?: Array<string> | undefined;
  /**
   * Knowledge base configurations for the agent to access
   */
  knowledgeBases?: Array<StreamRunAgentKnowledgeBases> | undefined;
  /**
   * The agents that are accessible to this orchestrator. The main agent can hand off to these agents to perform tasks.
   */
  teamOfAgents?: Array<StreamRunAgentTeamOfAgents> | undefined;
  settings: StreamRunAgentSettings;
  /**
   * Optional metadata for the agent run as key-value pairs that will be included in traces
   */
  metadata?: { [k: string]: any } | undefined;
  /**
   * Stream timeout in seconds (1-3600). Default: 1800 (30 minutes)
   */
  streamTimeoutSeconds?: number | undefined;
};

/**
 * SSE stream of agent events
 */
export type StreamRunAgentResponseBody = {
  /**
   * JSON-encoded event data
   */
  data: string;
};

/** @internal */
export const StreamRunAgentRoleToolMessage$inboundSchema: z.ZodNativeEnum<
  typeof StreamRunAgentRoleToolMessage
> = z.nativeEnum(StreamRunAgentRoleToolMessage);

/** @internal */
export const StreamRunAgentRoleToolMessage$outboundSchema: z.ZodNativeEnum<
  typeof StreamRunAgentRoleToolMessage
> = StreamRunAgentRoleToolMessage$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace StreamRunAgentRoleToolMessage$ {
  /** @deprecated use `StreamRunAgentRoleToolMessage$inboundSchema` instead. */
  export const inboundSchema = StreamRunAgentRoleToolMessage$inboundSchema;
  /** @deprecated use `StreamRunAgentRoleToolMessage$outboundSchema` instead. */
  export const outboundSchema = StreamRunAgentRoleToolMessage$outboundSchema;
}

/** @internal */
export const StreamRunAgentRoleUserMessage$inboundSchema: z.ZodNativeEnum<
  typeof StreamRunAgentRoleUserMessage
> = z.nativeEnum(StreamRunAgentRoleUserMessage);

/** @internal */
export const StreamRunAgentRoleUserMessage$outboundSchema: z.ZodNativeEnum<
  typeof StreamRunAgentRoleUserMessage
> = StreamRunAgentRoleUserMessage$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace StreamRunAgentRoleUserMessage$ {
  /** @deprecated use `StreamRunAgentRoleUserMessage$inboundSchema` instead. */
  export const inboundSchema = StreamRunAgentRoleUserMessage$inboundSchema;
  /** @deprecated use `StreamRunAgentRoleUserMessage$outboundSchema` instead. */
  export const outboundSchema = StreamRunAgentRoleUserMessage$outboundSchema;
}

/** @internal */
export const StreamRunAgentRole$inboundSchema: z.ZodType<
  StreamRunAgentRole,
  z.ZodTypeDef,
  unknown
> = z.union([
  StreamRunAgentRoleUserMessage$inboundSchema,
  StreamRunAgentRoleToolMessage$inboundSchema,
]);

/** @internal */
export type StreamRunAgentRole$Outbound = string | string;

/** @internal */
export const StreamRunAgentRole$outboundSchema: z.ZodType<
  StreamRunAgentRole$Outbound,
  z.ZodTypeDef,
  StreamRunAgentRole
> = z.union([
  StreamRunAgentRoleUserMessage$outboundSchema,
  StreamRunAgentRoleToolMessage$outboundSchema,
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace StreamRunAgentRole$ {
  /** @deprecated use `StreamRunAgentRole$inboundSchema` instead. */
  export const inboundSchema = StreamRunAgentRole$inboundSchema;
  /** @deprecated use `StreamRunAgentRole$outboundSchema` instead. */
  export const outboundSchema = StreamRunAgentRole$outboundSchema;
  /** @deprecated use `StreamRunAgentRole$Outbound` instead. */
  export type Outbound = StreamRunAgentRole$Outbound;
}

export function streamRunAgentRoleToJSON(
  streamRunAgentRole: StreamRunAgentRole,
): string {
  return JSON.stringify(
    StreamRunAgentRole$outboundSchema.parse(streamRunAgentRole),
  );
}

export function streamRunAgentRoleFromJSON(
  jsonString: string,
): SafeParseResult<StreamRunAgentRole, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => StreamRunAgentRole$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'StreamRunAgentRole' from JSON`,
  );
}

/** @internal */
export const StreamRunAgentPublicMessagePartAgentsRequestKind$inboundSchema:
  z.ZodNativeEnum<typeof StreamRunAgentPublicMessagePartAgentsRequestKind> = z
    .nativeEnum(StreamRunAgentPublicMessagePartAgentsRequestKind);

/** @internal */
export const StreamRunAgentPublicMessagePartAgentsRequestKind$outboundSchema:
  z.ZodNativeEnum<typeof StreamRunAgentPublicMessagePartAgentsRequestKind> =
    StreamRunAgentPublicMessagePartAgentsRequestKind$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace StreamRunAgentPublicMessagePartAgentsRequestKind$ {
  /** @deprecated use `StreamRunAgentPublicMessagePartAgentsRequestKind$inboundSchema` instead. */
  export const inboundSchema =
    StreamRunAgentPublicMessagePartAgentsRequestKind$inboundSchema;
  /** @deprecated use `StreamRunAgentPublicMessagePartAgentsRequestKind$outboundSchema` instead. */
  export const outboundSchema =
    StreamRunAgentPublicMessagePartAgentsRequestKind$outboundSchema;
}

/** @internal */
export const StreamRunAgentPublicMessagePartToolResultPart$inboundSchema:
  z.ZodType<
    StreamRunAgentPublicMessagePartToolResultPart,
    z.ZodTypeDef,
    unknown
  > = z.object({
    kind: StreamRunAgentPublicMessagePartAgentsRequestKind$inboundSchema,
    tool_call_id: z.string(),
    result: z.any().optional(),
    metadata: z.record(z.any()).optional(),
  }).transform((v) => {
    return remap$(v, {
      "tool_call_id": "toolCallId",
    });
  });

/** @internal */
export type StreamRunAgentPublicMessagePartToolResultPart$Outbound = {
  kind: string;
  tool_call_id: string;
  result?: any | undefined;
  metadata?: { [k: string]: any } | undefined;
};

/** @internal */
export const StreamRunAgentPublicMessagePartToolResultPart$outboundSchema:
  z.ZodType<
    StreamRunAgentPublicMessagePartToolResultPart$Outbound,
    z.ZodTypeDef,
    StreamRunAgentPublicMessagePartToolResultPart
  > = z.object({
    kind: StreamRunAgentPublicMessagePartAgentsRequestKind$outboundSchema,
    toolCallId: z.string(),
    result: z.any().optional(),
    metadata: z.record(z.any()).optional(),
  }).transform((v) => {
    return remap$(v, {
      toolCallId: "tool_call_id",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace StreamRunAgentPublicMessagePartToolResultPart$ {
  /** @deprecated use `StreamRunAgentPublicMessagePartToolResultPart$inboundSchema` instead. */
  export const inboundSchema =
    StreamRunAgentPublicMessagePartToolResultPart$inboundSchema;
  /** @deprecated use `StreamRunAgentPublicMessagePartToolResultPart$outboundSchema` instead. */
  export const outboundSchema =
    StreamRunAgentPublicMessagePartToolResultPart$outboundSchema;
  /** @deprecated use `StreamRunAgentPublicMessagePartToolResultPart$Outbound` instead. */
  export type Outbound = StreamRunAgentPublicMessagePartToolResultPart$Outbound;
}

export function streamRunAgentPublicMessagePartToolResultPartToJSON(
  streamRunAgentPublicMessagePartToolResultPart:
    StreamRunAgentPublicMessagePartToolResultPart,
): string {
  return JSON.stringify(
    StreamRunAgentPublicMessagePartToolResultPart$outboundSchema.parse(
      streamRunAgentPublicMessagePartToolResultPart,
    ),
  );
}

export function streamRunAgentPublicMessagePartToolResultPartFromJSON(
  jsonString: string,
): SafeParseResult<
  StreamRunAgentPublicMessagePartToolResultPart,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      StreamRunAgentPublicMessagePartToolResultPart$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'StreamRunAgentPublicMessagePartToolResultPart' from JSON`,
  );
}

/** @internal */
export const StreamRunAgentPublicMessagePartAgentsKind$inboundSchema:
  z.ZodNativeEnum<typeof StreamRunAgentPublicMessagePartAgentsKind> = z
    .nativeEnum(StreamRunAgentPublicMessagePartAgentsKind);

/** @internal */
export const StreamRunAgentPublicMessagePartAgentsKind$outboundSchema:
  z.ZodNativeEnum<typeof StreamRunAgentPublicMessagePartAgentsKind> =
    StreamRunAgentPublicMessagePartAgentsKind$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace StreamRunAgentPublicMessagePartAgentsKind$ {
  /** @deprecated use `StreamRunAgentPublicMessagePartAgentsKind$inboundSchema` instead. */
  export const inboundSchema =
    StreamRunAgentPublicMessagePartAgentsKind$inboundSchema;
  /** @deprecated use `StreamRunAgentPublicMessagePartAgentsKind$outboundSchema` instead. */
  export const outboundSchema =
    StreamRunAgentPublicMessagePartAgentsKind$outboundSchema;
}

/** @internal */
export const StreamRunAgentFileFileInURIFormat$inboundSchema: z.ZodType<
  StreamRunAgentFileFileInURIFormat,
  z.ZodTypeDef,
  unknown
> = z.object({
  uri: z.string(),
  mimeType: z.string().optional(),
  name: z.string().optional(),
});

/** @internal */
export type StreamRunAgentFileFileInURIFormat$Outbound = {
  uri: string;
  mimeType?: string | undefined;
  name?: string | undefined;
};

/** @internal */
export const StreamRunAgentFileFileInURIFormat$outboundSchema: z.ZodType<
  StreamRunAgentFileFileInURIFormat$Outbound,
  z.ZodTypeDef,
  StreamRunAgentFileFileInURIFormat
> = z.object({
  uri: z.string(),
  mimeType: z.string().optional(),
  name: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace StreamRunAgentFileFileInURIFormat$ {
  /** @deprecated use `StreamRunAgentFileFileInURIFormat$inboundSchema` instead. */
  export const inboundSchema = StreamRunAgentFileFileInURIFormat$inboundSchema;
  /** @deprecated use `StreamRunAgentFileFileInURIFormat$outboundSchema` instead. */
  export const outboundSchema =
    StreamRunAgentFileFileInURIFormat$outboundSchema;
  /** @deprecated use `StreamRunAgentFileFileInURIFormat$Outbound` instead. */
  export type Outbound = StreamRunAgentFileFileInURIFormat$Outbound;
}

export function streamRunAgentFileFileInURIFormatToJSON(
  streamRunAgentFileFileInURIFormat: StreamRunAgentFileFileInURIFormat,
): string {
  return JSON.stringify(
    StreamRunAgentFileFileInURIFormat$outboundSchema.parse(
      streamRunAgentFileFileInURIFormat,
    ),
  );
}

export function streamRunAgentFileFileInURIFormatFromJSON(
  jsonString: string,
): SafeParseResult<StreamRunAgentFileFileInURIFormat, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => StreamRunAgentFileFileInURIFormat$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'StreamRunAgentFileFileInURIFormat' from JSON`,
  );
}

/** @internal */
export const StreamRunAgentFileBinaryFormat$inboundSchema: z.ZodType<
  StreamRunAgentFileBinaryFormat,
  z.ZodTypeDef,
  unknown
> = z.object({
  bytes: z.string(),
  mimeType: z.string().optional(),
  name: z.string().optional(),
});

/** @internal */
export type StreamRunAgentFileBinaryFormat$Outbound = {
  bytes: string;
  mimeType?: string | undefined;
  name?: string | undefined;
};

/** @internal */
export const StreamRunAgentFileBinaryFormat$outboundSchema: z.ZodType<
  StreamRunAgentFileBinaryFormat$Outbound,
  z.ZodTypeDef,
  StreamRunAgentFileBinaryFormat
> = z.object({
  bytes: z.string(),
  mimeType: z.string().optional(),
  name: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace StreamRunAgentFileBinaryFormat$ {
  /** @deprecated use `StreamRunAgentFileBinaryFormat$inboundSchema` instead. */
  export const inboundSchema = StreamRunAgentFileBinaryFormat$inboundSchema;
  /** @deprecated use `StreamRunAgentFileBinaryFormat$outboundSchema` instead. */
  export const outboundSchema = StreamRunAgentFileBinaryFormat$outboundSchema;
  /** @deprecated use `StreamRunAgentFileBinaryFormat$Outbound` instead. */
  export type Outbound = StreamRunAgentFileBinaryFormat$Outbound;
}

export function streamRunAgentFileBinaryFormatToJSON(
  streamRunAgentFileBinaryFormat: StreamRunAgentFileBinaryFormat,
): string {
  return JSON.stringify(
    StreamRunAgentFileBinaryFormat$outboundSchema.parse(
      streamRunAgentFileBinaryFormat,
    ),
  );
}

export function streamRunAgentFileBinaryFormatFromJSON(
  jsonString: string,
): SafeParseResult<StreamRunAgentFileBinaryFormat, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => StreamRunAgentFileBinaryFormat$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'StreamRunAgentFileBinaryFormat' from JSON`,
  );
}

/** @internal */
export const StreamRunAgentPublicMessagePartFile$inboundSchema: z.ZodType<
  StreamRunAgentPublicMessagePartFile,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => StreamRunAgentFileBinaryFormat$inboundSchema),
  z.lazy(() => StreamRunAgentFileFileInURIFormat$inboundSchema),
]);

/** @internal */
export type StreamRunAgentPublicMessagePartFile$Outbound =
  | StreamRunAgentFileBinaryFormat$Outbound
  | StreamRunAgentFileFileInURIFormat$Outbound;

/** @internal */
export const StreamRunAgentPublicMessagePartFile$outboundSchema: z.ZodType<
  StreamRunAgentPublicMessagePartFile$Outbound,
  z.ZodTypeDef,
  StreamRunAgentPublicMessagePartFile
> = z.union([
  z.lazy(() => StreamRunAgentFileBinaryFormat$outboundSchema),
  z.lazy(() => StreamRunAgentFileFileInURIFormat$outboundSchema),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace StreamRunAgentPublicMessagePartFile$ {
  /** @deprecated use `StreamRunAgentPublicMessagePartFile$inboundSchema` instead. */
  export const inboundSchema =
    StreamRunAgentPublicMessagePartFile$inboundSchema;
  /** @deprecated use `StreamRunAgentPublicMessagePartFile$outboundSchema` instead. */
  export const outboundSchema =
    StreamRunAgentPublicMessagePartFile$outboundSchema;
  /** @deprecated use `StreamRunAgentPublicMessagePartFile$Outbound` instead. */
  export type Outbound = StreamRunAgentPublicMessagePartFile$Outbound;
}

export function streamRunAgentPublicMessagePartFileToJSON(
  streamRunAgentPublicMessagePartFile: StreamRunAgentPublicMessagePartFile,
): string {
  return JSON.stringify(
    StreamRunAgentPublicMessagePartFile$outboundSchema.parse(
      streamRunAgentPublicMessagePartFile,
    ),
  );
}

export function streamRunAgentPublicMessagePartFileFromJSON(
  jsonString: string,
): SafeParseResult<StreamRunAgentPublicMessagePartFile, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      StreamRunAgentPublicMessagePartFile$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'StreamRunAgentPublicMessagePartFile' from JSON`,
  );
}

/** @internal */
export const StreamRunAgentPublicMessagePartFilePart$inboundSchema: z.ZodType<
  StreamRunAgentPublicMessagePartFilePart,
  z.ZodTypeDef,
  unknown
> = z.object({
  kind: StreamRunAgentPublicMessagePartAgentsKind$inboundSchema,
  file: z.union([
    z.lazy(() => StreamRunAgentFileBinaryFormat$inboundSchema),
    z.lazy(() => StreamRunAgentFileFileInURIFormat$inboundSchema),
  ]),
  metadata: z.record(z.any()).optional(),
});

/** @internal */
export type StreamRunAgentPublicMessagePartFilePart$Outbound = {
  kind: string;
  file:
    | StreamRunAgentFileBinaryFormat$Outbound
    | StreamRunAgentFileFileInURIFormat$Outbound;
  metadata?: { [k: string]: any } | undefined;
};

/** @internal */
export const StreamRunAgentPublicMessagePartFilePart$outboundSchema: z.ZodType<
  StreamRunAgentPublicMessagePartFilePart$Outbound,
  z.ZodTypeDef,
  StreamRunAgentPublicMessagePartFilePart
> = z.object({
  kind: StreamRunAgentPublicMessagePartAgentsKind$outboundSchema,
  file: z.union([
    z.lazy(() => StreamRunAgentFileBinaryFormat$outboundSchema),
    z.lazy(() => StreamRunAgentFileFileInURIFormat$outboundSchema),
  ]),
  metadata: z.record(z.any()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace StreamRunAgentPublicMessagePartFilePart$ {
  /** @deprecated use `StreamRunAgentPublicMessagePartFilePart$inboundSchema` instead. */
  export const inboundSchema =
    StreamRunAgentPublicMessagePartFilePart$inboundSchema;
  /** @deprecated use `StreamRunAgentPublicMessagePartFilePart$outboundSchema` instead. */
  export const outboundSchema =
    StreamRunAgentPublicMessagePartFilePart$outboundSchema;
  /** @deprecated use `StreamRunAgentPublicMessagePartFilePart$Outbound` instead. */
  export type Outbound = StreamRunAgentPublicMessagePartFilePart$Outbound;
}

export function streamRunAgentPublicMessagePartFilePartToJSON(
  streamRunAgentPublicMessagePartFilePart:
    StreamRunAgentPublicMessagePartFilePart,
): string {
  return JSON.stringify(
    StreamRunAgentPublicMessagePartFilePart$outboundSchema.parse(
      streamRunAgentPublicMessagePartFilePart,
    ),
  );
}

export function streamRunAgentPublicMessagePartFilePartFromJSON(
  jsonString: string,
): SafeParseResult<
  StreamRunAgentPublicMessagePartFilePart,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      StreamRunAgentPublicMessagePartFilePart$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'StreamRunAgentPublicMessagePartFilePart' from JSON`,
  );
}

/** @internal */
export const StreamRunAgentPublicMessagePartKind$inboundSchema: z.ZodNativeEnum<
  typeof StreamRunAgentPublicMessagePartKind
> = z.nativeEnum(StreamRunAgentPublicMessagePartKind);

/** @internal */
export const StreamRunAgentPublicMessagePartKind$outboundSchema:
  z.ZodNativeEnum<typeof StreamRunAgentPublicMessagePartKind> =
    StreamRunAgentPublicMessagePartKind$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace StreamRunAgentPublicMessagePartKind$ {
  /** @deprecated use `StreamRunAgentPublicMessagePartKind$inboundSchema` instead. */
  export const inboundSchema =
    StreamRunAgentPublicMessagePartKind$inboundSchema;
  /** @deprecated use `StreamRunAgentPublicMessagePartKind$outboundSchema` instead. */
  export const outboundSchema =
    StreamRunAgentPublicMessagePartKind$outboundSchema;
}

/** @internal */
export const StreamRunAgentPublicMessagePartTextPart$inboundSchema: z.ZodType<
  StreamRunAgentPublicMessagePartTextPart,
  z.ZodTypeDef,
  unknown
> = z.object({
  kind: StreamRunAgentPublicMessagePartKind$inboundSchema,
  text: z.string(),
});

/** @internal */
export type StreamRunAgentPublicMessagePartTextPart$Outbound = {
  kind: string;
  text: string;
};

/** @internal */
export const StreamRunAgentPublicMessagePartTextPart$outboundSchema: z.ZodType<
  StreamRunAgentPublicMessagePartTextPart$Outbound,
  z.ZodTypeDef,
  StreamRunAgentPublicMessagePartTextPart
> = z.object({
  kind: StreamRunAgentPublicMessagePartKind$outboundSchema,
  text: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace StreamRunAgentPublicMessagePartTextPart$ {
  /** @deprecated use `StreamRunAgentPublicMessagePartTextPart$inboundSchema` instead. */
  export const inboundSchema =
    StreamRunAgentPublicMessagePartTextPart$inboundSchema;
  /** @deprecated use `StreamRunAgentPublicMessagePartTextPart$outboundSchema` instead. */
  export const outboundSchema =
    StreamRunAgentPublicMessagePartTextPart$outboundSchema;
  /** @deprecated use `StreamRunAgentPublicMessagePartTextPart$Outbound` instead. */
  export type Outbound = StreamRunAgentPublicMessagePartTextPart$Outbound;
}

export function streamRunAgentPublicMessagePartTextPartToJSON(
  streamRunAgentPublicMessagePartTextPart:
    StreamRunAgentPublicMessagePartTextPart,
): string {
  return JSON.stringify(
    StreamRunAgentPublicMessagePartTextPart$outboundSchema.parse(
      streamRunAgentPublicMessagePartTextPart,
    ),
  );
}

export function streamRunAgentPublicMessagePartTextPartFromJSON(
  jsonString: string,
): SafeParseResult<
  StreamRunAgentPublicMessagePartTextPart,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      StreamRunAgentPublicMessagePartTextPart$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'StreamRunAgentPublicMessagePartTextPart' from JSON`,
  );
}

/** @internal */
export const StreamRunAgentPublicMessagePart$inboundSchema: z.ZodType<
  StreamRunAgentPublicMessagePart,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => StreamRunAgentPublicMessagePartTextPart$inboundSchema),
  z.lazy(() => StreamRunAgentPublicMessagePartFilePart$inboundSchema),
  z.lazy(() => StreamRunAgentPublicMessagePartToolResultPart$inboundSchema),
]);

/** @internal */
export type StreamRunAgentPublicMessagePart$Outbound =
  | StreamRunAgentPublicMessagePartTextPart$Outbound
  | StreamRunAgentPublicMessagePartFilePart$Outbound
  | StreamRunAgentPublicMessagePartToolResultPart$Outbound;

/** @internal */
export const StreamRunAgentPublicMessagePart$outboundSchema: z.ZodType<
  StreamRunAgentPublicMessagePart$Outbound,
  z.ZodTypeDef,
  StreamRunAgentPublicMessagePart
> = z.union([
  z.lazy(() => StreamRunAgentPublicMessagePartTextPart$outboundSchema),
  z.lazy(() => StreamRunAgentPublicMessagePartFilePart$outboundSchema),
  z.lazy(() => StreamRunAgentPublicMessagePartToolResultPart$outboundSchema),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace StreamRunAgentPublicMessagePart$ {
  /** @deprecated use `StreamRunAgentPublicMessagePart$inboundSchema` instead. */
  export const inboundSchema = StreamRunAgentPublicMessagePart$inboundSchema;
  /** @deprecated use `StreamRunAgentPublicMessagePart$outboundSchema` instead. */
  export const outboundSchema = StreamRunAgentPublicMessagePart$outboundSchema;
  /** @deprecated use `StreamRunAgentPublicMessagePart$Outbound` instead. */
  export type Outbound = StreamRunAgentPublicMessagePart$Outbound;
}

export function streamRunAgentPublicMessagePartToJSON(
  streamRunAgentPublicMessagePart: StreamRunAgentPublicMessagePart,
): string {
  return JSON.stringify(
    StreamRunAgentPublicMessagePart$outboundSchema.parse(
      streamRunAgentPublicMessagePart,
    ),
  );
}

export function streamRunAgentPublicMessagePartFromJSON(
  jsonString: string,
): SafeParseResult<StreamRunAgentPublicMessagePart, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => StreamRunAgentPublicMessagePart$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'StreamRunAgentPublicMessagePart' from JSON`,
  );
}

/** @internal */
export const StreamRunAgentMessage$inboundSchema: z.ZodType<
  StreamRunAgentMessage,
  z.ZodTypeDef,
  unknown
> = z.object({
  messageId: z.string().optional(),
  role: z.union([
    StreamRunAgentRoleUserMessage$inboundSchema,
    StreamRunAgentRoleToolMessage$inboundSchema,
  ]),
  parts: z.array(
    z.union([
      z.lazy(() => StreamRunAgentPublicMessagePartTextPart$inboundSchema),
      z.lazy(() => StreamRunAgentPublicMessagePartFilePart$inboundSchema),
      z.lazy(() => StreamRunAgentPublicMessagePartToolResultPart$inboundSchema),
    ]),
  ),
});

/** @internal */
export type StreamRunAgentMessage$Outbound = {
  messageId?: string | undefined;
  role: string | string;
  parts: Array<
    | StreamRunAgentPublicMessagePartTextPart$Outbound
    | StreamRunAgentPublicMessagePartFilePart$Outbound
    | StreamRunAgentPublicMessagePartToolResultPart$Outbound
  >;
};

/** @internal */
export const StreamRunAgentMessage$outboundSchema: z.ZodType<
  StreamRunAgentMessage$Outbound,
  z.ZodTypeDef,
  StreamRunAgentMessage
> = z.object({
  messageId: z.string().optional(),
  role: z.union([
    StreamRunAgentRoleUserMessage$outboundSchema,
    StreamRunAgentRoleToolMessage$outboundSchema,
  ]),
  parts: z.array(
    z.union([
      z.lazy(() => StreamRunAgentPublicMessagePartTextPart$outboundSchema),
      z.lazy(() => StreamRunAgentPublicMessagePartFilePart$outboundSchema),
      z.lazy(() =>
        StreamRunAgentPublicMessagePartToolResultPart$outboundSchema
      ),
    ]),
  ),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace StreamRunAgentMessage$ {
  /** @deprecated use `StreamRunAgentMessage$inboundSchema` instead. */
  export const inboundSchema = StreamRunAgentMessage$inboundSchema;
  /** @deprecated use `StreamRunAgentMessage$outboundSchema` instead. */
  export const outboundSchema = StreamRunAgentMessage$outboundSchema;
  /** @deprecated use `StreamRunAgentMessage$Outbound` instead. */
  export type Outbound = StreamRunAgentMessage$Outbound;
}

export function streamRunAgentMessageToJSON(
  streamRunAgentMessage: StreamRunAgentMessage,
): string {
  return JSON.stringify(
    StreamRunAgentMessage$outboundSchema.parse(streamRunAgentMessage),
  );
}

export function streamRunAgentMessageFromJSON(
  jsonString: string,
): SafeParseResult<StreamRunAgentMessage, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => StreamRunAgentMessage$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'StreamRunAgentMessage' from JSON`,
  );
}

/** @internal */
export const StreamRunAgentContact$inboundSchema: z.ZodType<
  StreamRunAgentContact,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  display_name: z.string().optional(),
  email: z.string().optional(),
  metadata: z.array(z.record(z.any())).optional(),
  logo_url: z.string().optional(),
  tags: z.array(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    "display_name": "displayName",
    "logo_url": "logoUrl",
  });
});

/** @internal */
export type StreamRunAgentContact$Outbound = {
  id: string;
  display_name?: string | undefined;
  email?: string | undefined;
  metadata?: Array<{ [k: string]: any }> | undefined;
  logo_url?: string | undefined;
  tags?: Array<string> | undefined;
};

/** @internal */
export const StreamRunAgentContact$outboundSchema: z.ZodType<
  StreamRunAgentContact$Outbound,
  z.ZodTypeDef,
  StreamRunAgentContact
> = z.object({
  id: z.string(),
  displayName: z.string().optional(),
  email: z.string().optional(),
  metadata: z.array(z.record(z.any())).optional(),
  logoUrl: z.string().optional(),
  tags: z.array(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    displayName: "display_name",
    logoUrl: "logo_url",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace StreamRunAgentContact$ {
  /** @deprecated use `StreamRunAgentContact$inboundSchema` instead. */
  export const inboundSchema = StreamRunAgentContact$inboundSchema;
  /** @deprecated use `StreamRunAgentContact$outboundSchema` instead. */
  export const outboundSchema = StreamRunAgentContact$outboundSchema;
  /** @deprecated use `StreamRunAgentContact$Outbound` instead. */
  export type Outbound = StreamRunAgentContact$Outbound;
}

export function streamRunAgentContactToJSON(
  streamRunAgentContact: StreamRunAgentContact,
): string {
  return JSON.stringify(
    StreamRunAgentContact$outboundSchema.parse(streamRunAgentContact),
  );
}

export function streamRunAgentContactFromJSON(
  jsonString: string,
): SafeParseResult<StreamRunAgentContact, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => StreamRunAgentContact$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'StreamRunAgentContact' from JSON`,
  );
}

/** @internal */
export const StreamRunAgentThread$inboundSchema: z.ZodType<
  StreamRunAgentThread,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  tags: z.array(z.string()).optional(),
});

/** @internal */
export type StreamRunAgentThread$Outbound = {
  id: string;
  tags?: Array<string> | undefined;
};

/** @internal */
export const StreamRunAgentThread$outboundSchema: z.ZodType<
  StreamRunAgentThread$Outbound,
  z.ZodTypeDef,
  StreamRunAgentThread
> = z.object({
  id: z.string(),
  tags: z.array(z.string()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace StreamRunAgentThread$ {
  /** @deprecated use `StreamRunAgentThread$inboundSchema` instead. */
  export const inboundSchema = StreamRunAgentThread$inboundSchema;
  /** @deprecated use `StreamRunAgentThread$outboundSchema` instead. */
  export const outboundSchema = StreamRunAgentThread$outboundSchema;
  /** @deprecated use `StreamRunAgentThread$Outbound` instead. */
  export type Outbound = StreamRunAgentThread$Outbound;
}

export function streamRunAgentThreadToJSON(
  streamRunAgentThread: StreamRunAgentThread,
): string {
  return JSON.stringify(
    StreamRunAgentThread$outboundSchema.parse(streamRunAgentThread),
  );
}

export function streamRunAgentThreadFromJSON(
  jsonString: string,
): SafeParseResult<StreamRunAgentThread, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => StreamRunAgentThread$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'StreamRunAgentThread' from JSON`,
  );
}

/** @internal */
export const StreamRunAgentMemory$inboundSchema: z.ZodType<
  StreamRunAgentMemory,
  z.ZodTypeDef,
  unknown
> = z.object({
  entity_id: z.string(),
}).transform((v) => {
  return remap$(v, {
    "entity_id": "entityId",
  });
});

/** @internal */
export type StreamRunAgentMemory$Outbound = {
  entity_id: string;
};

/** @internal */
export const StreamRunAgentMemory$outboundSchema: z.ZodType<
  StreamRunAgentMemory$Outbound,
  z.ZodTypeDef,
  StreamRunAgentMemory
> = z.object({
  entityId: z.string(),
}).transform((v) => {
  return remap$(v, {
    entityId: "entity_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace StreamRunAgentMemory$ {
  /** @deprecated use `StreamRunAgentMemory$inboundSchema` instead. */
  export const inboundSchema = StreamRunAgentMemory$inboundSchema;
  /** @deprecated use `StreamRunAgentMemory$outboundSchema` instead. */
  export const outboundSchema = StreamRunAgentMemory$outboundSchema;
  /** @deprecated use `StreamRunAgentMemory$Outbound` instead. */
  export type Outbound = StreamRunAgentMemory$Outbound;
}

export function streamRunAgentMemoryToJSON(
  streamRunAgentMemory: StreamRunAgentMemory,
): string {
  return JSON.stringify(
    StreamRunAgentMemory$outboundSchema.parse(streamRunAgentMemory),
  );
}

export function streamRunAgentMemoryFromJSON(
  jsonString: string,
): SafeParseResult<StreamRunAgentMemory, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => StreamRunAgentMemory$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'StreamRunAgentMemory' from JSON`,
  );
}

/** @internal */
export const StreamRunAgentKnowledgeBases$inboundSchema: z.ZodType<
  StreamRunAgentKnowledgeBases,
  z.ZodTypeDef,
  unknown
> = z.object({
  knowledge_id: z.string(),
}).transform((v) => {
  return remap$(v, {
    "knowledge_id": "knowledgeId",
  });
});

/** @internal */
export type StreamRunAgentKnowledgeBases$Outbound = {
  knowledge_id: string;
};

/** @internal */
export const StreamRunAgentKnowledgeBases$outboundSchema: z.ZodType<
  StreamRunAgentKnowledgeBases$Outbound,
  z.ZodTypeDef,
  StreamRunAgentKnowledgeBases
> = z.object({
  knowledgeId: z.string(),
}).transform((v) => {
  return remap$(v, {
    knowledgeId: "knowledge_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace StreamRunAgentKnowledgeBases$ {
  /** @deprecated use `StreamRunAgentKnowledgeBases$inboundSchema` instead. */
  export const inboundSchema = StreamRunAgentKnowledgeBases$inboundSchema;
  /** @deprecated use `StreamRunAgentKnowledgeBases$outboundSchema` instead. */
  export const outboundSchema = StreamRunAgentKnowledgeBases$outboundSchema;
  /** @deprecated use `StreamRunAgentKnowledgeBases$Outbound` instead. */
  export type Outbound = StreamRunAgentKnowledgeBases$Outbound;
}

export function streamRunAgentKnowledgeBasesToJSON(
  streamRunAgentKnowledgeBases: StreamRunAgentKnowledgeBases,
): string {
  return JSON.stringify(
    StreamRunAgentKnowledgeBases$outboundSchema.parse(
      streamRunAgentKnowledgeBases,
    ),
  );
}

export function streamRunAgentKnowledgeBasesFromJSON(
  jsonString: string,
): SafeParseResult<StreamRunAgentKnowledgeBases, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => StreamRunAgentKnowledgeBases$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'StreamRunAgentKnowledgeBases' from JSON`,
  );
}

/** @internal */
export const StreamRunAgentTeamOfAgents$inboundSchema: z.ZodType<
  StreamRunAgentTeamOfAgents,
  z.ZodTypeDef,
  unknown
> = z.object({
  key: z.string(),
  role: z.string().optional(),
});

/** @internal */
export type StreamRunAgentTeamOfAgents$Outbound = {
  key: string;
  role?: string | undefined;
};

/** @internal */
export const StreamRunAgentTeamOfAgents$outboundSchema: z.ZodType<
  StreamRunAgentTeamOfAgents$Outbound,
  z.ZodTypeDef,
  StreamRunAgentTeamOfAgents
> = z.object({
  key: z.string(),
  role: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace StreamRunAgentTeamOfAgents$ {
  /** @deprecated use `StreamRunAgentTeamOfAgents$inboundSchema` instead. */
  export const inboundSchema = StreamRunAgentTeamOfAgents$inboundSchema;
  /** @deprecated use `StreamRunAgentTeamOfAgents$outboundSchema` instead. */
  export const outboundSchema = StreamRunAgentTeamOfAgents$outboundSchema;
  /** @deprecated use `StreamRunAgentTeamOfAgents$Outbound` instead. */
  export type Outbound = StreamRunAgentTeamOfAgents$Outbound;
}

export function streamRunAgentTeamOfAgentsToJSON(
  streamRunAgentTeamOfAgents: StreamRunAgentTeamOfAgents,
): string {
  return JSON.stringify(
    StreamRunAgentTeamOfAgents$outboundSchema.parse(streamRunAgentTeamOfAgents),
  );
}

export function streamRunAgentTeamOfAgentsFromJSON(
  jsonString: string,
): SafeParseResult<StreamRunAgentTeamOfAgents, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => StreamRunAgentTeamOfAgents$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'StreamRunAgentTeamOfAgents' from JSON`,
  );
}

/** @internal */
export const StreamRunAgentAgentToolInputRunAgentsRequestRequestBodySettingsTools14Type$inboundSchema:
  z.ZodNativeEnum<
    typeof StreamRunAgentAgentToolInputRunAgentsRequestRequestBodySettingsTools14Type
  > = z.nativeEnum(
    StreamRunAgentAgentToolInputRunAgentsRequestRequestBodySettingsTools14Type,
  );

/** @internal */
export const StreamRunAgentAgentToolInputRunAgentsRequestRequestBodySettingsTools14Type$outboundSchema:
  z.ZodNativeEnum<
    typeof StreamRunAgentAgentToolInputRunAgentsRequestRequestBodySettingsTools14Type
  > =
    StreamRunAgentAgentToolInputRunAgentsRequestRequestBodySettingsTools14Type$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace StreamRunAgentAgentToolInputRunAgentsRequestRequestBodySettingsTools14Type$ {
  /** @deprecated use `StreamRunAgentAgentToolInputRunAgentsRequestRequestBodySettingsTools14Type$inboundSchema` instead. */
  export const inboundSchema =
    StreamRunAgentAgentToolInputRunAgentsRequestRequestBodySettingsTools14Type$inboundSchema;
  /** @deprecated use `StreamRunAgentAgentToolInputRunAgentsRequestRequestBodySettingsTools14Type$outboundSchema` instead. */
  export const outboundSchema =
    StreamRunAgentAgentToolInputRunAgentsRequestRequestBodySettingsTools14Type$outboundSchema;
}

/** @internal */
export const StreamRunAgentAgentToolInputRunFunction$inboundSchema: z.ZodType<
  StreamRunAgentAgentToolInputRunFunction,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.string(),
  description: z.string().optional(),
  strict: z.boolean().optional(),
  parameters: z.record(z.any()).optional(),
});

/** @internal */
export type StreamRunAgentAgentToolInputRunFunction$Outbound = {
  name: string;
  description?: string | undefined;
  strict?: boolean | undefined;
  parameters?: { [k: string]: any } | undefined;
};

/** @internal */
export const StreamRunAgentAgentToolInputRunFunction$outboundSchema: z.ZodType<
  StreamRunAgentAgentToolInputRunFunction$Outbound,
  z.ZodTypeDef,
  StreamRunAgentAgentToolInputRunFunction
> = z.object({
  name: z.string(),
  description: z.string().optional(),
  strict: z.boolean().optional(),
  parameters: z.record(z.any()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace StreamRunAgentAgentToolInputRunFunction$ {
  /** @deprecated use `StreamRunAgentAgentToolInputRunFunction$inboundSchema` instead. */
  export const inboundSchema =
    StreamRunAgentAgentToolInputRunFunction$inboundSchema;
  /** @deprecated use `StreamRunAgentAgentToolInputRunFunction$outboundSchema` instead. */
  export const outboundSchema =
    StreamRunAgentAgentToolInputRunFunction$outboundSchema;
  /** @deprecated use `StreamRunAgentAgentToolInputRunFunction$Outbound` instead. */
  export type Outbound = StreamRunAgentAgentToolInputRunFunction$Outbound;
}

export function streamRunAgentAgentToolInputRunFunctionToJSON(
  streamRunAgentAgentToolInputRunFunction:
    StreamRunAgentAgentToolInputRunFunction,
): string {
  return JSON.stringify(
    StreamRunAgentAgentToolInputRunFunction$outboundSchema.parse(
      streamRunAgentAgentToolInputRunFunction,
    ),
  );
}

export function streamRunAgentAgentToolInputRunFunctionFromJSON(
  jsonString: string,
): SafeParseResult<
  StreamRunAgentAgentToolInputRunFunction,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      StreamRunAgentAgentToolInputRunFunction$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'StreamRunAgentAgentToolInputRunFunction' from JSON`,
  );
}

/** @internal */
export const AgentToolInputRunFunctionToolRun$inboundSchema: z.ZodType<
  AgentToolInputRunFunctionToolRun,
  z.ZodTypeDef,
  unknown
> = z.object({
  type:
    StreamRunAgentAgentToolInputRunAgentsRequestRequestBodySettingsTools14Type$inboundSchema,
  key: z.string(),
  _id: z.string().optional(),
  display_name: z.string().optional(),
  description: z.string().optional(),
  function: z.lazy(() => StreamRunAgentAgentToolInputRunFunction$inboundSchema),
  requires_approval: z.boolean().default(false),
}).transform((v) => {
  return remap$(v, {
    "_id": "id",
    "display_name": "displayName",
    "requires_approval": "requiresApproval",
  });
});

/** @internal */
export type AgentToolInputRunFunctionToolRun$Outbound = {
  type: string;
  key: string;
  _id?: string | undefined;
  display_name?: string | undefined;
  description?: string | undefined;
  function: StreamRunAgentAgentToolInputRunFunction$Outbound;
  requires_approval: boolean;
};

/** @internal */
export const AgentToolInputRunFunctionToolRun$outboundSchema: z.ZodType<
  AgentToolInputRunFunctionToolRun$Outbound,
  z.ZodTypeDef,
  AgentToolInputRunFunctionToolRun
> = z.object({
  type:
    StreamRunAgentAgentToolInputRunAgentsRequestRequestBodySettingsTools14Type$outboundSchema,
  key: z.string(),
  id: z.string().optional(),
  displayName: z.string().optional(),
  description: z.string().optional(),
  function: z.lazy(() =>
    StreamRunAgentAgentToolInputRunFunction$outboundSchema
  ),
  requiresApproval: z.boolean().default(false),
}).transform((v) => {
  return remap$(v, {
    id: "_id",
    displayName: "display_name",
    requiresApproval: "requires_approval",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AgentToolInputRunFunctionToolRun$ {
  /** @deprecated use `AgentToolInputRunFunctionToolRun$inboundSchema` instead. */
  export const inboundSchema = AgentToolInputRunFunctionToolRun$inboundSchema;
  /** @deprecated use `AgentToolInputRunFunctionToolRun$outboundSchema` instead. */
  export const outboundSchema = AgentToolInputRunFunctionToolRun$outboundSchema;
  /** @deprecated use `AgentToolInputRunFunctionToolRun$Outbound` instead. */
  export type Outbound = AgentToolInputRunFunctionToolRun$Outbound;
}

export function agentToolInputRunFunctionToolRunToJSON(
  agentToolInputRunFunctionToolRun: AgentToolInputRunFunctionToolRun,
): string {
  return JSON.stringify(
    AgentToolInputRunFunctionToolRun$outboundSchema.parse(
      agentToolInputRunFunctionToolRun,
    ),
  );
}

export function agentToolInputRunFunctionToolRunFromJSON(
  jsonString: string,
): SafeParseResult<AgentToolInputRunFunctionToolRun, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AgentToolInputRunFunctionToolRun$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AgentToolInputRunFunctionToolRun' from JSON`,
  );
}

/** @internal */
export const StreamRunAgentAgentToolInputRunAgentsRequestRequestBodySettingsTools13Type$inboundSchema:
  z.ZodNativeEnum<
    typeof StreamRunAgentAgentToolInputRunAgentsRequestRequestBodySettingsTools13Type
  > = z.nativeEnum(
    StreamRunAgentAgentToolInputRunAgentsRequestRequestBodySettingsTools13Type,
  );

/** @internal */
export const StreamRunAgentAgentToolInputRunAgentsRequestRequestBodySettingsTools13Type$outboundSchema:
  z.ZodNativeEnum<
    typeof StreamRunAgentAgentToolInputRunAgentsRequestRequestBodySettingsTools13Type
  > =
    StreamRunAgentAgentToolInputRunAgentsRequestRequestBodySettingsTools13Type$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace StreamRunAgentAgentToolInputRunAgentsRequestRequestBodySettingsTools13Type$ {
  /** @deprecated use `StreamRunAgentAgentToolInputRunAgentsRequestRequestBodySettingsTools13Type$inboundSchema` instead. */
  export const inboundSchema =
    StreamRunAgentAgentToolInputRunAgentsRequestRequestBodySettingsTools13Type$inboundSchema;
  /** @deprecated use `StreamRunAgentAgentToolInputRunAgentsRequestRequestBodySettingsTools13Type$outboundSchema` instead. */
  export const outboundSchema =
    StreamRunAgentAgentToolInputRunAgentsRequestRequestBodySettingsTools13Type$outboundSchema;
}

/** @internal */
export const AgentToolInputRunLanguage$inboundSchema: z.ZodNativeEnum<
  typeof AgentToolInputRunLanguage
> = z.nativeEnum(AgentToolInputRunLanguage);

/** @internal */
export const AgentToolInputRunLanguage$outboundSchema: z.ZodNativeEnum<
  typeof AgentToolInputRunLanguage
> = AgentToolInputRunLanguage$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AgentToolInputRunLanguage$ {
  /** @deprecated use `AgentToolInputRunLanguage$inboundSchema` instead. */
  export const inboundSchema = AgentToolInputRunLanguage$inboundSchema;
  /** @deprecated use `AgentToolInputRunLanguage$outboundSchema` instead. */
  export const outboundSchema = AgentToolInputRunLanguage$outboundSchema;
}

/** @internal */
export const AgentToolInputRunCodeTool$inboundSchema: z.ZodType<
  AgentToolInputRunCodeTool,
  z.ZodTypeDef,
  unknown
> = z.object({
  parameters: z.record(z.any()).optional(),
  language: AgentToolInputRunLanguage$inboundSchema,
  code: z.string(),
});

/** @internal */
export type AgentToolInputRunCodeTool$Outbound = {
  parameters?: { [k: string]: any } | undefined;
  language: string;
  code: string;
};

/** @internal */
export const AgentToolInputRunCodeTool$outboundSchema: z.ZodType<
  AgentToolInputRunCodeTool$Outbound,
  z.ZodTypeDef,
  AgentToolInputRunCodeTool
> = z.object({
  parameters: z.record(z.any()).optional(),
  language: AgentToolInputRunLanguage$outboundSchema,
  code: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AgentToolInputRunCodeTool$ {
  /** @deprecated use `AgentToolInputRunCodeTool$inboundSchema` instead. */
  export const inboundSchema = AgentToolInputRunCodeTool$inboundSchema;
  /** @deprecated use `AgentToolInputRunCodeTool$outboundSchema` instead. */
  export const outboundSchema = AgentToolInputRunCodeTool$outboundSchema;
  /** @deprecated use `AgentToolInputRunCodeTool$Outbound` instead. */
  export type Outbound = AgentToolInputRunCodeTool$Outbound;
}

export function agentToolInputRunCodeToolToJSON(
  agentToolInputRunCodeTool: AgentToolInputRunCodeTool,
): string {
  return JSON.stringify(
    AgentToolInputRunCodeTool$outboundSchema.parse(agentToolInputRunCodeTool),
  );
}

export function agentToolInputRunCodeToolFromJSON(
  jsonString: string,
): SafeParseResult<AgentToolInputRunCodeTool, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AgentToolInputRunCodeTool$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AgentToolInputRunCodeTool' from JSON`,
  );
}

/** @internal */
export const AgentToolInputRunCodeToolRun$inboundSchema: z.ZodType<
  AgentToolInputRunCodeToolRun,
  z.ZodTypeDef,
  unknown
> = z.object({
  type:
    StreamRunAgentAgentToolInputRunAgentsRequestRequestBodySettingsTools13Type$inboundSchema,
  key: z.string(),
  _id: z.string().optional(),
  display_name: z.string().optional(),
  description: z.string(),
  code_tool: z.lazy(() => AgentToolInputRunCodeTool$inboundSchema),
  requires_approval: z.boolean().default(false),
}).transform((v) => {
  return remap$(v, {
    "_id": "id",
    "display_name": "displayName",
    "code_tool": "codeTool",
    "requires_approval": "requiresApproval",
  });
});

/** @internal */
export type AgentToolInputRunCodeToolRun$Outbound = {
  type: string;
  key: string;
  _id?: string | undefined;
  display_name?: string | undefined;
  description: string;
  code_tool: AgentToolInputRunCodeTool$Outbound;
  requires_approval: boolean;
};

/** @internal */
export const AgentToolInputRunCodeToolRun$outboundSchema: z.ZodType<
  AgentToolInputRunCodeToolRun$Outbound,
  z.ZodTypeDef,
  AgentToolInputRunCodeToolRun
> = z.object({
  type:
    StreamRunAgentAgentToolInputRunAgentsRequestRequestBodySettingsTools13Type$outboundSchema,
  key: z.string(),
  id: z.string().optional(),
  displayName: z.string().optional(),
  description: z.string(),
  codeTool: z.lazy(() => AgentToolInputRunCodeTool$outboundSchema),
  requiresApproval: z.boolean().default(false),
}).transform((v) => {
  return remap$(v, {
    id: "_id",
    displayName: "display_name",
    codeTool: "code_tool",
    requiresApproval: "requires_approval",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AgentToolInputRunCodeToolRun$ {
  /** @deprecated use `AgentToolInputRunCodeToolRun$inboundSchema` instead. */
  export const inboundSchema = AgentToolInputRunCodeToolRun$inboundSchema;
  /** @deprecated use `AgentToolInputRunCodeToolRun$outboundSchema` instead. */
  export const outboundSchema = AgentToolInputRunCodeToolRun$outboundSchema;
  /** @deprecated use `AgentToolInputRunCodeToolRun$Outbound` instead. */
  export type Outbound = AgentToolInputRunCodeToolRun$Outbound;
}

export function agentToolInputRunCodeToolRunToJSON(
  agentToolInputRunCodeToolRun: AgentToolInputRunCodeToolRun,
): string {
  return JSON.stringify(
    AgentToolInputRunCodeToolRun$outboundSchema.parse(
      agentToolInputRunCodeToolRun,
    ),
  );
}

export function agentToolInputRunCodeToolRunFromJSON(
  jsonString: string,
): SafeParseResult<AgentToolInputRunCodeToolRun, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AgentToolInputRunCodeToolRun$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AgentToolInputRunCodeToolRun' from JSON`,
  );
}

/** @internal */
export const StreamRunAgentAgentToolInputRunAgentsRequestRequestBodySettingsTools12Type$inboundSchema:
  z.ZodNativeEnum<
    typeof StreamRunAgentAgentToolInputRunAgentsRequestRequestBodySettingsTools12Type
  > = z.nativeEnum(
    StreamRunAgentAgentToolInputRunAgentsRequestRequestBodySettingsTools12Type,
  );

/** @internal */
export const StreamRunAgentAgentToolInputRunAgentsRequestRequestBodySettingsTools12Type$outboundSchema:
  z.ZodNativeEnum<
    typeof StreamRunAgentAgentToolInputRunAgentsRequestRequestBodySettingsTools12Type
  > =
    StreamRunAgentAgentToolInputRunAgentsRequestRequestBodySettingsTools12Type$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace StreamRunAgentAgentToolInputRunAgentsRequestRequestBodySettingsTools12Type$ {
  /** @deprecated use `StreamRunAgentAgentToolInputRunAgentsRequestRequestBodySettingsTools12Type$inboundSchema` instead. */
  export const inboundSchema =
    StreamRunAgentAgentToolInputRunAgentsRequestRequestBodySettingsTools12Type$inboundSchema;
  /** @deprecated use `StreamRunAgentAgentToolInputRunAgentsRequestRequestBodySettingsTools12Type$outboundSchema` instead. */
  export const outboundSchema =
    StreamRunAgentAgentToolInputRunAgentsRequestRequestBodySettingsTools12Type$outboundSchema;
}

/** @internal */
export const AgentToolInputRunMethod$inboundSchema: z.ZodNativeEnum<
  typeof AgentToolInputRunMethod
> = z.nativeEnum(AgentToolInputRunMethod);

/** @internal */
export const AgentToolInputRunMethod$outboundSchema: z.ZodNativeEnum<
  typeof AgentToolInputRunMethod
> = AgentToolInputRunMethod$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AgentToolInputRunMethod$ {
  /** @deprecated use `AgentToolInputRunMethod$inboundSchema` instead. */
  export const inboundSchema = AgentToolInputRunMethod$inboundSchema;
  /** @deprecated use `AgentToolInputRunMethod$outboundSchema` instead. */
  export const outboundSchema = AgentToolInputRunMethod$outboundSchema;
}

/** @internal */
export const AgentToolInputRunBlueprint$inboundSchema: z.ZodType<
  AgentToolInputRunBlueprint,
  z.ZodTypeDef,
  unknown
> = z.object({
  url: z.string(),
  method: AgentToolInputRunMethod$inboundSchema,
  headers: z.record(z.string()).optional(),
  body: z.record(z.any()).optional(),
});

/** @internal */
export type AgentToolInputRunBlueprint$Outbound = {
  url: string;
  method: string;
  headers?: { [k: string]: string } | undefined;
  body?: { [k: string]: any } | undefined;
};

/** @internal */
export const AgentToolInputRunBlueprint$outboundSchema: z.ZodType<
  AgentToolInputRunBlueprint$Outbound,
  z.ZodTypeDef,
  AgentToolInputRunBlueprint
> = z.object({
  url: z.string(),
  method: AgentToolInputRunMethod$outboundSchema,
  headers: z.record(z.string()).optional(),
  body: z.record(z.any()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AgentToolInputRunBlueprint$ {
  /** @deprecated use `AgentToolInputRunBlueprint$inboundSchema` instead. */
  export const inboundSchema = AgentToolInputRunBlueprint$inboundSchema;
  /** @deprecated use `AgentToolInputRunBlueprint$outboundSchema` instead. */
  export const outboundSchema = AgentToolInputRunBlueprint$outboundSchema;
  /** @deprecated use `AgentToolInputRunBlueprint$Outbound` instead. */
  export type Outbound = AgentToolInputRunBlueprint$Outbound;
}

export function agentToolInputRunBlueprintToJSON(
  agentToolInputRunBlueprint: AgentToolInputRunBlueprint,
): string {
  return JSON.stringify(
    AgentToolInputRunBlueprint$outboundSchema.parse(agentToolInputRunBlueprint),
  );
}

export function agentToolInputRunBlueprintFromJSON(
  jsonString: string,
): SafeParseResult<AgentToolInputRunBlueprint, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AgentToolInputRunBlueprint$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AgentToolInputRunBlueprint' from JSON`,
  );
}

/** @internal */
export const StreamRunAgentAgentToolInputRunAgentsRequestRequestBodySettingsTools12HttpType$inboundSchema:
  z.ZodNativeEnum<
    typeof StreamRunAgentAgentToolInputRunAgentsRequestRequestBodySettingsTools12HttpType
  > = z.nativeEnum(
    StreamRunAgentAgentToolInputRunAgentsRequestRequestBodySettingsTools12HttpType,
  );

/** @internal */
export const StreamRunAgentAgentToolInputRunAgentsRequestRequestBodySettingsTools12HttpType$outboundSchema:
  z.ZodNativeEnum<
    typeof StreamRunAgentAgentToolInputRunAgentsRequestRequestBodySettingsTools12HttpType
  > =
    StreamRunAgentAgentToolInputRunAgentsRequestRequestBodySettingsTools12HttpType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace StreamRunAgentAgentToolInputRunAgentsRequestRequestBodySettingsTools12HttpType$ {
  /** @deprecated use `StreamRunAgentAgentToolInputRunAgentsRequestRequestBodySettingsTools12HttpType$inboundSchema` instead. */
  export const inboundSchema =
    StreamRunAgentAgentToolInputRunAgentsRequestRequestBodySettingsTools12HttpType$inboundSchema;
  /** @deprecated use `StreamRunAgentAgentToolInputRunAgentsRequestRequestBodySettingsTools12HttpType$outboundSchema` instead. */
  export const outboundSchema =
    StreamRunAgentAgentToolInputRunAgentsRequestRequestBodySettingsTools12HttpType$outboundSchema;
}

/** @internal */
export const AgentToolInputRunDefaultValue$inboundSchema: z.ZodType<
  AgentToolInputRunDefaultValue,
  z.ZodTypeDef,
  unknown
> = z.union([z.string(), z.number(), z.boolean()]);

/** @internal */
export type AgentToolInputRunDefaultValue$Outbound = string | number | boolean;

/** @internal */
export const AgentToolInputRunDefaultValue$outboundSchema: z.ZodType<
  AgentToolInputRunDefaultValue$Outbound,
  z.ZodTypeDef,
  AgentToolInputRunDefaultValue
> = z.union([z.string(), z.number(), z.boolean()]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AgentToolInputRunDefaultValue$ {
  /** @deprecated use `AgentToolInputRunDefaultValue$inboundSchema` instead. */
  export const inboundSchema = AgentToolInputRunDefaultValue$inboundSchema;
  /** @deprecated use `AgentToolInputRunDefaultValue$outboundSchema` instead. */
  export const outboundSchema = AgentToolInputRunDefaultValue$outboundSchema;
  /** @deprecated use `AgentToolInputRunDefaultValue$Outbound` instead. */
  export type Outbound = AgentToolInputRunDefaultValue$Outbound;
}

export function agentToolInputRunDefaultValueToJSON(
  agentToolInputRunDefaultValue: AgentToolInputRunDefaultValue,
): string {
  return JSON.stringify(
    AgentToolInputRunDefaultValue$outboundSchema.parse(
      agentToolInputRunDefaultValue,
    ),
  );
}

export function agentToolInputRunDefaultValueFromJSON(
  jsonString: string,
): SafeParseResult<AgentToolInputRunDefaultValue, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AgentToolInputRunDefaultValue$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AgentToolInputRunDefaultValue' from JSON`,
  );
}

/** @internal */
export const AgentToolInputRunArguments$inboundSchema: z.ZodType<
  AgentToolInputRunArguments,
  z.ZodTypeDef,
  unknown
> = z.object({
  type:
    StreamRunAgentAgentToolInputRunAgentsRequestRequestBodySettingsTools12HttpType$inboundSchema,
  description: z.string(),
  send_to_model: z.boolean().default(true),
  default_value: z.union([z.string(), z.number(), z.boolean()]).optional(),
}).transform((v) => {
  return remap$(v, {
    "send_to_model": "sendToModel",
    "default_value": "defaultValue",
  });
});

/** @internal */
export type AgentToolInputRunArguments$Outbound = {
  type: string;
  description: string;
  send_to_model: boolean;
  default_value?: string | number | boolean | undefined;
};

/** @internal */
export const AgentToolInputRunArguments$outboundSchema: z.ZodType<
  AgentToolInputRunArguments$Outbound,
  z.ZodTypeDef,
  AgentToolInputRunArguments
> = z.object({
  type:
    StreamRunAgentAgentToolInputRunAgentsRequestRequestBodySettingsTools12HttpType$outboundSchema,
  description: z.string(),
  sendToModel: z.boolean().default(true),
  defaultValue: z.union([z.string(), z.number(), z.boolean()]).optional(),
}).transform((v) => {
  return remap$(v, {
    sendToModel: "send_to_model",
    defaultValue: "default_value",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AgentToolInputRunArguments$ {
  /** @deprecated use `AgentToolInputRunArguments$inboundSchema` instead. */
  export const inboundSchema = AgentToolInputRunArguments$inboundSchema;
  /** @deprecated use `AgentToolInputRunArguments$outboundSchema` instead. */
  export const outboundSchema = AgentToolInputRunArguments$outboundSchema;
  /** @deprecated use `AgentToolInputRunArguments$Outbound` instead. */
  export type Outbound = AgentToolInputRunArguments$Outbound;
}

export function agentToolInputRunArgumentsToJSON(
  agentToolInputRunArguments: AgentToolInputRunArguments,
): string {
  return JSON.stringify(
    AgentToolInputRunArguments$outboundSchema.parse(agentToolInputRunArguments),
  );
}

export function agentToolInputRunArgumentsFromJSON(
  jsonString: string,
): SafeParseResult<AgentToolInputRunArguments, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AgentToolInputRunArguments$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AgentToolInputRunArguments' from JSON`,
  );
}

/** @internal */
export const AgentToolInputRunHttp$inboundSchema: z.ZodType<
  AgentToolInputRunHttp,
  z.ZodTypeDef,
  unknown
> = z.object({
  blueprint: z.lazy(() => AgentToolInputRunBlueprint$inboundSchema),
  arguments: z.record(z.lazy(() => AgentToolInputRunArguments$inboundSchema))
    .optional(),
});

/** @internal */
export type AgentToolInputRunHttp$Outbound = {
  blueprint: AgentToolInputRunBlueprint$Outbound;
  arguments?: { [k: string]: AgentToolInputRunArguments$Outbound } | undefined;
};

/** @internal */
export const AgentToolInputRunHttp$outboundSchema: z.ZodType<
  AgentToolInputRunHttp$Outbound,
  z.ZodTypeDef,
  AgentToolInputRunHttp
> = z.object({
  blueprint: z.lazy(() => AgentToolInputRunBlueprint$outboundSchema),
  arguments: z.record(z.lazy(() => AgentToolInputRunArguments$outboundSchema))
    .optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AgentToolInputRunHttp$ {
  /** @deprecated use `AgentToolInputRunHttp$inboundSchema` instead. */
  export const inboundSchema = AgentToolInputRunHttp$inboundSchema;
  /** @deprecated use `AgentToolInputRunHttp$outboundSchema` instead. */
  export const outboundSchema = AgentToolInputRunHttp$outboundSchema;
  /** @deprecated use `AgentToolInputRunHttp$Outbound` instead. */
  export type Outbound = AgentToolInputRunHttp$Outbound;
}

export function agentToolInputRunHttpToJSON(
  agentToolInputRunHttp: AgentToolInputRunHttp,
): string {
  return JSON.stringify(
    AgentToolInputRunHttp$outboundSchema.parse(agentToolInputRunHttp),
  );
}

export function agentToolInputRunHttpFromJSON(
  jsonString: string,
): SafeParseResult<AgentToolInputRunHttp, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AgentToolInputRunHttp$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AgentToolInputRunHttp' from JSON`,
  );
}

/** @internal */
export const AgentToolInputRunHTTPToolRun$inboundSchema: z.ZodType<
  AgentToolInputRunHTTPToolRun,
  z.ZodTypeDef,
  unknown
> = z.object({
  type:
    StreamRunAgentAgentToolInputRunAgentsRequestRequestBodySettingsTools12Type$inboundSchema,
  key: z.string(),
  _id: z.string().optional(),
  display_name: z.string().optional(),
  description: z.string(),
  http: z.lazy(() => AgentToolInputRunHttp$inboundSchema),
  requires_approval: z.boolean().default(false),
}).transform((v) => {
  return remap$(v, {
    "_id": "id",
    "display_name": "displayName",
    "requires_approval": "requiresApproval",
  });
});

/** @internal */
export type AgentToolInputRunHTTPToolRun$Outbound = {
  type: string;
  key: string;
  _id?: string | undefined;
  display_name?: string | undefined;
  description: string;
  http: AgentToolInputRunHttp$Outbound;
  requires_approval: boolean;
};

/** @internal */
export const AgentToolInputRunHTTPToolRun$outboundSchema: z.ZodType<
  AgentToolInputRunHTTPToolRun$Outbound,
  z.ZodTypeDef,
  AgentToolInputRunHTTPToolRun
> = z.object({
  type:
    StreamRunAgentAgentToolInputRunAgentsRequestRequestBodySettingsTools12Type$outboundSchema,
  key: z.string(),
  id: z.string().optional(),
  displayName: z.string().optional(),
  description: z.string(),
  http: z.lazy(() => AgentToolInputRunHttp$outboundSchema),
  requiresApproval: z.boolean().default(false),
}).transform((v) => {
  return remap$(v, {
    id: "_id",
    displayName: "display_name",
    requiresApproval: "requires_approval",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AgentToolInputRunHTTPToolRun$ {
  /** @deprecated use `AgentToolInputRunHTTPToolRun$inboundSchema` instead. */
  export const inboundSchema = AgentToolInputRunHTTPToolRun$inboundSchema;
  /** @deprecated use `AgentToolInputRunHTTPToolRun$outboundSchema` instead. */
  export const outboundSchema = AgentToolInputRunHTTPToolRun$outboundSchema;
  /** @deprecated use `AgentToolInputRunHTTPToolRun$Outbound` instead. */
  export type Outbound = AgentToolInputRunHTTPToolRun$Outbound;
}

export function agentToolInputRunHTTPToolRunToJSON(
  agentToolInputRunHTTPToolRun: AgentToolInputRunHTTPToolRun,
): string {
  return JSON.stringify(
    AgentToolInputRunHTTPToolRun$outboundSchema.parse(
      agentToolInputRunHTTPToolRun,
    ),
  );
}

export function agentToolInputRunHTTPToolRunFromJSON(
  jsonString: string,
): SafeParseResult<AgentToolInputRunHTTPToolRun, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AgentToolInputRunHTTPToolRun$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AgentToolInputRunHTTPToolRun' from JSON`,
  );
}

/** @internal */
export const StreamRunAgentAgentToolInputRunAgentsRequestRequestBodySettingsTools11Type$inboundSchema:
  z.ZodNativeEnum<
    typeof StreamRunAgentAgentToolInputRunAgentsRequestRequestBodySettingsTools11Type
  > = z.nativeEnum(
    StreamRunAgentAgentToolInputRunAgentsRequestRequestBodySettingsTools11Type,
  );

/** @internal */
export const StreamRunAgentAgentToolInputRunAgentsRequestRequestBodySettingsTools11Type$outboundSchema:
  z.ZodNativeEnum<
    typeof StreamRunAgentAgentToolInputRunAgentsRequestRequestBodySettingsTools11Type
  > =
    StreamRunAgentAgentToolInputRunAgentsRequestRequestBodySettingsTools11Type$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace StreamRunAgentAgentToolInputRunAgentsRequestRequestBodySettingsTools11Type$ {
  /** @deprecated use `StreamRunAgentAgentToolInputRunAgentsRequestRequestBodySettingsTools11Type$inboundSchema` instead. */
  export const inboundSchema =
    StreamRunAgentAgentToolInputRunAgentsRequestRequestBodySettingsTools11Type$inboundSchema;
  /** @deprecated use `StreamRunAgentAgentToolInputRunAgentsRequestRequestBodySettingsTools11Type$outboundSchema` instead. */
  export const outboundSchema =
    StreamRunAgentAgentToolInputRunAgentsRequestRequestBodySettingsTools11Type$outboundSchema;
}

/** @internal */
export const StreamRunAgentAgentToolInputRunCurrentDateTool$inboundSchema:
  z.ZodType<
    StreamRunAgentAgentToolInputRunCurrentDateTool,
    z.ZodTypeDef,
    unknown
  > = z.object({
    type:
      StreamRunAgentAgentToolInputRunAgentsRequestRequestBodySettingsTools11Type$inboundSchema,
    requires_approval: z.boolean().default(false),
  }).transform((v) => {
    return remap$(v, {
      "requires_approval": "requiresApproval",
    });
  });

/** @internal */
export type StreamRunAgentAgentToolInputRunCurrentDateTool$Outbound = {
  type: string;
  requires_approval: boolean;
};

/** @internal */
export const StreamRunAgentAgentToolInputRunCurrentDateTool$outboundSchema:
  z.ZodType<
    StreamRunAgentAgentToolInputRunCurrentDateTool$Outbound,
    z.ZodTypeDef,
    StreamRunAgentAgentToolInputRunCurrentDateTool
  > = z.object({
    type:
      StreamRunAgentAgentToolInputRunAgentsRequestRequestBodySettingsTools11Type$outboundSchema,
    requiresApproval: z.boolean().default(false),
  }).transform((v) => {
    return remap$(v, {
      requiresApproval: "requires_approval",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace StreamRunAgentAgentToolInputRunCurrentDateTool$ {
  /** @deprecated use `StreamRunAgentAgentToolInputRunCurrentDateTool$inboundSchema` instead. */
  export const inboundSchema =
    StreamRunAgentAgentToolInputRunCurrentDateTool$inboundSchema;
  /** @deprecated use `StreamRunAgentAgentToolInputRunCurrentDateTool$outboundSchema` instead. */
  export const outboundSchema =
    StreamRunAgentAgentToolInputRunCurrentDateTool$outboundSchema;
  /** @deprecated use `StreamRunAgentAgentToolInputRunCurrentDateTool$Outbound` instead. */
  export type Outbound =
    StreamRunAgentAgentToolInputRunCurrentDateTool$Outbound;
}

export function streamRunAgentAgentToolInputRunCurrentDateToolToJSON(
  streamRunAgentAgentToolInputRunCurrentDateTool:
    StreamRunAgentAgentToolInputRunCurrentDateTool,
): string {
  return JSON.stringify(
    StreamRunAgentAgentToolInputRunCurrentDateTool$outboundSchema.parse(
      streamRunAgentAgentToolInputRunCurrentDateTool,
    ),
  );
}

export function streamRunAgentAgentToolInputRunCurrentDateToolFromJSON(
  jsonString: string,
): SafeParseResult<
  StreamRunAgentAgentToolInputRunCurrentDateTool,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      StreamRunAgentAgentToolInputRunCurrentDateTool$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'StreamRunAgentAgentToolInputRunCurrentDateTool' from JSON`,
  );
}

/** @internal */
export const StreamRunAgentAgentToolInputRunAgentsRequestRequestBodySettingsTools10Type$inboundSchema:
  z.ZodNativeEnum<
    typeof StreamRunAgentAgentToolInputRunAgentsRequestRequestBodySettingsTools10Type
  > = z.nativeEnum(
    StreamRunAgentAgentToolInputRunAgentsRequestRequestBodySettingsTools10Type,
  );

/** @internal */
export const StreamRunAgentAgentToolInputRunAgentsRequestRequestBodySettingsTools10Type$outboundSchema:
  z.ZodNativeEnum<
    typeof StreamRunAgentAgentToolInputRunAgentsRequestRequestBodySettingsTools10Type
  > =
    StreamRunAgentAgentToolInputRunAgentsRequestRequestBodySettingsTools10Type$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace StreamRunAgentAgentToolInputRunAgentsRequestRequestBodySettingsTools10Type$ {
  /** @deprecated use `StreamRunAgentAgentToolInputRunAgentsRequestRequestBodySettingsTools10Type$inboundSchema` instead. */
  export const inboundSchema =
    StreamRunAgentAgentToolInputRunAgentsRequestRequestBodySettingsTools10Type$inboundSchema;
  /** @deprecated use `StreamRunAgentAgentToolInputRunAgentsRequestRequestBodySettingsTools10Type$outboundSchema` instead. */
  export const outboundSchema =
    StreamRunAgentAgentToolInputRunAgentsRequestRequestBodySettingsTools10Type$outboundSchema;
}

/** @internal */
export const StreamRunAgentAgentToolInputRunQueryKnowledgeBaseTool$inboundSchema:
  z.ZodType<
    StreamRunAgentAgentToolInputRunQueryKnowledgeBaseTool,
    z.ZodTypeDef,
    unknown
  > = z.object({
    type:
      StreamRunAgentAgentToolInputRunAgentsRequestRequestBodySettingsTools10Type$inboundSchema,
    requires_approval: z.boolean().default(false),
  }).transform((v) => {
    return remap$(v, {
      "requires_approval": "requiresApproval",
    });
  });

/** @internal */
export type StreamRunAgentAgentToolInputRunQueryKnowledgeBaseTool$Outbound = {
  type: string;
  requires_approval: boolean;
};

/** @internal */
export const StreamRunAgentAgentToolInputRunQueryKnowledgeBaseTool$outboundSchema:
  z.ZodType<
    StreamRunAgentAgentToolInputRunQueryKnowledgeBaseTool$Outbound,
    z.ZodTypeDef,
    StreamRunAgentAgentToolInputRunQueryKnowledgeBaseTool
  > = z.object({
    type:
      StreamRunAgentAgentToolInputRunAgentsRequestRequestBodySettingsTools10Type$outboundSchema,
    requiresApproval: z.boolean().default(false),
  }).transform((v) => {
    return remap$(v, {
      requiresApproval: "requires_approval",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace StreamRunAgentAgentToolInputRunQueryKnowledgeBaseTool$ {
  /** @deprecated use `StreamRunAgentAgentToolInputRunQueryKnowledgeBaseTool$inboundSchema` instead. */
  export const inboundSchema =
    StreamRunAgentAgentToolInputRunQueryKnowledgeBaseTool$inboundSchema;
  /** @deprecated use `StreamRunAgentAgentToolInputRunQueryKnowledgeBaseTool$outboundSchema` instead. */
  export const outboundSchema =
    StreamRunAgentAgentToolInputRunQueryKnowledgeBaseTool$outboundSchema;
  /** @deprecated use `StreamRunAgentAgentToolInputRunQueryKnowledgeBaseTool$Outbound` instead. */
  export type Outbound =
    StreamRunAgentAgentToolInputRunQueryKnowledgeBaseTool$Outbound;
}

export function streamRunAgentAgentToolInputRunQueryKnowledgeBaseToolToJSON(
  streamRunAgentAgentToolInputRunQueryKnowledgeBaseTool:
    StreamRunAgentAgentToolInputRunQueryKnowledgeBaseTool,
): string {
  return JSON.stringify(
    StreamRunAgentAgentToolInputRunQueryKnowledgeBaseTool$outboundSchema.parse(
      streamRunAgentAgentToolInputRunQueryKnowledgeBaseTool,
    ),
  );
}

export function streamRunAgentAgentToolInputRunQueryKnowledgeBaseToolFromJSON(
  jsonString: string,
): SafeParseResult<
  StreamRunAgentAgentToolInputRunQueryKnowledgeBaseTool,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      StreamRunAgentAgentToolInputRunQueryKnowledgeBaseTool$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'StreamRunAgentAgentToolInputRunQueryKnowledgeBaseTool' from JSON`,
  );
}

/** @internal */
export const StreamRunAgentAgentToolInputRunAgentsRequestRequestBodySettingsTools9Type$inboundSchema:
  z.ZodNativeEnum<
    typeof StreamRunAgentAgentToolInputRunAgentsRequestRequestBodySettingsTools9Type
  > = z.nativeEnum(
    StreamRunAgentAgentToolInputRunAgentsRequestRequestBodySettingsTools9Type,
  );

/** @internal */
export const StreamRunAgentAgentToolInputRunAgentsRequestRequestBodySettingsTools9Type$outboundSchema:
  z.ZodNativeEnum<
    typeof StreamRunAgentAgentToolInputRunAgentsRequestRequestBodySettingsTools9Type
  > =
    StreamRunAgentAgentToolInputRunAgentsRequestRequestBodySettingsTools9Type$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace StreamRunAgentAgentToolInputRunAgentsRequestRequestBodySettingsTools9Type$ {
  /** @deprecated use `StreamRunAgentAgentToolInputRunAgentsRequestRequestBodySettingsTools9Type$inboundSchema` instead. */
  export const inboundSchema =
    StreamRunAgentAgentToolInputRunAgentsRequestRequestBodySettingsTools9Type$inboundSchema;
  /** @deprecated use `StreamRunAgentAgentToolInputRunAgentsRequestRequestBodySettingsTools9Type$outboundSchema` instead. */
  export const outboundSchema =
    StreamRunAgentAgentToolInputRunAgentsRequestRequestBodySettingsTools9Type$outboundSchema;
}

/** @internal */
export const StreamRunAgentAgentToolInputRunRetrieveKnowledgeBasesTool$inboundSchema:
  z.ZodType<
    StreamRunAgentAgentToolInputRunRetrieveKnowledgeBasesTool,
    z.ZodTypeDef,
    unknown
  > = z.object({
    type:
      StreamRunAgentAgentToolInputRunAgentsRequestRequestBodySettingsTools9Type$inboundSchema,
    requires_approval: z.boolean().default(false),
  }).transform((v) => {
    return remap$(v, {
      "requires_approval": "requiresApproval",
    });
  });

/** @internal */
export type StreamRunAgentAgentToolInputRunRetrieveKnowledgeBasesTool$Outbound =
  {
    type: string;
    requires_approval: boolean;
  };

/** @internal */
export const StreamRunAgentAgentToolInputRunRetrieveKnowledgeBasesTool$outboundSchema:
  z.ZodType<
    StreamRunAgentAgentToolInputRunRetrieveKnowledgeBasesTool$Outbound,
    z.ZodTypeDef,
    StreamRunAgentAgentToolInputRunRetrieveKnowledgeBasesTool
  > = z.object({
    type:
      StreamRunAgentAgentToolInputRunAgentsRequestRequestBodySettingsTools9Type$outboundSchema,
    requiresApproval: z.boolean().default(false),
  }).transform((v) => {
    return remap$(v, {
      requiresApproval: "requires_approval",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace StreamRunAgentAgentToolInputRunRetrieveKnowledgeBasesTool$ {
  /** @deprecated use `StreamRunAgentAgentToolInputRunRetrieveKnowledgeBasesTool$inboundSchema` instead. */
  export const inboundSchema =
    StreamRunAgentAgentToolInputRunRetrieveKnowledgeBasesTool$inboundSchema;
  /** @deprecated use `StreamRunAgentAgentToolInputRunRetrieveKnowledgeBasesTool$outboundSchema` instead. */
  export const outboundSchema =
    StreamRunAgentAgentToolInputRunRetrieveKnowledgeBasesTool$outboundSchema;
  /** @deprecated use `StreamRunAgentAgentToolInputRunRetrieveKnowledgeBasesTool$Outbound` instead. */
  export type Outbound =
    StreamRunAgentAgentToolInputRunRetrieveKnowledgeBasesTool$Outbound;
}

export function streamRunAgentAgentToolInputRunRetrieveKnowledgeBasesToolToJSON(
  streamRunAgentAgentToolInputRunRetrieveKnowledgeBasesTool:
    StreamRunAgentAgentToolInputRunRetrieveKnowledgeBasesTool,
): string {
  return JSON.stringify(
    StreamRunAgentAgentToolInputRunRetrieveKnowledgeBasesTool$outboundSchema
      .parse(streamRunAgentAgentToolInputRunRetrieveKnowledgeBasesTool),
  );
}

export function streamRunAgentAgentToolInputRunRetrieveKnowledgeBasesToolFromJSON(
  jsonString: string,
): SafeParseResult<
  StreamRunAgentAgentToolInputRunRetrieveKnowledgeBasesTool,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      StreamRunAgentAgentToolInputRunRetrieveKnowledgeBasesTool$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'StreamRunAgentAgentToolInputRunRetrieveKnowledgeBasesTool' from JSON`,
  );
}

/** @internal */
export const StreamRunAgentAgentToolInputRunAgentsRequestRequestBodySettingsTools8Type$inboundSchema:
  z.ZodNativeEnum<
    typeof StreamRunAgentAgentToolInputRunAgentsRequestRequestBodySettingsTools8Type
  > = z.nativeEnum(
    StreamRunAgentAgentToolInputRunAgentsRequestRequestBodySettingsTools8Type,
  );

/** @internal */
export const StreamRunAgentAgentToolInputRunAgentsRequestRequestBodySettingsTools8Type$outboundSchema:
  z.ZodNativeEnum<
    typeof StreamRunAgentAgentToolInputRunAgentsRequestRequestBodySettingsTools8Type
  > =
    StreamRunAgentAgentToolInputRunAgentsRequestRequestBodySettingsTools8Type$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace StreamRunAgentAgentToolInputRunAgentsRequestRequestBodySettingsTools8Type$ {
  /** @deprecated use `StreamRunAgentAgentToolInputRunAgentsRequestRequestBodySettingsTools8Type$inboundSchema` instead. */
  export const inboundSchema =
    StreamRunAgentAgentToolInputRunAgentsRequestRequestBodySettingsTools8Type$inboundSchema;
  /** @deprecated use `StreamRunAgentAgentToolInputRunAgentsRequestRequestBodySettingsTools8Type$outboundSchema` instead. */
  export const outboundSchema =
    StreamRunAgentAgentToolInputRunAgentsRequestRequestBodySettingsTools8Type$outboundSchema;
}

/** @internal */
export const StreamRunAgentAgentToolInputRunDeleteMemoryDocumentTool$inboundSchema:
  z.ZodType<
    StreamRunAgentAgentToolInputRunDeleteMemoryDocumentTool,
    z.ZodTypeDef,
    unknown
  > = z.object({
    type:
      StreamRunAgentAgentToolInputRunAgentsRequestRequestBodySettingsTools8Type$inboundSchema,
    requires_approval: z.boolean().default(false),
  }).transform((v) => {
    return remap$(v, {
      "requires_approval": "requiresApproval",
    });
  });

/** @internal */
export type StreamRunAgentAgentToolInputRunDeleteMemoryDocumentTool$Outbound = {
  type: string;
  requires_approval: boolean;
};

/** @internal */
export const StreamRunAgentAgentToolInputRunDeleteMemoryDocumentTool$outboundSchema:
  z.ZodType<
    StreamRunAgentAgentToolInputRunDeleteMemoryDocumentTool$Outbound,
    z.ZodTypeDef,
    StreamRunAgentAgentToolInputRunDeleteMemoryDocumentTool
  > = z.object({
    type:
      StreamRunAgentAgentToolInputRunAgentsRequestRequestBodySettingsTools8Type$outboundSchema,
    requiresApproval: z.boolean().default(false),
  }).transform((v) => {
    return remap$(v, {
      requiresApproval: "requires_approval",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace StreamRunAgentAgentToolInputRunDeleteMemoryDocumentTool$ {
  /** @deprecated use `StreamRunAgentAgentToolInputRunDeleteMemoryDocumentTool$inboundSchema` instead. */
  export const inboundSchema =
    StreamRunAgentAgentToolInputRunDeleteMemoryDocumentTool$inboundSchema;
  /** @deprecated use `StreamRunAgentAgentToolInputRunDeleteMemoryDocumentTool$outboundSchema` instead. */
  export const outboundSchema =
    StreamRunAgentAgentToolInputRunDeleteMemoryDocumentTool$outboundSchema;
  /** @deprecated use `StreamRunAgentAgentToolInputRunDeleteMemoryDocumentTool$Outbound` instead. */
  export type Outbound =
    StreamRunAgentAgentToolInputRunDeleteMemoryDocumentTool$Outbound;
}

export function streamRunAgentAgentToolInputRunDeleteMemoryDocumentToolToJSON(
  streamRunAgentAgentToolInputRunDeleteMemoryDocumentTool:
    StreamRunAgentAgentToolInputRunDeleteMemoryDocumentTool,
): string {
  return JSON.stringify(
    StreamRunAgentAgentToolInputRunDeleteMemoryDocumentTool$outboundSchema
      .parse(streamRunAgentAgentToolInputRunDeleteMemoryDocumentTool),
  );
}

export function streamRunAgentAgentToolInputRunDeleteMemoryDocumentToolFromJSON(
  jsonString: string,
): SafeParseResult<
  StreamRunAgentAgentToolInputRunDeleteMemoryDocumentTool,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      StreamRunAgentAgentToolInputRunDeleteMemoryDocumentTool$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'StreamRunAgentAgentToolInputRunDeleteMemoryDocumentTool' from JSON`,
  );
}

/** @internal */
export const StreamRunAgentAgentToolInputRunAgentsRequestRequestBodySettingsTools7Type$inboundSchema:
  z.ZodNativeEnum<
    typeof StreamRunAgentAgentToolInputRunAgentsRequestRequestBodySettingsTools7Type
  > = z.nativeEnum(
    StreamRunAgentAgentToolInputRunAgentsRequestRequestBodySettingsTools7Type,
  );

/** @internal */
export const StreamRunAgentAgentToolInputRunAgentsRequestRequestBodySettingsTools7Type$outboundSchema:
  z.ZodNativeEnum<
    typeof StreamRunAgentAgentToolInputRunAgentsRequestRequestBodySettingsTools7Type
  > =
    StreamRunAgentAgentToolInputRunAgentsRequestRequestBodySettingsTools7Type$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace StreamRunAgentAgentToolInputRunAgentsRequestRequestBodySettingsTools7Type$ {
  /** @deprecated use `StreamRunAgentAgentToolInputRunAgentsRequestRequestBodySettingsTools7Type$inboundSchema` instead. */
  export const inboundSchema =
    StreamRunAgentAgentToolInputRunAgentsRequestRequestBodySettingsTools7Type$inboundSchema;
  /** @deprecated use `StreamRunAgentAgentToolInputRunAgentsRequestRequestBodySettingsTools7Type$outboundSchema` instead. */
  export const outboundSchema =
    StreamRunAgentAgentToolInputRunAgentsRequestRequestBodySettingsTools7Type$outboundSchema;
}

/** @internal */
export const StreamRunAgentAgentToolInputRunRetrieveMemoryStoresTool$inboundSchema:
  z.ZodType<
    StreamRunAgentAgentToolInputRunRetrieveMemoryStoresTool,
    z.ZodTypeDef,
    unknown
  > = z.object({
    type:
      StreamRunAgentAgentToolInputRunAgentsRequestRequestBodySettingsTools7Type$inboundSchema,
    requires_approval: z.boolean().default(false),
  }).transform((v) => {
    return remap$(v, {
      "requires_approval": "requiresApproval",
    });
  });

/** @internal */
export type StreamRunAgentAgentToolInputRunRetrieveMemoryStoresTool$Outbound = {
  type: string;
  requires_approval: boolean;
};

/** @internal */
export const StreamRunAgentAgentToolInputRunRetrieveMemoryStoresTool$outboundSchema:
  z.ZodType<
    StreamRunAgentAgentToolInputRunRetrieveMemoryStoresTool$Outbound,
    z.ZodTypeDef,
    StreamRunAgentAgentToolInputRunRetrieveMemoryStoresTool
  > = z.object({
    type:
      StreamRunAgentAgentToolInputRunAgentsRequestRequestBodySettingsTools7Type$outboundSchema,
    requiresApproval: z.boolean().default(false),
  }).transform((v) => {
    return remap$(v, {
      requiresApproval: "requires_approval",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace StreamRunAgentAgentToolInputRunRetrieveMemoryStoresTool$ {
  /** @deprecated use `StreamRunAgentAgentToolInputRunRetrieveMemoryStoresTool$inboundSchema` instead. */
  export const inboundSchema =
    StreamRunAgentAgentToolInputRunRetrieveMemoryStoresTool$inboundSchema;
  /** @deprecated use `StreamRunAgentAgentToolInputRunRetrieveMemoryStoresTool$outboundSchema` instead. */
  export const outboundSchema =
    StreamRunAgentAgentToolInputRunRetrieveMemoryStoresTool$outboundSchema;
  /** @deprecated use `StreamRunAgentAgentToolInputRunRetrieveMemoryStoresTool$Outbound` instead. */
  export type Outbound =
    StreamRunAgentAgentToolInputRunRetrieveMemoryStoresTool$Outbound;
}

export function streamRunAgentAgentToolInputRunRetrieveMemoryStoresToolToJSON(
  streamRunAgentAgentToolInputRunRetrieveMemoryStoresTool:
    StreamRunAgentAgentToolInputRunRetrieveMemoryStoresTool,
): string {
  return JSON.stringify(
    StreamRunAgentAgentToolInputRunRetrieveMemoryStoresTool$outboundSchema
      .parse(streamRunAgentAgentToolInputRunRetrieveMemoryStoresTool),
  );
}

export function streamRunAgentAgentToolInputRunRetrieveMemoryStoresToolFromJSON(
  jsonString: string,
): SafeParseResult<
  StreamRunAgentAgentToolInputRunRetrieveMemoryStoresTool,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      StreamRunAgentAgentToolInputRunRetrieveMemoryStoresTool$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'StreamRunAgentAgentToolInputRunRetrieveMemoryStoresTool' from JSON`,
  );
}

/** @internal */
export const StreamRunAgentAgentToolInputRunAgentsRequestRequestBodySettingsToolsType$inboundSchema:
  z.ZodNativeEnum<
    typeof StreamRunAgentAgentToolInputRunAgentsRequestRequestBodySettingsToolsType
  > = z.nativeEnum(
    StreamRunAgentAgentToolInputRunAgentsRequestRequestBodySettingsToolsType,
  );

/** @internal */
export const StreamRunAgentAgentToolInputRunAgentsRequestRequestBodySettingsToolsType$outboundSchema:
  z.ZodNativeEnum<
    typeof StreamRunAgentAgentToolInputRunAgentsRequestRequestBodySettingsToolsType
  > =
    StreamRunAgentAgentToolInputRunAgentsRequestRequestBodySettingsToolsType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace StreamRunAgentAgentToolInputRunAgentsRequestRequestBodySettingsToolsType$ {
  /** @deprecated use `StreamRunAgentAgentToolInputRunAgentsRequestRequestBodySettingsToolsType$inboundSchema` instead. */
  export const inboundSchema =
    StreamRunAgentAgentToolInputRunAgentsRequestRequestBodySettingsToolsType$inboundSchema;
  /** @deprecated use `StreamRunAgentAgentToolInputRunAgentsRequestRequestBodySettingsToolsType$outboundSchema` instead. */
  export const outboundSchema =
    StreamRunAgentAgentToolInputRunAgentsRequestRequestBodySettingsToolsType$outboundSchema;
}

/** @internal */
export const StreamRunAgentAgentToolInputRunWriteMemoryStoreTool$inboundSchema:
  z.ZodType<
    StreamRunAgentAgentToolInputRunWriteMemoryStoreTool,
    z.ZodTypeDef,
    unknown
  > = z.object({
    type:
      StreamRunAgentAgentToolInputRunAgentsRequestRequestBodySettingsToolsType$inboundSchema,
    requires_approval: z.boolean().default(false),
  }).transform((v) => {
    return remap$(v, {
      "requires_approval": "requiresApproval",
    });
  });

/** @internal */
export type StreamRunAgentAgentToolInputRunWriteMemoryStoreTool$Outbound = {
  type: string;
  requires_approval: boolean;
};

/** @internal */
export const StreamRunAgentAgentToolInputRunWriteMemoryStoreTool$outboundSchema:
  z.ZodType<
    StreamRunAgentAgentToolInputRunWriteMemoryStoreTool$Outbound,
    z.ZodTypeDef,
    StreamRunAgentAgentToolInputRunWriteMemoryStoreTool
  > = z.object({
    type:
      StreamRunAgentAgentToolInputRunAgentsRequestRequestBodySettingsToolsType$outboundSchema,
    requiresApproval: z.boolean().default(false),
  }).transform((v) => {
    return remap$(v, {
      requiresApproval: "requires_approval",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace StreamRunAgentAgentToolInputRunWriteMemoryStoreTool$ {
  /** @deprecated use `StreamRunAgentAgentToolInputRunWriteMemoryStoreTool$inboundSchema` instead. */
  export const inboundSchema =
    StreamRunAgentAgentToolInputRunWriteMemoryStoreTool$inboundSchema;
  /** @deprecated use `StreamRunAgentAgentToolInputRunWriteMemoryStoreTool$outboundSchema` instead. */
  export const outboundSchema =
    StreamRunAgentAgentToolInputRunWriteMemoryStoreTool$outboundSchema;
  /** @deprecated use `StreamRunAgentAgentToolInputRunWriteMemoryStoreTool$Outbound` instead. */
  export type Outbound =
    StreamRunAgentAgentToolInputRunWriteMemoryStoreTool$Outbound;
}

export function streamRunAgentAgentToolInputRunWriteMemoryStoreToolToJSON(
  streamRunAgentAgentToolInputRunWriteMemoryStoreTool:
    StreamRunAgentAgentToolInputRunWriteMemoryStoreTool,
): string {
  return JSON.stringify(
    StreamRunAgentAgentToolInputRunWriteMemoryStoreTool$outboundSchema.parse(
      streamRunAgentAgentToolInputRunWriteMemoryStoreTool,
    ),
  );
}

export function streamRunAgentAgentToolInputRunWriteMemoryStoreToolFromJSON(
  jsonString: string,
): SafeParseResult<
  StreamRunAgentAgentToolInputRunWriteMemoryStoreTool,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      StreamRunAgentAgentToolInputRunWriteMemoryStoreTool$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'StreamRunAgentAgentToolInputRunWriteMemoryStoreTool' from JSON`,
  );
}

/** @internal */
export const StreamRunAgentAgentToolInputRunAgentsRequestRequestBodySettingsType$inboundSchema:
  z.ZodNativeEnum<
    typeof StreamRunAgentAgentToolInputRunAgentsRequestRequestBodySettingsType
  > = z.nativeEnum(
    StreamRunAgentAgentToolInputRunAgentsRequestRequestBodySettingsType,
  );

/** @internal */
export const StreamRunAgentAgentToolInputRunAgentsRequestRequestBodySettingsType$outboundSchema:
  z.ZodNativeEnum<
    typeof StreamRunAgentAgentToolInputRunAgentsRequestRequestBodySettingsType
  > =
    StreamRunAgentAgentToolInputRunAgentsRequestRequestBodySettingsType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace StreamRunAgentAgentToolInputRunAgentsRequestRequestBodySettingsType$ {
  /** @deprecated use `StreamRunAgentAgentToolInputRunAgentsRequestRequestBodySettingsType$inboundSchema` instead. */
  export const inboundSchema =
    StreamRunAgentAgentToolInputRunAgentsRequestRequestBodySettingsType$inboundSchema;
  /** @deprecated use `StreamRunAgentAgentToolInputRunAgentsRequestRequestBodySettingsType$outboundSchema` instead. */
  export const outboundSchema =
    StreamRunAgentAgentToolInputRunAgentsRequestRequestBodySettingsType$outboundSchema;
}

/** @internal */
export const StreamRunAgentAgentToolInputRunQueryMemoryStoreTool$inboundSchema:
  z.ZodType<
    StreamRunAgentAgentToolInputRunQueryMemoryStoreTool,
    z.ZodTypeDef,
    unknown
  > = z.object({
    type:
      StreamRunAgentAgentToolInputRunAgentsRequestRequestBodySettingsType$inboundSchema,
    requires_approval: z.boolean().default(false),
  }).transform((v) => {
    return remap$(v, {
      "requires_approval": "requiresApproval",
    });
  });

/** @internal */
export type StreamRunAgentAgentToolInputRunQueryMemoryStoreTool$Outbound = {
  type: string;
  requires_approval: boolean;
};

/** @internal */
export const StreamRunAgentAgentToolInputRunQueryMemoryStoreTool$outboundSchema:
  z.ZodType<
    StreamRunAgentAgentToolInputRunQueryMemoryStoreTool$Outbound,
    z.ZodTypeDef,
    StreamRunAgentAgentToolInputRunQueryMemoryStoreTool
  > = z.object({
    type:
      StreamRunAgentAgentToolInputRunAgentsRequestRequestBodySettingsType$outboundSchema,
    requiresApproval: z.boolean().default(false),
  }).transform((v) => {
    return remap$(v, {
      requiresApproval: "requires_approval",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace StreamRunAgentAgentToolInputRunQueryMemoryStoreTool$ {
  /** @deprecated use `StreamRunAgentAgentToolInputRunQueryMemoryStoreTool$inboundSchema` instead. */
  export const inboundSchema =
    StreamRunAgentAgentToolInputRunQueryMemoryStoreTool$inboundSchema;
  /** @deprecated use `StreamRunAgentAgentToolInputRunQueryMemoryStoreTool$outboundSchema` instead. */
  export const outboundSchema =
    StreamRunAgentAgentToolInputRunQueryMemoryStoreTool$outboundSchema;
  /** @deprecated use `StreamRunAgentAgentToolInputRunQueryMemoryStoreTool$Outbound` instead. */
  export type Outbound =
    StreamRunAgentAgentToolInputRunQueryMemoryStoreTool$Outbound;
}

export function streamRunAgentAgentToolInputRunQueryMemoryStoreToolToJSON(
  streamRunAgentAgentToolInputRunQueryMemoryStoreTool:
    StreamRunAgentAgentToolInputRunQueryMemoryStoreTool,
): string {
  return JSON.stringify(
    StreamRunAgentAgentToolInputRunQueryMemoryStoreTool$outboundSchema.parse(
      streamRunAgentAgentToolInputRunQueryMemoryStoreTool,
    ),
  );
}

export function streamRunAgentAgentToolInputRunQueryMemoryStoreToolFromJSON(
  jsonString: string,
): SafeParseResult<
  StreamRunAgentAgentToolInputRunQueryMemoryStoreTool,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      StreamRunAgentAgentToolInputRunQueryMemoryStoreTool$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'StreamRunAgentAgentToolInputRunQueryMemoryStoreTool' from JSON`,
  );
}

/** @internal */
export const StreamRunAgentAgentToolInputRunAgentsRequestRequestBodyType$inboundSchema:
  z.ZodNativeEnum<
    typeof StreamRunAgentAgentToolInputRunAgentsRequestRequestBodyType
  > = z.nativeEnum(StreamRunAgentAgentToolInputRunAgentsRequestRequestBodyType);

/** @internal */
export const StreamRunAgentAgentToolInputRunAgentsRequestRequestBodyType$outboundSchema:
  z.ZodNativeEnum<
    typeof StreamRunAgentAgentToolInputRunAgentsRequestRequestBodyType
  > = StreamRunAgentAgentToolInputRunAgentsRequestRequestBodyType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace StreamRunAgentAgentToolInputRunAgentsRequestRequestBodyType$ {
  /** @deprecated use `StreamRunAgentAgentToolInputRunAgentsRequestRequestBodyType$inboundSchema` instead. */
  export const inboundSchema =
    StreamRunAgentAgentToolInputRunAgentsRequestRequestBodyType$inboundSchema;
  /** @deprecated use `StreamRunAgentAgentToolInputRunAgentsRequestRequestBodyType$outboundSchema` instead. */
  export const outboundSchema =
    StreamRunAgentAgentToolInputRunAgentsRequestRequestBodyType$outboundSchema;
}

/** @internal */
export const StreamRunAgentAgentToolInputRunRetrieveAgentsTool$inboundSchema:
  z.ZodType<
    StreamRunAgentAgentToolInputRunRetrieveAgentsTool,
    z.ZodTypeDef,
    unknown
  > = z.object({
    type:
      StreamRunAgentAgentToolInputRunAgentsRequestRequestBodyType$inboundSchema,
    requires_approval: z.boolean().default(false),
  }).transform((v) => {
    return remap$(v, {
      "requires_approval": "requiresApproval",
    });
  });

/** @internal */
export type StreamRunAgentAgentToolInputRunRetrieveAgentsTool$Outbound = {
  type: string;
  requires_approval: boolean;
};

/** @internal */
export const StreamRunAgentAgentToolInputRunRetrieveAgentsTool$outboundSchema:
  z.ZodType<
    StreamRunAgentAgentToolInputRunRetrieveAgentsTool$Outbound,
    z.ZodTypeDef,
    StreamRunAgentAgentToolInputRunRetrieveAgentsTool
  > = z.object({
    type:
      StreamRunAgentAgentToolInputRunAgentsRequestRequestBodyType$outboundSchema,
    requiresApproval: z.boolean().default(false),
  }).transform((v) => {
    return remap$(v, {
      requiresApproval: "requires_approval",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace StreamRunAgentAgentToolInputRunRetrieveAgentsTool$ {
  /** @deprecated use `StreamRunAgentAgentToolInputRunRetrieveAgentsTool$inboundSchema` instead. */
  export const inboundSchema =
    StreamRunAgentAgentToolInputRunRetrieveAgentsTool$inboundSchema;
  /** @deprecated use `StreamRunAgentAgentToolInputRunRetrieveAgentsTool$outboundSchema` instead. */
  export const outboundSchema =
    StreamRunAgentAgentToolInputRunRetrieveAgentsTool$outboundSchema;
  /** @deprecated use `StreamRunAgentAgentToolInputRunRetrieveAgentsTool$Outbound` instead. */
  export type Outbound =
    StreamRunAgentAgentToolInputRunRetrieveAgentsTool$Outbound;
}

export function streamRunAgentAgentToolInputRunRetrieveAgentsToolToJSON(
  streamRunAgentAgentToolInputRunRetrieveAgentsTool:
    StreamRunAgentAgentToolInputRunRetrieveAgentsTool,
): string {
  return JSON.stringify(
    StreamRunAgentAgentToolInputRunRetrieveAgentsTool$outboundSchema.parse(
      streamRunAgentAgentToolInputRunRetrieveAgentsTool,
    ),
  );
}

export function streamRunAgentAgentToolInputRunRetrieveAgentsToolFromJSON(
  jsonString: string,
): SafeParseResult<
  StreamRunAgentAgentToolInputRunRetrieveAgentsTool,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      StreamRunAgentAgentToolInputRunRetrieveAgentsTool$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'StreamRunAgentAgentToolInputRunRetrieveAgentsTool' from JSON`,
  );
}

/** @internal */
export const StreamRunAgentAgentToolInputRunAgentsRequestType$inboundSchema:
  z.ZodNativeEnum<typeof StreamRunAgentAgentToolInputRunAgentsRequestType> = z
    .nativeEnum(StreamRunAgentAgentToolInputRunAgentsRequestType);

/** @internal */
export const StreamRunAgentAgentToolInputRunAgentsRequestType$outboundSchema:
  z.ZodNativeEnum<typeof StreamRunAgentAgentToolInputRunAgentsRequestType> =
    StreamRunAgentAgentToolInputRunAgentsRequestType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace StreamRunAgentAgentToolInputRunAgentsRequestType$ {
  /** @deprecated use `StreamRunAgentAgentToolInputRunAgentsRequestType$inboundSchema` instead. */
  export const inboundSchema =
    StreamRunAgentAgentToolInputRunAgentsRequestType$inboundSchema;
  /** @deprecated use `StreamRunAgentAgentToolInputRunAgentsRequestType$outboundSchema` instead. */
  export const outboundSchema =
    StreamRunAgentAgentToolInputRunAgentsRequestType$outboundSchema;
}

/** @internal */
export const StreamRunAgentAgentToolInputRunCallSubAgentTool$inboundSchema:
  z.ZodType<
    StreamRunAgentAgentToolInputRunCallSubAgentTool,
    z.ZodTypeDef,
    unknown
  > = z.object({
    type: StreamRunAgentAgentToolInputRunAgentsRequestType$inboundSchema,
    requires_approval: z.boolean().default(false),
  }).transform((v) => {
    return remap$(v, {
      "requires_approval": "requiresApproval",
    });
  });

/** @internal */
export type StreamRunAgentAgentToolInputRunCallSubAgentTool$Outbound = {
  type: string;
  requires_approval: boolean;
};

/** @internal */
export const StreamRunAgentAgentToolInputRunCallSubAgentTool$outboundSchema:
  z.ZodType<
    StreamRunAgentAgentToolInputRunCallSubAgentTool$Outbound,
    z.ZodTypeDef,
    StreamRunAgentAgentToolInputRunCallSubAgentTool
  > = z.object({
    type: StreamRunAgentAgentToolInputRunAgentsRequestType$outboundSchema,
    requiresApproval: z.boolean().default(false),
  }).transform((v) => {
    return remap$(v, {
      requiresApproval: "requires_approval",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace StreamRunAgentAgentToolInputRunCallSubAgentTool$ {
  /** @deprecated use `StreamRunAgentAgentToolInputRunCallSubAgentTool$inboundSchema` instead. */
  export const inboundSchema =
    StreamRunAgentAgentToolInputRunCallSubAgentTool$inboundSchema;
  /** @deprecated use `StreamRunAgentAgentToolInputRunCallSubAgentTool$outboundSchema` instead. */
  export const outboundSchema =
    StreamRunAgentAgentToolInputRunCallSubAgentTool$outboundSchema;
  /** @deprecated use `StreamRunAgentAgentToolInputRunCallSubAgentTool$Outbound` instead. */
  export type Outbound =
    StreamRunAgentAgentToolInputRunCallSubAgentTool$Outbound;
}

export function streamRunAgentAgentToolInputRunCallSubAgentToolToJSON(
  streamRunAgentAgentToolInputRunCallSubAgentTool:
    StreamRunAgentAgentToolInputRunCallSubAgentTool,
): string {
  return JSON.stringify(
    StreamRunAgentAgentToolInputRunCallSubAgentTool$outboundSchema.parse(
      streamRunAgentAgentToolInputRunCallSubAgentTool,
    ),
  );
}

export function streamRunAgentAgentToolInputRunCallSubAgentToolFromJSON(
  jsonString: string,
): SafeParseResult<
  StreamRunAgentAgentToolInputRunCallSubAgentTool,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      StreamRunAgentAgentToolInputRunCallSubAgentTool$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'StreamRunAgentAgentToolInputRunCallSubAgentTool' from JSON`,
  );
}

/** @internal */
export const StreamRunAgentAgentToolInputRunAgentsType$inboundSchema:
  z.ZodNativeEnum<typeof StreamRunAgentAgentToolInputRunAgentsType> = z
    .nativeEnum(StreamRunAgentAgentToolInputRunAgentsType);

/** @internal */
export const StreamRunAgentAgentToolInputRunAgentsType$outboundSchema:
  z.ZodNativeEnum<typeof StreamRunAgentAgentToolInputRunAgentsType> =
    StreamRunAgentAgentToolInputRunAgentsType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace StreamRunAgentAgentToolInputRunAgentsType$ {
  /** @deprecated use `StreamRunAgentAgentToolInputRunAgentsType$inboundSchema` instead. */
  export const inboundSchema =
    StreamRunAgentAgentToolInputRunAgentsType$inboundSchema;
  /** @deprecated use `StreamRunAgentAgentToolInputRunAgentsType$outboundSchema` instead. */
  export const outboundSchema =
    StreamRunAgentAgentToolInputRunAgentsType$outboundSchema;
}

/** @internal */
export const StreamRunAgentAgentToolInputRunWebScraperTool$inboundSchema:
  z.ZodType<
    StreamRunAgentAgentToolInputRunWebScraperTool,
    z.ZodTypeDef,
    unknown
  > = z.object({
    type: StreamRunAgentAgentToolInputRunAgentsType$inboundSchema,
    requires_approval: z.boolean().default(false),
  }).transform((v) => {
    return remap$(v, {
      "requires_approval": "requiresApproval",
    });
  });

/** @internal */
export type StreamRunAgentAgentToolInputRunWebScraperTool$Outbound = {
  type: string;
  requires_approval: boolean;
};

/** @internal */
export const StreamRunAgentAgentToolInputRunWebScraperTool$outboundSchema:
  z.ZodType<
    StreamRunAgentAgentToolInputRunWebScraperTool$Outbound,
    z.ZodTypeDef,
    StreamRunAgentAgentToolInputRunWebScraperTool
  > = z.object({
    type: StreamRunAgentAgentToolInputRunAgentsType$outboundSchema,
    requiresApproval: z.boolean().default(false),
  }).transform((v) => {
    return remap$(v, {
      requiresApproval: "requires_approval",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace StreamRunAgentAgentToolInputRunWebScraperTool$ {
  /** @deprecated use `StreamRunAgentAgentToolInputRunWebScraperTool$inboundSchema` instead. */
  export const inboundSchema =
    StreamRunAgentAgentToolInputRunWebScraperTool$inboundSchema;
  /** @deprecated use `StreamRunAgentAgentToolInputRunWebScraperTool$outboundSchema` instead. */
  export const outboundSchema =
    StreamRunAgentAgentToolInputRunWebScraperTool$outboundSchema;
  /** @deprecated use `StreamRunAgentAgentToolInputRunWebScraperTool$Outbound` instead. */
  export type Outbound = StreamRunAgentAgentToolInputRunWebScraperTool$Outbound;
}

export function streamRunAgentAgentToolInputRunWebScraperToolToJSON(
  streamRunAgentAgentToolInputRunWebScraperTool:
    StreamRunAgentAgentToolInputRunWebScraperTool,
): string {
  return JSON.stringify(
    StreamRunAgentAgentToolInputRunWebScraperTool$outboundSchema.parse(
      streamRunAgentAgentToolInputRunWebScraperTool,
    ),
  );
}

export function streamRunAgentAgentToolInputRunWebScraperToolFromJSON(
  jsonString: string,
): SafeParseResult<
  StreamRunAgentAgentToolInputRunWebScraperTool,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      StreamRunAgentAgentToolInputRunWebScraperTool$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'StreamRunAgentAgentToolInputRunWebScraperTool' from JSON`,
  );
}

/** @internal */
export const StreamRunAgentAgentToolInputRunType$inboundSchema: z.ZodNativeEnum<
  typeof StreamRunAgentAgentToolInputRunType
> = z.nativeEnum(StreamRunAgentAgentToolInputRunType);

/** @internal */
export const StreamRunAgentAgentToolInputRunType$outboundSchema:
  z.ZodNativeEnum<typeof StreamRunAgentAgentToolInputRunType> =
    StreamRunAgentAgentToolInputRunType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace StreamRunAgentAgentToolInputRunType$ {
  /** @deprecated use `StreamRunAgentAgentToolInputRunType$inboundSchema` instead. */
  export const inboundSchema =
    StreamRunAgentAgentToolInputRunType$inboundSchema;
  /** @deprecated use `StreamRunAgentAgentToolInputRunType$outboundSchema` instead. */
  export const outboundSchema =
    StreamRunAgentAgentToolInputRunType$outboundSchema;
}

/** @internal */
export const StreamRunAgentAgentToolInputRunGoogleSearchTool$inboundSchema:
  z.ZodType<
    StreamRunAgentAgentToolInputRunGoogleSearchTool,
    z.ZodTypeDef,
    unknown
  > = z.object({
    type: StreamRunAgentAgentToolInputRunType$inboundSchema,
    requires_approval: z.boolean().default(false),
  }).transform((v) => {
    return remap$(v, {
      "requires_approval": "requiresApproval",
    });
  });

/** @internal */
export type StreamRunAgentAgentToolInputRunGoogleSearchTool$Outbound = {
  type: string;
  requires_approval: boolean;
};

/** @internal */
export const StreamRunAgentAgentToolInputRunGoogleSearchTool$outboundSchema:
  z.ZodType<
    StreamRunAgentAgentToolInputRunGoogleSearchTool$Outbound,
    z.ZodTypeDef,
    StreamRunAgentAgentToolInputRunGoogleSearchTool
  > = z.object({
    type: StreamRunAgentAgentToolInputRunType$outboundSchema,
    requiresApproval: z.boolean().default(false),
  }).transform((v) => {
    return remap$(v, {
      requiresApproval: "requires_approval",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace StreamRunAgentAgentToolInputRunGoogleSearchTool$ {
  /** @deprecated use `StreamRunAgentAgentToolInputRunGoogleSearchTool$inboundSchema` instead. */
  export const inboundSchema =
    StreamRunAgentAgentToolInputRunGoogleSearchTool$inboundSchema;
  /** @deprecated use `StreamRunAgentAgentToolInputRunGoogleSearchTool$outboundSchema` instead. */
  export const outboundSchema =
    StreamRunAgentAgentToolInputRunGoogleSearchTool$outboundSchema;
  /** @deprecated use `StreamRunAgentAgentToolInputRunGoogleSearchTool$Outbound` instead. */
  export type Outbound =
    StreamRunAgentAgentToolInputRunGoogleSearchTool$Outbound;
}

export function streamRunAgentAgentToolInputRunGoogleSearchToolToJSON(
  streamRunAgentAgentToolInputRunGoogleSearchTool:
    StreamRunAgentAgentToolInputRunGoogleSearchTool,
): string {
  return JSON.stringify(
    StreamRunAgentAgentToolInputRunGoogleSearchTool$outboundSchema.parse(
      streamRunAgentAgentToolInputRunGoogleSearchTool,
    ),
  );
}

export function streamRunAgentAgentToolInputRunGoogleSearchToolFromJSON(
  jsonString: string,
): SafeParseResult<
  StreamRunAgentAgentToolInputRunGoogleSearchTool,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      StreamRunAgentAgentToolInputRunGoogleSearchTool$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'StreamRunAgentAgentToolInputRunGoogleSearchTool' from JSON`,
  );
}

/** @internal */
export const StreamRunAgentAgentToolInputRun$inboundSchema: z.ZodType<
  StreamRunAgentAgentToolInputRun,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => AgentToolInputRunHTTPToolRun$inboundSchema),
  z.lazy(() => AgentToolInputRunCodeToolRun$inboundSchema),
  z.lazy(() => AgentToolInputRunFunctionToolRun$inboundSchema),
  z.lazy(() => StreamRunAgentAgentToolInputRunGoogleSearchTool$inboundSchema),
  z.lazy(() => StreamRunAgentAgentToolInputRunWebScraperTool$inboundSchema),
  z.lazy(() => StreamRunAgentAgentToolInputRunCallSubAgentTool$inboundSchema),
  z.lazy(() => StreamRunAgentAgentToolInputRunRetrieveAgentsTool$inboundSchema),
  z.lazy(() =>
    StreamRunAgentAgentToolInputRunQueryMemoryStoreTool$inboundSchema
  ),
  z.lazy(() =>
    StreamRunAgentAgentToolInputRunWriteMemoryStoreTool$inboundSchema
  ),
  z.lazy(() =>
    StreamRunAgentAgentToolInputRunRetrieveMemoryStoresTool$inboundSchema
  ),
  z.lazy(() =>
    StreamRunAgentAgentToolInputRunDeleteMemoryDocumentTool$inboundSchema
  ),
  z.lazy(() =>
    StreamRunAgentAgentToolInputRunRetrieveKnowledgeBasesTool$inboundSchema
  ),
  z.lazy(() =>
    StreamRunAgentAgentToolInputRunQueryKnowledgeBaseTool$inboundSchema
  ),
  z.lazy(() => StreamRunAgentAgentToolInputRunCurrentDateTool$inboundSchema),
]);

/** @internal */
export type StreamRunAgentAgentToolInputRun$Outbound =
  | AgentToolInputRunHTTPToolRun$Outbound
  | AgentToolInputRunCodeToolRun$Outbound
  | AgentToolInputRunFunctionToolRun$Outbound
  | StreamRunAgentAgentToolInputRunGoogleSearchTool$Outbound
  | StreamRunAgentAgentToolInputRunWebScraperTool$Outbound
  | StreamRunAgentAgentToolInputRunCallSubAgentTool$Outbound
  | StreamRunAgentAgentToolInputRunRetrieveAgentsTool$Outbound
  | StreamRunAgentAgentToolInputRunQueryMemoryStoreTool$Outbound
  | StreamRunAgentAgentToolInputRunWriteMemoryStoreTool$Outbound
  | StreamRunAgentAgentToolInputRunRetrieveMemoryStoresTool$Outbound
  | StreamRunAgentAgentToolInputRunDeleteMemoryDocumentTool$Outbound
  | StreamRunAgentAgentToolInputRunRetrieveKnowledgeBasesTool$Outbound
  | StreamRunAgentAgentToolInputRunQueryKnowledgeBaseTool$Outbound
  | StreamRunAgentAgentToolInputRunCurrentDateTool$Outbound;

/** @internal */
export const StreamRunAgentAgentToolInputRun$outboundSchema: z.ZodType<
  StreamRunAgentAgentToolInputRun$Outbound,
  z.ZodTypeDef,
  StreamRunAgentAgentToolInputRun
> = z.union([
  z.lazy(() => AgentToolInputRunHTTPToolRun$outboundSchema),
  z.lazy(() => AgentToolInputRunCodeToolRun$outboundSchema),
  z.lazy(() => AgentToolInputRunFunctionToolRun$outboundSchema),
  z.lazy(() => StreamRunAgentAgentToolInputRunGoogleSearchTool$outboundSchema),
  z.lazy(() => StreamRunAgentAgentToolInputRunWebScraperTool$outboundSchema),
  z.lazy(() => StreamRunAgentAgentToolInputRunCallSubAgentTool$outboundSchema),
  z.lazy(() =>
    StreamRunAgentAgentToolInputRunRetrieveAgentsTool$outboundSchema
  ),
  z.lazy(() =>
    StreamRunAgentAgentToolInputRunQueryMemoryStoreTool$outboundSchema
  ),
  z.lazy(() =>
    StreamRunAgentAgentToolInputRunWriteMemoryStoreTool$outboundSchema
  ),
  z.lazy(() =>
    StreamRunAgentAgentToolInputRunRetrieveMemoryStoresTool$outboundSchema
  ),
  z.lazy(() =>
    StreamRunAgentAgentToolInputRunDeleteMemoryDocumentTool$outboundSchema
  ),
  z.lazy(() =>
    StreamRunAgentAgentToolInputRunRetrieveKnowledgeBasesTool$outboundSchema
  ),
  z.lazy(() =>
    StreamRunAgentAgentToolInputRunQueryKnowledgeBaseTool$outboundSchema
  ),
  z.lazy(() => StreamRunAgentAgentToolInputRunCurrentDateTool$outboundSchema),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace StreamRunAgentAgentToolInputRun$ {
  /** @deprecated use `StreamRunAgentAgentToolInputRun$inboundSchema` instead. */
  export const inboundSchema = StreamRunAgentAgentToolInputRun$inboundSchema;
  /** @deprecated use `StreamRunAgentAgentToolInputRun$outboundSchema` instead. */
  export const outboundSchema = StreamRunAgentAgentToolInputRun$outboundSchema;
  /** @deprecated use `StreamRunAgentAgentToolInputRun$Outbound` instead. */
  export type Outbound = StreamRunAgentAgentToolInputRun$Outbound;
}

export function streamRunAgentAgentToolInputRunToJSON(
  streamRunAgentAgentToolInputRun: StreamRunAgentAgentToolInputRun,
): string {
  return JSON.stringify(
    StreamRunAgentAgentToolInputRun$outboundSchema.parse(
      streamRunAgentAgentToolInputRun,
    ),
  );
}

export function streamRunAgentAgentToolInputRunFromJSON(
  jsonString: string,
): SafeParseResult<StreamRunAgentAgentToolInputRun, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => StreamRunAgentAgentToolInputRun$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'StreamRunAgentAgentToolInputRun' from JSON`,
  );
}

/** @internal */
export const StreamRunAgentToolApprovalRequired$inboundSchema: z.ZodNativeEnum<
  typeof StreamRunAgentToolApprovalRequired
> = z.nativeEnum(StreamRunAgentToolApprovalRequired);

/** @internal */
export const StreamRunAgentToolApprovalRequired$outboundSchema: z.ZodNativeEnum<
  typeof StreamRunAgentToolApprovalRequired
> = StreamRunAgentToolApprovalRequired$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace StreamRunAgentToolApprovalRequired$ {
  /** @deprecated use `StreamRunAgentToolApprovalRequired$inboundSchema` instead. */
  export const inboundSchema = StreamRunAgentToolApprovalRequired$inboundSchema;
  /** @deprecated use `StreamRunAgentToolApprovalRequired$outboundSchema` instead. */
  export const outboundSchema =
    StreamRunAgentToolApprovalRequired$outboundSchema;
}

/** @internal */
export const StreamRunAgentSettings$inboundSchema: z.ZodType<
  StreamRunAgentSettings,
  z.ZodTypeDef,
  unknown
> = z.object({
  tools: z.array(
    z.union([
      z.lazy(() => AgentToolInputRunHTTPToolRun$inboundSchema),
      z.lazy(() => AgentToolInputRunCodeToolRun$inboundSchema),
      z.lazy(() => AgentToolInputRunFunctionToolRun$inboundSchema),
      z.lazy(() =>
        StreamRunAgentAgentToolInputRunGoogleSearchTool$inboundSchema
      ),
      z.lazy(() =>
        StreamRunAgentAgentToolInputRunWebScraperTool$inboundSchema
      ),
      z.lazy(() =>
        StreamRunAgentAgentToolInputRunCallSubAgentTool$inboundSchema
      ),
      z.lazy(() =>
        StreamRunAgentAgentToolInputRunRetrieveAgentsTool$inboundSchema
      ),
      z.lazy(() =>
        StreamRunAgentAgentToolInputRunQueryMemoryStoreTool$inboundSchema
      ),
      z.lazy(() =>
        StreamRunAgentAgentToolInputRunWriteMemoryStoreTool$inboundSchema
      ),
      z.lazy(() =>
        StreamRunAgentAgentToolInputRunRetrieveMemoryStoresTool$inboundSchema
      ),
      z.lazy(() =>
        StreamRunAgentAgentToolInputRunDeleteMemoryDocumentTool$inboundSchema
      ),
      z.lazy(() =>
        StreamRunAgentAgentToolInputRunRetrieveKnowledgeBasesTool$inboundSchema
      ),
      z.lazy(() =>
        StreamRunAgentAgentToolInputRunQueryKnowledgeBaseTool$inboundSchema
      ),
      z.lazy(() =>
        StreamRunAgentAgentToolInputRunCurrentDateTool$inboundSchema
      ),
    ]),
  ),
  tool_approval_required: StreamRunAgentToolApprovalRequired$inboundSchema
    .default("none"),
  max_iterations: z.number().int().default(15),
  max_execution_time: z.number().int().default(300),
}).transform((v) => {
  return remap$(v, {
    "tool_approval_required": "toolApprovalRequired",
    "max_iterations": "maxIterations",
    "max_execution_time": "maxExecutionTime",
  });
});

/** @internal */
export type StreamRunAgentSettings$Outbound = {
  tools: Array<
    | AgentToolInputRunHTTPToolRun$Outbound
    | AgentToolInputRunCodeToolRun$Outbound
    | AgentToolInputRunFunctionToolRun$Outbound
    | StreamRunAgentAgentToolInputRunGoogleSearchTool$Outbound
    | StreamRunAgentAgentToolInputRunWebScraperTool$Outbound
    | StreamRunAgentAgentToolInputRunCallSubAgentTool$Outbound
    | StreamRunAgentAgentToolInputRunRetrieveAgentsTool$Outbound
    | StreamRunAgentAgentToolInputRunQueryMemoryStoreTool$Outbound
    | StreamRunAgentAgentToolInputRunWriteMemoryStoreTool$Outbound
    | StreamRunAgentAgentToolInputRunRetrieveMemoryStoresTool$Outbound
    | StreamRunAgentAgentToolInputRunDeleteMemoryDocumentTool$Outbound
    | StreamRunAgentAgentToolInputRunRetrieveKnowledgeBasesTool$Outbound
    | StreamRunAgentAgentToolInputRunQueryKnowledgeBaseTool$Outbound
    | StreamRunAgentAgentToolInputRunCurrentDateTool$Outbound
  >;
  tool_approval_required: string;
  max_iterations: number;
  max_execution_time: number;
};

/** @internal */
export const StreamRunAgentSettings$outboundSchema: z.ZodType<
  StreamRunAgentSettings$Outbound,
  z.ZodTypeDef,
  StreamRunAgentSettings
> = z.object({
  tools: z.array(
    z.union([
      z.lazy(() => AgentToolInputRunHTTPToolRun$outboundSchema),
      z.lazy(() => AgentToolInputRunCodeToolRun$outboundSchema),
      z.lazy(() => AgentToolInputRunFunctionToolRun$outboundSchema),
      z.lazy(() =>
        StreamRunAgentAgentToolInputRunGoogleSearchTool$outboundSchema
      ),
      z.lazy(() =>
        StreamRunAgentAgentToolInputRunWebScraperTool$outboundSchema
      ),
      z.lazy(() =>
        StreamRunAgentAgentToolInputRunCallSubAgentTool$outboundSchema
      ),
      z.lazy(() =>
        StreamRunAgentAgentToolInputRunRetrieveAgentsTool$outboundSchema
      ),
      z.lazy(() =>
        StreamRunAgentAgentToolInputRunQueryMemoryStoreTool$outboundSchema
      ),
      z.lazy(() =>
        StreamRunAgentAgentToolInputRunWriteMemoryStoreTool$outboundSchema
      ),
      z.lazy(() =>
        StreamRunAgentAgentToolInputRunRetrieveMemoryStoresTool$outboundSchema
      ),
      z.lazy(() =>
        StreamRunAgentAgentToolInputRunDeleteMemoryDocumentTool$outboundSchema
      ),
      z.lazy(() =>
        StreamRunAgentAgentToolInputRunRetrieveKnowledgeBasesTool$outboundSchema
      ),
      z.lazy(() =>
        StreamRunAgentAgentToolInputRunQueryKnowledgeBaseTool$outboundSchema
      ),
      z.lazy(() =>
        StreamRunAgentAgentToolInputRunCurrentDateTool$outboundSchema
      ),
    ]),
  ),
  toolApprovalRequired: StreamRunAgentToolApprovalRequired$outboundSchema
    .default("none"),
  maxIterations: z.number().int().default(15),
  maxExecutionTime: z.number().int().default(300),
}).transform((v) => {
  return remap$(v, {
    toolApprovalRequired: "tool_approval_required",
    maxIterations: "max_iterations",
    maxExecutionTime: "max_execution_time",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace StreamRunAgentSettings$ {
  /** @deprecated use `StreamRunAgentSettings$inboundSchema` instead. */
  export const inboundSchema = StreamRunAgentSettings$inboundSchema;
  /** @deprecated use `StreamRunAgentSettings$outboundSchema` instead. */
  export const outboundSchema = StreamRunAgentSettings$outboundSchema;
  /** @deprecated use `StreamRunAgentSettings$Outbound` instead. */
  export type Outbound = StreamRunAgentSettings$Outbound;
}

export function streamRunAgentSettingsToJSON(
  streamRunAgentSettings: StreamRunAgentSettings,
): string {
  return JSON.stringify(
    StreamRunAgentSettings$outboundSchema.parse(streamRunAgentSettings),
  );
}

export function streamRunAgentSettingsFromJSON(
  jsonString: string,
): SafeParseResult<StreamRunAgentSettings, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => StreamRunAgentSettings$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'StreamRunAgentSettings' from JSON`,
  );
}

/** @internal */
export const StreamRunAgentRequestBody$inboundSchema: z.ZodType<
  StreamRunAgentRequestBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  key: z.string(),
  task_id: z.string().optional(),
  model: z.string(),
  fallback_models: z.array(z.string()).optional(),
  role: z.string(),
  instructions: z.string(),
  message: z.lazy(() => StreamRunAgentMessage$inboundSchema),
  variables: z.record(z.any()).optional(),
  contact: z.lazy(() => StreamRunAgentContact$inboundSchema).optional(),
  thread: z.lazy(() => StreamRunAgentThread$inboundSchema).optional(),
  memory: z.lazy(() => StreamRunAgentMemory$inboundSchema).optional(),
  path: z.string(),
  description: z.string().optional(),
  system_prompt: z.string().optional(),
  memory_stores: z.array(z.string()).optional(),
  knowledge_bases: z.array(
    z.lazy(() => StreamRunAgentKnowledgeBases$inboundSchema),
  ).optional(),
  team_of_agents: z.array(
    z.lazy(() => StreamRunAgentTeamOfAgents$inboundSchema),
  ).optional(),
  settings: z.lazy(() => StreamRunAgentSettings$inboundSchema),
  metadata: z.record(z.any()).optional(),
  stream_timeout_seconds: z.number().optional(),
}).transform((v) => {
  return remap$(v, {
    "task_id": "taskId",
    "fallback_models": "fallbackModels",
    "system_prompt": "systemPrompt",
    "memory_stores": "memoryStores",
    "knowledge_bases": "knowledgeBases",
    "team_of_agents": "teamOfAgents",
    "stream_timeout_seconds": "streamTimeoutSeconds",
  });
});

/** @internal */
export type StreamRunAgentRequestBody$Outbound = {
  key: string;
  task_id?: string | undefined;
  model: string;
  fallback_models?: Array<string> | undefined;
  role: string;
  instructions: string;
  message: StreamRunAgentMessage$Outbound;
  variables?: { [k: string]: any } | undefined;
  contact?: StreamRunAgentContact$Outbound | undefined;
  thread?: StreamRunAgentThread$Outbound | undefined;
  memory?: StreamRunAgentMemory$Outbound | undefined;
  path: string;
  description?: string | undefined;
  system_prompt?: string | undefined;
  memory_stores?: Array<string> | undefined;
  knowledge_bases?: Array<StreamRunAgentKnowledgeBases$Outbound> | undefined;
  team_of_agents?: Array<StreamRunAgentTeamOfAgents$Outbound> | undefined;
  settings: StreamRunAgentSettings$Outbound;
  metadata?: { [k: string]: any } | undefined;
  stream_timeout_seconds?: number | undefined;
};

/** @internal */
export const StreamRunAgentRequestBody$outboundSchema: z.ZodType<
  StreamRunAgentRequestBody$Outbound,
  z.ZodTypeDef,
  StreamRunAgentRequestBody
> = z.object({
  key: z.string(),
  taskId: z.string().optional(),
  model: z.string(),
  fallbackModels: z.array(z.string()).optional(),
  role: z.string(),
  instructions: z.string(),
  message: z.lazy(() => StreamRunAgentMessage$outboundSchema),
  variables: z.record(z.any()).optional(),
  contact: z.lazy(() => StreamRunAgentContact$outboundSchema).optional(),
  thread: z.lazy(() => StreamRunAgentThread$outboundSchema).optional(),
  memory: z.lazy(() => StreamRunAgentMemory$outboundSchema).optional(),
  path: z.string(),
  description: z.string().optional(),
  systemPrompt: z.string().optional(),
  memoryStores: z.array(z.string()).optional(),
  knowledgeBases: z.array(
    z.lazy(() => StreamRunAgentKnowledgeBases$outboundSchema),
  ).optional(),
  teamOfAgents: z.array(z.lazy(() => StreamRunAgentTeamOfAgents$outboundSchema))
    .optional(),
  settings: z.lazy(() => StreamRunAgentSettings$outboundSchema),
  metadata: z.record(z.any()).optional(),
  streamTimeoutSeconds: z.number().optional(),
}).transform((v) => {
  return remap$(v, {
    taskId: "task_id",
    fallbackModels: "fallback_models",
    systemPrompt: "system_prompt",
    memoryStores: "memory_stores",
    knowledgeBases: "knowledge_bases",
    teamOfAgents: "team_of_agents",
    streamTimeoutSeconds: "stream_timeout_seconds",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace StreamRunAgentRequestBody$ {
  /** @deprecated use `StreamRunAgentRequestBody$inboundSchema` instead. */
  export const inboundSchema = StreamRunAgentRequestBody$inboundSchema;
  /** @deprecated use `StreamRunAgentRequestBody$outboundSchema` instead. */
  export const outboundSchema = StreamRunAgentRequestBody$outboundSchema;
  /** @deprecated use `StreamRunAgentRequestBody$Outbound` instead. */
  export type Outbound = StreamRunAgentRequestBody$Outbound;
}

export function streamRunAgentRequestBodyToJSON(
  streamRunAgentRequestBody: StreamRunAgentRequestBody,
): string {
  return JSON.stringify(
    StreamRunAgentRequestBody$outboundSchema.parse(streamRunAgentRequestBody),
  );
}

export function streamRunAgentRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<StreamRunAgentRequestBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => StreamRunAgentRequestBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'StreamRunAgentRequestBody' from JSON`,
  );
}

/** @internal */
export const StreamRunAgentResponseBody$inboundSchema: z.ZodType<
  StreamRunAgentResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  data: z.string(),
});

/** @internal */
export type StreamRunAgentResponseBody$Outbound = {
  data: string;
};

/** @internal */
export const StreamRunAgentResponseBody$outboundSchema: z.ZodType<
  StreamRunAgentResponseBody$Outbound,
  z.ZodTypeDef,
  StreamRunAgentResponseBody
> = z.object({
  data: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace StreamRunAgentResponseBody$ {
  /** @deprecated use `StreamRunAgentResponseBody$inboundSchema` instead. */
  export const inboundSchema = StreamRunAgentResponseBody$inboundSchema;
  /** @deprecated use `StreamRunAgentResponseBody$outboundSchema` instead. */
  export const outboundSchema = StreamRunAgentResponseBody$outboundSchema;
  /** @deprecated use `StreamRunAgentResponseBody$Outbound` instead. */
  export type Outbound = StreamRunAgentResponseBody$Outbound;
}

export function streamRunAgentResponseBodyToJSON(
  streamRunAgentResponseBody: StreamRunAgentResponseBody,
): string {
  return JSON.stringify(
    StreamRunAgentResponseBody$outboundSchema.parse(streamRunAgentResponseBody),
  );
}

export function streamRunAgentResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<StreamRunAgentResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => StreamRunAgentResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'StreamRunAgentResponseBody' from JSON`,
  );
}
