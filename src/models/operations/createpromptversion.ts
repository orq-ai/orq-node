/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * The type of the model
 */
export const CreatePromptVersionModelType = {
  Chat: "chat",
  Completion: "completion",
  Embedding: "embedding",
  Vision: "vision",
  Image: "image",
  Tts: "tts",
  Stt: "stt",
  Rerank: "rerank",
} as const;
/**
 * The type of the model
 */
export type CreatePromptVersionModelType = ClosedEnum<
  typeof CreatePromptVersionModelType
>;

/**
 * Only supported on `image` models.
 */
export const CreatePromptVersionFormat = {
  Url: "url",
  B64Json: "b64_json",
  Text: "text",
  JsonObject: "json_object",
} as const;
/**
 * Only supported on `image` models.
 */
export type CreatePromptVersionFormat = ClosedEnum<
  typeof CreatePromptVersionFormat
>;

/**
 * Only supported on `image` models.
 */
export const CreatePromptVersionQuality = {
  Standard: "standard",
  Hd: "hd",
} as const;
/**
 * Only supported on `image` models.
 */
export type CreatePromptVersionQuality = ClosedEnum<
  typeof CreatePromptVersionQuality
>;

export const CreatePromptVersionResponseFormatPromptsType = {
  JsonObject: "json_object",
} as const;
export type CreatePromptVersionResponseFormatPromptsType = ClosedEnum<
  typeof CreatePromptVersionResponseFormatPromptsType
>;

export type CreatePromptVersionResponseFormat2 = {
  type: CreatePromptVersionResponseFormatPromptsType;
};

export const CreatePromptVersionResponseFormatType = {
  JsonSchema: "json_schema",
} as const;
export type CreatePromptVersionResponseFormatType = ClosedEnum<
  typeof CreatePromptVersionResponseFormatType
>;

export type ResponseFormatJsonSchema = {
  name: string;
  strict: boolean;
  schema: { [k: string]: any };
};

export type CreatePromptVersionResponseFormat1 = {
  type: CreatePromptVersionResponseFormatType;
  jsonSchema: ResponseFormatJsonSchema;
};

/**
 * An object specifying the format that the model must output.
 *
 * @remarks
 *
 *  Setting to `{ "type": "json_schema", "json_schema": {...} }` enables Structured Outputs which ensures the model will match your supplied JSON schema
 *
 *  Setting to `{ "type": "json_object" }` enables JSON mode, which ensures the message the model generates is valid JSON.
 *
 * Important: when using JSON mode, you must also instruct the model to produce JSON yourself via a system or user message. Without this, the model may generate an unending stream of whitespace until the generation reaches the token limit, resulting in a long-running and seemingly "stuck" request. Also note that the message content may be partially cut off if finish_reason="length", which indicates the generation exceeded max_tokens or the conversation exceeded the max context length.
 */
export type CreatePromptVersionResponseFormat =
  | CreatePromptVersionResponseFormat2
  | CreatePromptVersionResponseFormat1;

/**
 * The version of photoReal to use. Must be v1 or v2. Only available for `leonardoai` provider
 */
export const CreatePromptVersionPhotoRealVersion = {
  V1: "v1",
  V2: "v2",
} as const;
/**
 * The version of photoReal to use. Must be v1 or v2. Only available for `leonardoai` provider
 */
export type CreatePromptVersionPhotoRealVersion = ClosedEnum<
  typeof CreatePromptVersionPhotoRealVersion
>;

/**
 * The format to return the embeddings
 */
export const CreatePromptVersionEncodingFormat = {
  Float: "float",
  Base64: "base64",
} as const;
/**
 * The format to return the embeddings
 */
export type CreatePromptVersionEncodingFormat = ClosedEnum<
  typeof CreatePromptVersionEncodingFormat
>;

/**
 * Model Parameters: Not all parameters apply to every model
 */
export type CreatePromptVersionModelParameters = {
  /**
   * Only supported on `chat` and `completion` models.
   */
  temperature?: number | undefined;
  /**
   * Only supported on `chat` and `completion` models.
   */
  maxTokens?: number | undefined;
  /**
   * Only supported on `chat` and `completion` models.
   */
  topK?: number | undefined;
  /**
   * Only supported on `chat` and `completion` models.
   */
  topP?: number | undefined;
  /**
   * Only supported on `chat` and `completion` models.
   */
  frequencyPenalty?: number | undefined;
  /**
   * Only supported on `chat` and `completion` models.
   */
  presencePenalty?: number | undefined;
  /**
   * Only supported on `image` models.
   */
  numImages?: number | undefined;
  /**
   * Best effort deterministic seed for the model. Currently only OpenAI models support these
   */
  seed?: number | undefined;
  /**
   * Only supported on `image` models.
   */
  format?: CreatePromptVersionFormat | undefined;
  /**
   * Only supported on `image` models.
   */
  dimensions?: string | undefined;
  /**
   * Only supported on `image` models.
   */
  quality?: CreatePromptVersionQuality | undefined;
  /**
   * Only supported on `image` models.
   */
  style?: string | undefined;
  /**
   * An object specifying the format that the model must output.
   *
   * @remarks
   *
   *  Setting to `{ "type": "json_schema", "json_schema": {...} }` enables Structured Outputs which ensures the model will match your supplied JSON schema
   *
   *  Setting to `{ "type": "json_object" }` enables JSON mode, which ensures the message the model generates is valid JSON.
   *
   * Important: when using JSON mode, you must also instruct the model to produce JSON yourself via a system or user message. Without this, the model may generate an unending stream of whitespace until the generation reaches the token limit, resulting in a long-running and seemingly "stuck" request. Also note that the message content may be partially cut off if finish_reason="length", which indicates the generation exceeded max_tokens or the conversation exceeded the max context length.
   */
  responseFormat?:
    | CreatePromptVersionResponseFormat2
    | CreatePromptVersionResponseFormat1
    | null
    | undefined;
  /**
   * The version of photoReal to use. Must be v1 or v2. Only available for `leonardoai` provider
   */
  photoRealVersion?: CreatePromptVersionPhotoRealVersion | undefined;
  /**
   * The format to return the embeddings
   */
  encodingFormat?: CreatePromptVersionEncodingFormat | undefined;
};

export const CreatePromptVersionProvider = {
  Cohere: "cohere",
  Openai: "openai",
  Anthropic: "anthropic",
  Huggingface: "huggingface",
  Replicate: "replicate",
  Google: "google",
  GoogleAi: "google-ai",
  Azure: "azure",
  Aws: "aws",
  Anyscale: "anyscale",
  Perplexity: "perplexity",
  Groq: "groq",
  Fal: "fal",
  Leonardoai: "leonardoai",
  Nvidia: "nvidia",
} as const;
export type CreatePromptVersionProvider = ClosedEnum<
  typeof CreatePromptVersionProvider
>;

/**
 * The role of the prompt message
 */
export const CreatePromptVersionRole = {
  System: "system",
  Assistant: "assistant",
  User: "user",
  Exception: "exception",
  Tool: "tool",
  Prompt: "prompt",
  Correction: "correction",
  ExpectedOutput: "expected_output",
} as const;
/**
 * The role of the prompt message
 */
export type CreatePromptVersionRole = ClosedEnum<
  typeof CreatePromptVersionRole
>;

export const CreatePromptVersion2PromptsType = {
  ImageUrl: "image_url",
} as const;
export type CreatePromptVersion2PromptsType = ClosedEnum<
  typeof CreatePromptVersion2PromptsType
>;

export type CreatePromptVersion2ImageUrl = {
  /**
   * Either a URL of the image or the base64 encoded data URI.
   */
  url: string;
  /**
   * Specifies the detail level of the image. Currently only supported with OpenAI models
   */
  detail?: string | undefined;
};

/**
 * The image part of the prompt message. Only supported with vision models.
 */
export type CreatePromptVersion22 = {
  type: CreatePromptVersion2PromptsType;
  imageUrl: CreatePromptVersion2ImageUrl;
};

export const CreatePromptVersion2Type = {
  Text: "text",
} as const;
export type CreatePromptVersion2Type = ClosedEnum<
  typeof CreatePromptVersion2Type
>;

/**
 * Text content part of a prompt message
 */
export type CreatePromptVersion21 = {
  type: CreatePromptVersion2Type;
  text: string;
};

export type CreatePromptVersionContent2 =
  | CreatePromptVersion21
  | CreatePromptVersion22;

/**
 * The contents of the user message. Either the text content of the message or an array of content parts with a defined type, each can be of type `text` or `image_url` when passing in images. You can pass multiple images by adding multiple `image_url` content parts.
 */
export type CreatePromptVersionContent =
  | string
  | Array<CreatePromptVersion21 | CreatePromptVersion22>;

export const CreatePromptVersionType = {
  Function: "function",
} as const;
export type CreatePromptVersionType = ClosedEnum<
  typeof CreatePromptVersionType
>;

export type CreatePromptVersionFunction = {
  name: string;
  /**
   * JSON string arguments for the functions
   */
  arguments: string;
};

export type CreatePromptVersionToolCalls = {
  id?: string | undefined;
  index?: number | undefined;
  type: CreatePromptVersionType;
  function: CreatePromptVersionFunction;
};

export type CreatePromptVersionMessages = {
  /**
   * The role of the prompt message
   */
  role: CreatePromptVersionRole;
  /**
   * The contents of the user message. Either the text content of the message or an array of content parts with a defined type, each can be of type `text` or `image_url` when passing in images. You can pass multiple images by adding multiple `image_url` content parts.
   */
  content: string | Array<CreatePromptVersion21 | CreatePromptVersion22>;
  toolCalls?: Array<CreatePromptVersionToolCalls> | undefined;
};

export type CreatePromptVersionPromptConfig = {
  stream?: boolean | undefined;
  model?: string | undefined;
  /**
   * The type of the model
   */
  modelType?: CreatePromptVersionModelType | undefined;
  /**
   * Model Parameters: Not all parameters apply to every model
   */
  modelParameters?: CreatePromptVersionModelParameters | undefined;
  provider?: CreatePromptVersionProvider | undefined;
  version?: string | undefined;
  messages: Array<CreatePromptVersionMessages>;
};

export type CreatePromptVersionMetadata = {
  useCases?: Array<string> | undefined;
  language?: string | undefined;
};

export type CreatePromptVersionRequestBody = {
  displayName: string;
  description?: string | null | undefined;
  promptConfig: CreatePromptVersionPromptConfig;
  metadata: CreatePromptVersionMetadata;
  commit: string;
  timestamp: string;
};

export type CreatePromptVersionRequest = {
  /**
   * Prompt ID
   */
  id: string;
  requestBody?: CreatePromptVersionRequestBody | undefined;
};

/**
 * The type of the model
 */
export const CreatePromptVersionPromptsModelType = {
  Chat: "chat",
  Completion: "completion",
  Embedding: "embedding",
  Vision: "vision",
  Image: "image",
  Tts: "tts",
  Stt: "stt",
  Rerank: "rerank",
} as const;
/**
 * The type of the model
 */
export type CreatePromptVersionPromptsModelType = ClosedEnum<
  typeof CreatePromptVersionPromptsModelType
>;

/**
 * Only supported on `image` models.
 */
export const CreatePromptVersionPromptsFormat = {
  Url: "url",
  B64Json: "b64_json",
  Text: "text",
  JsonObject: "json_object",
} as const;
/**
 * Only supported on `image` models.
 */
export type CreatePromptVersionPromptsFormat = ClosedEnum<
  typeof CreatePromptVersionPromptsFormat
>;

/**
 * Only supported on `image` models.
 */
export const CreatePromptVersionPromptsQuality = {
  Standard: "standard",
  Hd: "hd",
} as const;
/**
 * Only supported on `image` models.
 */
export type CreatePromptVersionPromptsQuality = ClosedEnum<
  typeof CreatePromptVersionPromptsQuality
>;

export const CreatePromptVersionResponseFormatPromptsResponse200Type = {
  JsonObject: "json_object",
} as const;
export type CreatePromptVersionResponseFormatPromptsResponse200Type =
  ClosedEnum<typeof CreatePromptVersionResponseFormatPromptsResponse200Type>;

export type CreatePromptVersionResponseFormatPrompts2 = {
  type: CreatePromptVersionResponseFormatPromptsResponse200Type;
};

export const CreatePromptVersionResponseFormatPromptsResponseType = {
  JsonSchema: "json_schema",
} as const;
export type CreatePromptVersionResponseFormatPromptsResponseType = ClosedEnum<
  typeof CreatePromptVersionResponseFormatPromptsResponseType
>;

export type CreatePromptVersionResponseFormatJsonSchema = {
  name: string;
  strict: boolean;
  schema: { [k: string]: any };
};

export type CreatePromptVersionResponseFormatPrompts1 = {
  type: CreatePromptVersionResponseFormatPromptsResponseType;
  jsonSchema: CreatePromptVersionResponseFormatJsonSchema;
};

/**
 * An object specifying the format that the model must output.
 *
 * @remarks
 *
 *  Setting to `{ "type": "json_schema", "json_schema": {...} }` enables Structured Outputs which ensures the model will match your supplied JSON schema
 *
 *  Setting to `{ "type": "json_object" }` enables JSON mode, which ensures the message the model generates is valid JSON.
 *
 * Important: when using JSON mode, you must also instruct the model to produce JSON yourself via a system or user message. Without this, the model may generate an unending stream of whitespace until the generation reaches the token limit, resulting in a long-running and seemingly "stuck" request. Also note that the message content may be partially cut off if finish_reason="length", which indicates the generation exceeded max_tokens or the conversation exceeded the max context length.
 */
export type CreatePromptVersionPromptsResponseFormat =
  | CreatePromptVersionResponseFormatPrompts2
  | CreatePromptVersionResponseFormatPrompts1;

/**
 * The version of photoReal to use. Must be v1 or v2. Only available for `leonardoai` provider
 */
export const CreatePromptVersionPromptsPhotoRealVersion = {
  V1: "v1",
  V2: "v2",
} as const;
/**
 * The version of photoReal to use. Must be v1 or v2. Only available for `leonardoai` provider
 */
export type CreatePromptVersionPromptsPhotoRealVersion = ClosedEnum<
  typeof CreatePromptVersionPromptsPhotoRealVersion
>;

/**
 * The format to return the embeddings
 */
export const CreatePromptVersionPromptsEncodingFormat = {
  Float: "float",
  Base64: "base64",
} as const;
/**
 * The format to return the embeddings
 */
export type CreatePromptVersionPromptsEncodingFormat = ClosedEnum<
  typeof CreatePromptVersionPromptsEncodingFormat
>;

/**
 * Model Parameters: Not all parameters apply to every model
 */
export type CreatePromptVersionPromptsModelParameters = {
  /**
   * Only supported on `chat` and `completion` models.
   */
  temperature?: number | undefined;
  /**
   * Only supported on `chat` and `completion` models.
   */
  maxTokens?: number | undefined;
  /**
   * Only supported on `chat` and `completion` models.
   */
  topK?: number | undefined;
  /**
   * Only supported on `chat` and `completion` models.
   */
  topP?: number | undefined;
  /**
   * Only supported on `chat` and `completion` models.
   */
  frequencyPenalty?: number | undefined;
  /**
   * Only supported on `chat` and `completion` models.
   */
  presencePenalty?: number | undefined;
  /**
   * Only supported on `image` models.
   */
  numImages?: number | undefined;
  /**
   * Best effort deterministic seed for the model. Currently only OpenAI models support these
   */
  seed?: number | undefined;
  /**
   * Only supported on `image` models.
   */
  format?: CreatePromptVersionPromptsFormat | undefined;
  /**
   * Only supported on `image` models.
   */
  dimensions?: string | undefined;
  /**
   * Only supported on `image` models.
   */
  quality?: CreatePromptVersionPromptsQuality | undefined;
  /**
   * Only supported on `image` models.
   */
  style?: string | undefined;
  /**
   * An object specifying the format that the model must output.
   *
   * @remarks
   *
   *  Setting to `{ "type": "json_schema", "json_schema": {...} }` enables Structured Outputs which ensures the model will match your supplied JSON schema
   *
   *  Setting to `{ "type": "json_object" }` enables JSON mode, which ensures the message the model generates is valid JSON.
   *
   * Important: when using JSON mode, you must also instruct the model to produce JSON yourself via a system or user message. Without this, the model may generate an unending stream of whitespace until the generation reaches the token limit, resulting in a long-running and seemingly "stuck" request. Also note that the message content may be partially cut off if finish_reason="length", which indicates the generation exceeded max_tokens or the conversation exceeded the max context length.
   */
  responseFormat?:
    | CreatePromptVersionResponseFormatPrompts2
    | CreatePromptVersionResponseFormatPrompts1
    | null
    | undefined;
  /**
   * The version of photoReal to use. Must be v1 or v2. Only available for `leonardoai` provider
   */
  photoRealVersion?: CreatePromptVersionPromptsPhotoRealVersion | undefined;
  /**
   * The format to return the embeddings
   */
  encodingFormat?: CreatePromptVersionPromptsEncodingFormat | undefined;
};

export const CreatePromptVersionPromptsProvider = {
  Cohere: "cohere",
  Openai: "openai",
  Anthropic: "anthropic",
  Huggingface: "huggingface",
  Replicate: "replicate",
  Google: "google",
  GoogleAi: "google-ai",
  Azure: "azure",
  Aws: "aws",
  Anyscale: "anyscale",
  Perplexity: "perplexity",
  Groq: "groq",
  Fal: "fal",
  Leonardoai: "leonardoai",
  Nvidia: "nvidia",
} as const;
export type CreatePromptVersionPromptsProvider = ClosedEnum<
  typeof CreatePromptVersionPromptsProvider
>;

/**
 * The role of the prompt message
 */
export const CreatePromptVersionPromptsRole = {
  System: "system",
  Assistant: "assistant",
  User: "user",
  Exception: "exception",
  Tool: "tool",
  Prompt: "prompt",
  Correction: "correction",
  ExpectedOutput: "expected_output",
} as const;
/**
 * The role of the prompt message
 */
export type CreatePromptVersionPromptsRole = ClosedEnum<
  typeof CreatePromptVersionPromptsRole
>;

export const CreatePromptVersion2PromptsResponse200Type = {
  ImageUrl: "image_url",
} as const;
export type CreatePromptVersion2PromptsResponse200Type = ClosedEnum<
  typeof CreatePromptVersion2PromptsResponse200Type
>;

export type CreatePromptVersion2PromptsImageUrl = {
  /**
   * The orq.ai id of the image
   */
  id?: string | undefined;
  /**
   * Either a URL of the image or the base64 encoded data URI.
   */
  url: string;
  /**
   * Specifies the detail level of the image. Currently only supported with OpenAI models
   */
  detail?: string | undefined;
};

/**
 * The image part of the prompt message. Only supported with vision models.
 */
export type CreatePromptVersion2Prompts2 = {
  type: CreatePromptVersion2PromptsResponse200Type;
  imageUrl: CreatePromptVersion2PromptsImageUrl;
};

export const CreatePromptVersion2PromptsResponseType = {
  Text: "text",
} as const;
export type CreatePromptVersion2PromptsResponseType = ClosedEnum<
  typeof CreatePromptVersion2PromptsResponseType
>;

/**
 * Text content part of a prompt message
 */
export type CreatePromptVersion2Prompts1 = {
  type: CreatePromptVersion2PromptsResponseType;
  text: string;
};

export type CreatePromptVersionContentPrompts2 =
  | CreatePromptVersion2Prompts1
  | CreatePromptVersion2Prompts2;

/**
 * The contents of the user message. Either the text content of the message or an array of content parts with a defined type, each can be of type `text` or `image_url` when passing in images. You can pass multiple images by adding multiple `image_url` content parts.
 */
export type CreatePromptVersionPromptsContent =
  | string
  | Array<CreatePromptVersion2Prompts1 | CreatePromptVersion2Prompts2>;

export const CreatePromptVersionPromptsType = {
  Function: "function",
} as const;
export type CreatePromptVersionPromptsType = ClosedEnum<
  typeof CreatePromptVersionPromptsType
>;

export type CreatePromptVersionPromptsFunction = {
  name: string;
  /**
   * JSON string arguments for the functions
   */
  arguments: string;
};

export type CreatePromptVersionPromptsToolCalls = {
  id?: string | undefined;
  index?: number | undefined;
  type: CreatePromptVersionPromptsType;
  function: CreatePromptVersionPromptsFunction;
};

export type CreatePromptVersionPromptsMessages = {
  /**
   * The role of the prompt message
   */
  role: CreatePromptVersionPromptsRole;
  /**
   * The contents of the user message. Either the text content of the message or an array of content parts with a defined type, each can be of type `text` or `image_url` when passing in images. You can pass multiple images by adding multiple `image_url` content parts.
   */
  content:
    | string
    | Array<CreatePromptVersion2Prompts1 | CreatePromptVersion2Prompts2>;
  toolCalls?: Array<CreatePromptVersionPromptsToolCalls> | undefined;
};

export type CreatePromptVersionPromptsPromptConfig = {
  stream?: boolean | undefined;
  model?: string | undefined;
  /**
   * The id of the resource
   */
  modelDbId?: string | undefined;
  /**
   * The type of the model
   */
  modelType?: CreatePromptVersionPromptsModelType | undefined;
  /**
   * Model Parameters: Not all parameters apply to every model
   */
  modelParameters?: CreatePromptVersionPromptsModelParameters | undefined;
  provider?: CreatePromptVersionPromptsProvider | undefined;
  /**
   * The id of the resource
   */
  integrationId?: string | null | undefined;
  version?: string | undefined;
  messages: Array<CreatePromptVersionPromptsMessages>;
};

export type CreatePromptVersionPromptsMetadata = {
  useCases?: Array<string> | undefined;
  language?: string | undefined;
};

/**
 * Prompt version created.
 */
export type CreatePromptVersionResponseBody = {
  id: string;
  displayName: string;
  description?: string | null | undefined;
  promptConfig: CreatePromptVersionPromptsPromptConfig;
  metadata: CreatePromptVersionPromptsMetadata;
  commit: string;
  timestamp: string;
};

/** @internal */
export const CreatePromptVersionModelType$inboundSchema: z.ZodNativeEnum<
  typeof CreatePromptVersionModelType
> = z.nativeEnum(CreatePromptVersionModelType);

/** @internal */
export const CreatePromptVersionModelType$outboundSchema: z.ZodNativeEnum<
  typeof CreatePromptVersionModelType
> = CreatePromptVersionModelType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreatePromptVersionModelType$ {
  /** @deprecated use `CreatePromptVersionModelType$inboundSchema` instead. */
  export const inboundSchema = CreatePromptVersionModelType$inboundSchema;
  /** @deprecated use `CreatePromptVersionModelType$outboundSchema` instead. */
  export const outboundSchema = CreatePromptVersionModelType$outboundSchema;
}

/** @internal */
export const CreatePromptVersionFormat$inboundSchema: z.ZodNativeEnum<
  typeof CreatePromptVersionFormat
> = z.nativeEnum(CreatePromptVersionFormat);

/** @internal */
export const CreatePromptVersionFormat$outboundSchema: z.ZodNativeEnum<
  typeof CreatePromptVersionFormat
> = CreatePromptVersionFormat$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreatePromptVersionFormat$ {
  /** @deprecated use `CreatePromptVersionFormat$inboundSchema` instead. */
  export const inboundSchema = CreatePromptVersionFormat$inboundSchema;
  /** @deprecated use `CreatePromptVersionFormat$outboundSchema` instead. */
  export const outboundSchema = CreatePromptVersionFormat$outboundSchema;
}

/** @internal */
export const CreatePromptVersionQuality$inboundSchema: z.ZodNativeEnum<
  typeof CreatePromptVersionQuality
> = z.nativeEnum(CreatePromptVersionQuality);

/** @internal */
export const CreatePromptVersionQuality$outboundSchema: z.ZodNativeEnum<
  typeof CreatePromptVersionQuality
> = CreatePromptVersionQuality$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreatePromptVersionQuality$ {
  /** @deprecated use `CreatePromptVersionQuality$inboundSchema` instead. */
  export const inboundSchema = CreatePromptVersionQuality$inboundSchema;
  /** @deprecated use `CreatePromptVersionQuality$outboundSchema` instead. */
  export const outboundSchema = CreatePromptVersionQuality$outboundSchema;
}

/** @internal */
export const CreatePromptVersionResponseFormatPromptsType$inboundSchema:
  z.ZodNativeEnum<typeof CreatePromptVersionResponseFormatPromptsType> = z
    .nativeEnum(CreatePromptVersionResponseFormatPromptsType);

/** @internal */
export const CreatePromptVersionResponseFormatPromptsType$outboundSchema:
  z.ZodNativeEnum<typeof CreatePromptVersionResponseFormatPromptsType> =
    CreatePromptVersionResponseFormatPromptsType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreatePromptVersionResponseFormatPromptsType$ {
  /** @deprecated use `CreatePromptVersionResponseFormatPromptsType$inboundSchema` instead. */
  export const inboundSchema =
    CreatePromptVersionResponseFormatPromptsType$inboundSchema;
  /** @deprecated use `CreatePromptVersionResponseFormatPromptsType$outboundSchema` instead. */
  export const outboundSchema =
    CreatePromptVersionResponseFormatPromptsType$outboundSchema;
}

/** @internal */
export const CreatePromptVersionResponseFormat2$inboundSchema: z.ZodType<
  CreatePromptVersionResponseFormat2,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: CreatePromptVersionResponseFormatPromptsType$inboundSchema,
});

/** @internal */
export type CreatePromptVersionResponseFormat2$Outbound = {
  type: string;
};

/** @internal */
export const CreatePromptVersionResponseFormat2$outboundSchema: z.ZodType<
  CreatePromptVersionResponseFormat2$Outbound,
  z.ZodTypeDef,
  CreatePromptVersionResponseFormat2
> = z.object({
  type: CreatePromptVersionResponseFormatPromptsType$outboundSchema,
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreatePromptVersionResponseFormat2$ {
  /** @deprecated use `CreatePromptVersionResponseFormat2$inboundSchema` instead. */
  export const inboundSchema = CreatePromptVersionResponseFormat2$inboundSchema;
  /** @deprecated use `CreatePromptVersionResponseFormat2$outboundSchema` instead. */
  export const outboundSchema =
    CreatePromptVersionResponseFormat2$outboundSchema;
  /** @deprecated use `CreatePromptVersionResponseFormat2$Outbound` instead. */
  export type Outbound = CreatePromptVersionResponseFormat2$Outbound;
}

export function createPromptVersionResponseFormat2ToJSON(
  createPromptVersionResponseFormat2: CreatePromptVersionResponseFormat2,
): string {
  return JSON.stringify(
    CreatePromptVersionResponseFormat2$outboundSchema.parse(
      createPromptVersionResponseFormat2,
    ),
  );
}

export function createPromptVersionResponseFormat2FromJSON(
  jsonString: string,
): SafeParseResult<CreatePromptVersionResponseFormat2, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      CreatePromptVersionResponseFormat2$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreatePromptVersionResponseFormat2' from JSON`,
  );
}

/** @internal */
export const CreatePromptVersionResponseFormatType$inboundSchema:
  z.ZodNativeEnum<typeof CreatePromptVersionResponseFormatType> = z.nativeEnum(
    CreatePromptVersionResponseFormatType,
  );

/** @internal */
export const CreatePromptVersionResponseFormatType$outboundSchema:
  z.ZodNativeEnum<typeof CreatePromptVersionResponseFormatType> =
    CreatePromptVersionResponseFormatType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreatePromptVersionResponseFormatType$ {
  /** @deprecated use `CreatePromptVersionResponseFormatType$inboundSchema` instead. */
  export const inboundSchema =
    CreatePromptVersionResponseFormatType$inboundSchema;
  /** @deprecated use `CreatePromptVersionResponseFormatType$outboundSchema` instead. */
  export const outboundSchema =
    CreatePromptVersionResponseFormatType$outboundSchema;
}

/** @internal */
export const ResponseFormatJsonSchema$inboundSchema: z.ZodType<
  ResponseFormatJsonSchema,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.string(),
  strict: z.boolean(),
  schema: z.record(z.any()),
});

/** @internal */
export type ResponseFormatJsonSchema$Outbound = {
  name: string;
  strict: boolean;
  schema: { [k: string]: any };
};

/** @internal */
export const ResponseFormatJsonSchema$outboundSchema: z.ZodType<
  ResponseFormatJsonSchema$Outbound,
  z.ZodTypeDef,
  ResponseFormatJsonSchema
> = z.object({
  name: z.string(),
  strict: z.boolean(),
  schema: z.record(z.any()),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ResponseFormatJsonSchema$ {
  /** @deprecated use `ResponseFormatJsonSchema$inboundSchema` instead. */
  export const inboundSchema = ResponseFormatJsonSchema$inboundSchema;
  /** @deprecated use `ResponseFormatJsonSchema$outboundSchema` instead. */
  export const outboundSchema = ResponseFormatJsonSchema$outboundSchema;
  /** @deprecated use `ResponseFormatJsonSchema$Outbound` instead. */
  export type Outbound = ResponseFormatJsonSchema$Outbound;
}

export function responseFormatJsonSchemaToJSON(
  responseFormatJsonSchema: ResponseFormatJsonSchema,
): string {
  return JSON.stringify(
    ResponseFormatJsonSchema$outboundSchema.parse(responseFormatJsonSchema),
  );
}

export function responseFormatJsonSchemaFromJSON(
  jsonString: string,
): SafeParseResult<ResponseFormatJsonSchema, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ResponseFormatJsonSchema$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ResponseFormatJsonSchema' from JSON`,
  );
}

/** @internal */
export const CreatePromptVersionResponseFormat1$inboundSchema: z.ZodType<
  CreatePromptVersionResponseFormat1,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: CreatePromptVersionResponseFormatType$inboundSchema,
  json_schema: z.lazy(() => ResponseFormatJsonSchema$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "json_schema": "jsonSchema",
  });
});

/** @internal */
export type CreatePromptVersionResponseFormat1$Outbound = {
  type: string;
  json_schema: ResponseFormatJsonSchema$Outbound;
};

/** @internal */
export const CreatePromptVersionResponseFormat1$outboundSchema: z.ZodType<
  CreatePromptVersionResponseFormat1$Outbound,
  z.ZodTypeDef,
  CreatePromptVersionResponseFormat1
> = z.object({
  type: CreatePromptVersionResponseFormatType$outboundSchema,
  jsonSchema: z.lazy(() => ResponseFormatJsonSchema$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    jsonSchema: "json_schema",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreatePromptVersionResponseFormat1$ {
  /** @deprecated use `CreatePromptVersionResponseFormat1$inboundSchema` instead. */
  export const inboundSchema = CreatePromptVersionResponseFormat1$inboundSchema;
  /** @deprecated use `CreatePromptVersionResponseFormat1$outboundSchema` instead. */
  export const outboundSchema =
    CreatePromptVersionResponseFormat1$outboundSchema;
  /** @deprecated use `CreatePromptVersionResponseFormat1$Outbound` instead. */
  export type Outbound = CreatePromptVersionResponseFormat1$Outbound;
}

export function createPromptVersionResponseFormat1ToJSON(
  createPromptVersionResponseFormat1: CreatePromptVersionResponseFormat1,
): string {
  return JSON.stringify(
    CreatePromptVersionResponseFormat1$outboundSchema.parse(
      createPromptVersionResponseFormat1,
    ),
  );
}

export function createPromptVersionResponseFormat1FromJSON(
  jsonString: string,
): SafeParseResult<CreatePromptVersionResponseFormat1, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      CreatePromptVersionResponseFormat1$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreatePromptVersionResponseFormat1' from JSON`,
  );
}

/** @internal */
export const CreatePromptVersionResponseFormat$inboundSchema: z.ZodType<
  CreatePromptVersionResponseFormat,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => CreatePromptVersionResponseFormat2$inboundSchema),
  z.lazy(() => CreatePromptVersionResponseFormat1$inboundSchema),
]);

/** @internal */
export type CreatePromptVersionResponseFormat$Outbound =
  | CreatePromptVersionResponseFormat2$Outbound
  | CreatePromptVersionResponseFormat1$Outbound;

/** @internal */
export const CreatePromptVersionResponseFormat$outboundSchema: z.ZodType<
  CreatePromptVersionResponseFormat$Outbound,
  z.ZodTypeDef,
  CreatePromptVersionResponseFormat
> = z.union([
  z.lazy(() => CreatePromptVersionResponseFormat2$outboundSchema),
  z.lazy(() => CreatePromptVersionResponseFormat1$outboundSchema),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreatePromptVersionResponseFormat$ {
  /** @deprecated use `CreatePromptVersionResponseFormat$inboundSchema` instead. */
  export const inboundSchema = CreatePromptVersionResponseFormat$inboundSchema;
  /** @deprecated use `CreatePromptVersionResponseFormat$outboundSchema` instead. */
  export const outboundSchema =
    CreatePromptVersionResponseFormat$outboundSchema;
  /** @deprecated use `CreatePromptVersionResponseFormat$Outbound` instead. */
  export type Outbound = CreatePromptVersionResponseFormat$Outbound;
}

export function createPromptVersionResponseFormatToJSON(
  createPromptVersionResponseFormat: CreatePromptVersionResponseFormat,
): string {
  return JSON.stringify(
    CreatePromptVersionResponseFormat$outboundSchema.parse(
      createPromptVersionResponseFormat,
    ),
  );
}

export function createPromptVersionResponseFormatFromJSON(
  jsonString: string,
): SafeParseResult<CreatePromptVersionResponseFormat, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreatePromptVersionResponseFormat$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreatePromptVersionResponseFormat' from JSON`,
  );
}

/** @internal */
export const CreatePromptVersionPhotoRealVersion$inboundSchema: z.ZodNativeEnum<
  typeof CreatePromptVersionPhotoRealVersion
> = z.nativeEnum(CreatePromptVersionPhotoRealVersion);

/** @internal */
export const CreatePromptVersionPhotoRealVersion$outboundSchema:
  z.ZodNativeEnum<typeof CreatePromptVersionPhotoRealVersion> =
    CreatePromptVersionPhotoRealVersion$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreatePromptVersionPhotoRealVersion$ {
  /** @deprecated use `CreatePromptVersionPhotoRealVersion$inboundSchema` instead. */
  export const inboundSchema =
    CreatePromptVersionPhotoRealVersion$inboundSchema;
  /** @deprecated use `CreatePromptVersionPhotoRealVersion$outboundSchema` instead. */
  export const outboundSchema =
    CreatePromptVersionPhotoRealVersion$outboundSchema;
}

/** @internal */
export const CreatePromptVersionEncodingFormat$inboundSchema: z.ZodNativeEnum<
  typeof CreatePromptVersionEncodingFormat
> = z.nativeEnum(CreatePromptVersionEncodingFormat);

/** @internal */
export const CreatePromptVersionEncodingFormat$outboundSchema: z.ZodNativeEnum<
  typeof CreatePromptVersionEncodingFormat
> = CreatePromptVersionEncodingFormat$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreatePromptVersionEncodingFormat$ {
  /** @deprecated use `CreatePromptVersionEncodingFormat$inboundSchema` instead. */
  export const inboundSchema = CreatePromptVersionEncodingFormat$inboundSchema;
  /** @deprecated use `CreatePromptVersionEncodingFormat$outboundSchema` instead. */
  export const outboundSchema =
    CreatePromptVersionEncodingFormat$outboundSchema;
}

/** @internal */
export const CreatePromptVersionModelParameters$inboundSchema: z.ZodType<
  CreatePromptVersionModelParameters,
  z.ZodTypeDef,
  unknown
> = z.object({
  temperature: z.number().optional(),
  maxTokens: z.number().optional(),
  topK: z.number().optional(),
  topP: z.number().optional(),
  frequencyPenalty: z.number().optional(),
  presencePenalty: z.number().optional(),
  numImages: z.number().optional(),
  seed: z.number().optional(),
  format: CreatePromptVersionFormat$inboundSchema.optional(),
  dimensions: z.string().optional(),
  quality: CreatePromptVersionQuality$inboundSchema.optional(),
  style: z.string().optional(),
  responseFormat: z.nullable(
    z.union([
      z.lazy(() => CreatePromptVersionResponseFormat2$inboundSchema),
      z.lazy(() => CreatePromptVersionResponseFormat1$inboundSchema),
    ]),
  ).optional(),
  photoRealVersion: CreatePromptVersionPhotoRealVersion$inboundSchema
    .optional(),
  encoding_format: CreatePromptVersionEncodingFormat$inboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    "encoding_format": "encodingFormat",
  });
});

/** @internal */
export type CreatePromptVersionModelParameters$Outbound = {
  temperature?: number | undefined;
  maxTokens?: number | undefined;
  topK?: number | undefined;
  topP?: number | undefined;
  frequencyPenalty?: number | undefined;
  presencePenalty?: number | undefined;
  numImages?: number | undefined;
  seed?: number | undefined;
  format?: string | undefined;
  dimensions?: string | undefined;
  quality?: string | undefined;
  style?: string | undefined;
  responseFormat?:
    | CreatePromptVersionResponseFormat2$Outbound
    | CreatePromptVersionResponseFormat1$Outbound
    | null
    | undefined;
  photoRealVersion?: string | undefined;
  encoding_format?: string | undefined;
};

/** @internal */
export const CreatePromptVersionModelParameters$outboundSchema: z.ZodType<
  CreatePromptVersionModelParameters$Outbound,
  z.ZodTypeDef,
  CreatePromptVersionModelParameters
> = z.object({
  temperature: z.number().optional(),
  maxTokens: z.number().optional(),
  topK: z.number().optional(),
  topP: z.number().optional(),
  frequencyPenalty: z.number().optional(),
  presencePenalty: z.number().optional(),
  numImages: z.number().optional(),
  seed: z.number().optional(),
  format: CreatePromptVersionFormat$outboundSchema.optional(),
  dimensions: z.string().optional(),
  quality: CreatePromptVersionQuality$outboundSchema.optional(),
  style: z.string().optional(),
  responseFormat: z.nullable(
    z.union([
      z.lazy(() => CreatePromptVersionResponseFormat2$outboundSchema),
      z.lazy(() => CreatePromptVersionResponseFormat1$outboundSchema),
    ]),
  ).optional(),
  photoRealVersion: CreatePromptVersionPhotoRealVersion$outboundSchema
    .optional(),
  encodingFormat: CreatePromptVersionEncodingFormat$outboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    encodingFormat: "encoding_format",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreatePromptVersionModelParameters$ {
  /** @deprecated use `CreatePromptVersionModelParameters$inboundSchema` instead. */
  export const inboundSchema = CreatePromptVersionModelParameters$inboundSchema;
  /** @deprecated use `CreatePromptVersionModelParameters$outboundSchema` instead. */
  export const outboundSchema =
    CreatePromptVersionModelParameters$outboundSchema;
  /** @deprecated use `CreatePromptVersionModelParameters$Outbound` instead. */
  export type Outbound = CreatePromptVersionModelParameters$Outbound;
}

export function createPromptVersionModelParametersToJSON(
  createPromptVersionModelParameters: CreatePromptVersionModelParameters,
): string {
  return JSON.stringify(
    CreatePromptVersionModelParameters$outboundSchema.parse(
      createPromptVersionModelParameters,
    ),
  );
}

export function createPromptVersionModelParametersFromJSON(
  jsonString: string,
): SafeParseResult<CreatePromptVersionModelParameters, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      CreatePromptVersionModelParameters$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreatePromptVersionModelParameters' from JSON`,
  );
}

/** @internal */
export const CreatePromptVersionProvider$inboundSchema: z.ZodNativeEnum<
  typeof CreatePromptVersionProvider
> = z.nativeEnum(CreatePromptVersionProvider);

/** @internal */
export const CreatePromptVersionProvider$outboundSchema: z.ZodNativeEnum<
  typeof CreatePromptVersionProvider
> = CreatePromptVersionProvider$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreatePromptVersionProvider$ {
  /** @deprecated use `CreatePromptVersionProvider$inboundSchema` instead. */
  export const inboundSchema = CreatePromptVersionProvider$inboundSchema;
  /** @deprecated use `CreatePromptVersionProvider$outboundSchema` instead. */
  export const outboundSchema = CreatePromptVersionProvider$outboundSchema;
}

/** @internal */
export const CreatePromptVersionRole$inboundSchema: z.ZodNativeEnum<
  typeof CreatePromptVersionRole
> = z.nativeEnum(CreatePromptVersionRole);

/** @internal */
export const CreatePromptVersionRole$outboundSchema: z.ZodNativeEnum<
  typeof CreatePromptVersionRole
> = CreatePromptVersionRole$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreatePromptVersionRole$ {
  /** @deprecated use `CreatePromptVersionRole$inboundSchema` instead. */
  export const inboundSchema = CreatePromptVersionRole$inboundSchema;
  /** @deprecated use `CreatePromptVersionRole$outboundSchema` instead. */
  export const outboundSchema = CreatePromptVersionRole$outboundSchema;
}

/** @internal */
export const CreatePromptVersion2PromptsType$inboundSchema: z.ZodNativeEnum<
  typeof CreatePromptVersion2PromptsType
> = z.nativeEnum(CreatePromptVersion2PromptsType);

/** @internal */
export const CreatePromptVersion2PromptsType$outboundSchema: z.ZodNativeEnum<
  typeof CreatePromptVersion2PromptsType
> = CreatePromptVersion2PromptsType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreatePromptVersion2PromptsType$ {
  /** @deprecated use `CreatePromptVersion2PromptsType$inboundSchema` instead. */
  export const inboundSchema = CreatePromptVersion2PromptsType$inboundSchema;
  /** @deprecated use `CreatePromptVersion2PromptsType$outboundSchema` instead. */
  export const outboundSchema = CreatePromptVersion2PromptsType$outboundSchema;
}

/** @internal */
export const CreatePromptVersion2ImageUrl$inboundSchema: z.ZodType<
  CreatePromptVersion2ImageUrl,
  z.ZodTypeDef,
  unknown
> = z.object({
  url: z.string(),
  detail: z.string().optional(),
});

/** @internal */
export type CreatePromptVersion2ImageUrl$Outbound = {
  url: string;
  detail?: string | undefined;
};

/** @internal */
export const CreatePromptVersion2ImageUrl$outboundSchema: z.ZodType<
  CreatePromptVersion2ImageUrl$Outbound,
  z.ZodTypeDef,
  CreatePromptVersion2ImageUrl
> = z.object({
  url: z.string(),
  detail: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreatePromptVersion2ImageUrl$ {
  /** @deprecated use `CreatePromptVersion2ImageUrl$inboundSchema` instead. */
  export const inboundSchema = CreatePromptVersion2ImageUrl$inboundSchema;
  /** @deprecated use `CreatePromptVersion2ImageUrl$outboundSchema` instead. */
  export const outboundSchema = CreatePromptVersion2ImageUrl$outboundSchema;
  /** @deprecated use `CreatePromptVersion2ImageUrl$Outbound` instead. */
  export type Outbound = CreatePromptVersion2ImageUrl$Outbound;
}

export function createPromptVersion2ImageUrlToJSON(
  createPromptVersion2ImageUrl: CreatePromptVersion2ImageUrl,
): string {
  return JSON.stringify(
    CreatePromptVersion2ImageUrl$outboundSchema.parse(
      createPromptVersion2ImageUrl,
    ),
  );
}

export function createPromptVersion2ImageUrlFromJSON(
  jsonString: string,
): SafeParseResult<CreatePromptVersion2ImageUrl, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreatePromptVersion2ImageUrl$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreatePromptVersion2ImageUrl' from JSON`,
  );
}

/** @internal */
export const CreatePromptVersion22$inboundSchema: z.ZodType<
  CreatePromptVersion22,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: CreatePromptVersion2PromptsType$inboundSchema,
  image_url: z.lazy(() => CreatePromptVersion2ImageUrl$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "image_url": "imageUrl",
  });
});

/** @internal */
export type CreatePromptVersion22$Outbound = {
  type: string;
  image_url: CreatePromptVersion2ImageUrl$Outbound;
};

/** @internal */
export const CreatePromptVersion22$outboundSchema: z.ZodType<
  CreatePromptVersion22$Outbound,
  z.ZodTypeDef,
  CreatePromptVersion22
> = z.object({
  type: CreatePromptVersion2PromptsType$outboundSchema,
  imageUrl: z.lazy(() => CreatePromptVersion2ImageUrl$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    imageUrl: "image_url",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreatePromptVersion22$ {
  /** @deprecated use `CreatePromptVersion22$inboundSchema` instead. */
  export const inboundSchema = CreatePromptVersion22$inboundSchema;
  /** @deprecated use `CreatePromptVersion22$outboundSchema` instead. */
  export const outboundSchema = CreatePromptVersion22$outboundSchema;
  /** @deprecated use `CreatePromptVersion22$Outbound` instead. */
  export type Outbound = CreatePromptVersion22$Outbound;
}

export function createPromptVersion22ToJSON(
  createPromptVersion22: CreatePromptVersion22,
): string {
  return JSON.stringify(
    CreatePromptVersion22$outboundSchema.parse(createPromptVersion22),
  );
}

export function createPromptVersion22FromJSON(
  jsonString: string,
): SafeParseResult<CreatePromptVersion22, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreatePromptVersion22$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreatePromptVersion22' from JSON`,
  );
}

/** @internal */
export const CreatePromptVersion2Type$inboundSchema: z.ZodNativeEnum<
  typeof CreatePromptVersion2Type
> = z.nativeEnum(CreatePromptVersion2Type);

/** @internal */
export const CreatePromptVersion2Type$outboundSchema: z.ZodNativeEnum<
  typeof CreatePromptVersion2Type
> = CreatePromptVersion2Type$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreatePromptVersion2Type$ {
  /** @deprecated use `CreatePromptVersion2Type$inboundSchema` instead. */
  export const inboundSchema = CreatePromptVersion2Type$inboundSchema;
  /** @deprecated use `CreatePromptVersion2Type$outboundSchema` instead. */
  export const outboundSchema = CreatePromptVersion2Type$outboundSchema;
}

/** @internal */
export const CreatePromptVersion21$inboundSchema: z.ZodType<
  CreatePromptVersion21,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: CreatePromptVersion2Type$inboundSchema,
  text: z.string(),
});

/** @internal */
export type CreatePromptVersion21$Outbound = {
  type: string;
  text: string;
};

/** @internal */
export const CreatePromptVersion21$outboundSchema: z.ZodType<
  CreatePromptVersion21$Outbound,
  z.ZodTypeDef,
  CreatePromptVersion21
> = z.object({
  type: CreatePromptVersion2Type$outboundSchema,
  text: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreatePromptVersion21$ {
  /** @deprecated use `CreatePromptVersion21$inboundSchema` instead. */
  export const inboundSchema = CreatePromptVersion21$inboundSchema;
  /** @deprecated use `CreatePromptVersion21$outboundSchema` instead. */
  export const outboundSchema = CreatePromptVersion21$outboundSchema;
  /** @deprecated use `CreatePromptVersion21$Outbound` instead. */
  export type Outbound = CreatePromptVersion21$Outbound;
}

export function createPromptVersion21ToJSON(
  createPromptVersion21: CreatePromptVersion21,
): string {
  return JSON.stringify(
    CreatePromptVersion21$outboundSchema.parse(createPromptVersion21),
  );
}

export function createPromptVersion21FromJSON(
  jsonString: string,
): SafeParseResult<CreatePromptVersion21, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreatePromptVersion21$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreatePromptVersion21' from JSON`,
  );
}

/** @internal */
export const CreatePromptVersionContent2$inboundSchema: z.ZodType<
  CreatePromptVersionContent2,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => CreatePromptVersion21$inboundSchema),
  z.lazy(() => CreatePromptVersion22$inboundSchema),
]);

/** @internal */
export type CreatePromptVersionContent2$Outbound =
  | CreatePromptVersion21$Outbound
  | CreatePromptVersion22$Outbound;

/** @internal */
export const CreatePromptVersionContent2$outboundSchema: z.ZodType<
  CreatePromptVersionContent2$Outbound,
  z.ZodTypeDef,
  CreatePromptVersionContent2
> = z.union([
  z.lazy(() => CreatePromptVersion21$outboundSchema),
  z.lazy(() => CreatePromptVersion22$outboundSchema),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreatePromptVersionContent2$ {
  /** @deprecated use `CreatePromptVersionContent2$inboundSchema` instead. */
  export const inboundSchema = CreatePromptVersionContent2$inboundSchema;
  /** @deprecated use `CreatePromptVersionContent2$outboundSchema` instead. */
  export const outboundSchema = CreatePromptVersionContent2$outboundSchema;
  /** @deprecated use `CreatePromptVersionContent2$Outbound` instead. */
  export type Outbound = CreatePromptVersionContent2$Outbound;
}

export function createPromptVersionContent2ToJSON(
  createPromptVersionContent2: CreatePromptVersionContent2,
): string {
  return JSON.stringify(
    CreatePromptVersionContent2$outboundSchema.parse(
      createPromptVersionContent2,
    ),
  );
}

export function createPromptVersionContent2FromJSON(
  jsonString: string,
): SafeParseResult<CreatePromptVersionContent2, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreatePromptVersionContent2$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreatePromptVersionContent2' from JSON`,
  );
}

/** @internal */
export const CreatePromptVersionContent$inboundSchema: z.ZodType<
  CreatePromptVersionContent,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.string(),
  z.array(z.union([
    z.lazy(() => CreatePromptVersion21$inboundSchema),
    z.lazy(() => CreatePromptVersion22$inboundSchema),
  ])),
]);

/** @internal */
export type CreatePromptVersionContent$Outbound =
  | string
  | Array<CreatePromptVersion21$Outbound | CreatePromptVersion22$Outbound>;

/** @internal */
export const CreatePromptVersionContent$outboundSchema: z.ZodType<
  CreatePromptVersionContent$Outbound,
  z.ZodTypeDef,
  CreatePromptVersionContent
> = z.union([
  z.string(),
  z.array(z.union([
    z.lazy(() => CreatePromptVersion21$outboundSchema),
    z.lazy(() => CreatePromptVersion22$outboundSchema),
  ])),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreatePromptVersionContent$ {
  /** @deprecated use `CreatePromptVersionContent$inboundSchema` instead. */
  export const inboundSchema = CreatePromptVersionContent$inboundSchema;
  /** @deprecated use `CreatePromptVersionContent$outboundSchema` instead. */
  export const outboundSchema = CreatePromptVersionContent$outboundSchema;
  /** @deprecated use `CreatePromptVersionContent$Outbound` instead. */
  export type Outbound = CreatePromptVersionContent$Outbound;
}

export function createPromptVersionContentToJSON(
  createPromptVersionContent: CreatePromptVersionContent,
): string {
  return JSON.stringify(
    CreatePromptVersionContent$outboundSchema.parse(createPromptVersionContent),
  );
}

export function createPromptVersionContentFromJSON(
  jsonString: string,
): SafeParseResult<CreatePromptVersionContent, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreatePromptVersionContent$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreatePromptVersionContent' from JSON`,
  );
}

/** @internal */
export const CreatePromptVersionType$inboundSchema: z.ZodNativeEnum<
  typeof CreatePromptVersionType
> = z.nativeEnum(CreatePromptVersionType);

/** @internal */
export const CreatePromptVersionType$outboundSchema: z.ZodNativeEnum<
  typeof CreatePromptVersionType
> = CreatePromptVersionType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreatePromptVersionType$ {
  /** @deprecated use `CreatePromptVersionType$inboundSchema` instead. */
  export const inboundSchema = CreatePromptVersionType$inboundSchema;
  /** @deprecated use `CreatePromptVersionType$outboundSchema` instead. */
  export const outboundSchema = CreatePromptVersionType$outboundSchema;
}

/** @internal */
export const CreatePromptVersionFunction$inboundSchema: z.ZodType<
  CreatePromptVersionFunction,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.string(),
  arguments: z.string(),
});

/** @internal */
export type CreatePromptVersionFunction$Outbound = {
  name: string;
  arguments: string;
};

/** @internal */
export const CreatePromptVersionFunction$outboundSchema: z.ZodType<
  CreatePromptVersionFunction$Outbound,
  z.ZodTypeDef,
  CreatePromptVersionFunction
> = z.object({
  name: z.string(),
  arguments: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreatePromptVersionFunction$ {
  /** @deprecated use `CreatePromptVersionFunction$inboundSchema` instead. */
  export const inboundSchema = CreatePromptVersionFunction$inboundSchema;
  /** @deprecated use `CreatePromptVersionFunction$outboundSchema` instead. */
  export const outboundSchema = CreatePromptVersionFunction$outboundSchema;
  /** @deprecated use `CreatePromptVersionFunction$Outbound` instead. */
  export type Outbound = CreatePromptVersionFunction$Outbound;
}

export function createPromptVersionFunctionToJSON(
  createPromptVersionFunction: CreatePromptVersionFunction,
): string {
  return JSON.stringify(
    CreatePromptVersionFunction$outboundSchema.parse(
      createPromptVersionFunction,
    ),
  );
}

export function createPromptVersionFunctionFromJSON(
  jsonString: string,
): SafeParseResult<CreatePromptVersionFunction, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreatePromptVersionFunction$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreatePromptVersionFunction' from JSON`,
  );
}

/** @internal */
export const CreatePromptVersionToolCalls$inboundSchema: z.ZodType<
  CreatePromptVersionToolCalls,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string().optional(),
  index: z.number().optional(),
  type: CreatePromptVersionType$inboundSchema,
  function: z.lazy(() => CreatePromptVersionFunction$inboundSchema),
});

/** @internal */
export type CreatePromptVersionToolCalls$Outbound = {
  id?: string | undefined;
  index?: number | undefined;
  type: string;
  function: CreatePromptVersionFunction$Outbound;
};

/** @internal */
export const CreatePromptVersionToolCalls$outboundSchema: z.ZodType<
  CreatePromptVersionToolCalls$Outbound,
  z.ZodTypeDef,
  CreatePromptVersionToolCalls
> = z.object({
  id: z.string().optional(),
  index: z.number().optional(),
  type: CreatePromptVersionType$outboundSchema,
  function: z.lazy(() => CreatePromptVersionFunction$outboundSchema),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreatePromptVersionToolCalls$ {
  /** @deprecated use `CreatePromptVersionToolCalls$inboundSchema` instead. */
  export const inboundSchema = CreatePromptVersionToolCalls$inboundSchema;
  /** @deprecated use `CreatePromptVersionToolCalls$outboundSchema` instead. */
  export const outboundSchema = CreatePromptVersionToolCalls$outboundSchema;
  /** @deprecated use `CreatePromptVersionToolCalls$Outbound` instead. */
  export type Outbound = CreatePromptVersionToolCalls$Outbound;
}

export function createPromptVersionToolCallsToJSON(
  createPromptVersionToolCalls: CreatePromptVersionToolCalls,
): string {
  return JSON.stringify(
    CreatePromptVersionToolCalls$outboundSchema.parse(
      createPromptVersionToolCalls,
    ),
  );
}

export function createPromptVersionToolCallsFromJSON(
  jsonString: string,
): SafeParseResult<CreatePromptVersionToolCalls, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreatePromptVersionToolCalls$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreatePromptVersionToolCalls' from JSON`,
  );
}

/** @internal */
export const CreatePromptVersionMessages$inboundSchema: z.ZodType<
  CreatePromptVersionMessages,
  z.ZodTypeDef,
  unknown
> = z.object({
  role: CreatePromptVersionRole$inboundSchema,
  content: z.union([
    z.string(),
    z.array(z.union([
      z.lazy(() => CreatePromptVersion21$inboundSchema),
      z.lazy(() => CreatePromptVersion22$inboundSchema),
    ])),
  ]),
  tool_calls: z.array(z.lazy(() => CreatePromptVersionToolCalls$inboundSchema))
    .optional(),
}).transform((v) => {
  return remap$(v, {
    "tool_calls": "toolCalls",
  });
});

/** @internal */
export type CreatePromptVersionMessages$Outbound = {
  role: string;
  content:
    | string
    | Array<CreatePromptVersion21$Outbound | CreatePromptVersion22$Outbound>;
  tool_calls?: Array<CreatePromptVersionToolCalls$Outbound> | undefined;
};

/** @internal */
export const CreatePromptVersionMessages$outboundSchema: z.ZodType<
  CreatePromptVersionMessages$Outbound,
  z.ZodTypeDef,
  CreatePromptVersionMessages
> = z.object({
  role: CreatePromptVersionRole$outboundSchema,
  content: z.union([
    z.string(),
    z.array(z.union([
      z.lazy(() => CreatePromptVersion21$outboundSchema),
      z.lazy(() => CreatePromptVersion22$outboundSchema),
    ])),
  ]),
  toolCalls: z.array(z.lazy(() => CreatePromptVersionToolCalls$outboundSchema))
    .optional(),
}).transform((v) => {
  return remap$(v, {
    toolCalls: "tool_calls",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreatePromptVersionMessages$ {
  /** @deprecated use `CreatePromptVersionMessages$inboundSchema` instead. */
  export const inboundSchema = CreatePromptVersionMessages$inboundSchema;
  /** @deprecated use `CreatePromptVersionMessages$outboundSchema` instead. */
  export const outboundSchema = CreatePromptVersionMessages$outboundSchema;
  /** @deprecated use `CreatePromptVersionMessages$Outbound` instead. */
  export type Outbound = CreatePromptVersionMessages$Outbound;
}

export function createPromptVersionMessagesToJSON(
  createPromptVersionMessages: CreatePromptVersionMessages,
): string {
  return JSON.stringify(
    CreatePromptVersionMessages$outboundSchema.parse(
      createPromptVersionMessages,
    ),
  );
}

export function createPromptVersionMessagesFromJSON(
  jsonString: string,
): SafeParseResult<CreatePromptVersionMessages, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreatePromptVersionMessages$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreatePromptVersionMessages' from JSON`,
  );
}

/** @internal */
export const CreatePromptVersionPromptConfig$inboundSchema: z.ZodType<
  CreatePromptVersionPromptConfig,
  z.ZodTypeDef,
  unknown
> = z.object({
  stream: z.boolean().optional(),
  model: z.string().optional(),
  model_type: CreatePromptVersionModelType$inboundSchema.optional(),
  model_parameters: z.lazy(() =>
    CreatePromptVersionModelParameters$inboundSchema
  ).optional(),
  provider: CreatePromptVersionProvider$inboundSchema.optional(),
  version: z.string().optional(),
  messages: z.array(z.lazy(() => CreatePromptVersionMessages$inboundSchema)),
}).transform((v) => {
  return remap$(v, {
    "model_type": "modelType",
    "model_parameters": "modelParameters",
  });
});

/** @internal */
export type CreatePromptVersionPromptConfig$Outbound = {
  stream?: boolean | undefined;
  model?: string | undefined;
  model_type?: string | undefined;
  model_parameters?: CreatePromptVersionModelParameters$Outbound | undefined;
  provider?: string | undefined;
  version?: string | undefined;
  messages: Array<CreatePromptVersionMessages$Outbound>;
};

/** @internal */
export const CreatePromptVersionPromptConfig$outboundSchema: z.ZodType<
  CreatePromptVersionPromptConfig$Outbound,
  z.ZodTypeDef,
  CreatePromptVersionPromptConfig
> = z.object({
  stream: z.boolean().optional(),
  model: z.string().optional(),
  modelType: CreatePromptVersionModelType$outboundSchema.optional(),
  modelParameters: z.lazy(() =>
    CreatePromptVersionModelParameters$outboundSchema
  ).optional(),
  provider: CreatePromptVersionProvider$outboundSchema.optional(),
  version: z.string().optional(),
  messages: z.array(z.lazy(() => CreatePromptVersionMessages$outboundSchema)),
}).transform((v) => {
  return remap$(v, {
    modelType: "model_type",
    modelParameters: "model_parameters",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreatePromptVersionPromptConfig$ {
  /** @deprecated use `CreatePromptVersionPromptConfig$inboundSchema` instead. */
  export const inboundSchema = CreatePromptVersionPromptConfig$inboundSchema;
  /** @deprecated use `CreatePromptVersionPromptConfig$outboundSchema` instead. */
  export const outboundSchema = CreatePromptVersionPromptConfig$outboundSchema;
  /** @deprecated use `CreatePromptVersionPromptConfig$Outbound` instead. */
  export type Outbound = CreatePromptVersionPromptConfig$Outbound;
}

export function createPromptVersionPromptConfigToJSON(
  createPromptVersionPromptConfig: CreatePromptVersionPromptConfig,
): string {
  return JSON.stringify(
    CreatePromptVersionPromptConfig$outboundSchema.parse(
      createPromptVersionPromptConfig,
    ),
  );
}

export function createPromptVersionPromptConfigFromJSON(
  jsonString: string,
): SafeParseResult<CreatePromptVersionPromptConfig, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreatePromptVersionPromptConfig$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreatePromptVersionPromptConfig' from JSON`,
  );
}

/** @internal */
export const CreatePromptVersionMetadata$inboundSchema: z.ZodType<
  CreatePromptVersionMetadata,
  z.ZodTypeDef,
  unknown
> = z.object({
  use_cases: z.array(z.string()).optional(),
  language: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "use_cases": "useCases",
  });
});

/** @internal */
export type CreatePromptVersionMetadata$Outbound = {
  use_cases?: Array<string> | undefined;
  language?: string | undefined;
};

/** @internal */
export const CreatePromptVersionMetadata$outboundSchema: z.ZodType<
  CreatePromptVersionMetadata$Outbound,
  z.ZodTypeDef,
  CreatePromptVersionMetadata
> = z.object({
  useCases: z.array(z.string()).optional(),
  language: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    useCases: "use_cases",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreatePromptVersionMetadata$ {
  /** @deprecated use `CreatePromptVersionMetadata$inboundSchema` instead. */
  export const inboundSchema = CreatePromptVersionMetadata$inboundSchema;
  /** @deprecated use `CreatePromptVersionMetadata$outboundSchema` instead. */
  export const outboundSchema = CreatePromptVersionMetadata$outboundSchema;
  /** @deprecated use `CreatePromptVersionMetadata$Outbound` instead. */
  export type Outbound = CreatePromptVersionMetadata$Outbound;
}

export function createPromptVersionMetadataToJSON(
  createPromptVersionMetadata: CreatePromptVersionMetadata,
): string {
  return JSON.stringify(
    CreatePromptVersionMetadata$outboundSchema.parse(
      createPromptVersionMetadata,
    ),
  );
}

export function createPromptVersionMetadataFromJSON(
  jsonString: string,
): SafeParseResult<CreatePromptVersionMetadata, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreatePromptVersionMetadata$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreatePromptVersionMetadata' from JSON`,
  );
}

/** @internal */
export const CreatePromptVersionRequestBody$inboundSchema: z.ZodType<
  CreatePromptVersionRequestBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  display_name: z.string(),
  description: z.nullable(z.string()).optional(),
  prompt_config: z.lazy(() => CreatePromptVersionPromptConfig$inboundSchema),
  metadata: z.lazy(() => CreatePromptVersionMetadata$inboundSchema),
  commit: z.string(),
  timestamp: z.string(),
}).transform((v) => {
  return remap$(v, {
    "display_name": "displayName",
    "prompt_config": "promptConfig",
  });
});

/** @internal */
export type CreatePromptVersionRequestBody$Outbound = {
  display_name: string;
  description?: string | null | undefined;
  prompt_config: CreatePromptVersionPromptConfig$Outbound;
  metadata: CreatePromptVersionMetadata$Outbound;
  commit: string;
  timestamp: string;
};

/** @internal */
export const CreatePromptVersionRequestBody$outboundSchema: z.ZodType<
  CreatePromptVersionRequestBody$Outbound,
  z.ZodTypeDef,
  CreatePromptVersionRequestBody
> = z.object({
  displayName: z.string(),
  description: z.nullable(z.string()).optional(),
  promptConfig: z.lazy(() => CreatePromptVersionPromptConfig$outboundSchema),
  metadata: z.lazy(() => CreatePromptVersionMetadata$outboundSchema),
  commit: z.string(),
  timestamp: z.string(),
}).transform((v) => {
  return remap$(v, {
    displayName: "display_name",
    promptConfig: "prompt_config",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreatePromptVersionRequestBody$ {
  /** @deprecated use `CreatePromptVersionRequestBody$inboundSchema` instead. */
  export const inboundSchema = CreatePromptVersionRequestBody$inboundSchema;
  /** @deprecated use `CreatePromptVersionRequestBody$outboundSchema` instead. */
  export const outboundSchema = CreatePromptVersionRequestBody$outboundSchema;
  /** @deprecated use `CreatePromptVersionRequestBody$Outbound` instead. */
  export type Outbound = CreatePromptVersionRequestBody$Outbound;
}

export function createPromptVersionRequestBodyToJSON(
  createPromptVersionRequestBody: CreatePromptVersionRequestBody,
): string {
  return JSON.stringify(
    CreatePromptVersionRequestBody$outboundSchema.parse(
      createPromptVersionRequestBody,
    ),
  );
}

export function createPromptVersionRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<CreatePromptVersionRequestBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreatePromptVersionRequestBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreatePromptVersionRequestBody' from JSON`,
  );
}

/** @internal */
export const CreatePromptVersionRequest$inboundSchema: z.ZodType<
  CreatePromptVersionRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  RequestBody: z.lazy(() => CreatePromptVersionRequestBody$inboundSchema)
    .optional(),
}).transform((v) => {
  return remap$(v, {
    "RequestBody": "requestBody",
  });
});

/** @internal */
export type CreatePromptVersionRequest$Outbound = {
  id: string;
  RequestBody?: CreatePromptVersionRequestBody$Outbound | undefined;
};

/** @internal */
export const CreatePromptVersionRequest$outboundSchema: z.ZodType<
  CreatePromptVersionRequest$Outbound,
  z.ZodTypeDef,
  CreatePromptVersionRequest
> = z.object({
  id: z.string(),
  requestBody: z.lazy(() => CreatePromptVersionRequestBody$outboundSchema)
    .optional(),
}).transform((v) => {
  return remap$(v, {
    requestBody: "RequestBody",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreatePromptVersionRequest$ {
  /** @deprecated use `CreatePromptVersionRequest$inboundSchema` instead. */
  export const inboundSchema = CreatePromptVersionRequest$inboundSchema;
  /** @deprecated use `CreatePromptVersionRequest$outboundSchema` instead. */
  export const outboundSchema = CreatePromptVersionRequest$outboundSchema;
  /** @deprecated use `CreatePromptVersionRequest$Outbound` instead. */
  export type Outbound = CreatePromptVersionRequest$Outbound;
}

export function createPromptVersionRequestToJSON(
  createPromptVersionRequest: CreatePromptVersionRequest,
): string {
  return JSON.stringify(
    CreatePromptVersionRequest$outboundSchema.parse(createPromptVersionRequest),
  );
}

export function createPromptVersionRequestFromJSON(
  jsonString: string,
): SafeParseResult<CreatePromptVersionRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreatePromptVersionRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreatePromptVersionRequest' from JSON`,
  );
}

/** @internal */
export const CreatePromptVersionPromptsModelType$inboundSchema: z.ZodNativeEnum<
  typeof CreatePromptVersionPromptsModelType
> = z.nativeEnum(CreatePromptVersionPromptsModelType);

/** @internal */
export const CreatePromptVersionPromptsModelType$outboundSchema:
  z.ZodNativeEnum<typeof CreatePromptVersionPromptsModelType> =
    CreatePromptVersionPromptsModelType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreatePromptVersionPromptsModelType$ {
  /** @deprecated use `CreatePromptVersionPromptsModelType$inboundSchema` instead. */
  export const inboundSchema =
    CreatePromptVersionPromptsModelType$inboundSchema;
  /** @deprecated use `CreatePromptVersionPromptsModelType$outboundSchema` instead. */
  export const outboundSchema =
    CreatePromptVersionPromptsModelType$outboundSchema;
}

/** @internal */
export const CreatePromptVersionPromptsFormat$inboundSchema: z.ZodNativeEnum<
  typeof CreatePromptVersionPromptsFormat
> = z.nativeEnum(CreatePromptVersionPromptsFormat);

/** @internal */
export const CreatePromptVersionPromptsFormat$outboundSchema: z.ZodNativeEnum<
  typeof CreatePromptVersionPromptsFormat
> = CreatePromptVersionPromptsFormat$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreatePromptVersionPromptsFormat$ {
  /** @deprecated use `CreatePromptVersionPromptsFormat$inboundSchema` instead. */
  export const inboundSchema = CreatePromptVersionPromptsFormat$inboundSchema;
  /** @deprecated use `CreatePromptVersionPromptsFormat$outboundSchema` instead. */
  export const outboundSchema = CreatePromptVersionPromptsFormat$outboundSchema;
}

/** @internal */
export const CreatePromptVersionPromptsQuality$inboundSchema: z.ZodNativeEnum<
  typeof CreatePromptVersionPromptsQuality
> = z.nativeEnum(CreatePromptVersionPromptsQuality);

/** @internal */
export const CreatePromptVersionPromptsQuality$outboundSchema: z.ZodNativeEnum<
  typeof CreatePromptVersionPromptsQuality
> = CreatePromptVersionPromptsQuality$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreatePromptVersionPromptsQuality$ {
  /** @deprecated use `CreatePromptVersionPromptsQuality$inboundSchema` instead. */
  export const inboundSchema = CreatePromptVersionPromptsQuality$inboundSchema;
  /** @deprecated use `CreatePromptVersionPromptsQuality$outboundSchema` instead. */
  export const outboundSchema =
    CreatePromptVersionPromptsQuality$outboundSchema;
}

/** @internal */
export const CreatePromptVersionResponseFormatPromptsResponse200Type$inboundSchema:
  z.ZodNativeEnum<
    typeof CreatePromptVersionResponseFormatPromptsResponse200Type
  > = z.nativeEnum(CreatePromptVersionResponseFormatPromptsResponse200Type);

/** @internal */
export const CreatePromptVersionResponseFormatPromptsResponse200Type$outboundSchema:
  z.ZodNativeEnum<
    typeof CreatePromptVersionResponseFormatPromptsResponse200Type
  > = CreatePromptVersionResponseFormatPromptsResponse200Type$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreatePromptVersionResponseFormatPromptsResponse200Type$ {
  /** @deprecated use `CreatePromptVersionResponseFormatPromptsResponse200Type$inboundSchema` instead. */
  export const inboundSchema =
    CreatePromptVersionResponseFormatPromptsResponse200Type$inboundSchema;
  /** @deprecated use `CreatePromptVersionResponseFormatPromptsResponse200Type$outboundSchema` instead. */
  export const outboundSchema =
    CreatePromptVersionResponseFormatPromptsResponse200Type$outboundSchema;
}

/** @internal */
export const CreatePromptVersionResponseFormatPrompts2$inboundSchema: z.ZodType<
  CreatePromptVersionResponseFormatPrompts2,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: CreatePromptVersionResponseFormatPromptsResponse200Type$inboundSchema,
});

/** @internal */
export type CreatePromptVersionResponseFormatPrompts2$Outbound = {
  type: string;
};

/** @internal */
export const CreatePromptVersionResponseFormatPrompts2$outboundSchema:
  z.ZodType<
    CreatePromptVersionResponseFormatPrompts2$Outbound,
    z.ZodTypeDef,
    CreatePromptVersionResponseFormatPrompts2
  > = z.object({
    type:
      CreatePromptVersionResponseFormatPromptsResponse200Type$outboundSchema,
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreatePromptVersionResponseFormatPrompts2$ {
  /** @deprecated use `CreatePromptVersionResponseFormatPrompts2$inboundSchema` instead. */
  export const inboundSchema =
    CreatePromptVersionResponseFormatPrompts2$inboundSchema;
  /** @deprecated use `CreatePromptVersionResponseFormatPrompts2$outboundSchema` instead. */
  export const outboundSchema =
    CreatePromptVersionResponseFormatPrompts2$outboundSchema;
  /** @deprecated use `CreatePromptVersionResponseFormatPrompts2$Outbound` instead. */
  export type Outbound = CreatePromptVersionResponseFormatPrompts2$Outbound;
}

export function createPromptVersionResponseFormatPrompts2ToJSON(
  createPromptVersionResponseFormatPrompts2:
    CreatePromptVersionResponseFormatPrompts2,
): string {
  return JSON.stringify(
    CreatePromptVersionResponseFormatPrompts2$outboundSchema.parse(
      createPromptVersionResponseFormatPrompts2,
    ),
  );
}

export function createPromptVersionResponseFormatPrompts2FromJSON(
  jsonString: string,
): SafeParseResult<
  CreatePromptVersionResponseFormatPrompts2,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      CreatePromptVersionResponseFormatPrompts2$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'CreatePromptVersionResponseFormatPrompts2' from JSON`,
  );
}

/** @internal */
export const CreatePromptVersionResponseFormatPromptsResponseType$inboundSchema:
  z.ZodNativeEnum<typeof CreatePromptVersionResponseFormatPromptsResponseType> =
    z.nativeEnum(CreatePromptVersionResponseFormatPromptsResponseType);

/** @internal */
export const CreatePromptVersionResponseFormatPromptsResponseType$outboundSchema:
  z.ZodNativeEnum<typeof CreatePromptVersionResponseFormatPromptsResponseType> =
    CreatePromptVersionResponseFormatPromptsResponseType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreatePromptVersionResponseFormatPromptsResponseType$ {
  /** @deprecated use `CreatePromptVersionResponseFormatPromptsResponseType$inboundSchema` instead. */
  export const inboundSchema =
    CreatePromptVersionResponseFormatPromptsResponseType$inboundSchema;
  /** @deprecated use `CreatePromptVersionResponseFormatPromptsResponseType$outboundSchema` instead. */
  export const outboundSchema =
    CreatePromptVersionResponseFormatPromptsResponseType$outboundSchema;
}

/** @internal */
export const CreatePromptVersionResponseFormatJsonSchema$inboundSchema:
  z.ZodType<
    CreatePromptVersionResponseFormatJsonSchema,
    z.ZodTypeDef,
    unknown
  > = z.object({
    name: z.string(),
    strict: z.boolean(),
    schema: z.record(z.any()),
  });

/** @internal */
export type CreatePromptVersionResponseFormatJsonSchema$Outbound = {
  name: string;
  strict: boolean;
  schema: { [k: string]: any };
};

/** @internal */
export const CreatePromptVersionResponseFormatJsonSchema$outboundSchema:
  z.ZodType<
    CreatePromptVersionResponseFormatJsonSchema$Outbound,
    z.ZodTypeDef,
    CreatePromptVersionResponseFormatJsonSchema
  > = z.object({
    name: z.string(),
    strict: z.boolean(),
    schema: z.record(z.any()),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreatePromptVersionResponseFormatJsonSchema$ {
  /** @deprecated use `CreatePromptVersionResponseFormatJsonSchema$inboundSchema` instead. */
  export const inboundSchema =
    CreatePromptVersionResponseFormatJsonSchema$inboundSchema;
  /** @deprecated use `CreatePromptVersionResponseFormatJsonSchema$outboundSchema` instead. */
  export const outboundSchema =
    CreatePromptVersionResponseFormatJsonSchema$outboundSchema;
  /** @deprecated use `CreatePromptVersionResponseFormatJsonSchema$Outbound` instead. */
  export type Outbound = CreatePromptVersionResponseFormatJsonSchema$Outbound;
}

export function createPromptVersionResponseFormatJsonSchemaToJSON(
  createPromptVersionResponseFormatJsonSchema:
    CreatePromptVersionResponseFormatJsonSchema,
): string {
  return JSON.stringify(
    CreatePromptVersionResponseFormatJsonSchema$outboundSchema.parse(
      createPromptVersionResponseFormatJsonSchema,
    ),
  );
}

export function createPromptVersionResponseFormatJsonSchemaFromJSON(
  jsonString: string,
): SafeParseResult<
  CreatePromptVersionResponseFormatJsonSchema,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      CreatePromptVersionResponseFormatJsonSchema$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'CreatePromptVersionResponseFormatJsonSchema' from JSON`,
  );
}

/** @internal */
export const CreatePromptVersionResponseFormatPrompts1$inboundSchema: z.ZodType<
  CreatePromptVersionResponseFormatPrompts1,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: CreatePromptVersionResponseFormatPromptsResponseType$inboundSchema,
  json_schema: z.lazy(() =>
    CreatePromptVersionResponseFormatJsonSchema$inboundSchema
  ),
}).transform((v) => {
  return remap$(v, {
    "json_schema": "jsonSchema",
  });
});

/** @internal */
export type CreatePromptVersionResponseFormatPrompts1$Outbound = {
  type: string;
  json_schema: CreatePromptVersionResponseFormatJsonSchema$Outbound;
};

/** @internal */
export const CreatePromptVersionResponseFormatPrompts1$outboundSchema:
  z.ZodType<
    CreatePromptVersionResponseFormatPrompts1$Outbound,
    z.ZodTypeDef,
    CreatePromptVersionResponseFormatPrompts1
  > = z.object({
    type: CreatePromptVersionResponseFormatPromptsResponseType$outboundSchema,
    jsonSchema: z.lazy(() =>
      CreatePromptVersionResponseFormatJsonSchema$outboundSchema
    ),
  }).transform((v) => {
    return remap$(v, {
      jsonSchema: "json_schema",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreatePromptVersionResponseFormatPrompts1$ {
  /** @deprecated use `CreatePromptVersionResponseFormatPrompts1$inboundSchema` instead. */
  export const inboundSchema =
    CreatePromptVersionResponseFormatPrompts1$inboundSchema;
  /** @deprecated use `CreatePromptVersionResponseFormatPrompts1$outboundSchema` instead. */
  export const outboundSchema =
    CreatePromptVersionResponseFormatPrompts1$outboundSchema;
  /** @deprecated use `CreatePromptVersionResponseFormatPrompts1$Outbound` instead. */
  export type Outbound = CreatePromptVersionResponseFormatPrompts1$Outbound;
}

export function createPromptVersionResponseFormatPrompts1ToJSON(
  createPromptVersionResponseFormatPrompts1:
    CreatePromptVersionResponseFormatPrompts1,
): string {
  return JSON.stringify(
    CreatePromptVersionResponseFormatPrompts1$outboundSchema.parse(
      createPromptVersionResponseFormatPrompts1,
    ),
  );
}

export function createPromptVersionResponseFormatPrompts1FromJSON(
  jsonString: string,
): SafeParseResult<
  CreatePromptVersionResponseFormatPrompts1,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      CreatePromptVersionResponseFormatPrompts1$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'CreatePromptVersionResponseFormatPrompts1' from JSON`,
  );
}

/** @internal */
export const CreatePromptVersionPromptsResponseFormat$inboundSchema: z.ZodType<
  CreatePromptVersionPromptsResponseFormat,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => CreatePromptVersionResponseFormatPrompts2$inboundSchema),
  z.lazy(() => CreatePromptVersionResponseFormatPrompts1$inboundSchema),
]);

/** @internal */
export type CreatePromptVersionPromptsResponseFormat$Outbound =
  | CreatePromptVersionResponseFormatPrompts2$Outbound
  | CreatePromptVersionResponseFormatPrompts1$Outbound;

/** @internal */
export const CreatePromptVersionPromptsResponseFormat$outboundSchema: z.ZodType<
  CreatePromptVersionPromptsResponseFormat$Outbound,
  z.ZodTypeDef,
  CreatePromptVersionPromptsResponseFormat
> = z.union([
  z.lazy(() => CreatePromptVersionResponseFormatPrompts2$outboundSchema),
  z.lazy(() => CreatePromptVersionResponseFormatPrompts1$outboundSchema),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreatePromptVersionPromptsResponseFormat$ {
  /** @deprecated use `CreatePromptVersionPromptsResponseFormat$inboundSchema` instead. */
  export const inboundSchema =
    CreatePromptVersionPromptsResponseFormat$inboundSchema;
  /** @deprecated use `CreatePromptVersionPromptsResponseFormat$outboundSchema` instead. */
  export const outboundSchema =
    CreatePromptVersionPromptsResponseFormat$outboundSchema;
  /** @deprecated use `CreatePromptVersionPromptsResponseFormat$Outbound` instead. */
  export type Outbound = CreatePromptVersionPromptsResponseFormat$Outbound;
}

export function createPromptVersionPromptsResponseFormatToJSON(
  createPromptVersionPromptsResponseFormat:
    CreatePromptVersionPromptsResponseFormat,
): string {
  return JSON.stringify(
    CreatePromptVersionPromptsResponseFormat$outboundSchema.parse(
      createPromptVersionPromptsResponseFormat,
    ),
  );
}

export function createPromptVersionPromptsResponseFormatFromJSON(
  jsonString: string,
): SafeParseResult<
  CreatePromptVersionPromptsResponseFormat,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      CreatePromptVersionPromptsResponseFormat$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'CreatePromptVersionPromptsResponseFormat' from JSON`,
  );
}

/** @internal */
export const CreatePromptVersionPromptsPhotoRealVersion$inboundSchema:
  z.ZodNativeEnum<typeof CreatePromptVersionPromptsPhotoRealVersion> = z
    .nativeEnum(CreatePromptVersionPromptsPhotoRealVersion);

/** @internal */
export const CreatePromptVersionPromptsPhotoRealVersion$outboundSchema:
  z.ZodNativeEnum<typeof CreatePromptVersionPromptsPhotoRealVersion> =
    CreatePromptVersionPromptsPhotoRealVersion$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreatePromptVersionPromptsPhotoRealVersion$ {
  /** @deprecated use `CreatePromptVersionPromptsPhotoRealVersion$inboundSchema` instead. */
  export const inboundSchema =
    CreatePromptVersionPromptsPhotoRealVersion$inboundSchema;
  /** @deprecated use `CreatePromptVersionPromptsPhotoRealVersion$outboundSchema` instead. */
  export const outboundSchema =
    CreatePromptVersionPromptsPhotoRealVersion$outboundSchema;
}

/** @internal */
export const CreatePromptVersionPromptsEncodingFormat$inboundSchema:
  z.ZodNativeEnum<typeof CreatePromptVersionPromptsEncodingFormat> = z
    .nativeEnum(CreatePromptVersionPromptsEncodingFormat);

/** @internal */
export const CreatePromptVersionPromptsEncodingFormat$outboundSchema:
  z.ZodNativeEnum<typeof CreatePromptVersionPromptsEncodingFormat> =
    CreatePromptVersionPromptsEncodingFormat$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreatePromptVersionPromptsEncodingFormat$ {
  /** @deprecated use `CreatePromptVersionPromptsEncodingFormat$inboundSchema` instead. */
  export const inboundSchema =
    CreatePromptVersionPromptsEncodingFormat$inboundSchema;
  /** @deprecated use `CreatePromptVersionPromptsEncodingFormat$outboundSchema` instead. */
  export const outboundSchema =
    CreatePromptVersionPromptsEncodingFormat$outboundSchema;
}

/** @internal */
export const CreatePromptVersionPromptsModelParameters$inboundSchema: z.ZodType<
  CreatePromptVersionPromptsModelParameters,
  z.ZodTypeDef,
  unknown
> = z.object({
  temperature: z.number().optional(),
  maxTokens: z.number().optional(),
  topK: z.number().optional(),
  topP: z.number().optional(),
  frequencyPenalty: z.number().optional(),
  presencePenalty: z.number().optional(),
  numImages: z.number().optional(),
  seed: z.number().optional(),
  format: CreatePromptVersionPromptsFormat$inboundSchema.optional(),
  dimensions: z.string().optional(),
  quality: CreatePromptVersionPromptsQuality$inboundSchema.optional(),
  style: z.string().optional(),
  responseFormat: z.nullable(
    z.union([
      z.lazy(() => CreatePromptVersionResponseFormatPrompts2$inboundSchema),
      z.lazy(() => CreatePromptVersionResponseFormatPrompts1$inboundSchema),
    ]),
  ).optional(),
  photoRealVersion: CreatePromptVersionPromptsPhotoRealVersion$inboundSchema
    .optional(),
  encoding_format: CreatePromptVersionPromptsEncodingFormat$inboundSchema
    .optional(),
}).transform((v) => {
  return remap$(v, {
    "encoding_format": "encodingFormat",
  });
});

/** @internal */
export type CreatePromptVersionPromptsModelParameters$Outbound = {
  temperature?: number | undefined;
  maxTokens?: number | undefined;
  topK?: number | undefined;
  topP?: number | undefined;
  frequencyPenalty?: number | undefined;
  presencePenalty?: number | undefined;
  numImages?: number | undefined;
  seed?: number | undefined;
  format?: string | undefined;
  dimensions?: string | undefined;
  quality?: string | undefined;
  style?: string | undefined;
  responseFormat?:
    | CreatePromptVersionResponseFormatPrompts2$Outbound
    | CreatePromptVersionResponseFormatPrompts1$Outbound
    | null
    | undefined;
  photoRealVersion?: string | undefined;
  encoding_format?: string | undefined;
};

/** @internal */
export const CreatePromptVersionPromptsModelParameters$outboundSchema:
  z.ZodType<
    CreatePromptVersionPromptsModelParameters$Outbound,
    z.ZodTypeDef,
    CreatePromptVersionPromptsModelParameters
  > = z.object({
    temperature: z.number().optional(),
    maxTokens: z.number().optional(),
    topK: z.number().optional(),
    topP: z.number().optional(),
    frequencyPenalty: z.number().optional(),
    presencePenalty: z.number().optional(),
    numImages: z.number().optional(),
    seed: z.number().optional(),
    format: CreatePromptVersionPromptsFormat$outboundSchema.optional(),
    dimensions: z.string().optional(),
    quality: CreatePromptVersionPromptsQuality$outboundSchema.optional(),
    style: z.string().optional(),
    responseFormat: z.nullable(
      z.union([
        z.lazy(() => CreatePromptVersionResponseFormatPrompts2$outboundSchema),
        z.lazy(() => CreatePromptVersionResponseFormatPrompts1$outboundSchema),
      ]),
    ).optional(),
    photoRealVersion: CreatePromptVersionPromptsPhotoRealVersion$outboundSchema
      .optional(),
    encodingFormat: CreatePromptVersionPromptsEncodingFormat$outboundSchema
      .optional(),
  }).transform((v) => {
    return remap$(v, {
      encodingFormat: "encoding_format",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreatePromptVersionPromptsModelParameters$ {
  /** @deprecated use `CreatePromptVersionPromptsModelParameters$inboundSchema` instead. */
  export const inboundSchema =
    CreatePromptVersionPromptsModelParameters$inboundSchema;
  /** @deprecated use `CreatePromptVersionPromptsModelParameters$outboundSchema` instead. */
  export const outboundSchema =
    CreatePromptVersionPromptsModelParameters$outboundSchema;
  /** @deprecated use `CreatePromptVersionPromptsModelParameters$Outbound` instead. */
  export type Outbound = CreatePromptVersionPromptsModelParameters$Outbound;
}

export function createPromptVersionPromptsModelParametersToJSON(
  createPromptVersionPromptsModelParameters:
    CreatePromptVersionPromptsModelParameters,
): string {
  return JSON.stringify(
    CreatePromptVersionPromptsModelParameters$outboundSchema.parse(
      createPromptVersionPromptsModelParameters,
    ),
  );
}

export function createPromptVersionPromptsModelParametersFromJSON(
  jsonString: string,
): SafeParseResult<
  CreatePromptVersionPromptsModelParameters,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      CreatePromptVersionPromptsModelParameters$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'CreatePromptVersionPromptsModelParameters' from JSON`,
  );
}

/** @internal */
export const CreatePromptVersionPromptsProvider$inboundSchema: z.ZodNativeEnum<
  typeof CreatePromptVersionPromptsProvider
> = z.nativeEnum(CreatePromptVersionPromptsProvider);

/** @internal */
export const CreatePromptVersionPromptsProvider$outboundSchema: z.ZodNativeEnum<
  typeof CreatePromptVersionPromptsProvider
> = CreatePromptVersionPromptsProvider$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreatePromptVersionPromptsProvider$ {
  /** @deprecated use `CreatePromptVersionPromptsProvider$inboundSchema` instead. */
  export const inboundSchema = CreatePromptVersionPromptsProvider$inboundSchema;
  /** @deprecated use `CreatePromptVersionPromptsProvider$outboundSchema` instead. */
  export const outboundSchema =
    CreatePromptVersionPromptsProvider$outboundSchema;
}

/** @internal */
export const CreatePromptVersionPromptsRole$inboundSchema: z.ZodNativeEnum<
  typeof CreatePromptVersionPromptsRole
> = z.nativeEnum(CreatePromptVersionPromptsRole);

/** @internal */
export const CreatePromptVersionPromptsRole$outboundSchema: z.ZodNativeEnum<
  typeof CreatePromptVersionPromptsRole
> = CreatePromptVersionPromptsRole$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreatePromptVersionPromptsRole$ {
  /** @deprecated use `CreatePromptVersionPromptsRole$inboundSchema` instead. */
  export const inboundSchema = CreatePromptVersionPromptsRole$inboundSchema;
  /** @deprecated use `CreatePromptVersionPromptsRole$outboundSchema` instead. */
  export const outboundSchema = CreatePromptVersionPromptsRole$outboundSchema;
}

/** @internal */
export const CreatePromptVersion2PromptsResponse200Type$inboundSchema:
  z.ZodNativeEnum<typeof CreatePromptVersion2PromptsResponse200Type> = z
    .nativeEnum(CreatePromptVersion2PromptsResponse200Type);

/** @internal */
export const CreatePromptVersion2PromptsResponse200Type$outboundSchema:
  z.ZodNativeEnum<typeof CreatePromptVersion2PromptsResponse200Type> =
    CreatePromptVersion2PromptsResponse200Type$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreatePromptVersion2PromptsResponse200Type$ {
  /** @deprecated use `CreatePromptVersion2PromptsResponse200Type$inboundSchema` instead. */
  export const inboundSchema =
    CreatePromptVersion2PromptsResponse200Type$inboundSchema;
  /** @deprecated use `CreatePromptVersion2PromptsResponse200Type$outboundSchema` instead. */
  export const outboundSchema =
    CreatePromptVersion2PromptsResponse200Type$outboundSchema;
}

/** @internal */
export const CreatePromptVersion2PromptsImageUrl$inboundSchema: z.ZodType<
  CreatePromptVersion2PromptsImageUrl,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string().optional(),
  url: z.string(),
  detail: z.string().optional(),
});

/** @internal */
export type CreatePromptVersion2PromptsImageUrl$Outbound = {
  id?: string | undefined;
  url: string;
  detail?: string | undefined;
};

/** @internal */
export const CreatePromptVersion2PromptsImageUrl$outboundSchema: z.ZodType<
  CreatePromptVersion2PromptsImageUrl$Outbound,
  z.ZodTypeDef,
  CreatePromptVersion2PromptsImageUrl
> = z.object({
  id: z.string().optional(),
  url: z.string(),
  detail: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreatePromptVersion2PromptsImageUrl$ {
  /** @deprecated use `CreatePromptVersion2PromptsImageUrl$inboundSchema` instead. */
  export const inboundSchema =
    CreatePromptVersion2PromptsImageUrl$inboundSchema;
  /** @deprecated use `CreatePromptVersion2PromptsImageUrl$outboundSchema` instead. */
  export const outboundSchema =
    CreatePromptVersion2PromptsImageUrl$outboundSchema;
  /** @deprecated use `CreatePromptVersion2PromptsImageUrl$Outbound` instead. */
  export type Outbound = CreatePromptVersion2PromptsImageUrl$Outbound;
}

export function createPromptVersion2PromptsImageUrlToJSON(
  createPromptVersion2PromptsImageUrl: CreatePromptVersion2PromptsImageUrl,
): string {
  return JSON.stringify(
    CreatePromptVersion2PromptsImageUrl$outboundSchema.parse(
      createPromptVersion2PromptsImageUrl,
    ),
  );
}

export function createPromptVersion2PromptsImageUrlFromJSON(
  jsonString: string,
): SafeParseResult<CreatePromptVersion2PromptsImageUrl, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      CreatePromptVersion2PromptsImageUrl$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreatePromptVersion2PromptsImageUrl' from JSON`,
  );
}

/** @internal */
export const CreatePromptVersion2Prompts2$inboundSchema: z.ZodType<
  CreatePromptVersion2Prompts2,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: CreatePromptVersion2PromptsResponse200Type$inboundSchema,
  image_url: z.lazy(() => CreatePromptVersion2PromptsImageUrl$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "image_url": "imageUrl",
  });
});

/** @internal */
export type CreatePromptVersion2Prompts2$Outbound = {
  type: string;
  image_url: CreatePromptVersion2PromptsImageUrl$Outbound;
};

/** @internal */
export const CreatePromptVersion2Prompts2$outboundSchema: z.ZodType<
  CreatePromptVersion2Prompts2$Outbound,
  z.ZodTypeDef,
  CreatePromptVersion2Prompts2
> = z.object({
  type: CreatePromptVersion2PromptsResponse200Type$outboundSchema,
  imageUrl: z.lazy(() => CreatePromptVersion2PromptsImageUrl$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    imageUrl: "image_url",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreatePromptVersion2Prompts2$ {
  /** @deprecated use `CreatePromptVersion2Prompts2$inboundSchema` instead. */
  export const inboundSchema = CreatePromptVersion2Prompts2$inboundSchema;
  /** @deprecated use `CreatePromptVersion2Prompts2$outboundSchema` instead. */
  export const outboundSchema = CreatePromptVersion2Prompts2$outboundSchema;
  /** @deprecated use `CreatePromptVersion2Prompts2$Outbound` instead. */
  export type Outbound = CreatePromptVersion2Prompts2$Outbound;
}

export function createPromptVersion2Prompts2ToJSON(
  createPromptVersion2Prompts2: CreatePromptVersion2Prompts2,
): string {
  return JSON.stringify(
    CreatePromptVersion2Prompts2$outboundSchema.parse(
      createPromptVersion2Prompts2,
    ),
  );
}

export function createPromptVersion2Prompts2FromJSON(
  jsonString: string,
): SafeParseResult<CreatePromptVersion2Prompts2, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreatePromptVersion2Prompts2$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreatePromptVersion2Prompts2' from JSON`,
  );
}

/** @internal */
export const CreatePromptVersion2PromptsResponseType$inboundSchema:
  z.ZodNativeEnum<typeof CreatePromptVersion2PromptsResponseType> = z
    .nativeEnum(CreatePromptVersion2PromptsResponseType);

/** @internal */
export const CreatePromptVersion2PromptsResponseType$outboundSchema:
  z.ZodNativeEnum<typeof CreatePromptVersion2PromptsResponseType> =
    CreatePromptVersion2PromptsResponseType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreatePromptVersion2PromptsResponseType$ {
  /** @deprecated use `CreatePromptVersion2PromptsResponseType$inboundSchema` instead. */
  export const inboundSchema =
    CreatePromptVersion2PromptsResponseType$inboundSchema;
  /** @deprecated use `CreatePromptVersion2PromptsResponseType$outboundSchema` instead. */
  export const outboundSchema =
    CreatePromptVersion2PromptsResponseType$outboundSchema;
}

/** @internal */
export const CreatePromptVersion2Prompts1$inboundSchema: z.ZodType<
  CreatePromptVersion2Prompts1,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: CreatePromptVersion2PromptsResponseType$inboundSchema,
  text: z.string(),
});

/** @internal */
export type CreatePromptVersion2Prompts1$Outbound = {
  type: string;
  text: string;
};

/** @internal */
export const CreatePromptVersion2Prompts1$outboundSchema: z.ZodType<
  CreatePromptVersion2Prompts1$Outbound,
  z.ZodTypeDef,
  CreatePromptVersion2Prompts1
> = z.object({
  type: CreatePromptVersion2PromptsResponseType$outboundSchema,
  text: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreatePromptVersion2Prompts1$ {
  /** @deprecated use `CreatePromptVersion2Prompts1$inboundSchema` instead. */
  export const inboundSchema = CreatePromptVersion2Prompts1$inboundSchema;
  /** @deprecated use `CreatePromptVersion2Prompts1$outboundSchema` instead. */
  export const outboundSchema = CreatePromptVersion2Prompts1$outboundSchema;
  /** @deprecated use `CreatePromptVersion2Prompts1$Outbound` instead. */
  export type Outbound = CreatePromptVersion2Prompts1$Outbound;
}

export function createPromptVersion2Prompts1ToJSON(
  createPromptVersion2Prompts1: CreatePromptVersion2Prompts1,
): string {
  return JSON.stringify(
    CreatePromptVersion2Prompts1$outboundSchema.parse(
      createPromptVersion2Prompts1,
    ),
  );
}

export function createPromptVersion2Prompts1FromJSON(
  jsonString: string,
): SafeParseResult<CreatePromptVersion2Prompts1, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreatePromptVersion2Prompts1$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreatePromptVersion2Prompts1' from JSON`,
  );
}

/** @internal */
export const CreatePromptVersionContentPrompts2$inboundSchema: z.ZodType<
  CreatePromptVersionContentPrompts2,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => CreatePromptVersion2Prompts1$inboundSchema),
  z.lazy(() => CreatePromptVersion2Prompts2$inboundSchema),
]);

/** @internal */
export type CreatePromptVersionContentPrompts2$Outbound =
  | CreatePromptVersion2Prompts1$Outbound
  | CreatePromptVersion2Prompts2$Outbound;

/** @internal */
export const CreatePromptVersionContentPrompts2$outboundSchema: z.ZodType<
  CreatePromptVersionContentPrompts2$Outbound,
  z.ZodTypeDef,
  CreatePromptVersionContentPrompts2
> = z.union([
  z.lazy(() => CreatePromptVersion2Prompts1$outboundSchema),
  z.lazy(() => CreatePromptVersion2Prompts2$outboundSchema),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreatePromptVersionContentPrompts2$ {
  /** @deprecated use `CreatePromptVersionContentPrompts2$inboundSchema` instead. */
  export const inboundSchema = CreatePromptVersionContentPrompts2$inboundSchema;
  /** @deprecated use `CreatePromptVersionContentPrompts2$outboundSchema` instead. */
  export const outboundSchema =
    CreatePromptVersionContentPrompts2$outboundSchema;
  /** @deprecated use `CreatePromptVersionContentPrompts2$Outbound` instead. */
  export type Outbound = CreatePromptVersionContentPrompts2$Outbound;
}

export function createPromptVersionContentPrompts2ToJSON(
  createPromptVersionContentPrompts2: CreatePromptVersionContentPrompts2,
): string {
  return JSON.stringify(
    CreatePromptVersionContentPrompts2$outboundSchema.parse(
      createPromptVersionContentPrompts2,
    ),
  );
}

export function createPromptVersionContentPrompts2FromJSON(
  jsonString: string,
): SafeParseResult<CreatePromptVersionContentPrompts2, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      CreatePromptVersionContentPrompts2$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreatePromptVersionContentPrompts2' from JSON`,
  );
}

/** @internal */
export const CreatePromptVersionPromptsContent$inboundSchema: z.ZodType<
  CreatePromptVersionPromptsContent,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.string(),
  z.array(z.union([
    z.lazy(() => CreatePromptVersion2Prompts1$inboundSchema),
    z.lazy(() => CreatePromptVersion2Prompts2$inboundSchema),
  ])),
]);

/** @internal */
export type CreatePromptVersionPromptsContent$Outbound =
  | string
  | Array<
    | CreatePromptVersion2Prompts1$Outbound
    | CreatePromptVersion2Prompts2$Outbound
  >;

/** @internal */
export const CreatePromptVersionPromptsContent$outboundSchema: z.ZodType<
  CreatePromptVersionPromptsContent$Outbound,
  z.ZodTypeDef,
  CreatePromptVersionPromptsContent
> = z.union([
  z.string(),
  z.array(z.union([
    z.lazy(() => CreatePromptVersion2Prompts1$outboundSchema),
    z.lazy(() => CreatePromptVersion2Prompts2$outboundSchema),
  ])),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreatePromptVersionPromptsContent$ {
  /** @deprecated use `CreatePromptVersionPromptsContent$inboundSchema` instead. */
  export const inboundSchema = CreatePromptVersionPromptsContent$inboundSchema;
  /** @deprecated use `CreatePromptVersionPromptsContent$outboundSchema` instead. */
  export const outboundSchema =
    CreatePromptVersionPromptsContent$outboundSchema;
  /** @deprecated use `CreatePromptVersionPromptsContent$Outbound` instead. */
  export type Outbound = CreatePromptVersionPromptsContent$Outbound;
}

export function createPromptVersionPromptsContentToJSON(
  createPromptVersionPromptsContent: CreatePromptVersionPromptsContent,
): string {
  return JSON.stringify(
    CreatePromptVersionPromptsContent$outboundSchema.parse(
      createPromptVersionPromptsContent,
    ),
  );
}

export function createPromptVersionPromptsContentFromJSON(
  jsonString: string,
): SafeParseResult<CreatePromptVersionPromptsContent, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreatePromptVersionPromptsContent$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreatePromptVersionPromptsContent' from JSON`,
  );
}

/** @internal */
export const CreatePromptVersionPromptsType$inboundSchema: z.ZodNativeEnum<
  typeof CreatePromptVersionPromptsType
> = z.nativeEnum(CreatePromptVersionPromptsType);

/** @internal */
export const CreatePromptVersionPromptsType$outboundSchema: z.ZodNativeEnum<
  typeof CreatePromptVersionPromptsType
> = CreatePromptVersionPromptsType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreatePromptVersionPromptsType$ {
  /** @deprecated use `CreatePromptVersionPromptsType$inboundSchema` instead. */
  export const inboundSchema = CreatePromptVersionPromptsType$inboundSchema;
  /** @deprecated use `CreatePromptVersionPromptsType$outboundSchema` instead. */
  export const outboundSchema = CreatePromptVersionPromptsType$outboundSchema;
}

/** @internal */
export const CreatePromptVersionPromptsFunction$inboundSchema: z.ZodType<
  CreatePromptVersionPromptsFunction,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.string(),
  arguments: z.string(),
});

/** @internal */
export type CreatePromptVersionPromptsFunction$Outbound = {
  name: string;
  arguments: string;
};

/** @internal */
export const CreatePromptVersionPromptsFunction$outboundSchema: z.ZodType<
  CreatePromptVersionPromptsFunction$Outbound,
  z.ZodTypeDef,
  CreatePromptVersionPromptsFunction
> = z.object({
  name: z.string(),
  arguments: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreatePromptVersionPromptsFunction$ {
  /** @deprecated use `CreatePromptVersionPromptsFunction$inboundSchema` instead. */
  export const inboundSchema = CreatePromptVersionPromptsFunction$inboundSchema;
  /** @deprecated use `CreatePromptVersionPromptsFunction$outboundSchema` instead. */
  export const outboundSchema =
    CreatePromptVersionPromptsFunction$outboundSchema;
  /** @deprecated use `CreatePromptVersionPromptsFunction$Outbound` instead. */
  export type Outbound = CreatePromptVersionPromptsFunction$Outbound;
}

export function createPromptVersionPromptsFunctionToJSON(
  createPromptVersionPromptsFunction: CreatePromptVersionPromptsFunction,
): string {
  return JSON.stringify(
    CreatePromptVersionPromptsFunction$outboundSchema.parse(
      createPromptVersionPromptsFunction,
    ),
  );
}

export function createPromptVersionPromptsFunctionFromJSON(
  jsonString: string,
): SafeParseResult<CreatePromptVersionPromptsFunction, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      CreatePromptVersionPromptsFunction$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreatePromptVersionPromptsFunction' from JSON`,
  );
}

/** @internal */
export const CreatePromptVersionPromptsToolCalls$inboundSchema: z.ZodType<
  CreatePromptVersionPromptsToolCalls,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string().optional(),
  index: z.number().optional(),
  type: CreatePromptVersionPromptsType$inboundSchema,
  function: z.lazy(() => CreatePromptVersionPromptsFunction$inboundSchema),
});

/** @internal */
export type CreatePromptVersionPromptsToolCalls$Outbound = {
  id?: string | undefined;
  index?: number | undefined;
  type: string;
  function: CreatePromptVersionPromptsFunction$Outbound;
};

/** @internal */
export const CreatePromptVersionPromptsToolCalls$outboundSchema: z.ZodType<
  CreatePromptVersionPromptsToolCalls$Outbound,
  z.ZodTypeDef,
  CreatePromptVersionPromptsToolCalls
> = z.object({
  id: z.string().optional(),
  index: z.number().optional(),
  type: CreatePromptVersionPromptsType$outboundSchema,
  function: z.lazy(() => CreatePromptVersionPromptsFunction$outboundSchema),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreatePromptVersionPromptsToolCalls$ {
  /** @deprecated use `CreatePromptVersionPromptsToolCalls$inboundSchema` instead. */
  export const inboundSchema =
    CreatePromptVersionPromptsToolCalls$inboundSchema;
  /** @deprecated use `CreatePromptVersionPromptsToolCalls$outboundSchema` instead. */
  export const outboundSchema =
    CreatePromptVersionPromptsToolCalls$outboundSchema;
  /** @deprecated use `CreatePromptVersionPromptsToolCalls$Outbound` instead. */
  export type Outbound = CreatePromptVersionPromptsToolCalls$Outbound;
}

export function createPromptVersionPromptsToolCallsToJSON(
  createPromptVersionPromptsToolCalls: CreatePromptVersionPromptsToolCalls,
): string {
  return JSON.stringify(
    CreatePromptVersionPromptsToolCalls$outboundSchema.parse(
      createPromptVersionPromptsToolCalls,
    ),
  );
}

export function createPromptVersionPromptsToolCallsFromJSON(
  jsonString: string,
): SafeParseResult<CreatePromptVersionPromptsToolCalls, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      CreatePromptVersionPromptsToolCalls$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreatePromptVersionPromptsToolCalls' from JSON`,
  );
}

/** @internal */
export const CreatePromptVersionPromptsMessages$inboundSchema: z.ZodType<
  CreatePromptVersionPromptsMessages,
  z.ZodTypeDef,
  unknown
> = z.object({
  role: CreatePromptVersionPromptsRole$inboundSchema,
  content: z.union([
    z.string(),
    z.array(z.union([
      z.lazy(() => CreatePromptVersion2Prompts1$inboundSchema),
      z.lazy(() => CreatePromptVersion2Prompts2$inboundSchema),
    ])),
  ]),
  tool_calls: z.array(
    z.lazy(() => CreatePromptVersionPromptsToolCalls$inboundSchema),
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    "tool_calls": "toolCalls",
  });
});

/** @internal */
export type CreatePromptVersionPromptsMessages$Outbound = {
  role: string;
  content:
    | string
    | Array<
      | CreatePromptVersion2Prompts1$Outbound
      | CreatePromptVersion2Prompts2$Outbound
    >;
  tool_calls?: Array<CreatePromptVersionPromptsToolCalls$Outbound> | undefined;
};

/** @internal */
export const CreatePromptVersionPromptsMessages$outboundSchema: z.ZodType<
  CreatePromptVersionPromptsMessages$Outbound,
  z.ZodTypeDef,
  CreatePromptVersionPromptsMessages
> = z.object({
  role: CreatePromptVersionPromptsRole$outboundSchema,
  content: z.union([
    z.string(),
    z.array(z.union([
      z.lazy(() => CreatePromptVersion2Prompts1$outboundSchema),
      z.lazy(() => CreatePromptVersion2Prompts2$outboundSchema),
    ])),
  ]),
  toolCalls: z.array(
    z.lazy(() => CreatePromptVersionPromptsToolCalls$outboundSchema),
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    toolCalls: "tool_calls",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreatePromptVersionPromptsMessages$ {
  /** @deprecated use `CreatePromptVersionPromptsMessages$inboundSchema` instead. */
  export const inboundSchema = CreatePromptVersionPromptsMessages$inboundSchema;
  /** @deprecated use `CreatePromptVersionPromptsMessages$outboundSchema` instead. */
  export const outboundSchema =
    CreatePromptVersionPromptsMessages$outboundSchema;
  /** @deprecated use `CreatePromptVersionPromptsMessages$Outbound` instead. */
  export type Outbound = CreatePromptVersionPromptsMessages$Outbound;
}

export function createPromptVersionPromptsMessagesToJSON(
  createPromptVersionPromptsMessages: CreatePromptVersionPromptsMessages,
): string {
  return JSON.stringify(
    CreatePromptVersionPromptsMessages$outboundSchema.parse(
      createPromptVersionPromptsMessages,
    ),
  );
}

export function createPromptVersionPromptsMessagesFromJSON(
  jsonString: string,
): SafeParseResult<CreatePromptVersionPromptsMessages, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      CreatePromptVersionPromptsMessages$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreatePromptVersionPromptsMessages' from JSON`,
  );
}

/** @internal */
export const CreatePromptVersionPromptsPromptConfig$inboundSchema: z.ZodType<
  CreatePromptVersionPromptsPromptConfig,
  z.ZodTypeDef,
  unknown
> = z.object({
  stream: z.boolean().optional(),
  model: z.string().optional(),
  model_db_id: z.string().optional(),
  model_type: CreatePromptVersionPromptsModelType$inboundSchema.optional(),
  model_parameters: z.lazy(() =>
    CreatePromptVersionPromptsModelParameters$inboundSchema
  ).optional(),
  provider: CreatePromptVersionPromptsProvider$inboundSchema.optional(),
  integration_id: z.nullable(z.string()).optional(),
  version: z.string().optional(),
  messages: z.array(
    z.lazy(() => CreatePromptVersionPromptsMessages$inboundSchema),
  ),
}).transform((v) => {
  return remap$(v, {
    "model_db_id": "modelDbId",
    "model_type": "modelType",
    "model_parameters": "modelParameters",
    "integration_id": "integrationId",
  });
});

/** @internal */
export type CreatePromptVersionPromptsPromptConfig$Outbound = {
  stream?: boolean | undefined;
  model?: string | undefined;
  model_db_id?: string | undefined;
  model_type?: string | undefined;
  model_parameters?:
    | CreatePromptVersionPromptsModelParameters$Outbound
    | undefined;
  provider?: string | undefined;
  integration_id?: string | null | undefined;
  version?: string | undefined;
  messages: Array<CreatePromptVersionPromptsMessages$Outbound>;
};

/** @internal */
export const CreatePromptVersionPromptsPromptConfig$outboundSchema: z.ZodType<
  CreatePromptVersionPromptsPromptConfig$Outbound,
  z.ZodTypeDef,
  CreatePromptVersionPromptsPromptConfig
> = z.object({
  stream: z.boolean().optional(),
  model: z.string().optional(),
  modelDbId: z.string().optional(),
  modelType: CreatePromptVersionPromptsModelType$outboundSchema.optional(),
  modelParameters: z.lazy(() =>
    CreatePromptVersionPromptsModelParameters$outboundSchema
  ).optional(),
  provider: CreatePromptVersionPromptsProvider$outboundSchema.optional(),
  integrationId: z.nullable(z.string()).optional(),
  version: z.string().optional(),
  messages: z.array(
    z.lazy(() => CreatePromptVersionPromptsMessages$outboundSchema),
  ),
}).transform((v) => {
  return remap$(v, {
    modelDbId: "model_db_id",
    modelType: "model_type",
    modelParameters: "model_parameters",
    integrationId: "integration_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreatePromptVersionPromptsPromptConfig$ {
  /** @deprecated use `CreatePromptVersionPromptsPromptConfig$inboundSchema` instead. */
  export const inboundSchema =
    CreatePromptVersionPromptsPromptConfig$inboundSchema;
  /** @deprecated use `CreatePromptVersionPromptsPromptConfig$outboundSchema` instead. */
  export const outboundSchema =
    CreatePromptVersionPromptsPromptConfig$outboundSchema;
  /** @deprecated use `CreatePromptVersionPromptsPromptConfig$Outbound` instead. */
  export type Outbound = CreatePromptVersionPromptsPromptConfig$Outbound;
}

export function createPromptVersionPromptsPromptConfigToJSON(
  createPromptVersionPromptsPromptConfig:
    CreatePromptVersionPromptsPromptConfig,
): string {
  return JSON.stringify(
    CreatePromptVersionPromptsPromptConfig$outboundSchema.parse(
      createPromptVersionPromptsPromptConfig,
    ),
  );
}

export function createPromptVersionPromptsPromptConfigFromJSON(
  jsonString: string,
): SafeParseResult<CreatePromptVersionPromptsPromptConfig, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      CreatePromptVersionPromptsPromptConfig$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreatePromptVersionPromptsPromptConfig' from JSON`,
  );
}

/** @internal */
export const CreatePromptVersionPromptsMetadata$inboundSchema: z.ZodType<
  CreatePromptVersionPromptsMetadata,
  z.ZodTypeDef,
  unknown
> = z.object({
  use_cases: z.array(z.string()).optional(),
  language: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "use_cases": "useCases",
  });
});

/** @internal */
export type CreatePromptVersionPromptsMetadata$Outbound = {
  use_cases?: Array<string> | undefined;
  language?: string | undefined;
};

/** @internal */
export const CreatePromptVersionPromptsMetadata$outboundSchema: z.ZodType<
  CreatePromptVersionPromptsMetadata$Outbound,
  z.ZodTypeDef,
  CreatePromptVersionPromptsMetadata
> = z.object({
  useCases: z.array(z.string()).optional(),
  language: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    useCases: "use_cases",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreatePromptVersionPromptsMetadata$ {
  /** @deprecated use `CreatePromptVersionPromptsMetadata$inboundSchema` instead. */
  export const inboundSchema = CreatePromptVersionPromptsMetadata$inboundSchema;
  /** @deprecated use `CreatePromptVersionPromptsMetadata$outboundSchema` instead. */
  export const outboundSchema =
    CreatePromptVersionPromptsMetadata$outboundSchema;
  /** @deprecated use `CreatePromptVersionPromptsMetadata$Outbound` instead. */
  export type Outbound = CreatePromptVersionPromptsMetadata$Outbound;
}

export function createPromptVersionPromptsMetadataToJSON(
  createPromptVersionPromptsMetadata: CreatePromptVersionPromptsMetadata,
): string {
  return JSON.stringify(
    CreatePromptVersionPromptsMetadata$outboundSchema.parse(
      createPromptVersionPromptsMetadata,
    ),
  );
}

export function createPromptVersionPromptsMetadataFromJSON(
  jsonString: string,
): SafeParseResult<CreatePromptVersionPromptsMetadata, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      CreatePromptVersionPromptsMetadata$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreatePromptVersionPromptsMetadata' from JSON`,
  );
}

/** @internal */
export const CreatePromptVersionResponseBody$inboundSchema: z.ZodType<
  CreatePromptVersionResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  _id: z.string(),
  display_name: z.string(),
  description: z.nullable(z.string()).optional(),
  prompt_config: z.lazy(() =>
    CreatePromptVersionPromptsPromptConfig$inboundSchema
  ),
  metadata: z.lazy(() => CreatePromptVersionPromptsMetadata$inboundSchema),
  commit: z.string(),
  timestamp: z.string(),
}).transform((v) => {
  return remap$(v, {
    "_id": "id",
    "display_name": "displayName",
    "prompt_config": "promptConfig",
  });
});

/** @internal */
export type CreatePromptVersionResponseBody$Outbound = {
  _id: string;
  display_name: string;
  description?: string | null | undefined;
  prompt_config: CreatePromptVersionPromptsPromptConfig$Outbound;
  metadata: CreatePromptVersionPromptsMetadata$Outbound;
  commit: string;
  timestamp: string;
};

/** @internal */
export const CreatePromptVersionResponseBody$outboundSchema: z.ZodType<
  CreatePromptVersionResponseBody$Outbound,
  z.ZodTypeDef,
  CreatePromptVersionResponseBody
> = z.object({
  id: z.string(),
  displayName: z.string(),
  description: z.nullable(z.string()).optional(),
  promptConfig: z.lazy(() =>
    CreatePromptVersionPromptsPromptConfig$outboundSchema
  ),
  metadata: z.lazy(() => CreatePromptVersionPromptsMetadata$outboundSchema),
  commit: z.string(),
  timestamp: z.string(),
}).transform((v) => {
  return remap$(v, {
    id: "_id",
    displayName: "display_name",
    promptConfig: "prompt_config",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreatePromptVersionResponseBody$ {
  /** @deprecated use `CreatePromptVersionResponseBody$inboundSchema` instead. */
  export const inboundSchema = CreatePromptVersionResponseBody$inboundSchema;
  /** @deprecated use `CreatePromptVersionResponseBody$outboundSchema` instead. */
  export const outboundSchema = CreatePromptVersionResponseBody$outboundSchema;
  /** @deprecated use `CreatePromptVersionResponseBody$Outbound` instead. */
  export type Outbound = CreatePromptVersionResponseBody$Outbound;
}

export function createPromptVersionResponseBodyToJSON(
  createPromptVersionResponseBody: CreatePromptVersionResponseBody,
): string {
  return JSON.stringify(
    CreatePromptVersionResponseBody$outboundSchema.parse(
      createPromptVersionResponseBody,
    ),
  );
}

export function createPromptVersionResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<CreatePromptVersionResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreatePromptVersionResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreatePromptVersionResponseBody' from JSON`,
  );
}
