/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type EvalsToneOfVoiceRequestBody = {
  query: string;
  output: string;
  model: string;
};

export type EvalsToneOfVoiceEvalsValue = number | boolean | string;

export type EvalsToneOfVoiceValue = {
  value: number | boolean | string;
  explanation?: string | null | undefined;
};

/**
 * Returns the result of the evaluator run
 */
export type EvalsToneOfVoiceResponseBody = {
  value: EvalsToneOfVoiceValue | null;
};

/** @internal */
export const EvalsToneOfVoiceRequestBody$inboundSchema: z.ZodType<
  EvalsToneOfVoiceRequestBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  query: z.string(),
  output: z.string(),
  model: z.string(),
});

/** @internal */
export type EvalsToneOfVoiceRequestBody$Outbound = {
  query: string;
  output: string;
  model: string;
};

/** @internal */
export const EvalsToneOfVoiceRequestBody$outboundSchema: z.ZodType<
  EvalsToneOfVoiceRequestBody$Outbound,
  z.ZodTypeDef,
  EvalsToneOfVoiceRequestBody
> = z.object({
  query: z.string(),
  output: z.string(),
  model: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EvalsToneOfVoiceRequestBody$ {
  /** @deprecated use `EvalsToneOfVoiceRequestBody$inboundSchema` instead. */
  export const inboundSchema = EvalsToneOfVoiceRequestBody$inboundSchema;
  /** @deprecated use `EvalsToneOfVoiceRequestBody$outboundSchema` instead. */
  export const outboundSchema = EvalsToneOfVoiceRequestBody$outboundSchema;
  /** @deprecated use `EvalsToneOfVoiceRequestBody$Outbound` instead. */
  export type Outbound = EvalsToneOfVoiceRequestBody$Outbound;
}

export function evalsToneOfVoiceRequestBodyToJSON(
  evalsToneOfVoiceRequestBody: EvalsToneOfVoiceRequestBody,
): string {
  return JSON.stringify(
    EvalsToneOfVoiceRequestBody$outboundSchema.parse(
      evalsToneOfVoiceRequestBody,
    ),
  );
}

export function evalsToneOfVoiceRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<EvalsToneOfVoiceRequestBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => EvalsToneOfVoiceRequestBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'EvalsToneOfVoiceRequestBody' from JSON`,
  );
}

/** @internal */
export const EvalsToneOfVoiceEvalsValue$inboundSchema: z.ZodType<
  EvalsToneOfVoiceEvalsValue,
  z.ZodTypeDef,
  unknown
> = z.union([z.number(), z.boolean(), z.string()]);

/** @internal */
export type EvalsToneOfVoiceEvalsValue$Outbound = number | boolean | string;

/** @internal */
export const EvalsToneOfVoiceEvalsValue$outboundSchema: z.ZodType<
  EvalsToneOfVoiceEvalsValue$Outbound,
  z.ZodTypeDef,
  EvalsToneOfVoiceEvalsValue
> = z.union([z.number(), z.boolean(), z.string()]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EvalsToneOfVoiceEvalsValue$ {
  /** @deprecated use `EvalsToneOfVoiceEvalsValue$inboundSchema` instead. */
  export const inboundSchema = EvalsToneOfVoiceEvalsValue$inboundSchema;
  /** @deprecated use `EvalsToneOfVoiceEvalsValue$outboundSchema` instead. */
  export const outboundSchema = EvalsToneOfVoiceEvalsValue$outboundSchema;
  /** @deprecated use `EvalsToneOfVoiceEvalsValue$Outbound` instead. */
  export type Outbound = EvalsToneOfVoiceEvalsValue$Outbound;
}

export function evalsToneOfVoiceEvalsValueToJSON(
  evalsToneOfVoiceEvalsValue: EvalsToneOfVoiceEvalsValue,
): string {
  return JSON.stringify(
    EvalsToneOfVoiceEvalsValue$outboundSchema.parse(evalsToneOfVoiceEvalsValue),
  );
}

export function evalsToneOfVoiceEvalsValueFromJSON(
  jsonString: string,
): SafeParseResult<EvalsToneOfVoiceEvalsValue, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => EvalsToneOfVoiceEvalsValue$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'EvalsToneOfVoiceEvalsValue' from JSON`,
  );
}

/** @internal */
export const EvalsToneOfVoiceValue$inboundSchema: z.ZodType<
  EvalsToneOfVoiceValue,
  z.ZodTypeDef,
  unknown
> = z.object({
  value: z.union([z.number(), z.boolean(), z.string()]),
  explanation: z.nullable(z.string()).optional(),
});

/** @internal */
export type EvalsToneOfVoiceValue$Outbound = {
  value: number | boolean | string;
  explanation?: string | null | undefined;
};

/** @internal */
export const EvalsToneOfVoiceValue$outboundSchema: z.ZodType<
  EvalsToneOfVoiceValue$Outbound,
  z.ZodTypeDef,
  EvalsToneOfVoiceValue
> = z.object({
  value: z.union([z.number(), z.boolean(), z.string()]),
  explanation: z.nullable(z.string()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EvalsToneOfVoiceValue$ {
  /** @deprecated use `EvalsToneOfVoiceValue$inboundSchema` instead. */
  export const inboundSchema = EvalsToneOfVoiceValue$inboundSchema;
  /** @deprecated use `EvalsToneOfVoiceValue$outboundSchema` instead. */
  export const outboundSchema = EvalsToneOfVoiceValue$outboundSchema;
  /** @deprecated use `EvalsToneOfVoiceValue$Outbound` instead. */
  export type Outbound = EvalsToneOfVoiceValue$Outbound;
}

export function evalsToneOfVoiceValueToJSON(
  evalsToneOfVoiceValue: EvalsToneOfVoiceValue,
): string {
  return JSON.stringify(
    EvalsToneOfVoiceValue$outboundSchema.parse(evalsToneOfVoiceValue),
  );
}

export function evalsToneOfVoiceValueFromJSON(
  jsonString: string,
): SafeParseResult<EvalsToneOfVoiceValue, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => EvalsToneOfVoiceValue$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'EvalsToneOfVoiceValue' from JSON`,
  );
}

/** @internal */
export const EvalsToneOfVoiceResponseBody$inboundSchema: z.ZodType<
  EvalsToneOfVoiceResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  value: z.nullable(z.lazy(() => EvalsToneOfVoiceValue$inboundSchema)),
});

/** @internal */
export type EvalsToneOfVoiceResponseBody$Outbound = {
  value: EvalsToneOfVoiceValue$Outbound | null;
};

/** @internal */
export const EvalsToneOfVoiceResponseBody$outboundSchema: z.ZodType<
  EvalsToneOfVoiceResponseBody$Outbound,
  z.ZodTypeDef,
  EvalsToneOfVoiceResponseBody
> = z.object({
  value: z.nullable(z.lazy(() => EvalsToneOfVoiceValue$outboundSchema)),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EvalsToneOfVoiceResponseBody$ {
  /** @deprecated use `EvalsToneOfVoiceResponseBody$inboundSchema` instead. */
  export const inboundSchema = EvalsToneOfVoiceResponseBody$inboundSchema;
  /** @deprecated use `EvalsToneOfVoiceResponseBody$outboundSchema` instead. */
  export const outboundSchema = EvalsToneOfVoiceResponseBody$outboundSchema;
  /** @deprecated use `EvalsToneOfVoiceResponseBody$Outbound` instead. */
  export type Outbound = EvalsToneOfVoiceResponseBody$Outbound;
}

export function evalsToneOfVoiceResponseBodyToJSON(
  evalsToneOfVoiceResponseBody: EvalsToneOfVoiceResponseBody,
): string {
  return JSON.stringify(
    EvalsToneOfVoiceResponseBody$outboundSchema.parse(
      evalsToneOfVoiceResponseBody,
    ),
  );
}

export function evalsToneOfVoiceResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<EvalsToneOfVoiceResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => EvalsToneOfVoiceResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'EvalsToneOfVoiceResponseBody' from JSON`,
  );
}
