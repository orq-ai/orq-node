/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type EvalsContainsValidLinkRequestBody = {
  output: string;
};

export type EvalsContainsValidLinkValue = boolean | string | number;

/**
 * Returns the result of the evaluator run
 */
export type EvalsContainsValidLinkResponseBody = {
  value: boolean | string | number | null;
};

/** @internal */
export const EvalsContainsValidLinkRequestBody$inboundSchema: z.ZodType<
  EvalsContainsValidLinkRequestBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  output: z.string(),
});

/** @internal */
export type EvalsContainsValidLinkRequestBody$Outbound = {
  output: string;
};

/** @internal */
export const EvalsContainsValidLinkRequestBody$outboundSchema: z.ZodType<
  EvalsContainsValidLinkRequestBody$Outbound,
  z.ZodTypeDef,
  EvalsContainsValidLinkRequestBody
> = z.object({
  output: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EvalsContainsValidLinkRequestBody$ {
  /** @deprecated use `EvalsContainsValidLinkRequestBody$inboundSchema` instead. */
  export const inboundSchema = EvalsContainsValidLinkRequestBody$inboundSchema;
  /** @deprecated use `EvalsContainsValidLinkRequestBody$outboundSchema` instead. */
  export const outboundSchema =
    EvalsContainsValidLinkRequestBody$outboundSchema;
  /** @deprecated use `EvalsContainsValidLinkRequestBody$Outbound` instead. */
  export type Outbound = EvalsContainsValidLinkRequestBody$Outbound;
}

export function evalsContainsValidLinkRequestBodyToJSON(
  evalsContainsValidLinkRequestBody: EvalsContainsValidLinkRequestBody,
): string {
  return JSON.stringify(
    EvalsContainsValidLinkRequestBody$outboundSchema.parse(
      evalsContainsValidLinkRequestBody,
    ),
  );
}

export function evalsContainsValidLinkRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<EvalsContainsValidLinkRequestBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => EvalsContainsValidLinkRequestBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'EvalsContainsValidLinkRequestBody' from JSON`,
  );
}

/** @internal */
export const EvalsContainsValidLinkValue$inboundSchema: z.ZodType<
  EvalsContainsValidLinkValue,
  z.ZodTypeDef,
  unknown
> = z.union([z.boolean(), z.string(), z.number()]);

/** @internal */
export type EvalsContainsValidLinkValue$Outbound = boolean | string | number;

/** @internal */
export const EvalsContainsValidLinkValue$outboundSchema: z.ZodType<
  EvalsContainsValidLinkValue$Outbound,
  z.ZodTypeDef,
  EvalsContainsValidLinkValue
> = z.union([z.boolean(), z.string(), z.number()]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EvalsContainsValidLinkValue$ {
  /** @deprecated use `EvalsContainsValidLinkValue$inboundSchema` instead. */
  export const inboundSchema = EvalsContainsValidLinkValue$inboundSchema;
  /** @deprecated use `EvalsContainsValidLinkValue$outboundSchema` instead. */
  export const outboundSchema = EvalsContainsValidLinkValue$outboundSchema;
  /** @deprecated use `EvalsContainsValidLinkValue$Outbound` instead. */
  export type Outbound = EvalsContainsValidLinkValue$Outbound;
}

export function evalsContainsValidLinkValueToJSON(
  evalsContainsValidLinkValue: EvalsContainsValidLinkValue,
): string {
  return JSON.stringify(
    EvalsContainsValidLinkValue$outboundSchema.parse(
      evalsContainsValidLinkValue,
    ),
  );
}

export function evalsContainsValidLinkValueFromJSON(
  jsonString: string,
): SafeParseResult<EvalsContainsValidLinkValue, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => EvalsContainsValidLinkValue$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'EvalsContainsValidLinkValue' from JSON`,
  );
}

/** @internal */
export const EvalsContainsValidLinkResponseBody$inboundSchema: z.ZodType<
  EvalsContainsValidLinkResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  value: z.nullable(z.union([z.boolean(), z.string(), z.number()])),
});

/** @internal */
export type EvalsContainsValidLinkResponseBody$Outbound = {
  value: boolean | string | number | null;
};

/** @internal */
export const EvalsContainsValidLinkResponseBody$outboundSchema: z.ZodType<
  EvalsContainsValidLinkResponseBody$Outbound,
  z.ZodTypeDef,
  EvalsContainsValidLinkResponseBody
> = z.object({
  value: z.nullable(z.union([z.boolean(), z.string(), z.number()])),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EvalsContainsValidLinkResponseBody$ {
  /** @deprecated use `EvalsContainsValidLinkResponseBody$inboundSchema` instead. */
  export const inboundSchema = EvalsContainsValidLinkResponseBody$inboundSchema;
  /** @deprecated use `EvalsContainsValidLinkResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    EvalsContainsValidLinkResponseBody$outboundSchema;
  /** @deprecated use `EvalsContainsValidLinkResponseBody$Outbound` instead. */
  export type Outbound = EvalsContainsValidLinkResponseBody$Outbound;
}

export function evalsContainsValidLinkResponseBodyToJSON(
  evalsContainsValidLinkResponseBody: EvalsContainsValidLinkResponseBody,
): string {
  return JSON.stringify(
    EvalsContainsValidLinkResponseBody$outboundSchema.parse(
      evalsContainsValidLinkResponseBody,
    ),
  );
}

export function evalsContainsValidLinkResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<EvalsContainsValidLinkResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      EvalsContainsValidLinkResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'EvalsContainsValidLinkResponseBody' from JSON`,
  );
}
