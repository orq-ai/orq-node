/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { RFCDate } from "../../types/rfcdate.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * Filter by budget entity type (contact or workspace)
 */
export const QueryParamType = {
  Contact: "contact",
  Workspace: "workspace",
} as const;
/**
 * Filter by budget entity type (contact or workspace)
 */
export type QueryParamType = ClosedEnum<typeof QueryParamType>;

export type ListBudgetsRequest = {
  /**
   * A limit on the number of objects to be returned. Limit can range between 1 and 50, and the default is 10
   */
  limit?: number | undefined;
  /**
   * A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 20 objects, ending with `01JJ1HDHN79XAS7A01WB3HYSDB`, your subsequent call can include `after=01JJ1HDHN79XAS7A01WB3HYSDB` in order to fetch the next page of the list.
   */
  startingAfter?: string | undefined;
  /**
   * A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 20 objects, starting with `01JJ1HDHN79XAS7A01WB3HYSDB`, your subsequent call can include `before=01JJ1HDHN79XAS7A01WB3HYSDB` in order to fetch the previous page of the list.
   */
  endingBefore?: string | undefined;
  /**
   * Filter by budget entity type (contact or workspace)
   */
  type?: QueryParamType | undefined;
  /**
   * Filter by specific entity ID
   */
  entityId?: string | undefined;
  /**
   * Filter by active status
   */
  isActive?: boolean | null | undefined;
};

export const ListBudgetsObject = {
  List: "list",
} as const;
export type ListBudgetsObject = ClosedEnum<typeof ListBudgetsObject>;

/**
 * Budget entity type
 */
export const ListBudgetsType = {
  ApiKey: "api_key",
  Contact: "contact",
  Workspace: "workspace",
} as const;
/**
 * Budget entity type
 */
export type ListBudgetsType = ClosedEnum<typeof ListBudgetsType>;

/**
 * Budget period type
 */
export const ListBudgetsPeriod = {
  Daily: "daily",
  Weekly: "weekly",
  Monthly: "monthly",
  Yearly: "yearly",
} as const;
/**
 * Budget period type
 */
export type ListBudgetsPeriod = ClosedEnum<typeof ListBudgetsPeriod>;

/**
 * Budget configuration
 */
export type ListBudgetsBudget = {
  /**
   * Budget period type
   */
  period: ListBudgetsPeriod;
  /**
   * Budget amount in USD for the specified period
   */
  amount: number;
};

export type ListBudgetsConsumption = {
  /**
   * Current period consumption in USD
   */
  currentAmount: number;
  /**
   * Remaining budget (amount - current_amount)
   */
  remainingAmount: number;
  /**
   * When the current period started
   */
  periodStart: RFCDate | null;
  /**
   * When the current period will reset
   */
  periodEnd: RFCDate | null;
};

/**
 * Budget configuration details (public API response)
 */
export type ListBudgetsData = {
  /**
   * Unique ULID for the budget configuration
   */
  id: string;
  /**
   * Budget entity type
   */
  type: ListBudgetsType;
  /**
   * Contact external identifier (present when type is "contact")
   */
  contactId?: string | undefined;
  /**
   * Budget configuration
   */
  budget: ListBudgetsBudget;
  /**
   * Whether this budget configuration is currently active
   */
  isActive: boolean;
  consumption?: ListBudgetsConsumption | undefined;
  /**
   * The date and time the resource was created
   */
  created?: Date | undefined;
  /**
   * The date and time the resource was last updated
   */
  updated?: Date | undefined;
};

/**
 * List of budget configurations
 */
export type ListBudgetsResponseBody = {
  object: ListBudgetsObject;
  data: Array<ListBudgetsData>;
  hasMore: boolean;
};

/** @internal */
export const QueryParamType$inboundSchema: z.ZodNativeEnum<
  typeof QueryParamType
> = z.nativeEnum(QueryParamType);

/** @internal */
export const QueryParamType$outboundSchema: z.ZodNativeEnum<
  typeof QueryParamType
> = QueryParamType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace QueryParamType$ {
  /** @deprecated use `QueryParamType$inboundSchema` instead. */
  export const inboundSchema = QueryParamType$inboundSchema;
  /** @deprecated use `QueryParamType$outboundSchema` instead. */
  export const outboundSchema = QueryParamType$outboundSchema;
}

/** @internal */
export const ListBudgetsRequest$inboundSchema: z.ZodType<
  ListBudgetsRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  limit: z.number().default(10),
  starting_after: z.string().optional(),
  ending_before: z.string().optional(),
  type: QueryParamType$inboundSchema.optional(),
  entity_id: z.string().optional(),
  is_active: z.nullable(z.boolean()).optional(),
}).transform((v) => {
  return remap$(v, {
    "starting_after": "startingAfter",
    "ending_before": "endingBefore",
    "entity_id": "entityId",
    "is_active": "isActive",
  });
});

/** @internal */
export type ListBudgetsRequest$Outbound = {
  limit: number;
  starting_after?: string | undefined;
  ending_before?: string | undefined;
  type?: string | undefined;
  entity_id?: string | undefined;
  is_active?: boolean | null | undefined;
};

/** @internal */
export const ListBudgetsRequest$outboundSchema: z.ZodType<
  ListBudgetsRequest$Outbound,
  z.ZodTypeDef,
  ListBudgetsRequest
> = z.object({
  limit: z.number().default(10),
  startingAfter: z.string().optional(),
  endingBefore: z.string().optional(),
  type: QueryParamType$outboundSchema.optional(),
  entityId: z.string().optional(),
  isActive: z.nullable(z.boolean()).optional(),
}).transform((v) => {
  return remap$(v, {
    startingAfter: "starting_after",
    endingBefore: "ending_before",
    entityId: "entity_id",
    isActive: "is_active",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListBudgetsRequest$ {
  /** @deprecated use `ListBudgetsRequest$inboundSchema` instead. */
  export const inboundSchema = ListBudgetsRequest$inboundSchema;
  /** @deprecated use `ListBudgetsRequest$outboundSchema` instead. */
  export const outboundSchema = ListBudgetsRequest$outboundSchema;
  /** @deprecated use `ListBudgetsRequest$Outbound` instead. */
  export type Outbound = ListBudgetsRequest$Outbound;
}

export function listBudgetsRequestToJSON(
  listBudgetsRequest: ListBudgetsRequest,
): string {
  return JSON.stringify(
    ListBudgetsRequest$outboundSchema.parse(listBudgetsRequest),
  );
}

export function listBudgetsRequestFromJSON(
  jsonString: string,
): SafeParseResult<ListBudgetsRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListBudgetsRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListBudgetsRequest' from JSON`,
  );
}

/** @internal */
export const ListBudgetsObject$inboundSchema: z.ZodNativeEnum<
  typeof ListBudgetsObject
> = z.nativeEnum(ListBudgetsObject);

/** @internal */
export const ListBudgetsObject$outboundSchema: z.ZodNativeEnum<
  typeof ListBudgetsObject
> = ListBudgetsObject$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListBudgetsObject$ {
  /** @deprecated use `ListBudgetsObject$inboundSchema` instead. */
  export const inboundSchema = ListBudgetsObject$inboundSchema;
  /** @deprecated use `ListBudgetsObject$outboundSchema` instead. */
  export const outboundSchema = ListBudgetsObject$outboundSchema;
}

/** @internal */
export const ListBudgetsType$inboundSchema: z.ZodNativeEnum<
  typeof ListBudgetsType
> = z.nativeEnum(ListBudgetsType);

/** @internal */
export const ListBudgetsType$outboundSchema: z.ZodNativeEnum<
  typeof ListBudgetsType
> = ListBudgetsType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListBudgetsType$ {
  /** @deprecated use `ListBudgetsType$inboundSchema` instead. */
  export const inboundSchema = ListBudgetsType$inboundSchema;
  /** @deprecated use `ListBudgetsType$outboundSchema` instead. */
  export const outboundSchema = ListBudgetsType$outboundSchema;
}

/** @internal */
export const ListBudgetsPeriod$inboundSchema: z.ZodNativeEnum<
  typeof ListBudgetsPeriod
> = z.nativeEnum(ListBudgetsPeriod);

/** @internal */
export const ListBudgetsPeriod$outboundSchema: z.ZodNativeEnum<
  typeof ListBudgetsPeriod
> = ListBudgetsPeriod$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListBudgetsPeriod$ {
  /** @deprecated use `ListBudgetsPeriod$inboundSchema` instead. */
  export const inboundSchema = ListBudgetsPeriod$inboundSchema;
  /** @deprecated use `ListBudgetsPeriod$outboundSchema` instead. */
  export const outboundSchema = ListBudgetsPeriod$outboundSchema;
}

/** @internal */
export const ListBudgetsBudget$inboundSchema: z.ZodType<
  ListBudgetsBudget,
  z.ZodTypeDef,
  unknown
> = z.object({
  period: ListBudgetsPeriod$inboundSchema,
  amount: z.number(),
});

/** @internal */
export type ListBudgetsBudget$Outbound = {
  period: string;
  amount: number;
};

/** @internal */
export const ListBudgetsBudget$outboundSchema: z.ZodType<
  ListBudgetsBudget$Outbound,
  z.ZodTypeDef,
  ListBudgetsBudget
> = z.object({
  period: ListBudgetsPeriod$outboundSchema,
  amount: z.number(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListBudgetsBudget$ {
  /** @deprecated use `ListBudgetsBudget$inboundSchema` instead. */
  export const inboundSchema = ListBudgetsBudget$inboundSchema;
  /** @deprecated use `ListBudgetsBudget$outboundSchema` instead. */
  export const outboundSchema = ListBudgetsBudget$outboundSchema;
  /** @deprecated use `ListBudgetsBudget$Outbound` instead. */
  export type Outbound = ListBudgetsBudget$Outbound;
}

export function listBudgetsBudgetToJSON(
  listBudgetsBudget: ListBudgetsBudget,
): string {
  return JSON.stringify(
    ListBudgetsBudget$outboundSchema.parse(listBudgetsBudget),
  );
}

export function listBudgetsBudgetFromJSON(
  jsonString: string,
): SafeParseResult<ListBudgetsBudget, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListBudgetsBudget$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListBudgetsBudget' from JSON`,
  );
}

/** @internal */
export const ListBudgetsConsumption$inboundSchema: z.ZodType<
  ListBudgetsConsumption,
  z.ZodTypeDef,
  unknown
> = z.object({
  current_amount: z.number(),
  remaining_amount: z.number(),
  period_start: z.nullable(z.string().transform(v => new RFCDate(v))),
  period_end: z.nullable(z.string().transform(v => new RFCDate(v))),
}).transform((v) => {
  return remap$(v, {
    "current_amount": "currentAmount",
    "remaining_amount": "remainingAmount",
    "period_start": "periodStart",
    "period_end": "periodEnd",
  });
});

/** @internal */
export type ListBudgetsConsumption$Outbound = {
  current_amount: number;
  remaining_amount: number;
  period_start: string | null;
  period_end: string | null;
};

/** @internal */
export const ListBudgetsConsumption$outboundSchema: z.ZodType<
  ListBudgetsConsumption$Outbound,
  z.ZodTypeDef,
  ListBudgetsConsumption
> = z.object({
  currentAmount: z.number(),
  remainingAmount: z.number(),
  periodStart: z.nullable(z.instanceof(RFCDate).transform(v => v.toString())),
  periodEnd: z.nullable(z.instanceof(RFCDate).transform(v => v.toString())),
}).transform((v) => {
  return remap$(v, {
    currentAmount: "current_amount",
    remainingAmount: "remaining_amount",
    periodStart: "period_start",
    periodEnd: "period_end",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListBudgetsConsumption$ {
  /** @deprecated use `ListBudgetsConsumption$inboundSchema` instead. */
  export const inboundSchema = ListBudgetsConsumption$inboundSchema;
  /** @deprecated use `ListBudgetsConsumption$outboundSchema` instead. */
  export const outboundSchema = ListBudgetsConsumption$outboundSchema;
  /** @deprecated use `ListBudgetsConsumption$Outbound` instead. */
  export type Outbound = ListBudgetsConsumption$Outbound;
}

export function listBudgetsConsumptionToJSON(
  listBudgetsConsumption: ListBudgetsConsumption,
): string {
  return JSON.stringify(
    ListBudgetsConsumption$outboundSchema.parse(listBudgetsConsumption),
  );
}

export function listBudgetsConsumptionFromJSON(
  jsonString: string,
): SafeParseResult<ListBudgetsConsumption, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListBudgetsConsumption$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListBudgetsConsumption' from JSON`,
  );
}

/** @internal */
export const ListBudgetsData$inboundSchema: z.ZodType<
  ListBudgetsData,
  z.ZodTypeDef,
  unknown
> = z.object({
  _id: z.string(),
  type: ListBudgetsType$inboundSchema,
  contact_id: z.string().optional(),
  budget: z.lazy(() => ListBudgetsBudget$inboundSchema),
  is_active: z.boolean(),
  consumption: z.lazy(() => ListBudgetsConsumption$inboundSchema).optional(),
  created: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
  updated: z.string().datetime({ offset: true }).default(
    "2025-10-31T11:23:42.279Z",
  ).transform(v => new Date(v)),
}).transform((v) => {
  return remap$(v, {
    "_id": "id",
    "contact_id": "contactId",
    "is_active": "isActive",
  });
});

/** @internal */
export type ListBudgetsData$Outbound = {
  _id: string;
  type: string;
  contact_id?: string | undefined;
  budget: ListBudgetsBudget$Outbound;
  is_active: boolean;
  consumption?: ListBudgetsConsumption$Outbound | undefined;
  created?: string | undefined;
  updated: string;
};

/** @internal */
export const ListBudgetsData$outboundSchema: z.ZodType<
  ListBudgetsData$Outbound,
  z.ZodTypeDef,
  ListBudgetsData
> = z.object({
  id: z.string(),
  type: ListBudgetsType$outboundSchema,
  contactId: z.string().optional(),
  budget: z.lazy(() => ListBudgetsBudget$outboundSchema),
  isActive: z.boolean(),
  consumption: z.lazy(() => ListBudgetsConsumption$outboundSchema).optional(),
  created: z.date().transform(v => v.toISOString()).optional(),
  updated: z.date().default(() => new Date("2025-10-31T11:23:42.279Z"))
    .transform(v => v.toISOString()),
}).transform((v) => {
  return remap$(v, {
    id: "_id",
    contactId: "contact_id",
    isActive: "is_active",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListBudgetsData$ {
  /** @deprecated use `ListBudgetsData$inboundSchema` instead. */
  export const inboundSchema = ListBudgetsData$inboundSchema;
  /** @deprecated use `ListBudgetsData$outboundSchema` instead. */
  export const outboundSchema = ListBudgetsData$outboundSchema;
  /** @deprecated use `ListBudgetsData$Outbound` instead. */
  export type Outbound = ListBudgetsData$Outbound;
}

export function listBudgetsDataToJSON(
  listBudgetsData: ListBudgetsData,
): string {
  return JSON.stringify(ListBudgetsData$outboundSchema.parse(listBudgetsData));
}

export function listBudgetsDataFromJSON(
  jsonString: string,
): SafeParseResult<ListBudgetsData, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListBudgetsData$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListBudgetsData' from JSON`,
  );
}

/** @internal */
export const ListBudgetsResponseBody$inboundSchema: z.ZodType<
  ListBudgetsResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  object: ListBudgetsObject$inboundSchema,
  data: z.array(z.lazy(() => ListBudgetsData$inboundSchema)),
  has_more: z.boolean(),
}).transform((v) => {
  return remap$(v, {
    "has_more": "hasMore",
  });
});

/** @internal */
export type ListBudgetsResponseBody$Outbound = {
  object: string;
  data: Array<ListBudgetsData$Outbound>;
  has_more: boolean;
};

/** @internal */
export const ListBudgetsResponseBody$outboundSchema: z.ZodType<
  ListBudgetsResponseBody$Outbound,
  z.ZodTypeDef,
  ListBudgetsResponseBody
> = z.object({
  object: ListBudgetsObject$outboundSchema,
  data: z.array(z.lazy(() => ListBudgetsData$outboundSchema)),
  hasMore: z.boolean(),
}).transform((v) => {
  return remap$(v, {
    hasMore: "has_more",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListBudgetsResponseBody$ {
  /** @deprecated use `ListBudgetsResponseBody$inboundSchema` instead. */
  export const inboundSchema = ListBudgetsResponseBody$inboundSchema;
  /** @deprecated use `ListBudgetsResponseBody$outboundSchema` instead. */
  export const outboundSchema = ListBudgetsResponseBody$outboundSchema;
  /** @deprecated use `ListBudgetsResponseBody$Outbound` instead. */
  export type Outbound = ListBudgetsResponseBody$Outbound;
}

export function listBudgetsResponseBodyToJSON(
  listBudgetsResponseBody: ListBudgetsResponseBody,
): string {
  return JSON.stringify(
    ListBudgetsResponseBody$outboundSchema.parse(listBudgetsResponseBody),
  );
}

export function listBudgetsResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<ListBudgetsResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListBudgetsResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListBudgetsResponseBody' from JSON`,
  );
}
