/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export const SearchKnowledgeRetrievalConfigKnowledgeType = {
  HybridSearch: "hybrid_search",
} as const;
export type SearchKnowledgeRetrievalConfigKnowledgeType = ClosedEnum<
  typeof SearchKnowledgeRetrievalConfigKnowledgeType
>;

export const SearchKnowledgeRetrievalConfigKnowledgeProvider = {
  Cohere: "cohere",
  Openai: "openai",
  Anthropic: "anthropic",
  Huggingface: "huggingface",
  Replicate: "replicate",
  Google: "google",
  GoogleAi: "google-ai",
  Azure: "azure",
  Aws: "aws",
  Anyscale: "anyscale",
  Perplexity: "perplexity",
  Groq: "groq",
  Fal: "fal",
  Leonardoai: "leonardoai",
  Nvidia: "nvidia",
  Jina: "jina",
  Togetherai: "togetherai",
  Elevenlabs: "elevenlabs",
} as const;
export type SearchKnowledgeRetrievalConfigKnowledgeProvider = ClosedEnum<
  typeof SearchKnowledgeRetrievalConfigKnowledgeProvider
>;

export const SearchKnowledgeRetrievalConfigKnowledgeModelType = {
  Rerank: "rerank",
} as const;
export type SearchKnowledgeRetrievalConfigKnowledgeModelType = ClosedEnum<
  typeof SearchKnowledgeRetrievalConfigKnowledgeModelType
>;

export type SearchKnowledgeRetrievalConfigKnowledgeModelParameters = {
  /**
   * The threshold value used to filter the rerank results, only documents with a relevance score greater than the threshold will be returned
   */
  threshold?: number | undefined;
};

export type SearchKnowledgeRetrievalConfigRerankConfigInput = {
  enabled?: boolean | undefined;
  provider?: SearchKnowledgeRetrievalConfigKnowledgeProvider | undefined;
  /**
   * The name of the model to use
   */
  model?: string | undefined;
  /**
   * The ID of the model in the database
   */
  modelDbId?: string | undefined;
  modelType?: SearchKnowledgeRetrievalConfigKnowledgeModelType | undefined;
  modelParameters?:
    | SearchKnowledgeRetrievalConfigKnowledgeModelParameters
    | undefined;
};

export type RetrievalConfig3 = {
  type: SearchKnowledgeRetrievalConfigKnowledgeType;
  /**
   * Used to filter chunks that are most similar to the query
   */
  topK?: number | undefined;
  /**
   * Used to filter chunks that are most similar to the query. A value of `0` will be consider disabled.
   */
  threshold?: number | undefined;
  rerankConfig?:
    | SearchKnowledgeRetrievalConfigRerankConfigInput
    | null
    | undefined;
};

export const SearchKnowledgeRetrievalConfigType = {
  KeywordSearch: "keyword_search",
} as const;
export type SearchKnowledgeRetrievalConfigType = ClosedEnum<
  typeof SearchKnowledgeRetrievalConfigType
>;

export const SearchKnowledgeRetrievalConfigProvider = {
  Cohere: "cohere",
  Openai: "openai",
  Anthropic: "anthropic",
  Huggingface: "huggingface",
  Replicate: "replicate",
  Google: "google",
  GoogleAi: "google-ai",
  Azure: "azure",
  Aws: "aws",
  Anyscale: "anyscale",
  Perplexity: "perplexity",
  Groq: "groq",
  Fal: "fal",
  Leonardoai: "leonardoai",
  Nvidia: "nvidia",
  Jina: "jina",
  Togetherai: "togetherai",
  Elevenlabs: "elevenlabs",
} as const;
export type SearchKnowledgeRetrievalConfigProvider = ClosedEnum<
  typeof SearchKnowledgeRetrievalConfigProvider
>;

export const SearchKnowledgeRetrievalConfigModelType = {
  Rerank: "rerank",
} as const;
export type SearchKnowledgeRetrievalConfigModelType = ClosedEnum<
  typeof SearchKnowledgeRetrievalConfigModelType
>;

export type SearchKnowledgeRetrievalConfigModelParameters = {
  /**
   * The threshold value used to filter the rerank results, only documents with a relevance score greater than the threshold will be returned
   */
  threshold?: number | undefined;
};

export type SearchKnowledgeRetrievalConfigRerankConfig = {
  enabled?: boolean | undefined;
  provider?: SearchKnowledgeRetrievalConfigProvider | undefined;
  /**
   * The name of the model to use
   */
  model?: string | undefined;
  /**
   * The ID of the model in the database
   */
  modelDbId?: string | undefined;
  modelType?: SearchKnowledgeRetrievalConfigModelType | undefined;
  modelParameters?: SearchKnowledgeRetrievalConfigModelParameters | undefined;
};

export type RetrievalConfig2 = {
  type: SearchKnowledgeRetrievalConfigType;
  /**
   * Used to filter chunks that are most similar to the query
   */
  topK?: number | undefined;
  /**
   * Used to filter chunks that are most similar to the query. A value of `0` will be consider disabled.
   */
  threshold?: number | undefined;
  rerankConfig?: SearchKnowledgeRetrievalConfigRerankConfig | null | undefined;
};

export const RetrievalConfigType = {
  VectorSearch: "vector_search",
} as const;
export type RetrievalConfigType = ClosedEnum<typeof RetrievalConfigType>;

export const RetrievalConfigProvider = {
  Cohere: "cohere",
  Openai: "openai",
  Anthropic: "anthropic",
  Huggingface: "huggingface",
  Replicate: "replicate",
  Google: "google",
  GoogleAi: "google-ai",
  Azure: "azure",
  Aws: "aws",
  Anyscale: "anyscale",
  Perplexity: "perplexity",
  Groq: "groq",
  Fal: "fal",
  Leonardoai: "leonardoai",
  Nvidia: "nvidia",
  Jina: "jina",
  Togetherai: "togetherai",
  Elevenlabs: "elevenlabs",
} as const;
export type RetrievalConfigProvider = ClosedEnum<
  typeof RetrievalConfigProvider
>;

export const RetrievalConfigModelType = {
  Rerank: "rerank",
} as const;
export type RetrievalConfigModelType = ClosedEnum<
  typeof RetrievalConfigModelType
>;

export type RetrievalConfigModelParameters = {
  /**
   * The threshold value used to filter the rerank results, only documents with a relevance score greater than the threshold will be returned
   */
  threshold?: number | undefined;
};

export type RetrievalConfigRerankConfig = {
  enabled?: boolean | undefined;
  provider?: RetrievalConfigProvider | undefined;
  /**
   * The name of the model to use
   */
  model?: string | undefined;
  /**
   * The ID of the model in the database
   */
  modelDbId?: string | undefined;
  modelType?: RetrievalConfigModelType | undefined;
  modelParameters?: RetrievalConfigModelParameters | undefined;
};

export type RetrievalConfig1 = {
  type: RetrievalConfigType;
  /**
   * Used to filter chunks that are most similar to the query
   */
  topK?: number | undefined;
  /**
   * Used to filter chunks that are most similar to the query. A value of `0` will be consider disabled.
   */
  threshold?: number | undefined;
  rerankConfig?: RetrievalConfigRerankConfig | null | undefined;
};

/**
 * Allow to modify the retrieval config for the search. If not provided, the knowledge base configuration set in the database will be used.
 */
export type RetrievalConfig =
  | RetrievalConfig1
  | RetrievalConfig2
  | RetrievalConfig3;

export type SearchKnowledgeRequestBody = {
  query: string;
  /**
   * Allow to modify the retrieval config for the search. If not provided, the knowledge base configuration set in the database will be used.
   */
  retrievalConfig?:
    | RetrievalConfig1
    | RetrievalConfig2
    | RetrievalConfig3
    | undefined;
};

export type SearchKnowledgeRequest = {
  knowledgeId: string;
  requestBody: SearchKnowledgeRequestBody;
};

export type SearchKnowledgeMetadata = {
  /**
   * Unique identifier for the data source
   */
  datasourceId: string;
  /**
   * Unique identifier for the chunk
   */
  chunkId: string;
  /**
   * Name of the uploaded file during the datasource creation.
   */
  fileName: string;
  /**
   * Reference to the page number the chunk was extracted from. The property will only be available for `application/pdf` type of files. For other file types, the property will be `null`.
   */
  pageNumber?: number | null | undefined;
  /**
   * Type of the uploaded file when the datasource was created.
   */
  fileType: string;
};

export type SearchKnowledgeDocuments = {
  /**
   * Unique identifier for the retrieval
   */
  id: string;
  /**
   * Text content of the document
   */
  text: string;
  metadata: SearchKnowledgeMetadata;
  /**
   * The score of the document
   */
  score: number;
  /**
   * The rerank score of the document
   */
  rerankScore?: number | undefined;
};

/**
 * Knowledge successfully retrieved
 */
export type SearchKnowledgeResponseBody = {
  /**
   * Unique id of the knowledge base
   */
  knowledgeId: string;
  /**
   * The documents returned
   */
  documents: Array<SearchKnowledgeDocuments>;
  /**
   * The key of the knowledge base
   */
  knowledgeKey: string;
  /**
   * The query used to search the knowledge base
   */
  query: string;
};

/** @internal */
export const SearchKnowledgeRetrievalConfigKnowledgeType$inboundSchema:
  z.ZodNativeEnum<typeof SearchKnowledgeRetrievalConfigKnowledgeType> = z
    .nativeEnum(SearchKnowledgeRetrievalConfigKnowledgeType);

/** @internal */
export const SearchKnowledgeRetrievalConfigKnowledgeType$outboundSchema:
  z.ZodNativeEnum<typeof SearchKnowledgeRetrievalConfigKnowledgeType> =
    SearchKnowledgeRetrievalConfigKnowledgeType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SearchKnowledgeRetrievalConfigKnowledgeType$ {
  /** @deprecated use `SearchKnowledgeRetrievalConfigKnowledgeType$inboundSchema` instead. */
  export const inboundSchema =
    SearchKnowledgeRetrievalConfigKnowledgeType$inboundSchema;
  /** @deprecated use `SearchKnowledgeRetrievalConfigKnowledgeType$outboundSchema` instead. */
  export const outboundSchema =
    SearchKnowledgeRetrievalConfigKnowledgeType$outboundSchema;
}

/** @internal */
export const SearchKnowledgeRetrievalConfigKnowledgeProvider$inboundSchema:
  z.ZodNativeEnum<typeof SearchKnowledgeRetrievalConfigKnowledgeProvider> = z
    .nativeEnum(SearchKnowledgeRetrievalConfigKnowledgeProvider);

/** @internal */
export const SearchKnowledgeRetrievalConfigKnowledgeProvider$outboundSchema:
  z.ZodNativeEnum<typeof SearchKnowledgeRetrievalConfigKnowledgeProvider> =
    SearchKnowledgeRetrievalConfigKnowledgeProvider$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SearchKnowledgeRetrievalConfigKnowledgeProvider$ {
  /** @deprecated use `SearchKnowledgeRetrievalConfigKnowledgeProvider$inboundSchema` instead. */
  export const inboundSchema =
    SearchKnowledgeRetrievalConfigKnowledgeProvider$inboundSchema;
  /** @deprecated use `SearchKnowledgeRetrievalConfigKnowledgeProvider$outboundSchema` instead. */
  export const outboundSchema =
    SearchKnowledgeRetrievalConfigKnowledgeProvider$outboundSchema;
}

/** @internal */
export const SearchKnowledgeRetrievalConfigKnowledgeModelType$inboundSchema:
  z.ZodNativeEnum<typeof SearchKnowledgeRetrievalConfigKnowledgeModelType> = z
    .nativeEnum(SearchKnowledgeRetrievalConfigKnowledgeModelType);

/** @internal */
export const SearchKnowledgeRetrievalConfigKnowledgeModelType$outboundSchema:
  z.ZodNativeEnum<typeof SearchKnowledgeRetrievalConfigKnowledgeModelType> =
    SearchKnowledgeRetrievalConfigKnowledgeModelType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SearchKnowledgeRetrievalConfigKnowledgeModelType$ {
  /** @deprecated use `SearchKnowledgeRetrievalConfigKnowledgeModelType$inboundSchema` instead. */
  export const inboundSchema =
    SearchKnowledgeRetrievalConfigKnowledgeModelType$inboundSchema;
  /** @deprecated use `SearchKnowledgeRetrievalConfigKnowledgeModelType$outboundSchema` instead. */
  export const outboundSchema =
    SearchKnowledgeRetrievalConfigKnowledgeModelType$outboundSchema;
}

/** @internal */
export const SearchKnowledgeRetrievalConfigKnowledgeModelParameters$inboundSchema:
  z.ZodType<
    SearchKnowledgeRetrievalConfigKnowledgeModelParameters,
    z.ZodTypeDef,
    unknown
  > = z.object({
    threshold: z.number().optional(),
  });

/** @internal */
export type SearchKnowledgeRetrievalConfigKnowledgeModelParameters$Outbound = {
  threshold?: number | undefined;
};

/** @internal */
export const SearchKnowledgeRetrievalConfigKnowledgeModelParameters$outboundSchema:
  z.ZodType<
    SearchKnowledgeRetrievalConfigKnowledgeModelParameters$Outbound,
    z.ZodTypeDef,
    SearchKnowledgeRetrievalConfigKnowledgeModelParameters
  > = z.object({
    threshold: z.number().optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SearchKnowledgeRetrievalConfigKnowledgeModelParameters$ {
  /** @deprecated use `SearchKnowledgeRetrievalConfigKnowledgeModelParameters$inboundSchema` instead. */
  export const inboundSchema =
    SearchKnowledgeRetrievalConfigKnowledgeModelParameters$inboundSchema;
  /** @deprecated use `SearchKnowledgeRetrievalConfigKnowledgeModelParameters$outboundSchema` instead. */
  export const outboundSchema =
    SearchKnowledgeRetrievalConfigKnowledgeModelParameters$outboundSchema;
  /** @deprecated use `SearchKnowledgeRetrievalConfigKnowledgeModelParameters$Outbound` instead. */
  export type Outbound =
    SearchKnowledgeRetrievalConfigKnowledgeModelParameters$Outbound;
}

export function searchKnowledgeRetrievalConfigKnowledgeModelParametersToJSON(
  searchKnowledgeRetrievalConfigKnowledgeModelParameters:
    SearchKnowledgeRetrievalConfigKnowledgeModelParameters,
): string {
  return JSON.stringify(
    SearchKnowledgeRetrievalConfigKnowledgeModelParameters$outboundSchema.parse(
      searchKnowledgeRetrievalConfigKnowledgeModelParameters,
    ),
  );
}

export function searchKnowledgeRetrievalConfigKnowledgeModelParametersFromJSON(
  jsonString: string,
): SafeParseResult<
  SearchKnowledgeRetrievalConfigKnowledgeModelParameters,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      SearchKnowledgeRetrievalConfigKnowledgeModelParameters$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'SearchKnowledgeRetrievalConfigKnowledgeModelParameters' from JSON`,
  );
}

/** @internal */
export const SearchKnowledgeRetrievalConfigRerankConfigInput$inboundSchema:
  z.ZodType<
    SearchKnowledgeRetrievalConfigRerankConfigInput,
    z.ZodTypeDef,
    unknown
  > = z.object({
    enabled: z.boolean().optional(),
    provider: SearchKnowledgeRetrievalConfigKnowledgeProvider$inboundSchema
      .optional(),
    model: z.string().optional(),
    model_db_id: z.string().optional(),
    model_type: SearchKnowledgeRetrievalConfigKnowledgeModelType$inboundSchema
      .optional(),
    model_parameters: z.lazy(() =>
      SearchKnowledgeRetrievalConfigKnowledgeModelParameters$inboundSchema
    ).optional(),
  }).transform((v) => {
    return remap$(v, {
      "model_db_id": "modelDbId",
      "model_type": "modelType",
      "model_parameters": "modelParameters",
    });
  });

/** @internal */
export type SearchKnowledgeRetrievalConfigRerankConfigInput$Outbound = {
  enabled?: boolean | undefined;
  provider?: string | undefined;
  model?: string | undefined;
  model_db_id?: string | undefined;
  model_type?: string | undefined;
  model_parameters?:
    | SearchKnowledgeRetrievalConfigKnowledgeModelParameters$Outbound
    | undefined;
};

/** @internal */
export const SearchKnowledgeRetrievalConfigRerankConfigInput$outboundSchema:
  z.ZodType<
    SearchKnowledgeRetrievalConfigRerankConfigInput$Outbound,
    z.ZodTypeDef,
    SearchKnowledgeRetrievalConfigRerankConfigInput
  > = z.object({
    enabled: z.boolean().optional(),
    provider: SearchKnowledgeRetrievalConfigKnowledgeProvider$outboundSchema
      .optional(),
    model: z.string().optional(),
    modelDbId: z.string().optional(),
    modelType: SearchKnowledgeRetrievalConfigKnowledgeModelType$outboundSchema
      .optional(),
    modelParameters: z.lazy(() =>
      SearchKnowledgeRetrievalConfigKnowledgeModelParameters$outboundSchema
    ).optional(),
  }).transform((v) => {
    return remap$(v, {
      modelDbId: "model_db_id",
      modelType: "model_type",
      modelParameters: "model_parameters",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SearchKnowledgeRetrievalConfigRerankConfigInput$ {
  /** @deprecated use `SearchKnowledgeRetrievalConfigRerankConfigInput$inboundSchema` instead. */
  export const inboundSchema =
    SearchKnowledgeRetrievalConfigRerankConfigInput$inboundSchema;
  /** @deprecated use `SearchKnowledgeRetrievalConfigRerankConfigInput$outboundSchema` instead. */
  export const outboundSchema =
    SearchKnowledgeRetrievalConfigRerankConfigInput$outboundSchema;
  /** @deprecated use `SearchKnowledgeRetrievalConfigRerankConfigInput$Outbound` instead. */
  export type Outbound =
    SearchKnowledgeRetrievalConfigRerankConfigInput$Outbound;
}

export function searchKnowledgeRetrievalConfigRerankConfigInputToJSON(
  searchKnowledgeRetrievalConfigRerankConfigInput:
    SearchKnowledgeRetrievalConfigRerankConfigInput,
): string {
  return JSON.stringify(
    SearchKnowledgeRetrievalConfigRerankConfigInput$outboundSchema.parse(
      searchKnowledgeRetrievalConfigRerankConfigInput,
    ),
  );
}

export function searchKnowledgeRetrievalConfigRerankConfigInputFromJSON(
  jsonString: string,
): SafeParseResult<
  SearchKnowledgeRetrievalConfigRerankConfigInput,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      SearchKnowledgeRetrievalConfigRerankConfigInput$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'SearchKnowledgeRetrievalConfigRerankConfigInput' from JSON`,
  );
}

/** @internal */
export const RetrievalConfig3$inboundSchema: z.ZodType<
  RetrievalConfig3,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: SearchKnowledgeRetrievalConfigKnowledgeType$inboundSchema,
  top_k: z.number().int().default(5),
  threshold: z.number().default(0),
  rerank_config: z.nullable(
    z.lazy(() => SearchKnowledgeRetrievalConfigRerankConfigInput$inboundSchema),
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    "top_k": "topK",
    "rerank_config": "rerankConfig",
  });
});

/** @internal */
export type RetrievalConfig3$Outbound = {
  type: string;
  top_k: number;
  threshold: number;
  rerank_config?:
    | SearchKnowledgeRetrievalConfigRerankConfigInput$Outbound
    | null
    | undefined;
};

/** @internal */
export const RetrievalConfig3$outboundSchema: z.ZodType<
  RetrievalConfig3$Outbound,
  z.ZodTypeDef,
  RetrievalConfig3
> = z.object({
  type: SearchKnowledgeRetrievalConfigKnowledgeType$outboundSchema,
  topK: z.number().int().default(5),
  threshold: z.number().default(0),
  rerankConfig: z.nullable(
    z.lazy(() =>
      SearchKnowledgeRetrievalConfigRerankConfigInput$outboundSchema
    ),
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    topK: "top_k",
    rerankConfig: "rerank_config",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RetrievalConfig3$ {
  /** @deprecated use `RetrievalConfig3$inboundSchema` instead. */
  export const inboundSchema = RetrievalConfig3$inboundSchema;
  /** @deprecated use `RetrievalConfig3$outboundSchema` instead. */
  export const outboundSchema = RetrievalConfig3$outboundSchema;
  /** @deprecated use `RetrievalConfig3$Outbound` instead. */
  export type Outbound = RetrievalConfig3$Outbound;
}

export function retrievalConfig3ToJSON(
  retrievalConfig3: RetrievalConfig3,
): string {
  return JSON.stringify(
    RetrievalConfig3$outboundSchema.parse(retrievalConfig3),
  );
}

export function retrievalConfig3FromJSON(
  jsonString: string,
): SafeParseResult<RetrievalConfig3, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => RetrievalConfig3$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RetrievalConfig3' from JSON`,
  );
}

/** @internal */
export const SearchKnowledgeRetrievalConfigType$inboundSchema: z.ZodNativeEnum<
  typeof SearchKnowledgeRetrievalConfigType
> = z.nativeEnum(SearchKnowledgeRetrievalConfigType);

/** @internal */
export const SearchKnowledgeRetrievalConfigType$outboundSchema: z.ZodNativeEnum<
  typeof SearchKnowledgeRetrievalConfigType
> = SearchKnowledgeRetrievalConfigType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SearchKnowledgeRetrievalConfigType$ {
  /** @deprecated use `SearchKnowledgeRetrievalConfigType$inboundSchema` instead. */
  export const inboundSchema = SearchKnowledgeRetrievalConfigType$inboundSchema;
  /** @deprecated use `SearchKnowledgeRetrievalConfigType$outboundSchema` instead. */
  export const outboundSchema =
    SearchKnowledgeRetrievalConfigType$outboundSchema;
}

/** @internal */
export const SearchKnowledgeRetrievalConfigProvider$inboundSchema:
  z.ZodNativeEnum<typeof SearchKnowledgeRetrievalConfigProvider> = z.nativeEnum(
    SearchKnowledgeRetrievalConfigProvider,
  );

/** @internal */
export const SearchKnowledgeRetrievalConfigProvider$outboundSchema:
  z.ZodNativeEnum<typeof SearchKnowledgeRetrievalConfigProvider> =
    SearchKnowledgeRetrievalConfigProvider$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SearchKnowledgeRetrievalConfigProvider$ {
  /** @deprecated use `SearchKnowledgeRetrievalConfigProvider$inboundSchema` instead. */
  export const inboundSchema =
    SearchKnowledgeRetrievalConfigProvider$inboundSchema;
  /** @deprecated use `SearchKnowledgeRetrievalConfigProvider$outboundSchema` instead. */
  export const outboundSchema =
    SearchKnowledgeRetrievalConfigProvider$outboundSchema;
}

/** @internal */
export const SearchKnowledgeRetrievalConfigModelType$inboundSchema:
  z.ZodNativeEnum<typeof SearchKnowledgeRetrievalConfigModelType> = z
    .nativeEnum(SearchKnowledgeRetrievalConfigModelType);

/** @internal */
export const SearchKnowledgeRetrievalConfigModelType$outboundSchema:
  z.ZodNativeEnum<typeof SearchKnowledgeRetrievalConfigModelType> =
    SearchKnowledgeRetrievalConfigModelType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SearchKnowledgeRetrievalConfigModelType$ {
  /** @deprecated use `SearchKnowledgeRetrievalConfigModelType$inboundSchema` instead. */
  export const inboundSchema =
    SearchKnowledgeRetrievalConfigModelType$inboundSchema;
  /** @deprecated use `SearchKnowledgeRetrievalConfigModelType$outboundSchema` instead. */
  export const outboundSchema =
    SearchKnowledgeRetrievalConfigModelType$outboundSchema;
}

/** @internal */
export const SearchKnowledgeRetrievalConfigModelParameters$inboundSchema:
  z.ZodType<
    SearchKnowledgeRetrievalConfigModelParameters,
    z.ZodTypeDef,
    unknown
  > = z.object({
    threshold: z.number().optional(),
  });

/** @internal */
export type SearchKnowledgeRetrievalConfigModelParameters$Outbound = {
  threshold?: number | undefined;
};

/** @internal */
export const SearchKnowledgeRetrievalConfigModelParameters$outboundSchema:
  z.ZodType<
    SearchKnowledgeRetrievalConfigModelParameters$Outbound,
    z.ZodTypeDef,
    SearchKnowledgeRetrievalConfigModelParameters
  > = z.object({
    threshold: z.number().optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SearchKnowledgeRetrievalConfigModelParameters$ {
  /** @deprecated use `SearchKnowledgeRetrievalConfigModelParameters$inboundSchema` instead. */
  export const inboundSchema =
    SearchKnowledgeRetrievalConfigModelParameters$inboundSchema;
  /** @deprecated use `SearchKnowledgeRetrievalConfigModelParameters$outboundSchema` instead. */
  export const outboundSchema =
    SearchKnowledgeRetrievalConfigModelParameters$outboundSchema;
  /** @deprecated use `SearchKnowledgeRetrievalConfigModelParameters$Outbound` instead. */
  export type Outbound = SearchKnowledgeRetrievalConfigModelParameters$Outbound;
}

export function searchKnowledgeRetrievalConfigModelParametersToJSON(
  searchKnowledgeRetrievalConfigModelParameters:
    SearchKnowledgeRetrievalConfigModelParameters,
): string {
  return JSON.stringify(
    SearchKnowledgeRetrievalConfigModelParameters$outboundSchema.parse(
      searchKnowledgeRetrievalConfigModelParameters,
    ),
  );
}

export function searchKnowledgeRetrievalConfigModelParametersFromJSON(
  jsonString: string,
): SafeParseResult<
  SearchKnowledgeRetrievalConfigModelParameters,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      SearchKnowledgeRetrievalConfigModelParameters$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'SearchKnowledgeRetrievalConfigModelParameters' from JSON`,
  );
}

/** @internal */
export const SearchKnowledgeRetrievalConfigRerankConfig$inboundSchema:
  z.ZodType<SearchKnowledgeRetrievalConfigRerankConfig, z.ZodTypeDef, unknown> =
    z.object({
      enabled: z.boolean().optional(),
      provider: SearchKnowledgeRetrievalConfigProvider$inboundSchema.optional(),
      model: z.string().optional(),
      model_db_id: z.string().optional(),
      model_type: SearchKnowledgeRetrievalConfigModelType$inboundSchema
        .optional(),
      model_parameters: z.lazy(() =>
        SearchKnowledgeRetrievalConfigModelParameters$inboundSchema
      ).optional(),
    }).transform((v) => {
      return remap$(v, {
        "model_db_id": "modelDbId",
        "model_type": "modelType",
        "model_parameters": "modelParameters",
      });
    });

/** @internal */
export type SearchKnowledgeRetrievalConfigRerankConfig$Outbound = {
  enabled?: boolean | undefined;
  provider?: string | undefined;
  model?: string | undefined;
  model_db_id?: string | undefined;
  model_type?: string | undefined;
  model_parameters?:
    | SearchKnowledgeRetrievalConfigModelParameters$Outbound
    | undefined;
};

/** @internal */
export const SearchKnowledgeRetrievalConfigRerankConfig$outboundSchema:
  z.ZodType<
    SearchKnowledgeRetrievalConfigRerankConfig$Outbound,
    z.ZodTypeDef,
    SearchKnowledgeRetrievalConfigRerankConfig
  > = z.object({
    enabled: z.boolean().optional(),
    provider: SearchKnowledgeRetrievalConfigProvider$outboundSchema.optional(),
    model: z.string().optional(),
    modelDbId: z.string().optional(),
    modelType: SearchKnowledgeRetrievalConfigModelType$outboundSchema
      .optional(),
    modelParameters: z.lazy(() =>
      SearchKnowledgeRetrievalConfigModelParameters$outboundSchema
    ).optional(),
  }).transform((v) => {
    return remap$(v, {
      modelDbId: "model_db_id",
      modelType: "model_type",
      modelParameters: "model_parameters",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SearchKnowledgeRetrievalConfigRerankConfig$ {
  /** @deprecated use `SearchKnowledgeRetrievalConfigRerankConfig$inboundSchema` instead. */
  export const inboundSchema =
    SearchKnowledgeRetrievalConfigRerankConfig$inboundSchema;
  /** @deprecated use `SearchKnowledgeRetrievalConfigRerankConfig$outboundSchema` instead. */
  export const outboundSchema =
    SearchKnowledgeRetrievalConfigRerankConfig$outboundSchema;
  /** @deprecated use `SearchKnowledgeRetrievalConfigRerankConfig$Outbound` instead. */
  export type Outbound = SearchKnowledgeRetrievalConfigRerankConfig$Outbound;
}

export function searchKnowledgeRetrievalConfigRerankConfigToJSON(
  searchKnowledgeRetrievalConfigRerankConfig:
    SearchKnowledgeRetrievalConfigRerankConfig,
): string {
  return JSON.stringify(
    SearchKnowledgeRetrievalConfigRerankConfig$outboundSchema.parse(
      searchKnowledgeRetrievalConfigRerankConfig,
    ),
  );
}

export function searchKnowledgeRetrievalConfigRerankConfigFromJSON(
  jsonString: string,
): SafeParseResult<
  SearchKnowledgeRetrievalConfigRerankConfig,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      SearchKnowledgeRetrievalConfigRerankConfig$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'SearchKnowledgeRetrievalConfigRerankConfig' from JSON`,
  );
}

/** @internal */
export const RetrievalConfig2$inboundSchema: z.ZodType<
  RetrievalConfig2,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: SearchKnowledgeRetrievalConfigType$inboundSchema,
  top_k: z.number().int().default(5),
  threshold: z.number().default(0),
  rerank_config: z.nullable(
    z.lazy(() => SearchKnowledgeRetrievalConfigRerankConfig$inboundSchema),
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    "top_k": "topK",
    "rerank_config": "rerankConfig",
  });
});

/** @internal */
export type RetrievalConfig2$Outbound = {
  type: string;
  top_k: number;
  threshold: number;
  rerank_config?:
    | SearchKnowledgeRetrievalConfigRerankConfig$Outbound
    | null
    | undefined;
};

/** @internal */
export const RetrievalConfig2$outboundSchema: z.ZodType<
  RetrievalConfig2$Outbound,
  z.ZodTypeDef,
  RetrievalConfig2
> = z.object({
  type: SearchKnowledgeRetrievalConfigType$outboundSchema,
  topK: z.number().int().default(5),
  threshold: z.number().default(0),
  rerankConfig: z.nullable(
    z.lazy(() => SearchKnowledgeRetrievalConfigRerankConfig$outboundSchema),
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    topK: "top_k",
    rerankConfig: "rerank_config",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RetrievalConfig2$ {
  /** @deprecated use `RetrievalConfig2$inboundSchema` instead. */
  export const inboundSchema = RetrievalConfig2$inboundSchema;
  /** @deprecated use `RetrievalConfig2$outboundSchema` instead. */
  export const outboundSchema = RetrievalConfig2$outboundSchema;
  /** @deprecated use `RetrievalConfig2$Outbound` instead. */
  export type Outbound = RetrievalConfig2$Outbound;
}

export function retrievalConfig2ToJSON(
  retrievalConfig2: RetrievalConfig2,
): string {
  return JSON.stringify(
    RetrievalConfig2$outboundSchema.parse(retrievalConfig2),
  );
}

export function retrievalConfig2FromJSON(
  jsonString: string,
): SafeParseResult<RetrievalConfig2, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => RetrievalConfig2$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RetrievalConfig2' from JSON`,
  );
}

/** @internal */
export const RetrievalConfigType$inboundSchema: z.ZodNativeEnum<
  typeof RetrievalConfigType
> = z.nativeEnum(RetrievalConfigType);

/** @internal */
export const RetrievalConfigType$outboundSchema: z.ZodNativeEnum<
  typeof RetrievalConfigType
> = RetrievalConfigType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RetrievalConfigType$ {
  /** @deprecated use `RetrievalConfigType$inboundSchema` instead. */
  export const inboundSchema = RetrievalConfigType$inboundSchema;
  /** @deprecated use `RetrievalConfigType$outboundSchema` instead. */
  export const outboundSchema = RetrievalConfigType$outboundSchema;
}

/** @internal */
export const RetrievalConfigProvider$inboundSchema: z.ZodNativeEnum<
  typeof RetrievalConfigProvider
> = z.nativeEnum(RetrievalConfigProvider);

/** @internal */
export const RetrievalConfigProvider$outboundSchema: z.ZodNativeEnum<
  typeof RetrievalConfigProvider
> = RetrievalConfigProvider$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RetrievalConfigProvider$ {
  /** @deprecated use `RetrievalConfigProvider$inboundSchema` instead. */
  export const inboundSchema = RetrievalConfigProvider$inboundSchema;
  /** @deprecated use `RetrievalConfigProvider$outboundSchema` instead. */
  export const outboundSchema = RetrievalConfigProvider$outboundSchema;
}

/** @internal */
export const RetrievalConfigModelType$inboundSchema: z.ZodNativeEnum<
  typeof RetrievalConfigModelType
> = z.nativeEnum(RetrievalConfigModelType);

/** @internal */
export const RetrievalConfigModelType$outboundSchema: z.ZodNativeEnum<
  typeof RetrievalConfigModelType
> = RetrievalConfigModelType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RetrievalConfigModelType$ {
  /** @deprecated use `RetrievalConfigModelType$inboundSchema` instead. */
  export const inboundSchema = RetrievalConfigModelType$inboundSchema;
  /** @deprecated use `RetrievalConfigModelType$outboundSchema` instead. */
  export const outboundSchema = RetrievalConfigModelType$outboundSchema;
}

/** @internal */
export const RetrievalConfigModelParameters$inboundSchema: z.ZodType<
  RetrievalConfigModelParameters,
  z.ZodTypeDef,
  unknown
> = z.object({
  threshold: z.number().optional(),
});

/** @internal */
export type RetrievalConfigModelParameters$Outbound = {
  threshold?: number | undefined;
};

/** @internal */
export const RetrievalConfigModelParameters$outboundSchema: z.ZodType<
  RetrievalConfigModelParameters$Outbound,
  z.ZodTypeDef,
  RetrievalConfigModelParameters
> = z.object({
  threshold: z.number().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RetrievalConfigModelParameters$ {
  /** @deprecated use `RetrievalConfigModelParameters$inboundSchema` instead. */
  export const inboundSchema = RetrievalConfigModelParameters$inboundSchema;
  /** @deprecated use `RetrievalConfigModelParameters$outboundSchema` instead. */
  export const outboundSchema = RetrievalConfigModelParameters$outboundSchema;
  /** @deprecated use `RetrievalConfigModelParameters$Outbound` instead. */
  export type Outbound = RetrievalConfigModelParameters$Outbound;
}

export function retrievalConfigModelParametersToJSON(
  retrievalConfigModelParameters: RetrievalConfigModelParameters,
): string {
  return JSON.stringify(
    RetrievalConfigModelParameters$outboundSchema.parse(
      retrievalConfigModelParameters,
    ),
  );
}

export function retrievalConfigModelParametersFromJSON(
  jsonString: string,
): SafeParseResult<RetrievalConfigModelParameters, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => RetrievalConfigModelParameters$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RetrievalConfigModelParameters' from JSON`,
  );
}

/** @internal */
export const RetrievalConfigRerankConfig$inboundSchema: z.ZodType<
  RetrievalConfigRerankConfig,
  z.ZodTypeDef,
  unknown
> = z.object({
  enabled: z.boolean().optional(),
  provider: RetrievalConfigProvider$inboundSchema.optional(),
  model: z.string().optional(),
  model_db_id: z.string().optional(),
  model_type: RetrievalConfigModelType$inboundSchema.optional(),
  model_parameters: z.lazy(() => RetrievalConfigModelParameters$inboundSchema)
    .optional(),
}).transform((v) => {
  return remap$(v, {
    "model_db_id": "modelDbId",
    "model_type": "modelType",
    "model_parameters": "modelParameters",
  });
});

/** @internal */
export type RetrievalConfigRerankConfig$Outbound = {
  enabled?: boolean | undefined;
  provider?: string | undefined;
  model?: string | undefined;
  model_db_id?: string | undefined;
  model_type?: string | undefined;
  model_parameters?: RetrievalConfigModelParameters$Outbound | undefined;
};

/** @internal */
export const RetrievalConfigRerankConfig$outboundSchema: z.ZodType<
  RetrievalConfigRerankConfig$Outbound,
  z.ZodTypeDef,
  RetrievalConfigRerankConfig
> = z.object({
  enabled: z.boolean().optional(),
  provider: RetrievalConfigProvider$outboundSchema.optional(),
  model: z.string().optional(),
  modelDbId: z.string().optional(),
  modelType: RetrievalConfigModelType$outboundSchema.optional(),
  modelParameters: z.lazy(() => RetrievalConfigModelParameters$outboundSchema)
    .optional(),
}).transform((v) => {
  return remap$(v, {
    modelDbId: "model_db_id",
    modelType: "model_type",
    modelParameters: "model_parameters",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RetrievalConfigRerankConfig$ {
  /** @deprecated use `RetrievalConfigRerankConfig$inboundSchema` instead. */
  export const inboundSchema = RetrievalConfigRerankConfig$inboundSchema;
  /** @deprecated use `RetrievalConfigRerankConfig$outboundSchema` instead. */
  export const outboundSchema = RetrievalConfigRerankConfig$outboundSchema;
  /** @deprecated use `RetrievalConfigRerankConfig$Outbound` instead. */
  export type Outbound = RetrievalConfigRerankConfig$Outbound;
}

export function retrievalConfigRerankConfigToJSON(
  retrievalConfigRerankConfig: RetrievalConfigRerankConfig,
): string {
  return JSON.stringify(
    RetrievalConfigRerankConfig$outboundSchema.parse(
      retrievalConfigRerankConfig,
    ),
  );
}

export function retrievalConfigRerankConfigFromJSON(
  jsonString: string,
): SafeParseResult<RetrievalConfigRerankConfig, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => RetrievalConfigRerankConfig$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RetrievalConfigRerankConfig' from JSON`,
  );
}

/** @internal */
export const RetrievalConfig1$inboundSchema: z.ZodType<
  RetrievalConfig1,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: RetrievalConfigType$inboundSchema,
  top_k: z.number().int().default(5),
  threshold: z.number().default(0),
  rerank_config: z.nullable(
    z.lazy(() => RetrievalConfigRerankConfig$inboundSchema),
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    "top_k": "topK",
    "rerank_config": "rerankConfig",
  });
});

/** @internal */
export type RetrievalConfig1$Outbound = {
  type: string;
  top_k: number;
  threshold: number;
  rerank_config?: RetrievalConfigRerankConfig$Outbound | null | undefined;
};

/** @internal */
export const RetrievalConfig1$outboundSchema: z.ZodType<
  RetrievalConfig1$Outbound,
  z.ZodTypeDef,
  RetrievalConfig1
> = z.object({
  type: RetrievalConfigType$outboundSchema,
  topK: z.number().int().default(5),
  threshold: z.number().default(0),
  rerankConfig: z.nullable(
    z.lazy(() => RetrievalConfigRerankConfig$outboundSchema),
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    topK: "top_k",
    rerankConfig: "rerank_config",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RetrievalConfig1$ {
  /** @deprecated use `RetrievalConfig1$inboundSchema` instead. */
  export const inboundSchema = RetrievalConfig1$inboundSchema;
  /** @deprecated use `RetrievalConfig1$outboundSchema` instead. */
  export const outboundSchema = RetrievalConfig1$outboundSchema;
  /** @deprecated use `RetrievalConfig1$Outbound` instead. */
  export type Outbound = RetrievalConfig1$Outbound;
}

export function retrievalConfig1ToJSON(
  retrievalConfig1: RetrievalConfig1,
): string {
  return JSON.stringify(
    RetrievalConfig1$outboundSchema.parse(retrievalConfig1),
  );
}

export function retrievalConfig1FromJSON(
  jsonString: string,
): SafeParseResult<RetrievalConfig1, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => RetrievalConfig1$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RetrievalConfig1' from JSON`,
  );
}

/** @internal */
export const RetrievalConfig$inboundSchema: z.ZodType<
  RetrievalConfig,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => RetrievalConfig1$inboundSchema),
  z.lazy(() => RetrievalConfig2$inboundSchema),
  z.lazy(() => RetrievalConfig3$inboundSchema),
]);

/** @internal */
export type RetrievalConfig$Outbound =
  | RetrievalConfig1$Outbound
  | RetrievalConfig2$Outbound
  | RetrievalConfig3$Outbound;

/** @internal */
export const RetrievalConfig$outboundSchema: z.ZodType<
  RetrievalConfig$Outbound,
  z.ZodTypeDef,
  RetrievalConfig
> = z.union([
  z.lazy(() => RetrievalConfig1$outboundSchema),
  z.lazy(() => RetrievalConfig2$outboundSchema),
  z.lazy(() => RetrievalConfig3$outboundSchema),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RetrievalConfig$ {
  /** @deprecated use `RetrievalConfig$inboundSchema` instead. */
  export const inboundSchema = RetrievalConfig$inboundSchema;
  /** @deprecated use `RetrievalConfig$outboundSchema` instead. */
  export const outboundSchema = RetrievalConfig$outboundSchema;
  /** @deprecated use `RetrievalConfig$Outbound` instead. */
  export type Outbound = RetrievalConfig$Outbound;
}

export function retrievalConfigToJSON(
  retrievalConfig: RetrievalConfig,
): string {
  return JSON.stringify(RetrievalConfig$outboundSchema.parse(retrievalConfig));
}

export function retrievalConfigFromJSON(
  jsonString: string,
): SafeParseResult<RetrievalConfig, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => RetrievalConfig$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RetrievalConfig' from JSON`,
  );
}

/** @internal */
export const SearchKnowledgeRequestBody$inboundSchema: z.ZodType<
  SearchKnowledgeRequestBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  query: z.string(),
  retrieval_config: z.union([
    z.lazy(() => RetrievalConfig1$inboundSchema),
    z.lazy(() => RetrievalConfig2$inboundSchema),
    z.lazy(() => RetrievalConfig3$inboundSchema),
  ]).optional(),
}).transform((v) => {
  return remap$(v, {
    "retrieval_config": "retrievalConfig",
  });
});

/** @internal */
export type SearchKnowledgeRequestBody$Outbound = {
  query: string;
  retrieval_config?:
    | RetrievalConfig1$Outbound
    | RetrievalConfig2$Outbound
    | RetrievalConfig3$Outbound
    | undefined;
};

/** @internal */
export const SearchKnowledgeRequestBody$outboundSchema: z.ZodType<
  SearchKnowledgeRequestBody$Outbound,
  z.ZodTypeDef,
  SearchKnowledgeRequestBody
> = z.object({
  query: z.string(),
  retrievalConfig: z.union([
    z.lazy(() => RetrievalConfig1$outboundSchema),
    z.lazy(() => RetrievalConfig2$outboundSchema),
    z.lazy(() => RetrievalConfig3$outboundSchema),
  ]).optional(),
}).transform((v) => {
  return remap$(v, {
    retrievalConfig: "retrieval_config",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SearchKnowledgeRequestBody$ {
  /** @deprecated use `SearchKnowledgeRequestBody$inboundSchema` instead. */
  export const inboundSchema = SearchKnowledgeRequestBody$inboundSchema;
  /** @deprecated use `SearchKnowledgeRequestBody$outboundSchema` instead. */
  export const outboundSchema = SearchKnowledgeRequestBody$outboundSchema;
  /** @deprecated use `SearchKnowledgeRequestBody$Outbound` instead. */
  export type Outbound = SearchKnowledgeRequestBody$Outbound;
}

export function searchKnowledgeRequestBodyToJSON(
  searchKnowledgeRequestBody: SearchKnowledgeRequestBody,
): string {
  return JSON.stringify(
    SearchKnowledgeRequestBody$outboundSchema.parse(searchKnowledgeRequestBody),
  );
}

export function searchKnowledgeRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<SearchKnowledgeRequestBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => SearchKnowledgeRequestBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SearchKnowledgeRequestBody' from JSON`,
  );
}

/** @internal */
export const SearchKnowledgeRequest$inboundSchema: z.ZodType<
  SearchKnowledgeRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  knowledge_id: z.string(),
  RequestBody: z.lazy(() => SearchKnowledgeRequestBody$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "knowledge_id": "knowledgeId",
    "RequestBody": "requestBody",
  });
});

/** @internal */
export type SearchKnowledgeRequest$Outbound = {
  knowledge_id: string;
  RequestBody: SearchKnowledgeRequestBody$Outbound;
};

/** @internal */
export const SearchKnowledgeRequest$outboundSchema: z.ZodType<
  SearchKnowledgeRequest$Outbound,
  z.ZodTypeDef,
  SearchKnowledgeRequest
> = z.object({
  knowledgeId: z.string(),
  requestBody: z.lazy(() => SearchKnowledgeRequestBody$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    knowledgeId: "knowledge_id",
    requestBody: "RequestBody",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SearchKnowledgeRequest$ {
  /** @deprecated use `SearchKnowledgeRequest$inboundSchema` instead. */
  export const inboundSchema = SearchKnowledgeRequest$inboundSchema;
  /** @deprecated use `SearchKnowledgeRequest$outboundSchema` instead. */
  export const outboundSchema = SearchKnowledgeRequest$outboundSchema;
  /** @deprecated use `SearchKnowledgeRequest$Outbound` instead. */
  export type Outbound = SearchKnowledgeRequest$Outbound;
}

export function searchKnowledgeRequestToJSON(
  searchKnowledgeRequest: SearchKnowledgeRequest,
): string {
  return JSON.stringify(
    SearchKnowledgeRequest$outboundSchema.parse(searchKnowledgeRequest),
  );
}

export function searchKnowledgeRequestFromJSON(
  jsonString: string,
): SafeParseResult<SearchKnowledgeRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => SearchKnowledgeRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SearchKnowledgeRequest' from JSON`,
  );
}

/** @internal */
export const SearchKnowledgeMetadata$inboundSchema: z.ZodType<
  SearchKnowledgeMetadata,
  z.ZodTypeDef,
  unknown
> = z.object({
  datasource_id: z.string(),
  chunk_id: z.string(),
  file_name: z.string(),
  page_number: z.nullable(z.number()).optional(),
  file_type: z.string(),
}).transform((v) => {
  return remap$(v, {
    "datasource_id": "datasourceId",
    "chunk_id": "chunkId",
    "file_name": "fileName",
    "page_number": "pageNumber",
    "file_type": "fileType",
  });
});

/** @internal */
export type SearchKnowledgeMetadata$Outbound = {
  datasource_id: string;
  chunk_id: string;
  file_name: string;
  page_number?: number | null | undefined;
  file_type: string;
};

/** @internal */
export const SearchKnowledgeMetadata$outboundSchema: z.ZodType<
  SearchKnowledgeMetadata$Outbound,
  z.ZodTypeDef,
  SearchKnowledgeMetadata
> = z.object({
  datasourceId: z.string(),
  chunkId: z.string(),
  fileName: z.string(),
  pageNumber: z.nullable(z.number()).optional(),
  fileType: z.string(),
}).transform((v) => {
  return remap$(v, {
    datasourceId: "datasource_id",
    chunkId: "chunk_id",
    fileName: "file_name",
    pageNumber: "page_number",
    fileType: "file_type",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SearchKnowledgeMetadata$ {
  /** @deprecated use `SearchKnowledgeMetadata$inboundSchema` instead. */
  export const inboundSchema = SearchKnowledgeMetadata$inboundSchema;
  /** @deprecated use `SearchKnowledgeMetadata$outboundSchema` instead. */
  export const outboundSchema = SearchKnowledgeMetadata$outboundSchema;
  /** @deprecated use `SearchKnowledgeMetadata$Outbound` instead. */
  export type Outbound = SearchKnowledgeMetadata$Outbound;
}

export function searchKnowledgeMetadataToJSON(
  searchKnowledgeMetadata: SearchKnowledgeMetadata,
): string {
  return JSON.stringify(
    SearchKnowledgeMetadata$outboundSchema.parse(searchKnowledgeMetadata),
  );
}

export function searchKnowledgeMetadataFromJSON(
  jsonString: string,
): SafeParseResult<SearchKnowledgeMetadata, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => SearchKnowledgeMetadata$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SearchKnowledgeMetadata' from JSON`,
  );
}

/** @internal */
export const SearchKnowledgeDocuments$inboundSchema: z.ZodType<
  SearchKnowledgeDocuments,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  text: z.string(),
  metadata: z.lazy(() => SearchKnowledgeMetadata$inboundSchema),
  score: z.number(),
  rerank_score: z.number().optional(),
}).transform((v) => {
  return remap$(v, {
    "rerank_score": "rerankScore",
  });
});

/** @internal */
export type SearchKnowledgeDocuments$Outbound = {
  id: string;
  text: string;
  metadata: SearchKnowledgeMetadata$Outbound;
  score: number;
  rerank_score?: number | undefined;
};

/** @internal */
export const SearchKnowledgeDocuments$outboundSchema: z.ZodType<
  SearchKnowledgeDocuments$Outbound,
  z.ZodTypeDef,
  SearchKnowledgeDocuments
> = z.object({
  id: z.string(),
  text: z.string(),
  metadata: z.lazy(() => SearchKnowledgeMetadata$outboundSchema),
  score: z.number(),
  rerankScore: z.number().optional(),
}).transform((v) => {
  return remap$(v, {
    rerankScore: "rerank_score",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SearchKnowledgeDocuments$ {
  /** @deprecated use `SearchKnowledgeDocuments$inboundSchema` instead. */
  export const inboundSchema = SearchKnowledgeDocuments$inboundSchema;
  /** @deprecated use `SearchKnowledgeDocuments$outboundSchema` instead. */
  export const outboundSchema = SearchKnowledgeDocuments$outboundSchema;
  /** @deprecated use `SearchKnowledgeDocuments$Outbound` instead. */
  export type Outbound = SearchKnowledgeDocuments$Outbound;
}

export function searchKnowledgeDocumentsToJSON(
  searchKnowledgeDocuments: SearchKnowledgeDocuments,
): string {
  return JSON.stringify(
    SearchKnowledgeDocuments$outboundSchema.parse(searchKnowledgeDocuments),
  );
}

export function searchKnowledgeDocumentsFromJSON(
  jsonString: string,
): SafeParseResult<SearchKnowledgeDocuments, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => SearchKnowledgeDocuments$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SearchKnowledgeDocuments' from JSON`,
  );
}

/** @internal */
export const SearchKnowledgeResponseBody$inboundSchema: z.ZodType<
  SearchKnowledgeResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  knowledge_id: z.string(),
  documents: z.array(z.lazy(() => SearchKnowledgeDocuments$inboundSchema)),
  knowledge_key: z.string(),
  query: z.string(),
}).transform((v) => {
  return remap$(v, {
    "knowledge_id": "knowledgeId",
    "knowledge_key": "knowledgeKey",
  });
});

/** @internal */
export type SearchKnowledgeResponseBody$Outbound = {
  knowledge_id: string;
  documents: Array<SearchKnowledgeDocuments$Outbound>;
  knowledge_key: string;
  query: string;
};

/** @internal */
export const SearchKnowledgeResponseBody$outboundSchema: z.ZodType<
  SearchKnowledgeResponseBody$Outbound,
  z.ZodTypeDef,
  SearchKnowledgeResponseBody
> = z.object({
  knowledgeId: z.string(),
  documents: z.array(z.lazy(() => SearchKnowledgeDocuments$outboundSchema)),
  knowledgeKey: z.string(),
  query: z.string(),
}).transform((v) => {
  return remap$(v, {
    knowledgeId: "knowledge_id",
    knowledgeKey: "knowledge_key",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SearchKnowledgeResponseBody$ {
  /** @deprecated use `SearchKnowledgeResponseBody$inboundSchema` instead. */
  export const inboundSchema = SearchKnowledgeResponseBody$inboundSchema;
  /** @deprecated use `SearchKnowledgeResponseBody$outboundSchema` instead. */
  export const outboundSchema = SearchKnowledgeResponseBody$outboundSchema;
  /** @deprecated use `SearchKnowledgeResponseBody$Outbound` instead. */
  export type Outbound = SearchKnowledgeResponseBody$Outbound;
}

export function searchKnowledgeResponseBodyToJSON(
  searchKnowledgeResponseBody: SearchKnowledgeResponseBody,
): string {
  return JSON.stringify(
    SearchKnowledgeResponseBody$outboundSchema.parse(
      searchKnowledgeResponseBody,
    ),
  );
}

export function searchKnowledgeResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<SearchKnowledgeResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => SearchKnowledgeResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SearchKnowledgeResponseBody' from JSON`,
  );
}
