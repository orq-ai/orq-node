/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * If all, the agent will require approval for all tools. If respect_tool, the agent will require approval for tools that have the requires_approval flag set to true. If none, the agent will not require approval for any tools.
 */
export const UpdateAgentToolApprovalRequired = {
  All: "all",
  RespectTool: "respect_tool",
  None: "none",
} as const;
/**
 * If all, the agent will require approval for all tools. If respect_tool, the agent will require approval for tools that have the requires_approval flag set to true. If none, the agent will not require approval for any tools.
 */
export type UpdateAgentToolApprovalRequired = ClosedEnum<
  typeof UpdateAgentToolApprovalRequired
>;

/**
 * Function tool type
 */
export const UpdateAgentAgentToolInputCRUDAgentsRequestRequestBodySettingsTools14Type =
  {
    Function: "function",
  } as const;
/**
 * Function tool type
 */
export type UpdateAgentAgentToolInputCRUDAgentsRequestRequestBodySettingsTools14Type =
  ClosedEnum<
    typeof UpdateAgentAgentToolInputCRUDAgentsRequestRequestBodySettingsTools14Type
  >;

/**
 * Calls custom function tools defined in the agent configuration. Must reference a pre-created function tool by key or id.
 */
export type AgentToolInputCRUDFunctionTool = {
  /**
   * Function tool type
   */
  type:
    UpdateAgentAgentToolInputCRUDAgentsRequestRequestBodySettingsTools14Type;
  /**
   * The key of the pre-created function tool
   */
  key?: string | undefined;
  /**
   * The ID of the pre-created function tool
   */
  id?: string | undefined;
  /**
   * Whether this tool requires approval before execution
   */
  requiresApproval?: boolean | undefined;
};

/**
 * Code execution tool type
 */
export const UpdateAgentAgentToolInputCRUDAgentsRequestRequestBodySettingsTools13Type =
  {
    Code: "code",
  } as const;
/**
 * Code execution tool type
 */
export type UpdateAgentAgentToolInputCRUDAgentsRequestRequestBodySettingsTools13Type =
  ClosedEnum<
    typeof UpdateAgentAgentToolInputCRUDAgentsRequestRequestBodySettingsTools13Type
  >;

/**
 * Executes code snippets in a sandboxed environment. Must reference a pre-created code tool by key or id.
 */
export type AgentToolInputCRUDCodeExecutionTool = {
  /**
   * Code execution tool type
   */
  type:
    UpdateAgentAgentToolInputCRUDAgentsRequestRequestBodySettingsTools13Type;
  /**
   * The key of the pre-created code tool
   */
  key?: string | undefined;
  /**
   * The ID of the pre-created code tool
   */
  id?: string | undefined;
  /**
   * Whether this tool requires approval before execution
   */
  requiresApproval?: boolean | undefined;
};

/**
 * HTTP tool type
 */
export const UpdateAgentAgentToolInputCRUDAgentsRequestRequestBodySettingsTools12Type =
  {
    Http: "http",
  } as const;
/**
 * HTTP tool type
 */
export type UpdateAgentAgentToolInputCRUDAgentsRequestRequestBodySettingsTools12Type =
  ClosedEnum<
    typeof UpdateAgentAgentToolInputCRUDAgentsRequestRequestBodySettingsTools12Type
  >;

/**
 * Executes HTTP requests to interact with external APIs and web services. Must reference a pre-created HTTP tool by key or id.
 */
export type AgentToolInputCRUDHTTPTool = {
  /**
   * HTTP tool type
   */
  type:
    UpdateAgentAgentToolInputCRUDAgentsRequestRequestBodySettingsTools12Type;
  /**
   * The key of the pre-created HTTP tool
   */
  key?: string | undefined;
  /**
   * The ID of the pre-created HTTP tool
   */
  id?: string | undefined;
  /**
   * Whether this tool requires approval before execution
   */
  requiresApproval?: boolean | undefined;
};

export const UpdateAgentAgentToolInputCRUDAgentsRequestRequestBodySettingsTools11Type =
  {
    CurrentDate: "current_date",
  } as const;
export type UpdateAgentAgentToolInputCRUDAgentsRequestRequestBodySettingsTools11Type =
  ClosedEnum<
    typeof UpdateAgentAgentToolInputCRUDAgentsRequestRequestBodySettingsTools11Type
  >;

/**
 * Returns the current date and time
 */
export type AgentToolInputCRUDCurrentDateTool = {
  type:
    UpdateAgentAgentToolInputCRUDAgentsRequestRequestBodySettingsTools11Type;
  /**
   * Whether this tool requires approval before execution
   */
  requiresApproval?: boolean | undefined;
};

export const UpdateAgentAgentToolInputCRUDAgentsRequestRequestBodySettingsTools10Type =
  {
    QueryKnowledgeBase: "query_knowledge_base",
  } as const;
export type UpdateAgentAgentToolInputCRUDAgentsRequestRequestBodySettingsTools10Type =
  ClosedEnum<
    typeof UpdateAgentAgentToolInputCRUDAgentsRequestRequestBodySettingsTools10Type
  >;

/**
 * Queries knowledge bases for information
 */
export type AgentToolInputCRUDQueryKnowledgeBaseTool = {
  type:
    UpdateAgentAgentToolInputCRUDAgentsRequestRequestBodySettingsTools10Type;
  /**
   * Whether this tool requires approval before execution
   */
  requiresApproval?: boolean | undefined;
};

export const UpdateAgentAgentToolInputCRUDAgentsRequestRequestBodySettingsTools9Type =
  {
    RetrieveKnowledgeBases: "retrieve_knowledge_bases",
  } as const;
export type UpdateAgentAgentToolInputCRUDAgentsRequestRequestBodySettingsTools9Type =
  ClosedEnum<
    typeof UpdateAgentAgentToolInputCRUDAgentsRequestRequestBodySettingsTools9Type
  >;

/**
 * Lists available knowledge bases
 */
export type AgentToolInputCRUDRetrieveKnowledgeBasesTool = {
  type: UpdateAgentAgentToolInputCRUDAgentsRequestRequestBodySettingsTools9Type;
  /**
   * Whether this tool requires approval before execution
   */
  requiresApproval?: boolean | undefined;
};

export const UpdateAgentAgentToolInputCRUDAgentsRequestRequestBodySettingsTools8Type =
  {
    DeleteMemoryDocument: "delete_memory_document",
  } as const;
export type UpdateAgentAgentToolInputCRUDAgentsRequestRequestBodySettingsTools8Type =
  ClosedEnum<
    typeof UpdateAgentAgentToolInputCRUDAgentsRequestRequestBodySettingsTools8Type
  >;

/**
 * Deletes documents from memory stores
 */
export type AgentToolInputCRUDDeleteMemoryDocumentTool = {
  type: UpdateAgentAgentToolInputCRUDAgentsRequestRequestBodySettingsTools8Type;
  /**
   * Whether this tool requires approval before execution
   */
  requiresApproval?: boolean | undefined;
};

export const UpdateAgentAgentToolInputCRUDAgentsRequestRequestBodySettingsTools7Type =
  {
    RetrieveMemoryStores: "retrieve_memory_stores",
  } as const;
export type UpdateAgentAgentToolInputCRUDAgentsRequestRequestBodySettingsTools7Type =
  ClosedEnum<
    typeof UpdateAgentAgentToolInputCRUDAgentsRequestRequestBodySettingsTools7Type
  >;

/**
 * Lists available memory stores
 */
export type AgentToolInputCRUDRetrieveMemoryStoresTool = {
  type: UpdateAgentAgentToolInputCRUDAgentsRequestRequestBodySettingsTools7Type;
  /**
   * Whether this tool requires approval before execution
   */
  requiresApproval?: boolean | undefined;
};

export const UpdateAgentAgentToolInputCRUDAgentsRequestRequestBodySettingsToolsType =
  {
    WriteMemoryStore: "write_memory_store",
  } as const;
export type UpdateAgentAgentToolInputCRUDAgentsRequestRequestBodySettingsToolsType =
  ClosedEnum<
    typeof UpdateAgentAgentToolInputCRUDAgentsRequestRequestBodySettingsToolsType
  >;

/**
 * Writes information to agent memory stores
 */
export type AgentToolInputCRUDWriteMemoryStoreTool = {
  type: UpdateAgentAgentToolInputCRUDAgentsRequestRequestBodySettingsToolsType;
  /**
   * Whether this tool requires approval before execution
   */
  requiresApproval?: boolean | undefined;
};

export const UpdateAgentAgentToolInputCRUDAgentsRequestRequestBodySettingsType =
  {
    QueryMemoryStore: "query_memory_store",
  } as const;
export type UpdateAgentAgentToolInputCRUDAgentsRequestRequestBodySettingsType =
  ClosedEnum<
    typeof UpdateAgentAgentToolInputCRUDAgentsRequestRequestBodySettingsType
  >;

/**
 * Queries agent memory stores for context
 */
export type AgentToolInputCRUDQueryMemoryStoreTool = {
  type: UpdateAgentAgentToolInputCRUDAgentsRequestRequestBodySettingsType;
  /**
   * Whether this tool requires approval before execution
   */
  requiresApproval?: boolean | undefined;
};

export const UpdateAgentAgentToolInputCRUDAgentsRequestRequestBodyType = {
  RetrieveAgents: "retrieve_agents",
} as const;
export type UpdateAgentAgentToolInputCRUDAgentsRequestRequestBodyType =
  ClosedEnum<typeof UpdateAgentAgentToolInputCRUDAgentsRequestRequestBodyType>;

/**
 * Retrieves available agents in the system
 */
export type AgentToolInputCRUDRetrieveAgentsTool = {
  type: UpdateAgentAgentToolInputCRUDAgentsRequestRequestBodyType;
  /**
   * Whether this tool requires approval before execution
   */
  requiresApproval?: boolean | undefined;
};

export const UpdateAgentAgentToolInputCRUDAgentsRequestType = {
  CallSubAgent: "call_sub_agent",
} as const;
export type UpdateAgentAgentToolInputCRUDAgentsRequestType = ClosedEnum<
  typeof UpdateAgentAgentToolInputCRUDAgentsRequestType
>;

/**
 * Delegates tasks to specialized sub-agents
 */
export type AgentToolInputCRUDCallSubAgentTool = {
  type: UpdateAgentAgentToolInputCRUDAgentsRequestType;
  /**
   * Whether this tool requires approval before execution
   */
  requiresApproval?: boolean | undefined;
};

export const UpdateAgentAgentToolInputCRUDAgentsType = {
  WebScraper: "web_scraper",
} as const;
export type UpdateAgentAgentToolInputCRUDAgentsType = ClosedEnum<
  typeof UpdateAgentAgentToolInputCRUDAgentsType
>;

/**
 * Scrapes and extracts content from web pages
 */
export type AgentToolInputCRUDWebScraperTool = {
  type: UpdateAgentAgentToolInputCRUDAgentsType;
  /**
   * Whether this tool requires approval before execution
   */
  requiresApproval?: boolean | undefined;
};

export const UpdateAgentAgentToolInputCRUDType = {
  GoogleSearch: "google_search",
} as const;
export type UpdateAgentAgentToolInputCRUDType = ClosedEnum<
  typeof UpdateAgentAgentToolInputCRUDType
>;

/**
 * Performs Google searches to retrieve web content
 */
export type AgentToolInputCRUDGoogleSearchTool = {
  type: UpdateAgentAgentToolInputCRUDType;
  /**
   * Whether this tool requires approval before execution
   */
  requiresApproval?: boolean | undefined;
};

/**
 * Tool configuration for agent create/update operations. Built-in tools only require a type, while custom tools must reference pre-created tools by key or id.
 */
export type UpdateAgentAgentToolInputCRUD =
  | AgentToolInputCRUDGoogleSearchTool
  | AgentToolInputCRUDWebScraperTool
  | AgentToolInputCRUDCallSubAgentTool
  | AgentToolInputCRUDRetrieveAgentsTool
  | AgentToolInputCRUDQueryMemoryStoreTool
  | AgentToolInputCRUDWriteMemoryStoreTool
  | AgentToolInputCRUDRetrieveMemoryStoresTool
  | AgentToolInputCRUDDeleteMemoryDocumentTool
  | AgentToolInputCRUDRetrieveKnowledgeBasesTool
  | AgentToolInputCRUDQueryKnowledgeBaseTool
  | AgentToolInputCRUDCurrentDateTool
  | AgentToolInputCRUDHTTPTool
  | AgentToolInputCRUDCodeExecutionTool
  | AgentToolInputCRUDFunctionTool;

export type UpdateAgentSettings = {
  /**
   * Maximum iterations(llm calls) before the agent will stop executing.
   */
  maxIterations?: number | undefined;
  /**
   * Maximum time (in seconds) for the agent thinking process. This does not include the time for tool calls and sub agent calls. It will be loosely enforced, the in progress LLM calls will not be terminated and the last assistant message will be returned.
   */
  maxExecutionTime?: number | undefined;
  /**
   * If all, the agent will require approval for all tools. If respect_tool, the agent will require approval for tools that have the requires_approval flag set to true. If none, the agent will not require approval for any tools.
   */
  toolApprovalRequired?: UpdateAgentToolApprovalRequired | undefined;
  /**
   * Tools available to the agent. Built-in tools only need a type, while custom tools (http, code, function) must reference pre-created tools by key or id.
   */
  tools?:
    | Array<
      | AgentToolInputCRUDGoogleSearchTool
      | AgentToolInputCRUDWebScraperTool
      | AgentToolInputCRUDCallSubAgentTool
      | AgentToolInputCRUDRetrieveAgentsTool
      | AgentToolInputCRUDQueryMemoryStoreTool
      | AgentToolInputCRUDWriteMemoryStoreTool
      | AgentToolInputCRUDRetrieveMemoryStoresTool
      | AgentToolInputCRUDDeleteMemoryDocumentTool
      | AgentToolInputCRUDRetrieveKnowledgeBasesTool
      | AgentToolInputCRUDQueryKnowledgeBaseTool
      | AgentToolInputCRUDCurrentDateTool
      | AgentToolInputCRUDHTTPTool
      | AgentToolInputCRUDCodeExecutionTool
      | AgentToolInputCRUDFunctionTool
    >
    | undefined;
};

export type UpdateAgentKnowledgeBases = {
  /**
   * Unique identifier of the knowledge base to search
   */
  knowledgeId: string;
};

export type UpdateAgentTeamOfAgents = {
  /**
   * The unique key of the agent within the workspace
   */
  key: string;
  /**
   * The role of the agent in this context. This is used to give extra information to the leader to help it decide which agent to hand off to.
   */
  role?: string | undefined;
};

export type UpdateAgentRequestBody = {
  key?: string | undefined;
  projectId?: string | undefined;
  role?: string | undefined;
  description?: string | undefined;
  instructions?: string | undefined;
  /**
   * A custom system prompt template for the agent. If omitted, the default template is used.
   */
  systemPrompt?: string | undefined;
  /**
   * The primary language model that powers the agent (e.g., "anthropic/claude-3-sonnet-20240229")
   */
  model?: string | undefined;
  /**
   * Optional array of fallback model IDs to use when the primary model fails. Models are tried in order. All models must support tool calling capabilities.
   */
  fallbackModels?: Array<string> | undefined;
  settings?: UpdateAgentSettings | undefined;
  /**
   * The path where the entity is stored in the project structure. The first element of the path always represents the project name. Any subsequent path element after the project will be created as a folder in the project if it does not exists.
   */
  path?: string | undefined;
  memoryStores?: Array<string> | undefined;
  knowledgeBases?: Array<UpdateAgentKnowledgeBases> | undefined;
  /**
   * The agents that are accessible to this orchestrator. The main agent can hand off to these agents to perform tasks.
   */
  teamOfAgents?: Array<UpdateAgentTeamOfAgents> | undefined;
};

export type UpdateAgentRequest = {
  /**
   * The unique key of the agent to update
   */
  agentKey: string;
  requestBody?: UpdateAgentRequestBody | undefined;
};

/**
 * The status of the agent. `Live` is the latest version of the agent. `Draft` is a version that is not yet published. `Pending` is a version that is pending approval. `Published` is a version that was live and has been replaced by a new version.
 */
export const UpdateAgentStatus = {
  Live: "live",
  Draft: "draft",
  Pending: "pending",
  Published: "published",
} as const;
/**
 * The status of the agent. `Live` is the latest version of the agent. `Draft` is a version that is not yet published. `Pending` is a version that is pending approval. `Published` is a version that was live and has been replaced by a new version.
 */
export type UpdateAgentStatus = ClosedEnum<typeof UpdateAgentStatus>;

/**
 * If all, the agent will require approval for all tools. If respect_tool, the agent will require approval for tools that have the requires_approval flag set to true. If none, the agent will not require approval for any tools.
 */
export const UpdateAgentAgentsToolApprovalRequired = {
  All: "all",
  RespectTool: "respect_tool",
  None: "none",
} as const;
/**
 * If all, the agent will require approval for all tools. If respect_tool, the agent will require approval for tools that have the requires_approval flag set to true. If none, the agent will not require approval for any tools.
 */
export type UpdateAgentAgentsToolApprovalRequired = ClosedEnum<
  typeof UpdateAgentAgentsToolApprovalRequired
>;

export type UpdateAgentConditions = {
  /**
   * The argument of the tool call to evaluate
   */
  condition: string;
  /**
   * The operator to use
   */
  operator: string;
  /**
   * The value to compare against
   */
  value: string;
};

export type UpdateAgentTools = {
  /**
   * The id of the resource
   */
  id: string;
  /**
   * Optional tool key for custom tools
   */
  key?: string | undefined;
  actionType: string;
  displayName?: string | undefined;
  requiresApproval?: boolean | undefined;
  conditions?: Array<UpdateAgentConditions> | undefined;
  /**
   * The id of the resource
   */
  mcpServer?: string | undefined;
  /**
   * Tool execution timeout in seconds (default: 2 minutes, max: 10 minutes)
   */
  timeout?: number | undefined;
};

export type UpdateAgentAgentsSettings = {
  /**
   * Maximum iterations(llm calls) before the agent will stop executing.
   */
  maxIterations?: number | undefined;
  /**
   * Maximum time (in seconds) for the agent thinking process. This does not include the time for tool calls and sub agent calls. It will be loosely enforced, the in progress LLM calls will not be terminated and the last assistant message will be returned.
   */
  maxExecutionTime?: number | undefined;
  /**
   * If all, the agent will require approval for all tools. If respect_tool, the agent will require approval for tools that have the requires_approval flag set to true. If none, the agent will not require approval for any tools.
   */
  toolApprovalRequired?: UpdateAgentAgentsToolApprovalRequired | undefined;
  tools: Array<UpdateAgentTools>;
};

export type UpdateAgentModel = {
  /**
   * The database ID of the primary model
   */
  id: string;
  /**
   * Optional integration ID for custom model configurations
   */
  integrationId?: string | null | undefined;
  /**
   * Optional array of fallback model IDs that will be used automatically in order if the primary model fails
   */
  fallbackModels?: Array<string> | null | undefined;
  /**
   * Maximum number of tokens for model responses
   */
  maxTokens?: number | undefined;
  /**
   * Temperature setting for model responses
   */
  temperature?: number | undefined;
};

export type UpdateAgentAgentsTeamOfAgents = {
  /**
   * The unique key of the agent within the workspace
   */
  key: string;
  /**
   * The role of the agent in this context. This is used to give extra information to the leader to help it decide which agent to hand off to.
   */
  role?: string | undefined;
};

export type UpdateAgentMetrics = {
  totalCost?: number | undefined;
};

export type UpdateAgentAgentsKnowledgeBases = {
  /**
   * Unique identifier of the knowledge base to search
   */
  knowledgeId: string;
};

export const UpdateAgentHiddenPanels = {
  Model: "model",
  Tools: "tools",
  KnowledgeBases: "knowledge_bases",
  Variables: "variables",
  RuntimeConstraints: "runtime_constraints",
} as const;
export type UpdateAgentHiddenPanels = ClosedEnum<
  typeof UpdateAgentHiddenPanels
>;

/**
 * Agent updated successfully
 */
export type UpdateAgentResponseBody = {
  id: string;
  key: string;
  workspaceId: string;
  projectId: string;
  createdById?: string | null | undefined;
  updatedById?: string | null | undefined;
  created?: string | undefined;
  updated?: string | undefined;
  role: string;
  description: string;
  systemPrompt?: string | undefined;
  instructions: string;
  /**
   * The status of the agent. `Live` is the latest version of the agent. `Draft` is a version that is not yet published. `Pending` is a version that is pending approval. `Published` is a version that was live and has been replaced by a new version.
   */
  status: UpdateAgentStatus;
  settings?: UpdateAgentAgentsSettings | undefined;
  model: UpdateAgentModel;
  versionHash?: string | undefined;
  /**
   * The path where the entity is stored in the project structure. The first element of the path always represents the project name. Any subsequent path element after the project will be created as a folder in the project if it does not exists.
   */
  path: string;
  memoryStores: Array<string>;
  /**
   * The agents that are accessible to this orchestrator. The main agent can hand off to these agents to perform tasks.
   */
  teamOfAgents: Array<UpdateAgentAgentsTeamOfAgents>;
  metrics?: UpdateAgentMetrics | undefined;
  /**
   * Extracted variables from agent instructions
   */
  variables?: { [k: string]: any } | undefined;
  /**
   * Agent knowledge bases reference
   */
  knowledgeBases?: Array<UpdateAgentAgentsKnowledgeBases> | undefined;
  /**
   * List of hidden collapsed panels in configuration. Duplicates are not allowed.
   */
  hiddenPanels?: Array<UpdateAgentHiddenPanels> | undefined;
};

/** @internal */
export const UpdateAgentToolApprovalRequired$inboundSchema: z.ZodNativeEnum<
  typeof UpdateAgentToolApprovalRequired
> = z.nativeEnum(UpdateAgentToolApprovalRequired);

/** @internal */
export const UpdateAgentToolApprovalRequired$outboundSchema: z.ZodNativeEnum<
  typeof UpdateAgentToolApprovalRequired
> = UpdateAgentToolApprovalRequired$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateAgentToolApprovalRequired$ {
  /** @deprecated use `UpdateAgentToolApprovalRequired$inboundSchema` instead. */
  export const inboundSchema = UpdateAgentToolApprovalRequired$inboundSchema;
  /** @deprecated use `UpdateAgentToolApprovalRequired$outboundSchema` instead. */
  export const outboundSchema = UpdateAgentToolApprovalRequired$outboundSchema;
}

/** @internal */
export const UpdateAgentAgentToolInputCRUDAgentsRequestRequestBodySettingsTools14Type$inboundSchema:
  z.ZodNativeEnum<
    typeof UpdateAgentAgentToolInputCRUDAgentsRequestRequestBodySettingsTools14Type
  > = z.nativeEnum(
    UpdateAgentAgentToolInputCRUDAgentsRequestRequestBodySettingsTools14Type,
  );

/** @internal */
export const UpdateAgentAgentToolInputCRUDAgentsRequestRequestBodySettingsTools14Type$outboundSchema:
  z.ZodNativeEnum<
    typeof UpdateAgentAgentToolInputCRUDAgentsRequestRequestBodySettingsTools14Type
  > =
    UpdateAgentAgentToolInputCRUDAgentsRequestRequestBodySettingsTools14Type$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateAgentAgentToolInputCRUDAgentsRequestRequestBodySettingsTools14Type$ {
  /** @deprecated use `UpdateAgentAgentToolInputCRUDAgentsRequestRequestBodySettingsTools14Type$inboundSchema` instead. */
  export const inboundSchema =
    UpdateAgentAgentToolInputCRUDAgentsRequestRequestBodySettingsTools14Type$inboundSchema;
  /** @deprecated use `UpdateAgentAgentToolInputCRUDAgentsRequestRequestBodySettingsTools14Type$outboundSchema` instead. */
  export const outboundSchema =
    UpdateAgentAgentToolInputCRUDAgentsRequestRequestBodySettingsTools14Type$outboundSchema;
}

/** @internal */
export const AgentToolInputCRUDFunctionTool$inboundSchema: z.ZodType<
  AgentToolInputCRUDFunctionTool,
  z.ZodTypeDef,
  unknown
> = z.object({
  type:
    UpdateAgentAgentToolInputCRUDAgentsRequestRequestBodySettingsTools14Type$inboundSchema,
  key: z.string().optional(),
  id: z.string().optional(),
  requires_approval: z.boolean().default(false),
}).transform((v) => {
  return remap$(v, {
    "requires_approval": "requiresApproval",
  });
});

/** @internal */
export type AgentToolInputCRUDFunctionTool$Outbound = {
  type: string;
  key?: string | undefined;
  id?: string | undefined;
  requires_approval: boolean;
};

/** @internal */
export const AgentToolInputCRUDFunctionTool$outboundSchema: z.ZodType<
  AgentToolInputCRUDFunctionTool$Outbound,
  z.ZodTypeDef,
  AgentToolInputCRUDFunctionTool
> = z.object({
  type:
    UpdateAgentAgentToolInputCRUDAgentsRequestRequestBodySettingsTools14Type$outboundSchema,
  key: z.string().optional(),
  id: z.string().optional(),
  requiresApproval: z.boolean().default(false),
}).transform((v) => {
  return remap$(v, {
    requiresApproval: "requires_approval",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AgentToolInputCRUDFunctionTool$ {
  /** @deprecated use `AgentToolInputCRUDFunctionTool$inboundSchema` instead. */
  export const inboundSchema = AgentToolInputCRUDFunctionTool$inboundSchema;
  /** @deprecated use `AgentToolInputCRUDFunctionTool$outboundSchema` instead. */
  export const outboundSchema = AgentToolInputCRUDFunctionTool$outboundSchema;
  /** @deprecated use `AgentToolInputCRUDFunctionTool$Outbound` instead. */
  export type Outbound = AgentToolInputCRUDFunctionTool$Outbound;
}

export function agentToolInputCRUDFunctionToolToJSON(
  agentToolInputCRUDFunctionTool: AgentToolInputCRUDFunctionTool,
): string {
  return JSON.stringify(
    AgentToolInputCRUDFunctionTool$outboundSchema.parse(
      agentToolInputCRUDFunctionTool,
    ),
  );
}

export function agentToolInputCRUDFunctionToolFromJSON(
  jsonString: string,
): SafeParseResult<AgentToolInputCRUDFunctionTool, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AgentToolInputCRUDFunctionTool$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AgentToolInputCRUDFunctionTool' from JSON`,
  );
}

/** @internal */
export const UpdateAgentAgentToolInputCRUDAgentsRequestRequestBodySettingsTools13Type$inboundSchema:
  z.ZodNativeEnum<
    typeof UpdateAgentAgentToolInputCRUDAgentsRequestRequestBodySettingsTools13Type
  > = z.nativeEnum(
    UpdateAgentAgentToolInputCRUDAgentsRequestRequestBodySettingsTools13Type,
  );

/** @internal */
export const UpdateAgentAgentToolInputCRUDAgentsRequestRequestBodySettingsTools13Type$outboundSchema:
  z.ZodNativeEnum<
    typeof UpdateAgentAgentToolInputCRUDAgentsRequestRequestBodySettingsTools13Type
  > =
    UpdateAgentAgentToolInputCRUDAgentsRequestRequestBodySettingsTools13Type$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateAgentAgentToolInputCRUDAgentsRequestRequestBodySettingsTools13Type$ {
  /** @deprecated use `UpdateAgentAgentToolInputCRUDAgentsRequestRequestBodySettingsTools13Type$inboundSchema` instead. */
  export const inboundSchema =
    UpdateAgentAgentToolInputCRUDAgentsRequestRequestBodySettingsTools13Type$inboundSchema;
  /** @deprecated use `UpdateAgentAgentToolInputCRUDAgentsRequestRequestBodySettingsTools13Type$outboundSchema` instead. */
  export const outboundSchema =
    UpdateAgentAgentToolInputCRUDAgentsRequestRequestBodySettingsTools13Type$outboundSchema;
}

/** @internal */
export const AgentToolInputCRUDCodeExecutionTool$inboundSchema: z.ZodType<
  AgentToolInputCRUDCodeExecutionTool,
  z.ZodTypeDef,
  unknown
> = z.object({
  type:
    UpdateAgentAgentToolInputCRUDAgentsRequestRequestBodySettingsTools13Type$inboundSchema,
  key: z.string().optional(),
  id: z.string().optional(),
  requires_approval: z.boolean().default(false),
}).transform((v) => {
  return remap$(v, {
    "requires_approval": "requiresApproval",
  });
});

/** @internal */
export type AgentToolInputCRUDCodeExecutionTool$Outbound = {
  type: string;
  key?: string | undefined;
  id?: string | undefined;
  requires_approval: boolean;
};

/** @internal */
export const AgentToolInputCRUDCodeExecutionTool$outboundSchema: z.ZodType<
  AgentToolInputCRUDCodeExecutionTool$Outbound,
  z.ZodTypeDef,
  AgentToolInputCRUDCodeExecutionTool
> = z.object({
  type:
    UpdateAgentAgentToolInputCRUDAgentsRequestRequestBodySettingsTools13Type$outboundSchema,
  key: z.string().optional(),
  id: z.string().optional(),
  requiresApproval: z.boolean().default(false),
}).transform((v) => {
  return remap$(v, {
    requiresApproval: "requires_approval",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AgentToolInputCRUDCodeExecutionTool$ {
  /** @deprecated use `AgentToolInputCRUDCodeExecutionTool$inboundSchema` instead. */
  export const inboundSchema =
    AgentToolInputCRUDCodeExecutionTool$inboundSchema;
  /** @deprecated use `AgentToolInputCRUDCodeExecutionTool$outboundSchema` instead. */
  export const outboundSchema =
    AgentToolInputCRUDCodeExecutionTool$outboundSchema;
  /** @deprecated use `AgentToolInputCRUDCodeExecutionTool$Outbound` instead. */
  export type Outbound = AgentToolInputCRUDCodeExecutionTool$Outbound;
}

export function agentToolInputCRUDCodeExecutionToolToJSON(
  agentToolInputCRUDCodeExecutionTool: AgentToolInputCRUDCodeExecutionTool,
): string {
  return JSON.stringify(
    AgentToolInputCRUDCodeExecutionTool$outboundSchema.parse(
      agentToolInputCRUDCodeExecutionTool,
    ),
  );
}

export function agentToolInputCRUDCodeExecutionToolFromJSON(
  jsonString: string,
): SafeParseResult<AgentToolInputCRUDCodeExecutionTool, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      AgentToolInputCRUDCodeExecutionTool$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AgentToolInputCRUDCodeExecutionTool' from JSON`,
  );
}

/** @internal */
export const UpdateAgentAgentToolInputCRUDAgentsRequestRequestBodySettingsTools12Type$inboundSchema:
  z.ZodNativeEnum<
    typeof UpdateAgentAgentToolInputCRUDAgentsRequestRequestBodySettingsTools12Type
  > = z.nativeEnum(
    UpdateAgentAgentToolInputCRUDAgentsRequestRequestBodySettingsTools12Type,
  );

/** @internal */
export const UpdateAgentAgentToolInputCRUDAgentsRequestRequestBodySettingsTools12Type$outboundSchema:
  z.ZodNativeEnum<
    typeof UpdateAgentAgentToolInputCRUDAgentsRequestRequestBodySettingsTools12Type
  > =
    UpdateAgentAgentToolInputCRUDAgentsRequestRequestBodySettingsTools12Type$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateAgentAgentToolInputCRUDAgentsRequestRequestBodySettingsTools12Type$ {
  /** @deprecated use `UpdateAgentAgentToolInputCRUDAgentsRequestRequestBodySettingsTools12Type$inboundSchema` instead. */
  export const inboundSchema =
    UpdateAgentAgentToolInputCRUDAgentsRequestRequestBodySettingsTools12Type$inboundSchema;
  /** @deprecated use `UpdateAgentAgentToolInputCRUDAgentsRequestRequestBodySettingsTools12Type$outboundSchema` instead. */
  export const outboundSchema =
    UpdateAgentAgentToolInputCRUDAgentsRequestRequestBodySettingsTools12Type$outboundSchema;
}

/** @internal */
export const AgentToolInputCRUDHTTPTool$inboundSchema: z.ZodType<
  AgentToolInputCRUDHTTPTool,
  z.ZodTypeDef,
  unknown
> = z.object({
  type:
    UpdateAgentAgentToolInputCRUDAgentsRequestRequestBodySettingsTools12Type$inboundSchema,
  key: z.string().optional(),
  id: z.string().optional(),
  requires_approval: z.boolean().default(false),
}).transform((v) => {
  return remap$(v, {
    "requires_approval": "requiresApproval",
  });
});

/** @internal */
export type AgentToolInputCRUDHTTPTool$Outbound = {
  type: string;
  key?: string | undefined;
  id?: string | undefined;
  requires_approval: boolean;
};

/** @internal */
export const AgentToolInputCRUDHTTPTool$outboundSchema: z.ZodType<
  AgentToolInputCRUDHTTPTool$Outbound,
  z.ZodTypeDef,
  AgentToolInputCRUDHTTPTool
> = z.object({
  type:
    UpdateAgentAgentToolInputCRUDAgentsRequestRequestBodySettingsTools12Type$outboundSchema,
  key: z.string().optional(),
  id: z.string().optional(),
  requiresApproval: z.boolean().default(false),
}).transform((v) => {
  return remap$(v, {
    requiresApproval: "requires_approval",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AgentToolInputCRUDHTTPTool$ {
  /** @deprecated use `AgentToolInputCRUDHTTPTool$inboundSchema` instead. */
  export const inboundSchema = AgentToolInputCRUDHTTPTool$inboundSchema;
  /** @deprecated use `AgentToolInputCRUDHTTPTool$outboundSchema` instead. */
  export const outboundSchema = AgentToolInputCRUDHTTPTool$outboundSchema;
  /** @deprecated use `AgentToolInputCRUDHTTPTool$Outbound` instead. */
  export type Outbound = AgentToolInputCRUDHTTPTool$Outbound;
}

export function agentToolInputCRUDHTTPToolToJSON(
  agentToolInputCRUDHTTPTool: AgentToolInputCRUDHTTPTool,
): string {
  return JSON.stringify(
    AgentToolInputCRUDHTTPTool$outboundSchema.parse(agentToolInputCRUDHTTPTool),
  );
}

export function agentToolInputCRUDHTTPToolFromJSON(
  jsonString: string,
): SafeParseResult<AgentToolInputCRUDHTTPTool, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AgentToolInputCRUDHTTPTool$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AgentToolInputCRUDHTTPTool' from JSON`,
  );
}

/** @internal */
export const UpdateAgentAgentToolInputCRUDAgentsRequestRequestBodySettingsTools11Type$inboundSchema:
  z.ZodNativeEnum<
    typeof UpdateAgentAgentToolInputCRUDAgentsRequestRequestBodySettingsTools11Type
  > = z.nativeEnum(
    UpdateAgentAgentToolInputCRUDAgentsRequestRequestBodySettingsTools11Type,
  );

/** @internal */
export const UpdateAgentAgentToolInputCRUDAgentsRequestRequestBodySettingsTools11Type$outboundSchema:
  z.ZodNativeEnum<
    typeof UpdateAgentAgentToolInputCRUDAgentsRequestRequestBodySettingsTools11Type
  > =
    UpdateAgentAgentToolInputCRUDAgentsRequestRequestBodySettingsTools11Type$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateAgentAgentToolInputCRUDAgentsRequestRequestBodySettingsTools11Type$ {
  /** @deprecated use `UpdateAgentAgentToolInputCRUDAgentsRequestRequestBodySettingsTools11Type$inboundSchema` instead. */
  export const inboundSchema =
    UpdateAgentAgentToolInputCRUDAgentsRequestRequestBodySettingsTools11Type$inboundSchema;
  /** @deprecated use `UpdateAgentAgentToolInputCRUDAgentsRequestRequestBodySettingsTools11Type$outboundSchema` instead. */
  export const outboundSchema =
    UpdateAgentAgentToolInputCRUDAgentsRequestRequestBodySettingsTools11Type$outboundSchema;
}

/** @internal */
export const AgentToolInputCRUDCurrentDateTool$inboundSchema: z.ZodType<
  AgentToolInputCRUDCurrentDateTool,
  z.ZodTypeDef,
  unknown
> = z.object({
  type:
    UpdateAgentAgentToolInputCRUDAgentsRequestRequestBodySettingsTools11Type$inboundSchema,
  requires_approval: z.boolean().default(false),
}).transform((v) => {
  return remap$(v, {
    "requires_approval": "requiresApproval",
  });
});

/** @internal */
export type AgentToolInputCRUDCurrentDateTool$Outbound = {
  type: string;
  requires_approval: boolean;
};

/** @internal */
export const AgentToolInputCRUDCurrentDateTool$outboundSchema: z.ZodType<
  AgentToolInputCRUDCurrentDateTool$Outbound,
  z.ZodTypeDef,
  AgentToolInputCRUDCurrentDateTool
> = z.object({
  type:
    UpdateAgentAgentToolInputCRUDAgentsRequestRequestBodySettingsTools11Type$outboundSchema,
  requiresApproval: z.boolean().default(false),
}).transform((v) => {
  return remap$(v, {
    requiresApproval: "requires_approval",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AgentToolInputCRUDCurrentDateTool$ {
  /** @deprecated use `AgentToolInputCRUDCurrentDateTool$inboundSchema` instead. */
  export const inboundSchema = AgentToolInputCRUDCurrentDateTool$inboundSchema;
  /** @deprecated use `AgentToolInputCRUDCurrentDateTool$outboundSchema` instead. */
  export const outboundSchema =
    AgentToolInputCRUDCurrentDateTool$outboundSchema;
  /** @deprecated use `AgentToolInputCRUDCurrentDateTool$Outbound` instead. */
  export type Outbound = AgentToolInputCRUDCurrentDateTool$Outbound;
}

export function agentToolInputCRUDCurrentDateToolToJSON(
  agentToolInputCRUDCurrentDateTool: AgentToolInputCRUDCurrentDateTool,
): string {
  return JSON.stringify(
    AgentToolInputCRUDCurrentDateTool$outboundSchema.parse(
      agentToolInputCRUDCurrentDateTool,
    ),
  );
}

export function agentToolInputCRUDCurrentDateToolFromJSON(
  jsonString: string,
): SafeParseResult<AgentToolInputCRUDCurrentDateTool, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AgentToolInputCRUDCurrentDateTool$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AgentToolInputCRUDCurrentDateTool' from JSON`,
  );
}

/** @internal */
export const UpdateAgentAgentToolInputCRUDAgentsRequestRequestBodySettingsTools10Type$inboundSchema:
  z.ZodNativeEnum<
    typeof UpdateAgentAgentToolInputCRUDAgentsRequestRequestBodySettingsTools10Type
  > = z.nativeEnum(
    UpdateAgentAgentToolInputCRUDAgentsRequestRequestBodySettingsTools10Type,
  );

/** @internal */
export const UpdateAgentAgentToolInputCRUDAgentsRequestRequestBodySettingsTools10Type$outboundSchema:
  z.ZodNativeEnum<
    typeof UpdateAgentAgentToolInputCRUDAgentsRequestRequestBodySettingsTools10Type
  > =
    UpdateAgentAgentToolInputCRUDAgentsRequestRequestBodySettingsTools10Type$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateAgentAgentToolInputCRUDAgentsRequestRequestBodySettingsTools10Type$ {
  /** @deprecated use `UpdateAgentAgentToolInputCRUDAgentsRequestRequestBodySettingsTools10Type$inboundSchema` instead. */
  export const inboundSchema =
    UpdateAgentAgentToolInputCRUDAgentsRequestRequestBodySettingsTools10Type$inboundSchema;
  /** @deprecated use `UpdateAgentAgentToolInputCRUDAgentsRequestRequestBodySettingsTools10Type$outboundSchema` instead. */
  export const outboundSchema =
    UpdateAgentAgentToolInputCRUDAgentsRequestRequestBodySettingsTools10Type$outboundSchema;
}

/** @internal */
export const AgentToolInputCRUDQueryKnowledgeBaseTool$inboundSchema: z.ZodType<
  AgentToolInputCRUDQueryKnowledgeBaseTool,
  z.ZodTypeDef,
  unknown
> = z.object({
  type:
    UpdateAgentAgentToolInputCRUDAgentsRequestRequestBodySettingsTools10Type$inboundSchema,
  requires_approval: z.boolean().default(false),
}).transform((v) => {
  return remap$(v, {
    "requires_approval": "requiresApproval",
  });
});

/** @internal */
export type AgentToolInputCRUDQueryKnowledgeBaseTool$Outbound = {
  type: string;
  requires_approval: boolean;
};

/** @internal */
export const AgentToolInputCRUDQueryKnowledgeBaseTool$outboundSchema: z.ZodType<
  AgentToolInputCRUDQueryKnowledgeBaseTool$Outbound,
  z.ZodTypeDef,
  AgentToolInputCRUDQueryKnowledgeBaseTool
> = z.object({
  type:
    UpdateAgentAgentToolInputCRUDAgentsRequestRequestBodySettingsTools10Type$outboundSchema,
  requiresApproval: z.boolean().default(false),
}).transform((v) => {
  return remap$(v, {
    requiresApproval: "requires_approval",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AgentToolInputCRUDQueryKnowledgeBaseTool$ {
  /** @deprecated use `AgentToolInputCRUDQueryKnowledgeBaseTool$inboundSchema` instead. */
  export const inboundSchema =
    AgentToolInputCRUDQueryKnowledgeBaseTool$inboundSchema;
  /** @deprecated use `AgentToolInputCRUDQueryKnowledgeBaseTool$outboundSchema` instead. */
  export const outboundSchema =
    AgentToolInputCRUDQueryKnowledgeBaseTool$outboundSchema;
  /** @deprecated use `AgentToolInputCRUDQueryKnowledgeBaseTool$Outbound` instead. */
  export type Outbound = AgentToolInputCRUDQueryKnowledgeBaseTool$Outbound;
}

export function agentToolInputCRUDQueryKnowledgeBaseToolToJSON(
  agentToolInputCRUDQueryKnowledgeBaseTool:
    AgentToolInputCRUDQueryKnowledgeBaseTool,
): string {
  return JSON.stringify(
    AgentToolInputCRUDQueryKnowledgeBaseTool$outboundSchema.parse(
      agentToolInputCRUDQueryKnowledgeBaseTool,
    ),
  );
}

export function agentToolInputCRUDQueryKnowledgeBaseToolFromJSON(
  jsonString: string,
): SafeParseResult<
  AgentToolInputCRUDQueryKnowledgeBaseTool,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      AgentToolInputCRUDQueryKnowledgeBaseTool$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'AgentToolInputCRUDQueryKnowledgeBaseTool' from JSON`,
  );
}

/** @internal */
export const UpdateAgentAgentToolInputCRUDAgentsRequestRequestBodySettingsTools9Type$inboundSchema:
  z.ZodNativeEnum<
    typeof UpdateAgentAgentToolInputCRUDAgentsRequestRequestBodySettingsTools9Type
  > = z.nativeEnum(
    UpdateAgentAgentToolInputCRUDAgentsRequestRequestBodySettingsTools9Type,
  );

/** @internal */
export const UpdateAgentAgentToolInputCRUDAgentsRequestRequestBodySettingsTools9Type$outboundSchema:
  z.ZodNativeEnum<
    typeof UpdateAgentAgentToolInputCRUDAgentsRequestRequestBodySettingsTools9Type
  > =
    UpdateAgentAgentToolInputCRUDAgentsRequestRequestBodySettingsTools9Type$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateAgentAgentToolInputCRUDAgentsRequestRequestBodySettingsTools9Type$ {
  /** @deprecated use `UpdateAgentAgentToolInputCRUDAgentsRequestRequestBodySettingsTools9Type$inboundSchema` instead. */
  export const inboundSchema =
    UpdateAgentAgentToolInputCRUDAgentsRequestRequestBodySettingsTools9Type$inboundSchema;
  /** @deprecated use `UpdateAgentAgentToolInputCRUDAgentsRequestRequestBodySettingsTools9Type$outboundSchema` instead. */
  export const outboundSchema =
    UpdateAgentAgentToolInputCRUDAgentsRequestRequestBodySettingsTools9Type$outboundSchema;
}

/** @internal */
export const AgentToolInputCRUDRetrieveKnowledgeBasesTool$inboundSchema:
  z.ZodType<
    AgentToolInputCRUDRetrieveKnowledgeBasesTool,
    z.ZodTypeDef,
    unknown
  > = z.object({
    type:
      UpdateAgentAgentToolInputCRUDAgentsRequestRequestBodySettingsTools9Type$inboundSchema,
    requires_approval: z.boolean().default(false),
  }).transform((v) => {
    return remap$(v, {
      "requires_approval": "requiresApproval",
    });
  });

/** @internal */
export type AgentToolInputCRUDRetrieveKnowledgeBasesTool$Outbound = {
  type: string;
  requires_approval: boolean;
};

/** @internal */
export const AgentToolInputCRUDRetrieveKnowledgeBasesTool$outboundSchema:
  z.ZodType<
    AgentToolInputCRUDRetrieveKnowledgeBasesTool$Outbound,
    z.ZodTypeDef,
    AgentToolInputCRUDRetrieveKnowledgeBasesTool
  > = z.object({
    type:
      UpdateAgentAgentToolInputCRUDAgentsRequestRequestBodySettingsTools9Type$outboundSchema,
    requiresApproval: z.boolean().default(false),
  }).transform((v) => {
    return remap$(v, {
      requiresApproval: "requires_approval",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AgentToolInputCRUDRetrieveKnowledgeBasesTool$ {
  /** @deprecated use `AgentToolInputCRUDRetrieveKnowledgeBasesTool$inboundSchema` instead. */
  export const inboundSchema =
    AgentToolInputCRUDRetrieveKnowledgeBasesTool$inboundSchema;
  /** @deprecated use `AgentToolInputCRUDRetrieveKnowledgeBasesTool$outboundSchema` instead. */
  export const outboundSchema =
    AgentToolInputCRUDRetrieveKnowledgeBasesTool$outboundSchema;
  /** @deprecated use `AgentToolInputCRUDRetrieveKnowledgeBasesTool$Outbound` instead. */
  export type Outbound = AgentToolInputCRUDRetrieveKnowledgeBasesTool$Outbound;
}

export function agentToolInputCRUDRetrieveKnowledgeBasesToolToJSON(
  agentToolInputCRUDRetrieveKnowledgeBasesTool:
    AgentToolInputCRUDRetrieveKnowledgeBasesTool,
): string {
  return JSON.stringify(
    AgentToolInputCRUDRetrieveKnowledgeBasesTool$outboundSchema.parse(
      agentToolInputCRUDRetrieveKnowledgeBasesTool,
    ),
  );
}

export function agentToolInputCRUDRetrieveKnowledgeBasesToolFromJSON(
  jsonString: string,
): SafeParseResult<
  AgentToolInputCRUDRetrieveKnowledgeBasesTool,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      AgentToolInputCRUDRetrieveKnowledgeBasesTool$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'AgentToolInputCRUDRetrieveKnowledgeBasesTool' from JSON`,
  );
}

/** @internal */
export const UpdateAgentAgentToolInputCRUDAgentsRequestRequestBodySettingsTools8Type$inboundSchema:
  z.ZodNativeEnum<
    typeof UpdateAgentAgentToolInputCRUDAgentsRequestRequestBodySettingsTools8Type
  > = z.nativeEnum(
    UpdateAgentAgentToolInputCRUDAgentsRequestRequestBodySettingsTools8Type,
  );

/** @internal */
export const UpdateAgentAgentToolInputCRUDAgentsRequestRequestBodySettingsTools8Type$outboundSchema:
  z.ZodNativeEnum<
    typeof UpdateAgentAgentToolInputCRUDAgentsRequestRequestBodySettingsTools8Type
  > =
    UpdateAgentAgentToolInputCRUDAgentsRequestRequestBodySettingsTools8Type$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateAgentAgentToolInputCRUDAgentsRequestRequestBodySettingsTools8Type$ {
  /** @deprecated use `UpdateAgentAgentToolInputCRUDAgentsRequestRequestBodySettingsTools8Type$inboundSchema` instead. */
  export const inboundSchema =
    UpdateAgentAgentToolInputCRUDAgentsRequestRequestBodySettingsTools8Type$inboundSchema;
  /** @deprecated use `UpdateAgentAgentToolInputCRUDAgentsRequestRequestBodySettingsTools8Type$outboundSchema` instead. */
  export const outboundSchema =
    UpdateAgentAgentToolInputCRUDAgentsRequestRequestBodySettingsTools8Type$outboundSchema;
}

/** @internal */
export const AgentToolInputCRUDDeleteMemoryDocumentTool$inboundSchema:
  z.ZodType<AgentToolInputCRUDDeleteMemoryDocumentTool, z.ZodTypeDef, unknown> =
    z.object({
      type:
        UpdateAgentAgentToolInputCRUDAgentsRequestRequestBodySettingsTools8Type$inboundSchema,
      requires_approval: z.boolean().default(false),
    }).transform((v) => {
      return remap$(v, {
        "requires_approval": "requiresApproval",
      });
    });

/** @internal */
export type AgentToolInputCRUDDeleteMemoryDocumentTool$Outbound = {
  type: string;
  requires_approval: boolean;
};

/** @internal */
export const AgentToolInputCRUDDeleteMemoryDocumentTool$outboundSchema:
  z.ZodType<
    AgentToolInputCRUDDeleteMemoryDocumentTool$Outbound,
    z.ZodTypeDef,
    AgentToolInputCRUDDeleteMemoryDocumentTool
  > = z.object({
    type:
      UpdateAgentAgentToolInputCRUDAgentsRequestRequestBodySettingsTools8Type$outboundSchema,
    requiresApproval: z.boolean().default(false),
  }).transform((v) => {
    return remap$(v, {
      requiresApproval: "requires_approval",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AgentToolInputCRUDDeleteMemoryDocumentTool$ {
  /** @deprecated use `AgentToolInputCRUDDeleteMemoryDocumentTool$inboundSchema` instead. */
  export const inboundSchema =
    AgentToolInputCRUDDeleteMemoryDocumentTool$inboundSchema;
  /** @deprecated use `AgentToolInputCRUDDeleteMemoryDocumentTool$outboundSchema` instead. */
  export const outboundSchema =
    AgentToolInputCRUDDeleteMemoryDocumentTool$outboundSchema;
  /** @deprecated use `AgentToolInputCRUDDeleteMemoryDocumentTool$Outbound` instead. */
  export type Outbound = AgentToolInputCRUDDeleteMemoryDocumentTool$Outbound;
}

export function agentToolInputCRUDDeleteMemoryDocumentToolToJSON(
  agentToolInputCRUDDeleteMemoryDocumentTool:
    AgentToolInputCRUDDeleteMemoryDocumentTool,
): string {
  return JSON.stringify(
    AgentToolInputCRUDDeleteMemoryDocumentTool$outboundSchema.parse(
      agentToolInputCRUDDeleteMemoryDocumentTool,
    ),
  );
}

export function agentToolInputCRUDDeleteMemoryDocumentToolFromJSON(
  jsonString: string,
): SafeParseResult<
  AgentToolInputCRUDDeleteMemoryDocumentTool,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      AgentToolInputCRUDDeleteMemoryDocumentTool$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'AgentToolInputCRUDDeleteMemoryDocumentTool' from JSON`,
  );
}

/** @internal */
export const UpdateAgentAgentToolInputCRUDAgentsRequestRequestBodySettingsTools7Type$inboundSchema:
  z.ZodNativeEnum<
    typeof UpdateAgentAgentToolInputCRUDAgentsRequestRequestBodySettingsTools7Type
  > = z.nativeEnum(
    UpdateAgentAgentToolInputCRUDAgentsRequestRequestBodySettingsTools7Type,
  );

/** @internal */
export const UpdateAgentAgentToolInputCRUDAgentsRequestRequestBodySettingsTools7Type$outboundSchema:
  z.ZodNativeEnum<
    typeof UpdateAgentAgentToolInputCRUDAgentsRequestRequestBodySettingsTools7Type
  > =
    UpdateAgentAgentToolInputCRUDAgentsRequestRequestBodySettingsTools7Type$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateAgentAgentToolInputCRUDAgentsRequestRequestBodySettingsTools7Type$ {
  /** @deprecated use `UpdateAgentAgentToolInputCRUDAgentsRequestRequestBodySettingsTools7Type$inboundSchema` instead. */
  export const inboundSchema =
    UpdateAgentAgentToolInputCRUDAgentsRequestRequestBodySettingsTools7Type$inboundSchema;
  /** @deprecated use `UpdateAgentAgentToolInputCRUDAgentsRequestRequestBodySettingsTools7Type$outboundSchema` instead. */
  export const outboundSchema =
    UpdateAgentAgentToolInputCRUDAgentsRequestRequestBodySettingsTools7Type$outboundSchema;
}

/** @internal */
export const AgentToolInputCRUDRetrieveMemoryStoresTool$inboundSchema:
  z.ZodType<AgentToolInputCRUDRetrieveMemoryStoresTool, z.ZodTypeDef, unknown> =
    z.object({
      type:
        UpdateAgentAgentToolInputCRUDAgentsRequestRequestBodySettingsTools7Type$inboundSchema,
      requires_approval: z.boolean().default(false),
    }).transform((v) => {
      return remap$(v, {
        "requires_approval": "requiresApproval",
      });
    });

/** @internal */
export type AgentToolInputCRUDRetrieveMemoryStoresTool$Outbound = {
  type: string;
  requires_approval: boolean;
};

/** @internal */
export const AgentToolInputCRUDRetrieveMemoryStoresTool$outboundSchema:
  z.ZodType<
    AgentToolInputCRUDRetrieveMemoryStoresTool$Outbound,
    z.ZodTypeDef,
    AgentToolInputCRUDRetrieveMemoryStoresTool
  > = z.object({
    type:
      UpdateAgentAgentToolInputCRUDAgentsRequestRequestBodySettingsTools7Type$outboundSchema,
    requiresApproval: z.boolean().default(false),
  }).transform((v) => {
    return remap$(v, {
      requiresApproval: "requires_approval",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AgentToolInputCRUDRetrieveMemoryStoresTool$ {
  /** @deprecated use `AgentToolInputCRUDRetrieveMemoryStoresTool$inboundSchema` instead. */
  export const inboundSchema =
    AgentToolInputCRUDRetrieveMemoryStoresTool$inboundSchema;
  /** @deprecated use `AgentToolInputCRUDRetrieveMemoryStoresTool$outboundSchema` instead. */
  export const outboundSchema =
    AgentToolInputCRUDRetrieveMemoryStoresTool$outboundSchema;
  /** @deprecated use `AgentToolInputCRUDRetrieveMemoryStoresTool$Outbound` instead. */
  export type Outbound = AgentToolInputCRUDRetrieveMemoryStoresTool$Outbound;
}

export function agentToolInputCRUDRetrieveMemoryStoresToolToJSON(
  agentToolInputCRUDRetrieveMemoryStoresTool:
    AgentToolInputCRUDRetrieveMemoryStoresTool,
): string {
  return JSON.stringify(
    AgentToolInputCRUDRetrieveMemoryStoresTool$outboundSchema.parse(
      agentToolInputCRUDRetrieveMemoryStoresTool,
    ),
  );
}

export function agentToolInputCRUDRetrieveMemoryStoresToolFromJSON(
  jsonString: string,
): SafeParseResult<
  AgentToolInputCRUDRetrieveMemoryStoresTool,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      AgentToolInputCRUDRetrieveMemoryStoresTool$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'AgentToolInputCRUDRetrieveMemoryStoresTool' from JSON`,
  );
}

/** @internal */
export const UpdateAgentAgentToolInputCRUDAgentsRequestRequestBodySettingsToolsType$inboundSchema:
  z.ZodNativeEnum<
    typeof UpdateAgentAgentToolInputCRUDAgentsRequestRequestBodySettingsToolsType
  > = z.nativeEnum(
    UpdateAgentAgentToolInputCRUDAgentsRequestRequestBodySettingsToolsType,
  );

/** @internal */
export const UpdateAgentAgentToolInputCRUDAgentsRequestRequestBodySettingsToolsType$outboundSchema:
  z.ZodNativeEnum<
    typeof UpdateAgentAgentToolInputCRUDAgentsRequestRequestBodySettingsToolsType
  > =
    UpdateAgentAgentToolInputCRUDAgentsRequestRequestBodySettingsToolsType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateAgentAgentToolInputCRUDAgentsRequestRequestBodySettingsToolsType$ {
  /** @deprecated use `UpdateAgentAgentToolInputCRUDAgentsRequestRequestBodySettingsToolsType$inboundSchema` instead. */
  export const inboundSchema =
    UpdateAgentAgentToolInputCRUDAgentsRequestRequestBodySettingsToolsType$inboundSchema;
  /** @deprecated use `UpdateAgentAgentToolInputCRUDAgentsRequestRequestBodySettingsToolsType$outboundSchema` instead. */
  export const outboundSchema =
    UpdateAgentAgentToolInputCRUDAgentsRequestRequestBodySettingsToolsType$outboundSchema;
}

/** @internal */
export const AgentToolInputCRUDWriteMemoryStoreTool$inboundSchema: z.ZodType<
  AgentToolInputCRUDWriteMemoryStoreTool,
  z.ZodTypeDef,
  unknown
> = z.object({
  type:
    UpdateAgentAgentToolInputCRUDAgentsRequestRequestBodySettingsToolsType$inboundSchema,
  requires_approval: z.boolean().default(false),
}).transform((v) => {
  return remap$(v, {
    "requires_approval": "requiresApproval",
  });
});

/** @internal */
export type AgentToolInputCRUDWriteMemoryStoreTool$Outbound = {
  type: string;
  requires_approval: boolean;
};

/** @internal */
export const AgentToolInputCRUDWriteMemoryStoreTool$outboundSchema: z.ZodType<
  AgentToolInputCRUDWriteMemoryStoreTool$Outbound,
  z.ZodTypeDef,
  AgentToolInputCRUDWriteMemoryStoreTool
> = z.object({
  type:
    UpdateAgentAgentToolInputCRUDAgentsRequestRequestBodySettingsToolsType$outboundSchema,
  requiresApproval: z.boolean().default(false),
}).transform((v) => {
  return remap$(v, {
    requiresApproval: "requires_approval",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AgentToolInputCRUDWriteMemoryStoreTool$ {
  /** @deprecated use `AgentToolInputCRUDWriteMemoryStoreTool$inboundSchema` instead. */
  export const inboundSchema =
    AgentToolInputCRUDWriteMemoryStoreTool$inboundSchema;
  /** @deprecated use `AgentToolInputCRUDWriteMemoryStoreTool$outboundSchema` instead. */
  export const outboundSchema =
    AgentToolInputCRUDWriteMemoryStoreTool$outboundSchema;
  /** @deprecated use `AgentToolInputCRUDWriteMemoryStoreTool$Outbound` instead. */
  export type Outbound = AgentToolInputCRUDWriteMemoryStoreTool$Outbound;
}

export function agentToolInputCRUDWriteMemoryStoreToolToJSON(
  agentToolInputCRUDWriteMemoryStoreTool:
    AgentToolInputCRUDWriteMemoryStoreTool,
): string {
  return JSON.stringify(
    AgentToolInputCRUDWriteMemoryStoreTool$outboundSchema.parse(
      agentToolInputCRUDWriteMemoryStoreTool,
    ),
  );
}

export function agentToolInputCRUDWriteMemoryStoreToolFromJSON(
  jsonString: string,
): SafeParseResult<AgentToolInputCRUDWriteMemoryStoreTool, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      AgentToolInputCRUDWriteMemoryStoreTool$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AgentToolInputCRUDWriteMemoryStoreTool' from JSON`,
  );
}

/** @internal */
export const UpdateAgentAgentToolInputCRUDAgentsRequestRequestBodySettingsType$inboundSchema:
  z.ZodNativeEnum<
    typeof UpdateAgentAgentToolInputCRUDAgentsRequestRequestBodySettingsType
  > = z.nativeEnum(
    UpdateAgentAgentToolInputCRUDAgentsRequestRequestBodySettingsType,
  );

/** @internal */
export const UpdateAgentAgentToolInputCRUDAgentsRequestRequestBodySettingsType$outboundSchema:
  z.ZodNativeEnum<
    typeof UpdateAgentAgentToolInputCRUDAgentsRequestRequestBodySettingsType
  > =
    UpdateAgentAgentToolInputCRUDAgentsRequestRequestBodySettingsType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateAgentAgentToolInputCRUDAgentsRequestRequestBodySettingsType$ {
  /** @deprecated use `UpdateAgentAgentToolInputCRUDAgentsRequestRequestBodySettingsType$inboundSchema` instead. */
  export const inboundSchema =
    UpdateAgentAgentToolInputCRUDAgentsRequestRequestBodySettingsType$inboundSchema;
  /** @deprecated use `UpdateAgentAgentToolInputCRUDAgentsRequestRequestBodySettingsType$outboundSchema` instead. */
  export const outboundSchema =
    UpdateAgentAgentToolInputCRUDAgentsRequestRequestBodySettingsType$outboundSchema;
}

/** @internal */
export const AgentToolInputCRUDQueryMemoryStoreTool$inboundSchema: z.ZodType<
  AgentToolInputCRUDQueryMemoryStoreTool,
  z.ZodTypeDef,
  unknown
> = z.object({
  type:
    UpdateAgentAgentToolInputCRUDAgentsRequestRequestBodySettingsType$inboundSchema,
  requires_approval: z.boolean().default(false),
}).transform((v) => {
  return remap$(v, {
    "requires_approval": "requiresApproval",
  });
});

/** @internal */
export type AgentToolInputCRUDQueryMemoryStoreTool$Outbound = {
  type: string;
  requires_approval: boolean;
};

/** @internal */
export const AgentToolInputCRUDQueryMemoryStoreTool$outboundSchema: z.ZodType<
  AgentToolInputCRUDQueryMemoryStoreTool$Outbound,
  z.ZodTypeDef,
  AgentToolInputCRUDQueryMemoryStoreTool
> = z.object({
  type:
    UpdateAgentAgentToolInputCRUDAgentsRequestRequestBodySettingsType$outboundSchema,
  requiresApproval: z.boolean().default(false),
}).transform((v) => {
  return remap$(v, {
    requiresApproval: "requires_approval",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AgentToolInputCRUDQueryMemoryStoreTool$ {
  /** @deprecated use `AgentToolInputCRUDQueryMemoryStoreTool$inboundSchema` instead. */
  export const inboundSchema =
    AgentToolInputCRUDQueryMemoryStoreTool$inboundSchema;
  /** @deprecated use `AgentToolInputCRUDQueryMemoryStoreTool$outboundSchema` instead. */
  export const outboundSchema =
    AgentToolInputCRUDQueryMemoryStoreTool$outboundSchema;
  /** @deprecated use `AgentToolInputCRUDQueryMemoryStoreTool$Outbound` instead. */
  export type Outbound = AgentToolInputCRUDQueryMemoryStoreTool$Outbound;
}

export function agentToolInputCRUDQueryMemoryStoreToolToJSON(
  agentToolInputCRUDQueryMemoryStoreTool:
    AgentToolInputCRUDQueryMemoryStoreTool,
): string {
  return JSON.stringify(
    AgentToolInputCRUDQueryMemoryStoreTool$outboundSchema.parse(
      agentToolInputCRUDQueryMemoryStoreTool,
    ),
  );
}

export function agentToolInputCRUDQueryMemoryStoreToolFromJSON(
  jsonString: string,
): SafeParseResult<AgentToolInputCRUDQueryMemoryStoreTool, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      AgentToolInputCRUDQueryMemoryStoreTool$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AgentToolInputCRUDQueryMemoryStoreTool' from JSON`,
  );
}

/** @internal */
export const UpdateAgentAgentToolInputCRUDAgentsRequestRequestBodyType$inboundSchema:
  z.ZodNativeEnum<
    typeof UpdateAgentAgentToolInputCRUDAgentsRequestRequestBodyType
  > = z.nativeEnum(UpdateAgentAgentToolInputCRUDAgentsRequestRequestBodyType);

/** @internal */
export const UpdateAgentAgentToolInputCRUDAgentsRequestRequestBodyType$outboundSchema:
  z.ZodNativeEnum<
    typeof UpdateAgentAgentToolInputCRUDAgentsRequestRequestBodyType
  > = UpdateAgentAgentToolInputCRUDAgentsRequestRequestBodyType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateAgentAgentToolInputCRUDAgentsRequestRequestBodyType$ {
  /** @deprecated use `UpdateAgentAgentToolInputCRUDAgentsRequestRequestBodyType$inboundSchema` instead. */
  export const inboundSchema =
    UpdateAgentAgentToolInputCRUDAgentsRequestRequestBodyType$inboundSchema;
  /** @deprecated use `UpdateAgentAgentToolInputCRUDAgentsRequestRequestBodyType$outboundSchema` instead. */
  export const outboundSchema =
    UpdateAgentAgentToolInputCRUDAgentsRequestRequestBodyType$outboundSchema;
}

/** @internal */
export const AgentToolInputCRUDRetrieveAgentsTool$inboundSchema: z.ZodType<
  AgentToolInputCRUDRetrieveAgentsTool,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: UpdateAgentAgentToolInputCRUDAgentsRequestRequestBodyType$inboundSchema,
  requires_approval: z.boolean().default(false),
}).transform((v) => {
  return remap$(v, {
    "requires_approval": "requiresApproval",
  });
});

/** @internal */
export type AgentToolInputCRUDRetrieveAgentsTool$Outbound = {
  type: string;
  requires_approval: boolean;
};

/** @internal */
export const AgentToolInputCRUDRetrieveAgentsTool$outboundSchema: z.ZodType<
  AgentToolInputCRUDRetrieveAgentsTool$Outbound,
  z.ZodTypeDef,
  AgentToolInputCRUDRetrieveAgentsTool
> = z.object({
  type:
    UpdateAgentAgentToolInputCRUDAgentsRequestRequestBodyType$outboundSchema,
  requiresApproval: z.boolean().default(false),
}).transform((v) => {
  return remap$(v, {
    requiresApproval: "requires_approval",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AgentToolInputCRUDRetrieveAgentsTool$ {
  /** @deprecated use `AgentToolInputCRUDRetrieveAgentsTool$inboundSchema` instead. */
  export const inboundSchema =
    AgentToolInputCRUDRetrieveAgentsTool$inboundSchema;
  /** @deprecated use `AgentToolInputCRUDRetrieveAgentsTool$outboundSchema` instead. */
  export const outboundSchema =
    AgentToolInputCRUDRetrieveAgentsTool$outboundSchema;
  /** @deprecated use `AgentToolInputCRUDRetrieveAgentsTool$Outbound` instead. */
  export type Outbound = AgentToolInputCRUDRetrieveAgentsTool$Outbound;
}

export function agentToolInputCRUDRetrieveAgentsToolToJSON(
  agentToolInputCRUDRetrieveAgentsTool: AgentToolInputCRUDRetrieveAgentsTool,
): string {
  return JSON.stringify(
    AgentToolInputCRUDRetrieveAgentsTool$outboundSchema.parse(
      agentToolInputCRUDRetrieveAgentsTool,
    ),
  );
}

export function agentToolInputCRUDRetrieveAgentsToolFromJSON(
  jsonString: string,
): SafeParseResult<AgentToolInputCRUDRetrieveAgentsTool, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      AgentToolInputCRUDRetrieveAgentsTool$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AgentToolInputCRUDRetrieveAgentsTool' from JSON`,
  );
}

/** @internal */
export const UpdateAgentAgentToolInputCRUDAgentsRequestType$inboundSchema:
  z.ZodNativeEnum<typeof UpdateAgentAgentToolInputCRUDAgentsRequestType> = z
    .nativeEnum(UpdateAgentAgentToolInputCRUDAgentsRequestType);

/** @internal */
export const UpdateAgentAgentToolInputCRUDAgentsRequestType$outboundSchema:
  z.ZodNativeEnum<typeof UpdateAgentAgentToolInputCRUDAgentsRequestType> =
    UpdateAgentAgentToolInputCRUDAgentsRequestType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateAgentAgentToolInputCRUDAgentsRequestType$ {
  /** @deprecated use `UpdateAgentAgentToolInputCRUDAgentsRequestType$inboundSchema` instead. */
  export const inboundSchema =
    UpdateAgentAgentToolInputCRUDAgentsRequestType$inboundSchema;
  /** @deprecated use `UpdateAgentAgentToolInputCRUDAgentsRequestType$outboundSchema` instead. */
  export const outboundSchema =
    UpdateAgentAgentToolInputCRUDAgentsRequestType$outboundSchema;
}

/** @internal */
export const AgentToolInputCRUDCallSubAgentTool$inboundSchema: z.ZodType<
  AgentToolInputCRUDCallSubAgentTool,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: UpdateAgentAgentToolInputCRUDAgentsRequestType$inboundSchema,
  requires_approval: z.boolean().default(false),
}).transform((v) => {
  return remap$(v, {
    "requires_approval": "requiresApproval",
  });
});

/** @internal */
export type AgentToolInputCRUDCallSubAgentTool$Outbound = {
  type: string;
  requires_approval: boolean;
};

/** @internal */
export const AgentToolInputCRUDCallSubAgentTool$outboundSchema: z.ZodType<
  AgentToolInputCRUDCallSubAgentTool$Outbound,
  z.ZodTypeDef,
  AgentToolInputCRUDCallSubAgentTool
> = z.object({
  type: UpdateAgentAgentToolInputCRUDAgentsRequestType$outboundSchema,
  requiresApproval: z.boolean().default(false),
}).transform((v) => {
  return remap$(v, {
    requiresApproval: "requires_approval",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AgentToolInputCRUDCallSubAgentTool$ {
  /** @deprecated use `AgentToolInputCRUDCallSubAgentTool$inboundSchema` instead. */
  export const inboundSchema = AgentToolInputCRUDCallSubAgentTool$inboundSchema;
  /** @deprecated use `AgentToolInputCRUDCallSubAgentTool$outboundSchema` instead. */
  export const outboundSchema =
    AgentToolInputCRUDCallSubAgentTool$outboundSchema;
  /** @deprecated use `AgentToolInputCRUDCallSubAgentTool$Outbound` instead. */
  export type Outbound = AgentToolInputCRUDCallSubAgentTool$Outbound;
}

export function agentToolInputCRUDCallSubAgentToolToJSON(
  agentToolInputCRUDCallSubAgentTool: AgentToolInputCRUDCallSubAgentTool,
): string {
  return JSON.stringify(
    AgentToolInputCRUDCallSubAgentTool$outboundSchema.parse(
      agentToolInputCRUDCallSubAgentTool,
    ),
  );
}

export function agentToolInputCRUDCallSubAgentToolFromJSON(
  jsonString: string,
): SafeParseResult<AgentToolInputCRUDCallSubAgentTool, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      AgentToolInputCRUDCallSubAgentTool$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AgentToolInputCRUDCallSubAgentTool' from JSON`,
  );
}

/** @internal */
export const UpdateAgentAgentToolInputCRUDAgentsType$inboundSchema:
  z.ZodNativeEnum<typeof UpdateAgentAgentToolInputCRUDAgentsType> = z
    .nativeEnum(UpdateAgentAgentToolInputCRUDAgentsType);

/** @internal */
export const UpdateAgentAgentToolInputCRUDAgentsType$outboundSchema:
  z.ZodNativeEnum<typeof UpdateAgentAgentToolInputCRUDAgentsType> =
    UpdateAgentAgentToolInputCRUDAgentsType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateAgentAgentToolInputCRUDAgentsType$ {
  /** @deprecated use `UpdateAgentAgentToolInputCRUDAgentsType$inboundSchema` instead. */
  export const inboundSchema =
    UpdateAgentAgentToolInputCRUDAgentsType$inboundSchema;
  /** @deprecated use `UpdateAgentAgentToolInputCRUDAgentsType$outboundSchema` instead. */
  export const outboundSchema =
    UpdateAgentAgentToolInputCRUDAgentsType$outboundSchema;
}

/** @internal */
export const AgentToolInputCRUDWebScraperTool$inboundSchema: z.ZodType<
  AgentToolInputCRUDWebScraperTool,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: UpdateAgentAgentToolInputCRUDAgentsType$inboundSchema,
  requires_approval: z.boolean().default(false),
}).transform((v) => {
  return remap$(v, {
    "requires_approval": "requiresApproval",
  });
});

/** @internal */
export type AgentToolInputCRUDWebScraperTool$Outbound = {
  type: string;
  requires_approval: boolean;
};

/** @internal */
export const AgentToolInputCRUDWebScraperTool$outboundSchema: z.ZodType<
  AgentToolInputCRUDWebScraperTool$Outbound,
  z.ZodTypeDef,
  AgentToolInputCRUDWebScraperTool
> = z.object({
  type: UpdateAgentAgentToolInputCRUDAgentsType$outboundSchema,
  requiresApproval: z.boolean().default(false),
}).transform((v) => {
  return remap$(v, {
    requiresApproval: "requires_approval",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AgentToolInputCRUDWebScraperTool$ {
  /** @deprecated use `AgentToolInputCRUDWebScraperTool$inboundSchema` instead. */
  export const inboundSchema = AgentToolInputCRUDWebScraperTool$inboundSchema;
  /** @deprecated use `AgentToolInputCRUDWebScraperTool$outboundSchema` instead. */
  export const outboundSchema = AgentToolInputCRUDWebScraperTool$outboundSchema;
  /** @deprecated use `AgentToolInputCRUDWebScraperTool$Outbound` instead. */
  export type Outbound = AgentToolInputCRUDWebScraperTool$Outbound;
}

export function agentToolInputCRUDWebScraperToolToJSON(
  agentToolInputCRUDWebScraperTool: AgentToolInputCRUDWebScraperTool,
): string {
  return JSON.stringify(
    AgentToolInputCRUDWebScraperTool$outboundSchema.parse(
      agentToolInputCRUDWebScraperTool,
    ),
  );
}

export function agentToolInputCRUDWebScraperToolFromJSON(
  jsonString: string,
): SafeParseResult<AgentToolInputCRUDWebScraperTool, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AgentToolInputCRUDWebScraperTool$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AgentToolInputCRUDWebScraperTool' from JSON`,
  );
}

/** @internal */
export const UpdateAgentAgentToolInputCRUDType$inboundSchema: z.ZodNativeEnum<
  typeof UpdateAgentAgentToolInputCRUDType
> = z.nativeEnum(UpdateAgentAgentToolInputCRUDType);

/** @internal */
export const UpdateAgentAgentToolInputCRUDType$outboundSchema: z.ZodNativeEnum<
  typeof UpdateAgentAgentToolInputCRUDType
> = UpdateAgentAgentToolInputCRUDType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateAgentAgentToolInputCRUDType$ {
  /** @deprecated use `UpdateAgentAgentToolInputCRUDType$inboundSchema` instead. */
  export const inboundSchema = UpdateAgentAgentToolInputCRUDType$inboundSchema;
  /** @deprecated use `UpdateAgentAgentToolInputCRUDType$outboundSchema` instead. */
  export const outboundSchema =
    UpdateAgentAgentToolInputCRUDType$outboundSchema;
}

/** @internal */
export const AgentToolInputCRUDGoogleSearchTool$inboundSchema: z.ZodType<
  AgentToolInputCRUDGoogleSearchTool,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: UpdateAgentAgentToolInputCRUDType$inboundSchema,
  requires_approval: z.boolean().default(false),
}).transform((v) => {
  return remap$(v, {
    "requires_approval": "requiresApproval",
  });
});

/** @internal */
export type AgentToolInputCRUDGoogleSearchTool$Outbound = {
  type: string;
  requires_approval: boolean;
};

/** @internal */
export const AgentToolInputCRUDGoogleSearchTool$outboundSchema: z.ZodType<
  AgentToolInputCRUDGoogleSearchTool$Outbound,
  z.ZodTypeDef,
  AgentToolInputCRUDGoogleSearchTool
> = z.object({
  type: UpdateAgentAgentToolInputCRUDType$outboundSchema,
  requiresApproval: z.boolean().default(false),
}).transform((v) => {
  return remap$(v, {
    requiresApproval: "requires_approval",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AgentToolInputCRUDGoogleSearchTool$ {
  /** @deprecated use `AgentToolInputCRUDGoogleSearchTool$inboundSchema` instead. */
  export const inboundSchema = AgentToolInputCRUDGoogleSearchTool$inboundSchema;
  /** @deprecated use `AgentToolInputCRUDGoogleSearchTool$outboundSchema` instead. */
  export const outboundSchema =
    AgentToolInputCRUDGoogleSearchTool$outboundSchema;
  /** @deprecated use `AgentToolInputCRUDGoogleSearchTool$Outbound` instead. */
  export type Outbound = AgentToolInputCRUDGoogleSearchTool$Outbound;
}

export function agentToolInputCRUDGoogleSearchToolToJSON(
  agentToolInputCRUDGoogleSearchTool: AgentToolInputCRUDGoogleSearchTool,
): string {
  return JSON.stringify(
    AgentToolInputCRUDGoogleSearchTool$outboundSchema.parse(
      agentToolInputCRUDGoogleSearchTool,
    ),
  );
}

export function agentToolInputCRUDGoogleSearchToolFromJSON(
  jsonString: string,
): SafeParseResult<AgentToolInputCRUDGoogleSearchTool, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      AgentToolInputCRUDGoogleSearchTool$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AgentToolInputCRUDGoogleSearchTool' from JSON`,
  );
}

/** @internal */
export const UpdateAgentAgentToolInputCRUD$inboundSchema: z.ZodType<
  UpdateAgentAgentToolInputCRUD,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => AgentToolInputCRUDGoogleSearchTool$inboundSchema),
  z.lazy(() => AgentToolInputCRUDWebScraperTool$inboundSchema),
  z.lazy(() => AgentToolInputCRUDCallSubAgentTool$inboundSchema),
  z.lazy(() => AgentToolInputCRUDRetrieveAgentsTool$inboundSchema),
  z.lazy(() => AgentToolInputCRUDQueryMemoryStoreTool$inboundSchema),
  z.lazy(() => AgentToolInputCRUDWriteMemoryStoreTool$inboundSchema),
  z.lazy(() => AgentToolInputCRUDRetrieveMemoryStoresTool$inboundSchema),
  z.lazy(() => AgentToolInputCRUDDeleteMemoryDocumentTool$inboundSchema),
  z.lazy(() => AgentToolInputCRUDRetrieveKnowledgeBasesTool$inboundSchema),
  z.lazy(() => AgentToolInputCRUDQueryKnowledgeBaseTool$inboundSchema),
  z.lazy(() => AgentToolInputCRUDCurrentDateTool$inboundSchema),
  z.lazy(() => AgentToolInputCRUDHTTPTool$inboundSchema),
  z.lazy(() => AgentToolInputCRUDCodeExecutionTool$inboundSchema),
  z.lazy(() => AgentToolInputCRUDFunctionTool$inboundSchema),
]);

/** @internal */
export type UpdateAgentAgentToolInputCRUD$Outbound =
  | AgentToolInputCRUDGoogleSearchTool$Outbound
  | AgentToolInputCRUDWebScraperTool$Outbound
  | AgentToolInputCRUDCallSubAgentTool$Outbound
  | AgentToolInputCRUDRetrieveAgentsTool$Outbound
  | AgentToolInputCRUDQueryMemoryStoreTool$Outbound
  | AgentToolInputCRUDWriteMemoryStoreTool$Outbound
  | AgentToolInputCRUDRetrieveMemoryStoresTool$Outbound
  | AgentToolInputCRUDDeleteMemoryDocumentTool$Outbound
  | AgentToolInputCRUDRetrieveKnowledgeBasesTool$Outbound
  | AgentToolInputCRUDQueryKnowledgeBaseTool$Outbound
  | AgentToolInputCRUDCurrentDateTool$Outbound
  | AgentToolInputCRUDHTTPTool$Outbound
  | AgentToolInputCRUDCodeExecutionTool$Outbound
  | AgentToolInputCRUDFunctionTool$Outbound;

/** @internal */
export const UpdateAgentAgentToolInputCRUD$outboundSchema: z.ZodType<
  UpdateAgentAgentToolInputCRUD$Outbound,
  z.ZodTypeDef,
  UpdateAgentAgentToolInputCRUD
> = z.union([
  z.lazy(() => AgentToolInputCRUDGoogleSearchTool$outboundSchema),
  z.lazy(() => AgentToolInputCRUDWebScraperTool$outboundSchema),
  z.lazy(() => AgentToolInputCRUDCallSubAgentTool$outboundSchema),
  z.lazy(() => AgentToolInputCRUDRetrieveAgentsTool$outboundSchema),
  z.lazy(() => AgentToolInputCRUDQueryMemoryStoreTool$outboundSchema),
  z.lazy(() => AgentToolInputCRUDWriteMemoryStoreTool$outboundSchema),
  z.lazy(() => AgentToolInputCRUDRetrieveMemoryStoresTool$outboundSchema),
  z.lazy(() => AgentToolInputCRUDDeleteMemoryDocumentTool$outboundSchema),
  z.lazy(() => AgentToolInputCRUDRetrieveKnowledgeBasesTool$outboundSchema),
  z.lazy(() => AgentToolInputCRUDQueryKnowledgeBaseTool$outboundSchema),
  z.lazy(() => AgentToolInputCRUDCurrentDateTool$outboundSchema),
  z.lazy(() => AgentToolInputCRUDHTTPTool$outboundSchema),
  z.lazy(() => AgentToolInputCRUDCodeExecutionTool$outboundSchema),
  z.lazy(() => AgentToolInputCRUDFunctionTool$outboundSchema),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateAgentAgentToolInputCRUD$ {
  /** @deprecated use `UpdateAgentAgentToolInputCRUD$inboundSchema` instead. */
  export const inboundSchema = UpdateAgentAgentToolInputCRUD$inboundSchema;
  /** @deprecated use `UpdateAgentAgentToolInputCRUD$outboundSchema` instead. */
  export const outboundSchema = UpdateAgentAgentToolInputCRUD$outboundSchema;
  /** @deprecated use `UpdateAgentAgentToolInputCRUD$Outbound` instead. */
  export type Outbound = UpdateAgentAgentToolInputCRUD$Outbound;
}

export function updateAgentAgentToolInputCRUDToJSON(
  updateAgentAgentToolInputCRUD: UpdateAgentAgentToolInputCRUD,
): string {
  return JSON.stringify(
    UpdateAgentAgentToolInputCRUD$outboundSchema.parse(
      updateAgentAgentToolInputCRUD,
    ),
  );
}

export function updateAgentAgentToolInputCRUDFromJSON(
  jsonString: string,
): SafeParseResult<UpdateAgentAgentToolInputCRUD, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateAgentAgentToolInputCRUD$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateAgentAgentToolInputCRUD' from JSON`,
  );
}

/** @internal */
export const UpdateAgentSettings$inboundSchema: z.ZodType<
  UpdateAgentSettings,
  z.ZodTypeDef,
  unknown
> = z.object({
  max_iterations: z.number().int().default(15),
  max_execution_time: z.number().int().default(300),
  tool_approval_required: UpdateAgentToolApprovalRequired$inboundSchema.default(
    "respect_tool",
  ),
  tools: z.array(
    z.union([
      z.lazy(() => AgentToolInputCRUDGoogleSearchTool$inboundSchema),
      z.lazy(() => AgentToolInputCRUDWebScraperTool$inboundSchema),
      z.lazy(() => AgentToolInputCRUDCallSubAgentTool$inboundSchema),
      z.lazy(() => AgentToolInputCRUDRetrieveAgentsTool$inboundSchema),
      z.lazy(() => AgentToolInputCRUDQueryMemoryStoreTool$inboundSchema),
      z.lazy(() => AgentToolInputCRUDWriteMemoryStoreTool$inboundSchema),
      z.lazy(() => AgentToolInputCRUDRetrieveMemoryStoresTool$inboundSchema),
      z.lazy(() => AgentToolInputCRUDDeleteMemoryDocumentTool$inboundSchema),
      z.lazy(() => AgentToolInputCRUDRetrieveKnowledgeBasesTool$inboundSchema),
      z.lazy(() => AgentToolInputCRUDQueryKnowledgeBaseTool$inboundSchema),
      z.lazy(() => AgentToolInputCRUDCurrentDateTool$inboundSchema),
      z.lazy(() => AgentToolInputCRUDHTTPTool$inboundSchema),
      z.lazy(() => AgentToolInputCRUDCodeExecutionTool$inboundSchema),
      z.lazy(() => AgentToolInputCRUDFunctionTool$inboundSchema),
    ]),
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    "max_iterations": "maxIterations",
    "max_execution_time": "maxExecutionTime",
    "tool_approval_required": "toolApprovalRequired",
  });
});

/** @internal */
export type UpdateAgentSettings$Outbound = {
  max_iterations: number;
  max_execution_time: number;
  tool_approval_required: string;
  tools?:
    | Array<
      | AgentToolInputCRUDGoogleSearchTool$Outbound
      | AgentToolInputCRUDWebScraperTool$Outbound
      | AgentToolInputCRUDCallSubAgentTool$Outbound
      | AgentToolInputCRUDRetrieveAgentsTool$Outbound
      | AgentToolInputCRUDQueryMemoryStoreTool$Outbound
      | AgentToolInputCRUDWriteMemoryStoreTool$Outbound
      | AgentToolInputCRUDRetrieveMemoryStoresTool$Outbound
      | AgentToolInputCRUDDeleteMemoryDocumentTool$Outbound
      | AgentToolInputCRUDRetrieveKnowledgeBasesTool$Outbound
      | AgentToolInputCRUDQueryKnowledgeBaseTool$Outbound
      | AgentToolInputCRUDCurrentDateTool$Outbound
      | AgentToolInputCRUDHTTPTool$Outbound
      | AgentToolInputCRUDCodeExecutionTool$Outbound
      | AgentToolInputCRUDFunctionTool$Outbound
    >
    | undefined;
};

/** @internal */
export const UpdateAgentSettings$outboundSchema: z.ZodType<
  UpdateAgentSettings$Outbound,
  z.ZodTypeDef,
  UpdateAgentSettings
> = z.object({
  maxIterations: z.number().int().default(15),
  maxExecutionTime: z.number().int().default(300),
  toolApprovalRequired: UpdateAgentToolApprovalRequired$outboundSchema.default(
    "respect_tool",
  ),
  tools: z.array(
    z.union([
      z.lazy(() => AgentToolInputCRUDGoogleSearchTool$outboundSchema),
      z.lazy(() => AgentToolInputCRUDWebScraperTool$outboundSchema),
      z.lazy(() => AgentToolInputCRUDCallSubAgentTool$outboundSchema),
      z.lazy(() => AgentToolInputCRUDRetrieveAgentsTool$outboundSchema),
      z.lazy(() => AgentToolInputCRUDQueryMemoryStoreTool$outboundSchema),
      z.lazy(() => AgentToolInputCRUDWriteMemoryStoreTool$outboundSchema),
      z.lazy(() => AgentToolInputCRUDRetrieveMemoryStoresTool$outboundSchema),
      z.lazy(() => AgentToolInputCRUDDeleteMemoryDocumentTool$outboundSchema),
      z.lazy(() => AgentToolInputCRUDRetrieveKnowledgeBasesTool$outboundSchema),
      z.lazy(() => AgentToolInputCRUDQueryKnowledgeBaseTool$outboundSchema),
      z.lazy(() => AgentToolInputCRUDCurrentDateTool$outboundSchema),
      z.lazy(() => AgentToolInputCRUDHTTPTool$outboundSchema),
      z.lazy(() => AgentToolInputCRUDCodeExecutionTool$outboundSchema),
      z.lazy(() => AgentToolInputCRUDFunctionTool$outboundSchema),
    ]),
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    maxIterations: "max_iterations",
    maxExecutionTime: "max_execution_time",
    toolApprovalRequired: "tool_approval_required",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateAgentSettings$ {
  /** @deprecated use `UpdateAgentSettings$inboundSchema` instead. */
  export const inboundSchema = UpdateAgentSettings$inboundSchema;
  /** @deprecated use `UpdateAgentSettings$outboundSchema` instead. */
  export const outboundSchema = UpdateAgentSettings$outboundSchema;
  /** @deprecated use `UpdateAgentSettings$Outbound` instead. */
  export type Outbound = UpdateAgentSettings$Outbound;
}

export function updateAgentSettingsToJSON(
  updateAgentSettings: UpdateAgentSettings,
): string {
  return JSON.stringify(
    UpdateAgentSettings$outboundSchema.parse(updateAgentSettings),
  );
}

export function updateAgentSettingsFromJSON(
  jsonString: string,
): SafeParseResult<UpdateAgentSettings, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateAgentSettings$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateAgentSettings' from JSON`,
  );
}

/** @internal */
export const UpdateAgentKnowledgeBases$inboundSchema: z.ZodType<
  UpdateAgentKnowledgeBases,
  z.ZodTypeDef,
  unknown
> = z.object({
  knowledge_id: z.string(),
}).transform((v) => {
  return remap$(v, {
    "knowledge_id": "knowledgeId",
  });
});

/** @internal */
export type UpdateAgentKnowledgeBases$Outbound = {
  knowledge_id: string;
};

/** @internal */
export const UpdateAgentKnowledgeBases$outboundSchema: z.ZodType<
  UpdateAgentKnowledgeBases$Outbound,
  z.ZodTypeDef,
  UpdateAgentKnowledgeBases
> = z.object({
  knowledgeId: z.string(),
}).transform((v) => {
  return remap$(v, {
    knowledgeId: "knowledge_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateAgentKnowledgeBases$ {
  /** @deprecated use `UpdateAgentKnowledgeBases$inboundSchema` instead. */
  export const inboundSchema = UpdateAgentKnowledgeBases$inboundSchema;
  /** @deprecated use `UpdateAgentKnowledgeBases$outboundSchema` instead. */
  export const outboundSchema = UpdateAgentKnowledgeBases$outboundSchema;
  /** @deprecated use `UpdateAgentKnowledgeBases$Outbound` instead. */
  export type Outbound = UpdateAgentKnowledgeBases$Outbound;
}

export function updateAgentKnowledgeBasesToJSON(
  updateAgentKnowledgeBases: UpdateAgentKnowledgeBases,
): string {
  return JSON.stringify(
    UpdateAgentKnowledgeBases$outboundSchema.parse(updateAgentKnowledgeBases),
  );
}

export function updateAgentKnowledgeBasesFromJSON(
  jsonString: string,
): SafeParseResult<UpdateAgentKnowledgeBases, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateAgentKnowledgeBases$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateAgentKnowledgeBases' from JSON`,
  );
}

/** @internal */
export const UpdateAgentTeamOfAgents$inboundSchema: z.ZodType<
  UpdateAgentTeamOfAgents,
  z.ZodTypeDef,
  unknown
> = z.object({
  key: z.string(),
  role: z.string().optional(),
});

/** @internal */
export type UpdateAgentTeamOfAgents$Outbound = {
  key: string;
  role?: string | undefined;
};

/** @internal */
export const UpdateAgentTeamOfAgents$outboundSchema: z.ZodType<
  UpdateAgentTeamOfAgents$Outbound,
  z.ZodTypeDef,
  UpdateAgentTeamOfAgents
> = z.object({
  key: z.string(),
  role: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateAgentTeamOfAgents$ {
  /** @deprecated use `UpdateAgentTeamOfAgents$inboundSchema` instead. */
  export const inboundSchema = UpdateAgentTeamOfAgents$inboundSchema;
  /** @deprecated use `UpdateAgentTeamOfAgents$outboundSchema` instead. */
  export const outboundSchema = UpdateAgentTeamOfAgents$outboundSchema;
  /** @deprecated use `UpdateAgentTeamOfAgents$Outbound` instead. */
  export type Outbound = UpdateAgentTeamOfAgents$Outbound;
}

export function updateAgentTeamOfAgentsToJSON(
  updateAgentTeamOfAgents: UpdateAgentTeamOfAgents,
): string {
  return JSON.stringify(
    UpdateAgentTeamOfAgents$outboundSchema.parse(updateAgentTeamOfAgents),
  );
}

export function updateAgentTeamOfAgentsFromJSON(
  jsonString: string,
): SafeParseResult<UpdateAgentTeamOfAgents, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateAgentTeamOfAgents$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateAgentTeamOfAgents' from JSON`,
  );
}

/** @internal */
export const UpdateAgentRequestBody$inboundSchema: z.ZodType<
  UpdateAgentRequestBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  key: z.string().optional(),
  project_id: z.string().optional(),
  role: z.string().optional(),
  description: z.string().optional(),
  instructions: z.string().optional(),
  system_prompt: z.string().optional(),
  model: z.string().optional(),
  fallback_models: z.array(z.string()).optional(),
  settings: z.lazy(() => UpdateAgentSettings$inboundSchema).optional(),
  path: z.string().optional(),
  memory_stores: z.array(z.string()).optional(),
  knowledge_bases: z.array(
    z.lazy(() => UpdateAgentKnowledgeBases$inboundSchema),
  ).optional(),
  team_of_agents: z.array(z.lazy(() => UpdateAgentTeamOfAgents$inboundSchema))
    .optional(),
}).transform((v) => {
  return remap$(v, {
    "project_id": "projectId",
    "system_prompt": "systemPrompt",
    "fallback_models": "fallbackModels",
    "memory_stores": "memoryStores",
    "knowledge_bases": "knowledgeBases",
    "team_of_agents": "teamOfAgents",
  });
});

/** @internal */
export type UpdateAgentRequestBody$Outbound = {
  key?: string | undefined;
  project_id?: string | undefined;
  role?: string | undefined;
  description?: string | undefined;
  instructions?: string | undefined;
  system_prompt?: string | undefined;
  model?: string | undefined;
  fallback_models?: Array<string> | undefined;
  settings?: UpdateAgentSettings$Outbound | undefined;
  path?: string | undefined;
  memory_stores?: Array<string> | undefined;
  knowledge_bases?: Array<UpdateAgentKnowledgeBases$Outbound> | undefined;
  team_of_agents?: Array<UpdateAgentTeamOfAgents$Outbound> | undefined;
};

/** @internal */
export const UpdateAgentRequestBody$outboundSchema: z.ZodType<
  UpdateAgentRequestBody$Outbound,
  z.ZodTypeDef,
  UpdateAgentRequestBody
> = z.object({
  key: z.string().optional(),
  projectId: z.string().optional(),
  role: z.string().optional(),
  description: z.string().optional(),
  instructions: z.string().optional(),
  systemPrompt: z.string().optional(),
  model: z.string().optional(),
  fallbackModels: z.array(z.string()).optional(),
  settings: z.lazy(() => UpdateAgentSettings$outboundSchema).optional(),
  path: z.string().optional(),
  memoryStores: z.array(z.string()).optional(),
  knowledgeBases: z.array(
    z.lazy(() => UpdateAgentKnowledgeBases$outboundSchema),
  ).optional(),
  teamOfAgents: z.array(z.lazy(() => UpdateAgentTeamOfAgents$outboundSchema))
    .optional(),
}).transform((v) => {
  return remap$(v, {
    projectId: "project_id",
    systemPrompt: "system_prompt",
    fallbackModels: "fallback_models",
    memoryStores: "memory_stores",
    knowledgeBases: "knowledge_bases",
    teamOfAgents: "team_of_agents",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateAgentRequestBody$ {
  /** @deprecated use `UpdateAgentRequestBody$inboundSchema` instead. */
  export const inboundSchema = UpdateAgentRequestBody$inboundSchema;
  /** @deprecated use `UpdateAgentRequestBody$outboundSchema` instead. */
  export const outboundSchema = UpdateAgentRequestBody$outboundSchema;
  /** @deprecated use `UpdateAgentRequestBody$Outbound` instead. */
  export type Outbound = UpdateAgentRequestBody$Outbound;
}

export function updateAgentRequestBodyToJSON(
  updateAgentRequestBody: UpdateAgentRequestBody,
): string {
  return JSON.stringify(
    UpdateAgentRequestBody$outboundSchema.parse(updateAgentRequestBody),
  );
}

export function updateAgentRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<UpdateAgentRequestBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateAgentRequestBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateAgentRequestBody' from JSON`,
  );
}

/** @internal */
export const UpdateAgentRequest$inboundSchema: z.ZodType<
  UpdateAgentRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  agent_key: z.string(),
  RequestBody: z.lazy(() => UpdateAgentRequestBody$inboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    "agent_key": "agentKey",
    "RequestBody": "requestBody",
  });
});

/** @internal */
export type UpdateAgentRequest$Outbound = {
  agent_key: string;
  RequestBody?: UpdateAgentRequestBody$Outbound | undefined;
};

/** @internal */
export const UpdateAgentRequest$outboundSchema: z.ZodType<
  UpdateAgentRequest$Outbound,
  z.ZodTypeDef,
  UpdateAgentRequest
> = z.object({
  agentKey: z.string(),
  requestBody: z.lazy(() => UpdateAgentRequestBody$outboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    agentKey: "agent_key",
    requestBody: "RequestBody",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateAgentRequest$ {
  /** @deprecated use `UpdateAgentRequest$inboundSchema` instead. */
  export const inboundSchema = UpdateAgentRequest$inboundSchema;
  /** @deprecated use `UpdateAgentRequest$outboundSchema` instead. */
  export const outboundSchema = UpdateAgentRequest$outboundSchema;
  /** @deprecated use `UpdateAgentRequest$Outbound` instead. */
  export type Outbound = UpdateAgentRequest$Outbound;
}

export function updateAgentRequestToJSON(
  updateAgentRequest: UpdateAgentRequest,
): string {
  return JSON.stringify(
    UpdateAgentRequest$outboundSchema.parse(updateAgentRequest),
  );
}

export function updateAgentRequestFromJSON(
  jsonString: string,
): SafeParseResult<UpdateAgentRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateAgentRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateAgentRequest' from JSON`,
  );
}

/** @internal */
export const UpdateAgentStatus$inboundSchema: z.ZodNativeEnum<
  typeof UpdateAgentStatus
> = z.nativeEnum(UpdateAgentStatus);

/** @internal */
export const UpdateAgentStatus$outboundSchema: z.ZodNativeEnum<
  typeof UpdateAgentStatus
> = UpdateAgentStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateAgentStatus$ {
  /** @deprecated use `UpdateAgentStatus$inboundSchema` instead. */
  export const inboundSchema = UpdateAgentStatus$inboundSchema;
  /** @deprecated use `UpdateAgentStatus$outboundSchema` instead. */
  export const outboundSchema = UpdateAgentStatus$outboundSchema;
}

/** @internal */
export const UpdateAgentAgentsToolApprovalRequired$inboundSchema:
  z.ZodNativeEnum<typeof UpdateAgentAgentsToolApprovalRequired> = z.nativeEnum(
    UpdateAgentAgentsToolApprovalRequired,
  );

/** @internal */
export const UpdateAgentAgentsToolApprovalRequired$outboundSchema:
  z.ZodNativeEnum<typeof UpdateAgentAgentsToolApprovalRequired> =
    UpdateAgentAgentsToolApprovalRequired$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateAgentAgentsToolApprovalRequired$ {
  /** @deprecated use `UpdateAgentAgentsToolApprovalRequired$inboundSchema` instead. */
  export const inboundSchema =
    UpdateAgentAgentsToolApprovalRequired$inboundSchema;
  /** @deprecated use `UpdateAgentAgentsToolApprovalRequired$outboundSchema` instead. */
  export const outboundSchema =
    UpdateAgentAgentsToolApprovalRequired$outboundSchema;
}

/** @internal */
export const UpdateAgentConditions$inboundSchema: z.ZodType<
  UpdateAgentConditions,
  z.ZodTypeDef,
  unknown
> = z.object({
  condition: z.string(),
  operator: z.string(),
  value: z.string(),
});

/** @internal */
export type UpdateAgentConditions$Outbound = {
  condition: string;
  operator: string;
  value: string;
};

/** @internal */
export const UpdateAgentConditions$outboundSchema: z.ZodType<
  UpdateAgentConditions$Outbound,
  z.ZodTypeDef,
  UpdateAgentConditions
> = z.object({
  condition: z.string(),
  operator: z.string(),
  value: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateAgentConditions$ {
  /** @deprecated use `UpdateAgentConditions$inboundSchema` instead. */
  export const inboundSchema = UpdateAgentConditions$inboundSchema;
  /** @deprecated use `UpdateAgentConditions$outboundSchema` instead. */
  export const outboundSchema = UpdateAgentConditions$outboundSchema;
  /** @deprecated use `UpdateAgentConditions$Outbound` instead. */
  export type Outbound = UpdateAgentConditions$Outbound;
}

export function updateAgentConditionsToJSON(
  updateAgentConditions: UpdateAgentConditions,
): string {
  return JSON.stringify(
    UpdateAgentConditions$outboundSchema.parse(updateAgentConditions),
  );
}

export function updateAgentConditionsFromJSON(
  jsonString: string,
): SafeParseResult<UpdateAgentConditions, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateAgentConditions$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateAgentConditions' from JSON`,
  );
}

/** @internal */
export const UpdateAgentTools$inboundSchema: z.ZodType<
  UpdateAgentTools,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  key: z.string().optional(),
  action_type: z.string(),
  display_name: z.string().optional(),
  requires_approval: z.boolean().default(false),
  conditions: z.array(z.lazy(() => UpdateAgentConditions$inboundSchema))
    .optional(),
  mcpServer: z.string().optional(),
  timeout: z.number().default(120),
}).transform((v) => {
  return remap$(v, {
    "action_type": "actionType",
    "display_name": "displayName",
    "requires_approval": "requiresApproval",
  });
});

/** @internal */
export type UpdateAgentTools$Outbound = {
  id: string;
  key?: string | undefined;
  action_type: string;
  display_name?: string | undefined;
  requires_approval: boolean;
  conditions?: Array<UpdateAgentConditions$Outbound> | undefined;
  mcpServer?: string | undefined;
  timeout: number;
};

/** @internal */
export const UpdateAgentTools$outboundSchema: z.ZodType<
  UpdateAgentTools$Outbound,
  z.ZodTypeDef,
  UpdateAgentTools
> = z.object({
  id: z.string(),
  key: z.string().optional(),
  actionType: z.string(),
  displayName: z.string().optional(),
  requiresApproval: z.boolean().default(false),
  conditions: z.array(z.lazy(() => UpdateAgentConditions$outboundSchema))
    .optional(),
  mcpServer: z.string().optional(),
  timeout: z.number().default(120),
}).transform((v) => {
  return remap$(v, {
    actionType: "action_type",
    displayName: "display_name",
    requiresApproval: "requires_approval",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateAgentTools$ {
  /** @deprecated use `UpdateAgentTools$inboundSchema` instead. */
  export const inboundSchema = UpdateAgentTools$inboundSchema;
  /** @deprecated use `UpdateAgentTools$outboundSchema` instead. */
  export const outboundSchema = UpdateAgentTools$outboundSchema;
  /** @deprecated use `UpdateAgentTools$Outbound` instead. */
  export type Outbound = UpdateAgentTools$Outbound;
}

export function updateAgentToolsToJSON(
  updateAgentTools: UpdateAgentTools,
): string {
  return JSON.stringify(
    UpdateAgentTools$outboundSchema.parse(updateAgentTools),
  );
}

export function updateAgentToolsFromJSON(
  jsonString: string,
): SafeParseResult<UpdateAgentTools, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateAgentTools$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateAgentTools' from JSON`,
  );
}

/** @internal */
export const UpdateAgentAgentsSettings$inboundSchema: z.ZodType<
  UpdateAgentAgentsSettings,
  z.ZodTypeDef,
  unknown
> = z.object({
  max_iterations: z.number().int().default(15),
  max_execution_time: z.number().int().default(300),
  tool_approval_required: UpdateAgentAgentsToolApprovalRequired$inboundSchema
    .default("respect_tool"),
  tools: z.array(z.lazy(() => UpdateAgentTools$inboundSchema)),
}).transform((v) => {
  return remap$(v, {
    "max_iterations": "maxIterations",
    "max_execution_time": "maxExecutionTime",
    "tool_approval_required": "toolApprovalRequired",
  });
});

/** @internal */
export type UpdateAgentAgentsSettings$Outbound = {
  max_iterations: number;
  max_execution_time: number;
  tool_approval_required: string;
  tools: Array<UpdateAgentTools$Outbound>;
};

/** @internal */
export const UpdateAgentAgentsSettings$outboundSchema: z.ZodType<
  UpdateAgentAgentsSettings$Outbound,
  z.ZodTypeDef,
  UpdateAgentAgentsSettings
> = z.object({
  maxIterations: z.number().int().default(15),
  maxExecutionTime: z.number().int().default(300),
  toolApprovalRequired: UpdateAgentAgentsToolApprovalRequired$outboundSchema
    .default("respect_tool"),
  tools: z.array(z.lazy(() => UpdateAgentTools$outboundSchema)),
}).transform((v) => {
  return remap$(v, {
    maxIterations: "max_iterations",
    maxExecutionTime: "max_execution_time",
    toolApprovalRequired: "tool_approval_required",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateAgentAgentsSettings$ {
  /** @deprecated use `UpdateAgentAgentsSettings$inboundSchema` instead. */
  export const inboundSchema = UpdateAgentAgentsSettings$inboundSchema;
  /** @deprecated use `UpdateAgentAgentsSettings$outboundSchema` instead. */
  export const outboundSchema = UpdateAgentAgentsSettings$outboundSchema;
  /** @deprecated use `UpdateAgentAgentsSettings$Outbound` instead. */
  export type Outbound = UpdateAgentAgentsSettings$Outbound;
}

export function updateAgentAgentsSettingsToJSON(
  updateAgentAgentsSettings: UpdateAgentAgentsSettings,
): string {
  return JSON.stringify(
    UpdateAgentAgentsSettings$outboundSchema.parse(updateAgentAgentsSettings),
  );
}

export function updateAgentAgentsSettingsFromJSON(
  jsonString: string,
): SafeParseResult<UpdateAgentAgentsSettings, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateAgentAgentsSettings$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateAgentAgentsSettings' from JSON`,
  );
}

/** @internal */
export const UpdateAgentModel$inboundSchema: z.ZodType<
  UpdateAgentModel,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  integration_id: z.nullable(z.string()).optional(),
  fallback_models: z.nullable(z.array(z.string())).optional(),
  max_tokens: z.number().int().optional(),
  temperature: z.number().optional(),
}).transform((v) => {
  return remap$(v, {
    "integration_id": "integrationId",
    "fallback_models": "fallbackModels",
    "max_tokens": "maxTokens",
  });
});

/** @internal */
export type UpdateAgentModel$Outbound = {
  id: string;
  integration_id?: string | null | undefined;
  fallback_models?: Array<string> | null | undefined;
  max_tokens?: number | undefined;
  temperature?: number | undefined;
};

/** @internal */
export const UpdateAgentModel$outboundSchema: z.ZodType<
  UpdateAgentModel$Outbound,
  z.ZodTypeDef,
  UpdateAgentModel
> = z.object({
  id: z.string(),
  integrationId: z.nullable(z.string()).optional(),
  fallbackModels: z.nullable(z.array(z.string())).optional(),
  maxTokens: z.number().int().optional(),
  temperature: z.number().optional(),
}).transform((v) => {
  return remap$(v, {
    integrationId: "integration_id",
    fallbackModels: "fallback_models",
    maxTokens: "max_tokens",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateAgentModel$ {
  /** @deprecated use `UpdateAgentModel$inboundSchema` instead. */
  export const inboundSchema = UpdateAgentModel$inboundSchema;
  /** @deprecated use `UpdateAgentModel$outboundSchema` instead. */
  export const outboundSchema = UpdateAgentModel$outboundSchema;
  /** @deprecated use `UpdateAgentModel$Outbound` instead. */
  export type Outbound = UpdateAgentModel$Outbound;
}

export function updateAgentModelToJSON(
  updateAgentModel: UpdateAgentModel,
): string {
  return JSON.stringify(
    UpdateAgentModel$outboundSchema.parse(updateAgentModel),
  );
}

export function updateAgentModelFromJSON(
  jsonString: string,
): SafeParseResult<UpdateAgentModel, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateAgentModel$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateAgentModel' from JSON`,
  );
}

/** @internal */
export const UpdateAgentAgentsTeamOfAgents$inboundSchema: z.ZodType<
  UpdateAgentAgentsTeamOfAgents,
  z.ZodTypeDef,
  unknown
> = z.object({
  key: z.string(),
  role: z.string().optional(),
});

/** @internal */
export type UpdateAgentAgentsTeamOfAgents$Outbound = {
  key: string;
  role?: string | undefined;
};

/** @internal */
export const UpdateAgentAgentsTeamOfAgents$outboundSchema: z.ZodType<
  UpdateAgentAgentsTeamOfAgents$Outbound,
  z.ZodTypeDef,
  UpdateAgentAgentsTeamOfAgents
> = z.object({
  key: z.string(),
  role: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateAgentAgentsTeamOfAgents$ {
  /** @deprecated use `UpdateAgentAgentsTeamOfAgents$inboundSchema` instead. */
  export const inboundSchema = UpdateAgentAgentsTeamOfAgents$inboundSchema;
  /** @deprecated use `UpdateAgentAgentsTeamOfAgents$outboundSchema` instead. */
  export const outboundSchema = UpdateAgentAgentsTeamOfAgents$outboundSchema;
  /** @deprecated use `UpdateAgentAgentsTeamOfAgents$Outbound` instead. */
  export type Outbound = UpdateAgentAgentsTeamOfAgents$Outbound;
}

export function updateAgentAgentsTeamOfAgentsToJSON(
  updateAgentAgentsTeamOfAgents: UpdateAgentAgentsTeamOfAgents,
): string {
  return JSON.stringify(
    UpdateAgentAgentsTeamOfAgents$outboundSchema.parse(
      updateAgentAgentsTeamOfAgents,
    ),
  );
}

export function updateAgentAgentsTeamOfAgentsFromJSON(
  jsonString: string,
): SafeParseResult<UpdateAgentAgentsTeamOfAgents, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateAgentAgentsTeamOfAgents$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateAgentAgentsTeamOfAgents' from JSON`,
  );
}

/** @internal */
export const UpdateAgentMetrics$inboundSchema: z.ZodType<
  UpdateAgentMetrics,
  z.ZodTypeDef,
  unknown
> = z.object({
  total_cost: z.number().default(0),
}).transform((v) => {
  return remap$(v, {
    "total_cost": "totalCost",
  });
});

/** @internal */
export type UpdateAgentMetrics$Outbound = {
  total_cost: number;
};

/** @internal */
export const UpdateAgentMetrics$outboundSchema: z.ZodType<
  UpdateAgentMetrics$Outbound,
  z.ZodTypeDef,
  UpdateAgentMetrics
> = z.object({
  totalCost: z.number().default(0),
}).transform((v) => {
  return remap$(v, {
    totalCost: "total_cost",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateAgentMetrics$ {
  /** @deprecated use `UpdateAgentMetrics$inboundSchema` instead. */
  export const inboundSchema = UpdateAgentMetrics$inboundSchema;
  /** @deprecated use `UpdateAgentMetrics$outboundSchema` instead. */
  export const outboundSchema = UpdateAgentMetrics$outboundSchema;
  /** @deprecated use `UpdateAgentMetrics$Outbound` instead. */
  export type Outbound = UpdateAgentMetrics$Outbound;
}

export function updateAgentMetricsToJSON(
  updateAgentMetrics: UpdateAgentMetrics,
): string {
  return JSON.stringify(
    UpdateAgentMetrics$outboundSchema.parse(updateAgentMetrics),
  );
}

export function updateAgentMetricsFromJSON(
  jsonString: string,
): SafeParseResult<UpdateAgentMetrics, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateAgentMetrics$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateAgentMetrics' from JSON`,
  );
}

/** @internal */
export const UpdateAgentAgentsKnowledgeBases$inboundSchema: z.ZodType<
  UpdateAgentAgentsKnowledgeBases,
  z.ZodTypeDef,
  unknown
> = z.object({
  knowledge_id: z.string(),
}).transform((v) => {
  return remap$(v, {
    "knowledge_id": "knowledgeId",
  });
});

/** @internal */
export type UpdateAgentAgentsKnowledgeBases$Outbound = {
  knowledge_id: string;
};

/** @internal */
export const UpdateAgentAgentsKnowledgeBases$outboundSchema: z.ZodType<
  UpdateAgentAgentsKnowledgeBases$Outbound,
  z.ZodTypeDef,
  UpdateAgentAgentsKnowledgeBases
> = z.object({
  knowledgeId: z.string(),
}).transform((v) => {
  return remap$(v, {
    knowledgeId: "knowledge_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateAgentAgentsKnowledgeBases$ {
  /** @deprecated use `UpdateAgentAgentsKnowledgeBases$inboundSchema` instead. */
  export const inboundSchema = UpdateAgentAgentsKnowledgeBases$inboundSchema;
  /** @deprecated use `UpdateAgentAgentsKnowledgeBases$outboundSchema` instead. */
  export const outboundSchema = UpdateAgentAgentsKnowledgeBases$outboundSchema;
  /** @deprecated use `UpdateAgentAgentsKnowledgeBases$Outbound` instead. */
  export type Outbound = UpdateAgentAgentsKnowledgeBases$Outbound;
}

export function updateAgentAgentsKnowledgeBasesToJSON(
  updateAgentAgentsKnowledgeBases: UpdateAgentAgentsKnowledgeBases,
): string {
  return JSON.stringify(
    UpdateAgentAgentsKnowledgeBases$outboundSchema.parse(
      updateAgentAgentsKnowledgeBases,
    ),
  );
}

export function updateAgentAgentsKnowledgeBasesFromJSON(
  jsonString: string,
): SafeParseResult<UpdateAgentAgentsKnowledgeBases, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateAgentAgentsKnowledgeBases$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateAgentAgentsKnowledgeBases' from JSON`,
  );
}

/** @internal */
export const UpdateAgentHiddenPanels$inboundSchema: z.ZodNativeEnum<
  typeof UpdateAgentHiddenPanels
> = z.nativeEnum(UpdateAgentHiddenPanels);

/** @internal */
export const UpdateAgentHiddenPanels$outboundSchema: z.ZodNativeEnum<
  typeof UpdateAgentHiddenPanels
> = UpdateAgentHiddenPanels$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateAgentHiddenPanels$ {
  /** @deprecated use `UpdateAgentHiddenPanels$inboundSchema` instead. */
  export const inboundSchema = UpdateAgentHiddenPanels$inboundSchema;
  /** @deprecated use `UpdateAgentHiddenPanels$outboundSchema` instead. */
  export const outboundSchema = UpdateAgentHiddenPanels$outboundSchema;
}

/** @internal */
export const UpdateAgentResponseBody$inboundSchema: z.ZodType<
  UpdateAgentResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  _id: z.string(),
  key: z.string(),
  workspace_id: z.string(),
  project_id: z.string(),
  created_by_id: z.nullable(z.string()).optional(),
  updated_by_id: z.nullable(z.string()).optional(),
  created: z.string().optional(),
  updated: z.string().optional(),
  role: z.string(),
  description: z.string(),
  system_prompt: z.string().optional(),
  instructions: z.string(),
  status: UpdateAgentStatus$inboundSchema,
  settings: z.lazy(() => UpdateAgentAgentsSettings$inboundSchema).optional(),
  model: z.lazy(() => UpdateAgentModel$inboundSchema),
  version_hash: z.string().optional(),
  path: z.string(),
  memory_stores: z.array(z.string()),
  team_of_agents: z.array(
    z.lazy(() => UpdateAgentAgentsTeamOfAgents$inboundSchema),
  ),
  metrics: z.lazy(() => UpdateAgentMetrics$inboundSchema).optional(),
  variables: z.record(z.any()).optional(),
  knowledge_bases: z.array(
    z.lazy(() => UpdateAgentAgentsKnowledgeBases$inboundSchema),
  ).optional(),
  hidden_panels: z.array(UpdateAgentHiddenPanels$inboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    "_id": "id",
    "workspace_id": "workspaceId",
    "project_id": "projectId",
    "created_by_id": "createdById",
    "updated_by_id": "updatedById",
    "system_prompt": "systemPrompt",
    "version_hash": "versionHash",
    "memory_stores": "memoryStores",
    "team_of_agents": "teamOfAgents",
    "knowledge_bases": "knowledgeBases",
    "hidden_panels": "hiddenPanels",
  });
});

/** @internal */
export type UpdateAgentResponseBody$Outbound = {
  _id: string;
  key: string;
  workspace_id: string;
  project_id: string;
  created_by_id?: string | null | undefined;
  updated_by_id?: string | null | undefined;
  created?: string | undefined;
  updated?: string | undefined;
  role: string;
  description: string;
  system_prompt?: string | undefined;
  instructions: string;
  status: string;
  settings?: UpdateAgentAgentsSettings$Outbound | undefined;
  model: UpdateAgentModel$Outbound;
  version_hash?: string | undefined;
  path: string;
  memory_stores: Array<string>;
  team_of_agents: Array<UpdateAgentAgentsTeamOfAgents$Outbound>;
  metrics?: UpdateAgentMetrics$Outbound | undefined;
  variables?: { [k: string]: any } | undefined;
  knowledge_bases?: Array<UpdateAgentAgentsKnowledgeBases$Outbound> | undefined;
  hidden_panels?: Array<string> | undefined;
};

/** @internal */
export const UpdateAgentResponseBody$outboundSchema: z.ZodType<
  UpdateAgentResponseBody$Outbound,
  z.ZodTypeDef,
  UpdateAgentResponseBody
> = z.object({
  id: z.string(),
  key: z.string(),
  workspaceId: z.string(),
  projectId: z.string(),
  createdById: z.nullable(z.string()).optional(),
  updatedById: z.nullable(z.string()).optional(),
  created: z.string().optional(),
  updated: z.string().optional(),
  role: z.string(),
  description: z.string(),
  systemPrompt: z.string().optional(),
  instructions: z.string(),
  status: UpdateAgentStatus$outboundSchema,
  settings: z.lazy(() => UpdateAgentAgentsSettings$outboundSchema).optional(),
  model: z.lazy(() => UpdateAgentModel$outboundSchema),
  versionHash: z.string().optional(),
  path: z.string(),
  memoryStores: z.array(z.string()),
  teamOfAgents: z.array(
    z.lazy(() => UpdateAgentAgentsTeamOfAgents$outboundSchema),
  ),
  metrics: z.lazy(() => UpdateAgentMetrics$outboundSchema).optional(),
  variables: z.record(z.any()).optional(),
  knowledgeBases: z.array(
    z.lazy(() => UpdateAgentAgentsKnowledgeBases$outboundSchema),
  ).optional(),
  hiddenPanels: z.array(UpdateAgentHiddenPanels$outboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    id: "_id",
    workspaceId: "workspace_id",
    projectId: "project_id",
    createdById: "created_by_id",
    updatedById: "updated_by_id",
    systemPrompt: "system_prompt",
    versionHash: "version_hash",
    memoryStores: "memory_stores",
    teamOfAgents: "team_of_agents",
    knowledgeBases: "knowledge_bases",
    hiddenPanels: "hidden_panels",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateAgentResponseBody$ {
  /** @deprecated use `UpdateAgentResponseBody$inboundSchema` instead. */
  export const inboundSchema = UpdateAgentResponseBody$inboundSchema;
  /** @deprecated use `UpdateAgentResponseBody$outboundSchema` instead. */
  export const outboundSchema = UpdateAgentResponseBody$outboundSchema;
  /** @deprecated use `UpdateAgentResponseBody$Outbound` instead. */
  export type Outbound = UpdateAgentResponseBody$Outbound;
}

export function updateAgentResponseBodyToJSON(
  updateAgentResponseBody: UpdateAgentResponseBody,
): string {
  return JSON.stringify(
    UpdateAgentResponseBody$outboundSchema.parse(updateAgentResponseBody),
  );
}

export function updateAgentResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<UpdateAgentResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateAgentResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateAgentResponseBody' from JSON`,
  );
}
