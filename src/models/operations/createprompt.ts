/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * The type of the model
 */
export const ModelType = {
  Chat: "chat",
  Completion: "completion",
  Embedding: "embedding",
  Vision: "vision",
  Image: "image",
  Tts: "tts",
  Stt: "stt",
  Rerank: "rerank",
} as const;
/**
 * The type of the model
 */
export type ModelType = ClosedEnum<typeof ModelType>;

/**
 * Only supported on `image` models.
 */
export const Format = {
  Url: "url",
  B64Json: "b64_json",
  Text: "text",
  JsonObject: "json_object",
} as const;
/**
 * Only supported on `image` models.
 */
export type Format = ClosedEnum<typeof Format>;

/**
 * Only supported on `image` models.
 */
export const Quality = {
  Standard: "standard",
  Hd: "hd",
} as const;
/**
 * Only supported on `image` models.
 */
export type Quality = ClosedEnum<typeof Quality>;

export const CreatePromptResponseFormatType = {
  JsonObject: "json_object",
} as const;
export type CreatePromptResponseFormatType = ClosedEnum<
  typeof CreatePromptResponseFormatType
>;

export type ResponseFormat2 = {
  type: CreatePromptResponseFormatType;
};

export const ResponseFormatType = {
  JsonSchema: "json_schema",
} as const;
export type ResponseFormatType = ClosedEnum<typeof ResponseFormatType>;

export type JsonSchema = {
  name: string;
  strict: boolean;
  schema: { [k: string]: any };
};

export type ResponseFormat1 = {
  type: ResponseFormatType;
  jsonSchema: JsonSchema;
};

/**
 * An object specifying the format that the model must output.
 *
 * @remarks
 *
 *  Setting to `{ "type": "json_schema", "json_schema": {...} }` enables Structured Outputs which ensures the model will match your supplied JSON schema
 *
 *  Setting to `{ "type": "json_object" }` enables JSON mode, which ensures the message the model generates is valid JSON.
 *
 * Important: when using JSON mode, you must also instruct the model to produce JSON yourself via a system or user message. Without this, the model may generate an unending stream of whitespace until the generation reaches the token limit, resulting in a long-running and seemingly "stuck" request. Also note that the message content may be partially cut off if finish_reason="length", which indicates the generation exceeded max_tokens or the conversation exceeded the max context length.
 */
export type ResponseFormat = ResponseFormat2 | ResponseFormat1;

/**
 * The version of photoReal to use. Must be v1 or v2. Only available for `leonardoai` provider
 */
export const PhotoRealVersion = {
  V1: "v1",
  V2: "v2",
} as const;
/**
 * The version of photoReal to use. Must be v1 or v2. Only available for `leonardoai` provider
 */
export type PhotoRealVersion = ClosedEnum<typeof PhotoRealVersion>;

/**
 * The format to return the embeddings
 */
export const EncodingFormat = {
  Float: "float",
  Base64: "base64",
} as const;
/**
 * The format to return the embeddings
 */
export type EncodingFormat = ClosedEnum<typeof EncodingFormat>;

/**
 * Model Parameters: Not all parameters apply to every model
 */
export type ModelParameters = {
  /**
   * Only supported on `chat` and `completion` models.
   */
  temperature?: number | undefined;
  /**
   * Only supported on `chat` and `completion` models.
   */
  maxTokens?: number | undefined;
  /**
   * Only supported on `chat` and `completion` models.
   */
  topK?: number | undefined;
  /**
   * Only supported on `chat` and `completion` models.
   */
  topP?: number | undefined;
  /**
   * Only supported on `chat` and `completion` models.
   */
  frequencyPenalty?: number | undefined;
  /**
   * Only supported on `chat` and `completion` models.
   */
  presencePenalty?: number | undefined;
  /**
   * Only supported on `image` models.
   */
  numImages?: number | undefined;
  /**
   * Best effort deterministic seed for the model. Currently only OpenAI models support these
   */
  seed?: number | undefined;
  /**
   * Only supported on `image` models.
   */
  format?: Format | undefined;
  /**
   * Only supported on `image` models.
   */
  dimensions?: string | undefined;
  /**
   * Only supported on `image` models.
   */
  quality?: Quality | undefined;
  /**
   * Only supported on `image` models.
   */
  style?: string | undefined;
  /**
   * An object specifying the format that the model must output.
   *
   * @remarks
   *
   *  Setting to `{ "type": "json_schema", "json_schema": {...} }` enables Structured Outputs which ensures the model will match your supplied JSON schema
   *
   *  Setting to `{ "type": "json_object" }` enables JSON mode, which ensures the message the model generates is valid JSON.
   *
   * Important: when using JSON mode, you must also instruct the model to produce JSON yourself via a system or user message. Without this, the model may generate an unending stream of whitespace until the generation reaches the token limit, resulting in a long-running and seemingly "stuck" request. Also note that the message content may be partially cut off if finish_reason="length", which indicates the generation exceeded max_tokens or the conversation exceeded the max context length.
   */
  responseFormat?: ResponseFormat2 | ResponseFormat1 | null | undefined;
  /**
   * The version of photoReal to use. Must be v1 or v2. Only available for `leonardoai` provider
   */
  photoRealVersion?: PhotoRealVersion | undefined;
  /**
   * The format to return the embeddings
   */
  encodingFormat?: EncodingFormat | undefined;
};

export const Provider = {
  Cohere: "cohere",
  Openai: "openai",
  Anthropic: "anthropic",
  Huggingface: "huggingface",
  Replicate: "replicate",
  Google: "google",
  GoogleAi: "google-ai",
  Azure: "azure",
  Aws: "aws",
  Anyscale: "anyscale",
  Perplexity: "perplexity",
  Groq: "groq",
  Fal: "fal",
  Leonardoai: "leonardoai",
  Nvidia: "nvidia",
} as const;
export type Provider = ClosedEnum<typeof Provider>;

/**
 * The role of the prompt message
 */
export const CreatePromptRole = {
  System: "system",
  Assistant: "assistant",
  User: "user",
  Exception: "exception",
  Tool: "tool",
  Prompt: "prompt",
  Correction: "correction",
  ExpectedOutput: "expected_output",
} as const;
/**
 * The role of the prompt message
 */
export type CreatePromptRole = ClosedEnum<typeof CreatePromptRole>;

export const CreatePrompt2PromptsType = {
  ImageUrl: "image_url",
} as const;
export type CreatePrompt2PromptsType = ClosedEnum<
  typeof CreatePrompt2PromptsType
>;

export type CreatePrompt2ImageUrl = {
  /**
   * Either a URL of the image or the base64 encoded data URI.
   */
  url: string;
  /**
   * Specifies the detail level of the image. Currently only supported with OpenAI models
   */
  detail?: string | undefined;
};

/**
 * The image part of the prompt message. Only supported with vision models.
 */
export type CreatePrompt22 = {
  type: CreatePrompt2PromptsType;
  imageUrl: CreatePrompt2ImageUrl;
};

export const CreatePrompt2Type = {
  Text: "text",
} as const;
export type CreatePrompt2Type = ClosedEnum<typeof CreatePrompt2Type>;

/**
 * Text content part of a prompt message
 */
export type CreatePrompt21 = {
  type: CreatePrompt2Type;
  text: string;
};

export type CreatePromptContent2 = CreatePrompt21 | CreatePrompt22;

/**
 * The contents of the user message. Either the text content of the message or an array of content parts with a defined type, each can be of type `text` or `image_url` when passing in images. You can pass multiple images by adding multiple `image_url` content parts.
 */
export type CreatePromptContent =
  | string
  | Array<CreatePrompt21 | CreatePrompt22>;

export const CreatePromptType = {
  Function: "function",
} as const;
export type CreatePromptType = ClosedEnum<typeof CreatePromptType>;

export type CreatePromptFunction = {
  name: string;
  /**
   * JSON string arguments for the functions
   */
  arguments: string;
};

export type CreatePromptToolCalls = {
  id?: string | undefined;
  index?: number | undefined;
  type: CreatePromptType;
  function: CreatePromptFunction;
};

export type CreatePromptMessages = {
  /**
   * The role of the prompt message
   */
  role: CreatePromptRole;
  /**
   * The contents of the user message. Either the text content of the message or an array of content parts with a defined type, each can be of type `text` or `image_url` when passing in images. You can pass multiple images by adding multiple `image_url` content parts.
   */
  content: string | Array<CreatePrompt21 | CreatePrompt22>;
  toolCalls?: Array<CreatePromptToolCalls> | undefined;
};

export type PromptConfig = {
  stream?: boolean | undefined;
  model?: string | undefined;
  /**
   * The type of the model
   */
  modelType?: ModelType | undefined;
  /**
   * Model Parameters: Not all parameters apply to every model
   */
  modelParameters?: ModelParameters | undefined;
  provider?: Provider | undefined;
  version?: string | undefined;
  messages: Array<CreatePromptMessages>;
};

export type Metadata = {
  useCases?: Array<string> | undefined;
  language?: string | undefined;
};

export const CreatePromptPromptsType = {
  Prompt: "prompt",
  Snippet: "snippet",
  Template: "template",
} as const;
export type CreatePromptPromptsType = ClosedEnum<
  typeof CreatePromptPromptsType
>;

export type CreatePromptRequestBody = {
  displayName: string;
  description?: string | null | undefined;
  promptConfig?: PromptConfig | undefined;
  metadata?: Metadata | undefined;
  key?: string | undefined;
  type: CreatePromptPromptsType;
};

/**
 * The type of the model
 */
export const CreatePromptModelType = {
  Chat: "chat",
  Completion: "completion",
  Embedding: "embedding",
  Vision: "vision",
  Image: "image",
  Tts: "tts",
  Stt: "stt",
  Rerank: "rerank",
} as const;
/**
 * The type of the model
 */
export type CreatePromptModelType = ClosedEnum<typeof CreatePromptModelType>;

/**
 * Only supported on `image` models.
 */
export const CreatePromptFormat = {
  Url: "url",
  B64Json: "b64_json",
  Text: "text",
  JsonObject: "json_object",
} as const;
/**
 * Only supported on `image` models.
 */
export type CreatePromptFormat = ClosedEnum<typeof CreatePromptFormat>;

/**
 * Only supported on `image` models.
 */
export const CreatePromptQuality = {
  Standard: "standard",
  Hd: "hd",
} as const;
/**
 * Only supported on `image` models.
 */
export type CreatePromptQuality = ClosedEnum<typeof CreatePromptQuality>;

export const CreatePromptResponseFormatPromptsResponseType = {
  JsonObject: "json_object",
} as const;
export type CreatePromptResponseFormatPromptsResponseType = ClosedEnum<
  typeof CreatePromptResponseFormatPromptsResponseType
>;

export type CreatePromptResponseFormat2 = {
  type: CreatePromptResponseFormatPromptsResponseType;
};

export const CreatePromptResponseFormatPromptsType = {
  JsonSchema: "json_schema",
} as const;
export type CreatePromptResponseFormatPromptsType = ClosedEnum<
  typeof CreatePromptResponseFormatPromptsType
>;

export type CreatePromptResponseFormatJsonSchema = {
  name: string;
  strict: boolean;
  schema: { [k: string]: any };
};

export type CreatePromptResponseFormat1 = {
  type: CreatePromptResponseFormatPromptsType;
  jsonSchema: CreatePromptResponseFormatJsonSchema;
};

/**
 * An object specifying the format that the model must output.
 *
 * @remarks
 *
 *  Setting to `{ "type": "json_schema", "json_schema": {...} }` enables Structured Outputs which ensures the model will match your supplied JSON schema
 *
 *  Setting to `{ "type": "json_object" }` enables JSON mode, which ensures the message the model generates is valid JSON.
 *
 * Important: when using JSON mode, you must also instruct the model to produce JSON yourself via a system or user message. Without this, the model may generate an unending stream of whitespace until the generation reaches the token limit, resulting in a long-running and seemingly "stuck" request. Also note that the message content may be partially cut off if finish_reason="length", which indicates the generation exceeded max_tokens or the conversation exceeded the max context length.
 */
export type CreatePromptResponseFormat =
  | CreatePromptResponseFormat2
  | CreatePromptResponseFormat1;

/**
 * The version of photoReal to use. Must be v1 or v2. Only available for `leonardoai` provider
 */
export const CreatePromptPhotoRealVersion = {
  V1: "v1",
  V2: "v2",
} as const;
/**
 * The version of photoReal to use. Must be v1 or v2. Only available for `leonardoai` provider
 */
export type CreatePromptPhotoRealVersion = ClosedEnum<
  typeof CreatePromptPhotoRealVersion
>;

/**
 * The format to return the embeddings
 */
export const CreatePromptEncodingFormat = {
  Float: "float",
  Base64: "base64",
} as const;
/**
 * The format to return the embeddings
 */
export type CreatePromptEncodingFormat = ClosedEnum<
  typeof CreatePromptEncodingFormat
>;

/**
 * Model Parameters: Not all parameters apply to every model
 */
export type CreatePromptModelParameters = {
  /**
   * Only supported on `chat` and `completion` models.
   */
  temperature?: number | undefined;
  /**
   * Only supported on `chat` and `completion` models.
   */
  maxTokens?: number | undefined;
  /**
   * Only supported on `chat` and `completion` models.
   */
  topK?: number | undefined;
  /**
   * Only supported on `chat` and `completion` models.
   */
  topP?: number | undefined;
  /**
   * Only supported on `chat` and `completion` models.
   */
  frequencyPenalty?: number | undefined;
  /**
   * Only supported on `chat` and `completion` models.
   */
  presencePenalty?: number | undefined;
  /**
   * Only supported on `image` models.
   */
  numImages?: number | undefined;
  /**
   * Best effort deterministic seed for the model. Currently only OpenAI models support these
   */
  seed?: number | undefined;
  /**
   * Only supported on `image` models.
   */
  format?: CreatePromptFormat | undefined;
  /**
   * Only supported on `image` models.
   */
  dimensions?: string | undefined;
  /**
   * Only supported on `image` models.
   */
  quality?: CreatePromptQuality | undefined;
  /**
   * Only supported on `image` models.
   */
  style?: string | undefined;
  /**
   * An object specifying the format that the model must output.
   *
   * @remarks
   *
   *  Setting to `{ "type": "json_schema", "json_schema": {...} }` enables Structured Outputs which ensures the model will match your supplied JSON schema
   *
   *  Setting to `{ "type": "json_object" }` enables JSON mode, which ensures the message the model generates is valid JSON.
   *
   * Important: when using JSON mode, you must also instruct the model to produce JSON yourself via a system or user message. Without this, the model may generate an unending stream of whitespace until the generation reaches the token limit, resulting in a long-running and seemingly "stuck" request. Also note that the message content may be partially cut off if finish_reason="length", which indicates the generation exceeded max_tokens or the conversation exceeded the max context length.
   */
  responseFormat?:
    | CreatePromptResponseFormat2
    | CreatePromptResponseFormat1
    | null
    | undefined;
  /**
   * The version of photoReal to use. Must be v1 or v2. Only available for `leonardoai` provider
   */
  photoRealVersion?: CreatePromptPhotoRealVersion | undefined;
  /**
   * The format to return the embeddings
   */
  encodingFormat?: CreatePromptEncodingFormat | undefined;
};

export const CreatePromptProvider = {
  Cohere: "cohere",
  Openai: "openai",
  Anthropic: "anthropic",
  Huggingface: "huggingface",
  Replicate: "replicate",
  Google: "google",
  GoogleAi: "google-ai",
  Azure: "azure",
  Aws: "aws",
  Anyscale: "anyscale",
  Perplexity: "perplexity",
  Groq: "groq",
  Fal: "fal",
  Leonardoai: "leonardoai",
  Nvidia: "nvidia",
} as const;
export type CreatePromptProvider = ClosedEnum<typeof CreatePromptProvider>;

/**
 * The role of the prompt message
 */
export const CreatePromptPromptsRole = {
  System: "system",
  Assistant: "assistant",
  User: "user",
  Exception: "exception",
  Tool: "tool",
  Prompt: "prompt",
  Correction: "correction",
  ExpectedOutput: "expected_output",
} as const;
/**
 * The role of the prompt message
 */
export type CreatePromptPromptsRole = ClosedEnum<
  typeof CreatePromptPromptsRole
>;

export const CreatePrompt2PromptsResponse200Type = {
  ImageUrl: "image_url",
} as const;
export type CreatePrompt2PromptsResponse200Type = ClosedEnum<
  typeof CreatePrompt2PromptsResponse200Type
>;

export type CreatePrompt2PromptsImageUrl = {
  /**
   * The orq.ai id of the image
   */
  id?: string | undefined;
  /**
   * Either a URL of the image or the base64 encoded data URI.
   */
  url: string;
  /**
   * Specifies the detail level of the image. Currently only supported with OpenAI models
   */
  detail?: string | undefined;
};

/**
 * The image part of the prompt message. Only supported with vision models.
 */
export type CreatePrompt2Prompts2 = {
  type: CreatePrompt2PromptsResponse200Type;
  imageUrl: CreatePrompt2PromptsImageUrl;
};

export const CreatePrompt2PromptsResponseType = {
  Text: "text",
} as const;
export type CreatePrompt2PromptsResponseType = ClosedEnum<
  typeof CreatePrompt2PromptsResponseType
>;

/**
 * Text content part of a prompt message
 */
export type CreatePrompt2Prompts1 = {
  type: CreatePrompt2PromptsResponseType;
  text: string;
};

export type CreatePromptContentPrompts2 =
  | CreatePrompt2Prompts1
  | CreatePrompt2Prompts2;

/**
 * The contents of the user message. Either the text content of the message or an array of content parts with a defined type, each can be of type `text` or `image_url` when passing in images. You can pass multiple images by adding multiple `image_url` content parts.
 */
export type CreatePromptPromptsContent =
  | string
  | Array<CreatePrompt2Prompts1 | CreatePrompt2Prompts2>;

export const CreatePromptPromptsResponse200Type = {
  Function: "function",
} as const;
export type CreatePromptPromptsResponse200Type = ClosedEnum<
  typeof CreatePromptPromptsResponse200Type
>;

export type CreatePromptPromptsFunction = {
  name: string;
  /**
   * JSON string arguments for the functions
   */
  arguments: string;
};

export type CreatePromptPromptsToolCalls = {
  id?: string | undefined;
  index?: number | undefined;
  type: CreatePromptPromptsResponse200Type;
  function: CreatePromptPromptsFunction;
};

export type CreatePromptPromptsMessages = {
  /**
   * The role of the prompt message
   */
  role: CreatePromptPromptsRole;
  /**
   * The contents of the user message. Either the text content of the message or an array of content parts with a defined type, each can be of type `text` or `image_url` when passing in images. You can pass multiple images by adding multiple `image_url` content parts.
   */
  content: string | Array<CreatePrompt2Prompts1 | CreatePrompt2Prompts2>;
  toolCalls?: Array<CreatePromptPromptsToolCalls> | undefined;
};

export type CreatePromptPromptConfig = {
  stream?: boolean | undefined;
  model?: string | undefined;
  /**
   * The id of the resource
   */
  modelDbId?: string | undefined;
  /**
   * The type of the model
   */
  modelType?: CreatePromptModelType | undefined;
  /**
   * Model Parameters: Not all parameters apply to every model
   */
  modelParameters?: CreatePromptModelParameters | undefined;
  provider?: CreatePromptProvider | undefined;
  /**
   * The id of the resource
   */
  integrationId?: string | null | undefined;
  version?: string | undefined;
  messages: Array<CreatePromptPromptsMessages>;
};

export type CreatePromptMetadata = {
  useCases?: Array<string> | undefined;
  language?: string | undefined;
};

export const CreatePromptPromptsResponseType = {
  Prompt: "prompt",
  Snippet: "snippet",
  Template: "template",
} as const;
export type CreatePromptPromptsResponseType = ClosedEnum<
  typeof CreatePromptPromptsResponseType
>;

/**
 * Prompt created.
 */
export type CreatePromptResponseBody = {
  /**
   * The id of the resource
   */
  id: string;
  displayName: string;
  /**
   * The id of the resource
   */
  domainId: string;
  description?: string | null | undefined;
  promptConfig?: CreatePromptPromptConfig | undefined;
  metadata?: CreatePromptMetadata | undefined;
  key?: string | undefined;
  type: CreatePromptPromptsResponseType;
};

/** @internal */
export const ModelType$inboundSchema: z.ZodNativeEnum<typeof ModelType> = z
  .nativeEnum(ModelType);

/** @internal */
export const ModelType$outboundSchema: z.ZodNativeEnum<typeof ModelType> =
  ModelType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ModelType$ {
  /** @deprecated use `ModelType$inboundSchema` instead. */
  export const inboundSchema = ModelType$inboundSchema;
  /** @deprecated use `ModelType$outboundSchema` instead. */
  export const outboundSchema = ModelType$outboundSchema;
}

/** @internal */
export const Format$inboundSchema: z.ZodNativeEnum<typeof Format> = z
  .nativeEnum(Format);

/** @internal */
export const Format$outboundSchema: z.ZodNativeEnum<typeof Format> =
  Format$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Format$ {
  /** @deprecated use `Format$inboundSchema` instead. */
  export const inboundSchema = Format$inboundSchema;
  /** @deprecated use `Format$outboundSchema` instead. */
  export const outboundSchema = Format$outboundSchema;
}

/** @internal */
export const Quality$inboundSchema: z.ZodNativeEnum<typeof Quality> = z
  .nativeEnum(Quality);

/** @internal */
export const Quality$outboundSchema: z.ZodNativeEnum<typeof Quality> =
  Quality$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Quality$ {
  /** @deprecated use `Quality$inboundSchema` instead. */
  export const inboundSchema = Quality$inboundSchema;
  /** @deprecated use `Quality$outboundSchema` instead. */
  export const outboundSchema = Quality$outboundSchema;
}

/** @internal */
export const CreatePromptResponseFormatType$inboundSchema: z.ZodNativeEnum<
  typeof CreatePromptResponseFormatType
> = z.nativeEnum(CreatePromptResponseFormatType);

/** @internal */
export const CreatePromptResponseFormatType$outboundSchema: z.ZodNativeEnum<
  typeof CreatePromptResponseFormatType
> = CreatePromptResponseFormatType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreatePromptResponseFormatType$ {
  /** @deprecated use `CreatePromptResponseFormatType$inboundSchema` instead. */
  export const inboundSchema = CreatePromptResponseFormatType$inboundSchema;
  /** @deprecated use `CreatePromptResponseFormatType$outboundSchema` instead. */
  export const outboundSchema = CreatePromptResponseFormatType$outboundSchema;
}

/** @internal */
export const ResponseFormat2$inboundSchema: z.ZodType<
  ResponseFormat2,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: CreatePromptResponseFormatType$inboundSchema,
});

/** @internal */
export type ResponseFormat2$Outbound = {
  type: string;
};

/** @internal */
export const ResponseFormat2$outboundSchema: z.ZodType<
  ResponseFormat2$Outbound,
  z.ZodTypeDef,
  ResponseFormat2
> = z.object({
  type: CreatePromptResponseFormatType$outboundSchema,
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ResponseFormat2$ {
  /** @deprecated use `ResponseFormat2$inboundSchema` instead. */
  export const inboundSchema = ResponseFormat2$inboundSchema;
  /** @deprecated use `ResponseFormat2$outboundSchema` instead. */
  export const outboundSchema = ResponseFormat2$outboundSchema;
  /** @deprecated use `ResponseFormat2$Outbound` instead. */
  export type Outbound = ResponseFormat2$Outbound;
}

export function responseFormat2ToJSON(
  responseFormat2: ResponseFormat2,
): string {
  return JSON.stringify(ResponseFormat2$outboundSchema.parse(responseFormat2));
}

export function responseFormat2FromJSON(
  jsonString: string,
): SafeParseResult<ResponseFormat2, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ResponseFormat2$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ResponseFormat2' from JSON`,
  );
}

/** @internal */
export const ResponseFormatType$inboundSchema: z.ZodNativeEnum<
  typeof ResponseFormatType
> = z.nativeEnum(ResponseFormatType);

/** @internal */
export const ResponseFormatType$outboundSchema: z.ZodNativeEnum<
  typeof ResponseFormatType
> = ResponseFormatType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ResponseFormatType$ {
  /** @deprecated use `ResponseFormatType$inboundSchema` instead. */
  export const inboundSchema = ResponseFormatType$inboundSchema;
  /** @deprecated use `ResponseFormatType$outboundSchema` instead. */
  export const outboundSchema = ResponseFormatType$outboundSchema;
}

/** @internal */
export const JsonSchema$inboundSchema: z.ZodType<
  JsonSchema,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.string(),
  strict: z.boolean(),
  schema: z.record(z.any()),
});

/** @internal */
export type JsonSchema$Outbound = {
  name: string;
  strict: boolean;
  schema: { [k: string]: any };
};

/** @internal */
export const JsonSchema$outboundSchema: z.ZodType<
  JsonSchema$Outbound,
  z.ZodTypeDef,
  JsonSchema
> = z.object({
  name: z.string(),
  strict: z.boolean(),
  schema: z.record(z.any()),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace JsonSchema$ {
  /** @deprecated use `JsonSchema$inboundSchema` instead. */
  export const inboundSchema = JsonSchema$inboundSchema;
  /** @deprecated use `JsonSchema$outboundSchema` instead. */
  export const outboundSchema = JsonSchema$outboundSchema;
  /** @deprecated use `JsonSchema$Outbound` instead. */
  export type Outbound = JsonSchema$Outbound;
}

export function jsonSchemaToJSON(jsonSchema: JsonSchema): string {
  return JSON.stringify(JsonSchema$outboundSchema.parse(jsonSchema));
}

export function jsonSchemaFromJSON(
  jsonString: string,
): SafeParseResult<JsonSchema, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => JsonSchema$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'JsonSchema' from JSON`,
  );
}

/** @internal */
export const ResponseFormat1$inboundSchema: z.ZodType<
  ResponseFormat1,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: ResponseFormatType$inboundSchema,
  json_schema: z.lazy(() => JsonSchema$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "json_schema": "jsonSchema",
  });
});

/** @internal */
export type ResponseFormat1$Outbound = {
  type: string;
  json_schema: JsonSchema$Outbound;
};

/** @internal */
export const ResponseFormat1$outboundSchema: z.ZodType<
  ResponseFormat1$Outbound,
  z.ZodTypeDef,
  ResponseFormat1
> = z.object({
  type: ResponseFormatType$outboundSchema,
  jsonSchema: z.lazy(() => JsonSchema$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    jsonSchema: "json_schema",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ResponseFormat1$ {
  /** @deprecated use `ResponseFormat1$inboundSchema` instead. */
  export const inboundSchema = ResponseFormat1$inboundSchema;
  /** @deprecated use `ResponseFormat1$outboundSchema` instead. */
  export const outboundSchema = ResponseFormat1$outboundSchema;
  /** @deprecated use `ResponseFormat1$Outbound` instead. */
  export type Outbound = ResponseFormat1$Outbound;
}

export function responseFormat1ToJSON(
  responseFormat1: ResponseFormat1,
): string {
  return JSON.stringify(ResponseFormat1$outboundSchema.parse(responseFormat1));
}

export function responseFormat1FromJSON(
  jsonString: string,
): SafeParseResult<ResponseFormat1, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ResponseFormat1$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ResponseFormat1' from JSON`,
  );
}

/** @internal */
export const ResponseFormat$inboundSchema: z.ZodType<
  ResponseFormat,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => ResponseFormat2$inboundSchema),
  z.lazy(() => ResponseFormat1$inboundSchema),
]);

/** @internal */
export type ResponseFormat$Outbound =
  | ResponseFormat2$Outbound
  | ResponseFormat1$Outbound;

/** @internal */
export const ResponseFormat$outboundSchema: z.ZodType<
  ResponseFormat$Outbound,
  z.ZodTypeDef,
  ResponseFormat
> = z.union([
  z.lazy(() => ResponseFormat2$outboundSchema),
  z.lazy(() => ResponseFormat1$outboundSchema),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ResponseFormat$ {
  /** @deprecated use `ResponseFormat$inboundSchema` instead. */
  export const inboundSchema = ResponseFormat$inboundSchema;
  /** @deprecated use `ResponseFormat$outboundSchema` instead. */
  export const outboundSchema = ResponseFormat$outboundSchema;
  /** @deprecated use `ResponseFormat$Outbound` instead. */
  export type Outbound = ResponseFormat$Outbound;
}

export function responseFormatToJSON(responseFormat: ResponseFormat): string {
  return JSON.stringify(ResponseFormat$outboundSchema.parse(responseFormat));
}

export function responseFormatFromJSON(
  jsonString: string,
): SafeParseResult<ResponseFormat, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ResponseFormat$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ResponseFormat' from JSON`,
  );
}

/** @internal */
export const PhotoRealVersion$inboundSchema: z.ZodNativeEnum<
  typeof PhotoRealVersion
> = z.nativeEnum(PhotoRealVersion);

/** @internal */
export const PhotoRealVersion$outboundSchema: z.ZodNativeEnum<
  typeof PhotoRealVersion
> = PhotoRealVersion$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PhotoRealVersion$ {
  /** @deprecated use `PhotoRealVersion$inboundSchema` instead. */
  export const inboundSchema = PhotoRealVersion$inboundSchema;
  /** @deprecated use `PhotoRealVersion$outboundSchema` instead. */
  export const outboundSchema = PhotoRealVersion$outboundSchema;
}

/** @internal */
export const EncodingFormat$inboundSchema: z.ZodNativeEnum<
  typeof EncodingFormat
> = z.nativeEnum(EncodingFormat);

/** @internal */
export const EncodingFormat$outboundSchema: z.ZodNativeEnum<
  typeof EncodingFormat
> = EncodingFormat$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EncodingFormat$ {
  /** @deprecated use `EncodingFormat$inboundSchema` instead. */
  export const inboundSchema = EncodingFormat$inboundSchema;
  /** @deprecated use `EncodingFormat$outboundSchema` instead. */
  export const outboundSchema = EncodingFormat$outboundSchema;
}

/** @internal */
export const ModelParameters$inboundSchema: z.ZodType<
  ModelParameters,
  z.ZodTypeDef,
  unknown
> = z.object({
  temperature: z.number().optional(),
  maxTokens: z.number().optional(),
  topK: z.number().optional(),
  topP: z.number().optional(),
  frequencyPenalty: z.number().optional(),
  presencePenalty: z.number().optional(),
  numImages: z.number().optional(),
  seed: z.number().optional(),
  format: Format$inboundSchema.optional(),
  dimensions: z.string().optional(),
  quality: Quality$inboundSchema.optional(),
  style: z.string().optional(),
  responseFormat: z.nullable(
    z.union([
      z.lazy(() => ResponseFormat2$inboundSchema),
      z.lazy(() => ResponseFormat1$inboundSchema),
    ]),
  ).optional(),
  photoRealVersion: PhotoRealVersion$inboundSchema.optional(),
  encoding_format: EncodingFormat$inboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    "encoding_format": "encodingFormat",
  });
});

/** @internal */
export type ModelParameters$Outbound = {
  temperature?: number | undefined;
  maxTokens?: number | undefined;
  topK?: number | undefined;
  topP?: number | undefined;
  frequencyPenalty?: number | undefined;
  presencePenalty?: number | undefined;
  numImages?: number | undefined;
  seed?: number | undefined;
  format?: string | undefined;
  dimensions?: string | undefined;
  quality?: string | undefined;
  style?: string | undefined;
  responseFormat?:
    | ResponseFormat2$Outbound
    | ResponseFormat1$Outbound
    | null
    | undefined;
  photoRealVersion?: string | undefined;
  encoding_format?: string | undefined;
};

/** @internal */
export const ModelParameters$outboundSchema: z.ZodType<
  ModelParameters$Outbound,
  z.ZodTypeDef,
  ModelParameters
> = z.object({
  temperature: z.number().optional(),
  maxTokens: z.number().optional(),
  topK: z.number().optional(),
  topP: z.number().optional(),
  frequencyPenalty: z.number().optional(),
  presencePenalty: z.number().optional(),
  numImages: z.number().optional(),
  seed: z.number().optional(),
  format: Format$outboundSchema.optional(),
  dimensions: z.string().optional(),
  quality: Quality$outboundSchema.optional(),
  style: z.string().optional(),
  responseFormat: z.nullable(
    z.union([
      z.lazy(() => ResponseFormat2$outboundSchema),
      z.lazy(() => ResponseFormat1$outboundSchema),
    ]),
  ).optional(),
  photoRealVersion: PhotoRealVersion$outboundSchema.optional(),
  encodingFormat: EncodingFormat$outboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    encodingFormat: "encoding_format",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ModelParameters$ {
  /** @deprecated use `ModelParameters$inboundSchema` instead. */
  export const inboundSchema = ModelParameters$inboundSchema;
  /** @deprecated use `ModelParameters$outboundSchema` instead. */
  export const outboundSchema = ModelParameters$outboundSchema;
  /** @deprecated use `ModelParameters$Outbound` instead. */
  export type Outbound = ModelParameters$Outbound;
}

export function modelParametersToJSON(
  modelParameters: ModelParameters,
): string {
  return JSON.stringify(ModelParameters$outboundSchema.parse(modelParameters));
}

export function modelParametersFromJSON(
  jsonString: string,
): SafeParseResult<ModelParameters, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ModelParameters$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ModelParameters' from JSON`,
  );
}

/** @internal */
export const Provider$inboundSchema: z.ZodNativeEnum<typeof Provider> = z
  .nativeEnum(Provider);

/** @internal */
export const Provider$outboundSchema: z.ZodNativeEnum<typeof Provider> =
  Provider$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Provider$ {
  /** @deprecated use `Provider$inboundSchema` instead. */
  export const inboundSchema = Provider$inboundSchema;
  /** @deprecated use `Provider$outboundSchema` instead. */
  export const outboundSchema = Provider$outboundSchema;
}

/** @internal */
export const CreatePromptRole$inboundSchema: z.ZodNativeEnum<
  typeof CreatePromptRole
> = z.nativeEnum(CreatePromptRole);

/** @internal */
export const CreatePromptRole$outboundSchema: z.ZodNativeEnum<
  typeof CreatePromptRole
> = CreatePromptRole$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreatePromptRole$ {
  /** @deprecated use `CreatePromptRole$inboundSchema` instead. */
  export const inboundSchema = CreatePromptRole$inboundSchema;
  /** @deprecated use `CreatePromptRole$outboundSchema` instead. */
  export const outboundSchema = CreatePromptRole$outboundSchema;
}

/** @internal */
export const CreatePrompt2PromptsType$inboundSchema: z.ZodNativeEnum<
  typeof CreatePrompt2PromptsType
> = z.nativeEnum(CreatePrompt2PromptsType);

/** @internal */
export const CreatePrompt2PromptsType$outboundSchema: z.ZodNativeEnum<
  typeof CreatePrompt2PromptsType
> = CreatePrompt2PromptsType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreatePrompt2PromptsType$ {
  /** @deprecated use `CreatePrompt2PromptsType$inboundSchema` instead. */
  export const inboundSchema = CreatePrompt2PromptsType$inboundSchema;
  /** @deprecated use `CreatePrompt2PromptsType$outboundSchema` instead. */
  export const outboundSchema = CreatePrompt2PromptsType$outboundSchema;
}

/** @internal */
export const CreatePrompt2ImageUrl$inboundSchema: z.ZodType<
  CreatePrompt2ImageUrl,
  z.ZodTypeDef,
  unknown
> = z.object({
  url: z.string(),
  detail: z.string().optional(),
});

/** @internal */
export type CreatePrompt2ImageUrl$Outbound = {
  url: string;
  detail?: string | undefined;
};

/** @internal */
export const CreatePrompt2ImageUrl$outboundSchema: z.ZodType<
  CreatePrompt2ImageUrl$Outbound,
  z.ZodTypeDef,
  CreatePrompt2ImageUrl
> = z.object({
  url: z.string(),
  detail: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreatePrompt2ImageUrl$ {
  /** @deprecated use `CreatePrompt2ImageUrl$inboundSchema` instead. */
  export const inboundSchema = CreatePrompt2ImageUrl$inboundSchema;
  /** @deprecated use `CreatePrompt2ImageUrl$outboundSchema` instead. */
  export const outboundSchema = CreatePrompt2ImageUrl$outboundSchema;
  /** @deprecated use `CreatePrompt2ImageUrl$Outbound` instead. */
  export type Outbound = CreatePrompt2ImageUrl$Outbound;
}

export function createPrompt2ImageUrlToJSON(
  createPrompt2ImageUrl: CreatePrompt2ImageUrl,
): string {
  return JSON.stringify(
    CreatePrompt2ImageUrl$outboundSchema.parse(createPrompt2ImageUrl),
  );
}

export function createPrompt2ImageUrlFromJSON(
  jsonString: string,
): SafeParseResult<CreatePrompt2ImageUrl, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreatePrompt2ImageUrl$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreatePrompt2ImageUrl' from JSON`,
  );
}

/** @internal */
export const CreatePrompt22$inboundSchema: z.ZodType<
  CreatePrompt22,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: CreatePrompt2PromptsType$inboundSchema,
  image_url: z.lazy(() => CreatePrompt2ImageUrl$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "image_url": "imageUrl",
  });
});

/** @internal */
export type CreatePrompt22$Outbound = {
  type: string;
  image_url: CreatePrompt2ImageUrl$Outbound;
};

/** @internal */
export const CreatePrompt22$outboundSchema: z.ZodType<
  CreatePrompt22$Outbound,
  z.ZodTypeDef,
  CreatePrompt22
> = z.object({
  type: CreatePrompt2PromptsType$outboundSchema,
  imageUrl: z.lazy(() => CreatePrompt2ImageUrl$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    imageUrl: "image_url",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreatePrompt22$ {
  /** @deprecated use `CreatePrompt22$inboundSchema` instead. */
  export const inboundSchema = CreatePrompt22$inboundSchema;
  /** @deprecated use `CreatePrompt22$outboundSchema` instead. */
  export const outboundSchema = CreatePrompt22$outboundSchema;
  /** @deprecated use `CreatePrompt22$Outbound` instead. */
  export type Outbound = CreatePrompt22$Outbound;
}

export function createPrompt22ToJSON(createPrompt22: CreatePrompt22): string {
  return JSON.stringify(CreatePrompt22$outboundSchema.parse(createPrompt22));
}

export function createPrompt22FromJSON(
  jsonString: string,
): SafeParseResult<CreatePrompt22, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreatePrompt22$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreatePrompt22' from JSON`,
  );
}

/** @internal */
export const CreatePrompt2Type$inboundSchema: z.ZodNativeEnum<
  typeof CreatePrompt2Type
> = z.nativeEnum(CreatePrompt2Type);

/** @internal */
export const CreatePrompt2Type$outboundSchema: z.ZodNativeEnum<
  typeof CreatePrompt2Type
> = CreatePrompt2Type$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreatePrompt2Type$ {
  /** @deprecated use `CreatePrompt2Type$inboundSchema` instead. */
  export const inboundSchema = CreatePrompt2Type$inboundSchema;
  /** @deprecated use `CreatePrompt2Type$outboundSchema` instead. */
  export const outboundSchema = CreatePrompt2Type$outboundSchema;
}

/** @internal */
export const CreatePrompt21$inboundSchema: z.ZodType<
  CreatePrompt21,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: CreatePrompt2Type$inboundSchema,
  text: z.string(),
});

/** @internal */
export type CreatePrompt21$Outbound = {
  type: string;
  text: string;
};

/** @internal */
export const CreatePrompt21$outboundSchema: z.ZodType<
  CreatePrompt21$Outbound,
  z.ZodTypeDef,
  CreatePrompt21
> = z.object({
  type: CreatePrompt2Type$outboundSchema,
  text: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreatePrompt21$ {
  /** @deprecated use `CreatePrompt21$inboundSchema` instead. */
  export const inboundSchema = CreatePrompt21$inboundSchema;
  /** @deprecated use `CreatePrompt21$outboundSchema` instead. */
  export const outboundSchema = CreatePrompt21$outboundSchema;
  /** @deprecated use `CreatePrompt21$Outbound` instead. */
  export type Outbound = CreatePrompt21$Outbound;
}

export function createPrompt21ToJSON(createPrompt21: CreatePrompt21): string {
  return JSON.stringify(CreatePrompt21$outboundSchema.parse(createPrompt21));
}

export function createPrompt21FromJSON(
  jsonString: string,
): SafeParseResult<CreatePrompt21, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreatePrompt21$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreatePrompt21' from JSON`,
  );
}

/** @internal */
export const CreatePromptContent2$inboundSchema: z.ZodType<
  CreatePromptContent2,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => CreatePrompt21$inboundSchema),
  z.lazy(() => CreatePrompt22$inboundSchema),
]);

/** @internal */
export type CreatePromptContent2$Outbound =
  | CreatePrompt21$Outbound
  | CreatePrompt22$Outbound;

/** @internal */
export const CreatePromptContent2$outboundSchema: z.ZodType<
  CreatePromptContent2$Outbound,
  z.ZodTypeDef,
  CreatePromptContent2
> = z.union([
  z.lazy(() => CreatePrompt21$outboundSchema),
  z.lazy(() => CreatePrompt22$outboundSchema),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreatePromptContent2$ {
  /** @deprecated use `CreatePromptContent2$inboundSchema` instead. */
  export const inboundSchema = CreatePromptContent2$inboundSchema;
  /** @deprecated use `CreatePromptContent2$outboundSchema` instead. */
  export const outboundSchema = CreatePromptContent2$outboundSchema;
  /** @deprecated use `CreatePromptContent2$Outbound` instead. */
  export type Outbound = CreatePromptContent2$Outbound;
}

export function createPromptContent2ToJSON(
  createPromptContent2: CreatePromptContent2,
): string {
  return JSON.stringify(
    CreatePromptContent2$outboundSchema.parse(createPromptContent2),
  );
}

export function createPromptContent2FromJSON(
  jsonString: string,
): SafeParseResult<CreatePromptContent2, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreatePromptContent2$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreatePromptContent2' from JSON`,
  );
}

/** @internal */
export const CreatePromptContent$inboundSchema: z.ZodType<
  CreatePromptContent,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.string(),
  z.array(z.union([
    z.lazy(() => CreatePrompt21$inboundSchema),
    z.lazy(() => CreatePrompt22$inboundSchema),
  ])),
]);

/** @internal */
export type CreatePromptContent$Outbound =
  | string
  | Array<CreatePrompt21$Outbound | CreatePrompt22$Outbound>;

/** @internal */
export const CreatePromptContent$outboundSchema: z.ZodType<
  CreatePromptContent$Outbound,
  z.ZodTypeDef,
  CreatePromptContent
> = z.union([
  z.string(),
  z.array(z.union([
    z.lazy(() => CreatePrompt21$outboundSchema),
    z.lazy(() => CreatePrompt22$outboundSchema),
  ])),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreatePromptContent$ {
  /** @deprecated use `CreatePromptContent$inboundSchema` instead. */
  export const inboundSchema = CreatePromptContent$inboundSchema;
  /** @deprecated use `CreatePromptContent$outboundSchema` instead. */
  export const outboundSchema = CreatePromptContent$outboundSchema;
  /** @deprecated use `CreatePromptContent$Outbound` instead. */
  export type Outbound = CreatePromptContent$Outbound;
}

export function createPromptContentToJSON(
  createPromptContent: CreatePromptContent,
): string {
  return JSON.stringify(
    CreatePromptContent$outboundSchema.parse(createPromptContent),
  );
}

export function createPromptContentFromJSON(
  jsonString: string,
): SafeParseResult<CreatePromptContent, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreatePromptContent$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreatePromptContent' from JSON`,
  );
}

/** @internal */
export const CreatePromptType$inboundSchema: z.ZodNativeEnum<
  typeof CreatePromptType
> = z.nativeEnum(CreatePromptType);

/** @internal */
export const CreatePromptType$outboundSchema: z.ZodNativeEnum<
  typeof CreatePromptType
> = CreatePromptType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreatePromptType$ {
  /** @deprecated use `CreatePromptType$inboundSchema` instead. */
  export const inboundSchema = CreatePromptType$inboundSchema;
  /** @deprecated use `CreatePromptType$outboundSchema` instead. */
  export const outboundSchema = CreatePromptType$outboundSchema;
}

/** @internal */
export const CreatePromptFunction$inboundSchema: z.ZodType<
  CreatePromptFunction,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.string(),
  arguments: z.string(),
});

/** @internal */
export type CreatePromptFunction$Outbound = {
  name: string;
  arguments: string;
};

/** @internal */
export const CreatePromptFunction$outboundSchema: z.ZodType<
  CreatePromptFunction$Outbound,
  z.ZodTypeDef,
  CreatePromptFunction
> = z.object({
  name: z.string(),
  arguments: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreatePromptFunction$ {
  /** @deprecated use `CreatePromptFunction$inboundSchema` instead. */
  export const inboundSchema = CreatePromptFunction$inboundSchema;
  /** @deprecated use `CreatePromptFunction$outboundSchema` instead. */
  export const outboundSchema = CreatePromptFunction$outboundSchema;
  /** @deprecated use `CreatePromptFunction$Outbound` instead. */
  export type Outbound = CreatePromptFunction$Outbound;
}

export function createPromptFunctionToJSON(
  createPromptFunction: CreatePromptFunction,
): string {
  return JSON.stringify(
    CreatePromptFunction$outboundSchema.parse(createPromptFunction),
  );
}

export function createPromptFunctionFromJSON(
  jsonString: string,
): SafeParseResult<CreatePromptFunction, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreatePromptFunction$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreatePromptFunction' from JSON`,
  );
}

/** @internal */
export const CreatePromptToolCalls$inboundSchema: z.ZodType<
  CreatePromptToolCalls,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string().optional(),
  index: z.number().optional(),
  type: CreatePromptType$inboundSchema,
  function: z.lazy(() => CreatePromptFunction$inboundSchema),
});

/** @internal */
export type CreatePromptToolCalls$Outbound = {
  id?: string | undefined;
  index?: number | undefined;
  type: string;
  function: CreatePromptFunction$Outbound;
};

/** @internal */
export const CreatePromptToolCalls$outboundSchema: z.ZodType<
  CreatePromptToolCalls$Outbound,
  z.ZodTypeDef,
  CreatePromptToolCalls
> = z.object({
  id: z.string().optional(),
  index: z.number().optional(),
  type: CreatePromptType$outboundSchema,
  function: z.lazy(() => CreatePromptFunction$outboundSchema),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreatePromptToolCalls$ {
  /** @deprecated use `CreatePromptToolCalls$inboundSchema` instead. */
  export const inboundSchema = CreatePromptToolCalls$inboundSchema;
  /** @deprecated use `CreatePromptToolCalls$outboundSchema` instead. */
  export const outboundSchema = CreatePromptToolCalls$outboundSchema;
  /** @deprecated use `CreatePromptToolCalls$Outbound` instead. */
  export type Outbound = CreatePromptToolCalls$Outbound;
}

export function createPromptToolCallsToJSON(
  createPromptToolCalls: CreatePromptToolCalls,
): string {
  return JSON.stringify(
    CreatePromptToolCalls$outboundSchema.parse(createPromptToolCalls),
  );
}

export function createPromptToolCallsFromJSON(
  jsonString: string,
): SafeParseResult<CreatePromptToolCalls, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreatePromptToolCalls$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreatePromptToolCalls' from JSON`,
  );
}

/** @internal */
export const CreatePromptMessages$inboundSchema: z.ZodType<
  CreatePromptMessages,
  z.ZodTypeDef,
  unknown
> = z.object({
  role: CreatePromptRole$inboundSchema,
  content: z.union([
    z.string(),
    z.array(z.union([
      z.lazy(() => CreatePrompt21$inboundSchema),
      z.lazy(() => CreatePrompt22$inboundSchema),
    ])),
  ]),
  tool_calls: z.array(z.lazy(() => CreatePromptToolCalls$inboundSchema))
    .optional(),
}).transform((v) => {
  return remap$(v, {
    "tool_calls": "toolCalls",
  });
});

/** @internal */
export type CreatePromptMessages$Outbound = {
  role: string;
  content: string | Array<CreatePrompt21$Outbound | CreatePrompt22$Outbound>;
  tool_calls?: Array<CreatePromptToolCalls$Outbound> | undefined;
};

/** @internal */
export const CreatePromptMessages$outboundSchema: z.ZodType<
  CreatePromptMessages$Outbound,
  z.ZodTypeDef,
  CreatePromptMessages
> = z.object({
  role: CreatePromptRole$outboundSchema,
  content: z.union([
    z.string(),
    z.array(z.union([
      z.lazy(() => CreatePrompt21$outboundSchema),
      z.lazy(() => CreatePrompt22$outboundSchema),
    ])),
  ]),
  toolCalls: z.array(z.lazy(() => CreatePromptToolCalls$outboundSchema))
    .optional(),
}).transform((v) => {
  return remap$(v, {
    toolCalls: "tool_calls",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreatePromptMessages$ {
  /** @deprecated use `CreatePromptMessages$inboundSchema` instead. */
  export const inboundSchema = CreatePromptMessages$inboundSchema;
  /** @deprecated use `CreatePromptMessages$outboundSchema` instead. */
  export const outboundSchema = CreatePromptMessages$outboundSchema;
  /** @deprecated use `CreatePromptMessages$Outbound` instead. */
  export type Outbound = CreatePromptMessages$Outbound;
}

export function createPromptMessagesToJSON(
  createPromptMessages: CreatePromptMessages,
): string {
  return JSON.stringify(
    CreatePromptMessages$outboundSchema.parse(createPromptMessages),
  );
}

export function createPromptMessagesFromJSON(
  jsonString: string,
): SafeParseResult<CreatePromptMessages, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreatePromptMessages$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreatePromptMessages' from JSON`,
  );
}

/** @internal */
export const PromptConfig$inboundSchema: z.ZodType<
  PromptConfig,
  z.ZodTypeDef,
  unknown
> = z.object({
  stream: z.boolean().optional(),
  model: z.string().optional(),
  model_type: ModelType$inboundSchema.optional(),
  model_parameters: z.lazy(() => ModelParameters$inboundSchema).optional(),
  provider: Provider$inboundSchema.optional(),
  version: z.string().optional(),
  messages: z.array(z.lazy(() => CreatePromptMessages$inboundSchema)),
}).transform((v) => {
  return remap$(v, {
    "model_type": "modelType",
    "model_parameters": "modelParameters",
  });
});

/** @internal */
export type PromptConfig$Outbound = {
  stream?: boolean | undefined;
  model?: string | undefined;
  model_type?: string | undefined;
  model_parameters?: ModelParameters$Outbound | undefined;
  provider?: string | undefined;
  version?: string | undefined;
  messages: Array<CreatePromptMessages$Outbound>;
};

/** @internal */
export const PromptConfig$outboundSchema: z.ZodType<
  PromptConfig$Outbound,
  z.ZodTypeDef,
  PromptConfig
> = z.object({
  stream: z.boolean().optional(),
  model: z.string().optional(),
  modelType: ModelType$outboundSchema.optional(),
  modelParameters: z.lazy(() => ModelParameters$outboundSchema).optional(),
  provider: Provider$outboundSchema.optional(),
  version: z.string().optional(),
  messages: z.array(z.lazy(() => CreatePromptMessages$outboundSchema)),
}).transform((v) => {
  return remap$(v, {
    modelType: "model_type",
    modelParameters: "model_parameters",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PromptConfig$ {
  /** @deprecated use `PromptConfig$inboundSchema` instead. */
  export const inboundSchema = PromptConfig$inboundSchema;
  /** @deprecated use `PromptConfig$outboundSchema` instead. */
  export const outboundSchema = PromptConfig$outboundSchema;
  /** @deprecated use `PromptConfig$Outbound` instead. */
  export type Outbound = PromptConfig$Outbound;
}

export function promptConfigToJSON(promptConfig: PromptConfig): string {
  return JSON.stringify(PromptConfig$outboundSchema.parse(promptConfig));
}

export function promptConfigFromJSON(
  jsonString: string,
): SafeParseResult<PromptConfig, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PromptConfig$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PromptConfig' from JSON`,
  );
}

/** @internal */
export const Metadata$inboundSchema: z.ZodType<
  Metadata,
  z.ZodTypeDef,
  unknown
> = z.object({
  use_cases: z.array(z.string()).optional(),
  language: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "use_cases": "useCases",
  });
});

/** @internal */
export type Metadata$Outbound = {
  use_cases?: Array<string> | undefined;
  language?: string | undefined;
};

/** @internal */
export const Metadata$outboundSchema: z.ZodType<
  Metadata$Outbound,
  z.ZodTypeDef,
  Metadata
> = z.object({
  useCases: z.array(z.string()).optional(),
  language: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    useCases: "use_cases",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Metadata$ {
  /** @deprecated use `Metadata$inboundSchema` instead. */
  export const inboundSchema = Metadata$inboundSchema;
  /** @deprecated use `Metadata$outboundSchema` instead. */
  export const outboundSchema = Metadata$outboundSchema;
  /** @deprecated use `Metadata$Outbound` instead. */
  export type Outbound = Metadata$Outbound;
}

export function metadataToJSON(metadata: Metadata): string {
  return JSON.stringify(Metadata$outboundSchema.parse(metadata));
}

export function metadataFromJSON(
  jsonString: string,
): SafeParseResult<Metadata, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Metadata$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Metadata' from JSON`,
  );
}

/** @internal */
export const CreatePromptPromptsType$inboundSchema: z.ZodNativeEnum<
  typeof CreatePromptPromptsType
> = z.nativeEnum(CreatePromptPromptsType);

/** @internal */
export const CreatePromptPromptsType$outboundSchema: z.ZodNativeEnum<
  typeof CreatePromptPromptsType
> = CreatePromptPromptsType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreatePromptPromptsType$ {
  /** @deprecated use `CreatePromptPromptsType$inboundSchema` instead. */
  export const inboundSchema = CreatePromptPromptsType$inboundSchema;
  /** @deprecated use `CreatePromptPromptsType$outboundSchema` instead. */
  export const outboundSchema = CreatePromptPromptsType$outboundSchema;
}

/** @internal */
export const CreatePromptRequestBody$inboundSchema: z.ZodType<
  CreatePromptRequestBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  display_name: z.string(),
  description: z.nullable(z.string()).optional(),
  prompt_config: z.lazy(() => PromptConfig$inboundSchema).optional(),
  metadata: z.lazy(() => Metadata$inboundSchema).optional(),
  key: z.string().optional(),
  type: CreatePromptPromptsType$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "display_name": "displayName",
    "prompt_config": "promptConfig",
  });
});

/** @internal */
export type CreatePromptRequestBody$Outbound = {
  display_name: string;
  description?: string | null | undefined;
  prompt_config?: PromptConfig$Outbound | undefined;
  metadata?: Metadata$Outbound | undefined;
  key?: string | undefined;
  type: string;
};

/** @internal */
export const CreatePromptRequestBody$outboundSchema: z.ZodType<
  CreatePromptRequestBody$Outbound,
  z.ZodTypeDef,
  CreatePromptRequestBody
> = z.object({
  displayName: z.string(),
  description: z.nullable(z.string()).optional(),
  promptConfig: z.lazy(() => PromptConfig$outboundSchema).optional(),
  metadata: z.lazy(() => Metadata$outboundSchema).optional(),
  key: z.string().optional(),
  type: CreatePromptPromptsType$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    displayName: "display_name",
    promptConfig: "prompt_config",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreatePromptRequestBody$ {
  /** @deprecated use `CreatePromptRequestBody$inboundSchema` instead. */
  export const inboundSchema = CreatePromptRequestBody$inboundSchema;
  /** @deprecated use `CreatePromptRequestBody$outboundSchema` instead. */
  export const outboundSchema = CreatePromptRequestBody$outboundSchema;
  /** @deprecated use `CreatePromptRequestBody$Outbound` instead. */
  export type Outbound = CreatePromptRequestBody$Outbound;
}

export function createPromptRequestBodyToJSON(
  createPromptRequestBody: CreatePromptRequestBody,
): string {
  return JSON.stringify(
    CreatePromptRequestBody$outboundSchema.parse(createPromptRequestBody),
  );
}

export function createPromptRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<CreatePromptRequestBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreatePromptRequestBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreatePromptRequestBody' from JSON`,
  );
}

/** @internal */
export const CreatePromptModelType$inboundSchema: z.ZodNativeEnum<
  typeof CreatePromptModelType
> = z.nativeEnum(CreatePromptModelType);

/** @internal */
export const CreatePromptModelType$outboundSchema: z.ZodNativeEnum<
  typeof CreatePromptModelType
> = CreatePromptModelType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreatePromptModelType$ {
  /** @deprecated use `CreatePromptModelType$inboundSchema` instead. */
  export const inboundSchema = CreatePromptModelType$inboundSchema;
  /** @deprecated use `CreatePromptModelType$outboundSchema` instead. */
  export const outboundSchema = CreatePromptModelType$outboundSchema;
}

/** @internal */
export const CreatePromptFormat$inboundSchema: z.ZodNativeEnum<
  typeof CreatePromptFormat
> = z.nativeEnum(CreatePromptFormat);

/** @internal */
export const CreatePromptFormat$outboundSchema: z.ZodNativeEnum<
  typeof CreatePromptFormat
> = CreatePromptFormat$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreatePromptFormat$ {
  /** @deprecated use `CreatePromptFormat$inboundSchema` instead. */
  export const inboundSchema = CreatePromptFormat$inboundSchema;
  /** @deprecated use `CreatePromptFormat$outboundSchema` instead. */
  export const outboundSchema = CreatePromptFormat$outboundSchema;
}

/** @internal */
export const CreatePromptQuality$inboundSchema: z.ZodNativeEnum<
  typeof CreatePromptQuality
> = z.nativeEnum(CreatePromptQuality);

/** @internal */
export const CreatePromptQuality$outboundSchema: z.ZodNativeEnum<
  typeof CreatePromptQuality
> = CreatePromptQuality$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreatePromptQuality$ {
  /** @deprecated use `CreatePromptQuality$inboundSchema` instead. */
  export const inboundSchema = CreatePromptQuality$inboundSchema;
  /** @deprecated use `CreatePromptQuality$outboundSchema` instead. */
  export const outboundSchema = CreatePromptQuality$outboundSchema;
}

/** @internal */
export const CreatePromptResponseFormatPromptsResponseType$inboundSchema:
  z.ZodNativeEnum<typeof CreatePromptResponseFormatPromptsResponseType> = z
    .nativeEnum(CreatePromptResponseFormatPromptsResponseType);

/** @internal */
export const CreatePromptResponseFormatPromptsResponseType$outboundSchema:
  z.ZodNativeEnum<typeof CreatePromptResponseFormatPromptsResponseType> =
    CreatePromptResponseFormatPromptsResponseType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreatePromptResponseFormatPromptsResponseType$ {
  /** @deprecated use `CreatePromptResponseFormatPromptsResponseType$inboundSchema` instead. */
  export const inboundSchema =
    CreatePromptResponseFormatPromptsResponseType$inboundSchema;
  /** @deprecated use `CreatePromptResponseFormatPromptsResponseType$outboundSchema` instead. */
  export const outboundSchema =
    CreatePromptResponseFormatPromptsResponseType$outboundSchema;
}

/** @internal */
export const CreatePromptResponseFormat2$inboundSchema: z.ZodType<
  CreatePromptResponseFormat2,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: CreatePromptResponseFormatPromptsResponseType$inboundSchema,
});

/** @internal */
export type CreatePromptResponseFormat2$Outbound = {
  type: string;
};

/** @internal */
export const CreatePromptResponseFormat2$outboundSchema: z.ZodType<
  CreatePromptResponseFormat2$Outbound,
  z.ZodTypeDef,
  CreatePromptResponseFormat2
> = z.object({
  type: CreatePromptResponseFormatPromptsResponseType$outboundSchema,
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreatePromptResponseFormat2$ {
  /** @deprecated use `CreatePromptResponseFormat2$inboundSchema` instead. */
  export const inboundSchema = CreatePromptResponseFormat2$inboundSchema;
  /** @deprecated use `CreatePromptResponseFormat2$outboundSchema` instead. */
  export const outboundSchema = CreatePromptResponseFormat2$outboundSchema;
  /** @deprecated use `CreatePromptResponseFormat2$Outbound` instead. */
  export type Outbound = CreatePromptResponseFormat2$Outbound;
}

export function createPromptResponseFormat2ToJSON(
  createPromptResponseFormat2: CreatePromptResponseFormat2,
): string {
  return JSON.stringify(
    CreatePromptResponseFormat2$outboundSchema.parse(
      createPromptResponseFormat2,
    ),
  );
}

export function createPromptResponseFormat2FromJSON(
  jsonString: string,
): SafeParseResult<CreatePromptResponseFormat2, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreatePromptResponseFormat2$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreatePromptResponseFormat2' from JSON`,
  );
}

/** @internal */
export const CreatePromptResponseFormatPromptsType$inboundSchema:
  z.ZodNativeEnum<typeof CreatePromptResponseFormatPromptsType> = z.nativeEnum(
    CreatePromptResponseFormatPromptsType,
  );

/** @internal */
export const CreatePromptResponseFormatPromptsType$outboundSchema:
  z.ZodNativeEnum<typeof CreatePromptResponseFormatPromptsType> =
    CreatePromptResponseFormatPromptsType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreatePromptResponseFormatPromptsType$ {
  /** @deprecated use `CreatePromptResponseFormatPromptsType$inboundSchema` instead. */
  export const inboundSchema =
    CreatePromptResponseFormatPromptsType$inboundSchema;
  /** @deprecated use `CreatePromptResponseFormatPromptsType$outboundSchema` instead. */
  export const outboundSchema =
    CreatePromptResponseFormatPromptsType$outboundSchema;
}

/** @internal */
export const CreatePromptResponseFormatJsonSchema$inboundSchema: z.ZodType<
  CreatePromptResponseFormatJsonSchema,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.string(),
  strict: z.boolean(),
  schema: z.record(z.any()),
});

/** @internal */
export type CreatePromptResponseFormatJsonSchema$Outbound = {
  name: string;
  strict: boolean;
  schema: { [k: string]: any };
};

/** @internal */
export const CreatePromptResponseFormatJsonSchema$outboundSchema: z.ZodType<
  CreatePromptResponseFormatJsonSchema$Outbound,
  z.ZodTypeDef,
  CreatePromptResponseFormatJsonSchema
> = z.object({
  name: z.string(),
  strict: z.boolean(),
  schema: z.record(z.any()),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreatePromptResponseFormatJsonSchema$ {
  /** @deprecated use `CreatePromptResponseFormatJsonSchema$inboundSchema` instead. */
  export const inboundSchema =
    CreatePromptResponseFormatJsonSchema$inboundSchema;
  /** @deprecated use `CreatePromptResponseFormatJsonSchema$outboundSchema` instead. */
  export const outboundSchema =
    CreatePromptResponseFormatJsonSchema$outboundSchema;
  /** @deprecated use `CreatePromptResponseFormatJsonSchema$Outbound` instead. */
  export type Outbound = CreatePromptResponseFormatJsonSchema$Outbound;
}

export function createPromptResponseFormatJsonSchemaToJSON(
  createPromptResponseFormatJsonSchema: CreatePromptResponseFormatJsonSchema,
): string {
  return JSON.stringify(
    CreatePromptResponseFormatJsonSchema$outboundSchema.parse(
      createPromptResponseFormatJsonSchema,
    ),
  );
}

export function createPromptResponseFormatJsonSchemaFromJSON(
  jsonString: string,
): SafeParseResult<CreatePromptResponseFormatJsonSchema, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      CreatePromptResponseFormatJsonSchema$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreatePromptResponseFormatJsonSchema' from JSON`,
  );
}

/** @internal */
export const CreatePromptResponseFormat1$inboundSchema: z.ZodType<
  CreatePromptResponseFormat1,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: CreatePromptResponseFormatPromptsType$inboundSchema,
  json_schema: z.lazy(() => CreatePromptResponseFormatJsonSchema$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "json_schema": "jsonSchema",
  });
});

/** @internal */
export type CreatePromptResponseFormat1$Outbound = {
  type: string;
  json_schema: CreatePromptResponseFormatJsonSchema$Outbound;
};

/** @internal */
export const CreatePromptResponseFormat1$outboundSchema: z.ZodType<
  CreatePromptResponseFormat1$Outbound,
  z.ZodTypeDef,
  CreatePromptResponseFormat1
> = z.object({
  type: CreatePromptResponseFormatPromptsType$outboundSchema,
  jsonSchema: z.lazy(() => CreatePromptResponseFormatJsonSchema$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    jsonSchema: "json_schema",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreatePromptResponseFormat1$ {
  /** @deprecated use `CreatePromptResponseFormat1$inboundSchema` instead. */
  export const inboundSchema = CreatePromptResponseFormat1$inboundSchema;
  /** @deprecated use `CreatePromptResponseFormat1$outboundSchema` instead. */
  export const outboundSchema = CreatePromptResponseFormat1$outboundSchema;
  /** @deprecated use `CreatePromptResponseFormat1$Outbound` instead. */
  export type Outbound = CreatePromptResponseFormat1$Outbound;
}

export function createPromptResponseFormat1ToJSON(
  createPromptResponseFormat1: CreatePromptResponseFormat1,
): string {
  return JSON.stringify(
    CreatePromptResponseFormat1$outboundSchema.parse(
      createPromptResponseFormat1,
    ),
  );
}

export function createPromptResponseFormat1FromJSON(
  jsonString: string,
): SafeParseResult<CreatePromptResponseFormat1, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreatePromptResponseFormat1$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreatePromptResponseFormat1' from JSON`,
  );
}

/** @internal */
export const CreatePromptResponseFormat$inboundSchema: z.ZodType<
  CreatePromptResponseFormat,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => CreatePromptResponseFormat2$inboundSchema),
  z.lazy(() => CreatePromptResponseFormat1$inboundSchema),
]);

/** @internal */
export type CreatePromptResponseFormat$Outbound =
  | CreatePromptResponseFormat2$Outbound
  | CreatePromptResponseFormat1$Outbound;

/** @internal */
export const CreatePromptResponseFormat$outboundSchema: z.ZodType<
  CreatePromptResponseFormat$Outbound,
  z.ZodTypeDef,
  CreatePromptResponseFormat
> = z.union([
  z.lazy(() => CreatePromptResponseFormat2$outboundSchema),
  z.lazy(() => CreatePromptResponseFormat1$outboundSchema),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreatePromptResponseFormat$ {
  /** @deprecated use `CreatePromptResponseFormat$inboundSchema` instead. */
  export const inboundSchema = CreatePromptResponseFormat$inboundSchema;
  /** @deprecated use `CreatePromptResponseFormat$outboundSchema` instead. */
  export const outboundSchema = CreatePromptResponseFormat$outboundSchema;
  /** @deprecated use `CreatePromptResponseFormat$Outbound` instead. */
  export type Outbound = CreatePromptResponseFormat$Outbound;
}

export function createPromptResponseFormatToJSON(
  createPromptResponseFormat: CreatePromptResponseFormat,
): string {
  return JSON.stringify(
    CreatePromptResponseFormat$outboundSchema.parse(createPromptResponseFormat),
  );
}

export function createPromptResponseFormatFromJSON(
  jsonString: string,
): SafeParseResult<CreatePromptResponseFormat, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreatePromptResponseFormat$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreatePromptResponseFormat' from JSON`,
  );
}

/** @internal */
export const CreatePromptPhotoRealVersion$inboundSchema: z.ZodNativeEnum<
  typeof CreatePromptPhotoRealVersion
> = z.nativeEnum(CreatePromptPhotoRealVersion);

/** @internal */
export const CreatePromptPhotoRealVersion$outboundSchema: z.ZodNativeEnum<
  typeof CreatePromptPhotoRealVersion
> = CreatePromptPhotoRealVersion$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreatePromptPhotoRealVersion$ {
  /** @deprecated use `CreatePromptPhotoRealVersion$inboundSchema` instead. */
  export const inboundSchema = CreatePromptPhotoRealVersion$inboundSchema;
  /** @deprecated use `CreatePromptPhotoRealVersion$outboundSchema` instead. */
  export const outboundSchema = CreatePromptPhotoRealVersion$outboundSchema;
}

/** @internal */
export const CreatePromptEncodingFormat$inboundSchema: z.ZodNativeEnum<
  typeof CreatePromptEncodingFormat
> = z.nativeEnum(CreatePromptEncodingFormat);

/** @internal */
export const CreatePromptEncodingFormat$outboundSchema: z.ZodNativeEnum<
  typeof CreatePromptEncodingFormat
> = CreatePromptEncodingFormat$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreatePromptEncodingFormat$ {
  /** @deprecated use `CreatePromptEncodingFormat$inboundSchema` instead. */
  export const inboundSchema = CreatePromptEncodingFormat$inboundSchema;
  /** @deprecated use `CreatePromptEncodingFormat$outboundSchema` instead. */
  export const outboundSchema = CreatePromptEncodingFormat$outboundSchema;
}

/** @internal */
export const CreatePromptModelParameters$inboundSchema: z.ZodType<
  CreatePromptModelParameters,
  z.ZodTypeDef,
  unknown
> = z.object({
  temperature: z.number().optional(),
  maxTokens: z.number().optional(),
  topK: z.number().optional(),
  topP: z.number().optional(),
  frequencyPenalty: z.number().optional(),
  presencePenalty: z.number().optional(),
  numImages: z.number().optional(),
  seed: z.number().optional(),
  format: CreatePromptFormat$inboundSchema.optional(),
  dimensions: z.string().optional(),
  quality: CreatePromptQuality$inboundSchema.optional(),
  style: z.string().optional(),
  responseFormat: z.nullable(
    z.union([
      z.lazy(() => CreatePromptResponseFormat2$inboundSchema),
      z.lazy(() => CreatePromptResponseFormat1$inboundSchema),
    ]),
  ).optional(),
  photoRealVersion: CreatePromptPhotoRealVersion$inboundSchema.optional(),
  encoding_format: CreatePromptEncodingFormat$inboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    "encoding_format": "encodingFormat",
  });
});

/** @internal */
export type CreatePromptModelParameters$Outbound = {
  temperature?: number | undefined;
  maxTokens?: number | undefined;
  topK?: number | undefined;
  topP?: number | undefined;
  frequencyPenalty?: number | undefined;
  presencePenalty?: number | undefined;
  numImages?: number | undefined;
  seed?: number | undefined;
  format?: string | undefined;
  dimensions?: string | undefined;
  quality?: string | undefined;
  style?: string | undefined;
  responseFormat?:
    | CreatePromptResponseFormat2$Outbound
    | CreatePromptResponseFormat1$Outbound
    | null
    | undefined;
  photoRealVersion?: string | undefined;
  encoding_format?: string | undefined;
};

/** @internal */
export const CreatePromptModelParameters$outboundSchema: z.ZodType<
  CreatePromptModelParameters$Outbound,
  z.ZodTypeDef,
  CreatePromptModelParameters
> = z.object({
  temperature: z.number().optional(),
  maxTokens: z.number().optional(),
  topK: z.number().optional(),
  topP: z.number().optional(),
  frequencyPenalty: z.number().optional(),
  presencePenalty: z.number().optional(),
  numImages: z.number().optional(),
  seed: z.number().optional(),
  format: CreatePromptFormat$outboundSchema.optional(),
  dimensions: z.string().optional(),
  quality: CreatePromptQuality$outboundSchema.optional(),
  style: z.string().optional(),
  responseFormat: z.nullable(
    z.union([
      z.lazy(() => CreatePromptResponseFormat2$outboundSchema),
      z.lazy(() => CreatePromptResponseFormat1$outboundSchema),
    ]),
  ).optional(),
  photoRealVersion: CreatePromptPhotoRealVersion$outboundSchema.optional(),
  encodingFormat: CreatePromptEncodingFormat$outboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    encodingFormat: "encoding_format",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreatePromptModelParameters$ {
  /** @deprecated use `CreatePromptModelParameters$inboundSchema` instead. */
  export const inboundSchema = CreatePromptModelParameters$inboundSchema;
  /** @deprecated use `CreatePromptModelParameters$outboundSchema` instead. */
  export const outboundSchema = CreatePromptModelParameters$outboundSchema;
  /** @deprecated use `CreatePromptModelParameters$Outbound` instead. */
  export type Outbound = CreatePromptModelParameters$Outbound;
}

export function createPromptModelParametersToJSON(
  createPromptModelParameters: CreatePromptModelParameters,
): string {
  return JSON.stringify(
    CreatePromptModelParameters$outboundSchema.parse(
      createPromptModelParameters,
    ),
  );
}

export function createPromptModelParametersFromJSON(
  jsonString: string,
): SafeParseResult<CreatePromptModelParameters, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreatePromptModelParameters$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreatePromptModelParameters' from JSON`,
  );
}

/** @internal */
export const CreatePromptProvider$inboundSchema: z.ZodNativeEnum<
  typeof CreatePromptProvider
> = z.nativeEnum(CreatePromptProvider);

/** @internal */
export const CreatePromptProvider$outboundSchema: z.ZodNativeEnum<
  typeof CreatePromptProvider
> = CreatePromptProvider$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreatePromptProvider$ {
  /** @deprecated use `CreatePromptProvider$inboundSchema` instead. */
  export const inboundSchema = CreatePromptProvider$inboundSchema;
  /** @deprecated use `CreatePromptProvider$outboundSchema` instead. */
  export const outboundSchema = CreatePromptProvider$outboundSchema;
}

/** @internal */
export const CreatePromptPromptsRole$inboundSchema: z.ZodNativeEnum<
  typeof CreatePromptPromptsRole
> = z.nativeEnum(CreatePromptPromptsRole);

/** @internal */
export const CreatePromptPromptsRole$outboundSchema: z.ZodNativeEnum<
  typeof CreatePromptPromptsRole
> = CreatePromptPromptsRole$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreatePromptPromptsRole$ {
  /** @deprecated use `CreatePromptPromptsRole$inboundSchema` instead. */
  export const inboundSchema = CreatePromptPromptsRole$inboundSchema;
  /** @deprecated use `CreatePromptPromptsRole$outboundSchema` instead. */
  export const outboundSchema = CreatePromptPromptsRole$outboundSchema;
}

/** @internal */
export const CreatePrompt2PromptsResponse200Type$inboundSchema: z.ZodNativeEnum<
  typeof CreatePrompt2PromptsResponse200Type
> = z.nativeEnum(CreatePrompt2PromptsResponse200Type);

/** @internal */
export const CreatePrompt2PromptsResponse200Type$outboundSchema:
  z.ZodNativeEnum<typeof CreatePrompt2PromptsResponse200Type> =
    CreatePrompt2PromptsResponse200Type$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreatePrompt2PromptsResponse200Type$ {
  /** @deprecated use `CreatePrompt2PromptsResponse200Type$inboundSchema` instead. */
  export const inboundSchema =
    CreatePrompt2PromptsResponse200Type$inboundSchema;
  /** @deprecated use `CreatePrompt2PromptsResponse200Type$outboundSchema` instead. */
  export const outboundSchema =
    CreatePrompt2PromptsResponse200Type$outboundSchema;
}

/** @internal */
export const CreatePrompt2PromptsImageUrl$inboundSchema: z.ZodType<
  CreatePrompt2PromptsImageUrl,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string().optional(),
  url: z.string(),
  detail: z.string().optional(),
});

/** @internal */
export type CreatePrompt2PromptsImageUrl$Outbound = {
  id?: string | undefined;
  url: string;
  detail?: string | undefined;
};

/** @internal */
export const CreatePrompt2PromptsImageUrl$outboundSchema: z.ZodType<
  CreatePrompt2PromptsImageUrl$Outbound,
  z.ZodTypeDef,
  CreatePrompt2PromptsImageUrl
> = z.object({
  id: z.string().optional(),
  url: z.string(),
  detail: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreatePrompt2PromptsImageUrl$ {
  /** @deprecated use `CreatePrompt2PromptsImageUrl$inboundSchema` instead. */
  export const inboundSchema = CreatePrompt2PromptsImageUrl$inboundSchema;
  /** @deprecated use `CreatePrompt2PromptsImageUrl$outboundSchema` instead. */
  export const outboundSchema = CreatePrompt2PromptsImageUrl$outboundSchema;
  /** @deprecated use `CreatePrompt2PromptsImageUrl$Outbound` instead. */
  export type Outbound = CreatePrompt2PromptsImageUrl$Outbound;
}

export function createPrompt2PromptsImageUrlToJSON(
  createPrompt2PromptsImageUrl: CreatePrompt2PromptsImageUrl,
): string {
  return JSON.stringify(
    CreatePrompt2PromptsImageUrl$outboundSchema.parse(
      createPrompt2PromptsImageUrl,
    ),
  );
}

export function createPrompt2PromptsImageUrlFromJSON(
  jsonString: string,
): SafeParseResult<CreatePrompt2PromptsImageUrl, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreatePrompt2PromptsImageUrl$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreatePrompt2PromptsImageUrl' from JSON`,
  );
}

/** @internal */
export const CreatePrompt2Prompts2$inboundSchema: z.ZodType<
  CreatePrompt2Prompts2,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: CreatePrompt2PromptsResponse200Type$inboundSchema,
  image_url: z.lazy(() => CreatePrompt2PromptsImageUrl$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "image_url": "imageUrl",
  });
});

/** @internal */
export type CreatePrompt2Prompts2$Outbound = {
  type: string;
  image_url: CreatePrompt2PromptsImageUrl$Outbound;
};

/** @internal */
export const CreatePrompt2Prompts2$outboundSchema: z.ZodType<
  CreatePrompt2Prompts2$Outbound,
  z.ZodTypeDef,
  CreatePrompt2Prompts2
> = z.object({
  type: CreatePrompt2PromptsResponse200Type$outboundSchema,
  imageUrl: z.lazy(() => CreatePrompt2PromptsImageUrl$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    imageUrl: "image_url",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreatePrompt2Prompts2$ {
  /** @deprecated use `CreatePrompt2Prompts2$inboundSchema` instead. */
  export const inboundSchema = CreatePrompt2Prompts2$inboundSchema;
  /** @deprecated use `CreatePrompt2Prompts2$outboundSchema` instead. */
  export const outboundSchema = CreatePrompt2Prompts2$outboundSchema;
  /** @deprecated use `CreatePrompt2Prompts2$Outbound` instead. */
  export type Outbound = CreatePrompt2Prompts2$Outbound;
}

export function createPrompt2Prompts2ToJSON(
  createPrompt2Prompts2: CreatePrompt2Prompts2,
): string {
  return JSON.stringify(
    CreatePrompt2Prompts2$outboundSchema.parse(createPrompt2Prompts2),
  );
}

export function createPrompt2Prompts2FromJSON(
  jsonString: string,
): SafeParseResult<CreatePrompt2Prompts2, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreatePrompt2Prompts2$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreatePrompt2Prompts2' from JSON`,
  );
}

/** @internal */
export const CreatePrompt2PromptsResponseType$inboundSchema: z.ZodNativeEnum<
  typeof CreatePrompt2PromptsResponseType
> = z.nativeEnum(CreatePrompt2PromptsResponseType);

/** @internal */
export const CreatePrompt2PromptsResponseType$outboundSchema: z.ZodNativeEnum<
  typeof CreatePrompt2PromptsResponseType
> = CreatePrompt2PromptsResponseType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreatePrompt2PromptsResponseType$ {
  /** @deprecated use `CreatePrompt2PromptsResponseType$inboundSchema` instead. */
  export const inboundSchema = CreatePrompt2PromptsResponseType$inboundSchema;
  /** @deprecated use `CreatePrompt2PromptsResponseType$outboundSchema` instead. */
  export const outboundSchema = CreatePrompt2PromptsResponseType$outboundSchema;
}

/** @internal */
export const CreatePrompt2Prompts1$inboundSchema: z.ZodType<
  CreatePrompt2Prompts1,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: CreatePrompt2PromptsResponseType$inboundSchema,
  text: z.string(),
});

/** @internal */
export type CreatePrompt2Prompts1$Outbound = {
  type: string;
  text: string;
};

/** @internal */
export const CreatePrompt2Prompts1$outboundSchema: z.ZodType<
  CreatePrompt2Prompts1$Outbound,
  z.ZodTypeDef,
  CreatePrompt2Prompts1
> = z.object({
  type: CreatePrompt2PromptsResponseType$outboundSchema,
  text: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreatePrompt2Prompts1$ {
  /** @deprecated use `CreatePrompt2Prompts1$inboundSchema` instead. */
  export const inboundSchema = CreatePrompt2Prompts1$inboundSchema;
  /** @deprecated use `CreatePrompt2Prompts1$outboundSchema` instead. */
  export const outboundSchema = CreatePrompt2Prompts1$outboundSchema;
  /** @deprecated use `CreatePrompt2Prompts1$Outbound` instead. */
  export type Outbound = CreatePrompt2Prompts1$Outbound;
}

export function createPrompt2Prompts1ToJSON(
  createPrompt2Prompts1: CreatePrompt2Prompts1,
): string {
  return JSON.stringify(
    CreatePrompt2Prompts1$outboundSchema.parse(createPrompt2Prompts1),
  );
}

export function createPrompt2Prompts1FromJSON(
  jsonString: string,
): SafeParseResult<CreatePrompt2Prompts1, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreatePrompt2Prompts1$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreatePrompt2Prompts1' from JSON`,
  );
}

/** @internal */
export const CreatePromptContentPrompts2$inboundSchema: z.ZodType<
  CreatePromptContentPrompts2,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => CreatePrompt2Prompts1$inboundSchema),
  z.lazy(() => CreatePrompt2Prompts2$inboundSchema),
]);

/** @internal */
export type CreatePromptContentPrompts2$Outbound =
  | CreatePrompt2Prompts1$Outbound
  | CreatePrompt2Prompts2$Outbound;

/** @internal */
export const CreatePromptContentPrompts2$outboundSchema: z.ZodType<
  CreatePromptContentPrompts2$Outbound,
  z.ZodTypeDef,
  CreatePromptContentPrompts2
> = z.union([
  z.lazy(() => CreatePrompt2Prompts1$outboundSchema),
  z.lazy(() => CreatePrompt2Prompts2$outboundSchema),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreatePromptContentPrompts2$ {
  /** @deprecated use `CreatePromptContentPrompts2$inboundSchema` instead. */
  export const inboundSchema = CreatePromptContentPrompts2$inboundSchema;
  /** @deprecated use `CreatePromptContentPrompts2$outboundSchema` instead. */
  export const outboundSchema = CreatePromptContentPrompts2$outboundSchema;
  /** @deprecated use `CreatePromptContentPrompts2$Outbound` instead. */
  export type Outbound = CreatePromptContentPrompts2$Outbound;
}

export function createPromptContentPrompts2ToJSON(
  createPromptContentPrompts2: CreatePromptContentPrompts2,
): string {
  return JSON.stringify(
    CreatePromptContentPrompts2$outboundSchema.parse(
      createPromptContentPrompts2,
    ),
  );
}

export function createPromptContentPrompts2FromJSON(
  jsonString: string,
): SafeParseResult<CreatePromptContentPrompts2, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreatePromptContentPrompts2$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreatePromptContentPrompts2' from JSON`,
  );
}

/** @internal */
export const CreatePromptPromptsContent$inboundSchema: z.ZodType<
  CreatePromptPromptsContent,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.string(),
  z.array(z.union([
    z.lazy(() => CreatePrompt2Prompts1$inboundSchema),
    z.lazy(() => CreatePrompt2Prompts2$inboundSchema),
  ])),
]);

/** @internal */
export type CreatePromptPromptsContent$Outbound =
  | string
  | Array<CreatePrompt2Prompts1$Outbound | CreatePrompt2Prompts2$Outbound>;

/** @internal */
export const CreatePromptPromptsContent$outboundSchema: z.ZodType<
  CreatePromptPromptsContent$Outbound,
  z.ZodTypeDef,
  CreatePromptPromptsContent
> = z.union([
  z.string(),
  z.array(z.union([
    z.lazy(() => CreatePrompt2Prompts1$outboundSchema),
    z.lazy(() => CreatePrompt2Prompts2$outboundSchema),
  ])),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreatePromptPromptsContent$ {
  /** @deprecated use `CreatePromptPromptsContent$inboundSchema` instead. */
  export const inboundSchema = CreatePromptPromptsContent$inboundSchema;
  /** @deprecated use `CreatePromptPromptsContent$outboundSchema` instead. */
  export const outboundSchema = CreatePromptPromptsContent$outboundSchema;
  /** @deprecated use `CreatePromptPromptsContent$Outbound` instead. */
  export type Outbound = CreatePromptPromptsContent$Outbound;
}

export function createPromptPromptsContentToJSON(
  createPromptPromptsContent: CreatePromptPromptsContent,
): string {
  return JSON.stringify(
    CreatePromptPromptsContent$outboundSchema.parse(createPromptPromptsContent),
  );
}

export function createPromptPromptsContentFromJSON(
  jsonString: string,
): SafeParseResult<CreatePromptPromptsContent, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreatePromptPromptsContent$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreatePromptPromptsContent' from JSON`,
  );
}

/** @internal */
export const CreatePromptPromptsResponse200Type$inboundSchema: z.ZodNativeEnum<
  typeof CreatePromptPromptsResponse200Type
> = z.nativeEnum(CreatePromptPromptsResponse200Type);

/** @internal */
export const CreatePromptPromptsResponse200Type$outboundSchema: z.ZodNativeEnum<
  typeof CreatePromptPromptsResponse200Type
> = CreatePromptPromptsResponse200Type$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreatePromptPromptsResponse200Type$ {
  /** @deprecated use `CreatePromptPromptsResponse200Type$inboundSchema` instead. */
  export const inboundSchema = CreatePromptPromptsResponse200Type$inboundSchema;
  /** @deprecated use `CreatePromptPromptsResponse200Type$outboundSchema` instead. */
  export const outboundSchema =
    CreatePromptPromptsResponse200Type$outboundSchema;
}

/** @internal */
export const CreatePromptPromptsFunction$inboundSchema: z.ZodType<
  CreatePromptPromptsFunction,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.string(),
  arguments: z.string(),
});

/** @internal */
export type CreatePromptPromptsFunction$Outbound = {
  name: string;
  arguments: string;
};

/** @internal */
export const CreatePromptPromptsFunction$outboundSchema: z.ZodType<
  CreatePromptPromptsFunction$Outbound,
  z.ZodTypeDef,
  CreatePromptPromptsFunction
> = z.object({
  name: z.string(),
  arguments: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreatePromptPromptsFunction$ {
  /** @deprecated use `CreatePromptPromptsFunction$inboundSchema` instead. */
  export const inboundSchema = CreatePromptPromptsFunction$inboundSchema;
  /** @deprecated use `CreatePromptPromptsFunction$outboundSchema` instead. */
  export const outboundSchema = CreatePromptPromptsFunction$outboundSchema;
  /** @deprecated use `CreatePromptPromptsFunction$Outbound` instead. */
  export type Outbound = CreatePromptPromptsFunction$Outbound;
}

export function createPromptPromptsFunctionToJSON(
  createPromptPromptsFunction: CreatePromptPromptsFunction,
): string {
  return JSON.stringify(
    CreatePromptPromptsFunction$outboundSchema.parse(
      createPromptPromptsFunction,
    ),
  );
}

export function createPromptPromptsFunctionFromJSON(
  jsonString: string,
): SafeParseResult<CreatePromptPromptsFunction, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreatePromptPromptsFunction$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreatePromptPromptsFunction' from JSON`,
  );
}

/** @internal */
export const CreatePromptPromptsToolCalls$inboundSchema: z.ZodType<
  CreatePromptPromptsToolCalls,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string().optional(),
  index: z.number().optional(),
  type: CreatePromptPromptsResponse200Type$inboundSchema,
  function: z.lazy(() => CreatePromptPromptsFunction$inboundSchema),
});

/** @internal */
export type CreatePromptPromptsToolCalls$Outbound = {
  id?: string | undefined;
  index?: number | undefined;
  type: string;
  function: CreatePromptPromptsFunction$Outbound;
};

/** @internal */
export const CreatePromptPromptsToolCalls$outboundSchema: z.ZodType<
  CreatePromptPromptsToolCalls$Outbound,
  z.ZodTypeDef,
  CreatePromptPromptsToolCalls
> = z.object({
  id: z.string().optional(),
  index: z.number().optional(),
  type: CreatePromptPromptsResponse200Type$outboundSchema,
  function: z.lazy(() => CreatePromptPromptsFunction$outboundSchema),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreatePromptPromptsToolCalls$ {
  /** @deprecated use `CreatePromptPromptsToolCalls$inboundSchema` instead. */
  export const inboundSchema = CreatePromptPromptsToolCalls$inboundSchema;
  /** @deprecated use `CreatePromptPromptsToolCalls$outboundSchema` instead. */
  export const outboundSchema = CreatePromptPromptsToolCalls$outboundSchema;
  /** @deprecated use `CreatePromptPromptsToolCalls$Outbound` instead. */
  export type Outbound = CreatePromptPromptsToolCalls$Outbound;
}

export function createPromptPromptsToolCallsToJSON(
  createPromptPromptsToolCalls: CreatePromptPromptsToolCalls,
): string {
  return JSON.stringify(
    CreatePromptPromptsToolCalls$outboundSchema.parse(
      createPromptPromptsToolCalls,
    ),
  );
}

export function createPromptPromptsToolCallsFromJSON(
  jsonString: string,
): SafeParseResult<CreatePromptPromptsToolCalls, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreatePromptPromptsToolCalls$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreatePromptPromptsToolCalls' from JSON`,
  );
}

/** @internal */
export const CreatePromptPromptsMessages$inboundSchema: z.ZodType<
  CreatePromptPromptsMessages,
  z.ZodTypeDef,
  unknown
> = z.object({
  role: CreatePromptPromptsRole$inboundSchema,
  content: z.union([
    z.string(),
    z.array(z.union([
      z.lazy(() => CreatePrompt2Prompts1$inboundSchema),
      z.lazy(() => CreatePrompt2Prompts2$inboundSchema),
    ])),
  ]),
  tool_calls: z.array(z.lazy(() => CreatePromptPromptsToolCalls$inboundSchema))
    .optional(),
}).transform((v) => {
  return remap$(v, {
    "tool_calls": "toolCalls",
  });
});

/** @internal */
export type CreatePromptPromptsMessages$Outbound = {
  role: string;
  content:
    | string
    | Array<CreatePrompt2Prompts1$Outbound | CreatePrompt2Prompts2$Outbound>;
  tool_calls?: Array<CreatePromptPromptsToolCalls$Outbound> | undefined;
};

/** @internal */
export const CreatePromptPromptsMessages$outboundSchema: z.ZodType<
  CreatePromptPromptsMessages$Outbound,
  z.ZodTypeDef,
  CreatePromptPromptsMessages
> = z.object({
  role: CreatePromptPromptsRole$outboundSchema,
  content: z.union([
    z.string(),
    z.array(z.union([
      z.lazy(() => CreatePrompt2Prompts1$outboundSchema),
      z.lazy(() => CreatePrompt2Prompts2$outboundSchema),
    ])),
  ]),
  toolCalls: z.array(z.lazy(() => CreatePromptPromptsToolCalls$outboundSchema))
    .optional(),
}).transform((v) => {
  return remap$(v, {
    toolCalls: "tool_calls",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreatePromptPromptsMessages$ {
  /** @deprecated use `CreatePromptPromptsMessages$inboundSchema` instead. */
  export const inboundSchema = CreatePromptPromptsMessages$inboundSchema;
  /** @deprecated use `CreatePromptPromptsMessages$outboundSchema` instead. */
  export const outboundSchema = CreatePromptPromptsMessages$outboundSchema;
  /** @deprecated use `CreatePromptPromptsMessages$Outbound` instead. */
  export type Outbound = CreatePromptPromptsMessages$Outbound;
}

export function createPromptPromptsMessagesToJSON(
  createPromptPromptsMessages: CreatePromptPromptsMessages,
): string {
  return JSON.stringify(
    CreatePromptPromptsMessages$outboundSchema.parse(
      createPromptPromptsMessages,
    ),
  );
}

export function createPromptPromptsMessagesFromJSON(
  jsonString: string,
): SafeParseResult<CreatePromptPromptsMessages, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreatePromptPromptsMessages$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreatePromptPromptsMessages' from JSON`,
  );
}

/** @internal */
export const CreatePromptPromptConfig$inboundSchema: z.ZodType<
  CreatePromptPromptConfig,
  z.ZodTypeDef,
  unknown
> = z.object({
  stream: z.boolean().optional(),
  model: z.string().optional(),
  model_db_id: z.string().optional(),
  model_type: CreatePromptModelType$inboundSchema.optional(),
  model_parameters: z.lazy(() => CreatePromptModelParameters$inboundSchema)
    .optional(),
  provider: CreatePromptProvider$inboundSchema.optional(),
  integration_id: z.nullable(z.string()).optional(),
  version: z.string().optional(),
  messages: z.array(z.lazy(() => CreatePromptPromptsMessages$inboundSchema)),
}).transform((v) => {
  return remap$(v, {
    "model_db_id": "modelDbId",
    "model_type": "modelType",
    "model_parameters": "modelParameters",
    "integration_id": "integrationId",
  });
});

/** @internal */
export type CreatePromptPromptConfig$Outbound = {
  stream?: boolean | undefined;
  model?: string | undefined;
  model_db_id?: string | undefined;
  model_type?: string | undefined;
  model_parameters?: CreatePromptModelParameters$Outbound | undefined;
  provider?: string | undefined;
  integration_id?: string | null | undefined;
  version?: string | undefined;
  messages: Array<CreatePromptPromptsMessages$Outbound>;
};

/** @internal */
export const CreatePromptPromptConfig$outboundSchema: z.ZodType<
  CreatePromptPromptConfig$Outbound,
  z.ZodTypeDef,
  CreatePromptPromptConfig
> = z.object({
  stream: z.boolean().optional(),
  model: z.string().optional(),
  modelDbId: z.string().optional(),
  modelType: CreatePromptModelType$outboundSchema.optional(),
  modelParameters: z.lazy(() => CreatePromptModelParameters$outboundSchema)
    .optional(),
  provider: CreatePromptProvider$outboundSchema.optional(),
  integrationId: z.nullable(z.string()).optional(),
  version: z.string().optional(),
  messages: z.array(z.lazy(() => CreatePromptPromptsMessages$outboundSchema)),
}).transform((v) => {
  return remap$(v, {
    modelDbId: "model_db_id",
    modelType: "model_type",
    modelParameters: "model_parameters",
    integrationId: "integration_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreatePromptPromptConfig$ {
  /** @deprecated use `CreatePromptPromptConfig$inboundSchema` instead. */
  export const inboundSchema = CreatePromptPromptConfig$inboundSchema;
  /** @deprecated use `CreatePromptPromptConfig$outboundSchema` instead. */
  export const outboundSchema = CreatePromptPromptConfig$outboundSchema;
  /** @deprecated use `CreatePromptPromptConfig$Outbound` instead. */
  export type Outbound = CreatePromptPromptConfig$Outbound;
}

export function createPromptPromptConfigToJSON(
  createPromptPromptConfig: CreatePromptPromptConfig,
): string {
  return JSON.stringify(
    CreatePromptPromptConfig$outboundSchema.parse(createPromptPromptConfig),
  );
}

export function createPromptPromptConfigFromJSON(
  jsonString: string,
): SafeParseResult<CreatePromptPromptConfig, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreatePromptPromptConfig$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreatePromptPromptConfig' from JSON`,
  );
}

/** @internal */
export const CreatePromptMetadata$inboundSchema: z.ZodType<
  CreatePromptMetadata,
  z.ZodTypeDef,
  unknown
> = z.object({
  use_cases: z.array(z.string()).optional(),
  language: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "use_cases": "useCases",
  });
});

/** @internal */
export type CreatePromptMetadata$Outbound = {
  use_cases?: Array<string> | undefined;
  language?: string | undefined;
};

/** @internal */
export const CreatePromptMetadata$outboundSchema: z.ZodType<
  CreatePromptMetadata$Outbound,
  z.ZodTypeDef,
  CreatePromptMetadata
> = z.object({
  useCases: z.array(z.string()).optional(),
  language: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    useCases: "use_cases",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreatePromptMetadata$ {
  /** @deprecated use `CreatePromptMetadata$inboundSchema` instead. */
  export const inboundSchema = CreatePromptMetadata$inboundSchema;
  /** @deprecated use `CreatePromptMetadata$outboundSchema` instead. */
  export const outboundSchema = CreatePromptMetadata$outboundSchema;
  /** @deprecated use `CreatePromptMetadata$Outbound` instead. */
  export type Outbound = CreatePromptMetadata$Outbound;
}

export function createPromptMetadataToJSON(
  createPromptMetadata: CreatePromptMetadata,
): string {
  return JSON.stringify(
    CreatePromptMetadata$outboundSchema.parse(createPromptMetadata),
  );
}

export function createPromptMetadataFromJSON(
  jsonString: string,
): SafeParseResult<CreatePromptMetadata, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreatePromptMetadata$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreatePromptMetadata' from JSON`,
  );
}

/** @internal */
export const CreatePromptPromptsResponseType$inboundSchema: z.ZodNativeEnum<
  typeof CreatePromptPromptsResponseType
> = z.nativeEnum(CreatePromptPromptsResponseType);

/** @internal */
export const CreatePromptPromptsResponseType$outboundSchema: z.ZodNativeEnum<
  typeof CreatePromptPromptsResponseType
> = CreatePromptPromptsResponseType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreatePromptPromptsResponseType$ {
  /** @deprecated use `CreatePromptPromptsResponseType$inboundSchema` instead. */
  export const inboundSchema = CreatePromptPromptsResponseType$inboundSchema;
  /** @deprecated use `CreatePromptPromptsResponseType$outboundSchema` instead. */
  export const outboundSchema = CreatePromptPromptsResponseType$outboundSchema;
}

/** @internal */
export const CreatePromptResponseBody$inboundSchema: z.ZodType<
  CreatePromptResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  _id: z.string(),
  display_name: z.string(),
  domain_id: z.string(),
  description: z.nullable(z.string()).optional(),
  prompt_config: z.lazy(() => CreatePromptPromptConfig$inboundSchema)
    .optional(),
  metadata: z.lazy(() => CreatePromptMetadata$inboundSchema).optional(),
  key: z.string().optional(),
  type: CreatePromptPromptsResponseType$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "_id": "id",
    "display_name": "displayName",
    "domain_id": "domainId",
    "prompt_config": "promptConfig",
  });
});

/** @internal */
export type CreatePromptResponseBody$Outbound = {
  _id: string;
  display_name: string;
  domain_id: string;
  description?: string | null | undefined;
  prompt_config?: CreatePromptPromptConfig$Outbound | undefined;
  metadata?: CreatePromptMetadata$Outbound | undefined;
  key?: string | undefined;
  type: string;
};

/** @internal */
export const CreatePromptResponseBody$outboundSchema: z.ZodType<
  CreatePromptResponseBody$Outbound,
  z.ZodTypeDef,
  CreatePromptResponseBody
> = z.object({
  id: z.string(),
  displayName: z.string(),
  domainId: z.string(),
  description: z.nullable(z.string()).optional(),
  promptConfig: z.lazy(() => CreatePromptPromptConfig$outboundSchema)
    .optional(),
  metadata: z.lazy(() => CreatePromptMetadata$outboundSchema).optional(),
  key: z.string().optional(),
  type: CreatePromptPromptsResponseType$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    id: "_id",
    displayName: "display_name",
    domainId: "domain_id",
    promptConfig: "prompt_config",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreatePromptResponseBody$ {
  /** @deprecated use `CreatePromptResponseBody$inboundSchema` instead. */
  export const inboundSchema = CreatePromptResponseBody$inboundSchema;
  /** @deprecated use `CreatePromptResponseBody$outboundSchema` instead. */
  export const outboundSchema = CreatePromptResponseBody$outboundSchema;
  /** @deprecated use `CreatePromptResponseBody$Outbound` instead. */
  export type Outbound = CreatePromptResponseBody$Outbound;
}

export function createPromptResponseBodyToJSON(
  createPromptResponseBody: CreatePromptResponseBody,
): string {
  return JSON.stringify(
    CreatePromptResponseBody$outboundSchema.parse(createPromptResponseBody),
  );
}

export function createPromptResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<CreatePromptResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreatePromptResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreatePromptResponseBody' from JSON`,
  );
}
