/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type EvalsRagasMaliciousnessRequestBody = {
  /**
   * Latest user message
   */
  query: string;
  /**
   * The generated response from the model
   */
  output: string;
  model: string;
  /**
   * The reference used to compare the output
   */
  reference?: string | undefined;
};

/**
 * Returns the maliciousness evaluation result
 */
export type EvalsRagasMaliciousnessResponseBody = {
  value: number | null;
};

/** @internal */
export const EvalsRagasMaliciousnessRequestBody$inboundSchema: z.ZodType<
  EvalsRagasMaliciousnessRequestBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  query: z.string(),
  output: z.string(),
  model: z.string(),
  reference: z.string().optional(),
});

/** @internal */
export type EvalsRagasMaliciousnessRequestBody$Outbound = {
  query: string;
  output: string;
  model: string;
  reference?: string | undefined;
};

/** @internal */
export const EvalsRagasMaliciousnessRequestBody$outboundSchema: z.ZodType<
  EvalsRagasMaliciousnessRequestBody$Outbound,
  z.ZodTypeDef,
  EvalsRagasMaliciousnessRequestBody
> = z.object({
  query: z.string(),
  output: z.string(),
  model: z.string(),
  reference: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EvalsRagasMaliciousnessRequestBody$ {
  /** @deprecated use `EvalsRagasMaliciousnessRequestBody$inboundSchema` instead. */
  export const inboundSchema = EvalsRagasMaliciousnessRequestBody$inboundSchema;
  /** @deprecated use `EvalsRagasMaliciousnessRequestBody$outboundSchema` instead. */
  export const outboundSchema =
    EvalsRagasMaliciousnessRequestBody$outboundSchema;
  /** @deprecated use `EvalsRagasMaliciousnessRequestBody$Outbound` instead. */
  export type Outbound = EvalsRagasMaliciousnessRequestBody$Outbound;
}

export function evalsRagasMaliciousnessRequestBodyToJSON(
  evalsRagasMaliciousnessRequestBody: EvalsRagasMaliciousnessRequestBody,
): string {
  return JSON.stringify(
    EvalsRagasMaliciousnessRequestBody$outboundSchema.parse(
      evalsRagasMaliciousnessRequestBody,
    ),
  );
}

export function evalsRagasMaliciousnessRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<EvalsRagasMaliciousnessRequestBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      EvalsRagasMaliciousnessRequestBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'EvalsRagasMaliciousnessRequestBody' from JSON`,
  );
}

/** @internal */
export const EvalsRagasMaliciousnessResponseBody$inboundSchema: z.ZodType<
  EvalsRagasMaliciousnessResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  value: z.nullable(z.number()),
});

/** @internal */
export type EvalsRagasMaliciousnessResponseBody$Outbound = {
  value: number | null;
};

/** @internal */
export const EvalsRagasMaliciousnessResponseBody$outboundSchema: z.ZodType<
  EvalsRagasMaliciousnessResponseBody$Outbound,
  z.ZodTypeDef,
  EvalsRagasMaliciousnessResponseBody
> = z.object({
  value: z.nullable(z.number()),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EvalsRagasMaliciousnessResponseBody$ {
  /** @deprecated use `EvalsRagasMaliciousnessResponseBody$inboundSchema` instead. */
  export const inboundSchema =
    EvalsRagasMaliciousnessResponseBody$inboundSchema;
  /** @deprecated use `EvalsRagasMaliciousnessResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    EvalsRagasMaliciousnessResponseBody$outboundSchema;
  /** @deprecated use `EvalsRagasMaliciousnessResponseBody$Outbound` instead. */
  export type Outbound = EvalsRagasMaliciousnessResponseBody$Outbound;
}

export function evalsRagasMaliciousnessResponseBodyToJSON(
  evalsRagasMaliciousnessResponseBody: EvalsRagasMaliciousnessResponseBody,
): string {
  return JSON.stringify(
    EvalsRagasMaliciousnessResponseBody$outboundSchema.parse(
      evalsRagasMaliciousnessResponseBody,
    ),
  );
}

export function evalsRagasMaliciousnessResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<EvalsRagasMaliciousnessResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      EvalsRagasMaliciousnessResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'EvalsRagasMaliciousnessResponseBody' from JSON`,
  );
}
