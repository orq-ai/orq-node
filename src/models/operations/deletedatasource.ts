/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type DeleteDatasourceRequest = {
  /**
   * The unique identifier of the knowledge base
   */
  knowledgeId: string;
  /**
   * The unique identifier of the datasource.
   */
  datasourceId: string;
};

/** @internal */
export const DeleteDatasourceRequest$inboundSchema: z.ZodType<
  DeleteDatasourceRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  knowledge_id: z.string(),
  datasource_id: z.string(),
}).transform((v) => {
  return remap$(v, {
    "knowledge_id": "knowledgeId",
    "datasource_id": "datasourceId",
  });
});

/** @internal */
export type DeleteDatasourceRequest$Outbound = {
  knowledge_id: string;
  datasource_id: string;
};

/** @internal */
export const DeleteDatasourceRequest$outboundSchema: z.ZodType<
  DeleteDatasourceRequest$Outbound,
  z.ZodTypeDef,
  DeleteDatasourceRequest
> = z.object({
  knowledgeId: z.string(),
  datasourceId: z.string(),
}).transform((v) => {
  return remap$(v, {
    knowledgeId: "knowledge_id",
    datasourceId: "datasource_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeleteDatasourceRequest$ {
  /** @deprecated use `DeleteDatasourceRequest$inboundSchema` instead. */
  export const inboundSchema = DeleteDatasourceRequest$inboundSchema;
  /** @deprecated use `DeleteDatasourceRequest$outboundSchema` instead. */
  export const outboundSchema = DeleteDatasourceRequest$outboundSchema;
  /** @deprecated use `DeleteDatasourceRequest$Outbound` instead. */
  export type Outbound = DeleteDatasourceRequest$Outbound;
}

export function deleteDatasourceRequestToJSON(
  deleteDatasourceRequest: DeleteDatasourceRequest,
): string {
  return JSON.stringify(
    DeleteDatasourceRequest$outboundSchema.parse(deleteDatasourceRequest),
  );
}

export function deleteDatasourceRequestFromJSON(
  jsonString: string,
): SafeParseResult<DeleteDatasourceRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DeleteDatasourceRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DeleteDatasourceRequest' from JSON`,
  );
}
