/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type EvalsContainsFunctionParams = {
  value: string;
};

export type EvalsContainsRequestBody = {
  output: string;
  functionParams: EvalsContainsFunctionParams;
};

export type EvalsContainsValue = boolean | string | number;

/**
 * Returns the result of the evaluator run
 */
export type EvalsContainsResponseBody = {
  value: boolean | string | number | null;
};

/** @internal */
export const EvalsContainsFunctionParams$inboundSchema: z.ZodType<
  EvalsContainsFunctionParams,
  z.ZodTypeDef,
  unknown
> = z.object({
  value: z.string(),
});

/** @internal */
export type EvalsContainsFunctionParams$Outbound = {
  value: string;
};

/** @internal */
export const EvalsContainsFunctionParams$outboundSchema: z.ZodType<
  EvalsContainsFunctionParams$Outbound,
  z.ZodTypeDef,
  EvalsContainsFunctionParams
> = z.object({
  value: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EvalsContainsFunctionParams$ {
  /** @deprecated use `EvalsContainsFunctionParams$inboundSchema` instead. */
  export const inboundSchema = EvalsContainsFunctionParams$inboundSchema;
  /** @deprecated use `EvalsContainsFunctionParams$outboundSchema` instead. */
  export const outboundSchema = EvalsContainsFunctionParams$outboundSchema;
  /** @deprecated use `EvalsContainsFunctionParams$Outbound` instead. */
  export type Outbound = EvalsContainsFunctionParams$Outbound;
}

export function evalsContainsFunctionParamsToJSON(
  evalsContainsFunctionParams: EvalsContainsFunctionParams,
): string {
  return JSON.stringify(
    EvalsContainsFunctionParams$outboundSchema.parse(
      evalsContainsFunctionParams,
    ),
  );
}

export function evalsContainsFunctionParamsFromJSON(
  jsonString: string,
): SafeParseResult<EvalsContainsFunctionParams, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => EvalsContainsFunctionParams$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'EvalsContainsFunctionParams' from JSON`,
  );
}

/** @internal */
export const EvalsContainsRequestBody$inboundSchema: z.ZodType<
  EvalsContainsRequestBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  output: z.string(),
  function_params: z.lazy(() => EvalsContainsFunctionParams$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "function_params": "functionParams",
  });
});

/** @internal */
export type EvalsContainsRequestBody$Outbound = {
  output: string;
  function_params: EvalsContainsFunctionParams$Outbound;
};

/** @internal */
export const EvalsContainsRequestBody$outboundSchema: z.ZodType<
  EvalsContainsRequestBody$Outbound,
  z.ZodTypeDef,
  EvalsContainsRequestBody
> = z.object({
  output: z.string(),
  functionParams: z.lazy(() => EvalsContainsFunctionParams$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    functionParams: "function_params",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EvalsContainsRequestBody$ {
  /** @deprecated use `EvalsContainsRequestBody$inboundSchema` instead. */
  export const inboundSchema = EvalsContainsRequestBody$inboundSchema;
  /** @deprecated use `EvalsContainsRequestBody$outboundSchema` instead. */
  export const outboundSchema = EvalsContainsRequestBody$outboundSchema;
  /** @deprecated use `EvalsContainsRequestBody$Outbound` instead. */
  export type Outbound = EvalsContainsRequestBody$Outbound;
}

export function evalsContainsRequestBodyToJSON(
  evalsContainsRequestBody: EvalsContainsRequestBody,
): string {
  return JSON.stringify(
    EvalsContainsRequestBody$outboundSchema.parse(evalsContainsRequestBody),
  );
}

export function evalsContainsRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<EvalsContainsRequestBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => EvalsContainsRequestBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'EvalsContainsRequestBody' from JSON`,
  );
}

/** @internal */
export const EvalsContainsValue$inboundSchema: z.ZodType<
  EvalsContainsValue,
  z.ZodTypeDef,
  unknown
> = z.union([z.boolean(), z.string(), z.number()]);

/** @internal */
export type EvalsContainsValue$Outbound = boolean | string | number;

/** @internal */
export const EvalsContainsValue$outboundSchema: z.ZodType<
  EvalsContainsValue$Outbound,
  z.ZodTypeDef,
  EvalsContainsValue
> = z.union([z.boolean(), z.string(), z.number()]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EvalsContainsValue$ {
  /** @deprecated use `EvalsContainsValue$inboundSchema` instead. */
  export const inboundSchema = EvalsContainsValue$inboundSchema;
  /** @deprecated use `EvalsContainsValue$outboundSchema` instead. */
  export const outboundSchema = EvalsContainsValue$outboundSchema;
  /** @deprecated use `EvalsContainsValue$Outbound` instead. */
  export type Outbound = EvalsContainsValue$Outbound;
}

export function evalsContainsValueToJSON(
  evalsContainsValue: EvalsContainsValue,
): string {
  return JSON.stringify(
    EvalsContainsValue$outboundSchema.parse(evalsContainsValue),
  );
}

export function evalsContainsValueFromJSON(
  jsonString: string,
): SafeParseResult<EvalsContainsValue, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => EvalsContainsValue$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'EvalsContainsValue' from JSON`,
  );
}

/** @internal */
export const EvalsContainsResponseBody$inboundSchema: z.ZodType<
  EvalsContainsResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  value: z.nullable(z.union([z.boolean(), z.string(), z.number()])),
});

/** @internal */
export type EvalsContainsResponseBody$Outbound = {
  value: boolean | string | number | null;
};

/** @internal */
export const EvalsContainsResponseBody$outboundSchema: z.ZodType<
  EvalsContainsResponseBody$Outbound,
  z.ZodTypeDef,
  EvalsContainsResponseBody
> = z.object({
  value: z.nullable(z.union([z.boolean(), z.string(), z.number()])),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EvalsContainsResponseBody$ {
  /** @deprecated use `EvalsContainsResponseBody$inboundSchema` instead. */
  export const inboundSchema = EvalsContainsResponseBody$inboundSchema;
  /** @deprecated use `EvalsContainsResponseBody$outboundSchema` instead. */
  export const outboundSchema = EvalsContainsResponseBody$outboundSchema;
  /** @deprecated use `EvalsContainsResponseBody$Outbound` instead. */
  export type Outbound = EvalsContainsResponseBody$Outbound;
}

export function evalsContainsResponseBodyToJSON(
  evalsContainsResponseBody: EvalsContainsResponseBody,
): string {
  return JSON.stringify(
    EvalsContainsResponseBody$outboundSchema.parse(evalsContainsResponseBody),
  );
}

export function evalsContainsResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<EvalsContainsResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => EvalsContainsResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'EvalsContainsResponseBody' from JSON`,
  );
}
