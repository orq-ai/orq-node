/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type EvalsRagasHarmfulnessRequestBody = {
  /**
   * Latest user message
   */
  query: string;
  /**
   * The generated response from the model
   */
  output: string;
  model: string;
};

/**
 * Returns the harmfulness evaluation result
 */
export type EvalsRagasHarmfulnessResponseBody = {
  value: number | null;
};

/** @internal */
export const EvalsRagasHarmfulnessRequestBody$inboundSchema: z.ZodType<
  EvalsRagasHarmfulnessRequestBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  query: z.string(),
  output: z.string(),
  model: z.string(),
});

/** @internal */
export type EvalsRagasHarmfulnessRequestBody$Outbound = {
  query: string;
  output: string;
  model: string;
};

/** @internal */
export const EvalsRagasHarmfulnessRequestBody$outboundSchema: z.ZodType<
  EvalsRagasHarmfulnessRequestBody$Outbound,
  z.ZodTypeDef,
  EvalsRagasHarmfulnessRequestBody
> = z.object({
  query: z.string(),
  output: z.string(),
  model: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EvalsRagasHarmfulnessRequestBody$ {
  /** @deprecated use `EvalsRagasHarmfulnessRequestBody$inboundSchema` instead. */
  export const inboundSchema = EvalsRagasHarmfulnessRequestBody$inboundSchema;
  /** @deprecated use `EvalsRagasHarmfulnessRequestBody$outboundSchema` instead. */
  export const outboundSchema = EvalsRagasHarmfulnessRequestBody$outboundSchema;
  /** @deprecated use `EvalsRagasHarmfulnessRequestBody$Outbound` instead. */
  export type Outbound = EvalsRagasHarmfulnessRequestBody$Outbound;
}

export function evalsRagasHarmfulnessRequestBodyToJSON(
  evalsRagasHarmfulnessRequestBody: EvalsRagasHarmfulnessRequestBody,
): string {
  return JSON.stringify(
    EvalsRagasHarmfulnessRequestBody$outboundSchema.parse(
      evalsRagasHarmfulnessRequestBody,
    ),
  );
}

export function evalsRagasHarmfulnessRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<EvalsRagasHarmfulnessRequestBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => EvalsRagasHarmfulnessRequestBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'EvalsRagasHarmfulnessRequestBody' from JSON`,
  );
}

/** @internal */
export const EvalsRagasHarmfulnessResponseBody$inboundSchema: z.ZodType<
  EvalsRagasHarmfulnessResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  value: z.nullable(z.number()),
});

/** @internal */
export type EvalsRagasHarmfulnessResponseBody$Outbound = {
  value: number | null;
};

/** @internal */
export const EvalsRagasHarmfulnessResponseBody$outboundSchema: z.ZodType<
  EvalsRagasHarmfulnessResponseBody$Outbound,
  z.ZodTypeDef,
  EvalsRagasHarmfulnessResponseBody
> = z.object({
  value: z.nullable(z.number()),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EvalsRagasHarmfulnessResponseBody$ {
  /** @deprecated use `EvalsRagasHarmfulnessResponseBody$inboundSchema` instead. */
  export const inboundSchema = EvalsRagasHarmfulnessResponseBody$inboundSchema;
  /** @deprecated use `EvalsRagasHarmfulnessResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    EvalsRagasHarmfulnessResponseBody$outboundSchema;
  /** @deprecated use `EvalsRagasHarmfulnessResponseBody$Outbound` instead. */
  export type Outbound = EvalsRagasHarmfulnessResponseBody$Outbound;
}

export function evalsRagasHarmfulnessResponseBodyToJSON(
  evalsRagasHarmfulnessResponseBody: EvalsRagasHarmfulnessResponseBody,
): string {
  return JSON.stringify(
    EvalsRagasHarmfulnessResponseBody$outboundSchema.parse(
      evalsRagasHarmfulnessResponseBody,
    ),
  );
}

export function evalsRagasHarmfulnessResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<EvalsRagasHarmfulnessResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => EvalsRagasHarmfulnessResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'EvalsRagasHarmfulnessResponseBody' from JSON`,
  );
}
