/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * The retrieval type to use for the knowledge base. If not provided, Hybrid Search will be used as a default query strategy.
 */
export const UpdateKnowledgeRetrievalType = {
  VectorSearch: "vector_search",
  KeywordSearch: "keyword_search",
  HybridSearch: "hybrid_search",
} as const;
/**
 * The retrieval type to use for the knowledge base. If not provided, Hybrid Search will be used as a default query strategy.
 */
export type UpdateKnowledgeRetrievalType = ClosedEnum<
  typeof UpdateKnowledgeRetrievalType
>;

/**
 * The rerank configuration for the knowledge base. In case the model is provided it will be used to enhance the search precision.
 */
export type UpdateKnowledgeRerankConfig = {
  /**
   * The threshold value used to filter the rerank results, only documents with a relevance score greater than the threshold will be returned
   */
  rerankThreshold?: number | undefined;
  /**
   * The rerank model to use for the knowledge base.
   */
  rerankModel: string;
};

/**
 * The retrieval settings for the knowledge base. If not provider, Hybrid Search will be used as a default query strategy.
 */
export type UpdateKnowledgeRetrievalSettings = {
  /**
   * The retrieval type to use for the knowledge base. If not provided, Hybrid Search will be used as a default query strategy.
   */
  retrievalType?: UpdateKnowledgeRetrievalType | undefined;
  /**
   * The number of results to return from the search.
   */
  topK?: number | undefined;
  /**
   * The threshold value used to filter the search results, only documents with a relevance score greater than the threshold will be returned
   */
  threshold?: number | undefined;
  /**
   * The rerank configuration for the knowledge base. In case the model is provided it will be used to enhance the search precision.
   */
  rerankConfig?: UpdateKnowledgeRerankConfig | undefined;
};

export type UpdateKnowledgeRequestBody = {
  /**
   * The description of the knowledge base.
   */
  description?: string | undefined;
  /**
   * The embeddings model used for the knowledge base. If the models is provided and is different than the previous set model, all the datasources in the knowledge base will be re-embedded.
   */
  embeddingModel?: string | undefined;
  /**
   * The path where the entity is stored in the project structure. The first element of the path always represents the project name. Any subsequent path element after the project will be created as a folder in the project if it does not exists.
   */
  path?: string | undefined;
  /**
   * The retrieval settings for the knowledge base. If not provider, Hybrid Search will be used as a default query strategy.
   */
  retrievalSettings?: UpdateKnowledgeRetrievalSettings | undefined;
};

export type UpdateKnowledgeRequest = {
  /**
   * The unique identifier of the knowledge base
   */
  knowledgeId: string;
  requestBody: UpdateKnowledgeRequestBody;
};

/**
 * The retrieval type to use for the knowledge base. If not provided, Hybrid Search will be used as a default query strategy.
 */
export const UpdateKnowledgeKnowledgeRetrievalType = {
  VectorSearch: "vector_search",
  KeywordSearch: "keyword_search",
  HybridSearch: "hybrid_search",
} as const;
/**
 * The retrieval type to use for the knowledge base. If not provided, Hybrid Search will be used as a default query strategy.
 */
export type UpdateKnowledgeKnowledgeRetrievalType = ClosedEnum<
  typeof UpdateKnowledgeKnowledgeRetrievalType
>;

/**
 * The rerank configuration for the knowledge base. In case the model is provided it will be used to enhance the search precision.
 */
export type UpdateKnowledgeKnowledgeRerankConfig = {
  /**
   * The threshold value used to filter the rerank results, only documents with a relevance score greater than the threshold will be returned
   */
  rerankThreshold?: number | undefined;
  /**
   * The rerank model to use for the knowledge base.
   */
  rerankModel: string;
};

/**
 * The retrieval settings for the knowledge base. If not provider, Hybrid Search will be used as a default query strategy.
 */
export type UpdateKnowledgeKnowledgeRetrievalSettings = {
  /**
   * The retrieval type to use for the knowledge base. If not provided, Hybrid Search will be used as a default query strategy.
   */
  retrievalType?: UpdateKnowledgeKnowledgeRetrievalType | undefined;
  /**
   * The number of results to return from the search.
   */
  topK?: number | undefined;
  /**
   * The threshold value used to filter the search results, only documents with a relevance score greater than the threshold will be returned
   */
  threshold?: number | undefined;
  /**
   * The rerank configuration for the knowledge base. In case the model is provided it will be used to enhance the search precision.
   */
  rerankConfig?: UpdateKnowledgeKnowledgeRerankConfig | undefined;
};

/**
 * Knowledge Base object
 */
export type UpdateKnowledgeResponseBody = {
  /**
   * The unique identifier of the knowledge base.
   */
  id: string;
  /**
   * The creation date of the knowledge base.
   */
  created: string;
  /**
   * The description of the knowledge base.
   */
  description?: string | undefined;
  /**
   * The unique key of the knowledge base.
   */
  key: string;
  /**
   * The embeddings model used for the knowledge base.
   */
  model: string;
  /**
   * The path where the entity is stored in the project structure. The first element of the path always represents the project name. Any subsequent path element after the project will be created as a folder in the project if it does not exists.
   */
  path?: string | undefined;
  /**
   * The retrieval settings for the knowledge base. If not provider, Hybrid Search will be used as a default query strategy.
   */
  retrievalSettings?: UpdateKnowledgeKnowledgeRetrievalSettings | undefined;
  createdById?: string | null | undefined;
  updatedById?: string | null | undefined;
  /**
   * The last update date of the knowledge base.
   */
  updated: string;
};

/** @internal */
export const UpdateKnowledgeRetrievalType$inboundSchema: z.ZodNativeEnum<
  typeof UpdateKnowledgeRetrievalType
> = z.nativeEnum(UpdateKnowledgeRetrievalType);

/** @internal */
export const UpdateKnowledgeRetrievalType$outboundSchema: z.ZodNativeEnum<
  typeof UpdateKnowledgeRetrievalType
> = UpdateKnowledgeRetrievalType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateKnowledgeRetrievalType$ {
  /** @deprecated use `UpdateKnowledgeRetrievalType$inboundSchema` instead. */
  export const inboundSchema = UpdateKnowledgeRetrievalType$inboundSchema;
  /** @deprecated use `UpdateKnowledgeRetrievalType$outboundSchema` instead. */
  export const outboundSchema = UpdateKnowledgeRetrievalType$outboundSchema;
}

/** @internal */
export const UpdateKnowledgeRerankConfig$inboundSchema: z.ZodType<
  UpdateKnowledgeRerankConfig,
  z.ZodTypeDef,
  unknown
> = z.object({
  rerank_threshold: z.number().default(0.5),
  rerank_model: z.string(),
}).transform((v) => {
  return remap$(v, {
    "rerank_threshold": "rerankThreshold",
    "rerank_model": "rerankModel",
  });
});

/** @internal */
export type UpdateKnowledgeRerankConfig$Outbound = {
  rerank_threshold: number;
  rerank_model: string;
};

/** @internal */
export const UpdateKnowledgeRerankConfig$outboundSchema: z.ZodType<
  UpdateKnowledgeRerankConfig$Outbound,
  z.ZodTypeDef,
  UpdateKnowledgeRerankConfig
> = z.object({
  rerankThreshold: z.number().default(0.5),
  rerankModel: z.string(),
}).transform((v) => {
  return remap$(v, {
    rerankThreshold: "rerank_threshold",
    rerankModel: "rerank_model",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateKnowledgeRerankConfig$ {
  /** @deprecated use `UpdateKnowledgeRerankConfig$inboundSchema` instead. */
  export const inboundSchema = UpdateKnowledgeRerankConfig$inboundSchema;
  /** @deprecated use `UpdateKnowledgeRerankConfig$outboundSchema` instead. */
  export const outboundSchema = UpdateKnowledgeRerankConfig$outboundSchema;
  /** @deprecated use `UpdateKnowledgeRerankConfig$Outbound` instead. */
  export type Outbound = UpdateKnowledgeRerankConfig$Outbound;
}

export function updateKnowledgeRerankConfigToJSON(
  updateKnowledgeRerankConfig: UpdateKnowledgeRerankConfig,
): string {
  return JSON.stringify(
    UpdateKnowledgeRerankConfig$outboundSchema.parse(
      updateKnowledgeRerankConfig,
    ),
  );
}

export function updateKnowledgeRerankConfigFromJSON(
  jsonString: string,
): SafeParseResult<UpdateKnowledgeRerankConfig, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateKnowledgeRerankConfig$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateKnowledgeRerankConfig' from JSON`,
  );
}

/** @internal */
export const UpdateKnowledgeRetrievalSettings$inboundSchema: z.ZodType<
  UpdateKnowledgeRetrievalSettings,
  z.ZodTypeDef,
  unknown
> = z.object({
  retrieval_type: UpdateKnowledgeRetrievalType$inboundSchema.default(
    "hybrid_search",
  ),
  top_k: z.number().int().default(5),
  threshold: z.number().default(0),
  rerank_config: z.lazy(() => UpdateKnowledgeRerankConfig$inboundSchema)
    .optional(),
}).transform((v) => {
  return remap$(v, {
    "retrieval_type": "retrievalType",
    "top_k": "topK",
    "rerank_config": "rerankConfig",
  });
});

/** @internal */
export type UpdateKnowledgeRetrievalSettings$Outbound = {
  retrieval_type: string;
  top_k: number;
  threshold: number;
  rerank_config?: UpdateKnowledgeRerankConfig$Outbound | undefined;
};

/** @internal */
export const UpdateKnowledgeRetrievalSettings$outboundSchema: z.ZodType<
  UpdateKnowledgeRetrievalSettings$Outbound,
  z.ZodTypeDef,
  UpdateKnowledgeRetrievalSettings
> = z.object({
  retrievalType: UpdateKnowledgeRetrievalType$outboundSchema.default(
    "hybrid_search",
  ),
  topK: z.number().int().default(5),
  threshold: z.number().default(0),
  rerankConfig: z.lazy(() => UpdateKnowledgeRerankConfig$outboundSchema)
    .optional(),
}).transform((v) => {
  return remap$(v, {
    retrievalType: "retrieval_type",
    topK: "top_k",
    rerankConfig: "rerank_config",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateKnowledgeRetrievalSettings$ {
  /** @deprecated use `UpdateKnowledgeRetrievalSettings$inboundSchema` instead. */
  export const inboundSchema = UpdateKnowledgeRetrievalSettings$inboundSchema;
  /** @deprecated use `UpdateKnowledgeRetrievalSettings$outboundSchema` instead. */
  export const outboundSchema = UpdateKnowledgeRetrievalSettings$outboundSchema;
  /** @deprecated use `UpdateKnowledgeRetrievalSettings$Outbound` instead. */
  export type Outbound = UpdateKnowledgeRetrievalSettings$Outbound;
}

export function updateKnowledgeRetrievalSettingsToJSON(
  updateKnowledgeRetrievalSettings: UpdateKnowledgeRetrievalSettings,
): string {
  return JSON.stringify(
    UpdateKnowledgeRetrievalSettings$outboundSchema.parse(
      updateKnowledgeRetrievalSettings,
    ),
  );
}

export function updateKnowledgeRetrievalSettingsFromJSON(
  jsonString: string,
): SafeParseResult<UpdateKnowledgeRetrievalSettings, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateKnowledgeRetrievalSettings$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateKnowledgeRetrievalSettings' from JSON`,
  );
}

/** @internal */
export const UpdateKnowledgeRequestBody$inboundSchema: z.ZodType<
  UpdateKnowledgeRequestBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  description: z.string().optional(),
  embedding_model: z.string().optional(),
  path: z.string().optional(),
  retrieval_settings: z.lazy(() =>
    UpdateKnowledgeRetrievalSettings$inboundSchema
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    "embedding_model": "embeddingModel",
    "retrieval_settings": "retrievalSettings",
  });
});

/** @internal */
export type UpdateKnowledgeRequestBody$Outbound = {
  description?: string | undefined;
  embedding_model?: string | undefined;
  path?: string | undefined;
  retrieval_settings?: UpdateKnowledgeRetrievalSettings$Outbound | undefined;
};

/** @internal */
export const UpdateKnowledgeRequestBody$outboundSchema: z.ZodType<
  UpdateKnowledgeRequestBody$Outbound,
  z.ZodTypeDef,
  UpdateKnowledgeRequestBody
> = z.object({
  description: z.string().optional(),
  embeddingModel: z.string().optional(),
  path: z.string().optional(),
  retrievalSettings: z.lazy(() =>
    UpdateKnowledgeRetrievalSettings$outboundSchema
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    embeddingModel: "embedding_model",
    retrievalSettings: "retrieval_settings",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateKnowledgeRequestBody$ {
  /** @deprecated use `UpdateKnowledgeRequestBody$inboundSchema` instead. */
  export const inboundSchema = UpdateKnowledgeRequestBody$inboundSchema;
  /** @deprecated use `UpdateKnowledgeRequestBody$outboundSchema` instead. */
  export const outboundSchema = UpdateKnowledgeRequestBody$outboundSchema;
  /** @deprecated use `UpdateKnowledgeRequestBody$Outbound` instead. */
  export type Outbound = UpdateKnowledgeRequestBody$Outbound;
}

export function updateKnowledgeRequestBodyToJSON(
  updateKnowledgeRequestBody: UpdateKnowledgeRequestBody,
): string {
  return JSON.stringify(
    UpdateKnowledgeRequestBody$outboundSchema.parse(updateKnowledgeRequestBody),
  );
}

export function updateKnowledgeRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<UpdateKnowledgeRequestBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateKnowledgeRequestBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateKnowledgeRequestBody' from JSON`,
  );
}

/** @internal */
export const UpdateKnowledgeRequest$inboundSchema: z.ZodType<
  UpdateKnowledgeRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  knowledge_id: z.string(),
  RequestBody: z.lazy(() => UpdateKnowledgeRequestBody$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "knowledge_id": "knowledgeId",
    "RequestBody": "requestBody",
  });
});

/** @internal */
export type UpdateKnowledgeRequest$Outbound = {
  knowledge_id: string;
  RequestBody: UpdateKnowledgeRequestBody$Outbound;
};

/** @internal */
export const UpdateKnowledgeRequest$outboundSchema: z.ZodType<
  UpdateKnowledgeRequest$Outbound,
  z.ZodTypeDef,
  UpdateKnowledgeRequest
> = z.object({
  knowledgeId: z.string(),
  requestBody: z.lazy(() => UpdateKnowledgeRequestBody$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    knowledgeId: "knowledge_id",
    requestBody: "RequestBody",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateKnowledgeRequest$ {
  /** @deprecated use `UpdateKnowledgeRequest$inboundSchema` instead. */
  export const inboundSchema = UpdateKnowledgeRequest$inboundSchema;
  /** @deprecated use `UpdateKnowledgeRequest$outboundSchema` instead. */
  export const outboundSchema = UpdateKnowledgeRequest$outboundSchema;
  /** @deprecated use `UpdateKnowledgeRequest$Outbound` instead. */
  export type Outbound = UpdateKnowledgeRequest$Outbound;
}

export function updateKnowledgeRequestToJSON(
  updateKnowledgeRequest: UpdateKnowledgeRequest,
): string {
  return JSON.stringify(
    UpdateKnowledgeRequest$outboundSchema.parse(updateKnowledgeRequest),
  );
}

export function updateKnowledgeRequestFromJSON(
  jsonString: string,
): SafeParseResult<UpdateKnowledgeRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateKnowledgeRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateKnowledgeRequest' from JSON`,
  );
}

/** @internal */
export const UpdateKnowledgeKnowledgeRetrievalType$inboundSchema:
  z.ZodNativeEnum<typeof UpdateKnowledgeKnowledgeRetrievalType> = z.nativeEnum(
    UpdateKnowledgeKnowledgeRetrievalType,
  );

/** @internal */
export const UpdateKnowledgeKnowledgeRetrievalType$outboundSchema:
  z.ZodNativeEnum<typeof UpdateKnowledgeKnowledgeRetrievalType> =
    UpdateKnowledgeKnowledgeRetrievalType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateKnowledgeKnowledgeRetrievalType$ {
  /** @deprecated use `UpdateKnowledgeKnowledgeRetrievalType$inboundSchema` instead. */
  export const inboundSchema =
    UpdateKnowledgeKnowledgeRetrievalType$inboundSchema;
  /** @deprecated use `UpdateKnowledgeKnowledgeRetrievalType$outboundSchema` instead. */
  export const outboundSchema =
    UpdateKnowledgeKnowledgeRetrievalType$outboundSchema;
}

/** @internal */
export const UpdateKnowledgeKnowledgeRerankConfig$inboundSchema: z.ZodType<
  UpdateKnowledgeKnowledgeRerankConfig,
  z.ZodTypeDef,
  unknown
> = z.object({
  rerank_threshold: z.number().default(0.5),
  rerank_model: z.string(),
}).transform((v) => {
  return remap$(v, {
    "rerank_threshold": "rerankThreshold",
    "rerank_model": "rerankModel",
  });
});

/** @internal */
export type UpdateKnowledgeKnowledgeRerankConfig$Outbound = {
  rerank_threshold: number;
  rerank_model: string;
};

/** @internal */
export const UpdateKnowledgeKnowledgeRerankConfig$outboundSchema: z.ZodType<
  UpdateKnowledgeKnowledgeRerankConfig$Outbound,
  z.ZodTypeDef,
  UpdateKnowledgeKnowledgeRerankConfig
> = z.object({
  rerankThreshold: z.number().default(0.5),
  rerankModel: z.string(),
}).transform((v) => {
  return remap$(v, {
    rerankThreshold: "rerank_threshold",
    rerankModel: "rerank_model",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateKnowledgeKnowledgeRerankConfig$ {
  /** @deprecated use `UpdateKnowledgeKnowledgeRerankConfig$inboundSchema` instead. */
  export const inboundSchema =
    UpdateKnowledgeKnowledgeRerankConfig$inboundSchema;
  /** @deprecated use `UpdateKnowledgeKnowledgeRerankConfig$outboundSchema` instead. */
  export const outboundSchema =
    UpdateKnowledgeKnowledgeRerankConfig$outboundSchema;
  /** @deprecated use `UpdateKnowledgeKnowledgeRerankConfig$Outbound` instead. */
  export type Outbound = UpdateKnowledgeKnowledgeRerankConfig$Outbound;
}

export function updateKnowledgeKnowledgeRerankConfigToJSON(
  updateKnowledgeKnowledgeRerankConfig: UpdateKnowledgeKnowledgeRerankConfig,
): string {
  return JSON.stringify(
    UpdateKnowledgeKnowledgeRerankConfig$outboundSchema.parse(
      updateKnowledgeKnowledgeRerankConfig,
    ),
  );
}

export function updateKnowledgeKnowledgeRerankConfigFromJSON(
  jsonString: string,
): SafeParseResult<UpdateKnowledgeKnowledgeRerankConfig, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      UpdateKnowledgeKnowledgeRerankConfig$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateKnowledgeKnowledgeRerankConfig' from JSON`,
  );
}

/** @internal */
export const UpdateKnowledgeKnowledgeRetrievalSettings$inboundSchema: z.ZodType<
  UpdateKnowledgeKnowledgeRetrievalSettings,
  z.ZodTypeDef,
  unknown
> = z.object({
  retrieval_type: UpdateKnowledgeKnowledgeRetrievalType$inboundSchema.default(
    "hybrid_search",
  ),
  top_k: z.number().int().default(5),
  threshold: z.number().default(0),
  rerank_config: z.lazy(() =>
    UpdateKnowledgeKnowledgeRerankConfig$inboundSchema
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    "retrieval_type": "retrievalType",
    "top_k": "topK",
    "rerank_config": "rerankConfig",
  });
});

/** @internal */
export type UpdateKnowledgeKnowledgeRetrievalSettings$Outbound = {
  retrieval_type: string;
  top_k: number;
  threshold: number;
  rerank_config?: UpdateKnowledgeKnowledgeRerankConfig$Outbound | undefined;
};

/** @internal */
export const UpdateKnowledgeKnowledgeRetrievalSettings$outboundSchema:
  z.ZodType<
    UpdateKnowledgeKnowledgeRetrievalSettings$Outbound,
    z.ZodTypeDef,
    UpdateKnowledgeKnowledgeRetrievalSettings
  > = z.object({
    retrievalType: UpdateKnowledgeKnowledgeRetrievalType$outboundSchema.default(
      "hybrid_search",
    ),
    topK: z.number().int().default(5),
    threshold: z.number().default(0),
    rerankConfig: z.lazy(() =>
      UpdateKnowledgeKnowledgeRerankConfig$outboundSchema
    ).optional(),
  }).transform((v) => {
    return remap$(v, {
      retrievalType: "retrieval_type",
      topK: "top_k",
      rerankConfig: "rerank_config",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateKnowledgeKnowledgeRetrievalSettings$ {
  /** @deprecated use `UpdateKnowledgeKnowledgeRetrievalSettings$inboundSchema` instead. */
  export const inboundSchema =
    UpdateKnowledgeKnowledgeRetrievalSettings$inboundSchema;
  /** @deprecated use `UpdateKnowledgeKnowledgeRetrievalSettings$outboundSchema` instead. */
  export const outboundSchema =
    UpdateKnowledgeKnowledgeRetrievalSettings$outboundSchema;
  /** @deprecated use `UpdateKnowledgeKnowledgeRetrievalSettings$Outbound` instead. */
  export type Outbound = UpdateKnowledgeKnowledgeRetrievalSettings$Outbound;
}

export function updateKnowledgeKnowledgeRetrievalSettingsToJSON(
  updateKnowledgeKnowledgeRetrievalSettings:
    UpdateKnowledgeKnowledgeRetrievalSettings,
): string {
  return JSON.stringify(
    UpdateKnowledgeKnowledgeRetrievalSettings$outboundSchema.parse(
      updateKnowledgeKnowledgeRetrievalSettings,
    ),
  );
}

export function updateKnowledgeKnowledgeRetrievalSettingsFromJSON(
  jsonString: string,
): SafeParseResult<
  UpdateKnowledgeKnowledgeRetrievalSettings,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      UpdateKnowledgeKnowledgeRetrievalSettings$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'UpdateKnowledgeKnowledgeRetrievalSettings' from JSON`,
  );
}

/** @internal */
export const UpdateKnowledgeResponseBody$inboundSchema: z.ZodType<
  UpdateKnowledgeResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  _id: z.string(),
  created: z.string(),
  description: z.string().optional(),
  key: z.string(),
  model: z.string(),
  path: z.string().optional(),
  retrieval_settings: z.lazy(() =>
    UpdateKnowledgeKnowledgeRetrievalSettings$inboundSchema
  ).optional(),
  created_by_id: z.nullable(z.string()).optional(),
  updated_by_id: z.nullable(z.string()).optional(),
  updated: z.string(),
}).transform((v) => {
  return remap$(v, {
    "_id": "id",
    "retrieval_settings": "retrievalSettings",
    "created_by_id": "createdById",
    "updated_by_id": "updatedById",
  });
});

/** @internal */
export type UpdateKnowledgeResponseBody$Outbound = {
  _id: string;
  created: string;
  description?: string | undefined;
  key: string;
  model: string;
  path?: string | undefined;
  retrieval_settings?:
    | UpdateKnowledgeKnowledgeRetrievalSettings$Outbound
    | undefined;
  created_by_id?: string | null | undefined;
  updated_by_id?: string | null | undefined;
  updated: string;
};

/** @internal */
export const UpdateKnowledgeResponseBody$outboundSchema: z.ZodType<
  UpdateKnowledgeResponseBody$Outbound,
  z.ZodTypeDef,
  UpdateKnowledgeResponseBody
> = z.object({
  id: z.string(),
  created: z.string(),
  description: z.string().optional(),
  key: z.string(),
  model: z.string(),
  path: z.string().optional(),
  retrievalSettings: z.lazy(() =>
    UpdateKnowledgeKnowledgeRetrievalSettings$outboundSchema
  ).optional(),
  createdById: z.nullable(z.string()).optional(),
  updatedById: z.nullable(z.string()).optional(),
  updated: z.string(),
}).transform((v) => {
  return remap$(v, {
    id: "_id",
    retrievalSettings: "retrieval_settings",
    createdById: "created_by_id",
    updatedById: "updated_by_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateKnowledgeResponseBody$ {
  /** @deprecated use `UpdateKnowledgeResponseBody$inboundSchema` instead. */
  export const inboundSchema = UpdateKnowledgeResponseBody$inboundSchema;
  /** @deprecated use `UpdateKnowledgeResponseBody$outboundSchema` instead. */
  export const outboundSchema = UpdateKnowledgeResponseBody$outboundSchema;
  /** @deprecated use `UpdateKnowledgeResponseBody$Outbound` instead. */
  export type Outbound = UpdateKnowledgeResponseBody$Outbound;
}

export function updateKnowledgeResponseBodyToJSON(
  updateKnowledgeResponseBody: UpdateKnowledgeResponseBody,
): string {
  return JSON.stringify(
    UpdateKnowledgeResponseBody$outboundSchema.parse(
      updateKnowledgeResponseBody,
    ),
  );
}

export function updateKnowledgeResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<UpdateKnowledgeResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateKnowledgeResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateKnowledgeResponseBody' from JSON`,
  );
}
