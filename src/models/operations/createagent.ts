/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * If all, the agent will require approval for all tools. If respect_tool, the agent will require approval for tools that have the requires_approval flag set to true. If none, the agent will not require approval for any tools.
 */
export const ToolApprovalRequired = {
  All: "all",
  RespectTool: "respect_tool",
  None: "none",
} as const;
/**
 * If all, the agent will require approval for all tools. If respect_tool, the agent will require approval for tools that have the requires_approval flag set to true. If none, the agent will not require approval for any tools.
 */
export type ToolApprovalRequired = ClosedEnum<typeof ToolApprovalRequired>;

/**
 * Function tool type
 */
export const CreateAgentAgentToolInputCRUDAgentsRequestRequestBodySettingsTools14Type =
  {
    Function: "function",
  } as const;
/**
 * Function tool type
 */
export type CreateAgentAgentToolInputCRUDAgentsRequestRequestBodySettingsTools14Type =
  ClosedEnum<
    typeof CreateAgentAgentToolInputCRUDAgentsRequestRequestBodySettingsTools14Type
  >;

/**
 * Calls custom function tools defined in the agent configuration. Must reference a pre-created function tool by key or id.
 */
export type FunctionTool = {
  /**
   * Function tool type
   */
  type:
    CreateAgentAgentToolInputCRUDAgentsRequestRequestBodySettingsTools14Type;
  /**
   * The key of the pre-created function tool
   */
  key?: string | undefined;
  /**
   * The ID of the pre-created function tool
   */
  id?: string | undefined;
  /**
   * Whether this tool requires approval before execution
   */
  requiresApproval?: boolean | undefined;
};

/**
 * Code execution tool type
 */
export const CreateAgentAgentToolInputCRUDAgentsRequestRequestBodySettingsTools13Type =
  {
    Code: "code",
  } as const;
/**
 * Code execution tool type
 */
export type CreateAgentAgentToolInputCRUDAgentsRequestRequestBodySettingsTools13Type =
  ClosedEnum<
    typeof CreateAgentAgentToolInputCRUDAgentsRequestRequestBodySettingsTools13Type
  >;

/**
 * Executes code snippets in a sandboxed environment. Must reference a pre-created code tool by key or id.
 */
export type CodeExecutionTool = {
  /**
   * Code execution tool type
   */
  type:
    CreateAgentAgentToolInputCRUDAgentsRequestRequestBodySettingsTools13Type;
  /**
   * The key of the pre-created code tool
   */
  key?: string | undefined;
  /**
   * The ID of the pre-created code tool
   */
  id?: string | undefined;
  /**
   * Whether this tool requires approval before execution
   */
  requiresApproval?: boolean | undefined;
};

/**
 * HTTP tool type
 */
export const CreateAgentAgentToolInputCRUDAgentsRequestRequestBodySettingsTools12Type =
  {
    Http: "http",
  } as const;
/**
 * HTTP tool type
 */
export type CreateAgentAgentToolInputCRUDAgentsRequestRequestBodySettingsTools12Type =
  ClosedEnum<
    typeof CreateAgentAgentToolInputCRUDAgentsRequestRequestBodySettingsTools12Type
  >;

/**
 * Executes HTTP requests to interact with external APIs and web services. Must reference a pre-created HTTP tool by key or id.
 */
export type HTTPTool = {
  /**
   * HTTP tool type
   */
  type:
    CreateAgentAgentToolInputCRUDAgentsRequestRequestBodySettingsTools12Type;
  /**
   * The key of the pre-created HTTP tool
   */
  key?: string | undefined;
  /**
   * The ID of the pre-created HTTP tool
   */
  id?: string | undefined;
  /**
   * Whether this tool requires approval before execution
   */
  requiresApproval?: boolean | undefined;
};

export const CreateAgentAgentToolInputCRUDAgentsRequestRequestBodySettingsTools11Type =
  {
    CurrentDate: "current_date",
  } as const;
export type CreateAgentAgentToolInputCRUDAgentsRequestRequestBodySettingsTools11Type =
  ClosedEnum<
    typeof CreateAgentAgentToolInputCRUDAgentsRequestRequestBodySettingsTools11Type
  >;

/**
 * Returns the current date and time
 */
export type CurrentDateTool = {
  type:
    CreateAgentAgentToolInputCRUDAgentsRequestRequestBodySettingsTools11Type;
  /**
   * Whether this tool requires approval before execution
   */
  requiresApproval?: boolean | undefined;
};

export const CreateAgentAgentToolInputCRUDAgentsRequestRequestBodySettingsTools10Type =
  {
    QueryKnowledgeBase: "query_knowledge_base",
  } as const;
export type CreateAgentAgentToolInputCRUDAgentsRequestRequestBodySettingsTools10Type =
  ClosedEnum<
    typeof CreateAgentAgentToolInputCRUDAgentsRequestRequestBodySettingsTools10Type
  >;

/**
 * Queries knowledge bases for information
 */
export type QueryKnowledgeBaseTool = {
  type:
    CreateAgentAgentToolInputCRUDAgentsRequestRequestBodySettingsTools10Type;
  /**
   * Whether this tool requires approval before execution
   */
  requiresApproval?: boolean | undefined;
};

export const CreateAgentAgentToolInputCRUDAgentsRequestRequestBodySettingsTools9Type =
  {
    RetrieveKnowledgeBases: "retrieve_knowledge_bases",
  } as const;
export type CreateAgentAgentToolInputCRUDAgentsRequestRequestBodySettingsTools9Type =
  ClosedEnum<
    typeof CreateAgentAgentToolInputCRUDAgentsRequestRequestBodySettingsTools9Type
  >;

/**
 * Lists available knowledge bases
 */
export type RetrieveKnowledgeBasesTool = {
  type: CreateAgentAgentToolInputCRUDAgentsRequestRequestBodySettingsTools9Type;
  /**
   * Whether this tool requires approval before execution
   */
  requiresApproval?: boolean | undefined;
};

export const CreateAgentAgentToolInputCRUDAgentsRequestRequestBodySettingsTools8Type =
  {
    DeleteMemoryDocument: "delete_memory_document",
  } as const;
export type CreateAgentAgentToolInputCRUDAgentsRequestRequestBodySettingsTools8Type =
  ClosedEnum<
    typeof CreateAgentAgentToolInputCRUDAgentsRequestRequestBodySettingsTools8Type
  >;

/**
 * Deletes documents from memory stores
 */
export type DeleteMemoryDocumentTool = {
  type: CreateAgentAgentToolInputCRUDAgentsRequestRequestBodySettingsTools8Type;
  /**
   * Whether this tool requires approval before execution
   */
  requiresApproval?: boolean | undefined;
};

export const CreateAgentAgentToolInputCRUDAgentsRequestRequestBodySettingsToolsType =
  {
    RetrieveMemoryStores: "retrieve_memory_stores",
  } as const;
export type CreateAgentAgentToolInputCRUDAgentsRequestRequestBodySettingsToolsType =
  ClosedEnum<
    typeof CreateAgentAgentToolInputCRUDAgentsRequestRequestBodySettingsToolsType
  >;

/**
 * Lists available memory stores
 */
export type RetrieveMemoryStoresTool = {
  type: CreateAgentAgentToolInputCRUDAgentsRequestRequestBodySettingsToolsType;
  /**
   * Whether this tool requires approval before execution
   */
  requiresApproval?: boolean | undefined;
};

export const CreateAgentAgentToolInputCRUDAgentsRequestRequestBodySettingsType =
  {
    WriteMemoryStore: "write_memory_store",
  } as const;
export type CreateAgentAgentToolInputCRUDAgentsRequestRequestBodySettingsType =
  ClosedEnum<
    typeof CreateAgentAgentToolInputCRUDAgentsRequestRequestBodySettingsType
  >;

/**
 * Writes information to agent memory stores
 */
export type WriteMemoryStoreTool = {
  type: CreateAgentAgentToolInputCRUDAgentsRequestRequestBodySettingsType;
  /**
   * Whether this tool requires approval before execution
   */
  requiresApproval?: boolean | undefined;
};

export const CreateAgentAgentToolInputCRUDAgentsRequestRequestBodyType = {
  QueryMemoryStore: "query_memory_store",
} as const;
export type CreateAgentAgentToolInputCRUDAgentsRequestRequestBodyType =
  ClosedEnum<typeof CreateAgentAgentToolInputCRUDAgentsRequestRequestBodyType>;

/**
 * Queries agent memory stores for context
 */
export type QueryMemoryStoreTool = {
  type: CreateAgentAgentToolInputCRUDAgentsRequestRequestBodyType;
  /**
   * Whether this tool requires approval before execution
   */
  requiresApproval?: boolean | undefined;
};

export const CreateAgentAgentToolInputCRUDAgentsRequestType = {
  RetrieveAgents: "retrieve_agents",
} as const;
export type CreateAgentAgentToolInputCRUDAgentsRequestType = ClosedEnum<
  typeof CreateAgentAgentToolInputCRUDAgentsRequestType
>;

/**
 * Retrieves available agents in the system
 */
export type RetrieveAgentsTool = {
  type: CreateAgentAgentToolInputCRUDAgentsRequestType;
  /**
   * Whether this tool requires approval before execution
   */
  requiresApproval?: boolean | undefined;
};

export const CreateAgentAgentToolInputCRUDAgentsType = {
  CallSubAgent: "call_sub_agent",
} as const;
export type CreateAgentAgentToolInputCRUDAgentsType = ClosedEnum<
  typeof CreateAgentAgentToolInputCRUDAgentsType
>;

/**
 * Delegates tasks to specialized sub-agents
 */
export type CallSubAgentTool = {
  type: CreateAgentAgentToolInputCRUDAgentsType;
  /**
   * Whether this tool requires approval before execution
   */
  requiresApproval?: boolean | undefined;
};

export const CreateAgentAgentToolInputCRUDType = {
  WebScraper: "web_scraper",
} as const;
export type CreateAgentAgentToolInputCRUDType = ClosedEnum<
  typeof CreateAgentAgentToolInputCRUDType
>;

/**
 * Scrapes and extracts content from web pages
 */
export type WebScraperTool = {
  type: CreateAgentAgentToolInputCRUDType;
  /**
   * Whether this tool requires approval before execution
   */
  requiresApproval?: boolean | undefined;
};

export const AgentToolInputCRUDType = {
  GoogleSearch: "google_search",
} as const;
export type AgentToolInputCRUDType = ClosedEnum<typeof AgentToolInputCRUDType>;

/**
 * Performs Google searches to retrieve web content
 */
export type GoogleSearchTool = {
  type: AgentToolInputCRUDType;
  /**
   * Whether this tool requires approval before execution
   */
  requiresApproval?: boolean | undefined;
};

/**
 * Tool configuration for agent create/update operations. Built-in tools only require a type, while custom tools must reference pre-created tools by key or id.
 */
export type AgentToolInputCRUD =
  | GoogleSearchTool
  | WebScraperTool
  | CallSubAgentTool
  | RetrieveAgentsTool
  | QueryMemoryStoreTool
  | WriteMemoryStoreTool
  | RetrieveMemoryStoresTool
  | DeleteMemoryDocumentTool
  | RetrieveKnowledgeBasesTool
  | QueryKnowledgeBaseTool
  | CurrentDateTool
  | HTTPTool
  | CodeExecutionTool
  | FunctionTool;

/**
 * Configuration settings for the agent's behavior
 */
export type Settings = {
  /**
   * Maximum iterations(llm calls) before the agent will stop executing.
   */
  maxIterations?: number | undefined;
  /**
   * Maximum time (in seconds) for the agent thinking process. This does not include the time for tool calls and sub agent calls. It will be loosely enforced, the in progress LLM calls will not be terminated and the last assistant message will be returned.
   */
  maxExecutionTime?: number | undefined;
  /**
   * If all, the agent will require approval for all tools. If respect_tool, the agent will require approval for tools that have the requires_approval flag set to true. If none, the agent will not require approval for any tools.
   */
  toolApprovalRequired?: ToolApprovalRequired | undefined;
  /**
   * Tools available to the agent. Built-in tools only need a type, while custom tools (http, code, function) must reference pre-created tools by key or id.
   */
  tools: Array<
    | GoogleSearchTool
    | WebScraperTool
    | CallSubAgentTool
    | RetrieveAgentsTool
    | QueryMemoryStoreTool
    | WriteMemoryStoreTool
    | RetrieveMemoryStoresTool
    | DeleteMemoryDocumentTool
    | RetrieveKnowledgeBasesTool
    | QueryKnowledgeBaseTool
    | CurrentDateTool
    | HTTPTool
    | CodeExecutionTool
    | FunctionTool
  >;
};

export type KnowledgeBases = {
  /**
   * Unique identifier of the knowledge base to search
   */
  knowledgeId: string;
};

export type TeamOfAgents = {
  /**
   * The unique key of the agent within the workspace
   */
  key: string;
  /**
   * The role of the agent in this context. This is used to give extra information to the leader to help it decide which agent to hand off to.
   */
  role?: string | undefined;
};

export type CreateAgentRequestBody = {
  /**
   * The path where the agent will be stored in the project structure
   */
  path: string;
  /**
   * Unique identifier for the agent within the workspace
   */
  key: string;
  /**
   * The role or function of the agent
   */
  role: string;
  /**
   * A brief description of what the agent does
   */
  description: string;
  /**
   * Detailed instructions that guide the agent's behavior
   */
  instructions: string;
  /**
   * A custom system prompt template for the agent. If omitted, the default template is used.
   */
  systemPrompt?: string | undefined;
  /**
   * The primary language model that powers the agent (e.g., "anthropic/claude-3-sonnet-20240229")
   */
  model: string;
  /**
   * Optional array of fallback model IDs to use when the primary model fails. Models are tried in order. All models must support tool calling capabilities.
   */
  fallbackModels?: Array<string> | undefined;
  /**
   * Configuration settings for the agent's behavior
   */
  settings: Settings;
  /**
   * Optional array of memory store keys for the agent to access
   */
  memoryStores?: Array<string> | undefined;
  /**
   * Optional array of knowledge base configurations for the agent to access
   */
  knowledgeBases?: Array<KnowledgeBases> | undefined;
  /**
   * The agents that are accessible to this orchestrator. The main agent can hand off to these agents to perform tasks.
   */
  teamOfAgents?: Array<TeamOfAgents> | undefined;
};

/**
 * The status of the agent. `Live` is the latest version of the agent. `Draft` is a version that is not yet published. `Pending` is a version that is pending approval. `Published` is a version that was live and has been replaced by a new version.
 */
export const CreateAgentStatus = {
  Live: "live",
  Draft: "draft",
  Pending: "pending",
  Published: "published",
} as const;
/**
 * The status of the agent. `Live` is the latest version of the agent. `Draft` is a version that is not yet published. `Pending` is a version that is pending approval. `Published` is a version that was live and has been replaced by a new version.
 */
export type CreateAgentStatus = ClosedEnum<typeof CreateAgentStatus>;

/**
 * If all, the agent will require approval for all tools. If respect_tool, the agent will require approval for tools that have the requires_approval flag set to true. If none, the agent will not require approval for any tools.
 */
export const CreateAgentToolApprovalRequired = {
  All: "all",
  RespectTool: "respect_tool",
  None: "none",
} as const;
/**
 * If all, the agent will require approval for all tools. If respect_tool, the agent will require approval for tools that have the requires_approval flag set to true. If none, the agent will not require approval for any tools.
 */
export type CreateAgentToolApprovalRequired = ClosedEnum<
  typeof CreateAgentToolApprovalRequired
>;

export type Conditions = {
  /**
   * The argument of the tool call to evaluate
   */
  condition: string;
  /**
   * The operator to use
   */
  operator: string;
  /**
   * The value to compare against
   */
  value: string;
};

export type CreateAgentTools = {
  /**
   * The id of the resource
   */
  id: string;
  /**
   * Optional tool key for custom tools
   */
  key?: string | undefined;
  actionType: string;
  displayName?: string | undefined;
  requiresApproval?: boolean | undefined;
  conditions?: Array<Conditions> | undefined;
  /**
   * The id of the resource
   */
  mcpServer?: string | undefined;
  /**
   * Tool execution timeout in seconds (default: 2 minutes, max: 10 minutes)
   */
  timeout?: number | undefined;
};

export type CreateAgentSettings = {
  /**
   * Maximum iterations(llm calls) before the agent will stop executing.
   */
  maxIterations?: number | undefined;
  /**
   * Maximum time (in seconds) for the agent thinking process. This does not include the time for tool calls and sub agent calls. It will be loosely enforced, the in progress LLM calls will not be terminated and the last assistant message will be returned.
   */
  maxExecutionTime?: number | undefined;
  /**
   * If all, the agent will require approval for all tools. If respect_tool, the agent will require approval for tools that have the requires_approval flag set to true. If none, the agent will not require approval for any tools.
   */
  toolApprovalRequired?: CreateAgentToolApprovalRequired | undefined;
  tools: Array<CreateAgentTools>;
};

export type CreateAgentModel = {
  /**
   * The database ID of the primary model
   */
  id: string;
  /**
   * Optional integration ID for custom model configurations
   */
  integrationId?: string | null | undefined;
  /**
   * Optional array of fallback model IDs that will be used automatically in order if the primary model fails
   */
  fallbackModels?: Array<string> | null | undefined;
  /**
   * Maximum number of tokens for model responses
   */
  maxTokens?: number | undefined;
  /**
   * Temperature setting for model responses
   */
  temperature?: number | undefined;
};

export type CreateAgentTeamOfAgents = {
  /**
   * The unique key of the agent within the workspace
   */
  key: string;
  /**
   * The role of the agent in this context. This is used to give extra information to the leader to help it decide which agent to hand off to.
   */
  role?: string | undefined;
};

export type Metrics = {
  totalCost?: number | undefined;
};

export type CreateAgentKnowledgeBases = {
  /**
   * Unique identifier of the knowledge base to search
   */
  knowledgeId: string;
};

export const HiddenPanels = {
  Model: "model",
  Tools: "tools",
  KnowledgeBases: "knowledge_bases",
  Variables: "variables",
  RuntimeConstraints: "runtime_constraints",
} as const;
export type HiddenPanels = ClosedEnum<typeof HiddenPanels>;

/**
 * Agent created successfully
 */
export type CreateAgentResponseBody = {
  id: string;
  key: string;
  workspaceId: string;
  projectId: string;
  createdById?: string | null | undefined;
  updatedById?: string | null | undefined;
  created?: string | undefined;
  updated?: string | undefined;
  role: string;
  description: string;
  systemPrompt?: string | undefined;
  instructions: string;
  /**
   * The status of the agent. `Live` is the latest version of the agent. `Draft` is a version that is not yet published. `Pending` is a version that is pending approval. `Published` is a version that was live and has been replaced by a new version.
   */
  status: CreateAgentStatus;
  settings?: CreateAgentSettings | undefined;
  model: CreateAgentModel;
  versionHash?: string | undefined;
  /**
   * The path where the entity is stored in the project structure. The first element of the path always represents the project name. Any subsequent path element after the project will be created as a folder in the project if it does not exists.
   */
  path: string;
  memoryStores: Array<string>;
  /**
   * The agents that are accessible to this orchestrator. The main agent can hand off to these agents to perform tasks.
   */
  teamOfAgents: Array<CreateAgentTeamOfAgents>;
  metrics?: Metrics | undefined;
  /**
   * Extracted variables from agent instructions
   */
  variables?: { [k: string]: any } | undefined;
  /**
   * Agent knowledge bases reference
   */
  knowledgeBases?: Array<CreateAgentKnowledgeBases> | undefined;
  /**
   * List of hidden collapsed panels in configuration. Duplicates are not allowed.
   */
  hiddenPanels?: Array<HiddenPanels> | undefined;
};

/** @internal */
export const ToolApprovalRequired$inboundSchema: z.ZodNativeEnum<
  typeof ToolApprovalRequired
> = z.nativeEnum(ToolApprovalRequired);

/** @internal */
export const ToolApprovalRequired$outboundSchema: z.ZodNativeEnum<
  typeof ToolApprovalRequired
> = ToolApprovalRequired$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ToolApprovalRequired$ {
  /** @deprecated use `ToolApprovalRequired$inboundSchema` instead. */
  export const inboundSchema = ToolApprovalRequired$inboundSchema;
  /** @deprecated use `ToolApprovalRequired$outboundSchema` instead. */
  export const outboundSchema = ToolApprovalRequired$outboundSchema;
}

/** @internal */
export const CreateAgentAgentToolInputCRUDAgentsRequestRequestBodySettingsTools14Type$inboundSchema:
  z.ZodNativeEnum<
    typeof CreateAgentAgentToolInputCRUDAgentsRequestRequestBodySettingsTools14Type
  > = z.nativeEnum(
    CreateAgentAgentToolInputCRUDAgentsRequestRequestBodySettingsTools14Type,
  );

/** @internal */
export const CreateAgentAgentToolInputCRUDAgentsRequestRequestBodySettingsTools14Type$outboundSchema:
  z.ZodNativeEnum<
    typeof CreateAgentAgentToolInputCRUDAgentsRequestRequestBodySettingsTools14Type
  > =
    CreateAgentAgentToolInputCRUDAgentsRequestRequestBodySettingsTools14Type$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateAgentAgentToolInputCRUDAgentsRequestRequestBodySettingsTools14Type$ {
  /** @deprecated use `CreateAgentAgentToolInputCRUDAgentsRequestRequestBodySettingsTools14Type$inboundSchema` instead. */
  export const inboundSchema =
    CreateAgentAgentToolInputCRUDAgentsRequestRequestBodySettingsTools14Type$inboundSchema;
  /** @deprecated use `CreateAgentAgentToolInputCRUDAgentsRequestRequestBodySettingsTools14Type$outboundSchema` instead. */
  export const outboundSchema =
    CreateAgentAgentToolInputCRUDAgentsRequestRequestBodySettingsTools14Type$outboundSchema;
}

/** @internal */
export const FunctionTool$inboundSchema: z.ZodType<
  FunctionTool,
  z.ZodTypeDef,
  unknown
> = z.object({
  type:
    CreateAgentAgentToolInputCRUDAgentsRequestRequestBodySettingsTools14Type$inboundSchema,
  key: z.string().optional(),
  id: z.string().optional(),
  requires_approval: z.boolean().default(false),
}).transform((v) => {
  return remap$(v, {
    "requires_approval": "requiresApproval",
  });
});

/** @internal */
export type FunctionTool$Outbound = {
  type: string;
  key?: string | undefined;
  id?: string | undefined;
  requires_approval: boolean;
};

/** @internal */
export const FunctionTool$outboundSchema: z.ZodType<
  FunctionTool$Outbound,
  z.ZodTypeDef,
  FunctionTool
> = z.object({
  type:
    CreateAgentAgentToolInputCRUDAgentsRequestRequestBodySettingsTools14Type$outboundSchema,
  key: z.string().optional(),
  id: z.string().optional(),
  requiresApproval: z.boolean().default(false),
}).transform((v) => {
  return remap$(v, {
    requiresApproval: "requires_approval",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FunctionTool$ {
  /** @deprecated use `FunctionTool$inboundSchema` instead. */
  export const inboundSchema = FunctionTool$inboundSchema;
  /** @deprecated use `FunctionTool$outboundSchema` instead. */
  export const outboundSchema = FunctionTool$outboundSchema;
  /** @deprecated use `FunctionTool$Outbound` instead. */
  export type Outbound = FunctionTool$Outbound;
}

export function functionToolToJSON(functionTool: FunctionTool): string {
  return JSON.stringify(FunctionTool$outboundSchema.parse(functionTool));
}

export function functionToolFromJSON(
  jsonString: string,
): SafeParseResult<FunctionTool, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => FunctionTool$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'FunctionTool' from JSON`,
  );
}

/** @internal */
export const CreateAgentAgentToolInputCRUDAgentsRequestRequestBodySettingsTools13Type$inboundSchema:
  z.ZodNativeEnum<
    typeof CreateAgentAgentToolInputCRUDAgentsRequestRequestBodySettingsTools13Type
  > = z.nativeEnum(
    CreateAgentAgentToolInputCRUDAgentsRequestRequestBodySettingsTools13Type,
  );

/** @internal */
export const CreateAgentAgentToolInputCRUDAgentsRequestRequestBodySettingsTools13Type$outboundSchema:
  z.ZodNativeEnum<
    typeof CreateAgentAgentToolInputCRUDAgentsRequestRequestBodySettingsTools13Type
  > =
    CreateAgentAgentToolInputCRUDAgentsRequestRequestBodySettingsTools13Type$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateAgentAgentToolInputCRUDAgentsRequestRequestBodySettingsTools13Type$ {
  /** @deprecated use `CreateAgentAgentToolInputCRUDAgentsRequestRequestBodySettingsTools13Type$inboundSchema` instead. */
  export const inboundSchema =
    CreateAgentAgentToolInputCRUDAgentsRequestRequestBodySettingsTools13Type$inboundSchema;
  /** @deprecated use `CreateAgentAgentToolInputCRUDAgentsRequestRequestBodySettingsTools13Type$outboundSchema` instead. */
  export const outboundSchema =
    CreateAgentAgentToolInputCRUDAgentsRequestRequestBodySettingsTools13Type$outboundSchema;
}

/** @internal */
export const CodeExecutionTool$inboundSchema: z.ZodType<
  CodeExecutionTool,
  z.ZodTypeDef,
  unknown
> = z.object({
  type:
    CreateAgentAgentToolInputCRUDAgentsRequestRequestBodySettingsTools13Type$inboundSchema,
  key: z.string().optional(),
  id: z.string().optional(),
  requires_approval: z.boolean().default(false),
}).transform((v) => {
  return remap$(v, {
    "requires_approval": "requiresApproval",
  });
});

/** @internal */
export type CodeExecutionTool$Outbound = {
  type: string;
  key?: string | undefined;
  id?: string | undefined;
  requires_approval: boolean;
};

/** @internal */
export const CodeExecutionTool$outboundSchema: z.ZodType<
  CodeExecutionTool$Outbound,
  z.ZodTypeDef,
  CodeExecutionTool
> = z.object({
  type:
    CreateAgentAgentToolInputCRUDAgentsRequestRequestBodySettingsTools13Type$outboundSchema,
  key: z.string().optional(),
  id: z.string().optional(),
  requiresApproval: z.boolean().default(false),
}).transform((v) => {
  return remap$(v, {
    requiresApproval: "requires_approval",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CodeExecutionTool$ {
  /** @deprecated use `CodeExecutionTool$inboundSchema` instead. */
  export const inboundSchema = CodeExecutionTool$inboundSchema;
  /** @deprecated use `CodeExecutionTool$outboundSchema` instead. */
  export const outboundSchema = CodeExecutionTool$outboundSchema;
  /** @deprecated use `CodeExecutionTool$Outbound` instead. */
  export type Outbound = CodeExecutionTool$Outbound;
}

export function codeExecutionToolToJSON(
  codeExecutionTool: CodeExecutionTool,
): string {
  return JSON.stringify(
    CodeExecutionTool$outboundSchema.parse(codeExecutionTool),
  );
}

export function codeExecutionToolFromJSON(
  jsonString: string,
): SafeParseResult<CodeExecutionTool, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CodeExecutionTool$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CodeExecutionTool' from JSON`,
  );
}

/** @internal */
export const CreateAgentAgentToolInputCRUDAgentsRequestRequestBodySettingsTools12Type$inboundSchema:
  z.ZodNativeEnum<
    typeof CreateAgentAgentToolInputCRUDAgentsRequestRequestBodySettingsTools12Type
  > = z.nativeEnum(
    CreateAgentAgentToolInputCRUDAgentsRequestRequestBodySettingsTools12Type,
  );

/** @internal */
export const CreateAgentAgentToolInputCRUDAgentsRequestRequestBodySettingsTools12Type$outboundSchema:
  z.ZodNativeEnum<
    typeof CreateAgentAgentToolInputCRUDAgentsRequestRequestBodySettingsTools12Type
  > =
    CreateAgentAgentToolInputCRUDAgentsRequestRequestBodySettingsTools12Type$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateAgentAgentToolInputCRUDAgentsRequestRequestBodySettingsTools12Type$ {
  /** @deprecated use `CreateAgentAgentToolInputCRUDAgentsRequestRequestBodySettingsTools12Type$inboundSchema` instead. */
  export const inboundSchema =
    CreateAgentAgentToolInputCRUDAgentsRequestRequestBodySettingsTools12Type$inboundSchema;
  /** @deprecated use `CreateAgentAgentToolInputCRUDAgentsRequestRequestBodySettingsTools12Type$outboundSchema` instead. */
  export const outboundSchema =
    CreateAgentAgentToolInputCRUDAgentsRequestRequestBodySettingsTools12Type$outboundSchema;
}

/** @internal */
export const HTTPTool$inboundSchema: z.ZodType<
  HTTPTool,
  z.ZodTypeDef,
  unknown
> = z.object({
  type:
    CreateAgentAgentToolInputCRUDAgentsRequestRequestBodySettingsTools12Type$inboundSchema,
  key: z.string().optional(),
  id: z.string().optional(),
  requires_approval: z.boolean().default(false),
}).transform((v) => {
  return remap$(v, {
    "requires_approval": "requiresApproval",
  });
});

/** @internal */
export type HTTPTool$Outbound = {
  type: string;
  key?: string | undefined;
  id?: string | undefined;
  requires_approval: boolean;
};

/** @internal */
export const HTTPTool$outboundSchema: z.ZodType<
  HTTPTool$Outbound,
  z.ZodTypeDef,
  HTTPTool
> = z.object({
  type:
    CreateAgentAgentToolInputCRUDAgentsRequestRequestBodySettingsTools12Type$outboundSchema,
  key: z.string().optional(),
  id: z.string().optional(),
  requiresApproval: z.boolean().default(false),
}).transform((v) => {
  return remap$(v, {
    requiresApproval: "requires_approval",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HTTPTool$ {
  /** @deprecated use `HTTPTool$inboundSchema` instead. */
  export const inboundSchema = HTTPTool$inboundSchema;
  /** @deprecated use `HTTPTool$outboundSchema` instead. */
  export const outboundSchema = HTTPTool$outboundSchema;
  /** @deprecated use `HTTPTool$Outbound` instead. */
  export type Outbound = HTTPTool$Outbound;
}

export function httpToolToJSON(httpTool: HTTPTool): string {
  return JSON.stringify(HTTPTool$outboundSchema.parse(httpTool));
}

export function httpToolFromJSON(
  jsonString: string,
): SafeParseResult<HTTPTool, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => HTTPTool$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'HTTPTool' from JSON`,
  );
}

/** @internal */
export const CreateAgentAgentToolInputCRUDAgentsRequestRequestBodySettingsTools11Type$inboundSchema:
  z.ZodNativeEnum<
    typeof CreateAgentAgentToolInputCRUDAgentsRequestRequestBodySettingsTools11Type
  > = z.nativeEnum(
    CreateAgentAgentToolInputCRUDAgentsRequestRequestBodySettingsTools11Type,
  );

/** @internal */
export const CreateAgentAgentToolInputCRUDAgentsRequestRequestBodySettingsTools11Type$outboundSchema:
  z.ZodNativeEnum<
    typeof CreateAgentAgentToolInputCRUDAgentsRequestRequestBodySettingsTools11Type
  > =
    CreateAgentAgentToolInputCRUDAgentsRequestRequestBodySettingsTools11Type$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateAgentAgentToolInputCRUDAgentsRequestRequestBodySettingsTools11Type$ {
  /** @deprecated use `CreateAgentAgentToolInputCRUDAgentsRequestRequestBodySettingsTools11Type$inboundSchema` instead. */
  export const inboundSchema =
    CreateAgentAgentToolInputCRUDAgentsRequestRequestBodySettingsTools11Type$inboundSchema;
  /** @deprecated use `CreateAgentAgentToolInputCRUDAgentsRequestRequestBodySettingsTools11Type$outboundSchema` instead. */
  export const outboundSchema =
    CreateAgentAgentToolInputCRUDAgentsRequestRequestBodySettingsTools11Type$outboundSchema;
}

/** @internal */
export const CurrentDateTool$inboundSchema: z.ZodType<
  CurrentDateTool,
  z.ZodTypeDef,
  unknown
> = z.object({
  type:
    CreateAgentAgentToolInputCRUDAgentsRequestRequestBodySettingsTools11Type$inboundSchema,
  requires_approval: z.boolean().default(false),
}).transform((v) => {
  return remap$(v, {
    "requires_approval": "requiresApproval",
  });
});

/** @internal */
export type CurrentDateTool$Outbound = {
  type: string;
  requires_approval: boolean;
};

/** @internal */
export const CurrentDateTool$outboundSchema: z.ZodType<
  CurrentDateTool$Outbound,
  z.ZodTypeDef,
  CurrentDateTool
> = z.object({
  type:
    CreateAgentAgentToolInputCRUDAgentsRequestRequestBodySettingsTools11Type$outboundSchema,
  requiresApproval: z.boolean().default(false),
}).transform((v) => {
  return remap$(v, {
    requiresApproval: "requires_approval",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CurrentDateTool$ {
  /** @deprecated use `CurrentDateTool$inboundSchema` instead. */
  export const inboundSchema = CurrentDateTool$inboundSchema;
  /** @deprecated use `CurrentDateTool$outboundSchema` instead. */
  export const outboundSchema = CurrentDateTool$outboundSchema;
  /** @deprecated use `CurrentDateTool$Outbound` instead. */
  export type Outbound = CurrentDateTool$Outbound;
}

export function currentDateToolToJSON(
  currentDateTool: CurrentDateTool,
): string {
  return JSON.stringify(CurrentDateTool$outboundSchema.parse(currentDateTool));
}

export function currentDateToolFromJSON(
  jsonString: string,
): SafeParseResult<CurrentDateTool, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CurrentDateTool$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CurrentDateTool' from JSON`,
  );
}

/** @internal */
export const CreateAgentAgentToolInputCRUDAgentsRequestRequestBodySettingsTools10Type$inboundSchema:
  z.ZodNativeEnum<
    typeof CreateAgentAgentToolInputCRUDAgentsRequestRequestBodySettingsTools10Type
  > = z.nativeEnum(
    CreateAgentAgentToolInputCRUDAgentsRequestRequestBodySettingsTools10Type,
  );

/** @internal */
export const CreateAgentAgentToolInputCRUDAgentsRequestRequestBodySettingsTools10Type$outboundSchema:
  z.ZodNativeEnum<
    typeof CreateAgentAgentToolInputCRUDAgentsRequestRequestBodySettingsTools10Type
  > =
    CreateAgentAgentToolInputCRUDAgentsRequestRequestBodySettingsTools10Type$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateAgentAgentToolInputCRUDAgentsRequestRequestBodySettingsTools10Type$ {
  /** @deprecated use `CreateAgentAgentToolInputCRUDAgentsRequestRequestBodySettingsTools10Type$inboundSchema` instead. */
  export const inboundSchema =
    CreateAgentAgentToolInputCRUDAgentsRequestRequestBodySettingsTools10Type$inboundSchema;
  /** @deprecated use `CreateAgentAgentToolInputCRUDAgentsRequestRequestBodySettingsTools10Type$outboundSchema` instead. */
  export const outboundSchema =
    CreateAgentAgentToolInputCRUDAgentsRequestRequestBodySettingsTools10Type$outboundSchema;
}

/** @internal */
export const QueryKnowledgeBaseTool$inboundSchema: z.ZodType<
  QueryKnowledgeBaseTool,
  z.ZodTypeDef,
  unknown
> = z.object({
  type:
    CreateAgentAgentToolInputCRUDAgentsRequestRequestBodySettingsTools10Type$inboundSchema,
  requires_approval: z.boolean().default(false),
}).transform((v) => {
  return remap$(v, {
    "requires_approval": "requiresApproval",
  });
});

/** @internal */
export type QueryKnowledgeBaseTool$Outbound = {
  type: string;
  requires_approval: boolean;
};

/** @internal */
export const QueryKnowledgeBaseTool$outboundSchema: z.ZodType<
  QueryKnowledgeBaseTool$Outbound,
  z.ZodTypeDef,
  QueryKnowledgeBaseTool
> = z.object({
  type:
    CreateAgentAgentToolInputCRUDAgentsRequestRequestBodySettingsTools10Type$outboundSchema,
  requiresApproval: z.boolean().default(false),
}).transform((v) => {
  return remap$(v, {
    requiresApproval: "requires_approval",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace QueryKnowledgeBaseTool$ {
  /** @deprecated use `QueryKnowledgeBaseTool$inboundSchema` instead. */
  export const inboundSchema = QueryKnowledgeBaseTool$inboundSchema;
  /** @deprecated use `QueryKnowledgeBaseTool$outboundSchema` instead. */
  export const outboundSchema = QueryKnowledgeBaseTool$outboundSchema;
  /** @deprecated use `QueryKnowledgeBaseTool$Outbound` instead. */
  export type Outbound = QueryKnowledgeBaseTool$Outbound;
}

export function queryKnowledgeBaseToolToJSON(
  queryKnowledgeBaseTool: QueryKnowledgeBaseTool,
): string {
  return JSON.stringify(
    QueryKnowledgeBaseTool$outboundSchema.parse(queryKnowledgeBaseTool),
  );
}

export function queryKnowledgeBaseToolFromJSON(
  jsonString: string,
): SafeParseResult<QueryKnowledgeBaseTool, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => QueryKnowledgeBaseTool$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'QueryKnowledgeBaseTool' from JSON`,
  );
}

/** @internal */
export const CreateAgentAgentToolInputCRUDAgentsRequestRequestBodySettingsTools9Type$inboundSchema:
  z.ZodNativeEnum<
    typeof CreateAgentAgentToolInputCRUDAgentsRequestRequestBodySettingsTools9Type
  > = z.nativeEnum(
    CreateAgentAgentToolInputCRUDAgentsRequestRequestBodySettingsTools9Type,
  );

/** @internal */
export const CreateAgentAgentToolInputCRUDAgentsRequestRequestBodySettingsTools9Type$outboundSchema:
  z.ZodNativeEnum<
    typeof CreateAgentAgentToolInputCRUDAgentsRequestRequestBodySettingsTools9Type
  > =
    CreateAgentAgentToolInputCRUDAgentsRequestRequestBodySettingsTools9Type$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateAgentAgentToolInputCRUDAgentsRequestRequestBodySettingsTools9Type$ {
  /** @deprecated use `CreateAgentAgentToolInputCRUDAgentsRequestRequestBodySettingsTools9Type$inboundSchema` instead. */
  export const inboundSchema =
    CreateAgentAgentToolInputCRUDAgentsRequestRequestBodySettingsTools9Type$inboundSchema;
  /** @deprecated use `CreateAgentAgentToolInputCRUDAgentsRequestRequestBodySettingsTools9Type$outboundSchema` instead. */
  export const outboundSchema =
    CreateAgentAgentToolInputCRUDAgentsRequestRequestBodySettingsTools9Type$outboundSchema;
}

/** @internal */
export const RetrieveKnowledgeBasesTool$inboundSchema: z.ZodType<
  RetrieveKnowledgeBasesTool,
  z.ZodTypeDef,
  unknown
> = z.object({
  type:
    CreateAgentAgentToolInputCRUDAgentsRequestRequestBodySettingsTools9Type$inboundSchema,
  requires_approval: z.boolean().default(false),
}).transform((v) => {
  return remap$(v, {
    "requires_approval": "requiresApproval",
  });
});

/** @internal */
export type RetrieveKnowledgeBasesTool$Outbound = {
  type: string;
  requires_approval: boolean;
};

/** @internal */
export const RetrieveKnowledgeBasesTool$outboundSchema: z.ZodType<
  RetrieveKnowledgeBasesTool$Outbound,
  z.ZodTypeDef,
  RetrieveKnowledgeBasesTool
> = z.object({
  type:
    CreateAgentAgentToolInputCRUDAgentsRequestRequestBodySettingsTools9Type$outboundSchema,
  requiresApproval: z.boolean().default(false),
}).transform((v) => {
  return remap$(v, {
    requiresApproval: "requires_approval",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RetrieveKnowledgeBasesTool$ {
  /** @deprecated use `RetrieveKnowledgeBasesTool$inboundSchema` instead. */
  export const inboundSchema = RetrieveKnowledgeBasesTool$inboundSchema;
  /** @deprecated use `RetrieveKnowledgeBasesTool$outboundSchema` instead. */
  export const outboundSchema = RetrieveKnowledgeBasesTool$outboundSchema;
  /** @deprecated use `RetrieveKnowledgeBasesTool$Outbound` instead. */
  export type Outbound = RetrieveKnowledgeBasesTool$Outbound;
}

export function retrieveKnowledgeBasesToolToJSON(
  retrieveKnowledgeBasesTool: RetrieveKnowledgeBasesTool,
): string {
  return JSON.stringify(
    RetrieveKnowledgeBasesTool$outboundSchema.parse(retrieveKnowledgeBasesTool),
  );
}

export function retrieveKnowledgeBasesToolFromJSON(
  jsonString: string,
): SafeParseResult<RetrieveKnowledgeBasesTool, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => RetrieveKnowledgeBasesTool$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RetrieveKnowledgeBasesTool' from JSON`,
  );
}

/** @internal */
export const CreateAgentAgentToolInputCRUDAgentsRequestRequestBodySettingsTools8Type$inboundSchema:
  z.ZodNativeEnum<
    typeof CreateAgentAgentToolInputCRUDAgentsRequestRequestBodySettingsTools8Type
  > = z.nativeEnum(
    CreateAgentAgentToolInputCRUDAgentsRequestRequestBodySettingsTools8Type,
  );

/** @internal */
export const CreateAgentAgentToolInputCRUDAgentsRequestRequestBodySettingsTools8Type$outboundSchema:
  z.ZodNativeEnum<
    typeof CreateAgentAgentToolInputCRUDAgentsRequestRequestBodySettingsTools8Type
  > =
    CreateAgentAgentToolInputCRUDAgentsRequestRequestBodySettingsTools8Type$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateAgentAgentToolInputCRUDAgentsRequestRequestBodySettingsTools8Type$ {
  /** @deprecated use `CreateAgentAgentToolInputCRUDAgentsRequestRequestBodySettingsTools8Type$inboundSchema` instead. */
  export const inboundSchema =
    CreateAgentAgentToolInputCRUDAgentsRequestRequestBodySettingsTools8Type$inboundSchema;
  /** @deprecated use `CreateAgentAgentToolInputCRUDAgentsRequestRequestBodySettingsTools8Type$outboundSchema` instead. */
  export const outboundSchema =
    CreateAgentAgentToolInputCRUDAgentsRequestRequestBodySettingsTools8Type$outboundSchema;
}

/** @internal */
export const DeleteMemoryDocumentTool$inboundSchema: z.ZodType<
  DeleteMemoryDocumentTool,
  z.ZodTypeDef,
  unknown
> = z.object({
  type:
    CreateAgentAgentToolInputCRUDAgentsRequestRequestBodySettingsTools8Type$inboundSchema,
  requires_approval: z.boolean().default(false),
}).transform((v) => {
  return remap$(v, {
    "requires_approval": "requiresApproval",
  });
});

/** @internal */
export type DeleteMemoryDocumentTool$Outbound = {
  type: string;
  requires_approval: boolean;
};

/** @internal */
export const DeleteMemoryDocumentTool$outboundSchema: z.ZodType<
  DeleteMemoryDocumentTool$Outbound,
  z.ZodTypeDef,
  DeleteMemoryDocumentTool
> = z.object({
  type:
    CreateAgentAgentToolInputCRUDAgentsRequestRequestBodySettingsTools8Type$outboundSchema,
  requiresApproval: z.boolean().default(false),
}).transform((v) => {
  return remap$(v, {
    requiresApproval: "requires_approval",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeleteMemoryDocumentTool$ {
  /** @deprecated use `DeleteMemoryDocumentTool$inboundSchema` instead. */
  export const inboundSchema = DeleteMemoryDocumentTool$inboundSchema;
  /** @deprecated use `DeleteMemoryDocumentTool$outboundSchema` instead. */
  export const outboundSchema = DeleteMemoryDocumentTool$outboundSchema;
  /** @deprecated use `DeleteMemoryDocumentTool$Outbound` instead. */
  export type Outbound = DeleteMemoryDocumentTool$Outbound;
}

export function deleteMemoryDocumentToolToJSON(
  deleteMemoryDocumentTool: DeleteMemoryDocumentTool,
): string {
  return JSON.stringify(
    DeleteMemoryDocumentTool$outboundSchema.parse(deleteMemoryDocumentTool),
  );
}

export function deleteMemoryDocumentToolFromJSON(
  jsonString: string,
): SafeParseResult<DeleteMemoryDocumentTool, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DeleteMemoryDocumentTool$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DeleteMemoryDocumentTool' from JSON`,
  );
}

/** @internal */
export const CreateAgentAgentToolInputCRUDAgentsRequestRequestBodySettingsToolsType$inboundSchema:
  z.ZodNativeEnum<
    typeof CreateAgentAgentToolInputCRUDAgentsRequestRequestBodySettingsToolsType
  > = z.nativeEnum(
    CreateAgentAgentToolInputCRUDAgentsRequestRequestBodySettingsToolsType,
  );

/** @internal */
export const CreateAgentAgentToolInputCRUDAgentsRequestRequestBodySettingsToolsType$outboundSchema:
  z.ZodNativeEnum<
    typeof CreateAgentAgentToolInputCRUDAgentsRequestRequestBodySettingsToolsType
  > =
    CreateAgentAgentToolInputCRUDAgentsRequestRequestBodySettingsToolsType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateAgentAgentToolInputCRUDAgentsRequestRequestBodySettingsToolsType$ {
  /** @deprecated use `CreateAgentAgentToolInputCRUDAgentsRequestRequestBodySettingsToolsType$inboundSchema` instead. */
  export const inboundSchema =
    CreateAgentAgentToolInputCRUDAgentsRequestRequestBodySettingsToolsType$inboundSchema;
  /** @deprecated use `CreateAgentAgentToolInputCRUDAgentsRequestRequestBodySettingsToolsType$outboundSchema` instead. */
  export const outboundSchema =
    CreateAgentAgentToolInputCRUDAgentsRequestRequestBodySettingsToolsType$outboundSchema;
}

/** @internal */
export const RetrieveMemoryStoresTool$inboundSchema: z.ZodType<
  RetrieveMemoryStoresTool,
  z.ZodTypeDef,
  unknown
> = z.object({
  type:
    CreateAgentAgentToolInputCRUDAgentsRequestRequestBodySettingsToolsType$inboundSchema,
  requires_approval: z.boolean().default(false),
}).transform((v) => {
  return remap$(v, {
    "requires_approval": "requiresApproval",
  });
});

/** @internal */
export type RetrieveMemoryStoresTool$Outbound = {
  type: string;
  requires_approval: boolean;
};

/** @internal */
export const RetrieveMemoryStoresTool$outboundSchema: z.ZodType<
  RetrieveMemoryStoresTool$Outbound,
  z.ZodTypeDef,
  RetrieveMemoryStoresTool
> = z.object({
  type:
    CreateAgentAgentToolInputCRUDAgentsRequestRequestBodySettingsToolsType$outboundSchema,
  requiresApproval: z.boolean().default(false),
}).transform((v) => {
  return remap$(v, {
    requiresApproval: "requires_approval",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RetrieveMemoryStoresTool$ {
  /** @deprecated use `RetrieveMemoryStoresTool$inboundSchema` instead. */
  export const inboundSchema = RetrieveMemoryStoresTool$inboundSchema;
  /** @deprecated use `RetrieveMemoryStoresTool$outboundSchema` instead. */
  export const outboundSchema = RetrieveMemoryStoresTool$outboundSchema;
  /** @deprecated use `RetrieveMemoryStoresTool$Outbound` instead. */
  export type Outbound = RetrieveMemoryStoresTool$Outbound;
}

export function retrieveMemoryStoresToolToJSON(
  retrieveMemoryStoresTool: RetrieveMemoryStoresTool,
): string {
  return JSON.stringify(
    RetrieveMemoryStoresTool$outboundSchema.parse(retrieveMemoryStoresTool),
  );
}

export function retrieveMemoryStoresToolFromJSON(
  jsonString: string,
): SafeParseResult<RetrieveMemoryStoresTool, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => RetrieveMemoryStoresTool$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RetrieveMemoryStoresTool' from JSON`,
  );
}

/** @internal */
export const CreateAgentAgentToolInputCRUDAgentsRequestRequestBodySettingsType$inboundSchema:
  z.ZodNativeEnum<
    typeof CreateAgentAgentToolInputCRUDAgentsRequestRequestBodySettingsType
  > = z.nativeEnum(
    CreateAgentAgentToolInputCRUDAgentsRequestRequestBodySettingsType,
  );

/** @internal */
export const CreateAgentAgentToolInputCRUDAgentsRequestRequestBodySettingsType$outboundSchema:
  z.ZodNativeEnum<
    typeof CreateAgentAgentToolInputCRUDAgentsRequestRequestBodySettingsType
  > =
    CreateAgentAgentToolInputCRUDAgentsRequestRequestBodySettingsType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateAgentAgentToolInputCRUDAgentsRequestRequestBodySettingsType$ {
  /** @deprecated use `CreateAgentAgentToolInputCRUDAgentsRequestRequestBodySettingsType$inboundSchema` instead. */
  export const inboundSchema =
    CreateAgentAgentToolInputCRUDAgentsRequestRequestBodySettingsType$inboundSchema;
  /** @deprecated use `CreateAgentAgentToolInputCRUDAgentsRequestRequestBodySettingsType$outboundSchema` instead. */
  export const outboundSchema =
    CreateAgentAgentToolInputCRUDAgentsRequestRequestBodySettingsType$outboundSchema;
}

/** @internal */
export const WriteMemoryStoreTool$inboundSchema: z.ZodType<
  WriteMemoryStoreTool,
  z.ZodTypeDef,
  unknown
> = z.object({
  type:
    CreateAgentAgentToolInputCRUDAgentsRequestRequestBodySettingsType$inboundSchema,
  requires_approval: z.boolean().default(false),
}).transform((v) => {
  return remap$(v, {
    "requires_approval": "requiresApproval",
  });
});

/** @internal */
export type WriteMemoryStoreTool$Outbound = {
  type: string;
  requires_approval: boolean;
};

/** @internal */
export const WriteMemoryStoreTool$outboundSchema: z.ZodType<
  WriteMemoryStoreTool$Outbound,
  z.ZodTypeDef,
  WriteMemoryStoreTool
> = z.object({
  type:
    CreateAgentAgentToolInputCRUDAgentsRequestRequestBodySettingsType$outboundSchema,
  requiresApproval: z.boolean().default(false),
}).transform((v) => {
  return remap$(v, {
    requiresApproval: "requires_approval",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace WriteMemoryStoreTool$ {
  /** @deprecated use `WriteMemoryStoreTool$inboundSchema` instead. */
  export const inboundSchema = WriteMemoryStoreTool$inboundSchema;
  /** @deprecated use `WriteMemoryStoreTool$outboundSchema` instead. */
  export const outboundSchema = WriteMemoryStoreTool$outboundSchema;
  /** @deprecated use `WriteMemoryStoreTool$Outbound` instead. */
  export type Outbound = WriteMemoryStoreTool$Outbound;
}

export function writeMemoryStoreToolToJSON(
  writeMemoryStoreTool: WriteMemoryStoreTool,
): string {
  return JSON.stringify(
    WriteMemoryStoreTool$outboundSchema.parse(writeMemoryStoreTool),
  );
}

export function writeMemoryStoreToolFromJSON(
  jsonString: string,
): SafeParseResult<WriteMemoryStoreTool, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => WriteMemoryStoreTool$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'WriteMemoryStoreTool' from JSON`,
  );
}

/** @internal */
export const CreateAgentAgentToolInputCRUDAgentsRequestRequestBodyType$inboundSchema:
  z.ZodNativeEnum<
    typeof CreateAgentAgentToolInputCRUDAgentsRequestRequestBodyType
  > = z.nativeEnum(CreateAgentAgentToolInputCRUDAgentsRequestRequestBodyType);

/** @internal */
export const CreateAgentAgentToolInputCRUDAgentsRequestRequestBodyType$outboundSchema:
  z.ZodNativeEnum<
    typeof CreateAgentAgentToolInputCRUDAgentsRequestRequestBodyType
  > = CreateAgentAgentToolInputCRUDAgentsRequestRequestBodyType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateAgentAgentToolInputCRUDAgentsRequestRequestBodyType$ {
  /** @deprecated use `CreateAgentAgentToolInputCRUDAgentsRequestRequestBodyType$inboundSchema` instead. */
  export const inboundSchema =
    CreateAgentAgentToolInputCRUDAgentsRequestRequestBodyType$inboundSchema;
  /** @deprecated use `CreateAgentAgentToolInputCRUDAgentsRequestRequestBodyType$outboundSchema` instead. */
  export const outboundSchema =
    CreateAgentAgentToolInputCRUDAgentsRequestRequestBodyType$outboundSchema;
}

/** @internal */
export const QueryMemoryStoreTool$inboundSchema: z.ZodType<
  QueryMemoryStoreTool,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: CreateAgentAgentToolInputCRUDAgentsRequestRequestBodyType$inboundSchema,
  requires_approval: z.boolean().default(false),
}).transform((v) => {
  return remap$(v, {
    "requires_approval": "requiresApproval",
  });
});

/** @internal */
export type QueryMemoryStoreTool$Outbound = {
  type: string;
  requires_approval: boolean;
};

/** @internal */
export const QueryMemoryStoreTool$outboundSchema: z.ZodType<
  QueryMemoryStoreTool$Outbound,
  z.ZodTypeDef,
  QueryMemoryStoreTool
> = z.object({
  type:
    CreateAgentAgentToolInputCRUDAgentsRequestRequestBodyType$outboundSchema,
  requiresApproval: z.boolean().default(false),
}).transform((v) => {
  return remap$(v, {
    requiresApproval: "requires_approval",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace QueryMemoryStoreTool$ {
  /** @deprecated use `QueryMemoryStoreTool$inboundSchema` instead. */
  export const inboundSchema = QueryMemoryStoreTool$inboundSchema;
  /** @deprecated use `QueryMemoryStoreTool$outboundSchema` instead. */
  export const outboundSchema = QueryMemoryStoreTool$outboundSchema;
  /** @deprecated use `QueryMemoryStoreTool$Outbound` instead. */
  export type Outbound = QueryMemoryStoreTool$Outbound;
}

export function queryMemoryStoreToolToJSON(
  queryMemoryStoreTool: QueryMemoryStoreTool,
): string {
  return JSON.stringify(
    QueryMemoryStoreTool$outboundSchema.parse(queryMemoryStoreTool),
  );
}

export function queryMemoryStoreToolFromJSON(
  jsonString: string,
): SafeParseResult<QueryMemoryStoreTool, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => QueryMemoryStoreTool$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'QueryMemoryStoreTool' from JSON`,
  );
}

/** @internal */
export const CreateAgentAgentToolInputCRUDAgentsRequestType$inboundSchema:
  z.ZodNativeEnum<typeof CreateAgentAgentToolInputCRUDAgentsRequestType> = z
    .nativeEnum(CreateAgentAgentToolInputCRUDAgentsRequestType);

/** @internal */
export const CreateAgentAgentToolInputCRUDAgentsRequestType$outboundSchema:
  z.ZodNativeEnum<typeof CreateAgentAgentToolInputCRUDAgentsRequestType> =
    CreateAgentAgentToolInputCRUDAgentsRequestType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateAgentAgentToolInputCRUDAgentsRequestType$ {
  /** @deprecated use `CreateAgentAgentToolInputCRUDAgentsRequestType$inboundSchema` instead. */
  export const inboundSchema =
    CreateAgentAgentToolInputCRUDAgentsRequestType$inboundSchema;
  /** @deprecated use `CreateAgentAgentToolInputCRUDAgentsRequestType$outboundSchema` instead. */
  export const outboundSchema =
    CreateAgentAgentToolInputCRUDAgentsRequestType$outboundSchema;
}

/** @internal */
export const RetrieveAgentsTool$inboundSchema: z.ZodType<
  RetrieveAgentsTool,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: CreateAgentAgentToolInputCRUDAgentsRequestType$inboundSchema,
  requires_approval: z.boolean().default(false),
}).transform((v) => {
  return remap$(v, {
    "requires_approval": "requiresApproval",
  });
});

/** @internal */
export type RetrieveAgentsTool$Outbound = {
  type: string;
  requires_approval: boolean;
};

/** @internal */
export const RetrieveAgentsTool$outboundSchema: z.ZodType<
  RetrieveAgentsTool$Outbound,
  z.ZodTypeDef,
  RetrieveAgentsTool
> = z.object({
  type: CreateAgentAgentToolInputCRUDAgentsRequestType$outboundSchema,
  requiresApproval: z.boolean().default(false),
}).transform((v) => {
  return remap$(v, {
    requiresApproval: "requires_approval",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RetrieveAgentsTool$ {
  /** @deprecated use `RetrieveAgentsTool$inboundSchema` instead. */
  export const inboundSchema = RetrieveAgentsTool$inboundSchema;
  /** @deprecated use `RetrieveAgentsTool$outboundSchema` instead. */
  export const outboundSchema = RetrieveAgentsTool$outboundSchema;
  /** @deprecated use `RetrieveAgentsTool$Outbound` instead. */
  export type Outbound = RetrieveAgentsTool$Outbound;
}

export function retrieveAgentsToolToJSON(
  retrieveAgentsTool: RetrieveAgentsTool,
): string {
  return JSON.stringify(
    RetrieveAgentsTool$outboundSchema.parse(retrieveAgentsTool),
  );
}

export function retrieveAgentsToolFromJSON(
  jsonString: string,
): SafeParseResult<RetrieveAgentsTool, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => RetrieveAgentsTool$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RetrieveAgentsTool' from JSON`,
  );
}

/** @internal */
export const CreateAgentAgentToolInputCRUDAgentsType$inboundSchema:
  z.ZodNativeEnum<typeof CreateAgentAgentToolInputCRUDAgentsType> = z
    .nativeEnum(CreateAgentAgentToolInputCRUDAgentsType);

/** @internal */
export const CreateAgentAgentToolInputCRUDAgentsType$outboundSchema:
  z.ZodNativeEnum<typeof CreateAgentAgentToolInputCRUDAgentsType> =
    CreateAgentAgentToolInputCRUDAgentsType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateAgentAgentToolInputCRUDAgentsType$ {
  /** @deprecated use `CreateAgentAgentToolInputCRUDAgentsType$inboundSchema` instead. */
  export const inboundSchema =
    CreateAgentAgentToolInputCRUDAgentsType$inboundSchema;
  /** @deprecated use `CreateAgentAgentToolInputCRUDAgentsType$outboundSchema` instead. */
  export const outboundSchema =
    CreateAgentAgentToolInputCRUDAgentsType$outboundSchema;
}

/** @internal */
export const CallSubAgentTool$inboundSchema: z.ZodType<
  CallSubAgentTool,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: CreateAgentAgentToolInputCRUDAgentsType$inboundSchema,
  requires_approval: z.boolean().default(false),
}).transform((v) => {
  return remap$(v, {
    "requires_approval": "requiresApproval",
  });
});

/** @internal */
export type CallSubAgentTool$Outbound = {
  type: string;
  requires_approval: boolean;
};

/** @internal */
export const CallSubAgentTool$outboundSchema: z.ZodType<
  CallSubAgentTool$Outbound,
  z.ZodTypeDef,
  CallSubAgentTool
> = z.object({
  type: CreateAgentAgentToolInputCRUDAgentsType$outboundSchema,
  requiresApproval: z.boolean().default(false),
}).transform((v) => {
  return remap$(v, {
    requiresApproval: "requires_approval",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CallSubAgentTool$ {
  /** @deprecated use `CallSubAgentTool$inboundSchema` instead. */
  export const inboundSchema = CallSubAgentTool$inboundSchema;
  /** @deprecated use `CallSubAgentTool$outboundSchema` instead. */
  export const outboundSchema = CallSubAgentTool$outboundSchema;
  /** @deprecated use `CallSubAgentTool$Outbound` instead. */
  export type Outbound = CallSubAgentTool$Outbound;
}

export function callSubAgentToolToJSON(
  callSubAgentTool: CallSubAgentTool,
): string {
  return JSON.stringify(
    CallSubAgentTool$outboundSchema.parse(callSubAgentTool),
  );
}

export function callSubAgentToolFromJSON(
  jsonString: string,
): SafeParseResult<CallSubAgentTool, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CallSubAgentTool$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CallSubAgentTool' from JSON`,
  );
}

/** @internal */
export const CreateAgentAgentToolInputCRUDType$inboundSchema: z.ZodNativeEnum<
  typeof CreateAgentAgentToolInputCRUDType
> = z.nativeEnum(CreateAgentAgentToolInputCRUDType);

/** @internal */
export const CreateAgentAgentToolInputCRUDType$outboundSchema: z.ZodNativeEnum<
  typeof CreateAgentAgentToolInputCRUDType
> = CreateAgentAgentToolInputCRUDType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateAgentAgentToolInputCRUDType$ {
  /** @deprecated use `CreateAgentAgentToolInputCRUDType$inboundSchema` instead. */
  export const inboundSchema = CreateAgentAgentToolInputCRUDType$inboundSchema;
  /** @deprecated use `CreateAgentAgentToolInputCRUDType$outboundSchema` instead. */
  export const outboundSchema =
    CreateAgentAgentToolInputCRUDType$outboundSchema;
}

/** @internal */
export const WebScraperTool$inboundSchema: z.ZodType<
  WebScraperTool,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: CreateAgentAgentToolInputCRUDType$inboundSchema,
  requires_approval: z.boolean().default(false),
}).transform((v) => {
  return remap$(v, {
    "requires_approval": "requiresApproval",
  });
});

/** @internal */
export type WebScraperTool$Outbound = {
  type: string;
  requires_approval: boolean;
};

/** @internal */
export const WebScraperTool$outboundSchema: z.ZodType<
  WebScraperTool$Outbound,
  z.ZodTypeDef,
  WebScraperTool
> = z.object({
  type: CreateAgentAgentToolInputCRUDType$outboundSchema,
  requiresApproval: z.boolean().default(false),
}).transform((v) => {
  return remap$(v, {
    requiresApproval: "requires_approval",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace WebScraperTool$ {
  /** @deprecated use `WebScraperTool$inboundSchema` instead. */
  export const inboundSchema = WebScraperTool$inboundSchema;
  /** @deprecated use `WebScraperTool$outboundSchema` instead. */
  export const outboundSchema = WebScraperTool$outboundSchema;
  /** @deprecated use `WebScraperTool$Outbound` instead. */
  export type Outbound = WebScraperTool$Outbound;
}

export function webScraperToolToJSON(webScraperTool: WebScraperTool): string {
  return JSON.stringify(WebScraperTool$outboundSchema.parse(webScraperTool));
}

export function webScraperToolFromJSON(
  jsonString: string,
): SafeParseResult<WebScraperTool, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => WebScraperTool$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'WebScraperTool' from JSON`,
  );
}

/** @internal */
export const AgentToolInputCRUDType$inboundSchema: z.ZodNativeEnum<
  typeof AgentToolInputCRUDType
> = z.nativeEnum(AgentToolInputCRUDType);

/** @internal */
export const AgentToolInputCRUDType$outboundSchema: z.ZodNativeEnum<
  typeof AgentToolInputCRUDType
> = AgentToolInputCRUDType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AgentToolInputCRUDType$ {
  /** @deprecated use `AgentToolInputCRUDType$inboundSchema` instead. */
  export const inboundSchema = AgentToolInputCRUDType$inboundSchema;
  /** @deprecated use `AgentToolInputCRUDType$outboundSchema` instead. */
  export const outboundSchema = AgentToolInputCRUDType$outboundSchema;
}

/** @internal */
export const GoogleSearchTool$inboundSchema: z.ZodType<
  GoogleSearchTool,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: AgentToolInputCRUDType$inboundSchema,
  requires_approval: z.boolean().default(false),
}).transform((v) => {
  return remap$(v, {
    "requires_approval": "requiresApproval",
  });
});

/** @internal */
export type GoogleSearchTool$Outbound = {
  type: string;
  requires_approval: boolean;
};

/** @internal */
export const GoogleSearchTool$outboundSchema: z.ZodType<
  GoogleSearchTool$Outbound,
  z.ZodTypeDef,
  GoogleSearchTool
> = z.object({
  type: AgentToolInputCRUDType$outboundSchema,
  requiresApproval: z.boolean().default(false),
}).transform((v) => {
  return remap$(v, {
    requiresApproval: "requires_approval",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GoogleSearchTool$ {
  /** @deprecated use `GoogleSearchTool$inboundSchema` instead. */
  export const inboundSchema = GoogleSearchTool$inboundSchema;
  /** @deprecated use `GoogleSearchTool$outboundSchema` instead. */
  export const outboundSchema = GoogleSearchTool$outboundSchema;
  /** @deprecated use `GoogleSearchTool$Outbound` instead. */
  export type Outbound = GoogleSearchTool$Outbound;
}

export function googleSearchToolToJSON(
  googleSearchTool: GoogleSearchTool,
): string {
  return JSON.stringify(
    GoogleSearchTool$outboundSchema.parse(googleSearchTool),
  );
}

export function googleSearchToolFromJSON(
  jsonString: string,
): SafeParseResult<GoogleSearchTool, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GoogleSearchTool$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GoogleSearchTool' from JSON`,
  );
}

/** @internal */
export const AgentToolInputCRUD$inboundSchema: z.ZodType<
  AgentToolInputCRUD,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => GoogleSearchTool$inboundSchema),
  z.lazy(() => WebScraperTool$inboundSchema),
  z.lazy(() => CallSubAgentTool$inboundSchema),
  z.lazy(() => RetrieveAgentsTool$inboundSchema),
  z.lazy(() => QueryMemoryStoreTool$inboundSchema),
  z.lazy(() => WriteMemoryStoreTool$inboundSchema),
  z.lazy(() => RetrieveMemoryStoresTool$inboundSchema),
  z.lazy(() => DeleteMemoryDocumentTool$inboundSchema),
  z.lazy(() => RetrieveKnowledgeBasesTool$inboundSchema),
  z.lazy(() => QueryKnowledgeBaseTool$inboundSchema),
  z.lazy(() => CurrentDateTool$inboundSchema),
  z.lazy(() => HTTPTool$inboundSchema),
  z.lazy(() => CodeExecutionTool$inboundSchema),
  z.lazy(() => FunctionTool$inboundSchema),
]);

/** @internal */
export type AgentToolInputCRUD$Outbound =
  | GoogleSearchTool$Outbound
  | WebScraperTool$Outbound
  | CallSubAgentTool$Outbound
  | RetrieveAgentsTool$Outbound
  | QueryMemoryStoreTool$Outbound
  | WriteMemoryStoreTool$Outbound
  | RetrieveMemoryStoresTool$Outbound
  | DeleteMemoryDocumentTool$Outbound
  | RetrieveKnowledgeBasesTool$Outbound
  | QueryKnowledgeBaseTool$Outbound
  | CurrentDateTool$Outbound
  | HTTPTool$Outbound
  | CodeExecutionTool$Outbound
  | FunctionTool$Outbound;

/** @internal */
export const AgentToolInputCRUD$outboundSchema: z.ZodType<
  AgentToolInputCRUD$Outbound,
  z.ZodTypeDef,
  AgentToolInputCRUD
> = z.union([
  z.lazy(() => GoogleSearchTool$outboundSchema),
  z.lazy(() => WebScraperTool$outboundSchema),
  z.lazy(() => CallSubAgentTool$outboundSchema),
  z.lazy(() => RetrieveAgentsTool$outboundSchema),
  z.lazy(() => QueryMemoryStoreTool$outboundSchema),
  z.lazy(() => WriteMemoryStoreTool$outboundSchema),
  z.lazy(() => RetrieveMemoryStoresTool$outboundSchema),
  z.lazy(() => DeleteMemoryDocumentTool$outboundSchema),
  z.lazy(() => RetrieveKnowledgeBasesTool$outboundSchema),
  z.lazy(() => QueryKnowledgeBaseTool$outboundSchema),
  z.lazy(() => CurrentDateTool$outboundSchema),
  z.lazy(() => HTTPTool$outboundSchema),
  z.lazy(() => CodeExecutionTool$outboundSchema),
  z.lazy(() => FunctionTool$outboundSchema),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AgentToolInputCRUD$ {
  /** @deprecated use `AgentToolInputCRUD$inboundSchema` instead. */
  export const inboundSchema = AgentToolInputCRUD$inboundSchema;
  /** @deprecated use `AgentToolInputCRUD$outboundSchema` instead. */
  export const outboundSchema = AgentToolInputCRUD$outboundSchema;
  /** @deprecated use `AgentToolInputCRUD$Outbound` instead. */
  export type Outbound = AgentToolInputCRUD$Outbound;
}

export function agentToolInputCRUDToJSON(
  agentToolInputCRUD: AgentToolInputCRUD,
): string {
  return JSON.stringify(
    AgentToolInputCRUD$outboundSchema.parse(agentToolInputCRUD),
  );
}

export function agentToolInputCRUDFromJSON(
  jsonString: string,
): SafeParseResult<AgentToolInputCRUD, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AgentToolInputCRUD$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AgentToolInputCRUD' from JSON`,
  );
}

/** @internal */
export const Settings$inboundSchema: z.ZodType<
  Settings,
  z.ZodTypeDef,
  unknown
> = z.object({
  max_iterations: z.number().int().default(15),
  max_execution_time: z.number().int().default(300),
  tool_approval_required: ToolApprovalRequired$inboundSchema.default(
    "respect_tool",
  ),
  tools: z.array(
    z.union([
      z.lazy(() => GoogleSearchTool$inboundSchema),
      z.lazy(() => WebScraperTool$inboundSchema),
      z.lazy(() => CallSubAgentTool$inboundSchema),
      z.lazy(() => RetrieveAgentsTool$inboundSchema),
      z.lazy(() => QueryMemoryStoreTool$inboundSchema),
      z.lazy(() => WriteMemoryStoreTool$inboundSchema),
      z.lazy(() => RetrieveMemoryStoresTool$inboundSchema),
      z.lazy(() => DeleteMemoryDocumentTool$inboundSchema),
      z.lazy(() => RetrieveKnowledgeBasesTool$inboundSchema),
      z.lazy(() => QueryKnowledgeBaseTool$inboundSchema),
      z.lazy(() => CurrentDateTool$inboundSchema),
      z.lazy(() => HTTPTool$inboundSchema),
      z.lazy(() => CodeExecutionTool$inboundSchema),
      z.lazy(() => FunctionTool$inboundSchema),
    ]),
  ),
}).transform((v) => {
  return remap$(v, {
    "max_iterations": "maxIterations",
    "max_execution_time": "maxExecutionTime",
    "tool_approval_required": "toolApprovalRequired",
  });
});

/** @internal */
export type Settings$Outbound = {
  max_iterations: number;
  max_execution_time: number;
  tool_approval_required: string;
  tools: Array<
    | GoogleSearchTool$Outbound
    | WebScraperTool$Outbound
    | CallSubAgentTool$Outbound
    | RetrieveAgentsTool$Outbound
    | QueryMemoryStoreTool$Outbound
    | WriteMemoryStoreTool$Outbound
    | RetrieveMemoryStoresTool$Outbound
    | DeleteMemoryDocumentTool$Outbound
    | RetrieveKnowledgeBasesTool$Outbound
    | QueryKnowledgeBaseTool$Outbound
    | CurrentDateTool$Outbound
    | HTTPTool$Outbound
    | CodeExecutionTool$Outbound
    | FunctionTool$Outbound
  >;
};

/** @internal */
export const Settings$outboundSchema: z.ZodType<
  Settings$Outbound,
  z.ZodTypeDef,
  Settings
> = z.object({
  maxIterations: z.number().int().default(15),
  maxExecutionTime: z.number().int().default(300),
  toolApprovalRequired: ToolApprovalRequired$outboundSchema.default(
    "respect_tool",
  ),
  tools: z.array(
    z.union([
      z.lazy(() => GoogleSearchTool$outboundSchema),
      z.lazy(() => WebScraperTool$outboundSchema),
      z.lazy(() => CallSubAgentTool$outboundSchema),
      z.lazy(() => RetrieveAgentsTool$outboundSchema),
      z.lazy(() => QueryMemoryStoreTool$outboundSchema),
      z.lazy(() => WriteMemoryStoreTool$outboundSchema),
      z.lazy(() => RetrieveMemoryStoresTool$outboundSchema),
      z.lazy(() => DeleteMemoryDocumentTool$outboundSchema),
      z.lazy(() => RetrieveKnowledgeBasesTool$outboundSchema),
      z.lazy(() => QueryKnowledgeBaseTool$outboundSchema),
      z.lazy(() => CurrentDateTool$outboundSchema),
      z.lazy(() => HTTPTool$outboundSchema),
      z.lazy(() => CodeExecutionTool$outboundSchema),
      z.lazy(() => FunctionTool$outboundSchema),
    ]),
  ),
}).transform((v) => {
  return remap$(v, {
    maxIterations: "max_iterations",
    maxExecutionTime: "max_execution_time",
    toolApprovalRequired: "tool_approval_required",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Settings$ {
  /** @deprecated use `Settings$inboundSchema` instead. */
  export const inboundSchema = Settings$inboundSchema;
  /** @deprecated use `Settings$outboundSchema` instead. */
  export const outboundSchema = Settings$outboundSchema;
  /** @deprecated use `Settings$Outbound` instead. */
  export type Outbound = Settings$Outbound;
}

export function settingsToJSON(settings: Settings): string {
  return JSON.stringify(Settings$outboundSchema.parse(settings));
}

export function settingsFromJSON(
  jsonString: string,
): SafeParseResult<Settings, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Settings$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Settings' from JSON`,
  );
}

/** @internal */
export const KnowledgeBases$inboundSchema: z.ZodType<
  KnowledgeBases,
  z.ZodTypeDef,
  unknown
> = z.object({
  knowledge_id: z.string(),
}).transform((v) => {
  return remap$(v, {
    "knowledge_id": "knowledgeId",
  });
});

/** @internal */
export type KnowledgeBases$Outbound = {
  knowledge_id: string;
};

/** @internal */
export const KnowledgeBases$outboundSchema: z.ZodType<
  KnowledgeBases$Outbound,
  z.ZodTypeDef,
  KnowledgeBases
> = z.object({
  knowledgeId: z.string(),
}).transform((v) => {
  return remap$(v, {
    knowledgeId: "knowledge_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace KnowledgeBases$ {
  /** @deprecated use `KnowledgeBases$inboundSchema` instead. */
  export const inboundSchema = KnowledgeBases$inboundSchema;
  /** @deprecated use `KnowledgeBases$outboundSchema` instead. */
  export const outboundSchema = KnowledgeBases$outboundSchema;
  /** @deprecated use `KnowledgeBases$Outbound` instead. */
  export type Outbound = KnowledgeBases$Outbound;
}

export function knowledgeBasesToJSON(knowledgeBases: KnowledgeBases): string {
  return JSON.stringify(KnowledgeBases$outboundSchema.parse(knowledgeBases));
}

export function knowledgeBasesFromJSON(
  jsonString: string,
): SafeParseResult<KnowledgeBases, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => KnowledgeBases$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'KnowledgeBases' from JSON`,
  );
}

/** @internal */
export const TeamOfAgents$inboundSchema: z.ZodType<
  TeamOfAgents,
  z.ZodTypeDef,
  unknown
> = z.object({
  key: z.string(),
  role: z.string().optional(),
});

/** @internal */
export type TeamOfAgents$Outbound = {
  key: string;
  role?: string | undefined;
};

/** @internal */
export const TeamOfAgents$outboundSchema: z.ZodType<
  TeamOfAgents$Outbound,
  z.ZodTypeDef,
  TeamOfAgents
> = z.object({
  key: z.string(),
  role: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TeamOfAgents$ {
  /** @deprecated use `TeamOfAgents$inboundSchema` instead. */
  export const inboundSchema = TeamOfAgents$inboundSchema;
  /** @deprecated use `TeamOfAgents$outboundSchema` instead. */
  export const outboundSchema = TeamOfAgents$outboundSchema;
  /** @deprecated use `TeamOfAgents$Outbound` instead. */
  export type Outbound = TeamOfAgents$Outbound;
}

export function teamOfAgentsToJSON(teamOfAgents: TeamOfAgents): string {
  return JSON.stringify(TeamOfAgents$outboundSchema.parse(teamOfAgents));
}

export function teamOfAgentsFromJSON(
  jsonString: string,
): SafeParseResult<TeamOfAgents, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => TeamOfAgents$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TeamOfAgents' from JSON`,
  );
}

/** @internal */
export const CreateAgentRequestBody$inboundSchema: z.ZodType<
  CreateAgentRequestBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  path: z.string(),
  key: z.string(),
  role: z.string(),
  description: z.string(),
  instructions: z.string(),
  system_prompt: z.string().optional(),
  model: z.string(),
  fallback_models: z.array(z.string()).optional(),
  settings: z.lazy(() => Settings$inboundSchema),
  memory_stores: z.array(z.string()).optional(),
  knowledge_bases: z.array(z.lazy(() => KnowledgeBases$inboundSchema))
    .optional(),
  team_of_agents: z.array(z.lazy(() => TeamOfAgents$inboundSchema)).optional(),
}).transform((v) => {
  return remap$(v, {
    "system_prompt": "systemPrompt",
    "fallback_models": "fallbackModels",
    "memory_stores": "memoryStores",
    "knowledge_bases": "knowledgeBases",
    "team_of_agents": "teamOfAgents",
  });
});

/** @internal */
export type CreateAgentRequestBody$Outbound = {
  path: string;
  key: string;
  role: string;
  description: string;
  instructions: string;
  system_prompt?: string | undefined;
  model: string;
  fallback_models?: Array<string> | undefined;
  settings: Settings$Outbound;
  memory_stores?: Array<string> | undefined;
  knowledge_bases?: Array<KnowledgeBases$Outbound> | undefined;
  team_of_agents?: Array<TeamOfAgents$Outbound> | undefined;
};

/** @internal */
export const CreateAgentRequestBody$outboundSchema: z.ZodType<
  CreateAgentRequestBody$Outbound,
  z.ZodTypeDef,
  CreateAgentRequestBody
> = z.object({
  path: z.string(),
  key: z.string(),
  role: z.string(),
  description: z.string(),
  instructions: z.string(),
  systemPrompt: z.string().optional(),
  model: z.string(),
  fallbackModels: z.array(z.string()).optional(),
  settings: z.lazy(() => Settings$outboundSchema),
  memoryStores: z.array(z.string()).optional(),
  knowledgeBases: z.array(z.lazy(() => KnowledgeBases$outboundSchema))
    .optional(),
  teamOfAgents: z.array(z.lazy(() => TeamOfAgents$outboundSchema)).optional(),
}).transform((v) => {
  return remap$(v, {
    systemPrompt: "system_prompt",
    fallbackModels: "fallback_models",
    memoryStores: "memory_stores",
    knowledgeBases: "knowledge_bases",
    teamOfAgents: "team_of_agents",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateAgentRequestBody$ {
  /** @deprecated use `CreateAgentRequestBody$inboundSchema` instead. */
  export const inboundSchema = CreateAgentRequestBody$inboundSchema;
  /** @deprecated use `CreateAgentRequestBody$outboundSchema` instead. */
  export const outboundSchema = CreateAgentRequestBody$outboundSchema;
  /** @deprecated use `CreateAgentRequestBody$Outbound` instead. */
  export type Outbound = CreateAgentRequestBody$Outbound;
}

export function createAgentRequestBodyToJSON(
  createAgentRequestBody: CreateAgentRequestBody,
): string {
  return JSON.stringify(
    CreateAgentRequestBody$outboundSchema.parse(createAgentRequestBody),
  );
}

export function createAgentRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<CreateAgentRequestBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateAgentRequestBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateAgentRequestBody' from JSON`,
  );
}

/** @internal */
export const CreateAgentStatus$inboundSchema: z.ZodNativeEnum<
  typeof CreateAgentStatus
> = z.nativeEnum(CreateAgentStatus);

/** @internal */
export const CreateAgentStatus$outboundSchema: z.ZodNativeEnum<
  typeof CreateAgentStatus
> = CreateAgentStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateAgentStatus$ {
  /** @deprecated use `CreateAgentStatus$inboundSchema` instead. */
  export const inboundSchema = CreateAgentStatus$inboundSchema;
  /** @deprecated use `CreateAgentStatus$outboundSchema` instead. */
  export const outboundSchema = CreateAgentStatus$outboundSchema;
}

/** @internal */
export const CreateAgentToolApprovalRequired$inboundSchema: z.ZodNativeEnum<
  typeof CreateAgentToolApprovalRequired
> = z.nativeEnum(CreateAgentToolApprovalRequired);

/** @internal */
export const CreateAgentToolApprovalRequired$outboundSchema: z.ZodNativeEnum<
  typeof CreateAgentToolApprovalRequired
> = CreateAgentToolApprovalRequired$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateAgentToolApprovalRequired$ {
  /** @deprecated use `CreateAgentToolApprovalRequired$inboundSchema` instead. */
  export const inboundSchema = CreateAgentToolApprovalRequired$inboundSchema;
  /** @deprecated use `CreateAgentToolApprovalRequired$outboundSchema` instead. */
  export const outboundSchema = CreateAgentToolApprovalRequired$outboundSchema;
}

/** @internal */
export const Conditions$inboundSchema: z.ZodType<
  Conditions,
  z.ZodTypeDef,
  unknown
> = z.object({
  condition: z.string(),
  operator: z.string(),
  value: z.string(),
});

/** @internal */
export type Conditions$Outbound = {
  condition: string;
  operator: string;
  value: string;
};

/** @internal */
export const Conditions$outboundSchema: z.ZodType<
  Conditions$Outbound,
  z.ZodTypeDef,
  Conditions
> = z.object({
  condition: z.string(),
  operator: z.string(),
  value: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Conditions$ {
  /** @deprecated use `Conditions$inboundSchema` instead. */
  export const inboundSchema = Conditions$inboundSchema;
  /** @deprecated use `Conditions$outboundSchema` instead. */
  export const outboundSchema = Conditions$outboundSchema;
  /** @deprecated use `Conditions$Outbound` instead. */
  export type Outbound = Conditions$Outbound;
}

export function conditionsToJSON(conditions: Conditions): string {
  return JSON.stringify(Conditions$outboundSchema.parse(conditions));
}

export function conditionsFromJSON(
  jsonString: string,
): SafeParseResult<Conditions, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Conditions$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Conditions' from JSON`,
  );
}

/** @internal */
export const CreateAgentTools$inboundSchema: z.ZodType<
  CreateAgentTools,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  key: z.string().optional(),
  action_type: z.string(),
  display_name: z.string().optional(),
  requires_approval: z.boolean().default(false),
  conditions: z.array(z.lazy(() => Conditions$inboundSchema)).optional(),
  mcpServer: z.string().optional(),
  timeout: z.number().default(120),
}).transform((v) => {
  return remap$(v, {
    "action_type": "actionType",
    "display_name": "displayName",
    "requires_approval": "requiresApproval",
  });
});

/** @internal */
export type CreateAgentTools$Outbound = {
  id: string;
  key?: string | undefined;
  action_type: string;
  display_name?: string | undefined;
  requires_approval: boolean;
  conditions?: Array<Conditions$Outbound> | undefined;
  mcpServer?: string | undefined;
  timeout: number;
};

/** @internal */
export const CreateAgentTools$outboundSchema: z.ZodType<
  CreateAgentTools$Outbound,
  z.ZodTypeDef,
  CreateAgentTools
> = z.object({
  id: z.string(),
  key: z.string().optional(),
  actionType: z.string(),
  displayName: z.string().optional(),
  requiresApproval: z.boolean().default(false),
  conditions: z.array(z.lazy(() => Conditions$outboundSchema)).optional(),
  mcpServer: z.string().optional(),
  timeout: z.number().default(120),
}).transform((v) => {
  return remap$(v, {
    actionType: "action_type",
    displayName: "display_name",
    requiresApproval: "requires_approval",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateAgentTools$ {
  /** @deprecated use `CreateAgentTools$inboundSchema` instead. */
  export const inboundSchema = CreateAgentTools$inboundSchema;
  /** @deprecated use `CreateAgentTools$outboundSchema` instead. */
  export const outboundSchema = CreateAgentTools$outboundSchema;
  /** @deprecated use `CreateAgentTools$Outbound` instead. */
  export type Outbound = CreateAgentTools$Outbound;
}

export function createAgentToolsToJSON(
  createAgentTools: CreateAgentTools,
): string {
  return JSON.stringify(
    CreateAgentTools$outboundSchema.parse(createAgentTools),
  );
}

export function createAgentToolsFromJSON(
  jsonString: string,
): SafeParseResult<CreateAgentTools, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateAgentTools$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateAgentTools' from JSON`,
  );
}

/** @internal */
export const CreateAgentSettings$inboundSchema: z.ZodType<
  CreateAgentSettings,
  z.ZodTypeDef,
  unknown
> = z.object({
  max_iterations: z.number().int().default(15),
  max_execution_time: z.number().int().default(300),
  tool_approval_required: CreateAgentToolApprovalRequired$inboundSchema.default(
    "respect_tool",
  ),
  tools: z.array(z.lazy(() => CreateAgentTools$inboundSchema)),
}).transform((v) => {
  return remap$(v, {
    "max_iterations": "maxIterations",
    "max_execution_time": "maxExecutionTime",
    "tool_approval_required": "toolApprovalRequired",
  });
});

/** @internal */
export type CreateAgentSettings$Outbound = {
  max_iterations: number;
  max_execution_time: number;
  tool_approval_required: string;
  tools: Array<CreateAgentTools$Outbound>;
};

/** @internal */
export const CreateAgentSettings$outboundSchema: z.ZodType<
  CreateAgentSettings$Outbound,
  z.ZodTypeDef,
  CreateAgentSettings
> = z.object({
  maxIterations: z.number().int().default(15),
  maxExecutionTime: z.number().int().default(300),
  toolApprovalRequired: CreateAgentToolApprovalRequired$outboundSchema.default(
    "respect_tool",
  ),
  tools: z.array(z.lazy(() => CreateAgentTools$outboundSchema)),
}).transform((v) => {
  return remap$(v, {
    maxIterations: "max_iterations",
    maxExecutionTime: "max_execution_time",
    toolApprovalRequired: "tool_approval_required",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateAgentSettings$ {
  /** @deprecated use `CreateAgentSettings$inboundSchema` instead. */
  export const inboundSchema = CreateAgentSettings$inboundSchema;
  /** @deprecated use `CreateAgentSettings$outboundSchema` instead. */
  export const outboundSchema = CreateAgentSettings$outboundSchema;
  /** @deprecated use `CreateAgentSettings$Outbound` instead. */
  export type Outbound = CreateAgentSettings$Outbound;
}

export function createAgentSettingsToJSON(
  createAgentSettings: CreateAgentSettings,
): string {
  return JSON.stringify(
    CreateAgentSettings$outboundSchema.parse(createAgentSettings),
  );
}

export function createAgentSettingsFromJSON(
  jsonString: string,
): SafeParseResult<CreateAgentSettings, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateAgentSettings$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateAgentSettings' from JSON`,
  );
}

/** @internal */
export const CreateAgentModel$inboundSchema: z.ZodType<
  CreateAgentModel,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  integration_id: z.nullable(z.string()).optional(),
  fallback_models: z.nullable(z.array(z.string())).optional(),
  max_tokens: z.number().int().optional(),
  temperature: z.number().optional(),
}).transform((v) => {
  return remap$(v, {
    "integration_id": "integrationId",
    "fallback_models": "fallbackModels",
    "max_tokens": "maxTokens",
  });
});

/** @internal */
export type CreateAgentModel$Outbound = {
  id: string;
  integration_id?: string | null | undefined;
  fallback_models?: Array<string> | null | undefined;
  max_tokens?: number | undefined;
  temperature?: number | undefined;
};

/** @internal */
export const CreateAgentModel$outboundSchema: z.ZodType<
  CreateAgentModel$Outbound,
  z.ZodTypeDef,
  CreateAgentModel
> = z.object({
  id: z.string(),
  integrationId: z.nullable(z.string()).optional(),
  fallbackModels: z.nullable(z.array(z.string())).optional(),
  maxTokens: z.number().int().optional(),
  temperature: z.number().optional(),
}).transform((v) => {
  return remap$(v, {
    integrationId: "integration_id",
    fallbackModels: "fallback_models",
    maxTokens: "max_tokens",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateAgentModel$ {
  /** @deprecated use `CreateAgentModel$inboundSchema` instead. */
  export const inboundSchema = CreateAgentModel$inboundSchema;
  /** @deprecated use `CreateAgentModel$outboundSchema` instead. */
  export const outboundSchema = CreateAgentModel$outboundSchema;
  /** @deprecated use `CreateAgentModel$Outbound` instead. */
  export type Outbound = CreateAgentModel$Outbound;
}

export function createAgentModelToJSON(
  createAgentModel: CreateAgentModel,
): string {
  return JSON.stringify(
    CreateAgentModel$outboundSchema.parse(createAgentModel),
  );
}

export function createAgentModelFromJSON(
  jsonString: string,
): SafeParseResult<CreateAgentModel, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateAgentModel$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateAgentModel' from JSON`,
  );
}

/** @internal */
export const CreateAgentTeamOfAgents$inboundSchema: z.ZodType<
  CreateAgentTeamOfAgents,
  z.ZodTypeDef,
  unknown
> = z.object({
  key: z.string(),
  role: z.string().optional(),
});

/** @internal */
export type CreateAgentTeamOfAgents$Outbound = {
  key: string;
  role?: string | undefined;
};

/** @internal */
export const CreateAgentTeamOfAgents$outboundSchema: z.ZodType<
  CreateAgentTeamOfAgents$Outbound,
  z.ZodTypeDef,
  CreateAgentTeamOfAgents
> = z.object({
  key: z.string(),
  role: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateAgentTeamOfAgents$ {
  /** @deprecated use `CreateAgentTeamOfAgents$inboundSchema` instead. */
  export const inboundSchema = CreateAgentTeamOfAgents$inboundSchema;
  /** @deprecated use `CreateAgentTeamOfAgents$outboundSchema` instead. */
  export const outboundSchema = CreateAgentTeamOfAgents$outboundSchema;
  /** @deprecated use `CreateAgentTeamOfAgents$Outbound` instead. */
  export type Outbound = CreateAgentTeamOfAgents$Outbound;
}

export function createAgentTeamOfAgentsToJSON(
  createAgentTeamOfAgents: CreateAgentTeamOfAgents,
): string {
  return JSON.stringify(
    CreateAgentTeamOfAgents$outboundSchema.parse(createAgentTeamOfAgents),
  );
}

export function createAgentTeamOfAgentsFromJSON(
  jsonString: string,
): SafeParseResult<CreateAgentTeamOfAgents, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateAgentTeamOfAgents$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateAgentTeamOfAgents' from JSON`,
  );
}

/** @internal */
export const Metrics$inboundSchema: z.ZodType<Metrics, z.ZodTypeDef, unknown> =
  z.object({
    total_cost: z.number().default(0),
  }).transform((v) => {
    return remap$(v, {
      "total_cost": "totalCost",
    });
  });

/** @internal */
export type Metrics$Outbound = {
  total_cost: number;
};

/** @internal */
export const Metrics$outboundSchema: z.ZodType<
  Metrics$Outbound,
  z.ZodTypeDef,
  Metrics
> = z.object({
  totalCost: z.number().default(0),
}).transform((v) => {
  return remap$(v, {
    totalCost: "total_cost",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Metrics$ {
  /** @deprecated use `Metrics$inboundSchema` instead. */
  export const inboundSchema = Metrics$inboundSchema;
  /** @deprecated use `Metrics$outboundSchema` instead. */
  export const outboundSchema = Metrics$outboundSchema;
  /** @deprecated use `Metrics$Outbound` instead. */
  export type Outbound = Metrics$Outbound;
}

export function metricsToJSON(metrics: Metrics): string {
  return JSON.stringify(Metrics$outboundSchema.parse(metrics));
}

export function metricsFromJSON(
  jsonString: string,
): SafeParseResult<Metrics, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Metrics$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Metrics' from JSON`,
  );
}

/** @internal */
export const CreateAgentKnowledgeBases$inboundSchema: z.ZodType<
  CreateAgentKnowledgeBases,
  z.ZodTypeDef,
  unknown
> = z.object({
  knowledge_id: z.string(),
}).transform((v) => {
  return remap$(v, {
    "knowledge_id": "knowledgeId",
  });
});

/** @internal */
export type CreateAgentKnowledgeBases$Outbound = {
  knowledge_id: string;
};

/** @internal */
export const CreateAgentKnowledgeBases$outboundSchema: z.ZodType<
  CreateAgentKnowledgeBases$Outbound,
  z.ZodTypeDef,
  CreateAgentKnowledgeBases
> = z.object({
  knowledgeId: z.string(),
}).transform((v) => {
  return remap$(v, {
    knowledgeId: "knowledge_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateAgentKnowledgeBases$ {
  /** @deprecated use `CreateAgentKnowledgeBases$inboundSchema` instead. */
  export const inboundSchema = CreateAgentKnowledgeBases$inboundSchema;
  /** @deprecated use `CreateAgentKnowledgeBases$outboundSchema` instead. */
  export const outboundSchema = CreateAgentKnowledgeBases$outboundSchema;
  /** @deprecated use `CreateAgentKnowledgeBases$Outbound` instead. */
  export type Outbound = CreateAgentKnowledgeBases$Outbound;
}

export function createAgentKnowledgeBasesToJSON(
  createAgentKnowledgeBases: CreateAgentKnowledgeBases,
): string {
  return JSON.stringify(
    CreateAgentKnowledgeBases$outboundSchema.parse(createAgentKnowledgeBases),
  );
}

export function createAgentKnowledgeBasesFromJSON(
  jsonString: string,
): SafeParseResult<CreateAgentKnowledgeBases, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateAgentKnowledgeBases$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateAgentKnowledgeBases' from JSON`,
  );
}

/** @internal */
export const HiddenPanels$inboundSchema: z.ZodNativeEnum<typeof HiddenPanels> =
  z.nativeEnum(HiddenPanels);

/** @internal */
export const HiddenPanels$outboundSchema: z.ZodNativeEnum<typeof HiddenPanels> =
  HiddenPanels$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HiddenPanels$ {
  /** @deprecated use `HiddenPanels$inboundSchema` instead. */
  export const inboundSchema = HiddenPanels$inboundSchema;
  /** @deprecated use `HiddenPanels$outboundSchema` instead. */
  export const outboundSchema = HiddenPanels$outboundSchema;
}

/** @internal */
export const CreateAgentResponseBody$inboundSchema: z.ZodType<
  CreateAgentResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  _id: z.string(),
  key: z.string(),
  workspace_id: z.string(),
  project_id: z.string(),
  created_by_id: z.nullable(z.string()).optional(),
  updated_by_id: z.nullable(z.string()).optional(),
  created: z.string().optional(),
  updated: z.string().optional(),
  role: z.string(),
  description: z.string(),
  system_prompt: z.string().optional(),
  instructions: z.string(),
  status: CreateAgentStatus$inboundSchema,
  settings: z.lazy(() => CreateAgentSettings$inboundSchema).optional(),
  model: z.lazy(() => CreateAgentModel$inboundSchema),
  version_hash: z.string().optional(),
  path: z.string(),
  memory_stores: z.array(z.string()),
  team_of_agents: z.array(z.lazy(() => CreateAgentTeamOfAgents$inboundSchema)),
  metrics: z.lazy(() => Metrics$inboundSchema).optional(),
  variables: z.record(z.any()).optional(),
  knowledge_bases: z.array(
    z.lazy(() => CreateAgentKnowledgeBases$inboundSchema),
  ).optional(),
  hidden_panels: z.array(HiddenPanels$inboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    "_id": "id",
    "workspace_id": "workspaceId",
    "project_id": "projectId",
    "created_by_id": "createdById",
    "updated_by_id": "updatedById",
    "system_prompt": "systemPrompt",
    "version_hash": "versionHash",
    "memory_stores": "memoryStores",
    "team_of_agents": "teamOfAgents",
    "knowledge_bases": "knowledgeBases",
    "hidden_panels": "hiddenPanels",
  });
});

/** @internal */
export type CreateAgentResponseBody$Outbound = {
  _id: string;
  key: string;
  workspace_id: string;
  project_id: string;
  created_by_id?: string | null | undefined;
  updated_by_id?: string | null | undefined;
  created?: string | undefined;
  updated?: string | undefined;
  role: string;
  description: string;
  system_prompt?: string | undefined;
  instructions: string;
  status: string;
  settings?: CreateAgentSettings$Outbound | undefined;
  model: CreateAgentModel$Outbound;
  version_hash?: string | undefined;
  path: string;
  memory_stores: Array<string>;
  team_of_agents: Array<CreateAgentTeamOfAgents$Outbound>;
  metrics?: Metrics$Outbound | undefined;
  variables?: { [k: string]: any } | undefined;
  knowledge_bases?: Array<CreateAgentKnowledgeBases$Outbound> | undefined;
  hidden_panels?: Array<string> | undefined;
};

/** @internal */
export const CreateAgentResponseBody$outboundSchema: z.ZodType<
  CreateAgentResponseBody$Outbound,
  z.ZodTypeDef,
  CreateAgentResponseBody
> = z.object({
  id: z.string(),
  key: z.string(),
  workspaceId: z.string(),
  projectId: z.string(),
  createdById: z.nullable(z.string()).optional(),
  updatedById: z.nullable(z.string()).optional(),
  created: z.string().optional(),
  updated: z.string().optional(),
  role: z.string(),
  description: z.string(),
  systemPrompt: z.string().optional(),
  instructions: z.string(),
  status: CreateAgentStatus$outboundSchema,
  settings: z.lazy(() => CreateAgentSettings$outboundSchema).optional(),
  model: z.lazy(() => CreateAgentModel$outboundSchema),
  versionHash: z.string().optional(),
  path: z.string(),
  memoryStores: z.array(z.string()),
  teamOfAgents: z.array(z.lazy(() => CreateAgentTeamOfAgents$outboundSchema)),
  metrics: z.lazy(() => Metrics$outboundSchema).optional(),
  variables: z.record(z.any()).optional(),
  knowledgeBases: z.array(
    z.lazy(() => CreateAgentKnowledgeBases$outboundSchema),
  ).optional(),
  hiddenPanels: z.array(HiddenPanels$outboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    id: "_id",
    workspaceId: "workspace_id",
    projectId: "project_id",
    createdById: "created_by_id",
    updatedById: "updated_by_id",
    systemPrompt: "system_prompt",
    versionHash: "version_hash",
    memoryStores: "memory_stores",
    teamOfAgents: "team_of_agents",
    knowledgeBases: "knowledge_bases",
    hiddenPanels: "hidden_panels",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateAgentResponseBody$ {
  /** @deprecated use `CreateAgentResponseBody$inboundSchema` instead. */
  export const inboundSchema = CreateAgentResponseBody$inboundSchema;
  /** @deprecated use `CreateAgentResponseBody$outboundSchema` instead. */
  export const outboundSchema = CreateAgentResponseBody$outboundSchema;
  /** @deprecated use `CreateAgentResponseBody$Outbound` instead. */
  export type Outbound = CreateAgentResponseBody$Outbound;
}

export function createAgentResponseBodyToJSON(
  createAgentResponseBody: CreateAgentResponseBody,
): string {
  return JSON.stringify(
    CreateAgentResponseBody$outboundSchema.parse(createAgentResponseBody),
  );
}

export function createAgentResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<CreateAgentResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateAgentResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateAgentResponseBody' from JSON`,
  );
}
