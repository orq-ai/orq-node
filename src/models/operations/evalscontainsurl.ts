/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type EvalsContainsUrlRequestBody = {
  output: string;
};

export type EvalsContainsUrlValue = boolean | string | number;

/**
 * Returns the result of the evaluator run
 */
export type EvalsContainsUrlResponseBody = {
  value: boolean | string | number | null;
};

/** @internal */
export const EvalsContainsUrlRequestBody$inboundSchema: z.ZodType<
  EvalsContainsUrlRequestBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  output: z.string(),
});

/** @internal */
export type EvalsContainsUrlRequestBody$Outbound = {
  output: string;
};

/** @internal */
export const EvalsContainsUrlRequestBody$outboundSchema: z.ZodType<
  EvalsContainsUrlRequestBody$Outbound,
  z.ZodTypeDef,
  EvalsContainsUrlRequestBody
> = z.object({
  output: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EvalsContainsUrlRequestBody$ {
  /** @deprecated use `EvalsContainsUrlRequestBody$inboundSchema` instead. */
  export const inboundSchema = EvalsContainsUrlRequestBody$inboundSchema;
  /** @deprecated use `EvalsContainsUrlRequestBody$outboundSchema` instead. */
  export const outboundSchema = EvalsContainsUrlRequestBody$outboundSchema;
  /** @deprecated use `EvalsContainsUrlRequestBody$Outbound` instead. */
  export type Outbound = EvalsContainsUrlRequestBody$Outbound;
}

export function evalsContainsUrlRequestBodyToJSON(
  evalsContainsUrlRequestBody: EvalsContainsUrlRequestBody,
): string {
  return JSON.stringify(
    EvalsContainsUrlRequestBody$outboundSchema.parse(
      evalsContainsUrlRequestBody,
    ),
  );
}

export function evalsContainsUrlRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<EvalsContainsUrlRequestBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => EvalsContainsUrlRequestBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'EvalsContainsUrlRequestBody' from JSON`,
  );
}

/** @internal */
export const EvalsContainsUrlValue$inboundSchema: z.ZodType<
  EvalsContainsUrlValue,
  z.ZodTypeDef,
  unknown
> = z.union([z.boolean(), z.string(), z.number()]);

/** @internal */
export type EvalsContainsUrlValue$Outbound = boolean | string | number;

/** @internal */
export const EvalsContainsUrlValue$outboundSchema: z.ZodType<
  EvalsContainsUrlValue$Outbound,
  z.ZodTypeDef,
  EvalsContainsUrlValue
> = z.union([z.boolean(), z.string(), z.number()]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EvalsContainsUrlValue$ {
  /** @deprecated use `EvalsContainsUrlValue$inboundSchema` instead. */
  export const inboundSchema = EvalsContainsUrlValue$inboundSchema;
  /** @deprecated use `EvalsContainsUrlValue$outboundSchema` instead. */
  export const outboundSchema = EvalsContainsUrlValue$outboundSchema;
  /** @deprecated use `EvalsContainsUrlValue$Outbound` instead. */
  export type Outbound = EvalsContainsUrlValue$Outbound;
}

export function evalsContainsUrlValueToJSON(
  evalsContainsUrlValue: EvalsContainsUrlValue,
): string {
  return JSON.stringify(
    EvalsContainsUrlValue$outboundSchema.parse(evalsContainsUrlValue),
  );
}

export function evalsContainsUrlValueFromJSON(
  jsonString: string,
): SafeParseResult<EvalsContainsUrlValue, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => EvalsContainsUrlValue$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'EvalsContainsUrlValue' from JSON`,
  );
}

/** @internal */
export const EvalsContainsUrlResponseBody$inboundSchema: z.ZodType<
  EvalsContainsUrlResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  value: z.nullable(z.union([z.boolean(), z.string(), z.number()])),
});

/** @internal */
export type EvalsContainsUrlResponseBody$Outbound = {
  value: boolean | string | number | null;
};

/** @internal */
export const EvalsContainsUrlResponseBody$outboundSchema: z.ZodType<
  EvalsContainsUrlResponseBody$Outbound,
  z.ZodTypeDef,
  EvalsContainsUrlResponseBody
> = z.object({
  value: z.nullable(z.union([z.boolean(), z.string(), z.number()])),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EvalsContainsUrlResponseBody$ {
  /** @deprecated use `EvalsContainsUrlResponseBody$inboundSchema` instead. */
  export const inboundSchema = EvalsContainsUrlResponseBody$inboundSchema;
  /** @deprecated use `EvalsContainsUrlResponseBody$outboundSchema` instead. */
  export const outboundSchema = EvalsContainsUrlResponseBody$outboundSchema;
  /** @deprecated use `EvalsContainsUrlResponseBody$Outbound` instead. */
  export type Outbound = EvalsContainsUrlResponseBody$Outbound;
}

export function evalsContainsUrlResponseBodyToJSON(
  evalsContainsUrlResponseBody: EvalsContainsUrlResponseBody,
): string {
  return JSON.stringify(
    EvalsContainsUrlResponseBody$outboundSchema.parse(
      evalsContainsUrlResponseBody,
    ),
  );
}

export function evalsContainsUrlResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<EvalsContainsUrlResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => EvalsContainsUrlResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'EvalsContainsUrlResponseBody' from JSON`,
  );
}
