/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type EvalsRagasCoherenceRequestBody = {
  /**
   * Latest user message
   */
  query: string;
  /**
   * The generated response from the model
   */
  output: string;
  model: string;
  /**
   * The reference used to compare the output
   */
  reference?: string | undefined;
};

/**
 * Returns the coherence evaluation result
 */
export type EvalsRagasCoherenceResponseBody = {
  value: number | null;
};

/** @internal */
export const EvalsRagasCoherenceRequestBody$inboundSchema: z.ZodType<
  EvalsRagasCoherenceRequestBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  query: z.string(),
  output: z.string(),
  model: z.string(),
  reference: z.string().optional(),
});

/** @internal */
export type EvalsRagasCoherenceRequestBody$Outbound = {
  query: string;
  output: string;
  model: string;
  reference?: string | undefined;
};

/** @internal */
export const EvalsRagasCoherenceRequestBody$outboundSchema: z.ZodType<
  EvalsRagasCoherenceRequestBody$Outbound,
  z.ZodTypeDef,
  EvalsRagasCoherenceRequestBody
> = z.object({
  query: z.string(),
  output: z.string(),
  model: z.string(),
  reference: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EvalsRagasCoherenceRequestBody$ {
  /** @deprecated use `EvalsRagasCoherenceRequestBody$inboundSchema` instead. */
  export const inboundSchema = EvalsRagasCoherenceRequestBody$inboundSchema;
  /** @deprecated use `EvalsRagasCoherenceRequestBody$outboundSchema` instead. */
  export const outboundSchema = EvalsRagasCoherenceRequestBody$outboundSchema;
  /** @deprecated use `EvalsRagasCoherenceRequestBody$Outbound` instead. */
  export type Outbound = EvalsRagasCoherenceRequestBody$Outbound;
}

export function evalsRagasCoherenceRequestBodyToJSON(
  evalsRagasCoherenceRequestBody: EvalsRagasCoherenceRequestBody,
): string {
  return JSON.stringify(
    EvalsRagasCoherenceRequestBody$outboundSchema.parse(
      evalsRagasCoherenceRequestBody,
    ),
  );
}

export function evalsRagasCoherenceRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<EvalsRagasCoherenceRequestBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => EvalsRagasCoherenceRequestBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'EvalsRagasCoherenceRequestBody' from JSON`,
  );
}

/** @internal */
export const EvalsRagasCoherenceResponseBody$inboundSchema: z.ZodType<
  EvalsRagasCoherenceResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  value: z.nullable(z.number()),
});

/** @internal */
export type EvalsRagasCoherenceResponseBody$Outbound = {
  value: number | null;
};

/** @internal */
export const EvalsRagasCoherenceResponseBody$outboundSchema: z.ZodType<
  EvalsRagasCoherenceResponseBody$Outbound,
  z.ZodTypeDef,
  EvalsRagasCoherenceResponseBody
> = z.object({
  value: z.nullable(z.number()),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EvalsRagasCoherenceResponseBody$ {
  /** @deprecated use `EvalsRagasCoherenceResponseBody$inboundSchema` instead. */
  export const inboundSchema = EvalsRagasCoherenceResponseBody$inboundSchema;
  /** @deprecated use `EvalsRagasCoherenceResponseBody$outboundSchema` instead. */
  export const outboundSchema = EvalsRagasCoherenceResponseBody$outboundSchema;
  /** @deprecated use `EvalsRagasCoherenceResponseBody$Outbound` instead. */
  export type Outbound = EvalsRagasCoherenceResponseBody$Outbound;
}

export function evalsRagasCoherenceResponseBodyToJSON(
  evalsRagasCoherenceResponseBody: EvalsRagasCoherenceResponseBody,
): string {
  return JSON.stringify(
    EvalsRagasCoherenceResponseBody$outboundSchema.parse(
      evalsRagasCoherenceResponseBody,
    ),
  );
}

export function evalsRagasCoherenceResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<EvalsRagasCoherenceResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => EvalsRagasCoherenceResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'EvalsRagasCoherenceResponseBody' from JSON`,
  );
}
